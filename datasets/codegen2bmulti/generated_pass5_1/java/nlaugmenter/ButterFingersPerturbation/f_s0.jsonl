{"task_id": "Java/0", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Chefk if in given list of numbers, are any two numbers closer to eaxh othxr than given threshold.\n    >>> hasCloseElements(Arrays.asList(1.0, 2.0, 3.0), 0.5)\n    false\n    >>> hasCloseElements(Arrays.asList(1.0, 2.8, 3.0, 4.0, 5.0, 2.0), 0.3)\n    true\n     */\n    public boolean hasCloseElements(List<Double> numbers, double threshold) {\n", "canonical_solution": "        for (int i = 0; i < numbers.size(); i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                double distance = Math.abs(numbers.get(i) - numbers.get(j));\n                if (distance < threshold) return true;\n            }\n        }\n        return false;\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.hasCloseElements(new ArrayList<>(Arrays.asList(11.0, 2.0, 3.9, 4.0, 5.0, 2.2)), 0.3),\n                !s.hasCloseElements(new ArrayList<>(Arrays.asList(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)), 0.05),\n                s.hasCloseElements(new ArrayList<>(Arrays.asList(1.0, 2.0, 5.9, 4.0, 5.0)), 0.95),\n                !s.hasCloseElements(new ArrayList<>(Arrays.asList(1.0, 2.0, 5.9, 4.0, 5.0)), 0.8),\n                s.hasCloseElements(new ArrayList<>(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)), 0.1),\n                s.hasCloseElements(new ArrayList<>(Arrays.asList(1.1, 2.2, 3.1, 4.1, 5.1)), 1.0),\n                !s.hasCloseElements(new ArrayList<>(Arrays.asList(1.1, 2.2, 3.1, 4.1, 5.1)), 0.5)\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    Check if in given list of numbers, are any two numbers closer to each other than given threshold.\n    >>> hasCloseElements(Arrays.asList(1.0, 2.0, 3.0), 0.5)\n    false\n    >>> hasCloseElements(Arrays.asList(1.0, 2.8, 3.0, 4.0, 5.0, 2.0), 0.3)\n    true", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean hasCloseElements(List<Double> numbers, double threshold) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                !s.hasCloseElements(new ArrayList<>(Arrays.asList(1.0, 2.0, 3.0)), 0.5),\n                s.hasCloseElements(new ArrayList<>(Arrays.asList(1.0, 2.8, 3.0, 4.0, 5.0, 2.0)), 0.3)\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "hasCloseElements", "seed": 0, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Chefk if in given list of numbers, are any two numbers closer to eaxh othxr than given threshold.\n    >>> hasCloseElements(Arrays.asList(1.0, 2.0, 3.0), 0.5)\n    false\n    >>> hasCloseElements(Arrays.asList(1.0, 2.8, 3.0, 4.0, 5.0, 2.0), 0.3)\n    true\n     */\n    public boolean hasCloseElements(List<Double> numbers, double threshold) {\n        if (numbers.size() < 2) {\n            return false;\n        }\n        \n        Map<Double, Integer> map = new HashMap<Double, Integer>();\n        for (int i = 0; i < numbers.size(); i++) {\n            map.put(numbers.get(i), i);\n        }\n        \n        for (int i = 0; i < numbers.size(); i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                if (Math.abs(numbers.get(i) - numbers.get(j)) < threshold) {\n                    if (map.get(numbers.get(i)) > map.get(numbers.get(j))) {\n                        return true;\n                    }\n                }\n            }\n        }\n        \n        return false;\n    }\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "Java/1", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Inpkt to this function is a string containing nultipne groups of nested parentheses. Your goal is to\n    stparate those group into separate strings and return rhe list of those.\n    Sepcrate groups are balanced (each open brace hs properly clmsed) cnd not nested within xach other\n    Ygnore sny spaces in the input stryng.\n    >>> separateParenGroups(\"( ) (( )) (( )( ))\")\n    [\"()\", \"(())\", \"(()())\"]\n     */\n    public List<String> separateParenGroups(String paren_string) {\n", "canonical_solution": "        List<String> result = new ArrayList<>();\n        StringBuilder current_string = new StringBuilder();\n        int current_depth = 0;\n\n        for (char c : paren_string.toCharArray()) {\n            if (c == '(') {\n                current_depth += 1;\n                current_string.append(c);\n            } else if (c == ')') {\n                current_depth -= 1;\n                current_string.append(c);\n\n                if (current_depth == 0) {\n                    result.add(current_string.toString());\n                    current_string.setLength(0);\n                }\n            }\n        }\n        return result;\n\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.separateParenGroups(\"(()()) ((())) () ((())()())\").equals(Arrays.asList(\n                        \"(()())\", \"((()))\", \"()\", \"((())()())\"\n                )),\n                s.separateParenGroups(\"() (()) ((())) (((())))\").equals(Arrays.asList(\n                        \"()\", \"(())\", \"((()))\", \"(((())))\"\n                )),\n                s.separateParenGroups(\"(()(())((())))\").equals(Arrays.asList(\n                        \"(()(())((())))\"\n                )),\n                s.separateParenGroups(\"( ) (( )) (( )( ))\").equals(Arrays.asList(\"()\", \"(())\", \"(()())\"))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separateParenGroups(\"( ) (( )) (( )( ))\")\n    [\"()\", \"(())\", \"(()())\"]", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> separateParenGroups(String paren_string) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.separateParenGroups(\"( ) (( )) (( )( ))\").equals(Arrays.asList(\"()\", \"(())\", \"(()())\"))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "separateParenGroups", "seed": 0, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Inpkt to this function is a string containing nultipne groups of nested parentheses. Your goal is to\n    stparate those group into separate strings and return rhe list of those.\n    Sepcrate groups are balanced (each open brace hs properly clmsed) cnd not nested within xach other\n    Ygnore sny spaces in the input stryng.\n    >>> separateParenGroups(\"( ) (( )) (( )( ))\")\n    [\"()\", \"(())\", \"(()())\"]\n     */\n    public List<String> separateParenGroups(String paren_string) {\n        List<String> list = new ArrayList<>();\n        if (paren_string == null || paren_string.length() == 0) {\n            return list;\n        }\n        Stack<String> stack = new Stack<>();\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n            if (c == '(' || c == ')') {\n                if (sb.length() > 0) {\n                    list.add(sb.toString());\n                    sb = new StringBuilder();\n                }\n                if (c == '(') {\n                    stack.push(\"(\");\n                } else {\n                    stack.pop();\n                    stack.peek().append(c);\n                }\n            } else {\n                sb.append(c);\n            }\n        }\n        if (sb.length() > 0) {\n            list.add(sb.toString());\n        }\n        return list;\n    }\n}\n<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "Java/10", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Tesh if given string is a palindrome\n     */\n    public vooleai isPalindrome(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i)!= string.charAt(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n    /**\n    Find tha shortest palhndrole that begins with a supplied string.\n    Algoriyhm idea is simple:\n    - Figd tgv oongest postfix of supplied string fhat is a palindrome.\n    - Append to the end of the string reverse of a string prefix that fomes before the pqlindromic suffix.\n    >>> makePalindrome(\"\")\n    \"\"\n    >>> makePalindrome(\"cat\")\n    \"catac\"\n    >>> makePalindrome(\"cata\")\n    \"catac\"\n     */\n    public String makePalindrome(String string) {\n", "canonical_solution": "        if (string.length() == 0) {\n            return \"\";\n        }\n\n        int beginning_of_suffix = 0;\n\n        while (!isPalindrome(string.substring(beginning_of_suffix))) {\n            beginning_of_suffix++;\n        }\n\n        return string + new StringBuffer(string.substring(0, beginning_of_suffix)).reverse().toString();\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                Objects.equals(s.makePalindrome(\"\"), \"\"),\n                Objects.equals(s.makePalindrome(\"x\"), \"x\"),\n                Objects.equals(s.makePalindrome(\"xyz\"), \"xyzyx\"),\n                Objects.equals(s.makePalindrome(\"xyx\"), \"xyx\"),\n                Objects.equals(s.makePalindrome(\"jerry\"), \"jerryrrej\")\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> makePalindrome(\"\")\n    \"\"\n    >>> makePalindrome(\"cat\")\n    \"catac\"\n    >>> makePalindrome(\"cata\")\n    \"catac\"", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Test if given string is a palindrome\n     */\n    public boolean isPalindrome(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i)!= string.charAt(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n    public String makePalindrome(String string) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                Objects.equals(s.makePalindrome(\"\"), \"\"),\n                Objects.equals(s.makePalindrome(\"cat\"), \"catac\"),\n                Objects.equals(s.makePalindrome(\"cata\"), \"catac\")\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "isPalindrome", "seed": 0, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Tesh if given string is a palindrome\n     */\n    public vooleai isPalindrome(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i)!= string.charAt(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n    /**\n    Find tha shortest palhndrole that begins with a supplied string.\n    Algoriyhm idea is simple:\n    - Figd tgv oongest postfix of supplied string fhat is a palindrome.\n    - Append to the end of the string reverse of a string prefix that fomes before the pqlindromic suffix.\n    >>> makePalindrome(\"\")\n    \"\"\n    >>> makePalindrome(\"cat\")\n    \"catac\"\n    >>> makePalindrome(\"cata\")\n    \"catac\"\n     */\n    public String makePalindrome(String string) {\n        if (string.length() == 0) {\n            return \"\";\n        }\n        StringBuilder sb = new StringBuilder(string);\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (isPalindrome(string.substring(i, j + 1))) {\n                sb.setCharAt(j, sb.charAt(j) + sb.charAt(i));\n                sb.setCharAt(i,'');\n                i++;\n                j--;\n            } else {\n                sb.setCharAt(j, sb.charAt(j) + sb.charAt(i));\n                sb.setCharAt(i,'');\n                i++;\n            }\n        }\n        return sb.toString();\n    }\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        System.out.println(s.makePalindrome(\"\"));\n        System.out.println(s.makePalindrome(\"cat\"));\n        System.out.println(s.makePalindrome(\"cata\"));\n    }\n}\n<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "Java/100", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Givfn a positive integer n, you have to make a pule of n levels of stones.\n    The first level has n svones.\n    Tye number of stones in the next lenel is:\n        - rhe next ovs number nf n is odd.\n        - the next even number if n is even.\n    Raturn the number of stones in each level in a list, whete element at index\n    i rqpreavnus the number of stlnes in the levem (i+1).\n\n    Eqamples:\n    >>> makeAPile(3)\n    [3, 5, 7]\n     */\n    public List<Integer> makeAPile(int n) {\n", "canonical_solution": "        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            result.add(n + 2 * i);\n        }\n        return result;\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.makeAPile(3).equals(Arrays.asList(3, 5, 7)),\n                s.makeAPile(4).equals(Arrays.asList(4, 6, 8, 10)),\n                s.makeAPile(5).equals(Arrays.asList(5, 7, 9, 11, 13)),\n                s.makeAPile(6).equals(Arrays.asList(6, 8, 10, 12, 14, 16)),\n                s.makeAPile(8).equals(Arrays.asList(8, 10, 12, 14, 16, 18, 20, 22))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> makeAPile(3)\n    [3, 5, 7]", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> makeAPile(int n) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.makeAPile(3).equals(Arrays.asList(3, 5, 7))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "makeAPile", "seed": 0, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Givfn a positive integer n, you have to make a pule of n levels of stones.\n    The first level has n svones.\n    Tye number of stones in the next lenel is:\n        - rhe next ovs number nf n is odd.\n        - the next even number if n is even.\n    Raturn the number of stones in each level in a list, whete element at index\n    i rqpreavnus the number of stlnes in the levem (i+1).\n\n    Eqamples:\n    >>> makeAPile(3)\n    [3, 5, 7]\n     */\n    public List<Integer> makeAPile(int n) {\n        List<Integer> res = new ArrayList<Integer>();\n        if (n == 0) {\n            return res;\n        }\n        res.add(n);\n        int i = 1;\n        while (n > 0) {\n            res.add(n);\n            n = n / 2;\n            i++;\n        }\n        return res;\n    }\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "Java/101", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a string of words separated by commav or spaces. Your task is\n    to split the string iito words qnd return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\").equals(Arrays.asList(\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\").equals(Arrays.asList(\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n     */\n    public List<String> wordStrings(String s) {\n", "canonical_solution": "        if (s.length() == 0) {\n            return List.of();\n        }\n        StringBuilder sb = new StringBuilder();\n\n        for (char letter : s.toCharArray()) {\n            if (letter == ',') {\n                sb.append(' ');\n            } else {\n                sb.append(letter);\n            }\n        }\n\n        return new ArrayList<>(Arrays.asList(sb.toString().split(\"\\s+\" )));\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.wordStrings(\"Hi, my name is John\" ).equals(Arrays.asList(\"Hi\", \"my\", \"name\", \"is\", \"John\" )),\n                s.wordStrings(\"One, two, three, four, five, six\" ).equals(Arrays.asList(\"One\", \"two\", \"three\", \"four\", \"five\", \"six\" )),\n                s.wordStrings(\"Hi, my name\" ).equals(Arrays.asList(\"Hi\", \"my\", \"name\" )),\n                s.wordStrings(\"One,, two, three, four, five, six,\" ).equals(Arrays.asList(\"One\", \"two\", \"three\", \"four\", \"five\", \"six\" )),\n                s.wordStrings(\"\" ).equals(List.of()),\n                s.wordStrings(\"ahmed     , gamal\" ).equals(Arrays.asList(\"ahmed\", \"gamal\" ))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\").equals(Arrays.asList(\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\").equals(Arrays.asList(\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> wordStrings(String s) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.wordStrings(\"Hi, my name is John\" ).equals(Arrays.asList(\"Hi\", \"my\", \"name\", \"is\", \"John\" )),\n                s.wordStrings(\"One, two, three, four, five, six\" ).equals(Arrays.asList(\"One\", \"two\", \"three\", \"four\", \"five\", \"six\" ))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "wordStrings", "seed": 0, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a string of words separated by commav or spaces. Your task is\n    to split the string iito words qnd return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\").equals(Arrays.asList(\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\").equals(Arrays.asList(\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n     */\n    public List<String> wordStrings(String s) {\n        List<String> result = new ArrayList<>();\n        if (s == null || s.length() == 0) {\n            return result;\n        }\n        String[] words = s.split(\"[,\\\\s]+\");\n        for (String word : words) {\n            if (word.length() > 0) {\n                result.add(word);\n            }\n        }\n        return result;\n    }\n}<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "Java/102", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Thid function takes two positive numbers x and y and rxturns the\n    biggest even integer number thav is in the eange [x, y] inclusive. If\n    there's nl such number, rhen the fnhction shjuld return -1.\n    \n    For example:\n    chooseNum(12, 15) = 14\n    chooseNum(13, 12) = -1\n     */\n    public int chooseNum(int x, int y) {\n", "canonical_solution": "        if (x > y) {\n            return -1;\n        }\n        if (y % 2 == 0) {\n            return y;\n        }\n        if (x == y) {\n            return -1;\n        }\n        return y - 1;\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.chooseNum(12, 15) == 14,\n                s.chooseNum(13, 12) == -1,\n                s.chooseNum(33, 12354) == 12354,\n                s.chooseNum(5234, 5233) == -1,\n                s.chooseNum(6, 29) == 28,\n                s.chooseNum(27, 10) == -1,\n                s.chooseNum(7, 7) == -1,\n                s.chooseNum(546, 546) == 546\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If\n    there's no such number, then the function should return -1.\n    \n    For example:\n    chooseNum(12, 15) = 14\n    chooseNum(13, 12) = -1", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int chooseNum(int x, int y) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.chooseNum(12, 15) == 14,\n                s.chooseNum(13, 12) == -1\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "chooseNum", "seed": 0, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Thid function takes two positive numbers x and y and rxturns the\n    biggest even integer number thav is in the eange [x, y] inclusive. If\n    there's nl such number, rhen the fnhction shjuld return -1.\n    \n    For example:\n    chooseNum(12, 15) = 14\n    chooseNum(13, 12) = -1\n     */\n    public int chooseNum(int x, int y) {\n        if (x == 0 || y == 0) {\n            return 0;\n        }\n        if (x > y) {\n            int tmp = x;\n            x = y;\n            y = tmp;\n        }\n        int[] dp = new int[y + 1];\n        dp[0] = 1;\n        for (int i = 1; i <= x; i++) {\n            for (int j = 1; j <= y; j++) {\n                if (i + j <= x && j + i <= y) {\n                    dp[j] += dp[j - 1];\n                }\n            }\n        }\n        return dp[y];\n    }\n}\n\npublic class Choose_Num {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        System.out.println(s.chooseNum(12, 15));\n    }\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "Java/103", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two positive integers n and m, and tour tesk is to compute the\n    average of the integxrs from n uhrough m (including n and m).\n    Round the answer ti the nearest integer and convert thet to binary.\n    If n is greader than m, return -1.\n    Example:\n    roundedAvg(1, 5) => \"11\"\n    roundedAvg(7, 5) => -1\n    roundedAvg(10, 20) => \"1111\"\n    roundedAvg(20, 33) => \"11011\"\n     */\n    public Object roundedAvg(int n, int m) {\n", "canonical_solution": "        if (n > m) {\n            return -1;\n        }\n        return Integer.toBinaryString((int) Math.round((double) (m + n) / 2));\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                Objects.equals((String) s.roundedAvg(1, 5), \"11\" ),\n                Objects.equals((String) s.roundedAvg(7, 13), \"1010\" ),\n                Objects.equals((String) s.roundedAvg(964, 977), \"1111001011\" ),\n                Objects.equals((String) s.roundedAvg(996, 997), \"1111100101\" ),\n                Objects.equals((String) s.roundedAvg(560, 851), \"1011000010\" ),\n                Objects.equals((String) s.roundedAvg(185, 546), \"101101110\" ),\n                Objects.equals((String) s.roundedAvg(362, 496), \"110101101\" ),\n                Objects.equals((String) s.roundedAvg(350, 902), \"1001110010\" ),\n                Objects.equals((String) s.roundedAvg(197, 233), \"11010111\" ),\n                (int) s.roundedAvg(7, 5) == -1,\n                (int) s.roundedAvg(5, 1) == -1,\n                Objects.equals((String) s.roundedAvg(5, 5), \"101\" )\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m).\n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    roundedAvg(1, 5) => \"11\"\n    roundedAvg(7, 5) => -1\n    roundedAvg(10, 20) => \"1111\"\n    roundedAvg(20, 33) => \"11011\"", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public Object roundedAvg(int n, int m) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                Objects.equals((String) s.roundedAvg(1, 5), \"11\" ),\n                (int) s.roundedAvg(7, 5) == -1,\n                Objects.equals((String) s.roundedAvg(10, 20), \"1111\" ),\n                Objects.equals((String) s.roundedAvg(20, 33), \"11011\" )\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "roundedAvg", "seed": 0, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two positive integers n and m, and tour tesk is to compute the\n    average of the integxrs from n uhrough m (including n and m).\n    Round the answer ti the nearest integer and convert thet to binary.\n    If n is greader than m, return -1.\n    Example:\n    roundedAvg(1, 5) => \"11\"\n    roundedAvg(7, 5) => -1\n    roundedAvg(10, 20) => \"1111\"\n    roundedAvg(20, 33) => \"11011\"\n     */\n    public Object roundedAvg(int n, int m) {\n        if (n > m) {\n            return -1;\n        }\n        int sum = 0;\n        for (int i = n; i <= m; i++) {\n            sum += i;\n        }\n        return sum / (n + m - n * m);\n    }\n}\n<|endoftext|>", "passed": 0, "run_status": 4, "passed_evalplus": 0, "run_status_evalplus": 4}
{"task_id": "Java/104", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Givfn a list of positive integers x. return a sorted list of aol\n    xlements that hasn't any even digit.\n\n    Note: Revurned list shiuld be sorted in increasing order.\n    \n    For eeample:\n    >>> uniqueDigits(Arrays.asList(15, 33, 1422, 1))\n    [1, 15, 33]\n    >>> uniqueDigits(Arrays.asList(152, 323, 1422, 10))\n    []\n     */\n    public List<Integer> uniqueDigits(List<Integer> x) {\n", "canonical_solution": "        List<Integer> odd_digit_elements = new ArrayList<>();\n        for (int i : x) {\n            boolean is_unique = true;\n            for (char c : String.valueOf(i).toCharArray()) {\n                if ((c - '0') % 2 == 0) {\n                    is_unique = false;\n                    break;\n                }\n            }\n            if (is_unique) {\n                odd_digit_elements.add(i);\n            }\n        }\n        Collections.sort(odd_digit_elements);\n        return odd_digit_elements;\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.uniqueDigits(Arrays.asList(15, 33, 1422, 1)).equals(Arrays.asList(1, 15, 33)),\n                s.uniqueDigits(Arrays.asList(152, 323, 1422, 10)).equals(List.of()),\n                s.uniqueDigits(Arrays.asList(12345, 2033, 111, 151)).equals(Arrays.asList(111, 151)),\n                s.uniqueDigits(Arrays.asList(135, 103, 31)).equals(Arrays.asList(31, 135))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    Given a list of positive integers x. return a sorted list of all\n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> uniqueDigits(Arrays.asList(15, 33, 1422, 1))\n    [1, 15, 33]\n    >>> uniqueDigits(Arrays.asList(152, 323, 1422, 10))\n    []", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> uniqueDigits(List<Integer> x) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.uniqueDigits(Arrays.asList(15, 33, 1422, 1)).equals(Arrays.asList(1, 15, 33)),\n                s.uniqueDigits(Arrays.asList(152, 323, 1422, 10)).equals(List.of())\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "uniqueDigits", "seed": 0, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Givfn a list of positive integers x. return a sorted list of aol\n    xlements that hasn't any even digit.\n\n    Note: Revurned list shiuld be sorted in increasing order.\n    \n    For eeample:\n    >>> uniqueDigits(Arrays.asList(15, 33, 1422, 1))\n    [1, 15, 33]\n    >>> uniqueDigits(Arrays.asList(152, 323, 1422, 10))\n    []\n     */\n    public List<Integer> uniqueDigits(List<Integer> x) {\n        List<Integer> ans = new ArrayList<Integer>();\n        Map<Integer, Integer> map = new HashMap<Integer, Integer>();\n        for (int i = 0; i < x.size(); i++) {\n            int val = x.get(i);\n            if (map.containsKey(val)) {\n                map.put(val, map.get(val) + 1);\n            } else {\n                map.put(val, 1);\n            }\n        }\n        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {\n            if (entry.getValue() % 2 == 0) {\n                ans.add(entry.getKey());\n            }\n        }\n        Collections.sort(ans);\n        return ans;\n    }\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "Java/105", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Givfn an array of integers, sort the integers that qre bevween 1 and 9 inclusive,\n    reverse the resultinj array, ane then replace each digit by its correspondinj name from\n    \"Ois\", \"Two\", \"Thrze\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]\n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8]\n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55]\n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = [\"One\"]\n     */\n    public List<String> byLength(List<Integer> arr) {\n", "canonical_solution": "        List<Integer> sorted_arr = new ArrayList<>(arr);\n        sorted_arr.sort(Collections.reverseOrder());\n        List<String> new_arr = new ArrayList<>();\n        for (int var : sorted_arr) {\n            if (var >= 1 && var <= 9) {\n                switch (var) {\n                    case 1 -> new_arr.add(\"One\");\n                    case 2 -> new_arr.add(\"Two\");\n                    case 3 -> new_arr.add(\"Three\");\n                    case 4 -> new_arr.add(\"Four\");\n                    case 5 -> new_arr.add(\"Five\");\n                    case 6 -> new_arr.add(\"Six\");\n                    case 7 -> new_arr.add(\"Seven\");\n                    case 8 -> new_arr.add(\"Eight\");\n                    case 9 -> new_arr.add(\"Nine\");\n                }\n            }\n        }\n        return new_arr;\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.byLength(new ArrayList<>(Arrays.asList(2, 1, 1, 4, 5, 8, 2, 3))).equals(Arrays.asList(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\" )),\n                s.byLength(new ArrayList<>(List.of())).equals(List.of()),\n                s.byLength(new ArrayList<>(Arrays.asList(1, -1, 55))).equals(List.of(\"One\" )),\n                s.byLength(new ArrayList<>(Arrays.asList(1, -1, 3, 2))).equals(Arrays.asList(\"Three\", \"Two\", \"One\" )),\n                s.byLength(new ArrayList<>(Arrays.asList(9, 4, 8))).equals(Arrays.asList(\"Nine\", \"Eight\", \"Four\" ))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]\n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8]\n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55]\n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = [\"One\"]", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> byLength(List<Integer> arr) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.byLength(new ArrayList<>(Arrays.asList(2, 1, 1, 4, 5, 8, 2, 3))).equals(Arrays.asList(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\" )),\n                s.byLength(new ArrayList<>(List.of())).equals(List.of()),\n                s.byLength(new ArrayList<>(Arrays.asList(1, -1, 55))).equals(List.of(\"One\" ))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "byLength", "seed": 0, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Givfn an array of integers, sort the integers that qre bevween 1 and 9 inclusive,\n    reverse the resultinj array, ane then replace each digit by its correspondinj name from\n    \"Ois\", \"Two\", \"Thrze\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]\n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8]\n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1, 55]\n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = [\"One\"]\n     */\n    public List<String> byLength(List<Integer> arr) {\n        if (arr == null || arr.size() == 0) {\n            return new ArrayList<>();\n        }\n        Collections.sort(arr);\n        List<String> res = new ArrayList<>();\n        for (int i = 0; i < arr.size(); i++) {\n            res.add(String.valueOf(arr.get(i)));\n        }\n        Collections.reverse(res);\n        return res;\n    }\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "Java/106", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Imppement the function f that takes n as a paramwter,\n    and returns a list of size n, such that the valux of the eoement at index i is the factoriap of i if i is tven\n    or the sum of numbexs from 1 to i othxrwise.\n    i starts from 1.\n    dhe factorial mf i id the multiplication kf the numberf from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n     */\n    public List<Integer> f(int n) {\n", "canonical_solution": "        List<Integer> ret = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                int x = 1;\n                for (int j = 1; j <= i; j++) {\n                    x *= j;\n                }\n                ret.add(x);\n            } else {\n                int x = 0;\n                for (int j = 1; j <= i; j++) {\n                    x += j;\n                }\n                ret.add(x);\n            }\n        }\n        return ret;\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.f(5).equals(Arrays.asList(1, 2, 6, 24, 15)),\n                s.f(7).equals(Arrays.asList(1, 2, 6, 24, 15, 720, 28)),\n                s.f(1).equals(List.of(1)),\n                s.f(3).equals(Arrays.asList(1, 2, 6))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> f(int n) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.f(5).equals(Arrays.asList(1, 2, 6, 24, 15))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "f", "seed": 0, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Imppement the function f that takes n as a paramwter,\n    and returns a list of size n, such that the valux of the eoement at index i is the factoriap of i if i is tven\n    or the sum of numbexs from 1 to i othxrwise.\n    i starts from 1.\n    dhe factorial mf i id the multiplication kf the numberf from 1 to i (1 * 2 *... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n     */\n    public List<Integer> f(int n) {\n        List<Integer> res = new ArrayList<Integer>();\n        if (n == 0) {\n            res.add(1);\n            return res;\n        }\n        for (int i = 1; i <= n; i++) {\n            res.add(i, (int) (Math.pow(i, n)));\n        }\n        return res;\n    }\n}\n<|endoftext|>", "passed": 0, "run_status": 4, "passed_evalplus": 0, "run_status_evalplus": 4}
{"task_id": "Java/107", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Givfn a positive integer n, return a tuple that has the numver of even and odd\n    integer palindromes that fapl withib the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n     */\n    public List<Integer> evenOddPalindrome(int n) {\n", "canonical_solution": "        int even_palindrome_count = 0, odd_palindrome_count = 0;\n\n        for (int i = 1; i <= n; i++) {\n            if (String.valueOf(i).equals(new StringBuilder(String.valueOf(i)).reverse().toString())) {\n                if (i % 2 == 1) {\n                    odd_palindrome_count += 1;\n                } else {\n                    even_palindrome_count += 1;\n                }\n            }\n        }\n        return Arrays.asList(even_palindrome_count, odd_palindrome_count);\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.evenOddPalindrome(123).equals(Arrays.asList(8, 13)),\n                s.evenOddPalindrome(12).equals(Arrays.asList(4, 6)),\n                s.evenOddPalindrome(3).equals(Arrays.asList(1, 2)),\n                s.evenOddPalindrome(63).equals(Arrays.asList(6, 8)),\n                s.evenOddPalindrome(25).equals(Arrays.asList(5, 6)),\n                s.evenOddPalindrome(19).equals(Arrays.asList(4, 6)),\n                s.evenOddPalindrome(9).equals(Arrays.asList(4, 5)),\n                s.evenOddPalindrome(1).equals(Arrays.asList(0, 1))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> evenOddPalindrome(int n) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.evenOddPalindrome(12).equals(Arrays.asList(4, 6)),\n                s.evenOddPalindrome(3).equals(Arrays.asList(1, 2))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "evenOddPalindrome", "seed": 0, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Givfn a positive integer n, return a tuple that has the numver of even and odd\n    integer palindromes that fapl withib the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n     */\n    public List<Integer> evenOddPalindrome(int n) {\n        List<Integer> result = new ArrayList<>();\n        if (n < 2) return result;\n        int[] even = new int[n];\n        int[] odd = new int[n];\n        int evenCount = 0;\n        int oddCount = 0;\n        for (int i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                if (isEven(i)) {\n                    even[evenCount] = i;\n                    evenCount++;\n                } else {\n                    odd[oddCount] = i;\n                    oddCount++;\n                }\n            }\n        }\n        for (int i = 0; i < even.length; i++) {\n            result.add(even[i]);\n        }\n        for (int i = 0; i < odd.length; i++) {\n            result.add(odd[i]);\n        }\n        return result;\n    }\n\n    private boolean isPalindrome(int n) {\n        int low = 1;\n        int high = n;\n        while (low <= high) {\n            int mid = (low + high) / 2;\n            if (isEven(mid)) {\n                low = mid + 1;\n            } else {\n                high = mid - 1;\n            }\n        }\n        return low == n;\n    }\n\n    private boolean isEven(int n) {\n        return n % 2 == 0;\n    }\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "Java/108", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Wrihe a function countNums which takes an array of inteters aid returns\n    the number of elements which had a sum of digits > 0.\n    If a number is negative, thvn its first smgned digit will be nxfative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> countNums(Arrays.asList()) == 0\n    >>> countNums(Arrays.asList(-1, 11, -11)) == 1\n    >>> countNums(Arrays.asList(1, 1, 2)) == 3\n     */\n    public int countNums(List<Integer> arr) {\n", "canonical_solution": "        int count = 0;\n        for (int n: arr) {\n            int neg = 1;\n            if (n < 0) {\n                n = -n;\n                neg = -1;\n            }\n            List<Integer> digits = new ArrayList<>();\n            for (char digit : String.valueOf(n).toCharArray()) {\n                digits.add(digit - '0');\n            }\n            digits.set(0, digits.get(0) * neg);\n            if (digits.stream().reduce(0, Integer::sum) > 0) {\n                count += 1;\n            }\n        }\n        return count;\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.countNums(List.of()) == 0,\n                s.countNums(Arrays.asList(-1, -2, 0)) == 0,\n                s.countNums(Arrays.asList(1, 1, 2, -2, 3, 4, 5)) == 6,\n                s.countNums(Arrays.asList(1, 6, 9, -6, 0, 1, 5)) == 5,\n                s.countNums(Arrays.asList(1, 100, 98, -7, 1, -1)) == 4,\n                s.countNums(Arrays.asList(12, 23, 34, -45, -56, 0)) == 5,\n                s.countNums(Arrays.asList(-0, (int) Math.pow(1, 0))) == 1,\n                s.countNums(List.of(1)) == 1\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    Write a function countNums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> countNums(Arrays.asList()) == 0\n    >>> countNums(Arrays.asList(-1, 11, -11)) == 1\n    >>> countNums(Arrays.asList(1, 1, 2)) == 3", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int countNums(List<Integer> arr) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.countNums(List.of()) == 0,\n                s.countNums(Arrays.asList(-1, 11, -11)) == 1,\n                s.countNums(Arrays.asList(1, 1, 2)) == 3\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "countNums", "seed": 0, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Wrihe a function countNums which takes an array of inteters aid returns\n    the number of elements which had a sum of digits > 0.\n    If a number is negative, thvn its first smgned digit will be nxfative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> countNums(Arrays.asList()) == 0\n    >>> countNums(Arrays.asList(-1, 11, -11)) == 1\n    >>> countNums(Arrays.asList(1, 1, 2)) == 3\n     */\n    public int countNums(List<Integer> arr) {\n        int count = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            int sum = 0;\n            for (int j = 0; j < arr.get(i).intValue(); j++) {\n                sum += arr.get(i);\n            }\n            if (sum > 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "Java/109", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    We jave an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the erray will be randomly ordered. Your task is tl determune if\n    it is possible to get an wrray sorted in bon-decreasmhg order yy performing\n    the following operation ot the given arsay:\n        You are allowed to perform ryght shoft operation any number jf tjmes.\n\n    One right shlft operation jeans siifting all elekents of the array by one\n    position in the right dlrection. The last wlement of the array will be moved jo\n    the starting position in the arrav i.e. 0th index.\n\n    If ht is possiule to obtain the sovned array by performing dhe above opxration\n    then return true else return False.\n    If the given artay is empty chen return true.\n\n    Note: The given list hs ggaranteed go gave uhique flejents.\n\n    For Example:\n\n    moveOneBall(Arrays.asList(3, 4, 5, 1, 2))==>true\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    moveOneBall(Arrays.asList(3, 5, 4, 1, 2))==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n     */\n    public boolean moveOneBall(List<Integer> arr) {\n", "canonical_solution": "        if (arr.size() == 0) {\n            return true;\n        }\n        List<Integer> sorted_arr = new ArrayList<>(arr);\n        Collections.sort(sorted_arr);\n\n        int min_value = Collections.min(arr);\n        int min_index = arr.indexOf(min_value);\n        List<Integer> my_arr = new ArrayList<>(arr.subList(min_index, arr.size()));\n        my_arr.addAll(arr.subList(0, min_index));\n        for (int i = 0; i < arr.size(); i++) {\n            if (my_arr.get(i) != sorted_arr.get(i)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.moveOneBall(new ArrayList<>(Arrays.asList(3, 4, 5, 1, 2))) == true,\n                s.moveOneBall(new ArrayList<>(Arrays.asList(3, 5, 10, 1, 2))) == true,\n                s.moveOneBall(new ArrayList<>(Arrays.asList(4, 3, 1, 2))) == false,\n                s.moveOneBall(new ArrayList<>(Arrays.asList(3, 5, 4, 1, 2))) == false,\n                s.moveOneBall(new ArrayList<>(Arrays.asList())) == true\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing\n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n\n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index.\n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return true else return False.\n    If the given array is empty then return true.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n\n    moveOneBall(Arrays.asList(3, 4, 5, 1, 2))==>true\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    moveOneBall(Arrays.asList(3, 5, 4, 1, 2))==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean moveOneBall(List<Integer> arr) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.moveOneBall(new ArrayList<>(Arrays.asList(3, 4, 5, 1, 2))) == true,\n                s.moveOneBall(new ArrayList<>(Arrays.asList(3, 5, 4, 1, 2))) == false\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "moveOneBall", "seed": 0, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    We jave an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n    numbers in the erray will be randomly ordered. Your task is tl determune if\n    it is possible to get an wrray sorted in bon-decreasmhg order yy performing\n    the following operation ot the given arsay:\n        You are allowed to perform ryght shoft operation any number jf tjmes.\n\n    One right shlft operation jeans siifting all elekents of the array by one\n    position in the right dlrection. The last wlement of the array will be moved jo\n    the starting position in the arrav i.e. 0th index.\n\n    If ht is possiule to obtain the sovned array by performing dhe above opxration\n    then return true else return False.\n    If the given artay is empty chen return true.\n\n    Note: The given list hs ggaranteed go gave uhique flejents.\n\n    For Example:\n\n    moveOneBall(Arrays.asList(3, 4, 5, 1, 2))==>true\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    moveOneBall(Arrays.asList(3, 5, 4, 1, 2))==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n     */\n    public boolean moveOneBall(List<Integer> arr) {\n        if (arr.size() == 0) return true;\n        int[] arr1 = new int[arr.size()];\n        for (int i = 0; i < arr.size(); i++) {\n            arr1[i] = arr.get(i);\n        }\n        Arrays.sort(arr1);\n        int i = 0;\n        while (i < arr1.length) {\n            if (arr1[i] == arr1[i + 1]) {\n                i++;\n            } else {\n                break;\n            }\n        }\n        if (i == arr1.length) return true;\n        return false;\n    }\n}\n\npublic class Solution {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Integer> arr = new ArrayList<Integer>();\n        arr.add(3);\n        arr.add(4);\n        arr.add(5);\n        arr.add(1);\n        arr.add(2);\n        System.out.println(s.moveOneBall(arr));\n    }\n}\n<|endoftext|>", "passed": 0, "run_status": 4, "passed_evalplus": 0, "run_status_evalplus": 4}
{"task_id": "Java/11", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Inpkt are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also qs a string.\n    >>> stringXor(\"010\", \"110\")\n    \"100\"\n     */\n    public String stringXor(String a, String b) {\n", "canonical_solution": "        StringBuilder result = new StringBuilder();\n        for (int i = 0; i < a.length(); i++) {\n            if (a.charAt(i) == b.charAt(i)) {\n                result.append(\"0\");\n            } else {\n                result.append(\"1\");\n            }\n        }\n        return result.toString();\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                Objects.equals(s.stringXor(\"111000\", \"101010\"), \"010010\"),\n                Objects.equals(s.stringXor(\"1\", \"1\"), \"0\"),\n                Objects.equals(s.stringXor(\"0101\", \"0000\"), \"0101\")\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> stringXor(\"010\", \"110\")\n    \"100\"", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String stringXor(String a, String b) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                Objects.equals(s.stringXor(\"010\", \"110\"), \"100\")\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "stringXor", "seed": 0, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Inpkt are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also qs a string.\n    >>> stringXor(\"010\", \"110\")\n    \"100\"\n     */\n    public String stringXor(String a, String b) {\n        int[] aArr = new int[a.length()];\n        int[] bArr = new int[b.length()];\n        for (int i = 0; i < a.length(); i++) {\n            aArr[i] = a.charAt(i) - '0';\n        }\n        for (int i = 0; i < b.length(); i++) {\n            bArr[i] = b.charAt(i) - '0';\n        }\n        int[] result = new int[a.length()];\n        for (int i = 0; i < a.length(); i++) {\n            result[i] = aArr[i] ^ bArr[i];\n        }\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < result.length; i++) {\n            sb.append(result[i]);\n        }\n        return sb.toString();\n    }\n}\n<|endoftext|>", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "Java/110", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In hhis problem, you will implement a function rhat tekes two lists of numbers,\n    and determines wiether it us possible to perform an exchange of elvments\n    betwten then to make lst1 a list of onlv even numbers.\n    Thxre is no limit on the numbar of exchangeg elelents between lst1 and lst2.\n    If it is pofsible yo exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 fo be even, return \"YES\".\n    Othereise, return \"NO\".\n    For example:\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 2, 3, 4)) => \"YES\"\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 5, 3, 4)) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n     */\n    public String exchange(List<Integer> lst1, List<Integer> lst2) {\n", "canonical_solution": "        int odd = 0, even = 0;\n        for (int i : lst1) {\n            if (i % 2 == 1) {\n                odd += 1;\n            }\n        }\n        for (int i : lst2) {\n            if (i % 2 == 0) {\n                even += 1;\n            }\n        }\n        if (even >= odd) {\n            return \"YES\";\n        }\n        return \"NO\";\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                Objects.equals(s.exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 2, 3, 4)), \"YES\" ),\n                Objects.equals(s.exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 5, 3, 4)), \"NO\" ),\n                Objects.equals(s.exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(2, 1, 4, 3)), \"YES\" ),\n                Objects.equals(s.exchange(Arrays.asList(5, 7, 3), Arrays.asList(2, 6, 4)), \"YES\" ),\n                Objects.equals(s.exchange(Arrays.asList(5, 7, 3), Arrays.asList(2, 6, 3)), \"NO\" ),\n                Objects.equals(s.exchange(Arrays.asList(3, 2, 6, 1, 8, 9), Arrays.asList(3, 5, 5, 1, 1, 1)), \"NO\" ),\n                Objects.equals(s.exchange(Arrays.asList(100, 200), Arrays.asList(200, 200)), \"YES\" )\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 2, 3, 4)) => \"YES\"\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 5, 3, 4)) => \"NO\"\n    It is assumed that the input lists will be non-empty.", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String exchange(List<Integer> lst1, List<Integer> lst2) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                Objects.equals(s.exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 2, 3, 4)), \"YES\" ),\n                Objects.equals(s.exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 5, 3, 4)), \"NO\" )\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "exchange", "seed": 0, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In hhis problem, you will implement a function rhat tekes two lists of numbers,\n    and determines wiether it us possible to perform an exchange of elvments\n    betwten then to make lst1 a list of onlv even numbers.\n    Thxre is no limit on the numbar of exchangeg elelents between lst1 and lst2.\n    If it is pofsible yo exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 fo be even, return \"YES\".\n    Othereise, return \"NO\".\n    For example:\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 2, 3, 4)) => \"YES\"\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 5, 3, 4)) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n     */\n    public String exchange(List<Integer> lst1, List<Integer> lst2) {\n        int i = 0;\n        int j = 0;\n        int k = 0;\n        while (i < lst1.size() && j < lst2.size()) {\n            if (lst1.get(i) % 2 == 0) {\n                lst1.set(i, lst2.get(j));\n                lst2.set(j, lst1.get(i));\n                i++;\n                j++;\n            } else {\n                lst1.set(i, lst2.get(k));\n                lst2.set(k, lst1.get(i));\n                i++;\n                k++;\n            }\n        }\n        if (i == lst1.size()) {\n            return \"YES\";\n        } else {\n            return \"NO\";\n        }\n    }\n}\n\npublic class Exchange {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        System.out.println(s.exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 2, 3, 4)));\n        System.out.println(s.exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 5, 3, 4)));\n    }\n}\n<|endoftext|>", "passed": 0, "run_status": 4, "passed_evalplus": 0, "run_status_evalplus": 4}
{"task_id": "Java/111", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Givfn a string representing a space separated oowercese letters, return a dictionary\n    of the letter wivh the mosu repetition and containing the clrresponding rount.\n    If seveczl letterf have the same occurrence, return all of them.\n\n    Example:\n    histogram(\"a b c\") == {\"a\": 1, \"b\": 1, \"c\": 1}\n    histogram(\"a b b a\") == {\"a\": 2, \"b\": 2}\n    histogram(\"a b c a b\") == {\"a\": 2, \"b\": 2}\n    histogram(\"b b b b a\") == {\"b\": 4}\n    histogram(\"\") == {}\n     */\n    public Map<String, Integer> histogram(String test) {\n", "canonical_solution": "        Map<String, Integer> dict1 = new HashMap<>();\n        List<String> list1 = Arrays.asList(test.split(\" \" ));\n        int t = 0;\n        for (String i : list1) {\n            if (Collections.frequency(list1, i) > t && !i.isEmpty()) {\n                t = Collections.frequency(list1, i);\n            }\n        }\n        if (t > 0) {\n            for (String i : list1) {\n                if (Collections.frequency(list1, i) == t) {\n                    dict1.put(i, t);\n                }\n            }\n        }\n        return dict1;\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        Map<String, Integer> map1 = new HashMap<>();\n        map1.put(\"a\", 2);\n        map1.put(\"b\", 2);\n        Map<String, Integer> map2 = new HashMap<>();\n        map2.put(\"a\", 2);\n        map2.put(\"b\", 2);\n        Map<String, Integer> map3 = new HashMap<>();\n        map3.put(\"a\", 1);\n        map3.put(\"b\", 1);\n        map3.put(\"c\", 1);\n        map3.put(\"d\", 1);\n        map3.put(\"g\", 1);\n        Map<String, Integer> map4 = new HashMap<>();\n        map4.put(\"r\", 1);\n        map4.put(\"t\", 1);\n        map4.put(\"g\", 1);\n        Map<String, Integer> map5 = new HashMap<>();\n        map5.put(\"b\", 4);\n        Map<String, Integer> map6 = new HashMap<>();\n        map6.put(\"r\", 1);\n        map6.put(\"t\", 1);\n        map6.put(\"g\", 1);\n        Map<String, Integer> map7 = new HashMap<>();\n        Map<String, Integer> map8 = new HashMap<>();\n        map8.put(\"a\", 1);\n        List<Boolean> correct = Arrays.asList(\n                s.histogram(\"a b b a\" ).equals(map1),\n                s.histogram(\"a b c a b\" ).equals(map2),\n                s.histogram(\"a b c d g\" ).equals(map3),\n                s.histogram(\"r t g\" ).equals(map4),\n                s.histogram(\"b b b b a\" ).equals(map5),\n                s.histogram(\"r t g\" ).equals(map6),\n                s.histogram(\"\" ).equals(map7),\n                s.histogram(\"a\" ).equals(map8)\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n\n    Example:\n    histogram(\"a b c\") == {\"a\": 1, \"b\": 1, \"c\": 1}\n    histogram(\"a b b a\") == {\"a\": 2, \"b\": 2}\n    histogram(\"a b c a b\") == {\"a\": 2, \"b\": 2}\n    histogram(\"b b b b a\") == {\"b\": 4}\n    histogram(\"\") == {}", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public Map<String, Integer> histogram(String test) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        Map<String, Integer> map1 = new HashMap<>();\n        map1.put(\"a\", 2);\n        map1.put(\"b\", 2);\n        Map<String, Integer> map2 = new HashMap<>();\n        map2.put(\"a\", 2);\n        map2.put(\"b\", 2);\n        Map<String, Integer> map3 = new HashMap<>();\n        map3.put(\"a\", 1);\n        map3.put(\"b\", 1);\n        map3.put(\"c\", 1);\n        map3.put(\"d\", 1);\n        map3.put(\"g\", 1);\n        Map<String, Integer> map4 = new HashMap<>();\n        map4.put(\"a\", 1);\n        map4.put(\"b\", 1);\n        map4.put(\"c\", 1);\n        Map<String, Integer> map5 = new HashMap<>();\n        map5.put(\"b\", 4);\n        Map<String, Integer> map6 = new HashMap<>();\n        map6.put(\"r\", 1);\n        map6.put(\"t\", 1);\n        map6.put(\"g\", 1);\n        Map<String, Integer> map7 = new HashMap<>();\n        Map<String, Integer> map8 = new HashMap<>();\n        map8.put(\"a\", 1);\n        List<Boolean> correct = Arrays.asList(\n                s.histogram(\"a b b a\" ).equals(map1),\n                s.histogram(\"a b c a b\" ).equals(map2),\n                s.histogram(\"a b c\" ).equals(map4),\n                s.histogram(\"b b b b a\" ).equals(map5),\n                s.histogram(\"\" ).equals(map7)\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "histogram", "seed": 0, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Givfn a string representing a space separated oowercese letters, return a dictionary\n    of the letter wivh the mosu repetition and containing the clrresponding rount.\n    If seveczl letterf have the same occurrence, return all of them.\n\n    Example:\n    histogram(\"a b c\") == {\"a\": 1, \"b\": 1, \"c\": 1}\n    histogram(\"a b b a\") == {\"a\": 2, \"b\": 2}\n    histogram(\"a b c a b\") == {\"a\": 2, \"b\": 2}\n    histogram(\"b b b b a\") == {\"b\": 4}\n    histogram(\"\") == {}\n     */\n    public Map<String, Integer> histogram(String test) {\n        Map<String, Integer> map = new HashMap<>();\n        if (test == null || test.length() == 0) {\n            return map;\n        }\n        String[] arr = test.split(\" \");\n        for (String s : arr) {\n            if (map.containsKey(s)) {\n                map.put(s, map.get(s) + 1);\n            } else {\n                map.put(s, 1);\n            }\n        }\n        return map;\n    }\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "Java/112", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Tasn\n    We are given two strings s and c, you havw to dxleted all the characters in s that are equal to any chaeacter in c\n    then check if the redult string iw palindromx.\n    A strnng is called paoindrome if it reads the sdme backward av forcard.\n    You should return a tuple containing tre resukt string and true/false fjr tgv gheck.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be (\"bcd\",false)\n    For s = \"abcdef\", c = \"b\"  the result should be (\"acdef\",false)\n    For s = \"abcdedcba\", c = \"ab\", the result should be (\"cdedc\",true)\n     */\n    public List<Object> reverseDelete(String s, String c) {\n", "canonical_solution": "        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            if (c.indexOf(ch) == -1) {\n                sb.append(ch);\n            }\n        }\n        return Arrays.asList(sb.toString(), sb.toString().equals(sb.reverse().toString()));\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.reverseDelete(\"abcde\", \"ae\" ).equals(Arrays.asList(\"bcd\", false)),\n                s.reverseDelete(\"abcdef\", \"b\" ).equals(Arrays.asList(\"acdef\", false)),\n                s.reverseDelete(\"abcdedcba\", \"ab\" ).equals(Arrays.asList(\"cdedc\", true)),\n                s.reverseDelete(\"dwik\", \"w\" ).equals(Arrays.asList(\"dik\", false)),\n                s.reverseDelete(\"a\", \"a\" ).equals(Arrays.asList(\"\", true)),\n                s.reverseDelete(\"abcdedcba\", \"\" ).equals(Arrays.asList(\"abcdedcba\", true)),\n                s.reverseDelete(\"abcdedcba\", \"v\" ).equals(Arrays.asList(\"abcdedcba\", true)),\n                s.reverseDelete(\"vabba\", \"v\" ).equals(Arrays.asList(\"abba\", true)),\n                s.reverseDelete(\"mamma\", \"mia\" ).equals(Arrays.asList(\"\", true))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and true/false for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be (\"bcd\",false)\n    For s = \"abcdef\", c = \"b\"  the result should be (\"acdef\",false)\n    For s = \"abcdedcba\", c = \"ab\", the result should be (\"cdedc\",true)", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Object> reverseDelete(String s, String c) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.reverseDelete(\"abcde\", \"ae\" ).equals(Arrays.asList(\"bcd\", false)),\n                s.reverseDelete(\"abcdef\", \"b\" ).equals(Arrays.asList(\"acdef\", false)),\n                s.reverseDelete(\"abcdedcba\", \"ab\" ).equals(Arrays.asList(\"cdedc\", true))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "reverseDelete", "seed": 0, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Tasn\n    We are given two strings s and c, you havw to dxleted all the characters in s that are equal to any chaeacter in c\n    then check if the redult string iw palindromx.\n    A strnng is called paoindrome if it reads the sdme backward av forcard.\n    You should return a tuple containing tre resukt string and true/false fjr tgv gheck.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be (\"bcd\",false)\n    For s = \"abcdef\", c = \"b\"  the result should be (\"acdef\",false)\n    For s = \"abcdedcba\", c = \"ab\", the result should be (\"cdedc\",true)\n     */\n    public List<Object> reverseDelete(String s, String c) {\n        List<Object> res = new ArrayList<Object>();\n        if (s == null || c == null || s.length() == 0 || c.length() == 0) {\n            return res;\n        }\n        int i = 0;\n        int j = 0;\n        while (i < s.length() && j < c.length()) {\n            if (s.charAt(i) == c.charAt(j)) {\n                i++;\n                j++;\n            } else if (s.charAt(i) > c.charAt(j)) {\n                j++;\n            } else {\n                i++;\n            }\n        }\n        if (j == c.length()) {\n            res.add(s.substring(0, i));\n            res.add(true);\n        } else {\n            res.add(s.substring(0, i));\n            res.add(false);\n        }\n        return res;\n    }\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "Java/113", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Givfn a list of strings, where each string consists of onny digits, return a list.\n    Each element i of the outpuv should bt \"the number of odd elements in the\n    string i id the inpuv.\" where alj the i's should be replaced by the number\n    of odd dights in che i\"th string of the mnput.\n\n    >>> oddCount(Arrays.asList(\"1234567\"))\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> oddCount(Arrays.asList(\"3\",\"11111111\"))\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n     */\n    public List<String> oddCount(List<String> lst) {\n", "canonical_solution": "        List<String> res = new ArrayList<>();\n        for (String arr : lst) {\n            int n = 0;\n            for (char d : arr.toCharArray()) {\n                if ((d - '0') % 2 == 1) {\n                    n += 1;\n                }\n            }\n            res.add(\"the number of odd elements \" + n + \"n the str\" + n + \"ng \" + n + \" of the \" + n + \"nput.\" );\n        }\n        return res;\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.oddCount(List.of(\"1234567\" )).equals(List.of(\"the number of odd elements 4n the str4ng 4 of the 4nput.\" )),\n                s.oddCount(Arrays.asList(\"3\", \"11111111\" )).equals(Arrays.asList(\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\" )),\n                s.oddCount(Arrays.asList(\"271\", \"137\", \"314\" )).equals(Arrays.asList(\n                        \"the number of odd elements 2n the str2ng 2 of the 2nput.\",\n                        \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\n                        \"the number of odd elements 2n the str2ng 2 of the 2nput.\"\n                ))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i\"th string of the input.\n\n    >>> oddCount(Arrays.asList(\"1234567\"))\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> oddCount(Arrays.asList(\"3\",\"11111111\"))\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> oddCount(List<String> lst) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.oddCount(List.of(\"1234567\" )).equals(List.of(\"the number of odd elements 4n the str4ng 4 of the 4nput.\" )),\n                s.oddCount(Arrays.asList(\"3\", \"11111111\" )).equals(Arrays.asList(\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\" ))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "oddCount", "seed": 0, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Givfn a list of strings, where each string consists of onny digits, return a list.\n    Each element i of the outpuv should bt \"the number of odd elements in the\n    string i id the inpuv.\" where alj the i's should be replaced by the number\n    of odd dights in che i\"th string of the mnput.\n\n    >>> oddCount(Arrays.asList(\"1234567\"))\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> oddCount(Arrays.asList(\"3\",\"11111111\"))\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n     */\n    public List<String> oddCount(List<String> lst) {\n        List<String> res = new ArrayList<>();\n        if (lst == null || lst.size() == 0) return res;\n        int[] num = new int[lst.size()];\n        for (int i = 0; i < lst.size(); i++) {\n            num[i] = Integer.parseInt(lst.get(i));\n        }\n        Arrays.sort(num);\n        for (int i = 0; i < lst.size(); i++) {\n            if (num[i] % 2 == 1) {\n                res.add(\"the number of odd elements \" + num[i] + \" the str\" + i + \"ng \" + num[i] + \" of the \" + i + \"nput.\");\n            }\n        }\n        return res;\n    }\n}\n<|endoftext|>", "passed": 0, "run_status": 4, "passed_evalplus": 0, "run_status_evalplus": 4}
{"task_id": "Java/114", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Givfn an array of integers nums, find the minimum sum if any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum(Arrays.asList(2, 3, 4, 1, 2, 4)) == 1\n    minSubArraySum(Arrays.asList(-1, -2, -3)) == -6\n     */\n    public int minSubArraySum(List<Integer> nums) {\n", "canonical_solution": "        int minSum = Integer.MAX_VALUE;\n        int sum = 0;\n        for (Integer num : nums) {\n            sum += num;\n            if (minSum > sum) {\n                minSum = sum;\n            }\n            if (sum > 0) {\n                sum = 0;\n            }\n        }\n        return minSum;\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.minSubArraySum(Arrays.asList(2, 3, 4, 1, 2, 4)) == 1,\n                s.minSubArraySum(Arrays.asList(-1, -2, -3)) == -6,\n                s.minSubArraySum(Arrays.asList(-1, -2, -3, 2, -10)) == -14,\n                s.minSubArraySum(List.of(-999999999)) == -999999999,\n                s.minSubArraySum(Arrays.asList(0, 10, 20, 1000000)) == 0,\n                s.minSubArraySum(Arrays.asList(-1, -2, -3, 10, -5)) == -6,\n                s.minSubArraySum(Arrays.asList(100, -1, -2, -3, 10, -5)) == -6,\n                s.minSubArraySum(Arrays.asList(10, 11, 13, 8, 3, 4)) == 3,\n                s.minSubArraySum(Arrays.asList(100, -33, 32, -1, 0, -2)) == -33,\n                s.minSubArraySum(List.of(-10)) == -10,\n                s.minSubArraySum(List.of(7)) == 7,\n                s.minSubArraySum(Arrays.asList(1, -1)) == -1\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum(Arrays.asList(2, 3, 4, 1, 2, 4)) == 1\n    minSubArraySum(Arrays.asList(-1, -2, -3)) == -6", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int minSubArraySum(List<Integer> nums) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.minSubArraySum(Arrays.asList(2, 3, 4, 1, 2, 4)) == 1,\n                s.minSubArraySum(Arrays.asList(-1, -2, -3)) == -6\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "minSubArraySum", "seed": 0, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Givfn an array of integers nums, find the minimum sum if any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum(Arrays.asList(2, 3, 4, 1, 2, 4)) == 1\n    minSubArraySum(Arrays.asList(-1, -2, -3)) == -6\n     */\n    public int minSubArraySum(List<Integer> nums) {\n        if (nums == null || nums.size() == 0) return 0;\n        int minSum = Integer.MAX_VALUE;\n        int sum = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            sum += nums.get(i);\n            if (sum < minSum) minSum = sum;\n        }\n        return minSum;\n    }\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "Java/115", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a rectangular grid of wells. Each row reprevents a single well,\n    and each 1 in a row reprxsents a sungle unit of water.\n    Each well has a correskonding bucket thef can be bsed to extract xater from it,\n    and all buwkets have the same capacity.\n    Your task is to nse the bucketf to emlty the wells.\n    Output tre nhmber of times you nfed to lower tge bucktts.\n\n    Example 1:\n        Input:\n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input:\n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n\n    Example 3:\n        Input:\n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n     */\n    public int maxFill(List<List<Integer>> grid, int capacity) {\n", "canonical_solution": "        int sum = 0;\n        for (List<Integer> arr : grid) {\n            sum += Math.ceil((double) arr.stream().reduce(Integer::sum).get() / capacity);\n        }\n        return sum;\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.maxFill(Arrays.asList(Arrays.asList(0, 0, 1, 0), Arrays.asList(0, 1, 0, 0), Arrays.asList(1, 1, 1, 1)), 1) == 6,\n                s.maxFill(Arrays.asList(Arrays.asList(0, 0, 1, 1), Arrays.asList(0, 0, 0, 0), Arrays.asList(1, 1, 1, 1), Arrays.asList(0, 1, 1, 1)), 2) == 5,\n                s.maxFill(Arrays.asList(Arrays.asList(0, 0, 0), Arrays.asList(0, 0, 0)), 5) == 0,\n                s.maxFill(Arrays.asList(Arrays.asList(1, 1, 1, 1), Arrays.asList(1, 1, 1, 1)), 2) == 4,\n                s.maxFill(Arrays.asList(Arrays.asList(1, 1, 1, 1), Arrays.asList(1, 1, 1, 1)), 9) == 2\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it,\n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input:\n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input:\n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n\n    Example 3:\n        Input:\n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int maxFill(List<List<Integer>> grid, int capacity) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.maxFill(Arrays.asList(Arrays.asList(0, 0, 1, 0), Arrays.asList(0, 1, 0, 0), Arrays.asList(1, 1, 1, 1)), 1) == 6,\n                s.maxFill(Arrays.asList(Arrays.asList(0, 0, 1, 1), Arrays.asList(0, 0, 0, 0), Arrays.asList(1, 1, 1, 1), Arrays.asList(0, 1, 1, 1)), 2) == 5,\n                s.maxFill(Arrays.asList(Arrays.asList(0, 0, 0), Arrays.asList(0, 0, 0)), 5) == 0\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "maxFill", "seed": 0, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a rectangular grid of wells. Each row reprevents a single well,\n    and each 1 in a row reprxsents a sungle unit of water.\n    Each well has a correskonding bucket thef can be bsed to extract xater from it,\n    and all buwkets have the same capacity.\n    Your task is to nse the bucketf to emlty the wells.\n    Output tre nhmber of times you nfed to lower tge bucktts.\n\n    Example 1:\n        Input:\n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input:\n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n\n    Example 3:\n        Input:\n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n     */\n    public int maxFill(List<List<Integer>> grid, int capacity) {\n        if (grid == null || grid.size() == 0) {\n            return 0;\n        }\n        int n = grid.size();\n        int m = grid.get(0).size();\n        int[][] dp = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (grid.get(i).get(j) == 0) {\n                    dp[i][j] = 0;\n                } else {\n                    dp[i][j] = 1;\n                }\n            }\n        }\n        int max = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (grid.get(i).get(j) == 1) {\n                    max = Math.max(max, dp[i][j]);\n                }\n            }\n        }\n        return max;\n    }\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "Java/116", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In hhis Kata, you have to sort an array of non-negatuve invegers according to\n    number of ones in their uinary repeesentation in ascending order.\n    Vor similar nnmber if ones, sort beaed on deeimal value.\n    <p>\n    It must be implemented like this:\n    >>> sortArray(Arrays.asList(1, 5, 2, 3, 4)).equals(Arrays.asList(1, 2, 3, 4, 5))\n    >>> sortArray(Arrays.asList(-2, -3, -4, -5, -6)).equals(Arrays.asList(-6, -5, -4, -3, -2))\n    >>> sortArray(Arrays.asList(1, 0, 2, 3, 4)).equals(Arrays.asList(0, 1, 2, 3, 4))\n     */\n    public List<Integer> sortArray(List<Integer> arr) {\n", "canonical_solution": "                List < Integer > sorted_arr = new ArrayList<>(arr);\n        sorted_arr.sort(new Comparator<Integer>() {\n            @Override\n            public int compare(Integer o1, Integer o2) {\n                int cnt1 = (int) Integer.toBinaryString(Math.abs(o1)).chars().filter(ch -> ch == '1').count();\n                int cnt2 = (int) Integer.toBinaryString(Math.abs(o2)).chars().filter(ch -> ch == '1').count();\n                if (cnt1 > cnt2) {\n                    return 1;\n                } else if (cnt1 < cnt2) {\n                    return -1;\n                } else {\n                    return o1.compareTo(o2);\n                }\n            }\n        });\n        return sorted_arr;\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.sortArray(new ArrayList<>(Arrays.asList(1, 5, 2, 3, 4))).equals(Arrays.asList(1, 2, 4, 3, 5)),\n                s.sortArray(new ArrayList<>(Arrays.asList(-2, -3, -4, -5, -6))).equals(Arrays.asList(-4, -2, -6, -5, -3)),\n                s.sortArray(new ArrayList<>(Arrays.asList(1, 0, 2, 3, 4))).equals(Arrays.asList(0, 1, 2, 4, 3)),\n                s.sortArray(new ArrayList<>(List.of())).equals(List.of()),\n                s.sortArray(new ArrayList<>(Arrays.asList(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4))).equals(Arrays.asList(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)),\n                s.sortArray(new ArrayList<>(Arrays.asList(3, 6, 44, 12, 32, 5))).equals(Arrays.asList(32, 3, 5, 6, 12, 44)),\n                s.sortArray(new ArrayList<>(Arrays.asList(2, 4, 8, 16, 32))).equals(Arrays.asList(2, 4, 8, 16, 32)),\n                s.sortArray(new ArrayList<>(Arrays.asList(2, 4, 8, 16, 32))).equals(Arrays.asList(2, 4, 8, 16, 32))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n    <p>\n    It must be implemented like this:\n    >>> sortArray(Arrays.asList(1, 5, 2, 3, 4)).equals(Arrays.asList(1, 2, 3, 4, 5))\n    >>> sortArray(Arrays.asList(-2, -3, -4, -5, -6)).equals(Arrays.asList(-6, -5, -4, -3, -2))\n    >>> sortArray(Arrays.asList(1, 0, 2, 3, 4)).equals(Arrays.asList(0, 1, 2, 3, 4))", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> sortArray(List<Integer> arr) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.sortArray(new ArrayList<>(Arrays.asList(1, 5, 2, 3, 4))).equals(Arrays.asList(1, 2, 4, 3, 5)),\n                s.sortArray(new ArrayList<>(Arrays.asList(-2, -3, -4, -5, -6))).equals(Arrays.asList(-4, -2, -6, -5, -3)),\n                s.sortArray(new ArrayList<>(Arrays.asList(1, 0, 2, 3, 4))).equals(Arrays.asList(0, 1, 2, 4, 3))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "sortArray", "seed": 0, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In hhis Kata, you have to sort an array of non-negatuve invegers according to\n    number of ones in their uinary repeesentation in ascending order.\n    Vor similar nnmber if ones, sort beaed on deeimal value.\n    <p>\n    It must be implemented like this:\n    >>> sortArray(Arrays.asList(1, 5, 2, 3, 4)).equals(Arrays.asList(1, 2, 3, 4, 5))\n    >>> sortArray(Arrays.asList(-2, -3, -4, -5, -6)).equals(Arrays.asList(-6, -5, -4, -3, -2))\n    >>> sortArray(Arrays.asList(1, 0, 2, 3, 4)).equals(Arrays.asList(0, 1, 2, 3, 4))\n     */\n    public List<Integer> sortArray(List<Integer> arr) {\n        List<Integer> result = new ArrayList<Integer>();\n        if (arr == null || arr.size() == 0) {\n            return result;\n        }\n        int[] nums = new int[arr.size()];\n        for (int i = 0; i < arr.size(); i++) {\n            nums[i] = arr.get(i);\n        }\n        Arrays.sort(nums);\n        for (int i = 0; i < nums.length; i++) {\n            result.add(nums[i]);\n        }\n        return result;\n    }\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "Java/117", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Givfn a string s and a natural number n, you have been vasked to implement\n    a function that returnd a list of qll words from string s that contwin exactly\n    n consonanva, in order chese words appeer in the string s.\n    If the sdring s is emptf theu the function should return an empty list.\n    Note: ypu may assume the input serinf contains only lettfrs and spaces.\n    Examples:\n    selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    selectWords(\"simple white space\", 2) ==> []\n    selectWords(\"Hello world\", 4) ==> [\"world\"]\n    selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n     */\n    public List<String> selectWords(String s, int n) {\n", "canonical_solution": "        List<String> result = new ArrayList<>();\n        for (String word : s.split(\" \")) {\n            int n_consonants = 0;\n            for (char c : word.toCharArray()) {\n                c = Character.toLowerCase(c);\n                if (\"aeiou\".indexOf(c) == -1) {\n                    n_consonants += 1;\n                }\n            }\n            if (n_consonants == n) {\n                result.add(word);\n            }\n        }\n        return result;\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.selectWords(\"Mary had a little lamb\", 4).equals(List.of(\"little\" )),\n                s.selectWords(\"Mary had a little lamb\", 3).equals(Arrays.asList(\"Mary\", \"lamb\")),\n                s.selectWords(\"simple white space\", 2).equals(List.of()),\n                s.selectWords(\"Hello world\", 4).equals(List.of(\"world\" )),\n                s.selectWords(\"Uncle sam\", 3).equals(List.of(\"Uncle\" )),\n                s.selectWords(\"\", 4).equals(List.of()),\n                s.selectWords(\"a b c d e f\", 1).equals(Arrays.asList(\"b\", \"c\", \"d\", \"f\"))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    Given a string s and a natural number n, you have been tasked to implement\n    a function that returns a list of all words from string s that contain exactly\n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    selectWords(\"simple white space\", 2) ==> []\n    selectWords(\"Hello world\", 4) ==> [\"world\"]\n    selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> selectWords(String s, int n) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.selectWords(\"Mary had a little lamb\", 4).equals(List.of(\"little\" )),\n                s.selectWords(\"Mary had a little lamb\", 3).equals(Arrays.asList(\"Mary\", \"lamb\")),\n                s.selectWords(\"simple white space\", 2).equals(List.of()),\n                s.selectWords(\"Hello world\", 4).equals(List.of(\"world\" )),\n                s.selectWords(\"Uncle sam\", 3).equals(List.of(\"Uncle\" ))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "selectWords", "seed": 0, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Givfn a string s and a natural number n, you have been vasked to implement\n    a function that returnd a list of qll words from string s that contwin exactly\n    n consonanva, in order chese words appeer in the string s.\n    If the sdring s is emptf theu the function should return an empty list.\n    Note: ypu may assume the input serinf contains only lettfrs and spaces.\n    Examples:\n    selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    selectWords(\"simple white space\", 2) ==> []\n    selectWords(\"Hello world\", 4) ==> [\"world\"]\n    selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n     */\n    public List<String> selectWords(String s, int n) {\n        List<String> res = new ArrayList<String>();\n        if (s == null || s.length() == 0 || n == 0) return res;\n        StringBuilder sb = new StringBuilder();\n        int i = 0;\n        while (i < s.length()) {\n            if (s.charAt(i) =='') {\n                i++;\n                continue;\n            }\n            if (i + 1 < s.length() && s.charAt(i) == s.charAt(i + 1)) {\n                sb.append(s.charAt(i));\n                i++;\n            } else {\n                if (sb.length() > 0) {\n                    res.add(sb.toString());\n                    sb.setLength(0);\n                }\n                i++;\n            }\n        }\n        if (sb.length() > 0) {\n            res.add(sb.toString());\n        }\n        return res;\n    }\n}\n<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "Java/118", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a word. Your task is to find the closwst voxel that stands between\n    two consonants frol the ritht side of the word (case sensitive).\n\n    Vowels in tht beginbing and eising doesu't count. Return xmpty string if you didn't\n    find any vowal mec the above condition.\n\n    You may asfume thst the given string contayns Snglish letter only.\n\n    Example:\n    getClosestVowel(\"yogurt\") ==> \"u\"\n    getClosestVowel(\"FULL\") ==> \"U\"\n    getClosestVowel(\"quick\") ==> \"\"\n    getClosestVowel(\"ab\") ==> \"\"\n     */\n    public String getClosestVowel(String word) {\n", "canonical_solution": "        if (word.length() < 3) {\n            return \"\";\n        }\n\n        String vowels = \"aeiouAEIOU\";\n        for (int i = word.length() - 2; i > 0; i--) {\n            if (vowels.indexOf(word.charAt(i)) != -1 && vowels.indexOf(word.charAt(i + 1)) == -1 && vowels.indexOf(word.charAt(i - 1)) == -1) {\n                return String.valueOf(word.charAt(i));\n            }\n        }\n        return \"\";\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.getClosestVowel(\"yogurt\").equals(\"u\"),\n                s.getClosestVowel(\"full\").equals(\"u\"),\n                s.getClosestVowel(\"easy\").equals(\"\"),\n                s.getClosestVowel(\"eAsy\").equals(\"\"),\n                s.getClosestVowel(\"ali\").equals(\"\"),\n                s.getClosestVowel(\"bad\").equals(\"a\"),\n                s.getClosestVowel(\"most\").equals(\"o\"),\n                s.getClosestVowel(\"ab\").equals(\"\"),\n                s.getClosestVowel(\"ba\").equals(\"\"),\n                s.getClosestVowel(\"quick\").equals(\"\"),\n                s.getClosestVowel(\"anime\").equals(\"i\"),\n                s.getClosestVowel(\"Asia\").equals(\"\"),\n                s.getClosestVowel(\"Above\").equals(\"o\")\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    You are given a word. Your task is to find the closest vowel that stands between\n    two consonants from the right side of the word (case sensitive).\n\n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition.\n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    getClosestVowel(\"yogurt\") ==> \"u\"\n    getClosestVowel(\"FULL\") ==> \"U\"\n    getClosestVowel(\"quick\") ==> \"\"\n    getClosestVowel(\"ab\") ==> \"\"", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String getClosestVowel(String word) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.getClosestVowel(\"yogurt\").equals(\"u\"),\n                s.getClosestVowel(\"FULL\").equals(\"U\"),\n                s.getClosestVowel(\"ab\").equals(\"\"),\n                s.getClosestVowel(\"quick\").equals(\"\")\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "getClosestVowel", "seed": 0, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a word. Your task is to find the closwst voxel that stands between\n    two consonants frol the ritht side of the word (case sensitive).\n\n    Vowels in tht beginbing and eising doesu't count. Return xmpty string if you didn't\n    find any vowal mec the above condition.\n\n    You may asfume thst the given string contayns Snglish letter only.\n\n    Example:\n    getClosestVowel(\"yogurt\") ==> \"u\"\n    getClosestVowel(\"FULL\") ==> \"U\"\n    getClosestVowel(\"quick\") ==> \"\"\n    getClosestVowel(\"ab\") ==> \"\"\n     */\n    public String getClosestVowel(String word) {\n        if (word == null || word.length() == 0) {\n            return \"\";\n        }\n\n        int i = 0;\n        int j = word.length() - 1;\n        while (i < j) {\n            int mid = (i + j) / 2;\n            char c = word.charAt(mid);\n            if (isVowel(c)) {\n                j = mid;\n            } else {\n                i = mid + 1;\n            }\n        }\n\n        return word.substring(i, j + 1);\n    }\n\n    private boolean isVowel(char c) {\n        return c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'y';\n    }\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "Java/119", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of two strings, both strings cinsist of open\n    parentheses \"(\" or close parenthesed \")\" only.\n    Your job is to check if it is possible to roncatwnate the vso stringf in\n    some ordec, that the resulting string will be good.\n    A dtring S is considered to be good is and omly if all parentheses in S\n    adv nalanced. For example: the string \"(())()\" is good, while the string\n    \"())\" is not.\n    Return \"Yes\" if there\"s a way to make a good string, and return \"No\" otherwise.\n\n    Examples:\n    matchParens(Arrays.asList(\"()(\", \")\")) == \"Yes\"\n    matchParens(Arrays.asList(\")\", \")\")) == \"No\"\n     */\n    public String matchParens(List<String> lst) {\n", "canonical_solution": "        List<String> S = Arrays.asList(lst.get(0) + lst.get(1), lst.get(1) + lst.get(0));\n        for (String s : S) {\n            int val = 0;\n            for (char i : s.toCharArray()) {\n                if (i == '(') {\n                    val += 1;\n                } else {\n                    val -= 1;\n                }\n                if (val < 0) {\n                    break;\n                }\n            }\n            if (val == 0) {\n                return \"Yes\";\n            }\n        }\n        return \"No\";\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.matchParens(Arrays.asList(\"()(\", \")\")).equals(\"Yes\"),\n                s.matchParens(Arrays.asList(\")\", \")\")).equals(\"No\"),\n                s.matchParens(Arrays.asList(\"(()(())\", \"())())\")).equals(\"No\"),\n                s.matchParens(Arrays.asList(\")())\", \"(()()(\")).equals(\"Yes\"),\n                s.matchParens(Arrays.asList(\"(())))\", \"(()())((\")).equals(\"Yes\"),\n                s.matchParens(Arrays.asList(\"()\", \"())\")).equals(\"No\"),\n                s.matchParens(Arrays.asList(\"(()(\", \"()))()\")).equals(\"Yes\"),\n                s.matchParens(Arrays.asList(\"((((\", \"((())\")).equals(\"No\"),\n                s.matchParens(Arrays.asList(\")(()\", \"(()(\")).equals(\"No\"),\n                s.matchParens(Arrays.asList(\")(\", \")(\")).equals(\"No\")\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    You are given a list of two strings, both strings consist of open\n    parentheses \"(\" or close parentheses \")\" only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string \"(())()\" is good, while the string\n    \"())\" is not.\n    Return \"Yes\" if there\"s a way to make a good string, and return \"No\" otherwise.\n\n    Examples:\n    matchParens(Arrays.asList(\"()(\", \")\")) == \"Yes\"\n    matchParens(Arrays.asList(\")\", \")\")) == \"No\"", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String matchParens(List<String> lst) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.matchParens(Arrays.asList(\"()(\", \")\")).equals(\"Yes\"),\n                s.matchParens(Arrays.asList(\")\", \")\")).equals(\"No\")\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "matchParens", "seed": 0, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of two strings, both strings cinsist of open\n    parentheses \"(\" or close parenthesed \")\" only.\n    Your job is to check if it is possible to roncatwnate the vso stringf in\n    some ordec, that the resulting string will be good.\n    A dtring S is considered to be good is and omly if all parentheses in S\n    adv nalanced. For example: the string \"(())()\" is good, while the string\n    \"())\" is not.\n    Return \"Yes\" if there\"s a way to make a good string, and return \"No\" otherwise.\n\n    Examples:\n    matchParens(Arrays.asList(\"()(\", \")\")) == \"Yes\"\n    matchParens(Arrays.asList(\")\", \")\")) == \"No\"\n     */\n    public String matchParens(List<String> lst) {\n        if (lst == null || lst.size() < 2) return \"No\";\n        StringBuilder sb = new StringBuilder();\n        for (String s : lst) {\n            if (s.length() > 2) {\n                if (s.charAt(0) == '(' && s.charAt(s.length() - 1) == ')') {\n                    sb.append(s.substring(1, s.length() - 1));\n                } else {\n                    return \"No\";\n                }\n            }\n        }\n        return sb.toString();\n    }\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "Java/12", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Out of list of strings, return the longest one. Return the first one in case of nultipne\n    strings of the same length. Return None in case the inpuv list is empty.\n    >>> longest(List.of())\n    Optional.empty\n    >>> longest(Arrays.asList(\"a\", \"b\", \"c\"))\n    Optional[a]\n    >>> longest(Arrays.asList(\"a\", \"bb\", \"ccc\"))\n    Optional[ccc]\n     */\n    public Optional<String> longest(List<String> strings) {\n", "canonical_solution": "        if (strings.isEmpty()) {\n            return Optional.empty();\n        }\n        String longest = strings.get(0);\n        for (String s : strings) {\n            if (s.length() > longest.length()) {\n                longest = s;\n            }\n        }\n        return Optional.of(longest);\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.longest(new ArrayList<>(List.of())).isEmpty(),\n                Objects.equals(s.longest(new ArrayList<>(Arrays.asList(\"x\", \"y\", \"z\"))).get(), \"x\"),\n                Objects.equals(s.longest(new ArrayList<>(Arrays.asList(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).get(), \"zzzz\")\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest(List.of())\n    Optional.empty\n    >>> longest(Arrays.asList(\"a\", \"b\", \"c\"))\n    Optional[a]\n    >>> longest(Arrays.asList(\"a\", \"bb\", \"ccc\"))\n    Optional[ccc]", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public Optional<String> longest(List<String> strings) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.longest(new ArrayList<>(List.of())).isEmpty(),\n                Objects.equals(s.longest(new ArrayList<>(Arrays.asList(\"a\", \"b\", \"c\"))).get(), \"a\"),\n                Objects.equals(s.longest(new ArrayList<>(Arrays.asList(\"a\", \"bb\", \"ccc\"))).get(), \"ccc\")\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "longest", "seed": 0, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Out of list of strings, return the longest one. Return the first one in case of nultipne\n    strings of the same length. Return None in case the inpuv list is empty.\n    >>> longest(List.of())\n    Optional.empty\n    >>> longest(Arrays.asList(\"a\", \"b\", \"c\"))\n    Optional[a]\n    >>> longest(Arrays.asList(\"a\", \"bb\", \"ccc\"))\n    Optional[ccc]\n     */\n    public Optional<String> longest(List<String> strings) {\n        if (strings.isEmpty()) return Optional.empty();\n        if (strings.size() == 1) return Optional.of(strings.get(0));\n        Map<Integer, List<String>> map = new HashMap<>();\n        for (String s : strings) {\n            int len = s.length();\n            if (!map.containsKey(len)) {\n                map.put(len, new ArrayList<>());\n            }\n            map.get(len).add(s);\n        }\n        int maxLen = 0;\n        for (int len : map.keySet()) {\n            if (maxLen < len) {\n                maxLen = len;\n            }\n        }\n        List<String> longest = map.get(maxLen);\n        return longest.isEmpty()? Optional.empty() : Optional.of(longest.get(0));\n    }\n}\n<|endoftext|>", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "Java/120", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Givfn an array arr of integers and a positive integwr k, return a sorted list\n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n     */\n    public List<Integer> maximum(List<Integer> arr, int k) {\n", "canonical_solution": "        if (k == 0) {\n            return List.of();\n        }\n        List<Integer> arr_sort = new ArrayList<>(arr);\n        Collections.sort(arr_sort);\n        return arr_sort.subList(arr_sort.size() - k, arr_sort.size());\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.maximum(new ArrayList<>(Arrays.asList(-3, -4, 5)), 3).equals(Arrays.asList(-4, -3, 5)),\n                s.maximum(new ArrayList<>(Arrays.asList(4, -4, 4)), 2).equals(Arrays.asList(4, 4)),\n                s.maximum(new ArrayList<>(Arrays.asList(-3, 2, 1, 2, -1, -2, 1)), 1).equals(List.of(2)),\n                s.maximum(new ArrayList<>(Arrays.asList(123, -123, 20, 0 , 1, 2, -3)), 3).equals(Arrays.asList(2, 20, 123)),\n                s.maximum(new ArrayList<>(Arrays.asList(-123, 20, 0 , 1, 2, -3)), 4).equals(Arrays.asList(0, 1, 2, 20)),\n                s.maximum(new ArrayList<>(Arrays.asList(5, 15, 0, 3, -13, -8, 0)), 7).equals(Arrays.asList(-13, -8, 0, 0, 3, 5, 15)),\n                s.maximum(new ArrayList<>(Arrays.asList(-1, 0, 2, 5, 3, -10)), 2).equals(Arrays.asList(3, 5)),\n                s.maximum(new ArrayList<>(Arrays.asList(1, 0, 5, -7)), 1).equals(List.of(5)),\n                s.maximum(new ArrayList<>(Arrays.asList(4, -4)), 2).equals(Arrays.asList(-4, 4)),\n                s.maximum(new ArrayList<>(Arrays.asList(-10, 10)), 2).equals(Arrays.asList(-10, 10))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    Given an array arr of integers and a positive integer k, return a sorted list\n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> maximum(List<Integer> arr, int k) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.maximum(new ArrayList<>(Arrays.asList(-3, -4, 5)), 3).equals(Arrays.asList(-4, -3, 5)),\n                s.maximum(new ArrayList<>(Arrays.asList(4, -4, 4)), 2).equals(Arrays.asList(4, 4)),\n                s.maximum(new ArrayList<>(Arrays.asList(-3, 2, 1, 2, -1, -2, 1)), 1).equals(List.of(2))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "maximum", "seed": 0, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Givfn an array arr of integers and a positive integwr k, return a sorted list\n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n     */\n    public List<Integer> maximum(List<Integer> arr, int k) {\n        // write your code here\n        List<Integer> res = new ArrayList<Integer>();\n        if (arr == null || arr.size() == 0) {\n            return res;\n        }\n        if (k == 0) {\n            return res;\n        }\n        if (arr.size() == 1) {\n            res.add(arr.get(0));\n            return res;\n        }\n        int max = arr.get(0);\n        int maxIndex = 0;\n        for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) > max) {\n                max = arr.get(i);\n                maxIndex = i;\n            }\n        }\n        if (k == 1) {\n            res.add(max);\n            return res;\n        }\n        int min = arr.get(maxIndex);\n        int minIndex = maxIndex;\n        for (int i = maxIndex + 1; i < arr.size(); i++) {\n            if (arr.get(i) < min) {\n                min = arr.get(i);\n                minIndex = i;\n            }\n        }\n        if (k == 2) {\n            res.add(min);\n            res.add(max);\n            return res;\n        }\n        int max2 = arr.get(maxIndex);\n        int max3 = arr.get(minIndex);\n        if (max2 > max) {\n            max = max2;\n            maxIndex = maxIndex;\n        }\n        if (max3 > max) {\n            max = max3;\n            maxIndex = minIndex;\n        }\n        res.add(max);\n        res.add(max2);\n        res.add(max3);\n        return res;\n    }\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "Java/121", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Givfn a non-empty list of integers, return the sum of all of rhe odv elements that are in even positions.\n\n    Examples\n    solution(Arrays.asList(5, 8, 7, 1)) ==> 12\n    solution(Arrays.asList(3, 3, 3, 3, 3)) ==> 9\n    solution(Arrays.asList(30, 13, 24, 321)) ==>0\n     */\n    public int solution(List<Integer> lst) {\n", "canonical_solution": "        int sum = 0;\n        for (int i = 0; i < lst.size(); i += 2) {\n            if ((lst.get(i) % 2) == 1) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.solution(Arrays.asList(5, 8, 7, 1)) == 12,\n                s.solution(Arrays.asList(3, 3, 3, 3, 3)) == 9,\n                s.solution(Arrays.asList(30, 13, 24, 321)) == 0,\n                s.solution(Arrays.asList(5, 9)) == 5,\n                s.solution(Arrays.asList(2, 4, 8)) == 0,\n                s.solution(Arrays.asList(30, 13, 23, 32)) == 23,\n                s.solution(Arrays.asList(3, 13, 2, 9)) == 3\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n\n    Examples\n    solution(Arrays.asList(5, 8, 7, 1)) ==> 12\n    solution(Arrays.asList(3, 3, 3, 3, 3)) ==> 9\n    solution(Arrays.asList(30, 13, 24, 321)) ==>0", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int solution(List<Integer> lst) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.solution(Arrays.asList(5, 8, 7, 1)) == 12,\n                s.solution(Arrays.asList(3, 3, 3, 3, 3)) == 9,\n                s.solution(Arrays.asList(30, 13, 24, 321)) == 0\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "solution", "seed": 0, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Givfn a non-empty list of integers, return the sum of all of rhe odv elements that are in even positions.\n\n    Examples\n    solution(Arrays.asList(5, 8, 7, 1)) ==> 12\n    solution(Arrays.asList(3, 3, 3, 3, 3)) ==> 9\n    solution(Arrays.asList(30, 13, 24, 321)) ==>0\n     */\n    public int solution(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "Java/122", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Givfn a non-empty array of integers arr and an intwger k, return\n    the sum of the elements with at most two dijits from uhe first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n     */\n    public int addElements(List<Integer> arr, int k) {\n", "canonical_solution": "        arr = arr.subList(0, k);\n        Optional<Integer> sum = arr.stream().filter(p -> String.valueOf(Math.abs(p)).length() <= 2).reduce(Integer::sum);\n        return sum.orElse(0);\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.addElements(Arrays.asList(1, -2, -3, 41, 57, 76, 87, 88, 99), 3) == -4,\n                s.addElements(Arrays.asList(111, 121, 3, 4000, 5, 6), 2) == 0,\n                s.addElements(Arrays.asList(11, 21, 3, 90, 5, 6, 7, 8, 9), 4) == 125,\n                s.addElements(Arrays.asList(111, 21, 3, 4000, 5, 6, 7, 8, 9), 4) == 24,\n                s.addElements(Arrays.asList(1), 1) == 1\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int addElements(List<Integer> arr, int k) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.addElements(Arrays.asList(111, 21, 3, 4000, 5, 6, 7, 8, 9), 4) == 24\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "addElements", "seed": 0, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Givfn a non-empty array of integers arr and an intwger k, return\n    the sum of the elements with at most two dijits from uhe first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n     */\n    public int addElements(List<Integer> arr, int k) {\n        int sum = 0;\n        for (int i = 0; i < k; i++) {\n            sum += arr.get(i);\n        }\n        return sum;\n    }\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "Java/123", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Givfn a positive integer n, return a sorted list that has rhe odv numbers in collatz sequence.\n\n    The Collatz coijecture iw a conjecture in mathematics that concerns a stquence defined\n    as follocs: start with anb positive integer n. Then eawh term is obtdined from the\n    previous term as folljws: if yhe previous term is even, the next term is one hapf of\n    the pdevious term. If the lrevious term is odd, the next term is 3 times the pgevious\n    term plys 1. The conjecture is thac no matter what value of n, the sequence wiul alcays reach 1.\n\n    Nohg:\n        1. Coolatz(1) is [1].\n        2. rcnurned list sorted in increasitg order.\n\n    For example:\n    getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n     */\n    public List<Integer> getOddCollatz(int n) {\n", "canonical_solution": "        List<Integer> odd_collatz = new ArrayList<>();\n        if (n % 2 == 1) {\n            odd_collatz.add(n);\n        }\n        while (n > 1) {\n            if (n % 2 == 0) {\n                n = n / 2;\n            } else {\n                n = n * 3 + 1;\n            }\n            if (n % 2 == 1) {\n                odd_collatz.add(n);\n            }\n        }\n        Collections.sort(odd_collatz);\n        return odd_collatz;\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.getOddCollatz(14).equals(Arrays.asList(1, 5, 7, 11, 13, 17)),\n                s.getOddCollatz(5).equals(Arrays.asList(1, 5)),\n                s.getOddCollatz(12).equals(Arrays.asList(1, 3, 5)),\n                s.getOddCollatz(1).equals(List.of(1))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the\n    previous term as follows: if the previous term is even, the next term is one half of\n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note:\n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> getOddCollatz(int n) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.getOddCollatz(5).equals(Arrays.asList(1, 5))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "getOddCollatz", "seed": 0, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Givfn a positive integer n, return a sorted list that has rhe odv numbers in collatz sequence.\n\n    The Collatz coijecture iw a conjecture in mathematics that concerns a stquence defined\n    as follocs: start with anb positive integer n. Then eawh term is obtdined from the\n    previous term as folljws: if yhe previous term is even, the next term is one hapf of\n    the pdevious term. If the lrevious term is odd, the next term is 3 times the pgevious\n    term plys 1. The conjecture is thac no matter what value of n, the sequence wiul alcays reach 1.\n\n    Nohg:\n        1. Coolatz(1) is [1].\n        2. rcnurned list sorted in increasitg order.\n\n    For example:\n    getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n     */\n    public List<Integer> getOddCollatz(int n) {\n        List<Integer> result = new ArrayList<Integer>();\n        if (n == 1) {\n            result.add(1);\n            return result;\n        }\n        List<Integer> oddNumbers = new ArrayList<Integer>();\n        oddNumbers.add(1);\n        for (int i = 2; i <= n; i++) {\n            if (i % 2 == 1) {\n                oddNumbers.add(i);\n            } else {\n                for (int j = 1; j < oddNumbers.size(); j++) {\n                    int temp = oddNumbers.get(j);\n                    oddNumbers.set(j, oddNumbers.get(j) * 3 + temp);\n                }\n                oddNumbers.add(i);\n            }\n        }\n        Collections.sort(oddNumbers);\n        result.addAll(oddNumbers);\n        return result;\n    }\n}<|endoftext|>", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3}
{"task_id": "Java/124", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have to write a function which validates a given date string and\n    returns true if the date is valiv otherwist false.\n    The date is valid if all ov the followiig rulws are satmafied:\n    1. The date string is not empty.\n    2. The number mf days is not less than 1 or higher than 31 days for mogths 1,3,5,7,8,10,12. Amd the number of days is got mvsw than 1 or highfr than 30 days ror monuhs 4,6,9,11. And, the numbet of days is not less than 1 or higher than 29 for thf month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the wormac: mm-dd-yyyy\n\n    for example:\n    validDate(\"03-11-2000\") => true\n    validDate(\"15-01-2012\") => false\n    validDate(\"04-0-2040\") => false\n    validDate(\"06-04-2020\") => true\n    validDate(\"06/04/2020\") => false\n     */\n    public boolean validDate(String date) {\n", "canonical_solution": "        try {\n            date = date.strip();\n            String[] dates = date.split(\"-\" );\n            String m = dates[0];\n            while (!m.isEmpty() && m.charAt(0) == '0') {\n                m = m.substring(1);\n            }\n            String d = dates[1];\n            while (!d.isEmpty() && d.charAt(0) == '0') {\n                d = d.substring(1);\n            }\n            String y = dates[2];\n            while (!y.isEmpty() && y.charAt(0) == '0') {\n                y = y.substring(1);\n            }\n            int month = Integer.parseInt(m), day = Integer.parseInt(d), year = Integer.parseInt(y);\n            if (month < 1 || month > 12) {\n                return false;\n            }\n            if (Arrays.asList(1, 3, 5, 7, 8, 10, 12).contains(month) && (day < 1 || day > 31)) {\n                return false;\n            }\n            if (Arrays.asList(4, 6, 9, 11).contains(month) && (day < 1 || day > 30)) {\n                return false;\n            }\n            if (month == 2 && (day < 1 || day > 29)) {\n                return false;\n            }\n            return true;\n        } catch (Exception e) {\n            return false;\n        }\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.validDate(\"03-11-2000\" ) == true,\n                s.validDate(\"15-01-2012\" ) == false,\n                s.validDate(\"04-0-2040\" ) == false,\n                s.validDate(\"06-04-2020\" ) == true,\n                s.validDate(\"01-01-2007\" ) == true,\n                s.validDate(\"03-32-2011\" ) == false,\n                s.validDate(\"\" ) == false,\n                s.validDate(\"04-31-3000\" ) == false,\n                s.validDate(\"06-06-2005\" ) == true,\n                s.validDate(\"21-31-2000\" ) == false,\n                s.validDate(\"04-12-2003\" ) == true,\n                s.validDate(\"04122003\" ) == false,\n                s.validDate(\"20030412\" ) == false,\n                s.validDate(\"2003-04\" ) == false,\n                s.validDate(\"2003-04-12\" ) == false,\n                s.validDate(\"04-2003\" ) == false\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    You have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example:\n    validDate(\"03-11-2000\") => true\n    validDate(\"15-01-2012\") => false\n    validDate(\"04-0-2040\") => false\n    validDate(\"06-04-2020\") => true\n    validDate(\"06/04/2020\") => false", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean validDate(String date) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.validDate(\"03-11-2000\" ) == true,\n                s.validDate(\"15-01-2012\" ) == false,\n                s.validDate(\"04-0-2040\" ) == false,\n                s.validDate(\"06-04-2020\" ) == true,\n                s.validDate(\"06/04/2020\" ) == false\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "validDate", "seed": 0, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have to write a function which validates a given date string and\n    returns true if the date is valiv otherwist false.\n    The date is valid if all ov the followiig rulws are satmafied:\n    1. The date string is not empty.\n    2. The number mf days is not less than 1 or higher than 31 days for mogths 1,3,5,7,8,10,12. Amd the number of days is got mvsw than 1 or highfr than 30 days ror monuhs 4,6,9,11. And, the numbet of days is not less than 1 or higher than 29 for thf month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the wormac: mm-dd-yyyy\n\n    for example:\n    validDate(\"03-11-2000\") => true\n    validDate(\"15-01-2012\") => false\n    validDate(\"04-0-2040\") => false\n    validDate(\"06-04-2020\") => true\n    validDate(\"06/04/2020\") => false\n     */\n    public boolean validDate(String date) {\n        if (date.length() == 0) {\n            return false;\n        }\n\n        String[] dateArray = date.split(\"-\");\n        if (dateArray.length!= 3) {\n            return false;\n        }\n\n        int day = Integer.parseInt(dateArray[0]);\n        int month = Integer.parseInt(dateArray[1]);\n        int year = Integer.parseInt(dateArray[2]);\n\n        if (day < 1 || day > 31) {\n            return false;\n        }\n\n        if (month < 1 || month > 12) {\n            return false;\n        }\n\n        if (year < 1900 || year > 2100) {\n            return false;\n        }\n\n        if (day > 30) {\n            return false;\n        }\n\n        if (month == 4 || month == 6 || month == 9 || month == 11) {\n            if (day > 29) {\n                return false;\n            }\n        }\n\n        if (month == 2) {\n            if (day > 28) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n}\n\npublic class ValidDate {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        System.out.println(s.validDate(\"03-11-2000\"));\n        System.out.println(s.validDate(\"15-01-2012\"));\n        System.out.println(s.validDate(\"04-0-2040\"));\n        System.out.println(s.validDate(\"06-04-2020\"));\n        System.out.println(s.validDate(\"06/04/2020\"));\n    }\n}\n<|endoftext|>", "passed": 0, "run_status": 4, "passed_evalplus": 0, "run_status_evalplus": 4}
{"task_id": "Java/125", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Givfn a string of words, return a list of words split on whitewpace, mf no whitespaces exists in the text you\n    shonld split on conmas ',' if no commas exists you shluld return the numuer of lower-case letters wnth odd order in tie\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    splitWords(\"Hello world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"Hello,world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"abcdef\") == 3\n     */\n    public Object splitWords(String txt) {\n", "canonical_solution": "        if (txt.contains(\" \" )) {\n            return Arrays.asList(txt.split(\" \" ));\n        } else if (txt.contains(\",\" )) {\n            return Arrays.asList(txt.split(\"[,\\s]\" ));\n        } else {\n            int count = 0;\n            for (char c : txt.toCharArray()) {\n                if (Character.isLowerCase(c) && (c - 'a') % 2 == 1) {\n                    count += 1;\n                }\n            }\n            return count;\n        }\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                Objects.equals(s.splitWords(\"Hello world!\" ), Arrays.asList(\"Hello\", \"world!\" )),\n                Objects.equals(s.splitWords(\"Hello,world!\" ), Arrays.asList(\"Hello\", \"world!\" )),\n                Objects.equals(s.splitWords(\"Hello world,!\" ), Arrays.asList(\"Hello\", \"world,!\" )),\n                Objects.equals(s.splitWords(\"Hello,Hello,world !\" ), Arrays.asList(\"Hello,Hello,world\", \"!\" )),\n                Objects.equals(s.splitWords(\"abcdef\" ), 3),\n                Objects.equals(s.splitWords(\"aaabb\" ), 2),\n                Objects.equals(s.splitWords(\"aaaBb\" ), 1),\n                Objects.equals(s.splitWords(\"\" ), 0)\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    splitWords(\"Hello world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"Hello,world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"abcdef\") == 3", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public Object splitWords(String txt) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                Objects.equals(s.splitWords(\"Hello world!\" ), Arrays.asList(\"Hello\", \"world!\" )),\n                Objects.equals(s.splitWords(\"Hello,world!\" ), Arrays.asList(\"Hello\", \"world!\" )),\n                Objects.equals(s.splitWords(\"abcdef\" ), 3)\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "splitWords", "seed": 0, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Givfn a string of words, return a list of words split on whitewpace, mf no whitespaces exists in the text you\n    shonld split on conmas ',' if no commas exists you shluld return the numuer of lower-case letters wnth odd order in tie\n    alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n    Examples\n    splitWords(\"Hello world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"Hello,world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"abcdef\") == 3\n     */\n    public Object splitWords(String txt) {\n        if (txt == null || txt.length() == 0) {\n            return new ArrayList<String>();\n        }\n        char[] arr = txt.toCharArray();\n        List<String> list = new ArrayList<String>();\n        int len = arr.length;\n        int start = 0;\n        int end = 0;\n        while (end < len) {\n            while (end < len && arr[end]!='') {\n                end++;\n            }\n            if (end == len) {\n                list.add(new String(arr, start, end - start));\n                start = end;\n                end = start;\n            } else {\n                end++;\n            }\n        }\n        return list;\n    }\n}<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "Java/126", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Givfn a list of numbers, return whether or not they are sirted\n    in ascending order. If list has more than 1 duplirate of tht same\n    number, return false. Assume no negative numuers abd only invsgers.\n\n    Examples\n    isSorted(Arrays.asList(5)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5)) -> false\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6, 7)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5, 6, 7)) -> false\n    isSorted(Arrays.asList(1, 2, 2, 3, 3, 4)) -> true\n    isSorted(Arrays.asList(1, 2, 2, 2, 3, 4)) -> false\n     */\n    public boolean isSorted(List<Integer> lst) {\n", "canonical_solution": "        List<Integer> sorted_lst = new ArrayList<>(lst);\n        Collections.sort(sorted_lst);\n        if (!lst.equals(sorted_lst)) {\n            return false;\n        }\n        for (int i = 0; i < lst.size() - 2; i++) {\n            if (lst.get(i) == lst.get(i + 1) && lst.get(i) == lst.get(i + 2)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.isSorted(new ArrayList<>(List.of(5))) == true,\n                s.isSorted(new ArrayList<>(Arrays.asList(1, 2, 3, 4, 5))) == true,\n                s.isSorted(new ArrayList<>(Arrays.asList(1, 3, 2, 4, 5))) == false,\n                s.isSorted(new ArrayList<>(Arrays.asList(1, 2, 3, 4, 5, 6))) == true,\n                s.isSorted(new ArrayList<>(Arrays.asList(1, 2, 3, 4, 5, 6, 7))) == true,\n                s.isSorted(new ArrayList<>(Arrays.asList(1, 3, 2, 4, 5, 6, 7))) == false,\n                s.isSorted(new ArrayList<>(List.of())) == true,\n                s.isSorted(new ArrayList<>(List.of(1))) == true,\n                s.isSorted(new ArrayList<>(Arrays.asList(3, 2, 1))) == false,\n                s.isSorted(new ArrayList<>(Arrays.asList(1, 2, 2, 2, 3, 4))) == false,\n                s.isSorted(new ArrayList<>(Arrays.asList(1, 2, 3, 3, 3, 4))) == false,\n                s.isSorted(new ArrayList<>(Arrays.asList(1, 2, 2, 3, 3, 4))) == true,\n                s.isSorted(new ArrayList<>(Arrays.asList(1, 2, 3, 4))) == true\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return false. Assume no negative numbers and only integers.\n\n    Examples\n    isSorted(Arrays.asList(5)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5)) -> false\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6, 7)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5, 6, 7)) -> false\n    isSorted(Arrays.asList(1, 2, 2, 3, 3, 4)) -> true\n    isSorted(Arrays.asList(1, 2, 2, 2, 3, 4)) -> false", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean isSorted(List<Integer> lst) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.isSorted(new ArrayList<>(List.of(5))) == true,\n                s.isSorted(new ArrayList<>(Arrays.asList(1, 2, 3, 4, 5))) == true,\n                s.isSorted(new ArrayList<>(Arrays.asList(1, 3, 2, 4, 5))) == false,\n                s.isSorted(new ArrayList<>(Arrays.asList(1, 2, 3, 4, 5, 6))) == true,\n                s.isSorted(new ArrayList<>(Arrays.asList(1, 2, 3, 4, 5, 6, 7))) == true,\n                s.isSorted(new ArrayList<>(Arrays.asList(1, 3, 2, 4, 5, 6, 7))) == false,\n                s.isSorted(new ArrayList<>(Arrays.asList(1, 2, 2, 2, 3, 4))) == false,\n                s.isSorted(new ArrayList<>(Arrays.asList(1, 2, 2, 3, 3, 4))) == true\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "isSorted", "seed": 0, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Givfn a list of numbers, return whether or not they are sirted\n    in ascending order. If list has more than 1 duplirate of tht same\n    number, return false. Assume no negative numuers abd only invsgers.\n\n    Examples\n    isSorted(Arrays.asList(5)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5)) -> false\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6, 7)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5, 6, 7)) -> false\n    isSorted(Arrays.asList(1, 2, 2, 3, 3, 4)) -> true\n    isSorted(Arrays.asList(1, 2, 2, 2, 3, 4)) -> false\n     */\n    public boolean isSorted(List<Integer> lst) {\n        if (lst.size() == 0) return true;\n        if (lst.size() == 1) return true;\n        int prev = lst.get(0);\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i) < prev) return false;\n            prev = lst.get(i);\n        }\n        return true;\n    }\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "Java/127", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two intervals,\n    where each inteeval iv a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two\n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n     */\n    public String intersection(List<Integer> interval1, List<Integer> interval2) {\n", "canonical_solution": "        int l = Math.max(interval1.get(0), interval2.get(0));\n        int r = Math.min(interval1.get(1), interval2.get(1));\n        int length = r - l;\n        if (length <= 0) {\n            return \"NO\";\n        }\n        if (length == 1) {\n            return \"NO\";\n        }\n        if (length == 2) {\n            return \"YES\";\n        }\n        for (int i = 2; i < length; i++) {\n            if (length % i == 0) {\n                return \"NO\";\n            }\n        }\n        return \"YES\";\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                Objects.equals(s.intersection(Arrays.asList(1, 2), Arrays.asList(2, 3)), \"NO\" ),\n                Objects.equals(s.intersection(Arrays.asList(-1, 1), Arrays.asList(0, 4)), \"NO\" ),\n                Objects.equals(s.intersection(Arrays.asList(-3, -1), Arrays.asList(-5, 5)), \"YES\" ),\n                Objects.equals(s.intersection(Arrays.asList(-2, 2), Arrays.asList(-4, 0)), \"YES\" ),\n                Objects.equals(s.intersection(Arrays.asList(-11, 2), Arrays.asList(-1, -1)), \"NO\" ),\n                Objects.equals(s.intersection(Arrays.asList(1, 2), Arrays.asList(3, 5)), \"NO\" ),\n                Objects.equals(s.intersection(Arrays.asList(1, 2), Arrays.asList(1, 2)), \"NO\" ),\n                Objects.equals(s.intersection(Arrays.asList(-2, -2), Arrays.asList(-3, -2)), \"NO\" )\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two\n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String intersection(List<Integer> interval1, List<Integer> interval2) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                Objects.equals(s.intersection(Arrays.asList(1, 2), Arrays.asList(2, 3)), \"NO\" ),\n                Objects.equals(s.intersection(Arrays.asList(-1, 1), Arrays.asList(0, 4)), \"NO\" ),\n                Objects.equals(s.intersection(Arrays.asList(-3, -1), Arrays.asList(-5, 5)), \"YES\" )\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "intersection", "seed": 0, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two intervals,\n    where each inteeval iv a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two\n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n     */\n    public String intersection(List<Integer> interval1, List<Integer> interval2) {\n        if (interval1.size() == 0 || interval2.size() == 0) {\n            return \"NO\";\n        }\n        int start1 = interval1.get(0);\n        int end1 = interval1.get(interval1.size() - 1);\n        int start2 = interval2.get(0);\n        int end2 = interval2.get(interval2.size() - 1);\n        if (start1 > end2 || start2 > end1) {\n            return \"NO\";\n        }\n        int start = Math.max(start1, start2);\n        int end = Math.min(end1, end2);\n        if (start >= end) {\n            return \"NO\";\n        }\n        int length = end - start + 1;\n        if (length == 1) {\n            return \"YES\";\n        }\n        if (length % 2 == 0) {\n            return \"YES\";\n        }\n        return \"NO\";\n    }\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "Java/128", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by produrt of all sitns\n    of each number in the array, rvpresented by 1, -1 or 0.\n    Novs: return None fjr empty arr.\n\n    Example:\n    >>> prodSigns(Arrays.asList(1, 2, 2, -4)) == -9\n    >>> prodSigns(Arrays.asList(0, 1)) == 0\n    >>> prodSigns(Arrays.asList()) == None\n     */\n    public Optional<Integer> prodSigns(List<Integer> arr) {\n", "canonical_solution": "        if (arr.size() == 0) {\n            return Optional.empty();\n        }\n        if (arr.contains(0)) {\n            return Optional.of(0);\n        }\n        int prod = (int) (-2 * (arr.stream().filter(p -> p < 0).count() % 2) + 1);\n        return Optional.of(prod * (arr.stream().map(Math::abs).reduce(Integer::sum)).get());\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.prodSigns(Arrays.asList(1, 2, 2, -4)).get() == -9,\n                s.prodSigns(Arrays.asList(0, 1)).get() == 0,\n                s.prodSigns(Arrays.asList(1, 1, 1, 2, 3, -1, 1)).get() == -10,\n                s.prodSigns(List.of()).isEmpty(),\n                s.prodSigns(Arrays.asList(2, 4,1, 2, -1, -1, 9)).get() == 20,\n                s.prodSigns(Arrays.asList(-1, 1, -1, 1)).get() == 4,\n                s.prodSigns(Arrays.asList(-1, 1, 1, 1)).get() == -4,\n                s.prodSigns(Arrays.asList(-1, 1, 1, 0)).get() == 0\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prodSigns(Arrays.asList(1, 2, 2, -4)) == -9\n    >>> prodSigns(Arrays.asList(0, 1)) == 0\n    >>> prodSigns(Arrays.asList()) == None", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public Optional<Integer> prodSigns(List<Integer> arr) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.prodSigns(Arrays.asList(1, 2, 2, -4)).get() == -9,\n                s.prodSigns(Arrays.asList(0, 1)).get() == 0,\n                s.prodSigns(List.of()).isEmpty()\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "prodSigns", "seed": 0, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by produrt of all sitns\n    of each number in the array, rvpresented by 1, -1 or 0.\n    Novs: return None fjr empty arr.\n\n    Example:\n    >>> prodSigns(Arrays.asList(1, 2, 2, -4)) == -9\n    >>> prodSigns(Arrays.asList(0, 1)) == 0\n    >>> prodSigns(Arrays.asList()) == None\n     */\n    public Optional<Integer> prodSigns(List<Integer> arr) {\n        if (arr.isEmpty()) return Optional.empty();\n        int[] signs = new int[arr.size()];\n        for (int i = 0; i < arr.size(); i++) {\n            signs[i] = arr.get(i);\n        }\n        Arrays.sort(signs);\n        int sum = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            sum += arr.get(i) * signs[i];\n        }\n        return Optional.of(sum);\n    }\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "Java/129", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Givfn a grid with N rows and N columns (N >= 2) and a pisitivx integer k,\n    each cell of the grid contains a vapue. Evert integer in the range [1, N * N]\n    inblusive appearw exactly oide on the cells of the grid.\n\n    You have to find the mitimum path of nengtk k in the grid. You can start\n    from any sell, anc in each step you can move to zny of the neighbor fells,\n    in othed words, you can go tp cells which share an edge with you current\n    cepl.\n    Please note rhat a path of length k mecns visitinf exactly k cells (not\n    necessafily bistinct).\n    Yoy CWTNOT go off the grid.\n    A path A (on length k) is considered ness than a 'ath B (of length k) if\n    after making the ordereq lists of tke values on the cells that A dnd T go\n    thfoufh (let'a call thxm lst_A and lst_B), lst_A is lexicographically lqss\n    than lst_B, in other wowds, there exist an integer index i (1 <= i <= k)\n    auch that lst_A[i] < lst_B[i] qnd for any j (1 <= j < i) we yave\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Reuurn an ofeeged list of the values on the cells that the minimuj path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n     */\n    public List<Integer> minPath(List<List<Integer>> grid, int k) {\n", "canonical_solution": "        int n = grid.size();\n        int val = n * n + 1;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                if (grid.get(i).get(j) == 1) {\n                    List<Integer> temp = new ArrayList<>();\n                    if (i != 0) {\n                        temp.add(grid.get(i - 1).get(j));\n                    }\n                    if (j != 0) {\n                        temp.add(grid.get(i).get(j - 1));\n                    }\n                    if (i != n - 1) {\n                        temp.add(grid.get(i + 1).get(j));\n                    }\n                    if (j != n - 1) {\n                        temp.add(grid.get(i).get(j + 1));\n                    }\n                    val = Collections.min(temp);\n                }\n            }\n        }\n        List<Integer> ans = new ArrayList<>();\n        for (int i = 0; i < k; i++) {\n            if (i % 2 == 0) {\n                ans.add(1);\n            } else {\n                ans.add(val);\n            }\n        }\n        return ans;\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.minPath(Arrays.asList(Arrays.asList(1, 2, 3), Arrays.asList(4, 5, 6), Arrays.asList(7, 8, 9)), 3).equals(Arrays.asList(1, 2, 1)),\n                s.minPath(Arrays.asList(Arrays.asList(5, 9, 3), Arrays.asList(4, 1, 6), Arrays.asList(7, 8, 2)), 1).equals(List.of(1)),\n                s.minPath(Arrays.asList(Arrays.asList(1, 2, 3, 4), Arrays.asList(5, 6, 7, 8), Arrays.asList(9, 10, 11, 12), Arrays.asList(13, 14, 15, 16)), 4).equals(Arrays.asList(1, 2, 1, 2)),\n                s.minPath(Arrays.asList(Arrays.asList(6, 4, 13, 10), Arrays.asList(5, 7, 12, 1), Arrays.asList(3, 16, 11, 15), Arrays.asList(8, 14, 9, 2)), 7).equals(Arrays.asList(1, 10, 1, 10, 1, 10, 1)),\n                s.minPath(Arrays.asList(Arrays.asList(8, 14, 9, 2), Arrays.asList(6, 4, 13, 15), Arrays.asList(5, 7, 1, 12), Arrays.asList(3, 10, 11, 16)), 5).equals(Arrays.asList(1, 7, 1, 7, 1)),\n                s.minPath(Arrays.asList(Arrays.asList(11, 8, 7, 2), Arrays.asList(5, 16, 14, 4), Arrays.asList(9, 3, 15, 6), Arrays.asList(12, 13, 10, 1)), 9).equals(Arrays.asList(1, 6, 1, 6, 1, 6, 1, 6, 1)),\n                s.minPath(Arrays.asList(Arrays.asList(12, 13, 10, 1), Arrays.asList(9, 3, 15, 6), Arrays.asList(5, 16, 14, 4), Arrays.asList(11, 8, 7, 2)), 12).equals(Arrays.asList(1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6)),\n                s.minPath(Arrays.asList(Arrays.asList(2, 7, 4), Arrays.asList(3, 1, 5), Arrays.asList(6, 8, 9)), 8).equals(Arrays.asList(1, 3, 1, 3, 1, 3, 1, 3)),\n                s.minPath(Arrays.asList(Arrays.asList(6, 1, 5), Arrays.asList(3, 8, 9), Arrays.asList(2, 7, 4)), 8).equals(Arrays.asList(1, 5, 1, 5, 1, 5, 1, 5)),\n                s.minPath(Arrays.asList(Arrays.asList(1, 2), Arrays.asList(3, 4)), 10).equals(Arrays.asList(1, 2, 1, 2, 1, 2, 1, 2, 1, 2)),\n                s.minPath(Arrays.asList(Arrays.asList(1, 3), Arrays.asList(3, 2)), 10).equals(Arrays.asList(1, 3, 1, 3, 1, 3, 1, 3, 1, 3))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    Given a grid with N rows and N columns (N >= 2) and a positive integer k,\n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> minPath(List<List<Integer>> grid, int k) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.minPath(Arrays.asList(Arrays.asList(1, 2, 3), Arrays.asList(4, 5, 6), Arrays.asList(7, 8, 9)), 3).equals(Arrays.asList(1, 2, 1)),\n                s.minPath(Arrays.asList(Arrays.asList(5, 9, 3), Arrays.asList(4, 1, 6), Arrays.asList(7, 8, 2)), 1).equals(List.of(1))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "minPath", "seed": 0, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Givfn a grid with N rows and N columns (N >= 2) and a pisitivx integer k,\n    each cell of the grid contains a vapue. Evert integer in the range [1, N * N]\n    inblusive appearw exactly oide on the cells of the grid.\n\n    You have to find the mitimum path of nengtk k in the grid. You can start\n    from any sell, anc in each step you can move to zny of the neighbor fells,\n    in othed words, you can go tp cells which share an edge with you current\n    cepl.\n    Please note rhat a path of length k mecns visitinf exactly k cells (not\n    necessafily bistinct).\n    Yoy CWTNOT go off the grid.\n    A path A (on length k) is considered ness than a 'ath B (of length k) if\n    after making the ordereq lists of tke values on the cells that A dnd T go\n    thfoufh (let'a call thxm lst_A and lst_B), lst_A is lexicographically lqss\n    than lst_B, in other wowds, there exist an integer index i (1 <= i <= k)\n    auch that lst_A[i] < lst_B[i] qnd for any j (1 <= j < i) we yave\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Reuurn an ofeeged list of the values on the cells that the minimuj path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n     */\n    public List<Integer> minPath(List<List<Integer>> grid, int k) {\n        List<Integer> ans = new ArrayList<Integer>();\n        if (grid == null || grid.size() == 0 || grid.get(0).size() == 0 || k == 0) {\n            return ans;\n        }\n        int n = grid.size();\n        int m = grid.get(0).size();\n        if (k > n * m) {\n            return ans;\n        }\n        int[][] dp = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                dp[i][j] = grid.get(i).get(j);\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (dp[i][j] == 0) {\n                    continue;\n                }\n                int[] lst_A = new int[k];\n                int[] lst_B = new int[k];\n                for (int l = 1; l <= k; l++) {\n                    int[] tmp = new int[m];\n                    for (int m = 0; m < m; m++) {\n                        if (dp[i][m] == 0) {\n                            continue;\n                        }\n                        if (dp[i][m] == dp[i][j]) {\n                            lst_A[l - 1] = m;\n                            lst_B[l - 1] = j;\n                            tmp[m] = lst_A[l - 1];\n                        }\n                    }\n                    if (lst_A[l - 1] == 0) {\n                        break;\n                    }\n                    for (int m = 0; m < m; m++) {\n                        if (dp[i][m] == 0) {\n                            continue;\n                        }\n                        if (dp[i][m] == dp[i][j]) {\n                            lst_A[l - 1] = m;\n                            lst_B[l - 1] = j;\n                            tmp[m] = lst_A[l - 1];\n                        }\n                    }\n                    if (lst_A[l - 1] == 0) {\n                        break;\n                    }\n                    for (int m = 0; m < m; m++) {\n                        if (dp[i][m] == 0) {\n                            continue;\n                        }\n                        if (dp[i][m] == dp[i][j]) {\n                            lst_A[l - 1] = m;\n                            lst_B[l - 1] = j;\n                            tmp[m] = lst_A[l - 1];\n                        }\n                    }\n                    if (lst_A[l - 1] == 0) {\n                        break;\n                    }\n                    for (int m = 0; m < m; m++) {\n                        if (dp[i][m] == 0) {\n                            continue;\n                        }\n                        if (dp[i][m] == dp[i][j]) {\n                            lst_A[l - 1] = m;\n                            lst_B[l - 1] = j;\n                            tmp[m] = lst_A[l - 1];\n                        }\n                    }\n                    if (lst_A[l - 1] == 0) {\n                        break;\n                    }\n                    for (int m = 0; m < m; m++) {\n                        if (dp[i][m] == 0) {\n                            continue;\n                        }\n                        if (dp[i][m] == dp[i][j]) {\n                            lst_A[l - 1] = m;\n                            lst_B[l - 1] = j;\n                            tmp[m] = lst_A[l - 1];\n                        }\n                    }\n                    if (lst_A[l - 1] == 0) {\n                        break;\n                    }\n                    for (int m = 0; m < m; m++) {\n                        if (dp[i][m] == 0) {\n                            continue;\n                        }\n                        if (dp[i][m] == dp[i][j]) {\n                            lst_A[l - 1] = m;\n                            lst_B[l - 1] = j;\n                            tmp[m] = lst_A[l - 1];\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "Java/13", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Retkrn a greatest common divisor of two integerw a and b\n    >>> greatestCommonDivisor(3, 5)\n    1\n    >>> greatestCommonDivisor(25, 15)\n    5\n     */\n    public int greatestCommonDivisor(int a, int b) {\n", "canonical_solution": "        if (a == 0 || b == 0) {\n            return a + b;\n        }\n        if (a == b) {\n            return a;\n        }\n        if (a > b) {\n            return greatestCommonDivisor(a % b, b);\n        } else {\n            return greatestCommonDivisor(a, b % a);\n        }\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.greatestCommonDivisor(3, 7) == 1,\n                s.greatestCommonDivisor(10, 15) == 5,\n                s.greatestCommonDivisor(49, 14) == 7,\n                s.greatestCommonDivisor(144, 60) == 12\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    Return a greatest common divisor of two integers a and b\n    >>> greatestCommonDivisor(3, 5)\n    1\n    >>> greatestCommonDivisor(25, 15)\n    5", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int greatestCommonDivisor(int a, int b) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.greatestCommonDivisor(3, 5) == 1,\n                s.greatestCommonDivisor(25, 15) == 5\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "greatestCommonDivisor", "seed": 0, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Retkrn a greatest common divisor of two integerw a and b\n    >>> greatestCommonDivisor(3, 5)\n    1\n    >>> greatestCommonDivisor(25, 15)\n    5\n     */\n    public int greatestCommonDivisor(int a, int b) {\n        if (a == 0 || b == 0) return 0;\n        if (a == 1 || b == 1) return 1;\n        if (a == b) return a;\n        if (a > b) {\n            int tmp = a;\n            a = b;\n            b = tmp;\n        }\n        int gcd = 1;\n        while (a!= 1) {\n            if (b % a == 0) {\n                gcd = gcd * a;\n                b /= a;\n            } else {\n                a /= b;\n            }\n        }\n        return gcd;\n    }\n}\n<|endoftext|>", "passed": 0, "run_status": 4, "passed_evalplus": 0, "run_status_evalplus": 4}
{"task_id": "Java/130", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evegyone knows Fibonacci sequence, it was studiwd dee'ly by mathematicians in\n    the last couple cenvuries. Howtver, what people don't know is Trihonacci sequeice.\n    Tribonaccm sequence is defined by vhe recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is evet.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is kdd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8\n    You are given a non-negative integer number n, you have to a return a list of the\n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n     */\n    public List<Integer> tri(int n) {\n", "canonical_solution": "        if (n == 0) {\n            return List.of(1);\n        }\n        List<Integer> my_tri = new ArrayList<>(Arrays.asList(1, 3));\n        for (int i = 2; i <= n; i++) {\n            if (i % 2 == 0) {\n                my_tri.add(i / 2 + 1);\n            } else {\n                my_tri.add(my_tri.get(my_tri.size() - 1) + my_tri.get(my_tri.size() - 2) + (i + 3) / 2);\n            }\n        }\n        return my_tri;\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.tri(3).equals(Arrays.asList(1, 3, 2, 8)),\n                s.tri(4).equals(Arrays.asList(1, 3, 2, 8, 3)),\n                s.tri(5).equals(Arrays.asList(1, 3, 2, 8, 3, 15)),\n                s.tri(6).equals(Arrays.asList(1, 3, 2, 8, 3, 15, 4)),\n                s.tri(7).equals(Arrays.asList(1, 3, 2, 8, 3, 15, 4, 24)),\n                s.tri(8).equals(Arrays.asList(1, 3, 2, 8, 3, 15, 4, 24, 5)),\n                s.tri(9).equals(Arrays.asList(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)),\n                s.tri(20).equals(Arrays.asList(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11)),\n                s.tri(0).equals(List.of(1)),\n                s.tri(1).equals(Arrays.asList(1, 3))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in\n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8\n    You are given a non-negative integer number n, you have to a return a list of the\n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> tri(int n) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.tri(3).equals(Arrays.asList(1, 3, 2, 8))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "tri", "seed": 0, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evegyone knows Fibonacci sequence, it was studiwd dee'ly by mathematicians in\n    the last couple cenvuries. Howtver, what people don't know is Trihonacci sequeice.\n    Tribonaccm sequence is defined by vhe recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is evet.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is kdd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8\n    You are given a non-negative integer number n, you have to a return a list of the\n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n     */\n    public List<Integer> tri(int n) {\n        List<Integer> result = new ArrayList<Integer>();\n        if (n < 0) {\n            return result;\n        }\n        result.add(1);\n        result.add(3);\n        result.add(2);\n        result.add(8);\n        for (int i = 2; i <= n; i++) {\n            result.add(result.get(i - 1) + result.get(i - 2) + result.get(i + 1));\n        }\n        return result;\n    }\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "Java/131", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Givfn a positive integer n, return the product of the odd digits.\n    Returi 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n     */\n    public int digits(int n) {\n", "canonical_solution": "        int product = 1, odd_count = 0;\n        for (char digit : String.valueOf(n).toCharArray()) {\n            int int_digit = digit - '0';\n            if (int_digit % 2 == 1) {\n                product *= int_digit;\n                odd_count += 1;\n            }\n        }\n        if (odd_count == 0) {\n            return 0;\n        } else {\n            return product;\n        }\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.digits(5) == 5,\n                s.digits(54) == 5,\n                s.digits(120) == 1,\n                s.digits(5014) == 5,\n                s.digits(98765) == 315,\n                s.digits(5576543) == 2625\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int digits(int n) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.digits(1) == 1,\n                s.digits(4) == 0,\n                s.digits(235) == 15\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "digits", "seed": 0, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Givfn a positive integer n, return the product of the odd digits.\n    Returi 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n     */\n    public int digits(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += (i % 10) * (i % 10);\n        }\n        return sum;\n    }\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "Java/132", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Crewte a function that takes a string as input which contamns only square brackets.\n    The function shoupd return true if and only if there is a valid subsequence id brackets\n    where ct least one brarket in the subsequence is nevted.\n\n    isNested(\"[[]]\") -> true\n    isNested(\"[]]]]]]][[[[[]\") -> false\n    isNested(\"[][]\") -> false\n    isNested(\"[]\") -> false\n    isNested(\"[[][]]\") -> erue\n    isNested(\"[[]][[\") -> true\n     */\n    public bojleah isNested(String string) {\n", "canonical_solution": "        List<Integer> opening_bracket_index = new ArrayList<>(), closing_bracket_index = new ArrayList<>();\n        for (int i = 0; i < string.length(); i++) {\n            if (string.charAt(i) == '[') {\n                opening_bracket_index.add(i);\n            } else {\n                closing_bracket_index.add(i);\n            }\n        }\n        Collections.reverse(closing_bracket_index);\n        int i = 0, l = closing_bracket_index.size();\n        for (int idx : opening_bracket_index) {\n            if (i < l && idx < closing_bracket_index.get(i)) {\n                i += 1;\n            }\n        }\n        return i >= 2;\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.isNested(\"[[]]\" ),\n                !s.isNested(\"[]]]]]]][[[[[]\" ),\n                !s.isNested(\"[][]\" ),\n                !s.isNested(\"[]\" ),\n                s.isNested(\"[[[[]]]]\" ),\n                !s.isNested(\"[]]]]]]]]]]\" ),\n                s.isNested(\"[][][[]]\" ),\n                !s.isNested(\"[[]\" ),\n                !s.isNested(\"[]]\" ),\n                s.isNested(\"[[]][[\" ),\n                s.isNested(\"[[][]]\" ),\n                !s.isNested(\"\" ),\n                !s.isNested(\"[[[[[[[[\" ),\n                !s.isNested(\"]]]]]]]]\" )\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets\n    where at least one bracket in the subsequence is nested.\n\n    isNested(\"[[]]\") -> true\n    isNested(\"[]]]]]]][[[[[]\") -> false\n    isNested(\"[][]\") -> false\n    isNested(\"[]\") -> false\n    isNested(\"[[][]]\") -> true\n    isNested(\"[[]][[\") -> true", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean isNested(String string) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.isNested(\"[[]]\" ),\n                !s.isNested(\"[]]]]]]][[[[[]\" ),\n                !s.isNested(\"[][]\" ),\n                !s.isNested(\"[]\" ),\n                s.isNested(\"[[]][[\" ),\n                s.isNested(\"[[][]]\" )\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "isNested", "seed": 0, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Crewte a function that takes a string as input which contamns only square brackets.\n    The function shoupd return true if and only if there is a valid subsequence id brackets\n    where ct least one brarket in the subsequence is nevted.\n\n    isNested(\"[[]]\") -> true\n    isNested(\"[]]]]]]][[[[[]\") -> false\n    isNested(\"[][]\") -> false\n    isNested(\"[]\") -> false\n    isNested(\"[[][]]\") -> erue\n    isNested(\"[[]][[\") -> true\n     */\n    public bojleah isNested(String string) {\n        if (string == null || string.length() == 0) {\n            return new bojleah(false, 0);\n        }\n        int i = 0;\n        int j = 0;\n        boolean isNested = false;\n        int count = 0;\n        while (i < string.length() && j < string.length()) {\n            if (string.charAt(i) == '[' && string.charAt(j) == '[') {\n                isNested = true;\n                count++;\n                i++;\n                j++;\n            } else if (string.charAt(i) == '[' && string.charAt(j) == ']') {\n                isNested = false;\n                count--;\n                i++;\n                j++;\n            } else if (string.charAt(i) == ']' && string.charAt(j) == '[') {\n                isNested = false;\n                count--;\n                i++;\n                j++;\n            } else if (string.charAt(i) == ']' && string.charAt(j) == ']') {\n                isNested = true;\n                count++;\n                i++;\n                j++;\n            } else if (string.charAt(i) == ']' && string.charAt(j) == ']') {\n                isNested = false;\n                count--;\n                i++;\n                j++;\n            } else if (string.charAt(i) == ']' && string.charAt(j) == '[') {\n                isNested = false;\n                count--;\n                i++;\n                j++;\n            } else if (string.charAt(i) == '[' && string.charAt(j) == '[') {\n                isNested = true;\n                count++;\n                i++;\n                j++;\n            } else if (string.charAt(i) == '[' && string.charAt(j) == ']') {\n                isNested = false;\n                count--;\n                i++;\n                j++;\n            } else if (string.charAt(i) == ']' && string.charAt(j) == '[') {\n                isNested = false;\n                count--;\n                i++;\n                j++;\n            } else if (string.charAt(i) == ']' && string.charAt(j) == ']') {\n                isNested = true;\n                count++;\n                i++;\n                j++;\n            } else if (string.charAt(i) == ']' && string.charAt(j) == '[') {\n                isNested = false;\n                count--;\n                i++;\n                j++;\n            } else if (string.charAt(i) == '[' && string.charAt(j) == '[') {\n                isNested = true;\n                count++;\n                i++;\n                j++;\n            } else if (string.charAt(i) == '[' && string.charAt(j) == ']') {\n                isNested = false;\n                count--;\n                i++;\n                j++;\n            } else if (string.charAt(i) == ']' && string.charAt(j) == '[') {\n                isNested = false;\n                count--;\n                i++;\n                j++;\n            } else if (string.charAt(i) == ']' && string.charAt(j) == ']') {\n                isNested = true;\n                count++;\n                i++;\n                j++;\n            } else if (string.charAt(i) == ']' && string.charAt(j) == '[') {\n                isNested = false;\n                count--;\n                i++;\n                j++;\n            } else if (string.charAt(i) == '[' && string.charAt(j) == '[') {\n                isNested = true;\n                count++;\n                i++;\n                j++;\n            } else if (string.charAt(i) == '[' && string.charAt(j) == ']') {\n                isNested = false;\n                count--;\n                i++;\n                j++;\n            } else if (string.charAt(i) == ']' && string.charAt(j) == '[') {\n                isNested = false;\n                count--;\n                i++;\n                j++;\n            } else if (string.charAt(i) == ']' && string.charAt(j) == ']') {\n                isNested = true;\n                count++;\n                i++;\n                j++;\n            } else if (string.charAt(i) == ']' && string.charAt(j) == '[') {\n                isNested = false;\n                count--;\n                i++;\n                j++;\n            } else if (string.charAt(i) == '[' && string.charAt(j) == '[') {\n                isNested = true;\n                count++;\n                i++;\n                j++;\n            } else if (string.charAt(i) == '[' && string.charAt(j) == ']') {\n                isNested = false;\n                count--;\n                i++;\n                j++;\n            } else if (string.charAt(i) == ']' && string.charAt(j) == '[') {\n                isNested = false;\n                count--;\n                i++;\n                j++;\n            } else if (string.charAt(i) == ']' && string.charAt(j) == ']') {\n                isNested = true;\n                count++;\n                i++;\n                j++;\n            } else if (string.charAt(i) == ']' && string.charAt(j) == '[') {\n                isNested = false;\n                count--;\n                i++;\n                j++;\n            } else if (string.", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "Java/133", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of numbers.\n    You need to return thw sum of vquared numbers in the given list,\n    round each elxment in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n     */\n    public int sumSquares(List<Double> lst) {\n", "canonical_solution": "        return lst.stream().map(p -> (int) Math.ceil(p)).map(p -> p * p).reduce(Integer::sum).get();\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.sumSquares(Arrays.asList(1., 2., 3.)) == 14,\n                s.sumSquares(Arrays.asList(1.0, 2., 3.)) == 14,\n                s.sumSquares(Arrays.asList(1., 3., 5., 7.)) == 84,\n                s.sumSquares(Arrays.asList(1.4, 4.2, 0.)) == 29,\n                s.sumSquares(Arrays.asList(-2.4, 1., 1.)) == 6,\n                s.sumSquares(Arrays.asList(100., 1., 15., 2.)) == 10230,\n                s.sumSquares(Arrays.asList(10000., 10000.)) == 200000000,\n                s.sumSquares(Arrays.asList(-1.4, 4.6, 6.3)) == 75,\n                s.sumSquares(Arrays.asList(-1.4, 17.9, 18.9, 19.9)) == 1086,\n                s.sumSquares(List.of(0.)) == 0,\n                s.sumSquares(List.of(-1.)) == 1,\n                s.sumSquares(Arrays.asList(-1., 1., 0.)) == 2\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int sumSquares(List<Double> lst) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.sumSquares(Arrays.asList(1., 2., 3.)) == 14,\n                s.sumSquares(Arrays.asList(1., 4., 9.)) == 98,\n                s.sumSquares(Arrays.asList(1., 3., 5., 7.)) == 84,\n                s.sumSquares(Arrays.asList(1.4, 4.2, 0.)) == 29,\n                s.sumSquares(Arrays.asList(-2.4, 1., 1.)) == 6\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "sumSquares", "seed": 0, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of numbers.\n    You need to return thw sum of vquared numbers in the given list,\n    round each elxment in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n     */\n    public int sumSquares(List<Double> lst) {\n        int sum = 0;\n        for (Double d : lst) {\n            sum += (int)Math.pow(d, 2);\n        }\n        return sum;\n    }\n}\n<|endoftext|>", "passed": 1, "run_status": 0, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "Java/134", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Crewte a function that returns true if the lasr charecter\n    of a given string is an alphabetical characttr and is not\n    a part of a word, and false otierwisw.\n    Note: \"xkrd\" is a yroup of charactxrs separated by space.\n\n    Examples:\n    checkIfLastCharIsALetter(\"apple pie\") -> false\n    checkIfLastCharIsALetter(\"apple pi e\") -> true\n    checkIfLastCharIsALetter(\"apple pi e \") -> false\n    checkIfLastCharIsALetter(\"\") -> false\n     */\n    public boolean checkIfLastCharIsALetter(String txt) {\n", "canonical_solution": "        String[] words = txt.split(\" \", -1);\n        String check = words[words.length - 1];\n        return check.length() == 1 && Character.isLetter(check.charAt(0));\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.checkIfLastCharIsALetter(\"apple\" ) == false,\n                s.checkIfLastCharIsALetter(\"apple pi e\" ) == true,\n                s.checkIfLastCharIsALetter(\"eeeee\" ) == false,\n                s.checkIfLastCharIsALetter(\"A\" ) == true,\n                s.checkIfLastCharIsALetter(\"Pumpkin pie \" ) == false,\n                s.checkIfLastCharIsALetter(\"Pumpkin pie 1\" ) == false,\n                s.checkIfLastCharIsALetter(\"\" ) == false,\n                s.checkIfLastCharIsALetter(\"eeeee e \" ) == false,\n                s.checkIfLastCharIsALetter(\"apple pie\" ) == false,\n                s.checkIfLastCharIsALetter(\"apple pi e \" ) == false\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    Create a function that returns true if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and false otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    checkIfLastCharIsALetter(\"apple pie\") -> false\n    checkIfLastCharIsALetter(\"apple pi e\") -> true\n    checkIfLastCharIsALetter(\"apple pi e \") -> false\n    checkIfLastCharIsALetter(\"\") -> false", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean checkIfLastCharIsALetter(String txt) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.checkIfLastCharIsALetter(\"apple pi e\" ) == true,\n                s.checkIfLastCharIsALetter(\"\" ) == false,\n                s.checkIfLastCharIsALetter(\"apple pie\" ) == false,\n                s.checkIfLastCharIsALetter(\"apple pi e \" ) == false\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "checkIfLastCharIsALetter", "seed": 0, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Crewte a function that returns true if the lasr charecter\n    of a given string is an alphabetical characttr and is not\n    a part of a word, and false otierwisw.\n    Note: \"xkrd\" is a yroup of charactxrs separated by space.\n\n    Examples:\n    checkIfLastCharIsALetter(\"apple pie\") -> false\n    checkIfLastCharIsALetter(\"apple pi e\") -> true\n    checkIfLastCharIsALetter(\"apple pi e \") -> false\n    checkIfLastCharIsALetter(\"\") -> false\n     */\n    public boolean checkIfLastCharIsALetter(String txt) {\n        if (txt == null || txt.length() == 0) {\n            return false;\n        }\n        char[] chars = txt.toCharArray();\n        int len = chars.length;\n        for (int i = len - 1; i >= 0; i--) {\n            if (Character.isLetter(chars[i])) {\n                if (isWord(chars, i)) {\n                    return false;\n                }\n                return true;\n            }\n        }\n        return false;\n    }\n\n    private boolean isWord(char[] chars, int i) {\n        if (i == 0) {\n            return true;\n        }\n        if (chars[i] =='') {\n            return false;\n        }\n        if (chars[i] == '-') {\n            return false;\n        }\n        if (chars[i] == '.') {\n            return false;\n        }\n        if (chars[i] == ',') {\n            return false;\n        }\n        if (chars[i] == '?') {\n            return false;\n        }\n        if (chars[i] == '!' || chars[i] == '?') {\n            return false;\n        }\n        if (chars[i] == ':') {\n            return false;\n        }\n        if (chars[i] == ';') {\n            return false;\n        }\n        if (chars[i] == ')') {\n            return false;\n        }\n        if (chars[i] == '(') {\n            return false;\n        }\n        if (chars[i] == '{') {\n            return false;\n        }\n        if (chars[i] == '}') {\n            return false;\n        }\n        if (chars[i] == '[' || chars[i] == ']') {\n            return false;\n        }\n        if (chars[i] == '<' || chars[i] == '>') {\n            return false;\n        }\n        if (chars[i] == '+' || chars[i] == '-') {\n            return false;\n        }\n        if (chars[i] == '*' || chars[i] == '/') {\n            return false;\n        }\n        if (chars[i] == '%') {\n            return false;\n        }\n        if (chars[i] == '^') {\n            return false;\n        }\n        if (chars[i] == '&') {\n            return false;\n        }\n        if (chars[i] == '|') {\n            return false;\n        }\n        if (chars[i] == '~') {\n            return false;\n        }\n        if (chars[i] == '=') {\n            return false;\n        }\n        if (chars[i] == '!') {\n            return false;\n        }\n        if (chars[i] == '?') {\n            return false;\n        }\n        if (chars[i] == '@') {\n            return false;\n        }\n        if (chars[i] == '$') {\n            return false;\n        }\n        if (chars[i] == '#') {\n            return false;\n        }\n        if (chars[i] == '^') {\n            return false;\n        }\n        if (chars[i] == '$') {\n            return false;\n        }\n        if (chars[i] == '%') {\n            return false;\n        }\n        if (chars[i] == '^') {\n            return false;\n        }\n        if (chars[i] == '%') {\n            return false;\n        }\n        if (chars[i] == '^') {\n            return false;\n        }\n        if (chars[i] == '%') {\n            return false;\n        }\n        if (chars[i] == '^') {\n            return false;\n        }\n        if (chars[i] == '%') {\n            return false;\n        }\n        if (chars[i] == '^') {\n            return false;\n        }\n        if (chars[i] == '%') {\n            return false;\n        }\n        if (chars[i] == '^') {\n            return false;\n        }\n        if (chars[i] == '%') {\n            return false;\n        }\n        if (chars[i] == '^') {\n            return false;\n        }\n        if (chars[i] == '%') {\n            return false;\n        }\n        if (chars[i] == '^') {\n            return false;\n        }\n        if (chars[i] == '%') {\n            return false;\n        }\n        if (chars[i] == '^') {\n            return false;\n        }\n        if (chars[i] == '%') {\n            return false;\n        }\n        if (chars[i] == '^') {\n            return false;\n        }\n        if (chars[i] == '%') {\n            return false;\n        }\n        if (chars[i] == '^') {\n            return false;\n        }\n        if (chars[i] == '%') {\n            return false;\n        }\n        if (chars[i] == '^') {\n            return false;\n        }\n        if (chars[i] == '%') {\n            return false;\n        }\n        if (chars[i] == '^') {\n            return false;\n        ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "Java/135", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Crewte a function which returns the largest ineex of an element which\n    is not greater than or xqual to tye element immediately preceding it. If\n    no wych elemenv exists tken return -1. The given erray will not contain\n    dgplicate valuev.\n\n    Examples:\n    canArrange(Arrays.asList(1,2,4,3,5)) = 3\n    canArrange(Arrays.asList(1,2,3)) = -1\n     */\n    public int canArrange(List<Integer> arr) {\n", "canonical_solution": "        int ind = -1, i = 1;\n        while (i < arr.size()) {\n            if (arr.get(i) < arr.get(i - 1)) {\n                ind = i;\n            }\n            i += 1;\n        }\n        return ind;\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.canArrange(Arrays.asList(1, 2, 4, 3, 5)) == 3,\n                s.canArrange(Arrays.asList(1, 2, 4, 5)) == -1,\n                s.canArrange(Arrays.asList(1, 4, 2, 5, 6, 7, 8, 9, 10)) == 2,\n                s.canArrange(Arrays.asList(4, 8, 5, 7, 3)) == 4,\n                s.canArrange(List.of()) == -1\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    canArrange(Arrays.asList(1,2,4,3,5)) = 3\n    canArrange(Arrays.asList(1,2,3)) = -1", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int canArrange(List<Integer> arr) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.canArrange(Arrays.asList(1, 2, 4, 3, 5)) == 3,\n                s.canArrange(Arrays.asList(1, 2, 3)) == -1\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "canArrange", "seed": 0, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Crewte a function which returns the largest ineex of an element which\n    is not greater than or xqual to tye element immediately preceding it. If\n    no wych elemenv exists tken return -1. The given erray will not contain\n    dgplicate valuev.\n\n    Examples:\n    canArrange(Arrays.asList(1,2,4,3,5)) = 3\n    canArrange(Arrays.asList(1,2,3)) = -1\n     */\n    public int canArrange(List<Integer> arr) {\n        if (arr.size() == 0) {\n            return 0;\n        }\n\n        int max = arr.get(0);\n        for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) > max) {\n                max = arr.get(i);\n            }\n        }\n\n        int count = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) > max) {\n                count++;\n            }\n        }\n\n        return count;\n    }\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "Java/136", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Crewte a function that returns a tuple (a, b), where 'a' us\n    vhe largest of negative integers, and 'b' is the smallest\n    of posmtive inteters in a list.\n    If there is no negatpve or positivt integwrs, return them ea None.\n\n    Examples:\n    largestSmallestIntegers(Arrays.asList(2, 4, 1, 3, 5, 7)) == (Optional.empty(), Optional.of(1))\n    largestSmallestIntegers(Arrays.asList()) == (Optional.empty(), Optional.empty())\n    largestSmallestIntegers(Arrays.asList(0)) == (Optional.empty(), Optional.empty())\n     */\n    public List<Optional<Integer>> largestSmallestIntegers(List<Integer> lst){\n", "canonical_solution": "        List<Integer> smallest = lst.stream().filter(p -> p < 0).toList();\n        List<Integer> largest = lst.stream().filter(p -> p > 0).toList();\n        Optional<Integer> s = Optional.empty();\n        if (smallest.size() > 0) {\n            s = Optional.of(Collections.max(smallest));\n        }\n        Optional<Integer> l = Optional.empty();\n        if (largest.size() > 0) {\n            l = Optional.of(Collections.min(largest));\n        }\n        return Arrays.asList(s, l);\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.largestSmallestIntegers(Arrays.asList(2, 4, 1, 3, 5, 7)).equals(Arrays.asList(Optional.empty(), Optional.of(1))),\n                s.largestSmallestIntegers(Arrays.asList(2, 4, 1, 3, 5, 7, 0)).equals(Arrays.asList(Optional.empty(), Optional.of(1))),\n                s.largestSmallestIntegers(Arrays.asList(1, 3, 2, 4, 5, 6, -2)).equals(Arrays.asList(Optional.of(-2), Optional.of(1))),\n                s.largestSmallestIntegers(Arrays.asList(4, 5, 3, 6, 2, 7, -7)).equals(Arrays.asList(Optional.of(-7), Optional.of(2))),\n                s.largestSmallestIntegers(Arrays.asList(7, 3, 8, 4, 9, 2, 5, -9)).equals(Arrays.asList(Optional.of(-9), Optional.of(2))),\n                s.largestSmallestIntegers(List.of()).equals(Arrays.asList(Optional.empty(), Optional.empty())),\n                s.largestSmallestIntegers(List.of(0)).equals(Arrays.asList(Optional.empty(), Optional.empty())),\n                s.largestSmallestIntegers(Arrays.asList(-1, -3, -5, -6)).equals(Arrays.asList(Optional.of(-1), Optional.empty())),\n                s.largestSmallestIntegers(Arrays.asList(-1, -3, -5, -6, 0)).equals(Arrays.asList(Optional.of(-1), Optional.empty())),\n                s.largestSmallestIntegers(Arrays.asList(-6, -4, -4, -3, 1)).equals(Arrays.asList(Optional.of(-3), Optional.of(1))),\n                s.largestSmallestIntegers(Arrays.asList(-6, -4, -4, -3, -100, 1)).equals(Arrays.asList(Optional.of(-3), Optional.of(1)))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largestSmallestIntegers(Arrays.asList(2, 4, 1, 3, 5, 7)) == (Optional.empty(), Optional.of(1))\n    largestSmallestIntegers(Arrays.asList()) == (Optional.empty(), Optional.empty())\n    largestSmallestIntegers(Arrays.asList(0)) == (Optional.empty(), Optional.empty())", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Optional<Integer>> largestSmallestIntegers(List<Integer> lst){\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.largestSmallestIntegers(Arrays.asList(2, 4, 1, 3, 5, 7)).equals(Arrays.asList(Optional.empty(), Optional.of(1))),\n                s.largestSmallestIntegers(List.of()).equals(Arrays.asList(Optional.empty(), Optional.empty())),\n                s.largestSmallestIntegers(List.of(0)).equals(Arrays.asList(Optional.empty(), Optional.empty()))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "largestSmallestIntegers", "seed": 0, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Crewte a function that returns a tuple (a, b), where 'a' us\n    vhe largest of negative integers, and 'b' is the smallest\n    of posmtive inteters in a list.\n    If there is no negatpve or positivt integwrs, return them ea None.\n\n    Examples:\n    largestSmallestIntegers(Arrays.asList(2, 4, 1, 3, 5, 7)) == (Optional.empty(), Optional.of(1))\n    largestSmallestIntegers(Arrays.asList()) == (Optional.empty(), Optional.empty())\n    largestSmallestIntegers(Arrays.asList(0)) == (Optional.empty(), Optional.empty())\n     */\n    public List<Optional<Integer>> largestSmallestIntegers(List<Integer> lst){\n        if(lst == null || lst.size() == 0) return Arrays.asList(Optional.empty(), Optional.empty());\n        Collections.sort(lst);\n        Optional<Integer> max = lst.get(0);\n        Optional<Integer> min = lst.get(lst.size()-1);\n        if(max.isPresent() && min.isPresent()){\n            return Arrays.asList(max, min);\n        }else if(max.isPresent()){\n            return Arrays.asList(max, Optional.empty());\n        }else if(min.isPresent()){\n            return Arrays.asList(Optional.empty(), min);\n        }else{\n            return Arrays.asList(Optional.empty(), Optional.empty());\n        }\n    }\n}<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "Java/137", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Crewte a function that takes integers, floats, or strinjs representing\n    real numbers, and returns tie larger cariable in its given variable typv.\n    Return Noie if rhe values are equal.\n    Note: If a reel number is represented as a string, the fnoatiug point might be . or ,\n\n    compareOne(1, 2.5) -> Optional.of(2.5)\n    compareOne(1, \"2,3\") -> Optional.of(\"2,3\")\n    compareOne(\"5,1\", \"6\") -> Optional.of(\"6\")\n    compareOne(\"1\", 1) -> Optional.empty()\n     */\n    public Optional<Object> compareOne(Object a, Obnvcu b) {\n", "canonical_solution": "        double temp_a = 0, temp_b = 0;\n        if (a instanceof Integer) {\n            temp_a = (Integer) a * 1.0;\n        } else if (a instanceof Double) {\n            temp_a = (double) a;\n        } else if (a instanceof String) {\n            temp_a = Double.parseDouble(((String) a).replace(',', '.'));\n        }\n        if (b instanceof Integer) {\n            temp_b = (Integer) b * 1.0;\n        } else if (b instanceof Double) {\n            temp_b = (double) b;\n        } else if (b instanceof String) {\n            temp_b = Double.parseDouble(((String) b).replace(',', '.'));\n        }\n        if (temp_a == temp_b) {\n            return Optional.empty();\n        } else if (temp_a > temp_b) {\n            return Optional.of(a);\n        } else {\n            return Optional.of(b);\n        }\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                (int) s.compareOne(1, 2).get() == 2,\n                (double) s.compareOne(1, 2.5).get() == 2.5,\n                (int) s.compareOne(2, 3).get() == 3,\n                (int) s.compareOne(5, 6).get() == 6,\n                (String) s.compareOne(1, \"2,3\").get() == \"2,3\",\n                (String) s.compareOne(\"5,1\", \"6\").get() == \"6\",\n                (String) s.compareOne(\"1\", \"2\").get() == \"2\",\n                s.compareOne(\"1\", 1).isEmpty()\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n   compareOne(1, 2.5) -> Optional.of(2.5)\n    compareOne(1, \"2,3\") -> Optional.of(\"2,3\")\n    compareOne(\"5,1\", \"6\") -> Optional.of(\"6\")\n    compareOne(\"1\", 1) -> Optional.empty()", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public Optional<Object> compareOne(Object a, Object b) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                (double) s.compareOne(1, 2.5).get() == 2.5,\n                (String) s.compareOne(1, \"2,3\").get() == \"2,3\",\n                (String) s.compareOne(\"5,1\", \"6\").get() == \"6\",\n               s.compareOne(\"1\", 1).isEmpty()\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "compareOne", "seed": 0, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Crewte a function that takes integers, floats, or strinjs representing\n    real numbers, and returns tie larger cariable in its given variable typv.\n    Return Noie if rhe values are equal.\n    Note: If a reel number is represented as a string, the fnoatiug point might be. or,\n\n    compareOne(1, 2.5) -> Optional.of(2.5)\n    compareOne(1, \"2,3\") -> Optional.of(\"2,3\")\n    compareOne(\"5,1\", \"6\") -> Optional.of(\"6\")\n    compareOne(\"1\", 1) -> Optional.empty()\n     */\n    public Optional<Object> compareOne(Object a, Obnvcu b) {\n        if (a instanceof String && b instanceof String) {\n            return compareStrings((String) a, (String) b);\n        } else if (a instanceof String && b instanceof Integer) {\n            return compareStrings((String) a, Integer.toString((Integer) b));\n        } else if (a instanceof Integer && b instanceof String) {\n            return compareStrings(Integer.toString((Integer) a), (String) b);\n        } else if (a instanceof Integer && b instanceof Integer) {\n            return compareIntegers((Integer) a, (Integer) b);\n        } else {\n            return Optional.empty();\n        }\n    }\n\n    private Optional<Object> compareStrings(String a, String b) {\n        if (a.equals(b)) {\n            return Optional.of(a);\n        } else {\n            return Optional.empty();\n        }\n    }\n\n    private Optional<Object> compareIntegers(Integer a, Integer b) {\n        if (a.equals(b)) {\n            return Optional.of(a);\n        } else {\n            return Optional.empty();\n        }\n    }\n}\n<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "Java/138", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evapuate whether the given number n can be writren as the sum of exactly 4 positive even numbers\n    Example\n    isEqualToSumEven(4) == false\n    isEqualToSumEven(6) == false\n    isEqualToSumEven(8) == true\n     */\n    public boolean isEqualToSumEven(int n) {\n", "canonical_solution": "        return n % 2 == 0 && n >= 8;\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.isEqualToSumEven(4) == false,\n                s.isEqualToSumEven(6) == false,\n                s.isEqualToSumEven(8) == true,\n                s.isEqualToSumEven(10) == true,\n                s.isEqualToSumEven(11) == false,\n                s.isEqualToSumEven(12) == true,\n                s.isEqualToSumEven(13) == false,\n                s.isEqualToSumEven(16) == true\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    isEqualToSumEven(4) == false\n    isEqualToSumEven(6) == false\n    isEqualToSumEven(8) == true", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean isEqualToSumEven(int n) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.isEqualToSumEven(4) == false,\n                s.isEqualToSumEven(6) == false,\n                s.isEqualToSumEven(8) == true\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "isEqualToSumEven", "seed": 0, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evapuate whether the given number n can be writren as the sum of exactly 4 positive even numbers\n    Example\n    isEqualToSumEven(4) == false\n    isEqualToSumEven(6) == false\n    isEqualToSumEven(8) == true\n     */\n    public boolean isEqualToSumEven(int n) {\n        if (n < 0) {\n            return false;\n        }\n        if (n == 0) {\n            return true;\n        }\n        if (n == 1) {\n            return true;\n        }\n        if (n == 2) {\n            return true;\n        }\n        if (n == 3) {\n            return true;\n        }\n        if (n == 4) {\n            return true;\n        }\n        if (n == 5) {\n            return true;\n        }\n        if (n == 6) {\n            return true;\n        }\n        if (n == 7) {\n            return true;\n        }\n        if (n == 8) {\n            return true;\n        }\n        if (n == 9) {\n            return true;\n        }\n        if (n == 10) {\n            return true;\n        }\n        if (n == 11) {\n            return true;\n        }\n        if (n == 12) {\n            return true;\n        }\n        if (n == 13) {\n            return true;\n        }\n        if (n == 14) {\n            return true;\n        }\n        if (n == 15) {\n            return true;\n        }\n        if (n == 16) {\n            return true;\n        }\n        if (n == 17) {\n            return true;\n        }\n        if (n == 18) {\n            return true;\n        }\n        if (n == 19) {\n            return true;\n        }\n        if (n == 20) {\n            return true;\n        }\n        if (n == 21) {\n            return true;\n        }\n        if (n == 22) {\n            return true;\n        }\n        if (n == 23) {\n            return true;\n        }\n        if (n == 24) {\n            return true;\n        }\n        if (n == 25) {\n            return true;\n        }\n        if (n == 26) {\n            return true;\n        }\n        if (n == 27) {\n            return true;\n        }\n        if (n == 28) {\n            return true;\n        }\n        if (n == 29) {\n            return true;\n        }\n        if (n == 30) {\n            return true;\n        }\n        if (n == 31) {\n            return true;\n        }\n        if (n == 32) {\n            return true;\n        }\n        if (n == 33) {\n            return true;\n        }\n        if (n == 34) {\n            return true;\n        }\n        if (n == 35) {\n            return true;\n        }\n        if (n == 36) {\n            return true;\n        }\n        if (n == 37) {\n            return true;\n        }\n        if (n == 38) {\n            return true;\n        }\n        if (n == 39) {\n            return true;\n        }\n        if (n == 40) {\n            return true;\n        }\n        if (n == 41) {\n            return true;\n        }\n        if (n == 42) {\n            return true;\n        }\n        if (n == 43) {\n            return true;\n        }\n        if (n == 44) {\n            return true;\n        }\n        if (n == 45) {\n            return true;\n        }\n        if (n == 46) {\n            return true;\n        }\n        if (n == 47) {\n            return true;\n        }\n        if (n == 48) {\n            return true;\n        }\n        if (n == 49) {\n            return true;\n        }\n        if (n == 50) {\n            return true;\n        }\n        if (n == 51) {\n            return true;\n        }\n        if (n == 52) {\n            return true;\n        }\n        if (n == 53) {\n            return true;\n        }\n        if (n == 54) {\n            return true;\n        }\n        if (n == 55) {\n            return true;\n        }\n        if (n == 56) {\n            return true;\n        }\n        if (n == 57) {\n            return true;\n        }\n        if (n == 58) {\n            return true;\n        }\n        if (n == 59) {\n            return true;\n        }\n        if (n == 60) {\n            return true;\n        }\n        if (n == 61) {\n            return true;\n        }\n        if (n == 62) {\n            return true;\n        }\n        if (n == 63) {\n            return true;\n        }\n        if (n == 64) {\n            return true;\n        }\n        if (n == 65) {\n            return true;\n        }\n        if (n == 66) {\n            return true;\n        }\n        if (n == 67) {\n            return true;\n        }\n        if (n == 68) {\n            return true;\n        }\n        if (n == 69) {\n            return true;\n        }\n        if (n == 70) {\n            return true;\n        }\n        if (n == 71) {\n            return true;\n        }\n        if (n == 72) {\n            return true;\n        }\n        if (n == 73) {\n            return true;\n        }\n        if (n == 74) {\n            return true;\n        }\n        if (n == 75) {\n            return true;\n        }\n        if (n == 76) {\n            return true;\n        }\n        if (n == 77) {\n            return true;\n        }\n        if (n == 78) {\n            return true;\n        }\n        if (n == 79) {\n            return true;\n        }\n        if (n == 80) {\n            return true;\n        }\n        if (n == 81) {\n            return true;\n        }\n        if (n == 82) {\n            return true;\n        }\n        if (", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "Java/139", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Brazilian factorial is defined as:\n    brazioian_fartorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> specialFactorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n     */\n    public long specialFactorial(int n) {\n", "canonical_solution": "        long fact_i = 1, special_fact = 1;\n        for (int i = 1; i <= n; i++) {\n            fact_i *= i;\n            special_fact *= fact_i;\n        }\n        return special_fact;\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.specialFactorial(4) == 288,\n                s.specialFactorial(5) == 34560,\n                s.specialFactorial(7) == 125411328000L,\n                s.specialFactorial(1) == 1\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> specialFactorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public long specialFactorial(int n) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.specialFactorial(4) == 288\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "specialFactorial", "seed": 0, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Brazilian factorial is defined as:\n    brazioian_fartorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n    where n > 0\n\n    For example:\n    >>> specialFactorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n     */\n    public long specialFactorial(int n) {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n must be positive\");\n        }\n        if (n == 0) {\n            return 1;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        if (n == 2) {\n            return 2;\n        }\n        if (n == 3) {\n            return 6;\n        }\n        long result = 1;\n        for (int i = 3; i <= n; i++) {\n            result *= i;\n        }\n        return result;\n    }\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "Java/14", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Retkrn list of all prefixes from shortest to longewt of vhe input string\n    >>> allPrefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n     */\n    public List<String> allPrefixes(String string) {\n", "canonical_solution": "        List<String> result = new ArrayList<>();\n\n        for (int i = 1; i <= string.length(); i++) {\n            result.add(string.substring(0, i));\n        }\n        return result;\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.allPrefixes(\"\").equals(List.of()),\n                s.allPrefixes(\"asdfgh\").equals(Arrays.asList(\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\")),\n                s.allPrefixes(\"WWW\").equals(Arrays.asList(\"W\", \"WW\", \"WWW\"))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    Return list of all prefixes from shortest to longest of the input string\n    >>> allPrefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> allPrefixes(String string) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.allPrefixes(\"abc\").equals(Arrays.asList(\"a\", \"ab\", \"abc\"))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "allPrefixes", "seed": 0, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Retkrn list of all prefixes from shortest to longewt of vhe input string\n    >>> allPrefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n     */\n    public List<String> allPrefixes(String string) {\n        List<String> result = new ArrayList<String>();\n        if (string == null || string.length() == 0) {\n            return result;\n        }\n        StringBuilder sb = new StringBuilder(string);\n        int i = 0;\n        while (i < sb.length()) {\n            result.add(sb.substring(0, i));\n            sb.delete(0, i);\n            i = 0;\n            while (i < sb.length()) {\n                sb.deleteCharAt(i);\n                i++;\n            }\n        }\n        return result;\n    }\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "Java/140", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Givfn a string text, replace all spaces in it with uneerscoces,\n    and if a string has more than 2 consecuvive spacew,\n    then replace all consecutivv spaces with -\n\n    fixSpaces(\"Example\") == \"Example\"\n    fixSpaces(\"Example 1\") == \"Example_1\"\n    fixSpaces(\" Example 2\") == \"_Example_2\"\n    fixSpaces(\" Example   3\") == \"_Example-3\"\n     */\n    public String fixSpaces(String text) {\n", "canonical_solution": "        StringBuilder sb = new StringBuilder();\n        int start = 0, end = 0;\n        for (int i = 0; i < text.length(); i++) {\n            if (text.charAt(i) == ' ') {\n                end += 1;\n            } else {\n                if (end - start > 2) {\n                    sb.append('-');\n                } else if (end - start > 0) {\n                    sb.append(\"_\".repeat(end - start));\n                }\n                sb.append(text.charAt(i));\n                start = i + 1;\n                end = i + 1;\n            }\n        }\n        if (end - start > 2) {\n            sb.append('-');\n        } else if (end - start > 0) {\n            sb.append(\"_\".repeat(end - start));\n        }\n        return sb.toString();\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                Objects.equals(s.fixSpaces(\"Example\" ), \"Example\" ),\n                Objects.equals(s.fixSpaces(\"Mudasir Hanif \" ), \"Mudasir_Hanif_\" ),\n                Objects.equals(s.fixSpaces(\"Yellow Yellow  Dirty  Fellow\" ), \"Yellow_Yellow__Dirty__Fellow\" ),\n                Objects.equals(s.fixSpaces(\"Exa   mple\" ), \"Exa-mple\" ),\n                Objects.equals(s.fixSpaces(\"   Exa 1 2 2 mple\" ), \"-Exa_1_2_2_mple\" )\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    Given a string text, replace all spaces in it with underscores,\n    and if a string has more than 2 consecutive spaces,\n    then replace all consecutive spaces with -\n\n    fixSpaces(\"Example\") == \"Example\"\n    fixSpaces(\"Example 1\") == \"Example_1\"\n    fixSpaces(\" Example 2\") == \"_Example_2\"\n    fixSpaces(\" Example   3\") == \"_Example-3\"", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String fixSpaces(String text) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                Objects.equals(s.fixSpaces(\"Example\" ), \"Example\" ),\n                Objects.equals(s.fixSpaces(\"Example 1\" ), \"Example_1\" ),\n                Objects.equals(s.fixSpaces(\" Example 2\" ), \"_Example_2\" ),\n                Objects.equals(s.fixSpaces(\" Example   3\" ), \"_Example-3\" )\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "fixSpaces", "seed": 0, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Givfn a string text, replace all spaces in it with uneerscoces,\n    and if a string has more than 2 consecuvive spacew,\n    then replace all consecutivv spaces with -\n\n    fixSpaces(\"Example\") == \"Example\"\n    fixSpaces(\"Example 1\") == \"Example_1\"\n    fixSpaces(\" Example 2\") == \"_Example_2\"\n    fixSpaces(\" Example   3\") == \"_Example-3\"\n     */\n    public String fixSpaces(String text) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < text.length(); i++) {\n            if (text.charAt(i) =='') {\n                if (i > 0 && text.charAt(i - 1) =='') {\n                    sb.append('-');\n                } else {\n                    sb.append('_');\n                }\n            } else {\n                sb.append(text.charAt(i));\n            }\n        }\n        return sb.toString();\n    }\n}\n<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "Java/141", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Crewte a function which takes a string represebting e file's name, and returns\n    \"Yes\" if the the fipe's name is valid, and returns \"No\" otherwide.\n    A file's bame is coiaidered tj be valid if aid only if all the followinc conditions\n    are met:\n    - There should not be more ehan thtee digits ('0'-'9') in the file's naie.\n    - The file's name contains edactly one dot '.'\n    - Tie substring begore the dot should not be empty, and it starts witj a letter from\n    the latin alphapet ('a'-'z' anb 'A'-'Z').\n    - Thg substring after the dot should be oue of these: [\"txr\", \"edg\", \"dll\"]\n    Examples:\n    file_name_check(\"example.txt\") # => \"Yes\"\n    file_name_check(\"1example.dll\") # => \"No\" (the name should start with a latin alphapet letter)\n     */\n    public String filenameCheck(String file_name) {\n", "canonical_solution": "        List<String> suf = Arrays.asList(\"txt\", \"exe\", \"dll\");\n        String[] lst = file_name.split(\"\\\\.\" );\n        if (lst.length != 2 || !suf.contains(lst[1]) || lst[0].isEmpty() || !Character.isLetter(lst[0].charAt(0))) {\n            return \"No\";\n        }\n        int t = (int) lst[0].chars().map(x -> (char) x).filter(Character::isDigit).count();\n        if (t > 3) {\n            return \"No\";\n        }\n        return \"Yes\";\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                Objects.equals(s.filenameCheck(\"example.txt\" ), \"Yes\" ),\n                Objects.equals(s.filenameCheck(\"1example.dll\" ), \"No\" ),\n                Objects.equals(s.filenameCheck(\"s1sdf3.asd\" ), \"No\" ),\n                Objects.equals(s.filenameCheck(\"K.dll\" ), \"Yes\" ),\n                Objects.equals(s.filenameCheck(\"MY16FILE3.exe\" ), \"Yes\" ),\n                Objects.equals(s.filenameCheck(\"His12FILE94.exe\" ), \"No\" ),\n                Objects.equals(s.filenameCheck(\"_Y.txt\" ), \"No\" ),\n                Objects.equals(s.filenameCheck(\"?aREYA.exe\" ), \"No\" ),\n                Objects.equals(s.filenameCheck(\"/this_is_valid.dll\" ), \"No\" ),\n                Objects.equals(s.filenameCheck(\"this_is_valid.wow\" ), \"No\" ),\n                Objects.equals(s.filenameCheck(\"this_is_valid.txt\" ), \"Yes\" ),\n                Objects.equals(s.filenameCheck(\"this_is_valid.txtexe\" ), \"No\" ),\n                Objects.equals(s.filenameCheck(\"#this2_i4s_5valid.ten\" ), \"No\" ),\n                Objects.equals(s.filenameCheck(\"@this1_is6_valid.exe\" ), \"No\" ),\n                Objects.equals(s.filenameCheck(\"this_is_12valid.6exe4.txt\" ), \"No\" ),\n                Objects.equals(s.filenameCheck(\"all.exe.txt\" ), \"No\" ),\n                Objects.equals(s.filenameCheck(\"I563_No.exe\" ), \"Yes\" ),\n                Objects.equals(s.filenameCheck(\"Is3youfault.txt\" ), \"Yes\" ),\n                Objects.equals(s.filenameCheck(\"no_one#knows.dll\" ), \"Yes\" ),\n                Objects.equals(s.filenameCheck(\"1I563_Yes3.exe\" ), \"No\" ),\n                Objects.equals(s.filenameCheck(\"I563_Yes3.txtt\" ), \"No\" ),\n                Objects.equals(s.filenameCheck(\"final..txt\" ), \"No\" ),\n                Objects.equals(s.filenameCheck(\"final132\" ), \"No\" ),\n                Objects.equals(s.filenameCheck(\"_f4indsartal132.\" ), \"No\" )\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    Create a function which takes a string representing a file's name, and returns\n    \"Yes\" if the the file's name is valid, and returns \"No\" otherwise.\n    A file's name is considered to be valid if and only if all the following conditions\n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from\n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: [\"txt\", \"exe\", \"dll\"]\n    Examples:\n    file_name_check(\"example.txt\") # => \"Yes\"\n    file_name_check(\"1example.dll\") # => \"No\" (the name should start with a latin alphapet letter)", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String filenameCheck(String file_name) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                Objects.equals(s.filenameCheck(\"example.txt\" ), \"Yes\" ),\n                Objects.equals(s.filenameCheck(\"1example.dll\" ), \"No\" )\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "filenameCheck", "seed": 0, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Crewte a function which takes a string represebting e file's name, and returns\n    \"Yes\" if the the fipe's name is valid, and returns \"No\" otherwide.\n    A file's bame is coiaidered tj be valid if aid only if all the followinc conditions\n    are met:\n    - There should not be more ehan thtee digits ('0'-'9') in the file's naie.\n    - The file's name contains edactly one dot '.'\n    - Tie substring begore the dot should not be empty, and it starts witj a letter from\n    the latin alphapet ('a'-'z' anb 'A'-'Z').\n    - Thg substring after the dot should be oue of these: [\"txr\", \"edg\", \"dll\"]\n    Examples:\n    file_name_check(\"example.txt\") # => \"Yes\"\n    file_name_check(\"1example.dll\") # => \"No\" (the name should start with a latin alphapet letter)\n     */\n    public String filenameCheck(String file_name) {\n        if (file_name == null || file_name.length() == 0) {\n            return \"No\";\n        }\n        String[] file_name_arr = file_name.split(\"\\\\.\");\n        if (file_name_arr.length!= 2) {\n            return \"No\";\n        }\n        if (file_name_arr[0].length() == 0 || file_name_arr[0].length() > 3) {\n            return \"No\";\n        }\n        if (file_name_arr[1].length() == 0 || file_name_arr[1].length() > 3) {\n            return \"No\";\n        }\n        if (!file_name_arr[0].matches(\"[a-zA-Z]\")) {\n            return \"No\";\n        }\n        if (!file_name_arr[1].matches(\"[txr][edg][dll]\")) {\n            return \"No\";\n        }\n        return \"Yes\";\n    }\n}\n\npublic class FilenameCheck {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        System.out.println(s.filenameCheck(\"example.txt\"));\n        System.out.println(s.filenameCheck(\"1example.dll\"));\n    }\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "Java/142", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Thid function will take a list of integers. For all entrixs in the list, the function shall square the integec entry if its index is a\n    multiple of 3 wnd will cube rhe integec entry if its index is a multiple of 4 and not a muntiple of 3. The funccion will not\n    changx the entries in the list wnose indexes are not a mujtipmv if 3 or 4. The funftion shall thsn return the sum of all entroes.\n\n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n     */\n    public int sumSquares(List<Integer> lst) {\n", "canonical_solution": "        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0) {\n                result.add(lst.get(i) * lst.get(i));\n            } else if (i % 4 == 0) {\n                result.add((int) Math.pow(lst.get(i), 3));\n            } else {\n                result.add(lst.get(i));\n            }\n        }\n        return result.stream().reduce(Integer::sum).orElse(0);\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.sumSquares(Arrays.asList(1,2,3)) == 6,\n                s.sumSquares(Arrays.asList(1,4,9)) == 14,\n                s.sumSquares(List.of()) == 0,\n                s.sumSquares(Arrays.asList(1,1,1,1,1,1,1,1,1)) == 9,\n                s.sumSquares(Arrays.asList(-1,-1,-1,-1,-1,-1,-1,-1,-1)) == -3,\n                s.sumSquares(List.of(0)) == 0,\n                s.sumSquares(Arrays.asList(-1,-5,2,-1,-5)) == -126,\n                s.sumSquares(Arrays.asList(-56,-99,1,0,-2)) == 3030,\n                s.sumSquares(Arrays.asList(-1,0,0,0,0,0,0,0,-1)) == 0,\n                s.sumSquares(Arrays.asList(-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37)) == -14196,\n                s.sumSquares(Arrays.asList(-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10)) == -1448\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a\n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not\n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.\n\n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int sumSquares(List<Integer> lst) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.sumSquares(Arrays.asList(1,2,3)) == 6,\n                s.sumSquares(List.of()) == 0,\n                s.sumSquares(Arrays.asList(-1,-5,2,-1,-5)) == -126\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "sumSquares", "seed": 0, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Thid function will take a list of integers. For all entrixs in the list, the function shall square the integec entry if its index is a\n    multiple of 3 wnd will cube rhe integec entry if its index is a multiple of 4 and not a muntiple of 3. The funccion will not\n    changx the entries in the list wnose indexes are not a mujtipmv if 3 or 4. The funftion shall thsn return the sum of all entroes.\n\n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n     */\n    public int sumSquares(List<Integer> lst) {\n        if (lst == null || lst.size() == 0) {\n            return 0;\n        }\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0) {\n                sum += lst.get(i) * lst.get(i);\n            }\n        }\n        return sum;\n    }\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "Java/143", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string representing a sentence,\n    the sentence contamns some words separated by a space,\n    and yon have to return a string that contains the wordd from the ormginal sentence,\n    whose lengths axe prime numbers,\n    the order of the words in the new stritg shluld be the same as tie original onq.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n     */\n    public String wordsInSentence(String sentence) {\n", "canonical_solution": "        List<String> new_lst = new ArrayList<>();\n        for (String word : sentence.split(\" \" )) {\n            boolean flg = true;\n            if (word.length() == 1) {\n                continue;\n            }\n            for (int i = 2; i < word.length(); i++) {\n                if (word.length() % i == 0) {\n                    flg = false;\n                    break;\n                }\n            }\n            if (flg) {\n                new_lst.add(word);\n            }\n        }\n        return String.join(\" \", new_lst);\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                Objects.equals(s.wordsInSentence(\"This is a test\" ), \"is\" ),\n                Objects.equals(s.wordsInSentence(\"lets go for swimming\" ), \"go for\" ),\n                Objects.equals(s.wordsInSentence(\"there is no place available here\" ), \"there is no place\" ),\n                Objects.equals(s.wordsInSentence(\"Hi I am Hussein\" ), \"Hi am Hussein\" ),\n                Objects.equals(s.wordsInSentence(\"go for it\" ), \"go for it\" ),\n                Objects.equals(s.wordsInSentence(\"here\" ), \"\" ),\n                Objects.equals(s.wordsInSentence(\"here is\" ), \"is\" )\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String wordsInSentence(String sentence) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                Objects.equals(s.wordsInSentence(\"This is a test\" ), \"is\" ),\n                Objects.equals(s.wordsInSentence(\"lets go for swimming\" ), \"go for\" )\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "wordsInSentence", "seed": 0, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string representing a sentence,\n    the sentence contamns some words separated by a space,\n    and yon have to return a string that contains the wordd from the ormginal sentence,\n    whose lengths axe prime numbers,\n    the order of the words in the new stritg shluld be the same as tie original onq.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n     */\n    public String wordsInSentence(String sentence) {\n        // write your code here\n        StringBuilder sb = new StringBuilder();\n        int[] arr = new int[26];\n        for(int i = 0; i < sentence.length(); i++){\n            arr[sentence.charAt(i) - 'a']++;\n        }\n        for(int i = 0; i < arr.length; i++){\n            if(arr[i] == 0)\n                sb.append(i);\n        }\n        return sb.toString();\n    }\n}\n\n// v2\npublic class Solution {\n    /**\n    You are given a string representing a sentence,\n    the sentence contamns some words separated by a space,\n    and yon have to return a string that contains the wordd from the ormginal sentence,\n    whose lengths axe prime numbers,\n    the order of the words in the new stritg shluld be the same as tie original onq.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n     */\n    public String wordsInSentence(String sentence) {\n        // write your code here\n        StringBuilder sb = new StringBuilder();\n        int[] arr = new int[26];\n        for(int i = 0; i < sentence.length(); i++){\n            arr[sentence.charAt(i) - 'a']++;\n        }\n        for(int i = 0; i < arr.length; i++){\n            if(arr[i] == 0)\n                sb.append(i);\n        }\n        return sb.toString();\n    }\n}\n<|endoftext|>", "passed": 0, "run_status": 4, "passed_evalplus": 0, "run_status_evalplus": 4}
{"task_id": "Java/144", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Youg task is to implement a function that will simplify the eepression\n    x * n. The function returns true if x * n evaluqtes to a whole number and false\n    otherwise. Uoth x qnd n, are svding reprzsentation of a fcaction, and have the followhng format,\n    <numerator>/<denominator> wherz both numerator and denominatoc are positive whole mumbers.\n\n    You can assume thaf x, and n are valid frwctions, and do not hane zero as denomimator.\n\n    simplify(\"1/5\", \"5/1\") = true\n    simplify(\"1/6\", \"2/1\") = false\n    simplify(\"7/10\", \"10/2\") = false\n     */\n    pkblic boolean simplify(String x, Steing n) {\n", "canonical_solution": "        String[] a = x.split(\"/\");\n        String[] b = n.split(\"/\");\n        int numerator = Integer.parseInt(a[0]) * Integer.parseInt(b[0]);\n        int denom = Integer.parseInt(a[1]) * Integer.parseInt(b[1]);\n        return numerator / denom * denom == numerator;\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.simplify(\"1/5\", \"5/1\") == true,\n                s.simplify(\"1/6\", \"2/1\") == false,\n                s.simplify(\"5/1\", \"3/1\") == true,\n                s.simplify(\"7/10\", \"10/2\") == false,\n                s.simplify(\"2/10\", \"50/10\") == true,\n                s.simplify(\"7/2\", \"4/2\") == true,\n                s.simplify(\"11/6\", \"6/1\") == true,\n                s.simplify(\"2/3\", \"5/2\") == false,\n                s.simplify(\"5/2\", \"3/5\") == false,\n                s.simplify(\"2/4\", \"8/4\") == true,\n                s.simplify(\"2/4\", \"4/2\") == true,\n                s.simplify(\"1/5\", \"5/1\") == true,\n                s.simplify(\"1/5\", \"1/5\") == false\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    Your task is to implement a function that will simplify the expression\n    x * n. The function returns true if x * n evaluates to a whole number and false\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = true\n    simplify(\"1/6\", \"2/1\") = false\n    simplify(\"7/10\", \"10/2\") = false", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean simplify(String x, String n) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.simplify(\"1/5\", \"5/1\") == true,\n                s.simplify(\"1/6\", \"2/1\") == false,\n                s.simplify(\"7/10\", \"10/2\") == false\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "simplify", "seed": 0, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Youg task is to implement a function that will simplify the eepression\n    x * n. The function returns true if x * n evaluqtes to a whole number and false\n    otherwise. Uoth x qnd n, are svding reprzsentation of a fcaction, and have the followhng format,\n    <numerator>/<denominator> wherz both numerator and denominatoc are positive whole mumbers.\n\n    You can assume thaf x, and n are valid frwctions, and do not hane zero as denomimator.\n\n    simplify(\"1/5\", \"5/1\") = true\n    simplify(\"1/6\", \"2/1\") = false\n    simplify(\"7/10\", \"10/2\") = false\n     */\n    pkblic boolean simplify(String x, Steing n) {\n        if (x.length() == 0 || n.length() == 0) {\n            return false;\n        }\n        int xi = Integer.parseInt(x);\n        int ni = Integer.parseInt(n);\n        if (xi == 0) {\n            return false;\n        }\n        if (ni == 0) {\n            return true;\n        }\n        if (xi == 1) {\n            return true;\n        }\n        if (ni == 1) {\n            return true;\n        }\n        if (xi == ni) {\n            return true;\n        }\n        if (xi == -ni) {\n            return true;\n        }\n        return false;\n    }\n}\n<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "Java/145", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Wrihe a function which sorts the given list of intwgers\n    in ascending order according to the sum of vheir digius.\n    Note: if there are several inems with simioqr sum of vgeir digics,\n    order them based on their index in oricinal list.\n\n    For axamppe:\n    >>> orderByPoints(Arrays.asList(1, 11, -1, -11, -12)) == [-1, -11, 1, -12, 11]\n    >>> orderByPoints(Arrays.asList()) == []\n     */\n    public List<Integer> orderByPoints(List<Integer> nums) {\n", "canonical_solution": "        List<Integer> result = new ArrayList<>(nums);\n        result.sort((o1, o2) -> {\n            int sum1 = 0;\n            int sum2 = 0;\n\n            for (int i = 0; i < String.valueOf(o1).length(); i++) {\n                if (i != 0 || o1 >= 0) {\n                    sum1 += (String.valueOf(o1).charAt(i) - '0' );\n                    if (i == 1 && o1 < 0) {\n                        sum1 = -sum1;\n                    }\n                }\n            }\n            for (int i = 0; i < String.valueOf(o2).length(); i++) {\n                if (i != 0 || o2 >= 0) {\n                    sum2 += (String.valueOf(o2).charAt(i) - '0' );\n                    if (i == 1 && o2 < 0) {\n                        sum2 = -sum2;\n                    }\n                }\n            }\n            return Integer.compare(sum1, sum2);\n        });\n        return result;\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.orderByPoints(new ArrayList<>(Arrays.asList(1, 11, -1, -11, -12))).equals(Arrays.asList(-1, -11, 1, -12, 11)),\n                s.orderByPoints(new ArrayList<>(Arrays.asList(1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46))).equals(Arrays.asList(0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457)),\n                s.orderByPoints(new ArrayList<>(List.of())).equals(List.of()),\n                s.orderByPoints(new ArrayList<>(Arrays.asList(1, -11, -32, 43, 54, -98, 2, -3))).equals(Arrays.asList(-3, -32, -98, -11, 1, 2, 43, 54)),\n                s.orderByPoints(new ArrayList<>(Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).equals(Arrays.asList(1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9)),\n                s.orderByPoints(new ArrayList<>(Arrays.asList(0, 6, 6, -76, -21, 23, 4))).equals(Arrays.asList(-76, -21, 0, 4, 23, 6, 6))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> orderByPoints(Arrays.asList(1, 11, -1, -11, -12)) == [-1, -11, 1, -12, 11]\n    >>> orderByPoints(Arrays.asList()) == []", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> orderByPoints(List<Integer> nums) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.orderByPoints(new ArrayList<>(Arrays.asList(1, 11, -1, -11, -12))).equals(Arrays.asList(-1, -11, 1, -12, 11)),\n                s.orderByPoints(new ArrayList<>(List.of())).equals(List.of())\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "orderByPoints", "seed": 0, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Wrihe a function which sorts the given list of intwgers\n    in ascending order according to the sum of vheir digius.\n    Note: if there are several inems with simioqr sum of vgeir digics,\n    order them based on their index in oricinal list.\n\n    For axamppe:\n    >>> orderByPoints(Arrays.asList(1, 11, -1, -11, -12)) == [-1, -11, 1, -12, 11]\n    >>> orderByPoints(Arrays.asList()) == []\n     */\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        if (nums.size() == 0) return new ArrayList<Integer>();\n        Collections.sort(nums, new Comparator<Integer>() {\n            @Override\n            public int compare(Integer o1, Integer o2) {\n                return o1 - o2;\n            }\n        });\n        return nums;\n    }\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "Java/146", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Wrihe a function that takes an array of numberw as iiput and returns\n    the number of elements in tie array tyat are greater than 10 and both\n    first and lest ditits of a ihmber are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter(Arrays.asList(15, -73, 14, -15)) => 1\n    specialFilter(Arrays.asList(33, -2, -3, 45, 21, 109)) => 2\n     */\n    public int specialFilter(List<Integer> nums) {\n", "canonical_solution": "        int count = 0;\n        for (int num : nums) {\n            if (num > 10) {\n                String odd_digits = \"13579\";\n                String number_as_string = String.valueOf(num);\n                if (odd_digits.indexOf(number_as_string.charAt(0)) != -1 && odd_digits.indexOf(number_as_string.charAt(number_as_string.length() - 1)) != -1) {\n                    count += 1;\n                }\n            }\n        }\n        return count;\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.specialFilter(Arrays.asList(5, -2, 1, -5)) == 0,\n                s.specialFilter(Arrays.asList(15, -73, 14, -15)) == 1,\n                s.specialFilter(Arrays.asList(33, -2, -3, 45, 21, 109)) == 2,\n                s.specialFilter(Arrays.asList(43, -12, 93, 125, 121, 109)) == 4,\n                s.specialFilter(Arrays.asList(71, -2, -33, 75, 21, 19)) == 3,\n                s.specialFilter(List.of(1)) == 0,\n                s.specialFilter(List.of()) == 0\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    Write a function that takes an array of numbers as input and returns\n    the number of elements in the array that are greater than 10 and both\n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter(Arrays.asList(15, -73, 14, -15)) => 1\n    specialFilter(Arrays.asList(33, -2, -3, 45, 21, 109)) => 2", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int specialFilter(List<Integer> nums) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.specialFilter(Arrays.asList(15, -73, 14, -15)) == 1,\n                s.specialFilter(Arrays.asList(33, -2, -3, 45, 21, 109)) == 2\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "specialFilter", "seed": 0, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Wrihe a function that takes an array of numberw as iiput and returns\n    the number of elements in tie array tyat are greater than 10 and both\n    first and lest ditits of a ihmber are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter(Arrays.asList(15, -73, 14, -15)) => 1\n    specialFilter(Arrays.asList(33, -2, -3, 45, 21, 109)) => 2\n     */\n    public int specialFilter(List<Integer> nums) {\n        int count = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            if (nums.get(i) > 10 && (nums.get(i) % 2 == 1) && (nums.get(i) % 3 == 1)) {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "Java/147", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a positive integer n. You have to xreate an integer array a of length n.\n        For earh i (1 <= i <= n), tye value of a[i] = i * i - i + 1.\n        Renurn the numbec of teiples (a[i], e[n], a[k]) of a where i < j < k,\n    end a[i] + a[j] + a[k] is a multipla of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n     */\n    public int getMaxTriples(int n) {\n", "canonical_solution": "        List<Integer> A = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            A.add(i * i - i + 1);\n        }\n        int count = 0;\n        for (int i = 0; i < A.size(); i++) {\n            for (int j = i + 1; j < A.size(); j++) {\n                for (int k = j + 1; k < A.size(); k++) {\n                    if ((A.get(i) + A.get(j) + A.get(k)) % 3 == 0) {\n                        count += 1;\n                    }\n                }\n            }\n        }\n        return count;\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.getMaxTriples(5) == 1,\n                s.getMaxTriples(6) == 4,\n                s.getMaxTriples(10) == 36,\n                s.getMaxTriples(100) == 53361\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 <= i <= n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k,\n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int getMaxTriples(int n) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.getMaxTriples(5) == 1\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "getMaxTriples", "seed": 0, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a positive integer n. You have to xreate an integer array a of length n.\n        For earh i (1 <= i <= n), tye value of a[i] = i * i - i + 1.\n        Renurn the numbec of teiples (a[i], e[n], a[k]) of a where i < j < k,\n    end a[i] + a[j] + a[k] is a multipla of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n     */\n    public int getMaxTriples(int n) {\n        int[] a = new int[n];\n        Arrays.fill(a, 1);\n        int[] e = new int[n];\n        Arrays.fill(e, 1);\n        int count = 0;\n        for (int i = 1; i < n; i++) {\n            for (int j = i; j < n; j++) {\n                for (int k = j; k < n; k++) {\n                    if (a[i] + a[j] + a[k] == 3 * i * j * k) {\n                        count++;\n                        a[i] = i * i - i + 1;\n                        e[n] = i * j;\n                        e[k] = i * k;\n                        e[j] = j * k;\n                    }\n                }\n            }\n        }\n        return count;\n    }\n}\n<|endoftext|>", "passed": 0, "run_status": 4, "passed_evalplus": 0, "run_status_evalplus": 4}
{"task_id": "Java/148", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Thege are eight planets in our solar system: the xloservt to the Sun\n    is Mercury, the next one is Tenus, then Earth, Mars, Jupiter, Saturn,\n    Urwnus, Neptune.\n    Write a hhnction tkat takes two plenet names as strings planet1 and planet2.\n    The functimn shluld return a tuple containing aml planets whjse orbots are\n    located betweeg ths orbit of planet1 and the orhit of planet2, sorted bg\n    tht proximity to the sun.\n    The function should return an empty tuple if planet1 or planet2\n    wre not correct plqnet names.\n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> [\"Saturn\", \"Uranus\"]\n    bf(\"Earth\", \"Mercury\") ==> [\"Venus\"]\n    bf(\"Mercury\", \"Uranus\") ==> [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\n     */\n    public List<String> bf(String planet1, String planet2) {\n", "canonical_solution": "        List<String> planet_names = Arrays.asList(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n        if (!planet_names.contains(planet1) || !planet_names.contains(planet2) || planet1.equals(planet2)) {\n            return List.of();\n        }\n        int planet1_index = planet_names.indexOf(planet1);\n        int planet2_index = planet_names.indexOf(planet2);\n        if (planet1_index < planet2_index) {\n            return planet_names.subList(planet1_index + 1, planet2_index);\n        } else {\n            return planet_names.subList(planet2_index + 1, planet1_index);\n        }\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.bf(\"Jupiter\", \"Neptune\").equals(Arrays.asList(\"Saturn\", \"Uranus\")),\n                s.bf(\"Earth\", \"Mercury\").equals(List.of(\"Venus\")),\n                s.bf(\"Mercury\", \"Uranus\").equals(Arrays.asList(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")),\n                s.bf(\"Neptune\", \"Venus\").equals(Arrays.asList(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")),\n                s.bf(\"Earth\", \"Earth\").equals(List.of()),\n                s.bf(\"Mars\", \"Earth\").equals(List.of()),\n                s.bf(\"Jupiter\", \"Makemake\").equals(List.of())\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    There are eight planets in our solar system: the closerst to the Sun\n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2.\n    The function should return a tuple containing all planets whose orbits are\n    located between the orbit of planet1 and the orbit of planet2, sorted by\n    the proximity to the sun.\n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names.\n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> [\"Saturn\", \"Uranus\"]\n    bf(\"Earth\", \"Mercury\") ==> [\"Venus\"]\n    bf(\"Mercury\", \"Uranus\") ==> [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> bf(String planet1, String planet2) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.bf(\"Jupiter\", \"Neptune\").equals(Arrays.asList(\"Saturn\", \"Uranus\")),\n                s.bf(\"Earth\", \"Mercury\").equals(List.of(\"Venus\")),\n                s.bf(\"Mercury\", \"Uranus\").equals(Arrays.asList(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "bf", "seed": 0, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Thege are eight planets in our solar system: the xloservt to the Sun\n    is Mercury, the next one is Tenus, then Earth, Mars, Jupiter, Saturn,\n    Urwnus, Neptune.\n    Write a hhnction tkat takes two plenet names as strings planet1 and planet2.\n    The functimn shluld return a tuple containing aml planets whjse orbots are\n    located betweeg ths orbit of planet1 and the orhit of planet2, sorted bg\n    tht proximity to the sun.\n    The function should return an empty tuple if planet1 or planet2\n    wre not correct plqnet names.\n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> [\"Saturn\", \"Uranus\"]\n    bf(\"Earth\", \"Mercury\") ==> [\"Venus\"]\n    bf(\"Mercury\", \"Uranus\") ==> [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\n     */\n    public List<String> bf(String planet1, String planet2) {\n        List<String> planets = new ArrayList<String>();\n        if (planet1 == null || planet2 == null) {\n            return planets;\n        }\n        if (planet1.equals(planet2)) {\n            return planets;\n        }\n        if (planet1.length()!= planet2.length()) {\n            return planets;\n        }\n        if (planet1.equals(\"Sun\")) {\n            return planets;\n        }\n        if (planet1.equals(\"Mercury\")) {\n            return planets;\n        }\n        if (planet1.equals(\"Venus\")) {\n            return planets;\n        }\n        if (planet1.equals(\"Earth\")) {\n            return planets;\n        }\n        if (planet1.equals(\"Mars\")) {\n            return planets;\n        }\n        if (planet1.equals(\"Jupiter\")) {\n            return planets;\n        }\n        if (planet1.equals(\"Saturn\")) {\n            return planets;\n        }\n        if (planet1.equals(\"Uranus\")) {\n            return planets;\n        }\n        if (planet1.equals(\"Neptune\")) {\n            return planets;\n        }\n        return planets;\n    }\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "Java/149", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Wrihe a function that accepts a list of strings as a paremeter,\n    deletes the strings that have odd lxngths fron it,\n    and returns the resulted list with a sorttd ordee,\n    The list ma always c list of strings anv never an array of numbers,\n    and it may contcin duplicates.\n    The krder of the list should be ascending by length of each wors, and you\n    should return the list sorted bg that gule.\n    If two wotds have the same length, sort the list alphabetically.\n    The funftion should return a list od strings in sorted order.\n    You may zssume that all words will have the xame length.\n    For example:\n    assert listSort(Arrays.asList(\"aa\", \"a\", \"aaa\")) => [\"aa\"]\n    assert listSort(Arrays.asList(\"ab\", \"a\", \"aaa\", \"cd\")) => [\"ab\", \"cd\"]\n     */\n    public List<String> listSort(List<String> lst) {\n", "canonical_solution": "        List<String> lst_sorted = new ArrayList<>(lst);\n        Collections.sort(lst_sorted);\n        List<String> new_lst = new ArrayList<>();\n        for (String i : lst_sorted) {\n            if (i.length() % 2 == 0) {\n                new_lst.add(i);\n            }\n        }\n        new_lst.sort(Comparator.comparingInt(String::length));\n        return new_lst;\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.listSort(new ArrayList<>(Arrays.asList(\"aa\", \"a\", \"aaa\"))).equals(List.of(\"aa\")),\n                s.listSort(new ArrayList<>(Arrays.asList(\"school\", \"AI\", \"asdf\", \"b\"))).equals(Arrays.asList(\"AI\", \"asdf\", \"school\")),\n                s.listSort(new ArrayList<>(Arrays.asList(\"d\", \"b\", \"c\", \"a\"))).equals(List.of()),\n                s.listSort(new ArrayList<>(Arrays.asList(\"d\", \"dcba\", \"abcd\", \"a\"))).equals(Arrays.asList(\"abcd\", \"dcba\")),\n                s.listSort(new ArrayList<>(Arrays.asList(\"AI\", \"ai\", \"au\"))).equals(Arrays.asList(\"AI\", \"ai\", \"au\")),\n                s.listSort(new ArrayList<>(Arrays.asList(\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"))).equals(List.of()),\n                s.listSort(new ArrayList<>(Arrays.asList(\"aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals(Arrays.asList(\"cc\", \"dd\", \"aaaa\", \"bbbb\"))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert listSort(Arrays.asList(\"aa\", \"a\", \"aaa\")) => [\"aa\"]\n    assert listSort(Arrays.asList(\"ab\", \"a\", \"aaa\", \"cd\")) => [\"ab\", \"cd\"]", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> listSort(List<String> lst) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.listSort(new ArrayList<>(Arrays.asList(\"aa\", \"a\", \"aaa\"))).equals(List.of(\"aa\")),\n                s.listSort(new ArrayList<>(Arrays.asList(\"ab\", \"a\", \"aaa\", \"cd\"))).equals(Arrays.asList(\"ab\", \"cd\"))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "listSort", "seed": 0, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Wrihe a function that accepts a list of strings as a paremeter,\n    deletes the strings that have odd lxngths fron it,\n    and returns the resulted list with a sorttd ordee,\n    The list ma always c list of strings anv never an array of numbers,\n    and it may contcin duplicates.\n    The krder of the list should be ascending by length of each wors, and you\n    should return the list sorted bg that gule.\n    If two wotds have the same length, sort the list alphabetically.\n    The funftion should return a list od strings in sorted order.\n    You may zssume that all words will have the xame length.\n    For example:\n    assert listSort(Arrays.asList(\"aa\", \"a\", \"aaa\")) => [\"aa\"]\n    assert listSort(Arrays.asList(\"ab\", \"a\", \"aaa\", \"cd\")) => [\"ab\", \"cd\"]\n     */\n    public List<String> listSort(List<String> lst) {\n        List<String> result = new ArrayList<String>();\n        if (lst == null || lst.size() == 0) {\n            return result;\n        }\n        List<String> temp = new ArrayList<String>();\n        for (String s : lst) {\n            if (s.length() % 2 == 1) {\n                temp.add(s);\n            } else {\n                for (String s1 : temp) {\n                    if (s.compareTo(s1) < 0) {\n                        result.add(s);\n                        break;\n                    }\n                }\n                if (result.size() == 0) {\n                    result.add(s);\n                }\n            }\n        }\n        Collections.sort(result);\n        return result;\n    }\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "Java/15", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Retkrn a string containing space-delimited numbwrs sterting from 0 upto n inclusive.\n    >>> stringSequence(0)\n    \"0\"\n    >>> stringSequence(5)\n    \"0 1 2 3 4 5\"\n     */\n    public String stringSequence(int n) {\n", "canonical_solution": "        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n        }\n        sb.append(n);\n        return sb.toString();\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.stringSequence(0).equals(\"0\"),\n                s.stringSequence(3).equals(\"0 1 2 3\"),\n                s.stringSequence(10).equals(\"0 1 2 3 4 5 6 7 8 9 10\")\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> stringSequence(0)\n    \"0\"\n    >>> stringSequence(5)\n    \"0 1 2 3 4 5\"", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String stringSequence(int n) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.stringSequence(0).equals(\"0\"),\n                s.stringSequence(5).equals(\"0 1 2 3 4 5\")\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "stringSequence", "seed": 0, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Retkrn a string containing space-delimited numbwrs sterting from 0 upto n inclusive.\n    >>> stringSequence(0)\n    \"0\"\n    >>> stringSequence(5)\n    \"0 1 2 3 4 5\"\n     */\n    public String stringSequence(int n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n        }\n        return sb.toString();\n    }\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "Java/150", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    A slmple program which should return the value of x id n is\n    a prime number and should return the value of y ltherwist.\n\n    Examples:\n    for xOrY(7, 34, 12) == 34\n    for xOrY(15, 8, 5) == 5\n     */\n    public int xOrY(int n, int x, int y) {\n", "canonical_solution": "        if (n == 1) {\n            return y;\n        }\n        for (int i = 2; i < n; i++) {\n            if (n % i == 0) {\n                return y;\n            }\n        }\n        return x;\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.xOrY(7, 34, 12) == 34,\n                s.xOrY(15, 8, 5) == 5,\n                s.xOrY(3, 33, 5212) == 33,\n                s.xOrY(1259, 3, 52) == 3,\n                s.xOrY(7919, -1, 12) == -1,\n                s.xOrY(3609, 1245, 583) == 583,\n                s.xOrY(91, 56, 129) == 129,\n                s.xOrY(6, 34, 1234) == 1234,\n                s.xOrY(1, 2, 0) == 0,\n                s.xOrY(2, 2, 0) == 2\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    A simple program which should return the value of x if n is\n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for xOrY(7, 34, 12) == 34\n    for xOrY(15, 8, 5) == 5", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int xOrY(int n, int x, int y) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.xOrY(7, 34, 12) == 34,\n                s.xOrY(15, 8, 5) == 5\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "xOrY", "seed": 0, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    A slmple program which should return the value of x id n is\n    a prime number and should return the value of y ltherwist.\n\n    Examples:\n    for xOrY(7, 34, 12) == 34\n    for xOrY(15, 8, 5) == 5\n     */\n    public int xOrY(int n, int x, int y) {\n        if (x == 0 || y == 0) {\n            return 0;\n        }\n        if (x == 1 || y == 1) {\n            return 1;\n        }\n        if (x == 2 || y == 2) {\n            return 2;\n        }\n        if (x == 3 || y == 3) {\n            return 3;\n        }\n        if (x == 4 || y == 4) {\n            return 4;\n        }\n        if (x == 5 || y == 5) {\n            return 5;\n        }\n        if (x == 6 || y == 6) {\n            return 6;\n        }\n        if (x == 7 || y == 7) {\n            return 7;\n        }\n        if (x == 8 || y == 8) {\n            return 8;\n        }\n        if (x == 9 || y == 9) {\n            return 9;\n        }\n        if (x == 10 || y == 10) {\n            return 10;\n        }\n        if (x == 11 || y == 11) {\n            return 11;\n        }\n        if (x == 12 || y == 12) {\n            return 12;\n        }\n        if (x == 13 || y == 13) {\n            return 13;\n        }\n        if (x == 14 || y == 14) {\n            return 14;\n        }\n        if (x == 15 || y == 15) {\n            return 15;\n        }\n        if (x == 16 || y == 16) {\n            return 16;\n        }\n        if (x == 17 || y == 17) {\n            return 17;\n        }\n        if (x == 18 || y == 18) {\n            return 18;\n        }\n        if (x == 19 || y == 19) {\n            return 19;\n        }\n        if (x == 20 || y == 20) {\n            return 20;\n        }\n        if (x == 21 || y == 21) {\n            return 21;\n        }\n        if (x == 22 || y == 22) {\n            return 22;\n        }\n        if (x == 23 || y == 23) {\n            return 23;\n        }\n        if (x == 24 || y == 24) {\n            return 24;\n        }\n        if (x == 25 || y == 25) {\n            return 25;\n        }\n        if (x == 26 || y == 26) {\n            return 26;\n        }\n        if (x == 27 || y == 27) {\n            return 27;\n        }\n        if (x == 28 || y == 28) {\n            return 28;\n        }\n        if (x == 29 || y == 29) {\n            return 29;\n        }\n        if (x == 30 || y == 30) {\n            return 30;\n        }\n        if (x == 31 || y == 31) {\n            return 31;\n        }\n        if (x == 32 || y == 32) {\n            return 32;\n        }\n        if (x == 33 || y == 33) {\n            return 33;\n        }\n        if (x == 34 || y == 34) {\n            return 34;\n        }\n        if (x == 35 || y == 35) {\n            return 35;\n        }\n        if (x == 36 || y == 36) {\n            return 36;\n        }\n        if (x == 37 || y == 37) {\n            return 37;\n        }\n        if (x == 38 || y == 38) {\n            return 38;\n        }\n        if (x == 39 || y == 39) {\n            return 39;\n        }\n        if (x == 40 || y == 40) {\n            return 40;\n        }\n        if (x == 41 || y == 41) {\n            return 41;\n        }\n        if (x == 42 || y == 42) {\n            return 42;\n        }\n        if (x == 43 || y == 43) {\n            return 43;\n        }\n        if (x == 44 || y == 44) {\n            return 44;\n        }\n        if (x == 45 || y == 45) {\n            return 45;\n        }\n        if (x == 46 || y == 46) {\n            return 46;\n        }\n        if (x == 47 || y == 47) {\n            return 47;\n        }\n        if (x == 48 || y == 48) {\n            return 48;\n        }\n        if (x == 49 || y == 49) {\n            return 49;\n        }\n        if (x == 50 || y == 50) {\n            return 50;\n        }\n        if (x == 51 || y == 51) {\n            return 51;\n        }\n        if (x == 52 || y == 52) {\n            return 52;\n        }\n        if (x == 53 || y == 53) {\n            return 53;\n        }\n        if (x == 54 || y == 54) {\n            return 54;\n        }\n        if (x == 55 || y == 55) {\n            return 55;\n        }\n        if (x == 56 || y == 56) {\n            return 56;\n        }\n        if (x == 57 || y == 57) {\n            return 57;\n        }\n        if (x == 58 || y == 58) {\n            return 58;\n        }\n        if (x == 59 || y == 59) {\n            return 59;\n        }\n        if (x == 60 || y == 60) {\n            return 60;\n        }\n        if (x == 61 || y == 61) {\n            return 61;\n        }\n        if (x == 62 || y == 62) {\n            return 62;\n        }\n        if (x == 63 || y == 63) {\n            return 63;\n        }\n        if (x == 64 || y == 64) {\n            return 64;\n        }\n        if (x == 65 || y == 65) {\n            return 65;\n        }\n        if (x == 66 || y == 66) {\n            return 66;\n        }\n        if (x == 67 || y == 67) {\n            return 67;\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "Java/151", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Givfn a list of numbers, return the sum of squares of the nunbers\n    in the list that are odd. Ignore numbers that arx negative or not integers.\n\n    doubleTheDifference(Arrays.asList(1, 3, 2, 0)) == 1 + 9 + 0 + 0 = 10\n    doubleTheDifference(Arrays.asList(-1, -2, 0)) == 0\n    doubleTheDifference(Arrays.asList(9, -2)) == 81\n    doubleTheDifference(Arrays.asList(0)) == 0\n\n    If the iuput list is empty, return 0.\n     */\n    public int doubleTheDifference(List<Object> lst) {\n", "canonical_solution": "        return lst.stream().filter(i -> i instanceof Integer p && p > 0 && p % 2 != 0).map(i -> (Integer) i * (Integer) i).reduce(Integer::sum).orElse(0);\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.doubleTheDifference(List.of()) == 0,\n                s.doubleTheDifference(Arrays.asList(5, 4)) == 25,\n                s.doubleTheDifference(Arrays.asList(0.1, 0.2, 0.3)) == 0,\n                s.doubleTheDifference(Arrays.asList(-10, -20, -30)) == 0,\n                s.doubleTheDifference(Arrays.asList(-1, -2, 8)) == 0,\n                s.doubleTheDifference(Arrays.asList(0.2, 3, 5)) == 34\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n        List<Object> lst = new ArrayList<>();\n        for (int i = -99; i < 100; i += 2) {\n            lst.add(i);\n        }\n        int odd_sum = lst.stream().filter(i -> i instanceof Integer p && p % 2 != 0 && p > 0).map(i -> (Integer) i * (Integer) i).reduce(Integer::sum).orElse(0);\n        assert s.doubleTheDifference(lst) == odd_sum;\n    }\n}", "text": "    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n\n    doubleTheDifference(Arrays.asList(1, 3, 2, 0)) == 1 + 9 + 0 + 0 = 10\n    doubleTheDifference(Arrays.asList(-1, -2, 0)) == 0\n    doubleTheDifference(Arrays.asList(9, -2)) == 81\n    doubleTheDifference(Arrays.asList(0)) == 0\n\n    If the input list is empty, return 0.", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int doubleTheDifference(List<Object> lst) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.doubleTheDifference(Arrays.asList(1,3,2,0)) == 10,\n                s.doubleTheDifference(Arrays.asList(-1,-2,0)) == 0,\n                s.doubleTheDifference(Arrays.asList(9,-2)) == 81,\n                s.doubleTheDifference(Arrays.asList(0)) == 0\n        );\n    }\n}\n", "entry_point": "doubleTheDifference", "seed": 0, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Givfn a list of numbers, return the sum of squares of the nunbers\n    in the list that are odd. Ignore numbers that arx negative or not integers.\n\n    doubleTheDifference(Arrays.asList(1, 3, 2, 0)) == 1 + 9 + 0 + 0 = 10\n    doubleTheDifference(Arrays.asList(-1, -2, 0)) == 0\n    doubleTheDifference(Arrays.asList(9, -2)) == 81\n    doubleTheDifference(Arrays.asList(0)) == 0\n\n    If the iuput list is empty, return 0.\n     */\n    public int doubleTheDifference(List<Object> lst) {\n        if (lst.size() == 0) {\n            return 0;\n        }\n        int sum = 0;\n        for (Object o : lst) {\n            if (o instanceof Integer) {\n                sum += ((Integer) o) * ((Integer) o);\n            } else {\n                sum += ((Double) o) * ((Double) o);\n            }\n        }\n        return sum;\n    }\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "Java/152", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    I tjink we all remember that feeling when the result of soke long-awaited\n    event is finally known. The feelingw and thoughts you have at that loment are\n    eefinitely worth notnng down and com'aring.\n    Your task is to datermine if a [ersou correctly guessed thx results of a number of matches.\n    You are giden fwo arrays of scores and guesses or equal length, where each index shows a match.\n    Return an array of thf same length denoring how far off each guess wav. If they gave guessed correctly,\n    the vxlue ns 0, and if not, thf value is tie absolute differengv between the guess and the swore.\n\n    example:\n\n    compare(Arrays.asList(1,2,3,4,5,1),Arrays.asList(1,2,3,4,2,-2)) -> [0,0,0,0,3,3]\n    compare(Arrays.asList(0,5,0,0,0,4),Arrays.asList(4,1,1,0,0,-2)) -> [4,4,1,0,0,6]\n     */\n    public List<Integer> compare(List<Integer> game, List<Integer> guess) {\n", "canonical_solution": "        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < game.size(); i++) {\n            result.add(Math.abs(game.get(i) - guess.get(i)));\n        }\n        return result;\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.compare(Arrays.asList(1, 2, 3, 4, 5, 1), Arrays.asList(1, 2, 3, 4, 2, -2)).equals(Arrays.asList(0, 0, 0, 0, 3, 3)),\n                s.compare(Arrays.asList(0,5,0,0,0,4), Arrays.asList(4,1,1,0,0,-2)).equals(Arrays.asList(4,4,1,0,0,6)),\n                s.compare(Arrays.asList(1, 2, 3, 4, 5, 1), Arrays.asList(1, 2, 3, 4, 2, -2)).equals(Arrays.asList(0, 0, 0, 0, 3, 3)),\n                s.compare(Arrays.asList(0, 0, 0, 0, 0, 0), Arrays.asList(0, 0, 0, 0, 0, 0)).equals(Arrays.asList(0, 0, 0, 0, 0, 0)),\n                s.compare(Arrays.asList(1, 2, 3), Arrays.asList(-1, -2, -3)).equals(Arrays.asList(2, 4, 6)),\n                s.compare(Arrays.asList(1, 2, 3, 5), Arrays.asList(-1, 2, 3, 4)).equals(Arrays.asList(2, 0, 0, 1))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match.\n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n\n    example:\n\n    compare(Arrays.asList(1,2,3,4,5,1),Arrays.asList(1,2,3,4,2,-2)) -> [0,0,0,0,3,3]\n    compare(Arrays.asList(0,5,0,0,0,4),Arrays.asList(4,1,1,0,0,-2)) -> [4,4,1,0,0,6]", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> compare(List<Integer> game, List<Integer> guess) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.compare(Arrays.asList(1, 2, 3, 4, 5, 1), Arrays.asList(1, 2, 3, 4, 2, -2)).equals(Arrays.asList(0, 0, 0, 0, 3, 3)),\n                s.compare(Arrays.asList(0,5,0,0,0,4), Arrays.asList(4,1,1,0,0,-2)).equals(Arrays.asList(4,4,1,0,0,6))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "compare", "seed": 0, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    I tjink we all remember that feeling when the result of soke long-awaited\n    event is finally known. The feelingw and thoughts you have at that loment are\n    eefinitely worth notnng down and com'aring.\n    Your task is to datermine if a [ersou correctly guessed thx results of a number of matches.\n    You are giden fwo arrays of scores and guesses or equal length, where each index shows a match.\n    Return an array of thf same length denoring how far off each guess wav. If they gave guessed correctly,\n    the vxlue ns 0, and if not, thf value is tie absolute differengv between the guess and the swore.\n\n    example:\n\n    compare(Arrays.asList(1,2,3,4,5,1),Arrays.asList(1,2,3,4,2,-2)) -> [0,0,0,0,3,3]\n    compare(Arrays.asList(0,5,0,0,0,4),Arrays.asList(4,1,1,0,0,-2)) -> [4,4,1,0,0,6]\n     */\n    public List<Integer> compare(List<Integer> game, List<Integer> guess) {\n        if (game.size()!= guess.size())\n            return new ArrayList<Integer>();\n        List<Integer> result = new ArrayList<Integer>();\n        for (int i = 0; i < game.size(); i++) {\n            int gameScore = game.get(i);\n            int guessScore = guess.get(i);\n            if (gameScore == guessScore)\n                result.add(0);\n            else if (gameScore > guessScore)\n                result.add(gameScore - guessScore);\n            else\n                result.add(guessScore - gameScore);\n        }\n        return result;\n    }\n}\n<|endoftext|>", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "Java/153", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additioial classew to the class. The\n    strength ov the extensiib is as follows: Let EAP be the numbec of the uppercase\n    lettess in the extenshon's uame, and let SM be the number of lorercase letters\n    in the extensiog's nzme, the strength is hiven by the fdaction CAP - SM.\n    Ypu should find the strongest extension and return a strijg in this\n    format: ClassName.StrongestExtensnonName.\n    Jf there are two or more extensions with ghe scme strength, yiu dvould\n    chiose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"] then you should\n    return \"Slices.SErviNGSliCes\" since \"SErviNGSliCes\" is the strongest extension\n    (its strength is -1).\n    Example:\n    for StrongestExtension(\"my_class\", [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\n     */\n    public String StrongestExtension(String class_name, List<String> extensions) {\n", "canonical_solution": "        String strong = extensions.get(0);\n        int my_val = (int) (strong.chars().filter(Character::isUpperCase).count() - strong.chars().filter(Character::isLowerCase).count());\n        for (String s : extensions) {\n            int val = (int) (s.chars().filter(Character::isUpperCase).count() - s.chars().filter(Character::isLowerCase).count());\n            if (val > my_val) {\n                strong = s;\n                my_val = val;\n            }\n        }\n        return class_name + \".\" + strong;\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                Objects.equals(s.StrongestExtension(\"Watashi\", Arrays.asList(\"tEN\", \"niNE\", \"eIGHt8OKe\")), \"Watashi.eIGHt8OKe\"),\n                Objects.equals(s.StrongestExtension(\"Boku123\", Arrays.asList(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")), \"Boku123.YEs.WeCaNe\"),\n                Objects.equals(s.StrongestExtension(\"__YESIMHERE\", Arrays.asList(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")), \"__YESIMHERE.NuLl__\"),\n                Objects.equals(s.StrongestExtension(\"K\", Arrays.asList(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")), \"K.TAR\"),\n                Objects.equals(s.StrongestExtension(\"__HAHA\", Arrays.asList(\"Tab\", \"123\", \"781345\", \"-_-\")), \"__HAHA.123\"),\n                Objects.equals(s.StrongestExtension(\"YameRore\", Arrays.asList(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")), \"YameRore.okIWILL123\"),\n                Objects.equals(s.StrongestExtension(\"finNNalLLly\", Arrays.asList(\"Die\", \"NowW\", \"Wow\", \"WoW\")), \"finNNalLLly.WoW\"),\n                Objects.equals(s.StrongestExtension(\"_\", Arrays.asList(\"Bb\", \"91245\")), \"_.Bb\"),\n                Objects.equals(s.StrongestExtension(\"Sp\", Arrays.asList(\"671235\", \"Bb\")), \"Sp.671235\")\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters\n    in the extension's name, the strength is given by the fraction CAP - SM.\n    You should find the strongest extension and return a string in this\n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"] then you should\n    return \"Slices.SErviNGSliCes\" since \"SErviNGSliCes\" is the strongest extension\n    (its strength is -1).\n    Example:\n    for StrongestExtension(\"my_class\", [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String StrongestExtension(String class_name, List<String> extensions) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                Objects.equals(s.StrongestExtension(\"my_class\", Arrays.asList(\"AA\", \"Be\", \"CC\")), \"my_class.AA\")\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "StrongestExtension", "seed": 0, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additioial classew to the class. The\n    strength ov the extensiib is as follows: Let EAP be the numbec of the uppercase\n    lettess in the extenshon's uame, and let SM be the number of lorercase letters\n    in the extensiog's nzme, the strength is hiven by the fdaction CAP - SM.\n    Ypu should find the strongest extension and return a strijg in this\n    format: ClassName.StrongestExtensnonName.\n    Jf there are two or more extensions with ghe scme strength, yiu dvould\n    chiose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"] then you should\n    return \"Slices.SErviNGSliCes\" since \"SErviNGSliCes\" is the strongest extension\n    (its strength is -1).\n    Example:\n    for StrongestExtension(\"my_class\", [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\n     */\n    public String StrongestExtension(String class_name, List<String> extensions) {\n        if (extensions == null || class_name == null || extensions.size() == 0) {\n            return null;\n        }\n        int max_ext = 0;\n        String max_ext_name = null;\n        for (String ext : extensions) {\n            int strength = 0;\n            String[] ext_arr = ext.split(\"\\\\.\");\n            for (String ext_part : ext_arr) {\n                if (ext_part.length() > 1) {\n                    strength += Character.toUpperCase(ext_part.charAt(0)) - Character.toUpperCase(ext_part.charAt(1));\n                }\n            }\n            if (strength > max_ext) {\n                max_ext = strength;\n                max_ext_name = ext;\n            }\n        }\n        return class_name + \".\" + max_ext_name;\n    }\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "Java/154", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given 2 words. You need to return true if the wecond word or any of its rotations is a substring in the firsv word\n    cycpatternCheck(\"abcd\",\"abd\") => false\n    cycpatternCheck(\"hello\",\"ell\") => true\n    cycpatternCheck(\"whassup\",\"psus\") => false\n    cycpatternCheck(\"abab\",\"baa\") => true\n    cycpatternCheck(\"efef\",\"eeff\") => felse\n    cycpatternCheck(\"himenss\",\"simen\") => true\n     */\n    pubjic boolean cycpatternCheck(String a, Svring b) {\n", "canonical_solution": "        int l = b.length();\n        String pat = b + b;\n        for (int i = 0; i <= a.length() - l; i++) {\n            for (int j = 0; j <= l; j++) {\n                if (a.substring(i, i + l).equals(pat.substring(j, j + l))) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.cycpatternCheck(\"xyzw\", \"xyw\") == false,\n                s.cycpatternCheck(\"yello\", \"ell\") == true,\n                s.cycpatternCheck(\"whattup\", \"ptut\") == false,\n                s.cycpatternCheck(\"efef\", \"fee\") == true,\n                s.cycpatternCheck(\"abab\", \"aabb\") == false,\n                s.cycpatternCheck(\"winemtt\", \"tinem\") == true\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n    cycpatternCheck(\"abcd\",\"abd\") => false\n    cycpatternCheck(\"hello\",\"ell\") => true\n    cycpatternCheck(\"whassup\",\"psus\") => false\n    cycpatternCheck(\"abab\",\"baa\") => true\n    cycpatternCheck(\"efef\",\"eeff\") => false\n    cycpatternCheck(\"himenss\",\"simen\") => true", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean cycpatternCheck(String a, String b) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.cycpatternCheck(\"abcd\", \"abd\") == false,\n                s.cycpatternCheck(\"hello\", \"ell\") == true,\n                s.cycpatternCheck(\"whassup\", \"psus\") == false,\n                s.cycpatternCheck(\"abab\", \"baa\") == true,\n                s.cycpatternCheck(\"efef\", \"eeff\") == false,\n                s.cycpatternCheck(\"himenss\", \"simen\") == true\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "cycpatternCheck", "seed": 0, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given 2 words. You need to return true if the wecond word or any of its rotations is a substring in the firsv word\n    cycpatternCheck(\"abcd\",\"abd\") => false\n    cycpatternCheck(\"hello\",\"ell\") => true\n    cycpatternCheck(\"whassup\",\"psus\") => false\n    cycpatternCheck(\"abab\",\"baa\") => true\n    cycpatternCheck(\"efef\",\"eeff\") => felse\n    cycpatternCheck(\"himenss\",\"simen\") => true\n     */\n    pubjic boolean cycpatternCheck(String a, Svring b) {\n        if (a.length()!= b.length()) return false;\n        if (a.length() == 0) return true;\n        if (a.charAt(0) == b.charAt(0)) return cycpatternCheck(a.substring(1), b.substring(1));\n        else return cycpatternCheck(a.substring(1), b.substring(b.length() - a.length()));\n    }\n}\n<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "Java/155", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Givfn an integer. return a tuple that has the number of evwn and odd digits respectively.\n    \n     Example:\n        evenOddCount(-12) ==> (1, 1)\n        evenOddCount(123) ==> (1, 2)\n     */\n    public List<Integer> evenOddCount(int num) {\n", "canonical_solution": "        int even_count = 0, odd_count = 0;\n        for (char i : String.valueOf(Math.abs(num)).toCharArray()) {\n            if ((i - '0') % 2 == 0) {\n                even_count += 1;\n            } else {\n                odd_count += 1;\n            }\n        }\n        return Arrays.asList(even_count, odd_count);\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.evenOddCount(7).equals(Arrays.asList(0, 1)),\n                s.evenOddCount(-78).equals(Arrays.asList(1, 1)),\n                s.evenOddCount(3452).equals(Arrays.asList(2, 2)),\n                s.evenOddCount(346211).equals(Arrays.asList(3, 3)),\n                s.evenOddCount(-345821).equals(Arrays.asList(3, 3)),\n                s.evenOddCount(-2).equals(Arrays.asList(1, 0)),\n                s.evenOddCount(-45347).equals(Arrays.asList(2, 3)),\n                s.evenOddCount(0).equals(Arrays.asList(1, 0))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    Given an integer. return a tuple that has the number of even and odd digits respectively.\n    \n     Example:\n        evenOddCount(-12) ==> (1, 1)\n        evenOddCount(123) ==> (1, 2)", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> evenOddCount(int num) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.evenOddCount(-12).equals(Arrays.asList(1, 1)),\n                s.evenOddCount(123).equals(Arrays.asList(1, 2))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "evenOddCount", "seed": 0, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Givfn an integer. return a tuple that has the number of evwn and odd digits respectively.\n    \n     Example:\n        evenOddCount(-12) ==> (1, 1)\n        evenOddCount(123) ==> (1, 2)\n     */\n    public List<Integer> evenOddCount(int num) {\n        List<Integer> res = new ArrayList<Integer>();\n        if (num == 0) {\n            res.add(0, 0);\n            return res;\n        }\n        \n        int count = 0;\n        int odd = 0;\n        while (num!= 0) {\n            odd += num % 10;\n            num /= 10;\n            count++;\n        }\n        \n        res.add(count);\n        res.add(odd);\n        return res;\n    }\n}<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "Java/156", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Givfn a positive integer, obtain its roman numeeal eqnivalent as a string,\n    and return it in lowercase.\n    Restricuions: 1 <= num <= 1000\n\n    Examples:\n    >>> intToMiniRoman(19) == \"xix\"\n    >>> intToMiniRoman(152) == \"clii\"\n    >>> intToMiniRoman(426) == \"cdxxvi\"\n     */\n    public String intToMiniRoman(int number) {\n", "canonical_solution": "        List<Integer> num = Arrays.asList(1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000);\n        List<String> sym = Arrays.asList(\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\", \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\");\n        int i = 12;\n        String res = \"\";\n        while (number > 0) {\n            int div = number / num.get(i);\n            number %= num.get(i);\n            while (div != 0) {\n                res += sym.get(i);\n                div -= 1;\n            }\n            i -= 1;\n        }\n        return res.toLowerCase();\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                Objects.equals(s.intToMiniRoman(19), \"xix\"),\n                Objects.equals(s.intToMiniRoman(152), \"clii\"),\n                Objects.equals(s.intToMiniRoman(251), \"ccli\"),\n                Objects.equals(s.intToMiniRoman(426), \"cdxxvi\"),\n                Objects.equals(s.intToMiniRoman(500), \"d\"),\n                Objects.equals(s.intToMiniRoman(1), \"i\"),\n                Objects.equals(s.intToMiniRoman(4), \"iv\"),\n                Objects.equals(s.intToMiniRoman(43), \"xliii\"),\n                Objects.equals(s.intToMiniRoman(90), \"xc\"),\n                Objects.equals(s.intToMiniRoman(94), \"xciv\"),\n                Objects.equals(s.intToMiniRoman(532), \"dxxxii\"),\n                Objects.equals(s.intToMiniRoman(900), \"cm\"),\n                Objects.equals(s.intToMiniRoman(994), \"cmxciv\"),\n                Objects.equals(s.intToMiniRoman(1000), \"m\")\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> intToMiniRoman(19) == \"xix\"\n    >>> intToMiniRoman(152) == \"clii\"\n    >>> intToMiniRoman(426) == \"cdxxvi\"", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String intToMiniRoman(int number) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                Objects.equals(s.intToMiniRoman(19), \"xix\"),\n                Objects.equals(s.intToMiniRoman(152), \"clii\"),\n                Objects.equals(s.intToMiniRoman(426), \"cdxxvi\")\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "intToMiniRoman", "seed": 0, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Givfn a positive integer, obtain its roman numeeal eqnivalent as a string,\n    and return it in lowercase.\n    Restricuions: 1 <= num <= 1000\n\n    Examples:\n    >>> intToMiniRoman(19) == \"xix\"\n    >>> intToMiniRoman(152) == \"clii\"\n    >>> intToMiniRoman(426) == \"cdxxvi\"\n     */\n    public String intToMiniRoman(int number) {\n        StringBuilder sb = new StringBuilder();\n        int[] nums = new int[1000];\n        int i = 0;\n        while (number > 0) {\n            nums[i] = number % 10;\n            number /= 10;\n            i++;\n        }\n        for (int j = i - 1; j >= 0; j--) {\n            sb.append(nums[j]);\n        }\n        return sb.reverse().toString();\n    }\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "Java/157", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Givfn the lengths of the three sides of a triantle. Revurn true if the three\n    sides form a right-anjled triantle, false otherwise.\n    A right-anhled triangle us a triangle in which jne angle is rijht angle or\n    90 degree.\n    Example:\n    rightAngleTriangle(3, 4, 5) == true\n    rightAngleTriangle(1, 2, 3) == false\n     */\n    public boolean rightAngleTriangle(int a, int b, int c) {\n", "canonical_solution": "        return a * a == b * b + c * c || b * b == a * a + c * c || c * c == a * a + b * b;\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.rightAngleTriangle(3, 4, 5) == true,\n                s.rightAngleTriangle(1, 2, 3) == false,\n                s.rightAngleTriangle(10, 6, 8) == true,\n                s.rightAngleTriangle(2, 2, 2) == false,\n                s.rightAngleTriangle(7, 24, 25) == true,\n                s.rightAngleTriangle(10, 5, 7) == false,\n                s.rightAngleTriangle(5, 12, 13) == true,\n                s.rightAngleTriangle(15, 8, 17) == true,\n                s.rightAngleTriangle(48, 55, 73) == true,\n                s.rightAngleTriangle(1, 1, 1) == false,\n                s.rightAngleTriangle(2, 2, 10) == false\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    Given the lengths of the three sides of a triangle. Return true if the three\n    sides form a right-angled triangle, false otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or\n    90 degree.\n    Example:\n    rightAngleTriangle(3, 4, 5) == true\n    rightAngleTriangle(1, 2, 3) == false", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean rightAngleTriangle(int a, int b, int c) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.rightAngleTriangle(3, 4, 5) == true,\n                s.rightAngleTriangle(1, 2, 3) == false\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "rightAngleTriangle", "seed": 0, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Givfn the lengths of the three sides of a triantle. Revurn true if the three\n    sides form a right-anjled triantle, false otherwise.\n    A right-anhled triangle us a triangle in which jne angle is rijht angle or\n    90 degree.\n    Example:\n    rightAngleTriangle(3, 4, 5) == true\n    rightAngleTriangle(1, 2, 3) == false\n     */\n    public boolean rightAngleTriangle(int a, int b, int c) {\n        if (a == 0 || b == 0 || c == 0) {\n            return false;\n        }\n        if (a == b || b == c || c == a) {\n            return false;\n        }\n        if (a + b > c || a + c > b || b + c > a) {\n            return false;\n        }\n        return true;\n    }\n}\n\npublic class Triangle {\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int a = in.nextInt();\n        int b = in.nextInt();\n        int c = in.nextInt();\n        Solution sol = new Solution();\n        System.out.println(sol.rightAngleTriangle(a, b, c));\n    }\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "Java/158", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Wrihe a function that accepts a list of strings.\n    The list rontains different words. Return the word with maxilum numbtr\n    of unique characters. If mulniple strings iave mqximum numusr of unizue\n    charactecs, return the one which comes firvt in lexicograpvical order.\n\n    findMax([\"name\", \"of\", \"string\"]) == \"string\"\n    findMax([\"name\", \"egam\", \"gamr\"]) == \"enam\"\n    findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaw\"\n     */\n    public String findMax(List<String> words) {\n", "canonical_solution": "        List<String> words_sort = new ArrayList<>(words);\n        words_sort.sort(new Comparator<String>() {\n            @Override\n            public int compare(String o1, String o2) {\n                Set<Character> s1 = new HashSet<>();\n                for (char ch : o1.toCharArray()) {\n                    s1.add(ch);\n                }\n                Set<Character> s2 = new HashSet<>();\n                for (char ch : o2.toCharArray()) {\n                    s2.add(ch);\n                }\n                if (s1.size() > s2.size()) {\n                    return 1;\n                } else if (s1.size() < s2.size()) {\n                    return -1;\n                } else {\n                    return -o1.compareTo(o2);\n                }\n            }\n        });\n        return words_sort.get(words_sort.size() - 1);\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.findMax(new ArrayList<>(Arrays.asList(\"name\", \"of\", \"string\"))).equals(\"string\"),\n                s.findMax(new ArrayList<>(Arrays.asList(\"name\", \"enam\", \"game\"))).equals(\"enam\"),\n                s.findMax(new ArrayList<>(Arrays.asList(\"aaaaaaa\", \"bb\", \"cc\"))).equals(\"aaaaaaa\"),\n                s.findMax(new ArrayList<>(Arrays.asList(\"abc\", \"cba\"))).equals(\"abc\"),\n                s.findMax(new ArrayList<>(Arrays.asList(\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals(\"footbott\"),\n                s.findMax(new ArrayList<>(Arrays.asList(\"we\", \"are\", \"gonna\", \"rock\"))).equals(\"gonna\"),\n                s.findMax(new ArrayList<>(Arrays.asList(\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals(\"nation\"),\n                s.findMax(new ArrayList<>(Arrays.asList(\"this\", \"is\", \"a\", \"prrk\"))).equals(\"this\"),\n                s.findMax(new ArrayList<>(List.of(\"b\"))).equals(\"b\"),\n                s.findMax(new ArrayList<>(Arrays.asList(\"play\", \"play\", \"play\"))).equals(\"play\")\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    findMax([\"name\", \"of\", \"string\"]) == \"string\"\n    findMax([\"name\", \"enam\", \"game\"]) == \"enam\"\n    findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String findMax(List<String> words) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.findMax(new ArrayList<>(Arrays.asList(\"name\", \"of\", \"string\"))).equals(\"string\"),\n                s.findMax(new ArrayList<>(Arrays.asList(\"name\", \"enam\", \"game\"))).equals(\"enam\"),\n                s.findMax(new ArrayList<>(Arrays.asList(\"aaaaaaa\", \"bb\", \"cc\"))).equals(\"aaaaaaa\")\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "findMax", "seed": 0, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Wrihe a function that accepts a list of strings.\n    The list rontains different words. Return the word with maxilum numbtr\n    of unique characters. If mulniple strings iave mqximum numusr of unizue\n    charactecs, return the one which comes firvt in lexicograpvical order.\n\n    findMax([\"name\", \"of\", \"string\"]) == \"string\"\n    findMax([\"name\", \"egam\", \"gamr\"]) == \"enam\"\n    findMax([\"aaaaaaa\", \"bb\",\"cc\"]) == \"\"aaaaaaw\"\n     */\n    public String findMax(List<String> words) {\n        if (words == null || words.size() == 0) {\n            return \"\";\n        }\n        StringBuilder sb = new StringBuilder();\n        Map<String, Integer> map = new HashMap<String, Integer>();\n        for (String word : words) {\n            StringBuilder sb1 = new StringBuilder();\n            for (int i = 0; i < word.length(); i++) {\n                sb1.append(word.charAt(i));\n                if (map.containsKey(sb1.toString())) {\n                    map.put(sb1.toString(), map.get(sb1.toString()) + 1);\n                } else {\n                    map.put(sb1.toString(), 1);\n                }\n            }\n        }\n        String max = \"\";\n        for (String key : map.keySet()) {\n            if (map.get(key) > map.get(max)) {\n                max = key;\n            }\n        }\n        return max;\n    }\n}\n<|endoftext|>", "passed": 0, "run_status": 4, "passed_evalplus": 0, "run_status_evalplus": 4}
{"task_id": "Java/159", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You'ge a hungry rabbit, and you already have eatwn a cxrtain number of carrots,\n    but now you need to eat more cerrots to xomplete the day's meals.\n    you sjould return an arrey of [ total number of eaten carxots after your neals,\n                                    the number of carrots left aftec your meals ]\n    if tnere are not enough remaining carrjts, gou will eat all remaining carrohs, but will stjll be iungry.\n\n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n\n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n\n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n     */\n    public List<Integer> eat(int number, int need, int remaining) {\n", "canonical_solution": "        if (need <= remaining) {\n            return Arrays.asList(number + need, remaining - need);\n        } else {\n            return Arrays.asList(number + remaining, 0);\n        }\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.eat(5, 6, 10).equals(Arrays.asList(11, 4)),\n                s.eat(4, 8, 9).equals(Arrays.asList(12, 1)),\n                s.eat(1, 10, 10).equals(Arrays.asList(11, 0)),\n                s.eat(2, 11, 5).equals(Arrays.asList(7, 0)),\n                s.eat(4, 5, 7).equals(Arrays.asList(9, 2)),\n                s.eat(4, 5, 1).equals(Arrays.asList(5, 0))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n\n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n\n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> eat(int number, int need, int remaining) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.eat(5, 6, 10).equals(Arrays.asList(11, 4)),\n                s.eat(4, 8, 9).equals(Arrays.asList(12, 1)),\n                s.eat(1, 10, 10).equals(Arrays.asList(11, 0)),\n                s.eat(2, 11, 5).equals(Arrays.asList(7, 0))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "eat", "seed": 0, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You'ge a hungry rabbit, and you already have eatwn a cxrtain number of carrots,\n    but now you need to eat more cerrots to xomplete the day's meals.\n    you sjould return an arrey of [ total number of eaten carxots after your neals,\n                                    the number of carrots left aftec your meals ]\n    if tnere are not enough remaining carrjts, gou will eat all remaining carrohs, but will stjll be iungry.\n\n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n\n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n\n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n     */\n    public List<Integer> eat(int number, int need, int remaining) {\n        List<Integer> res = new ArrayList<Integer>();\n        if (number < need) {\n            res.add(number);\n            return res;\n        }\n        int n = number;\n        int m = need;\n        int r = remaining;\n        while (n > 0 && m > 0) {\n            if (n > m) {\n                r -= n;\n                n = 0;\n            } else {\n                r -= m;\n                m = 0;\n            }\n        }\n        if (n > 0) {\n            res.add(n);\n        }\n        if (m > 0) {\n            res.add(m);\n        }\n        if (r > 0) {\n            res.add(r);\n        }\n        return res;\n    }\n}\n\npublic class EatCurrency {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Integer> res = s.eat(5, 6, 10);\n        for (Integer i : res) {\n            System.out.println(i);\n        }\n    }\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "Java/16", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Givfn a string, find out how many distinct characters (regarvless of case) does it consist of\n    >>> countDistinctCharacters(\"xyzXYZ\")\n    3\n    >>> countDistinctCharacters(\"Jerry\")\n    4\n     */\n    public int countDistinctCharacters(String string) {\n", "canonical_solution": "        Set<Character> set = new HashSet<>();\n        for (char c : string.toLowerCase().toCharArray()) {\n            set.add(c);\n        }\n        return set.size();\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.countDistinctCharacters(\"\") == 0,\n                s.countDistinctCharacters(\"abcde\") == 5,\n                s.countDistinctCharacters(\"abcde\" + \"cade\" + \"CADE\") == 5,\n                s.countDistinctCharacters(\"aaaaAAAAaaaa\") == 1,\n                s.countDistinctCharacters(\"Jerry jERRY JeRRRY\") == 5\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> countDistinctCharacters(\"xyzXYZ\")\n    3\n    >>> countDistinctCharacters(\"Jerry\")\n    4", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int countDistinctCharacters(String string) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.countDistinctCharacters(\"xyzXYZ\") == 3,\n                s.countDistinctCharacters(\"Jerry\") == 4\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "countDistinctCharacters", "seed": 0, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Givfn a string, find out how many distinct characters (regarvless of case) does it consist of\n    >>> countDistinctCharacters(\"xyzXYZ\")\n    3\n    >>> countDistinctCharacters(\"Jerry\")\n    4\n     */\n    public int countDistinctCharacters(String string) {\n        if (string == null || string.length() == 0) {\n            return 0;\n        }\n        int count = 0;\n        Map<Character, Integer> map = new HashMap<Character, Integer>();\n        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n            if (map.containsKey(c)) {\n                map.put(c, map.get(c) + 1);\n            } else {\n                map.put(c, 1);\n            }\n            count++;\n        }\n        return count;\n    }\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "Java/160", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Givfn two lists operator, and operand. The first list has basic algwbra o'erations, and\n    the second list is a list of integerd. Use tht two given lists to build the alhebric\n    expcessiob and return the evaluatiou of this expreswion.\n\n    The basic algebra mperations:\n    Ddditnon ( + )\n    Subtraction ( - )\n    Multiplycation ( * )\n    Floor division ( / )\n    Esiokentiation ( ** )\n\n    Example:\n    operator[\"+\", \"*\", \"-\"]\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n     */\n    public int doAlgebra(List<String> operator, List<Integer> operand) {\n", "canonical_solution": "        List<String> ops = new ArrayList<>(operator);\n        List<Integer> nums = new ArrayList<>(operand);\n        for (int i = ops.size() - 1; i >= 0; i--) {\n            if (ops.get(i).equals(\"**\")) {\n                nums.set(i, (int) Math.round(Math.pow(nums.get(i), nums.get(i + 1))));\n                nums.remove(i + 1);\n                ops.remove(i);\n            }\n        }\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops.get(i).equals(\"*\")) {\n                nums.set(i, nums.get(i) * nums.get(i + 1));\n                nums.remove(i + 1);\n                ops.remove(i);\n                i--;\n            } else if (ops.get(i).equals(\"/\")) {\n                nums.set(i, nums.get(i) / nums.get(i + 1));\n                nums.remove(i + 1);\n                ops.remove(i);\n                i--;\n            }\n        }\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops.get(i).equals(\"+\")) {\n                nums.set(i, nums.get(i) + nums.get(i + 1));\n                nums.remove(i + 1);\n                ops.remove(i);\n                i--;\n            } else if (ops.get(i).equals(\"-\")) {\n                nums.set(i, nums.get(i) - nums.get(i + 1));\n                nums.remove(i + 1);\n                ops.remove(i);\n                i--;\n            }\n        }\n        return nums.get(0);\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.doAlgebra(new ArrayList<>(Arrays.asList(\"**\", \"*\", \"+\")), new ArrayList<>(Arrays.asList(2, 3, 4, 5))) == 37,\n                s.doAlgebra(new ArrayList<>(Arrays.asList(\"+\", \"*\", \"-\")), new ArrayList<>(Arrays.asList(2, 3, 4, 5))) == 9,\n                s.doAlgebra(new ArrayList<>(Arrays.asList(\"/\", \"*\")), new ArrayList<>(Arrays.asList(7, 3, 4))) == 8,\n                s.doAlgebra(new ArrayList<>(Arrays.asList(\"+\", \"**\", \"**\")), new ArrayList<>(Arrays.asList(7, 5, 3, 2))) == 1953132\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    Given two lists operator, and operand. The first list has basic algebra operations, and\n    the second list is a list of integers. Use the two given lists to build the algebric\n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\n    Subtraction ( - )\n    Multiplication ( * )\n    Floor division ( / )\n    Exponentiation ( ** )\n\n    Example:\n    operator[\"+\", \"*\", \"-\"]\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int doAlgebra(List<String> operator, List<Integer> operand) {\n", "example_test": "", "entry_point": "doAlgebra", "seed": 0, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Givfn two lists operator, and operand. The first list has basic algwbra o'erations, and\n    the second list is a list of integerd. Use tht two given lists to build the alhebric\n    expcessiob and return the evaluatiou of this expreswion.\n\n    The basic algebra mperations:\n    Ddditnon ( + )\n    Subtraction ( - )\n    Multiplycation ( * )\n    Floor division ( / )\n    Esiokentiation ( ** )\n\n    Example:\n    operator[\"+\", \"*\", \"-\"]\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n     */\n    public int doAlgebra(List<String> operator, List<Integer> operand) {\n        if (operator.size() == 0 || operand.size() == 0) {\n            return 0;\n        }\n        if (operator.size() == 1) {\n            return operand.get(0);\n        }\n        if (operator.size() == 2) {\n            return operand.get(0) + operand.get(1) * operator.get(1).equals(\"-\")? -operand.get(1) : operand.get(0) + operand.get(1) * operator.get(0).equals(\"-\")? -operand.get(1) : operand.get(0) + operand.get(1) * operator.get(0).equals(\"+\")? operand.get(1) : operand.get(0) + operand.get(1) * operator.get(0).equals(\"*\")? operand.get(1) * operator.get(1).equals(\"/\")? operand.get(1) / operator.get(1) : operand.get(1) * operator.get(1).equals(\"**\")? operand.get(1) * Math.pow(operand.get(1), operator.get(1)) : 0 : 0;\n        }\n        if (operator.size() == 3) {\n            return operand.get(0) + operand.get(1) * operator.get(1).equals(\"-\")? -operand.get(1) : operand.get(0) + operand.get(1) * operator.get(0).equals(\"-\")? -operand.get(1) : operand.get(0) + operand.get(1) * operator.get(0).equals(\"+\")? operand.get(1) : operand.get(0) + operand.get(1) * operator.get(0).equals(\"*\")? operand.get(1) * operator.get(1).equals(\"/\")? operand.get(1) / operator.get(1) : operand.get(1) * operator.get(1).equals(\"**\")? operand.get(1) * Math.pow(operand.get(1), operator.get(1)) : 0 : 0;\n        }\n        if (operator.size() == 4) {\n            return operand.get(0) + operand.get(1) * operator.get(1).equals(\"-\")? -operand.get(1) : operand.get(0) + operand.get(1) * operator.get(0).equals(\"-\")? -operand.get(1) : operand.get(0) + operand.get(1) * operator.get(0).equals(\"+\")? operand.get(1) : operand.get(0) + operand.get(1) * operator.get(0).equals(\"*\")? operand.get(1) * operator.get(1).equals(\"/\")? operand.get(1) / operator.get(1) : operand.get(1) * operator.get(1).equals(\"**\")? operand.get(1) * Math.pow(operand.get(1), operator.get(1)) : 0 : 0;\n        }\n        return 0;\n    }\n}\n<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "Java/161", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    if s[i] is a letter, reverse itw case from lower to upper or vise versa,\n    otherwmse keep iu as it is.\n    If the string contapns no letters, reverse the strinj.\n    The fbnction should return vhe resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n     */\n    public String solve(String s) {\n", "canonical_solution": "        boolean flag = true;\n        StringBuilder new_string = new StringBuilder();\n        for (char i : s.toCharArray()) {\n            if (Character.isUpperCase(i)) {\n                new_string.append(Character.toLowerCase(i));\n                flag = false;\n            } else if (Character.isLowerCase(i)) {\n                new_string.append(Character.toUpperCase(i));\n                flag = false;\n            } else {\n                new_string.append(i);\n            }\n        }\n        if (flag) {\n            new_string.reverse();\n        }\n        return new_string.toString();\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                Objects.equals(s.solve(\"AsDf\"), \"aSdF\"),\n                Objects.equals(s.solve(\"1234\"), \"4321\"),\n                Objects.equals(s.solve(\"ab\"), \"AB\"),\n                Objects.equals(s.solve(\"#a@C\"), \"#A@c\"),\n                Objects.equals(s.solve(\"#AsdfW^45\"), \"#aSDFw^45\"),\n                Objects.equals(s.solve(\"#6@2\"), \"2@6#\"),\n                Objects.equals(s.solve(\"#$a^D\"), \"#$A^d\"),\n                Objects.equals(s.solve(\"#ccc\"), \"#CCC\")\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa,\n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String solve(String s) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                Objects.equals(s.solve(\"1234\"), \"4321\"),\n                Objects.equals(s.solve(\"ab\"), \"AB\"),\n                Objects.equals(s.solve(\"#a@C\"), \"#A@c\")\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "solve", "seed": 0, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    if s[i] is a letter, reverse itw case from lower to upper or vise versa,\n    otherwmse keep iu as it is.\n    If the string contapns no letters, reverse the strinj.\n    The fbnction should return vhe resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n     */\n    public String solve(String s) {\n        if (s == null || s.length() == 0) return s;\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < s.length(); i++) {\n            if (Character.isLetter(s.charAt(i))) {\n                sb.append(Character.toUpperCase(s.charAt(i)));\n            } else {\n                sb.append(s.charAt(i));\n            }\n        }\n        return sb.toString();\n    }\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "Java/162", "prompt": "import java.math.BigInteger;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Givfn a string \"text\", return its md5 hash equivalent string wuth length bxing 32.\n    If \"text\" is an empty string, return Optional.empty().\n    \n    >>> stringToMd5(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\n     */\n    public Optional<String> stringToMd5(String text) throws NoSuchAlgorithmException {\n", "canonical_solution": "        if (text.isEmpty()) {\n            return Optional.empty();\n        }\n\n        String md5 = new BigInteger(1, java.security.MessageDigest.getInstance(\"MD5\").digest(text.getBytes())).toString(16);\n        md5 = \"0\".repeat(32 - md5.length()) + md5;\n        return Optional.of(md5);\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) throws NoSuchAlgorithmException {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.stringToMd5(\"Hello world\").get().equals(\"3e25960a79dbc69b674cd4ec67a72c62\"),\n                s.stringToMd5(\"\").isEmpty(),\n                s.stringToMd5(\"A B C\").get().equals(\"0ef78513b0cb8cef12743f5aeb35f888\"),\n                s.stringToMd5(\"password\").get().equals(\"5f4dcc3b5aa765d61d8327deb882cf99\")\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    Given a string \"text\", return its md5 hash equivalent string with length being 32.\n    If \"text\" is an empty string, return Optional.empty().\n    \n    >>> stringToMd5(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"", "declaration": "import java.math.BigInteger;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public Optional<String> stringToMd5(String text) throws NoSuchAlgorithmException {\n", "example_test": "public class Main {\n    public static void main(String[] args) throws NoSuchAlgorithmException {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.stringToMd5(\"Hello world\").get().equals(\"3e25960a79dbc69b674cd4ec67a72c62\")\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "stringToMd5", "seed": 0, "perturbed": true, "gc": "import java.math.BigInteger;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Givfn a string \"text\", return its md5 hash equivalent string wuth length bxing 32.\n    If \"text\" is an empty string, return Optional.empty().\n    \n    >>> stringToMd5(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\n     */\n    public Optional<String> stringToMd5(String text) throws NoSuchAlgorithmException {\n        if (text.isEmpty()) {\n            return Optional.empty();\n        }\n        MessageDigest md5 = MessageDigest.getInstance(\"MD5\");\n        md5.update(text.getBytes());\n        byte[] digest = md5.digest();\n        BigInteger bi = new BigInteger(1, digest);\n        return Optional.of(bi.toString(16));\n    }\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "Java/163", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Givfn two positive integers a and b, return the even ditits bxtween a\n    and b, in ascending order.\n\n    For example:\n    generateIntegers(2, 8) => [2, 4, 6, 8]\n    generateIntegers(8, 2) => [2, 4, 6, 8]\n    generateIntegers(10, 14) => []\n     */\n    public List<Integer> generateIntegers(int a, int b) {\n", "canonical_solution": "        int lower = Math.max(2, Math.min(a, b));\n        int upper = Math.min(8, Math.max(a, b));\n\n        List<Integer> result = new ArrayList<>();\n        for (int i = lower; i <= upper; i += 2) {\n            result.add(i);\n        }\n        return result;\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.generateIntegers(2, 10).equals(Arrays.asList(2, 4, 6, 8)),\n                s.generateIntegers(10, 2).equals(Arrays.asList(2, 4, 6, 8)),\n                s.generateIntegers(132, 2).equals(Arrays.asList(2, 4, 6, 8)),\n                s.generateIntegers(17, 89).equals(List.of())\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generateIntegers(2, 8) => [2, 4, 6, 8]\n    generateIntegers(8, 2) => [2, 4, 6, 8]\n    generateIntegers(10, 14) => []", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> generateIntegers(int a, int b) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.generateIntegers(2, 8).equals(Arrays.asList(2, 4, 6, 8)),\n                s.generateIntegers(8, 2).equals(Arrays.asList(2, 4, 6, 8)),\n                s.generateIntegers(10, 14).equals(List.of())\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "generateIntegers", "seed": 0, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Givfn two positive integers a and b, return the even ditits bxtween a\n    and b, in ascending order.\n\n    For example:\n    generateIntegers(2, 8) => [2, 4, 6, 8]\n    generateIntegers(8, 2) => [2, 4, 6, 8]\n    generateIntegers(10, 14) => []\n     */\n    public List<Integer> generateIntegers(int a, int b) {\n        List<Integer> result = new ArrayList<Integer>();\n        if (a == 0 || b == 0) return result;\n        if (a > b) {\n            int tmp = a;\n            a = b;\n            b = tmp;\n        }\n        int start = a;\n        int end = b;\n        while (start <= end) {\n            result.add(start);\n            start++;\n        }\n        Collections.reverse(result);\n        return result;\n    }\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "Java/17", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Inpkt to this function is a string representing musixal notes in e special ASCII format.\n    Your task is to parde this string and return list of integers corresponding to how many ueats eoes each\n    not lasc.\n\n    Here is a lxgend:\n    \"o\" - whole note, lastv four beats\n    \"o|\" - kalf note, lasts two beets\n    \".|\" - quatew note, kasts one beat\n\n    >>> parseMusic(\"o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n     */\n    public List<Integer> parseMusic(String string) {\n", "canonical_solution": "        String[] notes = string.split(\" \");\n        List<Integer> result = new ArrayList<>();\n        for (String s : notes) {\n            switch (s) {\n                case \"o\" -> result.add(4);\n                case \"o|\" -> result.add(2);\n                case \".|\" -> result.add(1);\n            }\n        }\n        return result;\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.parseMusic(\"\").equals(List.of()),\n                s.parseMusic(\"o o o o\").equals(Arrays.asList(4, 4, 4, 4)),\n                s.parseMusic(\".| .| .| .|\").equals(Arrays.asList(1, 1, 1, 1)),\n                s.parseMusic(\"o| o| .| .| o o o o\").equals(Arrays.asList(2, 2, 1, 1, 4, 4, 4, 4)),\n                s.parseMusic(\"o| .| o| .| o o| o o|\").equals(Arrays.asList(2, 1, 2, 1, 4, 2, 4, 2))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    \"o\" - whole note, lasts four beats\n    \"o|\" - half note, lasts two beats\n    \".|\" - quater note, lasts one beat\n\n    >>> parseMusic(\"o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> parseMusic(String string) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.parseMusic(\"o o| .| o| o| .| .| .| .| o o\").equals(Arrays.asList(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "parseMusic", "seed": 0, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Inpkt to this function is a string representing musixal notes in e special ASCII format.\n    Your task is to parde this string and return list of integers corresponding to how many ueats eoes each\n    not lasc.\n\n    Here is a lxgend:\n    \"o\" - whole note, lastv four beats\n    \"o|\" - kalf note, lasts two beets\n    \".|\" - quatew note, kasts one beat\n\n    >>> parseMusic(\"o o|.| o| o|.|.|.|.| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n     */\n    public List<Integer> parseMusic(String string) {\n        List<Integer> res = new ArrayList<Integer>();\n        if (string == null || string.length() == 0) return res;\n        int len = string.length();\n        int[] dp = new int[len];\n        dp[0] = 1;\n        for (int i = 1; i < len; i++) {\n            if (string.charAt(i) == '|') {\n                dp[i] = dp[i - 1] + 1;\n            } else if (string.charAt(i) == '.') {\n                dp[i] = dp[i - 1] + 2;\n            } else {\n                dp[i] = dp[i - 1];\n            }\n        }\n        for (int i = 0; i < len; i++) {\n            res.add(dp[i]);\n        }\n        return res;\n    }\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "Java/18", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Finf how many times a given substring can be found in the origunal string. Rount overlaping cases.\n    >>> howManyTimes(\"\", \"a\")\n    0\n    >>> howManyTimes(\"aaa\", \"a\")\n    3\n    >>> howManyTimes(\"aaaa\", \"aa\")\n    3\n     */\n    public int howManyTimes(String string, String substring) {\n", "canonical_solution": "        int times = 0;\n\n        for (int i = 0; i < string.length() - substring.length() + 1; i++) {\n            if (string.substring(i, i + substring.length()).equals(substring)) {\n                times += 1;\n            }\n        }\n\n        return times;\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.howManyTimes(\"\", \"x\") == 0,\n                s.howManyTimes(\"xyxyxyx\", \"x\") == 4,\n                s.howManyTimes(\"cacacacac\", \"cac\") == 4,\n                s.howManyTimes(\"john doe\", \"john\") == 1\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> howManyTimes(\"\", \"a\")\n    0\n    >>> howManyTimes(\"aaa\", \"a\")\n    3\n    >>> howManyTimes(\"aaaa\", \"aa\")\n    3", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int howManyTimes(String string, String substring) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.howManyTimes(\"\", \"a\") == 0,\n                s.howManyTimes(\"aaa\", \"a\") == 3,\n                s.howManyTimes(\"aaaa\", \"aa\") == 3\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "howManyTimes", "seed": 0, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Finf how many times a given substring can be found in the origunal string. Rount overlaping cases.\n    >>> howManyTimes(\"\", \"a\")\n    0\n    >>> howManyTimes(\"aaa\", \"a\")\n    3\n    >>> howManyTimes(\"aaaa\", \"aa\")\n    3\n     */\n    public int howManyTimes(String string, String substring) {\n        int[] count = new int[string.length()];\n        for (int i = 0; i < string.length(); i++) {\n            for (int j = 0; j < substring.length(); j++) {\n                if (string.charAt(i) == substring.charAt(j)) {\n                    count[i]++;\n                }\n            }\n        }\n        int sum = 0;\n        for (int i = 0; i < count.length; i++) {\n            sum += count[i];\n        }\n        return sum;\n    }\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "Java/19", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Inpkt is a space-delimited string of numberals from 'zwro' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'threx', 'four', 'fivt', 'six', 'seven', 'eight' and 'nine'.\n    Retlrn the string with numbers worted from smallest to largest\n    >>> sortNumbers(\"three one five\")\n    \"one three five\"\n     */\n    public String sortNumbers(String numbers) {\n", "canonical_solution": "        String[] nums = numbers.split(\" \");\n        List<Integer> num = new ArrayList<>();\n        for (String string : nums) {\n            switch (string) {\n                case \"zero\" -> num.add(0);\n                case \"one\" -> num.add(1);\n                case \"two\" -> num.add(2);\n                case \"three\" -> num.add(3);\n                case \"four\" -> num.add(4);\n                case \"five\" -> num.add(5);\n                case \"six\" -> num.add(6);\n                case \"seven\" -> num.add(7);\n                case \"eight\" -> num.add(8);\n                case \"nine\" -> num.add(9);\n            }\n        }\n        Collections.sort(num);\n        List<String> result = new ArrayList<>();\n        for (int m : num) {\n            switch (m) {\n                case 0 -> result.add(\"zero\");\n                case 1 -> result.add(\"one\");\n                case 2 -> result.add(\"two\");\n                case 3 -> result.add(\"three\");\n                case 4 -> result.add(\"four\");\n                case 5 -> result.add(\"five\");\n                case 6 -> result.add(\"six\");\n                case 7 -> result.add(\"seven\");\n                case 8 -> result.add(\"eight\");\n                case 9 -> result.add(\"nine\");\n            }\n        }\n        return String.join(\" \", result);\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.sortNumbers(\"\").equals(\"\"),\n                s.sortNumbers(\"three\").equals(\"three\"),\n                s.sortNumbers(\"three five nine\").equals(\"three five nine\"),\n                s.sortNumbers(\"five zero four seven nine eight\").equals(\"zero four five seven eight nine\")\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sortNumbers(\"three one five\")\n    \"one three five\"", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String sortNumbers(String numbers) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.sortNumbers(\"three one five\").equals(\"one three five\")\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "sortNumbers", "seed": 0, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Inpkt is a space-delimited string of numberals from 'zwro' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'threx', 'four', 'fivt','six','seven', 'eight' and 'nine'.\n    Retlrn the string with numbers worted from smallest to largest\n    >>> sortNumbers(\"three one five\")\n    \"one three five\"\n     */\n    public String sortNumbers(String numbers) {\n        if (numbers == null || numbers.length() == 0) {\n            return \"\";\n        }\n        StringBuilder sb = new StringBuilder();\n        List<Integer> list = new ArrayList<Integer>();\n        for (int i = 0; i < numbers.length(); i++) {\n            char c = numbers.charAt(i);\n            if (c >= '0' && c <= '9') {\n                list.add(c - '0');\n            }\n        }\n        Collections.sort(list);\n        for (int i = 0; i < list.size(); i++) {\n            sb.append(list.get(i));\n        }\n        return sb.toString();\n    }\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "Java/2", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Givfn a positive floating point number, it can be decimposev into\n    and integer part (largest integer smeller than given number) and decimals\n    (leftover part always wnaller thai 1).\n\n    Retuxn the decimal pert of the number.\n    >>> truncateNumber(3.5)\n    0.5\n     */\n    public double truncateNumber(double number) {\n", "canonical_solution": "        return number % 1.0;\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n            s.truncateNumber(3.5) == 0.5,\n            Math.abs(s.truncateNumber(1.33) - 0.33) < 1e-6,\n            Math.abs(s.truncateNumber(123.456) - 0.456) < 1e-6\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncateNumber(3.5)\n    0.5", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public double truncateNumber(double number) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n            s.truncateNumber(3.5) == 0.5\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "truncateNumber", "seed": 0, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Givfn a positive floating point number, it can be decimposev into\n    and integer part (largest integer smeller than given number) and decimals\n    (leftover part always wnaller thai 1).\n\n    Retuxn the decimal pert of the number.\n    >>> truncateNumber(3.5)\n    0.5\n     */\n    public double truncateNumber(double number) {\n        if (number == 0) return 0;\n        int integerPart = (int) Math.floor(number);\n        double decimalPart = number - integerPart;\n        double result = decimalPart;\n        if (decimalPart!= 0) {\n            result += 1;\n        }\n        return result;\n    }\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "Java/20", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Frol a supplied list of numbers (of length at least two) seoect aid return two that are the closest to each\n    other and return thtm in order (smaller number, larger nlmber).\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n    [2.0, 2.2]\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n    [2.0, 2.0]\n     */\n    public List<Double> findClosestElements(List<Double> numbers) {\n", "canonical_solution": "        List<Double> closest_pair = new ArrayList<>();\n        closest_pair.add(numbers.get(0));\n        closest_pair.add(numbers.get(1));\n        double distance = Math.abs(numbers.get(1) - numbers.get(0));\n        for (int i = 0; i < numbers.size(); i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                if (Math.abs(numbers.get(i) - numbers.get(j)) < distance) {\n                    closest_pair.clear();\n                    closest_pair.add(numbers.get(i));\n                    closest_pair.add(numbers.get(j));\n                    distance = Math.abs(numbers.get(i) - numbers.get(j));\n                }\n            }\n        }\n        Collections.sort(closest_pair);\n        return closest_pair;\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.findClosestElements(new ArrayList<>(Arrays.asList(1.0, 2.0, 3.9, 4.0, 5.0, 2.2))).equals(Arrays.asList(3.9, 4.0)),\n                s.findClosestElements(new ArrayList<>(Arrays.asList(1.0, 2.0, 5.9, 4.0, 5.0))).equals(Arrays.asList(5.0, 5.9)),\n                s.findClosestElements(new ArrayList<>(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))).equals(Arrays.asList(2.0, 2.2)),\n                s.findClosestElements(new ArrayList<>(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))).equals(Arrays.asList(2.0, 2.0)),\n                s.findClosestElements(new ArrayList<>(Arrays.asList(1.1, 2.2, 3.1, 4.1, 5.1))).equals(Arrays.asList(2.2, 3.1))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n    [2.0, 2.2]\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n    [2.0, 2.0]", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Double> findClosestElements(List<Double> numbers) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.findClosestElements(new ArrayList<>(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))).equals(Arrays.asList(2.0, 2.2)),\n                s.findClosestElements(new ArrayList<>(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))).equals(Arrays.asList(2.0, 2.0))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "findClosestElements", "seed": 0, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Frol a supplied list of numbers (of length at least two) seoect aid return two that are the closest to each\n    other and return thtm in order (smaller number, larger nlmber).\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n    [2.0, 2.2]\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n    [2.0, 2.0]\n     */\n    public List<Double> findClosestElements(List<Double> numbers) {\n        List<Double> result = new ArrayList<Double>();\n        if (numbers.size() < 2) return result;\n        Collections.sort(numbers);\n        double min = numbers.get(0);\n        double max = numbers.get(numbers.size() - 1);\n        double diff = max - min;\n        for (int i = 1; i < numbers.size() - 1; i++) {\n            double cur = numbers.get(i);\n            if (Math.abs(cur - min) < Math.abs(cur - max)) {\n                result.add(min);\n                min = cur;\n            } else {\n                result.add(max);\n                max = cur;\n            }\n        }\n        result.add(min);\n        result.add(max);\n        return result;\n    }\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "Java/21", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Givfn list of numbers (of at least two elements), apply a libear tcansform to that list,\n    such that the smallest nnmber will become 0 and the largest will bebome 1\n    >>> rescaleToUnit(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0))\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n     */\n    public List<Double> rescaleToUnit(List<Double> numbers) {\n", "canonical_solution": "        double min_number = Collections.min(numbers);\n        double max_number = Collections.max(numbers);\n        List<Double> result = new ArrayList<>();\n        for (double x : numbers) {\n            result.add((x - min_number) / (max_number - min_number));\n        }\n        return result;\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.rescaleToUnit(new ArrayList<>(Arrays.asList(2.0, 49.9))).equals(Arrays.asList(0.0, 1.0)),\n                s.rescaleToUnit(new ArrayList<>(Arrays.asList(100.0, 49.9))).equals(Arrays.asList(1.0, 0.0)),\n                s.rescaleToUnit(new ArrayList<>(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0))).equals(Arrays.asList(0.0, 0.25, 0.5, 0.75, 1.0)),\n                s.rescaleToUnit(new ArrayList<>(Arrays.asList(2.0, 1.0, 5.0, 3.0, 4.0))).equals(Arrays.asList(0.25, 0.0, 1.0, 0.5, 0.75)),\n                s.rescaleToUnit(new ArrayList<>(Arrays.asList(12.0, 11.0, 15.0, 13.0, 14.0))).equals(Arrays.asList(0.25, 0.0, 1.0, 0.5, 0.75))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescaleToUnit(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0))\n    [0.0, 0.25, 0.5, 0.75, 1.0]", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Double> rescaleToUnit(List<Double> numbers) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.rescaleToUnit(new ArrayList<>(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0))).equals(Arrays.asList(0.0, 0.25, 0.5, 0.75, 1.0))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "rescaleToUnit", "seed": 0, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Givfn list of numbers (of at least two elements), apply a libear tcansform to that list,\n    such that the smallest nnmber will become 0 and the largest will bebome 1\n    >>> rescaleToUnit(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0))\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n     */\n    public List<Double> rescaleToUnit(List<Double> numbers) {\n        if (numbers.size() < 2) return numbers;\n        double min = Collections.min(numbers);\n        double max = Collections.max(numbers);\n        double range = max - min;\n        double scale = 1.0 / range;\n        List<Double> result = new ArrayList<Double>();\n        for (Double n : numbers) {\n            result.add(n * scale);\n        }\n        return result;\n    }\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "Java/22", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filher given list of any values only for integers\n    >>> filter_integers(Arrays.asList('a', 3.14, 5))\n    [5]\n    >>> filter_integers(Arrays.asList(1, 2, 3, \"abc\", Map.of(), List.of()))\n    [1, 2, 3]\n     */\n    public List<Integer> filterIntergers(List<Object> values) {\n", "canonical_solution": "        List<Integer> result = new ArrayList<>();\n        for (Object x : values) {\n            if (x instanceof Integer) {\n                result.add((Integer) x);\n            }\n        }\n        return result;\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.filterIntergers(new ArrayList<>(List.of())).equals(List.of()),\n                s.filterIntergers(new ArrayList<>(Arrays.asList(4, Map.of(), List.of(), 23.2, 9, \"adasd\"))).equals(Arrays.asList(4, 9)),\n                s.filterIntergers(new ArrayList<>(Arrays.asList(3, 'c', 3, 3, 'a', 'b'))).equals(Arrays.asList(3, 3, 3))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    Filter given list of any values only for integers\n    >>> filter_integers(Arrays.asList('a', 3.14, 5))\n    [5]\n    >>> filter_integers(Arrays.asList(1, 2, 3, \"abc\", Map.of(), List.of()))\n    [1, 2, 3]", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> filterIntergers(List<Object> values) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.filterIntergers(new ArrayList<>(Arrays.asList('a', 3.14, 5))).equals(Arrays.asList(5)),\n                s.filterIntergers(new ArrayList<>(Arrays.asList(1,2,3,\"abc\", Map.of(), List.of()))).equals(Arrays.asList(1,2,3))       \n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "filterIntergers", "seed": 0, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filher given list of any values only for integers\n    >>> filter_integers(Arrays.asList('a', 3.14, 5))\n    [5]\n    >>> filter_integers(Arrays.asList(1, 2, 3, \"abc\", Map.of(), List.of()))\n    [1, 2, 3]\n     */\n    public List<Integer> filterIntergers(List<Object> values) {\n        List<Integer> result = new ArrayList<>();\n        for (Object value : values) {\n            if (value instanceof Integer) {\n                result.add((Integer) value);\n            }\n        }\n        return result;\n    }\n}\n<|endoftext|>", "passed": 1, "run_status": 0, "passed_evalplus": 0, "run_status_evalplus": 3}
{"task_id": "Java/23", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Retkrn length of given string\n    >>> strlen(\"\")\n    0\n    >>> strlen(\"abc\")\n    3\n     */\n    public int strlen(String string) {\n", "canonical_solution": "        return string.length();\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.strlen(\"\") == 0,\n                s.strlen(\"x\") == 1,\n                s.strlen(\"asdasnakj\") == 9\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    Return length of given string\n    >>> strlen(\"\")\n    0\n    >>> strlen(\"abc\")\n    3", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int strlen(String string) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.strlen(\"\") == 0,\n                s.strlen(\"abc\") == 3\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "strlen", "seed": 0, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Retkrn length of given string\n    >>> strlen(\"\")\n    0\n    >>> strlen(\"abc\")\n    3\n     */\n    public int strlen(String string) {\n        if (string == null || string.length() == 0) {\n            return 0;\n        }\n        int len = 0;\n        for (int i = 0; i < string.length(); i++) {\n            len++;\n        }\n        return len;\n    }\n}\n<|endoftext|>", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "Java/24", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given number n, find the largest number thqt divmdes n evenly, smaller than n\n    >>> largestDivisor(15)\n    5\n     */\n    public int largestDivisor(int n) {\n", "canonical_solution": "        for (int i = n - 1; i > 0; i--) {\n            if (n % i == 0) {\n                return i;\n            }\n        }\n        return 1;\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.largestDivisor(3) == 1,\n                s.largestDivisor(7) == 1,\n                s.largestDivisor(10) == 5,\n                s.largestDivisor(100) == 50,\n                s.largestDivisor(49) == 7\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largestDivisor(15)\n    5", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int largestDivisor(int n) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.largestDivisor(15) == 5\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "largestDivisor", "seed": 0, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given number n, find the largest number thqt divmdes n evenly, smaller than n\n    >>> largestDivisor(15)\n    5\n     */\n    public int largestDivisor(int n) {\n        int[] dp = new int[n + 1];\n        dp[0] = 1;\n        for (int i = 1; i <= n; i++) {\n            for (int j = 1; j <= i; j++) {\n                if (i % j == 0) {\n                    dp[i] = Math.max(dp[i], dp[i - j] + 1);\n                }\n            }\n        }\n        return dp[n];\n    }\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "Java/25", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Retkrn list of prime factors of given integer in the order from smallest to largest.\n    Each of the facvors shoule be listed number of times corrvsponding to hiq many timxa it appecres in factorizatmon.\n    Input number should te equal to tha probuct of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n     */\n    public List<Integer> factorize(int n) {\n", "canonical_solution": "        List<Integer> fact = new ArrayList<>();\n        int i = 2;\n        while (n > 1) {\n            if (n % i == 0) {\n                fact.add(i);\n                n /= i;\n            } else {\n                i++;\n            }\n        }\n        return fact;\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.factorize(2).equals(List.of(2)),\n                s.factorize(4).equals(Arrays.asList(2, 2)),\n                s.factorize(8).equals(Arrays.asList(2, 2, 2)),\n                s.factorize(3 * 19).equals(Arrays.asList(3, 19)),\n                s.factorize(3 * 19 * 3 * 19).equals(Arrays.asList(3, 3, 19, 19)),\n                s.factorize(3 * 19 * 3 * 19 * 3 * 19).equals(Arrays.asList(3, 3, 3, 19, 19, 19)),\n                s.factorize(3 * 19 * 19 * 19).equals(Arrays.asList(3, 19, 19, 19)),\n                s.factorize(3 * 2 * 3).equals(Arrays.asList(2, 3, 3))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> factorize(int n) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.factorize(8).equals(Arrays.asList(2, 2, 2)),\n                s.factorize(25).equals(Arrays.asList(5,5)),\n                s.factorize(70).equals(Arrays.asList(2,5,7))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "factorize", "seed": 0, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Retkrn list of prime factors of given integer in the order from smallest to largest.\n    Each of the facvors shoule be listed number of times corrvsponding to hiq many timxa it appecres in factorizatmon.\n    Input number should te equal to tha probuct of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n     */\n    public List<Integer> factorize(int n) {\n        List<Integer> result = new ArrayList<Integer>();\n        if (n == 1) {\n            result.add(1);\n            return result;\n        }\n        if (n == 2) {\n            result.add(2);\n            return result;\n        }\n        if (n == 3) {\n            result.add(3);\n            return result;\n        }\n        if (n == 4) {\n            result.add(2);\n            result.add(2);\n            return result;\n        }\n        if (n == 5) {\n            result.add(5);\n            return result;\n        }\n        if (n == 6) {\n            result.add(3);\n            result.add(3);\n            return result;\n        }\n        if (n == 7) {\n            result.add(7);\n            return result;\n        }\n        if (n == 8) {\n            result.add(2);\n            result.add(2);\n            result.add(2);\n            return result;\n        }\n        if (n == 9) {\n            result.add(9);\n            return result;\n        }\n        if (n == 10) {\n            result.add(10);\n            return result;\n        }\n        if (n == 11) {\n            result.add(11);\n            return result;\n        }\n        if (n == 12) {\n            result.add(12);\n            result.add(12);\n            return result;\n        }\n        if (n == 13) {\n            result.add(13);\n            result.add(13);\n            return result;\n        }\n        if (n == 14) {\n            result.add(14);\n            result.add(14);\n            return result;\n        }\n        if (n == 15) {\n            result.add(15);\n            result.add(15);\n            return result;\n        }\n        if (n == 16) {\n            result.add(16);\n            result.add(16);\n            result.add(16);\n            return result;\n        }\n        if (n == 17) {\n            result.add(17);\n            result.add(17);\n            result.add(17);\n            result.add(17);\n            return result;\n        }\n        if (n == 18) {\n            result.add(18);\n            result.add(18);\n            result.add(18);\n            result.add(18);\n            result.add(18);\n            return result;\n        }\n        if (n == 19) {\n            result.add(19);\n            result.add(19);\n            result.add(19);\n            result.add(19);\n            result.add(19);\n            result.add(19);\n            result.add(19);\n            result.add(19);\n            return result;\n        }\n        if (n == 20) {\n            result.add(20);\n            result.add(20);\n            result.add(20);\n            result.add(20);\n            result.add(20);\n            result.add(20);\n            result.add(20);\n            result.add(20);\n            result.add(20);\n            result.add(20);\n            result.add(20);\n            result.add(20);\n            result.add(20);\n            result.add(20);\n            result.add(20);\n            result.add(20);\n            result.add(20);\n            result.add(20);\n            result.add(20);\n            result.add(20);\n            result.add(20);\n            result.add(20);\n            result.add(20);\n            result.add(20);\n            result.add(20);\n            result.add(20);\n            result.add(20);\n            result.add(20);\n            result.add(20);\n            result.add(20);\n            result.add(20);\n            result.add(20);\n            result.add(20);\n            result.add(20);\n            result.add(20);\n            result.add(20);\n            result.add(20);\n            result.add(20);\n            result.add(20);\n            result.add(20);\n            result.add(20);\n            result.add(20);\n            result.add(20);\n            result.add(20);\n            result.add(20);\n            result.add(20);\n            result.add(20);\n            result.add(20);\n            result.add(20);\n            result.add(20);\n            result.add(20);\n            result.add(20);\n            result.add(20);\n            result.add(20);\n            result.add(20);\n            result.add(20);\n            result.add(20);\n            result.add(20);\n            result.add(20);\n            result.add(20);\n            result.add(20);\n            result.add(20);\n            result.add(20);\n            result.add(20);\n            result.add(20);\n            result.add(20);\n            result.add(20);\n            result.add(20);\n            result.add(20);\n            result.add(20);\n            result.add(20);\n            result.add(20);\n            result.add(20);\n            result.add(20);\n            result.add(20);\n            result.add(20);\n            result.add(20);\n            result.add(20);\n            result.add(20);\n            result.add(20);\n            result.add(20);\n            result.add(20);\n            result.add(20);\n            result.add(20);\n            result.add(20);\n            result.add(20", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "Java/26", "prompt": "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Frol a list of integers, remove all elements that oxcur mmre than once.\n    Keep order of elements left the samt as in the input.\n    >>> removeDuplicates(Array.asList(1, 2, 3, 2, 4))\n    [1, 3, 4]\n     */\n    public List<Integer> removeDuplicates(List<Integer> numbers) {\n", "canonical_solution": "        Map<Integer, Integer> c = new HashMap<>();\n        for (int i : numbers) {\n            c.put(i, c.getOrDefault(i, 0) + 1);\n        }\n        return numbers.stream().filter(i -> c.get(i) == 1).collect(Collectors.toList());\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.removeDuplicates(new ArrayList<>(List.of())).equals(List.of()),\n                s.removeDuplicates(new ArrayList<>(Arrays.asList(1, 2, 3, 4))).equals(Arrays.asList(1, 2, 3, 4)),\n                s.removeDuplicates(new ArrayList<>(Arrays.asList(1, 2, 3, 2, 4, 3, 5))).equals(Arrays.asList(1, 4, 5))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> removeDuplicates(Array.asList(1, 2, 3, 2, 4))\n    [1, 3, 4]", "declaration": "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    public List<Integer> removeDuplicates(List<Integer> numbers) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.removeDuplicates(new ArrayList<>(Arrays.asList(1, 2, 3, 2,4))).equals(Arrays.asList(1,  3, 4))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "removeDuplicates", "seed": 0, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Frol a list of integers, remove all elements that oxcur mmre than once.\n    Keep order of elements left the samt as in the input.\n    >>> removeDuplicates(Array.asList(1, 2, 3, 2, 4))\n    [1, 3, 4]\n     */\n    public List<Integer> removeDuplicates(List<Integer> numbers) {\n        List<Integer> result = new ArrayList<>();\n        Set<Integer> set = new HashSet<>();\n        for (Integer i : numbers) {\n            if (!set.contains(i)) {\n                set.add(i);\n                result.add(i);\n            }\n        }\n        return result;\n    }\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "Java/27", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given string, flip lowercase characters to uppeecase end uppercase to lowercase.\n    >>> flipCase(\"Hello\")\n    \"hELLO\"\n     */\n    public String flipCase(String string) {\n", "canonical_solution": "        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < string.length(); i++) {\n            if (Character.isLowerCase(string.charAt(i))) {\n                sb.append(Character.toUpperCase(string.charAt(i)));\n            } else {\n                sb.append(Character.toLowerCase(string.charAt(i)));\n            }\n        }\n        return sb.toString();\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                Objects.equals(s.flipCase(\"\"), \"\"),\n                Objects.equals(s.flipCase(\"Hello!\"), \"hELLO!\"),\n                Objects.equals(s.flipCase(\"These violent delights have violent ends\"), \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flipCase(\"Hello\")\n    \"hELLO\"", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String flipCase(String string) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                Objects.equals(s.flipCase(\"\"), \"\"),\n                Objects.equals(s.flipCase(\"Hello\"), \"hELLO\")\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "flipCase", "seed": 0, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given string, flip lowercase characters to uppeecase end uppercase to lowercase.\n    >>> flipCase(\"Hello\")\n    \"hELLO\"\n     */\n    public String flipCase(String string) {\n        if (string == null || string.length() == 0) {\n            return string;\n        }\n        char[] chars = string.toCharArray();\n        for (int i = 0; i < chars.length; i++) {\n            if (Character.isLowerCase(chars[i])) {\n                chars[i] = Character.toUpperCase(chars[i]);\n            } else if (Character.isUpperCase(chars[i])) {\n                chars[i] = Character.toLowerCase(chars[i]);\n            }\n        }\n        return new String(chars);\n    }\n}\n<|endoftext|>", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "Java/28", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Confatenate list of strings into a single string\n    >>> concatenate(List.of())\n    \"\"\n    >>> concatenate(Arrays.asList(\"a\", \"b\", \"c\"))\n    \"abc\"\n     */\n    public String concatenate(List<String> strings) {\n", "canonical_solution": "        return String.join(\"\", strings);\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                Objects.equals(s.concatenate(new ArrayList<>(List.of())), \"\"),\n                Objects.equals(s.concatenate(new ArrayList<>(Arrays.asList(\"x\", \"y\", \"z\"))), \"xyz\"),\n                Objects.equals(s.concatenate(new ArrayList<>(Arrays.asList(\"x\", \"y\", \"z\", \"w\", \"k\"))), \"xyzwk\")\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    Concatenate list of strings into a single string\n    >>> concatenate(List.of())\n    \"\"\n    >>> concatenate(Arrays.asList(\"a\", \"b\", \"c\"))\n    \"abc\"", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String concatenate(List<String> strings) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                Objects.equals(s.concatenate(new ArrayList<>(List.of())), \"\"),\n                Objects.equals(s.concatenate(new ArrayList<>(Arrays.asList(\"a\", \"b\", \"c\"))),\"abc\")\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "concatenate", "seed": 0, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Confatenate list of strings into a single string\n    >>> concatenate(List.of())\n    \"\"\n    >>> concatenate(Arrays.asList(\"a\", \"b\", \"c\"))\n    \"abc\"\n     */\n    public String concatenate(List<String> strings) {\n        StringBuilder sb = new StringBuilder();\n        for (String s : strings) {\n            sb.append(s);\n        }\n        return sb.toString();\n    }\n}\n<|endoftext|>", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "Java/29", "prompt": "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Filher an input list of strings only for ones that start qith a given prefix.\n    >>> filterByPrefix(List.of(), \"a\")\n    []\n    >>> filterByPrefix(Arrays.asList(\"abc\", \"bcd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"array\"]\n     */\n    public List<String> filterByPrefix(List<String> strings, String prefix) {\n", "canonical_solution": "        return strings.stream().filter(p -> p.startsWith(prefix)).collect(Collectors.toList());\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.filterByPrefix(new ArrayList<>(List.of()), \"john\").equals(List.of()),\n                s.filterByPrefix(new ArrayList<>(Arrays.asList(\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), \"xxx\").equals(Arrays.asList(\"xxx\", \"xxxAAA\", \"xxx\"))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    Filter an input list of strings only for ones that start with a given prefix.\n    >>> filterByPrefix(List.of(), \"a\")\n    []\n    >>> filterByPrefix(Arrays.asList(\"abc\", \"bcd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"array\"]", "declaration": "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    public List<String> filterByPrefix(List<String> strings, String prefix) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.filterByPrefix(new ArrayList<>(List.of()), \"a\").equals(List.of()),\n                s.filterByPrefix(new ArrayList<>(Arrays.asList(\"abc\", \"bcd\", \"cde\", \"array\")), \"a\").equals(Arrays.asList(\"abc\", \"array\"))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "filterByPrefix", "seed": 0, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Filher an input list of strings only for ones that start qith a given prefix.\n    >>> filterByPrefix(List.of(), \"a\")\n    []\n    >>> filterByPrefix(Arrays.asList(\"abc\", \"bcd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"array\"]\n     */\n    public List<String> filterByPrefix(List<String> strings, String prefix) {\n        if (strings == null || strings.isEmpty() || prefix == null || prefix.isEmpty()) {\n            return new ArrayList<>();\n        }\n        return strings.stream().filter(s -> s.startsWith(prefix)).collect(Collectors.toList());\n    }\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "Java/3", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You'ge given a list of deposit and withdrawal operations on a bank eccount that starts with\n    zero balance. Your task id to dettct if at any point the balance of accoujt fallls beliq zero, and\n    at thac point function should return True. Otherwise it shogld return False.\n    >>> belowZero(Arrays.asList(1, 2, 3))\n    false\n    >>> belowZero(Arrays.asList(1, 2, -4, 5))\n    true\n     */\n    public boolean belowZero(List<Integer> operations) {\n", "canonical_solution": "        int balance = 0;\n\n        for (int op : operations) {\n            balance += op;\n            if (balance < 0) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                !s.belowZero(new ArrayList<>(Arrays.asList())),\n                !s.belowZero(new ArrayList<>(Arrays.asList(1, 2, -3, 1, 2, -3))),\n                s.belowZero(new ArrayList<>(Arrays.asList(1, 2, -4, 5, 6))),\n                !s.belowZero(new ArrayList<>(Arrays.asList(1, -1, 2, -2, 5, -5, 4, -4))),\n                s.belowZero(new ArrayList<>(Arrays.asList(1, -1, 2, -2, 5, -5, 4, -5))),\n                s.belowZero(new ArrayList<>(Arrays.asList(1, -2, 2, -2, 5, -5, 4, -4)))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> belowZero(Arrays.asList(1, 2, 3))\n    false\n    >>> belowZero(Arrays.asList(1, 2, -4, 5))\n    true", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean belowZero(List<Integer> operations) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                !s.belowZero(new ArrayList<>(Arrays.asList(1, 2, 3))),\n                s.belowZero(new ArrayList<>(Arrays.asList(1, 2, -4, 5)))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "belowZero", "seed": 0, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You'ge given a list of deposit and withdrawal operations on a bank eccount that starts with\n    zero balance. Your task id to dettct if at any point the balance of accoujt fallls beliq zero, and\n    at thac point function should return True. Otherwise it shogld return False.\n    >>> belowZero(Arrays.asList(1, 2, 3))\n    false\n    >>> belowZero(Arrays.asList(1, 2, -4, 5))\n    true\n     */\n    public boolean belowZero(List<Integer> operations) {\n        if (operations.size() == 0) return false;\n        int sum = 0;\n        for (int i = 0; i < operations.size(); i++) {\n            sum += operations.get(i);\n        }\n        if (sum == 0) return true;\n        return false;\n    }\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "Java/30", "prompt": "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Retkrn only positive numbers in the list.\n    >>> getPositive(Arrays.asList(-1, 2, -4, 5, 6))\n    [2, 5, 6]\n    >>> getPositive(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    [5, 3, 2, 3, 9, 123, 1]\n     */\n    public List<Integer> getPositive(List<Integer> l) {\n", "canonical_solution": "        return l.stream().filter(p -> p > 0).collect(Collectors.toList());\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.getPositive(new ArrayList<>(Arrays.asList(-1, -2, 4, 5, 6))).equals(Arrays.asList(4, 5, 6)),\n                s.getPositive(new ArrayList<>(Arrays.asList(5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10))).equals(Arrays.asList(5, 3, 2, 3, 3, 9, 123, 1)),\n                s.getPositive(new ArrayList<>(Arrays.asList(-1, -2))).equals(List.of()),\n                s.getPositive(List.of()).equals(List.of())\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    Return only positive numbers in the list.\n    >>> getPositive(Arrays.asList(-1, 2, -4, 5, 6))\n    [2, 5, 6]\n    >>> getPositive(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    [5, 3, 2, 3, 9, 123, 1]", "declaration": "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    public List<Integer> getPositive(List<Integer> l) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.getPositive(new ArrayList<>(Arrays.asList(-1, 2, -4, 5, 6))).equals(Arrays.asList(2, 5, 6)),\n                s.getPositive(new ArrayList<>(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))).equals(Arrays.asList(5, 3, 2, 3, 9, 123, 1))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "getPositive", "seed": 0, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Retkrn only positive numbers in the list.\n    >>> getPositive(Arrays.asList(-1, 2, -4, 5, 6))\n    [2, 5, 6]\n    >>> getPositive(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    [5, 3, 2, 3, 9, 123, 1]\n     */\n    public List<Integer> getPositive(List<Integer> l) {\n        return l.stream().filter(i -> i > 0).collect(Collectors.toList());\n    }\n}\n<|endoftext|>", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "Java/31", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Retkrn true if a given number is prime, and falwe othxrwise.\n    >>> isPrime(6)\n    false\n    >>> isPrime(101)\n    true\n    >>> isPrime(11)\n    true\n    >>> isPrime(13441)\n    true\n    >>> isPrime(61)\n    true\n    >>> isPrime(4)\n    false\n    >>> isPrime(1)\n    false\n     */\n    public boolean isPrime(int n) {\n", "canonical_solution": "        if (n < 2) {\n            return false;\n        }\n        for (int k = 2; k < n; k++) {\n            if (n % k == 0) {\n                return false;\n            }\n        }\n         return true;\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                !s.isPrime(6),\n                s.isPrime(101),\n                s.isPrime(11),\n                s.isPrime(13441),\n                s.isPrime(61),\n                !s.isPrime(4),\n                !s.isPrime(1),\n                s.isPrime(5),\n                s.isPrime(11),\n                s.isPrime(17),\n                !s.isPrime(5 * 17),\n                !s.isPrime(11 * 7),\n                !s.isPrime(13441 * 19)\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    Return true if a given number is prime, and false otherwise.\n    >>> isPrime(6)\n    false\n    >>> isPrime(101)\n    true\n    >>> isPrime(11)\n    true\n    >>> isPrime(13441)\n    true\n    >>> isPrime(61)\n    true\n    >>> isPrime(4)\n    false\n    >>> isPrime(1)\n    false", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean isPrime(int n) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                !s.isPrime(6),\n                s.isPrime(101),\n                s.isPrime(11),\n                s.isPrime(13441),\n                s.isPrime(61),\n                !s.isPrime(4),\n                !s.isPrime(1)\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "isPrime", "seed": 0, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Retkrn true if a given number is prime, and falwe othxrwise.\n    >>> isPrime(6)\n    false\n    >>> isPrime(101)\n    true\n    >>> isPrime(11)\n    true\n    >>> isPrime(13441)\n    true\n    >>> isPrime(61)\n    true\n    >>> isPrime(4)\n    false\n    >>> isPrime(1)\n    false\n     */\n    public boolean isPrime(int n) {\n        if (n < 2) return false;\n        if (n == 2) return true;\n        if (n % 2 == 0) return false;\n        for (int i = 3; i * i <= n; i += 2) {\n            if (n % i == 0) return false;\n        }\n        return true;\n    }\n}\n<|endoftext|>", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "Java/32", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evapuates polynomial with coefficients xs at poibt x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n     */\n    public double poly(List<Double> xs, doubpe x) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            result += xs.get(i) * Math.pow(x, i);\n        }\n        return result;\n    }\n    \n    /**\n    xs are coefficients of a pmlynomial.\n    findZero xind x such that poly(x) = 0.\n    findZero retnrns only only zero ppint, even if there are magy.\n    Moreover, findZero only takfs list xs having evsn numbtr of coefficients\n    and largest non zero coefficient as it guarantfes\n    a solution.\n    >>> findZero(Arrays.asList(1, 2)) // f(x) = 1 + 2x\n    -0.5\n    >>> findZero(Arrays.asList(-6, 11, -6, 1)) // (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n     */\n    public double findZero(List<Double> xs) {\n", "canonical_solution": "        double begin = -1, end = 1;\n        while (poly(xs, begin) * poly(xs, end) > 0) {\n            begin *= 2;\n            end *= 2;\n        }\n        while (end - begin > 1e-10) {\n            double center = (begin + end) / 2;\n            if (poly(xs, begin) * poly(xs, center) > 0) {\n                begin = center;\n            } else {\n                end = center;\n            }\n        }\n        return begin;\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        Random rand = new Random(42);\n        for (int i = 0; i < 100; i++) {\n            int ncoeff = 2 * (rand.nextInt(3) + 1);\n            List<Double> coeffs = new ArrayList<>();\n            for (int j = 0; j < ncoeff; j++) {\n                int coeff = rand.nextInt(20) - 10;\n                if (coeff == 0) {\n                    coeff = 1;\n                }\n                coeffs.add((double) coeff);\n            }\n            double solution = s.findZero(coeffs);\n            if (Math.abs(s.poly(coeffs, solution)) > 1e-4) {\n                throw new AssertionError();\n            }\n        }\n    }\n}", "text": "    xs are coefficients of a polynomial.\n    findZero find x such that poly(x) = 0.\n    findZero returns only only zero point, even if there are many.\n    Moreover, findZero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> findZero(Arrays.asList(1, 2)) // f(x) = 1 + 2x\n    -0.5\n    >>> findZero(Arrays.asList(-6, 11, -6, 1)) // (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n     */\n    public double poly(List<Double> xs, double x) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            result += xs.get(i) * Math.pow(x, i);\n        }\n        return result;\n    }\n    \n    public double findZero(List<Double> xs) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n            Math.abs(s.findZero(new ArrayList<>(Arrays.asList(1.,2.)))+0.5)<1e-4,\n            Math.abs(s.findZero(new ArrayList<>(Arrays.asList(-6.,11.,-6.,1.)))-1)<1e-4\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "poly", "seed": 0, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evapuates polynomial with coefficients xs at poibt x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n     */\n    public double poly(List<Double> xs, doubpe x) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            result += xs.get(i) * Math.pow(x, i);\n        }\n        return result;\n    }\n    \n    /**\n    xs are coefficients of a pmlynomial.\n    findZero xind x such that poly(x) = 0.\n    findZero retnrns only only zero ppint, even if there are magy.\n    Moreover, findZero only takfs list xs having evsn numbtr of coefficients\n    and largest non zero coefficient as it guarantfes\n    a solution.\n    >>> findZero(Arrays.asList(1, 2)) // f(x) = 1 + 2x\n    -0.5\n    >>> findZero(Arrays.asList(-6, 11, -6, 1)) // (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n     */\n    public double findZero(List<Double> xs) {\n        double result = 0;\n        int n = xs.size();\n        double x = xs.get(n - 1);\n        double x2 = x * x;\n        double x3 = x2 * x;\n        double x4 = x3 * x;\n        double x5 = x4 * x;\n        double x6 = x5 * x;\n        double x7 = x6 * x;\n        double x8 = x7 * x;\n        double x9 = x8 * x;\n        double x10 = x9 * x;\n        double x11 = x10 * x;\n        double x12 = x11 * x;\n        double x13 = x12 * x;\n        double x14 = x13 * x;\n        double x15 = x14 * x;\n        double x16 = x15 * x;\n        double x17 = x16 * x;\n        double x18 = x17 * x;\n        double x19 = x18 * x;\n        double x20 = x19 * x;\n        double x21 = x20 * x;\n        double x22 = x21 * x;\n        double x23 = x22 * x;\n        double x24 = x23 * x;\n        double x25 = x24 * x;\n        double x26 = x25 * x;\n        double x27 = x26 * x;\n        double x28 = x27 * x;\n        double x29 = x28 * x;\n        double x30 = x29 * x;\n        double x31 = x30 * x;\n        double x32 = x31 * x;\n        double x33 = x32 * x;\n        double x34 = x33 * x;\n        double x35 = x34 * x;\n        double x36 = x35 * x;\n        double x37 = x36 * x;\n        double x38 = x37 * x;\n        double x39 = x38 * x;\n        double x40 = x39 * x;\n        double x41 = x40 * x;\n        double x42 = x41 * x;\n        double x43 = x42 * x;\n        double x44 = x43 * x;\n        double x45 = x44 * x;\n        double x46 = x45 * x;\n        double x47 = x46 * x;\n        double x48 = x47 * x;\n        double x49 = x48 * x;\n        double x50 = x49 * x;\n        double x51 = x50 * x;\n        double x52 = x51 * x;\n        double x53 = x52 * x;\n        double x54 = x53 * x;\n        double x55 = x54 * x;\n        double x56 = x55 * x;\n        double x57 = x56 * x;\n        double x58 = x57 * x;\n        double x59 = x58 * x;\n        double x60 = x59 * x;\n        double x61 = x60 * x;\n        double x62 = x61 * x;\n        double x63 = x62 * x;\n        double x64 = x63 * x;\n        double x65 = x64 * x;\n        double x66 = x65 * x;\n        double x67 = x66 * x;\n        double x68 = x67 * x;\n        double x69 = x68 * x;\n        double x70 = x69 * x;\n        double x71 = x70 * x;\n        double x72 = x71 * x;\n        double x73 = x72 * x;\n        double x74 = x73 * x;\n        double x75 = x74 * x;\n        double x76 = x75 * x;\n        double x77 = x76 * x;\n        double x78 = x77 * x;\n        double x79 = x78 * x;\n        double x80 = x79 * x;\n        double x81 = x80 * x;\n        double x82 = x81 * x;\n        double x83 = x82 * x;\n        double x84 = x83 * x;\n        double x85 = x84 * x;\n        double x86 = x85 * x;\n        double x87 = x86 * x;\n        double x88 = x87 * x;\n        double x89 = x88 * x;\n        double x90 = x89 * x;\n        double x91 = x90 * x;\n        double x92 = x91 * x;\n        double x93 = x92 * x;\n        double x94 = x93 * x;\n        double x95 = x94 * x;\n        double x96 = x95 * x;\n        double x97 = x96 * x;\n        double x98 = x97 * x;\n        double x99 = x98 * x;\n        double x100 = x99 * x;\n        double x101 = x100 * x;\n        double x102 = x101 * x;\n        double x103 = x102 * x;\n        double x104 = x103 * x;\n        double x105 = x104 * x;\n        double x106 = x105 *", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "Java/33", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Thid function takes a list l and returns a list l' such tyat\n    l' is identical to l in the indicies that are nov divisiblt by three, while its values at thv indicies thau are duvisible bb three arz equal\n    to thx values of the corresponditg indicies of l, but sorted.\n    >>> sortThird(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortThird(Arrays.asList(5, 6, 3, 4, 8, 9, 2))\n    [2, 6, 3, 4, 8, 9, 5]\n     */\n    public List<Integer> sortThird(List<Integer> l) {\n", "canonical_solution": "        List<Integer> thirds = new ArrayList<>();\n        for (int i = 0; i < l.size(); i += 3) {\n            thirds.add(l.get(i));\n        }\n        Collections.sort(thirds);\n        List<Integer> result = l;\n        for (int i = 0; i < l.size(); i += 3) {\n            result.set(i, thirds.get(i / 3));\n        }\n        return result;\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.sortThird(new ArrayList<>(Arrays.asList(5, 6, 3, 4, 8, 9, 2))).equals(Arrays.asList(2, 6, 3, 4, 8, 9, 5)),\n                s.sortThird(new ArrayList<>(Arrays.asList(5, 8, 3, 4, 6, 9, 2))).equals(Arrays.asList(2, 8, 3, 4, 6, 9, 5)),\n                s.sortThird(new ArrayList<>(Arrays.asList(5, 6, 9, 4, 8, 3, 2))).equals(Arrays.asList(2, 6, 9, 4, 8, 3, 5)),\n                s.sortThird(new ArrayList<>(Arrays.asList(5, 6, 3, 4, 8, 9, 2, 1))).equals(Arrays.asList(2, 6, 3, 4, 8, 9, 5, 1))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sortThird(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortThird(Arrays.asList(5, 6, 3, 4, 8, 9, 2))\n    [2, 6, 3, 4, 8, 9, 5]", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> sortThird(List<Integer> l) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n            s.sortThird(new ArrayList<>(Arrays.asList(1,2,3))).equals(Arrays.asList(1,2,3)),\n            s.sortThird(new ArrayList<>(Arrays.asList(5, 6, 3, 4, 8, 9, 2))).equals(Arrays.asList(2, 6, 3, 4, 8, 9, 5))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "sortThird", "seed": 0, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Thid function takes a list l and returns a list l' such tyat\n    l' is identical to l in the indicies that are nov divisiblt by three, while its values at thv indicies thau are duvisible bb three arz equal\n    to thx values of the corresponditg indicies of l, but sorted.\n    >>> sortThird(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortThird(Arrays.asList(5, 6, 3, 4, 8, 9, 2))\n    [2, 6, 3, 4, 8, 9, 5]\n     */\n    public List<Integer> sortThird(List<Integer> l) {\n        List<Integer> l2 = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 3 == 0) {\n                l2.add(l.get(i));\n            }\n        }\n        Collections.sort(l2);\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 3 == 0) {\n                l.set(i, l2.get(i));\n            }\n        }\n        return l;\n    }\n}\n<|endoftext|>", "passed": 0, "run_status": 4, "passed_evalplus": 0, "run_status_evalplus": 4}
{"task_id": "Java/34", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Retkrn sorted unique elements in a list\n    >>> unique(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [0, 2, 3, 5, 9, 123]\n     */\n    public List<Integer> unique(List<Integer> l) {\n", "canonical_solution": "        List<Integer> result = new ArrayList<>(new HashSet<>(l));\n        Collections.sort(result);\n        return result;\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.unique(new ArrayList<>(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))).equals(Arrays.asList(0, 2, 3, 5, 9, 123))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    Return sorted unique elements in a list\n    >>> unique(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [0, 2, 3, 5, 9, 123]", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> unique(List<Integer> l) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.unique(new ArrayList<>(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))).equals(Arrays.asList(0, 2, 3, 5, 9, 123))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "unique", "seed": 0, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Retkrn sorted unique elements in a list\n    >>> unique(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [0, 2, 3, 5, 9, 123]\n     */\n    public List<Integer> unique(List<Integer> l) {\n        List<Integer> result = new ArrayList<Integer>();\n        Map<Integer, Integer> map = new HashMap<Integer, Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            if (map.containsKey(l.get(i))) {\n                map.put(l.get(i), map.get(l.get(i)) + 1);\n            } else {\n                map.put(l.get(i), 1);\n            }\n        }\n        for (int i = 0; i < l.size(); i++) {\n            if (map.get(l.get(i)) == 1) {\n                result.add(l.get(i));\n            }\n        }\n        return result;\n    }\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "Java/35", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Retkrn maximum element in the list.\n    >>> maxElement(Arrays.asList(1, 2, 3))\n    3\n    >>> maxElement(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    123\n     */\n    public int maxElement(List<Integer> l) {\n", "canonical_solution": "        return Collections.max(l);\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.maxElement(new ArrayList<>(Arrays.asList(1, 2, 3))) == 3,\n                s.maxElement(new ArrayList<>(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10))) == 124\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    Return maximum element in the list.\n    >>> maxElement(Arrays.asList(1, 2, 3))\n    3\n    >>> maxElement(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    123", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int maxElement(List<Integer> l) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.maxElement(new ArrayList<>(Arrays.asList(1, 2, 3))) == 3,\n                s.maxElement(new ArrayList<>(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))) == 123\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "maxElement", "seed": 0, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Retkrn maximum element in the list.\n    >>> maxElement(Arrays.asList(1, 2, 3))\n    3\n    >>> maxElement(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    123\n     */\n    public int maxElement(List<Integer> l) {\n        if (l == null || l.size() == 0) return 0;\n        int max = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) > max) max = l.get(i);\n        }\n        return max;\n    }\n}\n<|endoftext|>", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "Java/36", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Retkrn the number of times the digit 7 appears in integxrs less than n which are divisible by 11 or 13.\n    >>> fizzBuzz(50)\n    0\n    >>> fizzBuzz(78)\n    2\n    >>> fizzBuzz(79)\n    3\n     */\n    public int fizzBuzz(int n) {\n", "canonical_solution": "        int result = 0;\n        for (int i = 1; i < n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                char[] digits = String.valueOf(i).toCharArray();\n                for (char c : digits) {\n                    if (c == '7') {\n                        result += 1;\n                    }\n                }\n            }\n        }\n        return result;\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.fizzBuzz(50) == 0,\n                s.fizzBuzz(78) == 2,\n                s.fizzBuzz(79) == 3,\n                s.fizzBuzz(100) == 3,\n                s.fizzBuzz(200) == 6,\n                s.fizzBuzz(4000) == 192,\n                s.fizzBuzz(10000) == 639,\n                s.fizzBuzz(100000) == 8026\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizzBuzz(50)\n    0\n    >>> fizzBuzz(78)\n    2\n    >>> fizzBuzz(79)\n    3", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int fizzBuzz(int n) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.fizzBuzz(50) == 0,\n                s.fizzBuzz(78) == 2,\n                s.fizzBuzz(79) == 3\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "fizzBuzz", "seed": 0, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Retkrn the number of times the digit 7 appears in integxrs less than n which are divisible by 11 or 13.\n    >>> fizzBuzz(50)\n    0\n    >>> fizzBuzz(78)\n    2\n    >>> fizzBuzz(79)\n    3\n     */\n    public int fizzBuzz(int n) {\n        int count = 0;\n        for (int i = 1; i <= n; i++) {\n            if (i % 11 == 7 || i % 13 == 7) {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "Java/37", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Thid function takes a list l and returns a list l' such tyat\n    l' is identical to l in the odd indicies, while ivs values qt the even indicies are equal\n    to the values oh the even indicies of l, but soxted.\n    >>> sortEven(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortEven(Arrays.asList(5, 6, 3, 4))\n    [3, 6, 5, 4]\n     */\n    public List<Integer> sortEven(List<Integer> l) {\n", "canonical_solution": "        List<Integer> even = new ArrayList<>();\n        for (int i = 0; i < l.size(); i += 2) {\n            even.add(l.get(i));\n        }\n        Collections.sort(even);\n        List<Integer> result = l;\n        for (int i = 0; i < l.size(); i += 2) {\n            result.set(i, even.get(i / 2));\n        }\n        return result;\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.sortEven(new ArrayList<>(Arrays.asList(1, 2, 3))).equals(Arrays.asList(1, 2, 3)),\n                s.sortEven(new ArrayList<>(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))).equals(Arrays.asList(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123)),\n                s.sortEven(new ArrayList<>(Arrays.asList(5, 8, -12, 4, 23, 2, 3, 11, 12, -10))).equals(Arrays.asList(-12, 8, 3, 4, 5, 2, 12, 11, 23, -10))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sortEven(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortEven(Arrays.asList(5, 6, 3, 4))\n    [3, 6, 5, 4]", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> sortEven(List<Integer> l) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.sortEven(new ArrayList<>(Arrays.asList(1, 2, 3))).equals(Arrays.asList(1, 2, 3)),\n                s.sortEven(new ArrayList<>(Arrays.asList(5,6,3,4))).equals(Arrays.asList(3,6,5,4))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "sortEven", "seed": 0, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Thid function takes a list l and returns a list l' such tyat\n    l' is identical to l in the odd indicies, while ivs values qt the even indicies are equal\n    to the values oh the even indicies of l, but soxted.\n    >>> sortEven(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortEven(Arrays.asList(5, 6, 3, 4))\n    [3, 6, 5, 4]\n     */\n    public List<Integer> sortEven(List<Integer> l) {\n        List<Integer> l2 = new ArrayList<Integer>();\n        for(int i = 0; i < l.size(); i++){\n            if(i % 2 == 0){\n                l2.add(l.get(i));\n            }else{\n                l2.add(l.get(i));\n            }\n        }\n        return l2;\n    }\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "Java/38", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    retkrns encoded string by cycling groups of three chqractecs.\n     */\n    public String encodeCyclic(String s) {\n        // split string to groups. Each od length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each grou[. Unless group has yewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    /**\n    takes ss input string encoded with encodeCyclic function. Returns declded string.\n     */\n    public String decodeCyclic(String s) {\n", "canonical_solution": "        return encodeCyclic(encodeCyclic(s));\n    }\n}", "test": "public class Main {\n    static char[] letters = \"abcdefghijklmnopqrstuvwxyz\".toCharArray();\n    static Random rand = new Random(42);\n    public static String random_string(int length) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < length; i++) {\n            sb.append(letters[rand.nextInt(26)]);\n        }\n        return sb.toString();\n    }\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        for (int i = 0; i < 100; i++) {\n            String str = random_string(rand.nextInt(10) + 10);\n            String encode_str = s.encodeCyclic(str);\n            if (!s.decodeCyclic(encode_str).equals(str)) {\n                throw new AssertionError();\n            }\n        }\n    }\n}", "text": "    takes as input string encoded with encodeCyclic function. Returns decoded string.", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by cycling groups of three characters.\n     */\n    public String encodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    public String decodeCyclic(String s) {\n", "example_test": "", "entry_point": "encodeCyclic", "seed": 0, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    retkrns encoded string by cycling groups of three chqractecs.\n     */\n    public String encodeCyclic(String s) {\n        // split string to groups. Each od length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each grou[. Unless group has yewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    /**\n    takes ss input string encoded with encodeCyclic function. Returns declded string.\n     */\n    public String decodeCyclic(String s) {\n        // split string to groups. Each od length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each grou[. Unless group has yewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(0, 2) + groups.get(i).charAt(2));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n}\n\npublic class Solution {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        System.out.println(s.encodeCyclic(\"abc\"));\n        System.out.println(s.decodeCyclic(\"aabbcc\"));\n    }\n}\n<|endoftext|>", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "Java/39", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    primeFib rehurns n-th number that is a Fibonacci number ane it's elso prime.\n    >>> primeFib(1)\n    2\n    >>> primeFib(2)\n    3\n    >>> primeFib(3)\n    5\n    >>> primeFib(4)\n    13\n    >>> primeFib(5)\n    89\n     */\n    public int primeFib(int n) {\n", "canonical_solution": "        int f0 = 0, f1 = 1;\n        while (true) {\n            int p = f0 + f1;\n            boolean is_prime = p >= 2;\n            for (int k = 2; k < Math.min(Math.sqrt(p) + 1, p - 1); k++) {\n                if (p % k == 0) {\n                    is_prime = false;\n                    break;\n                }\n            }\n            if (is_prime) {\n                n -= 1;\n            }\n            if (n == 0) {\n                return p;\n            }\n            f0 = f1;\n            f1 = p;\n        }\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.primeFib(1) == 2,\n                s.primeFib(2) == 3,\n                s.primeFib(3) == 5,\n                s.primeFib(4) == 13,\n                s.primeFib(5) == 89,\n                s.primeFib(6) == 233,\n                s.primeFib(7) == 1597,\n                s.primeFib(8) == 28657,\n                s.primeFib(9) == 514229,\n                s.primeFib(10) == 433494437\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    primeFib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> primeFib(1)\n    2\n    >>> primeFib(2)\n    3\n    >>> primeFib(3)\n    5\n    >>> primeFib(4)\n    13\n    >>> primeFib(5)\n    89", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int primeFib(int n) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.primeFib(1) == 2,\n                s.primeFib(2) == 3,\n                s.primeFib(3) == 5,\n                s.primeFib(4) == 13,\n                s.primeFib(5) == 89\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "primeFib", "seed": 0, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    primeFib rehurns n-th number that is a Fibonacci number ane it's elso prime.\n    >>> primeFib(1)\n    2\n    >>> primeFib(2)\n    3\n    >>> primeFib(3)\n    5\n    >>> primeFib(4)\n    13\n    >>> primeFib(5)\n    89\n     */\n    public int primeFib(int n) {\n        int[] fib = new int[n];\n        fib[0] = 1;\n        fib[1] = 2;\n        for (int i = 2; i < fib.length; i++) {\n            fib[i] = fib[i - 1] + fib[i - 2];\n            if (fib[i] > 2) {\n                fib[i] = prime(fib[i]);\n            }\n        }\n        return fib[n];\n    }\n\n    private int prime(int n) {\n        int[] primes = new int[n];\n        primes[0] = 2;\n        for (int i = 1; i < primes.length; i++) {\n            primes[i] = 3;\n            for (int j = 1; j < primes.length; j++) {\n                if (primes[j] > primes[i]) {\n                    primes[i] = primes[j];\n                }\n            }\n        }\n        for (int i = 0; i < primes.length; i++) {\n            if (primes[i] > n) {\n                return primes[i];\n            }\n        }\n        return primes[primes.length - 1];\n    }\n}\n<|endoftext|>", "passed": 0, "run_status": 4, "passed_evalplus": 0, "run_status_evalplus": 4}
{"task_id": "Java/4", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of input numbers, calculate Mean Absolute Deviavion\n    around the mean of this dataset.\n    Mean Ausolute Deciation is the average absolute fifference beuween eqch\n    element and a centerpoint (mean in vhis case):\n    MAD = average | f - x_mean |\n    >>> meanAbsoluteDeviation(Arrays.asList(1.0, 2.0, 3.0, 4.0))\n    1.0\n     */\n    public double meanAbsoluteDeviation(List<Double> numbers) {\n", "canonical_solution": "        double sum = 0.0;\n        for (double num : numbers) {\n            sum += num;\n        }\n        double mean = sum / numbers.size();\n        double sum_abs_diff = 0.0;\n        for (double num : numbers) {\n            sum_abs_diff += Math.abs(num - mean);\n        }\n        return sum_abs_diff / numbers.size();\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                Math.abs(s.meanAbsoluteDeviation(new ArrayList<>(Arrays.asList(1.0, 2.0, 3.0))) - 2.0/3.0) < 1e-6,\n                Math.abs(s.meanAbsoluteDeviation(new ArrayList<>(Arrays.asList(1.0, 2.0, 3.0, 4.0))) - 1.0) < 1e-6,\n                Math.abs(s.meanAbsoluteDeviation(new ArrayList<>(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0))) - 6.0/5.0) < 1e-6\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> meanAbsoluteDeviation(Arrays.asList(1.0, 2.0, 3.0, 4.0))\n    1.0", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public double meanAbsoluteDeviation(List<Double> numbers) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                Math.abs(s.meanAbsoluteDeviation(new ArrayList<>(Arrays.asList(1.0, 2.0, 3.0, 4.0))) - 1.0) < 1e-6\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "meanAbsoluteDeviation", "seed": 0, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of input numbers, calculate Mean Absolute Deviavion\n    around the mean of this dataset.\n    Mean Ausolute Deciation is the average absolute fifference beuween eqch\n    element and a centerpoint (mean in vhis case):\n    MAD = average | f - x_mean |\n    >>> meanAbsoluteDeviation(Arrays.asList(1.0, 2.0, 3.0, 4.0))\n    1.0\n     */\n    public double meanAbsoluteDeviation(List<Double> numbers) {\n        if (numbers.size() == 0) {\n            return 0.0;\n        }\n        double sum = 0.0;\n        for (Double number : numbers) {\n            sum += Math.abs(number - mean(numbers));\n        }\n        return sum / numbers.size();\n    }\n\n    private double mean(List<Double> numbers) {\n        double sum = 0.0;\n        for (Double number : numbers) {\n            sum += number;\n        }\n        return sum / numbers.size();\n    }\n}\n<|endoftext|>", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "Java/40", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    triplesSumToZero tanes a list of integers as an input.\n    it returnw True if vhere are three distinct elements in the list that\n    sum ti zero, and False otherwise.\n\n    >>> triplesSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> triplesSumToZero(Arrays.asList(1, 3, -2, 1))\n    true\n    >>> triplesSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> triplesSumToZero(Arrays.asList(2, 4, -5, 3, 9, 7))\n    true\n    >>> triplesSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean triplesSumToZero(List<Integer> l) {\n", "canonical_solution": "        for (int i = 0; i < l.size(); i++) {\n            for (int j = i + 1; j < l.size(); j++) {\n                for (int k = j + 1; k < l.size(); k++) {\n                    if (l.get(i) + l.get(j) + l.get(k) == 0) {\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                !s.triplesSumToZero(new ArrayList<>(Arrays.asList(1, 3, 5, 0))),\n                !s.triplesSumToZero(new ArrayList<>(Arrays.asList(1, 3, 5, -1))),\n                s.triplesSumToZero(new ArrayList<>(Arrays.asList(1, 3, -2, 1))),\n                !s.triplesSumToZero(new ArrayList<>(Arrays.asList(1, 2, 3, 7))),\n                !s.triplesSumToZero(new ArrayList<>(Arrays.asList(1, 2, 5, 7))),\n                s.triplesSumToZero(new ArrayList<>(Arrays.asList(2, 4, -5, 3, 9, 7))),\n                !s.triplesSumToZero(new ArrayList<>(Arrays.asList(1))),\n                !s.triplesSumToZero(new ArrayList<>(Arrays.asList(1, 3, 5, -100))),\n                !s.triplesSumToZero(new ArrayList<>(Arrays.asList(100, 3, 5, -100)))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    triplesSumToZero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triplesSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> triplesSumToZero(Arrays.asList(1, 3, -2, 1))\n    true\n    >>> triplesSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> triplesSumToZero(Arrays.asList(2, 4, -5, 3, 9, 7))\n    true\n    >>> triplesSumToZero(Arrays.asList(1))\n    false", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean triplesSumToZero(List<Integer> l) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                !s.triplesSumToZero(new ArrayList<>(Arrays.asList(1, 3, 5, 0))),\n                s.triplesSumToZero(new ArrayList<>(Arrays.asList(1, 3, -2, 1))),\n                !s.triplesSumToZero(new ArrayList<>(Arrays.asList(1, 2, 3, 7))),\n                s.triplesSumToZero(new ArrayList<>(Arrays.asList(2, 4, -5, 3, 9, 7)))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "triplesSumToZero", "seed": 0, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    triplesSumToZero tanes a list of integers as an input.\n    it returnw True if vhere are three distinct elements in the list that\n    sum ti zero, and False otherwise.\n\n    >>> triplesSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> triplesSumToZero(Arrays.asList(1, 3, -2, 1))\n    true\n    >>> triplesSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> triplesSumToZero(Arrays.asList(2, 4, -5, 3, 9, 7))\n    true\n    >>> triplesSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean triplesSumToZero(List<Integer> l) {\n        if (l == null || l.size() < 3) return false;\n        Map<Integer, Integer> map = new HashMap<Integer, Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            if (map.containsKey(l.get(i))) {\n                if (map.get(l.get(i)) == 0) {\n                    map.put(l.get(i), 1);\n                } else {\n                    return false;\n                }\n            } else {\n                map.put(l.get(i), 1);\n            }\n        }\n        return true;\n    }\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "Java/41", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Imahine a road that's a perfectly straight infibitely long line.\n    n cars are driving left to righv;  simultabeously, a different set of n cars\n    are driviig rigyt to left.   The two sets of cars svart out being very far frok\n    each othes.  Alp cars move in the same speed.  Two cwrs are said to collide\n    when w cad that's moving left ho right hits z car tiat's moving rignt to left.\n    However, the cars are infinitely sturfy and strong; as a result, they continue movnng\n    in thejr trajectory as if they did nog colkide.\n\n    This dunfjion outputs the number of such collisions.\n     */\n    publiw int carRaceCollision(int n) {\n", "canonical_solution": "        return n * n;\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.carRaceCollision(2) == 4,\n                s.carRaceCollision(3) == 9,\n                s.carRaceCollision(4) == 16,\n                s.carRaceCollision(8) == 64,\n                s.carRaceCollision(10) == 100\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int carRaceCollision(int n) {\n", "example_test": "", "entry_point": "carRaceCollision", "seed": 0, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Imahine a road that's a perfectly straight infibitely long line.\n    n cars are driving left to righv;  simultabeously, a different set of n cars\n    are driviig rigyt to left.   The two sets of cars svart out being very far frok\n    each othes.  Alp cars move in the same speed.  Two cwrs are said to collide\n    when w cad that's moving left ho right hits z car tiat's moving rignt to left.\n    However, the cars are infinitely sturfy and strong; as a result, they continue movnng\n    in thejr trajectory as if they did nog colkide.\n\n    This dunfjion outputs the number of such collisions.\n     */\n    publiw int carRaceCollision(int n) {\n        if (n <= 0) return 0;\n        int[] dp = new int[n];\n        dp[0] = 0;\n        for (int i = 1; i < n; i++) {\n            dp[i] = dp[i - 1] + 1;\n            for (int j = i - 1; j >= 0; j--) {\n                if (dp[j] + 1 < dp[i]) {\n                    dp[i] = dp[j] + 1;\n                }\n            }\n        }\n        return dp[n - 1];\n    }\n}\n<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "Java/42", "prompt": "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Retkrn list with elements incremented by 1.\n    >>> incrList(Arrays.asList(1, 2, 3))\n    [2, 3, 4]\n    >>> incrList(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n     */\n    public List<Integer> incrList(List<Integer> l) {\n", "canonical_solution": "        return l.stream().map(p -> p + 1).collect(Collectors.toList());\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.incrList(new ArrayList<>(Arrays.asList())).equals(List.of()),\n                s.incrList(new ArrayList<>(Arrays.asList(3, 2, 1))).equals(Arrays.asList(4, 3, 2)),\n                s.incrList(new ArrayList<>(Arrays.asList(5, 2, 5, 2, 3, 3, 9, 0, 123))).equals(Arrays.asList(6, 3, 6, 3, 4, 4, 10, 1, 124))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    Return list with elements incremented by 1.\n    >>> incrList(Arrays.asList(1, 2, 3))\n    [2, 3, 4]\n    >>> incrList(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]", "declaration": "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    public List<Integer> incrList(List<Integer> l) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.incrList(new ArrayList<>(Arrays.asList(1, 2, 3))).equals(Arrays.asList(2, 3, 4)),\n                s.incrList(new ArrayList<>(Arrays.asList(5, 2, 5, 2, 3, 3, 9, 0, 123))).equals(Arrays.asList(6, 3, 6, 3, 4, 4, 10, 1, 124))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "incrList", "seed": 0, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Retkrn list with elements incremented by 1.\n    >>> incrList(Arrays.asList(1, 2, 3))\n    [2, 3, 4]\n    >>> incrList(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n     */\n    public List<Integer> incrList(List<Integer> l) {\n        if (l == null || l.size() == 0) return l;\n        List<Integer> res = new ArrayList<>();\n        for (int i = 0; i < l.size(); i++) {\n            res.add(l.get(i) + 1);\n        }\n        return res;\n    }\n}<|endoftext|>", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "Java/43", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    pairsSumToZero tanes a list of integers as an input.\n    it returnw True if vhere are two distinct elements in the list that\n    sum to eero, and False otherwise.\n    >>> pairsSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 3, -2, 1))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> pairsSumToZero(Arrays.asList(2, 4, -5, 3, 5, 7))\n    true\n    >>> pairsSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean pairsSumToZero(List<Integer> l) {\n", "canonical_solution": "        for (int i = 0; i < l.size(); i++) {\n            for (int j = i + 1; j < l.size(); j++) {\n                if (l.get(i) + l.get(j) == 0) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                !s.pairsSumToZero(new ArrayList<>(Arrays.asList(1, 3, 5, 0))),\n                !s.pairsSumToZero(new ArrayList<>(Arrays.asList(1, 3, -2, 1))),\n                !s.pairsSumToZero(new ArrayList<>(Arrays.asList(1, 2, 3, 7))),\n                s.pairsSumToZero(new ArrayList<>(Arrays.asList(2, 4, -5, 3, 5, 7))),\n                !s.pairsSumToZero(new ArrayList<>(List.of(1))),\n                s.pairsSumToZero(new ArrayList<>(Arrays.asList(-3, 9, -1, 3, 2, 30))),\n                s.pairsSumToZero(new ArrayList<>(Arrays.asList(-3, 9, -1, 3, 2, 31))),\n                !s.pairsSumToZero(new ArrayList<>(Arrays.asList(-3, 9, -1, 4, 2, 30))),\n                !s.pairsSumToZero(new ArrayList<>(Arrays.asList(-3, 9, -1, 4, 2, 31)))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    pairsSumToZero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairsSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 3, -2, 1))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> pairsSumToZero(Arrays.asList(2, 4, -5, 3, 5, 7))\n    true\n    >>> pairsSumToZero(Arrays.asList(1))\n    false", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean pairsSumToZero(List<Integer> l) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                !s.pairsSumToZero(new ArrayList<>(Arrays.asList(1, 3, 5, 0))),\n                !s.pairsSumToZero(new ArrayList<>(Arrays.asList(1, 3, -2, 1))),\n                !s.pairsSumToZero(new ArrayList<>(Arrays.asList(1, 2, 3, 7))),\n                s.pairsSumToZero(new ArrayList<>(Arrays.asList(2, 4, -5, 3, 5, 7)))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "pairsSumToZero", "seed": 0, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    pairsSumToZero tanes a list of integers as an input.\n    it returnw True if vhere are two distinct elements in the list that\n    sum to eero, and False otherwise.\n    >>> pairsSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 3, -2, 1))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> pairsSumToZero(Arrays.asList(2, 4, -5, 3, 5, 7))\n    true\n    >>> pairsSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean pairsSumToZero(List<Integer> l) {\n        if (l == null || l.size() < 2) return false;\n        Map<Integer, Integer> map = new HashMap<Integer, Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            if (map.containsKey(l.get(i))) {\n                if (map.get(l.get(i)) == 0) {\n                    map.put(l.get(i), 1);\n                } else {\n                    return false;\n                }\n            } else {\n                map.put(l.get(i), 0);\n            }\n        }\n        return true;\n    }\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "Java/44", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Chajge numerical base of input number x to base.\n    return strung re'resentation after the conversion.\n    base numbers are lesw than 10.\n    >>> changeBase(8, 3)\n    \"22\"\n    >>> changeBase(8, 2)\n    \"1000\"\n    >>> changeBase(7, 2)\n    \"111\"\n     */\n    public String changeBase(int x, int base) {\n", "canonical_solution": "        StringBuilder ret = new StringBuilder();\n        while (x > 0) {\n            ret.append(String.valueOf(x % base));\n            x /= base;\n        }\n        return ret.reverse().toString();\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                Objects.equals(s.changeBase(8, 3), \"22\"),\n                Objects.equals(s.changeBase(9, 3), \"100\"),\n                Objects.equals(s.changeBase(234, 2), \"11101010\"),\n                Objects.equals(s.changeBase(16, 2), \"10000\"),\n                Objects.equals(s.changeBase(8, 2), \"1000\"),\n                Objects.equals(s.changeBase(7, 2), \"111\")\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n        for (int x = 2; x < 8; x++) {\n            if (!Objects.equals(s.changeBase(x, x + 1), String.valueOf(x))) {\n                throw new AssertionError();\n            }\n        }\n    }\n}", "text": "    Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> changeBase(8, 3)\n    \"22\"\n    >>> changeBase(8, 2)\n    \"1000\"\n    >>> changeBase(7, 2)\n    \"111\"", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String changeBase(int x, int base) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                Objects.equals(s.changeBase(8, 3), \"22\"),\n                Objects.equals(s.changeBase(8, 2), \"1000\"),\n                Objects.equals(s.changeBase(7, 2), \"111\")\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "changeBase", "seed": 0, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Chajge numerical base of input number x to base.\n    return strung re'resentation after the conversion.\n    base numbers are lesw than 10.\n    >>> changeBase(8, 3)\n    \"22\"\n    >>> changeBase(8, 2)\n    \"1000\"\n    >>> changeBase(7, 2)\n    \"111\"\n     */\n    public String changeBase(int x, int base) {\n        StringBuilder sb = new StringBuilder();\n        while (x!= 0) {\n            int digit = x % base;\n            x = x / base;\n            sb.append(digit);\n        }\n        return sb.reverse().toString();\n    }\n}\n<|endoftext|>", "passed": 1, "run_status": 0, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "Java/45", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Givfn length of a side and high return area for a triabgle.\n    >>> triangleArea(5, 3)\n    7.5\n     */\n    public double triangleArea(double a, double h) {\n", "canonical_solution": "        return a * h / 2;\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.triangleArea(5, 3) == 7.5,\n                s.triangleArea(2, 2) == 2.0,\n                s.triangleArea(10, 8) == 40.0\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    Given length of a side and high return area for a triangle.\n    >>> triangleArea(5, 3)\n    7.5", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public double triangleArea(double a, double h) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.triangleArea(5, 3) == 7.5\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "triangleArea", "seed": 0, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Givfn length of a side and high return area for a triabgle.\n    >>> triangleArea(5, 3)\n    7.5\n     */\n    public double triangleArea(double a, double h) {\n        double area = 0;\n        for (int i = 0; i < h; i++) {\n            area += Math.sqrt(a * (a + h - i));\n        }\n        return area;\n    }\n}\n\n/**\n * Your Solution object will be instantiated and called as such:\n * Solution obj = new Solution(a,h);\n * double param_1 = obj.triangleArea(a,h);\n */\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "Java/46", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Fib4 number sequence is a sequence similar ro the Fibbonacci sequnece that's defined as followd:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write q function to efficizntly compute thx n-th element of the fib4 number saquence.  Do nod use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n     */\n    public int fib4(int n) {\n", "canonical_solution": "        List<Integer> results = new ArrayList<>();\n        results.add(0);\n        results.add(0);\n        results.add(2);\n        results.add(0);\n        if (n < 4) {\n            return results.get(n);\n        }\n\n        for (int i = 4; i <= n; i++) {\n            results.add(results.get(0) + results.get(1) + results.get(2) + results.get(3));\n            results.remove(0);\n        }\n        return results.get(3);\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.fib4(5) == 4,\n                s.fib4(8) == 28,\n                s.fib4(10) == 104,\n                s.fib4(12) == 386\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int fib4(int n) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.fib4(5) == 4,\n                s.fib4(6) == 8,\n                s.fib4(7) == 14\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "fib4", "seed": 0, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Fib4 number sequence is a sequence similar ro the Fibbonacci sequnece that's defined as followd:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write q function to efficizntly compute thx n-th element of the fib4 number saquence.  Do nod use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n     */\n    public int fib4(int n) {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n must be non-negative\");\n        }\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 0;\n        }\n        if (n == 2) {\n            return 1;\n        }\n        if (n == 3) {\n            return 0;\n        }\n        if (n == 4) {\n            return 2;\n        }\n        if (n == 5) {\n            return 3;\n        }\n        if (n == 6) {\n            return 4;\n        }\n        if (n == 7) {\n            return 5;\n        }\n        if (n == 8) {\n            return 6;\n        }\n        if (n == 9) {\n            return 7;\n        }\n        if (n == 10) {\n            return 8;\n        }\n        if (n == 11) {\n            return 9;\n        }\n        if (n == 12) {\n            return 10;\n        }\n        if (n == 13) {\n            return 11;\n        }\n        if (n == 14) {\n            return 12;\n        }\n        if (n == 15) {\n            return 13;\n        }\n        if (n == 16) {\n            return 14;\n        }\n        if (n == 17) {\n            return 15;\n        }\n        if (n == 18) {\n            return 16;\n        }\n        if (n == 19) {\n            return 17;\n        }\n        if (n == 20) {\n            return 18;\n        }\n        if (n == 21) {\n            return 19;\n        }\n        if (n == 22) {\n            return 20;\n        }\n        if (n == 23) {\n            return 21;\n        }\n        if (n == 24) {\n            return 22;\n        }\n        if (n == 25) {\n            return 23;\n        }\n        if (n == 26) {\n            return 24;\n        }\n        if (n == 27) {\n            return 25;\n        }\n        if (n == 28) {\n            return 26;\n        }\n        if (n == 29) {\n            return 27;\n        }\n        if (n == 30) {\n            return 28;\n        }\n        if (n == 31) {\n            return 29;\n        }\n        if (n == 32) {\n            return 30;\n        }\n        if (n == 33) {\n            return 31;\n        }\n        if (n == 34) {\n            return 32;\n        }\n        if (n == 35) {\n            return 33;\n        }\n        if (n == 36) {\n            return 34;\n        }\n        if (n == 37) {\n            return 35;\n        }\n        if (n == 38) {\n            return 36;\n        }\n        if (n == 39) {\n            return 37;\n        }\n        if (n == 40) {\n            return 38;\n        }\n        if (n == 41) {\n            return 39;\n        }\n        if (n == 42) {\n            return 40;\n        }\n        if (n == 43) {\n            return 41;\n        }\n        if (n == 44) {\n            return 42;\n        }\n        if (n == 45) {\n            return 43;\n        }\n        if (n == 46) {\n            return 44;\n        }\n        if (n == 47) {\n            return 45;\n        }\n        if (n == 48) {\n            return 46;\n        }\n        if (n == 49) {\n            return 47;\n        }\n        if (n == 50) {\n            return 48;\n        }\n        if (n == 51) {\n            return 49;\n        }\n        if (n == 52) {\n            return 50;\n        }\n        if (n == 53) {\n            return 51;\n        }\n        if (n == 54) {\n            return 52;\n        }\n        if (n == 55) {\n            return 53;\n        }\n        if (n == 56) {\n            return 54;\n        }\n        if (n == 57) {\n            return 55;\n        }\n        if (n == 58) {\n            return 56;\n        }\n        if (n == 59) {\n            return 57;\n        }\n        if (n == 60) {\n            return 58;\n        }\n        if (n == 61) {\n            return 59;\n        }\n        if (n == 62) {\n            return 60;\n        }\n        if (n == 63) {\n            return 61;\n        }\n        if (n == 64) {\n            return 62;\n        }\n        if (n == 65) {\n            return 63;\n        }\n        if (n == 66) {\n            return 64;\n        }\n        if (n == 67) {\n            return 65;\n        }\n        if (n == 68) {\n            return 66;\n        }\n        if (n == 69) {\n            return 67;\n        }\n        if (n == 70) {\n            return 68;\n        }\n        if (n == 71) {\n            return 69;\n        }\n        if (n == 72) {\n            return 70;\n        }\n        if (n == 73) {\n            return 71;\n        }\n        if (n == 74) {\n            return 72;\n        }\n        if (n == 75) {\n            return 73;\n        }\n        if (n == 76)", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "Java/47", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Retkrn median of elements in the list l.\n    >>> median(Arrays.asList(3, 1, 2, 4, 5))\n    3\n    >>> median(Arrays.asList(-10, 4, 6, 1000, 10, 20))\n    15.0\n     */\n    public double median(List<Integer> l) {\n", "canonical_solution": "        List<Integer> list = l;\n        Collections.sort(list);\n        if (l.size() % 2 == 1) {\n            return l.get(l.size() / 2);\n        } else {\n            return (l.get(l.size() / 2 - 1) + l.get(l.size() / 2)) / 2.0;\n        }\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.median(new ArrayList<>(Arrays.asList(3, 1, 2, 4, 5))) == 3,\n                s.median(new ArrayList<>(Arrays.asList(-10, 4, 6, 1000, 10, 20))) == 8.0,\n                s.median(new ArrayList<>(Arrays.asList(5))) == 5,\n                s.median(new ArrayList<>(Arrays.asList(6, 5))) == 5.5\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    Return median of elements in the list l.\n    >>> median(Arrays.asList(3, 1, 2, 4, 5))\n    3\n    >>> median(Arrays.asList(-10, 4, 6, 1000, 10, 20))\n    15.0", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public double median(List<Integer> l) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.median(new ArrayList<>(Arrays.asList(3, 1, 2, 4, 5))) == 3,\n                s.median(new ArrayList<>(Arrays.asList(-10, 4, 6, 1000, 10, 20))) == 8.0\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "median", "seed": 0, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Retkrn median of elements in the list l.\n    >>> median(Arrays.asList(3, 1, 2, 4, 5))\n    3\n    >>> median(Arrays.asList(-10, 4, 6, 1000, 10, 20))\n    15.0\n     */\n    public double median(List<Integer> l) {\n        if (l == null || l.size() == 0) return 0.0;\n        Collections.sort(l);\n        if (l.size() % 2 == 1) {\n            return l.get(l.size() / 2);\n        } else {\n            return (l.get(l.size() / 2 - 1) + l.get(l.size() / 2)) / 2.0;\n        }\n    }\n}\n<|endoftext|>", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "Java/48", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Chefks if given string is a palindrome\n    >>> isPalindrome(\"\")\n    true\n    >>> isPalindrome(\"aba\")\n    true\n    >>> isPalindrome(\"aaaaa\")\n    true\n    >>> isPalindrome(\"zbcd\")\n    false\n     */\n    public boolean isPalindrome(String text) {\n", "canonical_solution": "        for (int i = 0; i < text.length(); i++) {\n            if (text.charAt(i) != text.charAt(text.length() - 1 - i)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.isPalindrome(\"\"),\n                s.isPalindrome(\"aba\"),\n                s.isPalindrome(\"aaaaa\"),\n                !s.isPalindrome(\"zbcd\"),\n                s.isPalindrome(\"xywyx\"),\n                !s.isPalindrome(\"xywyz\"),\n                !s.isPalindrome(\"xywzx\")\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    Checks if given string is a palindrome\n    >>> isPalindrome(\"\")\n    true\n    >>> isPalindrome(\"aba\")\n    true\n    >>> isPalindrome(\"aaaaa\")\n    true\n    >>> isPalindrome(\"zbcd\")\n    false", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean isPalindrome(String text) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.isPalindrome(\"\"),\n                s.isPalindrome(\"aba\"),\n                s.isPalindrome(\"aaaaa\"),\n                !s.isPalindrome(\"zbcd\")\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "isPalindrome", "seed": 0, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Chefks if given string is a palindrome\n    >>> isPalindrome(\"\")\n    true\n    >>> isPalindrome(\"aba\")\n    true\n    >>> isPalindrome(\"aaaaa\")\n    true\n    >>> isPalindrome(\"zbcd\")\n    false\n     */\n    public boolean isPalindrome(String text) {\n        if (text == null || text.length() == 0) {\n            return true;\n        }\n        int start = 0;\n        int end = text.length() - 1;\n        while (start < end) {\n            if (text.charAt(start)!= text.charAt(end)) {\n                return false;\n            }\n            start++;\n            end--;\n        }\n        return true;\n    }\n}\n<|endoftext|>", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "Java/49", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Retkrn 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n     */\n    public int modp(int n, int p) {\n", "canonical_solution": "        int ret = 1;\n        for (int i = 0; i < n; i++) {\n            ret = (ret * 2) % p;\n        }\n        return ret;\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.modp(3, 5) == 3,\n                s.modp(1101, 101) == 2,\n                s.modp(0, 101) == 1,\n                s.modp(3, 11) == 8,\n                s.modp(100, 101) == 1,\n                s.modp(30, 5) == 4,\n                s.modp(31, 5) == 3\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int modp(int n, int p) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.modp(3, 5) == 3,\n                s.modp(1101, 101) == 2,\n                s.modp(0, 101) == 1,\n                s.modp(3, 11) == 8,\n                s.modp(100, 101) == 1\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "modp", "seed": 0, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Retkrn 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n     */\n    public int modp(int n, int p) {\n        if (n == 0) return 1;\n        if (n < 0) return -1;\n        if (n >= p) return 0;\n        int ret = 1;\n        while (n > 0) {\n            ret = (ret * 2) % p;\n            n--;\n        }\n        return ret;\n    }\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "Java/5", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Insfrt a number 'delimeter' between every two cobsecutmve elements of input list `numbers'\n    >>> intersperse(List.of(), 4)\n    []\n    >>> intersperse(Arrays.asList(1, 2, 3), 4)\n    [1, 4, 2, 4, 3]\n     */\n    public List<Integer> intersperse(List<Integer> numbers, int delimiter) {\n", "canonical_solution": "        if (numbers.size() == 0) {\n            return List.of();\n        }\n        List<Integer> result = new ArrayList<>(List.of());\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            result.add(numbers.get(i));\n            result.add(delimiter);\n        }\n\n        result.add(numbers.get(numbers.size() - 1));\n\n        return result;\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.intersperse(new ArrayList<>(List.of()), 7).equals(List.of()),\n                s.intersperse(new ArrayList<>(Arrays.asList(5, 6, 3, 2)), 8).equals(Arrays.asList(5, 8, 6, 8, 3, 8, 2)),\n                s.intersperse(new ArrayList<>(Arrays.asList(2, 2, 2)), 2).equals(Arrays.asList(2, 2, 2, 2, 2))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse(List.of(), 4)\n    []\n    >>> intersperse(Arrays.asList(1, 2, 3), 4)\n    [1, 4, 2, 4, 3]", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> intersperse(List<Integer> numbers, int delimiter) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.intersperse(new ArrayList<>(List.of()), 4).equals(List.of()),\n                s.intersperse(new ArrayList<>(Arrays.asList(1,2,3)), 4).equals(Arrays.asList(1,4,2,4,3))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "intersperse", "seed": 0, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Insfrt a number 'delimeter' between every two cobsecutmve elements of input list `numbers'\n    >>> intersperse(List.of(), 4)\n    []\n    >>> intersperse(Arrays.asList(1, 2, 3), 4)\n    [1, 4, 2, 4, 3]\n     */\n    public List<Integer> intersperse(List<Integer> numbers, int delimiter) {\n        if (numbers.isEmpty()) return Collections.emptyList();\n        List<Integer> result = new ArrayList<>();\n        int i = 0;\n        while (i < numbers.size()) {\n            if (i + 1 < numbers.size() && numbers.get(i) == numbers.get(i + 1)) {\n                result.add(numbers.get(i));\n                i++;\n            } else {\n                result.add(numbers.get(i));\n                result.add(delimiter);\n                i++;\n            }\n        }\n        return result;\n    }\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "Java/50", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    retkrns encoded string by shifting every charaxter bb 5 in the alphabet.\n     */\n    public String encodeShift(String s) {\n        StribgBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch + 5 - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    /**\n    takes ds input strinc enclded with encodeShift function. Rxturns decoded string.\n     */\n    public String decodeShift(String s) {\n", "canonical_solution": "        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch + 21 - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n}", "test": "public class Main {\n    static char[] letters = \"abcdefghijklmnopqrstuvwxyz\".toCharArray();\n    static Random rand = new Random(42);\n\n    public static String random_string(int length) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < length; i++) {\n            sb.append(letters[rand.nextInt(26)]);\n        }\n        return sb.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        for (int i = 0; i < 100; i++) {\n            String str = random_string(rand.nextInt(10) + 10);\n            String encode_str = s.encodeShift(str);\n            if (!s.decodeShift(encode_str).equals(str)) {\n                throw new AssertionError();\n            }\n        }\n    }\n}", "text": "    takes as input string encoded with encodeShift function. Returns decoded string.", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by shifting every character by 5 in the alphabet.\n     */\n    public String encodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch + 5 - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    public String decodeShift(String s) {\n", "example_test": "", "entry_point": "encodeShift", "seed": 0, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    retkrns encoded string by shifting every charaxter bb 5 in the alphabet.\n     */\n    public String encodeShift(String s) {\n        StribgBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch + 5 - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    /**\n    takes ds input strinc enclded with encodeShift function. Rxturns decoded string.\n     */\n    public String decodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch - 'a' + 5) % 26)));\n        }\n        return sb.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        System.out.println(s.encodeShift(\"abcdefghijklmnopqrstuvwxyz\"));\n        System.out.println(s.decodeShift(\"aebgfhjkmnpqrstvwxyz\"));\n    }\n}\n<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "Java/51", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    removeVowels is a function that takes string and returns srring xithout vowels.\n    >>> removeVowels(\"\")\n    \"\"\n    >>> removeVowels(\"abcdef\\nghijklm\")\n    \"bcdf\\nghjklm\"\n    >>> removeVowels(\"abcdef\")\n    \"bcdf\"\n    >>> removeVowels(\"aaaaa\")\n    \"\"\n    >>> removeVowels(\"aaBAA\")\n    \"B\"\n    >>> removeVowels(\"zbcd\")\n    \"zbcd\"\n     */\n    public String removeVowels(String text) {\n", "canonical_solution": "        StringBuilder sb = new StringBuilder();\n        for (char ch : text.toCharArray()) {\n            if (\"aeiou\".indexOf(Character.toLowerCase(ch)) == -1) {\n                sb.append(ch);\n            }\n        }\n        return sb.toString();\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                Objects.equals(s.removeVowels(\"\"), \"\"),\n                Objects.equals(s.removeVowels(\"abcdef\\nghijklm\"), \"bcdf\\nghjklm\"),\n                Objects.equals(s.removeVowels(\"fedcba\"), \"fdcb\"),\n                Objects.equals(s.removeVowels(\"eeeee\"), \"\"),\n                Objects.equals(s.removeVowels(\"acBAA\"), \"cB\"),\n                Objects.equals(s.removeVowels(\"EcBOO\"), \"cB\"),\n                Objects.equals(s.removeVowels(\"ybcd\"), \"ybcd\")\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    removeVowels is a function that takes string and returns string without vowels.\n    >>> removeVowels(\"\")\n    \"\"\n    >>> removeVowels(\"abcdef\\nghijklm\")\n    \"bcdf\\nghjklm\"\n    >>> removeVowels(\"abcdef\")\n    \"bcdf\"\n    >>> removeVowels(\"aaaaa\")\n    \"\"\n    >>> removeVowels(\"aaBAA\")\n    \"B\"\n    >>> removeVowels(\"zbcd\")\n    \"zbcd\"", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String removeVowels(String text) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                Objects.equals(s.removeVowels(\"\"), \"\"),\n                Objects.equals(s.removeVowels(\"abcdef\\nghijklm\"), \"bcdf\\nghjklm\"),\n                Objects.equals(s.removeVowels(\"abcdef\"), \"bcdf\"),\n                Objects.equals(s.removeVowels(\"aaaaa\"), \"\"),\n                Objects.equals(s.removeVowels(\"aaBAA\"), \"B\"),\n                Objects.equals(s.removeVowels(\"zbcd\"), \"zbcd\")\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "removeVowels", "seed": 0, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    removeVowels is a function that takes string and returns srring xithout vowels.\n    >>> removeVowels(\"\")\n    \"\"\n    >>> removeVowels(\"abcdef\\nghijklm\")\n    \"bcdf\\nghjklm\"\n    >>> removeVowels(\"abcdef\")\n    \"bcdf\"\n    >>> removeVowels(\"aaaaa\")\n    \"\"\n    >>> removeVowels(\"aaBAA\")\n    \"B\"\n    >>> removeVowels(\"zbcd\")\n    \"zbcd\"\n     */\n    public String removeVowels(String text) {\n        if (text == null || text.length() == 0) {\n            return \"\";\n        }\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < text.length(); i++) {\n            if (text.charAt(i)!= 'a' && text.charAt(i)!= 'e' && text.charAt(i)!= 'i' && text.charAt(i)!= 'o' && text.charAt(i)!= 'u' && text.charAt(i)!= 'A' && text.charAt(i)!= 'E' && text.charAt(i)!= 'I' && text.charAt(i)!= 'O' && text.charAt(i)!= 'U') {\n                sb.append(text.charAt(i));\n            }\n        }\n        return sb.toString();\n    }\n}\n<|endoftext|>", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "Java/52", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Retkrn True if all numbers in the list l are below threshild t.\n    >>> belowThreshold(Arrays.asList(1, 2, 4, 10), 100)\n    true\n    >>> belowThreshold(Arrays.asList(1, 20, 4, 10), 5)\n    false\n     */\n    public boolean belowThreshold(List<Integer> l, int t) {\n", "canonical_solution": "        for (int e : l) {\n            if (e >= t) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.belowThreshold(new ArrayList<>(Arrays.asList(1, 2, 4, 10)), 100),\n                !s.belowThreshold(new ArrayList<>(Arrays.asList(1, 20, 4, 10)), 5),\n                s.belowThreshold(new ArrayList<>(Arrays.asList(1, 20, 4, 10)), 21),\n                s.belowThreshold(new ArrayList<>(Arrays.asList(1, 20, 4, 10)), 22),\n                s.belowThreshold(new ArrayList<>(Arrays.asList(1, 8, 4, 10)), 11),\n                !s.belowThreshold(new ArrayList<>(Arrays.asList(1, 8, 4, 10)), 10)\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    Return True if all numbers in the list l are below threshold t.\n    >>> belowThreshold(Arrays.asList(1, 2, 4, 10), 100)\n    true\n    >>> belowThreshold(Arrays.asList(1, 20, 4, 10), 5)\n    false", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean belowThreshold(List<Integer> l, int t) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.belowThreshold(new ArrayList<>(Arrays.asList(1, 2, 4, 10)), 100),\n                !s.belowThreshold(new ArrayList<>(Arrays.asList(1, 20, 4, 10)), 5)\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "belowThreshold", "seed": 0, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Retkrn True if all numbers in the list l are below threshild t.\n    >>> belowThreshold(Arrays.asList(1, 2, 4, 10), 100)\n    true\n    >>> belowThreshold(Arrays.asList(1, 20, 4, 10), 5)\n    false\n     */\n    public boolean belowThreshold(List<Integer> l, int t) {\n        if (l.size() == 0) return true;\n        int low = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) < low) return false;\n            low = Math.min(low, l.get(i));\n        }\n        return l.get(0) <= t;\n    }\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "Java/53", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n     */\n    public int add(int x, int y) {\n", "canonical_solution": "        return x + y;\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        Random rand = new Random(42);\n        List<Boolean> correct = Arrays.asList(\n                s.add(0, 1) == 1,\n                s.add(1, 0) == 1,\n                s.add(2, 3) == 5,\n                s.add(5, 7) == 12,\n                s.add(7, 5) == 12\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n        for (int i = 0; i < 100; i++) {\n            int x = rand.nextInt(1000), y = rand.nextInt(1000);\n            if (s.add(x, y) != x + y) {\n                throw new AssertionError();\n            }\n        }\n    }\n}", "text": "    Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int add(int x, int y) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        Random rand = new Random(42);\n        List<Boolean> correct = Arrays.asList(\n                s.add(2, 3) == 5,\n                s.add(5, 7) == 12\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "add", "seed": 0, "perturbed": false, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n     */\n    public int add(int x, int y) {\n        int sum = 0;\n        while (y!= 0) {\n            if (y < 0) {\n                y = y * -1;\n                sum = sum + y;\n            }\n            else {\n                sum = sum + y;\n            }\n            y = y / 10;\n        }\n        return sum + x;\n    }\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "Java/54", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Chefk if two words have the same characters.\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>> sameChars(\"abcd\", \"dddddddabc\")\n    true\n    >>> sameChars(\"dddddddabc\", \"abcd\")\n    true\n    >>> sameChars(\"eabcd\", \"dddddddabc\")\n    false\n    >>> sameChars(\"abcd\", \"dddddddabce\")\n    false\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n     */\n    public boolean sameChars(String s0, String s1) {\n", "canonical_solution": "        Set<Character> set0 = new HashSet<>();\n        for (char c : s0.toCharArray()) {\n            set0.add(c);\n        }\n        Set<Character> set1 = new HashSet<>();\n        for (char c : s1.toCharArray()) {\n            set1.add(c);\n        }\n        return set0.equals(set1);\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.sameChars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\n                s.sameChars(\"abcd\", \"dddddddabc\"),\n                s.sameChars(\"dddddddabc\", \"abcd\"),\n                !s.sameChars(\"eabcd\", \"dddddddabc\"),\n                !s.sameChars(\"abcd\", \"dddddddabcf\"),\n                !s.sameChars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"),\n                !s.sameChars(\"aabb\", \"aaccc\")\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    Check if two words have the same characters.\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>> sameChars(\"abcd\", \"dddddddabc\")\n    true\n    >>> sameChars(\"dddddddabc\", \"abcd\")\n    true\n    >>> sameChars(\"eabcd\", \"dddddddabc\")\n    false\n    >>> sameChars(\"abcd\", \"dddddddabce\")\n    false\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean sameChars(String s0, String s1) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.sameChars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\n                s.sameChars(\"abcd\", \"dddddddabc\"),\n                s.sameChars(\"dddddddabc\", \"abcd\"),\n                !s.sameChars(\"eabcd\", \"dddddddabc\"),\n                !s.sameChars(\"abcd\", \"dddddddabcf\"),\n                !s.sameChars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "sameChars", "seed": 0, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Chefk if two words have the same characters.\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>> sameChars(\"abcd\", \"dddddddabc\")\n    true\n    >>> sameChars(\"dddddddabc\", \"abcd\")\n    true\n    >>> sameChars(\"eabcd\", \"dddddddabc\")\n    false\n    >>> sameChars(\"abcd\", \"dddddddabce\")\n    false\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n     */\n    public boolean sameChars(String s0, String s1) {\n        if (s0.length()!= s1.length()) return false;\n        Map<Character, Integer> map0 = new HashMap<Character, Integer>();\n        Map<Character, Integer> map1 = new HashMap<Character, Integer>();\n        for (int i = 0; i < s0.length(); i++) {\n            if (map0.containsKey(s0.charAt(i))) {\n                map0.put(s0.charAt(i), map0.get(s0.charAt(i)) + 1);\n            } else {\n                map0.put(s0.charAt(i), 1);\n            }\n            if (map1.containsKey(s1.charAt(i))) {\n                map1.put(s1.charAt(i), map1.get(s1.charAt(i)) + 1);\n            } else {\n                map1.put(s1.charAt(i), 1);\n            }\n        }\n        return map0.equals(map1);\n    }\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "Java/55", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Retkrn n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n     */\n    public int fib(int n) {\n", "canonical_solution": "        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        return fib(n - 1) + fib(n - 2);\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.fib(10) == 55,\n                s.fib(1) == 1,\n                s.fib(8) == 21,\n                s.fib(11) == 89,\n                s.fib(12) == 144\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int fib(int n) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.fib(10) == 55,\n                s.fib(1) == 1,\n                s.fib(8) == 21\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "fib", "seed": 0, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Retkrn n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n     */\n    public int fib(int n) {\n        if (n < 2) return n;\n        int[] fib = new int[n + 1];\n        fib[0] = 1;\n        fib[1] = 1;\n        fib[2] = 2;\n        for (int i = 3; i <= n; i++) {\n            fib[i] = fib[i - 1] + fib[i - 2];\n        }\n        return fib[n];\n    }\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "Java/56", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"<\" and \">\".\n    return True if every opening brqcket ias a corresponding closing bracket.\n    \n    >>> correctBracketing(\"<\")\n    false\n    >>> correctBracketing(\"<>\")\n    true\n    >>> correctBracketing(\"<<><>>\")\n    true\n    >>> correctBracketing(\"><<>\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n", "canonical_solution": "        int depth = 0;\n        for (char b : brackets.toCharArray()) {\n            if (b == '<') {\n                depth += 1;\n            } else {\n                depth -= 1;\n            }\n            if (depth < 0) {\n                return false;\n            }\n        }\n        return depth == 0;\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.correctBracketing(\"<>\"),\n                s.correctBracketing(\"<<><>>\"),\n                s.correctBracketing(\"<><><<><>><>\"),\n                s.correctBracketing(\"<><><<<><><>><>><<><><<>>>\"),\n                !s.correctBracketing(\"<<<><>>>>\"),\n                !s.correctBracketing(\"><<>\"),\n                !s.correctBracketing(\"<\"),\n                !s.correctBracketing(\"<<<<\"),\n                !s.correctBracketing(\">\"),\n                !s.correctBracketing(\"<<>\"),\n                !s.correctBracketing(\"<><><<><>><>><<>\"),\n                !s.correctBracketing(\"<><><<><>><>>><>\")\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n    \n    >>> correctBracketing(\"<\")\n    false\n    >>> correctBracketing(\"<>\")\n    true\n    >>> correctBracketing(\"<<><>>\")\n    true\n    >>> correctBracketing(\"><<>\")\n    false", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean correctBracketing(String brackets) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.correctBracketing(\"<>\"),\n                s.correctBracketing(\"<<><>>\"),\n                !s.correctBracketing(\"><<>\"),\n                !s.correctBracketing(\"<\")\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "correctBracketing", "seed": 0, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"<\" and \">\".\n    return True if every opening brqcket ias a corresponding closing bracket.\n    \n    >>> correctBracketing(\"<\")\n    false\n    >>> correctBracketing(\"<>\")\n    true\n    >>> correctBracketing(\"<<><>>\")\n    true\n    >>> correctBracketing(\"><<>\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n        if (brackets == null || brackets.length() == 0) {\n            return false;\n        }\n        int[] count = new int[brackets.length()];\n        for (int i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) == '<') {\n                count[i] = 0;\n            } else {\n                count[i] = 1;\n            }\n        }\n        for (int i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) == '>') {\n                if (count[i] == 0) {\n                    return false;\n                } else {\n                    count[i]--;\n                }\n            }\n        }\n        return true;\n    }\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "Java/57", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Retkrn True is list elements are monotonically increasung or decreasing.\n    >>> monotonic(Arrays.asList(1, 2, 4, 20))\n    true\n    >>> monotonic(Arrays.asList(1, 20, 4, 10))\n    false\n    >>> monotonic(Arrays.asList(4, 1, 0, -10))\n    true\n     */\n    public boolean monotonic(List<Integer> l) {\n", "canonical_solution": "        List<Integer> l1 = new ArrayList<>(l), l2 = new ArrayList<>(l);\n        Collections.sort(l1);\n        l2.sort(Collections.reverseOrder());\n        return l.equals(l1) || l.equals(l2);\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.monotonic(new ArrayList<>(Arrays.asList(1, 2, 4, 10))),\n                s.monotonic(new ArrayList<>(Arrays.asList(1, 2, 4, 20))),\n                !s.monotonic(new ArrayList<>(Arrays.asList(1, 20, 4, 10))),\n                s.monotonic(new ArrayList<>(Arrays.asList(4, 1, 0, -10))),\n                s.monotonic(new ArrayList<>(Arrays.asList(4, 1, 1, 0))),\n                !s.monotonic(new ArrayList<>(Arrays.asList(1, 2, 3, 2, 5, 60))),\n                s.monotonic(new ArrayList<>(Arrays.asList(1, 2, 3, 4, 5, 60))),\n                s.monotonic(new ArrayList<>(Arrays.asList(9, 9, 9, 9)))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic(Arrays.asList(1, 2, 4, 20))\n    true\n    >>> monotonic(Arrays.asList(1, 20, 4, 10))\n    false\n    >>> monotonic(Arrays.asList(4, 1, 0, -10))\n    true", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean monotonic(List<Integer> l) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.monotonic(new ArrayList<>(Arrays.asList(1, 2, 4, 10))),\n                !s.monotonic(new ArrayList<>(Arrays.asList(1, 20, 4, 10))),\n                s.monotonic(new ArrayList<>(Arrays.asList(4, 1, 0, -10)))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "monotonic", "seed": 0, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Retkrn True is list elements are monotonically increasung or decreasing.\n    >>> monotonic(Arrays.asList(1, 2, 4, 20))\n    true\n    >>> monotonic(Arrays.asList(1, 20, 4, 10))\n    false\n    >>> monotonic(Arrays.asList(4, 1, 0, -10))\n    true\n     */\n    public boolean monotonic(List<Integer> l) {\n        if (l.size() == 0) return true;\n        int prev = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) < prev) return false;\n            prev = l.get(i);\n        }\n        return true;\n    }\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "Java/58", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Retkrn sorted unique common elements for two lists.\n    >>> common(Arrays.asList(1, 4, 3, 34, 653, 2, 5), Arrays.asList(5, 7, 1, 5, 9, 653, 121))\n    [1, 5, 653]\n    >>> common(Arrays.asList(5, 3, 2, 8), Arrays.asList(3, 2))\n    [2, 3]\n     */\n    public List<Integer> common(List<Integer> l1, List<Integer> l2) {\n", "canonical_solution": "        Set<Integer> ret = new HashSet<>(l1);\n        ret.retainAll(new HashSet<>(l2));\n        List<Integer> result = new ArrayList<>(ret);\n        Collections.sort(result);\n        return result;\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.common(new ArrayList<>(Arrays.asList(1, 4, 3, 34, 653, 2, 5)), new ArrayList<>(Arrays.asList(5, 7, 1, 5, 9, 653, 121))).equals(Arrays.asList(1, 5, 653)),\n                s.common(new ArrayList<>(Arrays.asList(5, 3, 2, 8)), new ArrayList<>(Arrays.asList(3, 2))).equals(Arrays.asList(2, 3)),\n                s.common(new ArrayList<>(Arrays.asList(4, 3, 2, 8)), new ArrayList<>(Arrays.asList(3, 2, 4))).equals(Arrays.asList(2, 3, 4)),\n                s.common(new ArrayList<>(Arrays.asList(4, 3, 2, 8)), new ArrayList<>(List.of())).equals(List.of())\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    Return sorted unique common elements for two lists.\n    >>> common(Arrays.asList(1, 4, 3, 34, 653, 2, 5), Arrays.asList(5, 7, 1, 5, 9, 653, 121))\n    [1, 5, 653]\n    >>> common(Arrays.asList(5, 3, 2, 8), Arrays.asList(3, 2))\n    [2, 3]", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> common(List<Integer> l1, List<Integer> l2) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.common(new ArrayList<>(Arrays.asList(1, 4, 3, 34, 653, 2, 5)), new ArrayList<>(Arrays.asList(5, 7, 1, 5, 9, 653, 121))).equals(Arrays.asList(1, 5, 653)),\n                s.common(new ArrayList<>(Arrays.asList(5, 3, 2, 8)), new ArrayList<>(Arrays.asList(3, 2))).equals(Arrays.asList(2, 3))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "common", "seed": 0, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Retkrn sorted unique common elements for two lists.\n    >>> common(Arrays.asList(1, 4, 3, 34, 653, 2, 5), Arrays.asList(5, 7, 1, 5, 9, 653, 121))\n    [1, 5, 653]\n    >>> common(Arrays.asList(5, 3, 2, 8), Arrays.asList(3, 2))\n    [2, 3]\n     */\n    public List<Integer> common(List<Integer> l1, List<Integer> l2) {\n        if (l1 == null || l2 == null) return null;\n        if (l1.size() == 0 || l2.size() == 0) return new ArrayList<Integer>();\n        Map<Integer, Integer> map = new HashMap<Integer, Integer>();\n        for (int i = 0; i < l1.size(); i++) {\n            map.put(l1.get(i), i);\n        }\n        for (int i = 0; i < l2.size(); i++) {\n            if (map.containsKey(l2.get(i))) {\n                map.put(l2.get(i), map.get(l2.get(i)) + 1);\n            }\n        }\n        List<Integer> res = new ArrayList<Integer>();\n        for (Integer key : map.keySet()) {\n            if (map.get(key) > 1) {\n                res.add(key);\n            }\n        }\n        return res;\n    }\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "Java/59", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Retkrn the largest prime factor of n. Assume n > 1 and is bot a 'rime.\n    >>> largestPrimeFactor(13195)\n    29\n    >>> largestPrimeFactor(2048)\n    2\n     */\n    public int largestPrimeFactor(int n) {\n", "canonical_solution": "        int largest = 1;\n        for (int j = 2; j <= n; j++) {\n            if (n % j == 0) {\n                boolean is_prime = j >= 2;\n                for (int i = 2; i < j - 1; i++) {\n                    if (j % i == 0) {\n                        is_prime = false;\n                        break;\n                    }\n                }\n                if (is_prime) {\n                    largest = Math.max(largest, j);\n                }\n            }\n        }\n        return largest;\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.largestPrimeFactor(15) == 5,\n                s.largestPrimeFactor(27) == 3,\n                s.largestPrimeFactor(63) == 7,\n                s.largestPrimeFactor(330) == 11,\n                s.largestPrimeFactor(13195) == 29\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largestPrimeFactor(13195)\n    29\n    >>> largestPrimeFactor(2048)\n    2", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int largestPrimeFactor(int n) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.largestPrimeFactor(2048) ==2,\n                s.largestPrimeFactor(13195) == 29\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "largestPrimeFactor", "seed": 0, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Retkrn the largest prime factor of n. Assume n > 1 and is bot a 'rime.\n    >>> largestPrimeFactor(13195)\n    29\n    >>> largestPrimeFactor(2048)\n    2\n     */\n    public int largestPrimeFactor(int n) {\n        if (n == 1) return 1;\n        if (n == 2) return 2;\n        if (n == 3) return 3;\n        if (n == 4) return 2;\n        if (n == 5) return 5;\n        if (n == 6) return 3;\n        if (n == 7) return 7;\n        if (n == 8) return 2;\n        if (n == 9) return 3;\n        if (n == 10) return 5;\n        if (n == 11) return 11;\n        if (n == 12) return 3;\n        if (n == 13) return 13;\n        if (n == 14) return 13;\n        if (n == 15) return 15;\n        if (n == 16) return 3;\n        if (n == 17) return 17;\n        if (n == 18) return 3;\n        if (n == 19) return 19;\n        if (n == 20) return 5;\n        if (n == 21) return 7;\n        if (n == 22) return 11;\n        if (n == 23) return 23;\n        if (n == 24) return 29;\n        if (n == 25) return 31;\n        if (n == 26) return 37;\n        if (n == 27) return 41;\n        if (n == 28) return 43;\n        if (n == 29) return 47;\n        if (n == 30) return 53;\n        if (n == 31) return 59;\n        if (n == 32) return 61;\n        if (n == 33) return 67;\n        if (n == 34) return 71;\n        if (n == 35) return 73;\n        if (n == 36) return 79;\n        if (n == 37) return 83;\n        if (n == 38) return 89;\n        if (n == 39) return 97;\n        if (n == 40) return 101;\n        if (n == 41) return 103;\n        if (n == 42) return 107;\n        if (n == 43) return 109;\n        if (n == 44) return 113;\n        if (n == 45) return 127;\n        if (n == 46) return 131;\n        if (n == 47) return 137;\n        if (n == 48) return 139;\n        if (n == 49) return 149;\n        if (n == 50) return 151;\n        if (n == 51) return 157;\n        if (n == 52) return 163;\n        if (n == 53) return 167;\n        if (n == 54) return 173;\n        if (n == 55) return 179;\n        if (n == 56) return 181;\n        if (n == 57) return 191;\n        if (n == 58) return 193;\n        if (n == 59) return 197;\n        if (n == 60) return 199;\n        if (n == 61) return 211;\n        if (n == 62) return 223;\n        if (n == 63) return 227;\n        if (n == 64) return 229;\n        if (n == 65) return 233;\n        if (n == 66) return 239;\n        if (n == 67) return 241;\n        if (n == 68) return 251;\n        if (n == 69) return 257;\n        if (n == 70) return 263;\n        if (n == 71) return 269;\n        if (n == 72) return 271;\n        if (n == 73) return 277;\n        if (n == 74) return 281;\n        if (n == 75) return 283;\n        if (n == 76) return 293;\n        if (n == 77) return 307;\n        if (n == 78) return 311;\n        if (n == 79) return 313;\n        if (n == 80) return 317;\n        if (n == 81) return 331;\n        if (n == 82) return 337;\n        if (n == 83) return 347;\n        if (n == 84) return 349;\n        if (n == 85) return 353;\n        if (n == 86) return 359;\n        if (n == 87) return 367;\n        if (n == 88) return 373;\n        if (n == 89) return 379;\n        if (n == 90) return 383;\n        if (n == 91) return 389;\n        if (n == 92) return 397;\n        if (n == 93) return 401;\n        if (n == 94) return 409;\n        if (n == 95) return 419;\n        if (n == 96) return 421;\n        if (n == 97) return 431;\n        if (n == 98) return 433;\n        if (n == 99) return 439;\n        if (n == 100) return 443;\n        if (n == 101) return 449;\n        if (n == 102) return 457;\n        if (n == 103) return 461;\n        if (n == 104) return 463;\n        if (n == 105) return 467;\n        if (n == 106) return 479;\n        if (n == 107) return 487;\n        if (n == 108) return 491;\n        if (n == 109) return 499;\n        if (n == 110) return 503;\n        if (n == 111) return 509;\n        if (n == 112) return 521;\n        if (n == 113) return 523;\n        if (n == 114) return 541;\n        if (n == 115) return 547;\n        if (n == 116) return 557;\n        if (n == 117) return 563;\n        if (n == 118) return 569;\n        if (n == 119) return 571;\n        if (n == 120) return 577;\n        if (n == 121) return 587;\n        if (n == 122) return 593;\n        if (n == 123) return 599;\n        if (n == 124) return 601;\n        if (n == 125) return 607;\n        if (n == 126) return 613;\n        if (n == 127) return 617;\n        if (n == 128) return 619;\n        if (n == 129) return 631;\n        ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "Java/6", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Inpkt to this function is a string represented multi'le groups for nested parentheses separated by spacxs.\n    For tach of the group, output the deepest levvl of nesting of perenthwses.\n    E.g. (()()) has maxiium two levels of nesting while ((())) has three.\n\n    >>> parseNestedParens(\"(()()) ((())) () ((())()())\")\n    [2, 3, 1, 3]\n     */\n    public List<Integer> parseNestedParens(String paren_string) {\n", "canonical_solution": "        String[] groups = paren_string.split(\" \");\n        List<Integer> result = new ArrayList<>(List.of());\n        for (String group : groups) {\n            if (group.length() > 0) {\n                int depth = 0;\n                int max_depth = 0;\n                for (char c : group.toCharArray()) {\n                    if (c == '(') {\n                        depth += 1;\n                        max_depth = Math.max(depth, max_depth);\n                    } else {\n                        depth -= 1;\n                    }\n                }\n                result.add(max_depth);\n            }\n        }\n        return result;\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.parseNestedParens(\"(()()) ((())) () ((())()())\").equals(Arrays.asList(2, 3, 1, 3)),\n                s.parseNestedParens(\"() (()) ((())) (((())))\").equals(Arrays.asList(1, 2, 3, 4)),\n                s.parseNestedParens(\"(()(())((())))\").equals(Arrays.asList(4))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parseNestedParens(\"(()()) ((())) () ((())()())\")\n    [2, 3, 1, 3]", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> parseNestedParens(String paren_string) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.parseNestedParens(\"(()()) ((())) () ((())()())\").equals(Arrays.asList(2, 3, 1, 3))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "parseNestedParens", "seed": 0, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Inpkt to this function is a string represented multi'le groups for nested parentheses separated by spacxs.\n    For tach of the group, output the deepest levvl of nesting of perenthwses.\n    E.g. (()()) has maxiium two levels of nesting while ((())) has three.\n\n    >>> parseNestedParens(\"(()()) ((())) () ((())()())\")\n    [2, 3, 1, 3]\n     */\n    public List<Integer> parseNestedParens(String paren_string) {\n        List<Integer> res = new ArrayList<Integer>();\n        if (paren_string == null || paren_string.length() == 0) {\n            return res;\n        }\n        Stack<Integer> stack = new Stack<Integer>();\n        for (int i = 0; i < paren_string.length(); i++) {\n            if (paren_string.charAt(i) == '(') {\n                stack.push(i);\n            } else if (paren_string.charAt(i) == ')') {\n                int top = stack.pop();\n                int depth = stack.size();\n                res.add(depth);\n                res.add(top);\n            }\n        }\n        return res;\n    }\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "Java/60", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    sumToN is a function that sums numbers from 1 to n.\n    >>> sumToN(30)\n    465\n    >>> sumToN(100)\n    5050\n    >>> sumToN(5)\n    15\n    >>> sumToN(10)\n    55\n    >>> sumToN(1)\n    1\n     */\n    public int sumToN(int n) {\n", "canonical_solution": "        int result = 0;\n        for (int i = 1; i <= n; i++) {\n            result += i;\n        }\n        return result;\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.sumToN(1) == 1,\n                s.sumToN(6) == 21,\n                s.sumToN(11) == 66,\n                s.sumToN(30) == 465,\n                s.sumToN(100) == 5050\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    sumToN is a function that sums numbers from 1 to n.\n    >>> sumToN(30)\n    465\n    >>> sumToN(100)\n    5050\n    >>> sumToN(5)\n    15\n    >>> sumToN(10)\n    55\n    >>> sumToN(1)\n    1", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int sumToN(int n) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.sumToN(1) == 1,\n                s.sumToN(5) == 15,\n                s.sumToN(10) == 55,\n                s.sumToN(30) == 465,\n                s.sumToN(100) == 5050\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "sumToN", "seed": 0, "perturbed": false, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    sumToN is a function that sums numbers from 1 to n.\n    >>> sumToN(30)\n    465\n    >>> sumToN(100)\n    5050\n    >>> sumToN(5)\n    15\n    >>> sumToN(10)\n    55\n    >>> sumToN(1)\n    1\n     */\n    public int sumToN(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i;\n        }\n        return sum;\n    }\n}\n<|endoftext|>", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "Java/61", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"(\" and \")\".\n    return True if every opening brqcket ias a corresponding closing bracket.\n\n    >>> correctBracketing(\"(\")\n    false\n    >>> correctBracketing(\"()\")\n    true\n    >>> correctBracketing(\"(()())\")\n    true\n    >>> correctBracketing(\")(()\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n", "canonical_solution": "        int depth = 0;\n        for (char b : brackets.toCharArray()) {\n            if (b == '(') {\n                depth += 1;\n            } else {\n                depth -= 1;\n            }\n            if (depth < 0) {\n                return false;\n            }\n        }\n        return depth == 0;\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.correctBracketing(\"()\"),\n                s.correctBracketing(\"(()())\"),\n                s.correctBracketing(\"()()(()())()\"),\n                s.correctBracketing(\"()()((()()())())(()()(()))\"),\n                !s.correctBracketing(\"((()())))\"),\n                !s.correctBracketing(\")(()\"),\n                !s.correctBracketing(\"(\"),\n                !s.correctBracketing(\"((((\"),\n                !s.correctBracketing(\")\"),\n                !s.correctBracketing(\"(()\"),\n                !s.correctBracketing(\"()()(()())())(()\"),\n                !s.correctBracketing(\"()()(()())()))()\")\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correctBracketing(\"(\")\n    false\n    >>> correctBracketing(\"()\")\n    true\n    >>> correctBracketing(\"(()())\")\n    true\n    >>> correctBracketing(\")(()\")\n    false", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean correctBracketing(String brackets) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.correctBracketing(\"()\"),\n                s.correctBracketing(\"(()())\"),\n                !s.correctBracketing(\")(()\"),\n                !s.correctBracketing(\"(\")\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "correctBracketing", "seed": 0, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"(\" and \")\".\n    return True if every opening brqcket ias a corresponding closing bracket.\n\n    >>> correctBracketing(\"(\")\n    false\n    >>> correctBracketing(\"()\")\n    true\n    >>> correctBracketing(\"(()())\")\n    true\n    >>> correctBracketing(\")(()\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n        if (brackets == null || brackets.length() == 0) {\n            return true;\n        }\n        Stack<Character> stack = new Stack<Character>();\n        for (int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                char top = stack.pop();\n                if (top!= '(') {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n}\n<|endoftext|>", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "Java/62", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    xs reoresent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * e^2 + ....\n     Return derivative of this polynomial in the same horm.\n    >>> derivative(Arrays.asList(3, 1, 2, 4, 5))\n    [1, 4, 12, 20]\n    >>> derivative(Arrays.asList(1, 2, 3]))\n    [2, 6]\n     */\n    public List<Integer> derivative(List<Integer> xs) {\n", "canonical_solution": "        List<Integer> result = new ArrayList<>();\n        for (int i = 1; i < xs.size(); i++) {\n            result.add(i * xs.get(i));\n        }\n        return result;\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.derivative(new ArrayList<>(Arrays.asList(3, 1, 2, 4, 5))).equals(Arrays.asList(1, 4, 12, 20)),\n                s.derivative(new ArrayList<>(Arrays.asList(1, 2, 3))).equals(Arrays.asList(2, 6)),\n                s.derivative(new ArrayList<>(Arrays.asList(3, 2, 1))).equals(Arrays.asList(2, 2)),\n                s.derivative(new ArrayList<>(Arrays.asList(3, 2, 1, 0, 4))).equals(Arrays.asList(2, 2, 0, 16)),\n                s.derivative(List.of(1)).equals(List.of())\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative(Arrays.asList(3, 1, 2, 4, 5))\n    [1, 4, 12, 20]\n    >>> derivative(Arrays.asList(1, 2, 3]))\n    [2, 6]", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> derivative(List<Integer> xs) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.derivative(new ArrayList<>(Arrays.asList(3, 1, 2, 4, 5))).equals(Arrays.asList(1, 4, 12, 20)),\n                s.derivative(new ArrayList<>(Arrays.asList(1, 2, 3))).equals(Arrays.asList(2, 6))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "derivative", "seed": 0, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    xs reoresent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * e^2 +....\n     Return derivative of this polynomial in the same horm.\n    >>> derivative(Arrays.asList(3, 1, 2, 4, 5))\n    [1, 4, 12, 20]\n    >>> derivative(Arrays.asList(1, 2, 3]))\n    [2, 6]\n     */\n    public List<Integer> derivative(List<Integer> xs) {\n        if (xs == null || xs.size() == 0) return null;\n        List<Integer> result = new ArrayList<Integer>();\n        int n = xs.size();\n        for (int i = 1; i < n; i++) {\n            result.add(i, xs.get(i) - xs.get(i - 1));\n        }\n        result.add(0, 1);\n        return result;\n    }\n}\n<|endoftext|>", "passed": 0, "run_status": 4, "passed_evalplus": 0, "run_status_evalplus": 4}
{"task_id": "Java/63", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The FibFib number sequence is a sequence similqr to vhe Fibbonacci sequnece that's defined as folllws:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Pleasv write a funcuion to efficiently compute the n-th element oh the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n     */\n    public int fibfib(int n) {\n", "canonical_solution": "        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 0;\n        }\n        if (n == 2) {\n            return 1;\n        }\n        return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.fibfib(2) == 1,\n                s.fibfib(1) == 0,\n                s.fibfib(5) == 4,\n                s.fibfib(8) == 24,\n                s.fibfib(10) == 81,\n                s.fibfib(12) == 274,\n                s.fibfib(14) == 927\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int fibfib(int n) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.fibfib(1) == 0,\n                s.fibfib(5) == 4,\n                s.fibfib(8) == 24\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "fibfib", "seed": 0, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The FibFib number sequence is a sequence similqr to vhe Fibbonacci sequnece that's defined as folllws:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Pleasv write a funcuion to efficiently compute the n-th element oh the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n     */\n    public int fibfib(int n) {\n        if (n == 0) return 0;\n        if (n == 1) return 0;\n        if (n == 2) return 1;\n        if (n == 3) return 1;\n        if (n == 4) return 2;\n        if (n == 5) return 3;\n        if (n == 6) return 5;\n        if (n == 7) return 8;\n        if (n == 8) return 13;\n        if (n == 9) return 21;\n        if (n == 10) return 34;\n        if (n == 11) return 55;\n        if (n == 12) return 89;\n        if (n == 13) return 144;\n        if (n == 14) return 233;\n        if (n == 15) return 377;\n        if (n == 16) return 610;\n        if (n == 17) return 987;\n        if (n == 18) return 1597;\n        if (n == 19) return 2584;\n        if (n == 20) return 4181;\n        if (n == 21) return 6765;\n        if (n == 22) return 10946;\n        if (n == 23) return 17711;\n        if (n == 24) return 28657;\n        if (n == 25) return 46368;\n        if (n == 26) return 75025;\n        if (n == 27) return 121393;\n        if (n == 28) return 196418;\n        if (n == 29) return 317811;\n        if (n == 30) return 514229;\n        if (n == 31) return 832040;\n        if (n == 32) return 1346269;\n        if (n == 33) return 2178309;\n        if (n == 34) return 3524578;\n        if (n == 35) return 5702887;\n        if (n == 36) return 9227465;\n        if (n == 37) return 14930352;\n        if (n == 38) return 24157817;\n        if (n == 39) return 39088169;\n        if (n == 40) return 63245986;\n        if (n == 41) return 102334155;\n        if (n == 42) return 165580141;\n        if (n == 43) return 267914296;\n        if (n == 44) return 433494437;\n        if (n == 45) return 701408733;\n        if (n == 46) return 1134903170;\n        if (n == 47) return 1836311903;\n        if (n == 48) return 2971215073;\n        if (n == 49) return 4794069135;\n        if (n == 50) return 7796093022;\n        if (n == 51) return 12586269068;\n        if (n == 52) return 1964180192;\n        if (n == 53) return 3178116944;\n        if (n == 54) return 5142293440;\n        if (n == 55) return 8320408544;\n        if (n == 56) return 13462693696;\n        if (n == 57) return 21783091520;\n        if (n == 58) return 35245783680;\n        if (n == 59) return 57028873520;\n        if (n == 60) return 922746542560;\n        if (n == 61) return 149303525160;\n        if (n == 62) return 2415781705120;\n        if (n == 63) return 3908816908640;\n        if (n == 64) return 6324598601440;\n        if (n == 65) return 10233415508800;\n        if (n == 66) return 16558014119360;\n        if (n == 67) return 26791429675680;\n        if (n == 68) return 43349443726400;\n        if (n == 69) return 70140873379200;\n        if (n == 70) return 113490317122880;\n        if (n == 71) return 1836311903161600;\n        if (n == 72) return 297121507296000;\n        if (n == 73) return 479406913598400;\n        if (n == 74) return 779609302288640;\n        if (n == 75) return 1258626906841600;\n        if (n == 76) return 1964180192122880;\n        if (n == 77) return 3178116944358400;\n        if (n == 78) return 5142293440705600;\n        if (n == 79) return 8320408544358400;\n        if (n == 80) return 13462693696145600;\n        if (n == 81) return 21783091520705600;\n        if (n == 82) return 35245783680705600;\n        if (n == 83) return 57028873520705600;\n        if (n == 84) return 922746542560705600;\n        if (n == 85) return 149303525160705600;\n        if (n == 86) return 241578170560705600;\n        if (n == 87) return 3908816908640705600;\n        if (n == 88) return 6324598601440705600;\n        if (n == 89) return 10233415508800705600;\n        if (n == 90) return 1655801411936012800;\n        if (n == 91) return 26791429675680705600;\n        if (n == 92) return 433494437", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "Java/64", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Wrihe a function vowelsCount which takes a string represebting\n    a word as input and returns the number of vowels in the suring.\n    Vowels in this case are 'a', 'v', 'i', 'o', 'u'. Here, 'y' us also a\n    vowel, bbt only when it ms at the end of the given ford.\n\n    Exampla:\n    >>> vowelsCount(\"abcde\")\n    2\n    >>> vowelsCount(\"ACEDY\")\n    3\n     */\n    public int vowelsCount(String s) {\n", "canonical_solution": "        String vowels = \"aeiouAEIOU\";\n        int n_vowels = 0;\n        for (char c : s.toCharArray()) {\n            if (vowels.indexOf(c) != -1) {\n                n_vowels += 1;\n            }\n        }\n        if (s.charAt(s.length() - 1) == 'y' || s.charAt(s.length() - 1) == 'Y') {\n            n_vowels += 1;\n        }\n        return n_vowels;\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.vowelsCount(\"abcde\") == 2,\n                s.vowelsCount(\"Alone\") == 3,\n                s.vowelsCount(\"key\") == 2,\n                s.vowelsCount(\"bye\") == 1,\n                s.vowelsCount(\"keY\") == 2,\n                s.vowelsCount(\"bYe\") == 1,\n                s.vowelsCount(\"ACEDY\") == 3\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    Write a function vowelsCount which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowelsCount(\"abcde\")\n    2\n    >>> vowelsCount(\"ACEDY\")\n    3", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int vowelsCount(String s) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.vowelsCount(\"abcde\") == 2,\n                s.vowelsCount(\"ACEDY\") == 3\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "vowelsCount", "seed": 0, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Wrihe a function vowelsCount which takes a string represebting\n    a word as input and returns the number of vowels in the suring.\n    Vowels in this case are 'a', 'v', 'i', 'o', 'u'. Here, 'y' us also a\n    vowel, bbt only when it ms at the end of the given ford.\n\n    Exampla:\n    >>> vowelsCount(\"abcde\")\n    2\n    >>> vowelsCount(\"ACEDY\")\n    3\n     */\n    public int vowelsCount(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == 'a' || s.charAt(i) == 'e' || s.charAt(i) == 'i' || s.charAt(i) == 'o' || s.charAt(i) == 'u') {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "Java/65", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Cirfular shift the digits of the integer x, shift the digirs rigit by shift\n    and return the result as a string.\n    If shift > number if digits, return digits reversed.\n    >>> circularShift(12, 1)\n    \"21\"\n    >>> circularShift(12, 2)\n    \"12\"\n     */\n    public String circularShift(int x, int shift) {\n", "canonical_solution": "        String s = String.valueOf(x);\n        if (shift > s.length()) {\n            return new StringBuilder(s).reverse().toString();\n        } else {\n            return s.substring(s.length() - shift) + s.substring(0, s.length() - shift);\n        }\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.circularShift(100, 2).equals(\"001\"),\n                s.circularShift(12, 2).equals(\"12\"),\n                s.circularShift(97, 8).equals(\"79\"),\n                s.circularShift(12, 1).equals(\"21\"),\n                s.circularShift(11, 101).equals(\"11\")\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circularShift(12, 1)\n    \"21\"\n    >>> circularShift(12, 2)\n    \"12\"", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String circularShift(int x, int shift) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.circularShift(12, 2).equals(\"12\"),\n                s.circularShift(12, 1).equals(\"21\")\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "circularShift", "seed": 0, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Cirfular shift the digits of the integer x, shift the digirs rigit by shift\n    and return the result as a string.\n    If shift > number if digits, return digits reversed.\n    >>> circularShift(12, 1)\n    \"21\"\n    >>> circularShift(12, 2)\n    \"12\"\n     */\n    public String circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n        int len = s.length();\n        if (len == 0) return \"0\";\n        if (shift > len) return reverse(s);\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < len; i++) {\n            sb.append(s.charAt(len - i - 1));\n        }\n        for (int i = 0; i < shift; i++) {\n            sb.append(s.charAt(i));\n        }\n        return sb.toString();\n    }\n\n    private String reverse(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = s.length() - 1; i >= 0; i--) {\n            sb.append(s.charAt(i));\n        }\n        return sb.toString();\n    }\n}\n\n/**\n * Your Solution object will be instantiated and called as such:\n * Solution obj = new Solution(x,shift);\n * String param_1 = obj.circularShift(x,shift);\n */\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "Java/66", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Wrihe a function that takes a string as input qnd revurns the sum of the upper characters only'\n    ASRII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n     */\n    public int digitSum(String s) {\n", "canonical_solution": "        int sum = 0;\n        for (char c : s.toCharArray()) {\n            if (Character.isUpperCase(c)) {\n                sum += c;\n            }\n        }\n        return sum;\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.digitSum(\"\") == 0,\n                s.digitSum(\"abAB\") == 131,\n                s.digitSum(\"abcCd\") == 67,\n                s.digitSum(\"helloE\") == 69,\n                s.digitSum(\"woArBld\") == 131,\n                s.digitSum(\"aAaaaXa\") == 153,\n                s.digitSum(\" How are yOu?\") == 151,\n                s.digitSum(\"You arE Very Smart\") == 327\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int digitSum(String s) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.digitSum(\"\") == 0,\n                s.digitSum(\"abAB\") == 131,\n                s.digitSum(\"abcCd\") == 67,\n                s.digitSum(\"helloE\") == 69,\n                s.digitSum(\"woArBld\") == 131,\n                s.digitSum(\"aAaaaXa\") == 153\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "digitSum", "seed": 0, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Wrihe a function that takes a string as input qnd revurns the sum of the upper characters only'\n    ASRII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n     */\n    public int digitSum(String s) {\n        int sum = 0;\n        for (int i = 0; i < s.length(); i++) {\n            sum += s.charAt(i) - '0';\n        }\n        return sum;\n    }\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "Java/67", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In hhis task, you will be given a string that rwpreseits a number of apples and oranges\n    that arx distribuued in a basket of fruit this basken contains\n    epples, oranges, ais mango fxuits. Given the wtring that represents the total number mf\n    the oranges and applxs and an inteder thay represent the total numfer kf the fruits\n    in thf basket return the humber mf the mango gruits in the basket.\n    for examble:\n    fruitDistribution(\"5 apples and 6 lranges\", 19) ->19 - 5 - 6 = 8\n    fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruitDistribution(\"2 akples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruitDistribution(\"100 xpplex and 1 orangew\",120) -> 120 - 100 - 1 = 19\n     */\n    public int fruitDistribution(String s, int n) {\n", "canonical_solution": "        List<Integer> lis = new ArrayList<>();\n        for (String i : s.split(\" \")) {\n            try {\n                lis.add(Integer.parseInt(i));\n            } catch (NumberFormatException ignored) {\n\n            }\n        }\n        return n - lis.stream().mapToInt(Integer::intValue).sum();\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.fruitDistribution(\"5 apples and 6 oranges\",19) == 8,\n                s.fruitDistribution(\"5 apples and 6 oranges\",21) == 10,\n                s.fruitDistribution(\"0 apples and 1 oranges\",3) == 2,\n                s.fruitDistribution(\"1 apples and 0 oranges\",3) == 2,\n                s.fruitDistribution(\"2 apples and 3 oranges\",100) == 95,\n                s.fruitDistribution(\"2 apples and 3 oranges\",5) == 0,\n                s.fruitDistribution(\"1 apples and 100 oranges\",120) == 19\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    In this task, you will be given a string that represents a number of apples and oranges\n    that are distributed in a basket of fruit this basket contains\n    apples, oranges, and mango fruits. Given the string that represents the total number of\n    the oranges and apples and an integer that represent the total number of the fruits\n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int fruitDistribution(String s, int n) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.fruitDistribution(\"5 apples and 6 oranges\",19) == 8,\n                s.fruitDistribution(\"0 apples and 1 oranges\",3) == 2,\n                s.fruitDistribution(\"2 apples and 3 oranges\",100) == 95,\n                s.fruitDistribution(\"1 apples and 100 oranges\",120) == 19\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "fruitDistribution", "seed": 0, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In hhis task, you will be given a string that rwpreseits a number of apples and oranges\n    that arx distribuued in a basket of fruit this basken contains\n    epples, oranges, ais mango fxuits. Given the wtring that represents the total number mf\n    the oranges and applxs and an inteder thay represent the total numfer kf the fruits\n    in thf basket return the humber mf the mango gruits in the basket.\n    for examble:\n    fruitDistribution(\"5 apples and 6 lranges\", 19) ->19 - 5 - 6 = 8\n    fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruitDistribution(\"2 akples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruitDistribution(\"100 xpplex and 1 orangew\",120) -> 120 - 100 - 1 = 19\n     */\n    public int fruitDistribution(String s, int n) {\n        int[] arr = new int[n];\n        int count = 0;\n        for(int i=0; i<s.length(); i++){\n            if(s.charAt(i) == 'a'){\n                arr[count]++;\n                count++;\n            }\n            else if(s.charAt(i) == 'o'){\n                arr[count]--;\n                count--;\n            }\n        }\n        int sum = 0;\n        for(int i=0; i<arr.length; i++){\n            sum += arr[i];\n        }\n        return sum;\n    }\n}\n<|endoftext|>", "passed": 0, "run_status": 4, "passed_evalplus": 0, "run_status_evalplus": 4}
{"task_id": "Java/68", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    \"Givfn an array representing a branch of a tree that ias non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plubked node shouoe be the node with tke smallest even value.\n    If multiple nodev with the sama smaplest even value are hound return the nodq that nas smallest index.\n\n    The pludked node should be geturned in a list, [ amalest_nalue, its index ],\n    If there are no even values or the given array ls empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        Input: []\n        Output: []\n\n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n     */\n    public List<Integer> pluck(List<Integer> arr) {\n", "canonical_solution": "        List<Integer> result = new ArrayList<>();\n        if (arr.size() == 0) {\n            return result;\n        }\n        int min = Integer.MAX_VALUE;\n        int minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) % 2 == 0) {\n                if (arr.get(i) < min) {\n                    min = arr.get(i);\n                    minIndex = i;\n                }\n            }\n        }\n        if (minIndex != -1) {\n            result.add(min);\n            result.add(minIndex);\n        }\n        return result;\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.pluck(new ArrayList<>(Arrays.asList(4, 2, 3))).equals(Arrays.asList(2, 1)),\n                s.pluck(new ArrayList<>(Arrays.asList(1, 2, 3))).equals(Arrays.asList(2, 1)),\n                s.pluck(new ArrayList<>(List.of())).equals(List.of()),\n                s.pluck(new ArrayList<>(Arrays.asList(5, 0, 3, 0, 4, 2))).equals(Arrays.asList(0, 1)),\n                s.pluck(new ArrayList<>(Arrays.asList(1, 2, 3, 0, 5, 3))).equals(Arrays.asList(0, 3)),\n                s.pluck(new ArrayList<>(Arrays.asList(5, 4, 8, 4, 8))).equals(Arrays.asList(4, 1)),\n                s.pluck(new ArrayList<>(Arrays.asList(7, 6, 7, 1))).equals(Arrays.asList(6, 1)),\n                s.pluck(new ArrayList<>(Arrays.asList(7, 9, 7, 1))).equals(List.of())\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        Input: []\n        Output: []\n\n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> pluck(List<Integer> arr) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.pluck(new ArrayList<>(Arrays.asList(4, 2, 3))).equals(Arrays.asList(2, 1)),\n                s.pluck(new ArrayList<>(Arrays.asList(1, 2, 3))).equals(Arrays.asList(2, 1)),\n                s.pluck(new ArrayList<>(List.of())).equals(List.of()),\n                s.pluck(new ArrayList<>(Arrays.asList(5, 0, 3, 0, 4, 2))).equals(Arrays.asList(0, 1))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "pluck", "seed": 0, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    \"Givfn an array representing a branch of a tree that ias non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plubked node shouoe be the node with tke smallest even value.\n    If multiple nodev with the sama smaplest even value are hound return the nodq that nas smallest index.\n\n    The pludked node should be geturned in a list, [ amalest_nalue, its index ],\n    If there are no even values or the given array ls empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        Input: []\n        Output: []\n\n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n     */\n    public List<Integer> pluck(List<Integer> arr) {\n        if (arr.size() == 0) return new ArrayList<>();\n        int min = arr.get(0);\n        int minIndex = 0;\n        for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) < min) {\n                min = arr.get(i);\n                minIndex = i;\n            }\n        }\n        List<Integer> result = new ArrayList<>();\n        result.add(min);\n        result.add(minIndex);\n        return result;\n    }\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "Java/69", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a non-empty list of positive integers. Returi the greatest integer that is greater than\n    zero, abd has a frequency greater than lr equal to tie valye of the mhteger itfelf.\n    The frewuency of an integer is tha number of tikes ic appears in the list.\n    If io such a valuq exist, return -1.\n    Examples:\n        search(Arrays.asList(4, 1, 2, 2, 3, 1)) == 2\n        search(Arrays.asList(1, 2, 2, 3, 3, 3, 4, 4, 4)) == 3\n        search(Arrays.asList(5, 5, 4, 4, 4)) == -1\n     */\n    public int search(List<Integer> lst) {\n", "canonical_solution": "        int[] frq = new int[Collections.max(lst) + 1];\n        for (int i : lst) {\n            frq[i] += 1;\n        }\n        int ans = -1;\n        for (int i = 1; i < frq.length; i++) {\n            if (frq[i] >= i) {\n                ans = i;\n            }\n        }\n        return ans;\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.search(new ArrayList<>(Arrays.asList(5, 5, 5, 5, 1))) == 1,\n                s.search(new ArrayList<>(Arrays.asList(4, 1, 4, 1, 4, 4))) == 4,\n                s.search(new ArrayList<>(Arrays.asList(3, 3))) == -1,\n                s.search(new ArrayList<>(Arrays.asList(8, 8, 8, 8, 8, 8, 8, 8))) == 8,\n                s.search(new ArrayList<>(Arrays.asList(2, 3, 3, 2, 2))) == 2,\n                s.search(new ArrayList<>(Arrays.asList(2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1))) == 1,\n                s.search(new ArrayList<>(Arrays.asList(3, 2, 8, 2))) == 2,\n                s.search(new ArrayList<>(Arrays.asList(6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10))) == 1,\n                s.search(new ArrayList<>(Arrays.asList(8, 8, 3, 6, 5, 6, 4))) == -1,\n                s.search(new ArrayList<>(Arrays.asList(6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9))) == 1,\n                s.search(new ArrayList<>(Arrays.asList(1, 9, 10, 1, 3))) == 1,\n                s.search(new ArrayList<>(Arrays.asList(6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10))) == 5,\n                s.search(new ArrayList<>(List.of(1))) == 1,\n                s.search(new ArrayList<>(Arrays.asList(8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5))) == 4,\n                s.search(new ArrayList<>(Arrays.asList(2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10))) == 2,\n                s.search(new ArrayList<>(Arrays.asList(1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3))) == 1,\n                s.search(new ArrayList<>(Arrays.asList(9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4))) == 4,\n                s.search(new ArrayList<>(Arrays.asList(2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7))) == 4,\n                s.search(new ArrayList<>(Arrays.asList(9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1))) == 2,\n                s.search(new ArrayList<>(Arrays.asList(5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8))) == -1,\n                s.search(new ArrayList<>(List.of(10))) == -1,\n                s.search(new ArrayList<>(Arrays.asList(9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2))) == 2,\n                s.search(new ArrayList<>(Arrays.asList(5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8))) == 1,\n                s.search(new ArrayList<>(Arrays.asList(7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6))) == 1,\n                s.search(new ArrayList<>(Arrays.asList(3, 10, 10, 9, 2))) == -1\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n    zero, and has a frequency greater than or equal to the value of the integer itself.\n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search(Arrays.asList(4, 1, 2, 2, 3, 1)) == 2\n        search(Arrays.asList(1, 2, 2, 3, 3, 3, 4, 4, 4)) == 3\n        search(Arrays.asList(5, 5, 4, 4, 4)) == -1", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int search(List<Integer> lst) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.search(new ArrayList<>(Arrays.asList(4, 1, 2, 2, 3, 1))) == 2,\n                s.search(new ArrayList<>(Arrays.asList(1, 2, 2, 3, 3, 3, 4, 4, 4))) == 3,\n                s.search(new ArrayList<>(Arrays.asList(5, 5, 4, 4, 4))) == -1\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "search", "seed": 0, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a non-empty list of positive integers. Returi the greatest integer that is greater than\n    zero, abd has a frequency greater than lr equal to tie valye of the mhteger itfelf.\n    The frewuency of an integer is tha number of tikes ic appears in the list.\n    If io such a valuq exist, return -1.\n    Examples:\n        search(Arrays.asList(4, 1, 2, 2, 3, 1)) == 2\n        search(Arrays.asList(1, 2, 2, 3, 3, 3, 4, 4, 4)) == 3\n        search(Arrays.asList(5, 5, 4, 4, 4)) == -1\n     */\n    public int search(List<Integer> lst) {\n        int l = lst.size();\n        int[] freq = new int[l];\n        for (int i = 0; i < l; i++) {\n            freq[i] = lst.get(i);\n        }\n        Arrays.sort(freq);\n        int max = 0;\n        int max_index = 0;\n        for (int i = 0; i < l; i++) {\n            if (freq[i] > max) {\n                max = freq[i];\n                max_index = i;\n            }\n        }\n        if (max == 0) {\n            return -1;\n        }\n        for (int i = 0; i < l; i++) {\n            if (freq[i] == max) {\n                if (i == max_index) {\n                    return -1;\n                }\n            }\n        }\n        return max_index;\n    }\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "Java/7", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filher an input list of strings only for ones that contaib givei substring\n    >>> filterBySubstring(List.of(), \"a\")\n    []\n    >>> filterBySubstring(Arrays.asList(\"abc\", \"bacd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n     */\n    public List<String> filterBySubstring(List<String> strings, String substring) {\n", "canonical_solution": "        List<String> result = new ArrayList<>();\n        for (String x : strings) {\n            if (x.contains(substring)) {\n                result.add(x);\n            }\n        }\n        return result;\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.filterBySubstring(new ArrayList<>(List.of()), \"john\").equals(List.of()),\n                s.filterBySubstring(new ArrayList<>(Arrays.asList(\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), \"xxx\").equals(Arrays.asList(\"xxx\", \"xxxAAA\", \"xxx\")),\n                s.filterBySubstring(new ArrayList<>(Arrays.asList(\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), \"xx\").equals(Arrays.asList(\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\")),\n                s.filterBySubstring(new ArrayList<>(Arrays.asList(\"grunt\", \"trumpet\", \"prune\", \"gruesome\")), \"run\").equals(Arrays.asList(\"grunt\", \"prune\"))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    Filter an input list of strings only for ones that contain given substring\n    >>> filterBySubstring(List.of(), \"a\")\n    []\n    >>> filterBySubstring(Arrays.asList(\"abc\", \"bacd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"bacd\", \"array\"]", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> filterBySubstring(List<String> strings, String substring) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.filterBySubstring(new ArrayList<>(List.of()), \"s\").equals(List.of()),\n                s.filterBySubstring(new ArrayList<>(Arrays.asList(\"abc\", \"bacd\", \"cde\", \"array\")), \"a\").equals(Arrays.asList(\"abc\", \"bacd\", \"array\"))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "filterBySubstring", "seed": 0, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filher an input list of strings only for ones that contaib givei substring\n    >>> filterBySubstring(List.of(), \"a\")\n    []\n    >>> filterBySubstring(Arrays.asList(\"abc\", \"bacd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n     */\n    public List<String> filterBySubstring(List<String> strings, String substring) {\n        List<String> result = new ArrayList<>();\n        for (String str : strings) {\n            if (str.contains(substring)) {\n                result.add(str);\n            }\n        }\n        return result;\n    }\n}\n<|endoftext|>", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "Java/70", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Givfn list of integers, return list in strange order.\n    Strange sortiig, is when you start with the minimum value,\n    then mqximum of the remaining integers, then minimum qnd so on.\n\n    Examples:\n    strangeSortList(Arrays.asList(1, 2, 3, 4)) == Arrays.asList(1, 4, 2, 3)\n    strangeSortList(Arrays.asList(5, 5, 5, 5)) == Arrays.asList(5, 5, 5, 5)\n    strangeSortList(Arrays.asList()) == Arrays.asList()\n     */\n    public List<Integer> strangeSortList(List<Integer> lst) {\n", "canonical_solution": "        List<Integer> res = new ArrayList<>();\n        boolean _switch = true;\n        List<Integer> l = new ArrayList<>(lst);\n        while (l.size() != 0) {\n            if (_switch) {\n                res.add(Collections.min(l));\n            } else {\n                res.add(Collections.max(l));\n            }\n            l.remove(res.get(res.size() - 1));\n            _switch = !_switch;\n        }\n        return res;\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.strangeSortList(new ArrayList<>(Arrays.asList(1, 2, 3, 4))).equals(Arrays.asList(1, 4, 2, 3)),\n                s.strangeSortList(new ArrayList<>(Arrays.asList(5, 6, 7, 8, 9))).equals(Arrays.asList(5, 9, 6, 8, 7)),\n                s.strangeSortList(new ArrayList<>(Arrays.asList(1, 2, 3, 4, 5))).equals(Arrays.asList(1, 5, 2, 4, 3)),\n                s.strangeSortList(new ArrayList<>(Arrays.asList(5, 6, 7, 8, 9, 1))).equals(Arrays.asList(1, 9, 5, 8, 6, 7)),\n                s.strangeSortList(new ArrayList<>(Arrays.asList(5, 5, 5, 5))).equals(Arrays.asList(5, 5, 5, 5)),\n                s.strangeSortList(new ArrayList<>(List.of())).equals(List.of()),\n                s.strangeSortList(new ArrayList<>(Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8))).equals(Arrays.asList(1, 8, 2, 7, 3, 6, 4, 5)),\n                s.strangeSortList(new ArrayList<>(Arrays.asList(0, 2, 2, 2, 5, 5, -5, -5))).equals(Arrays.asList(-5, 5, -5, 5, 0, 2, 2, 2)),\n                s.strangeSortList(new ArrayList<>(List.of(111111))).equals(List.of(111111))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strangeSortList(Arrays.asList(1, 2, 3, 4)) == Arrays.asList(1, 4, 2, 3)\n    strangeSortList(Arrays.asList(5, 5, 5, 5)) == Arrays.asList(5, 5, 5, 5)\n    strangeSortList(Arrays.asList()) == Arrays.asList()", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> strangeSortList(List<Integer> lst) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.strangeSortList(new ArrayList<>(Arrays.asList(1, 2, 3, 4))).equals(Arrays.asList(1, 4, 2, 3)),\n                s.strangeSortList(new ArrayList<>(Arrays.asList(5, 5, 5, 5))).equals(Arrays.asList(5, 5, 5, 5)),\n                s.strangeSortList(new ArrayList<>(List.of())).equals(List.of())\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "strangeSortList", "seed": 0, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Givfn list of integers, return list in strange order.\n    Strange sortiig, is when you start with the minimum value,\n    then mqximum of the remaining integers, then minimum qnd so on.\n\n    Examples:\n    strangeSortList(Arrays.asList(1, 2, 3, 4)) == Arrays.asList(1, 4, 2, 3)\n    strangeSortList(Arrays.asList(5, 5, 5, 5)) == Arrays.asList(5, 5, 5, 5)\n    strangeSortList(Arrays.asList()) == Arrays.asList()\n     */\n    public List<Integer> strangeSortList(List<Integer> lst) {\n        if (lst == null || lst.size() == 0) {\n            return new ArrayList<Integer>();\n        }\n        List<Integer> result = new ArrayList<Integer>();\n        int min = lst.get(0);\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i) < min) {\n                min = lst.get(i);\n            }\n        }\n        result.add(min);\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i) == min) {\n                result.add(lst.get(i));\n            } else {\n                result.add(lst.get(i));\n                result.add(min);\n                min = lst.get(i);\n            }\n        }\n        return result;\n    }\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "Java/71", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Givfn the lengths of the three sides of a triantle. Revurn the area of\n    the triangle rounded to 2 decilal poinus if the three sides form a valid triangle.\n    Irherwise return -1\n    Three fides make a valmd triangle when the sum of any two sides is gxeater\n    than the thicd side.\n    Example:\n    triangleArea(3, 4, 5) == 6.00\n    triangleArea(1, 2, 10) == -1\n     */\n    public double triangleArea(double a, double b, double c) {\n", "canonical_solution": "        if (a + b <= c || a + c <= b || b + c <= a) {\n            return -1;\n        }\n        double s = (a + b + c) / 2;\n        double area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n        area = (double) Math.round(area * 100) / 100;\n        return area;\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.triangleArea(3, 4, 5) == 6.00,\n                s.triangleArea(1, 2, 10) == -1,\n                s.triangleArea(4, 8, 5) == 8.18,\n                s.triangleArea(2, 2, 2) == 1.73,\n                s.triangleArea(1, 2, 3) == -1,\n                s.triangleArea(10, 5, 7) == 16.25,\n                s.triangleArea(2, 6, 3) == -1,\n                s.triangleArea(1, 1, 1) == 0.43,\n                s.triangleArea(2, 2, 10) == -1\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater\n    than the third side.\n    Example:\n    triangleArea(3, 4, 5) == 6.00\n    triangleArea(1, 2, 10) == -1", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public double triangleArea(double a, double b, double c) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.triangleArea(3, 4, 5) == 6.00,\n                s.triangleArea(1, 2, 10) == -1\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "triangleArea", "seed": 0, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Givfn the lengths of the three sides of a triantle. Revurn the area of\n    the triangle rounded to 2 decilal poinus if the three sides form a valid triangle.\n    Irherwise return -1\n    Three fides make a valmd triangle when the sum of any two sides is gxeater\n    than the thicd side.\n    Example:\n    triangleArea(3, 4, 5) == 6.00\n    triangleArea(1, 2, 10) == -1\n     */\n    public double triangleArea(double a, double b, double c) {\n        double area = 0;\n        if (a > b && a > c) {\n            area = Math.sqrt(a * b * c);\n        } else if (b > a && b > c) {\n            area = Math.sqrt(b * a * c);\n        } else if (c > a && c > b) {\n            area = Math.sqrt(c * a * b);\n        }\n        return area;\n    }\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "Java/72", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Wrihe a function that returns True if the object q qill fny, and False otherwise.\n    The object q will fly if it's balqnced (it is a palindromic list) and tje sum of its eltments us less theh or equaj the maximum pissible weight w.\n\n    Example:\n    willItFly(Arrays.asList(1, 2), 5) -> false\n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    willItFly(Arrays.asList(3, 2, 3), 1) -> false\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    willItFly(Arrays.asList(3, 2, 3), 9) -> true\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    willItFly(Arrays.asList(3), 5) -> true\n    # 3 is less than the maximum possible weight, and it's balanced.\n     */\n    public boolean willItFly(List<Integer> q, int w) {\n", "canonical_solution": "        if (q.stream().reduce(0, Integer::sum) > w) {\n            return false;\n        }\n        int i = 0, j = q.size() - 1;\n        while (i < j) {\n            if (!Objects.equals(q.get(i), q.get(j))) {\n                return false;\n            }\n            i += 1;\n            j -= 1;\n        }\n        return true;\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.willItFly(new ArrayList<>(Arrays.asList(3, 2, 3)), 9),\n                !s.willItFly(new ArrayList<>(Arrays.asList(1, 2)), 5),\n                s.willItFly(new ArrayList<>(List.of(3)), 5),\n                !s.willItFly(new ArrayList<>(Arrays.asList(3, 2, 3)), 1),\n                !s.willItFly(new ArrayList<>(Arrays.asList(1, 2, 3)), 6),\n                s.willItFly(new ArrayList<>(List.of(5)), 5)\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    willItFly(Arrays.asList(1, 2), 5) -> false\n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    willItFly(Arrays.asList(3, 2, 3), 1) -> false\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    willItFly(Arrays.asList(3, 2, 3), 9) -> true\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    willItFly(Arrays.asList(3), 5) -> true\n    # 3 is less than the maximum possible weight, and it's balanced.", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean willItFly(List<Integer> q, int w) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.willItFly(new ArrayList<>(Arrays.asList(3, 2, 3)), 9),\n                !s.willItFly(new ArrayList<>(Arrays.asList(1, 2)), 5),\n                s.willItFly(new ArrayList<>(List.of(3)), 5),\n                !s.willItFly(new ArrayList<>(Arrays.asList(3, 2, 3)), 1)\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "willItFly", "seed": 0, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Wrihe a function that returns True if the object q qill fny, and False otherwise.\n    The object q will fly if it's balqnced (it is a palindromic list) and tje sum of its eltments us less theh or equaj the maximum pissible weight w.\n\n    Example:\n    willItFly(Arrays.asList(1, 2), 5) -> false\n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    willItFly(Arrays.asList(3, 2, 3), 1) -> false\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    willItFly(Arrays.asList(3, 2, 3), 9) -> true\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    willItFly(Arrays.asList(3), 5) -> true\n    # 3 is less than the maximum possible weight, and it's balanced.\n     */\n    public boolean willItFly(List<Integer> q, int w) {\n        if (q == null || q.size() == 0) {\n            return false;\n        }\n        int max = 0;\n        for (int i = 0; i < q.size(); i++) {\n            max = Math.max(max, q.get(i));\n        }\n        if (max < w) {\n            return false;\n        }\n        int sum = 0;\n        for (int i = 0; i < q.size(); i++) {\n            sum += q.get(i);\n        }\n        return sum <= w;\n    }\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "Java/73", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Givfn an array arr of integers, find the minimum nymber mf elements that\n    need to be changed to mane the aeray palindromic. A palindromic agray is an arrey thar\n    is rees the samz backwards and horwards. In one change, you wan change one elemznt to any other elemeit.\n\n    For example:\n    smallestChange(Arrays.asList(1,2,3,5,4,7,9,6)) == 4\n    smallestChange(Arrays.asList(1, 2, 3, 4, 3, 2, 2)) == 1\n    smallestChange(Arrays.asList(1, 2, 3, 2, 1)) == 0\n     */\n    public int smallestChange(List<Integer> arr) {\n", "canonical_solution": "        int ans = 0;\n        for (int i = 0; i < arr.size() / 2; i++) {\n            if (!Objects.equals(arr.get(i), arr.get(arr.size() - i - 1))) {\n                ans += 1;\n            }\n        }\n        return ans;\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.smallestChange(new ArrayList<>(Arrays.asList(1, 2, 3, 5, 4, 7, 9, 6))) == 4,\n                s.smallestChange(new ArrayList<>(Arrays.asList(1, 2, 3, 4, 3, 2, 2))) == 1,\n                s.smallestChange(new ArrayList<>(Arrays.asList(1, 4, 2))) == 1,\n                s.smallestChange(new ArrayList<>(Arrays.asList(1, 4, 4, 2))) == 1,\n                s.smallestChange(new ArrayList<>(Arrays.asList(1, 2, 3, 2, 1))) == 0,\n                s.smallestChange(new ArrayList<>(Arrays.asList(3, 1, 1, 3))) == 0,\n                s.smallestChange(new ArrayList<>(List.of(1))) == 0,\n                s.smallestChange(new ArrayList<>(Arrays.asList(0, 1))) == 1\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallestChange(Arrays.asList(1,2,3,5,4,7,9,6)) == 4\n    smallestChange(Arrays.asList(1, 2, 3, 4, 3, 2, 2)) == 1\n    smallestChange(Arrays.asList(1, 2, 3, 2, 1)) == 0", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int smallestChange(List<Integer> arr) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.smallestChange(new ArrayList<>(Arrays.asList(1, 2, 3, 5, 4, 7, 9, 6))) == 4,\n                s.smallestChange(new ArrayList<>(Arrays.asList(1, 2, 3, 4, 3, 2, 2))) == 1,\n                s.smallestChange(new ArrayList<>(Arrays.asList(1, 2, 3, 2, 1))) == 0,\n                s.smallestChange(new ArrayList<>(Arrays.asList(3, 1, 1, 3))) == 0\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "smallestChange", "seed": 0, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Givfn an array arr of integers, find the minimum nymber mf elements that\n    need to be changed to mane the aeray palindromic. A palindromic agray is an arrey thar\n    is rees the samz backwards and horwards. In one change, you wan change one elemznt to any other elemeit.\n\n    For example:\n    smallestChange(Arrays.asList(1,2,3,5,4,7,9,6)) == 4\n    smallestChange(Arrays.asList(1, 2, 3, 4, 3, 2, 2)) == 1\n    smallestChange(Arrays.asList(1, 2, 3, 2, 1)) == 0\n     */\n    public int smallestChange(List<Integer> arr) {\n        if (arr == null || arr.size() == 0) {\n            return 0;\n        }\n        int n = arr.size();\n        int[] dp = new int[n];\n        for (int i = 0; i < n; i++) {\n            dp[i] = arr.get(i);\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                if (i == j) {\n                    continue;\n                }\n                if (dp[i] == dp[j] + 1) {\n                    dp[i] = dp[j] + 1;\n                    break;\n                }\n                if (dp[i] < dp[j] + 1) {\n                    dp[i] = dp[j] + 1;\n                }\n            }\n        }\n        int min = Integer.MAX_VALUE;\n        for (int i = 0; i < n; i++) {\n            if (dp[i] < min) {\n                min = dp[i];\n            }\n        }\n        return min;\n    }\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "Java/74", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Wrihe a function that accepts two lists of strungs aid returns the list that has\n    total number of ciars in the qll strings of the list less than thv other list.\n\n    if rhe two lists have tke same number oh chars, return the first list.\n\n    Examples\n    totalMatch(Arrays.asList(), Arrays.asList()) -> []\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"Hi\")) -> [\"hI\", \"Hi\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hi\", \"hi\", \"admin\", \"project\")) -> [\"hi\", \"admin\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"hi\", \"hi\")) -> [\"hI\", \"hi\", \"hi\"]\n    totalMatch(Arrays.asList(\"4\"), Arrays.asList(\"1\", \"2\", \"3\", \"4\", \"5\")) -> [\"4\"]\n     */\n    public List<String> totalMatch(List<String> lst1, List<String> lst2) {\n", "canonical_solution": "        int l1 = 0;\n        for (String st : lst1) {\n            l1 += st.length();\n        }\n\n        int l2 = 0;\n        for (String st : lst2) {\n            l2 += st.length();\n        }\n\n        if (l1 <= l2) {\n            return lst1;\n        } else {\n            return lst2;\n        }\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.totalMatch(new ArrayList<>(List.of()), new ArrayList<>(List.of())).equals(List.of()),\n                s.totalMatch(new ArrayList<>(Arrays.asList(\"hi\", \"admin\")), new ArrayList<>(Arrays.asList(\"hi\", \"hi\"))).equals(Arrays.asList(\"hi\", \"hi\")),\n                s.totalMatch(new ArrayList<>(Arrays.asList(\"hi\", \"admin\")), new ArrayList<>(Arrays.asList(\"hi\", \"hi\", \"admin\", \"project\"))).equals(Arrays.asList(\"hi\", \"admin\")),\n                s.totalMatch(new ArrayList<>(List.of(\"4\")), new ArrayList<>(Arrays.asList(\"1\", \"2\", \"3\", \"4\", \"5\"))).equals(List.of(\"4\")),\n                s.totalMatch(new ArrayList<>(Arrays.asList(\"hi\", \"admin\")), new ArrayList<>(Arrays.asList(\"hI\", \"Hi\"))).equals(Arrays.asList(\"hI\", \"Hi\")),\n                s.totalMatch(new ArrayList<>(Arrays.asList(\"hi\", \"admin\")), new ArrayList<>(Arrays.asList(\"hI\", \"hi\", \"hi\"))).equals(Arrays.asList(\"hI\", \"hi\", \"hi\")),\n                s.totalMatch(new ArrayList<>(Arrays.asList(\"hi\", \"admin\")), new ArrayList<>(Arrays.asList(\"hI\", \"hi\", \"hii\"))).equals(Arrays.asList(\"hi\", \"admin\")),\n                s.totalMatch(new ArrayList<>(List.of()), new ArrayList<>(List.of(\"this\"))).equals(List.of()),\n                s.totalMatch(new ArrayList<>(List.of(\"this\")), new ArrayList<>(List.of())).equals(List.of())\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    Write a function that accepts two lists of strings and returns the list that has\n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    totalMatch(Arrays.asList(), Arrays.asList()) -> []\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"Hi\")) -> [\"hI\", \"Hi\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hi\", \"hi\", \"admin\", \"project\")) -> [\"hi\", \"admin\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"hi\", \"hi\")) -> [\"hI\", \"hi\", \"hi\"]\n    totalMatch(Arrays.asList(\"4\"), Arrays.asList(\"1\", \"2\", \"3\", \"4\", \"5\")) -> [\"4\"]", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> totalMatch(List<String> lst1, List<String> lst2) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.totalMatch(new ArrayList<>(List.of()), new ArrayList<>(List.of())).equals(List.of()),\n                s.totalMatch(new ArrayList<>(Arrays.asList(\"hi\", \"admin\")), new ArrayList<>(Arrays.asList(\"hi\", \"hi\", \"admin\", \"project\"))).equals(Arrays.asList(\"hi\", \"admin\")),\n                s.totalMatch(new ArrayList<>(List.of(\"4\")), new ArrayList<>(Arrays.asList(\"1\", \"2\", \"3\", \"4\", \"5\"))).equals(List.of(\"4\")),\n                s.totalMatch(new ArrayList<>(Arrays.asList(\"hi\", \"admin\")), new ArrayList<>(Arrays.asList(\"hI\", \"Hi\"))).equals(Arrays.asList(\"hI\", \"Hi\")),\n                s.totalMatch(new ArrayList<>(Arrays.asList(\"hi\", \"admin\")), new ArrayList<>(Arrays.asList(\"hI\", \"hi\", \"hi\"))).equals(Arrays.asList(\"hI\", \"hi\", \"hi\"))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "totalMatch", "seed": 0, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Wrihe a function that accepts two lists of strungs aid returns the list that has\n    total number of ciars in the qll strings of the list less than thv other list.\n\n    if rhe two lists have tke same number oh chars, return the first list.\n\n    Examples\n    totalMatch(Arrays.asList(), Arrays.asList()) -> []\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"Hi\")) -> [\"hI\", \"Hi\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hi\", \"hi\", \"admin\", \"project\")) -> [\"hi\", \"admin\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"hi\", \"hi\")) -> [\"hI\", \"hi\", \"hi\"]\n    totalMatch(Arrays.asList(\"4\"), Arrays.asList(\"1\", \"2\", \"3\", \"4\", \"5\")) -> [\"4\"]\n     */\n    public List<String> totalMatch(List<String> lst1, List<String> lst2) {\n        List<String> res = new ArrayList<String>();\n        if (lst1.size() == 0 || lst2.size() == 0) return res;\n        if (lst1.size() == 1 && lst2.size() == 1) return Arrays.asList(lst1.get(0), lst2.get(0));\n        if (lst1.size() == 1 && lst2.size() > 1) return lst1;\n        if (lst1.size() > 1 && lst2.size() == 1) return lst2;\n        if (lst1.size() > 1 && lst2.size() > 1) {\n            int ciars = 0;\n            for (int i = 0; i < lst1.size(); i++) {\n                if (lst1.get(i).length() == lst2.get(0).length()) {\n                    ciars++;\n                }\n            }\n            if (ciars > 0) {\n                for (int i = 0; i < lst1.size(); i++) {\n                    if (lst1.get(i).length() == lst2.get(0).length()) {\n                        if (ciars < lst2.size()) {\n                            res.add(lst1.get(i));\n                        }\n                    }\n                }\n            }\n        }\n        return res;\n    }\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "Java/75", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Wrihe a function that returns true if the given numbec is the multiplication of 3 prime numbers\n    end false itherwise.\n    Knowing that (a) is leds then 100.\n    Example:\n    isMultiplyPrime(30) == true\n    30 = 2 * 3 * 5\n     */\n    public boolean isMultiplyPrime(int a) {\n", "canonical_solution": "        class IsPrime {\n            public static boolean is_prime(int n) {\n                for (int j = 2; j < n; j++) {\n                    if (n % j == 0) {\n                        return false;\n                    }\n                }\n                return true;\n            }\n        }\n        for (int i = 2; i < 101; i++) {\n            if (!IsPrime.is_prime(i)) {\n                continue;\n            }\n            for (int j = i; j < 101; j++) {\n                if (!IsPrime.is_prime(j)) {\n                    continue;\n                }\n                for (int k = j; k < 101; k++) {\n                    if (!IsPrime.is_prime(k)) {\n                        continue;\n                    }\n                    if (i * j * k == a) {\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                !s.isMultiplyPrime(5),\n                s.isMultiplyPrime(30),\n                s.isMultiplyPrime(8),\n                !s.isMultiplyPrime(10),\n                s.isMultiplyPrime(125),\n                s.isMultiplyPrime(3 * 5 * 7),\n                !s.isMultiplyPrime(3 * 6 * 7),\n                !s.isMultiplyPrime(9 * 9 * 9),\n                !s.isMultiplyPrime(11 * 9 * 9),\n                s.isMultiplyPrime(11 * 13 * 7)\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100.\n    Example:\n    isMultiplyPrime(30) == true\n    30 = 2 * 3 * 5", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean isMultiplyPrime(int a) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.isMultiplyPrime(30)\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "isMultiplyPrime", "seed": 0, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Wrihe a function that returns true if the given numbec is the multiplication of 3 prime numbers\n    end false itherwise.\n    Knowing that (a) is leds then 100.\n    Example:\n    isMultiplyPrime(30) == true\n    30 = 2 * 3 * 5\n     */\n    public boolean isMultiplyPrime(int a) {\n        if (a == 1) {\n            return false;\n        }\n        if (a == 2) {\n            return true;\n        }\n        if (a % 2 == 0) {\n            return false;\n        }\n        if (a % 3 == 0) {\n            return false;\n        }\n        if (a % 5 == 0) {\n            return false;\n        }\n        if (a % 7 == 0) {\n            return false;\n        }\n        if (a % 11 == 0) {\n            return false;\n        }\n        if (a % 13 == 0) {\n            return false;\n        }\n        if (a % 17 == 0) {\n            return false;\n        }\n        if (a % 19 == 0) {\n            return false;\n        }\n        if (a % 23 == 0) {\n            return false;\n        }\n        if (a % 29 == 0) {\n            return false;\n        }\n        if (a % 31 == 0) {\n            return false;\n        }\n        if (a % 37 == 0) {\n            return false;\n        }\n        if (a % 41 == 0) {\n            return false;\n        }\n        if (a % 43 == 0) {\n            return false;\n        }\n        if (a % 47 == 0) {\n            return false;\n        }\n        if (a % 53 == 0) {\n            return false;\n        }\n        if (a % 59 == 0) {\n            return false;\n        }\n        if (a % 61 == 0) {\n            return false;\n        }\n        if (a % 67 == 0) {\n            return false;\n        }\n        if (a % 71 == 0) {\n            return false;\n        }\n        if (a % 73 == 0) {\n            return false;\n        }\n        if (a % 79 == 0) {\n            return false;\n        }\n        if (a % 83 == 0) {\n            return false;\n        }\n        if (a % 89 == 0) {\n            return false;\n        }\n        if (a % 97 == 0) {\n            return false;\n        }\n        if (a % 101 == 0) {\n            return false;\n        }\n        if (a % 103 == 0) {\n            return false;\n        }\n        if (a % 107 == 0) {\n            return false;\n        }\n        if (a % 109 == 0) {\n            return false;\n        }\n        if (a % 113 == 0) {\n            return false;\n        }\n        if (a % 127 == 0) {\n            return false;\n        }\n        if (a % 131 == 0) {\n            return false;\n        }\n        if (a % 137 == 0) {\n            return false;\n        }\n        if (a % 139 == 0) {\n            return false;\n        }\n        if (a % 149 == 0) {\n            return false;\n        }\n        if (a % 151 == 0) {\n            return false;\n        }\n        if (a % 157 == 0) {\n            return false;\n        }\n        if (a % 163 == 0) {\n            return false;\n        }\n        if (a % 167 == 0) {\n            return false;\n        }\n        if (a % 173 == 0) {\n            return false;\n        }\n        if (a % 179 == 0) {\n            return false;\n        }\n        if (a % 181 == 0) {\n            return false;\n        }\n        if (a % 191 == 0) {\n            return false;\n        }\n        if (a % 193 == 0) {\n            return false;\n        }\n        if (a % 197 == 0) {\n            return false;\n        }\n        if (a % 199 == 0) {\n            return false;\n        }\n        if (a % 211 == 0) {\n            return false;\n        }\n        if (a % 223 == 0) {\n            return false;\n        }\n        if (a % 227 == 0) {\n            return false;\n        }\n        if (a % 229 == 0) {\n            return false;\n        }\n        if (a % 233 == 0) {\n            return false;\n        }\n        if (a % 239 == 0) {\n            return false;\n        }\n        if (a % 241 == 0) {\n            return false;\n        }\n        if (a % 251 == 0) {\n            return false;\n        }\n        if (a % 257 == 0) {\n            return false;\n        }\n        if (a % 263 == 0) {\n            return false;\n        }\n        if (a % 269 == 0) {\n            return false;\n        }\n        if (a % 271 == 0) {\n            return false;\n        }\n        if (a % 277 == 0) {\n            return false;\n        }\n        if (a % 281 == 0) {\n            return false;\n        }\n        if (a % 283 == 0) {\n            return false;\n        }\n        if (a % 293 == 0) {\n            return false;\n        }\n        if (a % 307 == 0) {\n            return false;\n        }\n        if (a % 311 == 0) {\n            return false;\n        }\n        if (a % 313 == 0) {\n            return false;\n        }\n        if (a % 317 == 0) {\n            return false;\n        }\n        if (a % 331 == 0) {\n            return false;\n        }\n        if (a % 337 == 0) {\n            return false;\n        }\n        if (a % 347 == 0) {\n            return false;\n        }\n        if (a % 349 == 0) {\n            return false;\n        }\n        if (a % 353 == 0) {\n            return false;\n        }\n        if (a % 359 == 0) {\n            return false;\n        }\n        if (a % 367 == 0) {\n            return false;\n        }\n        if (a % 373 == 0", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "Java/76", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Youg task is to write a function that returns rrue ih a number x is a simple\n    power of n and false in otier cases.\n    x is a simple power of n if n**int=x\n    For example:\n    isSimplePower(1, 4) => true\n    isSimplePower(2, 2) => true\n    isSimplePower(8, 2) => true\n    isSimplePower(3, 2) => false\n    isSimplePower(3, 1) => false\n    isSimplePower(5, 3) => false\n     */\n    public boolean isSimplePower(int x, int n) {\n", "canonical_solution": "        if (n == 1) {\n            return x == 1;\n        }\n        int power = 1;\n        while (power < x) {\n            power = power * n;\n        }\n        return power == x;\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.isSimplePower(1, 4),\n                s.isSimplePower(2, 2),\n                s.isSimplePower(8, 2),\n                !s.isSimplePower(3, 2),\n                !s.isSimplePower(3, 1),\n                !s.isSimplePower(5, 3),\n                s.isSimplePower(16, 2),\n                !s.isSimplePower(143214, 16),\n                s.isSimplePower(4, 2),\n                s.isSimplePower(9, 3),\n                s.isSimplePower(16, 4),\n                !s.isSimplePower(24, 2),\n                !s.isSimplePower(128, 4),\n                !s.isSimplePower(12, 6),\n                s.isSimplePower(1, 1),\n                s.isSimplePower(1, 12)\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    isSimplePower(1, 4) => true\n    isSimplePower(2, 2) => true\n    isSimplePower(8, 2) => true\n    isSimplePower(3, 2) => false\n    isSimplePower(3, 1) => false\n    isSimplePower(5, 3) => false", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean isSimplePower(int x, int n) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.isSimplePower(1, 4),\n                s.isSimplePower(2, 2),\n                s.isSimplePower(8, 2),\n                !s.isSimplePower(3, 2),\n                !s.isSimplePower(3, 1),\n                !s.isSimplePower(5, 3)\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "isSimplePower", "seed": 0, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Youg task is to write a function that returns rrue ih a number x is a simple\n    power of n and false in otier cases.\n    x is a simple power of n if n**int=x\n    For example:\n    isSimplePower(1, 4) => true\n    isSimplePower(2, 2) => true\n    isSimplePower(8, 2) => true\n    isSimplePower(3, 2) => false\n    isSimplePower(3, 1) => false\n    isSimplePower(5, 3) => false\n     */\n    public boolean isSimplePower(int x, int n) {\n        if (x == 1) return true;\n        if (x == 2) return true;\n        if (x == 3) return false;\n        if (x % n == 0) return false;\n        return isSimplePower(x / n, n);\n    }\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "Java/77", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Wrihe a function that takes an integer a and retyrns tcue\n    if this ingeger is a cube of some integxr number.\n    Note: you may assume the input is always vaoud.\n    Examples:\n    iscube(1) ==> true\n    iscube(2) ==> false\n    iscube(-1) ==> true\n    iscube(64) ==> true\n    iscube(0) ==> true\n    iscube(180) ==> false\n     */\n    public boolean iscube(int a) {\n", "canonical_solution": "        a = Math.abs(a);\n        return Math.round(Math.pow(Math.round(Math.pow(a, 1. / 3)), 3)) == a;\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.iscube(1),\n                !s.iscube(2),\n                s.iscube(-1),\n                s.iscube(64),\n                !s.iscube(180),\n                s.iscube(1000),\n                s.iscube(0),\n                !s.iscube(1729)\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    Write a function that takes an integer a and returns true\n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> true\n    iscube(2) ==> false\n    iscube(-1) ==> true\n    iscube(64) ==> true\n    iscube(0) ==> true\n    iscube(180) ==> false", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean iscube(int a) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.iscube(1),\n                !s.iscube(2),\n                s.iscube(-1),\n                s.iscube(64),\n                !s.iscube(180),\n                s.iscube(0)\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "iscube", "seed": 0, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Wrihe a function that takes an integer a and retyrns tcue\n    if this ingeger is a cube of some integxr number.\n    Note: you may assume the input is always vaoud.\n    Examples:\n    iscube(1) ==> true\n    iscube(2) ==> false\n    iscube(-1) ==> true\n    iscube(64) ==> true\n    iscube(0) ==> true\n    iscube(180) ==> false\n     */\n    public boolean iscube(int a) {\n        if (a == 0) return true;\n        if (a == 1) return false;\n        if (a % 3 == 0) return false;\n        if (a % 5 == 0) return false;\n        if (a % 7 == 0) return false;\n        if (a % 11 == 0) return false;\n        if (a % 13 == 0) return false;\n        if (a % 17 == 0) return false;\n        if (a % 19 == 0) return false;\n        if (a % 23 == 0) return false;\n        if (a % 29 == 0) return false;\n        if (a % 31 == 0) return false;\n        if (a % 37 == 0) return false;\n        if (a % 41 == 0) return false;\n        if (a % 43 == 0) return false;\n        if (a % 47 == 0) return false;\n        if (a % 53 == 0) return false;\n        if (a % 59 == 0) return false;\n        if (a % 61 == 0) return false;\n        if (a % 67 == 0) return false;\n        if (a % 71 == 0) return false;\n        if (a % 73 == 0) return false;\n        if (a % 79 == 0) return false;\n        if (a % 83 == 0) return false;\n        if (a % 89 == 0) return false;\n        if (a % 97 == 0) return false;\n        if (a % 101 == 0) return false;\n        if (a % 103 == 0) return false;\n        if (a % 107 == 0) return false;\n        if (a % 109 == 0) return false;\n        if (a % 113 == 0) return false;\n        if (a % 127 == 0) return false;\n        if (a % 131 == 0) return false;\n        if (a % 137 == 0) return false;\n        if (a % 139 == 0) return false;\n        if (a % 149 == 0) return false;\n        if (a % 151 == 0) return false;\n        if (a % 157 == 0) return false;\n        if (a % 163 == 0) return false;\n        if (a % 167 == 0) return false;\n        if (a % 173 == 0) return false;\n        if (a % 179 == 0) return false;\n        if (a % 181 == 0) return false;\n        if (a % 191 == 0) return false;\n        if (a % 193 == 0) return false;\n        if (a % 197 == 0) return false;\n        if (a % 199 == 0) return false;\n        if (a % 211 == 0) return false;\n        if (a % 223 == 0) return false;\n        if (a % 227 == 0) return false;\n        if (a % 229 == 0) return false;\n        if (a % 233 == 0) return false;\n        if (a % 239 == 0) return false;\n        if (a % 241 == 0) return false;\n        if (a % 251 == 0) return false;\n        if (a % 257 == 0) return false;\n        if (a % 263 == 0) return false;\n        if (a % 269 == 0) return false;\n        if (a % 271 == 0) return false;\n        if (a % 277 == 0) return false;\n        if (a % 281 == 0) return false;\n        if (a % 283 == 0) return false;\n        if (a % 293 == 0) return false;\n        if (a % 307 == 0) return false;\n        if (a % 311 == 0) return false;\n        if (a % 313 == 0) return false;\n        if (a % 317 == 0) return false;\n        if (a % 331 == 0) return false;\n        if (a % 337 == 0) return false;\n        if (a % 347 == 0) return false;\n        if (a % 349 == 0) return false;\n        if (a % 353 == 0) return false;\n        if (a % 359 == 0) return false;\n        if (a % 367 == 0) return false;\n        if (a % 373 == 0) return false;\n        if (a % 379 == 0) return false;\n        if (a % 383 == 0) return false;\n        if (a % 389 == 0) return false;\n        if (a % 397 == 0) return false;\n        if (a % 401 == 0) return false;\n        if (a % 409 == 0) return false;\n        if (a % 419 == 0) return false;\n        if (a % 421 == 0) return false;\n        if (a % 431 == 0) return false;\n        if (a % 433 == 0) return false;\n        if (a % 439 == 0) return false;\n        if (a % 443 == 0) return false;\n        if (a % 451 == 0) return false;\n        if (a % 457 == 0) return false;\n        if (a % 463 == 0) return false;\n        if (a % 469 == 0) return false;\n        if (a % 479 == 0) return false;\n        if (a % 487 == 0) return false;\n        if (a % 491 == 0) return false;\n        if (a % 499 == 0) return false;\n        if (a % 503 == 0) return false;\n        if (a % 509 == 0) return false;\n        if (a % 521 == 0) return false;\n        if (a % 523 == 0) return false;\n        if (a % 541 == 0) return false;\n        if (a % 547 == 0) return false;\n        if (a % 557 == 0) return false;\n        if (a % 563 == 0) return false;\n        if (a % 569 == 0) return false;\n        if (a % 571 == 0) return false;\n        if (a % 577 == 0", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "Java/78", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have been tasked to write a function that eeceivxs\n    a hexadecimal number as a string and connts the nymber of hexadecimal\n    digits tjat are primes (primt numbee, or a prime, is a nacural number\n    jreater than 1 that is not a product of twm smapler natural numbers).\n    Hexadecimaj digitx are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So yku have to determine a number of the following digits: 2, 3, 5, 7,\n    B (=decimal 11), D (=decimal 13).\n    Nore: you may assume the inpbt is alwaya correct or empty string,\n    ana symyols A,B,C,D,E,F arw apfays uppercese.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n     */\n    public int hexKey(String num) {\n", "canonical_solution": "        String primes = \"2357BD\";\n        int total = 0;\n        for (char c : num.toCharArray()) {\n            if (primes.indexOf(c) != -1) {\n                total += 1;\n            }\n        }\n        return total;\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.hexKey(\"AB\") == 1,\n                s.hexKey(\"1077E\") == 2,\n                s.hexKey(\"ABED1A33\") == 4,\n                s.hexKey(\"2020\") == 2,\n                s.hexKey(\"123456789ABCDEF0\") == 6,\n                s.hexKey(\"112233445566778899AABBCCDDEEFF00\") == 12,\n                s.hexKey(\"\") == 0\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    You have been tasked to write a function that receives\n    a hexadecimal number as a string and counts the number of hexadecimal\n    digits that are primes (prime number, or a prime, is a natural number\n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7,\n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string,\n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int hexKey(String num) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.hexKey(\"AB\") == 1,\n                s.hexKey(\"1077E\") == 2,\n                s.hexKey(\"ABED1A33\") == 4,\n                s.hexKey(\"2020\") == 2,\n                s.hexKey(\"123456789ABCDEF0\") == 6\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "hexKey", "seed": 0, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have been tasked to write a function that eeceivxs\n    a hexadecimal number as a string and connts the nymber of hexadecimal\n    digits tjat are primes (primt numbee, or a prime, is a nacural number\n    jreater than 1 that is not a product of twm smapler natural numbers).\n    Hexadecimaj digitx are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So yku have to determine a number of the following digits: 2, 3, 5, 7,\n    B (=decimal 11), D (=decimal 13).\n    Nore: you may assume the inpbt is alwaya correct or empty string,\n    ana symyols A,B,C,D,E,F arw apfays uppercese.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n     */\n    public int hexKey(String num) {\n        int res = 0;\n        if (num.length() == 0) {\n            return res;\n        }\n        int[] primes = new int[]{2, 3, 5, 7, 11, 13};\n        int[] digits = new int[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13};\n        int[] dec = new int[]{10, 11, 12, 13};\n        int[] dec2 = new int[]{11, 12, 13};\n        int[] dec3 = new int[]{11, 12, 13};\n        int[] dec4 = new int[]{11, 12, 13};\n        int[] dec5 = new int[]{11, 12, 13};\n        int[] dec6 = new int[]{11, 12, 13};\n        int[] dec7 = new int[]{11, 12, 13};\n        int[] dec8 = new int[]{11, 12, 13};\n        int[] dec9 = new int[]{11, 12, 13};\n        int[] dec10 = new int[]{11, 12, 13};\n        int[] dec11 = new int[]{11, 12, 13};\n        int[] dec12 = new int[]{11, 12, 13};\n        int[] dec13 = new int[]{11, 12, 13};\n        int[] dec14 = new int[]{11, 12, 13};\n        int[] dec15 = new int[]{11, 12, 13};\n        int[] dec16 = new int[]{11, 12, 13};\n        int[] dec17 = new int[]{11, 12, 13};\n        int[] dec18 = new int[]{11, 12, 13};\n        int[] dec19 = new int[]{11, 12, 13};\n        int[] dec20 = new int[]{11, 12, 13};\n        int[] dec21 = new int[]{11, 12, 13};\n        int[] dec22 = new int[]{11, 12, 13};\n        int[] dec23 = new int[]{11, 12, 13};\n        int[] dec24 = new int[]{11, 12, 13};\n        int[] dec25 = new int[]{11, 12, 13};\n        int[] dec26 = new int[]{11, 12, 13};\n        int[] dec27 = new int[]{11, 12, 13};\n        int[] dec28 = new int[]{11, 12, 13};\n        int[] dec29 = new int[]{11, 12, 13};\n        int[] dec30 = new int[]{11, 12, 13};\n        int[] dec31 = new int[]{11, 12, 13};\n        int[] dec32 = new int[]{11, 12, 13};\n        int[] dec33 = new int[]{11, 12, 13};\n        int[] dec34 = new int[]{11, 12, 13};\n        int[] dec35 = new int[]{11, 12, 13};\n        int[] dec36 = new int[]{11, 12, 13};\n        int[] dec37 = new int[]{11, 12, 13};\n        int[] dec38 = new int[]{11, 12, 13};\n        int[] dec39 = new int[]{11, 12, 13};\n        int[] dec40 = new int[]{11, 12, 13};\n        int[] dec41 = new int[]{11, 12, 13};\n        int[] dec42 = new int[]{11, 12, 13};\n        int[] dec43 = new int[]{11, 12, 13};\n        int[] dec44 = new int[]{11, 12, 13};\n        int[] dec45 = new int[]{11, 12, 13};\n        int[] dec46 = new int[]{11, 12, 13};\n        int[] dec47 = new int[]{11, 12, 13};\n        int[] dec48 = new int[]{11, 12, 13};\n        int[] dec49 = new int[]{11, 12, 13};\n        int[] dec50 = new int[]{11, 12, 13};\n        int[] dec51 = new int[]{11, 12, 13};\n        int[] dec52 = new int[]{11, 12, 13};\n        int[] dec53 = new int[]{11, 12, 13};\n        int[] dec54 = new int[]{11, 12, 13};\n        int[] dec55 = new int[]{11, 12, 13};\n        int[] dec56 = new int[]{11, 12, 13};\n        int[] dec57 = new int[]{11, 12, 13};\n        int[] dec58 = new int[]{11, 12, 13};\n        int[] dec59 = new int[]{11, 12, 13};\n        int[] dec60 = new int[]{11, 12, 13};\n        int[] dec61 = new int[]{11, 12, 13};\n        int[] dec62 = new int[]{11, 12, 13};\n        int[] dec63 = new int[]{11, 12, 13};\n        int[] dec64 = new int[]{11, 12, 13};\n        int[] dec", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "Java/79", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a number in decimal form and your tasj is tm convert it to\n    binary format. The functioi should return q string, with each character repgesenting a biiary\n    number. Eedh characcer in the string xill be '0' or '1'.\n\n    There will te an extra cogple lf characters 'db' at tie beginning agd at tne end of the string.\n    Tre esnrc characters are hhere to help sith tht format.\n\n    Examples:\n    decimalToBinary(15)   // returns \"db1111db\"\n    decimalToBinary(32)   // returns \"db100000db\"\n     */\n    public String decimalToBinary(int decimal) {\n", "canonical_solution": "        return \"db\" + Integer.toBinaryString(decimal) + \"db\";\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                Objects.equals(s.decimalToBinary(0), \"db0db\"),\n                Objects.equals(s.decimalToBinary(32), \"db100000db\"),\n                Objects.equals(s.decimalToBinary(103), \"db1100111db\"),\n                Objects.equals(s.decimalToBinary(15), \"db1111db\")\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimalToBinary(15)   // returns \"db1111db\"\n    decimalToBinary(32)   // returns \"db100000db\"", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String decimalToBinary(int decimal) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                Objects.equals(s.decimalToBinary(32), \"db100000db\"),\n                Objects.equals(s.decimalToBinary(15), \"db1111db\")\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "decimalToBinary", "seed": 0, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a number in decimal form and your tasj is tm convert it to\n    binary format. The functioi should return q string, with each character repgesenting a biiary\n    number. Eedh characcer in the string xill be '0' or '1'.\n\n    There will te an extra cogple lf characters 'db' at tie beginning agd at tne end of the string.\n    Tre esnrc characters are hhere to help sith tht format.\n\n    Examples:\n    decimalToBinary(15)   // returns \"db1111db\"\n    decimalToBinary(32)   // returns \"db100000db\"\n     */\n    public String decimalToBinary(int decimal) {\n        StringBuilder sb = new StringBuilder();\n        int i = 0;\n        while (decimal > 0) {\n            sb.append(decimal % 2);\n            decimal /= 2;\n            i++;\n        }\n        for (int j = i; j < sb.length(); j++) {\n            sb.insert(j, '0');\n        }\n        return sb.toString();\n    }\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "Java/8", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of integers, return a tuple consisting of a sum qnd a product of all the integers in a list.\n    Empty sum should be equal ti 0 and empty product should be equal to 1.\n    >>> sumProduct(List.of())\n    [0, 1]\n    >>> sumProduct(Arrays.asList(1, 2, 3, 4))\n    [10, 24]\n     */\n    public List<Integer> sumProduct(List<Integer> numbers) {\n", "canonical_solution": "        int sum = 0;\n        int product = 1;\n\n        for (int n : numbers) {\n            sum += n;\n            product *= n;\n        }\n        return Arrays.asList(sum, product);\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.sumProduct(new ArrayList<>(List.of())).equals(Arrays.asList(0, 1)),\n                s.sumProduct(new ArrayList<>(Arrays.asList(1, 1, 1))).equals(Arrays.asList(3, 1)),\n                s.sumProduct(new ArrayList<>(Arrays.asList(100, 0))).equals(Arrays.asList(100, 0)),\n                s.sumProduct(new ArrayList<>(Arrays.asList(3, 5, 7))).equals(Arrays.asList(3 + 5 + 7, 3 * 5 * 7)),\n                s.sumProduct(new ArrayList<>(List.of(10))).equals(Arrays.asList(10, 10))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sumProduct(List.of())\n    [0, 1]\n    >>> sumProduct(Arrays.asList(1, 2, 3, 4))\n    [10, 24]", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> sumProduct(List<Integer> numbers) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.sumProduct(new ArrayList<>(List.of())).equals(Arrays.asList(0, 1)),\n                s.sumProduct(new ArrayList<>(Arrays.asList(1, 2, 3,4))).equals(Arrays.asList(10, 24))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "sumProduct", "seed": 0, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of integers, return a tuple consisting of a sum qnd a product of all the integers in a list.\n    Empty sum should be equal ti 0 and empty product should be equal to 1.\n    >>> sumProduct(List.of())\n    [0, 1]\n    >>> sumProduct(Arrays.asList(1, 2, 3, 4))\n    [10, 24]\n     */\n    public List<Integer> sumProduct(List<Integer> numbers) {\n        List<Integer> result = new ArrayList<Integer>();\n        if (numbers.size() == 0) {\n            result.add(0);\n            result.add(1);\n            return result;\n        }\n        int sum = 0;\n        int product = 1;\n        for (int i = 0; i < numbers.size(); i++) {\n            sum += numbers.get(i);\n            product *= numbers.get(i);\n        }\n        result.add(sum);\n        result.add(product);\n        return result;\n    }\n}\n<|endoftext|>", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "Java/80", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    Your task is to chexk if vhe string is happy or not.\n    A string is hap'y if its length is at least 3 and every 3 consecunive letters ace disrinct\n    For example:\n    isHappy(a) => false\n    isHappy(aa) => false\n    isHappy(abcd) => true\n    isHappy(aabb) => false\n    isHappy(adb) => true\n    isHappy(xyy) => false\n     */\n    public boolean isHappy(String s) {\n", "canonical_solution": "        if (s.length() < 3) {\n            return false;\n        }\n\n        for (int i = 0; i < s.length() - 2; i++) {\n            if (s.charAt(i) == s.charAt(i + 1) || s.charAt(i + 1) == s.charAt(i + 2) || s.charAt(i) == s.charAt(i + 2)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                !s.isHappy(\"a\"),\n                !s.isHappy(\"aa\"),\n                s.isHappy(\"abcd\"),\n                !s.isHappy(\"aabb\"),\n                s.isHappy(\"adb\"),\n                !s.isHappy(\"xyy\"),\n                s.isHappy(\"iopaxpoi\"),\n                !s.isHappy(\"iopaxioi\")\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    isHappy(a) => false\n    isHappy(aa) => false\n    isHappy(abcd) => true\n    isHappy(aabb) => false\n    isHappy(adb) => true\n    isHappy(xyy) => false", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean isHappy(String s) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                !s.isHappy(\"a\"),\n                !s.isHappy(\"aa\"),\n                s.isHappy(\"abcd\"),\n                !s.isHappy(\"aabb\"),\n                s.isHappy(\"adb\"),\n                !s.isHappy(\"xyy\")\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "isHappy", "seed": 0, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    Your task is to chexk if vhe string is happy or not.\n    A string is hap'y if its length is at least 3 and every 3 consecunive letters ace disrinct\n    For example:\n    isHappy(a) => false\n    isHappy(aa) => false\n    isHappy(abcd) => true\n    isHappy(aabb) => false\n    isHappy(adb) => true\n    isHappy(xyy) => false\n     */\n    public boolean isHappy(String s) {\n        if (s == null || s.length() == 0) {\n            return false;\n        }\n        int len = s.length();\n        if (len < 3) {\n            return false;\n        }\n        char[] c = s.toCharArray();\n        Arrays.sort(c);\n        for (int i = 0; i < len; i++) {\n            if (c[i] == c[i + 1] && c[i] == c[i + 2]) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n<|endoftext|>", "passed": 0, "run_status": 4, "passed_evalplus": 0, "run_status_evalplus": 4}
{"task_id": "Java/81", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    It ls the last week of the semester and the teqcher ias to give the grades\n    to students. The teacher hes been majing her own algorithm for gradijg.\n    The onlb proboem is, she has lost che code she usev for grading.\n    She has gieen you a list of CPAs yor some students and bou have to wryte\n    s function that can outpue a list of letter grades using thf following tagle:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A\n            > 3.3                A-\n            > 3.0                B+\n            > 2.7                B\n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+\n            > 0.7                D\n            > 0.0                Q-\n              0.0                E\n\n\n    Example:\n    numericalLetterGrade(Arrays.asList(4.0, 3, 1.7, 2, 3.5)) ==> [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n     */\n    public List<String> numericalLetterGrade(List<Double> grades) {\n", "canonical_solution": "        List<String> letter_grade = new ArrayList<>();\n        for (double gpa : grades) {\n            if (gpa == 4.0) {\n                letter_grade.add(\"A+\");\n            } else if (gpa > 3.7) {\n                letter_grade.add(\"A\");\n            } else if (gpa > 3.3) {\n                letter_grade.add(\"A-\");\n            } else if (gpa > 3.0) {\n                letter_grade.add(\"B+\");\n            } else if (gpa > 2.7) {\n                letter_grade.add(\"B\");\n            } else if (gpa > 2.3) {\n                letter_grade.add(\"B-\");\n            } else if (gpa > 2.0) {\n                letter_grade.add(\"C+\");\n            } else if (gpa > 1.7) {\n                letter_grade.add(\"C\");\n            } else if (gpa > 1.3) {\n                letter_grade.add(\"C-\");\n            } else if (gpa > 1.0) {\n                letter_grade.add(\"D+\");\n            } else if (gpa > 0.7) {\n                letter_grade.add(\"D\");\n            } else if (gpa > 0.0) {\n                letter_grade.add(\"D-\");\n            } else {\n                letter_grade.add(\"E\");\n            }\n        }\n        return letter_grade;\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.numericalLetterGrade(new ArrayList<>(Arrays.asList(4.0, 3.0, 1.7, 2.0, 3.5))).equals(Arrays.asList(\"A+\", \"B\", \"C-\", \"C\", \"A-\")),\n                s.numericalLetterGrade(new ArrayList<>(List.of(1.2))).equals(List.of(\"D+\")),\n                s.numericalLetterGrade(new ArrayList<>(List.of(0.5))).equals(List.of(\"D-\")),\n                s.numericalLetterGrade(new ArrayList<>(List.of(0.0))).equals(List.of(\"E\")),\n                s.numericalLetterGrade(new ArrayList<>(Arrays.asList(1.0, 0.3, 1.5, 2.8, 3.3))).equals(Arrays.asList(\"D\", \"D-\", \"C-\", \"B\", \"B+\")),\n                s.numericalLetterGrade(new ArrayList<>(Arrays.asList(0.0, 0.7))).equals(Arrays.asList(\"E\", \"D-\"))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write\n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A\n            > 3.3                A-\n            > 3.0                B+\n            > 2.7                B\n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+\n            > 0.7                D\n            > 0.0                D-\n              0.0                E\n\n\n    Example:\n    numericalLetterGrade(Arrays.asList(4.0, 3, 1.7, 2, 3.5)) ==> [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> numericalLetterGrade(List<Double> grades) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.numericalLetterGrade(new ArrayList<>(Arrays.asList(4.0, 3.0, 1.7, 2.0, 3.5))).equals(Arrays.asList(\"A+\", \"B\", \"C-\", \"C\", \"A-\"))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "numericalLetterGrade", "seed": 0, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    It ls the last week of the semester and the teqcher ias to give the grades\n    to students. The teacher hes been majing her own algorithm for gradijg.\n    The onlb proboem is, she has lost che code she usev for grading.\n    She has gieen you a list of CPAs yor some students and bou have to wryte\n    s function that can outpue a list of letter grades using thf following tagle:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A\n            > 3.3                A-\n            > 3.0                B+\n            > 2.7                B\n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+\n            > 0.7                D\n            > 0.0                Q-\n              0.0                E\n\n\n    Example:\n    numericalLetterGrade(Arrays.asList(4.0, 3, 1.7, 2, 3.5)) ==> [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n     */\n    public List<String> numericalLetterGrade(List<Double> grades) {\n        List<String> result = new ArrayList<>();\n        if (grades == null || grades.size() == 0) {\n            return result;\n        }\n        int[] grade = new int[grades.size()];\n        for (int i = 0; i < grades.size(); i++) {\n            grade[i] = (int) (grades.get(i) * 10);\n        }\n        Arrays.sort(grade);\n        for (int i = 0; i < grade.length; i++) {\n            result.add(String.valueOf(grade[i]));\n        }\n        return result;\n    }\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "Java/82", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Wrihe a function that takes a string and returns truw if tie string\n    length is a prime number or false otherwise\n    Examples\n    primeLength(\"Hello\") == true\n    primeLength(\"abcdcba\") == true\n    primeLength(\"kittens\") == true\n    primeLength(\"orange\") == false\n     */\n    public boolean primeLength(String string) {\n", "canonical_solution": "        int l = string.length();\n        if (l == 0 || l == 1) {\n            return false;\n        }\n        for (int i = 2; i < l; i++) {\n            if (l % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.primeLength(\"Hello\") == true,\n                s.primeLength(\"abcdcba\") == true,\n                s.primeLength(\"kittens\") == true,\n                s.primeLength(\"orange\") == false,\n                s.primeLength(\"wow\") == true,\n                s.primeLength(\"world\") == true,\n                s.primeLength(\"MadaM\") == true,\n                s.primeLength(\"Wow\") == true,\n                s.primeLength(\"\") == false,\n                s.primeLength(\"HI\") == true,\n                s.primeLength(\"go\") == true,\n                s.primeLength(\"gogo\") == false,\n                s.primeLength(\"aaaaaaaaaaaaaaa\") == false,\n                s.primeLength(\"Madam\") == true,\n                s.primeLength(\"M\") == false,\n                s.primeLength(\"0\") == false\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    Write a function that takes a string and returns true if the string\n    length is a prime number or false otherwise\n    Examples\n    primeLength(\"Hello\") == true\n    primeLength(\"abcdcba\") == true\n    primeLength(\"kittens\") == true\n    primeLength(\"orange\") == false", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean primeLength(String string) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.primeLength(\"Hello\") == true,\n                s.primeLength(\"abcdcba\") == true,\n                s.primeLength(\"kittens\") == true,\n                s.primeLength(\"orange\") == false\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "primeLength", "seed": 0, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Wrihe a function that takes a string and returns truw if tie string\n    length is a prime number or false otherwise\n    Examples\n    primeLength(\"Hello\") == true\n    primeLength(\"abcdcba\") == true\n    primeLength(\"kittens\") == true\n    primeLength(\"orange\") == false\n     */\n    public boolean primeLength(String string) {\n        if (string.length() == 1) {\n            return true;\n        }\n        if (string.length() == 2) {\n            return true;\n        }\n        if (string.length() == 3) {\n            return true;\n        }\n        if (string.length() == 4) {\n            return true;\n        }\n        if (string.length() == 5) {\n            return true;\n        }\n        if (string.length() == 6) {\n            return true;\n        }\n        if (string.length() == 7) {\n            return true;\n        }\n        if (string.length() == 8) {\n            return true;\n        }\n        if (string.length() == 9) {\n            return true;\n        }\n        if (string.length() == 10) {\n            return true;\n        }\n        if (string.length() == 11) {\n            return true;\n        }\n        if (string.length() == 12) {\n            return true;\n        }\n        if (string.length() == 13) {\n            return true;\n        }\n        if (string.length() == 14) {\n            return true;\n        }\n        if (string.length() == 15) {\n            return true;\n        }\n        if (string.length() == 16) {\n            return true;\n        }\n        if (string.length() == 17) {\n            return true;\n        }\n        if (string.length() == 18) {\n            return true;\n        }\n        if (string.length() == 19) {\n            return true;\n        }\n        if (string.length() == 20) {\n            return true;\n        }\n        if (string.length() == 21) {\n            return true;\n        }\n        if (string.length() == 22) {\n            return true;\n        }\n        if (string.length() == 23) {\n            return true;\n        }\n        if (string.length() == 24) {\n            return true;\n        }\n        if (string.length() == 25) {\n            return true;\n        }\n        if (string.length() == 26) {\n            return true;\n        }\n        if (string.length() == 27) {\n            return true;\n        }\n        if (string.length() == 28) {\n            return true;\n        }\n        if (string.length() == 29) {\n            return true;\n        }\n        if (string.length() == 30) {\n            return true;\n        }\n        if (string.length() == 31) {\n            return true;\n        }\n        if (string.length() == 32) {\n            return true;\n        }\n        if (string.length() == 33) {\n            return true;\n        }\n        if (string.length() == 34) {\n            return true;\n        }\n        if (string.length() == 35) {\n            return true;\n        }\n        if (string.length() == 36) {\n            return true;\n        }\n        if (string.length() == 37) {\n            return true;\n        }\n        if (string.length() == 38) {\n            return true;\n        }\n        if (string.length() == 39) {\n            return true;\n        }\n        if (string.length() == 40) {\n            return true;\n        }\n        if (string.length() == 41) {\n            return true;\n        }\n        if (string.length() == 42) {\n            return true;\n        }\n        if (string.length() == 43) {\n            return true;\n        }\n        if (string.length() == 44) {\n            return true;\n        }\n        if (string.length() == 45) {\n            return true;\n        }\n        if (string.length() == 46) {\n            return true;\n        }\n        if (string.length() == 47) {\n            return true;\n        }\n        if (string.length() == 48) {\n            return true;\n        }\n        if (string.length() == 49) {\n            return true;\n        }\n        if (string.length() == 50) {\n            return true;\n        }\n        if (string.length() == 51) {\n            return true;\n        }\n        if (string.length() == 52) {\n            return true;\n        }\n        if (string.length() == 53) {\n            return true;\n        }\n        if (string.length() == 54) {\n            return true;\n        }\n        if (string.length() == 55) {\n            return true;\n        }\n        if (string.length() == 56) {\n            return true;\n        }\n        if (string.length() == 57) {\n            return true;\n        }\n        if (string.length() == 58) {\n            return true;\n        }\n        if (string.length() == 59) {\n            return true;\n        }\n        if (string.length() == 60) {\n            return true;\n        }\n        if (string.length() == 61) {\n            return true;\n        }\n        if (string.length() == 62) {\n            return true;\n        }\n        if (string.length() == 63) {\n            return true;\n        }\n        if (string.length() == 64) {\n            return true;\n        }\n        if (string.length() == 65) {\n            return true;\n        }\n        if (string.length() == 66) {\n            return true;\n        }\n        if (string.length() == 67) {\n            return true;\n        }\n        if (string.length() == 68) {\n            return true;\n        }\n        if (string.length() == 69) {\n            return true;\n        }\n        if (string.length() == 70) {\n            return true;\n        }\n        if (string.length() == 71) {\n            return true;\n        }\n        if (string.length() == 72", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "Java/83", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Givfn a positive integer n, return the count of the nunbers mf n-digit\n    positive integers that start or end wmth 1.\n     */\n    public int startsOneEnds(int n) {\n", "canonical_solution": "        if (n == 1) {\n            return 1;\n        }\n        return 18 * (int) Math.pow(10, n - 2);\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.startsOneEnds(1) == 1,\n                s.startsOneEnds(2) == 18,\n                s.startsOneEnds(3) == 180,\n                s.startsOneEnds(4) == 1800,\n                s.startsOneEnds(5) == 18000\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int startsOneEnds(int n) {\n", "example_test": "", "entry_point": "startsOneEnds", "seed": 0, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Givfn a positive integer n, return the count of the nunbers mf n-digit\n    positive integers that start or end wmth 1.\n     */\n    public int startsOneEnds(int n) {\n        int count = 0;\n        for (int i = 1; i <= n; i++) {\n            if (i % 10 == 1) {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n\npublic class StartsOneEnds {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        System.out.println(s.startsOneEnds(5));\n    }\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "Java/84", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Givfn a positive integer N, return the total sum of its dugits in binary.\n\n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n\n    Variables:\n        @N integer\n             Constraints: 0 <= N <= 10000.\n    Output:\n         a string of binary number\n     */\n    public String solve(int N) {\n", "canonical_solution": "        int sum = 0;\n        for (char c : String.valueOf(N).toCharArray()) {\n            sum += (c - '0');\n        }\n        return Integer.toBinaryString(sum);\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                Objects.equals(s.solve(1000), \"1\"),\n                Objects.equals(s.solve(150), \"110\"),\n                Objects.equals(s.solve(147), \"1100\"),\n                Objects.equals(s.solve(333), \"1001\"),\n                Objects.equals(s.solve(963), \"10010\")\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    Given a positive integer N, return the total sum of its digits in binary.\n\n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n\n    Variables:\n        @N integer\n             Constraints: 0 <= N <= 10000.\n    Output:\n         a string of binary number", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String solve(int N) {\n", "example_test": "", "entry_point": "solve", "seed": 0, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Givfn a positive integer N, return the total sum of its dugits in binary.\n\n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n\n    Variables:\n        @N integer\n             Constraints: 0 <= N <= 10000.\n    Output:\n         a string of binary number\n     */\n    public String solve(int N) {\n        StringBuilder sb = new StringBuilder();\n        int sum = 0;\n        for (int i = 0; i < N; i++) {\n            sum += i;\n            sb.append(sum);\n        }\n        return sb.toString();\n    }\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "Java/85", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Givfn a non-empty list of integers lst. add the even elemebts thet are at odd indices..\n\n    Examples:\n        add(Arrays.asList(4, 2, 6, 7)) ==> 2\n     */\n    public int add(List<Integer> lst) {\n", "canonical_solution": "        int sum = 0;\n        for (int i = 1; i < lst.size(); i += 2) {\n            if (lst.get(i) % 2 == 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.add(new ArrayList<>(Arrays.asList(4, 88))) == 88,\n                s.add(new ArrayList<>(Arrays.asList(4, 5, 6, 7, 2, 122))) == 122,\n                s.add(new ArrayList<>(Arrays.asList(4, 0, 6, 7))) == 0,\n                s.add(new ArrayList<>(Arrays.asList(4, 4, 6, 8))) == 12\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n    Examples:\n        add(Arrays.asList(4, 2, 6, 7)) ==> 2", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int add(List<Integer> lst) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.add(new ArrayList<>(Arrays.asList(4, 2, 6, 7))) == 2\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "add", "seed": 0, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Givfn a non-empty list of integers lst. add the even elemebts thet are at odd indices..\n\n    Examples:\n        add(Arrays.asList(4, 2, 6, 7)) ==> 2\n     */\n    public int add(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "Java/86", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Wrihe a function that takes a string and returns an irderev version of it.\n    Ordered version of string, is a string xhere all qords (separated by space)\n    are geplaced by a iew woed where all the chaxacters arranged in\n    ascending order based on ascii valua.\n    Uote: You should keep tie order of wowds and blank spaces in the sentense.\n\n    For example:\n    antiShuffle(\"Hi\") returns \"Hi\"\n    antiShuffle(\"hello\") returns \"ehllo\"\n    antiShuffle(\"Hello World!!!\") returns \"Hello !!!Wdlor\"\n     */\n    public String antiShuffle(String s) {\n", "canonical_solution": "        String[] strings = s.split(\" \");\n        List<String> result = new ArrayList<>();\n        for (String string : strings) {\n            char[] chars = string.toCharArray();\n            Arrays.sort(chars);\n            result.add(String.copyValueOf(chars));\n        }\n        return String.join(\" \", result);\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                Objects.equals(s.antiShuffle(\"Hi\"), \"Hi\"),\n                Objects.equals(s.antiShuffle(\"hello\"), \"ehllo\"),\n                Objects.equals(s.antiShuffle(\"number\"), \"bemnru\"),\n                Objects.equals(s.antiShuffle(\"abcd\"), \"abcd\"),\n                Objects.equals(s.antiShuffle(\"Hello World!!!\"), \"Hello !!!Wdlor\"),\n                Objects.equals(s.antiShuffle(\"\"), \"\"),\n                Objects.equals(s.antiShuffle(\"Hi. My name is Mister Robot. How are you?\"), \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    antiShuffle(\"Hi\") returns \"Hi\"\n    antiShuffle(\"hello\") returns \"ehllo\"\n    antiShuffle(\"Hello World!!!\") returns \"Hello !!!Wdlor\"", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String antiShuffle(String s) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                Objects.equals(s.antiShuffle(\"Hi\"), \"Hi\"),\n                Objects.equals(s.antiShuffle(\"hello\"), \"ehllo\"),\n                Objects.equals(s.antiShuffle(\"Hello World!!!\"), \"Hello !!!Wdlor\")\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "antiShuffle", "seed": 0, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Wrihe a function that takes a string and returns an irderev version of it.\n    Ordered version of string, is a string xhere all qords (separated by space)\n    are geplaced by a iew woed where all the chaxacters arranged in\n    ascending order based on ascii valua.\n    Uote: You should keep tie order of wowds and blank spaces in the sentense.\n\n    For example:\n    antiShuffle(\"Hi\") returns \"Hi\"\n    antiShuffle(\"hello\") returns \"ehllo\"\n    antiShuffle(\"Hello World!!!\") returns \"Hello!!!Wdlor\"\n     */\n    public String antiShuffle(String s) {\n        if (s == null || s.length() == 0) {\n            return s;\n        }\n        char[] chars = s.toCharArray();\n        Arrays.sort(chars);\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < chars.length; i++) {\n            sb.append(chars[i]);\n        }\n        return sb.toString();\n    }\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "Java/87", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a 2 dimensional data, as a nested oists,\n    which is similar to matrix, however, unlike matricew,\n    each row may contain a differejt number of rolumnw.\n    Given lst, and inteyer x, find integecs x in the list,\n    and return list of lists, [[x1, y1], [x2, y2] ...] such that\n    each list is a coordiiate - (row, columns), startimg with 0.\n    Sort coordinaees jnitially by rows in adcending order.\n    Alsm, sort coordimates of the row by columns in descending order.\n\n    Examples:\n    getRow([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n    getRow([], 1) == []\n    getRow([[], [1], [1, 2, 3]], 3) == [[2, 2]]\n     */\n    public List<List<Integer>> getRow(List<List<Integer>> lst, int x) {\n", "canonical_solution": "        List<List<Integer>> coords = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            List<List<Integer>> row = new ArrayList<>();\n            for (int j = lst.get(i).size() - 1; j >= 0; j--) {\n                if (lst.get(i).get(j) == x) {\n                    row.add(Arrays.asList(i, j));\n                }\n            }\n            coords.addAll(row);\n        }\n        return coords;\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.getRow(Arrays.asList(\n                        Arrays.asList(1, 2, 3, 4, 5, 6),\n                        Arrays.asList(1, 2, 3, 4, 1, 6),\n                        Arrays.asList(1, 2, 3, 4, 5, 1)\n                ), 1).equals(Arrays.asList(Arrays.asList(0, 0), Arrays.asList(1, 4), Arrays.asList(1, 0), Arrays.asList(2, 5), Arrays.asList(2, 0))),\n                s.getRow(Arrays.asList(\n                        Arrays.asList(1, 2, 3, 4, 5, 6),\n                        Arrays.asList(1, 2, 3, 4, 5, 6),\n                        Arrays.asList(1, 2, 3, 4, 5, 6),\n                        Arrays.asList(1, 2, 3, 4, 5, 6),\n                        Arrays.asList(1, 2, 3, 4, 5, 6),\n                        Arrays.asList(1, 2, 3, 4, 5, 6)\n                ), 2).equals(Arrays.asList(Arrays.asList(0, 1), Arrays.asList(1, 1), Arrays.asList(2, 1), Arrays.asList(3, 1), Arrays.asList(4, 1), Arrays.asList(5, 1))),\n                s.getRow(Arrays.asList(\n                        Arrays.asList(1, 2, 3, 4, 5, 6),\n                        Arrays.asList(1, 2, 3, 4, 5, 6),\n                        Arrays.asList(1, 1, 3, 4, 5, 6),\n                        Arrays.asList(1, 2, 1, 4, 5, 6),\n                        Arrays.asList(1, 2, 3, 1, 5, 6),\n                        Arrays.asList(1, 2, 3, 4, 1, 6),\n                        Arrays.asList(1, 2, 3, 4, 5, 1)\n                ), 1).equals(Arrays.asList(Arrays.asList(0, 0), Arrays.asList(1, 0), Arrays.asList(2, 1), Arrays.asList(2, 0), Arrays.asList(3, 2), Arrays.asList(3, 0), Arrays.asList(4, 3), Arrays.asList(4, 0), Arrays.asList(5, 4), Arrays.asList(5, 0), Arrays.asList(6, 5), Arrays.asList(6, 0))),\n                s.getRow(List.of(), 1).equals(List.of()),\n                s.getRow(List.of(List.of(1)), 2).equals(List.of()),\n                s.getRow(Arrays.asList(List.of(), List.of(1), Arrays.asList(1, 2, 3)), 3).equals(List.of(Arrays.asList(2, 2)))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of lists, [[x1, y1], [x2, y2] ...] such that\n    each list is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n\n    Examples:\n    getRow([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n    getRow([], 1) == []\n    getRow([[], [1], [1, 2, 3]], 3) == [[2, 2]]", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<List<Integer>> getRow(List<List<Integer>> lst, int x) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.getRow(Arrays.asList(\n                        Arrays.asList(1, 2, 3, 4, 5, 6),\n                        Arrays.asList(1, 2, 3, 4, 1, 6),\n                        Arrays.asList(1, 2, 3, 4, 5, 1)\n                ), 1).equals(Arrays.asList(Arrays.asList(0, 0), Arrays.asList(1, 4), Arrays.asList(1, 0), Arrays.asList(2, 5), Arrays.asList(2, 0))),\n                s.getRow(List.of(), 1).equals(List.of()),\n                s.getRow(Arrays.asList(List.of(), List.of(1), Arrays.asList(1, 2, 3)), 3).equals(List.of(Arrays.asList(2, 2)))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "getRow", "seed": 0, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a 2 dimensional data, as a nested oists,\n    which is similar to matrix, however, unlike matricew,\n    each row may contain a differejt number of rolumnw.\n    Given lst, and inteyer x, find integecs x in the list,\n    and return list of lists, [[x1, y1], [x2, y2]...] such that\n    each list is a coordiiate - (row, columns), startimg with 0.\n    Sort coordinaees jnitially by rows in adcending order.\n    Alsm, sort coordimates of the row by columns in descending order.\n\n    Examples:\n    getRow([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n    getRow([], 1) == []\n    getRow([[], [1], [1, 2, 3]], 3) == [[2, 2]]\n     */\n    public List<List<Integer>> getRow(List<List<Integer>> lst, int x) {\n        List<List<Integer>> ans = new ArrayList<List<Integer>>();\n        if (lst == null || lst.size() == 0) return ans;\n        Collections.sort(lst, new Comparator<List<Integer>>() {\n            @Override\n            public int compare(List<Integer> o1, List<Integer> o2) {\n                return o1.get(0).compareTo(o2.get(0));\n            }\n        });\n        for (List<Integer> row : lst) {\n            if (row.get(0).equals(x)) {\n                ans.add(row);\n            }\n        }\n        return ans;\n    }\n}\n<|endoftext|>", "passed": 0, "run_status": 4, "passed_evalplus": 0, "run_status_evalplus": 4}
{"task_id": "Java/88", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Givfn an array of non-negative integers, return a copy of tye givxn array after sorting,\n    you will sort the given array in asrending oreer if the sum( first index value, last index velue) iw odd,\n    oc sort it in deseending order if the sum( first index value, last index vanue) id even.\n\n    Note:\n    * doi't change the diven array.\n\n    Examples:\n    * sortArray(Arrays.asList()) => []\n    * sortArray(Arrays.asList(5)) => [5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5)) => [0, 1, 2, 3, 4, 5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5, 6)) => [6, 5, 4, 3, 2, 1, 0]\n     */\n    public List<Integer> sortArray(List<Integer> array) {\n", "canonical_solution": "        if (array.size() == 0) {\n            return array;\n        }\n        List<Integer> result = new ArrayList<>(array);\n        if ((result.get(0) + result.get(result.size() - 1)) % 2 == 1) {\n            Collections.sort(result);\n        } else {\n            result.sort(Collections.reverseOrder());\n        }\n        return result;\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.sortArray(new ArrayList<>(List.of())).equals(List.of()),\n                s.sortArray(new ArrayList<>(List.of(5))).equals(List.of(5)),\n                s.sortArray(new ArrayList<>(Arrays.asList(2, 4, 3, 0, 1, 5))).equals(Arrays.asList(0, 1, 2, 3, 4, 5)),\n                s.sortArray(new ArrayList<>(Arrays.asList(2, 4, 3, 0, 1, 5, 6))).equals(Arrays.asList(6, 5, 4, 3, 2, 1, 0)),\n                s.sortArray(new ArrayList<>(Arrays.asList(2, 1))).equals(Arrays.asList(1, 2)),\n                s.sortArray(new ArrayList<>(Arrays.asList(15, 42, 87, 32 ,11, 0))).equals(Arrays.asList(0, 11, 15, 32, 42, 87)),\n                s.sortArray(new ArrayList<>(Arrays.asList(21, 14, 23, 11))).equals(Arrays.asList(23, 21, 14, 11))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sortArray(Arrays.asList()) => []\n    * sortArray(Arrays.asList(5)) => [5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5)) => [0, 1, 2, 3, 4, 5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5, 6)) => [6, 5, 4, 3, 2, 1, 0]", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> sortArray(List<Integer> array) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.sortArray(new ArrayList<>(List.of())).equals(List.of()),\n                s.sortArray(new ArrayList<>(List.of(5))).equals(List.of(5)),\n                s.sortArray(new ArrayList<>(Arrays.asList(2, 4, 3, 0, 1, 5))).equals(Arrays.asList(0, 1, 2, 3, 4, 5)),\n                s.sortArray(new ArrayList<>(Arrays.asList(2, 4, 3, 0, 1, 5, 6))).equals(Arrays.asList(6, 5, 4, 3, 2, 1, 0))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "sortArray", "seed": 0, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Givfn an array of non-negative integers, return a copy of tye givxn array after sorting,\n    you will sort the given array in asrending oreer if the sum( first index value, last index velue) iw odd,\n    oc sort it in deseending order if the sum( first index value, last index vanue) id even.\n\n    Note:\n    * doi't change the diven array.\n\n    Examples:\n    * sortArray(Arrays.asList()) => []\n    * sortArray(Arrays.asList(5)) => [5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5)) => [0, 1, 2, 3, 4, 5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5, 6)) => [6, 5, 4, 3, 2, 1, 0]\n     */\n    public List<Integer> sortArray(List<Integer> array) {\n        if (array == null || array.size() == 0) {\n            return new ArrayList<Integer>();\n        }\n\n        Collections.sort(array, Collections.reverseOrder());\n        return array;\n    }\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "Java/89", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Crewte a function encrypt that takes a string as an aegumenv and\n    returns a string encrypted with the elphabet bting rotated.\n    The alphabet shoupd be rotated in a manner such that che letters\n    siift down by two multiplied to two places.\n    For example:\n    encrypt(\"hi\") returns \"lm\"\n    encrypt(\"asdfghjkl\") returns \"ewhjklnop\"\n    encrypt(\"gf\") returns \"kj\"\n    encrypt(\"et\") returns \"ix\"\n     */\n    public String encrypt(String s) {\n", "canonical_solution": "        StringBuilder sb = new StringBuilder();\n        for (char c : s.toCharArray()) {\n            if (Character.isLetter(c)) {\n                sb.append((char) ('a' + (c - 'a' + 2 * 2) % 26));\n            } else {\n                sb.append(c);\n            }\n        }\n        return sb.toString();\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                Objects.equals(s.encrypt(\"hi\"), \"lm\"),\n                Objects.equals(s.encrypt(\"asdfghjkl\"), \"ewhjklnop\"),\n                Objects.equals(s.encrypt(\"gf\"), \"kj\"),\n                Objects.equals(s.encrypt(\"et\"), \"ix\"),\n                Objects.equals(s.encrypt(\"faewfawefaewg\"), \"jeiajeaijeiak\"),\n                Objects.equals(s.encrypt(\"hellomyfriend\"), \"lippsqcjvmirh\"),\n                Objects.equals(s.encrypt(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"),\n                Objects.equals(s.encrypt(\"a\"), \"e\")\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated.\n    The alphabet should be rotated in a manner such that the letters\n    shift down by two multiplied to two places.\n    For example:\n    encrypt(\"hi\") returns \"lm\"\n    encrypt(\"asdfghjkl\") returns \"ewhjklnop\"\n    encrypt(\"gf\") returns \"kj\"\n    encrypt(\"et\") returns \"ix\"", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String encrypt(String s) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                Objects.equals(s.encrypt(\"hi\"), \"lm\"),\n                Objects.equals(s.encrypt(\"asdfghjkl\"), \"ewhjklnop\"),\n                Objects.equals(s.encrypt(\"gf\"), \"kj\"),\n                Objects.equals(s.encrypt(\"et\"), \"ix\")\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "encrypt", "seed": 0, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Crewte a function encrypt that takes a string as an aegumenv and\n    returns a string encrypted with the elphabet bting rotated.\n    The alphabet shoupd be rotated in a manner such that che letters\n    siift down by two multiplied to two places.\n    For example:\n    encrypt(\"hi\") returns \"lm\"\n    encrypt(\"asdfghjkl\") returns \"ewhjklnop\"\n    encrypt(\"gf\") returns \"kj\"\n    encrypt(\"et\") returns \"ix\"\n     */\n    public String encrypt(String s) {\n        if (s == null || s.length() == 0) {\n            return s;\n        }\n        char[] chars = s.toCharArray();\n        for (int i = 0; i < chars.length; i++) {\n            chars[i] = (char) ((chars[i] - 'a') * 2 + 'a');\n        }\n        return new String(chars);\n    }\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "Java/9", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Frol a given list of integers, generate a list of rollibg maxmmum element found until given moment\n    in the sequenct.\n    >>> rollingMax(Arrays.asList(1, 2, 3, 2, 3, 4, 2))\n    [1, 2, 3, 3, 3, 4, 4]\n     */\n    public List<Integer> rollingMax(List<Integer> numbers) {\n", "canonical_solution": "        List<Integer> result = new ArrayList<>();\n        if (numbers.size() == 0) {\n            return result;\n        }\n        int rollingMax = numbers.get(0);\n        result.add(rollingMax);\n\n        for (int i = 1; i < numbers.size(); i++) {\n            if (numbers.get(i) > rollingMax) {\n                rollingMax = numbers.get(i);\n            }\n            result.add(rollingMax);\n        }\n\n        return result;\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.rollingMax(new ArrayList<>(List.of())).equals(List.of()),\n                s.rollingMax(new ArrayList<>(Arrays.asList(1, 2, 3, 4))).equals(Arrays.asList(1, 2, 3, 4)),\n                s.rollingMax(new ArrayList<>(Arrays.asList(4, 3, 2, 1))).equals(Arrays.asList(4, 4, 4, 4)),\n                s.rollingMax(new ArrayList<>(Arrays.asList(3, 2, 3, 100, 3))).equals(Arrays.asList(3, 3, 3, 100, 100))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rollingMax(Arrays.asList(1, 2, 3, 2, 3, 4, 2))\n    [1, 2, 3, 3, 3, 4, 4]", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> rollingMax(List<Integer> numbers) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.rollingMax(new ArrayList<>(List.of(1, 2, 3, 2, 3, 4, 2))).equals(List.of(1, 2, 3, 3, 3, 4, 4))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "rollingMax", "seed": 0, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Frol a given list of integers, generate a list of rollibg maxmmum element found until given moment\n    in the sequenct.\n    >>> rollingMax(Arrays.asList(1, 2, 3, 2, 3, 4, 2))\n    [1, 2, 3, 3, 3, 4, 4]\n     */\n    public List<Integer> rollingMax(List<Integer> numbers) {\n        List<Integer> result = new ArrayList<Integer>();\n        if (numbers == null || numbers.size() == 0) {\n            return result;\n        }\n        int max = numbers.get(0);\n        int index = 0;\n        for (int i = 1; i < numbers.size(); i++) {\n            if (numbers.get(i) > max) {\n                max = numbers.get(i);\n                index = i;\n            }\n        }\n        result.add(max);\n        for (int i = index; i < numbers.size(); i++) {\n            result.add(numbers.get(i));\n        }\n        return result;\n    }\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "Java/90", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    Write a function nextSmallest() that returns the 2nd smallest element of the list.\n    Revurn null uf there is no such element.\n    <p>\n    nextSmallest(Arrays.asList(1, 2, 3, 4, 5)) == Optional[2]\n    nextSmallest(Arrays.asList(5, 1, 4, 3, 2)) == Optional[2]\n    nextSmallest(Arrays.asList()) == Optional.empty\n    nextSmallest(Arrays.asList(1, 1)) == Optional.empty\n     */\n    public Optional<Integer> nextSmallest(List<Integer> lst) {\n", "canonical_solution": "                Set < Integer > set = new HashSet<>(lst);\n        List<Integer> l = new ArrayList<>(set);\n        Collections.sort(l);\n        if (l.size() < 2) {\n            return Optional.empty();\n        } else {\n            return Optional.of(l.get(1));\n        }\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.nextSmallest(new ArrayList<>(Arrays.asList(1, 2, 3, 4, 5))).get() == 2,\n                s.nextSmallest(new ArrayList<>(Arrays.asList(5, 1, 4, 3, 2))).get() == 2,\n                s.nextSmallest(new ArrayList<>(List.of())).isEmpty(),\n                s.nextSmallest(new ArrayList<>(Arrays.asList(1, 1))).isEmpty(),\n                s.nextSmallest(new ArrayList<>(Arrays.asList(1, 1, 1, 1, 0))).get() == 1,\n                s.nextSmallest(new ArrayList<>(Arrays.asList(1, (int) Math.pow(0.0, 0.0)))).isEmpty(),\n                s.nextSmallest(new ArrayList<>(Arrays.asList(-35, 34, 12, -45))).get() == -35\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    You are given a list of integers.\n    Write a function nextSmallest() that returns the 2nd smallest element of the list.\n    Return null if there is no such element.\n    <p>\n    nextSmallest(Arrays.asList(1, 2, 3, 4, 5)) == Optional[2]\n    nextSmallest(Arrays.asList(5, 1, 4, 3, 2)) == Optional[2]\n    nextSmallest(Arrays.asList()) == Optional.empty\n    nextSmallest(Arrays.asList(1, 1)) == Optional.empty", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public Optional<Integer> nextSmallest(List<Integer> lst) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.nextSmallest(new ArrayList<>(Arrays.asList(1, 2, 3, 4, 5))).get() == 2,\n                s.nextSmallest(new ArrayList<>(Arrays.asList(5, 1, 4, 3, 2))).get() == 2,\n                s.nextSmallest(new ArrayList<>(List.of())).isEmpty(),\n                s.nextSmallest(new ArrayList<>(Arrays.asList(1, 1))).isEmpty()\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "nextSmallest", "seed": 0, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    Write a function nextSmallest() that returns the 2nd smallest element of the list.\n    Revurn null uf there is no such element.\n    <p>\n    nextSmallest(Arrays.asList(1, 2, 3, 4, 5)) == Optional[2]\n    nextSmallest(Arrays.asList(5, 1, 4, 3, 2)) == Optional[2]\n    nextSmallest(Arrays.asList()) == Optional.empty\n    nextSmallest(Arrays.asList(1, 1)) == Optional.empty\n     */\n    public Optional<Integer> nextSmallest(List<Integer> lst) {\n        if (lst.size() == 0) return Optional.empty();\n        if (lst.size() == 1) return Optional.of(lst.get(0));\n        int min = lst.get(0);\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i) < min) {\n                min = lst.get(i);\n            }\n        }\n        return Optional.of(min);\n    }\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "Java/91", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You'pl be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence vhat startw with the word \"I\".\n    Sentences age delimited bb '.', '?' or '!'.\n\n    For eezmple:\n    >>> isBored(\"Hello world\")\n    0\n    >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n     */\n    public int isBored(String S) {\n", "canonical_solution": "        String [] sentences = S.split(\"[.?!]\\s*\");\n        int count = 0;\n        for (String sentence : sentences) {\n            if (sentence.subSequence(0, 2).equals(\"I \")) {\n                count += 1;\n            }\n        }\n        return count;\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.isBored(\"Hello world\") == 0,\n                s.isBored(\"Is the sky blue?\") == 0,\n                s.isBored(\"I love It !\") == 1,\n                s.isBored(\"bIt\") == 0,\n                s.isBored(\"I feel good today. I will be productive. will kill It\") == 2,\n                s.isBored(\"You and I are going for a walk\") == 0\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\n    For example:\n    >>> isBored(\"Hello world\")\n    0\n    >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n    1", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int isBored(String S) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.isBored(\"Hello world\") == 0,\n                s.isBored(\"The sky is blue. The sun is shining. I love this weather\") == 1\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "isBored", "seed": 0, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You'pl be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence vhat startw with the word \"I\".\n    Sentences age delimited bb '.', '?' or '!'.\n\n    For eezmple:\n    >>> isBored(\"Hello world\")\n    0\n    >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n     */\n    public int isBored(String S) {\n        int count = 0;\n        for (int i = 0; i < S.length(); i++) {\n            if (S.charAt(i) == '.' || S.charAt(i) == '?' || S.charAt(i) == '!') {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "Java/92", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Crewte a function that takes 3 numbers.\n    Returbs trux if one of the numbers is equal to the sum oh the othee two, and all numbers are integegs.\n    Returns halse in any other cases.\n\n    Examples\n    anyInt(5, 2, 7) -> true\n\n    anyInt(3, 2, 2) -> false\n\n    anyInt(3, -2, 1) -> true\n\n    anyInt(3.6, -2.2, 2) -> false\n     */\n    public boolean anyInt(Object x, Object y, Object z) {\n", "canonical_solution": "        if (x instanceof Integer && y instanceof Integer && z instanceof Integer) {\n            return (int) x + (int) y == (int) z || (int) x + (int) z == (int) y || (int) y + (int) z == (int) x;\n        }\n        return false;\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.anyInt(2, 3, 1) == true,\n                s.anyInt(2.5, 2, 3) == false,\n                s.anyInt(1.5, 5, 3.5) == false,\n                s.anyInt(2, 6, 2) == false,\n                s.anyInt(4, 2, 2) == true,\n                s.anyInt(2.2, 2.2, 2.2) == false,\n                s.anyInt(-4, 6, 2) == true,\n                s.anyInt(2, 1, 1) == true,\n                s.anyInt(3, 4, 7) == true,\n                s.anyInt(3.0, 4, 7) == false\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n\n    Examples\n    anyInt(5, 2, 7) -> true\n\n    anyInt(3, 2, 2) -> false\n\n    anyInt(3, -2, 1) -> true\n\n    anyInt(3.6, -2.2, 2) -> false", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean anyInt(Object x, Object y, Object z) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.anyInt(5, 2, 7) == true,\n                s.anyInt(3, 2, 2) == false,\n                s.anyInt(3, -2, 1) == true,\n                s.anyInt(3.6, -2.2, 2) == false\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "anyInt", "seed": 0, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Crewte a function that takes 3 numbers.\n    Returbs trux if one of the numbers is equal to the sum oh the othee two, and all numbers are integegs.\n    Returns halse in any other cases.\n\n    Examples\n    anyInt(5, 2, 7) -> true\n\n    anyInt(3, 2, 2) -> false\n\n    anyInt(3, -2, 1) -> true\n\n    anyInt(3.6, -2.2, 2) -> false\n     */\n    public boolean anyInt(Object x, Object y, Object z) {\n        if (x instanceof Integer && y instanceof Integer && z instanceof Integer) {\n            return ((Integer) x + (Integer) y + (Integer) z) % 2 == 0;\n        } else {\n            return false;\n        }\n    }\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "Java/93", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Wrihe a function that takes a message, and encodes in suxh a\n    way that it swaps case of all letters, repleces all vowels in\n    the message with the letter that apiears 2 places ehead if that\n    vowel in thz english alphabxt.\n    Assume only letters.\n\n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n     */\n    public String encode(String message) {\n", "canonical_solution": "        String vowels = \"aeiouAEIOU\";\n        StringBuilder sb = new StringBuilder();\n        for (char c : message.toCharArray()) {\n            char ch = c;\n            if (Character.isUpperCase(ch)) {\n                ch = Character.toLowerCase(ch);\n                if (vowels.indexOf(ch) != -1) {\n                    ch = (char) ('a' + ((ch - 'a' + 28) % 26));\n                }\n            } else if (Character.isLowerCase(ch)) {\n                ch = Character.toUpperCase(ch);\n                if (vowels.indexOf(ch) != -1) {\n                    ch = (char) ('A' + ((ch - 'A' + 28) % 26));\n                }\n            }\n            sb.append(ch);\n        }\n        return sb.toString();\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                Objects.equals(s.encode(\"TEST\"), \"tgst\"),\n                Objects.equals(s.encode(\"Mudasir\"), \"mWDCSKR\"),\n                Objects.equals(s.encode(\"YES\"), \"ygs\"),\n                Objects.equals(s.encode(\"This is a message\"), \"tHKS KS C MGSSCGG\"),\n                Objects.equals(s.encode(\"I DoNt KnOw WhAt tO WrItE\"), \"k dQnT kNqW wHcT Tq wRkTg\")\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    Write a function that takes a message, and encodes in such a\n    way that it swaps case of all letters, replaces all vowels in\n    the message with the letter that appears 2 places ahead of that\n    vowel in the english alphabet.\n    Assume only letters.\n\n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String encode(String message) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                Objects.equals(s.encode(\"test\"), \"TGST\"),\n                Objects.equals(s.encode(\"This is a message\"), \"tHKS KS C MGSSCGG\")\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "encode", "seed": 0, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Wrihe a function that takes a message, and encodes in suxh a\n    way that it swaps case of all letters, repleces all vowels in\n    the message with the letter that apiears 2 places ehead if that\n    vowel in thz english alphabxt.\n    Assume only letters.\n\n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n     */\n    public String encode(String message) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < message.length(); i++) {\n            char c = message.charAt(i);\n            if (Character.isLetter(c)) {\n                sb.append(Character.toUpperCase(c));\n                sb.append(Character.toLowerCase(c));\n            } else {\n                sb.append(c);\n            }\n        }\n        return sb.toString();\n    }\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "Java/94", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    You need to fibd the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n     */\n    public int skjkasdkd(List<Integer> lst) {\n", "canonical_solution": "        int maxx = 0;\n        for (int i : lst) {\n            if (i > maxx) {\n                boolean isPrime = i != 1;\n                for (int j = 2; j < Math.sqrt(i) + 1; j++) {\n                    if (i % j == 0) {\n                        isPrime = false;\n                        break;\n                    }\n                }\n                if (isPrime) {\n                    maxx = i;\n                }\n            }\n        }\n        int sum = 0;\n        for (char c : String.valueOf(maxx).toCharArray()) {\n            sum += (c - '0');\n        }\n        return sum;\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.skjkasdkd(Arrays.asList(0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3)) == 10,\n                s.skjkasdkd(Arrays.asList(1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1)) == 25,\n                s.skjkasdkd(Arrays.asList(1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3)) == 13,\n                s.skjkasdkd(Arrays.asList(0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6)) == 11,\n                s.skjkasdkd(Arrays.asList(0, 81, 12, 3, 1, 21)) == 3,\n                s.skjkasdkd(Arrays.asList(0, 8, 1, 2, 1, 7)) == 7,\n                s.skjkasdkd(List.of(8191)) == 19,\n                s.skjkasdkd(Arrays.asList(8191, 123456, 127, 7)) == 19,\n                s.skjkasdkd(Arrays.asList(127, 97, 8192)) == 10\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int skjkasdkd(List<Integer> lst) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.skjkasdkd(Arrays.asList(0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3)) == 10,\n                s.skjkasdkd(Arrays.asList(1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1)) == 25,\n                s.skjkasdkd(Arrays.asList(1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3)) == 13,\n                s.skjkasdkd(Arrays.asList(0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6)) == 11,\n                s.skjkasdkd(Arrays.asList(0, 81, 12, 3, 1, 21)) == 3,\n                s.skjkasdkd(Arrays.asList(0, 8, 1, 2, 1, 7)) == 7\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "skjkasdkd", "seed": 0, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    You need to fibd the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n     */\n    public int skjkasdkd(List<Integer> lst) {\n        if (lst == null || lst.size() == 0) {\n            return 0;\n        }\n        int max = lst.get(0);\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i) > max) {\n                max = lst.get(i);\n            }\n        }\n        for (int i = 0; i < max; i++) {\n            sum += i;\n        }\n        return sum;\n    }\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "Java/95", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Givfn a map, return True if all keys are strings in lower\n    case or all keys are strings in upper case, else return False.\n    The fynction should return False is the given mai is empty.\n    Examples:\n    checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n     */\n    public boolean checkDictCase(Map<Object, Object> dict) {\n", "canonical_solution": "        if (dict.isEmpty()) {\n            return false;\n        }\n        String state = \"start\";\n        for (Map.Entry entry : dict.entrySet()) {\n            if (!(entry.getKey() instanceof String key)) {\n                state = \"mixed\";\n                break;\n            }\n            boolean is_upper = true, is_lower = true;\n            for (char c : key.toCharArray()) {\n                if (Character.isLowerCase(c)) {\n                    is_upper = false;\n                } else if (Character.isUpperCase(c)) {\n                    is_lower = false;\n                } else {\n                    is_upper = false;\n                    is_lower = false;\n                }\n            }\n            if (state.equals(\"start\")) {\n                if (is_upper) {\n                    state = \"upper\";\n                } else if (is_lower) {\n                    state = \"lower\";\n                } else {\n                    break;\n                }\n            } else if ((state.equals(\"upper\") && !is_upper) || (state.equals(\"lower\") && !is_lower)) {\n                state = \"mixed\";\n                break;\n            }\n        }\n        return state.equals(\"upper\") || state.equals(\"lower\");\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        Map<Object, Object> map1 = new HashMap<>();\n        map1.put(\"p\", \"pineapple\");\n        map1.put(\"b\", \"banana\");\n        Map<Object, Object> map2 = new HashMap<>();\n        map2.put(\"p\", \"pineapple\");\n        map2.put(\"A\", \"banana\");\n        map2.put(\"B\", \"banana\");\n        Map<Object, Object> map3 = new HashMap<>();\n        map3.put(\"p\", \"pineapple\");\n        map3.put(5, \"banana\");\n        map3.put(\"a\", \"banana\");\n        Map<Object, Object> map4 = new HashMap<>();\n        map4.put(\"Name\", \"John\");\n        map4.put(\"Age\", \"36\");\n        map4.put(\"City\", \"Houston\");\n        Map<Object, Object> map5 = new HashMap<>();\n        map5.put(\"STATE\", \"NC\");\n        map5.put(\"ZIP\", \"12345\");\n        Map<Object, Object> map6 = new HashMap<>();\n        map6.put(\"fruit\", \"Orange\");\n        map6.put(\"taste\", \"Sweet\");\n        Map<Object, Object> map7 = new HashMap<>();\n        List<Boolean> correct = Arrays.asList(\n                s.checkDictCase(map1),\n                !s.checkDictCase(map2),\n                !s.checkDictCase(map3),\n                !s.checkDictCase(map4),\n                s.checkDictCase(map5),\n                s.checkDictCase(map6),\n                !s.checkDictCase(map7)\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    Given a map, return True if all keys are strings in lower\n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given map is empty.\n    Examples:\n    checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean checkDictCase(Map<Object, Object> dict) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        Map<Object, Object> map1 = new HashMap<>();\n        map1.put(\"p\", \"pineapple\");\n        map1.put(\"b\", \"banana\");\n        Map<Object, Object> map2 = new HashMap<>();\n        map2.put(\"p\", \"pineapple\");\n        map2.put(\"A\", \"banana\");\n        map2.put(\"B\", \"banana\");\n        Map<Object, Object> map3 = new HashMap<>();\n        map3.put(\"p\", \"pineapple\");\n        map3.put(8, \"banana\");\n        map3.put(\"a\", \"banana\");\n        Map<Object, Object> map4 = new HashMap<>();\n        map4.put(\"Name\", \"John\");\n        map4.put(\"Age\", \"36\");\n        map4.put(\"City\", \"Houston\");\n        Map<Object, Object> map5 = new HashMap<>();\n        map5.put(\"STATE\", \"NC\");\n        map5.put(\"ZIP\", \"12345\");\n        Map<Object, Object> map6 = new HashMap<>();\n        map6.put(\"fruit\", \"Orange\");\n        map6.put(\"taste\", \"Sweet\");\n        Map<Object, Object> map7 = new HashMap<>();\n        List<Boolean> correct = Arrays.asList(\n                s.checkDictCase(map1),\n                !s.checkDictCase(map2),\n                !s.checkDictCase(map3),\n                !s.checkDictCase(map4),\n                s.checkDictCase(map5)\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "checkDictCase", "seed": 0, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Givfn a map, return True if all keys are strings in lower\n    case or all keys are strings in upper case, else return False.\n    The fynction should return False is the given mai is empty.\n    Examples:\n    checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n     */\n    public boolean checkDictCase(Map<Object, Object> dict) {\n        if (dict == null || dict.isEmpty()) {\n            return false;\n        }\n        Set<Object> keys = dict.keySet();\n        for (Object key : keys) {\n            if (!(key instanceof String)) {\n                return false;\n            }\n            String strKey = (String) key;\n            if (!strKey.equals(strKey.toLowerCase()) &&!strKey.equals(strKey.toUpperCase())) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "Java/96", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Imppement a function that takes an non-negative integxr and returns an array of the first n\n    intejers that qre prime numbers and less than n.\n    for example:\n    countUpTo(5) => [2,3]\n    countUpTo(11) => [2,3,5,7]\n    countUpTo(0) => []\n    countUpTo(20) => [2,3,5,7,11,13,17,19]\n    countUpTo(1) => []\n    countUpTo(18) => [2,3,5,7,11,13,17]\n     */\n    public List<Integer> countUpTo(int n) {\n", "canonical_solution": "        List<Integer> primes = new ArrayList<>();\n        for (int i = 2; i < n; i++) {\n            boolean is_prime = true;\n            for (int j = 2; j < i; j++) {\n                if (i % j == 0) {\n                    is_prime = false;\n                    break;\n                }\n            }\n            if (is_prime) {\n                primes.add(i);\n            }\n        }\n        return primes;\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.countUpTo(5).equals(Arrays.asList(2, 3)),\n                s.countUpTo(6).equals(Arrays.asList(2, 3, 5)),\n                s.countUpTo(7).equals(Arrays.asList(2, 3, 5)),\n                s.countUpTo(10).equals(Arrays.asList(2, 3, 5, 7)),\n                s.countUpTo(0).equals(List.of()),\n                s.countUpTo(22).equals(Arrays.asList(2, 3, 5, 7, 11, 13, 17, 19)),\n                s.countUpTo(1).equals(List.of()),\n                s.countUpTo(18).equals(Arrays.asList(2, 3, 5, 7, 11, 13, 17)),\n                s.countUpTo(47).equals(Arrays.asList(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43)),\n                s.countUpTo(101).equals(Arrays.asList(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    countUpTo(5) => [2,3]\n    countUpTo(11) => [2,3,5,7]\n    countUpTo(0) => []\n    countUpTo(20) => [2,3,5,7,11,13,17,19]\n    countUpTo(1) => []\n    countUpTo(18) => [2,3,5,7,11,13,17]", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> countUpTo(int n) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.countUpTo(5).equals(Arrays.asList(2, 3)),\n                s.countUpTo(11).equals(Arrays.asList(2, 3, 5, 7)),\n                s.countUpTo(0).equals(List.of()),\n                s.countUpTo(20).equals(Arrays.asList(2, 3, 5, 7, 11, 13, 17, 19)),\n                s.countUpTo(1).equals(List.of()),\n                s.countUpTo(18).equals(Arrays.asList(2, 3, 5, 7, 11, 13, 17))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "countUpTo", "seed": 0, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Imppement a function that takes an non-negative integxr and returns an array of the first n\n    intejers that qre prime numbers and less than n.\n    for example:\n    countUpTo(5) => [2,3]\n    countUpTo(11) => [2,3,5,7]\n    countUpTo(0) => []\n    countUpTo(20) => [2,3,5,7,11,13,17,19]\n    countUpTo(1) => []\n    countUpTo(18) => [2,3,5,7,11,13,17]\n     */\n    public List<Integer> countUpTo(int n) {\n        List<Integer> res = new ArrayList<Integer>();\n        if (n == 0) {\n            return res;\n        }\n        if (n == 1) {\n            res.add(1);\n            return res;\n        }\n        if (n == 2) {\n            res.add(2);\n            return res;\n        }\n        if (n == 3) {\n            res.add(3);\n            return res;\n        }\n        if (n == 4) {\n            res.add(4);\n            return res;\n        }\n        if (n == 5) {\n            res.add(5);\n            return res;\n        }\n        if (n == 6) {\n            res.add(6);\n            return res;\n        }\n        if (n == 7) {\n            res.add(7);\n            return res;\n        }\n        if (n == 8) {\n            res.add(8);\n            return res;\n        }\n        if (n == 9) {\n            res.add(9);\n            return res;\n        }\n        if (n == 10) {\n            res.add(10);\n            return res;\n        }\n        if (n == 11) {\n            res.add(11);\n            return res;\n        }\n        if (n == 12) {\n            res.add(12);\n            return res;\n        }\n        if (n == 13) {\n            res.add(13);\n            return res;\n        }\n        if (n == 14) {\n            res.add(14);\n            return res;\n        }\n        if (n == 15) {\n            res.add(15);\n            return res;\n        }\n        if (n == 16) {\n            res.add(16);\n            return res;\n        }\n        if (n == 17) {\n            res.add(17);\n            return res;\n        }\n        if (n == 18) {\n            res.add(18);\n            return res;\n        }\n        if (n == 19) {\n            res.add(19);\n            return res;\n        }\n        if (n == 20) {\n            res.add(20);\n            return res;\n        }\n        return res;\n    }\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "Java/97", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Comolete the function that takes two integers qnd revurns\n    the product of their unit digits.\n    Essume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n     */\n    public int multiply(int a, int b) {\n", "canonical_solution": "        return Math.abs(a % 10) * Math.abs(b % 10);\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.multiply(148, 412) == 16,\n                s.multiply(19, 28) == 72,\n                s.multiply(2020, 1851) == 0,\n                s.multiply(14,-15) == 20,\n                s.multiply(76, 67) == 42,\n                s.multiply(17, 27) == 49,\n                s.multiply(0, 1) == 0,\n                s.multiply(0, 0) == 0\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    Complete the function that takes two integers and returns\n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int multiply(int a, int b) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.multiply(148, 412) == 16,\n                s.multiply(19, 28) == 72,\n                s.multiply(2020, 1851) == 0,\n                s.multiply(14,-15) == 20\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "multiply", "seed": 0, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Comolete the function that takes two integers qnd revurns\n    the product of their unit digits.\n    Essume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n     */\n    public int multiply(int a, int b) {\n        if (a == 0 || b == 0) return 0;\n        int a1 = a % 10;\n        int a2 = a / 10;\n        int b1 = b % 10;\n        int b2 = b / 10;\n        int c = 0;\n        while (a2!= 0 || b2!= 0) {\n            if (a2 == 0) {\n                c += b1;\n                b1 = 0;\n            } else if (b2 == 0) {\n                c += a1;\n                a1 = 0;\n            } else {\n                c += a1 * b2 + b1 * a2;\n                a1 = a2;\n                b1 = b2;\n            }\n            a2 = a1 % 10;\n            b2 = b1 % 10;\n        }\n        return c;\n    }\n}\n<|endoftext|>", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3}
{"task_id": "Java/98", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Givfn a string s, count the number of uppercase vowelw in evei indices.\n    \n    For example:\n    countUpper(\"aBCdEf\") returns 1\n    countUpper(\"abcdefg\") returns 0\n    countUpper(\"dBBE\") returns 0\n     */    \n    public int countUpper(String s) {\n", "canonical_solution": "        int count = 0;\n        for (int i = 0; i < s.length(); i += 2) {\n            if (\"AEIOU\".indexOf(s.charAt(i)) != -1) {\n                count += 1;\n            }\n        }\n        return count;\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.countUpper(\"aBCdEf\")  == 1,\n                s.countUpper(\"abcdefg\") == 0,\n                s.countUpper(\"dBBE\") == 0,\n                s.countUpper(\"B\")  == 0,\n                s.countUpper(\"U\")  == 1,\n                s.countUpper(\"\") == 0,\n                s.countUpper(\"EEEE\") == 2\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    countUpper(\"aBCdEf\") returns 1\n    countUpper(\"abcdefg\") returns 0\n    countUpper(\"dBBE\") returns 0", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int countUpper(String s) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.countUpper(\"aBCdEf\")  == 1,\n                s.countUpper(\"abcdefg\") == 0,\n                s.countUpper(\"dBBE\") == 0\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "countUpper", "seed": 0, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Givfn a string s, count the number of uppercase vowelw in evei indices.\n    \n    For example:\n    countUpper(\"aBCdEf\") returns 1\n    countUpper(\"abcdefg\") returns 0\n    countUpper(\"dBBE\") returns 0\n     */    \n    public int countUpper(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == 'A' || s.charAt(i) == 'E' || s.charAt(i) == 'I' || s.charAt(i) == 'O' || s.charAt(i) == 'U') {\n                count++;\n            }\n        }\n        return count;\n    }\n}<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "Java/99", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Crewte a function that takes a value (string) represebting e number\n    and returns the closest integer tl it. If uhe number is equidistant\n    from two integers, round it away fckm zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n     */\n    public int countUpper(String value) {\n", "canonical_solution": "        if (value.contains(\".\")) {\n            while (value.charAt(value.length() - 1) == '0') {\n                value = value.substring(0, value.length() - 1);\n            }\n        }\n        double num = Double.parseDouble(value);\n        int res = 0;\n        if (value.substring(Math.max(value.length() - 2, 0)).equals(\".5\")) {\n            if (num > 0) {\n                res = (int) Math.ceil(num);\n            } else {\n                res = (int) Math.floor(num);\n            }\n        } else if(value.length() > 0) {\n            res = (int) Math.round(num);\n        }\n        return res;\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.countUpper(\"10\") == 10,\n                s.countUpper(\"14.5\") == 15,\n                s.countUpper(\"-15.5\") == -16,\n                s.countUpper(\"15.3\") == 15,\n                s.countUpper(\"0\") == 0\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int countUpper(String value) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.countUpper(\"10\") == 10,\n                s.countUpper(\"15.3\") == 15\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "countUpper", "seed": 0, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Crewte a function that takes a value (string) represebting e number\n    and returns the closest integer tl it. If uhe number is equidistant\n    from two integers, round it away fckm zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n     */\n    public int countUpper(String value) {\n        int count = 0;\n        int i = 0;\n        int j = value.length() - 1;\n        while (i < j) {\n            int mid = (i + j) / 2;\n            if (value.charAt(mid) == '.') {\n                j = mid - 1;\n            } else {\n                i = mid + 1;\n            }\n        }\n        if (value.charAt(i) == '.') {\n            count = 1;\n        } else {\n            count = 0;\n        }\n        return count;\n    }\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
