{"task_id": "JavaScript/0", "prompt": "/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\n\nconst hasCloseElements = (numbers, threshold) => {\n  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n", "canonical_solution": "        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "partial": "/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n          # print('@@this is the line to split##')\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "gc": "<|endoftext|>/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\n\nconst hasCloseElements = (numbers, threshold) => {\n  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i!= j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n};\n\nmodule.exports = hasCloseElements;\n\n},{}],135:[function(require,module,exports){\nconst { hasCloseElements } = require('./hasCloseElements');\n\nconst hasCloseElementsOrEqual = (numbers, threshold) => {\n  return hasCloseElements(numbers, threshold) || hasCloseElements(numbers, threshold * 2);\n};\n\nmodule.exports = hasCloseElementsOrEqual;\n\n},{\"./hasCloseElements\":134}],136:[function(require,module,exports){\nconst { hasCloseElements } = require('./hasCloseElements');\n\nconst hasCloseElementsOrEqual = (numbers, threshold) => {\n  return hasCloseElements(numbers, threshold) || hasCloseElements(numbers, threshold * 2);\n};\n\nmodule.exports = hasCloseElementsOrEqual;\n\n},{\"./hasCloseElements\":134}],137:[function(require,module,exports){\nconst { hasCloseElements } = require('./hasCloseElements');\n\nconst hasCloseElementsOrEqual = (numbers, threshold) => {\n  return hasCloseElements(numbers, threshold) || hasCloseElements(numbers, threshold * 2);\n};\n\nmodule.exports = hasCloseElementsOrEqual;\n\n},{\"./hasCloseElements\":134}],138:[function(require,module,exports){\nconst { hasCloseElements } = require('./hasCloseElements');\n\nconst hasCloseElementsOrEqual = (numbers, threshold) => {\n  return hasCloseElements(numbers, threshold) || hasCloseElements(numbers, threshold * 2);\n};\n\nmodule.exports = hasCloseElementsOrEqual;\n\n},{\"./hasCloseElements\":134}],139:[function(require,module,exports){\nconst { hasCloseElements } = require('./hasCloseElements');\n\nconst hasCloseElementsOrEqual = (numbers, threshold) => {\n  return hasCloseElements(numbers, threshold) || hasCloseElements(numbers, threshold * 2);\n};\n\nmodule.exports = hasCloseElementsOrEqual;\n\n},{\"./hasCloseElements\":134}],140:[function(require,module,exports){\nconst { hasCloseElements } = require('./hasCloseElements');\n\nconst hasCloseElementsOrEqual = (numbers, threshold) => {\n  return hasCloseElements(numbers, threshold) || hasCloseElements(numbers, threshold * 2);\n};\n\nmodule.exports = hasCloseElementsOrEqual;\n\n},{\"./hasCloseElements\":134}],141:[function(require,module,exports){\nconst { hasCloseElements } = require('./hasCloseElements');\n\nconst hasCloseElementsOrEqual = (numbers, threshold) => {\n  return hasCloseElements(numbers, threshold) || hasCloseElements(numbers, threshold * 2);\n};\n\nmodule.exports = hasCloseElementsOrEqual;\n\n},{\"./hasCloseElements\":134}],142:[function(require,module,exports){\nconst { hasCloseElements } = require('./hasCloseElements');\n\nconst hasCloseElementsOrEqual = (numbers, threshold) => {\n  return hasCloseElements(numbers, threshold) || hasCloseElements(numbers, threshold * 2);\n};\n\nmodule.exports = hasCloseElementsOrEqual;\n\n},{\"./hasCloseElements\":134}],143:[function(require,module,exports){\nconst { hasCloseElements } = require('./hasCloseElements');\n\nconst hasCloseElementsOrEqual = (numbers, threshold) => {\n  return hasCloseElements(numbers, threshold) || hasCloseElements(numbers, threshold * 2);\n};\n\nmodule.exports = hasCloseElementsOrEqual;\n\n},{\"./hasCloseElements\":134}],144:[function(require,module,exports){\nconst { hasCloseElements } = require('./hasCloseElements');\n\nconst hasCloseElementsOrEqual = (numbers, threshold) => {\n  return hasCloseElements(numbers, threshold) || hasCloseElements(numbers, threshold * 2);\n};\n\nmodule.exports = hasCloseElementsOrEqual;\n\n},{\"./hasCloseElements\":134}],145:[function(require,module,exports){\nconst { hasCloseElements } = require('./hasCloseElements');\n\nconst hasCloseElementsOrEqual = (numbers, threshold) => {\n  return hasCloseElements(numbers, threshold) || hasCloseElements(numbers, threshold * 2);\n};\n\nmodule.exports = hasCloseElementsOrEqual;\n\n},{\"./hasCloseElements\":134}],146:[function(require,module,exports){\nconst { hasCloseElements } = require('./hasCloseElements');\n\nconst hasCloseElementsOrEqual = (numbers, threshold) => {\n  return hasCloseElements(numbers, threshold) || hasCloseElements(numbers, threshold * 2);\n};\n\nmodule.exports = hasCloseElementsOrEqual;\n\n},{\"./hasCloseElements\":134}],147:[function(require,module,exports){\nconst { hasCloseElements } = require('./hasCloseElements');\n\nconst hasCloseElementsOrEqual = (numbers, threshold) => {\n  return hasCloseElements(numbers, threshold) || hasCloseElements(numbers, threshold * 2);\n};\n\nmodule.exports = hasCloseElementsOrEqual;\n\n},{\"./hasCloseElements\":134}],148:[function(require,module,exports){\nconst { hasCloseElements } = require('./hasCloseElements');\n\nconst hasCloseElementsOrEqual = (numbers, threshold) => {\n  return hasCloseElements(numbers, threshold) || hasCloseElements(numbers, threshold * 2);\n};\n\nmodule.exports = hasCloseElementsOrEqual;\n\n},{\"./hasCloseElements\":134}],149:[function(require,module,exports){\nconst { hasCloseElements } = require('./hasCloseElements');\n\nconst hasCloseElementsOrEqual = (numbers, threshold) => {\n  return hasCloseElements(numbers, threshold) || hasCloseElements(numbers, threshold * 2);\n};\n\nmodule.exports = hasCloseElementsOrEqual;\n\n},{\"./hasCloseElements\":134}],150:[function(require,module,exports){\nconst { hasCloseElements } = require('./hasCloseElements');\n\nconst hasCloseElementsOrEqual = (numbers, threshold) => {\n  return hasCloseElements(numbers, threshold) || hasCloseElements(numbers, threshold * 2);\n};\n\nmodule.exports = hasCloseElementsOrEqual;\n\n},{\"./hasCloseElements\":134}],151:[function(require,module,exports){\nconst { hasCloseElements } = require('./hasCloseElements');\n\nconst hasCloseElementsOrEqual = (numbers, threshold) => {\n  return hasCloseElements(numbers, threshold) || hasCloseElements(numbers, threshold * 2);\n};\n\nmodule.exports = hasCloseElementsOrEqual;\n\n},{\"./hasCloseElements\":134}],152:[function(require,module,exports){\nconst { hasCloseElements } = require('./hasCloseElements');\n\nconst hasCloseElementsOrEqual = (numbers, threshold) => {\n  return hasCloseElements(numbers, threshold) || hasCloseElements(numbers, threshold * 2);\n};\n\nmodule.exports = hasCloseElementsOrEqual;\n\n},{\"./hasCloseElements\":134}],153:[function(require,module,exports){\nconst { hasCloseElements } = require('./hasCloseElements');\n\nconst hasCloseElementsOrEqual = (numbers, threshold) => {\n  return hasCloseElements("}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\n\nconst separateParenGroups = (paren_string) => {\n  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n", "canonical_solution": "      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "partial": "/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      # print('@@this is the line to split##')\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "gc": "<|endoftext|>/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\n\nconst separateParenGroups = (paren_string) => {\n  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      if (current_depth == 0) {\n        result.push(current_string);\n        current_string = [];\n        current_depth = 0;\n      }\n    } else if (c == '(' || c == ')') {\n      if (current_depth == 0) {\n        current_string.push(c);\n      } else {\n        current_string.push(c);\n      }\n    }\n  }\n  if (current_depth == 0) {\n    result.push(current_string);\n  }\n  return result;\n};\n\nmodule.exports = separateParenGroups;\n\n},{}],4:[function(require,module,exports){\n/*\n  A JavaScript tokenizer / parser / pretty-printer.\n\n  Written by Michael Droettboom\n  Based on work by Vittorio Valenti (https://github.com/VittorioValenti)\n  Modified by Christian Johansen (https://github.com/christian)\n  Modified by Martijn Haverbeke (https://github.com/martijnhaverbeke)\n\n  Permission is hereby granted, free of charge, to any person obtaining\n  a copy of this software and associated documentation files (the\n  \"Software\"), to deal in the Software without restriction, including\n  without limitation the rights to use, copy, modify, merge, publish,\n  distribute, sublicense, and/or sell copies of the Software, and to\n  permit persons to whom the Software is furnished to do so, subject to\n  the following conditions:\n\n  The above copyright notice and this permission notice shall be\n  included in all copies or substantial portions of the Software.\n\n  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n  LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n  OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n  WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n*/\n\n\"use strict\";\n\nconst Token = require('./token');\nconst TokenTypes = require('./token-types');\n\nconst WHITESPACE ='\\t\\r\\n';\nconst NEWLINE = '\\n';\nconst INDENT =' ';\nconst DEDENT = '\\n';\nconst SKIP ='skip';\nconst SKIP_WHITESPACE ='skip-whitespace';\nconst SKIP_NEWLINE ='skip-newline';\nconst SKIP_INDENT ='skip-indent';\nconst SKIP_DEDENT ='skip-dedent';\nconst SKIP_ALL = [SKIP, SKIP_WHITESPACE, SKIP_NEWLINE, SKIP_INDENT, SKIP_DEDENT];\n\nconst WHITESPACE_RE = new RegExp(WHITESPACE, 'g');\nconst NEWLINE_RE = new RegExp(NEWLINE, 'g');\nconst INDENT_RE = new RegExp(INDENT, 'g');\nconst DEDENT_RE = new RegExp(DEDENT, 'g');\n\nconst WHITESPACE_RE_ALL = new RegExp(WHITESPACE, 'g');\nconst NEWLINE_RE_ALL = new RegExp(NEWLINE, 'g');\nconst INDENT_RE_ALL = new RegExp(INDENT, 'g');\nconst DEDENT_RE_ALL = new RegExp(DEDENT, 'g');\n\nconst WHITESPACE_RE_ALL_SKIP = new RegExp(WHITESPACE, 'g');\nconst NEWLINE_RE_ALL_SKIP = new RegExp(NEWLINE, 'g');\nconst INDENT_RE_ALL_SKIP = new RegExp(INDENT, 'g');\nconst DEDENT_RE_ALL_SKIP = new RegExp(DEDENT, 'g');\n\nconst WHITESPACE_RE_ALL_NEWLINE = new RegExp(WHITESPACE, 'g');\nconst NEWLINE_RE_ALL_NEWLINE = new RegExp(NEWLINE, 'g');\nconst INDENT_RE_ALL_NEWLINE = new RegExp(INDENT, 'g');\nconst DEDENT_RE_ALL_NEWLINE = new RegExp(DEDENT, 'g');\n\nconst WHITESPACE_RE_ALL_INDENT = new RegExp(WHITESPACE, 'g');\nconst NEWLINE_RE_ALL_INDENT = new RegExp(NEWLINE, 'g');\nconst INDENT_RE_ALL_INDENT = new RegExp(INDENT, 'g');\nconst DEDENT_RE_ALL_INDENT = new RegExp(DEDENT, 'g');\n\nconst WHITESPACE_RE_ALL_DEDENT = new RegExp(WHITESPACE, 'g');\nconst NEWLINE_RE_ALL_DEDENT = new RegExp(NEWLINE, 'g');\nconst INDENT_RE_ALL_DEDENT = new RegExp(INDENT, 'g');\nconst DEDENT_RE_ALL_DEDENT = new RegExp(DEDENT, 'g');\n\nconst WHITESPACE_RE_ALL_NEWLINE_SKIP = new RegExp(WHITESPACE, 'g');\nconst NEWLINE_RE_ALL_NEWLINE_SKIP = new RegExp(NEWLINE, 'g');\nconst INDENT_RE_ALL_NEWLINE_SKIP = new RegExp(INDENT, 'g');\nconst DEDENT_RE_ALL_NEWLINE_SKIP = new RegExp(DEDENT, 'g');\n\nconst WHITESPACE_RE_ALL_SKIP_INDENT = new RegExp(WHITESPACE, 'g');\nconst NEWLINE_RE_ALL_SKIP_INDENT = new RegExp(NEWLINE, 'g');\nconst INDENT_RE_ALL_SKIP_INDENT = new RegExp(INDENT, 'g');\nconst DEDENT_RE_ALL_SKIP_INDENT = new RegExp(DEDENT, 'g');\n\nconst WHITESPACE_RE_ALL_NEWLINE_SKIP_INDENT = new RegExp(WHITESPACE, 'g');\nconst NEWLINE_RE_ALL_NEWLINE_SKIP_INDENT = new RegExp(NEWLINE, 'g');\nconst INDENT_RE_ALL_NEWLINE_SKIP_INDENT = new RegExp(INDENT, 'g');\nconst DEDENT_RE_ALL_NEWLINE_SKIP_INDENT = new RegExp(DEDENT, 'g');\n\nconst WHITESPACE_RE_ALL_DEDENT_SKIP = new RegExp(WHITESPACE, 'g');\nconst NEWLINE_RE_ALL_DEDENT_SKIP = new RegExp(NEWLINE, 'g');\nconst INDENT_RE_ALL_DEDENT_SKIP = new RegExp(INDENT, 'g');\nconst DEDENT_RE_ALL_DEDENT_SKIP = new RegExp(DEDENT, 'g');\n\nconst WHITESPACE_RE_ALL_NEWLINE_SKIP_INDENT_SKIP = new RegExp(WHITESPACE, 'g');\nconst NEWLINE_RE_ALL_NEWLINE_SKIP_INDENT_SKIP = new RegExp(NEWLINE, 'g');\nconst INDENT_RE_ALL_NEWLINE_SKIP_INDENT_SKIP = new RegExp(INDENT, 'g');\nconst DEDENT_RE_ALL_NEWLINE_SKIP_INDENT_SKIP = new RegExp(DEDENT, 'g');\n\nconst WHITESPACE_RE_ALL_DEDENT_SKIP_INDENT_SKIP = new RegExp(WHITESPACE, 'g');\nconst NEWLINE_RE_ALL_DEDENT_SKIP_INDENT_SKIP = new RegExp(NEWLINE, 'g');\nconst INDENT_RE_ALL_DEDENT_SKIP_INDENT_SKIP = new RegExp(INDENT, 'g');\nconst DEDENT_RE_ALL_DEDENT_SKIP_INDENT_SKIP = new RegExp(DEDENT, 'g');\n\nconst WHITESPACE_RE_ALL_NEWLINE_SKIP_INDENT_SKIP_WHITESPACE = new RegExp(WHITESPACE, 'g');\nconst NEWLINE_RE_ALL_NEWLINE_SKIP_INDENT_SKIP_WHITESPACE = new RegExp(NEWLINE, 'g');\nconst INDENT_RE_ALL_NEWLINE_SKIP_INDENT_SKIP_WHITESPACE = new RegExp(INDENT, 'g');\nconst DEDENT_RE_ALL_NEWLINE_SKIP_INDENT_SKIP_WHITESP"}
{"task_id": "JavaScript/2", "prompt": "/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\n\nconst truncateNumber = (number) => {\n  return number % 1.0;\n", "canonical_solution": "}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "partial": "/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  return number % 1.0;\n  # print('@@this is the line to split##')\n}\n\n", "gc": "<|endoftext|>/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\n\nconst truncateNumber = (number) => {\n  return number % 1.0;\n};\n\n/**\n  Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\n\nconst truncateInteger = (number) => {\n  return Math.floor(number / 1.0);\n};\n\n/**\n  Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the fractional part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\n\nconst truncateFraction = (number) => {\n  return number % 1.0;\n};\n\n/**\n  Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the exponent part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\n\nconst truncateExponent = (number) => {\n  return Math.floor(Math.log(number) / Math.LN10);\n};\n\n/**\n  Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the mantissa part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\n\nconst truncateMantissa = (number) => {\n  return Math.floor(Math.log(number) / Math.LN10);\n};\n\n/**\n  Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the exponent part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\n\nconst truncateExponentMantissa = (number) => {\n  return Math.floor(Math.log(number) / Math.LN10);\n};\n\n/**\n  Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the exponent part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\n\nconst truncateExponentExponent = (number) => {\n  return Math.floor(Math.log(number) / Math.LN10);\n};\n\n/**\n  Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the exponent part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\n\nconst truncateExponentExponentMantissa = (number) => {\n  return Math.floor(Math.log(number) / Math.LN10);\n};\n\n/**\n  Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the exponent part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\n\nconst truncateExponentExponentMantissaExponent = (number) => {\n  return Math.floor(Math.log(number) / Math.LN10);\n};\n\n/**\n  Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the exponent part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\n\nconst truncateExponentExponentMantissaExponentMantissa = (number) => {\n  return Math.floor(Math.log(number) / Math.LN10);\n};\n\n/**\n  Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the exponent part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\n\nconst truncateExponentExponentMantissaExponentMantissaExponent = (number) => {\n  return Math.floor(Math.log(number) / Math.LN10);\n};\n\n/**\n  Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the exponent part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\n\nconst truncateExponentExponentMantissaExponentMantissaExponentMantissa = (number) => {\n  return Math.floor(Math.log(number) / Math.LN10);\n};\n\n/**\n  Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the exponent part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\n\nconst truncateExponentExponentMantissaExponentMantissaExponentMantissaExponentMantissaExponentMantissa = (number) => {\n  return Math.floor(Math.log(number) / Math.LN10);\n};\n\n/**\n  Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the exponent part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\n\nconst truncateExponentExponentMantissaExponentMantissaExponentMantissaExponentMantissaExponentMantissaExponentMantissaExponentMantissaExponentMantissaExponentMantissaExponentMantissaExponentMantissaExponentMantissaExponentMantissaExponentMantissaExponentMantissaExponentMantissaExponentMantissaExponentMantissaExponentMantissaExponentMantissaExponentMantissaExponentMantissaExponentMantissaExponentMantissaExponentMantissaExponentMantissaExponentMantissaExponentMantissaExponentMantissaExponentMantissaExponentMantissaExponentMantissaExponentMantissaExponentMantissaExponentMantissaExponentMantissaExponentMantissaExponentMantissaExponentMantissaExponentMantissaExponentMantissaExponentMantissaExponentMantissaExponentMantissaExponentMantissaExponentMantissaExponentMantissaExponentMantissaExponentMantissaExponentMantissaExponentMantissaExponentMantissaExponentMantissaExponentMantissaExponentMantissaExponentMantissaExponentMantissaExponentMantissaExponentMantissaExponentMantissaExponentMantissaExponentMantissaExponentMantissaExponentMantissaExponentMantissaExponentMantissaExponentMantissaExponentMantissaExponentMantissaExponentMantissaExponentMantissaExponentMantissaExponentMantissaExponentMantissaExponentMantissaExponentMantissaExponentMantissaExponentMantissaExponentMantissaExponentMantissaExponentMantissaExponentMantissaExponentMantissaExponentMantissaExponentMantissaExponentMantissaExponentM"}
{"task_id": "JavaScript/3", "prompt": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\n\nconst belowZero = (operations) => {\n  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n", "canonical_solution": "      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "partial": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      # print('@@this is the line to split##')\n      return true;\n    }\n  }\n  return false;\n}\n\n", "gc": "<|endoftext|>/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\n\nconst belowZero = (operations) => {\n  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nmodule.exports = belowZero;\n\n},{}],4:[function(require,module,exports){\n/**\n * You are given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZero([10, 20, 30])\n  false\n  >>> belowZero([10, -20, -30])\n  true\n  */\n\nconst belowZero = (operations) => {\n  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nmodule.exports = belowZero;\n\n},{}],5:[function(require,module,exports){\n/**\n * You are given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZero([10, 20, 30])\n  false\n  >>> belowZero([10, -20, -30])\n  true\n  */\n\nconst belowZero = (operations) => {\n  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nmodule.exports = belowZero;\n\n},{}],6:[function(require,module,exports){\n/**\n * You are given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZero([10, 20, 30])\n  false\n  >>> belowZero([10, -20, -30])\n  true\n  */\n\nconst belowZero = (operations) => {\n  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nmodule.exports = belowZero;\n\n},{}],7:[function(require,module,exports){\n/**\n * You are given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZero([10, 20, 30])\n  false\n  >>> belowZero([10, -20, -30])\n  true\n  */\n\nconst belowZero = (operations) => {\n  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nmodule.exports = belowZero;\n\n},{}],8:[function(require,module,exports){\n/**\n * You are given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZero([10, 20, 30])\n  false\n  >>> belowZero([10, -20, -30])\n  true\n  */\n\nconst belowZero = (operations) => {\n  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nmodule.exports = belowZero;\n\n},{}],9:[function(require,module,exports){\n/**\n * You are given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZero([10, 20, 30])\n  false\n  >>> belowZero([10, -20, -30])\n  true\n  */\n\nconst belowZero = (operations) => {\n  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nmodule.exports = belowZero;\n\n},{}],10:[function(require,module,exports){\n/**\n * You are given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZero([10, 20, 30])\n  false\n  >>> belowZero([10, -20, -30])\n  true\n  */\n\nconst belowZero = (operations) => {\n  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nmodule.exports = belowZero;\n\n},{}],11:[function(require,module,exports){\n/**\n * You are given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZero([10, 20, 30])\n  false\n  >>> belowZero([10, -20, -30])\n  true\n  */\n\nconst belowZero = (operations) => {\n  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nmodule.exports = belowZero;\n\n},{}],12:[function(require,module,exports){\n/**\n * You are given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZero([10, 20, 30])\n  false\n  >>> belowZero([10, -20, -30])\n  true\n  */\n\nconst belowZero = (operations) => {\n  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nmodule.exports = belowZero;\n\n},{}],13:[function(require,module,exports){\n/**\n * You are given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZero([10, 20, 30])\n  false\n  >>> belowZero([10, -20, -30])\n  true\n  */\n\nconst belowZero = (operation"}
{"task_id": "JavaScript/4", "prompt": "/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\n\nconst meanAbsoluteDeviation = (numbers) => {\n  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n", "canonical_solution": "    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "partial": "/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    # print('@@this is the line to split##')\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "gc": "<|endoftext|>/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\n\nconst meanAbsoluteDeviation = (numbers) => {\n  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.pow(item - mean, 2);\n  }, 0) / numbers.length;\n};\n\n/* For a given list of input numbers, calculate Mean Squared Deviation\n  around the mean of this dataset.\n  Mean Squared Deviation is the average of the squared differences between each\n  element and a centerpoint (mean in this case):\n  MSD = average | x - x_mean |^2\n  >>> meanSquaredDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\n\nconst meanSquaredDeviation = (numbers) => {\n  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.pow(item - mean, 2);\n  }, 0) / numbers.length;\n};\n\n/* For a given list of input numbers, calculate Root Mean Squared Deviation\n  around the mean of this dataset.\n  Root Mean Squared Deviation is the square root of the mean squared difference\n  between each element and a centerpoint (mean in this case):\n  RMSE = sqrt(mean | x - x_mean |)\n  >>> rootMeanSquaredDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\n\nconst rootMeanSquaredDeviation = (numbers) => {\n  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return Math.sqrt(mean);\n};\n\n/* For a given list of input numbers, calculate Standard Deviation around the mean\n  of this dataset.\n  Standard Deviation is the square root of the mean squared difference between each\n  element and a centerpoint (mean in this case):\n  SD = sqrt(mean | x - x_mean |)\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\n\nconst standardDeviation = (numbers) => {\n  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return Math.sqrt(mean);\n};\n\n/* For a given list of input numbers, calculate Variance (standard deviation) around the\n  mean of this dataset.\n  Variance is the square root of the standard deviation between each element and a centerpoint\n  (mean in this case):\n  V = sqrt(mean | x - x_mean |)\n  >>> variance([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\n\nconst variance = (numbers) => {\n  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return Math.sqrt(mean);\n};\n\n/* For a given list of input numbers, calculate Standard Deviation around the mean\n  of this dataset.\n  Standard Deviation is the square root of the mean squared difference between each\n  element and a centerpoint (mean in this case):\n  SD = sqrt(mean | x - x_mean |)\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\n\nconst standardDeviation = (numbers) => {\n  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return Math.sqrt(mean);\n};\n\n/* For a given list of input numbers, calculate Variance (standard deviation) around the\n  mean of this dataset.\n  Standard Deviation is the square root of the mean squared difference between each\n  element and a centerpoint (mean in this case):\n  SD = sqrt(mean | x - x_mean |)\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\n\nconst standardDeviation = (numbers) => {\n  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return Math.sqrt(mean);\n};\n\n/* For a given list of input numbers, calculate Standard Deviation around the mean\n  of this dataset.\n  Standard Deviation is the square root of the mean squared difference between each\n  element and a centerpoint (mean in this case):\n  SD = sqrt(mean | x - x_mean |)\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\n\nconst standardDeviation = (numbers) => {\n  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return Math.sqrt(mean);\n};\n\n/* For a given list of input numbers, calculate Standard Deviation around the mean\n  of this dataset.\n  Standard Deviation is the square root of the mean squared difference between each\n  element and a centerpoint (mean in this case):\n  SD = sqrt(mean | x - x_mean |)\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\n\nconst standardDeviation = (numbers) => {\n  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return Math.sqrt(mean);\n};\n\n/* For a given list of input numbers, calculate Standard Deviation around the mean\n  of this dataset.\n  Standard Deviation is the square root of the mean squared difference between each\n  element and a centerpoint (mean in this case):\n  SD = sqrt(mean | x - x_mean |)\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\n\nconst standardDeviation = (numbers) => {\n  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return Math.sqrt(mean);\n};\n\n/* For a given list of input numbers, calculate Standard Deviation around the mean\n  of this dataset.\n  Standard Deviation is the square root of the mean squared difference between each\n  element and a centerpoint (mean in this case):\n  SD = sqrt(mean | x - x_mean |)\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\n\nconst standardDeviation = (numbers) => {\n  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return Math.sqrt(mean);\n};\n\n/* For a given list of input numbers, calculate Standard Deviation around the mean\n  of this dataset.\n  Standard Deviation is the square root of the mean squared difference between each\n  element and a centerpoint (mean in this case):\n  SD = sqrt(mean | x - x_mean |)\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\n\nconst standardDeviation = (numbers) => {\n  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return Math.sqrt(mean);\n};\n\n/* For a given list of input numbers, calculate Standard Deviation around the mean\n  of this dataset.\n  Standard Deviation is the square root of the mean squared difference between each\n  element and a centerpoint (mean in this case):\n  SD = sqrt(mean | x - x_mean |)\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\n\nconst standardDeviation = (numbers) => {\n  var mean = numbers.reduce(("}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\n\nconst intersperse = (numbers, delimeter) => {\n  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n", "canonical_solution": "    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "partial": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    # print('@@this is the line to split##')\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "gc": "<|endoftext|>/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\n\nconst intersperse = (numbers, delimeter) => {\n  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    if (n!= 0 && n!= delimeter)\n      result.push(n);\n  }\n  return result;\n};\n\n/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([1,2,3], 4)\n  [1, 2, 3, 4, 1, 4, 2, 3]\n  */\n\nconst intersperseAll = (numbers, delimeter) => {\n  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    if (n!= 0 && n!= delimeter)\n      result.push(n);\n  }\n  return result;\n};\n\n/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperseAll([1,2,3], 4)\n  [1, 2, 3, 4, 1, 4, 2, 3]\n  */\n\nconst intersperseAllWith = (numbers, delimeter) => {\n  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    if (n!= 0 && n!= delimeter)\n      result.push(n);\n  }\n  return result;\n};\n\n/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperseAllWith([1,2,3], 4)\n  [1, 2, 3, 4, 1, 4, 2, 3]\n  */\n\nconst intersperseAllWithAll = (numbers, delimeter) => {\n  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    if (n!= 0 && n!= delimeter)\n      result.push(n);\n  }\n  return result;\n};\n\n/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperseAllWithAll([1,2,3], 4)\n  [1, 2, 3, 4, 1, 4, 2, 3]\n  */\n\nconst intersperseAllWithAllWith = (numbers, delimeter) => {\n  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    if (n!= 0 && n!= delimeter)\n      result.push(n);\n  }\n  return result;\n};\n\n/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperseAllWithAllWith([1,2,3], 4)\n  [1, 2, 3, 4, 1, 4, 2, 3]\n  */\n\nconst intersperseAllWithAllWithAll = (numbers, delimeter) => {\n  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    if (n!= 0 && n!= delimeter)\n      result.push(n);\n  }\n  return result;\n};\n\n/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperseAllWithAllWithAll([1,2,3], 4)\n  [1, 2, 3, 4, 1, 4, 2, 3]\n  */\n\nconst intersperseAllWithAllWithAllWith = (numbers, delimeter) => {\n  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    if (n!= 0 && n!= delimeter)\n      result.push(n);\n  }\n  return result;\n};\n\n/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperseAllWithAllWithAll([1,2,3], 4)\n  [1, 2, 3, 4, 1, 4, 2, 3]\n  */\n\nconst intersperseAllWithAllWithAllWithAll = (numbers, delimeter) => {\n  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    if (n!= 0 && n!= delimeter)\n      result.push(n);\n  }\n  return result;\n};\n\n/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperseAllWithAllWithAllWithAll([1,2,3], 4)\n  [1, 2, 3, 4, 1, 4, 2, 3]\n  */\n\nconst intersperseAllWithAllWithAllWithAll = (numbers, delimeter) => {\n  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    if (n!= 0 && n!= delimeter)\n      result.push(n);\n  }\n  return result;\n};\n\n/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperseAllWithAllWithAllWithAll([1,2,3], 4)\n  [1, 2, 3, 4, 1, 4, 2, 3]\n  */\n\nconst intersperseAllWithAllWithAllWithAllWith = (numbers, delimeter) => {\n  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    if (n!= 0 && n!= delimeter)\n      result.push(n);\n  }\n  return result;\n};\n\n/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperseAllWithAllWithAllWithAllWithAll([1,2,3], 4)\n  [1, 2, 3, 4, 1, 4, 2, 3]\n  */\n\nconst intersperseAllWithAllWithAllWithAllWithAll = (numbers, delimeter) => {\n  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    if (n!= 0 && n!= delimeter)\n      result.push(n);\n  }\n  return result;\n};\n\n/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperseAllWithAllWithAllWithAllWithAll([1,2,3], 4)\n  [1, 2, 3, 4, 1, 4, 2, 3]\n  */\n\nconst intersperseAllWithAllWithAllWithAllWithAll = (numbers, delimeter) => {\n  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    if (n!= 0 && n!= delimeter)\n      result.push(n);\n  }\n  return result;\n};\n\n/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperseAllWithAllWithAllWithAllWithAll([1,2,3], 4)\n  [1, 2, 3, 4, 1, 4, 2, 3]\n  */\n\nconst intersperseAllWithAllWithAllWithAllWithAllWith = (numbers, delimeter) => {\n  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    if (n!= 0 && n!= delimeter)\n      result.push(n);\n  }\n  return result;\n};\n\n/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperseAllWithAllWithAllWithAllWithAllWithAll([1,2,3], 4)\n  [1, 2, 3, 4, 1, 4, 2, 3]\n  */\n\nconst intersperseAllWithAllWithAllWithAllWithAllWithAll = (numbers, delimeter) => {\n  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    if (n!= 0 && n!= delimeter)\n"}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\n\nconst parseNestedParens = (paren_string) => {\n  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n", "canonical_solution": "      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "partial": "/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n        # print('@@this is the line to split##')\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "gc": "<|endoftext|>/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\n\nconst parseNestedParens = (paren_string) => {\n  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n        if (depth > max_depth) {\n          max_depth = depth;\n        }\n      }\n    }\n    return max_depth;\n  };\n  var parseParens = function (s) {\n    let max_depth = parseParenGroup(s);\n    let result = [];\n    for (let i = 0; i < max_depth; i++) {\n      result.push(parseParens(s.slice(max_depth + 1)));\n    }\n    return result;\n  };\n  return parseParens(paren_string);\n};\n\nconst parseParensString = (paren_string) => {\n  var parseParensGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n        if (depth > max_depth) {\n          max_depth = depth;\n        }\n      }\n    }\n    return max_depth;\n  };\n  var parseParensString = function (s) {\n    let max_depth = parseParensGroup(s);\n    let result = [];\n    for (let i = 0; i < max_depth; i++) {\n      result.push(parseParensString(s.slice(max_depth + 1)));\n    }\n    return result;\n  };\n  return parseParensString(paren_string);\n};\n\nconst parseParensStringWithParens = (paren_string) => {\n  var parseParensGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n        if (depth > max_depth) {\n          max_depth = depth;\n        }\n      }\n    }\n    return max_depth;\n  };\n  var parseParensString = function (s) {\n    let max_depth = parseParensGroup(s);\n    let result = [];\n    for (let i = 0; i < max_depth; i++) {\n      result.push(parseParensString(s.slice(max_depth + 1)));\n    }\n    return result;\n  };\n  return parseParensString(paren_string);\n};\n\nconst parseParensStringWithParensAndParens = (paren_string) => {\n  var parseParensGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n        if (depth > max_depth) {\n          max_depth = depth;\n        }\n      }\n    }\n    return max_depth;\n  };\n  var parseParensString = function (s) {\n    let max_depth = parseParensGroup(s);\n    let result = [];\n    for (let i = 0; i < max_depth; i++) {\n      result.push(parseParensString(s.slice(max_depth + 1)));\n    }\n    return result;\n  };\n  return parseParensString(paren_string);\n};\n\nconst parseParensStringWithParensAndParensAndParens = (paren_string) => {\n  var parseParensGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n        if (depth > max_depth) {\n          max_depth = depth;\n        }\n      }\n    }\n    return max_depth;\n  };\n  var parseParensString = function (s) {\n    let max_depth = parseParensGroup(s);\n    let result = [];\n    for (let i = 0; i < max_depth; i++) {\n      result.push(parseParensString(s.slice(max_depth + 1)));\n    }\n    return result;\n  };\n  return parseParensString(paren_string);\n};\n\nconst parseParensStringWithParensAndParensAndParensAndParens = (paren_string) => {\n  var parseParensGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n        if (depth > max_depth) {\n          max_depth = depth;\n        }\n      }\n    }\n    return max_depth;\n  };\n  var parseParensString = function (s) {\n    let max_depth = parseParensGroup(s);\n    let result = [];\n    for (let i = 0; i < max_depth; i++) {\n      result.push(parseParensString(s.slice(max_depth + 1)));\n    }\n    return result;\n  };\n  return parseParensString(paren_string);\n};\n\nconst parseParensStringWithParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParen"}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\n\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(x => x.indexOf(substring) != -1);\n", "canonical_solution": "}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "partial": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(x => x.indexOf(substring) != -1);\n  # print('@@this is the line to split##')\n}\n\n", "gc": "<|endoftext|>/* Filter an input list of strings only for ones that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\n\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(x => x.indexOf(substring)!= -1);\n};\n\n/**\n * Convert a string to lowercase.\n *\n * @param  {string} str\n * @return {string}\n */\nconst toLowercase = str => str.toLowerCase();\n\n/**\n * Convert a string to uppercase.\n *\n * @param  {string} str\n * @return {string}\n */\nconst toUppercase = str => str.toUpperCase();\n\n/**\n * Convert a string to camelcase.\n *\n * @param  {string} str\n * @return {string}\n */\nconst toCamelcase = str => str.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();\n\n/**\n * Convert a string to snakecase.\n *\n * @param  {string} str\n * @return {string}\n */\nconst toSnakecase = str => str.replace(/([A-Z])/g, '-$1').toLowerCase();\n\n/**\n * Convert a string to pascal case.\n *\n * @param  {string} str\n * @return {string}\n */\nconst toPascalcase = str => str.replace(/([a-z])([A-Z])/g, '$1-$2').toUpperCase();\n\n/**\n * Convert a string to kebab case.\n *\n * @param  {string} str\n * @return {string}\n */\nconst toKebabcase = str => str.replace(/([A-Z])/g, '-$1').toLowerCase();\n\n/**\n * Convert a string to snake case.\n *\n * @param  {string} str\n * @return {string}\n */\nconst toSnakecase = str => str.replace(/([a-z])([A-Z])/g, '$1-$2').toUpperCase();\n\n/**\n * Convert a string to pascal case.\n *\n * @param  {string} str\n * @return {string}\n */\nconst toPascalcase = str => str.replace(/([a-z])([A-Z])/g, '$1-$2').toUpperCase();\n\n/**\n * Convert a string to kebab case.\n *\n * @param  {string} str\n * @return {string}\n */\nconst toKebabcase = str => str.replace(/([A-Z])/g, '-$1').toLowerCase();\n\n/**\n * Convert a string to snake case.\n *\n * @param  {string} str\n * @return {string}\n */\nconst toSnakecase = str => str.replace(/([a-z])([A-Z])/g, '$1-$2').toUpperCase();\n\n/**\n * Convert a string to pascal case.\n *\n * @param  {string} str\n * @return {string}\n */\nconst toPascalcase = str => str.replace(/([a-z])([A-Z])/g, '$1-$2').toUpperCase();\n\n/**\n * Convert a string to kebab case.\n *\n * @param  {string} str\n * @return {string}\n */\nconst toKebabcase = str => str.replace(/([A-Z])/g, '-$1').toLowerCase();\n\n/**\n * Convert a string to snake case.\n *\n * @param  {string} str\n * @return {string}\n */\nconst toSnakecase = str => str.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();\n\n/**\n * Convert a string to pascal case.\n *\n * @param  {string} str\n * @return {string}\n */\nconst toPascalcase = str => str.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();\n\n/**\n * Convert a string to kebab case.\n *\n * @param  {string} str\n * @return {string}\n */\nconst toKebabcase = str => str.replace(/([A-Z])/g, '-$1').toLowerCase();\n\n/**\n * Convert a string to snake case.\n *\n * @param  {string} str\n * @return {string}\n */\nconst toSnakecase = str => str.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();\n\n/**\n * Convert a string to pascal case.\n *\n * @param  {string} str\n * @return {string}\n */\nconst toPascalcase = str => str.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();\n\n/**\n * Convert a string to kebab case.\n *\n * @param  {string} str\n * @return {string}\n */\nconst toKebabcase = str => str.replace(/([A-Z])/g, '-$1').toLowerCase();\n\n/**\n * Convert a string to snake case.\n *\n * @param  {string} str\n * @return {string}\n */\nconst toSnakecase = str => str.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();\n\n/**\n * Convert a string to pascal case.\n *\n * @param  {string} str\n * @return {string}\n */\nconst toPascalcase = str => str.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();\n\n/**\n * Convert a string to kebab case.\n *\n * @param  {string} str\n * @return {string}\n */\nconst toKebabcase = str => str.replace(/([A-Z])/g, '-$1').toLowerCase();\n\n/**\n * Convert a string to snake case.\n *\n * @param  {string} str\n * @return {string}\n */\nconst toSnakecase = str => str.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();\n\n/**\n * Convert a string to pascal case.\n *\n * @param  {string} str\n * @return {string}\n */\nconst toPascalcase = str => str.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();\n\n/**\n * Convert a string to kebab case.\n *\n * @param  {string} str\n * @return {string}\n */\nconst toKebabcase = str => str.replace(/([A-Z])/g, '-$1').toLowerCase();\n\n/**\n * Convert a string to snake case.\n *\n * @param  {string} str\n * @return {string}\n */\nconst toSnakecase = str => str.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();\n\n/**\n * Convert a string to pascal case.\n *\n * @param  {string} str\n * @return {string}\n */\nconst toPascalcase = str => str.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();\n\n/**\n * Convert a string to kebab case.\n *\n * @param  {string} str\n * @return {string}\n */\nconst toKebabcase = str => str.replace(/([A-Z])/g, '-$1').toLowerCase();\n\n/**\n * Convert a string to snake case.\n *\n * @param  {string} str\n * @return {string}\n */\nconst toSnakecase = str => str.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();\n\n/**\n * Convert a string to pascal case.\n *\n * @param  {string} str\n * @return {string}\n */\nconst toPascalcase = str => str.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();\n\n/**\n * Convert a string to kebab case.\n *\n * @param  {string} str\n * @return {string}\n */\nconst toKebabcase = str => str.replace(/([A-Z])/g, '-$1').toLowerCase();\n\n/**\n * Convert a string to snake case.\n *\n * @param  {string} str\n * @return {string}\n */\nconst toSnakecase = str => str.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();\n\n/**\n * Convert a string to pascal case.\n *\n * @param  {string} str\n * @return {string}\n */\nconst toPascalcase = str => str.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();\n\n/**\n * Convert a string to kebab case.\n *\n * @param  {string} str\n * @return {string}\n */\nconst toKebabcase = str => str.replace(/([A-Z])/g, '-$1').toLowerCase();\n\n/**\n * Convert "}
{"task_id": "JavaScript/8", "prompt": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\n\nconst sumProduct = (numbers, int) => {\n  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n", "canonical_solution": "    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "partial": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    # print('@@this is the line to split##')\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "gc": "<|endoftext|>/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\n\nconst sumProduct = (numbers, int) => {\n  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n};\n\nmodule.exports = sumProduct;\n\n},{}],9:[function(require,module,exports){\n// https://d3js.org/d3-array/ Version 1.0.5. Copyright 2017 Mike Bostock.\n(function (global, factory) {\n\ttypeof exports === 'object' && typeof module!== 'undefined'? factory(exports) :\n\ttypeof define === 'function' && define.amd? define(['exports'], factory) :\n\t(factory((global.d3 = global.d3 || {})));\n}(this, (function (exports) { 'use strict';\n\nvar version = \"1.0.5\";\n\nvar ascending = function(a, b) {\n  return a < b? -1 : a > b? 1 : a >= b? 0 : NaN;\n};\n\nvar bisector = function(compare) {\n  if (compare.length === 1) compare = ascendingComparator(compare);\n  return {\n    left: function(a, x, lo, hi) {\n      if (lo == null) lo = 0;\n      if (hi == null) hi = a.length;\n      while (lo < hi) {\n        var mid = lo + hi >>> 1;\n        if (compare(a[mid], x) < 0) lo = mid + 1;\n        else hi = mid;\n      }\n      return lo;\n    },\n    right: function(a, x, lo, hi) {\n      if (lo == null) lo = 0;\n      if (hi == null) hi = a.length;\n      while (lo < hi) {\n        var mid = lo + hi >>> 1;\n        if (compare(a[mid], x) > 0) hi = mid;\n        else lo = mid + 1;\n      }\n      return lo;\n    }\n  };\n};\n\nfunction ascendingComparator(f) {\n  return function(d, x) {\n    return ascending(f(d), x);\n  };\n}\n\nvar ascendingBisect = bisector(ascending);\nvar bisectRight = ascendingBisect.right;\nvar bisectLeft = ascendingBisect.left;\n\nvar descending = function(a, b) {\n  return b < a? -1 : b > a? 1 : b >= a? 0 : NaN;\n};\n\nvar number = function(x) {\n  return x === null? NaN : +x;\n};\n\nvar variance = function(array, f) {\n  var n = array.length,\n      m = 0,\n      a,\n      d,\n      s = 0,\n      i = -1,\n      j = 0;\n\n  if (f == null) {\n    while (++i < n) {\n      if (!isNaN(a = number(array[i]))) {\n        d = a - m;\n        m += d / ++j;\n        s += d * (a - m);\n      }\n    }\n  }\n\n  else {\n    while (++i < n) {\n      if (!isNaN(a = number(f(array[i], i, array)))) {\n        d = a - m;\n        m += d / ++j;\n        s += d * (a - m);\n      }\n    }\n  }\n\n  if (j > 1) return s / (j - 1);\n};\n\nvar deviation = function(array, f) {\n  var v = variance(array, f);\n  return v? Math.sqrt(v) : v;\n};\n\nvar extent = function(array, f) {\n  var i = -1,\n      n = array.length,\n      a,\n      b,\n      c;\n\n  if (f == null) {\n    while (++i < n) if ((b = array[i])!= null && b >= b) { a = c = b; break; }\n    while (++i < n) if ((b = array[i])!= null) {\n      if (a > b) a = b;\n      if (c < b) c = b;\n    }\n  }\n\n  else {\n    while (++i < n) if ((b = f(array[i], i, array))!= null && b >= b) { a = c = b; break; }\n    while (++i < n) if ((b = f(array[i], i, array))!= null) {\n      if (a > b) a = b;\n      if (c < b) c = b;\n    }\n  }\n\n  return [a, c];\n};\n\nvar array = Array.prototype;\n\nvar slice = array.slice;\nvar map = array.map;\n\nvar constant = function(x) {\n  return function() {\n    return x;\n  };\n};\n\nvar identity = function(x) {\n  return x;\n};\n\nvar range = function(start, stop, step) {\n  start = +start, stop = +stop, step = (n = arguments.length) < 2? (stop = start, start = 0, 1) : n < 3? 1 : +step;\n\n  var i = -1,\n      n = Math.max(0, Math.ceil((stop - start) / step)) | 0,\n      range = new Array(n);\n\n  while (++i < n) {\n    range[i] = start + i * step;\n  }\n\n  return range;\n};\n\nvar e10 = Math.sqrt(50);\nvar e5 = Math.sqrt(10);\nvar e2 = Math.sqrt(2);\n\nvar ticks = function(start, stop, count) {\n  var step = tickStep(start, stop, count);\n  return range(\n    Math.ceil(start / step) * step,\n    Math.floor(stop / step) * step + step / 2, // inclusive\n    step\n  );\n};\n\nfunction tickStep(start, stop, count) {\n  var step0 = Math.abs(stop - start) / Math.max(0, count),\n      step1 = Math.pow(10, Math.floor(Math.log(step0) / Math.LN10)),\n      error = step0 / step1;\n  if (error >= e10) step1 *= 10;\n  else if (error >= e5) step1 *= 5;\n  else if (error >= e2) step1 *= 2;\n  return stop < start? -step1 : step1;\n}\n\nvar sturges = function(values) {\n  return Math.ceil(Math.log(values.length) / Math.LN2) + 1;\n};\n\nvar histogram = function() {\n  var value = identity,\n      domain = extent,\n      threshold = sturges;\n\n  function histogram(data) {\n    var i,\n        n = data.length,\n        x,\n        values = new Array(n);\n\n    for (i = 0; i < n; ++i) {\n      values[i] = value(data[i], i, data);\n    }\n\n    var xz = domain(values),\n        x0 = xz[0],\n        x1 = xz[1],\n        tz = threshold(values, x0, x1);\n\n    // Convert number of thresholds into uniform thresholds.\n    if (!Array.isArray(tz)) tz = ticks(x0, x1, tz);\n\n    // Remove any thresholds outside the domain.\n    var m = tz.length;\n    while (tz[0] <= x0) tz.shift(), --m;\n    while (tz[m - 1] >= x1) tz.pop(), --m;\n\n    var bins = new Array(m + 1),\n        bin;\n\n    // Initialize bins.\n    for (i = 0; i <= m; ++i) {\n      bin = bins[i] = [];\n      bin.x0 = i > 0? tz[i - 1] : x0;\n      bin.x1 = i < m? tz[i] : x1;\n    }\n\n    // Assign data to bins by value, ignoring any outside the domain.\n    for (i = 0; i < n; ++i) {\n      x = values[i];\n      if (x0 <= x && x <= x1) {\n        bins[bisectRight(tz, x, 0, m)].push(data[i]);\n      }\n    }\n\n    return bins;\n  }\n\n  histogram.value = function(_) {\n    return arguments.length? (value = typeof _ === \"function\"? _ : constant(_), histogram) : value;\n  };\n\n  histogram.domain = function(_) {\n    return arguments.length? (domain = typeof _ === \"function\"? _ : constant([_[0], _[1]]), histogram) : domain;\n  };\n\n  histogram.thresholds = function(_) {\n    return arguments.length? (threshold = typeof _ === \"function\"? _ : Array.isArray(_)? constant(slice.call(_)) : constant(_), histogram) : threshold;\n  };\n\n  return histogram;\n};\n\nvar threshold = function(array, p, f) {\n  if (f == null) f = number;\n  if (!(n = array.length)) return;\n  if ((p = +p) <= "}
{"task_id": "JavaScript/9", "prompt": "/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\n\nconst rollingMax = (numbers) => {\n  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n", "canonical_solution": "      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "partial": "/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      # print('@@this is the line to split##')\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "gc": "<|endoftext|>/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\n\nconst rollingMax = (numbers) => {\n  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(n);\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling minimum element found until given moment\n  in the sequence.\n  >>> rollingMin([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 4, 2, 3]\n  */\n\nconst rollingMin = (numbers) => {\n  var running_min, result = [];\n  for (const n of numbers) {\n    if (running_min == undefined)\n      running_min = n;\n    else\n      running_min = Math.min(running_min, n);\n    result.push(n);\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling sum element found until given moment\n  in the sequence.\n  >>> rollingSum([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 4, 5, 6, 7]\n  */\n\nconst rollingSum = (numbers) => {\n  var running_sum, result = [];\n  for (const n of numbers) {\n    if (running_sum == undefined)\n      running_sum = n;\n    else\n      running_sum += n;\n    result.push(n);\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling product element found until given moment\n  in the sequence.\n  >>> rollingProduct([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 4, 5, 6, 7]\n  */\n\nconst rollingProduct = (numbers) => {\n  var running_product, result = [];\n  for (const n of numbers) {\n    if (running_product == undefined)\n      running_product = n;\n    else\n      running_product *= n;\n    result.push(n);\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling sum element found until given moment\n  in the sequence.\n  >>> rollingSumOf([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 4, 5, 6, 7]\n  */\n\nconst rollingSumOf = (numbers) => {\n  var running_sum, result = [];\n  for (const n of numbers) {\n    if (running_sum == undefined)\n      running_sum = n;\n    else\n      running_sum += n;\n    result.push(n);\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling product element found until given moment\n  in the sequence.\n  >>> rollingProductOf([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 4, 5, 6, 7]\n  */\n\nconst rollingProductOf = (numbers) => {\n  var running_product, result = [];\n  for (const n of numbers) {\n    if (running_product == undefined)\n      running_product = n;\n    else\n      running_product *= n;\n    result.push(n);\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling sum element found until given moment\n  in the sequence.\n  >>> rollingSumOf([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 4, 5, 6, 7]\n  */\n\nconst rollingSumOf = (numbers) => {\n  var running_sum, result = [];\n  for (const n of numbers) {\n    if (running_sum == undefined)\n      running_sum = n;\n    else\n      running_sum += n;\n    result.push(n);\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling product element found until given moment\n  in the sequence.\n  >>> rollingProductOf([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 4, 5, 6, 7]\n  */\n\nconst rollingProductOf = (numbers) => {\n  var running_product, result = [];\n  for (const n of numbers) {\n    if (running_product == undefined)\n      running_product = n;\n    else\n      running_product *= n;\n    result.push(n);\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling sum element found until given moment\n  in the sequence.\n  >>> rollingSumOf([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 4, 5, 6, 7]\n  */\n\nconst rollingSumOf = (numbers) => {\n  var running_sum, result = [];\n  for (const n of numbers) {\n    if (running_sum == undefined)\n      running_sum = n;\n    else\n      running_sum += n;\n    result.push(n);\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling product element found until given moment\n  in the sequence.\n  >>> rollingProductOf([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 4, 5, 6, 7]\n  */\n\nconst rollingProductOf = (numbers) => {\n  var running_product, result = [];\n  for (const n of numbers) {\n    if (running_product == undefined)\n      running_product = n;\n    else\n      running_product *= n;\n    result.push(n);\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling sum element found until given moment\n  in the sequence.\n  >>> rollingSumOf([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 4, 5, 6, 7]\n  */\n\nconst rollingSumOf = (numbers) => {\n  var running_sum, result = [];\n  for (const n of numbers) {\n    if (running_sum == undefined)\n      running_sum = n;\n    else\n      running_sum += n;\n    result.push(n);\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling product element found until given moment\n  in the sequence.\n  >>> rollingProductOf([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 4, 5, 6, 7]\n  */\n\nconst rollingProductOf = (numbers) => {\n  var running_product, result = [];\n  for (const n of numbers) {\n    if (running_product == undefined)\n      running_product = n;\n    else\n      running_product *= n;\n    result.push(n);\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling sum element found until given moment\n  in the sequence.\n  >>> rollingSumOf([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 4, 5, 6, 7]\n  */\n\nconst rollingSumOf = (numbers) => {\n  var running_sum, result = [];\n  for (const n of numbers) {\n    if (running_sum == undefined)\n      running_sum = n;\n    else\n      running_sum += n;\n    result.push(n);\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling product element found until given moment\n  in the sequence.\n  >>> rollingProductOf([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 4, 5, 6, 7]\n  */\n\nconst rollingProductOf = (numbers) => {\n  var running_product, result = [];\n  for (const n of numbers) {\n    if (running_product == undefined)\n      running_product = n;\n    else\n      running_product *= n;\n    result.push(n);\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling sum element found until given moment\n  in the sequence.\n  >>> rollingSumOf([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 4, 5, 6, 7]\n  */\n\nconst rollingSumOf = (numbers) => {\n  var running_sum, result = [];\n  for (const n of numbers) {\n    if (running_sum == undefined)\n      running_sum = n;\n    else\n      running_sum += n;\n    result.push(n);\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling product element found until given moment\n  in the sequence.\n  >>> rollingProductOf([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 4, 5, 6, 7]\n  */\n\nconst rollingProductOf = (numbers) => {\n  var running_product, result = [];\n  for (const n of numbers) {\n    if (running_product == undefined)\n      running_product = n;\n    else\n      running_product *= n;\n    result.push(n);\n  }\n  return result;\n};\n\n/* From a given "}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\n\nconst makePalindrome = (string) => {\n  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n", "canonical_solution": "  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "partial": "/* Test if gniven strig is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  # print('@@this is the line to split##')\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "gc": "<|endoftext|>/* Test if gniven strig is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\n\nconst makePalindrome = (string) => {\n  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  var palindrome = '';\n  var suffix = '';\n  var reversed_string = '';\n  var palindrome_length = 0;\n  var palindrome_length_of_string = 0;\n  var palindrome_length_of_reversed_string = 0;\n  var palindrome_length_of_reversed_string2 = 0;\n  var palindrome_length_of_reversed_string3 = 0;\n  var palindrome_length_of_reversed_string4 = 0;\n  var palindrome_length_of_reversed_string5 = 0;\n  var palindrome_length_of_reversed_string6 = 0;\n  var palindrome_length_of_reversed_string7 = 0;\n  var palindrome_length_of_reversed_string8 = 0;\n  var palindrome_length_of_reversed_string9 = 0;\n  var palindrome_length_of_reversed_string10 = 0;\n  var palindrome_length_of_reversed_string11 = 0;\n  var palindrome_length_of_reversed_string12 = 0;\n  var palindrome_length_of_reversed_string13 = 0;\n  var palindrome_length_of_reversed_string14 = 0;\n  var palindrome_length_of_reversed_string15 = 0;\n  var palindrome_length_of_reversed_string16 = 0;\n  var palindrome_length_of_reversed_string17 = 0;\n  var palindrome_length_of_reversed_string18 = 0;\n  var palindrome_length_of_reversed_string19 = 0;\n  var palindrome_length_of_reversed_string20 = 0;\n  var palindrome_length_of_reversed_string21 = 0;\n  var palindrome_length_of_reversed_string22 = 0;\n  var palindrome_length_of_reversed_string23 = 0;\n  var palindrome_length_of_reversed_string24 = 0;\n  var palindrome_length_of_reversed_string25 = 0;\n  var palindrome_length_of_reversed_string26 = 0;\n  var palindrome_length_of_reversed_string27 = 0;\n  var palindrome_length_of_reversed_string28 = 0;\n  var palindrome_length_of_reversed_string29 = 0;\n  var palindrome_length_of_reversed_string30 = 0;\n  var palindrome_length_of_reversed_string31 = 0;\n  var palindrome_length_of_reversed_string32 = 0;\n  var palindrome_length_of_reversed_string33 = 0;\n  var palindrome_length_of_reversed_string34 = 0;\n  var palindrome_length_of_reversed_string35 = 0;\n  var palindrome_length_of_reversed_string36 = 0;\n  var palindrome_length_of_reversed_string37 = 0;\n  var palindrome_length_of_reversed_string38 = 0;\n  var palindrome_length_of_reversed_string39 = 0;\n  var palindrome_length_of_reversed_string40 = 0;\n  var palindrome_length_of_reversed_string41 = 0;\n  var palindrome_length_of_reversed_string42 = 0;\n  var palindrome_length_of_reversed_string43 = 0;\n  var palindrome_length_of_reversed_string44 = 0;\n  var palindrome_length_of_reversed_string45 = 0;\n  var palindrome_length_of_reversed_string46 = 0;\n  var palindrome_length_of_reversed_string47 = 0;\n  var palindrome_length_of_reversed_string48 = 0;\n  var palindrome_length_of_reversed_string49 = 0;\n  var palindrome_length_of_reversed_string50 = 0;\n  var palindrome_length_of_reversed_string51 = 0;\n  var palindrome_length_of_reversed_string52 = 0;\n  var palindrome_length_of_reversed_string53 = 0;\n  var palindrome_length_of_reversed_string54 = 0;\n  var palindrome_length_of_reversed_string55 = 0;\n  var palindrome_length_of_reversed_string56 = 0;\n  var palindrome_length_of_reversed_string57 = 0;\n  var palindrome_length_of_reversed_string58 = 0;\n  var palindrome_length_of_reversed_string59 = 0;\n  var palindrome_length_of_reversed_string60 = 0;\n  var palindrome_length_of_reversed_string61 = 0;\n  var palindrome_length_of_reversed_string62 = 0;\n  var palindrome_length_of_reversed_string63 = 0;\n  var palindrome_length_of_reversed_string64 = 0;\n  var palindrome_length_of_reversed_string65 = 0;\n  var palindrome_length_of_reversed_string66 = 0;\n  var palindrome_length_of_reversed_string67 = 0;\n  var palindrome_length_of_reversed_string68 = 0;\n  var palindrome_length_of_reversed_string69 = 0;\n  var palindrome_length_of_reversed_string70 = 0;\n  var palindrome_length_of_reversed_string71 = 0;\n  var palindrome_length_of_reversed_string72 = 0;\n  var palindrome_length_of_reversed_string73 = 0;\n  var palindrome_length_of_reversed_string74 = 0;\n  var palindrome_length_of_reversed_string75 = 0;\n  var palindrome_length_of_reversed_string76 = 0;\n  var palindrome_length_of_reversed_string77 = 0;\n  var palindrome_length_of_reversed_string78 = 0;\n  var palindrome_length_of_reversed_string79 = 0;\n  var palindrome_length_of_reversed_string80 = 0;\n  var palindrome_length_of_reversed_string81 = 0;\n  var palindrome_length_of_reversed_string82 = 0;\n  var palindrome_length_of_reversed_string83 = 0;\n  var palindrome_length_of_reversed_string84 = 0;\n  var palindrome_length_of_reversed_string85 = 0;\n  var palindrome_length_of_reversed_string86 = 0;\n  var palindrome_length_of_reversed_string87 = 0;\n  var palindrome_length_of_reversed_string88 = 0;\n  var palindrome_length_of_reversed_string89 = 0;\n  var palindrome_length_of_reversed_string90 = 0;\n  var palindrome_length_of_reversed_string91 = 0;\n  var palindrome_length_of_reversed_string92 = 0;\n  var palindrome_length_of_reversed_string93 = 0;\n  var palindrome_length_of_reversed_string94 = 0;\n  var palindrome_length_of_reversed_string95 = 0;\n  var palindrome_length_of_reversed_string96 = 0;\n  var palindrome_length_of_reversed_string97 = 0;\n  var palindrome_length_of_reversed_string98 = 0;\n  var palindrome_length_of_reversed_string99 = 0;\n  var palindrome_length_of_reversed_string100 = 0;\n  var palindrome_length_of_reversed_string101 = 0;\n  var palindrome_length_of_reversed_string102 = 0;\n  var palindrome_length_of_reversed_string"}
{"task_id": "JavaScript/11", "prompt": "/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\n\nconst stringXor = (a, b) => {\n  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n", "canonical_solution": "      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "partial": "/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      # print('@@this is the line to split##')\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "gc": "<|endoftext|>/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\n\nconst stringXor = (a, b) => {\n  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  };\n\n  var result = '';\n  for (var i = 0; i < a.length; i++) {\n    result += xor(a[i], b[i]);\n  }\n  return result;\n};\n\nmodule.exports = stringXor;\n\n},{}],17:[function(require,module,exports){\n'use strict';\n\nconst stringXor = require('./stringXor');\n\nconst stringXorString = function (a, b) {\n  var result = stringXor(a, b);\n  return result? result : '';\n};\n\nmodule.exports = stringXorString;\n\n},{\"./stringXor\":18}],18:[function(require,module,exports){\n'use strict';\n\nconst stringXor = require('./stringXor');\n\nconst stringXorString = function (a, b) {\n  var result = stringXor(a, b);\n  return result? result : '';\n};\n\nmodule.exports = stringXorString;\n\n},{\"./stringXor\":17}],19:[function(require,module,exports){\n'use strict';\n\nconst stringXor = require('./stringXor');\n\nconst stringXorString = function (a, b) {\n  var result = stringXor(a, b);\n  return result? result : '';\n};\n\nmodule.exports = stringXorString;\n\n},{\"./stringXor\":18}],20:[function(require,module,exports){\n'use strict';\n\nconst stringXor = require('./stringXor');\n\nconst stringXorString = function (a, b) {\n  var result = stringXor(a, b);\n  return result? result : '';\n};\n\nmodule.exports = stringXorString;\n\n},{\"./stringXor\":18}],21:[function(require,module,exports){\n'use strict';\n\nconst stringXor = require('./stringXor');\n\nconst stringXorString = function (a, b) {\n  var result = stringXor(a, b);\n  return result? result : '';\n};\n\nmodule.exports = stringXorString;\n\n},{\"./stringXor\":18}],22:[function(require,module,exports){\n'use strict';\n\nconst stringXor = require('./stringXor');\n\nconst stringXorString = function (a, b) {\n  var result = stringXor(a, b);\n  return result? result : '';\n};\n\nmodule.exports = stringXorString;\n\n},{\"./stringXor\":18}],23:[function(require,module,exports){\n'use strict';\n\nconst stringXor = require('./stringXor');\n\nconst stringXorString = function (a, b) {\n  var result = stringXor(a, b);\n  return result? result : '';\n};\n\nmodule.exports = stringXorString;\n\n},{\"./stringXor\":18}],24:[function(require,module,exports){\n'use strict';\n\nconst stringXor = require('./stringXor');\n\nconst stringXorString = function (a, b) {\n  var result = stringXor(a, b);\n  return result? result : '';\n};\n\nmodule.exports = stringXorString;\n\n},{\"./stringXor\":18}],25:[function(require,module,exports){\n'use strict';\n\nconst stringXor = require('./stringXor');\n\nconst stringXorString = function (a, b) {\n  var result = stringXor(a, b);\n  return result? result : '';\n};\n\nmodule.exports = stringXorString;\n\n},{\"./stringXor\":18}],26:[function(require,module,exports){\n'use strict';\n\nconst stringXor = require('./stringXor');\n\nconst stringXorString = function (a, b) {\n  var result = stringXor(a, b);\n  return result? result : '';\n};\n\nmodule.exports = stringXorString;\n\n},{\"./stringXor\":18}],27:[function(require,module,exports){\n'use strict';\n\nconst stringXor = require('./stringXor');\n\nconst stringXorString = function (a, b) {\n  var result = stringXor(a, b);\n  return result? result : '';\n};\n\nmodule.exports = stringXorString;\n\n},{\"./stringXor\":18}],28:[function(require,module,exports){\n'use strict';\n\nconst stringXor = require('./stringXor');\n\nconst stringXorString = function (a, b) {\n  var result = stringXor(a, b);\n  return result? result : '';\n};\n\nmodule.exports = stringXorString;\n\n},{\"./stringXor\":18}],29:[function(require,module,exports){\n'use strict';\n\nconst stringXor = require('./stringXor');\n\nconst stringXorString = function (a, b) {\n  var result = stringXor(a, b);\n  return result? result : '';\n};\n\nmodule.exports = stringXorString;\n\n},{\"./stringXor\":18}],30:[function(require,module,exports){\n'use strict';\n\nconst stringXor = require('./stringXor');\n\nconst stringXorString = function (a, b) {\n  var result = stringXor(a, b);\n  return result? result : '';\n};\n\nmodule.exports = stringXorString;\n\n},{\"./stringXor\":18}],31:[function(require,module,exports){\n'use strict';\n\nconst stringXor = require('./stringXor');\n\nconst stringXorString = function (a, b) {\n  var result = stringXor(a, b);\n  return result? result : '';\n};\n\nmodule.exports = stringXorString;\n\n},{\"./stringXor\":18}],32:[function(require,module,exports){\n'use strict';\n\nconst stringXor = require('./stringXor');\n\nconst stringXorString = function (a, b) {\n  var result = stringXor(a, b);\n  return result? result : '';\n};\n\nmodule.exports = stringXorString;\n\n},{\"./stringXor\":18}],33:[function(require,module,exports){\n'use strict';\n\nconst stringXor = require('./stringXor');\n\nconst stringXorString = function (a, b) {\n  var result = stringXor(a, b);\n  return result? result : '';\n};\n\nmodule.exports = stringXorString;\n\n},{\"./stringXor\":18}],34:[function(require,module,exports){\n'use strict';\n\nconst stringXor = require('./stringXor');\n\nconst stringXorString = function (a, b) {\n  var result = stringXor(a, b);\n  return result? result : '';\n};\n\nmodule.exports = stringXorString;\n\n},{\"./stringXor\":18}],35:[function(require,module,exports){\n'use strict';\n\nconst stringXor = require('./stringXor');\n\nconst stringXorString = function (a, b) {\n  var result = stringXor(a, b);\n  return result? result : '';\n};\n\nmodule.exports = stringXorString;\n\n},{\"./stringXor\":18}],36:[function(require,module,exports){\n'use strict';\n\nconst stringXor = require('./stringXor');\n\nconst stringXorString = function (a, b) {\n  var result = stringXor(a, b);\n  return result? result : '';\n};\n\nmodule.exports = stringXorString;\n\n},{\"./stringXor\":18}],37:[function(require,module,exports){\n'use strict';\n\nconst stringXor = require('./stringXor');\n\nconst stringXorString = function (a, b) {\n  var result = stringXor(a, b);\n  return result? result : '';\n};\n\nmodule.exports = stringXorString;\n\n},{\"./stringXor\":18}],38:[function(require,module,exports){\n'use strict';\n\nconst stringXor = require('./stringXor');\n\nconst stringXorString = function (a, b) {\n  var result = stringXor(a, b);\n  return result? result : '';\n};\n\nmodule.exports = stringXorString;\n\n},{\"./stringXor\":18}],39:[function(require,module,exports){\n'use strict';\n\nconst stringXor = require('./stringXor');\n\nconst stringXorString = function (a, b) {\n  var result = stringXor"}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the longest one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\n\nconst longest = (strings) => {\n  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n", "canonical_solution": "    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "partial": "/* Out of list of strings, return the longest one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    # print('@@this is the line to split##')\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "gc": "<|endoftext|>/* Out of list of strings, return the longest one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\n\nconst longest = (strings) => {\n  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen)\n      return s;\n  }\n  return null;\n};\n\nmodule.exports = longest;\n\n/***/ }),\n\n/***/ \"./node_modules/lodash/_baseRest.js\":\n/*!******************************************!*\\\n !***./node_modules/lodash/_baseRest.js ***!\n  \\******************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar baseIsFunction = __webpack_require__(/*!./_baseIsFunction */ \"./node_modules/lodash/_baseIsFunction.js\"),\n    isObjectLike = __webpack_require__(/*!./isObjectLike */ \"./node_modules/lodash/isObjectLike.js\");\n\n/**\n * Creates a function that invokes `func` with the `this` binding of the\n * create function and an array of arguments much like\n * [`Function#apply`](http://www.ecma-international.org/ecma-262/7.0/#sec-function.prototype.apply).\n *\n * **Note:** This method is based on the [spread operator](https://mdn.io/spread_operator).\n *\n * @static\n * @memberOf _\n * @since 3.2.0\n * @category Function\n * @param {Function} func The function to spread arguments over.\n * @returns {Function} Returns the new function.\n * @example\n *\n * var say = _.spread(function(who, what) {\n *   return who +'says'+ what;\n * });\n *\n * say(['fred', 'hello']);\n * // => 'fred says hello'\n *\n * var numbers = Promise.all([\n *   Promise.resolve(40),\n *   Promise.resolve(36)\n * ]);\n *\n * numbers.then(_.spread(function(x, y) {\n *   return x + y;\n * }));\n * // => a Promise of 76\n */\nfunction spread(func) {\n  if (typeof func!= 'function') {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  return function(...args) {\n    return func.apply(this, args);\n  };\n}\n\nmodule.exports = spread;\n\n\n/***/ }),\n\n/***/ \"./node_modules/lodash/_baseSlice.js\":\n/*!*******************************************!*\\\n !***./node_modules/lodash/_baseSlice.js ***!\n  \\*******************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar baseIsArguments = __webpack_require__(/*!./_baseIsArguments */ \"./node_modules/lodash/_baseIsArguments.js\"),\n    baseSlice = __webpack_require__(/*!./_baseSlice */ \"./node_modules/lodash/_baseSlice.js\");\n\n/**\n * Creates a slice of `array` from `start` up to, but not including, `end`.\n *\n * **Note:** This method is used instead of\n * [`Array#slice`](https://mdn.io/Array/slice) to ensure dense arrays are\n * returned.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Array\n * @param {Array} array The array to slice.\n * @param {number} [start=0] The start position.\n * @param {number} [end=array.length] The end position.\n * @returns {Array} Returns the slice of `array`.\n */\nfunction baseSlice(array, start, end) {\n  var index = -1,\n      length = array.length;\n\n  if (start < 0) {\n    start = -start > length? 0 : (length + start);\n  }\n  end = end > length? length : end;\n  if (end < 0) {\n    end += length;\n  }\n  length = start > end? 0 : ((end - start) >>> 0);\n  start >>>= 0;\n\n  var result = Array(length);\n  while (++index < length) {\n    result[index] = array[index + start];\n  }\n  return result;\n}\n\nmodule.exports = baseSlice;\n\n\n/***/ }),\n\n/***/ \"./node_modules/lodash/_baseSome.js\":\n/*!******************************************!*\\\n !***./node_modules/lodash/_baseSome.js ***!\n  \\******************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar baseIsEqual = __webpack_require__(/*!./_baseIsEqual */ \"./node_modules/lodash/_baseIsEqual.js\"),\n    baseIsEqualWith = __webpack_require__(/*!./_baseIsEqualWith */ \"./node_modules/lodash/_baseIsEqualWith.js\"),\n    identity = __webpack_require__(/*!./identity */ \"./node_modules/lodash/identity.js\");\n\n/**\n * Checks if `path` is a direct property of `object`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Object\n * @param {Object} object The object to query.\n * @param {Array|string} path The path to check.\n * @returns {boolean} Returns `true` if `path` exists, else `false`.\n * @example\n *\n * var object = { 'a': { 'b': 2 } };\n * var other = _.create({ 'a': _.create({ 'b': 2 }) });\n *\n * _.has(object, 'a');\n * // => true\n *\n * _.has(object, 'a.b');\n * // => true\n *\n * _.has(object, ['a', 'b']);\n * // => true\n *\n * _.has(other, 'a');\n * // => false\n */\nfunction has(object, path) {\n  return object!= null && hasPath(object, path, baseHas);\n}\n\nmodule.exports = has;\n\n\n/***/ }),\n\n/***/ \"./node_modules/lodash/_baseSum.js\":\n/*!******************************************!*\\\n !***./node_modules/lodash/_baseSum.js ***!\n  \\******************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar baseEach = __webpack_require__(/*!./_baseEach */ \"./node_modules/lodash/_baseEach.js\"),\n    baseIteratee = __webpack_require__(/*!./_baseIteratee */ \"./node_modules/lodash/_baseIteratee.js\"),\n    baseSum = __webpack_require__(/*!./_baseSum */ \"./node_modules/lodash/_baseSum.js\");\n\n/**\n * This method is like `_.sum` except that it accepts `iteratee` which is\n * invoked for each element in `array` to generate the value to be summed.\n * The iteratee is invoked with one argument: (value).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Math\n * @param {Array} array The array to iterate over.\n * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n * @returns {number} Returns the sum.\n * @example\n *\n * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];\n *\n * _.sumBy(objects, function(o) { return o.n; });\n * // => 20\n *\n * // The `_.property` iteratee shorthand.\n * _.sumBy(objects, 'n');\n * // => 20\n */\nfunction sumBy(array, iteratee) {\n  return (array && array.length)\n   ? baseSum(array, baseIteratee(iteratee, 2))\n    : 0;\n}\n\nmodule.exports = sumBy;\n\n\n/***/ }),\n\n/***/ \"./node_modules/lodash/_baseToPairs.js\":\n/*!*********************************************!*\\\n !***./node_modules/lodash/_baseToPairs.js ***!\n  \\*********************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar baseForOwn = __webpack_require__(/*!./_baseForOwn */ \"./node_modules/lodash/_baseForOwn.js\"),\n    createBaseEach = __webpack_require__(/*!./createBaseEach */ \"./node_modules/lodash/createBaseEach.js\");\n\n/**\n * The opposite of `_.mapValues`; this method creates an object with the\n * same values as `object` and keys generated by running each own enumerable\n * string keyed property of `object` thru `iteratee`. The iteratee is invoked\n * with three arguments: (value, key, object).\n *\n * @static\n * @memberOf _\n * @since 3.8.0\n * @category Object\n * @param {Object} object The object to iterate over.\n * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n * @returns {Object} Returns the new mapped object.\n * @see _.mapValues\n * @example\n *\n * _.mapKeys({ 'a': 1, 'b': 2 }, function("}
{"task_id": "JavaScript/13", "prompt": "/* Return a greatest common divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\n\nconst greatestCommonDivisor = (a, b) => {\n  while (b != 0) {\n    let temp = a;\n    a = b;\n", "canonical_solution": "    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "partial": "/* Return a greatest common divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  while (b != 0) {\n    let temp = a;\n    a = b;\n    # print('@@this is the line to split##')\n    b = temp % b;\n  }\n  return a;\n}\n\n", "gc": "<|endoftext|>/* Return a greatest common divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\n\nconst greatestCommonDivisor = (a, b) => {\n  while (b!= 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n};\n\n/* Return a least common multiple of two integers a and b\n  >>> leastCommonMultiple(3, 5)\n  3\n  >>> leastCommonMultiple(25, 15)\n  15\n  */\n\nconst leastCommonMultiple = (a, b) => {\n  let temp = a;\n  a = b;\n  b = temp % b;\n  return a;\n};\n\n/* Return a least common multiple of two integers a and b\n  >>> leastCommonMultiple(3, 5)\n  3\n  >>> leastCommonMultiple(25, 15)\n  15\n  */\n\nconst leastCommonMultiple = (a, b) => {\n  let temp = a;\n  a = b;\n  b = temp % b;\n  return a;\n};\n\n/* Return a least common multiple of two integers a and b\n  >>> leastCommonMultiple(3, 5)\n  3\n  >>> leastCommonMultiple(25, 15)\n  15\n  */\n\nconst leastCommonMultiple = (a, b) => {\n  let temp = a;\n  a = b;\n  b = temp % b;\n  return a;\n};\n\n/* Return a least common multiple of two integers a and b\n  >>> leastCommonMultiple(3, 5)\n  3\n  >>> leastCommonMultiple(25, 15)\n  15\n  */\n\nconst leastCommonMultiple = (a, b) => {\n  let temp = a;\n  a = b;\n  b = temp % b;\n  return a;\n};\n\n/* Return a least common multiple of two integers a and b\n  >>> leastCommonMultiple(3, 5)\n  3\n  >>> leastCommonMultiple(25, 15)\n  15\n  */\n\nconst leastCommonMultiple = (a, b) => {\n  let temp = a;\n  a = b;\n  b = temp % b;\n  return a;\n};\n\n/* Return a least common multiple of two integers a and b\n  >>> leastCommonMultiple(3, 5)\n  3\n  >>> leastCommonMultiple(25, 15)\n  15\n  */\n\nconst leastCommonMultiple = (a, b) => {\n  let temp = a;\n  a = b;\n  b = temp % b;\n  return a;\n};\n\n/* Return a least common multiple of two integers a and b\n  >>> leastCommonMultiple(3, 5)\n  3\n  >>> leastCommonMultiple(25, 15)\n  15\n  */\n\nconst leastCommonMultiple = (a, b) => {\n  let temp = a;\n  a = b;\n  b = temp % b;\n  return a;\n};\n\n/* Return a least common multiple of two integers a and b\n  >>> leastCommonMultiple(3, 5)\n  3\n  >>> leastCommonMultiple(25, 15)\n  15\n  */\n\nconst leastCommonMultiple = (a, b) => {\n  let temp = a;\n  a = b;\n  b = temp % b;\n  return a;\n};\n\n/* Return a least common multiple of two integers a and b\n  >>> leastCommonMultiple(3, 5)\n  3\n  >>> leastCommonMultiple(25, 15)\n  15\n  */\n\nconst leastCommonMultiple = (a, b) => {\n  let temp = a;\n  a = b;\n  b = temp % b;\n  return a;\n};\n\n/* Return a least common multiple of two integers a and b\n  >>> leastCommonMultiple(3, 5)\n  3\n  >>> leastCommonMultiple(25, 15)\n  15\n  */\n\nconst leastCommonMultiple = (a, b) => {\n  let temp = a;\n  a = b;\n  b = temp % b;\n  return a;\n};\n\n/* Return a least common multiple of two integers a and b\n  >>> leastCommonMultiple(3, 5)\n  3\n  >>> leastCommonMultiple(25, 15)\n  15\n  */\n\nconst leastCommonMultiple = (a, b) => {\n  let temp = a;\n  a = b;\n  b = temp % b;\n  return a;\n};\n\n/* Return a least common multiple of two integers a and b\n  >>> leastCommonMultiple(3, 5)\n  3\n  >>> leastCommonMultiple(25, 15)\n  15\n  */\n\nconst leastCommonMultiple = (a, b) => {\n  let temp = a;\n  a = b;\n  b = temp % b;\n  return a;\n};\n\n/* Return a least common multiple of two integers a and b\n  >>> leastCommonMultiple(3, 5)\n  3\n  >>> leastCommonMultiple(25, 15)\n  15\n  */\n\nconst leastCommonMultiple = (a, b) => {\n  let temp = a;\n  a = b;\n  b = temp % b;\n  return a;\n};\n\n/* Return a least common multiple of two integers a and b\n  >>> leastCommonMultiple(3, 5)\n  3\n  >>> leastCommonMultiple(25, 15)\n  15\n  */\n\nconst leastCommonMultiple = (a, b) => {\n  let temp = a;\n  a = b;\n  b = temp % b;\n  return a;\n};\n\n/* Return a least common multiple of two integers a and b\n  >>> leastCommonMultiple(3, 5)\n  3\n  >>> leastCommonMultiple(25, 15)\n  15\n  */\n\nconst leastCommonMultiple = (a, b) => {\n  let temp = a;\n  a = b;\n  b = temp % b;\n  return a;\n};\n\n/* Return a least common multiple of two integers a and b\n  >>> leastCommonMultiple(3, 5)\n  3\n  >>> leastCommonMultiple(25, 15)\n  15\n  */\n\nconst leastCommonMultiple = (a, b) => {\n  let temp = a;\n  a = b;\n  b = temp % b;\n  return a;\n};\n\n/* Return a least common multiple of two integers a and b\n  >>> leastCommonMultiple(3, 5)\n  3\n  >>> leastCommonMultiple(25, 15)\n  15\n  */\n\nconst leastCommonMultiple = (a, b) => {\n  let temp = a;\n  a = b;\n  b = temp % b;\n  return a;\n};\n\n/* Return a least common multiple of two integers a and b\n  >>> leastCommonMultiple(3, 5)\n  3\n  >>> leastCommonMultiple(25, 15)\n  15\n  */\n\nconst leastCommonMultiple = (a, b) => {\n  let temp = a;\n  a = b;\n  b = temp % b;\n  return a;\n};\n\n/* Return a least common multiple of two integers a and b\n  >>> leastCommonMultiple(3, 5)\n  3\n  >>> leastCommonMultiple(25, 15)\n  15\n  */\n\nconst leastCommonMultiple = (a, b) => {\n  let temp = a;\n  a = b;\n  b = temp % b;\n  return a;\n};\n\n/* Return a least common multiple of two integers a and b\n  >>> leastCommonMultiple(3, 5)\n  3\n  >>> leastCommonMultiple(25, 15)\n  15\n  */\n\nconst leastCommonMultiple = (a, b) => {\n  let temp = a;\n  a = b;\n  b = temp % b;\n  return a;\n};\n\n/* Return a least common multiple of two integers a and b\n  >>> leastCommonMultiple(3, 5)\n  3\n  >>> leastCommonMultiple(25, 15)\n  15\n  */\n\nconst leastCommonMultiple = (a, b) => {\n  let temp = a;\n  a = b;\n  b = temp % b;\n  return a;\n};\n\n/* Return a least common multiple of two integers a and b\n  >>> leastCommonMultiple(3, 5)\n  3\n  >>> leastCommonMultiple(25, 15)\n  15\n  */\n\nconst leastCommonMultiple = (a, b) => {\n  let temp = a;\n  a = b;\n  b = temp % b;\n  return a;\n};\n\n/* Return a least common multiple of two integers a and b\n  >>> leastCommonMultiple(3, 5)\n  3\n  >>> leastCommonMultiple(25, 15)\n  15\n  */\n\nconst leastCommonMultiple = (a, b) => {\n  let "}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\n\nconst allPrefixes = (string) => {\n  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n", "canonical_solution": "  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "partial": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n    # print('@@this is the line to split##')\n  }\n  return result;\n}\n\n", "gc": "<|endoftext|>/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\n\nconst allPrefixes = (string) => {\n  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n};\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['c', 'ba', 'cab']\n  */\n\nconst allSuffixes = (string) => {\n  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(i+1, string.length));\n  }\n  return result;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> allSubstrings('abc')\n  ['abc', 'ab', 'ba', 'ca', 'cb', 'ca', 'cb']\n  */\n\nconst allSubstrings = (string) => {\n  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(i, i+1));\n  }\n  return result;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> allSubstrings('abc')\n  ['abc', 'ab', 'ba', 'ca', 'cb', 'ca', 'cb']\n  */\n\nconst allSubstrings = (string) => {\n  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(i, i+1));\n  }\n  return result;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> allSubstrings('abc')\n  ['abc', 'ab', 'ba', 'ca', 'cb', 'ca', 'cb']\n  */\n\nconst allSubstrings = (string) => {\n  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(i, i+1));\n  }\n  return result;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> allSubstrings('abc')\n  ['abc', 'ab', 'ba', 'ca', 'cb', 'ca', 'cb']\n  */\n\nconst allSubstrings = (string) => {\n  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(i, i+1));\n  }\n  return result;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> allSubstrings('abc')\n  ['abc', 'ab', 'ba', 'ca', 'cb', 'ca', 'cb']\n  */\n\nconst allSubstrings = (string) => {\n  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(i, i+1));\n  }\n  return result;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> allSubstrings('abc')\n  ['abc', 'ab', 'ba', 'ca', 'cb', 'ca', 'cb']\n  */\n\nconst allSubstrings = (string) => {\n  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(i, i+1));\n  }\n  return result;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> allSubstrings('abc')\n  ['abc', 'ab', 'ba', 'ca', 'cb', 'ca', 'cb']\n  */\n\nconst allSubstrings = (string) => {\n  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(i, i+1));\n  }\n  return result;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> allSubstrings('abc')\n  ['abc', 'ab', 'ba', 'ca', 'cb', 'ca', 'cb']\n  */\n\nconst allSubstrings = (string) => {\n  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(i, i+1));\n  }\n  return result;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> allSubstrings('abc')\n  ['abc', 'ab', 'ba', 'ca', 'cb', 'ca', 'cb']\n  */\n\nconst allSubstrings = (string) => {\n  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(i, i+1));\n  }\n  return result;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> allSubstrings('abc')\n  ['abc', 'ab', 'ba', 'ca', 'cb', 'ca', 'cb']\n  */\n\nconst allSubstrings = (string) => {\n  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(i, i+1));\n  }\n  return result;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> allSubstrings('abc')\n  ['abc', 'ab', 'ba', 'ca', 'cb', 'ca', 'cb']\n  */\n\nconst allSubstrings = (string) => {\n  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(i, i+1));\n  }\n  return result;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> allSubstrings('abc')\n  ['abc', 'ab', 'ba', 'ca', 'cb', 'ca', 'cb']\n  */\n\nconst allSubstrings = (string) => {\n  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(i, i+1));\n  }\n  return result;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> allSubstrings('abc')\n  ['abc', 'ab', 'ba', 'ca', 'cb', 'ca', 'cb']\n  */\n\nconst allSubstrings = (string) => {\n  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(i, i+1));\n  }\n  return result;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> allSubstrings('abc')\n  ['abc', 'ab', 'ba', 'ca', 'cb', 'ca', 'cb']\n  */\n\nconst allSubstrings = (string) => {\n  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(i, i+1));\n  }\n  return result;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> allSubstrings('abc')\n  ['abc', 'ab', 'ba', 'ca', 'cb', 'ca', 'cb']\n  */\n\nconst allSubstrings = (string) => {\n  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(i, i+1));\n  }\n  return result;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> allSubstrings('abc')\n  ['abc', 'ab', 'ba', 'ca', 'cb', 'ca', 'cb']\n  */\n\nconst allSubstrings = (string) => {\n  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(i, i+1));\n  }\n  return result;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> allSubstrings('abc')\n  ['abc', 'ab', 'ba', 'ca', 'cb', 'ca', 'cb']\n  */\n\nconst allSubstrings = (string) => {\n  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(i, i+1));\n  }\n  return result;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> allSubstrings('abc')\n  ['abc', 'ab', 'ba', 'ca', 'cb', 'ca', 'cb']\n  */\n\nconst allSubstrings = (string) => {\n  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(i, i+1));\n  }\n  return result;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> allSubstrings('abc')\n  ['abc', 'ab', 'ba', '"}
{"task_id": "JavaScript/15", "prompt": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\n\nconst stringSequence = (n) => {\n  return [...Array(n).keys(), n].join(' ')\n", "canonical_solution": "}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "partial": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  return [...Array(n).keys(), n].join(' ')\n  # print('@@this is the line to split##')\n}\n\n", "gc": "<|endoftext|>/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\n\nconst stringSequence = (n) => {\n  return [...Array(n).keys(), n].join(' ')\n}\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\n\nconst stringSequence = (n) => {\n  return [...Array(n).keys()].join(' ')\n}\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\n\nconst stringSequence = (n) => {\n  return [...Array(n).keys()].join(' ')\n}\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\n\nconst stringSequence = (n) => {\n  return [...Array(n).keys()].join(' ')\n}\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\n\nconst stringSequence = (n) => {\n  return [...Array(n).keys()].join(' ')\n}\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\n\nconst stringSequence = (n) => {\n  return [...Array(n).keys()].join(' ')\n}\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\n\nconst stringSequence = (n) => {\n  return [...Array(n).keys()].join(' ')\n}\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\n\nconst stringSequence = (n) => {\n  return [...Array(n).keys()].join(' ')\n}\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\n\nconst stringSequence = (n) => {\n  return [...Array(n).keys()].join(' ')\n}\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\n\nconst stringSequence = (n) => {\n  return [...Array(n).keys()].join(' ')\n}\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\n\nconst stringSequence = (n) => {\n  return [...Array(n).keys()].join(' ')\n}\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\n\nconst stringSequence = (n) => {\n  return [...Array(n).keys()].join(' ')\n}\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\n\nconst stringSequence = (n) => {\n  return [...Array(n).keys()].join(' ')\n}\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\n\nconst stringSequence = (n) => {\n  return [...Array(n).keys()].join(' ')\n}\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\n\nconst stringSequence = (n) => {\n  return [...Array(n).keys()].join(' ')\n}\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\n\nconst stringSequence = (n) => {\n  return [...Array(n).keys()].join(' ')\n}\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\n\nconst stringSequence = (n) => {\n  return [...Array(n).keys()].join(' ')\n}\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\n\nconst stringSequence = (n) => {\n  return [...Array(n).keys()].join(' ')\n}\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\n\nconst stringSequence = (n) => {\n  return [...Array(n).keys()].join(' ')\n}\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\n\nconst stringSequence = (n) => {\n  return [...Array(n).keys()].join(' ')\n}\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\n\nconst stringSequence = (n) => {\n  return [...Array(n).keys()].join(' ')\n}\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\n\nconst stringSequence = (n) => {\n  return [...Array(n).keys()].join(' ')\n}\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\n\nconst stringSequence = (n) => {\n  return [...Array(n).keys()].join(' ')\n}\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\n\nconst stringSequence = (n) => {\n  return [...Array(n).keys()].join(' ')\n}\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence("}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\n\nconst countDistinctCharacters = (string) => {\n  return (new Set(string.toLowerCase())).size;\n", "canonical_solution": "\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "partial": "/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  return (new Set(string.toLowerCase())).size;\n  # print('@@this is the line to split##')\n\n}\n\n", "gc": "<|endoftext|>/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\n\nconst countDistinctCharacters = (string) => {\n  return (new Set(string.toLowerCase())).size;\n};\n\nmodule.exports = countDistinctCharacters;\n\n},{}],5:[function(require,module,exports){\nconst countDistinctCharacters = require('./countDistinctCharacters');\n\nconst countDistinctWords = (string) => {\n  const words = [];\n  let currentWord = '';\n  let currentCount = 0;\n\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (currentWord!== '') {\n      if (currentCount === 0) {\n        words.push(currentWord);\n        currentWord = '';\n        currentCount++;\n      } else {\n        currentWord += char;\n        currentCount++;\n      }\n    } else {\n      currentWord += char;\n      currentCount++;\n    }\n  }\n\n  if (currentCount!== 0) {\n    words.push(currentWord);\n  }\n\n  return words;\n};\n\nmodule.exports = countDistinctWords;\n\n},{\"./countDistinctCharacters\":4}],6:[function(require,module,exports){\nconst countDistinctWords = require('./countDistinctWords');\n\nconst countWords = (string) => {\n  const words = [];\n  let currentWord = '';\n  let currentCount = 0;\n\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (currentWord!== '') {\n      if (currentCount === 0) {\n        words.push(currentWord);\n        currentWord = '';\n        currentCount++;\n      } else {\n        currentWord += char;\n        currentCount++;\n      }\n    } else {\n      currentWord += char;\n      currentCount++;\n    }\n  }\n\n  if (currentCount!== 0) {\n    words.push(currentWord);\n  }\n\n  return words;\n};\n\nmodule.exports = countWords;\n\n},{\"./countDistinctWords\":5}],7:[function(require,module,exports){\nconst countWords = require('./countWords');\n\nconst countWordsWithSpaces = (string) => {\n  const words = [];\n  let currentWord = '';\n  let currentCount = 0;\n\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (currentWord!== '') {\n      if (currentCount === 0) {\n        words.push(currentWord);\n        currentWord = '';\n        currentCount++;\n      } else {\n        currentWord += char;\n        currentCount++;\n      }\n    } else {\n      currentWord += char;\n      currentCount++;\n    }\n  }\n\n  if (currentCount!== 0) {\n    words.push(currentWord);\n  }\n\n  return words;\n};\n\nmodule.exports = countWordsWithSpaces;\n\n},{\"./countWords\":6}],8:[function(require,module,exports){\nconst countWordsWithSpaces = require('./countWordsWithSpaces');\n\nconst countWordsWithNumbers = (string) => {\n  const words = [];\n  let currentWord = '';\n  let currentCount = 0;\n\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (currentWord!== '') {\n      if (currentCount === 0) {\n        words.push(currentWord);\n        currentWord = '';\n        currentCount++;\n      } else {\n        currentWord += char;\n        currentCount++;\n      }\n    } else {\n      currentWord += char;\n      currentCount++;\n    }\n  }\n\n  if (currentCount!== 0) {\n    words.push(currentWord);\n  }\n\n  return words;\n};\n\nmodule.exports = countWordsWithNumbers;\n\n},{\"./countWordsWithSpaces\":7}],9:[function(require,module,exports){\nconst countWordsWithNumbers = require('./countWordsWithNumbers');\n\nconst countWordsWithSpaces = (string) => {\n  const words = [];\n  let currentWord = '';\n  let currentCount = 0;\n\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (currentWord!== '') {\n      if (currentCount === 0) {\n        words.push(currentWord);\n        currentWord = '';\n        currentCount++;\n      } else {\n        currentWord += char;\n        currentCount++;\n      }\n    } else {\n      currentWord += char;\n      currentCount++;\n    }\n  }\n\n  if (currentCount!== 0) {\n    words.push(currentWord);\n  }\n\n  return words;\n};\n\nmodule.exports = countWordsWithSpaces;\n\n},{\"./countWordsWithNumbers\":8}],10:[function(require,module,exports){\nconst countWordsWithSpaces = require('./countWordsWithSpaces');\n\nconst countWordsWithNumbers = (string) => {\n  const words = [];\n  let currentWord = '';\n  let currentCount = 0;\n\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (currentWord!== '') {\n      if (currentCount === 0) {\n        words.push(currentWord);\n        currentWord = '';\n        currentCount++;\n      } else {\n        currentWord += char;\n        currentCount++;\n      }\n    } else {\n      currentWord += char;\n      currentCount++;\n    }\n  }\n\n  if (currentCount!== 0) {\n    words.push(currentWord);\n  }\n\n  return words;\n};\n\nmodule.exports = countWordsWithNumbers;\n\n},{\"./countWordsWithSpaces\":7}],11:[function(require,module,exports){\nconst countWordsWithSpaces = require('./countWordsWithSpaces');\n\nconst countWordsWithNumbers = (string) => {\n  const words = [];\n  let currentWord = '';\n  let currentCount = 0;\n\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (currentWord!== '') {\n      if (currentCount === 0) {\n        words.push(currentWord);\n        currentWord = '';\n        currentCount++;\n      } else {\n        currentWord += char;\n        currentCount++;\n      }\n    } else {\n      currentWord += char;\n      currentCount++;\n    }\n  }\n\n  if (currentCount!== 0) {\n    words.push(currentWord);\n  }\n\n  return words;\n};\n\nmodule.exports = countWordsWithNumbers;\n\n},{\"./countWordsWithSpaces\":7}],12:[function(require,module,exports){\nconst countWordsWithSpaces = require('./countWordsWithSpaces');\n\nconst countWordsWithNumbers = (string) => {\n  const words = [];\n  let currentWord = '';\n  let currentCount = 0;\n\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (currentWord!== '') {\n      if (currentCount === 0) {\n        words.push(currentWord);\n        currentWord = '';\n        currentCount++;\n      } else {\n        currentWord += char;\n        currentCount++;\n      }\n    } else {\n      currentWord += char;\n      currentCount++;\n    }\n  }\n\n  if (currentCount!== 0) {\n    words.push(currentWord);\n  }\n\n  return words;\n};\n\nmodule.exports = countWordsWithNumbers;\n\n},{\"./countWordsWithSpaces\":7}],13:[function(require,module,exports){\nconst countWordsWithSpaces = require('./countWordsWithSpaces');\n\nconst countWordsWithNumbers = (string) => {\n  const words = [];\n  let currentWord = '';\n  let currentCount = 0;\n\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (currentWord!== '') {\n      if (currentCount === 0) {\n        words.push(currentWord);\n        currentWord = '';\n        currentCount++;\n      } else {\n        currentWord += char;\n        currentCount++;\n      }\n    } else {\n      currentWord += char;\n      currentCount++;\n    }\n  }\n\n  if (currentCount!== 0) {\n    words.push(currentWord);\n  }\n\n  return words;\n};\n\nmodule.exports = countWordsWithNumbers;\n\n},{\"./countWordsWithSpaces\":7}],14:[function(require,module,exports){\nconst countWordsWithSpaces = require('./countWordsWithSpaces');\n\nconst countWordsWithNumbers = (string) => {\n  const words = [];\n"}
{"task_id": "JavaScript/17", "prompt": "/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\n\nconst parseMusic = (music_string) => {\n  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n", "canonical_solution": "  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "partial": "/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  # print('@@this is the line to split##')\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "gc": "<|endoftext|>/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\n\nconst parseMusic = (music_string) => {\n  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  const notes = [];\n  let current_note = '';\n  let current_note_index = 0;\n  let current_note_count = 0;\n  let current_note_index2 = 0;\n  let current_note_count2 = 0;\n  let current_note_index3 = 0;\n  let current_note_count3 = 0;\n  let current_note_index4 = 0;\n  let current_note_count4 = 0;\n\n  for (let i = 0; i < music_string.length; i++) {\n    const char = music_string[i];\n    if (char === 'o') {\n      current_note = current_note + note_map[music_string[i + 1]];\n      current_note_index++;\n      current_note_count++;\n    } else if (char === 'o|') {\n      current_note = current_note + note_map[music_string[i + 1]];\n      current_note_index2++;\n      current_note_count2++;\n    } else if (char === '.|') {\n      current_note = current_note + note_map[music_string[i + 1]];\n      current_note_index3++;\n      current_note_count3++;\n    } else if (char === '.') {\n      current_note = current_note + note_map[music_string[i + 1]];\n      current_note_index4++;\n      current_note_count4++;\n    }\n  }\n\n  notes.push(current_note);\n  notes.push(current_note_index);\n  notes.push(current_note_count);\n  notes.push(current_note_index2);\n  notes.push(current_note_count2);\n  notes.push(current_note_index3);\n  notes.push(current_note_count3);\n  notes.push(current_note_index4);\n  notes.push(current_note_count4);\n\n  return notes;\n};\n\nmodule.exports = parseMusic;\n\n},{}],3:[function(require,module,exports){\n'use strict';\n\nconst parseMusicString = require('./parseMusicString');\n\nconst parseMusic = (music_string) => {\n  const music_list = parseMusicString(music_string);\n  return music_list;\n};\n\nmodule.exports = parseMusic;\n\n},{\"./parseMusicString\":2}],4:[function(require,module,exports){\n'use strict';\n\nconst parseMusicString = require('./parseMusicString');\n\nconst parseMusic = (music_string) => {\n  const music_list = parseMusicString(music_string);\n  return music_list;\n};\n\nmodule.exports = parseMusic;\n\n},{\"./parseMusicString\":2}],5:[function(require,module,exports){\n'use strict';\n\nconst parseMusicString = require('./parseMusicString');\n\nconst parseMusic = (music_string) => {\n  const music_list = parseMusicString(music_string);\n  return music_list;\n};\n\nmodule.exports = parseMusic;\n\n},{\"./parseMusicString\":2}],6:[function(require,module,exports){\n'use strict';\n\nconst parseMusicString = require('./parseMusicString');\n\nconst parseMusic = (music_string) => {\n  const music_list = parseMusicString(music_string);\n  return music_list;\n};\n\nmodule.exports = parseMusic;\n\n},{\"./parseMusicString\":2}],7:[function(require,module,exports){\n'use strict';\n\nconst parseMusicString = require('./parseMusicString');\n\nconst parseMusic = (music_string) => {\n  const music_list = parseMusicString(music_string);\n  return music_list;\n};\n\nmodule.exports = parseMusic;\n\n},{\"./parseMusicString\":2}],8:[function(require,module,exports){\n'use strict';\n\nconst parseMusicString = require('./parseMusicString');\n\nconst parseMusic = (music_string) => {\n  const music_list = parseMusicString(music_string);\n  return music_list;\n};\n\nmodule.exports = parseMusic;\n\n},{\"./parseMusicString\":2}],9:[function(require,module,exports){\n'use strict';\n\nconst parseMusicString = require('./parseMusicString');\n\nconst parseMusic = (music_string) => {\n  const music_list = parseMusicString(music_string);\n  return music_list;\n};\n\nmodule.exports = parseMusic;\n\n},{\"./parseMusicString\":2}],10:[function(require,module,exports){\n'use strict';\n\nconst parseMusicString = require('./parseMusicString');\n\nconst parseMusic = (music_string) => {\n  const music_list = parseMusicString(music_string);\n  return music_list;\n};\n\nmodule.exports = parseMusic;\n\n},{\"./parseMusicString\":2}],11:[function(require,module,exports){\n'use strict';\n\nconst parseMusicString = require('./parseMusicString');\n\nconst parseMusic = (music_string) => {\n  const music_list = parseMusicString(music_string);\n  return music_list;\n};\n\nmodule.exports = parseMusic;\n\n},{\"./parseMusicString\":2}],12:[function(require,module,exports){\n'use strict';\n\nconst parseMusicString = require('./parseMusicString');\n\nconst parseMusic = (music_string) => {\n  const music_list = parseMusicString(music_string);\n  return music_list;\n};\n\nmodule.exports = parseMusic;\n\n},{\"./parseMusicString\":2}],13:[function(require,module,exports){\n'use strict';\n\nconst parseMusicString = require('./parseMusicString');\n\nconst parseMusic = (music_string) => {\n  const music_list = parseMusicString(music_string);\n  return music_list;\n};\n\nmodule.exports = parseMusic;\n\n},{\"./parseMusicString\":2}],14:[function(require,module,exports){\n'use strict';\n\nconst parseMusicString = require('./parseMusicString');\n\nconst parseMusic = (music_string) => {\n  const music_list = parseMusicString(music_string);\n  return music_list;\n};\n\nmodule.exports = parseMusic;\n\n},{\"./parseMusicString\":2}],15:[function(require,module,exports){\n'use strict';\n\nconst parseMusicString = require('./parseMusicString');\n\nconst parseMusic = (music_string) => {\n  const music_list = parseMusicString(music_string);\n  return music_list;\n};\n\nmodule.exports = parseMusic;\n\n},{\"./parseMusicString\":2}],16:[function(require,module,exports){\n'use strict';\n\nconst parseMusicString = require('./parseMusicString');\n\nconst parseMusic = (music_string) => {\n  const music_list = parseMusicString(music_string);\n  return music_list;\n};\n\nmodule.exports = parseMusic;\n\n},{\"./parseMusicString\":2}],17:[function(require,module,exports){\n'use strict';\n\nconst parseMusicString = require('./parseMusicString');\n\nconst parseMusic = (music_string) => {\n  const music_list = parseMusicString(music_string);\n  return music_list;\n};\n\nmodule.exports = parseMusic;\n\n},{\"./parseMusicString\":2}],18:[function(require,module,exports){\n'use strict';\n\nconst parseMusicString = require('./parseMusicString');\n\nconst parseMusic = (music_string) => {\n  const music_list = parseMusicString(music_string);\n  return music_list;\n};\n\nmodule.exports = parseMusic;\n\n},{\"./parseMusicString\":2}],19:[function(require,module,exports){\n'use strict';\n\nconst parseMusicString = require('./parseMusicString');\n\nconst parseMusic = (music_string) => {\n  const music_list = parseMusicString(music_string);\n  return music_list;\n};\n\nmodule.exports = parseMusic;\n\n},{\"./parseMusicString\":2}],20:"}
{"task_id": "JavaScript/18", "prompt": "/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\n\nconst howManyTimes = (string, substring) => {\n  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n", "canonical_solution": "    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "partial": "/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n      # print('@@this is the line to split##')\n    }\n  }\n  return times;\n}\n\n", "gc": "<|endoftext|>/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\n\nconst howManyTimes = (string, substring) => {\n  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n};\n\nmodule.exports = howManyTimes;\n\n},{}],7:[function(require,module,exports){\n// https://d3js.org/d3-collection/ Version 1.0.3. Copyright 2017 Mike Bostock.\n(function (global, factory) {\n\ttypeof exports === 'object' && typeof module!== 'undefined'? factory(exports) :\n\ttypeof define === 'function' && define.amd? define(['exports'], factory) :\n\t(factory((global.d3 = global.d3 || {})));\n}(this, (function (exports) { 'use strict';\n\nvar xhtml = \"http://www.w3.org/1999/xhtml\";\n\nvar namespaces = {\n  svg: \"http://www.w3.org/2000/svg\",\n  xhtml: xhtml,\n  xlink: \"http://www.w3.org/1999/xlink\",\n  xml: \"http://www.w3.org/XML/1998/namespace\",\n  xmlns: \"http://www.w3.org/2000/xmlns/\"\n};\n\nvar namespace = function(name) {\n  var prefix = name += \"\", i = prefix.indexOf(\":\");\n  if (i >= 0 && (prefix = name.slice(0, i))!== \"xmlns\") name = name.slice(i + 1);\n  return namespaces.hasOwnProperty(prefix)? {space: namespaces[prefix], local: name} : name;\n};\n\nfunction creatorInherit(name) {\n  return function() {\n    var document = this.ownerDocument,\n        uri = this.namespaceURI;\n    return uri === xhtml && document.documentElement.namespaceURI === xhtml\n       ? document.createElement(name)\n        : document.createElementNS(uri, name);\n  };\n}\n\nfunction creatorFixed(fullname) {\n  return function() {\n    return this.ownerDocument.createElementNS(fullname.space, fullname.local);\n  };\n}\n\nvar creator = function(name) {\n  var fullname = namespace(name);\n  return (fullname.local\n     ? creatorFixed\n      : creatorInherit)(fullname);\n};\n\nvar nextId = 0;\n\nfunction local() {\n  return new Local;\n}\n\nfunction Local() {\n  this._ = \"@\" + (++nextId).toString(36);\n}\n\nLocal.prototype = local.prototype = {\n  constructor: Local,\n  get: function(node) {\n    var id = this._;\n    while (!(id in node)) if (!(node = node.parentNode)) return;\n    return node[id];\n  },\n  set: function(node, value) {\n    return node[this._] = value;\n  },\n  remove: function(node) {\n    return this._ in node && delete node[this._];\n  },\n  toString: function() {\n    return this._;\n  }\n};\n\nvar matcher = function(selector) {\n  return function() {\n    return this.matches(selector);\n  };\n};\n\nif (typeof document!== \"undefined\") {\n  var element = document.documentElement;\n  if (!element.matches) {\n    var vendorMatches = element.webkitMatchesSelector\n        || element.msMatchesSelector\n        || element.mozMatchesSelector\n        || element.oMatchesSelector;\n    matcher = function(selector) {\n      return function() {\n        return vendorMatches.call(this, selector);\n      };\n    };\n  }\n}\n\nvar matcher$1 = matcher;\n\nvar filterEvents = {};\n\nexports.event = null;\n\nif (typeof document!== \"undefined\") {\n  var element$1 = document.documentElement;\n  if (!(\"onmouseenter\" in element$1)) {\n    filterEvents = {mouseenter: \"mouseover\", mouseleave: \"mouseout\"};\n  }\n}\n\nfunction filterContextListener(listener, index, group) {\n  listener = contextListener(listener, index, group);\n  return function(event) {\n    var related = event.relatedTarget;\n    if (!related || (related!== this &&!(related.compareDocumentPosition(this) & 8))) {\n      listener.call(this, event);\n    }\n  };\n}\n\nfunction contextListener(listener, index, group) {\n  return function(event1) {\n    var event0 = exports.event; // Events can be reentrant (e.g., focus).\n    exports.event = event1;\n    try {\n      listener.call(this, this.__data__, index, group);\n    } finally {\n      exports.event = event0;\n    }\n  };\n}\n\nfunction parseTypenames(typenames) {\n  return typenames.trim().split(/^|\\s+/).map(function(t) {\n    var name = \"\", i = t.indexOf(\".\");\n    if (i >= 0) name = t.slice(i + 1), t = t.slice(0, i);\n    return {type: t, name: name};\n  });\n}\n\nfunction onRemove(typename) {\n  return function() {\n    var on = this.__on;\n    if (!on) return;\n    for (var j = 0, i = -1, m = on.length, o; j < m; ++j) {\n      if (o = on[j], (!typename.type || o.type === typename.type) && o.name === typename.name) {\n        this.removeEventListener(o.type, o.listener, o.capture);\n      } else {\n        on[++i] = o;\n      }\n    }\n    if (++i) on.length = i;\n    else delete this.__on;\n  };\n}\n\nfunction onAdd(typename, value, capture) {\n  var wrap = filterEvents.hasOwnProperty(typename.type)? filterContextListener : contextListener;\n  return function(d, i, group) {\n    var on = this.__on, o, listener = wrap(value, i, group);\n    if (on) for (var j = 0, m = on.length; j < m; ++j) {\n      if ((o = on[j]).type === typename.type && o.name === typename.name) {\n        this.removeEventListener(o.type, o.listener, o.capture);\n        this.addEventListener(o.type, o.listener = listener, o.capture = capture);\n        o.value = value;\n        return;\n      }\n    }\n    this.addEventListener(typename.type, listener, capture);\n    o = {type: typename.type, name: typename.name, value: value, listener: listener, capture: capture};\n    if (!on) this.__on = [o];\n    else on.push(o);\n  };\n}\n\nvar selection_on = function(typename, value, capture) {\n  var typenames = parseTypenames(typename + \"\"), i, n = typenames.length, t;\n\n  if (arguments.length < 2) {\n    var on = this.node().__on;\n    if (on) for (var j = 0, m = on.length, o; j < m; ++j) {\n      for (i = 0, o = on[j]; i < n; ++i) {\n        if ((t = typenames[i]).type === o.type && t.name === o.name) {\n          return o.value;\n        }\n      }\n    }\n    return;\n  }\n\n  on = value? onAdd : onRemove;\n  if (capture == null) capture = false;\n  for (i = 0; i < n; ++i) this.each(on(typenames[i], value, capture));\n  return this;\n};\n\nfunction customEvent(event1, listener, that, args) {\n  var event0 = exports.event;\n  event1.sourceEvent = exports.event;\n  exports.event = event1;\n  try {\n    return listener.apply(that, args);\n  } finally {\n    exports.event = event0;\n  }\n}\n\nvar sourceEvent = function() {\n  var current = exports.event, source;\n  while (source = current.sourceEvent) current = source;\n  return current;\n};\n\nvar point = function(node, event) {\n  var svg = node.ownerSVGElement || node;\n\n  if (svg.createSVGPoint) {\n    var point = svg.createSVGPoint();\n    point.x = event.clientX, point.y = event.clientY;\n    point = point.matrixTransform(node.getScreenCTM().inverse());\n    return [point.x, point.y];\n  }\n\n  var rect = node.getBoundingClientRect();\n  return [event.clientX - rect.left - node.clientLeft, event.clientY - rect.top - node.clientTop];\n};\n\nvar mouse = function(node) {\n  var event = sourceEvent();\n  if (event.changedTouches) event = event.changedTouches[0];\n  return point(node, event);\n};\n\nfunction none() {}\n\nvar "}
{"task_id": "JavaScript/19", "prompt": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\n\nconst sortNumbers = (numbers) => {\n  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n", "canonical_solution": "    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "partial": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    # print('@@this is the line to split##')\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "gc": "<|endoftext|>/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\n\nconst sortNumbers = (numbers) => {\n  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n   'six': 6,\n   'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ').map(value => value_map[value]).join(' ');\n};\n\n/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\n\nconst sortNumbers = (numbers) => {\n  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n   'six': 6,\n   'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ').map(value => value_map[value]).join(' ');\n};\n\n/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\n\nconst sortNumbers = (numbers) => {\n  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n   'six': 6,\n   'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ').map(value => value_map[value]).join(' ');\n};\n\n/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\n\nconst sortNumbers = (numbers) => {\n  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n   'six': 6,\n   'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ').map(value => value_map[value]).join(' ');\n};\n\n/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\n\nconst sortNumbers = (numbers) => {\n  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n   'six': 6,\n   'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ').map(value => value_map[value]).join(' ');\n};\n\n/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\n\nconst sortNumbers = (numbers) => {\n  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n   'six': 6,\n   'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ').map(value => value_map[value]).join(' ');\n};\n\n/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\n\nconst sortNumbers = (numbers) => {\n  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n   'six': 6,\n   'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ').map(value => value_map[value]).join(' ');\n};\n\n/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\n\nconst sortNumbers = (numbers) => {\n  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n   'six': 6,\n   'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ').map(value => value_map[value]).join(' ');\n};\n\n/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\n\nconst sortNumbers = (numbers) => {\n  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n   'six': 6,\n   'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ').map(value => value_map[value]).join(' ');\n};\n\n/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n"}
{"task_id": "JavaScript/20", "prompt": "/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\n\nconst findClosestElements = (numbers) => {\n  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n", "canonical_solution": "          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "partial": "/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          # print('@@this is the line to split##')\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "gc": "<|endoftext|>/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\n\nconst findClosestElements = (numbers) => {\n  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i!= j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(distance, a), Math.max(distance, b)];\n        }\n      }\n  return closest_pair;\n};\n\nmodule.exports = findClosestElements;\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\"? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj!== Symbol.prototype? \"symbol\" : typeof obj; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar utils = __webpack_require__(0);\n\nvar EventEmitter = __webpack_require__(1);\n\nvar Events = __webpack_require__(2);\n\nvar EventEmitter2 = _interopRequireDefault(EventEmitter);\n\nvar EventEmitter3 = __webpack_require__(3);\n\nvar EventEmitter4 = _interopRequireDefault(EventEmitter3);\n\nvar EventEmitter5 = __webpack_require__(4);\n\nvar EventEmitter6 = _interopRequireDefault(EventEmitter4);\n\nvar EventEmitter7 = __webpack_require__(5);\n\nvar EventEmitter8 = _interopRequireDefault(EventEmitter5);\n\nvar EventEmitter9 = __webpack_require__(6);\n\nvar EventEmitter10 = _interopRequireDefault(EventEmitter6);\n\nvar EventEmitter11 = __webpack_require__(7);\n\nvar EventEmitter12 = _interopRequireDefault(EventEmitter7);\n\nvar EventEmitter13 = __webpack_require__(8);\n\nvar EventEmitter14 = _interopRequireDefault(EventEmitter8);\n\nvar EventEmitter15 = __webpack_require__(9);\n\nvar EventEmitter16 = _interopRequireDefault(EventEmitter9);\n\nvar EventEmitter17 = __webpack_require__(10);\n\nvar EventEmitter18 = _interopRequireDefault(EventEmitter10);\n\nvar EventEmitter19 = __webpack_require__(11);\n\nvar EventEmitter20 = _interopRequireDefault(EventEmitter11);\n\nvar EventEmitter21 = __webpack_require__(12);\n\nvar EventEmitter22 = _interopRequireDefault(EventEmitter12);\n\nvar EventEmitter23 = __webpack_require__(13);\n\nvar EventEmitter24 = _interopRequireDefault(EventEmitter13);\n\nvar EventEmitter25 = __webpack_require__(14);\n\nvar EventEmitter26 = _interopRequireDefault(EventEmitter14);\n\nvar EventEmitter27 = __webpack_require__(15);\n\nvar EventEmitter28 = _interopRequireDefault(EventEmitter15);\n\nvar EventEmitter29 = __webpack_require__(16);\n\nvar EventEmitter30 = _interopRequireDefault(EventEmitter16);\n\nvar EventEmitter31 = __webpack_require__(17);\n\nvar EventEmitter32 = _interopRequireDefault(EventEmitter17);\n\nvar EventEmitter33 = __webpack_require__(18);\n\nvar EventEmitter34 = _interopRequireDefault(EventEmitter18);\n\nvar EventEmitter35 = __webpack_require__(19);\n\nvar EventEmitter36 = _interopRequireDefault(EventEmitter19);\n\nvar EventEmitter37 = __webpack_require__(20);\n\nvar EventEmitter38 = _interopRequireDefault(EventEmitter20);\n\nvar EventEmitter39 = __webpack_require__(21);\n\nvar EventEmitter40 = _interopRequireDefault(EventEmitter21);\n\nvar EventEmitter41 = __webpack_require__(22);\n\nvar EventEmitter42 = _interopRequireDefault(EventEmitter22);\n\nvar EventEmitter43 = __webpack_require__(23);\n\nvar EventEmitter44 = _interopRequireDefault(EventEmitter23);\n\nvar EventEmitter45 = __webpack_require__(24);\n\nvar EventEmitter46 = _interopRequireDefault(EventEmitter24);\n\nvar EventEmitter47 = __webpack_require__(25);\n\nvar EventEmitter48 = _interopRequireDefault(EventEmitter25);\n\nvar EventEmitter49 = __webpack_require__(26);\n\nvar EventEmitter50 = _interopRequireDefault(EventEmitter26);\n\nvar EventEmitter51 = __webpack_require__(27);\n\nvar EventEmitter52 = _interopRequireDefault(EventEmitter27);\n\nvar EventEmitter53 = __webpack_require__(28);\n\nvar EventEmitter54 = _interopRequireDefault(EventEmitter28);\n\nvar EventEmitter55 = __webpack_require__(29);\n\nvar EventEmitter56 = _interopRequireDefault(EventEmitter29);\n\nvar EventEmitter57 = __webpack_require__(30);\n\nvar EventEmitter58 = _interopRequireDefault(EventEmitter30);\n\nvar EventEmitter59 = __webpack_require__(31);\n\nvar EventEmitter60 = _interopRequireDefault(EventEmitter31);\n\nvar EventEmitter61 = __webpack_require__(32);\n\nvar EventEmitter62 = _interopRequireDefault(EventEmitter32);\n\nvar EventEmitter63 = __webpack_require__(33);\n\nvar EventEmitter64 = _interopRequireDefault(EventEmitter33);\n\nvar EventEmitter65 = __webpack_require__(34);\n\nvar EventEmitter66 = _interopRequireDefault(EventEmitter34);\n\nvar EventEmitter67 = __webpack_require__(35);\n\nvar EventEmitter68 = _interopRequireDefault(EventEmitter35);\n\nvar EventEmitter69 = __webpack_require__(36);\n\nvar EventEmitter70 = _interopRequireDefault(EventEmitter36);\n\nvar EventEmitter71 = __webpack_require__(37);\n\nvar EventEmitter72 = _interopRequireDefault(EventEmitter37);\n\nvar EventEmitter73 = __webpack_require__(38);\n\nvar EventEmitter74 = _interopRequireDefault(EventEmitter38);\n\nvar EventEmitter75 = __webpack_require__(39);\n\nvar EventEmitter76 = _interopRequireDefault(EventEmitter39);\n\nvar EventEmitter77 = __webpack_require__(40);\n\nvar EventEmitter78 = _interopRequireDefault(EventEmitter40);\n\nvar EventEmitter79 = __webpack_require__(41);\n\nvar EventEmitter80 = _interopRequireDefault(EventEmitter41);\n\nvar EventEmitter81 = __webpack_require__(42);\n\nvar EventEmitter82 = _interopRequireDefault(EventEmitter42);\n\nvar EventEmitter83 = __webpack_require__(43);\n\nvar EventEmitter84 = _interopRequireDefault(EventEmitter43);\n\nvar EventEmitter85 = __webpack_require__(44);\n\nvar EventEmitter86 = _interopRequireDefault(EventEmitter44);\n\nvar EventEmitter87 = __webpack_require__(45);\n\nvar EventEmitter88 = _interopRequireDefault(EventEmitter45);\n\nvar EventEmitter89 = __webpack_require__(46);\n\nvar EventEmitter90 = _interopRequireDefault(EventEmitter46);\n\nvar EventEmitter91 = __webpack_require__(47);\n\nvar EventEmitter92 = _interopRequireDefault(EventEmitter47);\n\nvar EventEmitter93 = __webpack_require__(48);\n\nvar EventEmitter94 = _interopRequireDefault(EventEmitter48);\n\nvar EventEmitter95 = __webpack_require__(49);\n\nvar EventEmitter96 = _interopRequireDefault(EventEmitter49);\n\nvar EventEmitter97 = __webpack_require__(50);\n\nvar EventEmitter98 = _interopRequireDefault(EventEmitter50);\n\nvar EventEmitter99 = __webpack_require__(51);\n\nvar EventEmitter100 = _interopRequireDefault(EventEmitter51);\n\nvar EventEmitter101 = __webpack_require__(52);\n\nvar EventEmitter102 = _interopRequireDefault(EventEmitter52);\n\nvar EventEmitter103 = __webpack_require__(53);\n\nvar EventEmitter104 = _interopRequireDefault(EventEmitter53);\n\nvar EventEmitter105 = __webpack_require__(54);\n\nvar EventEmitter106 = _interopRequireDefault(EventEmitter54);\n\nvar EventEmitter107 = __webpack_require__(55);\n\nvar EventEmitter108 = _interopRequireDefault(EventEmitter55);\n\nvar EventEmitter109 = __webpack_require__(56);\n\nvar EventEmitter110 = _interopRequireDefault(EventEmitter56);\n\nvar EventEmitter111 = __webpack_require__(57);\n\nvar EventEmitter112 = _interopRequireDefault(EventEmitter57);\n\nvar EventEmitter113 = __webpack_require__(58);\n\nvar EventEmitter114 = _interopRequireDefault(EventEmitter58);\n\nvar EventEmitter115 = __webpack_require__(59);\n\nvar EventEmitter116 = _interopRequireDefault(EventEmitter59);\n\nvar EventEmitter117 = __webpack_require__(60);\n\nvar EventEmitter118 = _interopRequireDefault(EventEmitter60);\n\nvar EventEmitter119 = __webpack_require__(61);\n\nvar "}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\n\nconst rescaleToUnit = (numbers) => {\n  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n", "canonical_solution": "  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "partial": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  # print('@@this is the line to split##')\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "gc": "<|endoftext|>/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\n\nconst rescaleToUnit = (numbers) => {\n  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  var scale = (max_number - min_number) / (numbers.length - 1);\n  return numbers.map((number) => number * scale);\n};\n\nexport default rescaleToUnit;\n\n<|/ file source=github ext=.js |>\n/**\n * Rescale an array of numbers to unit interval\n *\n * @param {Array} numbers\n * @return {Array}\n */\nexport const rescaleToUnitArray = (numbers) => {\n  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  var scale = (max_number - min_number) / (numbers.length - 1);\n  return numbers.map((number) => number * scale);\n};\n\n/**\n * Rescale an array of numbers to unit interval\n *\n * @param {Array} numbers\n * @return {Array}\n */\nexport const rescaleToUnitArrayWithZero = (numbers) => {\n  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  var scale = (max_number - min_number) / (numbers.length - 1);\n  return numbers.map((number) => number * scale);\n};\n\n/**\n * Rescale an array of numbers to unit interval\n *\n * @param {Array} numbers\n * @return {Array}\n */\nexport const rescaleToUnitArrayWithZeroAndOne = (numbers) => {\n  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  var scale = (max_number - min_number) / (numbers.length - 1);\n  return numbers.map((number) => number * scale);\n};\n\n/**\n * Rescale an array of numbers to unit interval\n *\n * @param {Array} numbers\n * @return {Array}\n */\nexport const rescaleToUnitArrayWithZeroAndOneAndOne = (numbers) => {\n  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  var scale = (max_number - min_number) / (numbers.length - 1);\n  return numbers.map((number) => number * scale);\n};\n\n/**\n * Rescale an array of numbers to unit interval\n *\n * @param {Array} numbers\n * @return {Array}\n */\nexport const rescaleToUnitArrayWithZeroAndOneAndOneAndOne = (numbers) => {\n  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  var scale = (max_number - min_number) / (numbers.length - 1);\n  return numbers.map((number) => number * scale);\n};\n\n/**\n * Rescale an array of numbers to unit interval\n *\n * @param {Array} numbers\n * @return {Array}\n */\nexport const rescaleToUnitArrayWithZeroAndOneAndOneAndOne = (numbers) => {\n  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  var scale = (max_number - min_number) / (numbers.length - 1);\n  return numbers.map((number) => number * scale);\n};\n\n/**\n * Rescale an array of numbers to unit interval\n *\n * @param {Array} numbers\n * @return {Array}\n */\nexport const rescaleToUnitArrayWithZeroAndOneAndOneAndOne = (numbers) => {\n  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  var scale = (max_number - min_number) / (numbers.length - 1);\n  return numbers.map((number) => number * scale);\n};\n\n/**\n * Rescale an array of numbers to unit interval\n *\n * @param {Array} numbers\n * @return {Array}\n */\nexport const rescaleToUnitArrayWithZeroAndOneAndOneAndOne = (numbers) => {\n  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  var scale = (max_number - min_number) / (numbers.length - 1);\n  return numbers.map((number) => number * scale);\n};\n\n/**\n * Rescale an array of numbers to unit interval\n *\n * @param {Array} numbers\n * @return {Array}\n */\nexport const rescaleToUnitArrayWithZeroAndOneAndOneAndOneAndOne = (numbers) => {\n  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  var scale = (max_number - min_number) / (numbers.length - 1);\n  return numbers.map((number) => number * scale);\n};\n\n/**\n * Rescale an array of numbers to unit interval\n *\n * @param {Array} numbers\n * @return {Array}\n */\nexport const rescaleToUnitArrayWithZeroAndOneAndOneAndOneAndOne = (numbers) => {\n  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  var scale = (max_number - min_number) / (numbers.length - 1);\n  return numbers.map((number) => number * scale);\n};\n\n/**\n * Rescale an array of numbers to unit interval\n *\n * @param {Array} numbers\n * @return {Array}\n */\nexport const rescaleToUnitArrayWithZeroAndOneAndOneAndOneAndOne = (numbers) => {\n  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  var scale = (max_number - min_number) / (numbers.length - 1);\n  return numbers.map((number) => number * scale);\n};\n\n/**\n * Rescale an array of numbers to unit interval\n *\n * @param {Array} numbers\n * @return {Array}\n */\nexport const rescaleToUnitArrayWithZeroAndOneAndOneAndOneAndOne = (numbers) => {\n  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  var scale = (max_number - min_number) / (numbers.length - 1);\n  return numbers.map((number) => number * scale);\n};\n\n/**\n * Rescale an array of numbers to unit interval\n *\n * @param {Array} numbers\n * @return {Array}\n */\nexport const rescaleToUnitArrayWithZeroAndOneAndOneAndOneAndOneAndOne = (numbers) => {\n  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  var scale = (max_number - min_number) / (numbers.length - 1);\n  return numbers.map((number) => number * scale);\n};\n\n/**\n * Rescale an array of numbers to unit interval\n *\n * @param {Array} numbers\n * @return {Array}\n */\nexport const rescaleToUnitArrayWithZeroAndOneAndOneAndOneAndOneAndOneAndOne = (numbers) => {\n  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  var scale = (max_number - min_number) / (numbers.length - 1);\n  return numbers.map((number) => number * scale);\n};\n\n/**\n * Rescale an array of numbers to unit interval\n *\n * @param {Array} numbers\n * @return {Array}\n */\nexport const rescaleToUnitArrayWithZeroAndOneAndOneAndOneAndOneAndOneAndOneAndOne = (numbers) => {\n  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  var scale = (max_number - min_number) / (numbers.length - 1);\n  return numbers.map((number) => number * scale);\n};\n\n/**\n * Rescale an array of numbers to unit interval\n *\n * @param {Array} numbers\n * @return {Array}\n */\nexport const rescaleToUnitArrayWithZeroAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOne = (numbers) => {\n  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  var scale = (max_number - min_number) / (numbers.length - 1);\n  return numbers.map((number) => number * scale);\n};\n\n/**\n * Rescale an array of numbers to unit interval\n *\n"}
{"task_id": "JavaScript/22", "prompt": "/* Filter given list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\n\nconst filterIntegers = (values) => {\n  return values.filter(x => Number.isInteger(x));\n", "canonical_solution": "}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "partial": "/* Filter given list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter(x => Number.isInteger(x));\n  # print('@@this is the line to split##')\n}\n\n", "gc": "<|endoftext|>/* Filter given list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\n\nconst filterIntegers = (values) => {\n  return values.filter(x => Number.isInteger(x));\n};\n\nmodule.exports = filterIntegers;\n\n},{\"./utils\":3}],3:[function(require,module,exports){\n'use strict';\n\nconst utils = require('./utils');\n\nconst isNumber = utils.isNumber;\nconst isString = utils.isString;\n\nconst isBoolean = utils.isBoolean;\nconst isInteger = utils.isInteger;\nconst isFloat = utils.isFloat;\nconst isString = utils.isString;\n\nconst isDate = utils.isDate;\nconst isDateTime = utils.isDateTime;\nconst isTime = require('./time').isTime;\nconst isDateTimeTZ = utils.isDateTimeTZ;\nconst isDateTimeLocalTZ = utils.isDateTimeLocalTZ;\nconst isDateTimeLocalTZWithOffset = utils.isDateTimeLocalTZWithOffset;\nconst isDateTimeWithOffset = utils.isDateTimeWithOffset;\nconst isDateTimeWithOffsetWithOffset = utils.isDateTimeWithOffsetWithOffset;\nconst isDuration = utils.isDuration;\nconst isDurationWithOffset = utils.isDurationWithOffset;\nconst isDurationWithOffsetWithOffset = utils.isDurationWithOffsetWithOffset;\nconst isDurationWithOffsetWithOffsetWithOffset = utils.isDurationWithOffsetWithOffsetWithOffset;\nconst isDurationWithOffsetWithOffsetWithOffsetWithOffset = utils.isDurationWithOffsetWithOffsetWithOffsetWithOffset;\nconst isDurationWithOffsetWithOffsetWithOffsetWithOffsetWithOffset = utils.isDurationWithOffsetWithOffsetWithOffsetWithOffsetWithOffset;\nconst isDurationWithOffsetWithOffsetWithOffsetWithOffsetWithOffset = utils.isDurationWithOffsetWithOffsetWithOffsetWithOffsetWithOffset;\nconst isDurationWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffset = utils.isDurationWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffset;\nconst isDurationWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffset = utils.isDurationWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffset;\nconst isDurationWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffset = utils.isDurationWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffset;\nconst isDurationWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffset = utils.isDurationWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffset;\nconst isDurationWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffset = utils.isDurationWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffset;\nconst isDurationWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffset = utils.isDurationWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffset;\nconst isDurationWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffset = utils.isDurationWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffset;\nconst isDurationWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffset = utils.isDurationWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffset;\nconst isDurationWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffset = utils.isDurationWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffset;\nconst isDurationWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffset = utils.isDurationWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffset;\nconst isDurationWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffset = utils.isDurationWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffset;\nconst isDurationWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffset = utils.isDurationWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffset;\nconst isDurationWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffset = utils.isDurationWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffset;\nconst isDurationWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffset = utils.isDurationWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffset;\nconst isDurationWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffset = utils.isDurationWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffset;\nconst isDurationWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffset = utils.isDurationWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffset;\nconst isDurationWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffset = utils.isDurationWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffset;\nconst isDurationWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffset = utils.isDurationWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffset;\nconst isDurationWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffset = utils.isDurationWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffset;\nconst isDurationWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffset = utils.isDurationWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffset;\nconst isDurationWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffset = utils.isDurationWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffset;\nconst isDurationWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffset = utils.isDurationWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffset;\nconst isDurationWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffsetWithOffset = utils.isDuration"}
{"task_id": "JavaScript/23", "prompt": "/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\n\nconst strlen = (string) => {\n  return string.length;\n", "canonical_solution": "}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "partial": "/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length;\n  # print('@@this is the line to split##')\n}\n\n", "gc": "<|endoftext|>/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\n\nconst strlen = (string) => {\n  return string.length;\n};\n\n/**\n * Return substring from given string\n * >>> substr('abc', '', 1)\n  'b'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'"}
{"task_id": "JavaScript/24", "prompt": "/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\n\nconst largestDivisor = (n) => {\n  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n", "canonical_solution": "      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "partial": "/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      # print('@@this is the line to split##')\n      return i;\n}\n\n", "gc": "<|endoftext|>/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\n\nconst largestDivisor = (n) => {\n  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n  return -1;\n};\n\nmodule.exports = largestDivisor;\n\n},{}],9:[function(require,module,exports){\n/**\n * A simple implementation of binary search tree data structure\n * for JavaScript arrays.\n *\n * Usage:\n *\n * const tree = new BinarySearchTree();\n * tree.insert(1);\n * tree.insert(2);\n * tree.insert(3);\n * tree.insert(4);\n * tree.insert(5);\n * tree.insert(6);\n * tree.insert(7);\n * tree.insert(8);\n * tree.insert(9);\n * tree.insert(10);\n * tree.insert(11);\n * tree.insert(12);\n * tree.insert(13);\n * tree.insert(14);\n * tree.insert(15);\n * tree.insert(16);\n * tree.insert(17);\n * tree.insert(18);\n * tree.insert(19);\n * tree.insert(20);\n * tree.insert(21);\n * tree.insert(22);\n * tree.insert(23);\n * tree.insert(24);\n * tree.insert(25);\n * tree.insert(26);\n * tree.insert(27);\n * tree.insert(28);\n * tree.insert(29);\n * tree.insert(30);\n * tree.insert(31);\n * tree.insert(32);\n * tree.insert(33);\n * tree.insert(34);\n * tree.insert(35);\n * tree.insert(36);\n * tree.insert(37);\n * tree.insert(38);\n * tree.insert(39);\n * tree.insert(40);\n * tree.insert(41);\n * tree.insert(42);\n * tree.insert(43);\n * tree.insert(44);\n * tree.insert(45);\n * tree.insert(46);\n * tree.insert(47);\n * tree.insert(48);\n * tree.insert(49);\n * tree.insert(50);\n * tree.insert(51);\n * tree.insert(52);\n * tree.insert(53);\n * tree.insert(54);\n * tree.insert(55);\n * tree.insert(56);\n * tree.insert(57);\n * tree.insert(58);\n * tree.insert(59);\n * tree.insert(60);\n * tree.insert(61);\n * tree.insert(62);\n * tree.insert(63);\n * tree.insert(64);\n * tree.insert(65);\n * tree.insert(66);\n * tree.insert(67);\n * tree.insert(68);\n * tree.insert(69);\n * tree.insert(70);\n * tree.insert(71);\n * tree.insert(72);\n * tree.insert(73);\n * tree.insert(74);\n * tree.insert(75);\n * tree.insert(76);\n * tree.insert(77);\n * tree.insert(78);\n * tree.insert(79);\n * tree.insert(80);\n * tree.insert(81);\n * tree.insert(82);\n * tree.insert(83);\n * tree.insert(84);\n * tree.insert(85);\n * tree.insert(86);\n * tree.insert(87);\n * tree.insert(88);\n * tree.insert(89);\n * tree.insert(90);\n * tree.insert(91);\n * tree.insert(92);\n * tree.insert(93);\n * tree.insert(94);\n * tree.insert(95);\n * tree.insert(96);\n * tree.insert(97);\n * tree.insert(98);\n * tree.insert(99);\n * tree.insert(100);\n * tree.insert(101);\n * tree.insert(102);\n * tree.insert(103);\n * tree.insert(104);\n * tree.insert(105);\n * tree.insert(106);\n * tree.insert(107);\n * tree.insert(108);\n * tree.insert(109);\n * tree.insert(110);\n * tree.insert(111);\n * tree.insert(112);\n * tree.insert(113);\n * tree.insert(114);\n * tree.insert(115);\n * tree.insert(116);\n * tree.insert(117);\n * tree.insert(118);\n * tree.insert(119);\n * tree.insert(120);\n * tree.insert(121);\n * tree.insert(122);\n * tree.insert(123);\n * tree.insert(124);\n * tree.insert(125);\n * tree.insert(126);\n * tree.insert(127);\n * tree.insert(128);\n * tree.insert(129);\n * tree.insert(130);\n * tree.insert(131);\n * tree.insert(132);\n * tree.insert(133);\n * tree.insert(134);\n * tree.insert(135);\n * tree.insert(136);\n * tree.insert(137);\n * tree.insert(138);\n * tree.insert(139);\n * tree.insert(140);\n * tree.insert(141);\n * tree.insert(142);\n * tree.insert(143);\n * tree.insert(144);\n * tree.insert(145);\n * tree.insert(146);\n * tree.insert(147);\n * tree.insert(148);\n * tree.insert(149);\n * tree.insert(150);\n * tree.insert(151);\n * tree.insert(152);\n * tree.insert(153);\n * tree.insert(154);\n * tree.insert(155);\n * tree.insert(156);\n * tree.insert(157);\n * tree.insert(158);\n * tree.insert(159);\n * tree.insert(160);\n * tree.insert(161);\n * tree.insert(162);\n * tree.insert(163);\n * tree.insert(164);\n * tree.insert(165);\n * tree.insert(166);\n * tree.insert(167);\n * tree.insert(168);\n * tree.insert(169);\n * tree.insert(170);\n * tree.insert(171);\n * tree.insert(172);\n * tree.insert(173);\n * tree.insert(174);\n * tree.insert(175);\n * tree.insert(176);\n * tree.insert(177);\n * tree.insert(178);\n * tree.insert(179);\n * tree.insert(180);\n * tree.insert(181);\n * tree.insert(182);\n * tree.insert(183);\n * tree.insert(184);\n * tree.insert(185);\n * tree.insert(186);\n * tree.insert(187);\n * tree.insert(188);\n * tree.insert(189);\n * tree.insert(190);\n * tree.insert(191);\n * tree.insert(192);\n * tree.insert(193);\n * tree.insert(194);\n * tree.insert(195);\n * tree.insert(196);\n * tree.insert(197);\n * tree.insert(198);\n * tree.insert(199);\n * tree.insert(200);\n * tree.insert(201);\n * tree.insert(202);\n * tree.insert(203);\n * tree.insert(204);\n * tree.insert(205);\n * tree.insert(206);\n * tree.insert(207);\n * tree.insert(208);\n * tree.insert(209);\n * tree.insert(210);\n * tree.insert(211);\n * tree.insert(212);\n * tree.insert(213);\n * tree.insert(214);\n * tree.insert(215);\n * tree.insert(216);\n * tree.insert(217);\n * tree.insert(218);\n * tree.insert(219);\n * tree.insert(220);\n * tree.insert(221);\n * tree.insert(222);\n * tree.insert(223);\n * tree.insert(224);\n * tree.insert(225);\n * tree.insert(226);\n * tree.insert(227);\n * tree.insert(228);\n * tree.insert(229);\n * tree.insert(230);\n * tree.insert(231);\n * tree.insert(232);\n * tree.insert(233);\n * tree.insert(234);\n * tree.insert(235);\n * tree.insert(236);\n * tree.insert(237);\n * tree.insert(238);\n * tree.insert(239);\n * tree.insert(24"}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\n\nconst factorize = (n) => {\n  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n", "canonical_solution": "    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "partial": "/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n      # print('@@this is the line to split##')\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "gc": "<|endoftext|>/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\n\nconst factorize = (n) => {\n  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n  return fact;\n};\n\n/* Given a number n, return its prime factorization in an array.\n  >>> primeFactorize(2)\n  [2, 1]\n  >>> primeFactorize(25)\n  [5, 5]\n  >>> primeFactorize(70)\n  [2, 5, 7]\n  */\n\nconst primeFactorize = (n) => {\n  var primeFactors = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      primeFactors.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n  return primeFactors;\n};\n\n/* Given a number n, return its prime factorization in an array.\n  >>> primeFactorize(2)\n  [2, 1]\n  >>> primeFactorize(25)\n  [5, 5]\n  >>> primeFactorize(70)\n  [2, 5, 7]\n  */\n\nconst primeFactorization = (n) => {\n  var primeFactors = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      primeFactors.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n  return primeFactors;\n};\n\n/* Given a number n, return its prime factorization in an array.\n  >>> primeFactorize(2)\n  [2, 1]\n  >>> primeFactorize(25)\n  [5, 5]\n  >>> primeFactorize(70)\n  [2, 5, 7]\n  */\n\nconst primeFactorizationInArray = (n) => {\n  var primeFactors = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      primeFactors.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n  return primeFactors;\n};\n\n/* Given a number n, return its prime factorization in an array.\n  >>> primeFactorize(2)\n  [2, 1]\n  >>> primeFactorize(25)\n  [5, 5]\n  >>> primeFactorize(70)\n  [2, 5, 7]\n  */\n\nconst primeFactorizationInArrayWithFactorization = (n) => {\n  var primeFactors = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      primeFactors.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n  return primeFactors;\n};\n\n/* Given a number n, return its prime factorization in an array.\n  >>> primeFactorize(2)\n  [2, 1]\n  >>> primeFactorize(25)\n  [5, 5]\n  >>> primeFactorize(70)\n  [2, 5, 7]\n  */\n\nconst primeFactorizationInArrayWithPrimeFactorization = (n) => {\n  var primeFactors = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      primeFactors.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n  return primeFactors;\n};\n\n/* Given a number n, return its prime factorization in an array.\n  >>> primeFactorize(2)\n  [2, 1]\n  >>> primeFactorize(25)\n  [5, 5]\n  >>> primeFactorize(70)\n  [2, 5, 7]\n  */\n\nconst primeFactorizationInArrayWithPrimeFactorizationInArray = (n) => {\n  var primeFactors = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      primeFactors.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n  return primeFactors;\n};\n\n/* Given a number n, return its prime factorization in an array.\n  >>> primeFactorize(2)\n  [2, 1]\n  >>> primeFactorize(25)\n  [5, 5]\n  >>> primeFactorize(70)\n  [2, 5, 7]\n  */\n\nconst primeFactorizationInArrayWithPrimeFactorizationInArrayWithFactorization = (n) => {\n  var primeFactors = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      primeFactors.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n  return primeFactors;\n};\n\n/* Given a number n, return its prime factorization in an array.\n  >>> primeFactorize(2)\n  [2, 1]\n  >>> primeFactorize(25)\n  [5, 5]\n  >>> primeFactorize(70)\n  [2, 5, 7]\n  */\n\nconst primeFactorizationInArrayWithPrimeFactorizationInArrayWithPrimeFactorization = (n) => {\n  var primeFactors = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      primeFactors.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n  return primeFactors;\n};\n\n/* Given a number n, return its prime factorization in an array.\n  >>> primeFactorize(2)\n  [2, 1]\n  >>> primeFactorize(25)\n  [5, 5]\n  >>> primeFactorize(70)\n  [2, 5, 7]\n  */\n\nconst primeFactorizationInArrayWithPrimeFactorizationInArrayWithPrimeFactorizationInArray = (n) => {\n  var primeFactors = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      primeFactors.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n  return primeFactors;\n};\n\n/* Given a number n, return its prime factorization in an array.\n  >>> primeFactorize(2)\n  [2, 1]\n  >>> primeFactorize(25)\n  [5, 5]\n  >>> primeFactorize(70)\n  [2, 5, 7]\n  */\n\nconst primeFactorizationInArrayWithPrimeFactorizationInArrayWithPrimeFactorizationInArrayWithFactorization = (n) => {\n  var primeFactors = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      primeFactors.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n  return primeFactors;\n};\n\n/* Given a number n, return its prime factorization in an array.\n  >>> primeFactorize(2)\n  [2, 1]\n  >>> primeFactorize(25)\n  [5, 5]\n  >>> primeFactorize(70)\n  [2, 5, 7]\n  */\n\nconst primeFactorizationInArrayWithPrimeFactorizationInArrayWithPrimeFactorizationInArrayWithPrimeFactorization = (n) => {\n  var primeFactors = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      primeFactors.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n  return primeFactors;\n};\n\n/* Given a number n, return its prime factorization in an array.\n  >>> primeFactorize(2)\n  [2, 1]\n  >>> primeFactorize(25)\n  [5, 5]\n  >>> primeFactorize(70)\n  [2, 5, 7]\n  */\n\nconst primeFactorizationInArrayWithPrimeFactorizationInArrayWithPrimeFactorizationInArrayWithPrimeFactorization = (n) => {\n  var primeFactors = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      primeFactors.push(i);\n      n = "}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\n\nconst removeDuplicates = (numbers) => {\n  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n", "canonical_solution": "      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "partial": "/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      # print('@@this is the line to split##')\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "gc": "<|endoftext|>/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\n\nconst removeDuplicates = (numbers) => {\n  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return Object.keys(dict).map(key => dict[key]);\n};\n\nmodule.exports = removeDuplicates;\n\n},{}],9:[function(require,module,exports){\n'use strict';\n\nconst isNumber = require('./isNumber');\n\nconst isPositive = num => num > 0;\n\nconst isNegative = num => num < 0;\n\nconst isZero = num => num === 0;\n\nconst isOne = num => num === 1;\n\nconst isTwo = num => num === 2;\n\nconst isThree = num => num === 3;\n\nconst isFour = num => num === 4;\n\nconst isFive = num => num === 5;\n\nconst isSix = num => num === 6;\n\nconst isSeven = num => num === 7;\n\nconst isEight = num => num === 8;\n\nconst isNine = num => num === 9;\n\nconst isTen = num => num === 10;\n\nconst isEleven = num => num === 11;\n\nconst isTwelve = num => num === 12;\n\nconst isThirteen = num => num === 13;\n\nconst isFourteen = num => num === 14;\n\nconst isFifteen = num => num === 15;\n\nconst isSixteen = num => num === 16;\n\nconst isSeventeen = num => num === 17;\n\nconst isEighteen = num => num === 18;\n\nconst isNineteen = num => num === 19;\n\nconst isTwenty = num => num === 20;\n\nconst isThirty = num => num === 21;\n\nconst isFourty = num => num === 22;\n\nconst isFifty = num => num === 23;\n\nconst isSixty = num => num === 24;\n\nconst isOneToNine = num => num === 25;\n\nconst isOneToTwenty = num => num === 26;\n\nconst isOneToThirty = num => num === 27;\n\nconst isOneToFourty = num => num === 28;\n\nconst isOneToFifty = num => num === 29;\n\nconst isOneToSixty = num => num === 30;\n\nconst isOneToNinety = num => num === 31;\n\nconst isOneToTwentyOne = num => num === 32;\n\nconst isOneToTwentyTwo = num => num === 33;\n\nconst isOneToTwentyThree = num => num === 34;\n\nconst isOneToTwentyFour = num => num === 35;\n\nconst isOneToTwentyFive = num => num === 36;\n\nconst isOneToTwentySix = num => num === 37;\n\nconst isOneToTwentySeven = num => num === 38;\n\nconst isOneToTwentyEight = num => num === 39;\n\nconst isOneToTwentyNine = num => num === 40;\n\nconst isOneToTwentyTen = num => num === 41;\n\nconst isOneToTwentyEleven = num => num === 42;\n\nconst isOneToTwentyTwelve = num => num === 43;\n\nconst isOneToTwentyThirteen = num => num === 44;\n\nconst isOneToTwentyFourteen = num => num === 45;\n\nconst isOneToTwentyFifteen = num => num === 46;\n\nconst isOneToTwentySixteen = num => num === 47;\n\nconst isOneToTwentySeventeen = num => num === 48;\n\nconst isOneToTwentyEighteen = num => num === 49;\n\nconst isOneToTwentyNineteen = num => num === 50;\n\nconst isOneToTwentyTwenty = num => num === 51;\n\nconst isOneToTwentyThirty = num => num === 52;\n\nconst isOneToTwentyFourty = num => num === 53;\n\nconst isOneToTwentyFifty = num => num === 54;\n\nconst isOneToTwentySixty = num => num === 55;\n\nconst isOneToTwentySeventy = num => num === 56;\n\nconst isOneToTwentyEighty = num => num === 57;\n\nconst isOneToTwentyNinety = num => num === 58;\n\nconst isOneToTwentyTwentyOne = num => num === 59;\n\nconst isOneToTwentyTwentyTwo = num => num === 60;\n\nconst isOneToTwentyTwentyThree = num => num === 61;\n\nconst isOneToTwentyTwentyFour = num => num === 62;\n\nconst isOneToTwentyTwentyFive = num => num === 63;\n\nconst isOneToTwentyTwentySix = num => num === 64;\n\nconst isOneToTwentyTwentySeven = num => num === 65;\n\nconst isOneToTwentyTwentyEight = num => num === 66;\n\nconst isOneToTwentyTwentyNine = num => num === 67;\n\nconst isOneToTwentyTwentyTen = num => num === 68;\n\nconst isOneToTwentyTwentyEleven = num => num === 69;\n\nconst isOneToTwentyTwentyTwelve = num => num === 70;\n\nconst isOneToTwentyTwentyThirteen = num => num === 71;\n\nconst isOneToTwentyTwentyFourteen = num => num === 72;\n\nconst isOneToTwentyTwentyFifteen = num => num === 73;\n\nconst isOneToTwentyTwentySixteen = num => num === 74;\n\nconst isOneToTwentyTwentySeventeen = num => num === 75;\n\nconst isOneToTwentyTwentyEighteen = num => num === 76;\n\nconst isOneToTwentyTwentyNineteen = num => num === 77;\n\nconst isOneToTwentyTwentyTwenty = num => num === 78;\n\nconst isOneToTwentyTwentyThirty = num => num === 79;\n\nconst isOneToTwentyTwentyFourty = num => num === 80;\n\nconst isOneToTwentyTwentyFifty = num => num === 81;\n\nconst isOneToTwentyTwentySixty = num => num === 82;\n\nconst isOneToTwentyTwentySeventy = num => num === 83;\n\nconst isOneToTwentyTwentyEighty = num => num === 84;\n\nconst isOneToTwentyTwentyNinety = num => num === 85;\n\nconst isOne"}
{"task_id": "JavaScript/27", "prompt": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\n\nconst flipCase = (string) => {\n  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n", "canonical_solution": "          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "partial": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          # print('@@this is the line to split##')\n          .join('');\n}\n\n", "gc": "<|endoftext|>/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\n\nconst flipCase = (string) => {\n  return string.split('')\n         .map(x => (x.toUpperCase() == x? x.toLowerCase() : x.toUpperCase()))\n         .join('');\n};\n\nmodule.exports = flipCase;\n\n},{}],17:[function(require,module,exports){\n'use strict';\n\nconst _ = require('lodash');\nconst { createHash } = require('crypto');\n\nconst createHashWithEncoding = (encoding) => {\n  const hash = createHash(encoding);\n  return hash;\n};\n\nconst createHashWithEncodingAndHash = (encoding, hash) => {\n  const hashWithEncoding = createHash(encoding);\n  hashWithEncoding.update(hash);\n  return hashWithEncoding;\n};\n\nconst createHashWithEncodingAndHashAndEncoding = (encoding, hash, encoding2) => {\n  const hashWithEncodingAndHash = createHashWithEncodingAndHash(encoding, hash);\n  hashWithEncodingAndHash.update(encoding2);\n  return hashWithEncodingAndHash;\n};\n\nconst createHashWithEncodingAndHashAndEncodingAndHash = (encoding, hash, encoding2, hash2) => {\n  const hashWithEncodingAndHashAndEncoding2 = createHashWithEncodingAndHashAndEncoding2(encoding, hash2, encoding2);\n  hashWithEncodingAndHashAndEncoding2.update(hash2);\n  return hashWithEncodingAndHashAndEncoding2;\n};\n\nconst createHashWithEncodingAndHashAndEncodingAndHashAndEncoding2 = (encoding, hash, encoding2, hash2, encoding3) => {\n  const hashWithEncodingAndHashAndEncoding3 = createHashWithEncodingAndHashAndEncoding3(encoding, hash2, encoding3);\n  hashWithEncodingAndHashAndEncoding3.update(hash3);\n  return hashWithEncodingAndHashAndEncoding3;\n};\n\nconst createHashWithEncodingAndHashAndEncodingAndHashAndEncoding3 = (encoding, hash, encoding2, hash2, encoding3, hash3) => {\n  const hashWithEncodingAndHashAndEncoding4 = createHashWithEncodingAndHashAndEncoding4(encoding, hash2, encoding3, hash3);\n  hashWithEncodingAndHashAndEncoding4.update(hash3);\n  return hashWithEncodingAndHashAndEncoding4;\n};\n\nconst createHashWithEncodingAndHashAndEncodingAndHashAndEncoding4 = (encoding, hash, encoding2, hash2, encoding3, hash3, encoding4) => {\n  const hashWithEncodingAndHashAndEncoding5 = createHashWithEncodingAndHashAndEncoding5(encoding, hash2, encoding3, hash3, encoding4);\n  hashWithEncodingAndHashAndEncoding5.update(hash3);\n  return hashWithEncodingAndHashAndEncoding5;\n};\n\nconst createHashWithEncodingAndHashAndEncodingAndHashAndEncoding5 = (encoding, hash, encoding2, hash2, encoding3, hash3, encoding4, hash4) => {\n  const hashWithEncodingAndHashAndEncoding6 = createHashWithEncodingAndHashAndEncoding6(encoding, hash2, encoding3, hash3, encoding4, hash4);\n  hashWithEncodingAndHashAndEncoding6.update(hash4);\n  return hashWithEncodingAndHashAndEncoding6;\n};\n\nconst createHashWithEncodingAndHashAndEncodingAndHashAndEncoding6 = (encoding, hash, encoding2, hash2, encoding3, hash3, encoding4, hash4, encoding5) => {\n  const hashWithEncodingAndHashAndEncoding7 = createHashWithEncodingAndHashAndEncoding7(encoding, hash2, encoding3, hash3, encoding4, hash4, encoding5);\n  hashWithEncodingAndHashAndEncoding7.update(hash4);\n  return hashWithEncodingAndHashAndEncoding7;\n};\n\nconst createHashWithEncodingAndHashAndEncodingAndHashAndEncoding7 = (encoding, hash, encoding2, hash2, encoding3, hash3, encoding4, hash4, encoding5, hash5) => {\n  const hashWithEncodingAndHashAndEncoding8 = createHashWithEncodingAndHashAndEncoding8(encoding, hash2, encoding3, hash3, encoding4, hash4, encoding5, hash5);\n  hashWithEncodingAndHashAndEncoding8.update(hash5);\n  return hashWithEncodingAndHashAndEncoding8;\n};\n\nconst createHashWithEncodingAndHashAndEncodingAndHashAndEncoding8 = (encoding, hash, encoding2, hash2, encoding3, hash3, encoding4, hash4, encoding5, hash5, encoding6) => {\n  const hashWithEncodingAndHashAndEncoding9 = createHashWithEncodingAndHashAndEncoding9(encoding, hash2, encoding3, hash3, encoding4, hash4, encoding5, hash5, encoding6);\n  hashWithEncodingAndHashAndEncoding9.update(hash5);\n  return hashWithEncodingAndHashAndEncoding9;\n};\n\nconst createHashWithEncodingAndHashAndEncodingAndHashAndEncoding9 = (encoding, hash, encoding2, hash2, encoding3, hash3, encoding4, hash4, encoding5, hash5, encoding6, hash6) => {\n  const hashWithEncodingAndHashAndEncoding10 = createHashWithEncodingAndHashAndEncoding10(encoding, hash2, encoding3, hash3, encoding4, hash4, encoding5, hash5, encoding6, hash6);\n  hashWithEncodingAndHashAndEncoding10.update(hash6);\n  return hashWithEncodingAndHashAndEncoding10;\n};\n\nconst createHashWithEncodingAndHashAndEncodingAndHashAndEncoding10 = (encoding, hash, encoding2, hash2, encoding3, hash3, encoding4, hash4, encoding5, hash5, encoding6, hash6, encoding7) => {\n  const hashWithEncodingAndHashAndEncoding11 = createHashWithEncodingAndHashAndEncoding11(encoding, hash2, encoding3, hash3, encoding4, hash4, encoding5, hash5, encoding6, hash6, encoding7);\n  hashWithEncodingAndHashAndEncoding11.update(hash7);\n  return hashWithEncodingAndHashAndEncoding11;\n};\n\nconst createHashWithEncodingAndHashAndEncodingAndHashAndEncoding11 = (encoding, hash, encoding2, hash2, encoding3, hash3, encoding4, hash4, encoding5, hash5, encoding6, hash6, encoding7, hash7) => {\n  const hashWithEncodingAndHashAndEncoding12 = createHashWithEncodingAndHashAndEncoding12(encoding, hash2, encoding3, hash3, encoding4, hash4, encoding5, hash5, encoding6, hash6, encoding7, hash7);\n  hashWithEncodingAndHashAndEncoding12.update(hash7);\n  return hashWithEncodingAndHashAndEncoding12;\n};\n\nconst createHashWithEncodingAndHashAndEncodingAndHashAndEncoding12 = (encoding, hash, encoding2, hash2, encoding3, hash3, encoding4, hash4, encoding5, hash5, encoding6, hash6, encoding7, hash7, encoding8) => {\n  const hashWithEncodingAndHashAndEncoding13 = createHashWithEncodingAndHashAndEncoding13(encoding, hash2, encoding3, hash3, encoding4, hash4, encoding5, hash5, encoding6, hash6, encoding7, hash7, encoding8);\n  hashWithEncodingAndHashAndEncoding13.update(hash8);\n  return hashWithEncodingAndHashAndEncoding13;\n};\n\nconst createHashWithEncodingAndHashAndEncodingAndHashAndEncoding13 = (encoding, hash, encoding2, hash2, encoding3, hash3, encoding4, hash4, encoding5, hash5, encoding6, hash6, encoding7, hash7, encoding8, hash8) => {\n  const hashWithEncodingAndHashAndEncoding14 = createHashWithEncodingAndHashAndEncoding14(encoding, hash2, encoding3, hash3, encoding4, hash4, encoding5, hash5, encoding6, hash6, encoding7, hash7, encoding8, hash8);\n  hashWithEncodingAndHashAndEncoding14.update(hash8);\n  return hashWithEncodingAndHashAndEncoding14;\n};\n\nconst createHashWithEncodingAndHashAndEncodingAndHashAndEncoding14 = (encoding, hash, encoding2, hash2, encoding3, hash3, encoding4, hash4, encoding5, hash5, encoding6, hash6, encoding7, hash7, encoding8, hash8, encoding9) => {\n  const hashWithEncodingAndHashAndEncoding15 = createHashWithEncodingAndHashAndEncoding15(encoding, hash2, encoding3, hash3, encoding4, hash4, encoding5, hash5, encoding"}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\n\nconst concatenate = (strings) => {\n  return strings.join('');\n", "canonical_solution": "}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "partial": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.join('');\n  # print('@@this is the line to split##')\n}\n\n", "gc": "<|endoftext|>/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\n\nconst concatenate = (strings) => {\n  return strings.join('');\n};\n\nmodule.exports = concatenate;\n\n},{}],9:[function(require,module,exports){\n'use strict';\n\nconst _ = require('lodash');\nconst util = require('util');\n\nconst utils = require('./utils');\n\nconst defaults = {\n  separator: '.',\n  limit: Infinity,\n  trim: false,\n  lowercase: false,\n  uppercase: false\n};\n\nconst defaultOptions = {\n  separator: defaults.separator,\n  limit: defaults.limit,\n  trim: defaults.trim,\n  lowercase: defaults.lowercase,\n  uppercase: defaults.uppercase\n};\n\nconst defaultOptionNames = Object.keys(defaultOptions);\n\nconst defaultOptionNamesLength = defaultOptionNames.length;\n\nconst defaultOptionNamesLength = defaultOptionNamesLength - 1;\n\nconst defaultOptionNamesLength = defaultOptionNamesLength - 1;\n\nconst defaultOptionNamesLength = defaultOptionNamesLength - 1;\n\nconst defaultOptionNamesLength = defaultOptionNamesLength - 1;\n\nconst defaultOptionNamesLength = defaultOptionNamesLength - 1;\n\nconst defaultOptionNamesLength = defaultOptionNamesLength - 1;\n\nconst defaultOptionNamesLength = defaultOptionNamesLength - 1;\n\nconst defaultOptionNamesLength = defaultOptionNamesLength - 1;\n\nconst defaultOptionNamesLength = defaultOptionNamesLength - 1;\n\nconst defaultOptionNamesLength = defaultOptionNamesLength - 1;\n\nconst defaultOptionNamesLength = defaultOptionNamesLength - 1;\n\nconst defaultOptionNamesLength = defaultOptionNamesLength - 1;\n\nconst defaultOptionNamesLength = defaultOptionNamesLength - 1;\n\nconst defaultOptionNamesLength = defaultOptionNamesLength - 1;\n\nconst defaultOptionNamesLength = defaultOptionNamesLength - 1;\n\nconst defaultOptionNamesLength = defaultOptionNamesLength - 1;\n\nconst defaultOptionNamesLength = defaultOptionNamesLength - 1;\n\nconst defaultOptionNamesLength = defaultOptionNamesLength - 1;\n\nconst defaultOptionNamesLength = defaultOptionNamesLength - 1;\n\nconst defaultOptionNamesLength = defaultOptionNamesLength - 1;\n\nconst defaultOptionNamesLength = defaultOptionNamesLength - 1;\n\nconst defaultOptionNamesLength = defaultOptionNamesLength - 1;\n\nconst defaultOptionNamesLength = defaultOptionNamesLength - 1;\n\nconst defaultOptionNamesLength = defaultOptionNamesLength - 1;\n\nconst defaultOptionNamesLength = defaultOptionNamesLength - 1;\n\nconst defaultOptionNamesLength = defaultOptionNamesLength - 1;\n\nconst defaultOptionNamesLength = defaultOptionNamesLength - 1;\n\nconst defaultOptionNamesLength = defaultOptionNamesLength - 1;\n\nconst defaultOptionNamesLength = defaultOptionNamesLength - 1;\n\nconst defaultOptionNamesLength = defaultOptionNamesLength - 1;\n\nconst defaultOptionNamesLength = defaultOptionNamesLength - 1;\n\nconst defaultOptionNamesLength = defaultOptionNamesLength - 1;\n\nconst defaultOptionNamesLength = defaultOptionNamesLength - 1;\n\nconst defaultOptionNamesLength = defaultOptionNamesLength - 1;\n\nconst defaultOptionNamesLength = defaultOptionNamesLength - 1;\n\nconst defaultOptionNamesLength = defaultOptionNamesLength - 1;\n\nconst defaultOptionNamesLength = defaultOptionNamesLength - 1;\n\nconst defaultOptionNamesLength = defaultOptionNamesLength - 1;\n\nconst defaultOptionNamesLength = defaultOptionNamesLength - 1;\n\nconst defaultOptionNamesLength = defaultOptionNamesLength - 1;\n\nconst defaultOptionNamesLength = defaultOptionNamesLength - 1;\n\nconst defaultOptionNamesLength = defaultOptionNamesLength - 1;\n\nconst defaultOptionNamesLength = defaultOptionNamesLength - 1;\n\nconst defaultOptionNamesLength = defaultOptionNamesLength - 1;\n\nconst defaultOptionNamesLength = defaultOptionNamesLength - 1;\n\nconst defaultOptionNamesLength = defaultOptionNamesLength - 1;\n\nconst defaultOptionNamesLength = defaultOptionNamesLength - 1;\n\nconst defaultOptionNamesLength = defaultOptionNamesLength - 1;\n\nconst defaultOptionNamesLength = defaultOptionNamesLength - 1;\n\nconst defaultOptionNamesLength = defaultOptionNamesLength - 1;\n\nconst defaultOptionNamesLength = defaultOptionNamesLength - 1;\n\nconst defaultOptionNamesLength = defaultOptionNamesLength - 1;\n\nconst defaultOptionNamesLength = defaultOptionNamesLength - 1;\n\nconst defaultOptionNamesLength = defaultOptionNamesLength - 1;\n\nconst defaultOptionNamesLength = defaultOptionNamesLength - 1;\n\nconst defaultOptionNamesLength = defaultOptionNamesLength - 1;\n\nconst defaultOptionNamesLength = defaultOptionNamesLength - 1;\n\nconst defaultOptionNamesLength = defaultOptionNamesLength - 1;\n\nconst defaultOptionNamesLength = defaultOptionNamesLength - 1;\n\nconst defaultOptionNamesLength = defaultOptionNamesLength - 1;\n\nconst defaultOptionNamesLength = defaultOptionNamesLength - 1;\n\nconst defaultOptionNamesLength = defaultOptionNamesLength - 1;\n\nconst defaultOptionNamesLength = defaultOptionNamesLength - 1;\n\nconst defaultOptionNamesLength = defaultOptionNamesLength - 1;\n\nconst defaultOptionNamesLength = defaultOptionNamesLength - 1;\n\nconst defaultOptionNamesLength = defaultOptionNamesLength - 1;\n\nconst defaultOptionNamesLength = defaultOptionNamesLength - 1;\n\nconst defaultOptionNamesLength = defaultOptionNamesLength - 1;\n\nconst defaultOptionNamesLength = defaultOptionNamesLength - 1;\n\nconst defaultOptionNamesLength = defaultOptionNamesLength - 1;\n\nconst defaultOptionNamesLength = defaultOptionNamesLength - 1;\n\nconst defaultOptionNamesLength = defaultOptionNamesLength - 1;\n\nconst defaultOptionNamesLength = defaultOptionNamesLength - 1;\n\nconst defaultOptionNamesLength = defaultOptionNamesLength - 1;\n\nconst defaultOptionNamesLength = defaultOptionNamesLength - 1;\n\nconst defaultOptionNamesLength = defaultOptionNamesLength - 1;\n\nconst defaultOptionNamesLength = defaultOptionNamesLength - 1;\n\nconst defaultOptionNamesLength = defaultOptionNamesLength - 1;\n\nconst defaultOptionNamesLength = defaultOptionNamesLength - 1;\n\nconst defaultOptionNamesLength = defaultOptionNamesLength - 1;\n\nconst defaultOptionNamesLength = defaultOptionNamesLength - 1;\n\nconst defaultOptionNamesLength = defaultOptionNamesLength - 1;\n\nconst defaultOptionNamesLength = defaultOptionNamesLength - 1;\n\nconst defaultOptionNamesLength = defaultOptionNamesLength - 1;\n\nconst defaultOptionNamesLength = defaultOptionNamesLength - 1;\n\nconst defaultOptionNamesLength = defaultOptionNamesLength - 1;\n\nconst defaultOptionNamesLength = defaultOptionNamesLength - 1;\n\nconst defaultOptionNamesLength = defaultOptionNamesLength - 1;\n\nconst defaultOptionNamesLength = defaultOptionNamesLength - 1;\n\nconst defaultOptionNamesLength = defaultOptionNamesLength - 1;\n\nconst defaultOptionNamesLength = defaultOptionNamesLength - 1;\n\nconst defaultOptionNamesLength = defaultOptionNamesLength - 1;\n\nconst defaultOptionNamesLength = defaultOptionNamesLength - 1;\n\nconst defaultOptionNamesLength = defaultOptionNamesLength - 1;\n\nconst defaultOptionNamesLength = defaultOptionNamesLength - 1;\n\nconst defaultOptionNamesLength = defaultOptionNamesLength - 1;\n\nconst defaultOptionNamesLength = defaultOptionNamesLength - 1;\n\nconst defaultOptionNames"}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\n\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(x => x.startsWith(prefix));\n", "canonical_solution": "}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "partial": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(x => x.startsWith(prefix));\n  # print('@@this is the line to split##')\n}\n\n", "gc": "<|endoftext|>/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\n\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(x => x.startsWith(prefix));\n};\n\n/**\n * Filter an input list of strings only for the ones that end with a given suffix.\n  >>> filterBySuffix([], 'a')\n  []\n  >>> filterBySuffix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\n\nconst filterBySuffix = (strings, suffix) => {\n  return strings.filter(x => x.endsWith(suffix));\n};\n\n/**\n * Filter an input list of strings only for the ones that do not start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'b')\n  ['array']\n  */\n\nconst filterByPrefix = filterBySuffix;\n\n/**\n * Filter an input list of strings only for the ones that do not end with a given suffix.\n  >>> filterBySuffix([], 'a')\n  []\n  >>> filterBySuffix(['abc', 'bcd', 'cde', 'array'], 'b')\n  ['array', 'cde']\n  */\n\nconst filterBySuffix = filterByPrefix;\n\n/**\n * Filter an input list of strings only for the ones that do not start with a given suffix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'b')\n  ['array']\n  */\n\nconst filterByPrefix = filterBySuffix;\n\n/**\n * Filter an input list of strings only for the ones that do not end with a given suffix.\n  >>> filterBySuffix([], 'a')\n  []\n  >>> filterBySuffix(['abc', 'bcd', 'cde', 'array'], 'b')\n  ['array', 'cde']\n  */\n\nconst filterBySuffix = filterByPrefix;\n\n/**\n * Filter an input list of strings only for the ones that do not start with a given suffix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'b')\n  ['array']\n  */\n\nconst filterByPrefix = filterBySuffix;\n\n/**\n * Filter an input list of strings only for the ones that do not end with a given suffix.\n  >>> filterBySuffix([], 'a')\n  []\n  >>> filterBySuffix(['abc', 'bcd', 'cde', 'array'], 'b')\n  ['array', 'cde']\n  */\n\nconst filterBySuffix = filterByPrefix;\n\n/**\n * Filter an input list of strings only for the ones that do not start with a given suffix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'b')\n  ['array']\n  */\n\nconst filterByPrefix = filterBySuffix;\n\n/**\n * Filter an input list of strings only for the ones that do not end with a given suffix.\n  >>> filterBySuffix([], 'a')\n  []\n  >>> filterBySuffix(['abc', 'bcd', 'cde', 'array'], 'b')\n  ['array', 'cde']\n  */\n\nconst filterBySuffix = filterByPrefix;\n\n/**\n * Filter an input list of strings only for the ones that do not start with a given suffix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'b')\n  ['array']\n  */\n\nconst filterByPrefix = filterBySuffix;\n\n/**\n * Filter an input list of strings only for the ones that do not end with a given suffix.\n  >>> filterBySuffix([], 'a')\n  []\n  >>> filterBySuffix(['abc', 'bcd', 'cde', 'array'], 'b')\n  ['array', 'cde']\n  */\n\nconst filterBySuffix = filterByPrefix;\n\n/**\n * Filter an input list of strings only for the ones that do not start with a given suffix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'b')\n  ['array']\n  */\n\nconst filterByPrefix = filterBySuffix;\n\n/**\n * Filter an input list of strings only for the ones that do not end with a given suffix.\n  >>> filterBySuffix([], 'a')\n  []\n  >>> filterBySuffix(['abc', 'bcd', 'cde', 'array'], 'b')\n  ['array', 'cde']\n  */\n\nconst filterBySuffix = filterByPrefix;\n\n/**\n * Filter an input list of strings only for the ones that do not start with a given suffix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'b')\n  ['array']\n  */\n\nconst filterByPrefix = filterBySuffix;\n\n/**\n * Filter an input list of strings only for the ones that do not end with a given suffix.\n  >>> filterBySuffix([], 'a')\n  []\n  >>> filterBySuffix(['abc', 'bcd', 'cde', 'array'], 'b')\n  ['array', 'cde']\n  */\n\nconst filterBySuffix = filterByPrefix;\n\n/**\n * Filter an input list of strings only for the ones that do not start with a given suffix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'b')\n  ['array']\n  */\n\nconst filterByPrefix = filterBySuffix;\n\n/**\n * Filter an input list of strings only for the ones that do not end with a given suffix.\n  >>> filterBySuffix([], 'a')\n  []\n  >>> filterBySuffix(['abc', 'bcd', 'cde', 'array'], 'b')\n  ['array', 'cde']\n  */\n\nconst filterBySuffix = filterByPrefix;\n\n/**\n * Filter an input list of strings only for the ones that do not start with a given suffix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'b')\n  ['array']\n  */\n\nconst filterByPrefix = filterBySuffix;\n\n/**\n * Filter an input list of strings only for the ones that do not end with a given suffix.\n  >>> filterBySuffix([], 'a')\n  []\n  >>> filterBySuffix(['abc', 'bcd', 'cde', 'array'], 'b')\n  ['array', 'cde']\n  */\n\nconst filterBySuffix = filterByPrefix;\n\n/**\n * Filter an input list of strings only for the ones that do not start with a given suffix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'b')\n  ['array']\n  */\n\nconst filterByPrefix = filterBySuffix;\n\n/**\n * Filter an input list of strings only for the ones that do not end with a given suffix.\n  >>> filterBySuffix([], 'a')\n  []\n  >>> filterBySuffix(['abc', 'bcd', 'cde', 'array'], 'b')\n  ['array', 'cde']\n  */\n\nconst filterBySuffix = filterByPrefix;\n\n/**\n * Filter an input list of strings only for the ones that do not start with a given suffix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'b')\n  ['array']\n  */\n\nconst filterByPrefix = filterBy"}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\n\nconst getPositive = (l) => {\n  return l.filter(e => e > 0);\n", "canonical_solution": "}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "partial": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  return l.filter(e => e > 0);\n  # print('@@this is the line to split##')\n}\n\n", "gc": "<|endoftext|>/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\n\nconst getPositive = (l) => {\n  return l.filter(e => e > 0);\n};\n\n/*Return only negative numbers in the list.\n  >>> getNegative([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> getNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\n\nconst getNegative = (l) => {\n  return l.filter(e => e < 0);\n};\n\n/*Return only numbers in the list that are divisible by 3.\n  >>> getDivisible([3, 5, 7, 9, 11, 13, 15])\n  [3, 5, 7, 9, 11, 13, 15]\n  >>> getDivisible([3, 5, 7, 9, 11, 13, 15, 17])\n  [3, 5, 7, 9, 11, 13, 15, 17]\n  */\n\nconst getDivisible = (l) => {\n  return l.filter(e => e % 3 === 0);\n};\n\n/*Return only numbers in the list that are divisible by 5.\n  >>> getDivisible([3, 5, 7, 9, 11, 13, 15, 17])\n  [3, 5, 7, 9, 11, 13, 15, 17]\n  >>> getDivisible([3, 5, 7, 9, 11, 13, 15, 17, 19])\n  [3, 5, 7, 9, 11, 13, 15, 17, 19]\n  */\n\nconst getDivisible = (l) => {\n  return l.filter(e => e % 5 === 0);\n};\n\n/*Return only numbers in the list that are divisible by 7.\n  >>> getDivisible([3, 5, 7, 9, 11, 13, 15, 17])\n  [3, 5, 7, 9, 11, 13, 15, 17]\n  >>> getDivisible([3, 5, 7, 9, 11, 13, 15, 17, 19])\n  [3, 5, 7, 9, 11, 13, 15, 17, 19]\n  */\n\nconst getDivisible = (l) => {\n  return l.filter(e => e % 7 === 0);\n};\n\n/*Return only numbers in the list that are divisible by 9.\n  >>> getDivisible([3, 5, 7, 9, 11, 13, 15, 17])\n  [3, 5, 7, 9, 11, 13, 15, 17]\n  >>> getDivisible([3, 5, 7, 9, 11, 13, 15, 17, 19])\n  [3, 5, 7, 9, 11, 13, 15, 17, 19]\n  */\n\nconst getDivisible = (l) => {\n  return l.filter(e => e % 9 === 0);\n};\n\n/*Return only numbers in the list that are divisible by 11.\n  >>> getDivisible([3, 5, 7, 9, 11, 13, 15, 17])\n  [3, 5, 7, 9, 11, 13, 15, 17]\n  >>> getDivisible([3, 5, 7, 9, 11, 13, 15, 17, 19])\n  [3, 5, 7, 9, 11, 13, 15, 17, 19]\n  */\n\nconst getDivisible = (l) => {\n  return l.filter(e => e % 11 === 0);\n};\n\n/*Return only numbers in the list that are divisible by 13.\n  >>> getDivisible([3, 5, 7, 9, 11, 13, 15, 17])\n  [3, 5, 7, 9, 11, 13, 15, 17]\n  >>> getDivisible([3, 5, 7, 9, 11, 13, 15, 17, 19])\n  [3, 5, 7, 9, 11, 13, 15, 17, 19]\n  */\n\nconst getDivisible = (l) => {\n  return l.filter(e => e % 13 === 0);\n};\n\n/*Return only numbers in the list that are divisible by 15.\n  >>> getDivisible([3, 5, 7, 9, 11, 13, 15, 17])\n  [3, 5, 7, 9, 11, 13, 15, 17]\n  >>> getDivisible([3, 5, 7, 9, 11, 13, 15, 17, 19])\n  [3, 5, 7, 9, 11, 13, 15, 17, 19]\n  */\n\nconst getDivisible = (l) => {\n  return l.filter(e => e % 15 === 0);\n};\n\n/*Return only numbers in the list that are divisible by 17.\n  >>> getDivisible([3, 5, 7, 9, 11, 13, 15, 17])\n  [3, 5, 7, 9, 11, 13, 15, 17]\n  >>> getDivisible([3, 5, 7, 9, 11, 13, 15, 17, 19])\n  [3, 5, 7, 9, 11, 13, 15, 17, 19]\n  */\n\nconst getDivisible = (l) => {\n  return l.filter(e => e % 17 === 0);\n};\n\n/*Return only numbers in the list that are divisible by 19.\n  >>> getDivisible([3, 5, 7, 9, 11, 13, 15, 17])\n  [3, 5, 7, 9, 11, 13, 15, 17]\n  >>> getDivisible([3, 5, 7, 9, 11, 13, 15, 17, 19])\n  [3, 5, 7, 9, 11, 13, 15, 17, 19]\n  */\n\nconst getDivisible = (l) => {\n  return l.filter(e => e % 19 === 0);\n};\n\n/*Return only numbers in the list that are divisible by 3.\n  >>> getDivisible([3, 5, 7, 9, 11, 13, 15, 17])\n  [3, 5, 7, 9, 11, 13, 15, 17]\n  >>> getDivisible([3, 5, 7, 9, 11, 13, 15, 17, 19])\n  [3, 5, 7, 9, 11, 13, 15, 17, 19]\n  */\n\nconst getDivisible = (l) => {\n  return l.filter(e => e % 3 === 0);\n};\n\n/*Return only numbers in the list that are divisible by 5.\n  >>> getDivisible([3, 5, 7, 9, 11, 13, 15, 17])\n  [3, 5, 7, 9, 11, 13, 15, 17]\n  >>> getDivisible([3, 5, 7, 9, 11, 13, 15, 17, 19])\n  [3, 5, 7, 9, 11, 13, 15, 17, 19]\n  */\n\nconst getDivisible = (l) => {\n  return l.filter(e => e % 5 === 0);\n};\n\n/*Return only numbers in the list that are divisible by 7.\n  >>> getDivisible([3, 5, 7, 9, 11, 13, 15, 17])\n  [3, 5, 7, 9, 11, 13, 15, 17]\n  >>> getDivisible([3, 5, 7, 9, 11, 13, 15, 17, 19])\n  [3, 5, 7, 9, 11, 13, 15, 17, 19]\n  */\n\nconst getDivisible = (l) => {\n  return l.filter(e => e % 7 === 0);\n};\n\n/*Return only numbers in the list that are divisible by 9.\n  >>> getDivisible([3, 5, 7, 9, 11, 13, 15, 17])\n  [3, 5, 7, 9, 11, 13, 15, 17]\n  >>> getDivisible([3, 5, 7, 9, 11, 13, 15, 17, 19])\n  [3, 5, 7, 9, 11, 13, 15, 17, 19]\n  */\n\nconst getDivisible = (l) => {\n  return l.filter(e => e % 9 === 0);\n};\n\n/*Return only numbers in the list that are divisible by 11.\n  >>> getDivisible([3, 5, 7, 9, 11, 13, 15, 17])\n  [3, 5, 7, 9, 11, 13, 15, 17]\n  >>> getDivisible([3, 5, 7, 9, 11, 13, 15, 17, 19])\n  [3, 5, 7, 9, 11, 13, 15, 17, 19]\n  */\n\nconst getDivisible = (l) => {\n  return l.filter(e => e % 11 === 0);\n};\n\n/*Return only numbers in the list that are divisible by 13.\n  >>> getDivisible([3, 5, 7, 9, 11, 13, 15, 17])\n  [3, 5, 7, 9, 11, 13, 15, 17]\n  >>> getDivisible([3, 5, 7, 9, 11, 13, 15, 17, 19])\n  [3, 5, 7, 9, 11, 13, 15, 17, 19]\n  */\n\nconst getDivisible = (l) => {\n  return l.filter(e => e % 13 === 0);\n};\n\n/*Return only numbers in the list that are divisible by 15.\n  >>> getDivisible([3, 5, 7, 9, 11, 13, 15, 17])\n  [3, 5, 7, 9, 11, 13, 15, 17]\n  >>> getDivisible([3, 5, 7, 9, 11, 13, 15, 17, 19])\n  [3, 5, 7, 9, 11, 13, 15, 17, 19]\n  */\n\nconst getDivisible = (l) => {\n  return l.filter(e => e % 15 === 0);\n};\n\n/*Return "}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a given number is prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\n\nconst isPrime = (n) => {\n  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n", "canonical_solution": "    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "partial": "/*Return true if a given number is prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    # print('@@this is the line to split##')\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "gc": "<|endoftext|>/*Return true if a given number is prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\n\nconst isPrime = (n) => {\n  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k === 0)\n      return false;\n  return true;\n};\n\n/*\n  Given a number, return true if it is a prime number, and false otherwise.\n  >>> isPrime(123)\n  true\n  >>> isPrime(124)\n  false\n  >>> isPrime(125)\n  false\n  >>> isPrime(126)\n  false\n  >>> isPrime(127)\n  false\n  >>> isPrime(128)\n  false\n  >>> isPrime(129)\n  false\n  >>> isPrime(130)\n  false\n  >>> isPrime(131)\n  false\n  >>> isPrime(132)\n  false\n  >>> isPrime(133)\n  false\n  >>> isPrime(134)\n  false\n  >>> isPrime(135)\n  false\n  >>> isPrime(136)\n  false\n  >>> isPrime(137)\n  false\n  >>> isPrime(138)\n  false\n  >>> isPrime(139)\n  false\n  >>> isPrime(140)\n  false\n  >>> isPrime(141)\n  false\n  >>> isPrime(142)\n  false\n  >>> isPrime(143)\n  false\n  >>> isPrime(144)\n  false\n  >>> isPrime(145)\n  false\n  >>> isPrime(146)\n  false\n  >>> isPrime(147)\n  false\n  >>> isPrime(148)\n  false\n  >>> isPrime(149)\n  false\n  >>> isPrime(150)\n  false\n  >>> isPrime(151)\n  false\n  >>> isPrime(152)\n  false\n  >>> isPrime(153)\n  false\n  >>> isPrime(154)\n  false\n  >>> isPrime(155)\n  false\n  >>> isPrime(156)\n  false\n  >>> isPrime(157)\n  false\n  >>> isPrime(158)\n  false\n  >>> isPrime(159)\n  false\n  >>> isPrime(160)\n  false\n  >>> isPrime(161)\n  false\n  >>> isPrime(162)\n  false\n  >>> isPrime(163)\n  false\n  >>> isPrime(164)\n  false\n  >>> isPrime(165)\n  false\n  >>> isPrime(166)\n  false\n  >>> isPrime(167)\n  false\n  >>> isPrime(168)\n  false\n  >>> isPrime(169)\n  false\n  >>> isPrime(170)\n  false\n  >>> isPrime(171)\n  false\n  >>> isPrime(172)\n  false\n  >>> isPrime(173)\n  false\n  >>> isPrime(174)\n  false\n  >>> isPrime(175)\n  false\n  >>> isPrime(176)\n  false\n  >>> isPrime(177)\n  false\n  >>> isPrime(178)\n  false\n  >>> isPrime(179)\n  false\n  >>> isPrime(180)\n  false\n  >>> isPrime(181)\n  false\n  >>> isPrime(182)\n  false\n  >>> isPrime(183)\n  false\n  >>> isPrime(184)\n  false\n  >>> isPrime(185)\n  false\n  >>> isPrime(186)\n  false\n  >>> isPrime(187)\n  false\n  >>> isPrime(188)\n  false\n  >>> isPrime(189)\n  false\n  >>> isPrime(190)\n  false\n  >>> isPrime(191)\n  false\n  >>> isPrime(192)\n  false\n  >>> isPrime(193)\n  false\n  >>> isPrime(194)\n  false\n  >>> isPrime(195)\n  false\n  >>> isPrime(196)\n  false\n  >>> isPrime(197)\n  false\n  >>> isPrime(198)\n  false\n  >>> isPrime(199)\n  false\n  >>> isPrime(200)\n  false\n  >>> isPrime(201)\n  false\n  >>> isPrime(202)\n  false\n  >>> isPrime(203)\n  false\n  >>> isPrime(204)\n  false\n  >>> isPrime(205)\n  false\n  >>> isPrime(206)\n  false\n  >>> isPrime(207)\n  false\n  >>> isPrime(208)\n  false\n  >>> isPrime(209)\n  false\n  >>> isPrime(210)\n  false\n  >>> isPrime(211)\n  false\n  >>> isPrime(212)\n  false\n  >>> isPrime(213)\n  false\n  >>> isPrime(214)\n  false\n  >>> isPrime(215)\n  false\n  >>> isPrime(216)\n  false\n  >>> isPrime(217)\n  false\n  >>> isPrime(218)\n  false\n  >>> isPrime(219)\n  false\n  >>> isPrime(220)\n  false\n  >>> isPrime(221)\n  false\n  >>> isPrime(222)\n  false\n  >>> isPrime(223)\n  false\n  >>> isPrime(224)\n  false\n  >>> isPrime(225)\n  false\n  >>> isPrime(226)\n  false\n  >>> isPrime(227)\n  false\n  >>> isPrime(228)\n  false\n  >>> isPrime(229)\n  false\n  >>> isPrime(230)\n  false\n  >>> isPrime(231)\n  false\n  >>> isPrime(232)\n  false\n  >>> isPrime(233)\n  false\n  >>> isPrime(234)\n  false\n  >>> isPrime(235)\n  false\n  >>> isPrime(236)\n  false\n  >>> isPrime(237)\n  false\n  >>> isPrime(238)\n  false\n  "}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\n\nconst findZero = (xs) => {\n  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n", "canonical_solution": "    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "partial": "/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    # print('@@this is the line to split##')\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "gc": "<|endoftext|>/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\n\nconst findZero = (xs) => {\n  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) < 0) {\n      begin = center;\n      end = center;\n    } else {\n      begin = center;\n      end = center;\n    }\n  }\n  return begin;\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findNearest find x such that poly(x) = 1.\n  findNearest returns only nearest point, even if there are many.\n  Moreover, findNearest only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findNearest([1, 2]), 2) # f(x) = 1 + 2x\n  0.5\n  >>> round(findNearest([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\n\nconst findNearest = (xs) => {\n  var begin = 0.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) < 0) {\n      begin = center;\n      end = center;\n    } else {\n      begin = center;\n      end = center;\n    }\n  }\n  return begin;\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findNearestNearest find x such that poly(x) = 1.\n  findNearestNearest returns only nearest point, even if there are many.\n  Moreover, findNearestNearest only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findNearestNearest([1, 2]), 2) # f(x) = 1 + 2x\n  0.5\n  >>> round(findNearestNearest([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\n\nconst findNearestNearest = (xs) => {\n  var begin = 0.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) < 0) {\n      begin = center;\n      end = center;\n    } else {\n      begin = center;\n      end = center;\n    }\n  }\n  return begin;\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findNearestNearestNearest find x such that poly(x) = 1.\n  findNearestNearestNearest returns only nearest point, even if there are many.\n  Moreover, findNearestNearestNearest only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findNearestNearestNearest([1, 2]), 2) # f(x) = 1 + 2x\n  0.5\n  >>> round(findNearestNearestNearest([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\n\nconst findNearestNearestNearest = (xs) => {\n  var begin = 0.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) < 0) {\n      begin = center;\n      end = center;\n    } else {\n      begin = center;\n      end = center;\n    }\n  }\n  return begin;\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findNearestNearestNearest find x such that poly(x) = 1.\n  findNearestNearestNearest returns only nearest point, even if there are many.\n  Moreover, findNearestNearestNearest only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findNearestNearestNearestNearest([1, 2]), 2) # f(x) = 1 + 2x\n  0.5\n  >>> round(findNearestNearestNearestNearest([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\n\nconst findNearestNearestNearestNearest = (xs) => {\n  var begin = 0.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) < 0) {\n      begin = center;\n      end = center;\n    } else {\n      begin = center;\n      end = center;\n    }\n  }\n  return begin;\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findNearestNearestNearestNearest find x such that poly(x) = 1.\n  findNearestNearestNearestNearest returns only nearest point, even if there are many.\n  Moreover, findNearestNearestNearestNearest only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findNearestNearestNearestNearestNearest([1, 2]), 2) # f(x) = 1 + 2x\n  0.5\n  >>> round(findNearestNearestNearestNearestNearest([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\n\nconst findNea"}
{"task_id": "JavaScript/33", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\n\nconst sortThird = (l) => {\n  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n", "canonical_solution": "  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "partial": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  # print('@@this is the line to split##')\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "gc": "<|endoftext|>/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\n\nconst sortThird = (l) => {\n  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return three;\n};\n\n/*\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, "}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\n\nconst unique = (l) => {\n  return Array.from(new Set(l)).sort((a, b) => (a - b));\n", "canonical_solution": "}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "partial": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  return Array.from(new Set(l)).sort((a, b) => (a - b));\n  # print('@@this is the line to split##')\n}\n\n", "gc": "<|endoftext|>/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\n\nconst unique = (l) => {\n  return Array.from(new Set(l)).sort((a, b) => (a - b));\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\n\nconst unique = (l) => {\n  return Array.from(new Set(l)).sort((a, b) => (a - b));\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\n\nconst unique = (l) => {\n  return Array.from(new Set(l)).sort((a, b) => (a - b));\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\n\nconst unique = (l) => {\n  return Array.from(new Set(l)).sort((a, b) => (a - b));\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\n\nconst unique = (l) => {\n  return Array.from(new Set(l)).sort((a, b) => (a - b));\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\n\nconst unique = (l) => {\n  return Array.from(new Set(l)).sort((a, b) => (a - b));\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\n\nconst unique = (l) => {\n  return Array.from(new Set(l)).sort((a, b) => (a - b));\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\n\nconst unique = (l) => {\n  return Array.from(new Set(l)).sort((a, b) => (a - b));\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\n\nconst unique = (l) => {\n  return Array.from(new Set(l)).sort((a, b) => (a - b));\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\n\nconst unique = (l) => {\n  return Array.from(new Set(l)).sort((a, b) => (a - b));\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\n\nconst unique = (l) => {\n  return Array.from(new Set(l)).sort((a, b) => (a - b));\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\n\nconst unique = (l) => {\n  return Array.from(new Set(l)).sort((a, b) => (a - b));\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\n\nconst unique = (l) => {\n  return Array.from(new Set(l)).sort((a, b) => (a - b));\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\n\nconst unique = (l) => {\n  return Array.from(new Set(l)).sort((a, b) => (a - b));\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\n\nconst unique = (l) => {\n  return Array.from(new Set(l)).sort((a, b) => (a - b));\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\n\nconst unique = (l) => {\n  return Array.from(new Set(l)).sort((a, b) => (a - b));\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\n\nconst unique = (l) => {\n  return Array.from(new Set(l)).sort((a, b) => (a - b));\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\n\nconst unique = (l) => {\n  return Array.from(new Set(l)).sort((a, b) => (a - b));\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\n\nconst unique = (l) => {\n  return Array.from(new Set(l)).sort((a, b) => (a - b));\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\n\nconst unique = (l) => {\n  return Array.from(new Set(l)).sort((a, b) => (a - b));\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\n\nconst unique = (l) => {\n  return Array.from(new Set(l)).sort((a, b) => (a - b));\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\n\nconst unique = (l) => {\n  return Array.from(new Set(l)).sort((a, b) => (a - b));\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\n\nconst unique = (l) => {\n  return Array.from(new Set(l)).sort((a, b) => (a - b));\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\n\nconst unique = (l) => {\n  return Array.from(new Set(l)).sort((a, b) => (a - b));\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\n\nconst unique = (l) => {\n  return Array.from(new Set(l)).sort((a, b) => (a - b));\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\n\nconst unique = (l) => {\n  return Array.from(new Set(l)).sort((a, b) => (a - b));\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\n\nconst unique = (l) => {\n  return Array.from(new Set(l)).sort((a, b) => (a - b));\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\n\nconst unique = (l) => {\n  return Array.from(new Set(l)).sort((a, b) => (a - "}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\n\nconst maxElement = (l) => {\n  return Math.max(...l);\n", "canonical_solution": "}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "partial": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  return Math.max(...l);\n  # print('@@this is the line to split##')\n}\n\n", "gc": "<|endoftext|>/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\n\nconst maxElement = (l) => {\n  return Math.max(...l);\n};\n\n/*Return minimum element in the list.\n  >>> minElement([1, 2, 3])\n  1\n  >>> minElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -5\n  */\n\nconst minElement = (l) => {\n  return Math.min(...l);\n};\n\n/*Return element at specified index.\n  >>> elementAt([1, 2, 3], 1)\n  1\n  >>> elementAt([1, 2, 3], 2)\n  2\n  >>> elementAt([1, 2, 3], 3)\n  undefined\n  */\n\nconst elementAt = (l, i) => {\n  return l[i];\n};\n\n/*Return element at specified index.\n  >>> elementAt([1, 2, 3], 1)\n  1\n  >>> elementAt([1, 2, 3], 2)\n  2\n  >>> elementAt([1, 2, 3], 3)\n  undefined\n  */\n\nconst elementAtOrElse = (l, i, defaultValue) => {\n  return l[i] || defaultValue;\n};\n\n/*Return element at specified index.\n  >>> elementAt([1, 2, 3], 1)\n  1\n  >>> elementAt([1, 2, 3], 2)\n  2\n  >>> elementAt([1, 2, 3], 3)\n  undefined\n  */\n\nconst elementAtOrElseIf = (l, i, defaultValue) => {\n  return l[i] === undefined? defaultValue : l[i];\n};\n\n/*Return element at specified index.\n  >>> elementAt([1, 2, 3], 1)\n  1\n  >>> elementAt([1, 2, 3], 2)\n  2\n  >>> elementAt([1, 2, 3], 3)\n  undefined\n  */\n\nconst elementAtOrElseIfNot = (l, i, defaultValue) => {\n  return l[i] === undefined? defaultValue : l[i];\n};\n\n/*Return element at specified index.\n  >>> elementAt([1, 2, 3], 1)\n  1\n  >>> elementAt([1, 2, 3], 2)\n  2\n  >>> elementAt([1, 2, 3], 3)\n  undefined\n  */\n\nconst elementAtOrElseIfNotNull = (l, i, defaultValue) => {\n  return l[i] === undefined? defaultValue : l[i];\n};\n\n/*Return element at specified index.\n  >>> elementAt([1, 2, 3], 1)\n  1\n  >>> elementAt([1, 2, 3], 2)\n  2\n  >>> elementAt([1, 2, 3], 3)\n  undefined\n  */\n\nconst elementAtOrElseIfNull = (l, i, defaultValue) => {\n  return l[i] === undefined? defaultValue : l[i];\n};\n\n/*Return element at specified index.\n  >>> elementAt([1, 2, 3], 1)\n  1\n  >>> elementAt([1, 2, 3], 2)\n  2\n  >>> elementAt([1, 2, 3], 3)\n  undefined\n  */\n\nconst elementAtOrElseIfNotNullOrElse = (l, i, defaultValue) => {\n  return l[i] === undefined? defaultValue : l[i];\n};\n\n/*Return element at specified index.\n  >>> elementAt([1, 2, 3], 1)\n  1\n  >>> elementAt([1, 2, 3], 2)\n  2\n  >>> elementAt([1, 2, 3], 3)\n  undefined\n  */\n\nconst elementAtOrElseIfNullOrElse = (l, i, defaultValue) => {\n  return l[i] === undefined? defaultValue : l[i];\n};\n\n/*Return element at specified index.\n  >>> elementAt([1, 2, 3], 1)\n  1\n  >>> elementAt([1, 2, 3], 2)\n  2\n  >>> elementAt([1, 2, 3], 3)\n  undefined\n  */\n\nconst elementAtOrElseIfNotNullOrElseIf = (l, i, defaultValue) => {\n  return l[i] === undefined? defaultValue : l[i];\n};\n\n/*Return element at specified index.\n  >>> elementAt([1, 2, 3], 1)\n  1\n  >>> elementAt([1, 2, 3], 2)\n  2\n  >>> elementAt([1, 2, 3], 3)\n  undefined\n  */\n\nconst elementAtOrElseIfNullOrElseIf = (l, i, defaultValue) => {\n  return l[i] === undefined? defaultValue : l[i];\n};\n\n/*Return element at specified index.\n  >>> elementAt([1, 2, 3], 1)\n  1\n  >>> elementAt([1, 2, 3], 2)\n  2\n  >>> elementAt([1, 2, 3], 3)\n  undefined\n  */\n\nconst elementAtOrElseIfNullOrElseIfNot = (l, i, defaultValue) => {\n  return l[i] === undefined? defaultValue : l[i];\n};\n\n/*Return element at specified index.\n  >>> elementAt([1, 2, 3], 1)\n  1\n  >>> elementAt([1, 2, 3], 2)\n  2\n  >>> elementAt([1, 2, 3], 3)\n  undefined\n  */\n\nconst elementAtOrElseIfNullOrElseIfNotNull = (l, i, defaultValue) => {\n  return l[i] === undefined? defaultValue : l[i];\n};\n\n/*Return element at specified index.\n  >>> elementAt([1, 2, 3], 1)\n  1\n  >>> elementAt([1, 2, 3], 2)\n  2\n  >>> elementAt([1, 2, 3], 3)\n  undefined\n  */\n\nconst elementAtOrElseIfNullOrElseIfNotNullOrElse = (l, i, defaultValue) => {\n  return l[i] === undefined? defaultValue : l[i];\n};\n\n/*Return element at specified index.\n  >>> elementAt([1, 2, 3], 1)\n  1\n  >>> elementAt([1, 2, 3], 2)\n  2\n  >>> elementAt([1, 2, 3], 3)\n  undefined\n  */\n\nconst elementAtOrElseIfNullOrElseIfNotNullOrElseIf = (l, i, defaultValue) => {\n  return l[i] === undefined? defaultValue : l[i];\n};\n\n/*Return element at specified index.\n  >>> elementAt([1, 2, 3], 1)\n  1\n  >>> elementAt([1, 2, 3], 2)\n  2\n  >>> elementAt([1, 2, 3], 3)\n  undefined\n  */\n\nconst elementAtOrElseIfNullOrElseIfNotNullOrElseIfNot = (l, i, defaultValue) => {\n  return l[i] === undefined? defaultValue : l[i];\n};\n\n/*Return element at specified index.\n  >>> elementAt([1, 2, 3], 1)\n  1\n  >>> elementAt([1, 2, 3], 2)\n  2\n  >>> elementAt([1, 2, 3], 3)\n  undefined\n  */\n\nconst elementAtOrElseIfNullOrElseIfNotNullOrElseIfNotNull = (l, i, defaultValue) => {\n  return l[i] === undefined? defaultValue : l[i];\n};\n\n/*Return element at specified index.\n  >>> elementAt([1, 2, 3], 1)\n  1\n  >>> elementAt([1, 2, 3], 2)\n  2\n  >>> elementAt([1, 2, 3], 3)\n  undefined\n  */\n\nconst elementAtOrElseIfNullOrElseIfNotNullOrElseIfNotNullOrElseIfNotNull = (l, i, defaultValue) => {\n  return l[i] === undefined? defaultValue : l[i];\n};\n\n/*Return element at specified index.\n  >>> elementAt([1, 2, 3], 1)\n  1\n  >>> elementAt([1, 2, 3], 2)\n  2\n  >>> elementAt([1, 2, 3], 3)\n  undefined\n  */\n\nconst elementAtOrElseIfNullOrElseIfNotNullOrElseIfNotNullOrElseIfNotNullOrElseIfNotNull = (l, i, defaultValue) => {\n  return l[i] === undefined? defaultValue : l[i];\n};\n\n/*Return element at specified index.\n  >>> elementAt([1, 2, 3], 1)\n  1\n  >>> elementAt([1, 2, 3], 2)\n  2\n  >>> elementAt([1, 2, 3], 3)\n  undefined\n  */\n\nconst elementAtOrElseIfNullOrElseIfNotNullOrElseIfNotNullOrElseIfNotNullOrElseIfNotNullOrElseIfNotNull = (l, i, defaultValue) => {\n  return l[i] === undefined? defaultValue : l[i];\n};\n\n/*Return element at specified index.\n  >>> elementAt([1, 2, 3], 1)\n  1"}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\n\nconst fizzBuzz = (n) => {\n  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n", "canonical_solution": "  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "partial": "/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n      # print('@@this is the line to split##')\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "gc": "<|endoftext|>/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\n\nconst fizzBuzz = (n) => {\n  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  for (let i = 0; i < ns.length; i++) {\n    if (ns[i] % 3 == 0)\n      ans++;\n  }\n  return ans;\n};\n\n/*\n  Return the number of times the digit 1 appears in integers less than n which are divisible by 2 or 3.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\n\nconst fizzBuzz = (n) => {\n  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 2 == 0 || i % 3 == 0)\n      ns.push(i);\n  for (let i = 0; i < ns.length; i++) {\n    if (ns[i] % 2 == 0)\n      ans++;\n  }\n  return ans;\n};\n\n/*\n  Return the number of times the digit 2 appears in integers less than n which are divisible by 2 or 3.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\n\nconst fizzBuzz = (n) => {\n  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 2 == 0 || i % 3 == 0)\n      ns.push(i);\n  for (let i = 0; i < ns.length; i++) {\n    if (ns[i] % 2 == 0)\n      ans++;\n  }\n  return ans;\n};\n\n/*\n  Return the number of times the digit 3 appears in integers less than n which are divisible by 2 or 3.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\n\nconst fizzBuzz = (n) => {\n  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 2 == 0 || i % 3 == 0)\n      ns.push(i);\n  for (let i = 0; i < ns.length; i++) {\n    if (ns[i] % 3 == 0)\n      ans++;\n  }\n  return ans;\n};\n\n/*\n  Return the number of times the digit 4 appears in integers less than n which are divisible by 2 or 3.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\n\nconst fizzBuzz = (n) => {\n  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 2 == 0 || i % 3 == 0)\n      ns.push(i);\n  for (let i = 0; i < ns.length; i++) {\n    if (ns[i] % 2 == 0)\n      ans++;\n  }\n  return ans;\n};\n\n/*\n  Return the number of times the digit 5 appears in integers less than n which are divisible by 2 or 3.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\n\nconst fizzBuzz = (n) => {\n  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 2 == 0 || i % 3 == 0)\n      ns.push(i);\n  for (let i = 0; i < ns.length; i++) {\n    if (ns[i] % 3 == 0)\n      ans++;\n  }\n  return ans;\n};\n\n/*\n  Return the number of times the digit 6 appears in integers less than n which are divisible by 2 or 3.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\n\nconst fizzBuzz = (n) => {\n  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 2 == 0 || i % 3 == 0)\n      ns.push(i);\n  for (let i = 0; i < ns.length; i++) {\n    if (ns[i] % 3 == 0)\n      ans++;\n  }\n  return ans;\n};\n\n/*\n  Return the number of times the digit 7 appears in integers less than n which are divisible by 2 or 3.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\n\nconst fizzBuzz = (n) => {\n  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 2 == 0 || i % 3 == 0)\n      ns.push(i);\n  for (let i = 0; i < ns.length; i++) {\n    if (ns[i] % 3 == 0)\n      ans++;\n  }\n  return ans;\n};\n\n/*\n  Return the number of times the digit 1 appears in integers less than n which are divisible by 2 or 3.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\n\nconst fizzBuzz = (n) => {\n  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 2 == 0 || i % 3 == 0)\n      ns.push(i);\n  for (let i = 0; i < ns.length; i++) {\n    if (ns[i] % 2 == 0)\n      ans++;\n  }\n  return ans;\n};\n\n/*\n  Return the number of times the digit 2 appears in integers less than n which are divisible by 2 or 3.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\n\nconst fizzBuzz = (n) => {\n  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 2 == 0 || i % 3 == 0)\n      ns.push(i);\n  for (let i = 0; i < ns.length; i++) {\n    if (ns[i] % 3 == 0)\n      ans++;\n  }\n  return ans;\n};\n\n/*\n  Return the number of times the digit 3 appears in integers less than n which are divisible by 2 or 3.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\n\nconst fizzBuzz = (n) => {\n  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 2 == 0 || i % 3 == 0)\n      ns.push(i);\n  for (let i = 0; i < ns.length; i++) {\n    if (ns[i] % 3 == 0)\n      ans++;\n  }\n  return ans;\n};\n\n/*\n  Return the number of times the digit 4 appears in integers less than n which are divisible by 2 or 3.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\n\nconst fizzBuzz = (n) => {\n  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 2 == 0 || i % 3 == 0)\n      ns.push(i);\n  for (let i = 0; i < ns.length; i++) {\n    if (ns[i] % 3 == 0)\n      ans++;\n  }\n  return ans;\n};\n\n/*\n  Return the number of times the digit 5 appears in integers less than n which are divisible by 2 or 3.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\n\nconst fizzBuzz = (n) => {\n  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)"}
{"task_id": "JavaScript/37", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\n\nconst sortEven = (l) => {\n  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n", "canonical_solution": "  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "partial": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  # print('@@this is the line to split##')\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "gc": "<|endoftext|>/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\n\nconst sortEven = (l) => {\n  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return even;\n};\n\nmodule.exports = sortEven;\n\n},{}],9:[function(require,module,exports){\n'use strict';\n\nconst sortEven = require('./sortEven');\n\nconst sortOdd = (l) => {\n  var odd = l.filter((item, index) => index % 2!= 0);\n  odd.sort((a, b) => (b - a));\n  return odd;\n};\n\nmodule.exports = sortOdd;\n\n},{\"./sortEven\":8}],10:[function(require,module,exports){\n'use strict';\n\nconst sortEven = require('./sortEven');\n\nconst sortOddEven = (l) => {\n  var even = sortEven(l);\n  var odd = sortEven(l.filter((item, index) => index % 2!= 0));\n  return even.concat(odd);\n};\n\nmodule.exports = sortOddEven;\n\n},{\"./sortEven\":8}],11:[function(require,module,exports){\n'use strict';\n\nconst sortEven = require('./sortEven');\n\nconst sortOddEven = (l) => {\n  var even = sortEven(l);\n  var odd = sortEven(l.filter((item, index) => index % 2 == 0));\n  return even.concat(odd);\n};\n\nmodule.exports = sortOddEven;\n\n},{\"./sortEven\":8}],12:[function(require,module,exports){\n'use strict';\n\nconst sortEven = require('./sortEven');\n\nconst sortOddEven = (l) => {\n  var even = sortEven(l);\n  var odd = sortEven(l.filter((item, index) => index % 2 == 1));\n  return even.concat(odd);\n};\n\nmodule.exports = sortOddEven;\n\n},{\"./sortEven\":8}],13:[function(require,module,exports){\n'use strict';\n\nconst sortEven = require('./sortEven');\n\nconst sortOddEven = (l) => {\n  var even = sortEven(l);\n  var odd = sortEven(l.filter((item, index) => index % 2 == 0));\n  return even.concat(odd);\n};\n\nmodule.exports = sortOddEven;\n\n},{\"./sortEven\":8}],14:[function(require,module,exports){\n'use strict';\n\nconst sortEven = require('./sortEven');\n\nconst sortOddEven = (l) => {\n  var even = sortEven(l);\n  var odd = sortEven(l.filter((item, index) => index % 2 == 1));\n  return even.concat(odd);\n};\n\nmodule.exports = sortOddEven;\n\n},{\"./sortEven\":8}],15:[function(require,module,exports){\n'use strict';\n\nconst sortEven = require('./sortEven');\n\nconst sortOddEven = (l) => {\n  var even = sortEven(l);\n  var odd = sortEven(l.filter((item, index) => index % 2 == 0));\n  return even.concat(odd);\n};\n\nmodule.exports = sortOddEven;\n\n},{\"./sortEven\":8}],16:[function(require,module,exports){\n'use strict';\n\nconst sortEven = require('./sortEven');\n\nconst sortOddEven = (l) => {\n  var even = sortEven(l);\n  var odd = sortEven(l.filter((item, index) => index % 2 == 1));\n  return even.concat(odd);\n};\n\nmodule.exports = sortOddEven;\n\n},{\"./sortEven\":8}],17:[function(require,module,exports){\n'use strict';\n\nconst sortEven = require('./sortEven');\n\nconst sortOddEven = (l) => {\n  var even = sortEven(l);\n  var odd = sortEven(l.filter((item, index) => index % 2 == 0));\n  return even.concat(odd);\n};\n\nmodule.exports = sortOddEven;\n\n},{\"./sortEven\":8}],18:[function(require,module,exports){\n'use strict';\n\nconst sortEven = require('./sortEven');\n\nconst sortOddEven = (l) => {\n  var even = sortEven(l);\n  var odd = sortEven(l.filter((item, index) => index % 2 == 1));\n  return even.concat(odd);\n};\n\nmodule.exports = sortOddEven;\n\n},{\"./sortEven\":8}],19:[function(require,module,exports){\n'use strict';\n\nconst sortEven = require('./sortEven');\n\nconst sortOddEven = (l) => {\n  var even = sortEven(l);\n  var odd = sortEven(l.filter((item, index) => index % 2 == 0));\n  return even.concat(odd);\n};\n\nmodule.exports = sortOddEven;\n\n},{\"./sortEven\":8}],20:[function(require,module,exports){\n'use strict';\n\nconst sortEven = require('./sortEven');\n\nconst sortOddEven = (l) => {\n  var even = sortEven(l);\n  var odd = sortEven(l.filter((item, index) => index % 2 == 1));\n  return even.concat(odd);\n};\n\nmodule.exports = sortOddEven;\n\n},{\"./sortEven\":8}],21:[function(require,module,exports){\n'use strict';\n\nconst sortEven = require('./sortEven');\n\nconst sortOddEven = (l) => {\n  var even = sortEven(l);\n  var odd = sortEven(l.filter((item, index) => index % 2 == 0));\n  return even.concat(odd);\n};\n\nmodule.exports = sortOddEven;\n\n},{\"./sortEven\":8}],22:[function(require,module,exports){\n'use strict';\n\nconst sortEven = require('./sortEven');\n\nconst sortOddEven = (l) => {\n  var even = sortEven(l);\n  var odd = sortEven(l.filter((item, index) => index % 2 == 1));\n  return even.concat(odd);\n};\n\nmodule.exports = sortOddEven;\n\n},{\"./sortEven\":8}],23:[function(require,module,exports){\n'use strict';\n\nconst sortEven = require('./sortEven');\n\nconst sortOddEven = (l) => {\n  var even = sortEven(l);\n  var odd = sortEven(l.filter((item, index) => index % 2 == 0));\n  return even.concat(odd);\n};\n\nmodule.exports = sortOddEven;\n\n},{\"./sortEven\":8}],24:[function(require,module,exports){\n'use strict';\n\nconst sortEven = require('./sortEven');\n\nconst sortOddEven = (l) => {\n  var even = sortEven(l);\n  var odd = sortEven(l.filter((item, index) => index % 2 == 1));\n  return even.concat(odd);\n};\n\nmodule.exports = sortOddEven;\n\n},{\"./sortEven\":8}],25:[function(require,module,exports){\n'use strict';\n\nconst sortEven = require('./sortEven');\n\nconst sortOddEven = (l) => {\n  var even = sortEven(l);\n  var odd = sortEven(l.filter((item, index) => index % 2 == 0));\n  return even.concat(odd);\n};\n\nmodule.exports = sortOddEven;\n\n},{\"./sortEven\":8}],26:[function(require,module,exports){\n'use strict';\n\nconst sortEven = require('./sortEven');\n\nconst sortOddEven = (l) => {\n  var even = sortEven(l);\n  var odd = sortEven(l.filter((item, index) => index % 2 == 1));\n  return even.concat(odd);\n};\n\nmodule.exports = sortOddEven;\n\n},{\"./sortEven\":8}],27:[function(require,module,exports){\n'use strict';"}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\n\nconst decodeCyclic = (s) => {\n  return encodeCyclic(encodeCyclic(s));\n", "canonical_solution": "}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "partial": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n  return encodeCyclic(encodeCyclic(s));\n  # print('@@this is the line to split##')\n}\n\n", "gc": "<|endoftext|>/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\n\nconst decodeCyclic = (s) => {\n  return encodeCyclic(encodeCyclic(s));\n}\n\n/*\n  returns true if string contains only digits. Returns false otherwise.\n  */\nconst isDigit = (s) => {\n  return s.match(/^[0-9]$/);\n}\n\n/*\n  returns true if string contains only letters. Returns false otherwise.\n  */\nconst isLetter = (s) => {\n  return s.match(/^[a-zA-Z]$/);\n}\n\n/*\n  returns true if string contains only letters and digits. Returns false otherwise.\n  */\nconst isAlphaNumeric = (s) => {\n  return isLetter(s) && isDigit(s);\n}\n\n/*\n  returns true if string contains only letters and digits. Returns false otherwise.\n  */\nconst isAlphaNumericOnly = (s) => {\n  return isAlphaNumeric(s) && isLetter(s);\n}\n\n/*\n  returns true if string contains only letters and digits. Returns false otherwise.\n  */\nconst isAlphaNumericOnlyAndDigits = (s) => {\n  return isAlphaNumeric(s) && isDigit(s);\n}\n\n/*\n  returns true if string contains only letters and digits. Returns false otherwise.\n  */\nconst isAlphaNumericOnlyAndLetters = (s) => {\n  return isAlphaNumeric(s) && isLetter(s);\n}\n\n/*\n  returns true if string contains only letters and digits. Returns false otherwise.\n  */\nconst isAlphaNumericOnlyAndLettersAndDigits = (s) => {\n  return isAlphaNumeric(s) && isLetter(s) && isDigit(s);\n}\n\n/*\n  returns true if string contains only letters and digits. Returns false otherwise.\n  */\nconst isAlphaNumericOnlyAndLettersAndDigitsAndLetters = (s) => {\n  return isAlphaNumeric(s) && isLetter(s) && isDigit(s);\n}\n\n/*\n  returns true if string contains only letters and digits. Returns false otherwise.\n  */\nconst isAlphaNumericOnlyAndLettersAndDigitsAndLettersAndDigits = (s) => {\n  return isAlphaNumeric(s) && isLetter(s) && isDigit(s);\n}\n\n/*\n  returns true if string contains only letters and digits. Returns false otherwise.\n  */\nconst isAlphaNumericOnlyAndLettersAndDigitsAndLettersAndDigitsAndLetters = (s) => {\n  return isAlphaNumeric(s) && isLetter(s) && isDigit(s);\n}\n\n/*\n  returns true if string contains only letters and digits. Returns false otherwise.\n  */\nconst isAlphaNumericOnlyAndLettersAndDigitsAndLettersAndDigitsAndLettersAndDigits = (s) => {\n  return isAlphaNumeric(s) && isLetter(s) && isDigit(s);\n}\n\n/*\n  returns true if string contains only letters and digits. Returns false otherwise.\n  */\nconst isAlphaNumericOnlyAndLettersAndDigitsAndLettersAndDigitsAndLettersAndDigitsAndLettersAndDigits = (s) => {\n  return isAlphaNumeric(s) && isLetter(s) && isDigit(s);\n}\n\n/*\n  returns true if string contains only letters and digits. Returns false otherwise.\n  */\nconst isAlphaNumericOnlyAndLettersAndDigitsAndLettersAndDigitsAndLettersAndDigitsAndLettersAndDigitsAndLettersAndDigits = (s) => {\n  return isAlphaNumeric(s) && isLetter(s) && isDigit(s);\n}\n\n/*\n  returns true if string contains only letters and digits. Returns false otherwise.\n  */\nconst isAlphaNumericOnlyAndLettersAndDigitsAndLettersAndDigitsAndLettersAndDigitsAndLettersAndDigitsAndLettersAndDigitsAndLettersAndDigits = (s) => {\n  return isAlphaNumeric(s) && isLetter(s) && isDigit(s);\n}\n\n/*\n  returns true if string contains only letters and digits. Returns false otherwise.\n  */\nconst isAlphaNumericOnlyAndLettersAndDigitsAndLettersAndDigitsAndLettersAndDigitsAndLettersAndDigitsAndLettersAndDigitsAndLettersAndDigitsAndLettersAndDigits = (s) => {\n  return isAlphaNumeric(s) && isLetter(s) && isDigit(s);\n}\n\n/*\n  returns true if string contains only letters and digits. Returns false otherwise.\n  */\nconst isAlphaNumericOnlyAndLettersAndDigitsAndLettersAndDigitsAndLettersAndDigitsAndLettersAndDigitsAndLettersAndDigitsAndLettersAndDigitsAndLettersAndDigitsAndLettersAndDigits = (s) => {\n  return isAlphaNumeric(s) && isLetter(s) && isDigit(s);\n}\n\n/*\n  returns true if string contains only letters and digits. Returns false otherwise.\n  */\nconst isAlphaNumericOnlyAndLettersAndDigitsAndLettersAndDigitsAndLettersAndDigitsAndLettersAndDigitsAndLettersAndDigitsAndLettersAndDigitsAndLettersAndDigitsAndLettersAndDigitsAndLettersAndDigits = (s) => {\n  return isAlphaNumeric(s) && isLetter(s) && isDigit(s);\n}\n\n/*\n  returns true if string contains only letters and digits. Returns false otherwise.\n  */\nconst isAlphaNumericOnlyAndLettersAndDigitsAndLettersAndDigitsAndLettersAndDigitsAndLettersAndDigitsAndLettersAndDigitsAndLettersAndDigitsAndLettersAndDigitsAndLettersAndDigitsAndLettersAndDigitsAndLettersAndDigitsAndLettersAndDigitsAndLettersAndDigits = (s) => {\n  return isAlphaNumeric(s) && isLetter(s) && isDigit(s);\n}\n\n/*\n  returns true if string contains only letters and digits. Returns false otherwise.\n  */\nconst isAlphaNumericOnlyAndLettersAndDigitsAndLettersAndDigitsAndLettersAndDigitsAndLettersAndDigitsAndLettersAndDigitsAndLettersAndDigitsAndLettersAndDigitsAndLettersAndDigitsAndLettersAndDigitsAndLettersAndDigitsAndLettersAndDigitsAndLettersAndDigitsAndLettersAndLettersAndDigitsAndLettersAndLettersAndDigitsAndLettersAndLettersAndDigitsAndLettersAndLettersAndDigitsAndLettersAndLettersAndDigitsAndLettersAndLettersAndDigitsAndLettersAndLettersAndDigitsAndLettersAndLettersAndLettersAndDigitsAndLettersAndLettersAndLettersAndDigitsAndLettersAndLettersAndDigitsAndLettersAndLettersAndLettersAndDigitsAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLetter"}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\n\nconst primeFib = (n) => {\n  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n", "canonical_solution": "\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "partial": "/*\n  primeFib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n  # print('@@this is the line to split##')\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "gc": "<|endoftext|>/*\n  primeFib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\n\nconst primeFib = (n) => {\n  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n  var primes = [];\n  for (var i = 3; i <= n; i++) {\n    if (isPrime(i)) {\n      primes.push(i);\n    }\n  }\n  return primes[primes.length - 1];\n}\n\n/*\n  primes returns all prime numbers between 1 and n.\n  >>> primes(5)\n  [2, 3, 5, 7]\n  >>> primes(10)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]\n  */\n\nconst primes = (n) => {\n  var primes = [];\n  for (var i = 3; i <= n; i++) {\n    if (n % i == 0) {\n      primes.push(i);\n    }\n  }\n  return primes;\n}\n\n/*\n  primes2 returns all prime numbers between 1 and n that are divisible by k.\n  >>> primes2(5, 2)\n  [2, 3, 5, 7]\n  >>> primes2(10, 2)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]\n  */\n\nconst primes2 = (n, k) => {\n  var primes = [];\n  for (var i = 3; i <= n; i++) {\n    if (n % i == 0) {\n      if (k <= i) {\n        primes.push(i);\n      }\n    }\n  }\n  return primes;\n}\n\n/*\n  primes3 returns all prime numbers between 1 and n that are divisible by k and are also prime numbers.\n  >>> primes3(5, 2, 2)\n  [2, 3, 5, 7]\n  >>> primes3(10, 2, 2)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]\n  */\n\nconst primes3 = (n, k, k2) => {\n  var primes = [];\n  for (var i = 3; i <= n; i++) {\n    if (n % i == 0) {\n      if (k <= i && k <= k2) {\n        primes.push(i);\n      }\n    }\n  }\n  return primes;\n}\n\n/*\n  primes4 returns all prime numbers between 1 and n that are divisible by k and are also prime numbers and are also divisible by k.\n  >>> primes4(5, 2, 2)\n  [2, 3, 5, 7]\n  >>> primes4(10, 2, 2)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, "}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\n\nconst triplesSumToZero = (l) => {\n  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n", "canonical_solution": "        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "partial": "/*\n  triplesSumToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        # print('@@this is the line to split##')\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "gc": "<|endoftext|>/*\n  triplesSumToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\n\nconst triplesSumToZero = (l) => {\n  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] === 0)\n          return true;\n  return false;\n};\n\nmodule.exports = triplesSumToZero;\n\n},{}],9:[function(require,module,exports){\nconst { isInteger } = require('./utils');\n\nconst isNegativeZero = (n) => {\n  if (isInteger(n) && n < 0)\n    return false;\n  return true;\n};\n\nconst isPositiveZero = (n) => {\n  if (isInteger(n) && n > 0)\n    return false;\n  return true;\n};\n\nconst isZero = (n) => {\n  if (isInteger(n) && n === 0)\n    return true;\n  return false;\n};\n\nconst isNegativeOne = (n) => {\n  if (isInteger(n) && n < 1)\n    return false;\n  return true;\n};\n\nconst isPositiveOne = (n) => {\n  if (isInteger(n) && n > 1)\n    return false;\n  return true;\n};\n\nconst isOne = (n) => {\n  if (isInteger(n) && n === 1)\n    return true;\n  return false;\n};\n\nconst isNegativeOneOrZero = (n) => {\n  if (isInteger(n) && n < 1)\n    return false;\n  if (isZero(n))\n    return true;\n  return false;\n};\n\nconst isPositiveOneOrZero = (n) => {\n  if (isInteger(n) && n > 1)\n    return false;\n  if (isZero(n))\n    return true;\n  return false;\n};\n\nconst isOneOrZero = (n) => {\n  if (isInteger(n) && n === 1)\n    return true;\n  if (isZero(n))\n    return false;\n  return false;\n};\n\nconst isNegativeOneOrOne = (n) => {\n  if (isInteger(n) && n < 1)\n    return false;\n  if (isOne(n))\n    return true;\n  return false;\n};\n\nconst isPositiveOneOrOne = (n) => {\n  if (isInteger(n) && n > 1)\n    return false;\n  if (isOne(n))\n    return true;\n  return false;\n};\n\nconst isOneOrOne = (n) => {\n  if (isInteger(n) && n === 1)\n    return true;\n  if (isOne(n))\n    return false;\n  return false;\n};\n\nconst isNegativeOneOrNegativeOne = (n) => {\n  if (isInteger(n) && n < 1)\n    return false;\n  if (isNegativeOne(n))\n    return true;\n  return false;\n};\n\nconst isPositiveOneOrNegativeOne = (n) => {\n  if (isInteger(n) && n > 1)\n    return false;\n  if (isPositiveOne(n))\n    return true;\n  return false;\n};\n\nconst isNegativeOneOrPositiveOne = (n) => {\n  if (isInteger(n) && n < 1)\n    return false;\n  if (isPositiveOne(n))\n    return true;\n  return false;\n};\n\nconst isPositiveOneOrPositiveOne = (n) => {\n  if (isInteger(n) && n > 1)\n    return false;\n  if (isPositiveOne(n))\n    return true;\n  return false;\n};\n\nconst isOneOrNegativeOne = (n) => {\n  if (isInteger(n) && n < 1)\n    return false;\n  if (isOne(n))\n    return true;\n  return false;\n};\n\nconst isNegativeOneOrPositiveOneOrZero = (n) => {\n  if (isInteger(n) && n < 1)\n    return false;\n  if (isNegativeOne(n))\n    return true;\n  if (isPositiveZero(n))\n    return false;\n  return false;\n};\n\nconst isPositiveOneOrPositiveOneOrZero = (n) => {\n  if (isInteger(n) && n > 1)\n    return false;\n  if (isPositiveOne(n))\n    return true;\n  if (isZero(n))\n    return false;\n  return false;\n};\n\nconst isOneOrPositiveOneOrZero = (n) => {\n  if (isInteger(n) && n === 1)\n    return true;\n  if (isOne(n))\n    return false;\n  if (isZero(n))\n    return false;\n  return false;\n};\n\nconst isNegativeOneOrNegativeOneOrZero = (n) => {\n  if (isInteger(n) && n < 1)\n    return false;\n  if (isNegativeOne(n))\n    return true;\n  if (isPositiveZero(n))\n    return false;\n  return false;\n};\n\nconst isPositiveOneOrNegativeOneOrZero = (n) => {\n  if (isInteger(n) && n > 1)\n    return false;\n  if (isPositiveOne(n))\n    return true;\n  if (isZero(n))\n    return false;\n  return false;\n};\n\nconst isOneOrPositiveOneOrZero = (n) => {\n  if (isInteger(n) && n === 1)\n    return true;\n  if (isOne(n))\n    return false;\n  if (isZero(n))\n    return false;\n  return false;\n};\n\nconst isNegativeOneOrPositiveOneOrOne = (n) => {\n  if (isInteger(n) && n < 1)\n    return false;\n  if (isNegativeOne(n))\n    return true;\n  if (isPositiveOne(n))\n    return false;\n  return false;\n};\n\nconst isPositiveOneOrPositiveOneOrOne = (n) => {\n  if (isInteger(n) && n > 1)\n    return false;\n  if (isPositiveOne(n))\n    return true;\n  if (isOne(n))\n    return false;\n  return false;\n};\n\nconst isOneOrPositiveOneOrOne = (n) => {\n  if (isInteger(n) && n === 1)\n    return true;\n  if (isOne(n))\n    return false;\n  if (isZero(n))\n    return false;\n  return false;\n};\n\nconst isNegativeOneOrNegativeOneOrOne = (n) => {\n  if (isInteger(n) && n < 1)\n    return false;\n  if (isNegativeOne(n))\n    return true;\n  if (isPositiveOne(n))\n    return false;\n  return false;\n};\n\nconst isPositiveOneOrNegativeOneOrOne = (n) => {\n  if (isInteger(n) && n > 1)\n    return false;\n  if (isPositiveOne(n))\n    return true;\n  if (isOne(n))\n    return false;\n  return false;\n};\n\nconst isOneOrPositiveOneOrNegativeOneOrOne = (n) => {\n  if (isInteger(n) && n === 1)\n    return true;\n  if (isOne(n))\n    return false;\n  if (isZero(n))\n    return false;\n  return false;\n};\n\nconst isNegativeOneOrPositiveOneOrNegativeOneOrZero = (n) => {\n  if (isInteger(n) && n < 1)\n    return false;\n  if (isNegativeOne(n))\n    return true;\n  if (isPositiveZero(n))\n    return false;\n  return false;\n};\n\nconst isPositiveOneOrPositiveOneOrNegativeOneOrZero = (n) => {\n  if (isInteger(n) && n > 1)\n    return false;\n  if (isPositiveOne(n))\n    return true;\n  if (isZero(n))\n    return false;\n  return false;\n};\n\nconst isOneOrPositiveOneOrPositiveOneOrZero = (n) => {\n  if (isInteger(n) && n === 1)\n    return true;\n  if (isOne(n))\n    return false;\n  if (isZero(n))\n    return false;\n  return false;\n};\n\nconst isNegativeOneOrPositiveOneOrPositiveOneOrOne = (n) => {\n  if (isInteger(n) && n < 1)\n    return false;\n  if (isNegativeOne(n))\n    return true;\n  if (isPositiveOne(n))\n    return false;\n  return false;\n};\n\nconst isPositiveOneOrPositiveOneOrPositiveOneOrOne = (n) => {\n  if (isInteger(n) && n > 1)\n    return false;\n  if (isPositiveOne(n))\n    return true;\n  if (isOne(n))\n    return false;\n  return false;\n};\n\nconst isOneOrPositiveOneOrPositiveOneOrPositiveOneOrOne = (n) => {\n  if (isInteger(n) && n === 1)\n    return true;\n  if (isOne(n))\n    return false;\n  if (isZero(n))\n    return false;\n  return false;\n};\n\n"}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\n\nconst carRaceCollision = (n) => {\n  return Math.pow(n, 2);\n", "canonical_solution": "}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "partial": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carRaceCollision = (n) => {\n  return Math.pow(n, 2);\n  # print('@@this is the line to split##')\n}\n\n", "gc": "<|endoftext|>/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\n\nconst carRaceCollision = (n) => {\n  return Math.pow(n, 2);\n};\n\n/*\n  Given a road network, find all roads that collide with each other.\n  A road is considered colliding if two roads collide if they share a road.\n  A road is considered colliding if two roads collide if they share a road\n  and share a road.\n  A road is considered colliding if two roads collide if they share a road\n  and share a road.\n  A road is considered colliding if two roads collide if they share a road\n  and share a road.\n  A road is considered colliding if two roads collide if they share a road\n  and share a road.\n  A road is considered colliding if two roads collide if they share a road\n  and share a road.\n  A road is considered colliding if two roads collide if they share a road\n  and share a road.\n  A road is considered colliding if two roads collide if they share a road\n  and share a road.\n  A road is considered colliding if two roads collide if they share a road\n  and share a road.\n  A road is considered colliding if two roads collide if they share a road\n  and share a road.\n  A road is considered colliding if two roads collide if they share a road\n  and share a road.\n  A road is considered colliding if two roads collide if they share a road\n  and share a road.\n  A road is considered colliding if two roads collide if they share a road\n  and share a road.\n  A road is considered colliding if two roads collide if they share a road\n  and share a road.\n  A road is considered colliding if two roads collide if they share a road\n  and share a road.\n  A road is considered colliding if two roads collide if they share a road\n  and share a road.\n  A road is considered colliding if two roads collide if they share a road\n  and share a road.\n  A road is considered colliding if two roads collide if they share a road\n  and share a road.\n  A road is considered colliding if two roads collide if they share a road\n  and share a road.\n  A road is considered colliding if two roads collide if they share a road\n  and share a road.\n  A road is considered colliding if two roads collide if they share a road\n  and share a road.\n  A road is considered colliding if two roads collide if they share a road\n  and share a road.\n  A road is considered colliding if two roads collide if they share a road\n  and share a road.\n  A road is considered colliding if two roads collide if they share a road\n  and share a road.\n  A road is considered colliding if two roads collide if they share a road\n  and share a road.\n  A road is considered colliding if two roads collide if they share a road\n  and share a road.\n  A road is considered colliding if two roads collide if they share a road\n  and share a road.\n  A road is considered colliding if two roads collide if they share a road\n  and share a road.\n  A road is considered colliding if two roads collide if they share a road\n  and share a road.\n  A road is considered colliding if two roads collide if they share a road\n  and share a road.\n  A road is considered colliding if two roads collide if they share a road\n  and share a road.\n  A road is considered colliding if two roads collide if they share a road\n  and share a road.\n  A road is considered colliding if two roads collide if they share a road\n  and share a road.\n  A road is considered colliding if two roads collide if they share a road\n  and share a road.\n  A road is considered colliding if two roads collide if they share a road\n  and share a road.\n  A road is considered colliding if two roads collide if they share a road\n  and share a road.\n  A road is considered colliding if two roads collide if they share a road\n  and share a road.\n  A road is considered colliding if two roads collide if they share a road\n  and share a road.\n  A road is considered colliding if two roads collide if they share a road\n  and share a road.\n  A road is considered colliding if two roads collide if they share a road\n  and share a road.\n  A road is considered colliding if two roads collide if they share a road\n  and share a road.\n  A road is considered colliding if two roads collide if they share a road\n  and share a road.\n  A road is considered colliding if two roads collide if they share a road\n  and share a road.\n  A road is considered colliding if two roads collide if they share a road\n  and share a road.\n  A road is considered colliding if two roads collide if they share a road\n  and share a road.\n  A road is considered colliding if two roads collide if they share a road\n  and share a road.\n  A road is considered colliding if two roads collide if they share a road\n  and share a road.\n  A road is considered colliding if two roads collide if they share a road\n  and share a road.\n  A road is considered colliding if two roads collide if they share a road\n  and share a road.\n  A road is considered colliding if two roads collide if they share a road\n  and share a road.\n  A road is considered colliding if two roads collide if "}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\n\nconst incrList = (l) => {\n  return l.map(e => e + 1);\n", "canonical_solution": "}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "partial": "/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  return l.map(e => e + 1);\n  # print('@@this is the line to split##')\n}\n\n", "gc": "<|endoftext|>/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\n\nconst incrList = (l) => {\n  return l.map(e => e + 1);\n};\n\n/*Return list with elements decremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\n\nconst decrList = (l) => {\n  return l.map(e => e - 1);\n};\n\n/*Return list with elements incremented by 1.\n  >>> decrList([1, 2, 3])\n  [2, 3, 4]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\n\nconst decrList = (l) => {\n  return l.map(e => e - 1);\n};\n\n/*Return list with elements incremented by 1.\n  >>> decrList([1, 2, 3])\n  [2, 3, 4]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\n\nconst decrList = (l) => {\n  return l.map(e => e - 1);\n};\n\n/*Return list with elements incremented by 1.\n  >>> decrList([1, 2, 3])\n  [2, 3, 4]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\n\nconst decrList = (l) => {\n  return l.map(e => e - 1);\n};\n\n/*Return list with elements incremented by 1.\n  >>> decrList([1, 2, 3])\n  [2, 3, 4]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\n\nconst decrList = (l) => {\n  return l.map(e => e - 1);\n};\n\n/*Return list with elements incremented by 1.\n  >>> decrList([1, 2, 3])\n  [2, 3, 4]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\n\nconst decrList = (l) => {\n  return l.map(e => e - 1);\n};\n\n/*Return list with elements incremented by 1.\n  >>> decrList([1, 2, 3])\n  [2, 3, 4]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\n\nconst decrList = (l) => {\n  return l.map(e => e - 1);\n};\n\n/*Return list with elements incremented by 1.\n  >>> decrList([1, 2, 3])\n  [2, 3, 4]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\n\nconst decrList = (l) => {\n  return l.map(e => e - 1);\n};\n\n/*Return list with elements incremented by 1.\n  >>> decrList([1, 2, 3])\n  [2, 3, 4]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\n\nconst decrList = (l) => {\n  return l.map(e => e - 1);\n};\n\n/*Return list with elements incremented by 1.\n  >>> decrList([1, 2, 3])\n  [2, 3, 4]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\n\nconst decrList = (l) => {\n  return l.map(e => e - 1);\n};\n\n/*Return list with elements incremented by 1.\n  >>> decrList([1, 2, 3])\n  [2, 3, 4]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\n\nconst decrList = (l) => {\n  return l.map(e => e - 1);\n};\n\n/*Return list with elements incremented by 1.\n  >>> decrList([1, 2, 3])\n  [2, 3, 4]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\n\nconst decrList = (l) => {\n  return l.map(e => e - 1);\n};\n\n/*Return list with elements incremented by 1.\n  >>> decrList([1, 2, 3])\n  [2, 3, 4]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\n\nconst decrList = (l) => {\n  return l.map(e => e - 1);\n};\n\n/*Return list with elements incremented by 1.\n  >>> decrList([1, 2, 3])\n  [2, 3, 4]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\n\nconst decrList = (l) => {\n  return l.map(e => e - 1);\n};\n\n/*Return list with elements incremented by 1.\n  >>> decrList([1, 2, 3])\n  [2, 3, 4]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\n\nconst decrList = (l) => {\n  return l.map(e => e - 1);\n};\n\n/*Return list with elements incremented by 1.\n  >>> decrList([1, 2, 3])\n  [2, 3, 4]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\n\nconst decrList = (l) => {\n  return l.map(e => e - 1);\n};\n\n/*Return list with elements incremented by 1.\n  >>> decrList([1, 2, 3])\n  [2, 3, 4]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\n\nconst decrList = (l) => {\n  return l.map(e => e - 1);\n};\n\n/*Return list with elements incremented by 1.\n  >>> decrList([1, 2, 3])\n  [2, 3, 4]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\n\nconst decrList = (l) => {\n  return l.map(e => e - 1);\n};\n\n/*Return list with elements incremented by 1.\n  >>> decrList([1, 2, 3])\n  [2, 3, 4]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\n\nconst decrList = (l) => {\n  return l.map(e => e - 1);\n};\n\n/*Return list with elements incremented by 1.\n  >>> decrList([1, 2, 3])\n  [2, 3, 4]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\n\nconst decrList = (l) => {\n  return l.map(e => e - 1);\n};\n\n/*Return list with elements incremented by 1.\n  >>> decrList([1, 2, 3])\n  [2, 3, 4]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\n\nconst decrList = (l) => {\n  return l.map(e => e - 1);\n};\n\n/*Return list with elements incremented by 1.\n  >>> decrList([1, 2, 3])"}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairsSumToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\n\nconst pairsSumToZero = (l) => {\n  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n", "canonical_solution": "        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "partial": "/*\n  pairsSumToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        # print('@@this is the line to split##')\n        return true;\n  return false;\n}\n\n", "gc": "<|endoftext|>/*\n  pairsSumToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\n\nconst pairsSumToZero = (l) => {\n  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return false;\n  return true;\n};\n\n/*\n  pairsSumToOne takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to one, and false otherwise.\n  >>> pairsSumToOne([1, 3, 5, 0])\n  false\n  >>> pairsSumToOne([1, 3, -2, 1])\n  false\n  >>> pairsSumToOne([1, 2, 3, 7])\n  false\n  >>> pairsSumToOne([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToOne([1])\n  false\n  */\n\nconst pairsSumToOne = (l) => {\n  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 1)\n        return false;\n  return true;\n};\n\n/*\n  pairsDifference takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  differ only by one, and false otherwise.\n  >>> pairsDifference([3, 5, 1, 2])\n  true\n  >>> pairsDifference([3, 5, 1, -5, 2])\n  false\n  >>> pairsDifference([3, 5, 1, -5, -5, 2])\n  false\n  >>> pairsDifference([3, 5, 1, -5, -5, -5, 2])\n  false\n  >>> pairsDifference([1])\n  false\n  */\n\nconst pairsDifference = (l) => {\n  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i]!= l[j])\n        return false;\n  return true;\n};\n\n/*\n  pairsSymmetricDifference takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  differ only by one, and false otherwise.\n  >>> pairsSymmetricDifference([3, 5, 1, 2])\n  true\n  >>> pairsSymmetricDifference([3, 5, 1, -5, 2])\n  false\n  >>> pairsSymmetricDifference([3, 5, 1, -5, -5, 2])\n  false\n  >>> pairsSymmetricDifference([3, 5, 1, -5, -5, -5, 2])\n  false\n  >>> pairsSymmetricDifference([1])\n  false\n  */\n\nconst pairsSymmetricDifference = (l) => {\n  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i]!= l[j] && l[i]!= l[j - 1] && l[i]!= l[j + 1] && l[j]!= l[j - 1] && l[j]!= l[j + 1] && l[i]!= l[j - 1] && l[i]!= l[j + 1] && l[j]!= l[j + 1] && l[i]!= l[j - 1] && l[i]!= l[j + 1] && l[j]!= l[j + 1] && l[i]!= l[j - 1] && l[i]!= l[j + 1] && l[j]!= l[j + 1] && l[i]!= l[j - 1] && l[i]!= l[j + 1] && l[j]!= l[j + 1] && l[i]!= l[j - 1] && l[i]!= l[j + 1] && l[j]!= l[j + 1] && l[i]!= l[j - 1] && l[i]!= l[j + 1] && l[j]!= l[j + 1] && l[i]!= l[j - 1] && l[i]!= l[j + 1] && l[j]!= l[j + 1] && l[i]!= l[j - 1] && l[i]!= l[j + 1] && l[j]!= l[j + 1] && l[i]!= l[j - 1] && l[i]!= l[j + 1] && l[j]!= l[j + 1] && l[i]!= l[j - 1] && l[i]!= l[j + 1] && l[j]!= l[j + 1] && l[i]!= l[j - 1] && l[i]!= l[j + 1] && l[j]!= l[j + 1] && l[i]!= l[j - 1] && l[i]!= l[j + 1] && l[j]!= l[j + 1] && l[i]!= l[j - 1] && l[i]!= l[j + 1] && l[j]!= l[j + 1] && l[i]!= l[j - 1] && l[i]!= l[j + 1] && l[j]!= l[j + 1] && l[i]!= l[j - 1] && l[i]!= l[j + 1] && l[j]!= l[j + 1] && l[i]!= l[j - 1] && l[i]!= l[j + 1] && l[j]!= l[j + 1] && l[i]!= l[j - 1] && l[i]!= l[j + 1] && l[j]!= l[j + 1] && l[i]!= l[j - 1] && l[i]!= l[j + 1] && l[j]!= l[j + 1] && l[i]!= l[j - 1] && l[i]!= l[j + 1] && l[j]!= l[j + 1] && l[i]!= l[j - 1] && l[i]!= l[j + 1] && l[j]!= l[j + 1] && l[i]!= l[j - 1] && l[i]!= l[j + 1] && l[j]!= l[j + 1] && l[i]!= l[j - 1] && l[i]!= l[j + 1] && l[j]!= l[j + 1] && l[i]!= l[j - 1] && l[i]!= l[j + 1] && l[j]!= l[j + 1] && l[i]!= l[j - 1] && l[i]!= l[j + 1] && l[j]!= l[j + 1] && l[i]!= l[j - 1] && l[i]!= l[j + 1] && l[j]!= l[j + 1] && l[i]!= l[j - 1] && l[i]!= l[j + 1] && l[j]!= l[j + 1] && l[i]!= l[j - 1] && l[i]!= l[j + 1] && l[j]!= l[j + 1] && l[i]!= l[j - 1] && l[i]!= l[j + 1] && l[j]!= l[j + 1] && l[i]!= l[j - 1] && l[i]!= l[j + 1] && l[j]!= l[j + 1] && l[i]!= l[j - 1] && l[i]!= l[j + 1] && l[j]!= l[j + 1] && l[i]!= l[j - 1] && l[i]!= l[j + 1] && l[j]!= l[j + 1] && l[i]!= l[j - 1] && l[i]!= l[j + 1] && l[j]!= l[j + 1] && l[i]!= l[j - 1] && l[i]!= l[j + 1] && l[j]!= l[j + 1] && l[i]!= l[j - 1] && l[i]!= l[j + 1] && l[j]!= l[j + 1] && l[i]!= l[j - 1] && l[i]!= l[j + 1] && l[j]!= l[j + 1] && l[i]!= l[j - 1] && l[i]!= l[j + 1] && l[j]!= l[j + 1] && l[i]!= l[j - 1] && l[i]!= l[j + 1] && l[j]!= l[j + 1] && l[i]!= l[j - 1] && l[i]!= l[j + 1] && l[j]!= l[j + 1] && l[i]!= l[j - 1] && l[i]!= l[j + 1] && l[j]!= l[j + 1] && l[i]!= l[j - 1] && l[i]!= l[j + 1] && l[j]!= l[j + 1] && l[i]!= l[j - 1] && l[i]!= l[j + 1] && l[j]!= l[j + 1] && l[i]!= l[j - 1] && l[i]!= l[j + 1] && l[j]!= l[j + 1] && l[i]!= l[j - 1] && l[i]!= l[j + 1] && l[j]!= l[j + 1] && l[i]!= l[j - 1] && l[i] "}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\n\nconst changeBase = (x, base) => {\n  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n", "canonical_solution": "    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "partial": "/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    # print('@@this is the line to split##')\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "gc": "<|endoftext|>/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\n\nconst changeBase = (x, base) => {\n  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n};\n\n/*\n  Convert string representation to number.\n  >>> toNumber(123)\n  123\n  >>> toNumber('123')\n  123\n  >>> toNumber('123.456')\n  123.456\n  >>> toNumber('123.456e+6')\n  123.456e+6\n  >>> toNumber('123.456e+6')\n  123.456e+6\n  >>> toNumber('123.456e+6')\n  123.456e+6\n  >>> toNumber('123.456e+6')\n  123.456e+6\n  >>> toNumber('123.456e+6')\n  123.456e+6\n  >>> toNumber('123.456e+6')\n  123.456e+6\n  >>> toNumber('123.456e+6')\n  123.456e+6\n  >>> toNumber('123.456e+6')\n  123.456e+6\n  >>> toNumber('123.456e+6')\n  123.456e+6\n  >>> toNumber('123.456e+6')\n  123.456e+6\n  >>> toNumber('123.456e+6')\n  123.456e+6\n  >>> toNumber('123.456e+6')\n  123.456e+6\n  >>> toNumber('123.456e+6')\n  123.456e+6\n  >>> toNumber('123.456e+6')\n  123.456e+6\n  >>> toNumber('123.456e+6')\n  123.456e+6\n  >>> toNumber('123.456e+6')\n  123.456e+6\n  >>> toNumber('123.456e+6')\n  123.456e+6\n  >>> toNumber('123.456e+6')\n  123.456e+6\n  >>> toNumber('123.456e+6')\n  123.456e+6\n  >>> toNumber('123.456e+6')\n  123.456e+6\n  >>> toNumber('123.456e+6')\n  123.456e+6\n  >>> toNumber('123.456e+6')\n  123.456e+6\n  >>> toNumber('123.456e+6')\n  123.456e+6\n  >>> toNumber('123.456e+6')\n  123.456e+6\n  >>> toNumber('123.456e+6')\n  123.456e+6\n  >>> toNumber('123.456e+6')\n  123.456e+6\n  >>> toNumber('123.456e+6')\n  123.456e+6\n  >>> toNumber('123.456e+6')\n  123.456e+6\n  >>> toNumber('123.456e+6')\n  123.456e+6\n  >>> toNumber('123.456e+6')\n  123.456e+6\n  >>> toNumber('123.456e+6')\n  123.456e+6\n  >>> toNumber('123.456e+6')\n  123.456e+6\n  >>> toNumber('123.456e+6')\n  123.456e+6\n  >>> toNumber('123.456e+6')\n  123.456e+6\n  >>> toNumber('123.456e+6')\n  123.456e+6\n  >>> toNumber('123.456e+6')\n  123.456e+6\n  >>> toNumber('123.456e+6')\n  123.456e+6\n  >>> toNumber('123.456e+6')\n  123.456e+6\n  >>> toNumber('123.456e+6')\n  123.456e+6\n  >>> toNumber('123.456e+6')\n  123.456e+6\n  >>> toNumber('123.456e+6')\n  123.456e+6\n  >>> toNumber('123.456e+6')\n  123.456e+6\n  >>> toNumber('123.456e+6')\n  123.456e+6\n  >>> toNumber('123.456e+6')\n  123.456e+6\n  >>> toNumber('123.456e+6')\n  123.456e+6\n  >>> toNumber('123.456e+6')\n  123.456e+6\n  >>> toNumber('123.456e+6')\n  123.456e+6\n  >>> toNumber('123.456e+6')\n  123.456e+6\n  >>> toNumber('123.456e+6')\n  123.456e+6\n  >>> toNumber('123.456e+6')\n  123.456e+6\n  >>> toNumber('123.456e+6')\n  123.456e+6\n  >>> toNumber('123.456e+6')\n  123.456e+6\n  >>> toNumber('123.456e+6')\n  123.456e+6\n  >>> toNumber('123.456e+6')\n  123.456e+6\n  >>> toNumber('123.456e+6')\n  123.456e+6\n  >>> toNumber('123.456e+6')\n  123.456e+6\n  >>> toNumber('123.456e+6')\n  123.456e+6\n  >>> toNumber('123.456e+6')\n  123.456e+6\n  >>> toNumber('123.456e+6')\n  123.456e+6\n  >>> toNumber('123.456e+6')\n  123.456e+6\n  >>> toNumber('123.456e+6')\n  123.456e+6\n  >>> toNumber('123.456e+6')\n  123.456e+6\n  >>> toNumber('123.456e+6')\n  123.456e+6\n  >>> toNumber('123.456e+6')\n  123.456e+6\n  >>> toNumber('123.456e+6')\n  123.456e+6\n  >>> toNumber('123.456e+6')\n  123.456e+6\n  >>> toNumber('123.456e+6')\n  123.456e+6\n  >>> toNumber('123.456e+6')\n  123.456e+6\n  >>> toNumber('123.456e+6')\n  123.456e+6\n  >>> toNumber('123.456e+6')\n  123.456e+6\n  >>> toNumber('123.456e+6')\n  123.456e+6\n  >>> toNumber('123.456e+6')\n  123.456e+6\n  >>> toNumber('123.456e+6')\n  123.456e+6\n  >>> toNumber('123."}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\n\nconst triangleArea = (a, h) => {\n  return a * h / 2.0;\n", "canonical_solution": "}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "partial": "/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * h / 2.0;\n  # print('@@this is the line to split##')\n}\n\n", "gc": "<|endoftext|>/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\n\nconst triangleArea = (a, h) => {\n  return a * h / 2.0;\n};\n\nmodule.exports = triangleArea;\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nconst _curry2 = __webpack_require__(0);\n\nconst _curry3 = __webpack_require__(1);\n\nconst _dispatchable = __webpack_require__(3);\n\nconst _dispatchable2 = _interopRequireDefault(_dispatchable);\n\nconst _has = __webpack_require__(5);\n\nconst _has2 = _interopRequireDefault(_has);\n\nconst _isFunction = __webpack_require__(4);\n\nconst _isFunction2 = _interopRequireDefault(_isFunction);\n\nconst _isString = __webpack_require__(6);\n\nconst _isString2 = _interopRequireDefault(_isString);\n\nconst _hasIn = __webpack_require__(7);\n\nconst _hasIn2 = _interopRequireDefault(_hasIn);\n\nconst _map = __webpack_require__(8);\n\nconst _map2 = _interopRequireDefault(_map);\n\nconst _mapObjIndexed = __webpack_require__(9);\n\nconst _mapObjIndexed2 = _interopRequireDefault(_mapObjIndexed);\n\nconst _mapObjIndexedOrDefault = __webpack_require__(10);\n\nconst _mapObjIndexedOrDefault2 = _interopRequireDefault(_mapObjIndexedOrDefault);\n\nconst _mapObjIndexedOrFalse = __webpack_require__(11);\n\nconst _mapObjIndexedOrFalse2 = _interopRequireDefault(_mapObjIndexedOrFalse);\n\nconst _mapObjIndexedOrTrue = __webpack_require__(12);\n\nconst _mapObjIndexedOrTrue2 = _interopRequireDefault(_mapObjIndexedOrTrue);\n\nconst _mapObjIndexedOrUndefined = __webpack_require__(13);\n\nconst _mapObjIndexedOrUndefined2 = _interopRequireDefault(_mapObjIndexedOrUndefined);\n\nconst _mapObjIndexedOrNull = __webpack_require__(14);\n\nconst _mapObjIndexedOrNull2 = _interopRequireDefault(_mapObjIndexedOrNull);\n\nconst _mapObjIndexedOrUndefined = __webpack_require__(15);\n\nconst _mapObjIndexedOrUndefined2 = _interopRequireDefault(_mapObjIndexedOrUndefined);\n\nconst _mapObjIndexedOrNull = __webpack_require__(16);\n\nconst _mapObjIndexedOrNull2 = _interopRequireDefault(_mapObjIndexedOrNull);\n\nconst _mapObjIndexedOrUndefined = __webpack_require__(17);\n\nconst _mapObjIndexedOrUndefined2 = _interopRequireDefault(_mapObjIndexedOrUndefined);\n\nconst _mapObjIndexedOrNull = __webpack_require__(18);\n\nconst _mapObjIndexedOrNull2 = _interopRequireDefault(_mapObjIndexedOrNull);\n\nconst _mapObjIndexedOrUndefined = __webpack_require__(19);\n\nconst _mapObjIndexedOrUndefined2 = _interopRequireDefault(_mapObjIndexedOrUndefined);\n\nconst _mapObjIndexedOrNull = __webpack_require__(20);\n\nconst _mapObjIndexedOrNull2 = _interopRequireDefault(_mapObjIndexedOrNull);\n\nconst _mapObjIndexedOrUndefined = __webpack_require__(21);\n\nconst _mapObjIndexedOrUndefined2 = _interopRequireDefault(_mapObjIndexedOrUndefined);\n\nconst _mapObjIndexedOrNull = __webpack_require__(22);\n\nconst _mapObjIndexedOrNull2 = _interopRequireDefault(_mapObjIndexedOrNull);\n\nconst _mapObjIndexedOrUndefined = __webpack_require__(23);\n\nconst _mapObjIndexedOrUndefined2 = _interopRequireDefault(_mapObjIndexedOrUndefined);\n\nconst _mapObjIndexedOrNull = __webpack_require__(24);\n\nconst _mapObjIndexedOrNull2 = _interopRequireDefault(_mapObjIndexedOrNull);\n\nconst _mapObjIndexedOrUndefined = __webpack_require__(25);\n\nconst _mapObjIndexedOrUndefined2 = _interopRequireDefault(_mapObjIndexedOrUndefined);\n\nconst _mapObjIndexedOrNull = __webpack_require__(26);\n\nconst _mapObjIndexedOrNull2 = _interopRequireDefault(_mapObjIndexedOrNull);\n\nconst _mapObjIndexedOrUndefined = __webpack_require__(27);\n\nconst _mapObjIndexedOrUndefined2 = _interopRequireDefault(_mapObjIndexedOrUndefined);\n\nconst _mapObjIndexedOrNull = __webpack_require__(28);\n\nconst _mapObjIndexedOrNull2 = _interopRequireDefault(_mapObjIndexedOrNull);\n\nconst _mapObjIndexedOrUndefined = __webpack_require__(29);\n\nconst _mapObjIndexedOrUndefined2 = _interopRequireDefault(_mapObjIndexedOrUndefined);\n\nconst _mapObjIndexedOrNull = __webpack_require__(30);\n\nconst _mapObjIndexedOrNull2 = _interopRequireDefault(_mapObjIndexedOrNull);\n\nconst _mapObjIndexedOrUndefined = __webpack_require__(31);\n\nconst _mapObjIndexedOrUndefined2 = _interopRequireDefault(_mapObjIndexedOrUndefined);\n\nconst _mapObjIndexedOrNull = __webpack_require__(32);\n\nconst _mapObjIndexedOrNull2 = _interopRequireDefault(_mapObjIndexedOrNull);\n\nconst _mapObjIndexedOrUndefined = __webpack_require__(33);\n\nconst _mapObjIndexedOrUndefined2 = _interopRequireDefault(_mapObjIndexedOrUndefined);\n\nconst _mapObjIndexedOrNull = __webpack_require__(34);\n\nconst _mapObjIndexedOrNull2 = _interopRequireDefault(_mapObjIndexedOrNull);\n\nconst _mapObjIndexedOrUndefined = __webpack_require__(35);\n\nconst _mapObjIndexedOrUndefined2 = _interopRequireDefault(_mapObjIndexedOrUndefined);\n\nconst _mapObjIndexedOrNull = __webpack_require__(36);\n\nconst _mapObjIndexedOrNull2 = _interopRequireDefault(_mapObjIndexedOrNull);\n\nconst _mapObjIndexedOrUndefined = __webpack_require__(37);\n\nconst _mapObjIndexedOrUndefined2 = _interopRequireDefault(_mapObjIndexedOrUndefined);\n\nconst _mapObjIndexedOrNull = __webpack_require__(38);\n\nconst _mapObjIndexedOrNull2 = _interopRequireDefault(_mapObjIndexedOrNull);\n\nconst _mapObjIndexedOrUndefined = __webpack_require__(39);\n\nconst _mapObjIndexedOrUndefined2 = _interopRequireDefault(_mapObjIndexedOrUndefined);\n\nconst _mapObjIndexedOrNull = __webpack_require__(40);\n\nconst _mapObjIndexedOrNull2 = _interopRequireDefault(_mapObjIndexedOrNull);\n\nconst _mapObjIndexedOrUndefined = __webpack_require__(41);\n\nconst _mapObjIndexedOrUndefined2 = _interopRequireDefault(_mapObjIndexedOrUndefined);\n\nconst _mapObjIndexedOrNull = __webpack_require__(42);\n\nconst _mapObjIndexedOrNull2 = _interopRequireDefault(_mapObjIndexedOrNull);\n\nconst _mapObjIndexedOrUndefined = __webpack_require__(43);\n\nconst _mapObjIndexedOrUndefined2 = _interopRequireDefault(_mapObjIndexedOrUndefined);\n\nconst _mapObjIndexedOrNull = __webpack_require__(44);\n\nconst _mapObjIndexedOrNull2 = _interopRequireDefault(_mapObjIndexedOrNull);\n\nconst _mapObjIndexedOrUndefined = __webpack_require__(45);\n\nconst _mapObjIndexedOrUndefined2 = _interopRequireDefault(_mapObjIndexedOrUndefined);\n\nconst _mapObjIndexedOrNull = __webpack_require__(46);\n\nconst _mapObjIndexedOrNull2 = _interopRequireDefault(_mapObjIndexedOrNull);\n\nconst _mapObjIndexedOrUndefined = __webpack_require__(47);\n\nconst _mapObjIndexedOrUndefined2 = _interopRequireDefault(_mapObjIndexedOrUndefined);\n\nconst _mapObjIndexedOrNull = __webpack_require__(48);\n\nconst _mapObjIndexedOrNull2 = _interopRequireDefault(_mapObjIndexedOrNull);\n\nconst _mapObjIndexedOrUndefined = __webpack_require__(49);\n\nconst _mapObjIndexedOrUndefined2 = _interopRequireDefault(_mapObjIndexedOrUndefined);\n\nconst _mapObjIndexedOrNull = __webpack_require__(50);\n\nconst _mapObjIndexedOrNull2 = _interopRequireDefault(_mapObjIndexedOrNull);\n\nconst _mapObjIndexedOrUndefined = __webpack_require__(51);\n\nconst _mapObjIndexedOrUndefined2 = _interopRequireDefault(_mapObjIndexedOrUndefined);\n\nconst _mapObjIndexedOrNull = __webpack_require__(52);\n\nconst _mapObjIndexedOrNull2 = _interopRequireDefault(_mapObjIndexedOrNull);\n\nconst _mapObjIndexedOrUndefined = __webpack_require__(53);\n\nconst _mapObjIndexedOrUndefined2 = _interopRequireDefault(_mapObjIndexedOrUndefined);\n\nconst _mapObjIndexedOrNull = __webpack_require__(54);\n\nconst _mapObjIndexedOrNull2 = _interopRequireDefault(_mapObjIndexedOrNull);\n\nconst _mapObjIndexedOrUndefine"}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\n\nconst fib4 = (n) => {\n  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n", "canonical_solution": "                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "partial": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                # print('@@this is the line to split##')\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "gc": "<|endoftext|>/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\n\nconst fib4 = (n) => {\n  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n      results.at(-3) + results.at(-4));\n  }\n  return results[n];\n};\n\n/*\n  Write a function to efficiently compute the n-th element of the Fibonacci sequence that starts with 0 and ends with n-1.\n  >>> fibonacci(6)\n  8\n  >>> fibonacci(7)\n  14\n  */\n\nconst fibonacci = (n) => {\n  var results = [0, 1];\n  if (n < 2)\n    return results[n];\n  for (let i = 1; i < n + 1; i++) {\n    results.push(results[i - 1] + results[i - 2]);\n  }\n  return results[n];\n};\n\n/*\n  Write a function to efficiently compute the n-th element of the Fibonacci sequence that starts with 0 and ends with n-1.\n  >>> fibonacci(6)\n  8\n  >>> fibonacci(7)\n  14\n  */\n\nconst fibonacci = (n) => {\n  var results = [0, 1];\n  if (n < 2)\n    return results[n];\n  for (let i = 1; i < n + 1; i++) {\n    results.push(results[i - 1] + results[i - 2]);\n  }\n  return results[n];\n};\n\n/*\n  Write a function to efficiently compute the n-th element of the Fibonacci sequence that starts with 0 and ends with n-1.\n  >>> fibonacci(6)\n  8\n  >>> fibonacci(7)\n  14\n  */\n\nconst fibonacci = (n) => {\n  var results = [0, 1];\n  if (n < 2)\n    return results[n];\n  for (let i = 1; i < n + 1; i++) {\n    results.push(results[i - 1] + results[i - 2]);\n  }\n  return results[n];\n};\n\n/*\n  Write a function to efficiently compute the n-th element of the Fibonacci sequence that starts with 0 and ends with n-1.\n  >>> fibonacci(6)\n  8\n  >>> fibonacci(7)\n  14\n  */\n\nconst fibonacci = (n) => {\n  var results = [0, 1];\n  if (n < 2)\n    return results[n];\n  for (let i = 1; i < n + 1; i++) {\n    results.push(results[i - 1] + results[i - 2]);\n  }\n  return results[n];\n};\n\n/*\n  Write a function to efficiently compute the n-th element of the Fibonacci sequence that starts with 0 and ends with n-1.\n  >>> fibonacci(6)\n  8\n  >>> fibonacci(7)\n  14\n  */\n\nconst fibonacci = (n) => {\n  var results = [0, 1];\n  if (n < 2)\n    return results[n];\n  for (let i = 1; i < n + 1; i++) {\n    results.push(results[i - 1] + results[i - 2]);\n  }\n  return results[n];\n};\n\n/*\n  Write a function to efficiently compute the n-th element of the Fibonacci sequence that starts with 0 and ends with n-1.\n  >>> fibonacci(6)\n  8\n  >>> fibonacci(7)\n  14\n  */\n\nconst fibonacci = (n) => {\n  var results = [0, 1];\n  if (n < 2)\n    return results[n];\n  for (let i = 1; i < n + 1; i++) {\n    results.push(results[i - 1] + results[i - 2]);\n  }\n  return results[n];\n};\n\n/*\n  Write a function to efficiently compute the n-th element of the Fibonacci sequence that starts with 0 and ends with n-1.\n  >>> fibonacci(6)\n  8\n  >>> fibonacci(7)\n  14\n  */\n\nconst fibonacci = (n) => {\n  var results = [0, 1];\n  if (n < 2)\n    return results[n];\n  for (let i = 1; i < n + 1; i++) {\n    results.push(results[i - 1] + results[i - 2]);\n  }\n  return results[n];\n};\n\n/*\n  Write a function to efficiently compute the n-th element of the Fibonacci sequence that starts with 0 and ends with n-1.\n  >>> fibonacci(6)\n  8\n  >>> fibonacci(7)\n  14\n  */\n\nconst fibonacci = (n) => {\n  var results = [0, 1];\n  if (n < 2)\n    return results[n];\n  for (let i = 1; i < n + 1; i++) {\n    results.push(results[i - 1] + results[i - 2]);\n  }\n  return results[n];\n};\n\n/*\n  Write a function to efficiently compute the n-th element of the Fibonacci sequence that starts with 0 and ends with n-1.\n  >>> fibonacci(6)\n  8\n  >>> fibonacci(7)\n  14\n  */\n\nconst fibonacci = (n) => {\n  var results = [0, 1];\n  if (n < 2)\n    return results[n];\n  for (let i = 1; i < n + 1; i++) {\n    results.push(results[i - 1] + results[i - 2]);\n  }\n  return results[n];\n};\n\n/*\n  Write a function to efficiently compute the n-th element of the Fibonacci sequence that starts with 0 and ends with n-1.\n  >>> fibonacci(6)\n  8\n  >>> fibonacci(7)\n  14\n  */\n\nconst fibonacci = (n) => {\n  var results = [0, 1];\n  if (n < 2)\n    return results[n];\n  for (let i = 1; i < n + 1; i++) {\n    results.push(results[i - 1] + results[i - 2]);\n  }\n  return results[n];\n};\n\n/*\n  Write a function to efficiently compute the n-th element of the Fibonacci sequence that starts with 0 and ends with n-1.\n  >>> fibonacci(6)\n  8\n  >>> fibonacci(7)\n  14\n  */\n\nconst fibonacci = (n) => {\n  var results = [0, 1];\n  if (n < 2)\n    return results[n];\n  for (let i = 1; i < n + 1; i++) {\n    results.push(results[i - 1] + results[i - 2]);\n  }\n  return results[n];\n};\n\n/*\n  Write a function to efficiently compute the n-th element of the Fibonacci sequence that starts with 0 and ends with n-1.\n  >>> fibonacci(6)\n  8\n  >>> fibonacci(7)\n  14\n  */\n\nconst fibonacci = (n) => {\n  var results = [0, 1];\n  if (n < 2)\n    return results[n];\n  for (let i = 1; i < n + 1; i++) {\n    results.push(results[i - 1] + results[i - 2]);\n  }\n  return results[n];\n};\n\n/*\n  Write a function to efficiently compute the n-th element of the Fibonacci sequence that starts with 0 and ends with n-1.\n  >>> fibonacci(6)\n  8\n  >>> fibonacci(7)\n  14\n  */\n\nconst fibonacci"}
{"task_id": "JavaScript/47", "prompt": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\n\nconst median = (l) => {\n  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n", "canonical_solution": "    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "partial": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    # print('@@this is the line to split##')\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "gc": "<|endoftext|>/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\n\nconst median = (l) => {\n  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    len = Math.floor(l.length / 2);\n  var mid = Math.floor(len / 2);\n  var left = l[mid];\n  var right = l[len - mid];\n  return left + right;\n};\n\n/*\n  Return true if all elements in the list are less than or equal to x.\n  >>> all(3, [1, 2, 4, 5])\n  true\n  >>> all([3, 1, 2, 4, 5], 2)\n  true\n  >>> all([3, 1, 2, 4, 5], 3)\n  false\n  >>> all([3, 1, 2, 4, 5], 4)\n  false\n  >>> all([3, 1, 2, 4, 5], 5)\n  false\n  */\n\nconst all = (l, x) => {\n  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    len = Math.floor(l.length / 2);\n  var mid = Math.floor(len / 2);\n  var left = l[mid];\n  var right = l[len - mid];\n  return left <= x && x <= right;\n};\n\n/*\n  Return true if all elements in the list are greater than or equal to x.\n  >>> all(3, [1, 2, 4, 5])\n  true\n  >>> all([3, 1, 2, 4, 5], 2)\n  true\n  >>> all([3, 1, 2, 4, 5], 3)\n  false\n  >>> all([3, 1, 2, 4, 5], 4)\n  false\n  >>> all([3, 1, 2, 4, 5], 5)\n  false\n  */\n\nconst all = (l, x) => {\n  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    len = Math.floor(l.length / 2);\n  var mid = Math.floor(len / 2);\n  var left = l[mid];\n  var right = l[len - mid];\n  return left >= x && x >= right;\n};\n\n/*\n  Return true if all elements in the list are strictly less than x.\n  >>> all(3, [1, 2, 4, 5])\n  true\n  >>> all([3, 1, 2, 4, 5], 2)\n  true\n  >>> all([3, 1, 2, 4, 5], 3)\n  false\n  >>> all([3, 1, 2, 4, 5], 4)\n  false\n  >>> all([3, 1, 2, 4, 5], 5)\n  false\n  */\n\nconst all = (l, x) => {\n  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    len = Math.floor(l.length / 2);\n  var mid = Math.floor(len / 2);\n  var left = l[mid];\n  var right = l[len - mid];\n  return left <= x && x <= right;\n};\n\n/*\n  Return true if all elements in the list are strictly greater than x.\n  >>> all(3, [1, 2, 4, 5])\n  true\n  >>> all([3, 1, 2, 4, 5], 2)\n  true\n  >>> all([3, 1, 2, 4, 5], 3)\n  false\n  >>> all([3, 1, 2, 4, 5], 4)\n  false\n  >>> all([3, 1, 2, 4, 5], 5)\n  false\n  */\n\nconst all = (l, x) => {\n  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    len = Math.floor(l.length / 2);\n  var mid = Math.floor(len / 2);\n  var left = l[mid];\n  var right = l[len - mid];\n  return left >= x && x >= right;\n};\n\n/*\n  Return true if all elements in the list are strictly equal to x.\n  >>> all(3, [1, 2, 4, 5])\n  true\n  >>> all([3, 1, 2, 4, 5], 2)\n  true\n  >>> all([3, 1, 2, 4, 5], 3)\n  false\n  >>> all([3, 1, 2, 4, 5], 4)\n  false\n  >>> all([3, 1, 2, 4, 5], 5)\n  false\n  */\n\nconst all = (l, x) => {\n  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    len = Math.floor(l.length / 2);\n  var mid = Math.floor(len / 2);\n  var left = l[mid];\n  var right = l[len - mid];\n  return left === x && right === x;\n};\n\n/*\n  Return true if all elements in the list are strictly less than or equal to x.\n  >>> all(3, [1, 2, 4, 5])\n  true\n  >>> all([3, 1, 2, 4, 5], 2)\n  true\n  >>> all([3, 1, 2, 4, 5], 3)\n  false\n  >>> all([3, 1, 2, 4, 5], 4)\n  false\n  >>> all([3, 1, 2, 4, 5], 5)\n  false\n  */\n\nconst all = (l, x) => {\n  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    len = Math.floor(l.length / 2);\n  var mid = Math.floor(len / 2);\n  var left = l[mid];\n  var right = l[len - mid];\n  return left <= x || x <= right;\n};\n\n/*\n  Return true if all elements in the list are strictly greater than or equal to x.\n  >>> all(3, [1, 2, 4, 5])\n  true\n  >>> all([3, 1, 2, 4, 5], 2)\n  true\n  >>> all([3, 1, 2, 4, 5], 3)\n  false\n  >>> all([3, 1, 2, 4, 5], 4)\n  false\n  >>> all([3, 1, 2, 4, 5], 5)\n  false\n  */\n\nconst all = (l, x) => {\n  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    len = Math.floor(l.length / 2);\n  var mid = Math.floor(len / 2);\n  var left = l[mid];\n  var right = l[len - mid];\n  return left >= x || x >= right;\n};\n\n/*\n  Return true if all elements in the list are strictly equal to x.\n  >>> all(3, [1, 2, 4, 5])\n  true\n  >>> all([3, 1, 2, 4, 5], 2)\n  true\n  >>> all([3, 1, 2, 4, 5], 3)\n  false\n  >>> all([3, 1, 2, 4, 5], 4)\n  false\n  >>> all([3, 1, 2, 4, 5], 5)\n  false\n  */\n\nconst all = (l, x) => {\n  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    len = Math.floor(l.length / 2);\n  var mid = Math.floor(len / 2);\n  var left = l[mid];\n  var right = l[len - mid];\n  return left === x && right === x;\n};\n\n/*\n  Return true if all elements in the list are strictly less than or equal to x.\n  >>> all(3, [1, 2, 4, 5])\n  true\n  >>> all([3, 1, 2, 4, 5], 2)\n  true\n  >>> all([3, 1, 2, 4, 5], 3)\n  false\n  >>> all([3, 1, 2, 4, 5], 4)\n  false\n  >>> all([3, 1, 2, 4, 5], 5)\n  false\n  */\n\nconst all = (l, x) => {\n  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    len = Math.floor(l.length / 2);\n  var mid = Math.floor(len / 2);\n  var left = l[mid];\n  var right = l[len - mid];\n  return left <= x || x <= right;\n};\n\n/*\n  Return true if all elements in the list are strictly greater than or equal to x.\n  >>> all(3, [1, 2, 4, 5])\n  true\n  >>> all([3, 1, 2, 4, 5], 2)\n  true\n  >>> all([3, 1, 2, 4, 5], 3)\n  false\n  >>> all([3, 1, 2, 4, 5], 4)\n  false\n  >>> all([3, 1, 2, 4, 5], 5)\n  false\n  */\n\nconst all = (l, x) => {\n  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    len = Math.floor(l.length / 2);\n  var mid = Math.floor(len"}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\n\nconst isPalindrome = (text) => {\n  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n", "canonical_solution": "      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "partial": "/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      # print('@@this is the line to split##')\n      return false;\n  return true;\n}\n\n", "gc": "<|endoftext|>/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\n\nconst isPalindrome = (text) => {\n  for (let i = 0; i < text.length; i++)\n    if (text[i]!= text.at(-i-1))\n      return false;\n  return true;\n};\n\n/*\n  Checks if given string is a palindrome of given length\n  >>> isPalindromeOfLength('aba', 3)\n  true\n  >>> isPalindromeOfLength('aba', 5)\n  false\n  >>> isPalindromeOfLength('aba', 7)\n  false\n  */\n\nconst isPalindromeOfLength = (text, length) => {\n  if (text.length!= length)\n    return false;\n  for (let i = 0; i < text.length; i++)\n    if (text[i]!= text.at(-i-1))\n      return false;\n  return true;\n};\n\n/*\n  Checks if given string is a palindrome of given length\n  >>> isPalindromeOfLength('aba', 3)\n  true\n  >>> isPalindromeOfLength('aba', 5)\n  true\n  >>> isPalindromeOfLength('aba', 7)\n  false\n  */\n\nconst isPalindromeOfLengthAndSpace = (text, length) => {\n  if (text.length!= length)\n    return false;\n  for (let i = 0; i < text.length; i++)\n    if (text[i]!= text.at(-i-1))\n      return false;\n  return true;\n};\n\n/*\n  Checks if given string is a palindrome of given length\n  >>> isPalindromeOfLengthAndSpace('aba', 3)\n  true\n  >>> isPalindromeOfLengthAndSpace('aba', 5)\n  true\n  >>> isPalindromeOfLengthAndSpace('aba', 7)\n  false\n  */\n\nconst isPalindromeOfLengthAndSpace = (text, length) => {\n  if (text.length!= length)\n    return false;\n  for (let i = 0; i < text.length; i++)\n    if (text[i]!= text.at(-i-1))\n      return false;\n  return true;\n};\n\n/*\n  Checks if given string is a palindrome of given length\n  >>> isPalindromeOfLengthAndSpace('aba', 3)\n  true\n  >>> isPalindromeOfLengthAndSpace('aba', 5)\n  true\n  >>> isPalindromeOfLengthAndSpace('aba', 7)\n  false\n  */\n\nconst isPalindromeOfLengthAndSpace = (text, length) => {\n  if (text.length!= length)\n    return false;\n  for (let i = 0; i < text.length; i++)\n    if (text[i]!= text.at(-i-1))\n      return false;\n  return true;\n};\n\n/*\n  Checks if given string is a palindrome of given length\n  >>> isPalindromeOfLengthAndSpace('aba', 3)\n  true\n  >>> isPalindromeOfLengthAndSpace('aba', 5)\n  true\n  >>> isPalindromeOfLengthAndSpace('aba', 7)\n  false\n  */\n\nconst isPalindromeOfLengthAndSpace = (text, length) => {\n  if (text.length!= length)\n    return false;\n  for (let i = 0; i < text.length; i++)\n    if (text[i]!= text.at(-i-1))\n      return false;\n  return true;\n};\n\n/*\n  Checks if given string is a palindrome of given length\n  >>> isPalindromeOfLengthAndSpace('aba', 3)\n  true\n  >>> isPalindromeOfLengthAndSpace('aba', 5)\n  true\n  >>> isPalindromeOfLengthAndSpace('aba', 7)\n  false\n  */\n\nconst isPalindromeOfLengthAndSpace = (text, length) => {\n  if (text.length!= length)\n    return false;\n  for (let i = 0; i < text.length; i++)\n    if (text[i]!= text.at(-i-1))\n      return false;\n  return true;\n};\n\n/*\n  Checks if given string is a palindrome of given length\n  >>> isPalindromeOfLengthAndSpace('aba', 3)\n  true\n  >>> isPalindromeOfLengthAndSpace('aba', 5)\n  true\n  >>> isPalindromeOfLengthAndSpace('aba', 7)\n  false\n  */\n\nconst isPalindromeOfLengthAndSpace = (text, length) => {\n  if (text.length!= length)\n    return false;\n  for (let i = 0; i < text.length; i++)\n    if (text[i]!= text.at(-i-1))\n      return false;\n  return true;\n};\n\n/*\n  Checks if given string is a palindrome of given length\n  >>> isPalindromeOfLengthAndSpace('aba', 3)\n  true\n  >>> isPalindromeOfLengthAndSpace('aba', 5)\n  true\n  >>> isPalindromeOfLengthAndSpace('aba', 7)\n  false\n  */\n\nconst isPalindromeOfLengthAndSpace = (text, length) => {\n  if (text.length!= length)\n    return false;\n  for (let i = 0; i < text.length; i++)\n    if (text[i]!= text.at(-i-1))\n      return false;\n  return true;\n};\n\n/*\n  Checks if given string is a palindrome of given length\n  >>> isPalindromeOfLengthAndSpace('aba', 3)\n  true\n  >>> isPalindromeOfLengthAndSpace('aba', 5)\n  true\n  >>> isPalindromeOfLengthAndSpace('aba', 7)\n  false\n  */\n\nconst isPalindromeOfLengthAndSpace = (text, length) => {\n  if (text.length!= length)\n    return false;\n  for (let i = 0; i < text.length; i++)\n    if (text[i]!= text.at(-i-1))\n      return false;\n  return true;\n};\n\n/*\n  Checks if given string is a palindrome of given length\n  >>> isPalindromeOfLengthAndSpace('aba', 3)\n  true\n  >>> isPalindromeOfLengthAndSpace('aba', 5)\n  true\n  >>> isPalindromeOfLengthAndSpace('aba', 7)\n  false\n  */\n\nconst isPalindromeOfLengthAndSpace = (text, length) => {\n  if (text.length!= length)\n    return false;\n  for (let i = 0; i < text.length; i++)\n    if (text[i]!= text.at(-i-1))\n      return false;\n  return true;\n};\n\n/*\n  Checks if given string is a palindrome of given length\n  >>> isPalindromeOfLengthAndSpace('aba', 3)\n  true\n  >>> isPalindromeOfLengthAndSpace('aba', 5)\n  true\n  >>> isPalindromeOfLengthAndSpace('aba', 7)\n  false\n  */\n\nconst isPalindromeOfLengthAndSpace = (text, length) => {\n  if (text.length!= length)\n    return false;\n  for (let i = 0; i < text.length; i++)\n    if (text[i]!= text.at(-i-1))\n      return false;\n  return true;\n};\n\n/*\n  Checks if given string is a palindrome of given length\n  >>> isPalindromeOfLengthAndSpace('aba', 3)\n  true\n  >>> isPalindromeOfLengthAndSpace('aba', 5)\n  true\n  >>> isPalindromeOfLengthAndSpace('aba', 7)\n  false\n  */\n\nconst isPalindromeOfLengthAndSpace = (text, length) => {\n  if (text.length!= length)\n    return false;\n  for (let i = 0; i < text.length; i++)\n    if (text[i]!= text.at(-i-1))\n      return false;"}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\n\nconst modp = (n, p) => {\n  var ret = 1;\n  for (let i = 0; i < n; i++)\n", "canonical_solution": "    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "partial": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  var ret = 1;\n  for (let i = 0; i < n; i++)\n    # print('@@this is the line to split##')\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "gc": "<|endoftext|>/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\n\nconst modp = (n, p) => {\n  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret %= p;\n  return ret;\n};\n\n/*\n  >>> modp(1, 3)\n  1\n  >>> modp(3, 1)\n  1\n  >>> modp(3, 5)\n  2\n  >>> modp(3, 11)\n  3\n  >>> modp(3, 100)\n  4\n  >>> modp(3, 101)\n  5\n  >>> modp(3, 102)\n  6\n  >>> modp(3, 103)\n  7\n  >>> modp(3, 104)\n  8\n  >>> modp(3, 105)\n  9\n  >>> modp(3, 106)\n  10\n  >>> modp(3, 107)\n  11\n  >>> modp(3, 108)\n  12\n  >>> modp(3, 109)\n  13\n  >>> modp(3, 110)\n  14\n  >>> modp(3, 111)\n  15\n  >>> modp(3, 112)\n  16\n  >>> modp(3, 113)\n  17\n  >>> modp(3, 114)\n  18\n  >>> modp(3, 115)\n  19\n  >>> modp(3, 116)\n  20\n  >>> modp(3, 117)\n  21\n  >>> modp(3, 118)\n  22\n  >>> modp(3, 119)\n  23\n  >>> modp(3, 120)\n  24\n  >>> modp(3, 121)\n  25\n  >>> modp(3, 122)\n  26\n  >>> modp(3, 123)\n  27\n  >>> modp(3, 124)\n  28\n  >>> modp(3, 125)\n  29\n  >>> modp(3, 126)\n  30\n  >>> modp(3, 127)\n  31\n  >>> modp(3, 128)\n  32\n  >>> modp(3, 129)\n  33\n  >>> modp(3, 130)\n  34\n  >>> modp(3, 131)\n  35\n  >>> modp(3, 132)\n  36\n  >>> modp(3, 133)\n  37\n  >>> modp(3, 134)\n  38\n  >>> modp(3, 135)\n  39\n  >>> modp(3, 136)\n  40\n  >>> modp(3, 137)\n  41\n  >>> modp(3, 138)\n  42\n  >>> modp(3, 139)\n  43\n  >>> modp(3, 140)\n  44\n  >>> modp(3, 141)\n  45\n  >>> modp(3, 142)\n  46\n  >>> modp(3, 143)\n  47\n  >>> modp(3, 144)\n  48\n  >>> modp(3, 145)\n  49\n  >>> modp(3, 146)\n  50\n  >>> modp(3, 147)\n  51\n  >>> modp(3, 148)\n  52\n  >>> modp(3, 149)\n  53\n  >>> modp(3, 150)\n  54\n  >>> modp(3, 151)\n  55\n  >>> modp(3, 152)\n  56\n  >>> modp(3, 153)\n  57\n  >>> modp(3, 154)\n  58\n  >>> modp(3, 155)\n  59\n  >>> modp(3, 156)\n  60\n  >>> modp(3, 157)\n  61\n  >>> modp(3, 158)\n  62\n  >>> modp(3, 159)\n  63\n  >>> modp(3, 160)\n  64\n  >>> modp(3, 161)\n  65\n  >>> modp(3, 162)\n  66\n  >>> modp(3, 163)\n  67\n  >>> modp(3, 164)\n  68\n  >>> modp(3, 165)\n  69\n  >>> modp(3, 166)\n  70\n  >>> modp(3, 167)\n  71\n  >>> modp(3, 168)\n  72\n  >>> modp(3, 169)\n  73\n  >>> modp(3, 170)\n  74\n  >>> modp(3, 171)\n  75\n  >>> modp(3, 172)\n  76\n  >>> modp(3, 173)\n  77\n  >>> modp(3, 174)\n  78\n  >>> modp(3, 175)\n  79\n  >>> modp(3, 176)\n  80\n  >>> modp(3, 177)\n  81\n  >>> modp(3, 178)\n  82\n  >>> modp(3, 179)\n  83\n  >>> modp(3, 180)\n  84\n  >>> modp(3, 181)\n  85\n  >>> modp(3, 182)\n  86\n  >>> modp(3, 183)\n  87\n  >>> modp(3, 184)\n  88\n  >>> modp(3, 185)\n  89\n  >>> modp(3, 186)\n  90\n  >>> modp(3, 187)\n  91\n  >>> modp(3, 188)\n  92\n  >>> modp(3, 189)\n  93\n  >>> modp(3, 190)\n  94\n  >>> modp(3, 191)\n  95\n  >>> modp(3, 192)\n  96\n  >>> modp(3, 193)\n  97\n  >>> modp(3, 194)\n  98\n  >>> modp(3, 195)\n  99\n  >>> modp(3, 196)\n  100\n  >>> modp(3, 197)\n  101\n  >>> modp(3, 198)\n  102\n  >>> modp(3, 199)\n  103\n  >>> modp(3, 200)\n  104\n  >>> modp(3, 201)\n  105\n  >>> modp(3, 202)\n  106\n  >>> modp(3, 203)\n  107\n  >>> modp(3, 204)\n  108\n  >>> modp(3, 205)\n  109\n  >>> modp(3, 206)\n  110\n  >>> modp(3, 207)\n  111\n  >>> modp(3, 208)\n  112\n  >>> modp(3, 209)\n  113\n  >>> modp(3, 210)\n  114\n  >>> modp(3, 211)\n  115\n  >>> modp(3, 212)\n  116\n  >>> modp(3, 213)\n  117\n  >>> modp(3, 214)\n  118\n  >>> modp(3, 215)\n  119\n  >>> modp(3, 216)\n  120\n  >>> modp(3, 217)\n  121\n  >>> modp(3, 218)\n  122\n  >>> modp(3, 219)\n  123\n  >>> modp(3, 220)\n  124\n  >>> modp(3, 221)\n  125\n  >>> modp(3, 222)\n  126\n  >>> modp(3, 223)\n  127\n  >>> modp(3, 224)\n  128\n  >>> modp(3, 225)\n  129\n  >>> modp(3, 226)\n  130"}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\n\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n", "canonical_solution": "  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "partial": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n    # print('@@this is the line to split##')\n  )).join(\"\");\n}\n\n", "gc": "<|endoftext|>/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\n\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\n\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\n\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\n\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\n\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\n\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\n\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\n\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\n\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\n\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\n\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string "}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowels is a function that takes string and returns string without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\n\nconst removeVowels = (text) => {\n  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n", "canonical_solution": "                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "partial": "/*\n  removeVowels is a function that takes string and returns string without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                      # print('@@this is the line to split##')\n                    )\n             .join(\"\")\n}\n\n", "gc": "<|endoftext|>/*\n  removeVowels is a function that takes string and returns string without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\n\nconst removeVowels = (text) => {\n  return text.split(\"\")\n            .filter(s =>![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                     .includes(s.toLowerCase())\n             )\n            .join(\"\");\n};\n\n/*\n  removeNumbers is a function that takes string and returns string without numbers.\n  >>> removeNumbers('')\n  ''\n  >>> removeNumbers(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeNumbers('abcdef')\n  'bcdf'\n  >>> removeNumbers('aaaaa')\n  ''\n  >>> removeNumbers('aaBAA')\n  'B'\n  >>> removeNumbers('zbcd')\n  'zbcd'\n  */\n\nconst removeNumbers = (text) => {\n  return text.split(\"\")\n            .filter(s =>![\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"]\n                     .includes(s.toLowerCase())\n             )\n            .join(\"\");\n};\n\n/*\n  removePunctuation is a function that takes string and returns string without punctuation.\n  >>> removePunctuation('')\n  ''\n  >>> removePunctuation(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removePunctuation('abcdef')\n  'bcdf'\n  >>> removePunctuation('aaaaa')\n  ''\n  >>> removePunctuation('aaBAA')\n  'B'\n  >>> removePunctuation('zbcd')\n  'zbcd'\n  */\n\nconst removePunctuation = (text) => {\n  return text.split(\"\")\n            .filter(s =>![\".\", \",\", \";\", \"?\", \"!\", \"?!\", \"!?\", \"!?!\"]\n                     .includes(s.toLowerCase())\n             )\n            .join(\"\");\n};\n\n/*\n  removeWhiteSpace is a function that takes string and returns string without white space.\n  >>> removeWhiteSpace('')\n  ''\n  >>> removeWhiteSpace(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeWhiteSpace('abcdef')\n  'bcdf'\n  >>> removeWhiteSpace('aaaaa')\n  ''\n  >>> removeWhiteSpace('aaBAA')\n  'B'\n  >>> removeWhiteSpace('zbcd')\n  'zbcd'\n  */\n\nconst removeWhiteSpace = (text) => {\n  return text.split(\"\")\n            .filter(s =>![\"\\t\", \"\\n\", \"\\r\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f\", \"\\f"}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers in the list l are below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\n\nconst belowThreshold = (l, t) => {\n  for (const e of l)\n    if (e >= t)\n", "canonical_solution": "      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "partial": "/*Return true if all numbers in the list l are below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  for (const e of l)\n    if (e >= t)\n      # print('@@this is the line to split##')\n      return false;\n  return true;\n}\n\n", "gc": "<|endoftext|>/*Return true if all numbers in the list l are below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\n\nconst belowThreshold = (l, t) => {\n  for (const e of l)\n    if (e >= t)\n      return true\n  return false\n}\n\n/*\n  >>> isEven([0, 2, 4, 6, 8])\n  true\n  >>> isEven([0, 2, 4, 6, 8], 2)\n  false\n  >>> isEven([0, 2, 4, 6, 8], 3)\n  false\n  >>> isEven([0, 2, 4, 6, 8], 4)\n  false\n  >>> isEven([0, 2, 4, 6, 8], 5)\n  false\n  >>> isEven([0, 2, 4, 6, 8], 6)\n  false\n  >>> isEven([0, 2, 4, 6, 8], 7)\n  false\n  >>> isEven([0, 2, 4, 6, 8], 8)\n  false\n  >>> isEven([0, 2, 4, 6, 8], 9)\n  false\n  >>> isEven([0, 2, 4, 6, 8], 10)\n  false\n  >>> isEven([0, 2, 4, 6, 8], 11)\n  false\n  >>> isEven([0, 2, 4, 6, 8], 12)\n  false\n  >>> isEven([0, 2, 4, 6, 8], 13)\n  false\n  >>> isEven([0, 2, 4, 6, 8], 14)\n  false\n  >>> isEven([0, 2, 4, 6, 8], 15)\n  false\n  >>> isEven([0, 2, 4, 6, 8], 16)\n  false\n  >>> isEven([0, 2, 4, 6, 8], 17)\n  false\n  >>> isEven([0, 2, 4, 6, 8], 18)\n  false\n  >>> isEven([0, 2, 4, 6, 8], 19)\n  false\n  >>> isEven([0, 2, 4, 6, 8], 20)\n  false\n  >>> isEven([0, 2, 4, 6, 8], 21)\n  false\n  >>> isEven([0, 2, 4, 6, 8], 22)\n  false\n  >>> isEven([0, 2, 4, 6, 8], 23)\n  false\n  >>> isEven([0, 2, 4, 6, 8], 24)\n  false\n  >>> isEven([0, 2, 4, 6, 8], 25)\n  false\n  >>> isEven([0, 2, 4, 6, 8], 26)\n  false\n  >>> isEven([0, 2, 4, 6, 8], 27)\n  false\n  >>> isEven([0, 2, 4, 6, 8], 28)\n  false\n  >>> isEven([0, 2, 4, 6, 8], 29)\n  false\n  >>> isEven([0, 2, 4, 6, 8], 30)\n  false\n  >>> isEven([0, 2, 4, 6, 8], 31)\n  false\n  >>> isEven([0, 2, 4, 6, 8], 32)\n  false\n  >>> isEven([0, 2, 4, 6, 8], 33)\n  false\n  >>> isEven([0, 2, 4, 6, 8], 34)\n  false\n  >>> isEven([0, 2, 4, 6, 8], 35)\n  false\n  >>> isEven([0, 2, 4, 6, 8], 36)\n  false\n  >>> isEven([0, 2, 4, 6, 8], 37)\n  false\n  >>> isEven([0, 2, 4, 6, 8], 38)\n  false\n  >>> isEven([0, 2, 4, 6, 8], 39)\n  false\n  >>> isEven([0, 2, 4, 6, 8], 40)\n  false\n  >>> isEven([0, 2, 4, 6, 8], 41)\n  false\n  >>> isEven([0, 2, 4, 6, 8], 42)\n  false\n  >>> isEven([0, 2, 4, 6, 8], 43)\n  false\n  >>> isEven([0, 2, 4, 6, 8], 44)\n  false\n  >>> isEven([0, 2, 4, 6, 8], 45)\n  false\n  >>> isEven([0, 2, 4, 6, 8], 46)\n  false\n  >>> isEven([0, 2, 4, 6, 8], 47)\n  false\n  >>> isEven([0, 2, 4, 6, 8], 48)\n  false\n  >>> isEven([0, 2, 4, 6, 8], 49)\n  false\n  >>> isEven([0, 2, 4, 6, 8], 50)\n  false\n  >>> isEven([0, 2, 4, 6, 8], 51)\n  false\n  >>> isEven([0, 2, 4, 6, 8], 52)\n  false\n  >>> isEven([0, 2, 4, 6, 8], 53)\n  false\n  >>> isEven([0, 2, 4, 6, 8], 54)\n  false\n  >>> isEven([0, 2, 4, 6, 8], 55)\n  false\n  >>> isEven([0, 2, 4, 6, 8], 56)\n  false\n  >>> isEven([0, 2, 4, 6, 8], 57)\n  false\n  >>> isEven([0, 2, 4, 6, 8], 58)\n  false\n  >>> isEven([0, 2, 4, 6, 8], 59)\n  false\n  >>> isEven([0, 2, 4, 6, 8], 60)\n  false\n  >>> isEven([0, 2, 4, 6, 8], 61)\n  false\n  >>> isEven([0, 2, 4, 6, 8], 62)\n  false\n  >>> isEven([0, 2, 4, 6, 8], 63)\n  false\n  >>> isEven([0, 2, 4, 6, 8], 64)\n  false\n  >>> isEven([0, 2, 4, 6, 8], 65)\n  false\n  >>> isEven([0, 2, 4, 6, 8], 66)\n  false\n  >>> isEven([0, 2, 4, 6, 8], 67)\n  false\n  >>> isEven([0, 2, 4, 6, 8], 68)\n  false\n  >>> isEven([0, 2, 4, 6, 8], 69)\n  false\n  >>> isEven([0, 2, 4, 6, 8], 70)\n  false\n  >>> isEven([0, 2, 4, 6, 8], 71)\n  false\n  >>> isEven([0, 2, 4, 6, 8], 72)\n  false\n  >>> isEven([0, 2, 4, 6, 8], 73)\n  false\n  >>> isEven([0, 2, 4, 6, 8], 74)\n  false\n  >>> isEven([0, 2, 4, 6, 8], 75)\n  false\n  >>> isEven([0, 2, 4, 6, 8], 76)\n  false\n  >>> isEven([0, 2, 4, 6, 8], 77)\n  false\n  >>> isEven([0, 2, 4, 6, 8], 78)\n  false\n  >>> isEven([0, 2, 4, 6, 8], 79)\n  false\n  >>> isEven([0, 2, 4, 6, 8], 80)\n  false\n  >>> isEven([0, 2, 4, 6, 8], 81)\n  false\n  >>> isEven([0, 2, 4, 6, 8], 82)\n  false\n  >>> isEven([0, 2, 4, 6, 8], 83)\n  false\n  >>> isEven([0, 2, 4, 6, 8], 84)\n  false\n  >>> isEven([0, 2, 4, 6, 8], 85)\n  false\n  >>> isEven([0, 2, 4, 6, 8], 86)\n  false\n  >>> isEven([0, 2, 4, 6, 8], 87)\n  false\n  >>> isEven([0, 2, 4, 6, 8], 88)\n  false\n  >>> isEven([0, 2, 4, 6, 8], 89)\n  false\n  >>> isEven([0, 2, 4, 6, 8], 90)\n  false\n  >>> isEven([0, 2, 4, 6, 8], 91)\n  false\n  >>> isEven([0, 2, 4, 6, 8], 92)\n  false\n  >>> isEven([0, 2, 4, 6, 8], 93)\n  false\n  >>> isEven([0, 2, 4, "}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\n\nconst add = (x, y) => {\n  return x + y;\n", "canonical_solution": "}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "partial": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n  # print('@@this is the line to split##')\n}\n\n", "gc": "<|endoftext|>/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\n\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\n\nconst subtract = (x, y) => {\n  return x - y;\n};\n\n/*\n  Subtract two numbers x and y\n  >>> subtract(2, 3)\n  5\n  >>> subtract(5, 7)\n  12\n  */\n\nconst multiply = (x, y) => {\n  return x * y;\n};\n\n/*\n  Multiply two numbers x and y\n  >>> multiply(2, 3)\n  5\n  >>> multiply(5, 7)\n  12\n  */\n\nconst divide = (x, y) => {\n  return x / y;\n};\n\n/*\n  Divide two numbers x and y\n  >>> divide(2, 3)\n  5\n  >>> divide(5, 7)\n  12\n  */\n\nconst modulo = (x, y) => {\n  return x % y;\n};\n\n/*\n  Modulo two numbers x and y\n  >>> modulo(2, 3)\n  5\n  >>> modulo(5, 7)\n  12\n  */\n\nconst pow = (x, y) => {\n  return Math.pow(x, y);\n};\n\n/*\n  Raise a number to a power\n  >>> pow(2, 3)\n  8\n  >>> pow(3, 2)\n  27\n  */\n\nconst log = (x) => {\n  return Math.log(x);\n};\n\n/*\n  Raise a number to a power\n  >>> log(2)\n  0.43428571428571429\n  >>> log(3)\n  0.6931471805599453094\n  >>> log(4)\n  1.0986122886681193\n  >>> log(5)\n  1.386294361119896\n  >>> log(6)\n  1.6094379124341003\n  >>> log(7)\n  1.9206341538397217\n  >>> log(8)\n  2.220446049250313\n  >>> log(9)\n  2.506628274631000\n  >>> log(10)\n  2.8284271247461984\n  >>> log(11)\n  3.1622776601683765\n  >>> log(12)\n  3.44269504088896340\n  >>> log(13)\n  3.741935483870967\n  >>> log(14)\n  4.0971238898038462\n  >>> log(15)\n  4.477539634718236\n  >>> log(16)\n  4.797990098780822\n  >>> log(17)\n  5.121320343559570\n  >>> log(18)\n  5.477539634718236\n  >>> log(19)\n  5.7121320343559570\n  >>> log(20)\n  6.0971238898038462\n  >>> log(21)\n  6.477539634718236\n  >>> log(22)\n  6.7121320343559570\n  >>> log(23)\n  7.0971238898038462\n  >>> log(24)\n  7.477539634718236\n  >>> log(25)\n  7.7121320343559570\n  >>> log(26)\n  8.0971238898038462\n  >>> log(27)\n  8.477539634718236\n  >>> log(28)\n  8.7121320343559570\n  >>> log(29)\n  9.0971238898038462\n  >>> log(30)\n  9.477539634718236\n  >>> log(31)\n  9.7121320343559570\n  >>> log(32)\n  10.0971238898038462\n  >>> log(33)\n  10.477539634718236\n  >>> log(34)\n  10.7121320343559570\n  >>> log(35)\n  11.0971238898038462\n  >>> log(36)\n  11.477539634718236\n  >>> log(37)\n  11.7121320343559570\n  >>> log(38)\n  12.0971238898038462\n  >>> log(39)\n  12.477539634718236\n  >>> log(40)\n  12.7121320343559570\n  >>> log(41)\n  13.0971238898038462\n  >>> log(42)\n  1.477539634718236\n  >>> log(43)\n  1.7121320343559570\n  >>> log(44)\n  1.9121320343559570\n  >>> log(45)\n  2.0971238898038462\n  >>> log(46)\n  2.477539634718236\n  >>> log(47)\n  2.7121320343559570\n  >>> log(48)\n  3.0971238898038462\n  >>> log(49)\n  3.477539634718236\n  >>> log(50)\n  3.7121320343559570\n  >>> log(51)\n  4.0971238898038462\n  >>> log(52)\n  4.477539634718236\n  >>> log(53)\n  4.7121320343559570\n  >>> log(54)\n  5.0971238898038462\n  >>> log(55)\n  5.477539634718236\n  >>> log(56)\n  5.7121320343559570\n  >>> log(57)\n  6.0971238898038462\n  >>> log(58)\n  6.477539634718236\n  >>> log(59)\n  6.7121320343559570\n  >>> log(60)\n  7.0971238898038462\n  >>> log(61)\n  7.477539634718236\n  >>> log(62)\n  7.7121320343559570\n  >>> log(63)\n  8.0971238898038462\n  >>> log(64)\n  8.477539634718236\n  >>> log(65)\n  8.7121320343559570\n  >>> log(66)\n  9.0971238898038462\n  >>> log(67)\n  9.477539634718236\n  >>> log(68)\n  9.7121320343559570\n  >>> log(69)\n  10.0971238898038462\n  >>> log(70)\n  10.477539634718236\n  >>> log(71)\n  10.7121320343559570\n  >>> log(72)\n  11.0971238898038462\n  >>> log(73)\n  11.477539634718236\n  >>> log(74)\n  11.7121320343559570\n  >>> log(75)\n  12.0971238898038462\n  >>> log(76)\n  12.477539634718236\n  >>> log(77)\n  12.7121320343559570\n  >>> log(78)\n  "}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two words have the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\n\nconst sameChars = (s0, s1) => {\n  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n", "canonical_solution": "}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "partial": "/*\n  Check if two words have the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n  # print('@@this is the line to split##')\n}\n\n", "gc": "<|endoftext|>/*\n  Check if two words have the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\n\nconst sameChars = (s0, s1) => {\n  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n};\n\nmodule.exports = sameChars;\n\n},{}],3:[function(require,module,exports){\nconst { isString } = require('lodash');\n\nconst isStringOrNumber = (val) => {\n  return isString(val) || isNumber(val);\n};\n\nconst isStringOrArray = (val) => {\n  return isString(val) || Array.isArray(val);\n};\n\nconst isStringOrObject = (val) => {\n  return isString(val) || isPlainObject(val);\n};\n\nconst isPlainObject = (val) => {\n  return Object.prototype.toString.call(val) === '[object Object]';\n};\n\nconst isNumber = (val) => {\n  return typeof val === 'number';\n};\n\nconst isString = (val) => {\n  return typeof val ==='string';\n};\n\nconst isBoolean = (val) => {\n  return typeof val === 'boolean';\n};\n\nconst isNull = (val) => {\n  return val === null;\n};\n\nconst isUndefined = (val) => {\n  return val === undefined;\n};\n\nconst isRegExp = (val) => {\n  return Object.prototype.toString.call(val) === '[object RegExp]';\n};\n\nconst isDate = (val) => {\n  return Object.prototype.toString.call(val) === '[object Date]';\n};\n\nconst isError = (val) => {\n  return Object.prototype.toString.call(val) === '[object Error]';\n};\n\nconst isSymbol = (val) => {\n  return Object.prototype.toString.call(val) === '[object Symbol]';\n};\n\nconst isMap = (val) => {\n  return Object.prototype.toString.call(val) === '[object Map]';\n};\n\nconst isSet = (val) => {\n  return Object.prototype.toString.call(val) === '[object Set]';\n};\n\nconst isWeakMap = (val) => {\n  return Object.prototype.toString.call(val) === '[object WeakMap]';\n};\n\nconst isWeakSet = (val) => {\n  return Object.prototype.toString.call(val) === '[object WeakSet]';\n};\n\nconst isSetLike = (val) => {\n  return isSet(val) || isWeakSet(val);\n};\n\nconst isMapLike = (val) => {\n  return isMap(val) || isWeakMap(val);\n};\n\nconst isStringOrArrayLike = (val) => {\n  return isStringOrArray(val) || isStringOrObject(val);\n};\n\nconst isStringOrObjectLike = (val) => {\n  return isStringOrObject(val) || isStringOrArray(val);\n};\n\nconst isPlainObjectLike = (val) => {\n  return isPlainObject(val) || isStringOrArray(val);\n};\n\nconst isNumberLike = (val) => {\n  return isNumber(val) || isStringOrArray(val);\n};\n\nconst isBooleanLike = (val) => {\n  return isBoolean(val) || isStringOrArray(val);\n};\n\nconst isNullLike = (val) => {\n  return isNull(val) || isStringOrArray(val);\n};\n\nconst isUndefinedLike = (val) => {\n  return isUndefined(val) || isStringOrArray(val);\n};\n\nconst isRegExpLike = (val) => {\n  return isRegExp(val) || isStringOrArray(val);\n};\n\nconst isDateLike = (val) => {\n  return isDate(val) || isStringOrArray(val);\n};\n\nconst isErrorLike = (val) => {\n  return isError(val) || isStringOrArray(val);\n};\n\nconst isSymbolLike = (val) => {\n  return isSymbol(val) || isStringOrArray(val);\n};\n\nconst isMapLike = (val) => {\n  return isMap(val) || isStringOrArray(val);\n};\n\nconst isSetLike = (val) => {\n  return isSet(val) || isStringOrArray(val);\n};\n\nconst isWeakMapLike = (val) => {\n  return isWeakMap(val) || isStringOrArray(val);\n};\n\nconst isWeakSetLike = (val) => {\n  return isWeakSet(val) || isStringOrArray(val);\n};\n\nconst isSetLikeOrUndefined = (val) => {\n  return isSetLike(val) || isUndefinedLike(val);\n};\n\nconst isMapLikeOrUndefined = (val) => {\n  return isMapLike(val) || isUndefinedLike(val);\n};\n\nconst isStringOrArrayLikeOrUndefined = (val) => {\n  return isStringOrArrayLike(val) || isUndefinedLike(val);\n};\n\nconst isStringOrObjectLikeOrUndefined = (val) => {\n  return isStringOrObjectLike(val) || isUndefinedLike(val);\n};\n\nconst isPlainObjectLikeOrUndefined = (val) => {\n  return isPlainObjectLike(val) || isUndefinedLike(val);\n};\n\nconst isNumberLikeOrUndefined = (val) => {\n  return isNumberLike(val) || isUndefinedLike(val);\n};\n\nconst isBooleanLikeOrUndefined = (val) => {\n  return isBooleanLike(val) || isUndefinedLike(val);\n};\n\nconst isNullLikeOrUndefined = (val) => {\n  return isNullLike(val) || isUndefinedLike(val);\n};\n\nconst isUndefinedLikeOrUndefined = (val) => {\n  return isUndefinedLike(val) || isUndefinedLike(val);\n};\n\nconst isRegExpLikeOrUndefined = (val) => {\n  return isRegExpLike(val) || isUndefinedLike(val);\n};\n\nconst isDateLikeOrUndefined = (val) => {\n  return isDateLike(val) || isUndefinedLike(val);\n};\n\nconst isErrorLikeOrUndefined = (val) => {\n  return isErrorLike(val) || isUndefinedLike(val);\n};\n\nconst isSymbolLikeOrUndefined = (val) => {\n  return isSymbolLike(val) || isUndefinedLike(val);\n};\n\nconst isMapLikeOrUndefined = (val) => {\n  return isMapLike(val) || isUndefinedLike(val);\n};\n\nconst isSetLikeOrUndefined = (val) => {\n  return isSetLike(val) || isUndefinedLike(val);\n};\n\nconst isWeakMapLikeOrUndefined = (val) => {\n  return isWeakMapLike(val) || isUndefinedLike(val);\n};\n\nconst isWeakSetLikeOrUndefined = (val) => {\n  return isWeakSetLike(val) || isUndefinedLike(val);\n};\n\nconst isSetLikeOrNull = (val) => {\n  return isSetLike(val) || isNullLike(val);\n};\n\nconst isMapLikeOrNull = (val) => {\n  return isMapLike(val) || isNullLike(val);\n};\n\nconst isSetLikeOrUndefined = (val) => {\n  return isSetLike(val) || isUndefinedLike(val);\n};\n\nconst isMapLikeOrNull = (val) => {\n  return isMapLike(val) || isNullLike(val);\n};\n\nconst isStringOrArrayLikeOrNull = (val) => {\n  return isStringOrArrayLike(val) || isNullLike(val);\n};\n\nconst isStringOrObjectLikeOrNull = (val) => {\n  return isStringOrObjectLike(val) || isNullLike(val);\n};\n\nconst isPlainObjectLikeOrNull = (val) => {\n  return isPlainObjectLike"}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\n\nconst fib = (n) => {\n  if (n == 0)\n    return 0;\n  if (n == 1)\n", "canonical_solution": "    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "partial": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n == 0)\n    return 0;\n  if (n == 1)\n    # print('@@this is the line to split##')\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "gc": "<|endoftext|>/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\n\nconst fib = (n) => {\n  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n};\n\nmodule.exports = fib;\n\n},{}],4:[function(require,module,exports){\nconst { createHash } = require('crypto');\n\nconst hash = (str) => {\n  return createHash('sha256').update(str).digest('hex');\n};\n\nmodule.exports = hash;\n\n},{\"crypto\":1}],5:[function(require,module,exports){\nconst { createHash } = require('crypto');\n\nconst hash = (str) => {\n  return createHash('sha256').update(str).digest('hex');\n};\n\nmodule.exports = hash;\n\n},{\"crypto\":1}],6:[function(require,module,exports){\nconst { createHash } = require('crypto');\n\nconst hash = (str) => {\n  return createHash('sha256').update(str).digest('hex');\n};\n\nmodule.exports = hash;\n\n},{\"crypto\":1}],7:[function(require,module,exports){\nconst { createHash } = require('crypto');\n\nconst hash = (str) => {\n  return createHash('sha256').update(str).digest('hex');\n};\n\nmodule.exports = hash;\n\n},{\"crypto\":1}],8:[function(require,module,exports){\nconst { createHash } = require('crypto');\n\nconst hash = (str) => {\n  return createHash('sha256').update(str).digest('hex');\n};\n\nmodule.exports = hash;\n\n},{\"crypto\":1}],9:[function(require,module,exports){\nconst { createHash } = require('crypto');\n\nconst hash = (str) => {\n  return createHash('sha256').update(str).digest('hex');\n};\n\nmodule.exports = hash;\n\n},{\"crypto\":1}],10:[function(require,module,exports){\nconst { createHash } = require('crypto');\n\nconst hash = (str) => {\n  return createHash('sha256').update(str).digest('hex');\n};\n\nmodule.exports = hash;\n\n},{\"crypto\":1}],11:[function(require,module,exports){\nconst { createHash } = require('crypto');\n\nconst hash = (str) => {\n  return createHash('sha256').update(str).digest('hex');\n};\n\nmodule.exports = hash;\n\n},{\"crypto\":1}],12:[function(require,module,exports){\nconst { createHash } = require('crypto');\n\nconst hash = (str) => {\n  return createHash('sha256').update(str).digest('hex');\n};\n\nmodule.exports = hash;\n\n},{\"crypto\":1}],13:[function(require,module,exports){\nconst { createHash } = require('crypto');\n\nconst hash = (str) => {\n  return createHash('sha256').update(str).digest('hex');\n};\n\nmodule.exports = hash;\n\n},{\"crypto\":1}],14:[function(require,module,exports){\nconst { createHash } = require('crypto');\n\nconst hash = (str) => {\n  return createHash('sha256').update(str).digest('hex');\n};\n\nmodule.exports = hash;\n\n},{\"crypto\":1}],15:[function(require,module,exports){\nconst { createHash } = require('crypto');\n\nconst hash = (str) => {\n  return createHash('sha256').update(str).digest('hex');\n};\n\nmodule.exports = hash;\n\n},{\"crypto\":1}],16:[function(require,module,exports){\nconst { createHash } = require('crypto');\n\nconst hash = (str) => {\n  return createHash('sha256').update(str).digest('hex');\n};\n\nmodule.exports = hash;\n\n},{\"crypto\":1}],17:[function(require,module,exports){\nconst { createHash } = require('crypto');\n\nconst hash = (str) => {\n  return createHash('sha256').update(str).digest('hex');\n};\n\nmodule.exports = hash;\n\n},{\"crypto\":1}],18:[function(require,module,exports){\nconst { createHash } = require('crypto');\n\nconst hash = (str) => {\n  return createHash('sha256').update(str).digest('hex');\n};\n\nmodule.exports = hash;\n\n},{\"crypto\":1}],19:[function(require,module,exports){\nconst { createHash } = require('crypto');\n\nconst hash = (str) => {\n  return createHash('sha256').update(str).digest('hex');\n};\n\nmodule.exports = hash;\n\n},{\"crypto\":1}],20:[function(require,module,exports){\nconst { createHash } = require('crypto');\n\nconst hash = (str) => {\n  return createHash('sha256').update(str).digest('hex');\n};\n\nmodule.exports = hash;\n\n},{\"crypto\":1}],21:[function(require,module,exports){\nconst { createHash } = require('crypto');\n\nconst hash = (str) => {\n  return createHash('sha256').update(str).digest('hex');\n};\n\nmodule.exports = hash;\n\n},{\"crypto\":1}],22:[function(require,module,exports){\nconst { createHash } = require('crypto');\n\nconst hash = (str) => {\n  return createHash('sha256').update(str).digest('hex');\n};\n\nmodule.exports = hash;\n\n},{\"crypto\":1}],23:[function(require,module,exports){\nconst { createHash } = require('crypto');\n\nconst hash = (str) => {\n  return createHash('sha256').update(str).digest('hex');\n};\n\nmodule.exports = hash;\n\n},{\"crypto\":1}],24:[function(require,module,exports){\nconst { createHash } = require('crypto');\n\nconst hash = (str) => {\n  return createHash('sha256').update(str).digest('hex');\n};\n\nmodule.exports = hash;\n\n},{\"crypto\":1}],25:[function(require,module,exports){\nconst { createHash } = require('crypto');\n\nconst hash = (str) => {\n  return createHash('sha256').update(str).digest('hex');\n};\n\nmodule.exports = hash;\n\n},{\"crypto\":1}],26:[function(require,module,exports){\nconst { createHash } = require('crypto');\n\nconst hash = (str) => {\n  return createHash('sha256').update(str).digest('hex');\n};\n\nmodule.exports = hash;\n\n},{\"crypto\":1}],27:[function(require,module,exports){\nconst { createHash } = require('crypto');\n\nconst hash = (str) => {\n  return createHash('sha256').update(str).digest('hex');\n};\n\nmodule.exports = hash;\n\n},{\"crypto\":1}],28:[function(require,module,exports){\nconst { createHash } = require('crypto');\n\nconst hash = (str) => {\n  return createHash('sha256').update(str).digest('hex');\n};\n\nmodule.exports = hash;\n\n},{\"crypto\":1}],29:[function(require,module,exports){\nconst { createHash } = require('crypto');\n\nconst hash = (str) => {\n  return createHash('sha256').update(str).digest('hex');\n};\n\nmodule.exports = hash;\n\n},{\"crypto\":1}],30:[function(require,module,exports){\nconst { createHash } = require('crypto');\n\nconst hash = (str) => {\n  return createHash('sha256').update(str).digest('hex');\n};\n\nmodule.exports = hash;\n\n},{\"crypto\":1}],31:[function(require,module,exports){\nconst { createHash } = require('crypto');\n\nconst hash = (str) => {\n  return createHash('sha256').update(str).digest('hex');\n};\n\nmodule.exports = hash;\n\n},{\"crypto\":1}],32:[function(require,module,exports){\nconst { createHash } = require('crypto');\n\nconst hash = (str) => {\n  return createHash('sha256').update(str).digest('hex');\n};\n\nmodule.exports = hash;\n\n},{\"crypto\":1}],33:[function(require,module,export"}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\n\nconst correctBracketing = (brackets) => {\n  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n", "canonical_solution": "      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "partial": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      # print('@@this is the line to split##')\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "gc": "<|endoftext|>/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\n\nconst correctBracketing = (brackets) => {\n  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth == 0)\n      return false;\n  }\n  return true;\n};\n\nmodule.exports = correctBracketing;\n\n},{}],9:[function(require,module,exports){\nconst { isString } = require(\"./utils\");\n\nconst isStringOrEmpty = (str) => {\n  return isString(str) || str === \"\";\n};\n\nconst isStringOrUndefined = (str) => {\n  return isString(str) || str === undefined;\n};\n\nconst isStringOrNull = (str) => {\n  return isString(str) || str === null;\n};\n\nconst isStringOrUndefinedOrNull = (str) => {\n  return isStringOrUndefined(str) || isStringOrNull(str);\n};\n\nconst isStringOrUndefinedOrEmpty = (str) => {\n  return isStringOrUndefined(str) || isStringOrEmpty(str);\n};\n\nconst isStringOrUndefinedOrNullOrEmpty = (str) => {\n  return isStringOrUndefinedOrNull(str) || isStringOrEmpty(str);\n};\n\nconst isStringOrUndefinedOrEmptyOrNull = (str) => {\n  return isStringOrUndefinedOrEmpty(str) || isStringOrNull(str);\n};\n\nconst isStringOrUndefinedOrEmptyOrNullOrEmpty = (str) => {\n  return isStringOrUndefinedOrEmpty(str) || isStringOrNullOrEmpty(str);\n};\n\nconst isStringOrUndefinedOrEmptyOrNullOrUndefined = (str) => {\n  return isStringOrUndefinedOrEmpty(str) || isStringOrNullOrUndefined(str);\n};\n\nconst isStringOrUndefinedOrEmptyOrNullOrUndefinedOrEmpty = (str) => {\n  return isStringOrUndefinedOrEmpty(str) || isStringOrNullOrUndefinedOrEmpty(str);\n};\n\nconst isStringOrUndefinedOrEmptyOrNullOrUndefinedOrNull = (str) => {\n  return isStringOrUndefinedOrEmpty(str) || isStringOrNullOrUndefinedOrNull(str);\n};\n\nconst isStringOrUndefinedOrEmptyOrNullOrUndefinedOrNullOrEmpty = (str) => {\n  return isStringOrUndefinedOrEmpty(str) || isStringOrNullOrUndefinedOrNullOrEmpty(str);\n};\n\nconst isStringOrUndefinedOrEmptyOrNullOrUndefinedOrNullOrUndefined = (str) => {\n  return isStringOrUndefinedOrEmpty(str) || isStringOrNullOrUndefinedOrNullOrUndefined(str);\n};\n\nconst isStringOrUndefinedOrEmptyOrNullOrUndefinedOrNullOrUndefinedOrEmpty = (str) => {\n  return isStringOrUndefinedOrEmpty(str) || isStringOrNullOrUndefinedOrNullOrUndefinedOrEmpty(str);\n};\n\nconst isStringOrUndefinedOrEmptyOrNullOrUndefinedOrNullOrUndefinedOrNull = (str) => {\n  return isStringOrUndefinedOrEmpty(str) || isStringOrNullOrUndefinedOrNullOrUndefinedOrNull(str);\n};\n\nconst isStringOrUndefinedOrEmptyOrNullOrUndefinedOrNullOrUndefinedOrUndefined = (str) => {\n  return isStringOrUndefinedOrEmpty(str) || isStringOrNullOrUndefinedOrNullOrUndefinedOrUndefined(str);\n};\n\nconst isStringOrUndefinedOrEmptyOrNullOrUndefinedOrNullOrUndefinedOrUndefinedOrNull = (str) => {\n  return isStringOrUndefinedOrEmpty(str) || isStringOrNullOrUndefinedOrNullOrUndefinedOrUndefinedOrNull(str);\n};\n\nconst isStringOrUndefinedOrEmptyOrNullOrUndefinedOrNullOrUndefinedOrUndefinedOrNullOrEmpty = (str) => {\n  return isStringOrUndefinedOrEmpty(str) || isStringOrNullOrUndefinedOrNullOrUndefinedOrUndefinedOrNullOrUndefinedOrEmpty(str);\n};\n\nconst isStringOrUndefinedOrEmptyOrNullOrUndefinedOrNullOrUndefinedOrUndefinedOrNullOrUndefined = (str) => {\n  return isStringOrUndefinedOrEmpty(str) || isStringOrNullOrUndefinedOrNullOrUndefinedOrUndefinedOrNullOrUndefined(str);\n};\n\nconst isStringOrUndefinedOrEmptyOrNullOrUndefinedOrNullOrUndefinedOrUndefinedOrNullOrUndefined = (str) => {\n  return isStringOrUndefinedOrEmpty(str) || isStringOrNullOrUndefinedOrNullOrUndefinedOrUndefinedOrNullOrUndefined(str);\n};\n\nconst isStringOrUndefinedOrEmptyOrNullOrUndefinedOrNullOrUndefinedOrUndefinedOrNullOrUndefinedOrEmpty = (str) => {\n  return isStringOrUndefinedOrEmpty(str) || isStringOrNullOrUndefinedOrNullOrUndefinedOrUndefinedOrNullOrUndefinedOrUndefinedOrNullOrUndefinedOrEmpty(str);\n};\n\nconst isStringOrUndefinedOrEmptyOrNullOrUndefinedOrNullOrUndefinedOrUndefinedOrNullOrUndefinedOrNullOrUndefined = (str) => {\n  return isStringOrUndefinedOrEmpty(str) || isStringOrNullOrUndefinedOrNullOrUndefinedOrUndefinedOrNullOrUndefinedOrUndefinedOrNullOrUndefined(str);\n};\n\nconst isStringOrUndefinedOrEmptyOrNullOrUndefinedOrNullOrUndefinedOrUndefinedOrNullOrUndefinedOrUndefinedOrNullOrUndefined = (str) => {\n  return isStringOrUndefinedOrEmpty(str) || isStringOrNullOrUndefinedOrNullOrUndefinedOrUndefinedOrNullOrUndefinedOrUndefinedOrNullOrUndefinedOrUndefined(str);\n};\n\nconst isStringOrUndefinedOrEmptyOrNullOrUndefinedOrNullOrUndefinedOrUndefinedOrNullOrUndefinedOrUndefinedOrNullOrUndefined = (str) => {\n  return isStringOrUndefinedOrEmpty(str) || isStringOrNullOrUndefinedOrNullOrUndefinedOrUndefinedOrNullOrUndefinedOrUndefinedOrNullOrUndefinedOrUndefinedOrNullOrUndefined(str);\n};\n\nconst isStringOrUndefinedOrEmptyOrNullOrUndefinedOrNullOrUndefinedOrUndefinedOrNullOrUndefinedOrUndefinedOrNullOrUndefined = (str) => {\n  return isStringOrUndefinedOrEmpty(str) || isStringOrNullOrUndefinedOrNullOrUndefinedOrUndefinedOrNullOrUndefinedOrUndefinedOrNullOrUndefinedOrUndefinedOrNullOrUndefined(str);\n};\n\nconst isStringOrUndefinedOrEmptyOrNullOrUndefinedOrNullOrUndefinedOrUndefinedOrNullOrUndefinedOrUndefinedOrNullOrUndefined = (str) => {\n  return isStringOrUndefinedOrEmpty(str) || isStringOrNullOrUndefinedOrNullOrUndefinedOrUndefinedOrNullOrUndefinedOrUndefinedOrNullOrUndefinedOrUndefinedOrNullOrUndefinedOrUndefined(str);\n};\n\nconst isStringOrUndefinedOrEmptyOr"}
{"task_id": "JavaScript/57", "prompt": "/*Return true is list elements are monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\n\nconst monotonic = (l) => {\n  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n", "canonical_solution": "      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "partial": "/*Return true is list elements are monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      # print('@@this is the line to split##')\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "gc": "<|endoftext|>/*Return true is list elements are monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\n\nconst monotonic = (l) => {\n  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2)) {\n    return true;\n  }\n  return false;\n};\n\n/*\n  Return true if a is less than b.\n  >>> monotonic([4, 1, 0, -10])\n  true\n  >>> monotonic([4, 1, 0, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, 10])\n  false\n  */\n\nconst monotonicLessThan = (l, a) => {\n  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2)) {\n    return true;\n  }\n  return false;\n};\n\n/*\n  Return true if a is greater than b.\n  >>> monotonic([4, 1, 0, 10])\n  true\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, 10])\n  false\n  */\n\nconst monotonicGreaterThan = (l, a) => {\n  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2)) {\n    return true;\n  }\n  return false;\n};\n\n/*\n  Return true if a is equal to b.\n  >>> monotonic([4, 1, 0, 10])\n  true\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, 10])\n  false\n  */\n\nconst monotonicEqual = (l, a) => {\n  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2)) {\n    return true;\n  }\n  return false;\n};\n\n/*\n  Return true if a is strictly less than b.\n  >>> monotonic([4, 1, 0, 10])\n  true\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, 10])\n  false\n  */\n\nconst monotonicStrictLessThan = (l, a) => {\n  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2)) {\n    return true;\n  }\n  return false;\n};\n\n/*\n  Return true if a is strictly greater than b.\n  >>> monotonic([4, 1, 0, 10])\n  true\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, 10])\n  false\n  */\n\nconst monotonicStrictGreaterThan = (l, a) => {\n  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2)) {\n    return true;\n  }\n  return false;\n};\n\n/*\n  Return true if a is strictly equal to b.\n  >>> monotonic([4, 1, 0, 10])\n  true\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, 10])\n  false\n  */\n\nconst monotonicStrictEqual = (l, a) => {\n  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2)) {\n    return true;\n  }\n  return false;\n};\n\n/*\n  Return true if a is strictly less than or equal to b.\n  >>> monotonic([4, 1, 0, 10])\n  true\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, 10])\n  false\n  */\n\nconst monotonicStrictLessThanOrEqual = (l, a) => {\n  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2)) {\n    return true;\n  }\n  return false;\n};\n\n/*\n  Return true if a is strictly greater than or equal to b.\n  >>> monotonic([4, 1, 0, 10])\n  true\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, 10])\n  false\n  */\n\nconst monotonicStrictGreaterThanOrEqual = (l, a) => {\n  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2)) {\n    return true;\n  }\n  return false;\n};\n\n/*\n  Return true if a is strictly equal to b.\n  >>> monotonic([4, 1, 0, 10])\n  true\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, 10])\n  false\n  */\n\nconst monotonicStrictEqual = (l, a) => {\n  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2)) {\n    return true;\n  }\n  return false;\n};\n\n/*\n  Return true if a is strictly less than b.\n  >>> monotonic([4, 1, 0, 10])\n  true\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, 10])\n  false\n  */\n\nconst monotonicStrictLessThan = (l, a) => {\n  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2)) {\n    return true;\n  }\n  return false;\n};\n\n/*\n  Return true if a is strictly greater than b.\n  >>> monotonic([4, 1, 0, 10])\n  true\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, 10])\n  false\n  */\n\nconst monotonicStrictGreaterThan = (l, a) => {\n  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2)) {\n    return true;\n  }\n  return false;\n};\n\n/*\n  Return true if a is strictly equal to b.\n  >>> monotonic([4, 1, 0, 10])\n  true\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, 10])\n  false\n  */\n\nconst monotonicStrictEqual = (l, a) => {\n  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2)) {\n    return true;\n  }\n  return false;\n};\n\n/*"}
{"task_id": "JavaScript/58", "prompt": "/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\n\nconst common = (l1, l2) => {\n  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n", "canonical_solution": "      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "partial": "/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      # print('@@this is the line to split##')\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "gc": "<|endoftext|>/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\n\nconst common = (l1, l2) => {\n  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 === e2) continue;\n      ret.add(e1);\n  return Array.from(ret);\n};\n\n/*\n  >>> list(['foo', 'bar', 'baz'])\n  [ 'foo', 'bar', 'baz' ]\n  >>> list(['foo', 'bar', 'baz'], 1)\n  [ 'foo', 'bar', 'baz' ]\n  >>> list(['foo', 'bar', 'baz'], 2)\n  [ 'foo', 'bar', 'baz' ]\n  >>> list(['foo', 'bar', 'baz'], 3)\n  [ 'foo', 'bar', 'baz' ]\n  >>> list(['foo', 'bar', 'baz'], 4)\n  [ 'foo', 'bar', 'baz' ]\n  >>> list(['foo', 'bar', 'baz'], 5)\n  [ 'foo', 'bar', 'baz' ]\n  >>> list(['foo', 'bar', 'baz'], 6)\n  [ 'foo', 'bar', 'baz' ]\n  >>> list(['foo', 'bar', 'baz'], 7)\n  [ 'foo', 'bar', 'baz' ]\n  >>> list(['foo', 'bar', 'baz'], 8)\n  [ 'foo', 'bar', 'baz' ]\n  >>> list(['foo', 'bar', 'baz'], 9)\n  [ 'foo', 'bar', 'baz' ]\n  >>> list(['foo', 'bar', 'baz'], 10)\n  [ 'foo', 'bar', 'baz' ]\n  >>> list(['foo', 'bar', 'baz'], 11)\n  [ 'foo', 'bar', 'baz' ]\n  >>> list(['foo', 'bar', 'baz'], 12)\n  [ 'foo', 'bar', 'baz' ]\n  >>> list(['foo', 'bar', 'baz'], 13)\n  [ 'foo', 'bar', 'baz' ]\n  >>> list(['foo', 'bar', 'baz'], 14)\n  [ 'foo', 'bar', 'baz' ]\n  >>> list(['foo', 'bar', 'baz'], 15)\n  [ 'foo', 'bar', 'baz' ]\n  >>> list(['foo', 'bar', 'baz'], 16)\n  [ 'foo', 'bar', 'baz' ]\n  >>> list(['foo', 'bar', 'baz'], 17)\n  [ 'foo', 'bar', 'baz' ]\n  >>> list(['foo', 'bar', 'baz'], 18)\n  [ 'foo', 'bar', 'baz' ]\n  >>> list(['foo', 'bar', 'baz'], 19)\n  [ 'foo', 'bar', 'baz' ]\n  >>> list(['foo', 'bar', 'baz'], 20)\n  [ 'foo', 'bar', 'baz' ]\n  >>> list(['foo', 'bar', 'baz'], 21)\n  [ 'foo', 'bar', 'baz' ]\n  >>> list(['foo', 'bar', 'baz'], 22)\n  [ 'foo', 'bar', 'baz' ]\n  >>> list(['foo', 'bar', 'baz'], 23)\n  [ 'foo', 'bar', 'baz' ]\n  >>> list(['foo', 'bar', 'baz'], 24)\n  [ 'foo', 'bar', 'baz' ]\n  >>> list(['foo', 'bar', 'baz'], 25)\n  [ 'foo', 'bar', 'baz' ]\n  >>> list(['foo', 'bar', 'baz'], 26)\n  [ 'foo', 'bar', 'baz' ]\n  >>> list(['foo', 'bar', 'baz'], 27)\n  [ 'foo', 'bar', 'baz' ]\n  >>> list(['foo', 'bar', 'baz'], 28)\n  [ 'foo', 'bar', 'baz' ]\n  >>> list(['foo', 'bar', 'baz'], 29)\n  [ 'foo', 'bar', 'baz' ]\n  >>> list(['foo', 'bar', 'baz'], 30)\n  [ 'foo', 'bar', 'baz' ]\n  >>> list(['foo', 'bar', 'baz'], 31)\n  [ 'foo', 'bar', 'baz' ]\n  >>> list(['foo', 'bar', 'baz'], 32)\n  [ 'foo', 'bar', 'baz' ]\n  >>> list(['foo', 'bar', 'baz'], 33)\n  [ 'foo', 'bar', 'baz' ]\n  >>> list(['foo', 'bar', 'baz'], 34)\n  [ 'foo', 'bar', 'baz' ]\n  >>> list(['foo', 'bar', 'baz'], 35)\n  [ 'foo', 'bar', 'baz' ]\n  >>> list(['foo', 'bar', 'baz'], 36)\n  [ 'foo', 'bar', 'baz' ]\n  >>> list(['foo', 'bar', 'baz'], 37)\n  [ 'foo', 'bar', 'baz' ]\n  >>> list(['foo', 'bar', 'baz'], 38)\n  [ 'foo', 'bar', 'baz' ]\n  >>> list(['foo', 'bar', 'baz'], 39)\n  [ 'foo', 'bar', 'baz' ]\n  >>> list(['foo', 'bar', 'baz'], 40)\n  [ 'foo', 'bar', 'baz' ]\n  >>> list(['foo', 'bar', 'baz'], 41)\n  [ 'foo', 'bar', 'baz' ]\n  >>> list(['foo', 'bar', 'baz'], 42)\n  [ 'foo', 'bar', 'baz' ]\n  >>> list(['foo', 'bar', 'baz'], 43)\n  [ 'foo', 'bar', 'baz' ]\n  >>> list(['foo', 'bar', 'baz'], 44)\n  [ 'foo', 'bar', 'baz' ]\n  >>> list(['foo', 'bar', 'baz'], 45)\n  [ 'foo', 'bar', 'baz' ]\n  >>> list(['foo', 'bar', 'baz'], 46)\n  [ 'foo', 'bar', 'baz' ]\n  >>> list(['foo', 'bar', 'baz'], 47)\n  [ 'foo', 'bar', 'baz' ]\n  >>> list(['foo', 'bar', 'baz'], 48)\n  [ 'foo', 'bar', 'baz' ]\n  >>> list(['foo', 'bar', 'baz'], 49)\n  [ 'foo', 'bar', 'baz' ]\n  >>> list(['foo', 'bar', 'baz'], 50)\n  [ 'foo', 'bar', 'baz' ]\n  >>> list(['foo', 'bar', 'baz'], 51)\n  [ 'foo', 'bar', 'baz' ]\n  >>> list(['foo', 'bar', 'baz'], 52)\n  [ 'foo', 'bar', 'baz' ]\n  >>> list(['foo', 'bar', 'baz'], 53)\n  [ 'foo', 'bar', 'baz' ]\n  >>> list(['foo', 'bar', 'baz'], 54)\n  [ 'foo', 'bar', 'baz' ]\n  >>> list(['foo', 'bar', 'baz'], 55)\n  [ 'foo', 'bar', 'baz' ]\n  >>> list(['foo', 'bar', 'baz'], 56)\n  [ 'foo', 'bar', 'baz' ]\n  >>> list(['foo', 'bar', 'baz'], 57)\n  [ 'foo', 'bar', 'baz' ]\n  >>> list(['foo', 'bar', 'baz'], 58)\n  [ 'foo', 'bar', 'baz' ]\n  >>> list(['foo', 'bar', 'baz'], 59)\n  [ 'foo', 'bar', 'baz' ]\n  >>> list(['foo', 'bar', 'baz'], 60)\n  [ 'foo', 'bar', 'baz' ]\n  >>> list(['foo', 'bar', 'baz'], 61)\n  [ 'foo', 'bar', 'baz' ]\n  >>> list(['foo', 'bar', 'baz'], 62)\n  [ 'foo', 'bar', 'baz' ]\n  >>> list(['foo', 'bar"}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\n\nconst largestPrimeFactor = (n) => {\n  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n", "canonical_solution": "  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "partial": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n    # print('@@this is the line to split##')\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "gc": "<|endoftext|>/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\n\nconst largestPrimeFactor = (n) => {\n  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  };\n\n  var factors = [];\n  var i = 1;\n  while (isPrime(i)) {\n    factors.push(i);\n    i++;\n  }\n  return factors[factors.length - 1];\n};\n\n/*\n  Given a number n, return true if it is a prime number.\n  >>> isPrime(13195)\n  true\n  >>> isPrime(2048)\n  false\n  */\n\nconst isPrime = (n) => {\n  if (n < 2)\n    return false;\n  if (n % 2 == 0)\n    return false;\n  for (var i = 2; i < n; i++) {\n    if (n % i == 0)\n      return false;\n  }\n  return true;\n};\n\n/*\n  Given a number n, return true if it is a palindrome.\n  >>> isPalindrome(13195)\n  true\n  >>> isPalindrome(2048)\n  false\n  */\n\nconst isPalindrome = (n) => {\n  if (n < 2)\n    return false;\n  if (n % 2 == 0)\n    return false;\n  var reversedString = \"\";\n  for (var i = n; i > 1; i--) {\n    reversedString += i;\n  }\n  return reversedString == reversedString.toLowerCase();\n};\n\n/*\n  Given a string s, return true if it is a palindrome.\n  >>> isPalindrome(\"hello\")\n  true\n  >>> isPalindrome(\"world\")\n  false\n  */\n\nconst isPalindrome = (s) => {\n  if (s == null || s.length < 1)\n    return false;\n  var reversedString = \"\";\n  for (var i = s.length - 1; i >= 0; i--) {\n    reversedString += s[i];\n  }\n  return reversedString == reversedString.toLowerCase();\n};\n\n/*\n  Given a string s, return true if it is a palindrome.\n  >>> isPalindrome(\"hello\")\n  true\n  >>> isPalindrome(\"world\")\n  false\n  */\n\nconst isPalindrome = (s) => {\n  if (s == null || s.length < 1)\n    return false;\n  var reversedString = \"\";\n  for (var i = s.length - 1; i >= 0; i--) {\n    reversedString += s[i];\n  }\n  return reversedString == reversedString.toLowerCase();\n};\n\n/*\n  Given a string s, return true if it is a palindrome.\n  >>> isPalindrome(\"hello\")\n  true\n  >>> isPalindrome(\"world\")\n  false\n  */\n\nconst isPalindrome = (s) => {\n  if (s == null || s.length < 1)\n    return false;\n  var reversedString = \"\";\n  for (var i = s.length - 1; i >= 0; i--) {\n    reversedString += s[i];\n  }\n  return reversedString == reversedString.toLowerCase();\n};\n\n/*\n  Given a string s, return true if it is a palindrome.\n  >>> isPalindrome(\"hello\")\n  true\n  >>> isPalindrome(\"world\")\n  false\n  */\n\nconst isPalindrome = (s) => {\n  if (s == null || s.length < 1)\n    return false;\n  var reversedString = \"\";\n  for (var i = s.length - 1; i >= 0; i--) {\n    reversedString += s[i];\n  }\n  return reversedString == reversedString.toLowerCase();\n};\n\n/*\n  Given a string s, return true if it is a palindrome.\n  >>> isPalindrome(\"hello\")\n  true\n  >>> isPalindrome(\"world\")\n  false\n  */\n\nconst isPalindrome = (s) => {\n  if (s == null || s.length < 1)\n    return false;\n  var reversedString = \"\";\n  for (var i = s.length - 1; i >= 0; i--) {\n    reversedString += s[i];\n  }\n  return reversedString == reversedString.toLowerCase();\n};\n\n/*\n  Given a string s, return true if it is a palindrome.\n  >>> isPalindrome(\"hello\")\n  true\n  >>> isPalindrome(\"world\")\n  false\n  */\n\nconst isPalindrome = (s) => {\n  if (s == null || s.length < 1)\n    return false;\n  var reversedString = \"\";\n  for (var i = s.length - 1; i >= 0; i--) {\n    reversedString += s[i];\n  }\n  return reversedString == reversedString.toLowerCase();\n};\n\n/*\n  Given a string s, return true if it is a palindrome.\n  >>> isPalindrome(\"hello\")\n  true\n  >>> isPalindrome(\"world\")\n  false\n  */\n\nconst isPalindrome = (s) => {\n  if (s == null || s.length < 1)\n    return false;\n  var reversedString = \"\";\n  for (var i = s.length - 1; i >= 0; i--) {\n    reversedString += s[i];\n  }\n  return reversedString == reversedString.toLowerCase();\n};\n\n/*\n  Given a string s, return true if it is a palindrome.\n  >>> isPalindrome(\"hello\")\n  true\n  >>> isPalindrome(\"world\")\n  false\n  */\n\nconst isPalindrome = (s) => {\n  if (s == null || s.length < 1)\n    return false;\n  var reversedString = \"\";\n  for (var i = s.length - 1; i >= 0; i--) {\n    reversedString += s[i];\n  }\n  return reversedString == reversedString.toLowerCase();\n};\n\n/*\n  Given a string s, return true if it is a palindrome.\n  >>> isPalindrome(\"hello\")\n  true\n  >>> isPalindrome(\"world\")\n  false\n  */\n\nconst isPalindrome = (s) => {\n  if (s == null || s.length < 1)\n    return false;\n  var reversedString = \"\";\n  for (var i = s.length - 1; i >= 0; i--) {\n    reversedString += s[i];\n  }\n  return reversedString == reversedString.toLowerCase();\n};\n\n/*\n  Given a string s, return true if it is a palindrome.\n  >>> isPalindrome(\"hello\")\n  true\n  >>> isPalindrome(\"world\")\n  false\n  */\n\nconst isPalindrome = (s) => {\n  if (s == null || s.length < 1)\n    return false;\n  var reversedString = \"\";\n  for (var i = s.length - 1; i >= 0; i--) {\n    reversedString += s[i];\n  }\n  return reversedString == reversedString.toLowerCase();\n};\n\n/*\n  Given a string s, return true if it is a palindrome.\n  >>> isPalindrome(\"hello\")\n  true\n  >>> isPalindrome(\"world\")\n  false\n  */\n\nconst isPalindrome = (s) => {\n  if (s == null || s.length < 1)\n    return false;\n  var reversedString = \"\";\n  for (var i = s.length - 1; i >= 0; i--) {\n    reversedString += s[i];\n  }\n  return reversedString == reversedString.toLowerCase();\n};\n\n/*\n  Given a string s, return true if it is a palindrome.\n  >>> isPalindrome(\"hello\")\n  true\n  >>> isPalindrome(\"world\")\n  false\n  */\n\nconst isPalindrome = (s) => {\n  if (s == null || s.length < 1)\n    return false;\n  var reversedString = \"\";\n  for (var i = s.length - 1; i >= 0; i--) {\n    reversedString += s[i];\n  }\n  return reversedString == reversedString.toLowerCase();\n};\n\n/*\n  Given a string s, return true if it is a palindrome.\n  >>> isPalindrome(\"hello\")"}
{"task_id": "JavaScript/60", "prompt": "/*sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\n\nconst sumToN = (n) => {\n  return n * (n + 1) / 2;\n", "canonical_solution": "}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "partial": "/*sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  return n * (n + 1) / 2;\n  # print('@@this is the line to split##')\n}\n\n", "gc": "<|endoftext|>/*sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\n\nconst sumToN = (n) => {\n  return n * (n + 1) / 2;\n};\n\nmodule.exports = sumToN;\n\n},{}],6:[function(require,module,exports){\n/*\n  A simple JavaScript implementation of the RSA Data Security, Inc. MD5 Message\n  Digest Algorithm, as defined in RFC 1321.\n\n  Copyright (C) 2006 Jo-Philipp Wich <removed@example.com>\n\n  Permission is hereby granted, free of charge, to any person obtaining\n  a copy of this software and associated documentation files (the\n  \"Software\"), to deal in the Software without restriction, including\n  without limitation the rights to use, copy, modify, merge, publish,\n  distribute, sublicense, and/or sell copies of the Software, and to\n  permit persons to whom the Software is furnished to do so, subject to\n  the following conditions:\n\n  The above copyright notice and this permission notice shall be\n  included in all copies or substantial portions of the Software.\n\n  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n  LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n  OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n  WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n*/\n\nconst MD5 = (function () {\n  // private property\n  var _key = [\n    0x428A2F98,0x71374491,0xB5C0FBCF,0xE9B5DBA5,0x3956C25B,0x59F111F1,0x923F82A4,0xAB1C5ED5,\n    0xD807AA98,0x12835B01,0x243185BE,0x550C7DC3,0x72BE5D74,0x80DEB1FE,0x9BDC06A7,0xC19BF174,\n    0xE49B69C1,0xEFBE4786,0xFC19DC6,0x240CA1CC,0x2DE92C6F,0x4A7484AA,0x5CB0A9DC,0x76F988DA,\n    0x983E5152,0xA831C66D,0xB00327C8,0xBF597FC7,0xC6E00BF3,0xD5A79147,0x06CA6351,0x14292967,\n    0x27B70A85,0x2E1B2138,0x4D2C6DFC,0x53380D13,0x650A7354,0x766A0ABB,0x81C2C92E,0x92722C85,\n    0xA2BFE8A1,0xA81A664B,0xC24B8B70,0xC76C51A3,0xD192E819, 0xD6990624,0xF40E3585,0x106AA070,\n    0x19A4C116,0x1E376C08,0x2748774C,0x34B0BCB5,0x391C0CB3,0x4ED8AA4A,0x5B9CCA4F,0x682E6FF3,\n    0x748F82EE,0x78A5636F,0x84C87814,0x8CC70208,0x90BEFFFA, 0xA4506CEB,0xBEF9A3F7,0xC67178F2\n  ];\n\n  // public method for creating a new md5 object\n  function MD5() {\n    // initialize hash\n    this._h = undefined;\n    // reset state\n    this._s = undefined;\n    // number of bits in hash\n    this._b = undefined;\n    // temporary buffer for chunksize\n    this._buffer = new ArrayBuffer(64);\n    // number of bits in buffer\n    this._bbuf = undefined;\n    // offset of buffer within buffer\n    this._offset = undefined;\n    // number of bits in buffer after offset\n    this._ofs = undefined;\n    // intialize hash value for this chunk\n    this._value = undefined;\n  }\n\n  MD5.prototype = {\n    update: function (data) {\n      var i, j, l, tmp, t, h0, h1, h2, h3, h4, bits, buf, buflen, c, bufpos, len;\n\n      // get input buffer length\n      buflen = data.length;\n      // allocate memory for chunk\n      buf = new Uint8Array(this._buffer);\n      // initialize hash value for this chunk\n      this._value = undefined;\n      // reset state\n      this._s = undefined;\n      // number of bits in hash\n      this._b = undefined;\n      // initialize hash state (for first chunk) or first time\n      if (!this._bbuf) {\n        this._bbuf = new Uint8Array(this._buffer);\n        this._bbuf[0] = 0x67452301;\n        this._bbuf[1] = 0xEFCDAB89;\n        this._bbuf[2] = 0x98BADCFE;\n        this._bbuf[3] = 0x10325476;\n        this._bbuf[4] = 0xC3D2E1F0;\n        this._bbuf[5] = 0xEBE5C2D6;\n        this._bbuf[6] = 0x243185BE;\n        this._bbuf[7] = 0x550C7DC3;\n        this._bbuf[8] = 0x72BE5D74;\n        this._bbuf[9] = 0x80DEB1FE;\n        this._bbuf[10] = 0x9BDC06A7;\n        this._bbuf[11] = 0xC19BF174;\n        this._bbuf[12] = 0xE49B69C1;\n        this._bbuf[13] = 0xEFBE4786;\n        this._bbuf[14] = 0xFC19DC6;\n        this._bbuf[15] = 0x240CA1CC;\n        this._bbuf[16] = 0x2DE92C6F;\n        this._bbuf[17] = 0x4A7484AA;\n        this._bbuf[18] = 0x5CB0A9DC;\n        this._bbuf[19] = 0x76F988DA;\n        this._bbuf[20] = 0x983E5152;\n        this._bbuf[21] = 0xA831C66D;\n        this._bbuf[22] = 0xB00327C8;\n        this._bbuf[23] = 0xBF597FC7;\n        this._bbuf[24] = 0xC6E00BF3;\n        this._bbuf[25] = 0xD5A79147;\n        this._bbuf[26] = 0x06CA6351;\n        this._bbuf[27] = 0x14292967;\n        this._bbuf[28] = 0x27B70A85;\n        this._bbuf[29] = 0x2E1B2138;\n        this._bbuf[30] = 0x4D2C6DFC;\n        this._bbuf[31] = 0x53380D13;\n        this._bbuf[32] = 0x650A7354;\n        this._bbuf[33] = 0x766A0ABB;\n        this._bbuf[34] = 0x81C2C92E;\n        this._bbuf[35] = 0x92722C85;\n        this._bbuf[36] = 0xA2BFE8A1;\n        this._bbuf[37] = 0xA81A664B;\n        this._bbuf[38] = 0xC24B8B70;\n        this._bbuf[39] = 0xC76C51A3;\n        this._bbuf[40] = 0xD192E819;\n        this._bbuf[41] = 0xD6990624;\n        this._bbuf[42] = 0xF40E3585;\n        this._bbuf[43] = 0x106AA070;\n        this._bbuf[44] = 0x19A4C116;\n        this._bbuf[45] = 0x1E376C08;\n        this._bbuf[46] = 0x2748774C;\n        this._bbuf[47] = 0x34B0BCB5;\n        this._bbuf[48] = 0x391C0CB3;\n        this._bbuf[49] = 0x4ED8AA4A;\n        this._bbuf[50] = 0x5B9CCA4F;\n        this._bbuf[51] = 0x682E6FF3;\n        this._bbuf[52] = 0x748F82"}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\n\nconst correctBracketing = (brackets) => {\n  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n", "canonical_solution": "      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "partial": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      # print('@@this is the line to split##')\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "gc": "<|endoftext|>/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\n\nconst correctBracketing = (brackets) => {\n  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth == 0)\n      return false;\n  }\n  return true;\n};\n\nmodule.exports = correctBracketing;\n\n},{}],27:[function(require,module,exports){\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\nconst util = require('util');\n\nconst Readable = require('stream').Readable;\nconst Writable = require('stream').Writable;\n\nconst inherits = require('util').inherits;\n\nconst BUFFER = Symbol('buffer');\nconst TYPE = Symbol('type');\n\n// Supported data types\nconst BYTE_LENGTH = 8;\nconst SHIFT_JIST = 1 << 7;\nconst SHIFT_RST = 1 << 6;\nconst SHIFT_WRN = 1 << 5;\nconst SHIFT_RST_WRN = 1 << 4;\nconst SHIFT_MASK = SHIFT_RST_WRN | SHIFT_WRN;\nconst SHIFT_SHIFT = SHIFT_RST_WRN | SHIFT_WRN;\nconst SHIFT_MASKED = SHIFT_RST_WRN | SHIFT_WRN | SHIFT_MASK;\nconst SHIFT_MASKED_SHIFT_MASK = SHIFT_RST_WRN | SHIFT_WRN | SHIFT_MASK | SHIFT_SHIFT;\nconst SHIFT_MASKED_SHIFT_MASKED = SHIFT_RST_WRN | SHIFT_WRN | SHIFT_MASK | SHIFT_SHIFT | SHIFT_MASKED;\nconst SHIFT_MASKED_SHIFT_MASKED_SHIFT_MASKED = SHIFT_RST_WRN | SHIFT_WRN | SHIFT_MASK | SHIFT_SHIFT | SHIFT_MASKED | SHIFT_MASKED_SHIFT_MASK | SHIFT_MASKED_SHIFT_MASKED;\nconst SHIFT_MASKED_SHIFT_MASKED_SHIFT_MASKED_SHIFT_MASKED = SHIFT_RST_WRN | SHIFT_WRN | SHIFT_MASK | SHIFT_SHIFT | SHIFT_MASKED | SHIFT_MASKED_SHIFT_MASK | SHIFT_MASKED_SHIFT_MASKED;\n\n// A readable stream that holds a buffer and emits data events as they are\n// read from the buffer.\nclass BufferStream extends Readable {\n  constructor(buffer) {\n    super();\n    this._buffer = buffer;\n    this._offset = 0;\n    this._length = 0;\n    this._closed = false;\n    this._readableState = {\n      objectMode: true,\n      highWaterMark: BYTE_LENGTH,\n      buffer: buffer,\n      length: 0,\n      pipes: null,\n      pipesCount: 0,\n      flowing: true,\n      ended: false,\n      endEmitted: false,\n      reading: false,\n      sync: false,\n      needReadable: false,\n      emittedReadable: false,\n      readableListening: false,\n      resumeScheduled: false,\n      defaultEncoding: 'utf8',\n      ranOut: false,\n      awaitDrain: 0,\n      readingMore: false,\n      decoder: null,\n      encoding: null\n    };\n  }\n\n  // the no-arg constructor function prevents errors\n  constructor() {\n    super();\n  }\n\n  // the Readable stream has one event that is \"readable\".\n  // When it emits a'readable' event it begins emitting data and\n  // the 'data' event is immediately fired indicating that data has been\n  // ready to emit.\n  emit(event, fn) {\n    const state = this._readableState;\n\n    if (state.length > 0)\n      state.emittedReadable = true;\n\n    if (typeof fn!== 'function')\n      throw new TypeError('\"fn\" argument must be a function');\n\n    const endEmitted = false;\n    const readableListening = () => {\n      if (!state.endEmitted) {\n        state.endEmitted = true;\n        process.nextTick(endReadableNT, this);\n      }\n    };\n\n    const endReadableNT = (err) => {\n      // Check that we didn't get one last unshift.\n      if (!state.endEmitted && state.length === 0) {\n        state.endEmitted = true;\n        process.nextTick(endReadableNT, this);\n      }\n      if (err) {\n        endEmitted = true;\n        throw err;\n      }\n    };\n\n    fn(endEmitted);\n\n    if (state.endEmitted)\n      process.nextTick(endReadableNT, this);\n  }\n\n  // the Readable stream has one event that is \"readable\".\n  // When it emits a'readable' event it begins emitting data and\n  // the 'data' event is immediately fired indicating that data has been\n  // ready to emit.\n  pause() {\n    super.pause();\n    this.emit('pause');\n  }\n\n  // the Readable stream has one event that is \"readable\".\n  // When it emits a'readable' event it begins emitting data and\n  // the 'data' event is immediately fired indicating that data has been\n  // ready to emit.\n  resume() {\n    super.resume();\n    this.emit('resume');\n  }\n\n  // the Readable stream has one event that is \"readable\".\n  // When it emits a'readable' event it begins emitting data and\n  // the 'data' event is immediately fired indicating that data has been\n  // ready to emit.\n  pipe() {\n    super.pipe.apply(this, arguments);\n    this.emit('pipe');\n  }\n\n  // the Readable stream has one event that is \"readable\".\n  // When it emits a'readable' event it begins emitting data and\n  // the 'data' event is immediately fired indicating that data has been\n  // ready to emit.\n  unpipe() {\n    super.unpipe.apply(this, arguments);\n    this.emit('unpipe');\n  }\n\n  // the Readable stream has one event that is \"readable\".\n  // When it emits a'readable' event it begins emitting data and\n  // the 'data' event is immediately fired indicating that data has been\n  // ready to emit.\n  unshift(chunk) {\n    super.unshift.apply(this, arguments);\n    this.emit('unshift', chunk);\n  }\n\n  // the Readable stream has one event that is \"readable\".\n  // When it emits a'readable' event it begins emitting data and\n  // the 'data' event is immediately fired indicating that data has been\n  // ready to emit.\n  push(chunk) {\n    super.push.apply(this, arguments);\n    this.emit('push', chunk);\n  }\n\n  // the Readable stream has one event that is \"readable\".\n  // When it emits a '"}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\n\nconst derivative = (xs) => {\n  return xs.map((x, i) => x * i).slice(1);\n", "canonical_solution": "}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "partial": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  return xs.map((x, i) => x * i).slice(1);\n  # print('@@this is the line to split##')\n}\n\n", "gc": "<|endoftext|>/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\n\nconst derivative = (xs) => {\n  return xs.map((x, i) => x * i).slice(1);\n};\n\nmodule.exports = derivative;\n\n},{}],4:[function(require,module,exports){\nconst { isArray } = Array;\n\nconst isNumber = (val) => typeof val === 'number';\n\nconst isString = (val) => typeof val ==='string';\n\nconst isBoolean = (val) => typeof val === 'boolean';\n\nconst isFunction = (val) => typeof val === 'function';\n\nconst isArrayOfNumbers = (val) => {\n  return isArray(val) && val.length === 3 && isNumber(val[0]) && isNumber(val[1]) && isNumber(val[2]);\n};\n\nconst isArrayOfStrings = (val) => {\n  return isArray(val) && val.length === 3 && isString(val[0]) && isString(val[1]) && isString(val[2]);\n};\n\nconst isArrayOfBooleans = (val) => {\n  return isArray(val) && val.length === 3 && isBoolean(val[0]) && isBoolean(val[1]) && isBoolean(val[2]);\n};\n\nconst isArrayOfFunctions = (val) => {\n  return isArray(val) && val.length === 3 && isFunction(val[0]) && isFunction(val[1]) && isFunction(val[2]);\n};\n\nconst isArrayOfArrays = (val) => {\n  return isArray(val) && val.length === 3 && isArray(val[0]) && isArray(val[1]) && isArray(val[2]);\n};\n\nconst isArrayOfObjects = (val) => {\n  return isArray(val) && val.length === 3 && isArray(val[0]) && isArray(val[1]) && isArray(val[2]) && isArray(val[3]);\n};\n\nconst isArrayOfArrayOfNumbers = (val) => {\n  return isArray(val) && val.length === 3 && isArray(val[0]) && isArray(val[1]) && isArray(val[2]) && isArray(val[3]) && isNumber(val[4]);\n};\n\nconst isArrayOfArrayOfStrings = (val) => {\n  return isArray(val) && val.length === 3 && isArray(val[0]) && isArray(val[1]) && isArray(val[2]) && isArray(val[3]) && isString(val[4]);\n};\n\nconst isArrayOfArrayOfBooleans = (val) => {\n  return isArray(val) && val.length === 3 && isArray(val[0]) && isArray(val[1]) && isArray(val[2]) && isArray(val[3]) && isBoolean(val[4]);\n};\n\nconst isArrayOfArrayOfFunctions = (val) => {\n  return isArray(val) && val.length === 3 && isArray(val[0]) && isArray(val[1]) && isArray(val[2]) && isArray(val[3]) && isFunction(val[4]);\n};\n\nconst isArrayOfArrayOfObjects = (val) => {\n  return isArray(val) && val.length === 3 && isArray(val[0]) && isArray(val[1]) && isArray(val[2]) && isArray(val[3]) && isArray(val[4]) && isObject(val[5]);\n};\n\nconst isArrayOfArrayOfArrayOfNumbers = (val) => {\n  return isArray(val) && val.length === 3 && isArray(val[0]) && isArray(val[1]) && isArray(val[2]) && isArray(val[3]) && isArray(val[4]) && isNumber(val[5]);\n};\n\nconst isArrayOfArrayOfArrayOfStrings = (val) => {\n  return isArray(val) && val.length === 3 && isArray(val[0]) && isArray(val[1]) && isArray(val[2]) && isArray(val[3]) && isArray(val[4]) && isString(val[5]);\n};\n\nconst isArrayOfArrayOfArrayOfBooleans = (val) => {\n  return isArray(val) && val.length === 3 && isArray(val[0]) && isArray(val[1]) && isArray(val[2]) && isArray(val[3]) && isArray(val[4]) && isBoolean(val[5]);\n};\n\nconst isArrayOfArrayOfArrayOfFunctions = (val) => {\n  return isArray(val) && val.length === 3 && isArray(val[0]) && isArray(val[1]) && isArray(val[2]) && isArray(val[3]) && isArray(val[4]) && isFunction(val[5]);\n};\n\nconst isArrayOfArrayOfArrayOfObjects = (val) => {\n  return isArray(val) && val.length === 3 && isArray(val[0]) && isArray(val[1]) && isArray(val[2]) && isArray(val[3]) && isArray(val[4]) && isArray(val[5]) && isObject(val[6]);\n};\n\nconst isArrayOfArrayOfArrayOfArrayOfNumbers = (val) => {\n  return isArray(val) && val.length === 3 && isArray(val[0]) && isArray(val[1]) && isArray(val[2]) && isArray(val[3]) && isArray(val[4]) && isArray(val[5]) && isNumber(val[6]);\n};\n\nconst isArrayOfArrayOfArrayOfArrayOfStrings = (val) => {\n  return isArray(val) && val.length === 3 && isArray(val[0]) && isArray(val[1]) && isArray(val[2]) && isArray(val[3]) && isArray(val[4]) && isArray(val[5]) && isString(val[6]);\n};\n\nconst isArrayOfArrayOfArrayOfArrayOfBooleans = (val) => {\n  return isArray(val) && val.length === 3 && isArray(val[0]) && isArray(val[1]) && isArray(val[2]) && isArray(val[3]) && isArray(val[4]) && isArray(val[5]) && isBoolean(val[6]);\n};\n\nconst isArrayOfArrayOfArrayOfArrayOfFunctions = (val) => {\n  return isArray(val) && val.length === 3 && isArray(val[0]) && isArray(val[1]) && isArray(val[2]) && isArray(val[3]) && isArray(val[4]) && isArray(val[5]) && isFunction(val[6]);\n};\n\nconst isArrayOfArrayOfArrayOfArrayOfObjects = (val) => {\n  return isArray(val) && val.length === 3 && isArray(val[0]) && isArray(val[1]) && isArray(val[2]) && isArray(val[3]) && isArray(val[4]) && isArray(val[5]) && isArray(val[6]) && isObject(val[7]);\n};\n\nconst isArrayOfArrayOfArrayOfArrayOfArrayOfNumbers = (val) => {\n  return isArray(val) && val.length === 3 && isArray(val[0]) && isArray(val[1]) && isArray(val[2]) && isArray(val[3]) && isArray(val[4]) && isArray(val[5]) && isArray(val[6]) && isNumber(val[7]);\n};\n\nconst isArrayOfArrayOfArrayOfArrayOfArrayOfStrings = (val) => {\n  return isArray(val) && val.length === 3 && isArray(val[0]) && isArray(val[1]) && isArray(val[2]) && isArray(val[3]) && isArray(val[4]) && isArray(val[5]) && isArray(val[6]) && isString(val[7]);\n};\n\nconst isArrayOfArrayOfArrayOfArrayOfArrayOfBooleans = (val) => {\n  return isArray(val) && val.length === 3 && isArray(val[0]) && isArray(val[1]) && isArray(val[2]) && isArray(val[3]) && isArray(val[4]) && isArray(val[5]) && isArray(val[6]) && isBoolean(val[7]);\n};\n\nconst isArrayOfArrayOfArrayOfArrayOfArrayOfFunctions = (val) => {\n  return isArray(val) && val.length === 3 && isArray(val[0]) && isArray(val[1]) && isArray(val[2]) && isArray(val[3]) && isArray(val[4]) && isArray(val[5]) && isArray(val[6]) && isFunction(val[7]);\n};\n\nconst isArrayOfArrayOfArrayOfArrayOfArrayOfObjects = (val) => {\n  return isArray(val) && val.length === 3 && isArray(val[0]) && isArray(val[1]) && isArray(val[2]) && isArray(val[3]) && isArray(val[4]) && isArray(val[5]) && isArray(val[6]) && isArray(val[7]) && isObject(val[8]);\n};\n\nconst isArrayOfArrayOfArrayOfArrayOfArrayOfNumbers = (val) => {\n  return isArray(val) && val.length === 3 && isArray(val[0]) && isArray(val[1]) && isArray(val[2]) && isArray(val[3]) && isArray(val[4]) && isArray(val[5]) && isArray(val[6]) && isArray(val[7]) && isNumber(val[8]);\n};\n\nconst isArrayOfArrayOfArrayOfArrayOfArrayOfStrings = (val) => {\n  return isArray(val) && val.length === 3 && isArray(val[0]) && isArray(val[1]) && isArray(val"}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\n\nconst fibfib = (n) => {\n  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n", "canonical_solution": "    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "partial": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    # print('@@this is the line to split##')\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "gc": "<|endoftext|>/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\n\nconst fibfib = (n) => {\n  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\nmodule.exports = fibfib;\n\n},{}],4:[function(require,module,exports){\n/*\n  A program to compute the Fibonacci number sequence using recursion.\n  A recursive function calls itself to compute the next Fibonacci number in the sequence.\n  A Fibonacci number sequence is defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 1\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  1\n  >>> fibfib(5)\n  5\n  >>> fibfib(8)\n  13\n  */\n\nconst fibfib = (n) => {\n  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\nmodule.exports = fibfib;\n\n},{}],5:[function(require,module,exports){\n/*\n  A program to compute the Fibonacci number sequence using recursion.\n  A recursive function calls itself to compute the next Fibonacci number in the sequence.\n  A Fibonacci number sequence is defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 1\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  1\n  >>> fibfib(5)\n  5\n  >>> fibfib(8)\n  13\n  */\n\nconst fibfib = (n) => {\n  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\nmodule.exports = fibfib;\n\n},{}],6:[function(require,module,exports){\n/*\n  A program to compute the Fibonacci number sequence using recursion.\n  A recursive function calls itself to compute the next Fibonacci number in the sequence.\n  A Fibonacci number sequence is defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 1\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  1\n  >>> fibfib(5)\n  5\n  >>> fibfib(8)\n  13\n  */\n\nconst fibfib = (n) => {\n  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\nmodule.exports = fibfib;\n\n},{}],7:[function(require,module,exports){\n/*\n  A program to compute the Fibonacci number sequence using recursion.\n  A recursive function calls itself to compute the next Fibonacci number in the sequence.\n  A Fibonacci number sequence is defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 1\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  1\n  >>> fibfib(5)\n  5\n  >>> fibfib(8)\n  13\n  */\n\nconst fibfib = (n) => {\n  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\nmodule.exports = fibfib;\n\n},{}],8:[function(require,module,exports){\n/*\n  A program to compute the Fibonacci number sequence using recursion.\n  A recursive function calls itself to compute the next Fibonacci number in the sequence.\n  A Fibonacci number sequence is defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 1\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  1\n  >>> fibfib(5)\n  5\n  >>> fibfib(8)\n  13\n  */\n\nconst fibfib = (n) => {\n  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\nmodule.exports = fibfib;\n\n},{}],9:[function(require,module,exports){\n/*\n  A program to compute the Fibonacci number sequence using recursion.\n  A recursive function calls itself to compute the next Fibonacci number in the sequence.\n  A Fibonacci number sequence is defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 1\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  1\n  >>> fibfib(5)\n  5\n  >>> fibfib(8)\n  13\n  */\n\nconst fibfib = (n) => {\n  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\nmodule.exports = fibfib;\n\n},{}],10:[function(require,module,exports){\n/*\n  A program to compute the Fibonacci number sequence using recursion.\n  A recursive function calls itself to compute the next Fibonacci number in the sequence.\n  A Fibonacci number sequence is defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 1\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  1\n  >>> fibfib(5)\n  5\n  >>> fibfib(8)\n  13\n  */\n\nconst fibfib = (n) => {\n  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\nmodule.exports = fibfib;\n\n},{}],"}
{"task_id": "JavaScript/64", "prompt": "/*Write a function vowelsCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\n\nconst vowelsCount = (s) => {\n  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n", "canonical_solution": "  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "partial": "/*Write a function vowelsCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  # print('@@this is the line to split##')\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "gc": "<|endoftext|>/*Write a function vowelsCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\n\nconst vowelsCount = (s) => {\n  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  return n_vowels;\n};\n\n/*Write a function wordCount which takes a string representing\n  a word as input and returns the number of words in the string.\n  Words in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  word, but only when it is at the end of the given word.\n\n  Example:\n  >>> wordCount(\"abcde\")\n  2\n  >>> wordCount(\"ACEDY\")\n  3\n  */\n\nconst wordCount = (s) => {\n  var n_words = s.split('').length;\n  return n_words;\n};\n\n/*Write a function wordLength which takes a string representing\n  a word as input and returns the number of characters in the string.\n  Words in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  word, but only when it is at the end of the given word.\n\n  Example:\n  >>> wordLength(\"abcde\")\n  2\n  >>> wordLength(\"ACEDY\")\n  3\n  */\n\nconst wordLength = (s) => {\n  var n_chars = s.split('').length;\n  return n_chars;\n};\n\n/*Write a function wordConcat which takes a string representing\n  a word as input and returns the concatenation of the given word\n  and all the words in the given string.\n\n  Example:\n  >>> wordConcat(\"abcde\", \"ACEDY\")\n  'abcdeACEDY'\n  */\n\nconst wordConcat = (s, w) => {\n  var n_words = wordCount(s);\n  var n_chars = wordLength(s);\n  var n_words = wordCount(w);\n  var n_chars = wordLength(w);\n  var n_words = wordCount(s);\n  var n_chars = wordLength(w);\n  var n_words = wordCount(s);\n  var n_chars = wordLength(w);\n  var n_words = wordCount(s);\n  var n_chars = wordLength(w);\n  var n_words = wordCount(s);\n  var n_chars = wordLength(w);\n  var n_words = wordCount(s);\n  var n_chars = wordLength(w);\n  var n_words = wordCount(s);\n  var n_chars = wordLength(w);\n  var n_words = wordCount(s);\n  var n_chars = wordLength(w);\n  var n_words = wordCount(s);\n  var n_chars = wordLength(w);\n  var n_words = wordCount(s);\n  var n_chars = wordLength(w);\n  var n_words = wordCount(s);\n  var n_chars = wordLength(w);\n  var n_words = wordCount(s);\n  var n_chars = wordLength(w);\n  var n_words = wordCount(s);\n  var n_chars = wordLength(w);\n  var n_words = wordCount(s);\n  var n_chars = wordLength(w);\n  var n_words = wordCount(s);\n  var n_chars = wordLength(w);\n  var n_words = wordCount(s);\n  var n_chars = wordLength(w);\n  var n_words = wordCount(s);\n  var n_chars = wordLength(w);\n  var n_words = wordCount(s);\n  var n_chars = wordLength(w);\n  var n_words = wordCount(s);\n  var n_chars = wordLength(w);\n  var n_words = wordCount(s);\n  var n_chars = wordLength(w);\n  var n_words = wordCount(s);\n  var n_chars = wordLength(w);\n  var n_words = wordCount(s);\n  var n_chars = wordLength(w);\n  var n_words = wordCount(s);\n  var n_chars = wordLength(w);\n  var n_words = wordCount(s);\n  var n_chars = wordLength(w);\n  var n_words = wordCount(s);\n  var n_chars = wordLength(w);\n  var n_words = wordCount(s);\n  var n_chars = wordLength(w);\n  var n_words = wordCount(s);\n  var n_chars = wordLength(w);\n  var n_words = wordCount(s);\n  var n_chars = wordLength(w);\n  var n_words = wordCount(s);\n  var n_chars = wordLength(w);\n  var n_words = wordCount(s);\n  var n_chars = wordLength(w);\n  var n_words = wordCount(s);\n  var n_chars = wordLength(w);\n  var n_words = wordCount(s);\n  var n_chars = wordLength(w);\n  var n_words = wordCount(s);\n  var n_chars = wordLength(w);\n  var n_words = wordCount(s);\n  var n_chars = wordLength(w);\n  var n_words = wordCount(s);\n  var n_chars = wordLength(w);\n  var n_words = wordCount(s);\n  var n_chars = wordLength(w);\n  var n_words = wordCount(s);\n  var n_chars = wordLength(w);\n  var n_words = wordCount(s);\n  var n_chars = wordLength(w);\n  var n_words = wordCount(s);\n  var n_chars = wordLength(w);\n  var n_words = wordCount(s);\n  var n_chars = wordLength(w);\n  var n_words = wordCount(s);\n  var n_chars = wordLength(w);\n  var n_words = wordCount(s);\n  var n_chars = wordLength(w);\n  var n_words = wordCount(s);\n  var n_chars = wordLength(w);\n  var n_words = wordCount(s);\n  var n_chars = wordLength(w);\n  var n_words = wordCount(s);\n  var n_chars = wordLength(w);\n  var n_words = wordCount(s);\n  var n_chars = wordLength(w);\n  var n_words = wordCount(s);\n  var n_chars = wordLength(w);\n  var n_words = wordCount(s);\n  var n_chars = wordLength(w);\n  var n_words = wordCount(s);\n  var n_chars = wordLength(w);\n  var n_words = wordCount(s);\n  var n_chars = wordLength(w);\n  var n_words = wordCount(s);\n  var n_chars = wordLength(w);\n  var n_words = wordCount(s);\n  var n_chars = wordLength(w);\n  var n_words = wordCount(s);\n  var n_chars = wordLength(w);\n  var n_words = wordCount(s);\n  var n_chars = wordLength(w);\n  var n_words = wordCount(s);\n  var n_chars = wordLength(w);\n  var n_words = wordCount(s);\n  var n_chars = wordLength(w);\n  var n_words = wordCount(s);\n  var n_chars = wordLength(w);\n  var n_words = wordCount(s);\n  var n_chars = wordLength(w);\n  var n_words = wordCount(s);\n  var n_chars = wordLength(w);\n  var n_words = wordCount(s);\n  var n_chars = wordLength(w);\n  var n_words = wordCount(s);\n  var n_chars = wordLength(w);\n  var n_words = wordCount(s);\n  var n_chars = wordLength(w);\n  var n_words = wordCount(s);\n  var n_chars = wordLength(w);\n  var n_words = wordCount(s);\n  var n_chars = wordLength(w);\n  var n_words = wordCount(s);\n  var n_chars = wordLength(w);\n  var n_words = wordCount(s);\n  var n_chars = wordLength(w);\n  var n_words = wordCount(s);\n  var n_chars = wordLength(w);\n  var n_words = wordCount(s);\n  var n_chars = wordLength(w);\n  var n_words = wordCount(s);\n  var n_chars = wordLength(w);"}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\n\nconst circularShift = (x, shift) => {\n  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n", "canonical_solution": "  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "partial": "/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n    # print('@@this is the line to split##')\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "gc": "<|endoftext|>/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\n\nconst circularShift = (x, shift) => {\n  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.split('').reverse().slice(shift).join('');\n};\n\n/*\n  Convert a number to a string in base 10.\n  >>> toBase10(123)\n  \"100\"\n  >>> toBase10(123)\n  \"1000\"\n  >>> toBase10(123)\n  \"10000\"\n  >>> toBase10(123)\n  \"100000\"\n  >>> toBase10(123)\n  \"1000000\"\n  >>> toBase10(123)\n  \"10000000\"\n  >>> toBase10(123)\n  \"100000000\"\n  >>> toBase10(123)\n  \"1000000000\"\n  >>> toBase10(123)\n  \"10000000000\"\n  >>> toBase10(123)\n  \"100000000000\"\n  >>> toBase10(123)\n  \"1000000000000\"\n  >>> toBase10(123)\n  \"100000000000000\"\n  >>> toBase10(123)\n  \"1000000000000000\"\n  >>> toBase10(123)\n  \"10000000000000000\"\n  >>> toBase10(123)\n  \"100000000000000000\"\n  >>> toBase10(123)\n  \"1000000000000000000\"\n  >>> toBase10(123)\n  \"10000000000000000000\"\n  >>> toBase10(123)\n  \"100000000000000000000\"\n  >>> toBase10(123)\n  \"1000000000000000000000\"\n  >>> toBase10(123)\n  \"10000000000000000000000\"\n  >>> toBase10(123)\n  \"100000000000000000000000\"\n  >>> toBase10(123)\n  \"1000000000000000000000000\"\n  >>> toBase10(123)\n  \"10000000000000000000000000\"\n  >>> toBase10(123)\n  \"100000000000000000000000000\"\n  >>> toBase10(123)\n  \"1000000000000000000000000000\"\n  >>> toBase10(123)\n  \"10000000000000000000000000000\"\n  >>> toBase10(123)\n  \"100000000000000000000000000000\"\n  >>> toBase10(123)\n  \"1000000000000000000000000000000\"\n  >>> toBase10(123)\n  \"10000000000000000000000000000000\"\n  >>> toBase10(123)\n  \"100000000000000000000000000000000\"\n  >>> toBase10(123)\n  \"1000000000000000000000000000000000\"\n  >>> toBase10(123)\n  \"10000000000000000000000000000000000\"\n  >>> toBase10(123)\n  \"100000000000000000000000000000000000\"\n  >>> toBase10(123)\n  \"1000000000000000000000000000000000000\"\n  >>> toBase10(123)\n  \"1000000000000000000000000000000000\"\n  >>> toBase10(123)\n  \"10000000000000000000000000000000000\"\n  >>> toBase10(123)\n  \"100000000000000000000000000000000000\"\n  >>> toBase10(123)\n  \"1000000000000000000000000000000000000\"\n  >>> toBase10(123)\n  \"10000000000000000000000000000000000000\"\n  >>> toBase10(123)\n  \"100000000000000000000000000000000000000\"\n  >>> toBase10(123)\n  \"1000000000000000000000000000000000000000\"\n  >>> toBase10(123)\n  \"10000000000000000000000000000000000000000\"\n  >>> toBase10(123)\n  \"100000000000000000000000000000000000000000\"\n  >>> toBase10(123)\n  \"1000000000000000000000000000000000000000000\"\n  >>> toBase10(123)\n  \"10000000000000000000000000000000000000000000\"\n  >>> toBase10(123)\n  \"100000000000000000000000000000000000000000000\"\n  >>> toBase10(123)\n  \"1000000000000000000000000000000000000000000000\"\n  >>> toBase10(123)\n  \"10000000000000000000000000000000000000000000000\"\n  >>> toBase10(123)\n  \"100000000000000000000000000000000000000000000000\"\n  >>> toBase10(123)\n  \"1000000000000000000000000000000000000000000000000\"\n  >>> toBase10(123)\n  \"10000000000000000000000000000000000000000000000000\"\n  >>> toBase10(123)\n  \"100000000000000000000000000000000000000000000000000\"\n  >>> toBase10(123)\n  \"1000000000000000000000000000000000000000000000000000\"\n  >>> toBase10(123)\n  \"10000000000000000000000000000000000000000000000000000\"\n  >>> toBase10(123)\n  \"100000000000000000000000000000000000000000000000000000\"\n  >>> toBase10(123)\n  \"10000000000000000000000000000000000000000000000\"\n  >>> toBase10(123)\n  \"100000000000000000000000000000000000000000000000\"\n  >>> toBase10(123)\n  \"1000000000000000000000000000000000000000000000000\"\n  >>> toBase10(123)\n  \"10000000000000000000000000000000000000000000000000\"\n  >>> toBase10(123)\n  \"100000000000000000000000000000000000000000000000000\"\n  >>> toBase10(123)\n  \"1000000000000000000000000000000000000000000000000000\"\n  >>> toBase10(123)\n  \"10000000000000000000000000000000000000000000000000000\"\n  >>> toBase10(123)\n  \"100000000000000000000000000000000000000000000000000000\"\n  >>> toBase10(123)\n  \"1000000000000000000000000000000000000000000000000000000\"\n  >>> toBase10(123)\n  \"10000000000000000000000000000000000000000000000000000000\"\n  >>> toBase10(123)\n  \"100000000000000000000000000000000000000000000000000000000\"\n  >>> toBase10(123)\n  \"1000000000000000000000000000000000000000000000000000000000\"\n  >>> toBase10(123)\n  \"10000000000000000000000000000000000000000000000000000000000\"\n  >>> toBase10(123)\n  \"1000000000000000000000000000000000000000000000000000\"\n  >>> toBase10(123)\n  \"10000000000000000000000000000000000000000000000000000\"\n  >>> toBase10(123)\n  \"100000000000000000000000000000000000000000000000000000\"\n  >>> toBase10(123)\n  \"1000000000000000000000000000000000000000000000000000000\"\n  >>> toBase10(123)\n  \"10000000000000000000000000000000000000000000000000000000\"\n  >>> toBase10(123)\n  \"100000000000000000000000000000000000000000000000000000000\"\n  >>> toBase10(123)\n  \"1000000000000000000000000000000000000000000000000000000000\"\n  >>> toBase10(123)\n  \"10000000000000000000000000000000000000000000000000000000000\"\n  >>> toBase10(123)\n  \"1000000000000000000000000000000000000000000000000000\"\n  >>> toBase10(123)\n  \"10000000000000000000000000000000000000000000000000000\"\n  >>> toBase10(123)\n  \"100000000000000000000000000000000000000000000000000000\"\n  >>> toBase10(123)\n  \"1000000000000000000000000000000000000000000000000000000\"\n  >>> toBase10(123)\n  \"10000000000000000000000000000000000000000000000000000000\"\n  >>> toBase10(123)\n  \"100000000000000000000000000000000000000000000000000000000\"\n  >>> toBase10(123)\n  \"1000000000000000000000000000000000000000000000000000000000\"\n  >>> toBase10(123)\n  \"10000000000000000000000000000000000000000000000000000000000\"\n  >>> toBase10(123)\n  \"100000000000000000000000000000000000000000000000000000000000\"\n  >>> "}
{"task_id": "JavaScript/66", "prompt": "/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\n\nconst digitSum = (s) => {\n  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n", "canonical_solution": "    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "partial": "/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    # print('@@this is the line to split##')\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "gc": "<|endoftext|>/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\n\nconst digitSum = (s) => {\n  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + ord_char;\n  }, 0);\n}\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the lower characters only'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\n\nconst digitSumLower = (s) => {\n  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + ord_char;\n  }, 0);\n}\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the digits only'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\n\nconst digitSumDigits = (s) => {\n  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + ord_char;\n  }, 0);\n}\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the uppercase and lowercase letters'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\n\nconst digitSumLetters = (s) => {\n  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + ord_char;\n  }, 0);\n}\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the uppercase and lowercase letters'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\n\nconst digitSumLettersLower = (s) => {\n  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + ord_char;\n  }, 0);\n}\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the uppercase and lowercase letters'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\n\nconst digitSumLettersDigits = (s) => {\n  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + ord_char;\n  }, 0);\n}\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the uppercase and lowercase letters'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\n\nconst digitSumLettersDigitsLower = (s) => {\n  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + ord_char;\n  }, 0);\n}\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the uppercase and lowercase letters'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\n\nconst digitSumLettersDigitsLowerDigits = (s) => {\n  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + ord_char;\n  }, 0);\n}\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the uppercase and lowercase letters'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\n\nconst digitSumLettersDigitsLowerDigitsDigits = (s) => {\n  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + ord_char;\n  }, 0);\n}\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the uppercase and lowercase letters'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\n\nconst digitSumLettersDigitsLowerDigitsDigitsDigits = (s) => {\n  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + ord_char;\n  }, 0);\n}\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the uppercase and lowercase letters'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => "}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\n\nconst fruitDistribution = (s, n) => {\n  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n", "canonical_solution": "      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "partial": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      # print('@@this is the line to split##')\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "gc": "<|endoftext|>/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\n\nconst fruitDistribution = (s, n) => {\n  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(parseInt(i));\n  return n - lis.reduce((a, b) => a + b, 0);\n};\n\nconsole.log(fruitDistribution(\"5 apples and 6 oranges\", 19));\nconsole.log(fruitDistribution(\"0 apples and 1 oranges\",3));\nconsole.log(fruitDistribution(\"2 apples and 3 oranges\", 100));\nconsole.log(fruitDistribution(\"100 apples and 1 oranges\",120));\n\n/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\n\nconst fruitDistribution = (s, n) => {\n  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(parseInt(i));\n  return n - lis.reduce((a, b) => a + b, 0);\n};\n\nconsole.log(fruitDistribution(\"5 apples and 6 oranges\", 19));\nconsole.log(fruitDistribution(\"0 apples and 1 oranges\",3));\nconsole.log(fruitDistribution(\"2 apples and 3 oranges\", 100));\nconsole.log(fruitDistribution(\"100 apples and 1 oranges\",120));\n\n/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\n\nconst fruitDistribution = (s, n) => {\n  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(parseInt(i));\n  return n - lis.reduce((a, b) => a + b, 0);\n};\n\nconsole.log(fruitDistribution(\"5 apples and 6 oranges\", 19));\nconsole.log(fruitDistribution(\"0 apples and 1 oranges\",3));\nconsole.log(fruitDistribution(\"2 apples and 3 oranges\", 100));\nconsole.log(fruitDistribution(\"100 apples and 1 oranges\",120));\n\n/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\n\nconst fruitDistribution = (s, n) => {\n  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(parseInt(i));\n  return n - lis.reduce((a, b) => a + b, 0);\n};\n\nconsole.log(fruitDistribution(\"5 apples and 6 oranges\", 19));\nconsole.log(fruitDistribution(\"0 apples and 1 oranges\",3));\nconsole.log(fruitDistribution(\"2 apples and 3 oranges\", 100));\nconsole.log(fruitDistribution(\"100 apples and 1 oranges\",120));\n\n/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\n\nconst fruitDistribution = (s, n) => {\n  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(parseInt(i));\n  return n - lis.reduce((a, b) => a + b, 0);\n};\n\nconsole.log(fruitDistribution(\"5 apples and 6 oranges\", 19));\nconsole.log(fruitDistribution(\"0 apples and 1 oranges\",3));\nconsole.log(fruitDistribution(\"2 apples and 3 oranges\", 100));\nconsole.log(fruitDistribution(\"100 apples and 1 oranges\",120));\n\n/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\n\nconst fruitDistribution = (s, n) => {\n  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!"}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\n\nconst pluck = (arr) => {\n  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n", "canonical_solution": "  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "partial": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  # print('@@this is the line to split##')\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "gc": "<|endoftext|>/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\n\nconst pluck = (arr) => {\n  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  var smallest = evens[0];\n  var smallestIndex = evens.indexOf(smallest);\n  evens.forEach((value, index) => {\n    if (smallestIndex == index) {\n      smallest = value;\n      smallestIndex = index;\n    }\n  });\n  return [smallest, smallestIndex];\n};\n\n// console.log(pluck([4,2,3]));\n// console.log(pluck([1,2,3]));\n// console.log(pluck([]));\n// console.log(pluck([5, 0, 3, 0, 4, 2]));\n// console.log(pluck([5, 0, 3, 0, 4, 2]));\n// console.log(pluck([5, 0, 3, 0, 4, 2]));\n// console.log(pluck([5, 0, 3, 0, 4, 2]));\n// console.log(pluck([5, 0, 3, 0, 4, 2]));\n// console.log(pluck([5, 0, 3, 0, 4, 2]));\n// console.log(pluck([5, 0, 3, 0, 4, 2]));\n// console.log(pluck([5, 0, 3, 0, 4, 2]));\n// console.log(pluck([5, 0, 3, 0, 4, 2]));\n// console.log(pluck([5, 0, 3, 0, 4, 2]));\n// console.log(pluck([5, 0, 3, 0, 4, 2]));\n// console.log(pluck([5, 0, 3, 0, 4, 2]));\n// console.log(pluck([5, 0, 3, 0, 4, 2]));\n// console.log(pluck([5, 0, 3, 0, 4, 2]));\n// console.log(pluck([5, 0, 3, 0, 4, 2]));\n// console.log(pluck([5, 0, 3, 0, 4, 2]));\n// console.log(pluck([5, 0, 3, 0, 4, 2]));\n// console.log(pluck([5, 0, 3, 0, 4, 2]));\n// console.log(pluck([5, 0, 3, 0, 4, 2]));\n// console.log(pluck([5, 0, 3, 0, 4, 2]));\n// console.log(pluck([5, 0, 3, 0, 4, 2]));\n// console.log(pluck([5, 0, 3, 0, 4, 2]));\n// console.log(pluck([5, 0, 3, 0, 4, 2]));\n// console.log(pluck([5, 0, 3, 0, 4, 2]));\n// console.log(pluck([5, 0, 3, 0, 4, 2]));\n// console.log(pluck([5, 0, 3, 0, 4, 2]));\n// console.log(pluck([5, 0, 3, 0, 4, 2]));\n// console.log(pluck([5, 0, 3, 0, 4, 2]));\n// console.log(pluck([5, 0, 3, 0, 4, 2]));\n// console.log(pluck([5, 0, 3, 0, 4, 2]));\n// console.log(pluck([5, 0, 3, 0, 4, 2]));\n// console.log(pluck([5, 0, 3, 0, 4, 2]));\n// console.log(pluck([5, 0, 3, 0, 4, 2]));\n// console.log(pluck([5, 0, 3, 0, 4, 2]));\n// console.log(pluck([5, 0, 3, 0, 4, 2]));\n// console.log(pluck([5, 0, 3, 0, 4, 2]));\n// console.log(pluck([5, 0, 3, 0, 4, 2]));\n// console.log(pluck([5, 0, 3, 0, 4, 2]));\n// console.log(pluck([5, 0, 3, 0, 4, 2]));\n// console.log(pluck([5, 0, 3, 0, 4, 2]));\n// console.log(pluck([5, 0, 3, 0, 4, 2]));\n// console.log(pluck([5, 0, 3, 0, 4, 2]));\n// console.log(pluck([5, 0, 3, 0, 4, 2]));\n// console.log(pluck([5, 0, 3, 0, 4, 2]));\n// console.log(pluck([5, 0, 3, 0, 4, 2]));\n// console.log(pluck([5, 0, 3, 0, 4, 2]));\n// console.log(pluck([5, 0, 3, 0, 4, 2]));\n// console.log(pluck([5, 0, 3, 0, 4, 2]));\n// console.log(pluck([5, 0, 3, 0, 4, 2]));\n// console.log(pluck([5, 0, 3, 0, 4, 2]));\n// console.log(pluck([5, 0, 3, 0, 4, 2]));\n// console.log(pluck([5, 0, 3, 0, 4, 2]));\n// console.log(pluck([5, 0, 3, 0, 4, 2]));\n// console.log(pluck([5, 0, 3, 0, 4, 2]));\n// console.log(pluck([5, 0, 3, 0, 4, 2]));\n// console.log(pluck([5, 0, 3, 0, 4, 2]));\n// console.log(pluck([5, 0, 3, 0, 4, 2]));\n// console.log(pluck([5, 0, 3, 0, 4, 2]));\n// console.log(pluck([5, 0, 3, 0, 4, 2]));\n// console.log(pluck([5, 0, 3, 0, 4, 2]));\n// console.log(pluck([5, 0, 3, 0, 4, 2]));\n// console.log(pluck([5, 0, 3, 0, 4, 2]));\n// console.log(pluck([5, 0, 3, 0, 4, 2]));\n// console.log(pluck([5, 0, 3, 0, 4, 2]));\n// console.log(pluck([5, 0, 3, 0, 4, 2]));\n// console.log(pluck([5, 0, 3, 0, 4, 2]));\n// console.log(pluck([5, 0, 3, 0, 4, 2]));\n// console.log(pluck([5, 0, 3, 0, 4, 2]));\n// console.log(pluck([5, 0, 3, 0, 4, 2]));\n// console.log(pluck([5, 0, 3, 0, 4, 2]));\n// console.log(pluck([5, 0, 3, 0, 4, 2]));\n// console.log(pluck([5, 0, 3, 0, 4, 2]));\n// console.log(pluck([5, 0, 3, 0, 4, 2]));\n// console.log(pluck([5, 0, 3, 0, 4, 2]));\n// console.log(pluck([5, 0, 3, 0, 4, 2]));\n// console.log(pluck([5, 0, 3, 0, 4, 2]));\n// console.log(pluck([5, 0, 3, 0, 4, 2]));\n// console.log(pluck([5, 0, 3, 0, 4, 2]));\n// console.log(pluck([5, 0, 3, 0, 4, 2]));\n// console.log(pluck([5, 0, 3, 0, 4, 2]));\n// console.log(pluck([5, 0, 3, 0, 4, 2]));\n// console.log(pluck([5, 0, 3, 0, 4, 2]));\n// console.log(pluck([5, 0, 3, 0, 4, 2]));\n// console.log(pluck([5, 0, 3, 0, 4, 2]));\n// console.log(pluck([5, 0, 3, 0, 4, 2]));\n// console.log(pluck([5, 0, 3, 0, 4, 2]));\n// console.log(pluck([5, 0, 3, 0, 4, 2]));\n// console.log(pluck([5, 0, 3, 0, 4, 2]));\n// console.log(pluck([5, 0, 3, 0, 4, 2]));\n// console.log(pluck([5, 0, 3, 0, 4, 2]));\n// console.log(pluck([5, 0, 3, 0, 4, 2]));\n// console.log(pluck([5, 0, 3, 0, 4, 2]));\n// console.log(pluck([5, 0, 3, 0, 4, 2]));\n// console.log(pluck([5, 0, 3, 0, 4, 2]));\n// console.log(pluck([5, 0, 3, 0, 4, 2]));\n// console.log(pluck([5, 0, 3, 0, 4, 2]));\n// console.log(pluck([5, 0, 3, 0, 4, 2]));\n// console.log(pluck([5, 0, 3, 0, 4, 2]));\n// console.log(pluck([5, 0, 3, 0, 4, 2]));\n// console.log(pluck([5, 0, 3, 0, 4, 2]));\n// console.log(pluck([5, 0, 3, 0, 4, 2]));\n// console.log(pluck([5, 0, 3, 0, 4, 2]));\n// console.log(pluck([5, 0, 3, 0, 4, 2]));\n// console.log(pluck([5, 0, 3, 0, 4, 2]));\n// console.log(pluck([5, 0, 3, 0, 4, 2]));\n// console.log(pluck([5, 0, 3, 0, 4, 2]));\n// console.log(pluck([5, 0, 3, 0, 4, 2]));\n// console.log(pluck([5, 0, 3, 0, 4, 2]));\n// console.log(pluck([5, 0, 3, 0, 4, 2]));\n// console.log(pluck([5, 0, 3, 0, 4, 2]));\n// console.log(pluck([5, 0, 3, 0, 4, 2]));\n// console.log(pluck([5, 0, 3, 0, 4, 2]));\n// console.log(pluck([5, 0, 3, 0, 4, 2]));\n// console.log(pluck([5, 0, 3, 0, 4, 2]));\n// console.log(pluck([5, 0, 3, 0, 4, 2]));\n// console.log(pluck([5, 0, 3, 0, 4, 2]));\n// console.log(pluck([5, 0, 3, 0, 4, 2]));\n// console.log(pluck([5, 0, 3, 0, 4, 2]));\n// console.log(pluck([5, 0, 3, 0, 4, 2]));\n// console.log(pluck(["}
{"task_id": "JavaScript/69", "prompt": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\n\nconst search = (lst) => {\n  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n", "canonical_solution": "  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "partial": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  # print('@@this is the line to split##')\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "gc": "<|endoftext|>/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\n\nconst search = (lst) => {\n  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 0; i < lst.length; i++) {\n    if (frq[i] >= lst[i]) {\n      ans = i;\n      break;\n    }\n  }\n  return ans;\n};\n\nmodule.exports = search;\n\n},{}],9:[function(require,module,exports){\n/*\n  You are given a non-empty list of positive integers. Return the smallest integer that is less than\n  zero, and has a frequency less than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 1\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\n\nconst search = (lst) => {\n  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 0; i < lst.length; i++) {\n    if (frq[i] <= lst[i]) {\n      ans = i;\n      break;\n    }\n  }\n  return ans;\n};\n\nmodule.exports = search;\n\n},{}],10:[function(require,module,exports){\n/*\n  You are given a non-empty list of positive integers. Return the largest integer that is less than\n  zero, and has a frequency less than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 3\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 4\n      search([5, 5, 4, 4, 4])) == -1\n  */\n\nconst search = (lst) => {\n  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 0; i < lst.length; i++) {\n    if (frq[i] >= lst[i]) {\n      ans = i;\n      break;\n    }\n  }\n  return ans;\n};\n\nmodule.exports = search;\n\n},{}],11:[function(require,module,exports){\n/*\n  You are given a non-empty list of positive integers. Return the smallest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 4\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\n\nconst search = (lst) => {\n  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 0; i < lst.length; i++) {\n    if (frq[i] <= lst[i]) {\n      ans = i;\n      break;\n    }\n  }\n  return ans;\n};\n\nmodule.exports = search;\n\n},{}],12:[function(require,module,exports){\n/*\n  You are given a non-empty list of positive integers. Return the largest integer that is less than\n  zero, and has a frequency less than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 4\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\n\nconst search = (lst) => {\n  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 0; i < lst.length; i++) {\n    if (frq[i] >= lst[i]) {\n      ans = i;\n      break;\n    }\n  }\n  return ans;\n};\n\nmodule.exports = search;\n\n},{}],13:[function(require,module,exports){\n/*\n  You are given a non-empty list of positive integers. Return the smallest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 4\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\n\nconst search = (lst) => {\n  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 0; i < lst.length; i++) {\n    if (frq[i] <= lst[i]) {\n      ans = i;\n      break;\n    }\n  }\n  return ans;\n};\n\nmodule.exports = search;\n\n},{}],14:[function(require,module,exports){\n/*\n  You are given a non-empty list of positive integers. Return the largest integer that is less than\n  zero, and has a frequency less than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 4\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\n\nconst search = (lst) => {\n  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 0; i < lst.length; i++) {\n    if (frq[i] >= lst[i]) {\n      ans = i;\n      break;\n    }\n  }\n  return ans;\n};\n\nmodule.exports = search;\n\n},{}],15:[function(require,module,exports){\n/*\n  You are given a non-empty list of positive integers. Return the smallest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 4\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\n\nconst search = (lst) => {\n  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 0; i < lst.length; i++) {\n    if (frq[i] <= lst[i]) {\n      ans = i;\n      break;\n    }\n  }\n  return ans;\n};\n\nmodule.exports = search;\n\n},{}],16:[function(require,module,exports){\n/*\n  You are given a non-empty list of positive integers. Return the smallest integer that is greater than\n  zero, and has a frequency less than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 4\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\n\nconst search = (lst) => {\n  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 0; i < lst.length; i++) {\n    if (frq[i] >= lst[i]) {\n      ans = i;\n      break;\n    }\n  }\n  return ans;\n};\n\nmodule.exports = search;\n\n},{}],"}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\n\nconst strangeSortList = (lst) => {\n  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n", "canonical_solution": "    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "partial": "/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    # print('@@this is the line to split##')\n    sw = !sw;\n  }\n  return res;\n}\n\n", "gc": "<|endoftext|>/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\n\nconst strangeSortList = (lst) => {\n  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw =!sw;\n  }\n  return res;\n};\n\nmodule.exports = strangeSortList;\n\n},{}],7:[function(require,module,exports){\nconst { isArray } = require(\"lodash\");\n\nconst strangeSort = (arr) => {\n  if (!isArray(arr)) {\n    throw new TypeError(\"Expected an array\");\n  }\n\n  if (arr.length === 0) {\n    return [];\n  }\n\n  if (arr.length === 1) {\n    return arr;\n  }\n\n  return strangeSort(arr.slice(0, -1)) + [arr[0]];\n};\n\nmodule.exports = strangeSort;\n\n},{\"lodash\":1}],8:[function(require,module,exports){\nconst { isArray } = require(\"lodash\");\n\nconst strangeSort = (arr) => {\n  if (!isArray(arr)) {\n    throw new TypeError(\"Expected an array\");\n  }\n\n  if (arr.length === 0) {\n    return [];\n  }\n\n  if (arr.length === 1) {\n    return arr;\n  }\n\n  return strangeSort(arr.slice(0, -1)) + [arr[0]] + strangeSort(arr.slice(1));\n};\n\nmodule.exports = strangeSort;\n\n},{\"lodash\":1}],9:[function(require,module,exports){\nconst { isArray } = require(\"lodash\");\n\nconst strangeSort = (arr) => {\n  if (!isArray(arr)) {\n    throw new TypeError(\"Expected an array\");\n  }\n\n  if (arr.length === 0) {\n    return [];\n  }\n\n  if (arr.length === 1) {\n    return arr;\n  }\n\n  return strangeSort(arr.slice(0, -1)) + [arr[0]] + strangeSort(arr.slice(1)) + [arr[1]];\n};\n\nmodule.exports = strangeSort;\n\n},{\"lodash\":1}],10:[function(require,module,exports){\nconst { isArray } = require(\"lodash\");\n\nconst strangeSort = (arr) => {\n  if (!isArray(arr)) {\n    throw new TypeError(\"Expected an array\");\n  }\n\n  if (arr.length === 0) {\n    return [];\n  }\n\n  if (arr.length === 1) {\n    return arr;\n  }\n\n  return strangeSort(arr.slice(0, -1)) + [arr[0]] + strangeSort(arr.slice(1)) + [arr[1]] + strangeSort(arr.slice(2));\n};\n\nmodule.exports = strangeSort;\n\n},{\"lodash\":1}],11:[function(require,module,exports){\nconst { isArray } = require(\"lodash\");\n\nconst strangeSort = (arr) => {\n  if (!isArray(arr)) {\n    throw new TypeError(\"Expected an array\");\n  }\n\n  if (arr.length === 0) {\n    return [];\n  }\n\n  if (arr.length === 1) {\n    return arr;\n  }\n\n  return strangeSort(arr.slice(0, -1)) + [arr[0]] + strangeSort(arr.slice(1)) + [arr[1]] + strangeSort(arr.slice(2)) + [arr[2]];\n};\n\nmodule.exports = strangeSort;\n\n},{\"lodash\":1}],12:[function(require,module,exports){\nconst { isArray } = require(\"lodash\");\n\nconst strangeSort = (arr) => {\n  if (!isArray(arr)) {\n    throw new TypeError(\"Expected an array\");\n  }\n\n  if (arr.length === 0) {\n    return [];\n  }\n\n  if (arr.length === 1) {\n    return arr;\n  }\n\n  return strangeSort(arr.slice(0, -1)) + [arr[0]] + strangeSort(arr.slice(1)) + [arr[1]] + strangeSort(arr.slice(2)) + [arr[2]] + strangeSort(arr.slice(3));\n};\n\nmodule.exports = strangeSort;\n\n},{\"lodash\":1}],13:[function(require,module,exports){\nconst { isArray } = require(\"lodash\");\n\nconst strangeSort = (arr) => {\n  if (!isArray(arr)) {\n    throw new TypeError(\"Expected an array\");\n  }\n\n  if (arr.length === 0) {\n    return [];\n  }\n\n  if (arr.length === 1) {\n    return arr;\n  }\n\n  return strangeSort(arr.slice(0, -1)) + [arr[0]] + strangeSort(arr.slice(1)) + [arr[1]] + strangeSort(arr.slice(2)) + [arr[2]] + strangeSort(arr.slice(3)) + [arr[3]];\n};\n\nmodule.exports = strangeSort;\n\n},{\"lodash\":1}],14:[function(require,module,exports){\nconst { isArray } = require(\"lodash\");\n\nconst strangeSort = (arr) => {\n  if (!isArray(arr)) {\n    throw new TypeError(\"Expected an array\");\n  }\n\n  if (arr.length === 0) {\n    return [];\n  }\n\n  if (arr.length === 1) {\n    return arr;\n  }\n\n  return strangeSort(arr.slice(0, -1)) + [arr[0]] + strangeSort(arr.slice(1)) + [arr[1]] + strangeSort(arr.slice(2)) + [arr[2]] + strangeSort(arr.slice(3)) + [arr[3]] + strangeSort(arr.slice(4)) + [arr[4]];\n};\n\nmodule.exports = strangeSort;\n\n},{\"lodash\":1}],15:[function(require,module,exports){\nconst { isArray } = require(\"lodash\");\n\nconst strangeSort = (arr) => {\n  if (!isArray(arr)) {\n    throw new TypeError(\"Expected an array\");\n  }\n\n  if (arr.length === 0) {\n    return [];\n  }\n\n  if (arr.length === 1) {\n    return arr;\n  }\n\n  return strangeSort(arr.slice(0, -1)) + [arr[0]] + strangeSort(arr.slice(1)) + [arr[1]] + strangeSort(arr.slice(2)) + [arr[2]] + strangeSort(arr.slice(3)) + [arr[3]] + strangeSort(arr.slice(4)) + [arr[4]];\n};\n\nmodule.exports = strangeSort;\n\n},{\"lodash\":1}],16:[function(require,module,exports){\nconst { isArray } = require(\"lodash\");\n\nconst strangeSort = (arr) => {\n  if (!isArray(arr)) {\n    throw new TypeError(\"Expected an array\");\n  }\n\n  if (arr.length === 0) {\n    return [];\n  }\n\n  if (arr.length === 1) {\n    return arr;\n  }\n\n  return strangeSort(arr.slice(0, -1)) + [arr[0]] + strangeSort(arr.slice(1)) + [arr[1]] + strangeSort(arr.slice(2)) + [arr[2]] + strangeSort(arr.slice(3)) + [arr[3]] + strangeSort(arr.slice(4)) + [arr[4]];\n};\n\nmodule.exports = strangeSort;\n\n},{\"lodash\":1}],17:[function(require,module,exports){\nconst { isArray } = require(\"lodash\");\n\nconst strangeSort = (arr) => {\n  if (!isArray(arr)) {\n    throw new TypeError(\"Expected an array\");\n  }\n\n  if (arr.length === 0) {\n    return [];\n  }\n\n  if (arr.length === 1) {\n    return arr;\n  }\n\n  return strangeSort(arr.slice(0, -1)) + [arr[0]] + strangeSort(arr.slice(1)) + [arr[1]] + strangeSort(arr.slice(2)) + [arr[2]] + strangeSort(arr.slice(3)) + [arr[3]] + strangeSort(arr.slice(4)) + [arr[4]];\n};\n\nmodule.exports = strangeSort;\n\n},{\"lodash\":1}],18:[function(require,module,exports){\nconst { isArray } = require(\"lodash\");\n\nconst strangeSort = (arr) => {\n  if (!isArray(arr)) {\n    throw new TypeError(\"Expected an array\");\n  }\n\n  if (arr.length === 0) {\n    return [];\n  }\n\n  if (arr.length === 1) {\n    return arr;\n  }\n\n  return strangeSort(arr.slice(0, -1)) + [arr[0]] + strangeSort(arr.slice(1)) + [arr"}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\n\nconst triangleArea = (a, b, c) => {\n  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n", "canonical_solution": "  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "partial": "/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  # print('@@this is the line to split##')\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "gc": "<|endoftext|>/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\n\nconst triangleArea = (a, b, c) => {\n  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  if (a + b + c > c)\n    s = -s;\n  return Math.sqrt(s * s);\n};\n\nmodule.exports = triangleArea;\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nconst triangleArea = __webpack_require__(3);\n\nconst triangleArea2 = (a, b, c) => {\n  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  if (a + b + c > c)\n    s = -s;\n  return triangleArea(a, b, c) * s;\n};\n\nmodule.exports = triangleArea2;\n\n/***/ }),\n/* 5 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nconst triangleArea = __webpack_require__(3);\n\nconst triangleArea2 = __webpack_require__(4);\n\nconst triangleArea3 = __webpack_require__(6);\n\nconst triangleArea4 = __webpack_require__(7);\n\nconst triangleArea5 = __webpack_require__(8);\n\nconst triangleArea6 = __webpack_require__(9);\n\nconst triangleArea7 = __webpack_require__(10);\n\nconst triangleArea8 = __webpack_require__(11);\n\nconst triangleArea9 = __webpack_require__(12);\n\nconst triangleArea10 = __webpack_require__(13);\n\nconst triangleArea11 = __webpack_require__(14);\n\nconst triangleArea12 = __webpack_require__(15);\n\nconst triangleArea13 = __webpack_require__(16);\n\nconst triangleArea14 = __webpack_require__(17);\n\nconst triangleArea15 = __webpack_require__(18);\n\nconst triangleArea16 = __webpack_require__(19);\n\nconst triangleArea17 = __webpack_require__(20);\n\nconst triangleArea18 = __webpack_require__(21);\n\nconst triangleArea19 = __webpack_require__(22);\n\nconst triangleArea20 = __webpack_require__(23);\n\nconst triangleArea21 = __webpack_require__(24);\n\nconst triangleArea22 = __webpack_require__(25);\n\nconst triangleArea23 = __webpack_require__(26);\n\nconst triangleArea24 = __webpack_require__(27);\n\nconst triangleArea25 = __webpack_require__(28);\n\nconst triangleArea26 = __webpack_require__(29);\n\nconst triangleArea27 = __webpack_require__(30);\n\nconst triangleArea28 = __webpack_require__(31);\n\nconst triangleArea29 = __webpack_require__(32);\n\nconst triangleArea30 = __webpack_require__(33);\n\nconst triangleArea31 = __webpack_require__(34);\n\nconst triangleArea32 = __webpack_require__(35);\n\nconst triangleArea33 = __webpack_require__(36);\n\nconst triangleArea34 = __webpack_require__(37);\n\nconst triangleArea35 = __webpack_require__(38);\n\nconst triangleArea36 = __webpack_require__(39);\n\nconst triangleArea37 = __webpack_require__(40);\n\nconst triangleArea38 = __webpack_require__(41);\n\nconst triangleArea39 = __webpack_require__(42);\n\nconst triangleArea40 = __webpack_require__(43);\n\nconst triangleArea41 = __webpack_require__(44);\n\nconst triangleArea42 = __webpack_require__(45);\n\nconst triangleArea43 = __webpack_require__(46);\n\nconst triangleArea44 = __webpack_require__(47);\n\nconst triangleArea45 = __webpack_require__(48);\n\nconst triangleArea46 = __webpack_require__(49);\n\nconst triangleArea47 = __webpack_require__(50);\n\nconst triangleArea48 = __webpack_require__(51);\n\nconst triangleArea49 = __webpack_require__(52);\n\nconst triangleArea50 = __webpack_require__(53);\n\nconst triangleArea51 = __webpack_require__(54);\n\nconst triangleArea52 = __webpack_require__(55);\n\nconst triangleArea53 = __webpack_require__(56);\n\nconst triangleArea54 = __webpack_require__(57);\n\nconst triangleArea55 = __webpack_require__(58);\n\nconst triangleArea56 = __webpack_require__(59);\n\nconst triangleArea57 = __webpack_require__(60);\n\nconst triangleArea58 = __webpack_require__(61);\n\nconst triangleArea59 = __webpack_require__(62);\n\nconst triangleArea60 = __webpack_require__(63);\n\nconst triangleArea61 = __webpack_require__(64);\n\nconst triangleArea62 = __webpack_require__(65);\n\nconst triangleArea63 = __webpack_require__(66);\n\nconst triangleArea64 = __webpack_require__(67);\n\nconst triangleArea65 = __webpack_require__(68);\n\nconst triangleArea66 = __webpack_require__(69);\n\nconst triangleArea67 = __webpack_require__(70);\n\nconst triangleArea68 = __webpack_require__(71);\n\nconst triangleArea69 = __webpack_require__(72);\n\nconst triangleArea70 = __webpack_require__(73);\n\nconst triangleArea71 = __webpack_require__(74);\n\nconst triangleArea72 = __webpack_require__(75);\n\nconst triangleArea73 = __webpack_require__(76);\n\nconst triangleArea74 = __webpack_require__(77);\n\nconst triangleArea75 = __webpack_require__(78);\n\nconst triangleArea76 = __webpack_require__(79);\n\nconst triangleArea77 = __webpack_require__(80);\n\nconst triangleArea78 = __webpack_require__(81);\n\nconst triangleArea79 = __webpack_require__(82);\n\nconst triangleArea80 = __webpack_require__(83);\n\nconst triangleArea81 = __webpack_require__(84);\n\nconst triangleArea82 = __webpack_require__(85);\n\nconst triangleArea83 = __webpack_require__(86);\n\nconst triangleArea84 = __webpack_require__(87);\n\nconst triangleArea85 = __webpack_require__(88);\n\nconst triangleArea86 = __webpack_require__(89);\n\nconst triangleArea87 = __webpack_require__(90);\n\nconst triangleArea88 = __webpack_require__(91);\n\nconst triangleArea89 = __webpack_require__(92);\n\nconst triangleArea90 = __webpack_require__(93);\n\nconst triangleArea91 = __webpack_require__(94);\n\nconst triangleArea92 = __webpack_require__(95);\n\nconst triangleArea93 = __webpack_require__(96);\n\nconst triangleArea94 = __webpack_require__(97);\n\nconst triangleArea95 = __webpack_require__(98);\n\nconst triangleArea96 = __webpack_require__(99);\n\nconst triangleArea97 = __webpack_require__(100);\n\nconst triangleArea98 = __webpack_require__(101);\n\nconst triangleArea99 = __webpack_require__(102);\n\nconst triangleArea100 = __webpack_require__(103);\n\nconst triangleArea101 = __webpack_require__(104);\n\nconst triangleArea102 = __webpack_require__(105);\n\nconst triangleArea103 = __webpack_require__(106);\n\nconst triangleArea104 = __webpack_require__(107);\n\nconst triangleArea105 = __webpack_require__(108);\n\nconst triangleArea106 = __webpack_require__(109);\n\nconst triangleArea107 = __webpack_require__(110);\n\nconst triangleArea108 = __webpack_require__(111);\n\nconst triangleArea109 = __webpack_require__(112);\n\nconst triangleArea110 = __webpack_require__(113);\n\nconst triangleArea111 = __webpack_require__(114);\n\nconst triangleArea112 = __webpack_require__(115);\n\nconst triangleArea113 = __webpack_require__(116);\n\nconst triangleArea114 = __webpack_require__(117);\n\nconst triangleArea115 = __webpack_require__(118);\n\nconst triangleArea116 = __webpack_require__(119);\n\nconst triangleArea117 = __webpack_require__(120);\n\nconst triangleArea118 = __webpack_require__(121);\n\nconst triangleArea119 = __webpack_require__(122);\n\nconst triangleArea120 = __webpack_require__(123);\n\nconst triangleArea121 = __webpack_require__(124);\n\nconst triangleArea122 = __webpack_require__(125);\n\nconst triangleArea123 = __webpack_require__(126);\n\nconst triangleArea124 = __webpack_require__(127);\n\nconst triangleArea125 = __webpack_require__(128);\n\nconst triangleArea126 = __webpack_require__(129);\n\nconst triangleArea127 = __webpack_require__(130);\n\nconst triangleArea128 = __webpack_require__(131);\n\nconst triangleArea129 = __webpack_require__(132);\n\nconst triangleArea130 = __webpack_require__(133);\n\nconst triangleArea131 = __webpack_require__(134);\n\nconst triangleArea132 = __webpack_require__(135);\n\nconst triangleArea133 = __webpack_require__(136);\n\nconst triangleArea134 = __webpack_require__(137);\n\nconst triangleArea135 = __webpack_require__(138);\n\nconst triangleArea136 = __webpack_require__(139);\n\nconst triangleArea137 = __webpack_require__(140);\n\nconst triangleArea138 = __webpack_require__(141);\n\nconst triangleArea139 = __webpack_require__(142);\n\nconst triangleArea140 = __webpack_require__(143);\n\nconst triangleArea141 = __webpack_require__(144);\n\nconst triangleArea142 = __webpack_require__(145);\n\nconst triangleArea143 = __webpack_require__(146);\n\nconst triangleArea144 = __webpack_require__(147);\n\nconst triangleArea145 = __webpack_require__(148);\n\nconst triangleArea146 = __webpack_require__(149);\n\nconst triangleArea147 = __webpack_require__(150);\n\nconst triangleArea148 = __webpack_require__(151);\n\nconst triangleArea149 = __webpack_require__(152);\n\nconst triangleArea150 = __webpack_require__(153);\n\nconst triangleArea151 = __webpack_require__(154);\n\nconst triangleArea152 = __webpack_require__(155);\n\nconst triangleArea153 = __webpack_require__(156);\n\nconst triangleArea154 = __webpack_require__(157);\n\nconst triangleArea155 = __webpack_require__(158);\n\nconst triangleArea156 = __webpack_require__(159);\n\nconst triangleArea157 = __webpack_require__(160);\n\nconst triangleArea158 = __webpack_require__(161);\n\nconst triangleArea159 = __webpack_require__(16"}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\n\nconst willItFly = (q, w) => {\n  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n", "canonical_solution": "      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "partial": "/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      # print('@@this is the line to split##')\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "gc": "<|endoftext|>/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\n\nconst willItFly = (q, w) => {\n  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i]!= q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n};\n\nmodule.exports = willItFly;\n\n},{}],4:[function(require,module,exports){\n/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\n\nconst willItFly = (q, w) => {\n  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i]!= q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n};\n\nmodule.exports = willItFly;\n\n},{}],5:[function(require,module,exports){\n/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\n\nconst willItFly = (q, w) => {\n  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i]!= q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n};\n\nmodule.exports = willItFly;\n\n},{}],6:[function(require,module,exports){\n/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\n\nconst willItFly = (q, w) => {\n  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i]!= q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n};\n\nmodule.exports = willItFly;\n\n},{}],7:[function(require,module,exports){\n/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\n\nconst willItFly = (q, w) => {\n  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i]!= q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n};\n\nmodule.exports = willItFly;\n\n},{}],8:[function(require,module,exports){\n/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\n\nconst willItFly = (q, w) => {\n  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i]!= q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n};\n\nmodule.exports = willItFly;\n\n},{}],9:[function(require,module,exports){\n/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight "}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\n\nconst smallestChange = (arr) => {\n  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n", "canonical_solution": "      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "partial": "/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      # print('@@this is the line to split##')\n      ans++;\n  return ans;\n}\n\n", "gc": "<|endoftext|>/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\n\nconst smallestChange = (arr) => {\n  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i]!= arr.at(-i - 1))\n      ans++;\n  return ans;\n};\n\nmodule.exports = smallestChange;\n\n},{}],3:[function(require,module,exports){\n/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\n\nconst smallestChange = (arr) => {\n  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i]!= arr.at(i + 1))\n      ans++;\n  return ans;\n};\n\nmodule.exports = smallestChange;\n\n},{}],4:[function(require,module,exports){\n/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\n\nconst smallestChange = (arr) => {\n  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i]!= arr.at(i + 2))\n      ans++;\n  return ans;\n};\n\nmodule.exports = smallestChange;\n\n},{}],5:[function(require,module,exports){\n/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\n\nconst smallestChange = (arr) => {\n  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i]!= arr.at(i + 3))\n      ans++;\n  return ans;\n};\n\nmodule.exports = smallestChange;\n\n},{}],6:[function(require,module,exports){\n/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\n\nconst smallestChange = (arr) => {\n  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i]!= arr.at(i + 4))\n      ans++;\n  return ans;\n};\n\nmodule.exports = smallestChange;\n\n},{}],7:[function(require,module,exports){\n/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\n\nconst smallestChange = (arr) => {\n  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i]!= arr.at(i + 5))\n      ans++;\n  return ans;\n};\n\nmodule.exports = smallestChange;\n\n},{}],8:[function(require,module,exports){\n/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\n\nconst smallestChange = (arr) => {\n  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i]!= arr.at(i + 6))\n      ans++;\n  return ans;\n};\n\nmodule.exports = smallestChange;\n\n},{}],9:[function(require,module,exports){\n/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\n\nconst smallestChange = (arr) => {\n  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i]!= arr.at(i + 7))\n      ans++;\n  return ans;\n};\n\nmodule.exports = smallestChange;\n\n},{}],10:[function(require,module,exports){\n/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\n\nconst smallestChange = (arr) => {\n  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i]!= arr.at(i + 8))\n      ans++;\n  return ans;\n};\n\nmodule.exports = smallestChange;\n\n},{}],11:[function(require,module,exports){\n/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\n\nconst smallestChange = (arr) => {\n  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i]!= arr.at(i + 9))\n      ans++;\n  return ans;\n};\n\nmodule.exports = smallestChange;\n\n},{}],12:[function("}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\n\nconst totalMatch = (lst1, lst2) => {\n  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n", "canonical_solution": "    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "partial": "/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    # print('@@this is the line to split##')\n    return lst1;\n  else\n    return lst2;\n}\n\n", "gc": "<|endoftext|>/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\n\nconst totalMatch = (lst1, lst2) => {\n  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n};\n\nmodule.exports = totalMatch;\n\n},{}],16:[function(require,module,exports){\nconst totalMatch = require('./totalMatch');\n\nconst totalMatchWith = (lst1, lst2) => {\n  var l1 = totalMatch(lst1, lst2);\n  var l2 = totalMatch(lst2, lst1);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n};\n\nmodule.exports = totalMatchWith;\n\n},{\"./totalMatch\":15}],17:[function(require,module,exports){\nconst totalMatch = require('./totalMatch');\n\nconst totalMatchWith = (lst1, lst2) => {\n  var l1 = totalMatchWith(lst1, lst2);\n  var l2 = totalMatchWith(lst2, lst1);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n};\n\nmodule.exports = totalMatchWith;\n\n},{\"./totalMatch\":15}],18:[function(require,module,exports){\nconst totalMatch = require('./totalMatch');\n\nconst totalMatchWith = (lst1, lst2) => {\n  var l1 = totalMatchWith(lst1, lst2);\n  var l2 = totalMatchWith(lst2, lst1);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n};\n\nmodule.exports = totalMatchWith;\n\n},{\"./totalMatch\":15}],19:[function(require,module,exports){\nconst totalMatch = require('./totalMatch');\n\nconst totalMatchWith = (lst1, lst2) => {\n  var l1 = totalMatchWith(lst1, lst2);\n  var l2 = totalMatchWith(lst2, lst1);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n};\n\nmodule.exports = totalMatchWith;\n\n},{\"./totalMatch\":15}],20:[function(require,module,exports){\nconst totalMatch = require('./totalMatch');\n\nconst totalMatchWith = (lst1, lst2) => {\n  var l1 = totalMatchWith(lst1, lst2);\n  var l2 = totalMatchWith(lst2, lst1);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n};\n\nmodule.exports = totalMatchWith;\n\n},{\"./totalMatch\":15}],21:[function(require,module,exports){\nconst totalMatch = require('./totalMatch');\n\nconst totalMatchWith = (lst1, lst2) => {\n  var l1 = totalMatchWith(lst1, lst2);\n  var l2 = totalMatchWith(lst2, lst1);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n};\n\nmodule.exports = totalMatchWith;\n\n},{\"./totalMatch\":15}],22:[function(require,module,exports){\nconst totalMatch = require('./totalMatch');\n\nconst totalMatchWith = (lst1, lst2) => {\n  var l1 = totalMatchWith(lst1, lst2);\n  var l2 = totalMatchWith(lst2, lst1);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n};\n\nmodule.exports = totalMatchWith;\n\n},{\"./totalMatch\":15}],23:[function(require,module,exports){\nconst totalMatch = require('./totalMatch');\n\nconst totalMatchWith = (lst1, lst2) => {\n  var l1 = totalMatchWith(lst1, lst2);\n  var l2 = totalMatchWith(lst2, lst1);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n};\n\nmodule.exports = totalMatchWith;\n\n},{\"./totalMatch\":15}],24:[function(require,module,exports){\nconst totalMatch = require('./totalMatch');\n\nconst totalMatchWith = (lst1, lst2) => {\n  var l1 = totalMatchWith(lst1, lst2);\n  var l2 = totalMatchWith(lst2, lst1);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n};\n\nmodule.exports = totalMatchWith;\n\n},{\"./totalMatch\":15}],25:[function(require,module,exports){\nconst totalMatch = require('./totalMatch');\n\nconst totalMatchWith = (lst1, lst2) => {\n  var l1 = totalMatchWith(lst1, lst2);\n  var l2 = totalMatchWith(lst2, lst1);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n};\n\nmodule.exports = totalMatchWith;\n\n},{\"./totalMatch\":15}],26:[function(require,module,exports){\nconst totalMatch = require('./totalMatch');\n\nconst totalMatchWith = (lst1, lst2) => {\n  var l1 = totalMatchWith(lst1, lst2);\n  var l2 = totalMatchWith(lst2, lst1);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n};\n\nmodule.exports = totalMatchWith;\n\n},{\"./totalMatch\":15}],27:[function(require,module,exports){\nconst totalMatch = require('./totalMatch');\n\nconst totalMatchWith = (lst1, lst2) => {\n  var l1 = totalMatchWith(lst1, lst2);\n  var l2 = totalMatchWith(lst2, lst1);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n};\n\nmodule.exports = totalMatchWith;\n\n},{\"./totalMatch\":15}],28:[function(require,module,exports){\nconst totalMatch = require('./totalMatch');\n\nconst totalMatchWith = (lst1, lst2) => {\n  var l1 = totalMatchWith(lst1, lst2);\n  var l2 = totalMatchWith(lst2, lst1);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n};\n\nmodule.exports = totalMatchWith;\n\n},{\"./totalMatch\":15}],29:[function(require,module,exports){\nconst totalMatch = require('./totalMatch');\n\nconst totalMatchWith = (lst1, lst2) => {\n  var l1 = totalMatchWith(lst1, lst2);\n  var l2 = totalMatchWith(lst2, lst1);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n};\n\nmodule.exports = totalMatchWith;\n\n},{\"./totalMatch\":15}],30:[function(require,module,exports){\nconst totalMatch = require('./totalMatch');\n\nconst totalMatchWith = (lst1, lst2) => {\n  var l1 = totalMatchWith(lst1, lst2);\n  var l2 = totalMatchWith(lst2, lst1);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n};\n\nmodule.exports = totalMatchWith;\n\n},{\"./totalMatch\":15}],31:[function(require,module,exports){\nconst totalMatch = require('./totalMatch');\n\nconst totalMatchWith"}
{"task_id": "JavaScript/75", "prompt": "/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\n\nconst isMultiplyPrime = (a) => {\n  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n", "canonical_solution": "      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "partial": "/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      # print('@@this is the line to split##')\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "gc": "<|endoftext|>/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\n\nconst isMultiplyPrime = (a) => {\n  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (i % j == 0) return false;\n    }\n  }\n  return true;\n}\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\n\nconst isMultiplyPrime = (a) => {\n  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (i % j == 0) return false;\n    }\n  }\n  return true;\n}\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\n\nconst isMultiplyPrime = (a) => {\n  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (i % j == 0) return false;\n    }\n  }\n  return true;\n}\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\n\nconst isMultiplyPrime = (a) => {\n  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (i % j == 0) return false;\n    }\n  }\n  return true;\n}\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\n\nconst isMultiplyPrime = (a) => {\n  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (i % j == 0) return false;\n    }\n  }\n  return true;\n}\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\n\nconst isMultiplyPrime = (a) => {\n  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (i % j == 0) return false;\n    }\n  }\n  return true;\n}\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\n\nconst isMultiplyPrime = (a) => {\n  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (i % j == 0) return false;\n    }\n  }\n  return true;\n}\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\n\nconst isMultiplyPrime = (a) => {\n  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (i % j == 0) return false;\n    }\n  }\n  return true;\n}\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\n\nconst isMultiplyPrime = (a) => {\n  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (i % j == 0) return false;\n    }\n  }\n  return true;\n}\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\n\nconst isMultiplyPrime = (a) => {\n  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (i % j == 0) return false;\n    }\n  }\n  return true;\n}\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\n\nconst isMultiplyPrime = (a) => {\n  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (i % j == 0) return false;\n    }\n  }\n  return true;\n}\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\n\nconst isMultiplyPrime"}
{"task_id": "JavaScript/76", "prompt": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\n\nconst isSimplePower = (x, n) => {\n  if (n == 1)\n    return (x == 1);\n  var power = 1;\n", "canonical_solution": "  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "partial": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  # print('@@this is the line to split##')\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "gc": "<|endoftext|>/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\n\nconst isSimplePower = (x, n) => {\n  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power <= n) {\n    if (x % power == 0)\n      return false;\n    power++;\n  }\n  return true;\n};\n\n/*\n  Write a function that returns true if a number x is a prime number and\n  false in other cases.\n  x is a prime number if n%prime=x\n  For example:\n  isPrime(2) => true\n  isPrime(3) => false\n  isPrime(5) => false\n  isPrime(7) => true\n  isPrime(11) => false\n  */\n\nconst isPrime = (n) => {\n  if (n == 1)\n    return (n == 1);\n  var prime = 1;\n  while (prime <= n) {\n    if (n % prime == 0)\n      return false;\n    prime++;\n  }\n  return true;\n};\n\n/*\n  Write a function that returns true if a number x is a perfect square\n  and false in other cases.\n  x is a perfect square if n%perfect == x\n  For example:\n  isPerfectSquare(2) => true\n  isPerfectSquare(3) => false\n  isPerfectSquare(5) => false\n  isPerfectSquare(7) => true\n  isPerfectSquare(11) => false\n  */\n\nconst isPerfectSquare = (n) => {\n  if (n == 1)\n    return (n == 1);\n  var perfect = n;\n  while (perfect <= n) {\n    if (n % perfect == 0)\n      return false;\n    perfect++;\n  }\n  return true;\n};\n\n/*\n  Write a function that returns true if a number x is a perfect cube\n  and false in other cases.\n  x is a perfect cube if n%perfect == x\n  For example:\n  isPerfectCube(2) => true\n  isPerfectCube(3) => false\n  isPerfectCube(5) => false\n  isPerfectCube(7) => true\n  isPerfectCube(11) => false\n  */\n\nconst isPerfectCube = (n) => {\n  if (n == 1)\n    return (n == 1);\n  var perfect = n;\n  while (perfect <= n) {\n    if (n % perfect == 0)\n      return false;\n    perfect++;\n  }\n  return true;\n};\n\n/*\n  Write a function that returns true if a number x is a perfect cube\n  and false in other cases.\n  x is a perfect cube if n%perfect == x\n  For example:\n  isPerfectCube(2) => true\n  isPerfectCube(3) => false\n  isPerfectCube(5) => false\n  isPerfectCube(7) => true\n  isPerfectCube(11) => false\n  */\n\nconst isPerfectCube = (n) => {\n  if (n == 1)\n    return (n == 1);\n  var perfect = n;\n  while (perfect <= n) {\n    if (n % perfect == 0)\n      return false;\n    perfect++;\n  }\n  return true;\n};\n\n/*\n  Write a function that returns true if a number x is a perfect cube\n  and false in other cases.\n  x is a perfect cube if n%perfect == x\n  For example:\n  isPerfectCube(2) => true\n  isPerfectCube(3) => false\n  isPerfectCube(5) => false\n  isPerfectCube(7) => true\n  isPerfectCube(11) => false\n  */\n\nconst isPerfectCube = (n) => {\n  if (n == 1)\n    return (n == 1);\n  var perfect = n;\n  while (perfect <= n) {\n    if (n % perfect == 0)\n      return false;\n    perfect++;\n  }\n  return true;\n};\n\n/*\n  Write a function that returns true if a number x is a perfect cube\n  and false in other cases.\n  x is a perfect cube if n%perfect == x\n  For example:\n  isPerfectCube(2) => true\n  isPerfectCube(3) => false\n  isPerfectCube(5) => false\n  isPerfectCube(7) => true\n  isPerfectCube(11) => false\n  */\n\nconst isPerfectCube = (n) => {\n  if (n == 1)\n    return (n == 1);\n  var perfect = n;\n  while (perfect <= n) {\n    if (n % perfect == 0)\n      return false;\n    perfect++;\n  }\n  return true;\n};\n\n/*\n  Write a function that returns true if a number x is a perfect cube\n  and false in other cases.\n  x is a perfect cube if n%perfect == x\n  For example:\n  isPerfectCube(2) => true\n  isPerfectCube(3) => false\n  isPerfectCube(5) => false\n  isPerfectCube(7) => true\n  isPerfectCube(11) => false\n  */\n\nconst isPerfectCube = (n) => {\n  if (n == 1)\n    return (n == 1);\n  var perfect = n;\n  while (perfect <= n) {\n    if (n % perfect == 0)\n      return false;\n    perfect++;\n  }\n  return true;\n};\n\n/*\n  Write a function that returns true if a number x is a perfect cube\n  and false in other cases.\n  x is a perfect cube if n%perfect == x\n  For example:\n  isPerfectCube(2) => true\n  isPerfectCube(3) => false\n  isPerfectCube(5) => false\n  isPerfectCube(7) => true\n  isPerfectCube(11) => false\n  */\n\nconst isPerfectCube = (n) => {\n  if (n == 1)\n    return (n == 1);\n  var perfect = n;\n  while (perfect <= n) {\n    if (n % perfect == 0)\n      return false;\n    perfect++;\n  }\n  return true;\n};\n\n/*\n  Write a function that returns true if a number x is a perfect cube\n  and false in other cases.\n  x is a perfect cube if n%perfect == x\n  For example:\n  isPerfectCube(2) => true\n  isPerfectCube(3) => false\n  isPerfectCube(5) => false\n  isPerfectCube(7) => true\n  isPerfectCube(11) => false\n  */\n\nconst isPerfectCube = (n) => {\n  if (n == 1)\n    return (n == 1);\n  var perfect = n;\n  while (perfect <= n) {\n    if (n % perfect == 0)\n      return false;\n    perfect++;\n  }\n  return true;\n};\n\n/*\n  Write a function that returns true if a number x is a perfect cube\n  and false in other cases.\n  x is a perfect cube if n%perfect == x\n  For example:\n  isPerfectCube(2) => true\n  isPerfectCube(3) => false\n  isPerfectCube(5) => false\n  isPerfectCube(7) => true\n  isPerfectCube(11) => false\n  */\n\nconst isPerfectCube = (n) => {\n  if (n == 1)\n    return (n == 1);\n  var perfect = n;\n  while (perfect <= n) {\n"}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\n\nconst iscube = (a) => {\n  a = Math.abs(a);\n", "canonical_solution": "  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "partial": "/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  a = Math.abs(a);\n  # print('@@this is the line to split##')\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "gc": "<|endoftext|>/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\n\nconst iscube = (a) => {\n  a = Math.abs(a);\n  if (a <= 1) return true;\n  if (a <= 3) return true;\n  if (a <= 5) return true;\n  if (a <= 7) return true;\n  if (a <= 9) return true;\n  if (a <= 11) return true;\n  if (a <= 13) return true;\n  if (a <= 15) return true;\n  if (a <= 17) return true;\n  if (a <= 19) return true;\n  if (a <= 21) return true;\n  if (a <= 23) return true;\n  if (a <= 25) return true;\n  if (a <= 27) return true;\n  if (a <= 29) return true;\n  if (a <= 31) return true;\n  if (a <= 33) return true;\n  if (a <= 35) return true;\n  if (a <= 37) return true;\n  if (a <= 39) return true;\n  if (a <= 41) return true;\n  if (a <= 43) return true;\n  if (a <= 45) return true;\n  if (a <= 47) return true;\n  if (a <= 49) return true;\n  if (a <= 51) return true;\n  if (a <= 53) return true;\n  if (a <= 55) return true;\n  if (a <= 57) return true;\n  if (a <= 59) return true;\n  if (a <= 61) return true;\n  if (a <= 63) return true;\n  if (a <= 65) return true;\n  if (a <= 67) return true;\n  if (a <= 69) return true;\n  if (a <= 71) return true;\n  if (a <= 73) return true;\n  if (a <= 75) return true;\n  if (a <= 77) return true;\n  if (a <= 79) return true;\n  if (a <= 81) return true;\n  if (a <= 83) return true;\n  if (a <= 85) return true;\n  if (a <= 87) return true;\n  if (a <= 89) return true;\n  if (a <= 91) return true;\n  if (a <= 93) return true;\n  if (a <= 95) return true;\n  if (a <= 97) return true;\n  if (a <= 99) return true;\n  if (a <= 101) return true;\n  if (a <= 103) return true;\n  if (a <= 105) return true;\n  if (a <= 107) return true;\n  if (a <= 109) return true;\n  if (a <= 111) return true;\n  if (a <= 113) return true;\n  if (a <= 115) return true;\n  if (a <= 117) return true;\n  if (a <= 119) return true;\n  if (a <= 121) return true;\n  if (a <= 123) return true;\n  if (a <= 125) return true;\n  if (a <= 127) return true;\n  if (a <= 129) return true;\n  if (a <= 131) return true;\n  if (a <= 133) return true;\n  if (a <= 135) return true;\n  if (a <= 137) return true;\n  if (a <= 139) return true;\n  if (a <= 141) return true;\n  if (a <= 143) return true;\n  if (a <= 145) return true;\n  if (a <= 147) return true;\n  if (a <= 149) return true;\n  if (a <= 151) return true;\n  if (a <= 153) return true;\n  if (a <= 155) return true;\n  if (a <= 157) return true;\n  if (a <= 159) return true;\n  if (a <= 161) return true;\n  if (a <= 163) return true;\n  if (a <= 165) return true;\n  if (a <= 167) return true;\n  if (a <= 169) return true;\n  if (a <= 171) return true;\n  if (a <= 173) return true;\n  if (a <= 175) return true;\n  if (a <= 177) return true;\n  if (a <= 179) return true;\n  if (a <= 181) return true;\n  if (a <= 183) return true;\n  if (a <= 185) return true;\n  if (a <= 187) return true;\n  if (a <= 189) return true;\n  if (a <= 191) return true;\n  if (a <= 193) return true;\n  if (a <= 195) return true;\n  if (a <= 197) return true;\n  if (a <= 199) return true;\n  if (a <= 201) return true;\n  if (a <= 203) return true;\n  if (a <= 205) return true;\n  if (a <= 207) return true;\n  if (a <= 209) return true;\n  if (a <= 211) return true;\n  if (a <= 213) return true;\n  if (a <= 215) return true;\n  if (a <= 217) return true;\n  if (a <= 219) return true;\n  if (a <= 221) return true;\n  if (a <= 223) return true;\n  if (a <= 225) return true;\n  if (a <= 227) return true;\n  if (a <= 229) return true;\n  if (a <= 231) return true;\n  if (a <= 233) return true;\n  if (a <= 235) return true;\n  if (a <= 237) return true;\n  if (a <= 239) return true;\n  if (a <= 241) return true;\n  if (a <= 243) return true;\n  if (a <= 245) return true;\n  if (a <= 247) return true;\n  if (a <= 249) return true;\n  if (a <= 251) return true;\n  if (a <= 253) return true;\n  if (a <= 255) return true;\n  if (a <= 257) return true;\n  if (a <= 259) return true;\n  if (a <= 261) return true;\n  if (a <= 263) return true;\n  if (a <= 265) return true;\n  if (a <= 267) return true;\n  if (a <= 269) return true;\n  if (a <= 271) return true;\n  if (a <= 273) return true;\n  if (a <= 275) return true;\n  if (a <= 277) return true;\n  if (a <= 279) return true;\n  if (a <= 281) return true;\n  if (a <= 283) return true;\n  if (a <= 285) return true;\n  if (a <= 287) return true;\n  if (a <= 289) return true;\n  if (a <= 291) return true;\n  if (a <= 293) return true;\n  if (a <= 295) return true;\n  if (a <= 297) return true;\n  if (a <= 299) return true;\n  if (a <= 301) return true;\n  if (a <= 303) return true;\n  if (a <= 305) return true;\n  if (a <= 307) return true;\n  if (a <= 309) return true;\n  if (a <= 311) return true;\n  if (a <= 313) return true;\n  if (a <= 315) return true;\n  if (a <= 317) return true;\n  if (a <= 319) return true;\n  if (a <= 321) return true;\n  if (a <= 323) return true;\n  if (a <= 325) return true;\n  if (a <= 327) return true;\n  if (a <= 329) return true;\n  if (a <= 331) return true;\n  if (a <= 333) return true;\n  if (a <= 335) return true;\n  if (a <= 337) return true;\n  if (a <= 339) return true;\n  if (a <= 341) return true;\n  if (a <= 343) return true;\n  if (a <= 345) return true;\n  if (a <= 347) return true;\n  if (a <= 349) return true;\n  if (a <= 351) return true;\n  if (a <= 353) return true;\n  if (a <= 355) return true;\n  if (a <= 357) return true;\n  if (a <= 359) return true;\n  if (a <= 361) return true;\n  if (a <= 363) return true;\n  if (a <= 365) return true;\n  if (a <= 367) return true;\n  if (a <= 369) return true;\n  if (a <= 371) return true;\n  if (a <= 373) return true;\n  if (a <= 375) return true;\n  if (a <= 377) return true;\n  if (a <= 379) return true;\n  if (a <= 381) return true;\n  if (a <= 383) return true;\n  if (a <= 385) return true;\n  if (a <= 387) return true;\n  if (a <= 389) return true;\n  if (a <= 391) return true;\n  if (a <= 393) return "}
{"task_id": "JavaScript/78", "prompt": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\n\nconst hexKey = (num) => {\n  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n", "canonical_solution": "    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "partial": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    # print('@@this is the line to split##')\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "gc": "<|endoftext|>/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\n\nconst hexKey = (num) => {\n  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    total += parseInt(num.charAt(i), 16);\n  for (let i = 0; i < primes.length; i++)\n    if (total % primes[i] == 0)\n      return primes[i];\n  return total;\n};\n\nconst isPrime = (num) => {\n  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    total += parseInt(num.charAt(i), 16);\n  for (let i = 0; i < primes.length; i++)\n    if (total % primes[i] == 0)\n      return false;\n  return true;\n};\n\nconst isPrimeNum = (num) => {\n  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    total += parseInt(num.charAt(i), 16);\n  for (let i = 0; i < primes.length; i++)\n    if (total % primes[i] == 0)\n      return true;\n  return false;\n};\n\nconst isPrimeHex = (num) => {\n  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    total += parseInt(num.charAt(i), 16);\n  for (let i = 0; i < primes.length; i++)\n    if (total % primes[i] == 0)\n      return primes[i];\n  return total;\n};\n\nconst isPrimeHexNum = (num) => {\n  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    total += parseInt(num.charAt(i), 16);\n  for (let i = 0; i < primes.length; i++)\n    if (total % primes[i] == 0)\n      return true;\n  return false;\n};\n\nconst isPrimeHexHex = (num) => {\n  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    total += parseInt(num.charAt(i), 16);\n  for (let i = 0; i < primes.length; i++)\n    if (total % primes[i] == 0)\n      return primes[i];\n  return total;\n};\n\nconst isPrimeHexHexNum = (num) => {\n  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    total += parseInt(num.charAt(i), 16);\n  for (let i = 0; i < primes.length; i++)\n    if (total % primes[i] == 0)\n      return true;\n  return false;\n};\n\nconst isPrimeHexHexHex = (num) => {\n  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    total += parseInt(num.charAt(i), 16);\n  for (let i = 0; i < primes.length; i++)\n    if (total % primes[i] == 0)\n      return primes[i];\n  return total;\n};\n\nconst isPrimeHexHexHexNum = (num) => {\n  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    total += parseInt(num.charAt(i), 16);\n  for (let i = 0; i < primes.length; i++)\n    if (total % primes[i] == 0)\n      return true;\n  return false;\n};\n\nconst isPrimeHexHexHexHex = (num) => {\n  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    total += parseInt(num.charAt(i), 16);\n  for (let i = 0; i < primes.length; i++)\n    if (total % primes[i] == 0)\n      return primes[i];\n  return total;\n};\n\nconst isPrimeHexHexHexHexNum = (num) => {\n  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    total += parseInt(num.charAt(i), 16);\n  for (let i = 0; i < primes.length; i++)\n    if (total % primes[i] == 0)\n      return true;\n  return false;\n};\n\nconst isPrimeHexHexHexHexHex = (num) => {\n  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    total += parseInt(num.charAt(i), 16);\n  for (let i = 0; i < primes.length; i++)\n    if (total % primes[i] == 0)\n      return primes[i];\n  return total;\n};\n\nconst isPrimeHexHexHexHexNum = (num) => {\n  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    total += parseInt(num.charAt(i), 16);\n  for (let i = 0; i < primes.length; i++)\n    if (total % primes[i] == 0)\n      return true;\n  return false;\n};\n\nconst isPrimeHexHexHexHexHex = (num) => {\n  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    total += parseInt(num.charAt(i), 16);\n  for (let i = 0; i < primes.length; i++)\n    if (total % primes[i] == 0)\n      return primes[i];\n  return total;\n};\n\nconst isPrimeHexHexHexHexHexNum = (num) => {\n  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    total += parseInt(num.charAt(i), 16);\n  for (let i = 0; i < primes.length; i++)\n    if (total % primes[i] == 0)\n      return true;\n  return false;\n};\n\nconst isPrimeHexHexHexHexHexHex = (num) => {\n  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    total += parseInt(num.charAt(i), 16);\n  for (let i = 0; i < primes.length; i++)\n    if (total % primes[i] == 0)\n      return primes[i];\n  return total;\n};\n\nconst isPrimeHexHexHexHexHexNum = (num) => {\n  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    total += parseInt(num.charAt(i), 16);\n  for (let i = 0; i < primes.length; i++)\n    if (total % primes[i] == 0)\n      return true;\n  return false;\n};\n\nconst isPrimeHexHexHexHexHexHex = (num) => {\n  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    total += parseInt(num.charAt(i), 16);\n  for (let i = 0; i < primes.length; i++)\n    if (total % primes[i] == 0)\n      return primes[i];\n  return total;\n};\n\nconst isPrimeHexHexHexHexHexHexNum = (num) => {\n  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    total += parseInt(num.charAt(i), 16);\n  for (let i = 0; i < primes.length; i++)\n    if (total % primes[i] == 0)\n      return true;\n  return false;\n};\n\nconst isPrimeHexHexHexHexHexHexHex = (num) => {\n  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    total += parseInt(num.charAt(i), 16);\n  for (let i = 0; i < primes.length; i++)\n    if (total % primes[i] == 0)\n      return primes[i];\n  return total;\n};\n\nconst isPrimeHexHex"}
{"task_id": "JavaScript/79", "prompt": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\n\nconst decimalToBinary = (decimal) => {\n  return \"db\" + decimal.toString(2) + \"db\";\n", "canonical_solution": "}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "partial": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  return \"db\" + decimal.toString(2) + \"db\";\n  # print('@@this is the line to split##')\n}\n\n", "gc": "<|endoftext|>/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\n\nconst decimalToBinary = (decimal) => {\n  return \"db\" + decimal.toString(2) + \"db\";\n};\n\n/*\n  Write a function that converts a string to a binary number in decimal form. Your function should\n  return a string, with each character representing a binary number. Each character in the string\n  will be '0' or '1'.\n\n  Examples:\n  binaryToDecimal(\"db1111db\")  # returns 15\n  binaryToDecimal(\"db100000db\")  # returns 32\n  */\n\nconst binaryToDecimal = (binary) => {\n  return binary.replace(/db/g, \"1\").replace(/1/g, \"0\");\n};\n\n/*\n  Write a function that converts a binary number to a string in decimal form. Your function should\n  return a string, with each character representing a binary number. Each character in the string\n  will be '0' or '1'.\n\n  Examples:\n  decimalToBinary(\"db1111db\")  # returns \"15\"\n  decimalToBinary(\"db100000db\")  # returns \"32\"\n  */\n\nconst decimalToBinary = (decimal) => {\n  return \"db\" + decimal.toString(2) + \"db\";\n};\n\n/*\n  Write a function that converts a string to a binary number in decimal form. Your function should\n  return a string, with each character representing a binary number. Each character in the string\n  will be '0' or '1'.\n\n  Examples:\n  binaryToDecimal(\"db1111db\")  # returns \"15\"\n  binaryToDecimal(\"db100000db\")  # returns \"32\"\n  */\n\nconst binaryToDecimal = (binary) => {\n  return binary.replace(/1/g, \"0\").replace(/db/g, \"1\");\n};\n\n/*\n  Write a function that converts a binary number to a string in decimal form. Your function should\n  return a string, with each character representing a binary number. Each character in the string\n  will be '0' or '1'.\n\n  Examples:\n  decimalToBinary(\"db1111db\")  # returns \"15\"\n  decimalToBinary(\"db100000db\")  # returns \"32\"\n  */\n\nconst decimalToBinary = (decimal) => {\n  return \"db\" + decimal.toString(2) + \"db\";\n};\n\n/*\n  Write a function that converts a string to a binary number in decimal form. Your function should\n  return a string, with each character representing a binary number. Each character in the string\n  will be '0' or '1'.\n\n  Examples:\n  binaryToDecimal(\"db1111db\")  # returns \"15\"\n  binaryToDecimal(\"db100000db\")  # returns \"32\"\n  */\n\nconst binaryToDecimal = (binary) => {\n  return binary.replace(/1/g, \"0\").replace(/db/g, \"1\");\n};\n\n/*\n  Write a function that converts a binary number to a string in decimal form. Your function should\n  return a string, with each character representing a binary number. Each character in the string\n  will be '0' or '1'.\n\n  Examples:\n  decimalToBinary(\"db1111db\")  # returns \"15\"\n  decimalToBinary(\"db100000db\")  # returns \"32\"\n  */\n\nconst decimalToBinary = (decimal) => {\n  return \"db\" + decimal.toString(2) + \"db\";\n};\n\n/*\n  Write a function that converts a string to a binary number in decimal form. Your function should\n  return a string, with each character representing a binary number. Each character in the string\n  will be '0' or '1'.\n\n  Examples:\n  binaryToDecimal(\"db1111db\")  # returns \"15\"\n  binaryToDecimal(\"db100000db\")  # returns \"32\"\n  */\n\nconst binaryToDecimal = (binary) => {\n  return binary.replace(/1/g, \"0\").replace(/db/g, \"1\");\n};\n\n/*\n  Write a function that converts a binary number to a string in decimal form. Your function should\n  return a string, with each character representing a binary number. Each character in the string\n  will be '0' or '1'.\n\n  Examples:\n  decimalToBinary(\"db1111db\")  # returns \"15\"\n  decimalToBinary(\"db100000db\")  # returns \"32\"\n  */\n\nconst decimalToBinary = (decimal) => {\n  return \"db\" + decimal.toString(2) + \"db\";\n};\n\n/*\n  Write a function that converts a string to a binary number in decimal form. Your function should\n  return a string, with each character representing a binary number. Each character in the string\n  will be '0' or '1'.\n\n  Examples:\n  binaryToDecimal(\"db1111db\")  # returns \"15\"\n  binaryToDecimal(\"db100000db\")  # returns \"32\"\n  */\n\nconst binaryToDecimal = (binary) => {\n  return binary.replace(/1/g, \"0\").replace(/db/g, \"1\");\n};\n\n/*\n  Write a function that converts a binary number to a string in decimal form. Your function should\n  return a string, with each character representing a binary number. Each character in the string\n  will be '0' or '1'.\n\n  Examples:\n  decimalToBinary(\"db1111db\")  # returns \"15\"\n  decimalToBinary(\"db100000db\")  # returns \"32\"\n  */\n\nconst decimalToBinary = (decimal) => {\n  return \"db\" + decimal.toString(2) + \"db\";\n};\n\n/*\n  Write a function that converts a string to a binary number in decimal form. Your function should\n  return a string, with each character representing a binary number. Each character in the string\n  will be '0' or '1'.\n\n  Examples:\n  binaryToDecimal(\"db1111db\")  # returns \"15\"\n  binaryToDecimal(\"db100000db\")  # returns \"32\"\n  */\n\nconst binaryToDecimal = (binary) => {\n  return binary.replace(/1/g, \"0\").replace(/db/g, \"1\");\n};\n\n/*\n  Write a function that converts a binary number to a string in decimal form. Your function should\n  return a string, with each character representing a binary number. Each character in the string\n  will be '0' or '1'.\n\n  Examples:\n  decimalToBinary(\"db1111db\")  # returns \"15\"\n  decimalToBinary(\"db100000db\")  # returns \"32\"\n  */\n\nconst decimalToBinary = (decimal) => {\n  return \"db\" + decimal.toString(2) + \"db\";\n};\n\n/*\n  Write a function that converts a string to a binary number in decimal form. Your function should\n  return a string, with each character representing a binary number. Each character in the string\n  will be '0' or '1'.\n\n  Examples:\n  binaryToDecimal(\"db1111db\")  # returns \"15\"\n  binaryToDecimal(\"db100000db\")  # returns \"32\"\n  */\n\nconst binaryToDecimal = (binary) => {\n  return binary.replace(/1/g, \"0\").replace(/db/g, \"1\");\n};\n\n/*\n  Write a function that converts a binary number to a string in decimal form. Your function should\n  return a string, with each character representing a binary number. Each character in the string\n  will be '0' or '1'.\n\n  Examples:\n  decimalToBinary(\"db1111db\")  # returns \"15\"\n  decimalToBinary(\"db100000db\")  # returns \"32\"\n  */\n\nconst decimalToBinary = (decimal) => {\n"}
{"task_id": "JavaScript/80", "prompt": "/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\n\nconst isHappy = (s) => {\n  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n", "canonical_solution": "    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "partial": "/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    # print('@@this is the line to split##')\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "gc": "<|endoftext|>/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\n\nconst isHappy = (s) => {\n  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] === s[i + 1] && s[i] === s[i + 2])\n      return false;\n  return true;\n};\n\nmodule.exports = isHappy;\n\n},{}],4:[function(require,module,exports){\n/*You are given a string s.\n  Your task is to check if the string is palindrome or not.\n  A string is palindrome if its length is at least 2 and every 2 letters are different.\n  For example:\n  isPalindrome(a) => true\n  isPalindrome(aa) => true\n  isPalindrome(abcd) => false\n  isPalindrome(aabb) => true\n  isPalindrome(adb) => false\n  isPalindrome(xyy) => false\n  */\n\nconst isPalindrome = (s) => {\n  if (s.length < 2)\n    return false;\n  for (let i = 0; i < s.length - 1; i++)\n    if (s[i] === s[i + 1])\n      return false;\n  return true;\n};\n\nmodule.exports = isPalindrome;\n\n},{}],5:[function(require,module,exports){\n/*You are given a string s.\n  Your task is to check if the string is palindrome or not.\n  A string is palindrome if its length is at least 2 and every 2 letters are different.\n  For example:\n  isPalindrome(a) => false\n  isPalindrome(aa) => false\n  isPalindrome(abcd) => true\n  isPalindrome(aabb) => false\n  isPalindrome(adb) => true\n  isPalindrome(xyy) => false\n  */\n\nconst isPalindrome = (s) => {\n  if (s.length < 2)\n    return false;\n  for (let i = 0; i < s.length - 1; i++)\n    if (s[i] === s[i + 1])\n      return true;\n  return false;\n};\n\nmodule.exports = isPalindrome;\n\n},{}],6:[function(require,module,exports){\n/*You are given a string s.\n  Your task is to check if the string is palindrome or not.\n  A string is palindrome if its length is at least 2 and every 2 letters are different.\n  For example:\n  isPalindrome(a) => true\n  isPalindrome(aa) => true\n  isPalindrome(abcd) => false\n  isPalindrome(aabb) => false\n  isPalindrome(adb) => true\n  isPalindrome(xyy) => false\n  */\n\nconst isPalindrome = (s) => {\n  if (s.length < 2)\n    return false;\n  for (let i = 0; i < s.length - 1; i++)\n    if (s[i] === s[i + 1])\n      return false;\n  return true;\n};\n\nmodule.exports = isPalindrome;\n\n},{}],7:[function(require,module,exports){\n/*You are given a string s.\n  Your task is to check if the string is palindrome or not.\n  A string is palindrome if its length is at least 2 and every 2 letters are different.\n  For example:\n  isPalindrome(a) => true\n  isPalindrome(aa) => true\n  isPalindrome(abcd) => false\n  isPalindrome(aabb) => false\n  isPalindrome(adb) => true\n  isPalindrome(xyy) => false\n  */\n\nconst isPalindrome = (s) => {\n  if (s.length < 2)\n    return false;\n  for (let i = 0; i < s.length - 1; i++)\n    if (s[i] === s[i + 1])\n      return true;\n  return false;\n};\n\nmodule.exports = isPalindrome;\n\n},{}],8:[function(require,module,exports){\n/*You are given a string s.\n  Your task is to check if the string is palindrome or not.\n  A string is palindrome if its length is at least 2 and every 2 letters are different.\n  For example:\n  isPalindrome(a) => true\n  isPalindrome(aa) => true\n  isPalindrome(abcd) => false\n  isPalindrome(aabb) => false\n  isPalindrome(adb) => true\n  isPalindrome(xyy) => false\n  */\n\nconst isPalindrome = (s) => {\n  if (s.length < 2)\n    return false;\n  for (let i = 0; i < s.length - 1; i++)\n    if (s[i] === s[i + 1])\n      return false;\n  return true;\n};\n\nmodule.exports = isPalindrome;\n\n},{}],9:[function(require,module,exports){\n/*You are given a string s.\n  Your task is to check if the string is palindrome or not.\n  A string is palindrome if its length is at least 2 and every 2 letters are different.\n  For example:\n  isPalindrome(a) => true\n  isPalindrome(aa) => true\n  isPalindrome(abcd) => false\n  isPalindrome(aabb) => false\n  isPalindrome(adb) => true\n  isPalindrome(xyy) => false\n  */\n\nconst isPalindrome = (s) => {\n  if (s.length < 2)\n    return false;\n  for (let i = 0; i < s.length - 1; i++)\n    if (s[i] === s[i + 1])\n      return true;\n  return false;\n};\n\nmodule.exports = isPalindrome;\n\n},{}],10:[function(require,module,exports){\n/*You are given a string s.\n  Your task is to check if the string is palindrome or not.\n  A string is palindrome if its length is at least 2 and every 2 letters are different.\n  For example:\n  isPalindrome(a) => true\n  isPalindrome(aa) => true\n  isPalindrome(abcd) => false\n  isPalindrome(aabb) => false\n  isPalindrome(adb) => true\n  isPalindrome(xyy) => false\n  */\n\nconst isPalindrome = (s) => {\n  if (s.length < 2)\n    return false;\n  for (let i = 0; i < s.length - 1; i++)\n    if (s[i] === s[i + 1])\n      return false;\n  return true;\n};\n\nmodule.exports = isPalindrome;\n\n},{}],11:[function(require,module,exports){\n/*You are given a string s.\n  Your task is to check if the string is palindrome or not.\n  A string is palindrome if its length is at least 2 and every 2 letters are different.\n  For example:\n  isPalindrome(a) => true\n  isPalindrome(aa) => true\n  isPalindrome(abcd) => false\n  isPalindrome(aabb) => false\n  isPalindrome(adb) => true\n  isPalindrome(xyy) => false\n  */\n\nconst isPalindrome = (s) => {\n  if (s.length < 2)\n    return false;\n  for (let i = 0; i < s.length - 1; i++)\n    if (s[i] === s[i + 1])\n      return false;\n  return true;\n};\n\nmodule.exports = isPalindrome;\n\n},{}],12:[function(require,module,exports){\n/*You are given a string s.\n  Your task is to check if the string is palindrome or not.\n  A string is palindrome if its length is at least 2 and every 2 letters are different.\n  For example:\n  isPalindrome(a) => true\n  isPalindrome(aa) => true\n  isPalindrome(abcd) => false\n  isPalindrome(aabb) => false\n  isPalindrome(adb) => true\n"}
{"task_id": "JavaScript/81", "prompt": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\n\nconst numericalLetterGrade = (grades) => {\n  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n", "canonical_solution": "      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "partial": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      # print('@@this is the line to split##')\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "gc": "<|endoftext|>/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\n\nconst numericalLetterGrade = (grades) => {\n  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n/*\n  It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\n\nconst numericalLetterGrade = (grades) => {\n  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n/*\n  It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\n\nconst numericalLetterGrade = (grades) => {\n  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n/*\n  It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3."}
{"task_id": "JavaScript/82", "prompt": "/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\n\nconst primeLength = (string) => {\n  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n", "canonical_solution": "    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "partial": "/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    # print('@@this is the line to split##')\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "gc": "<|endoftext|>/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\n\nconst primeLength = (string) => {\n  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i === 0) { return false }\n  }\n  return true\n}\n\n/*Write a function that takes a string and returns true if the string\n  length is divisible by 3 or false otherwise\n  Examples\n  divisibleBy3('Hello') == true\n  divisibleBy3('kittens') == true\n  divisibleBy3('orange') == false\n  */\n\nconst divisibleBy3 = (string) => {\n  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i === 0) { return false }\n  }\n  return true\n}\n\n/*Write a function that takes a string and returns true if the string\n  length is divisible by 5 or false otherwise\n  Examples\n  divisibleBy5('Hello') == true\n  divisibleBy5('kittens') == true\n  divisibleBy5('orange') == false\n  */\n\nconst divisibleBy5 = (string) => {\n  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i === 0) { return false }\n  }\n  return true\n}\n\n/*Write a function that takes a string and returns true if the string\n  length is divisible by 7 or false otherwise\n  Examples\n  divisibleBy7('Hello') == true\n  divisibleBy7('kittens') == true\n  divisibleBy7('orange') == false\n  */\n\nconst divisibleBy7 = (string) => {\n  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i === 0) { return false }\n  }\n  return true\n}\n\n/*Write a function that takes a string and returns true if the string\n  length is divisible by 9 or false otherwise\n  Examples\n  divisibleBy9('Hello') == true\n  divisibleBy9('kittens') == true\n  divisibleBy9('orange') == false\n  */\n\nconst divisibleBy9 = (string) => {\n  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i === 0) { return false }\n  }\n  return true\n}\n\n/*Write a function that takes a string and returns true if the string\n  length is divisible by 11 or false otherwise\n  Examples\n  divisibleBy11('Hello') == true\n  divisibleBy11('kittens') == true\n  divisibleBy11('orange') == false\n  */\n\nconst divisibleBy11 = (string) => {\n  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i === 0) { return false }\n  }\n  return true\n}\n\n/*Write a function that takes a string and returns true if the string\n  length is divisible by 13 or false otherwise\n  Examples\n  divisibleBy13('Hello') == true\n  divisibleBy13('kittens') == true\n  divisibleBy13('orange') == false\n  */\n\nconst divisibleBy13 = (string) => {\n  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i === 0) { return false }\n  }\n  return true\n}\n\n/*Write a function that takes a string and returns true if the string\n  length is divisible by 15 or false otherwise\n  Examples\n  divisibleBy15('Hello') == true\n  divisibleBy15('kittens') == true\n  divisibleBy15('orange') == false\n  */\n\nconst divisibleBy15 = (string) => {\n  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i === 0) { return false }\n  }\n  return true\n}\n\n/*Write a function that takes a string and returns true if the string\n  length is divisible by 17 or false otherwise\n  Examples\n  divisibleBy17('Hello') == true\n  divisibleBy17('kittens') == true\n  divisibleBy17('orange') == false\n  */\n\nconst divisibleBy17 = (string) => {\n  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i === 0) { return false }\n  }\n  return true\n}\n\n/*Write a function that takes a string and returns true if the string\n  length is divisible by 19 or false otherwise\n  Examples\n  divisibleBy19('Hello') == true\n  divisibleBy19('kittens') == true\n  divisibleBy19('orange') == false\n  */\n\nconst divisibleBy19 = (string) => {\n  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i === 0) { return false }\n  }\n  return true\n}\n\n/*Write a function that takes a string and returns true if the string\n  length is divisible by 21 or false otherwise\n  Examples\n  divisibleBy21('Hello') == true\n  divisibleBy21('kittens') == true\n  divisibleBy21('orange') == false\n  */\n\nconst divisibleBy21 = (string) => {\n  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i === 0) { return false }\n  }\n  return true\n}\n\n/*Write a function that takes a string and returns true if the string\n  length is divisible by 23 or false otherwise\n  Examples\n  divisibleBy23('Hello') == true\n  divisibleBy23('kittens') == true\n  divisibleBy23('orange') == false\n  */\n\nconst divisibleBy23 = (string) => {\n  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i === 0) { return false }\n  }\n  return true\n}\n\n/*Write a function that takes a string and returns true if the string\n  length is divisible by 25 or false otherwise\n  Examples\n  divisibleBy25('Hello') == true\n  divisibleBy25('kittens') == true\n  divisibleBy25('orange') == false\n  */\n\nconst divisibleBy25 = (string) => {\n  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i === 0) { return false }\n  }\n  return true\n}\n\n/*Write a function that takes a string and returns true if the string\n  length is divisible by 27 or false otherwise\n  Examples\n  divisibleBy27('Hello') == true\n  divisibleBy27('kittens') == true\n  divisibleBy27('orange') == false\n  */\n\nconst divisibleBy27 = (string) => {\n  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i === 0) { return false }\n  }\n  return true\n}\n\n/*Write a function that takes a string and returns true if the string\n  length is divisible by 29 or false otherwise\n  Examples\n  divisibleBy29('Hello') == true\n  divisibleBy29('kittens') == true\n  divisibleBy"}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\n\nconst startsOneEnds = (n) => {\n  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n", "canonical_solution": "    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "partial": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst startsOneEnds = (n) => {\n  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    # print('@@this is the line to split##')\n    t = t * 10\n  }\n  return t\n}\n\n", "gc": "<|endoftext|>/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\n\nconst startsOneEnds = (n) => {\n  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    if (n % i == 0) {\n      t += i\n    }\n  }\n  return t\n}\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 2.\n  */\n\nconst startsTwoEnds = (n) => {\n  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    if (n % i == 0) {\n      t += i\n    }\n  }\n  return t\n}\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 3.\n  */\n\nconst startsThreeEnds = (n) => {\n  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    if (n % i == 0) {\n      t += i\n    }\n  }\n  return t\n}\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 4.\n  */\n\nconst startsFourEnds = (n) => {\n  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    if (n % i == 0) {\n      t += i\n    }\n  }\n  return t\n}\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 5.\n  */\n\nconst startsFiveEnds = (n) => {\n  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    if (n % i == 0) {\n      t += i\n    }\n  }\n  return t\n}\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 6.\n  */\n\nconst startsSixEnds = (n) => {\n  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    if (n % i == 0) {\n      t += i\n    }\n  }\n  return t\n}\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 7.\n  */\n\nconst startsSevenEnds = (n) => {\n  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    if (n % i == 0) {\n      t += i\n    }\n  }\n  return t\n}\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 8.\n  */\n\nconst startsEightEnds = (n) => {\n  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    if (n % i == 0) {\n      t += i\n    }\n  }\n  return t\n}\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 9.\n  */\n\nconst startsNineEnds = (n) => {\n  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    if (n % i == 0) {\n      t += i\n    }\n  }\n  return t\n}\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 10.\n  */\n\nconst startsTenEnds = (n) => {\n  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    if (n % i == 0) {\n      t += i\n    }\n  }\n  return t\n}\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 11.\n  */\n\nconst startsElevenEnds = (n) => {\n  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    if (n % i == 0) {\n      t += i\n    }\n  }\n  return t\n}\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 12.\n  */\n\nconst startsTwelveEnds = (n) => {\n  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    if (n % i == 0) {\n      t += i\n    }\n  }\n  return t\n}\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 13.\n  */\n\nconst startsThirteenEnds = (n) => {\n  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    if (n % i == 0) {\n      t += i\n    }\n  }\n  return t\n}\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 14.\n  */\n\nconst startsFourteenEnds = (n) => {\n  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    if (n % i == 0) {\n      t += i\n    }\n  }\n  return t\n}\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 15.\n  */\n\nconst startsFifteenEnds = (n) => {\n  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    if (n % i == 0) {\n      t += i\n    }\n  }\n  return t\n}\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 16.\n  */\n\nconst startsSixteenEnds = (n) => {\n  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    if (n % i == 0) {\n      t += i\n    }\n  }\n  return t\n}\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 17.\n  */\n\nconst startsSeventeenEnds = (n) => {\n  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    if (n % i == 0) {\n      t += i\n    }\n  }\n  return t\n}\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 18.\n  */\n\nconst startsEighteenEnds = (n) => {\n  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    if (n % i == 0) {\n      t += i\n    }\n  }\n  return t\n}\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 19.\n  */\n\nconst startsNineteenEnds = (n) => {\n  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    if (n % i == 0) {\n      t += i\n    }\n  }\n  return t\n}\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 20.\n  */\n\nconst startsTwentyEnds = (n) => {\n  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    if (n % i == 0) {\n      t += i\n    }\n  }\n  return t\n}\n\n/*\n  Given a positive integer n, return the count of the numbers of "}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\n\nconst solve = (N) => {\n  let t = 0\n  while (N > 0) {\n    t += N % 10\n", "canonical_solution": "    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "partial": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let t = 0\n  while (N > 0) {\n    t += N % 10\n    # print('@@this is the line to split##')\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "gc": "<|endoftext|>/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\n\nconst solve = (N) => {\n  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = Math.floor(N / 10)\n  }\n  return t\n}\n\nmodule.exports = { solve }\n\n},{}],4:[function(require,module,exports){\n/*\n  Given a positive integer N, return the sum of its digits in decimal.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of decimal number\n  */\n\nconst solve = (N) => {\n  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = Math.floor(N / 10)\n  }\n  return t\n}\n\nmodule.exports = { solve }\n\n},{}],5:[function(require,module,exports){\n/*\n  Given a positive integer N, return the sum of its digits in hexadecimal.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"0x\".\n      For N = 150, the sum of digits will be 6 the output should be \"0x110\".\n      For N = 147, the sum of digits will be 12 the output should be \"0x1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of hexadecimal number\n  */\n\nconst solve = (N) => {\n  let t = 0\n  while (N > 0) {\n    t += N % 16\n    N = Math.floor(N / 16)\n  }\n  return t\n}\n\nmodule.exports = { solve }\n\n},{}],6:[function(require,module,exports){\n/*\n  Given a positive integer N, return the sum of its digits in octal.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"0\".\n      For N = 150, the sum of digits will be 6 the output should be \"0x110\".\n      For N = 147, the sum of digits will be 12 the output should be \"0x1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of octal number\n  */\n\nconst solve = (N) => {\n  let t = 0\n  while (N > 0) {\n    t += N % 8\n    N = Math.floor(N / 8)\n  }\n  return t\n}\n\nmodule.exports = { solve }\n\n},{}],7:[function(require,module,exports){\n/*\n  Given a positive integer N, return the sum of its digits in hexadecimal.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"0x\".\n      For N = 150, the sum of digits will be 6 the output should be \"0x110\".\n      For N = 147, the sum of digits will be 12 the output should be \"0x1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of decimal number\n  */\n\nconst solve = (N) => {\n  let t = 0\n  while (N > 0) {\n    t += N % 16\n    N = Math.floor(N / 16)\n  }\n  return t\n}\n\nmodule.exports = { solve }\n\n},{}],8:[function(require,module,exports){\n/*\n  Given a positive integer N, return the sum of its digits in decimal.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of decimal number\n  */\n\nconst solve = (N) => {\n  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = Math.floor(N / 10)\n  }\n  return t\n}\n\nmodule.exports = { solve }\n\n},{}],9:[function(require,module,exports){\n/*\n  Given a positive integer N, return the sum of its digits in hexadecimal.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"0x\".\n      For N = 150, the sum of digits will be 6 the output should be \"0x110\".\n      For N = 147, the sum of digits will be 12 the output should be \"0x1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of hexadecimal number\n  */\n\nconst solve = (N) => {\n  let t = 0\n  while (N > 0) {\n    t += N % 16\n    N = Math.floor(N / 16)\n  }\n  return t\n}\n\nmodule.exports = { solve }\n\n},{}],10:[function(require,module,exports){\n/*\n  Given a positive integer N, return the sum of its digits in octal.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"0\".\n      For N = 150, the sum of digits will be 6 the output should be \"0x110\".\n      For N = 147, the sum of digits will be 12 the output should be \"0x1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of octal number\n  */\n\nconst solve = (N) => {\n  let t = 0\n  while (N > 0) {\n    t += N % 8\n    N = Math.floor(N / 8)\n  }\n  return t\n}\n\nmodule.exports = { solve }\n\n},{}],11:[function(require,module,exports){\n/*\n  Given a positive integer N, return the sum of its digits in hexadecimal.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"0x\".\n      For N = 150, the sum of digits will be 6 the output should be \"0x110\".\n      For N = 147, the sum of digits will be 12 the output should be \"0x1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of decimal number\n  */\n\nconst solve = (N) => {\n  let t = 0\n  while (N > 0) {\n    t += N % 16\n    N = Math.floor(N / 16)\n  }\n  return t\n}\n\nmodule.exports = { solve }\n\n},{}],12:[function(require,module,exports){\n/*\n  Given a positive integer N, return the sum of its digits in octal.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"0\".\n      For N = 150, the sum of digits will be 6 the output should be \"0x110\".\n      For N = 147, the sum of digits will be 12 the output should be \"0x1100"}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\n\nconst add = (lst) => {\n  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n", "canonical_solution": "    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "partial": "/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n      # print('@@this is the line to split##')\n    }\n  }\n  return t\n}\n\n", "gc": "<|endoftext|>/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\n\nconst add = (lst) => {\n  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n/*Given a non-empty list of integers lst. remove the even elements that are at odd indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 2, 6, 7]\n  */\n\nconst remove = (lst) => {\n  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t -= lst[i]\n    }\n  }\n  return t\n}\n\n/*Given a non-empty list of integers lst. remove the even elements that are at odd indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\n\nconst removeEven = (lst) => {\n  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t -= lst[i]\n    }\n  }\n  return t\n}\n\n/*Given a non-empty list of integers lst. remove the odd elements that are at even indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 2, 7]\n  */\n\nconst removeOdd = (lst) => {\n  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2!= 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n/*Given a non-empty list of integers lst. return the sum of the even elements that are at odd indices..\n\n\n  Examples:\n      sumEven([4, 2, 6, 7]) ==> 6\n  */\n\nconst sumEven = (lst) => {\n  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n/*Given a non-empty list of integers lst. return the sum of the odd elements that are at even indices..\n\n\n  Examples:\n      sumOdd([2, 4, 6, 8]) ==> 8\n  */\n\nconst sumOdd = (lst) => {\n  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2!= 0) {\n      t -= lst[i]\n    }\n  }\n  return t\n}\n\n/*Given a non-empty list of integers lst. return the difference between the sum of the even elements that are at odd indices and the sum of the odd elements that are at even indices..\n\n\n  Examples:\n      diff([4, 2, 6, 7]) ==> 2\n  */\n\nconst diff = (lst) => {\n  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t - sumEven(lst)\n}\n\n/*Given a non-empty list of integers lst. return the difference between the sum of the odd elements that are at even indices and the sum of the even elements that are at odd indices..\n\n\n  Examples:\n      diff([4, 2, 6, 7]) ==> 1\n  */\n\nconst diffOdd = (lst) => {\n  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2!= 0) {\n      t -= lst[i]\n    }\n  }\n  return t - sumOdd(lst)\n}\n\n/*Given a non-empty list of integers lst. return the difference between the sum of the even elements that are at odd indices and the sum of the odd elements that are at even indices..\n\n\n  Examples:\n      diff([4, 2, 6, 7]) ==> -1\n  */\n\nconst diffEven = (lst) => {\n  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t - sumOdd(lst)\n}\n\n/*Given a non-empty list of integers lst. return the difference between the sum of the odd elements that are at even indices and the sum of the even elements that are at odd indices..\n\n\n  Examples:\n      diff([4, 2, 6, 7]) ==> 1\n  */\n\nconst diffOddEven = (lst) => {\n  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2!= 0) {\n      t -= lst[i]\n    }\n  }\n  return t - sumEven(lst)\n}\n\n/*Given a non-empty list of integers lst. return the difference between the sum of the odd elements that are at odd indices and the sum of the even elements that are at even indices..\n\n\n  Examples:\n      diff([4, 2, 6, 7]) ==> -1\n  */\n\nconst diffEvenOdd = (lst) => {\n  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2!= 0) {\n      t += lst[i]\n    }\n  }\n  return t - sumOdd(lst)\n}\n\n/*Given a non-empty list of integers lst. return the difference between the sum of the odd elements that are at odd indices and the sum of the even elements that are at odd indices..\n\n\n  Examples:\n      diff([4, 2, 6, 7]) ==> 1\n  */\n\nconst diffOddEvenEven = (lst) => {\n  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2!= 0) {\n      t -= lst[i]\n    }\n  }\n  return t - sumEven(lst)\n}\n\n/*Given a non-empty list of integers lst. return the difference between the sum of the odd elements that are at odd indices and the sum of the even elements that are at odd indices..\n\n\n  Examples:\n      diff([4, 2, 6, 7]) ==> -1\n  */\n\nconst diffEvenOddEven = (lst) => {\n  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2!= 0) {\n      t += lst[i]\n    }\n  }\n  return t - sumOdd(lst)\n}\n\n/*Given a non-empty list of integers lst. return the difference between the sum of the odd elements that are at odd indices and the sum of the even elements that are at odd indices..\n\n\n  Examples:\n      diff([4, 2, 6, 7]) ==> 1\n  */\n\nconst diffEvenOddOdd = (lst) => {\n  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2!= 0) {\n      t -= lst[i]\n    }\n  }\n  return t - sumOdd(lst)\n}\n\n/*Given a non-empty list of integers lst. return the difference between the sum of the odd elements that are at odd indices and the sum of the even elements that are at odd indices..\n\n\n  Examples:\n      diff([4, 2, 6, 7]) ==> -1\n  */\n\nconst diffEvenOddEvenOdd = (lst) => {\n  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2!= 0) {\n      t += lst[i]\n    }\n  }\n  return t - sumEven(lst)\n}\n\n/*Given a non-empty list of integers lst. return the difference between the sum of the odd elements that are at odd indices and the sum of the even elements that are at odd indices..\n\n\n  Examples:\n      diff([4, 2, 6, 7]) ==> 1\n  */\n\nconst diffEvenOddOddEvenOdd = (lst) => {\n  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2!= 0) {\n      t -= lst[i]\n    }\n  }\n  return t - sumOdd(lst)\n}\n\n/*Given a non-empty list of integers lst. return the difference between the sum of the odd elements that are at odd indices and the sum of the even element"}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\n\nconst antiShuffle = (s) => {\n  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n", "canonical_solution": "      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "partial": "/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n        # print('@@this is the line to split##')\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "gc": "<|endoftext|>/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\n\nconst antiShuffle = (s) => {\n  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  return arr.join(' ')\n}\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\n\nconst antiShuffle = (s) => {\n  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  return arr.join(' ')\n}\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\n\nconst antiShuffle = (s) => {\n  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  return arr.join(' ')\n}\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\n\nconst antiShuffle = (s) => {\n  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  return arr.join(' ')\n}\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\n\nconst antiShuffle = (s) => {\n  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  return arr.join(' ')\n}\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\n\nconst antiShuffle = (s) => {\n  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  return arr.join(' ')\n}\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\n\nconst antiShuffle = (s) => {\n  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; "}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\n\nconst getRow = (lst, x) => {\n  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n", "canonical_solution": "      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "partial": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n        # print('@@this is the line to split##')\n      }\n    }\n  }\n  return t\n}\n\n", "gc": "<|endoftext|>/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\n\nconst getRow = (lst, x) => {\n  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\n\nconst getCol = (lst, x) => {\n  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getCol([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 1), (1, 2), (2, 3), (3, 2), (4, 1)]\n  getCol([], 1) == []\n  getCol([[], [1], [1, 2, 3]], 3) == [(2, 3)]\n  */\n\nconst getDiag = (lst, x) => {\n  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getDiag([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 1), (1, 2), (2, 3), (3, 2), (4, 1)]\n  getDiag([], 1) == []\n  getDiag([[], [1], [1, 2, 3]], 3) == [(2, 3)]\n  */\n\nconst getDiagonal = (lst, x) => {\n  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getDiagonal([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 1), (1, 2), (2, 3), (3, 2), (4, 1)]\n  getDiagonal([], 1) == []\n  getDiagonal([[], [1], [1, 2, 3]], 3) == [(2, 3)]\n  */\n\nconst getDiagonalAndRow = (lst, x) => {\n  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getDiagonalAndRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 1), (1, 2), (2, 3), (3, 2), (4, 1)]\n  getDiagonalAndRow([], 1) == []\n  getDiagonalAndRow([[], [1], [1, 2, 3]], 3) == [(2, 3)]\n  */\n\nconst getDiagonalAndCol = (lst, x) => {\n  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getDiagonalAndCol([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 1), (1, 2), (2, 3), (3, 2), (4, 1)]\n  getDiagonalAndCol([], 1) == []\n  getDiagonalAndCol([[], [1], [1, 2, 3]], 3) == [(2, 3)]\n  */\n\nconst getDiagonalAndDiag = (lst, x) => {\n  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst"}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\n\nconst sortArray = (array) => {\n  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n", "canonical_solution": "      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "partial": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n        # print('@@this is the line to split##')\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "gc": "<|endoftext|>/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\n\nconst sortArray = (array) => {\n  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    arr.splice(ind, 0, arr[j])\n    tot = arr[0] + arr[arr.length-1]\n  }\n  return arr\n}\n\n/*\n  Given an array of non-negative integers, return its maximum sum.\n\n  Example:\n  * maxSum([2, 7, 11, 15]) => 15\n  * maxSum([2, 7, 11, 15, 10]) => 15\n  * maxSum([2, 7, 11, 15, 10, 1]) => 10\n  */\n\nconst maxSum = (array) => {\n  let max = 0\n  for (let i = 0; i < array.length; i++) {\n    if (array[i] > max) {\n      max = array[i]\n    }\n  }\n  return max\n}\n\n/*\n  Given an array of non-negative integers, return its minimum sum.\n\n  Example:\n  * minSum([2, 7, 11, 15]) => 15\n  * minSum([2, 7, 11, 15, 10]) => 15\n  * minSum([2, 7, 11, 15, 10, 1]) => 1\n  */\n\nconst minSum = (array) => {\n  let min = 0\n  for (let i = 0; i < array.length; i++) {\n    if (array[i] < min) {\n      min = array[i]\n    }\n  }\n  return min\n}\n\n/*\n  Given an array of non-negative integers, return its median value.\n\n  Example:\n  * median([2, 7, 11, 15]) => 15\n  * median([2, 7, 11, 15, 10]) => 15\n  * median([2, 7, 11, 15, 10, 1]) => 1\n  */\n\nconst median = (array) => {\n  let mid = 0\n  let len = array.length\n  let sum = 0\n  for (let i = 0; i < len; i++) {\n    sum += array[i]\n    if (sum % 2 === 0) {\n      mid = i\n    }\n  }\n  return array[mid]\n}\n\n/*\n  Given an array of non-negative integers, return its mode value.\n\n  Example:\n  * mode([2, 7, 11, 15]) => 2\n  * mode([2, 7, 11, 15, 10]) => 2\n  * mode([2, 7, 11, 15, 10, 1]) => 1\n  */\n\nconst mode = (array) => {\n  let mode = 0\n  let len = array.length\n  let sum = 0\n  for (let i = 0; i < len; i++) {\n    sum += array[i]\n    if (sum % 2 === 0) {\n      mode = i\n    }\n  }\n  return array[mode]\n}\n\n/*\n  Given an array of non-negative integers, return its mode and median value.\n\n  Example:\n  * modeAndMedian([2, 7, 11, 15]) => [2,15]\n  * modeAndMedian([2, 7, 11, 15, 10]) => [2,15]\n  * modeAndMedian([2, 7, 11, 15, 10, 1]) => [1,10]\n  */\n\nconst modeAndMedian = (array) => {\n  let mode = 0\n  let mid = 0\n  let len = array.length\n  let sum = 0\n  for (let i = 0; i < len; i++) {\n    sum += array[i]\n    if (sum % 2 === 0) {\n      mode = i\n      mid = i\n    }\n  }\n  return [mode, array[mid]]\n}\n\n/*\n  Given an array of non-negative integers, return its mode and median value without sort.\n\n  Example:\n  * modeAndMedianWithoutSort([2, 7, 11, 15]) => [2,15]\n  * modeAndMedianWithoutSort([2, 7, 11, 15, 10]) => [2,15]\n  * modeAndMedianWithoutSort([2, 7, 11, 15, 10, 1]) => [1,10]\n  */\n\nconst modeAndMedianWithoutSort = (array) => {\n  let mode = 0\n  let mid = 0\n  let len = array.length\n  let sum = 0\n  for (let i = 0; i < len; i++) {\n    sum += array[i]\n    if (sum % 2 === 0) {\n      mode = i\n      mid = i\n    }\n  }\n  return [mode, array[mid]]\n}\n\n/*\n  Given an array of non-negative integers, return its mode and median value without sort.\n\n  Example:\n  * modeAndMedianWithoutSort([2, 7, 11, 15, 10, 1]) => [1,10]\n  * modeAndMedianWithoutSort([2, 7, 11, 15, 10, 1, 2]) => [1,10]\n  */\n\nconst modeAndMedianWithoutSortAndMedianWithoutSort = (array) => {\n  let mode = 0\n  let mid = 0\n  let len = array.length\n  let sum = 0\n  for (let i = 0; i < len; i++) {\n    sum += array[i]\n    if (sum % 2 === 0) {\n      mode = i\n      mid = i\n    }\n  }\n  return [mode, array[mid]]\n}\n\n/*\n  Given an array of non-negative integers, return its mode and median value without sort.\n\n  Example:\n  * modeAndMedianWithoutSort([2, 7, 11, 15, 10, 1]) => [1,10]\n  * modeAndMedianWithoutSort([2, 7, 11, 15, 10, 1, 2]) => [1,10]\n  */\n\nconst modeAndMedianWithoutSortAndMedianWithoutSortAndMedianWithoutSort = (array) => {\n  let mode = 0\n  let mid = 0\n  let len = array.length\n  let sum = 0\n  for (let i = 0; i < len; i++) {\n    sum += array[i]\n    if (sum % 2 === 0) {\n      mode = i\n      mid = i\n    }\n  }\n  return [mode, array[mid]]\n}\n\n/*\n  Given an array of non-negative integers, return its mode and median value without sort.\n\n  Example:\n  * modeAndMedianWithoutSort([2, 7, 11, 15, 10, 1]) => [1,10]\n  * modeAndMedianWithoutSort([2, 7, 11, 15, 10, 1, 2]) => [1,10]\n  */\n\nconst modeAndMedianWithoutSortAndMedianWithoutSortAndMedianWithoutSortAndMedianWithoutSort = (array) => {\n  let mode = 0\n  let mid = 0\n  let len = array.length\n  let sum = 0\n  for (let i = 0; i < len; i++) {\n    sum += array[i]\n    if (sum % 2 === 0) {\n      mode = i\n      mid = i\n    }\n  }\n  return [mode, array[mid]]\n}\n\n/*\n  Given an array of non-negative integers, return its mode and median value without sort.\n\n  Example:\n  * modeAndMedianWithoutSort([2, 7, 11, 15, 10, 1]) => [1,10]\n  * modeAndMedianWithoutSort([2, 7, 11, 15, 10, 1, 2]) => [1,10]\n  */\n\nconst modeAndMedianWithoutSortAndMedianWithoutSortAndMedianWithoutSortAndMedianWithoutSortAndMedianWithoutSort = (array) => {\n  let mode = 0\n  let mid = 0\n  let len = array.length\n  let sum = 0\n  for (let i = 0; i < len; i++) {\n    sum += array[i]\n    if (sum % 2 === 0) {\n      mode = i\n      mid = i\n    }\n  }\n  return [mode, array[mid]]\n}\n\n/*\n  Given an array of non-negative integers, return its mode and median value without sort.\n\n  Example:\n  * modeAndMedianWithoutSort([2, 7, 11, 15, 10, 1]) => [1,10]\n  * modeAndMedianWithoutSort([2, 7, 11, 15, 10, 1, 2]) => [1,10]\n  */\n\nconst modeAndMedianWithoutSortAndMedianWithoutSortAndMedianWithoutSortAndMedianWithoutSortAndMe"}
{"task_id": "JavaScript/89", "prompt": "/*Create a function encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\n\nconst encrypt = (s) => {\n  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n", "canonical_solution": "    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "partial": "/*Create a function encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    # print('@@this is the line to split##')\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "gc": "<|endoftext|>/*Create a function encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\n\nconst encrypt = (s) => {\n  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n/*Create a function decrypt that takes a string as an argument and\n  returns a string decrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift up by two multiplied to two places.\n  For example:\n  decrypt('lm') returns 'hi'\n  decrypt('ewhjklnop') returns 'asdfghjkl'\n  decrypt('kj') returns 'gf'\n  decrypt('ix') returns 'et'\n  */\n\nconst decrypt = (s) => {\n  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() - 26\n    if (p < 26) { p += 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n/*Create a function rotate that takes a string as an argument and\n  returns a string rotated with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift up by two multiplied to two places.\n  For example:\n  rotate('hi') returns 'hi'\n  rotate('asdfghjkl') returns 'asdfghjkl'\n  rotate('gf') returns 'gfghjkl'\n  rotate('et') returns 'et'\n  */\n\nconst rotate = (s) => {\n  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 2\n    if (p > 26) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n/*Create a function reverse that takes a string as an argument and\n  returns a string reversed with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  reverse('hi') returns 'asdfghjkl'\n  reverse('asdfghjkl') returns 'hi'\n  reverse('gf') returns 'gfghjkl'\n  reverse('et') returns 'et'\n  */\n\nconst reverse = (s) => {\n  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() - 2\n    if (p < 26) { p += 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n/*Create a function shuffle that takes a string as an argument and\n  returns a string shuffled with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  shuffle('hi') returns 'asdfghjkl'\n  shuffle('asdfghjkl') returns 'gfghjkl'\n  shuffle('gf') returns 'gfghjkl'\n  shuffle('et') returns 'et'\n  */\n\nconst shuffle = (s) => {\n  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 2\n    if (p > 26) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n/*Create a function shuffle that takes a string as an argument and\n  returns a string shuffled with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  shuffle('hi') returns 'asdfghjkl'\n  shuffle('asdfghjkl') returns 'gfghjkl'\n  shuffle('gf') returns 'gfghjkl'\n  shuffle('et') returns 'et'\n  */\n\nconst shuffle = (s) => {\n  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() - 2\n    if (p < 26) { p += 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n/*Create a function shuffle that takes a string as an argument and\n  returns a string shuffled with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  shuffle('hi') returns 'asdfghjkl'\n  shuffle('asdfghjkl') returns 'gfghjkl'\n  shuffle('gf') returns 'gfghjkl'\n  shuffle('et') returns 'et'\n  */\n\nconst shuffle = (s) => {\n  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 2\n    if (p > 26) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n/*Create a function shuffle that takes a string as an argument and\n  returns a string shuffled with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  shuffle('hi') returns 'asdfghjkl'\n  shuffle('asdfghjkl') returns 'gfghjkl'\n  shuffle('gf') returns 'gfghjkl'\n  shuffle('et') returns 'et'\n  */\n\nconst shuffle = (s) => {\n  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() - 2\n    if (p < 26) { p += 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n/*Create a function shuffle that takes a string as an argument and\n  returns a string shuffled with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  shuffle('hi') returns 'asdfghjkl'\n  shuffle('asdfghjkl') returns 'gfghjkl'\n  shuffle('gf') returns 'gfghjkl'\n  shuffle('et') returns 'et'\n  */\n\nconst shuffle = (s) => {\n  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 2\n    if (p > 26) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n/*Create a function shuffle that takes a string as an argument and\n  returns a string shuffled with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  shuffle('hi') returns 'asdfghjkl'\n  shuffle('asdfghjkl') returns 'gfghjkl'\n  shuffle('gf') returns 'gfghjkl'\n  shuffle('et') returns 'et'\n  */\n\nconst shuffle = (s) => {\n  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() - 2\n    if (p < 26) { p += 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n/*Create a function shuffle that takes a string as an argument and\n  returns a string shuffled with the alphabet being "}
{"task_id": "JavaScript/90", "prompt": "/*\n  You are given a list of integers.\n  Write a function nextSmallest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\n\nconst nextSmallest = (lst) => {\n  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n", "canonical_solution": "  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "partial": "/*\n  You are given a list of integers.\n  Write a function nextSmallest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nconst nextSmallest = (lst) => {\n  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n    # print('@@this is the line to split##')\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "gc": "<|endoftext|>/*\n  You are given a list of integers.\n  Write a function nextSmallest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\n\nconst nextSmallest = (lst) => {\n  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\nmodule.exports = nextSmallest\n\n},{}],13:[function(require,module,exports){\n/*\n  You are given a list of integers.\n  Write a function nextLargest() that returns the 1st largest element of the list.\n  Return null if there is no such element.\n  \n  nextLargest([1, 2, 3, 4, 5]) == 3\n  nextLargest([5, 1, 4, 3, 2]) == 3\n  nextLargest([]) == null\n  nextLargest([1, 1]) == null\n  */\n\nconst nextLargest = (lst) => {\n  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] > arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\nmodule.exports = nextLargest\n\n},{}],14:[function(require,module,exports){\n/*\n  You are given a list of integers.\n  Write a function nextMultiple() that returns the multiple of the largest element of the list.\n  Return null if there is no such element.\n  \n  nextMultiple([1, 2, 3, 4, 5]) == 6\n  nextMultiple([5, 1, 4, 3, 2]) == 6\n  nextMultiple([]) == null\n  nextMultiple([1, 1]) == null\n  */\n\nconst nextMultiple = (lst) => {\n  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] > arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\nmodule.exports = nextMultiple\n\n},{}],15:[function(require,module,exports){\n/*\n  You are given a list of integers.\n  Write a function nextMultiple() that returns the multiple of the smallest element of the list.\n  Return null if there is no such element.\n  \n  nextMultiple([1, 2, 3, 4, 5]) == 4\n  nextMultiple([5, 1, 4, 3, 2]) == 4\n  nextMultiple([]) == null\n  nextMultiple([1, 1]) == null\n  */\n\nconst nextMultiple = (lst) => {\n  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\nmodule.exports = nextMultiple\n\n},{}],16:[function(require,module,exports){\n/*\n  You are given a list of integers.\n  Write a function nextMultiple() that returns the multiple of the largest element of the list.\n  Return null if there is no such element.\n  \n  nextMultiple([1, 2, 3, 4, 5]) == 5\n  nextMultiple([5, 1, 4, 3, 2]) == 5\n  nextMultiple([]) == null\n  nextMultiple([1, 1]) == null\n  */\n\nconst nextMultiple = (lst) => {\n  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] > arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\nmodule.exports = nextMultiple\n\n},{}],17:[function(require,module,exports){\n/*\n  You are given a list of integers.\n  Write a function nextMultiple() that returns the multiple of the smallest element of the list.\n  Return null if there is no such element.\n  \n  nextMultiple([1, 2, 3, 4, 5]) == 4\n  nextMultiple([5, 1, 4, 3, 2]) == 4\n  nextMultiple([]) == null\n  nextMultiple([1, 1]) == null\n  */\n\nconst nextMultiple = (lst) => {\n  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\nmodule.exports = nextMultiple\n\n},{}],18:[function(require,module,exports){\n/*\n  You are given a list of integers.\n  Write a function nextMultiple() that returns the multiple of the largest element of the list.\n  Return null if there is no such element.\n  \n  nextMultiple([1, 2, 3, 4, 5]) == 5\n  nextMultiple([5, 1, 4, 3, 2]) == 5\n  nextMultiple([]) == null\n  nextMultiple([1, 1]) == null\n  */\n\nconst nextMultiple = (lst) => {\n  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] > arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\nmodule.exports = nextMultiple\n\n},{}],19:[function(require,module,exports){\n/*\n  You are given a list of integers.\n  Write a function nextMultiple() that returns the multiple of the smallest element of the list.\n  Return null if there is no such element.\n  \n  nextMultiple([1, 2, 3, 4, 5]) == 4\n  nextMultiple([5, 1, 4, 3, 2]) == 4\n  nextMultiple([]) == null\n  nextMultiple([1, 1]) == null\n  */\n\nconst nextMultiple = (lst) => {\n  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\nmodule.exports = nextMultiple\n\n},{}],20:[function(require,module,exports){\n/*\n  You are given a list of integers.\n  Write a function nextMultiple() that returns the multiple of the largest element of the list.\n  Return null if there is no such element.\n  \n  nextMultiple([1, 2, 3, 4, 5]) == 5\n  nextMultiple([5, 1, 4, 3, 2]) == 5\n  nextMultiple([]) == null\n  nextMultiple([1, 1]) == null\n  */\n\nconst nextMultiple = (lst) => {\n  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] > arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\nmodule.exports = nextMultiple\n\n},{}],21:[function(require,module,exports){\n/*\n  You are given a list of integers.\n  Write a function nextMultiple() that returns the multiple of the smallest element of the list.\n  Return null "}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\n\nconst isBored = (S) => {\n  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n", "canonical_solution": "        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "partial": "/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        # print('@@this is the line to split##')\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "gc": "<|endoftext|>/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\n\nconst isBored = (S) => {\n  let t = 0\n  if (S[0] == 'I' && S[1] =='') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] =='' && S[i + 2] == 'I' && S[i + 3] =='') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of consonants. A consonant is a word that starts with the letter \"C\".\n  Words are delimited by spaces.\n \n  For example:\n  >>> isConsonant(\"Hello world\")\n  0\n  >>> isConsonant(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\n\nconst isConsonant = (S) => {\n  let t = 0\n  if (S[0] == 'C' && S[1] =='') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] =='' && S[i + 2] == 'C' && S[i + 3] =='') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of vowels. A vowel is a word that starts with the letter \"V\".\n  Words are delimited by spaces.\n \n  For example:\n  >>> isVowel(\"Hello world\")\n  0\n  >>> isVowel(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\n\nconst isVowel = (S) => {\n  let t = 0\n  if (S[0] == 'V' && S[1] =='') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] =='' && S[i + 2] == 'V' && S[i + 3] =='') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of consonants and vowels. A consonant is a word that starts with the letter \"C\"\n  and a vowel is a word that starts with the letter \"V\".\n  Words are delimited by spaces.\n \n  For example:\n  >>> isConsonantVowel(\"Hello world\")\n  0\n  >>> isConsonantVowel(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\n\nconst isConsonantVowel = (S) => {\n  let t = 0\n  if (S[0] == 'C' && S[1] == 'V' && S[2] =='') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] =='' && S[i + 2] == 'C' && S[i + 3] == 'V' && S[i + 4] =='') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of consonants and vowels. A consonant is a word that starts with the letter \"C\"\n  and a vowel is a word that starts with the letter \"V\".\n  Words are delimited by spaces.\n \n  For example:\n  >>> isVowelVowel(\"Hello world\")\n  0\n  >>> isVowelVowel(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\n\nconst isVowelVowel = (S) => {\n  let t = 0\n  if (S[0] == 'V' && S[1] == 'V' && S[2] =='') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] =='' && S[i + 2] == 'V' && S[i + 3] == 'V' && S[i + 4] =='') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of consonants and vowels. A consonant is a word that starts with the letter \"C\"\n  and a vowel is a word that starts with the letter \"V\".\n  Words are delimited by spaces.\n \n  For example:\n  >>> isConsonantVowelVowel(\"Hello world\")\n  0\n  >>> isConsonantVowelVowel(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\n\nconst isConsonantVowelVowel = (S) => {\n  let t = 0\n  if (S[0] == 'C' && S[1] == 'V' && S[2] == 'V' && S[3] =='') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] =='' && S[i + 2] == 'C' && S[i + 3] == 'V' && S[i + 4] == 'V' && S[i + 5] =='') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of consonants and vowels. A consonant is a word that starts with the letter \"C\"\n  and a vowel is a word that starts with the letter \"V\".\n  Words are delimited by spaces.\n \n  For example:\n  >>> isVowelVowelVowel(\"Hello world\")\n  0\n  >>> isVowelVowelVowel(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\n\nconst isVowelVowelVowel = (S) => {\n  let t = 0\n  if (S[0] == 'V' && S[1] == 'V' && S[2] == 'V' && S[3] =='') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] =='' && S[i + 2] == 'V' && S[i + 3] == 'V' && S[i + 4] == 'V' && S[i + 5] == 'V' && S[i + 6] =='') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of consonants and vowels. A consonant is a word that starts with the letter \"C\"\n  and a vowel is a word that starts with the letter \"V\".\n  Words are delimited by spaces.\n \n  For example:\n  >>> isConsonantVowelVowelVowel(\"Hello world\")\n  0\n  >>> isConsonantVowelVowelVowel(\"The sky is blue. The sun is shining. I "}
{"task_id": "JavaScript/92", "prompt": "/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\n\nconst anyInt = (x, y, z) => {\n  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n", "canonical_solution": "  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "partial": "/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n    # print('@@this is the line to split##')\n  }\n  return false\n}\n\n", "gc": "<|endoftext|>/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\n\nconst anyInt = (x, y, z) => {\n  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if all numbers are equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  allInt(5, 2, 7) ➞ true\n  allInt(3, 2, 2) ➞ false\n  allInt(3, -2, 1) ➞ false\n  allInt(3.6, -2.2, 2) ➞ true\n  */\n\nconst allInt = (x, y, z) => {\n  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if all numbers are equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  allInt(5, 2, 7) ➞ true\n  allInt(3, 2, 2) ➞ false\n  allInt(3, -2, 1) ➞ false\n  allInt(3.6, -2.2, 2) ➞ false\n  */\n\nconst allInt = (x, y, z) => {\n  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if all numbers are equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  allInt(5, 2, 7) ➞ true\n  allInt(3, 2, 2) ➞ false\n  allInt(3, -2, 1) ➞ false\n  allInt(3.6, -2.2, 2) ➞ false\n  */\n\nconst allInt = (x, y, z) => {\n  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if all numbers are equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  allInt(5, 2, 7) ➞ true\n  allInt(3, 2, 2) ➞ false\n  allInt(3, -2, 1) ➞ false\n  allInt(3.6, -2.2, 2) ➞ false\n  */\n\nconst allInt = (x, y, z) => {\n  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if all numbers are equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  allInt(5, 2, 7) ➞ true\n  allInt(3, 2, 2) ➞ false\n  allInt(3, -2, 1) ➞ false\n  allInt(3.6, -2.2, 2) ➞ false\n  */\n\nconst allInt = (x, y, z) => {\n  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if all numbers are equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  allInt(5, 2, 7) ➞ true\n  allInt(3, 2, 2) ➞ false\n  allInt(3, -2, 1) ➞ false\n  allInt(3.6, -2.2, 2) ➞ false\n  */\n\nconst allInt = (x, y, z) => {\n  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if all numbers are equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  allInt(5, 2, 7) ➞ true\n  allInt(3, 2, 2) ➞ false\n  allInt(3, -2, 1) ➞ false\n  allInt(3.6, -2.2, 2) ➞ false\n  */\n\nconst allInt = (x, y, z) => {\n  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if all numbers are equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  allInt(5, 2, 7) ➞ true\n  allInt(3, 2, 2) ➞ false\n  allInt(3, -2, 1) ➞ false\n  allInt(3.6, -2.2, 2) ➞ false\n  */\n\nconst allInt = (x, y, z) => {\n  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if all numbers are equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  allInt(5, 2, 7) ➞ true\n  allInt(3, 2, 2) ➞ false\n  allInt(3, -2, 1) ➞ false\n  allInt(3.6, -2.2, 2) ➞ false\n  */\n\nconst allInt = (x, y, z) => {\n  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if all numbers are equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  allInt(5, 2, 7) ➞ true\n  allInt(3, 2, 2) ➞ false\n  allInt(3, -2, 1) ➞ false\n  allInt(3.6, -2.2, 2) ➞ false\n  */\n\nconst allInt = (x, y, z) => {\n  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if all numbers are equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  allInt(5, "}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\n\nconst encode = (message) => {\n  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n", "canonical_solution": "    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "partial": "/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    # print('@@this is the line to split##')\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "gc": "<|endoftext|>/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\n\nconst encode = (message) => {\n  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n/*\n  Write a function that takes a message, and decodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  \n  Examples:\n  >>> decode('TGST')\n  'test'\n  >>> decode('tHKS KS C MGSSCGG')\n  'This is a message'\n  */\n\nconst decode = (message) => {\n  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n/*\n  Write a function that takes a message, and decodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  \n  Examples:\n  >>> decode('TGST')\n  'test'\n  >>> decode('tHKS KS C MGSSCGG')\n  'This is a message'\n  */\n\nconst decodeAll = (message) => {\n  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n/*\n  Write a function that takes a message, and decodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  \n  Examples:\n  >>> decodeAll('TGST')\n  'test'\n  >>> decodeAll('tHKS KS C MGSSCGG')\n  'This is a message'\n  */\n\nconst decodeAllInplace = (message) => {\n  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n/*\n  Write a function that takes a message, and decodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  \n  Examples:\n  >>> decodeAllInplace('TGST')\n  'test'\n  >>> decodeAllInplace('tHKS KS C MGSSCGG')\n  'This is a message'\n  */\n\nconst decodeAllInplaceAll = (message) => {\n  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n/*\n  Write a function that takes a message, and decodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  \n  Examples:\n  >>> decodeAllInplaceAll('TGST')\n  'test'\n  >>> decodeAllInplaceAll('tHKS KS C MGSSCGG')\n  'This is a message'\n  */\n\nconst decodeAllInplaceAllInplace = (message) => {\n  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n/*\n  Write a function that takes a message, and decodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  \n  Examples:\n  >>> decodeAllInplaceAllInplace('TGST')\n  'test'\n  >>> decodeAllInplaceAllInplace('tHKS KS C MGSSCGG')\n  'This is a message'\n  */\n\nconst decodeAllInplaceAllInplaceAll = (message) => {\n  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n/*\n  Write a function that takes a message, and decodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  \n  Examples:\n  >>> decodeAllInplaceAllInplaceAll('TGST')\n  'test'\n  >>> decodeAllInplaceAllInplaceAll('tHKS KS C MGSSCGG')\n  'This is a message'\n  */\n\nconst decodeAllInplaceAllInplaceAllInplace = (message) => {\n  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n/*\n  Write a function that takes a message, and decodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  \n  Examples:\n  >>> decodeAllInplaceAllInplaceAllInplace('TGST')\n  'test'\n  >>> decodeAllInplaceAllInplaceAllInplace('tHKS KS C MGSSCGG')\n  'This is a message'\n  */\n\nconst decodeAllInplaceAllInplaceAllInplaceAll = (message) => {\n  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n/*\n  Write a function that takes a message, and decodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  "}
{"task_id": "JavaScript/94", "prompt": "/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\n\nconst skjkasdkd = (lst) => {\n  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n", "canonical_solution": "  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "partial": "/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n    # print('@@this is the line to split##')\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "gc": "<|endoftext|>/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\n\nconst skjkasdkd = (lst) => {\n  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  return t\n}\n\nconst skjkasdkd = (lst) => {\n  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  return t\n}\n\nconst skjkasdkd = (lst) => {\n  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  return t\n}\n\nconst skjkasdkd = (lst) => {\n  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  return t\n}\n\nconst skjkasdkd = (lst) => {\n  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  return t\n}\n\nconst skjkasdkd = (lst) => {\n  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  return t\n}\n\nconst skjkasdkd = (lst) => {\n  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  return t\n}\n\nconst skjkasdkd = (lst) => {\n  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  return t\n}\n\nconst skjkasdkd = (lst) => {\n  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  return t\n}\n\nconst skjkasdkd = (lst) => {\n  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  return t\n}\n\nconst skjkasdkd = (lst) => {\n  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  return t\n}\n\nconst skjkasdkd = (lst) => {\n  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  return t\n}\n\nconst skjkasdkd = (lst) => {\n  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  return t\n}\n\nconst skjkasdkd = (lst) => {\n  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  return t\n}\n\nconst skjkasdkd = (lst) => {\n  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  return t\n}\n\nconst skjkasdkd = (lst) => {\n  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  return t\n}\n\nconst skjkasdkd = (lst) => {\n  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  return t\n}\n\nconst skjkasdkd = (lst) => {\n  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  return t\n}\n\nconst skjkasdkd = (lst) => {\n  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  return t\n}\n\nconst skjkasdkd = (lst) => {\n  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j"}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\n\nconst checkDictCase = (dict) => {\n  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n", "canonical_solution": "      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "partial": "/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      # print('@@this is the line to split##')\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "gc": "<|endoftext|>/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\n\nconst checkDictCase = (dict) => {\n  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i] >= lo && key[i] <= hi) {\n        lo = key[i]\n      } else {\n        hi = (key[i] >= lo)? key[i] : hi\n      }\n    }\n  }\n  return c === Object.keys(dict).length\n}\n\n/*\n  Given a string, return true if all characters are lowercase or all \n  characters are uppercase, else return false.\n  The function should return false is the given string is empty.\n  Examples:\n  checkStringCase(\"abc\") should return true.\n  checkStringCase(\"ABC\") should return false.\n  checkStringCase(\"aBc\") should return false.\n  checkStringCase(\"aBc\") should return false.\n  checkStringCase(\"aBc\") should return false.\n  checkStringCase(\"aBc\") should return false.\n  checkStringCase(\"aBc\") should return false.\n  checkStringCase(\"aBc\") should return false.\n  checkStringCase(\"aBc\") should return false.\n  checkStringCase(\"aBc\") should return false.\n  checkStringCase(\"aBc\") should return false.\n  checkStringCase(\"aBc\") should return false.\n  checkStringCase(\"aBc\") should return false.\n  checkStringCase(\"aBc\") should return false.\n  checkStringCase(\"aBc\") should return false.\n  checkStringCase(\"aBc\") should return false.\n  checkStringCase(\"aBc\") should return false.\n  checkStringCase(\"aBc\") should return false.\n  checkStringCase(\"aBc\") should return false.\n  checkStringCase(\"aBc\") should return false.\n  checkStringCase(\"aBc\") should return false.\n  checkStringCase(\"aBc\") should return false.\n  checkStringCase(\"aBc\") should return false.\n  checkStringCase(\"aBc\") should return false.\n  checkStringCase(\"aBc\") should return false.\n  checkStringCase(\"aBc\") should return false.\n  checkStringCase(\"aBc\") should return false.\n  checkStringCase(\"aBc\") should return false.\n  checkStringCase(\"aBc\") should return false.\n  checkStringCase(\"aBc\") should return false.\n  checkStringCase(\"aBc\") should return false.\n  checkStringCase(\"aBc\") should return false.\n  checkStringCase(\"aBc\") should return false.\n  checkStringCase(\"aBc\") should return false.\n  checkStringCase(\"aBc\") should return false.\n  checkStringCase(\"aBc\") should return false.\n  checkStringCase(\"aBc\") should return false.\n  checkStringCase(\"aBc\") should return false.\n  checkStringCase(\"aBc\") should return false.\n  checkStringCase(\"aBc\") should return false.\n  checkStringCase(\"aBc\") should return false.\n  checkStringCase(\"aBc\") should return false.\n  checkStringCase(\"aBc\") should return false.\n  checkStringCase(\"aBc\") should return false.\n  checkStringCase(\"aBc\") should return false.\n  checkStringCase(\"aBc\") should return false.\n  checkStringCase(\"aBc\") should return false.\n  checkStringCase(\"aBc\") should return false.\n  checkStringCase(\"aBc\") should return false.\n  checkStringCase(\"aBc\") should return false.\n  checkStringCase(\"aBc\") should return false.\n  checkStringCase(\"aBc\") should return false.\n  checkStringCase(\"aBc\") should return false.\n  checkStringCase(\"aBc\") should return false.\n  checkStringCase(\"aBc\") should return false.\n  checkStringCase(\"aBc\") should return false.\n  checkStringCase(\"aBc\") should return false.\n  checkStringCase(\"aBc\") should return false.\n  checkStringCase(\"aBc\") should return false.\n  checkStringCase(\"aBc\") should return false.\n  checkStringCase(\"aBc\") should return false.\n  checkStringCase(\"aBc\") should return false.\n  checkStringCase(\"aBc\") should return false.\n  checkStringCase(\"aBc\") should return false.\n  checkStringCase(\"aBc\") should return false.\n  checkStringCase(\"aBc\") should return false.\n  checkStringCase(\"aBc\") should return false.\n  checkStringCase(\"aBc\") should return false.\n  checkStringCase(\"aBc\") should return false.\n  checkStringCase(\"aBc\") should return false.\n  checkStringCase(\"aBc\") should return false.\n  checkStringCase(\"aBc\") should return false.\n  checkStringCase(\"aBc\") should return false.\n  checkStringCase(\"aBc\") should return false.\n  checkStringCase(\"aBc\") should return false.\n  checkStringCase(\"aBc\") should return false.\n  checkStringCase(\"aBc\") should return false.\n  checkStringCase(\"aBc\") should return false.\n  checkStringCase(\"aBc\") should return false.\n  checkStringCase(\"aBc\") should return false.\n  checkStringCase(\"aBc\") should return false.\n  checkStringCase(\"aBc\") should return false.\n  checkStringCase(\"aBc\") should return false.\n  checkStringCase(\"aBc\") should return false.\n  checkStringCase(\"aBc\") should return false.\n  checkStringCase(\"aBc\") should return false.\n  checkStringCase(\"aBc\") should return false.\n  checkStringCase(\"aBc\") should return false.\n  checkStringCase(\"aBc\") should return false.\n  checkStringCase(\"aBc\") should return false.\n  checkStringCase(\"aBc\") should return false.\n  checkStringCase(\"aBc\") should return false.\n  checkStringCase(\"aBc\") should return false.\n  checkStringCase(\"aBc\") should return false.\n  checkStringCase(\"aBc\") should return false.\n  checkStringCase(\"aBc\") should return false.\n  checkStringCase(\"aB"}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\n\nconst countUpTo = (n) => {\n  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n", "canonical_solution": "    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "partial": "/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n      # print('@@this is the line to split##')\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "gc": "<|endoftext|>/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\n\nconst countUpTo = (n) => {\n  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) {\n      t.push(i)\n    }\n  }\n  return t\n}\n\n/*Implement a function that takes an integer and returns the number of times it appears in an array\n  of integers. For example:\n  countIn([2,3,5,7,11,13,17]) => 2\n  countIn([2,3,5,7,11,13,17,19]) => 3\n  countIn([2,3,5,7,11,13,17,19,21,23]) => 2\n  countIn([2,3,5,7,11,13,17,19,21,23,25,27]) => 1\n  countIn([2,3,5,7,11,13,17,19,21,23,25,27,29,31,33,35,37]) => 1\n  countIn([2,3,5,7,11,13,17,19,21,23,25,27,29,31,33,35,37,39,41,43,45,47,49,51,53]) => 1\n  countIn([2,3,5,7,11,13,17,19,21,23,25,27,29,31,33,35,37,39,41,43,45,47,49,51,53,55,57,59,61,63]) => 1\n  countIn([2,3,5,7,11,13,17,19,21,23,25,27,29,31,33,35,37,39,41,43,45,47,49,51,53,55,57,59,61,63,65]) => 1\n  countIn([2,3,5,7,11,13,17,19,21,23,25,27,29,31,33,35,37,39,41,43,45,47,49,51,53,55,57,59,61,63,65,67,69,71,73,75,77,79,81,83,85,87,89,91,93,95,97,99]) => 1\n  countIn([2,3,5,7,11,13,17,19,21,23,25,27,29,31,33,35,37,39,41,43,45,47,49,51,53,55,57,59,61,63,65,67,69,71,73,75,77,79,81,83,85,87,89,91,93,95,97,99,101,103,105,107,109,111,113,115,117]) => 1\n  countIn([2,3,5,7,11,13,17,19,21,23,25,27,29,31,33,35,37,39,41,43,45,47,49,51,53,55,57,59,61,63,65,67,69,71,73,75,77,79,81,83,85,87,89,91,93,95,97,99,101,103,105,107,109,111,113,115,117,121,123,125,127,131,133,135,137,139,141,143,145,147]) => 1\n  countIn([2,3,5,7,11,13,17,19,21,23,25,27,29,31,33,35,37,39,41,43,45,47,49,51,53,55,57,59,61,63,65,67,69,71,73,75,77,79,81,83,85,87,89,91,93,95,97,99,101,103,105,107,109,111,113,115,117,121,123,125,127,131,133,135,137,139,141,143,145,147]) => 1\n  countIn([2,3,5,7,11,13,17,19,21,23,25,27,29,31,33,35,37,39,41,43,45,47,49,51,53,55,57,59,61,63,65,67,69,71,73,75,77,79,81,83,85,87,89,91,93,95,97,99,101,103,105,107,109,111,113,115,117,121,123,125,127,131,133,135,137,139,141,143,145,147]) => 1\n  countIn([2,3,5,7,11,13,17,19,21,23,25,27,29,31,33,35,37,39,41,43,45,47,49,51,53,55,57,59,61,63,65,67,69,71,73,75,77,79,81,83,85,87,89,91,93,95,97,99,101,103,105,107,109,111,113,115,117,121,123,125,127,131,133,135,137,139,141,143,145,147]) => 1\n  countIn([2,3,5,7,11,13,17,19,21,23,25,27,29,31,33,35,37,39,41,43,45,47,49,51,53,55,57,59,61,63,65,67,69,71,73,75,77,79,81,83,85,87,89,91,93,95,97,99,101,103,105,107,109,111,113,115,117,121,123,125,127,131,133,135,137,139,141,143,145,147]) => 1\n  countIn([2,3,5,7,11,13,17,19,21,23,25,27,29,31,33,35,37,39,41,43,45,47,49,51,53,55,57,59,61,63,65,67,69,71,73,75,77,79,81,83,85,87,89,91,93,95,97,99,101,103,105,107,109,111,113,115,117,121,123,125,127,131,133,135,137,139,141,143,145,147]) => 1\n  countIn([2,3,5,7,11,13,17,19,21,23,25,27,29,31,33,35,37,39,41,43,45,47,49,51,53,55,57,59,61,63,65,67,69,71,73,75,77,79,81,83,85,87,89,91,93,95,97,99,101,103,105,107,109,111,113,115,117,121,123,125,127,131,133,135,137,139,141,143,145,147]) => 1\n  countIn([2,3,5,7,11,13,17,19,21,23,25,27,29,31,33,35,37,39,41,43,45"}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\n\nconst multiply = (a, b) => {\n  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n", "canonical_solution": "  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "partial": "/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  # print('@@this is the line to split##')\n  return (a % 10) * (b % 10)\n}\n\n", "gc": "<|endoftext|>/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\n\nconst multiply = (a, b) => {\n  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  let product = 1\n  for (let i = a; i; i--) {\n    product *= i\n  }\n  for (let i = b; i; i--) {\n    product *= i\n  }\n  return product\n}\n\n/*Complete the function that takes two integers and returns \n  the sum of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  sum(148, 412) should return 148.\n  sum(19, 28) should return 28.\n  sum(2020, 1851) should return 1851.\n  sum(14,-15) should return 0.\n  */\n\nconst sum = (a, b) => {\n  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  let sum = 0\n  for (let i = a; i; i--) {\n    sum += i\n  }\n  for (let i = b; i; i--) {\n    sum += i\n  }\n  return sum\n}\n\n/*Complete the function that takes two integers and returns \n  the difference between their unit digits.\n  Assume the input is always valid.\n  Examples:\n  difference(148, 412) should return -14.\n  difference(19, 28) should return -28.\n  difference(2020, 1851) should return 1851.\n  difference(14,-15) should return 0.\n  */\n\nconst difference = (a, b) => {\n  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  let diff = 0\n  for (let i = a; i; i--) {\n    diff += i\n  }\n  for (let i = b; i; i--) {\n    diff += i\n  }\n  return diff\n}\n\n/*Complete the function that takes two integers and returns \n  the absolute value of the difference between their unit digits.\n  Assume the input is always valid.\n  Examples:\n  abs(148, 412) should return 148.\n  abs(19, 28) should return 28.\n  abs(2020, 1851) should return 1851.\n  abs(14,-15) should return 0.\n  */\n\nconst abs = (a) => {\n  if (a < 0) { a = -a }\n  return Math.abs(a)\n}\n\n/*Complete the function that takes two integers and returns \n  the absolute value of the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  abs(148, 412) should return 148.\n  abs(19, 28) should return 28.\n  abs(2020, 1851) should return 1851.\n  abs(14,-15) should return 0.\n  */\n\nconst abs2 = (a) => {\n  if (a < 0) { a = -a }\n  return Math.abs(a) * Math.abs(a)\n}\n\n/*Complete the function that takes two integers and returns \n  the absolute value of the difference between their unit digits.\n  Assume the input is always valid.\n  Examples:\n  abs(148, 412) should return 148.\n  abs(19, 28) should return 28.\n  abs(2020, 1851) should return 1851.\n  abs(14,-15) should return 0.\n  */\n\nconst absdiff = (a, b) => {\n  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return Math.abs(a - b)\n}\n\n/*Complete the function that takes two integers and returns \n  the absolute value of the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  abs(148, 412) should return 148.\n  abs(19, 28) should return 28.\n  abs(2020, 1851) should return 1851.\n  abs(14,-15) should return 0.\n  */\n\nconst absdiff2 = (a, b) => {\n  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return Math.abs(a) * Math.abs(b) * Math.abs(b)\n}\n\n/*Complete the function that takes two integers and returns \n  the absolute value of the difference between their unit digits.\n  Assume the input is always valid.\n  Examples:\n  abs(148, 412) should return 148.\n  abs(19, 28) should return 28.\n  abs(2020, 1851) should return 1851.\n  abs(14,-15) should return 0.\n  */\n\nconst absdiff3 = (a, b) => {\n  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return Math.abs(a) * Math.abs(b) * Math.abs(b) * Math.abs(b)\n}\n\n/*Complete the function that takes two integers and returns \n  the absolute value of the difference between their unit digits.\n  Assume the input is always valid.\n  Examples:\n  abs(148, 412) should return 148.\n  abs(19, 28) should return 28.\n  abs(2020, 1851) should return 1851.\n  abs(14,-15) should return 0.\n  */\n\nconst absdiff4 = (a, b) => {\n  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return Math.abs(a) * Math.abs(b) * Math.abs(b) * Math.abs(b) * Math.abs(b)\n}\n\n/*Complete the function that takes two integers and returns \n  the absolute value of the difference between their unit digits.\n  Assume the input is always valid.\n  Examples:\n  abs(148, 412) should return 148.\n  abs(19, 28) should return 28.\n  abs(2020, 1851) should return 1851.\n  abs(14,-15) should return 0.\n  */\n\nconst absdiff5 = (a, b) => {\n  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return Math.abs(a) * Math.abs(b) * Math.abs(b) * Math.abs(b) * Math.abs(b) * Math.abs(b)\n}\n\n/*Complete the function that takes two integers and returns \n  the absolute value of the difference between their unit digits.\n  Assume the input is always valid.\n  Examples:\n  abs(148, 412) should return 148.\n  abs(19, 28) should return 28.\n  abs(2020, 1851) should return 1851.\n  abs(14,-15) should return 0.\n  */\n\nconst absdiff6 = (a, b) => {\n  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return Math.abs(a) * Math.abs(b) * Math.abs(b) * Math.abs(b) * Math.abs(b) * Math.abs(b) * Math.abs(b)\n}\n\n/*Complete the function that takes two integers and returns \n  the absolute value of the difference between their unit digits.\n  Assume the input is always valid.\n  Examples:\n  abs(148, 412) should return 148.\n  abs(19, 28) should return 28.\n  abs(2020, 1851) should return 1851.\n  abs(14,-15) should return 0.\n  */\n\nconst absdiff7 = (a, b) => {\n  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return Math.abs(a) * Math.abs(b) * Math.abs(b) * Math.abs(b) * Math.abs(b) * Math.abs(b) * Math.abs(b)\n}\n\n/*Complete the function that takes two integers and returns \n  the absolute value of the difference between their unit digits.\n  Assume the input is always valid.\n  Examples:\n  abs(148, 412) should return 148.\n  abs(19, 28) should return 28.\n  abs(2020, 1851) should return 1851.\n  abs(14,-15) should return 0.\n  */\n\nconst absdiff8 = (a, b) => {\n  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return Math.abs(a) * Math.abs(b) * Math.abs(b) * Math.abs(b) * Math.abs(b) * Math.abs("}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\n\nconst countUpper = (s) => {\n  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n", "canonical_solution": "  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "partial": "/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n    # print('@@this is the line to split##')\n  }\n  return p\n}\n\n", "gc": "<|endoftext|>/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\n\nconst countUpper = (s) => {\n  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n/*\n  Given a string s, count the number of lowercase vowels in even indices.\n  \n  For example:\n  countLower('aBCdEf') returns 1\n  countLower('abcdefg') returns 0\n  countLower('dBBE') returns 0\n  */\n\nconst countLower = (s) => {\n  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u') { p++ }\n  }\n  return p\n}\n\n/*\n  Given a string s, count the number of vowels in even indices.\n  \n  For example:\n  countVowel('aBCdEf') returns 1\n  countVowel('abcdefg') returns 0\n  countVowel('dBBE') returns 0\n  */\n\nconst countVowel = (s) => {\n  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u') { p++ }\n  }\n  return p\n}\n\n/*\n  Given a string s, count the number of vowels in odd indices.\n  \n  For example:\n  countVowel('dBBE') returns 1\n  countVowel('abcdefg') returns 0\n  countVowel('aBCdEf') returns 0\n  */\n\nconst countVowelOdd = (s) => {\n  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u') { p++ }\n  }\n  return p\n}\n\n/*\n  Given a string s, count the number of vowels in even indices.\n  \n  For example:\n  countVowel('dBBE') returns 1\n  countVowel('abcdefg') returns 0\n  countVowel('aBCdEf') returns 0\n  */\n\nconst countVowelEven = (s) => {\n  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u') { p++ }\n  }\n  return p\n}\n\n/*\n  Given a string s, count the number of vowels in odd indices.\n  \n  For example:\n  countVowel('dBBE') returns 1\n  countVowel('abcdefg') returns 0\n  countVowel('aBCdEf') returns 0\n  */\n\nconst countVowelOddEven = (s) => {\n  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u') { p++ }\n  }\n  return p\n}\n\n/*\n  Given a string s, count the number of vowels in even indices.\n  \n  For example:\n  countVowel('dBBE') returns 1\n  countVowel('abcdefg') returns 0\n  countVowel('aBCdEf') returns 0\n  */\n\nconst countVowelOddOddEven = (s) => {\n  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u') { p++ }\n  }\n  return p\n}\n\n/*\n  Given a string s, count the number of vowels in odd indices.\n  \n  For example:\n  countVowel('dBBE') returns 1\n  countVowel('abcdefg') returns 0\n  countVowel('aBCdEf') returns 0\n  */\n\nconst countVowelOddOddOddEven = (s) => {\n  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u') { p++ }\n  }\n  return p\n}\n\n/*\n  Given a string s, count the number of vowels in even indices.\n  \n  For example:\n  countVowel('dBBE') returns 1\n  countVowel('abcdefg') returns 0\n  countVowel('aBCdEf') returns 0\n  */\n\nconst countVowelOddOddOddOddEven = (s) => {\n  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u') { p++ }\n  }\n  return p\n}\n\n/*\n  Given a string s, count the number of vowels in odd indices.\n  \n  For example:\n  countVowel('dBBE') returns 1\n  countVowel('abcdefg') returns 0\n  countVowel('aBCdEf') returns 0\n  */\n\nconst countVowelOddOddOddOddOddEven = (s) => {\n  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u') { p++ }\n  }\n  return p\n}\n\n/*\n  Given a string s, count the number of vowels in even indices.\n  \n  For example:\n  countVowel('dBBE') returns 1\n  countVowel('abcdefg') returns 0\n  countVowel('aBCdEf') returns 0\n  */\n\nconst countVowelOddOddOddOddOddOddOddEven = (s) => {\n  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u') { p++ }\n  }\n  return p\n}\n\n/*\n  Given a string s, count the number of vowels in odd indices.\n  \n  For example:\n  countVowel('dBBE') returns 1\n  countVowel('abcdefg') returns 0\n  countVowel('aBCdEf') returns 0\n  */\n\nconst countVowelOddOddOddOddOddOddOddOddOddEven = (s) => {\n  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u') { p++ }\n  }\n  return p\n}\n\n/*\n  Given a string s, count the number of vowels in even indices.\n  \n  For example:\n  countVowel('dBBE') returns 1\n  countVowel('abcdefg') returns 0\n  countVowel('aBCdEf') returns 0\n  */\n\nconst countVowelOddOddOddOddOddOddOddOddOddOddOddEven = (s) => {\n  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u') { p++ }\n  }\n"}
{"task_id": "JavaScript/99", "prompt": "/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\n\nconst closestInteger = (value) => {\n  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n", "canonical_solution": "  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "partial": "/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  # print('@@this is the line to split##')\n  else { value += t }\n  return value\n}\n\n", "gc": "<|endoftext|>/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\n\nconst closestInteger = (value) => {\n  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  return value\n}\n\n/* Create a function that takes a value (string) representing a number\n  and returns the closest floating point number to it. If the number\n  is equidistant from two floating point numbers, round it away from\n  zero.\n  Examples\n  >>> closestFloatingPoint(\"10\")\n  10\n  >>> closestFloatingPoint(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two floating point numbers, the one you should return is the\n  one that is farthest from zero. For example closestFloatingPoint(\"14.5\")\n  should return 15 and closestFloatingPoint(\"-14.5\") should return -15.\n  */\n\nconst closestFloatingPoint = (value) => {\n  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  return value\n}\n\n/* Create a function that takes a value (string) representing a number\n  and returns the closest real number to it. If the number is equidistant\n  from two real numbers, round it away from zero.\n  Examples\n  >>> closestReal(\"10\")\n  10\n  >>> closestReal(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two real numbers, the one you should return is the one that is farthest\n  from zero. For example closestReal(\"14.5\") should return 15 and closestReal(\"-14.5\")\n  should return -15.\n  */\n\nconst closestReal = (value) => {\n  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  return value\n}\n\n/* Create a function that takes a value (string) representing a number\n  and returns the closest complex number to it. If the number is equidistant\n  from two complex numbers, round it away from zero.\n  Examples\n  >>> closestComplex(\"10\")\n  10\n  >>> closestComplex(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two complex numbers, the one you should return is the one that is farthest\n  from zero. For example closestComplex(\"14.5\") should return 15 and closestComplex(\"-14.5\")\n  should return -15.\n  */\n\nconst closestComplex = (value) => {\n  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  return value\n}\n\n/* Create a function that takes a value (string) representing a number\n  and returns the closest boolean to it. If the number is equidistant\n  from two booleans, round it away from zero.\n  Examples\n  >>> closestBoolean(\"10\")\n  10\n  >>> closestBoolean(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two booleans, the one you should return is the one that is farthest\n  from zero. For example closestBoolean(\"14.5\") should return 15 and closestBoolean(\"-14.5\")\n  should return -15.\n  */\n\nconst closestBoolean = (value) => {\n  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  return value\n}\n\n/* Create a function that takes a value (string) representing a number\n  and returns the closest date object to it. If the number is equidistant\n  from two date objects, round it away from zero.\n  Examples\n  >>> closestDate(\"10\")\n  10\n  >>> closestDate(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two date objects, the one you should return is the one that is farthest\n  from zero. For example closestDate(\"14.5\") should return 15 and closestDate(\"-14.5\")\n  should return -15.\n  */\n\nconst closestDate = (value) => {\n  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  return value\n}\n\n/* Create a function that takes a value (string) representing a number\n  and returns the closest time object to it. If the number is equidistant\n  from two time objects, round it away from zero.\n  Examples\n  >>> closestTime(\"10\")\n  10\n  >>> closestTime(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two time objects, the one you should return is the one that is farthest\n  from zero. For example closestTime(\"14.5\") should return 15 and closestTime(\"-14.5\")\n  should return -15.\n  */\n\nconst closestTime = (value) => {\n  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  return value\n}\n\n/* Create a function that takes a value (string) representing a number\n  and returns the closest date or time object to it. If the number is equidistant\n  from two date or time objects, round it away from zero.\n  Examples\n  >>> closestDateOrTime(\"10\")\n  10\n  >>> closestDateOrTime(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two date or time objects, the one you should return is the one that is farthest\n  from zero. For example closestDateOrTime(\"14.5\") should return 15 and closestDateOrTime(\"-14.5\")\n  should return -15.\n  */\n\nconst closestDateOrTime = (value) => {\n  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  return value\n}\n\n/* Create a function that takes a value (string) representing a number\n  and returns the closest number or boolean to it. If the number is equidistant\n  from two number or boolean objects, round it away from zero.\n  Examples\n  >>> closestNumberOrBoolean(\"10\")\n  10\n  >>> closestNumberOrBoolean(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two number or boolean objects, the one you should return is the one that is farthest\n  from zero. For example closestNumberOrBoolean(\"14.5\") should return 15 and closestNumberOrBoolean(\"-14.5\")\n  should return -15.\n  */\n\nconst closestNumberOrBoolean = (value) => {\n  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  return value\n}\n\n/* Create a function that takes a value (string) representing a number\n  and returns the closest real number or boolean to it. If the number is equidistant\n  from "}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\n\nconst makeAPile = (n) => {\n  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n", "canonical_solution": "  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "partial": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n    # print('@@this is the line to split##')\n  }\n  return t\n}\n\n", "gc": "<|endoftext|>/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\n\nconst makeAPile = (n) => {\n  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\n\nconst makeAPile = (n) => {\n  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\n\nconst makeAPile = (n) => {\n  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\n\nconst makeAPile = (n) => {\n  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\n\nconst makeAPile = (n) => {\n  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\n\nconst makeAPile = (n) => {\n  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\n\nconst makeAPile = (n) => {\n  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\n\nconst makeAPile = (n) => {\n  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\n\nconst makeAPile = (n) => {\n  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\n\nconst makeAPile = (n) => {\n  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\n\nconst makeAPile = (n) => {\n  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\n\nconst makeAPile = (n) => {\n  let "}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\n\nconst wordsString = (s) => {\n  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n", "canonical_solution": "    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "partial": "/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n      # print('@@this is the line to split##')\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "gc": "<|endoftext|>/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\n\nconst wordsString = (s) => {\n  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] =='' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n      else {\n        t += s[i];\n      }\n    }\n    else {\n      t += s[i];\n    }\n  }\n  if (k == 0) {\n    p.push(t);\n  }\n  return p;\n}\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\n\nconst wordsArray = (s) => {\n  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] =='' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n      else {\n        t += s[i];\n      }\n    }\n    else {\n      t += s[i];\n    }\n  }\n  if (k == 0) {\n    p.push(t);\n  }\n  return p;\n}\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordsArray(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsArray(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\n\nconst wordsArray2 = (s) => {\n  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] =='' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n      else {\n        t += s[i];\n      }\n    }\n    else {\n      t += s[i];\n    }\n  }\n  if (k == 0) {\n    p.push(t);\n  }\n  return p;\n}\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordsArray2(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsArray2(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\n\nconst wordsArray3 = (s) => {\n  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] =='' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n      else {\n        t += s[i];\n      }\n    }\n    else {\n      t += s[i];\n    }\n  }\n  if (k == 0) {\n    p.push(t);\n  }\n  return p;\n}\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordsArray3(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsArray3(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\n\nconst wordsArray4 = (s) => {\n  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] =='' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n      else {\n        t += s[i];\n      }\n    }\n    else {\n      t += s[i];\n    }\n  }\n  if (k == 0) {\n    p.push(t);\n  }\n  return p;\n}\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordsArray4(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsArray4(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\n\nconst wordsArray5 = (s) => {\n  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] =='' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n      else {\n        t += s[i];\n      }\n    }\n    else {\n      t += s[i];\n    }\n  }\n  if (k == 0) {\n    p.push(t);\n  }\n  return p;\n}\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordsArray5(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsArray5(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\n\nconst wordsArray6 = (s) => {\n  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] =='' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n      else {\n        t += s[i];\n      }\n    }\n    else {\n      t += s[i];\n    }\n  }\n  if (k == 0) {\n    p.push(t);\n  }\n  return p;\n}\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordsArray6(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsArray6(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\n\nconst wordsArray7 = (s) => {\n  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] =='' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n      else {\n        t += s[i];\n      }\n    }\n    else {\n      t += s[i];\n    }\n  }\n  if (k == 0) {\n    p.push(t);\n  }\n  return p;\n}\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordsArray7(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsArray7(\"One, two, "}
{"task_id": "JavaScript/102", "prompt": "/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\n\nconst chooseNum = (x, y) => {\n  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n", "canonical_solution": "  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "partial": "/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n    # print('@@this is the line to split##')\n  }\n  return -1\n}\n\n", "gc": "<|endoftext|>/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\n\nconst chooseNum = (x, y) => {\n  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n/*This function takes two positive numbers x and y and returns the\n  biggest odd integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 15\n  chooseNum(13, 12) = -1\n  */\n\nconst chooseNum = (x, y) => {\n  for (let i = y; i >= x; i--) {\n    if (i % 2!= 0) {return i }\n  }\n  return -1\n}\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 12\n  chooseNum(13, 12) = -1\n  */\n\nconst chooseNum = (x, y) => {\n  for (let i = y; i >= x; i--) {\n    if (i % 2 === 0) {return i }\n  }\n  return -1\n}\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 15\n  chooseNum(13, 12) = -1\n  */\n\nconst chooseNum = (x, y) => {\n  for (let i = y; i >= x; i--) {\n    if (i % 2!== 0) {return i }\n  }\n  return -1\n}\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 15\n  chooseNum(13, 12) = -1\n  */\n\nconst chooseNum = (x, y) => {\n  for (let i = y; i >= x; i--) {\n    if (i % 2 === 0) {return i }\n  }\n  return -1\n}\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 15\n  chooseNum(13, 12) = -1\n  */\n\nconst chooseNum = (x, y) => {\n  for (let i = y; i >= x; i--) {\n    if (i % 2!== 0) {return i }\n  }\n  return -1\n}\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 15\n  chooseNum(13, 12) = -1\n  */\n\nconst chooseNum = (x, y) => {\n  for (let i = y; i >= x; i--) {\n    if (i % 2 === 0) {return i }\n  }\n  return -1\n}\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 15\n  chooseNum(13, 12) = -1\n  */\n\nconst chooseNum = (x, y) => {\n  for (let i = y; i >= x; i--) {\n    if (i % 2!== 0) {return i }\n  }\n  return -1\n}\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 15\n  chooseNum(13, 12) = -1\n  */\n\nconst chooseNum = (x, y) => {\n  for (let i = y; i >= x; i--) {\n    if (i % 2!== 0) {return i }\n  }\n  return -1\n}\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 15\n  chooseNum(13, 12) = -1\n  */\n\nconst chooseNum = (x, y) => {\n  for (let i = y; i >= x; i--) {\n    if (i % 2!== 0) {return i }\n  }\n  return -1\n}\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 15\n  chooseNum(13, 12) = -1\n  */\n\nconst chooseNum = (x, y) => {\n  for (let i = y; i >= x; i--) {\n    if (i % 2!== 0) {return i }\n  }\n  return -1\n}\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 15\n  chooseNum(13, 12) = -1\n  */\n\nconst chooseNum = (x, y) => {\n  for (let i = y; i >= x; i--) {\n    if (i % 2!== 0) {return i }\n  }\n  return -1\n}\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 15\n  chooseNum(13, 12) = -1\n  */\n\nconst chooseNum = (x, y) => {\n  for (let i = y; i >= x; i--) {\n    if (i % 2!== 0) {return i }\n  }\n  return -1\n}\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 15\n  chooseNum(13, 12) = -1\n  */\n\nconst chooseNum = (x, y) => {\n  for (let i = y; i >= x; i--) {\n    if (i % 2!== 0) {return i }\n  }\n  return -1\n}\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 15\n  chooseNum(13, 12) = -1\n  */\n\nconst chooseNum = (x, y) => {\n  for (let i = y; i >= x; i--) {\n    if (i % 2!== 0) {return i }\n  }\n  return -1\n}\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 15\n  chooseNum(13, 12) = -1\n  */\n\nconst chooseNum = (x, y) => {\n  for (let i = y; i >= x; i--) {\n    if (i % 2!== 0) {return i }\n  }\n  return -1\n}\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 15\n  chooseNum(13, 12) = -1\n  */\n\nconst chooseNum = (x, y) => {\n  for (let i = y; i >= x; i--) {\n"}
{"task_id": "JavaScript/103", "prompt": "/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\n\nconst roundedAvg = (n, m) => {\n  if (n > m) { return -1 }\n  let k = (n + m) / 2\n", "canonical_solution": "  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "partial": "/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  # print('@@this is the line to split##')\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "gc": "<|endoftext|>/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\n\nconst roundedAvg = (n, m) => {\n  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  let binary = n % 2? '1' : '0'\n  return binary + binaryAvg(binary, k)\n}\n\nconst binaryAvg = (binary, k) => {\n  let sum = 0\n  for (let i = k; i <= binary.length; i += 2) {\n    sum += parseInt(binary.charAt(i), 2)\n  }\n  return sum / k\n}\n\n/*\n  You are given two positive integers n and m, and your task is to compute the\n  number of ways to arrange the integers from n through m (including n and m).\n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  ways(1, 5) => \"0b11\"\n  ways(7, 5) => \"0b111\"\n  ways(10, 20) => \"0b1101\"\n  ways(20, 33) => \"0b11010\"\n  */\n\nconst ways = (n, m) => {\n  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  let binary = n % 2? '1' : '0'\n  return binaryAvg(binary, k) + ways(binaryAvg(binary, k), k - 1)\n}\n\n/*\n  You are given two positive integers n and m, and your task is to compute the\n  number of ways to arrange the integers from n through m (including n and m).\n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  ways2(5, 10) => \"0b11\"\n  ways2(7, 5) => \"0b111\"\n  ways2(10, 20) => \"0b1101\"\n  ways2(20, 33) => \"0b11010\"\n  */\n\nconst ways2 = (n, m) => {\n  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  let binary = n % 2? '1' : '0'\n  return binaryAvg(binary, k) + ways2(binaryAvg(binary, k), k - 1)\n}\n\n/*\n  You are given two positive integers n and m, and your task is to compute the\n  number of ways to arrange the integers from n through m (including n and m).\n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  ways3(5, 10) => \"0b11\"\n  ways3(7, 5) => \"0b111\"\n  ways3(10, 20) => \"0b1101\"\n  ways3(20, 33) => \"0b11010\"\n  */\n\nconst ways3 = (n, m) => {\n  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  let binary = n % 2? '1' : '0'\n  return binaryAvg(binary, k) + ways3(binaryAvg(binary, k), k - 1)\n}\n\n/*\n  You are given two positive integers n and m, and your task is to compute the\n  number of ways to arrange the integers from n through m (including n and m).\n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  ways4(5, 10) => \"0b11\"\n  ways4(7, 5) => \"0b111\"\n  ways4(10, 20) => \"0b1101\"\n  ways4(20, 33) => \"0b11010\"\n  */\n\nconst ways4 = (n, m) => {\n  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  let binary = n % 2? '1' : '0'\n  return binaryAvg(binary, k) + ways4(binaryAvg(binary, k), k - 1)\n}\n\n/*\n  You are given two positive integers n and m, and your task is to compute the\n  number of ways to arrange the integers from n through m (including n and m).\n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  ways5(7, 5) => \"0b11\"\n  ways5(10, 20) => \"0b1101\"\n  ways5(20, 33) => \"0b11010\"\n  */\n\nconst ways5 = (n, m) => {\n  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  let binary = n % 2? '1' : '0'\n  return binaryAvg(binary, k) + ways5(binaryAvg(binary, k), k - 1)\n}\n\n/*\n  You are given two positive integers n and m, and your task is to compute the\n  number of ways to arrange the integers from n through m (including n and m).\n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  ways6(7, 5) => \"0b11\"\n  ways6(10, 20) => \"0b1101\"\n  ways6(20, 33) => \"0b11010\"\n  */\n\nconst ways6 = (n, m) => {\n  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  let binary = n % 2? '1' : '0'\n  return binaryAvg(binary, k) + ways6(binaryAvg(binary, k), k - 1)\n}\n\n/*\n  You are given two positive integers n and m, and your task is to compute the\n  number of ways to arrange the integers from n through m (including n and m).\n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  ways7(7, 5) => \"0b11\"\n  ways7(10, 20) => \"0b1101\"\n  ways7(20, 33) => \"0b11010\"\n  */\n\nconst ways7 = (n, m) => {\n  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  let binary = n % 2? '1' : '0'\n  return binaryAvg(binary, k) + ways7(binaryAvg(binary, k), k - 1)\n}\n\n/*\n  You are given two positive integers n and m, and your task is to compute the\n  number of ways to arrange the integers from n through m (including n and m).\n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  ways8(7, 5) => \"0b11\"\n  ways8(10, 20) => \"0b1101\"\n  ways8(20, 33) => \"0b11010\"\n  */\n\nconst ways8 = (n, m) => {\n  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  let binary = n % 2? '1' : '0'\n  return binaryAvg(binary, k) + ways8(binaryAvg(binary, k), k - 1)\n}\n\n/*\n  You are given two positive integers n and m, and your task is to compute the\n  number of ways to "}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\n\nconst uniqueDigits = (x) => {\n  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n", "canonical_solution": "  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "partial": "/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n    # print('@@this is the line to split##')\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "gc": "<|endoftext|>/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\n\nconst uniqueDigits = (x) => {\n  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  return p\n}\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that has only odd digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [15]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\n\nconst uniqueOddDigits = (x) => {\n  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h % 2 == 0) {\n      let r = h % 10\n      if (r % 2 == 1) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  return p\n}\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that has only even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueOddDigits([15, 33, 1422, 1])\n  [33, 1422]\n  >>> uniqueOddDigits([152, 323, 1422, 10])\n  []\n  */\n\nconst uniqueEvenDigits = (x) => {\n  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h % 2 == 1) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  return p\n}\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that has only odd or even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueOddEvenDigits([15, 33, 1422, 1])\n  [33, 1422]\n  >>> uniqueOddEvenDigits([152, 323, 1422, 10])\n  []\n  */\n\nconst uniqueOddEvenDigits = (x) => {\n  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h % 2 == 1 || h % 2 == 0) {\n      let r = h % 10\n      if (r % 2 == 1 || r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  return p\n}\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that has only even or odd digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueEvenOddDigits([15, 33, 1422, 1])\n  [33, 1422]\n  >>> uniqueEvenOddDigits([152, 323, 1422, 10])\n  []\n  */\n\nconst uniqueEvenOddDigits = (x) => {\n  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h % 2 == 1 || h % 2 == 0) {\n      let r = h % 10\n      if (r % 2 == 1 || r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  return p\n}\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that has only odd or even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueOddEvenOddDigits([15, 33, 1422, 1])\n  [33, 1422]\n  >>> uniqueOddEvenOddDigits([152, 323, 1422, 10])\n  []\n  */\n\nconst uniqueOddEvenOddDigits = (x) => {\n  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h % 2 == 1 || h % 2 == 0) {\n      let r = h % 10\n      if (r % 2 == 1 || r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  return p\n}\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that has only even or odd digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueEvenOddEvenOddDigits([15, 33, 1422, 1])\n  [33, 1422]\n  >>> uniqueEvenOddEvenOddDigits([152, 323, 1422, 10])\n  []\n  */\n\nconst uniqueEvenOddEvenDigits = (x) => {\n  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h % 2 == 1 || h % 2 == 0) {\n      let r = h % 10\n      if (r % 2 == 1 || r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  return p\n}\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that has only odd or even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueOddEvenOddEvenDigits([15, 33, 1422, 1])\n  [33, 1422]\n  >>> uniqueOddEvenOddEvenDigits([152, 323, 1422, 10])\n  []\n  */\n\nconst uniqueOddOddOddDigits = (x) => {\n  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h % 2 == 0 || h % 2 == 1) {\n      let r = h % 10\n      if (r % 2 == 0 || r % 2 == 1) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  return p\n}\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that has only odd or even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueOddOddOddEvenDigits([15, 33, 1422, 1])\n  [33, 1422]\n  >>> uniqueOddOddOddEvenDigits([152, 323, 1422, 10])\n  []\n  */\n\nconst uniqueOddOddOddEvenDigits = (x) => {\n  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h % 2 == 0 || h % 2 == 1) {\n      let r = h % 10\n      if (r % 2 == 0 || r % 2 == 1) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  return p"}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\n\nconst byLength = (arr) => {\n  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n", "canonical_solution": "      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "partial": "/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      # print('@@this is the line to split##')\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "gc": "<|endoftext|>/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\n\nconst byLength = (arr) => {\n  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      arr[j] = arr[ind]\n      j = ind\n    }\n  }\n  return arr\n}\n\nconst byName = (arr) => {\n  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      arr[j] = arr[ind]\n      j = ind\n    }\n  }\n  return arr\n}\n\nconst byNameReverse = (arr) => {\n  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      arr[j] = arr[ind]\n      j = ind\n    }\n  }\n  return arr\n}\n\nconst byNameReverseReverse = (arr) => {\n  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      arr[j] = arr[ind]\n      j = ind\n    }\n  }\n  return arr\n}\n\nconst byNameReverseReverseReverse = (arr) => {\n  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      arr[j] = arr[ind]\n      j = ind\n    }\n  }\n  return arr\n}\n\nconst byNameReverseReverseReverseReverse = (arr) => {\n  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      arr[j] = arr[ind]\n      j = ind\n    }\n  }\n  return arr\n}\n\nconst byNameReverseReverseReverseReverseReverse = (arr) => {\n  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      arr[j] = arr[ind]\n      j = ind\n    }\n  }\n  return arr\n}\n\nconst byNameReverseReverseReverseReverseReverseReverse = (arr) => {\n  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      arr[j] = arr[ind]\n      j = ind\n    }\n  }\n  return arr\n}\n\nconst byNameReverseReverseReverseReverseReverseReverseReverse = (arr) => {\n  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      arr[j] = arr[ind]\n      j = ind\n    }\n  }\n  return arr\n}\n\nconst byNameReverseReverseReverseReverseReverseReverseReverseReverse = (arr) => {\n  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      arr[j] = arr[ind]\n      j = ind\n    }\n  }\n  return arr\n}\n\nconst byNameReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse = (arr) => {\n  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      arr[j] = arr[ind]\n      j = ind\n    }\n  }\n  return arr\n}\n\nconst byNameReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse = (arr) => {\n  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      arr[j] = arr[ind]\n      j = ind\n    }\n  }\n  return arr\n}\n\nconst byNameReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse"}
{"task_id": "JavaScript/106", "prompt": "/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\n\nconst f = (n) => {\n  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n", "canonical_solution": "    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "partial": "/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    # print('@@this is the line to split##')\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "gc": "<|endoftext|>/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\n\nconst f = (n) => {\n  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    if (p % 2 === 0) {\n      f.push(k[p])\n      k[p] = k[p] + 1\n    } else {\n      k[p] = k[p] + 1\n    }\n  }\n  return f\n}\n\n/* Implement the function g that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the greatest common divisor of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the greatest common divisor of i is the product of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  g(5) == [1, 2, 6, 24, 15]\n  */\n\nconst g = (n) => {\n  let g = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    if (p % 2 === 0) {\n      g = g * p;\n      k[p] = k[p] + 1\n    } else {\n      k[p] = k[p] + 1\n    }\n  }\n  return g\n}\n\n/* Implement the function h that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the greatest common divisor of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the greatest common divisor of i is the product of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  h(5) == [1, 2, 6, 24, 15]\n  */\n\nconst h = (n) => {\n  let h = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    if (p % 2 === 0) {\n      h = h * p;\n      k[p] = k[p] + 1\n    } else {\n      k[p] = k[p] + 1\n    }\n  }\n  return h\n}\n\n/* Implement the function i that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the greatest common divisor of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the greatest common divisor of i is the product of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  i(5) == [1, 2, 6, 24, 15]\n  */\n\nconst i = (n) => {\n  let i = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    if (p % 2 === 0) {\n      i = i * p;\n      k[p] = k[p] + 1\n    } else {\n      k[p] = k[p] + 1\n    }\n  }\n  return i\n}\n\n/* Implement the function j that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the greatest common divisor of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the greatest common divisor of i is the product of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  j(5) == [1, 2, 6, 24, 15]\n  */\n\nconst j = (n) => {\n  let j = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    if (p % 2 === 0) {\n      j = j * p;\n      k[p] = k[p] + 1\n    } else {\n      k[p] = k[p] + 1\n    }\n  }\n  return j\n}\n\n/* Implement the function k that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the greatest common divisor of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the greatest common divisor of i is the product of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  k(5) == [1, 2, 6, 24, 15]\n  */\n\nconst k = (n) => {\n  let k = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    if (p % 2 === 0) {\n      k = k * p;\n      k[p] = k[p] + 1\n    } else {\n      k[p] = k[p] + 1\n    }\n  }\n  return k\n}\n\n/* Implement the function l that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the greatest common divisor of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the greatest common divisor of i is the product of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  l(5) == [1, 2, 6, 24, 15]\n  */\n\nconst l = (n) => {\n  let l = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    if (p % 2 === 0) {\n      l = l * p;\n      k[p] = k[p] + 1\n    } else {\n      k[p] = k[p] + 1\n    }\n  }\n  return l\n}\n\n/* Implement the function m that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the greatest common divisor of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the greatest common divisor of i is the product of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  m(5) == [1, 2, 6, 24, 15]\n  */\n\nconst m = (n) => {\n  let m = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    if (p % 2 === 0) {\n      m = m * p;\n      k[p] = k[p] + 1\n    } else {\n      k[p] = k[p] + 1\n    }\n  }\n  return m\n}\n\n/* Implement the function n that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the greatest common divisor of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the greatest common divisor of i is the product of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  n(5) == [1, 2, 6, 24, 15]\n  */\n\nconst n = (n) => {\n  let n = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    if (p % 2 === 0) {\n      n = n * p;\n      k[p] = k[p] + 1\n    } else {\n      k[p] = k[p] + 1\n    }\n  }\n  return n\n}\n\n/* Implement the function o that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the greatest common divisor of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the greatest common divisor of i is the product of the numbers from "}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\n\nconst evenOddPalindrome = (n) => {\n  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n", "canonical_solution": "      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "partial": "/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n        # print('@@this is the line to split##')\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "gc": "<|endoftext|>/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\n\nconst evenOddPalindrome = (n) => {\n  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j]!= k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      e++\n    } else {\n      o++\n    }\n  }\n  return [e, o]\n}\n\nconsole.log(evenOddPalindrome(3))\nconsole.log(evenOddPalindrome(12))\nconsole.log(evenOddPalindrome(100))\nconsole.log(evenOddPalindrome(1000))\nconsole.log(evenOddPalindrome(10000))\nconsole.log(evenOddPalindrome(100000))\nconsole.log(evenOddPalindrome(1000000))\nconsole.log(evenOddPalindrome(100000000))\nconsole.log(evenOddPalindrome(1000000000))\nconsole.log(evenOddPalindrome(10000000000))\nconsole.log(evenOddPalindrome(100000000000))\nconsole.log(evenOddPalindrome(1000000000000))\nconsole.log(evenOddPalindrome(10000000000000))\nconsole.log(evenOddPalindrome(100000000000000))\nconsole.log(evenOddPalindrome(1000000000000000))\nconsole.log(evenOddPalindrome(10000000000000000))\nconsole.log(evenOddPalindrome(100000000000000000))\nconsole.log(evenOddPalindrome(1000000000000000000))\nconsole.log(evenOddPalindrome(10000000000000000000))\nconsole.log(evenOddPalindrome(100000000000000000000))\nconsole.log(evenOddPalindrome(1000000000000000000000))\nconsole.log(evenOddPalindrome(10000000000000000000000))\nconsole.log(evenOddPalindrome(100000000000000000000000))\nconsole.log(evenOddPalindrome(1000000000000000000000000))\nconsole.log(evenOddPalindrome(10000000000000000000000000))\nconsole.log(evenOddPalindrome(100000000000000000000000000))\nconsole.log(evenOddPalindrome(1000000000000000000000000000))\nconsole.log(evenOddPalindrome(10000000000000000000000000000))\nconsole.log(evenOddPalindrome(100000000000000000000000000000))\nconsole.log(evenOddPalindrome(1000000000000000000000000000000))\nconsole.log(evenOddPalindrome(10000000000000000000000000000000))\nconsole.log(evenOddPalindrome(100000000000000000000000000000000))\nconsole.log(evenOddPalindrome(1000000000000000000000000000000000))\nconsole.log(evenOddPalindrome(10000000000000000000000000000000000))\nconsole.log(evenOddPalindrome(100000000000000000000000000000000000))\nconsole.log(evenOddPalindrome(1000000000000000000000000000000000000))\nconsole.log(evenOddPalindrome(10000000000000000000000000000000000000))\nconsole.log(evenOddPalindrome(100000000000000000000000000000000000000))\nconsole.log(evenOddPalindrome(1000000000000000000000000000000000000000))\nconsole.log(evenOddPalindrome(10000000000000000000000000000000000000000))\nconsole.log(evenOddPalindrome(100000000000000000000000000000000000000000))\nconsole.log(evenOddPalindrome(1000000000000000000000000000000000000000000))\nconsole.log(evenOddPalindrome(10000000000000000000000000000000000000000000))\nconsole.log(evenOddPalindrome(100000000000000000000000000000000000000000000))\nconsole.log(evenOddPalindrome(1000000000000000000000000000000000000000000000))\nconsole.log(evenOddPalindrome(10000000000000000000000000000000000000000000000))\nconsole.log(evenOddPalindrome(100000000000000000000000000000000000000000000000))\nconsole.log(evenOddPalindrome(1000000000000000000000000000000000000000000000000))\nconsole.log(evenOddPalindrome(10000000000000000000000000000000000000000000000000))\nconsole.log(evenOddPalindrome(100000000000000000000000000000000000000000000000000))\nconsole.log(evenOddPalindrome(1000000000000000000000000000000000000000000000000000))\nconsole.log(evenOddPalindrome(10000000000000000000000000000000000000000000000000000))\nconsole.log(evenOddPalindrome(100000000000000000000000000000000000000000000000000000))\nconsole.log(evenOddPalindrome(1000000000000000000000000000000000000000000000000000000))\nconsole.log(evenOddPalindrome(10000000000000000000000000000000000000000000000000000000))\nconsole.log(evenOddPalindrome(100000000000000000000000000000000000000000000000000000000))\nconsole.log(evenOddPalindrome(1000000000000000000000000000000000000000000000000000000000))\nconsole.log(evenOddPalindrome(10000000000000000000000000000000000000000000000000000000000))\nconsole.log(evenOddPalindrome(100000000000000000000000000000000000000000000000000000000000))\nconsole.log(evenOddPalindrome(1000000000000000000000000000000000000000000000000000000000000))\nconsole.log(evenOddPalindrome(10000000000000000000000000000000000000000000000000000000000000))\nconsole.log(evenOddPalindrome(100000000000000000000000000000000000000000000000000000000000000))\nconsole.log(evenOddPalindrome(1000000000000000000000000000000000000000000000000000000000000000))\nconsole.log(evenOddPalindrome(10000000000000000000000000000000000000000000000000000000000000000))\nconsole.log(evenOddPalindrome(100000000000000000000000000000000000000000000000000000000000000000))\nconsole.log(evenOddPalindrome(1000000000000000000000000000000000000000000000000000000000000000000))\nconsole.log(evenOddPalindrome(10000000000000000000000000000000000000000000000000000000000000000000))\nconsole.log(evenOddPalindrome(100000000000000000000000000000000000000000000000000000000000000000000))\nconsole.log(evenOddPalindrome(1000000000000000000000000000000000000000000000000000000000000000000000))\nconsole.log(evenOddPalindrome(10000000000000000000000000000000000000000000000000000000000000000000000))\nconsole.log(evenOddPalindrome(100000000000000000000000000000000000000000000000000000000000000000000000))\nconsole.log(evenOddPalindrome(1000000000000000000000000000000000000000000000000000000000000000000000000))\nconsole.log(evenOddPalindrome(10000000000000000000000000000000000000000000000000000000000000000000000000))\nconsole.log(evenOddPalindrome(100000000000000000000000000000000000000000000000000000000000000000000000000))\nconsole.log(evenOddPalindrome(1000000000000000000000000000000000000000000000000000000000000000000000000000))\nconsole.log(evenOddPalindrome(10000000000000000000000000000000000000000000000000000000000000000000000000000))\nconsole.log(evenOddPalindrome(100000000000000000000000000000000000000000000000000000000000000000000000000000))\nconsole.log(evenOddPalindrome(1000000000000000000000000000000000000000000000000000000000000000000000000000000))\nconsole.log(evenOddPalindrome(10000000000000000000000000000000000000000000000000000000000000000000000000000000))\nconsole.log(evenOddPalindrome(100000000000000000000000000000000000000000000000000000000000000000000000000000000))\nconsole.log(evenOddPalindrome(1000000000000000000000000000000000000000000000000000000000000000000000000000000000))\nconsole.log(evenOddPalindrome(10000000000000000000000000000000000000000000000000000000000000000000000000000000000))\nconsole.log(evenOddPalindrome(100000000000000000000000000000000000000000000000000000000000000000000000000000000000))\nconsole.log(evenOddPalindrome(100000000000000000000000000000000000000000000000000000000000000000000))\nconsole.log(evenOddPalindrome(1000000000000000000000000000000000000000000000000000000000000000000000))\nconsole.log("}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function countNums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\n\nconst countNums = (arr) => {\n  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n", "canonical_solution": "    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "partial": "/*\n  Write a function countNums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    # print('@@this is the line to split##')\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "gc": "<|endoftext|>/*\n  Write a function countNums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\n\nconst countNums = (arr) => {\n  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (true) {\n      k = k * 10 + h % 10\n      h = Math.floor(h / 10)\n      if (h === 0) break;\n    }\n    if (k > 0) p++;\n  }\n  return p;\n}\n\n/*\n  Write a function countZeros which takes an array of integers and returns\n  the number of elements which has a sum of digits == 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countZeros([]) == 0\n  >>> countZeros([-1, 11, -11]) == 1\n  >>> countZeros([1, 1, 2]) == 3\n  */\n\nconst countZeros = (arr) => {\n  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h === 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (true) {\n      k = k * 10 + h % 10\n      h = Math.floor(h / 10)\n      if (h === 0) break;\n    }\n    if (k > 0) p++;\n  }\n  return p;\n}\n\n/*\n  Write a function countOnes which takes an array of integers and returns\n  the number of elements which has a sum of digits == 1.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countOnes([]) == 0\n  >>> countOnes([-1, 11, -11]) == 1\n  >>> countOnes([1, 1, 2]) == 3\n  */\n\nconst countOnes = (arr) => {\n  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h === 1) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (true) {\n      k = k * 10 + h % 10\n      h = Math.floor(h / 10)\n      if (h === 1) break;\n    }\n    if (k > 0) p++;\n  }\n  return p;\n}\n\n/*\n  Write a function countTwos which takes an array of integers and returns\n  the number of elements which has a sum of digits == 2.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countTwos([]) == 0\n  >>> countTwos([-1, 11, -11]) == 1\n  >>> countTwos([1, 1, 2]) == 3\n  */\n\nconst countTwos = (arr) => {\n  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h === 2) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (true) {\n      k = k * 10 + h % 10\n      h = Math.floor(h / 10)\n      if (h === 2) break;\n    }\n    if (k > 0) p++;\n  }\n  return p;\n}\n\n/*\n  Write a function countThrees which takes an array of integers and returns\n  the number of elements which has a sum of digits == 3.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countThrees([]) == 0\n  >>> countThrees([-1, 11, -11]) == 1\n  >>> countThrees([1, 1, 2]) == 3\n  */\n\nconst countThrees = (arr) => {\n  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h === 3) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (true) {\n      k = k * 10 + h % 10\n      h = Math.floor(h / 10)\n      if (h === 3) break;\n    }\n    if (k > 0) p++;\n  }\n  return p;\n}\n\n/*\n  Write a function countFours which takes an array of integers and returns\n  the number of elements which has a sum of digits == 4.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countFours([]) == 0\n  >>> countFours([-1, 11, -11]) == 1\n  >>> countFours([1, 1, 2]) == 3\n  */\n\nconst countFours = (arr) => {\n  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h === 4) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (true) {\n      k = k * 10 + h % 10\n      h = Math.floor(h / 10)\n      if (h === 4) break;\n    }\n    if (k > 0) p++;\n  }\n  return p;\n}\n\n/*\n  Write a function countFives which takes an array of integers and returns\n  the number of elements which has a sum of digits == 5.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countFives([]) == 0\n  >>> countFives([-1, 11, -11]) == 1\n  >>> countFives([1, 1, 2]) == 3\n  */\n\nconst countFives = (arr) => {\n  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h === 5) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (true) {\n      k = k * 10 + h % 10\n      h = Math.floor(h / 10)\n      if (h === 5) break;\n    }\n    if (k > 0) p++;\n  }\n  return p;\n}\n\n/*\n  Write a function countSix which takes an array of integers and returns\n  the number of elements which has a sum of digits == 6.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countSix([]) == 0\n  >>> countSix([-1, 11, -11]) == 1\n  >>> countSix([1, 1, 2]) == 3\n  */\n\nconst countSix = (arr) => {\n  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h === 6) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (true) {\n      k = k * 10 + h % 10\n      h = Math.floor(h / 10)\n      if (h === 6) break;\n    }\n    if (k > 0) p++;\n  }\n  return p;\n}\n\n/*\n  Write a function countSeven which takes an array of integers and returns\n  the number of elements which has a sum of digits == 7.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countSeven([]) == 0\n  >>> countSeven([-1, 11, -11]) == 1\n  >>> countSeven([1, 1, 2]) == 3\n  */\n\nconst countSeven = (arr) => {\n  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h === 7) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (true) {\n      k = k * 10 + h % 10\n      h = Math.floor(h / 10)\n      if (h === 7) break;\n    }\n    if (k > 0) p++;\n  }\n  return p;\n}\n\n/*\n  Write a function countEight which takes an array of integers and "}
{"task_id": "JavaScript/109", "prompt": "/*We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\n\nconst moveOneBall = (arr) => {\n  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n", "canonical_solution": "    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "partial": "/*We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n      # print('@@this is the line to split##')\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "gc": "<|endoftext|>/*We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\n\nconst moveOneBall = (arr) => {\n  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t === 0) {\n      k = k + 1\n      arr[k] = arr[i]\n      i = i - 1\n    }\n  }\n  return k === len\n}\n\n/*\n  Given an array arr of N integers arr[1], arr[2],..., arr[N], \n  You are allowed to perform the following operations:\n  \n  You are allowed to perform the following operations:\n  \n  You are allowed to perform the following operations:\n  \n  You are allowed to perform the following operations:\n  \n  You are allowed to perform the following operations:\n  \n  You are allowed to perform the following operations:\n  \n  You are allowed to perform the following operations:\n  \n  You are allowed to perform the following operations:\n  \n  You are allowed to perform the following operations:\n  \n  You are allowed to perform the following operations:\n  \n  You are allowed to perform the following operations:\n  \n  You are allowed to perform the following operations:\n  \n  You are allowed to perform the following operations:\n  \n  You are allowed to perform the following operations:\n  \n  You are allowed to perform the following operations:\n  \n  You are allowed to perform the following operations:\n  \n  You are allowed to perform the following operations:\n  \n  You are allowed to perform the following operations:\n  \n  You are allowed to perform the following operations:\n  \n  You are allowed to perform the following operations:\n  \n  You are allowed to perform the following operations:\n  \n  You are allowed to perform the following operations:\n  \n  You are allowed to perform the following operations:\n  \n  You are allowed to perform the following operations:\n  \n  You are allowed to perform the following operations:\n  \n  You are allowed to perform the following operations:\n  \n  You are allowed to perform the following operations:\n  \n  You are allowed to perform the following operations:\n  \n  You are allowed to perform the following operations:\n  \n  You are allowed to perform the following operations:\n  \n  You are allowed to perform the following operations:\n  \n  You are allowed to perform the following operations:\n  \n  You are allowed to perform the following operations:\n  \n  You are allowed to perform the following operations:\n  \n  You are allowed to perform the following operations:\n  \n  You are allowed to perform the following operations:\n  \n  You are allowed to perform the following operations:\n  \n  You are allowed to perform the following operations:\n  \n  You are allowed to perform the following operations:\n  \n  You are allowed to perform the following operations:\n  \n  You are allowed to perform the following operations:\n  \n  You are allowed to perform the following operations:\n  \n  You are allowed to perform the following operations:\n  \n  You are allowed to perform the following operations:\n  \n  You are allowed to perform the following operations:\n  \n  You are allowed to perform the following operations:\n  \n  You are allowed to perform the following operations:\n  \n  You are allowed to perform the following operations:\n  \n  You are allowed to perform the following operations:\n  \n  You are allowed to perform the following operations:\n  \n  You are allowed to perform the following operations:\n  \n  You are allowed to perform the following operations:\n  \n  You are allowed to perform the following operations:\n  \n  You are allowed to perform the following operations:\n  \n  You are allowed to perform the following operations:\n  \n  You are allowed to perform the following operations:\n  \n  You are allowed to perform the following operations:\n  \n  You are allowed to perform the following operations:\n  \n  You are allowed to perform the following operations:\n  \n  You are allowed to perform the following operations:\n  \n  You are allowed to perform the following operations:\n  \n  You are allowed to perform the following operations:\n  \n  You are allowed to perform the following operations:\n  \n  You are allowed to perform the following operations:\n  \n  You are allowed to perform the following operations:\n  \n  You are allowed to perform the following operations:\n  \n  You are allowed to perform the following operations:\n  \n  You are allowed to perform the following operations:\n  \n  You are allowed to perform the following operations:\n  \n  You are allowed to perform the following operations:\n  \n  You are allowed to perform the following operations:\n  \n  You are allowed to perform the following operations:\n  \n  You are allowed to perform the following operations:\n  \n  You are allowed to perform the following operations:\n  \n  You are allowed to perform the following operations:\n  \n  You are allowed to perform the following operations:\n  \n  You are allowed to perform the following operations:\n  \n  You are allowed to perform the following operations:\n  \n  You are allowed to perform the following operations:\n  \n  You are allowed to perform the following operations:\n  \n  You are allowed to perform the following operations:\n  \n  You are allowed to perform the following operations:\n  \n  You are allowed to perform the following operations:\n  \n  You are allowed to perform the following operations:\n  \n  You are allowed to perform the following operations:\n  \n  You are allowed to perform the following operations:\n  \n  You are allowed to perform the following operations:\n  \n  You are allowed to perform the following operations:\n  \n  You are allowed to perform the following operations:\n  \n  You are allowed to perform the following operations:\n  \n  You are allowed to perform the following operations:\n  \n  You are allowed to perform the following operations:\n  \n  You are allowed to perform the following operations:\n  \n  You are allowed to perform the following operations:\n  \n  You are allowed to perform the following operations:\n  \n  You are allowed to perform the following operations:\n  \n  You are allowed to perform the following operations:\n  \n  You are allowed to perform the following operations:\n  \n  You are allowed to perform the following operations:\n  \n  You are allowed to perform the following operations:\n  \n  You are allowed to perform the following operations:\n  \n  You are allowed to perform the following operations:\n  \n  You are allowed to perform the following operations:\n  \n  You are allowed to perform the following operations:\n  \n  You are allowed to perform the following operations:\n  \n  You are allowed to perform the following operations:\n  \n  You are allowed to perform the following operations:\n  \n  You are allowed to perform the following operations:\n  \n  You are allowed to perform the following operations:\n  \n  You are allowed to perform the following operations:\n  \n  You are allowed to perform the following operations:\n  \n  You are allowed to perform the following operations:\n  \n  You are allowed to perform the following operations:\n  \n  You are allowed to perform the following operations:\n  \n  You are allowed to perform the following operations:\n  \n  You are allowed to perform the following operations:\n  \n  You are allowed to perform the following operations:\n  \n  You are allowed to perform the following operations:\n  \n  You are allowed to perform the following "}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an exchange of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of exchanged elements between lst1 and lst2.\n  If it is possible to exchange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\n\nconst exchange = (lst1, lst2) => {\n  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n", "canonical_solution": "  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "partial": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an exchange of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of exchanged elements between lst1 and lst2.\n  If it is possible to exchange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  # print('@@this is the line to split##')\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "gc": "<|endoftext|>/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an exchange of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of exchanged elements between lst1 and lst2.\n  If it is possible to exchange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\n\nconst exchange = (lst1, lst2) => {\n  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  if (t > k) {\n    return false\n  } else {\n    let arr = []\n    for (let i = 0; i < k; i++) {\n      arr.push(lst1[i])\n    }\n    for (let i = 0; i < k; i++) {\n      lst1[i] = lst1[i] % 2\n    }\n    for (let i = 0; i < k; i++) {\n      lst2[i] = lst2[i] % 2\n    }\n    for (let i = 0; i < k; i++) {\n      if (lst1[i]!= lst2[i]) {\n        return false\n      }\n    }\n    return true\n  }\n}\n\n/*\n  Write a function that takes an array of numbers and returns the\n  number of ways to convert each number from one base to another.\n  For example:\n  convertBase([1, 2, 3, 4], [1, 2, 3, 4]) => 4\n  convertBase([1, 2, 3, 4], [1, 5, 3, 4]) => 2\n  convertBase([1, 2, 3, 4], [1, 4, 2, 3]) => 1\n  convertBase([1, 2, 3, 4], [1, 3, 2, 1]) => 0\n  convertBase([1, 2, 3, 4], [1, 3, 2, 1]) => 0\n  convertBase([1, 2, 3, 4], [1, 3, 2, 1]) => 0\n  convertBase([1, 2, 3, 4], [1, 3, 2, 1]) => 0\n  convertBase([1, 2, 3, 4], [1, 3, 2, 1]) => 0\n  convertBase([1, 2, 3, 4], [1, 3, 2, 1]) => 0\n  convertBase([1, 2, 3, 4], [1, 3, 2, 1]) => 0\n  convertBase([1, 2, 3, 4], [1, 3, 2, 1]) => 0\n  convertBase([1, 2, 3, 4], [1, 3, 2, 1]) => 0\n  convertBase([1, 2, 3, 4], [1, 3, 2, 1]) => 0\n  convertBase([1, 2, 3, 4], [1, 3, 2, 1]) => 0\n  convertBase([1, 2, 3, 4], [1, 3, 2, 1]) => 0\n  convertBase([1, 2, 3, 4], [1, 3, 2, 1]) => 0\n  convertBase([1, 2, 3, 4], [1, 3, 2, 1]) => 0\n  convertBase([1, 2, 3, 4], [1, 3, 2, 1]) => 0\n  convertBase([1, 2, 3, 4], [1, 3, 2, 1]) => 0\n  convertBase([1, 2, 3, 4], [1, 3, 2, 1]) => 0\n  convertBase([1, 2, 3, 4], [1, 3, 2, 1]) => 0\n  convertBase([1, 2, 3, 4], [1, 3, 2, 1]) => 0\n  convertBase([1, 2, 3, 4], [1, 3, 2, 1]) => 0\n  convertBase([1, 2, 3, 4], [1, 3, 2, 1]) => 0\n  convertBase([1, 2, 3, 4], [1, 3, 2, 1]) => 0\n  convertBase([1, 2, 3, 4], [1, 3, 2, 1]) => 0\n  convertBase([1, 2, 3, 4], [1, 3, 2, 1]) => 0\n  convertBase([1, 2, 3, 4], [1, 3, 2, 1]) => 0\n  convertBase([1, 2, 3, 4], [1, 3, 2, 1]) => 0\n  convertBase([1, 2, 3, 4], [1, 3, 2, 1]) => 0\n  convertBase([1, 2, 3, 4], [1, 3, 2, 1]) => 0\n  convertBase([1, 2, 3, 4], [1, 3, 2, 1]) => 0\n  convertBase([1, 2, 3, 4], [1, 3, 2, 1]) => 0\n  convertBase([1, 2, 3, 4], [1, 3, 2, 1]) => 0\n  convertBase([1, 2, 3, 4], [1, 3, 2, 1]) => 0\n  convertBase([1, 2, 3, 4], [1, 3, 2, 1]) => 0\n  convertBase([1, 2, 3, 4], [1, 3, 2, 1]) => 0\n  convertBase([1, 2, 3, 4], [1, 3, 2, 1]) => 0\n  convertBase([1, 2, 3, 4], [1, 3, 2, 1]) => 0\n  convertBase([1, 2, 3, 4], [1, 3, 2, 1]) => 0\n  convertBase([1, 2, 3, 4], [1, 3, 2, 1]) => 0\n  convertBase([1, 2, 3, 4], [1, 3, 2, 1]) => 0\n  convertBase([1, 2, 3, 4], [1, 3, 2, 1]) => 0\n  convertBase([1, 2, 3, 4], [1, 3, 2, 1]) => 0\n  convertBase([1, 2, 3, 4], [1, 3, 2, 1]) => 0\n  convertBase([1, 2, 3, 4], [1, 3, 2, 1]) => 0\n  convertBase([1, 2, 3, 4], [1, 3, 2, 1]) => 0\n  convertBase([1, 2, 3, 4], [1, 3, 2, 1]) => 0\n  convertBase([1, 2, 3, 4], [1, 3, 2, 1]) => 0\n  convertBase([1, 2, 3, 4], [1, 3, 2, 1]) => 0\n  convertBase([1, 2, 3, 4], [1, 3, 2, 1]) => 0\n  convertBase([1, 2, 3, 4], [1, 3, 2, 1]) => 0\n  convertBase([1, 2, 3, 4], [1, 3, 2, 1]) => 0\n  convertBase([1, 2, 3, 4], [1, 3, 2, 1]) => 0\n  convertBase([1, 2, 3, 4], [1, 3, 2, 1]) => 0\n  convertBase([1, 2, 3, 4], [1, 3, 2, 1]) => 0\n  convertBase([1, 2, 3, 4], [1, 3, 2, 1]) => 0\n  convertBase([1, 2, 3, 4], [1, 3, 2, 1]) => 0\n  convertBase([1, 2, 3, 4], [1, 3, 2, 1]) => 0\n  convertBase([1, 2, 3, 4], [1, 3, 2, 1]) => 0\n  convertBase([1, 2, 3, 4], [1, 3, 2, 1]) => 0\n  convertBase([1, 2, 3, 4], [1, 3, 2, 1]) => 0\n  convertBase([1, 2, 3, 4], [1, 3, 2, 1]) => 0\n  convertBase([1, 2, 3, 4], [1, 3, 2, 1]) => 0\n  convertBase([1, 2, 3, 4], [1, 3, 2, 1]) => 0\n  convertBase([1, 2, 3, 4], [1, 3, 2, 1]) => 0\n  convertBase([1, 2, 3, 4], [1, 3, 2, 1]) => 0\n  convertBase([1, 2, 3, 4], [1, 3, 2, 1]) => 0\n  convertBase([1, 2, 3, 4], [1, 3, 2, 1]) => 0\n  convertBase([1, 2, 3, 4], [1, 3, 2, 1]) => 0\n  convertBase([1, 2, 3, 4], [1, 3, 2, 1]) => 0\n  convertBase([1, 2, 3, 4], [1, 3, 2, 1]) => 0\n  convertBase([1, 2, 3, 4], [1, 3, 2, 1]) => 0\n  convertBase([1, 2, 3, 4], [1, 3, 2, 1]) => 0\n  convertBase([1, 2, 3, 4], [1, 3, 2, 1]) => 0\n  convertBase([1, 2, 3, 4], [1, 3, 2, 1]) => 0\n  convertBase([1, 2, 3, 4], [1, 3, 2, 1]) => 0\n  convertBase([1, 2, 3, 4], [1, 3, 2, 1]) => 0\n  convertBase([1, 2, 3, 4], [1, 3, 2, 1]) => 0\n  convertBase([1, 2, 3, 4], [1, 3, 2, 1]) => 0\n  convertBase([1, 2, 3, 4], [1, 3, 2, 1]) => 0\n  convertBase([1, 2, 3, 4], [1, 3, 2, 1]) => 0\n  convertBase([1, 2, 3, 4], [1, 3, 2, 1]) => 0\n  convertBase([1, 2, 3, 4], [1, 3, 2, 1]) => 0\n  convertBase([1, 2, 3, 4], [1, 3, 2, 1]) => 0\n  convertBase([1, 2, 3, 4], [1, 3, 2, 1]) => 0\n  convertBase([1, 2, 3, 4], [1, 3, 2, 1]) => 0\n  convertBase([1, 2, 3, 4], [1, 3, 2, 1]) => 0\n  convertBase([1, 2, 3, 4], [1, 3, 2, 1]) => 0\n  convertBase([1, 2, 3, 4], [1, 3, 2, 1]) => 0\n  convertBase([1, 2, 3, 4], [1, 3, 2, 1]) => 0\n  convertBase([1, 2, 3, 4], [1, 3, 2, 1]) => 0\n  convertBase([1, 2, 3, 4], [1, 3, 2, 1]) => 0\n  convertBase([1, 2, 3, 4], [1, 3, 2, 1]) => 0\n  convertBase([1, 2, 3, 4], [1, 3, 2, 1]) => 0\n  convertBase([1, 2, 3, 4], [1, 3, 2, 1]) => 0\n  convertBase([1, 2, 3, 4], [1, 3, 2, 1]) => 0\n  convertBase([1, 2, 3, 4], [1, 3, 2, 1]) => 0\n  convertBase([1, 2, 3, 4], [1, 3, 2, 1]) => 0\n  convertBase([1, 2, 3, 4], [1, 3, 2, 1]) => 0\n  convertBase([1, 2, 3, 4], [1, 3, 2, 1]) => 0\n  convertBase([1, 2, 3, 4], [1, 3, 2, 1]) => 0\n  convertBase([1, 2, 3, 4], [1, 3, 2, 1]) => 0\n  convertBase([1, 2, 3, 4], [1, "}
{"task_id": "JavaScript/111", "prompt": "/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\n\nconst histogram = (test) => {\n  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n", "canonical_solution": "  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "partial": "/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  # print('@@this is the line to split##')\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "gc": "<|endoftext|>/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\n\nconst histogram = (test) => {\n  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  return d\n}\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\n\nconst histogram = (test) => {\n  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  return d\n}\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\n\nconst histogram = (test) => {\n  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  return d\n}\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\n\nconst histogram = (test) => {\n  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  return d\n}\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\n\nconst histogram = (test) => {\n  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  return d\n}\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\n\nconst histogram = (test) => {\n  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  return d\n}\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\n\nconst histogram = (test) => {\n  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  return d\n}\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\n\nconst histogram = (test) => {\n  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  return d\n}\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\n\nconst histogram = (test) => {\n  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  return "}
{"task_id": "JavaScript/112", "prompt": "/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\n\nconst reverseDelete = (s, c) => {\n  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n", "canonical_solution": "  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "partial": "/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n    # print('@@this is the line to split##')\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "gc": "<|endoftext|>/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\n\nconst reverseDelete = (s, c) => {\n  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  return (t,true)\n}\n\n/*Task\n  You are given a string s and an integer n, you have to delete all the characters in s that is equal to n\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", n = 2, the result should be ('bcd',false)\n  For s = \"abcdef\", n = 2, the result should be ('acdef',false)\n  For s = \"abcdedcba\", n = 2, the result should be ('cdedc',true)\n  */\n\nconst reverseDeleteN = (s, n) => {\n  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < n.length; j++) {\n      if (s[i] == n[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  return (t,true)\n}\n\n/*Task\n  You are given a string s and an integer n, you have to delete all the characters in s that is equal to n\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", n = 2, the result should be ('bcd',false)\n  For s = \"abcdef\", n = 2, the result should be ('acdef',false)\n  For s = \"abcdedcba\", n = 2, the result should be ('cdedc',true)\n  */\n\nconst reverseDeleteN2 = (s,n) => {\n  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < n.length; j++) {\n      if (s[i] == n[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  return (t,true)\n}\n\n/*Task\n  You are given a string s and an integer n, you have to delete all the characters in s that is equal to n\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", n = 2, the result should be ('bcd',false)\n  For s = \"abcdef\", n = 2, the result should be ('acdef',false)\n  For s = \"abcdedcba\", n = 2, the result should be ('cdedc',true)\n  */\n\nconst reverseDeleteN3 = (s,n) => {\n  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < n.length; j++) {\n      if (s[i] == n[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  return (t,true)\n}\n\n/*Task\n  You are given a string s and an integer n, you have to delete all the characters in s that is equal to n\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", n = 2, the result should be ('bcd',false)\n  For s = \"abcdef\", n = 2, the result should be ('acdef',false)\n  For s = \"abcdedcba\", n = 2, the result should be ('cdedc',true)\n  */\n\nconst reverseDeleteN4 = (s,n) => {\n  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < n.length; j++) {\n      if (s[i] == n[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  return (t,true)\n}\n\n/*Task\n  You are given a string s and an integer n, you have to delete all the characters in s that is equal to n\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", n = 2, the result should be ('bcd',false)\n  For s = \"abcdef\", n = 2, the result should be ('acdef',false)\n  For s = \"abcdedcba\", n = 2, the result should be ('cdedc',true)\n  */\n\nconst reverseDeleteN5 = (s,n) => {\n  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < n.length; j++) {\n      if (s[i] == n[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  return (t,true)\n}\n\n/*Task\n  You are given a string s and an integer n, you have to delete all the characters in s that is equal to n\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", n = 2, the result should be ('bcd',false)\n  For s = \"abcdef\", n = 2, the result should be ('acdef',false)\n  For s = \"abcdedcba\", n = 2, the result should be ('cdedc',true)\n  */\n\nconst reverseDeleteN6 = (s,n) => {\n  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < n.length; j++) {\n      if (s[i] == n[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  return (t,true)\n}\n\n/*Task\n  You are given a string s and an integer n, you have to delete all the characters in s that is equal to n\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", n = 2, the result should be ('bcd',false)\n  For s = \"abcdef\", n = 2, the result should be ('acdef',false)\n  For s = \"abcdedcba\", n = 2, the result should be ('cdedc',true)\n  */\n\nconst reverseDeleteN7 = (s,n) => {\n  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < n.length; j++) {\n      if (s[i] == n[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  return (t,true)\n}\n\n/*Task\n  You are given a string s and an integer n, you have to delete all the characters in s that is equal to n\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", n = 2, the result should be ('bcd',false)\n  For s = \"abcdef\", n = 2, the result should be ('"}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\n\nconst oddCount = (lst) => {\n  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n", "canonical_solution": "    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "partial": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n      # print('@@this is the line to split##')\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "gc": "<|endoftext|>/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\n\nconst oddCount = (lst) => {\n  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    d.push(p)\n  }\n  return d\n}\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of even elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of even digits in the i'th string of the input.\n\n  >>> evenCount(['1234567'])\n  [\"the number of even elements 4n the str4ng 4 of the 4nput.\"]\n  >>> evenCount(['3',\"11111111\"])\n  [\"the number of even elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even elements 8n the str8ng 8 of the 8nput.\"]\n  */\n\nconst evenCount = (lst) => {\n  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 0) { p++ }\n    }\n    d.push(p)\n  }\n  return d\n}\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of pairs of digits in\n  the string i of the input.\" where all the i's should be replaced by the number\n  of pairs of digits in the i'th string of the input.\n\n  >>> pairCount(['1234567'])\n  [\"the number of pairs of digits 4n the str4ng 4 of the 4nput.\"]\n  >>> pairCount(['3',\"11111111\"])\n  [\"the number of pairs of digits 1n the str1ng 1 of the 1nput.\",\n   \"the number of pairs of digits 8n the str8ng 8 of the 8nput.\"]\n  */\n\nconst pairCount = (lst) => {\n  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 0) { p++ }\n    }\n    d.push(p)\n  }\n  return d\n}\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of triples of digits in\n  the string i of the input.\" where all the i's should be replaced by the number\n  of triples of digits in the i'th string of the input.\n\n  >>> tripleCount(['1234567'])\n  [\"the number of triples of digits 4n the str4ng 4 of the 4nput.\"]\n  >>> tripleCount(['3',\"11111111\"])\n  [\"the number of triples of digits 1n the str1ng 1 of the 1nput.\",\n   \"the number of triples of digits 8n the str8ng 8 of the 8nput.\"]\n  */\n\nconst tripleCount = (lst) => {\n  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 0) { p++ }\n    }\n    d.push(p)\n  }\n  return d\n}\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of quads of digits in\n  the string i of the input.\" where all the i's should be replaced by the number\n  of quads of digits in the i'th string of the input.\n\n  >>> quadCount(['1234567'])\n  [\"the number of quads of digits 4n the str4ng 4 of the 4nput.\"]\n  >>> quadCount(['3',\"11111111\"])\n  [\"the number of quads of digits 1n the str1ng 1 of the 1nput.\",\n   \"the number of quads of digits 8n the str8ng 8 of the 8nput.\"]\n  */\n\nconst quadCount = (lst) => {\n  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 0) { p++ }\n    }\n    d.push(p)\n  }\n  return d\n}\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of quats of digits in\n  the string i of the input.\" where all the i's should be replaced by the number\n  of quats of digits in the i'th string of the input.\n\n  >>> quatCount(['1234567'])\n  [\"the number of quats of digits 4n the str4ng 4 of the 4nput.\"]\n  >>> quatCount(['3',\"11111111\"])\n  [\"the number of quats of digits 1n the str1ng 1 of the 1nput.\",\n   \"the number of quats of digits 8n the str8ng 8 of the 8nput.\"]\n  */\n\nconst quatCount = (lst) => {\n  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 0) { p++ }\n    }\n    d.push(p)\n  }\n  return d\n}\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of quins of digits in\n  the string i of the input.\" where all the i's should be replaced by the number\n  of quins of digits in the i'th string of the input.\n\n  >>> quinCount(['1234567'])\n  [\"the number of quins of digits 4n the str4ng 4 of the 4nput.\"]\n  >>> quinCount(['3',\"11111111\"])\n  [\"the number of quins of digits 1n the str1ng 1 of the 1nput.\",\n   \"the number of quins of digits 8n the str8ng 8 of the 8nput.\"]\n  */\n\nconst quinCount = (lst) => {\n  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 0) { p++ }\n    }\n    d.push(p)\n  }\n  return d\n}\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of nicks of digits in\n  the string i of the input.\" where all the i's should be replaced by the number\n  of nicks of digits in the i'th string of the input.\n\n  >>> nickCount(['1234567'])\n  [\"the number of nicks of digits 4n the str4ng 4 of the 4nput.\"]\n  >>> nickCount(['3',\"11111111\"])\n  [\"the number of nicks of digits 1n the str1ng 1 of the 1nput.\",\n   \"the number of nicks of digits 8n the str8ng 8 of the 8nput.\"]\n  */\n\nconst nickCount = (lst) => {"}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\n\nconst minSubArraySum = (nums) => {\n  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n", "canonical_solution": "      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "partial": "/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n        # print('@@this is the line to split##')\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "gc": "<|endoftext|>/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\n\nconst minSubArraySum = (nums) => {\n  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) {\n        min = s\n      }\n    }\n  }\n  return min\n}\n\nmodule.exports = minSubArraySum\n\n},{}],9:[function(require,module,exports){\nconst minSubArraySum = require('./minSubArraySum')\n\nconst minSubArraySumInt = (nums) => {\n  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) {\n        min = s\n      }\n    }\n  }\n  return min\n}\n\nmodule.exports = minSubArraySumInt\n\n},{\"./minSubArraySum\":8}],10:[function(require,module,exports){\nconst minSubArraySum = require('./minSubArraySum')\n\nconst minSubArraySumInt = (nums) => {\n  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) {\n        min = s\n      }\n    }\n  }\n  return min\n}\n\nmodule.exports = minSubArraySumInt\n\n},{\"./minSubArraySum\":8}],11:[function(require,module,exports){\nconst minSubArraySum = require('./minSubArraySum')\n\nconst minSubArraySumInt = (nums) => {\n  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) {\n        min = s\n      }\n    }\n  }\n  return min\n}\n\nmodule.exports = minSubArraySumInt\n\n},{\"./minSubArraySum\":8}],12:[function(require,module,exports){\nconst minSubArraySum = require('./minSubArraySum')\n\nconst minSubArraySumInt = (nums) => {\n  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) {\n        min = s\n      }\n    }\n  }\n  return min\n}\n\nmodule.exports = minSubArraySumInt\n\n},{\"./minSubArraySum\":8}],13:[function(require,module,exports){\nconst minSubArraySum = require('./minSubArraySum')\n\nconst minSubArraySumInt = (nums) => {\n  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) {\n        min = s\n      }\n    }\n  }\n  return min\n}\n\nmodule.exports = minSubArraySumInt\n\n},{\"./minSubArraySum\":8}],14:[function(require,module,exports){\nconst minSubArraySum = require('./minSubArraySum')\n\nconst minSubArraySumInt = (nums) => {\n  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) {\n        min = s\n      }\n    }\n  }\n  return min\n}\n\nmodule.exports = minSubArraySumInt\n\n},{\"./minSubArraySum\":8}],15:[function(require,module,exports){\nconst minSubArraySum = require('./minSubArraySum')\n\nconst minSubArraySumInt = (nums) => {\n  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) {\n        min = s\n      }\n    }\n  }\n  return min\n}\n\nmodule.exports = minSubArraySumInt\n\n},{\"./minSubArraySum\":8}],16:[function(require,module,exports){\nconst minSubArraySum = require('./minSubArraySum')\n\nconst minSubArraySumInt = (nums) => {\n  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) {\n        min = s\n      }\n    }\n  }\n  return min\n}\n\nmodule.exports = minSubArraySumInt\n\n},{\"./minSubArraySum\":8}],17:[function(require,module,exports){\nconst minSubArraySum = require('./minSubArraySum')\n\nconst minSubArraySumInt = (nums) => {\n  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) {\n        min = s\n      }\n    }\n  }\n  return min\n}\n\nmodule.exports = minSubArraySumInt\n\n},{\"./minSubArraySum\":8}],18:[function(require,module,exports){\nconst minSubArraySum = require('./minSubArraySum')\n\nconst minSubArraySumInt = (nums) => {\n  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) {\n        min = s\n      }\n    }\n  }\n  return min\n}\n\nmodule.exports = minSubArraySumInt\n\n},{\"./minSubArraySum\":8}],19:[function(require,module,exports){\nconst minSubArraySum = require('./minSubArraySum')\n\nconst minSubArraySumInt = (nums) => {\n  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) {\n        min = s\n      }\n    }\n  }\n  return min\n}\n\nmodule.exports = minSubArraySumInt\n\n},{\"./minSubArraySum\":8}],20:[function(require,module,exports){\nconst minSubArraySum = require('./minSubArraySum')\n\nconst minSubArraySumInt = (nums) => {\n  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) {\n        min = s\n      }\n    }\n  }\n  return min\n}\n\nmodule.exports = minSubArraySumInt\n\n},{\"./minSubArraySum\":8}],21:[function(require,module,exports){\nconst minSubArraySum = require('./minSubArraySum')\n\nconst minSubArraySumInt = (nums) => {\n"}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\n\nconst maxFill = (grid, capacity) => {\n  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n", "canonical_solution": "    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "partial": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    # print('@@this is the line to split##')\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "gc": "<|endoftext|>/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\n\nconst maxFill = (grid, capacity) => {\n  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    if (m > p) { p = m }\n  }\n  return p * capacity\n}\n\nconst fillBucket = (grid, bucket_capacity) => {\n  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    if (m > p) { p = m }\n  }\n  return p * bucket_capacity\n}\n\nconst fillBuckets = (grid, bucket_capacity) => {\n  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    if (m > p) { p = m }\n  }\n  return p * bucket_capacity\n}\n\nconst fillBucketsFast = (grid, bucket_capacity) => {\n  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    if (m > p) { p = m }\n  }\n  return p * bucket_capacity\n}\n\nconst fillBucketsSlow = (grid, bucket_capacity) => {\n  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    if (m > p) { p = m }\n  }\n  return p * bucket_capacity\n}\n\nconst fillBucketsSlowFast = (grid, bucket_capacity) => {\n  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    if (m > p) { p = m }\n  }\n  return p * bucket_capacity\n}\n\nconst fillBucketsSlowFastSlow = (grid, bucket_capacity) => {\n  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    if (m > p) { p = m }\n  }\n  return p * bucket_capacity\n}\n\nconst fillBucketsSlowFastSlowFast = (grid, bucket_capacity) => {\n  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    if (m > p) { p = m }\n  }\n  return p * bucket_capacity\n}\n\nconst fillBucketsSlowFastSlowFastSlowFast = (grid, bucket_capacity) => {\n  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    if (m > p) { p = m }\n  }\n  return p * bucket_capacity\n}\n\nconst fillBucketsSlowFastSlowFastSlowFastSlowFast = (grid, bucket_capacity) => {\n  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    if (m > p) { p = m }\n  }\n  return p * bucket_capacity\n}\n\nconst fillBucketsSlowFastSlowFastSlowFastSlowFastSlowFast = (grid, bucket_capacity) => {\n  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    if (m > p) { p = m }\n  }\n  return p * bucket_capacity\n}\n\nconst fillBucketsSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFast = (grid, bucket_capacity) => {\n  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    if (m > p) { p = m }\n  }\n  return p * bucket_capacity\n}\n\nconst fillBucketsSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlow"}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\n\nconst sortArray = (arr) => {\n  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n", "canonical_solution": "      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "partial": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n        # print('@@this is the line to split##')\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "gc": "<|endoftext|>/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\n\nconst sortArray = (arr) => {\n  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f1 > f2) {\n        p = p.slice(ind, k)\n        ind = k\n      } else if (f1 < f2) {\n        p = p.slice(k, ind)\n        ind = ind\n      }\n    }\n  }\n  return p\n}\n\n/*\n  Given an array of non-negative integers, return an array of the same\n  length with all ones in their binary representation sorted in ascending\n  order.\n\n  It must be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\n\nconst sortArrayInPlace = (arr) => {\n  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f1 > f2) {\n        p = p.slice(ind, k)\n        ind = k\n      } else if (f1 < f2) {\n        p = p.slice(k, ind)\n        ind = ind\n      }\n    }\n  }\n  return p\n}\n\n/*\n  Given an array of non-negative integers, return an array of the same\n  length with all ones in their binary representation sorted in ascending\n  order.\n\n  It must be implemented like this:\n  >>> sortArrayInPlace([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArrayInPlace([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArrayInPlace([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\n\nconst sortArrayInPlaceInPlace = (arr) => {\n  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f1 > f2) {\n        p = p.slice(ind, k)\n        ind = k\n      } else if (f1 < f2) {\n        p = p.slice(k, ind)\n        ind = ind\n      }\n    }\n  }\n  return p\n}\n\n/*\n  Given an array of non-negative integers, return an array of the same\n  length with all ones in their binary representation sorted in ascending\n  order.\n\n  It must be implemented like this:\n  >>> sortArrayInPlaceInPlace([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArrayInPlaceInPlace([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArrayInPlaceInPlace([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\n\nconst sortArrayInPlaceInPlaceInPlace = (arr) => {\n  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f1 > f2) {\n        p = p.slice(ind, k)\n        ind = k\n      } else if (f1 < f2) {\n        p = p.slice(k, ind)\n        ind = ind\n      }\n    }\n  }\n  return p\n}\n\n/*\n  Given an array of non-negative integers, return an array of the same\n  length with all ones in their binary representation sorted in ascending\n  order.\n\n  It must be implemented like this:\n  >>> sortArrayInPlaceInPlaceInPlace([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArrayInPlaceInPlaceInPlace([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArrayInPlaceInPlaceInPlace([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\n\nconst sortArrayInPlaceInPlaceInPlaceInPlace = (arr) => {\n  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f1 > f2) {\n        p = p.slice(ind, k)\n        ind = k\n      } else if (f1 < f2) {\n        p = p.slice(k, ind)\n        ind = ind\n      }\n    }\n  }\n  return p\n}\n\n/*\n  Given an array of non-negative integers, return an array of the same\n  length with all ones in their binary representation sorted in ascending\n  order.\n\n  It must be implemented like this:\n  >>> sortArrayInPlaceInPlaceInPlaceInPlace([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArrayInPlaceInPlaceInPlaceInPlace([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArrayInPlaceInPlaceInPlaceInPlace([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\n\nconst sortArrayInPlaceInPlaceInPlaceInPlace = (arr) => {\n  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f1 > f2) {\n        p = p.slice(ind, k)\n        ind = k\n      } else if (f1 < f2) {\n        p = p."}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\n\nconst selectWords = (s, n) => {\n  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n", "canonical_solution": "        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "partial": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        # print('@@this is the line to split##')\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "gc": "<|endoftext|>/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\n\nconst selectWords = (s, n) => {\n  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j]!= 'a' && t[i][j]!= 'e' && t[i][j]!= 'i' && t[i][j]!= 'o' && t[i][j]!= 'u' && t[i][j]!= 'A' &&\n        t[i][j]!= 'E' && t[i][j]!= 'I' && t[i][j]!= 'O' && t[i][j]!= 'U') {\n        l += 1\n      }\n    }\n    if (l == n) {\n      k.push(t[i])\n    }\n  }\n  return k\n}\n\n/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that do not contain \n  exactly n consonants, in order these words do not appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\n\nconst selectWords2 = (s, n) => {\n  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j]!= 'a' && t[i][j]!= 'e' && t[i][j]!= 'i' && t[i][j]!= 'o' && t[i][j]!= 'u' && t[i][j]!= 'A' &&\n        t[i][j]!= 'E' && t[i][j]!= 'I' && t[i][j]!= 'O' && t[i][j]!= 'U') {\n        l += 1\n      }\n    }\n    if (l == n) {\n      k.push(t[i])\n    }\n  }\n  return k\n}\n\n/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that do not contain \n  exactly n consonants, in order these words do not appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selectWords2(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords2(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\n  selectWords2(\"simple white space\", 2) ==> []\n  selectWords2(\"Hello world\", 4) ==> [\"world\"]\n  selectWords2(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\n\nconst selectWords3 = (s, n) => {\n  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j]!= 'a' && t[i][j]!= 'e' && t[i][j]!= 'i' && t[i][j]!= 'o' && t[i][j]!= 'u' && t[i][j]!= 'A' &&\n        t[i][j]!= 'E' && t[i][j]!= 'I' && t[i][j]!= 'O' && t[i][j]!= 'U') {\n        l += 1\n      }\n    }\n    if (l == n) {\n      k.push(t[i])\n    }\n  }\n  return k\n}\n\n/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that do not contain \n  exactly n consonants, in order these words do not appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selectWords3(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords3(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\n  selectWords3(\"simple white space\", 2) ==> []\n  selectWords3(\"Hello world\", 4) ==> [\"world\"]\n  selectWords3(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\n\nconst selectWords4 = (s, n) => {\n  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j]!= 'a' && t[i][j]!= 'e' && t[i][j]!= 'i' && t[i][j]!= 'o' && t[i][j]!= 'u' && t[i][j]!= 'A' &&\n        t[i][j]!= 'E' && t[i][j]!= 'I' && t[i][j]!= 'O' && t[i][j]!= 'U') {\n        l += 1\n      }\n    }\n    if (l == n) {\n      k.push(t[i])\n    }\n  }\n  return k\n}\n\n/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that do not contain \n  exactly n consonants, in order these words do not appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selectWords4(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords4(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\n  selectWords4(\"simple white space\", 2) ==> []\n  selectWords4(\"Hello world\", 4) ==> [\"world\"]\n  selectWords4(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\n\nconst selectWords5 = (s, n) => {\n  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j]!= 'a' && t[i][j]!= 'e' && t[i][j]!= 'i' && t[i][j]!= 'o' && t[i][j]!= 'u' && t[i][j]!= 'A' &&\n        t[i][j]!= 'E' && t[i][j]!= 'I' && t[i][j]!= 'O' && t[i][j]!= 'U') {\n        l += 1\n      }\n    }\n    if (l == n) {\n      k.push(t[i])\n    }\n  }\n  return k\n}\n\n/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that do not contain \n  exactly n consonants, in order these words do not appear in the string s.\n  If the string s is empty then the function should return an empty list."}
{"task_id": "JavaScript/118", "prompt": "/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\n\nconst getClosestVowel = (word) => {\n  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n", "canonical_solution": "      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "partial": "/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      # print('@@this is the line to split##')\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "gc": "<|endoftext|>/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\n\nconst getClosestVowel = (word) => {\n  for (let i = word.length - 2; i > 0; i--) {\n    if (\n     !(word[i]!= 'a' && word[i]!= 'e' && word[i]!= 'i' && word[i]!= 'o' && word[i]!= 'u' && word[i]!= 'A' &&\n        word[i]!= 'U' && word[i]!= 'O' && word[i]!= 'I' && word[i]!= 'E')\n      &&\n      (word[i + 1]!= 'a' && word[i + 1]!= 'e' && word[i + 1]!= 'i' && word[i + 1]!= 'o' && word[i + 1]!= 'u' && word[i + 1]!= 'A' &&\n        word[i + 1]!= 'U' && word[i + 1]!= 'O' && word[i + 1]!= 'I' && word[i + 1]!= 'E')\n      &&\n      (word[i + 2]!= 'a' && word[i + 2]!= 'e' && word[i + 2]!= 'i' && word[i + 2]!= 'o' && word[i + 2]!= 'u' && word[i + 2]!= 'A' &&\n        word[i + 2]!= 'U' && word[i + 2]!= 'O' && word[i + 2]!= 'I' && word[i + 2]!= 'E')\n      &&\n      (word[i + 3]!= 'a' && word[i + 3]!= 'e' && word[i + 3]!= 'i' && word[i + 3]!= 'o' && word[i + 3]!= 'u' && word[i + 3]!= 'A' &&\n        word[i + 3]!= 'U' && word[i + 3]!= 'O' && word[i + 3]!= 'I' && word[i + 3]!= 'E')\n      &&\n      (word[i + 4]!= 'a' && word[i + 4]!= 'e' && word[i + 4]!= 'i' && word[i + 4]!= 'o' && word[i + 4]!= 'u' && word[i + 4]!= 'A' &&\n        word[i + 4]!= 'U' && word[i + 4]!= 'O' && word[i + 4]!= 'I' && word[i + 4]!= 'E')\n      &&\n      (word[i + 5]!= 'a' && word[i + 5]!= 'e' && word[i + 5]!= 'i' && word[i + 5]!= 'o' && word[i + 5]!= 'u' && word[i + 5]!= 'A' &&\n        word[i + 5]!= 'U' && word[i + 5]!= 'O' && word[i + 5]!= 'I' && word[i + 5]!= 'E')\n      &&\n      (word[i + 6]!= 'a' && word[i + 6]!= 'e' && word[i + 6]!= 'i' && word[i + 6]!= 'o' && word[i + 6]!= 'u' && word[i + 6]!= 'A' &&\n        word[i + 6]!= 'U' && word[i + 6]!= 'O' && word[i + 6]!= 'I' && word[i + 6]!= 'E')\n      &&\n      (word[i + 7]!= 'a' && word[i + 7]!= 'e' && word[i + 7]!= 'i' && word[i + 7]!= 'o' && word[i + 7]!= 'u' && word[i + 7]!= 'A' &&\n        word[i + 7]!= 'U' && word[i + 7]!= 'O' && word[i + 7]!= 'I' && word[i + 7]!= 'E')\n      &&\n      (word[i + 8]!= 'a' && word[i + 8]!= 'e' && word[i + 8]!= 'i' && word[i + 8]!= 'o' && word[i + 8]!= 'u' && word[i + 8]!= 'A' &&\n        word[i + 8]!= 'U' && word[i + 8]!= 'O' && word[i + 8]!= 'I' && word[i + 8]!= 'E')\n      &&\n      (word[i + 9]!= 'a' && word[i + 9]!= 'e' && word[i + 9]!= 'i' && word[i + 9]!= 'o' && word[i + 9]!= 'u' && word[i + 9]!= 'A' &&\n        word[i + 9]!= 'U' && word[i + 9]!= 'O' && word[i + 9]!= 'I' && word[i + 9]!= 'E')\n      &&\n      (word[i + 10]!= 'a' && word[i + 10]!= 'e' && word[i + 10]!= 'i' && word[i + 10]!= 'o' && word[i + 10]!= 'u' && word[i + 10]!= 'A' &&\n        word[i + 10]!= 'U' && word[i + 10]!= 'O' && word[i + 10]!= 'I' && word[i + 10]!= 'E')\n      &&\n      (word[i + 11]!= 'a' && word[i + 11]!= 'e' && word[i + 11]!= 'i' && word[i + 11]!= 'o' && word[i + 11]!= 'u' && word[i + 11]!= 'A' &&\n        word[i + 11]!= 'U' && word[i + 11]!= 'O' && word[i + 11]!= 'I' && word[i + 11]!= 'E')\n      &&\n      (word[i + 12]!= 'a' && word[i + 12]!= 'e' && word[i + 12]!= 'i' && word[i + 12]!= 'o' && word[i + 12]!= 'u' && word[i + 12]!= 'A' &&\n        word[i + 12]!= 'U' && word[i + 12]!= 'O' && word[i + 12]!= 'I' && word[i + 12]!= 'E')\n      &&\n      (word[i + 13]!= 'a' && word[i + 13]!= 'e' && word[i + 13]!= 'i' && word[i + 13]!= 'o' && word[i + 13]!= 'u' && word[i + 13]!= 'A' &&\n        word[i + 13]!= 'U' && word[i + 13]!= 'O' && word[i + 13]!= 'I' && word[i + 13]!= 'E')\n      &&\n      (word[i + 14]!= 'a' && word[i + 14]!= 'e' && word[i + 14]!= 'i' && word[i + 14]!= 'o' && word[i + 14]!= 'u' && word[i + 14]!= 'A' &&\n        word[i + 14]!= 'U' && word[i + 14]!= 'O' && word[i + 14]!= 'I' && word[i + 14]!= 'E')\n      &&\n      (word[i + 15]!= 'a' && word[i + 15]!= 'e' && word[i + 15]!= 'i' && word[i + 15]!= 'o' && word[i + 15]!= 'u' && word[i + 15]!= 'A' &&\n        word[i + 15]!= 'U' && word[i + 15]!= 'O' && word[i + 15]!= 'I' && word[i + 15]!= 'E')\n      &&\n      (word[i + 16]!= 'a' && word[i + 16]!= 'e' && word[i + 16]!= 'i' && word[i + 16]!= 'o' && word[i + 16]!= 'u' && word[i + 16]!= 'A' &&\n        word[i + 16]!= 'U' && word[i + 16]!= 'O' && word[i + 16]!= 'I' && word[i + 16]!= 'E')\n      &&\n      (word[i + 17]!= 'a' && word[i + 17]!= 'e' && word[i + 17]!= 'i' && word[i + 17]!= 'o' && word[i + 17]!= 'u' && word[i + 17]!= 'A' &&\n        word[i + 17]!= 'U' && word[i + 17]!= 'O' && word[i + 17]!= 'I' && word[i + 17]!= 'E')\n      &&\n      (word[i + 18]!= 'a' && word[i + 18]!= 'e' && word[i + 18]!= 'i' && word[i + 18]!= '"}
{"task_id": "JavaScript/119", "prompt": "/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\n\nconst matchParens = (lst) => {\n  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n", "canonical_solution": "  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "partial": "/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  # print('@@this is the line to split##')\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "gc": "<|endoftext|>/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\n\nconst matchParens = (lst) => {\n  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'No' }\n  return 'No'\n}\n\n/* You are given a string S consisting of N characters and a number K. Your task is to find\n  the minimum number of moves to make S valid in such a way that no two adjacent characters\n  in S can be moved backwards or forwards.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  makeValid(['ab', 'cd', 'ef'], 3) == 'Yes'\n  makeValid(['ab', 'cd', 'ef'], 4) == 'No'\n  makeValid(['ab', 'cd', 'ef'], 5) == 'No'\n  */\n\nconst makeValid = (str, K) => {\n  let moves = 0\n  let movesK = 0\n  let movesKK = 0\n  let movesKKK = 0\n  let movesKKKK = 0\n  let movesKKKKK = 0\n  let movesKKKKKK = 0\n  let movesKKKKKKK = 0\n  let movesKKKKKKKK = 0\n  let movesKKKKKKKKKK = 0\n  let movesKKKKKKKKKKK = 0\n  let movesKKKKKKKKKKK = 0\n  let movesKKKKKKKKKKKK = 0\n  let movesKKKKKKKKKKKKKK = 0\n  let movesKKKKKKKKKKKKKKKK = 0\n  let movesKKKKKKKKKKKKKKKK = 0\n  let movesKKKKKKKKKKKKKKKKK = 0\n  let movesKKKKKKKKKKKKKKKKKK = 0\n  let movesKKKKKKKKKKKKKKKKKKKK = 0\n  let movesKKKKKKKKKKKKKKKKKKKKK = 0\n  let movesKKKKKKKKKKKKKKKKKKKKKK = 0\n  let movesKKKKKKKKKKKKKKKKKKKKKK = 0\n  let movesKKKKKKKKKKKKKKKKKKKKKK = 0\n  let movesKKKKKKKKKKKKKKKKKKKKKKK = 0\n  let movesKKKKKKKKKKKKKKKKKKKKKKKK = 0\n  let movesKKKKKKKKKKKKKKKKKKKKKKKK = 0\n  let movesKKKKKKKKKKKKKKKKKKKKKKKK = 0\n  let movesKKKKKKKKKKKKKKKKKKKKKKKK = 0\n  let movesKKKKKKKKKKKKKKKKKKKKKKKK = 0\n  let movesKKKKKKKKKKKKKKKKKKKKKKKK = 0\n  let movesKKKKKKKKKKKKKKKKKKKKKKKK = 0\n  let movesKKKKKKKKKKKKKKKKKKKKKKKK = 0\n  let movesKKKKKKKKKKKKKKKKKKKKKKKKK = 0\n  let movesKKKKKKKKKKKKKKKKKKKKKKKKK = 0\n  let movesKKKKKKKKKKKKKKKKKKKKKKKKKK = 0\n  let movesKKKKKKKKKKKKKKKKKKKKKKKKK = 0\n  let movesKKKKKKKKKKKKKKKKKKKKKKKK = 0\n  let movesKKKKKKKKKKKKKKKKKKKKKKKKK = 0\n  let movesKKKKKKKKKKKKKKKKKKKKKKKKKK = 0\n  let movesKKKKKKKKKKKKKKKKKKKKKKKKKK = 0\n  let movesKKKKKKKKKKKKKKKKKKKKKKKKKKK = 0\n  let movesKKKKKKKKKKKKKKKKKKKKKKKKKKK = 0\n  let movesKKKKKKKKKKKKKKKKKKKKKKKKKKKK = 0\n  let movesKKKKKKKKKKKKKKKKKKKKKKKKKKKK = 0\n  let movesKKKKKKKKKKKKKKKKKKKKKKKKKKKKK = 0\n  let movesKKKKKKKKKKKKKKKKKKKKKKKKKKKKK = 0\n  let movesKKKKKKKKKKKKKKKKKKKKKKKKKKKK = 0\n  let movesKKKKKKKKKKKKKKKK"}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\n\nconst maximum = (arr, k) => {\n  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n", "canonical_solution": "    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "partial": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    # print('@@this is the line to split##')\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "gc": "<|endoftext|>/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\n\nconst maximum = (arr, k) => {\n  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind === j) break\n    p[ind] = p[j]\n  }\n  return p\n}\n\n// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 1))\n// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 2))\n// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 3))\n// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 4))\n// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 5))\n// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 6))\n// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 7))\n// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 8))\n// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 9))\n// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 10))\n// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 11))\n// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 12))\n// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 13))\n// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 14))\n// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 15))\n// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 16))\n// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 17))\n// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 18))\n// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 19))\n// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 20))\n// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 21))\n// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 22))\n// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 23))\n// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 24))\n// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 25))\n// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 26))\n// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 27))\n// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 28))\n// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 29))\n// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 30))\n// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 31))\n// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 32))\n// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 33))\n// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 34))\n// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 35))\n// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 36))\n// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 37))\n// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 38))\n// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 39))\n// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 40))\n// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 41))\n// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 42))\n// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 43))\n// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 44))\n// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 45))\n// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 46))\n// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 47))\n// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 48))\n// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 49))\n// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 50))\n// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 51))\n// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 52))\n// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 53))\n// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 54))\n// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 55))\n// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 56))\n// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 57))\n// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 58))\n// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 59))\n// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 60))\n// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 61))\n// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 62))\n// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 63))\n// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 64))\n// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 65))\n// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 66))\n// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 67))\n// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 68))\n// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 69))\n// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 70))\n// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 71))\n// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 72))\n// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 73))\n// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 74))\n// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 75))\n// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 76))\n// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 77))\n// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 78))\n// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 79))\n// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 80))\n// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 81))\n// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 82))\n// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 83))\n// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 84))\n// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 85))\n// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 86))\n// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 87))\n// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 88))\n// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 89))\n// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 90))\n// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 91))\n// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 92))\n// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 93))\n// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 94))\n// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 95))\n// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 96))\n// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 97))\n// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 98))\n// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 99))\n// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 100))\n// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 101))\n// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 102))\n// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 103))\n// "}
{"task_id": "JavaScript/121", "prompt": "/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\n\nconst solution = (lst) => {\n  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n", "canonical_solution": "    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "partial": "/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n      # print('@@this is the line to split##')\n    }\n  }\n  return p\n}\n\n", "gc": "<|endoftext|>/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\n\nconst solution = (lst) => {\n  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\nmodule.exports = solution\n\n},{}],3:[function(require,module,exports){\n/*\n  Given a non-empty list of integers, return the sum of all of the even elements that are in odd positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\n\nconst solution = (lst) => {\n  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\nmodule.exports = solution\n\n},{}],4:[function(require,module,exports){\n/*\n  Given a non-empty list of integers, return the sum of all of the even elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\n\nconst solution = (lst) => {\n  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\nmodule.exports = solution\n\n},{}],5:[function(require,module,exports){\n/*\n  Given a non-empty list of integers, return the sum of all of the even elements that are in odd positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\n\nconst solution = (lst) => {\n  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\nmodule.exports = solution\n\n},{}],6:[function(require,module,exports){\n/*\n  Given a non-empty list of integers, return the sum of all of the even elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\n\nconst solution = (lst) => {\n  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\nmodule.exports = solution\n\n},{}],7:[function(require,module,exports){\n/*\n  Given a non-empty list of integers, return the sum of all of the even elements that are in odd positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\n\nconst solution = (lst) => {\n  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\nmodule.exports = solution\n\n},{}],8:[function(require,module,exports){\n/*\n  Given a non-empty list of integers, return the sum of all of the even elements that are in odd positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\n\nconst solution = (lst) => {\n  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\nmodule.exports = solution\n\n},{}],9:[function(require,module,exports){\n/*\n  Given a non-empty list of integers, return the sum of all of the even elements that are in odd positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\n\nconst solution = (lst) => {\n  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\nmodule.exports = solution\n\n},{}],10:[function(require,module,exports){\n/*\n  Given a non-empty list of integers, return the sum of all of the even elements that are in odd positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\n\nconst solution = (lst) => {\n  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\nmodule.exports = solution\n\n},{}],11:[function(require,module,exports){\n/*\n  Given a non-empty list of integers, return the sum of all of the even elements that are in odd positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\n\nconst solution = (lst) => {\n  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\nmodule.exports = solution\n\n},{}],12:[function(require,module,exports){\n/*\n  Given a non-empty list of integers, return the sum of all of the even elements that are in odd positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\n\nconst solution = (lst) => {\n  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\nmodule.exports = solution\n\n},{}],13:[function(require,module,exports){\n/*\n  Given a non-empty list of integers, return the sum of all of the even elements that are in odd positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\n\nconst solution = (lst) => {\n  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\nmodule.exports = solution\n\n},{}],14:[function(require,module,exports){\n/*\n  Given a non-empty list of integers, return the sum of all of the even elements that are in odd positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\n\nconst solution = (lst) => {\n  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\nmodule.exports = solution\n\n},{}"}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\n\nconst addElements = (arr, k) => {\n  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n", "canonical_solution": "  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "partial": "/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n    # print('@@this is the line to split##')\n  }\n  return p\n}\n\n", "gc": "<|endoftext|>/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\n\nconst addElements = (arr, k) => {\n  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most three digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 3\n      Output: 24 # sum of 31 + 5 + 7 + 8 + 9\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\n\nconst addElements = (arr, k) => {\n  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most four digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 41 + 5 + 7 + 8 + 9\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\n\nconst addElements = (arr, k) => {\n  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most five digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 5\n      Output: 24 # sum of 51 + 6 + 7 + 8 + 9\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\n\nconst addElements = (arr, k) => {\n  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most six digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 6\n      Output: 24 # sum of 61 + 7 + 8 + 9\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\n\nconst addElements = (arr, k) => {\n  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most seven digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 7\n      Output: 24 # sum of 71 + 8 + 9\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\n\nconst addElements = (arr, k) => {\n  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most eight digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 8\n      Output: 24 # sum of 81 + 9 + 11 + 12 + 13 + 14 + 15 + 16 + 17 + 18 + 19 + 20 + 21\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\n\nconst addElements = (arr, k) => {\n  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most nine digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 9\n      Output: 24 # sum of 91 + 10 + 11 + 12 + 13 + 14 + 15 + 16 + 17 + 18 + 19 + 20 + 21\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\n\nconst addElements = (arr, k) => {\n  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most ten digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 10\n      Output: 24 # sum of 101 + 11 + 12 + 13 + 14 + 15 + 16 + 17 + 18 + 19 + 20 + 21\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\n\nconst addElements = (arr, k) => {\n  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most eleven digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 11\n      Output: 24 # sum of 111 + 12 + 13 + 14 + 15 + 16 + 17 + 18 + 19 + 20 + 21\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\n\nconst addElements = (arr, k) => {\n  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most twenty digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 12\n      Output: 24 # sum of 121 + 13 + 14 + 15 + 16 + 17 + 18 + 19 + 20 + 21\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\n\nconst addElements = (arr, k) => {\n  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n/*\n  Given a non-empty array of "}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\n\nconst getOddCollatz = (n) => {\n  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n", "canonical_solution": "  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "partial": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  # print('@@this is the line to split##')\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "gc": "<|endoftext|>/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\n\nconst getOddCollatz = (n) => {\n  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  return p\n}\n\n/*\n  Given a positive integer n, return a sorted list that has the even numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getEvenCollatz(5) returns [1, 5, 3] # The collatz sequence for 5 is [1, 5, 16, 8, 4, 2, 1], so the even numbers are only 1, 5, and 3.\n  */\n\nconst getEvenCollatz = (n) => {\n  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  return p\n}\n\n/*\n  Given a positive integer n, return a sorted list that has the prime numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getPrimeCollatz(5) returns [1, 5, 3] # The collatz sequence for 5 is [1, 5, 16, 8, 4, 2, 1], so the prime numbers are only 1, 5, and 3.\n  */\n\nconst getPrimeCollatz = (n) => {\n  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  return p\n}\n\n/*\n  Given a positive integer n, return a sorted list that has the prime factors in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getPrimeFactors(5) returns [1, 5, 3] # The collatz sequence for 5 is [1, 5, 16, 8, 4, 2, 1], so the prime factors are only 1, 5, and 3.\n  */\n\nconst getPrimeFactors = (n) => {\n  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  return p\n}\n\n/*\n  Given a positive integer n, return a sorted list that has the prime factors in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getPrimeFactors(5) returns [1, 5, 3] # The collatz sequence for 5 is [1, 5, 16, 8, 4, 2, 1], so the prime factors are only 1, 5, and 3.\n  */\n\nconst getPrimeFactorsFast = (n) => {\n  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  return p\n}\n\n/*\n  Given a positive integer n, return a sorted list that has the prime factors in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getPrimeFactorsFast(5) returns [1, 5, 3] # The collatz sequence for 5 is [1, 5, 16, 8, 4, 2, 1], so the prime factors are only 1, 5, and 3.\n  */\n\nconst getPrimeFactorsFast2 = (\n  n\n) => {\n  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {"}
{"task_id": "JavaScript/124", "prompt": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\n\nconst validDate = (date) => {\n  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n", "canonical_solution": "  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "partial": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  # print('@@this is the line to split##')\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "gc": "<|endoftext|>/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\n\nconst validDate = (date) => {\n  let t = date.split(/-/)\n  if (t.length!= 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if (t[1] < 1 || t[1] > 12) { return false }\n  if (t[2] == 1 && t[3] > 30) { return false }\n  if (t[2] < 1 || t[2] > 12) { return false }\n  return true\n}\n\n/*\n  You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\n\nconst validDate = (date) => {\n  let t = date.split(/-/)\n  if (t.length!= 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if (t[1] < 1 || t[1] > 12) { return false }\n  if (t[2] == 1 && t[3] > 30) { return false }\n  if (t[2] < 1 || t[2] > 12) { return false }\n  return true\n}\n\n/*\n  You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\n\nconst validDate = (date) => {\n  let t = date.split(/-/)\n  if (t.length!= 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if (t[1] < 1 || t[1] > 12) { return false }\n  if (t[2] == 1 && t[3] > 30) { return false }\n  if (t[2] < 1 || t[2] > 12) { return false }\n  return true\n}\n\n/*\n  You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\n\nconst validDate = (date) => {\n  let t = date.split(/-/)\n  if (t.length!= 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if (t[1] < 1 || t[1] > 12) { return false }\n  if (t[2] == 1 && t[3] > 30) { return false }\n  if (t[2] < 1 || t[2] > 12) { return false }\n  return true\n}\n\n/*\n  You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\n\nconst validDate = (date) => {\n  let t = date.split(/-/)\n  if (t.length!= 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if (t[1] < 1 || t[1] > 12) { return false }\n  if (t[2] == 1 && t[3] > 30) { return false }\n  if (t[2] < 1 || t[2] > 12) { return false }\n  return true\n}\n\n/*\n  You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n"}
{"task_id": "JavaScript/125", "prompt": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\n\nconst splitWords = (txt) => {\n  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n", "canonical_solution": "      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "partial": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      # print('@@this is the line to split##')\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "gc": "<|endoftext|>/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\n\nconst splitWords = (txt) => {\n  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      let words = []\n      for (let i = 0; i < t.length; i++) {\n        let letter = t[i].toLowerCase()\n        if (letter =='') {\n          p++\n        } else if (letter == ',') {\n          p--\n          if (p === 0) {\n            words.push(t.slice(i, i + 1))\n            break\n          }\n        }\n      }\n      return words\n    }\n  }\n}\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\n\nconst splitWords = (txt) => {\n  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      let words = []\n      for (let i = 0; i < t.length; i++) {\n        let letter = t[i].toLowerCase()\n        if (letter =='') {\n          p++\n        } else if (letter == ',') {\n          p--\n          if (p === 0) {\n            words.push(t.slice(i, i + 1))\n            break\n          }\n        }\n      }\n      return words\n    }\n  }\n}\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\n\nconst splitWords = (txt) => {\n  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      let words = []\n      for (let i = 0; i < t.length; i++) {\n        let letter = t[i].toLowerCase()\n        if (letter =='') {\n          p++\n        } else if (letter == ',') {\n          p--\n          if (p === 0) {\n            words.push(t.slice(i, i + 1))\n            break\n          }\n        }\n      }\n      return words\n    }\n  }\n}\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\n\nconst splitWords = (txt) => {\n  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      let words = []\n      for (let i = 0; i < t.length; i++) {\n        let letter = t[i].toLowerCase()\n        if (letter =='') {\n          p++\n        } else if (letter == ',') {\n          p--\n          if (p === 0) {\n            words.push(t.slice(i, i + 1))\n            break\n          }\n        }\n      }\n      return words\n    }\n  }\n}\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\n\nconst splitWords = (txt) => {\n  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      let words = []\n      for (let i = 0; i < t.length; i++) {\n        let letter = t[i].toLowerCase()\n        if (letter =='') {\n          p++\n        } else if (letter == ',') {\n          p--\n          if (p === 0) {\n            words.push(t.slice(i, i + 1))\n            break\n          }\n        }\n      }\n      return words\n    }\n  }\n}\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\n\nconst splitWords = (txt) => {\n  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      let words = []\n      for (let i = 0; i < t.length; i++) {\n        let letter = t[i].toLowerCase()\n        if (letter =='') {\n          p++\n        } else if (letter == ',') {\n          p--\n          if (p === 0) {\n            words.push(t.slice(i, i + 1))\n            break\n          }\n        }\n      }\n      return words\n    }\n  }\n}\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\n\nconst splitWords = (txt) => {\n  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      let words = []\n      for (let i = 0; i < t.length; i++) {\n        let letter = t[i].toLowerCase()\n        if (letter == "}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\n\nconst isSorted = (lst) => {\n  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n", "canonical_solution": "      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "partial": "/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      # print('@@this is the line to split##')\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "gc": "<|endoftext|>/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\n\nconst isSorted = (lst) => {\n  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n    }\n    pre = lst[i]\n  }\n  return dup <= 1\n}\n\n/* Given a list of numbers, return whether or not they are sorted\n  in descending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ false\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ false\n  */\n\nconst isDescending = (lst) => {\n  if (lst.length == 0) { return false }\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] > pre) { return true }\n    if (lst[i] == pre) {\n      pre = lst[i]\n    }\n  }\n  return pre < 0\n}\n\n/* Given a list of numbers, return whether or not they are sorted\n  in ascending order and in descending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ false\n  */\n\nconst isSortedAndDescending = (lst) => {\n  if (lst.length == 0) { return false }\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] > pre) { return true }\n    if (lst[i] == pre) {\n      pre = lst[i]\n    }\n  }\n  return pre < 0\n}\n\n/* Given a list of numbers, return whether or not they are sorted\n  in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and "}
{"task_id": "JavaScript/127", "prompt": "/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\n\nconst intersection = (interval1, interval2) => {\n  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n", "canonical_solution": "  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "partial": "/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  # print('@@this is the line to split##')\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "gc": "<|endoftext|>/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\n\nconst intersection = (interval1, interval2) => {\n  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len === 0) return \"NO\"\n  if (len === 1) return \"YES\"\n  let isPrime = true\n  for (let i = 2; i < len; i++) {\n    if (lo + i === hi) {\n      isPrime = false\n      break\n    }\n  }\n  return isPrime\n}\n\n/*\n  [input] samples:\n  interval1 = [4, 5]\n  interval2 = [3, 6]\n  interval3 = [2, 7]\n  interval4 = [1, 8]\n  interval5 = [-1, 9]\n  interval6 = [-3, -5]\n  interval7 = [-4, -3]\n  interval8 = [-5, -4]\n  interval9 = [-6, -5]\n  interval10 = [-7, -6]\n  interval11 = [-8, -7]\n  interval12 = [-9, -8]\n  interval13 = [-10, -9]\n  interval14 = [-10, -10]\n  interval15 = [-10, -11]\n  interval16 = [-10, -12]\n  interval17 = [-10, -13]\n  interval18 = [-10, -14]\n  interval19 = [-10, -15]\n  interval20 = [-10, -16]\n  interval21 = [-10, -17]\n  interval22 = [-10, -18]\n  interval23 = [-10, -19]\n  interval24 = [-10, -20]\n  interval25 = [-10, -21]\n  interval26 = [-10, -22]\n  interval27 = [-10, -23]\n  interval28 = [-10, -24]\n  interval29 = [-10, -25]\n  interval30 = [-10, -26]\n  interval31 = [-10, -27]\n  interval32 = [-10, -28]\n  interval33 = [-10, -29]\n  interval34 = [-10, -30]\n  interval35 = [-10, -31]\n  interval36 = [-10, -32]\n  interval37 = [-10, -33]\n  interval38 = [-10, -34]\n  interval39 = [-10, -35]\n  interval40 = [-10, -36]\n  interval41 = [-10, -37]\n  interval42 = [-10, -38]\n  interval43 = [-10, -39]\n  interval44 = [-10, -40]\n  interval45 = [-10, -41]\n  interval46 = [-10, -42]\n  interval47 = [-10, -43]\n  interval48 = [-10, -44]\n  interval49 = [-10, -45]\n  interval50 = [-10, -46]\n  interval51 = [-10, -47]\n  interval52 = [-10, -48]\n  interval53 = [-10, -49]\n  interval54 = [-10, -50]\n  interval55 = [-10, -51]\n  interval56 = [-10, -52]\n  interval57 = [-10, -53]\n  interval58 = [-10, -54]\n  interval59 = [-10, -55]\n  interval60 = [-10, -56]\n  interval61 = [-10, -57]\n  interval62 = [-10, -58]\n  interval63 = [-10, -59]\n  interval64 = [-10, -60]\n  interval65 = [-10, -61]\n  interval66 = [-10, -62]\n  interval67 = [-10, -63]\n  interval68 = [-10, -64]\n  interval69 = [-10, -65]\n  interval70 = [-10, -66]\n  interval71 = [-10, -67]\n  interval72 = [-10, -68]\n  interval73 = [-10, -69]\n  interval74 = [-10, -70]\n  interval75 = [-10, -71]\n  interval76 = [-10, -72]\n  interval77 = [-10, -73]\n  interval78 = [-10, -74]\n  interval79 = [-10, -75]\n  interval80 = [-10, -76]\n  interval81 = [-10, -77]\n  interval82 = [-10, -78]\n  interval83 = [-10, -79]\n  interval84 = [-10, -80]\n  interval85 = [-10, -81]\n  interval86 = [-10, -82]\n  interval87 = [-10, -83]\n  interval88 = [-10, -84]\n  interval89 = [-10, -85]\n  interval90 = [-10, -86]\n  interval91 = [-10, -87]\n  interval92 = [-10, -88]\n  interval93 = [-10, -89]\n  interval94 = [-10, -90]\n  interval95 = [-10, -91]\n  interval96 = [-10, -92]\n  interval97 = [-10, -93]\n  interval98 = [-10, -94]\n  interval99 = [-10, -95]\n  interval100 = [-10, -96]\n  interval101 = [-10, -97]\n  interval102 = [-10, -98]\n  interval103 = [-10, -99]\n  interval104 = [-10, -100]\n  interval105 = [-10, -101]\n  interval106 = [-10, -102]\n  interval107 = [-10, -103]\n  interval108 = [-10, -104]\n  interval109 = [-10, -105]\n  interval110 = [-10, -106]\n  interval111 = [-10, -107]\n  interval112 = [-10, -108]\n  interval113 = [-10, -109]\n  interval114 = [-10, -110]\n  interval115 = [-10, -111]\n  interval116 = [-10, -112]\n  interval117 = [-10, -113]\n  interval118 = [-10, -114]\n  interval119 = [-10, -115]\n  interval120 = [-10, -46]\n  interval121 = [-10, -47]\n  interval122 = [-10, -48]\n  interval123 = [-10, -49]\n  interval124 = [-10, -50]\n  interval125 = [-10, -51]\n  interval126 = [-10, -52]\n  interval127 = [-10, -53]\n  interval128 = [-10, -54]\n  interval129 = [-10, -55]\n  "}
{"task_id": "JavaScript/128", "prompt": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\n\nconst prodSigns = (arr) => {\n  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n", "canonical_solution": "    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "partial": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    # print('@@this is the line to split##')\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "gc": "<|endoftext|>/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\n\nconst prodSigns = (arr) => {\n  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] < 0) {\n      n *= -1\n    }\n  }\n  return n * (s * -1)\n}\n\nmodule.exports = prodSigns\n\n},{}],9:[function(require,module,exports){\n'use strict'\n\nconst prodSigns = require('./product-signs')\n\nconst prodSignsArray = (arr) => {\n  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] < 0) {\n      n *= -1\n    }\n  }\n  return n * (s * -1)\n}\n\nmodule.exports = prodSignsArray\n\n},{\"./product-signs\":8}],10:[function(require,module,exports){\n'use strict'\n\nconst prodSigns = require('./product-signs')\n\nconst prodSignsArray = (arr) => {\n  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] < 0) {\n      n *= -1\n    }\n  }\n  return n * (s * -1)\n}\n\nmodule.exports = prodSignsArray\n\n},{\"./product-signs\":8}],11:[function(require,module,exports){\n'use strict'\n\nconst prodSigns = require('./product-signs')\n\nconst prodSignsArray = (arr) => {\n  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] < 0) {\n      n *= -1\n    }\n  }\n  return n * (s * -1)\n}\n\nmodule.exports = prodSignsArray\n\n},{\"./product-signs\":8}],12:[function(require,module,exports){\n'use strict'\n\nconst prodSigns = require('./product-signs')\n\nconst prodSignsArray = (arr) => {\n  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] < 0) {\n      n *= -1\n    }\n  }\n  return n * (s * -1)\n}\n\nmodule.exports = prodSignsArray\n\n},{\"./product-signs\":8}],13:[function(require,module,exports){\n'use strict'\n\nconst prodSigns = require('./product-signs')\n\nconst prodSignsArray = (arr) => {\n  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] < 0) {\n      n *= -1\n    }\n  }\n  return n * (s * -1)\n}\n\nmodule.exports = prodSignsArray\n\n},{\"./product-signs\":8}],14:[function(require,module,exports){\n'use strict'\n\nconst prodSigns = require('./product-signs')\n\nconst prodSignsArray = (arr) => {\n  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] < 0) {\n      n *= -1\n    }\n  }\n  return n * (s * -1)\n}\n\nmodule.exports = prodSignsArray\n\n},{\"./product-signs\":8}],15:[function(require,module,exports){\n'use strict'\n\nconst prodSigns = require('./product-signs')\n\nconst prodSignsArray = (arr) => {\n  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] < 0) {\n      n *= -1\n    }\n  }\n  return n * (s * -1)\n}\n\nmodule.exports = prodSignsArray\n\n},{\"./product-signs\":8}],16:[function(require,module,exports){\n'use strict'\n\nconst prodSigns = require('./product-signs')\n\nconst prodSignsArray = (arr) => {\n  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] < 0) {\n      n *= -1\n    }\n  }\n  return n * (s * -1)\n}\n\nmodule.exports = prodSignsArray\n\n},{\"./product-signs\":8}],17:[function(require,module,exports){\n'use strict'\n\nconst prodSigns = require('./product-signs')\n\nconst prodSignsArray = (arr) => {\n  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] < 0) {\n      n *= -1\n    }\n  }\n  return n * (s * -1)\n}\n\nmodule.exports = prodSignsArray\n\n},{\"./product-signs\":8}],18:[function(require,module,exports){\n'use strict'\n\nconst prodSigns = require('./product-signs')\n\nconst prodSignsArray = (arr) => {\n  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] < 0) {\n      n *= -1\n    }\n  }\n  return n * (s * -1)\n}\n\nmodule.exports = prodSignsArray\n\n},{\"./product-signs\":8}],19:[function(require,module,exports){\n'use strict'\n\nconst prodSigns = require('./product-signs')\n\nconst prodSignsArray = (arr) => {\n  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] < 0) {\n      n *= -1\n    }\n  }\n  return n * (s * -1)\n}\n\nmodule.exports = prodSignsArray\n\n},{\"./product-signs\":8}],20:[function(require,module,exports){\n'use strict'\n\nconst prodSigns = require('./product-signs')\n\nconst prodSignsArray = (arr) => {\n  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] < 0) {\n      n *= -1\n    }\n  }\n  return n * (s * -1)\n}\n\nmodule.exports = prodSignsArray\n\n},{\"./product-signs\":8}],21:[function(require,module,exports){\n'use strict'\n\nconst prodSigns = require('./product-signs')\n\nconst prodSignsArray = (arr) => {\n  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] < 0) {\n      n *= -1\n    }\n  }\n  return n * (s * -1)\n}\n\nmodule.exports = prodSignsArray\n\n},{\"./product-signs\":8}],22:[function(require,module,exports){\n'use strict'\n\nconst prodSigns = require('./product-signs')\n\nconst prodSignsArray = (arr) => {\n  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] < 0) {\n      n *= -1\n    }\n  }\n  return n * (s * -1)\n}\n\nmodule.exports = prodSignsArray\n\n},{\"./product-signs\":8}],23:[function(require,module,exports){\n'use strict'\n\nconst prodSigns = require('./product-signs')\n\nconst prodSignsArray = (arr) => {\n  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n"}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\n\nconst minPath = (grid, k) => {\n  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n", "canonical_solution": "  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "partial": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  # print('@@this is the line to split##')\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "gc": "<|endoftext|>/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\n\nconst minPath = (grid, k) => {\n  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  if (m == n && k == 1) {\n    return grid[m][n]\n  }\n  let lst_A = []\n  let lst_B = []\n  for (let i = 0; i < grid.length; i++) {\n    lst_A.push(grid[i][0])\n    lst_B.push(grid[i][1])\n  }\n  let lst_A = lst_A.sort((a, b) => a - b)\n  let lst_B = lst_B.sort((a, b) => a - b)\n  let lst_C = lst_A.slice()\n  let lst_D = lst_B.slice()\n  let lst_E = lst_A.slice()\n  let lst_F = lst_B.slice()\n  let lst_G = lst_A.slice()\n  let lst_H = lst_B.slice()\n  let lst_I = lst_A.slice()\n  let lst_J = lst_B.slice()\n  let lst_K = lst_A.slice()\n  let lst_L = lst_B.slice()\n  let lst_M = lst_A.slice()\n  let lst_N = lst_B.slice()\n  let lst_O = lst_A.slice()\n  let lst_P = lst_B.slice()\n  let lst_Q = lst_A.slice()\n  let lst_R = lst_B.slice()\n  let lst_S = lst_A.slice()\n  let lst_T = lst_B.slice()\n  let lst_U = lst_A.slice()\n  let lst_V = lst_B.slice()\n  let lst_W = lst_A.slice()\n  let lst_X = lst_B.slice()\n  let lst_Y = lst_A.slice()\n  let lst_Z = lst_B.slice()\n  let lst_A = lst_A.slice()\n  let lst_B = lst_B.slice()\n  let lst_C = lst_A.slice()\n  let lst_D = lst_B.slice()\n  let lst_E = lst_A.slice()\n  let lst_F = lst_B.slice()\n  let lst_G = lst_A.slice()\n  let lst_H = lst_B.slice()\n  let lst_I = lst_A.slice()\n  let lst_J = lst_B.slice()\n  let lst_K = lst_A.slice()\n  let lst_L = lst_B.slice()\n  let lst_M = lst_A.slice()\n  let lst_N = lst_B.slice()\n  let lst_O = lst_A.slice()\n  let lst_P = lst_B.slice()\n  let lst_Q = lst_A.slice()\n  let lst_R = lst_B.slice()\n  let lst_S = lst_A.slice()\n  let lst_T = lst_B.slice()\n  let lst_U = lst_A.slice()\n  let lst_V = lst_B.slice()\n  let lst_W = lst_A.slice()\n  let lst_X = lst_B.slice()\n  let lst_Y = lst_A.slice()\n  let lst_Z = lst_B.slice()\n  let lst_A = lst_A.slice()\n  let lst_B = lst_B.slice()\n  let lst_C = lst_A.slice()\n  let lst_D = lst_B.slice()\n  let lst_E = lst_A.slice()\n  let lst_F = lst_B.slice()\n  let lst_G = lst_A.slice()\n  let lst_H = lst_B.slice()\n  let lst_I = lst_A.slice()\n  let lst_J = lst_B.slice()\n  let lst_K = lst_A.slice()\n  let lst_L = lst_B.slice()\n  let lst_M = lst_A.slice()\n  let lst_N = lst_B.slice()\n  let lst_O = lst_A.slice()\n  let lst_P = lst_B.slice()\n  let lst_Q = lst_A.slice()\n  let lst_R = lst_B.slice()\n  let lst_S = lst_A.slice()\n  let lst_T = lst_B.slice()\n  let lst_U = lst_A.slice()\n  let lst_V = lst_B.slice()\n  let lst_W = lst_A.slice()\n  let lst_X = lst_B.slice()\n  let lst_Y = lst_A.slice()\n  let lst_Z = lst_B.slice()\n  let lst_A = lst_A.slice()\n  let lst_B = lst_B.slice()\n  let lst_C = lst_A.slice()\n  let lst_D = lst_B.slice()\n  let lst_E = lst_A.slice()\n  let lst_F = lst_B.slice()\n  let lst_G = lst_A.slice()\n  let lst_H = lst_B.slice()\n  let lst_I = lst_A.slice()\n  let lst_J = lst_B.slice()\n  let lst_K = lst_A.slice()\n  let lst_L = lst_B.slice()\n  let lst_M = lst_A.slice()\n  let lst_N = lst_B.slice()\n  let lst_O = lst_A.slice()\n  let lst_P = lst_B.slice()\n  let lst_Q = lst_A.slice()\n  let lst_R = lst_B.slice()\n  let lst_S = lst_A.slice()\n  let lst_T = lst_B.slice()\n  let lst_U = lst_A.slice()\n  let lst_V = lst_B.slice()\n  let lst_W = lst_A.slice()\n  let lst_X = lst_B.slice()\n  let lst_Y = lst_A.slice()\n  let lst_Z = lst_B.slice()\n  let lst_A = lst_A.slice()\n  let lst_B = lst_B.slice()\n  let lst_C = l"}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\n\nconst tri = (n) => {\n  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n", "canonical_solution": "    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "partial": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n      # print('@@this is the line to split##')\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "gc": "<|endoftext|>/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\n\nconst tri = (n) => {\n  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n  }\n  return p\n}\n\n/*\n  Given a non-negative integer n, return the first n + 1 numbers of the Fibonacci sequence.\n  Examples:\n  fibonacci(3) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fibonacci(7) = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765]\n*/\n\nconst fibonacci = (n) => {\n  if (n == 0) { return [1] }\n  if (n == 1) { return [1] }\n  let p = [1, 1]\n  for (let i = 2; i <= n; i++) {\n    p.push(1 + i)\n  }\n  return p\n}\n\n/*\n  Given a non-negative integer n, return the first n + 1 numbers of the Fibonacci sequence.\n  Examples:\n  fibonacci(3) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fibonacci(7) = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765]\n*/\n\nconst fibonacci = (n) => {\n  if (n == 0) { return [1] }\n  if (n == 1) { return [1] }\n  let p = [1, 1]\n  for (let i = 2; i <= n; i++) {\n    p.push(1 + i)\n  }\n  return p\n}\n\n/*\n  Given a non-negative integer n, return the first n + 1 numbers of the Fibonacci sequence.\n  Examples:\n  fibonacci(3) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fibonacci(7) = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765]\n*/\n\nconst fibonacci = (n) => {\n  if (n == 0) { return [1] }\n  if (n == 1) { return [1] }\n  let p = [1, 1]\n  for (let i = 2; i <= n; i++) {\n    p.push(1 + i)\n  }\n  return p\n}\n\n/*\n  Given a non-negative integer n, return the first n + 1 numbers of the Fibonacci sequence.\n  Examples:\n  fibonacci(3) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fibonacci(7) = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765]\n*/\n\nconst fibonacci = (n) => {\n  if (n == 0) { return [1] }\n  if (n == 1) { return [1] }\n  let p = [1, 1]\n  for (let i = 2; i <= n; i++) {\n    p.push(1 + i)\n  }\n  return p\n}\n\n/*\n  Given a non-negative integer n, return the first n + 1 numbers of the Fibonacci sequence.\n  Examples:\n  fibonacci(3) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fibonacci(7) = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765]\n*/\n\nconst fibonacci = (n) => {\n  if (n == 0) { return [1] }\n  if (n == 1) { return [1] }\n  let p = [1, 1]\n  for (let i = 2; i <= n; i++) {\n    p.push(1 + i)\n  }\n  return p\n}\n\n/*\n  Given a non-negative integer n, return the first n + 1 numbers of the Fibonacci sequence.\n  Examples:\n  fibonacci(3) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fibonacci(7) = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765]\n*/\n\nconst fibonacci = (n) => {\n  if (n == 0) { return [1] }\n  if (n == 1) { return [1] }\n  let p = [1, 1]\n  for (let i = 2; i <= n; i++) {\n    p.push(1 + i)\n  }\n  return p\n}\n\n/*\n  Given a non-negative integer n, return the first n + 1 numbers of the Fibonacci sequence.\n  Examples:\n  fibonacci(3) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fibonacci(7) = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765]\n*/\n\nconst fibonacci = (n) => {\n  if (n == 0) { return [1] }\n  if (n == 1) { return [1] }\n  let p = [1, 1]\n  for (let i = 2; i <= n; i++) {\n    p.push(1 + i)\n  }\n  return p\n}\n\n/*\n  Given a non-negative integer n, return the first n + 1 numbers of the Fibonacci sequence.\n  Examples:\n  fibonacci(3) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fibonacci(7) = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765]\n*/\n\nconst fibonacci = (n) => {\n  if (n == 0) { return [1] }\n  if (n == 1) { return [1] }\n  let p = [1, 1]\n  for (let i = 2; i <= n; i++) {\n    p.push(1 + i)\n  }\n  return p\n}\n\n/*\n  Given a non-negative integer n, return the first n + 1 numbers of the Fibonacci sequence.\n  Examples:\n  fibonacci(3) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fibonacci(7) = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765]\n*/\n\nconst fibonacci = (n) => {\n  if (n == 0) { return [1] }\n  if (n == 1) { return [1] }\n  let p = [1, 1]\n  for (let i = 2; i <= n; i++) {\n    p.push(1 + i)\n  }\n  return p\n}\n\n/*\n  Given a non-negative integer n, return the first n + 1 numbers of the Fibonacci sequence.\n  Examples:\n  fibonacci(3) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fibonacci(7) = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765]\n*/\n\nconst fibonacci = (n) => {\n  if (n == 0) { return [1] }\n  if (n == 1) { return "}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integer n, return the product of the odd digits.\n  Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\n\nconst digits = (n) => {\n  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n", "canonical_solution": "    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "partial": "/*Given a positive integer n, return the product of the odd digits.\n  Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n      # print('@@this is the line to split##')\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "gc": "<|endoftext|>/*Given a positive integer n, return the product of the odd digits.\n  Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\n\nconst digits = (n) => {\n  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    } else {\n      p *= 10; k = 1;\n    }\n    n = Math.floor(n / 10)\n  }\n  return k * p\n}\n\n/*Given a positive integer n, return the product of the even digits.\n  Return 0 if all digits are odd.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\n\nconst digits2 = (n) => {\n  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 0) {\n      p *= y; k = 0;\n    } else {\n      p *= 10; k = 1;\n    }\n    n = Math.floor(n / 10)\n  }\n  return k * p\n}\n\n/*Given a positive integer n, return the sum of its digits.\n  Return 0 if n is 0.\n  For example:\n  digits(0)  == 0\n  digits(4)  == 4\n  digits(235) == 235\n  */\n\nconst digits3 = (n) => {\n  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 0) {\n      p *= y; k = 0;\n    } else {\n      p *= 10; k = 1;\n    }\n    n = Math.floor(n / 10)\n  }\n  return k * p\n}\n\n/*Given a positive integer n, return the sum of its digits modulo 10.\n  Return 0 if n is 0.\n  For example:\n  digits(0)  == 0\n  digits(4)  == 4\n  digits(235) == 235\n  */\n\nconst digits4 = (n) => {\n  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 0) {\n      p *= y; k = 0;\n    } else {\n      p *= 10; k = 1;\n    }\n    n = Math.floor(n / 10)\n  }\n  return k * p\n}\n\n/*Given a positive integer n, return the sum of its digits modulo 10.\n  Return 0 if n is 0.\n  For example:\n  digits(0)  == 0\n  digits(4)  == 4\n  digits(235) == 235\n  */\n\nconst digits5 = (n) => {\n  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 0) {\n      p *= y; k = 0;\n    } else {\n      p *= 10; k = 1;\n    }\n    n = Math.floor(n / 10)\n  }\n  return k * p\n}\n\n/*Given a positive integer n, return the sum of its digits modulo 10.\n  Return 0 if n is 0.\n  For example:\n  digits(0)  == 0\n  digits(4)  == 4\n  digits(235) == 235\n  */\n\nconst digits6 = (n) => {\n  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 0) {\n      p *= y; k = 0;\n    } else {\n      p *= 10; k = 1;\n    }\n    n = Math.floor(n / 10)\n  }\n  return k * p\n}\n\n/*Given a positive integer n, return the sum of its digits modulo 10.\n  Return 0 if n is 0.\n  For example:\n  digits(0)  == 0\n  digits(4)  == 4\n  digits(235) == 235\n  */\n\nconst digits7 = (n) => {\n  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 0) {\n      p *= y; k = 0;\n    } else {\n      p *= 10; k = 1;\n    }\n    n = Math.floor(n / 10)\n  }\n  return k * p\n}\n\n/*Given a positive integer n, return the sum of its digits modulo 10.\n  Return 0 if n is 0.\n  For example:\n  digits(0)  == 0\n  digits(4)  == 4\n  digits(235) == 235\n  */\n\nconst digits8 = (n) => {\n  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 0) {\n      p *= y; k = 0;\n    } else {\n      p *= 10; k = 1;\n    }\n    n = Math.floor(n / 10)\n  }\n  return k * p\n}\n\n/*Given a positive integer n, return the sum of its digits modulo 10.\n  Return 0 if n is 0.\n  For example:\n  digits(0)  == 0\n  digits(4)  == 4\n  digits(235) == 235\n  */\n\nconst digits9 = (n) => {\n  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 0) {\n      p *= y; k = 0;\n    } else {\n      p *= 10; k = 1;\n    }\n    n = Math.floor(n / 10)\n  }\n  return k * p\n}\n\n/*Given a positive integer n, return the sum of its digits modulo 10.\n  Return 0 if n is 0.\n  For example:\n  digits(0)  == 0\n  digits(4)  == 4\n  digits(235) == 235\n  */\n\nconst digits10 = (n) => {\n  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 0) {\n      p *= y; k = 0;\n    } else {\n      p *= 10; k = 1;\n    }\n    n = Math.floor(n / 10)\n  }\n  return k * p\n}\n\n/*Given a positive integer n, return the sum of its digits modulo 10.\n  Return 0 if n is 0.\n  For example:\n  digits(0)  == 0\n  digits(4)  == 4\n  digits(235) == 235\n  */\n\nconst digits11 = (n) => {\n  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 0) {\n      p *= y; k = 0;\n    } else {\n      p *= 10; k = 1;\n    }\n    n = Math.floor(n / 10)\n  }\n  return k * p\n}\n\n/*Given a positive integer n, return the sum of its digits modulo 10.\n  Return 0 if n is 0.\n  For example:\n  digits(0)  == 0\n  digits(4)  == 4\n  digits(235) == 235\n  */\n\nconst digits12 = (n) => {\n  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 0) {\n      p *= y; k = 0;\n    } else {\n      p *= 10; k = 1;\n    }\n    n = Math.floor(n / 10)\n  }\n  return k * p\n}\n\n/*Given a positive integer n, return the sum of its digits modulo 10.\n  Return 0 if n is 0.\n  For example:\n  digits(0)  == 0\n  digits(4)  == 4\n  digits(235) == 235\n  */\n\nconst digits13 = (n) => {\n  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 0) {\n      p *= y; k = 0;\n    } else {\n      p *= 10; k = 1;\n    }\n    n = Math.floor(n / 10)\n  }\n  return k * p\n}\n\n/*Given a positive integer n, return the sum of its digits modulo 10.\n  Return 0 if n is 0.\n  For example:\n  digits(0)  == 0\n  digits(4)  == 4\n  digits(235) == 235\n  */\n\nconst digits14 = (n) => {\n  let p"}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ false\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ true\n  */\n\nconst isNested = (string) => {\n  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n", "canonical_solution": "    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "partial": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ false\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ true\n  */\nconst isNested = (string) => {\n  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    # print('@@this is the line to split##')\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "gc": "<|endoftext|>/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ false\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ true\n  */\n\nconst isNested = (string) => {\n  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    if (closing_bracket_index1[i] > closing_bracket_index1[i + 1]) {\n      closing_bracket_index.push(closing_bracket_index1[i])\n    }\n  }\n  let opening_bracket_index = []\n  for (let i = 0; i < opening_bracket_index.length; i++) {\n    if (opening_bracket_index[i] > opening_bracket_index[i + 1]) {\n      opening_bracket_index.push(opening_bracket_index[i])\n    }\n  }\n  if (opening_bracket_index.length == 0) return false\n  let opening_bracket_index = []\n  for (let i = 0; i < opening_bracket_index.length; i++) {\n    if (opening_bracket_index[i] > opening_bracket_index[i + 1]) {\n      opening_bracket_index.push(opening_bracket_index[i])\n    }\n  }\n  if (opening_bracket_index.length == 0) return false\n  let opening_bracket_index = []\n  for (let i = 0; i < opening_bracket_index.length; i++) {\n    if (opening_bracket_index[i] > opening_bracket_index[i + 1]) {\n      opening_bracket_index.push(opening_bracket_index[i])\n    }\n  }\n  if (opening_bracket_index.length == 0) return false\n  let opening_bracket_index = []\n  for (let i = 0; i < opening_bracket_index.length; i++) {\n    if (opening_bracket_index[i] > opening_bracket_index[i + 1]) {\n      opening_bracket_index.push(opening_bracket_index[i])\n    }\n  }\n  if (opening_bracket_index.length == 0) return false\n  let opening_bracket_index = []\n  for (let i = 0; i < opening_bracket_index.length; i++) {\n    if (opening_bracket_index[i] > opening_bracket_index[i + 1]) {\n      opening_bracket_index.push(opening_bracket_index[i])\n    }\n  }\n  if (opening_bracket_index.length == 0) return false\n  let opening_bracket_index = []\n  for (let i = 0; i < opening_bracket_index.length; i++) {\n    if (opening_bracket_index[i] > opening_bracket_index[i + 1]) {\n      opening_bracket_index.push(opening_bracket_index[i])\n    }\n  }\n  if (opening_bracket_index.length == 0) return false\n  let opening_bracket_index = []\n  for (let i = 0; i < opening_bracket_index.length; i++) {\n    if (opening_bracket_index[i] > opening_bracket_index[i + 1]) {\n      opening_bracket_index.push(opening_bracket_index[i])\n    }\n  }\n  if (opening_bracket_index.length == 0) return false\n  let opening_bracket_index = []\n  for (let i = 0; i < opening_bracket_index.length; i++) {\n    if (opening_bracket_index[i] > opening_bracket_index[i + 1]) {\n      opening_bracket_index.push(opening_bracket_index[i])\n    }\n  }\n  if (opening_bracket_index.length == 0) return false\n  let opening_bracket_index = []\n  for (let i = 0; i < opening_bracket_index.length; i++) {\n    if (opening_bracket_index[i] > opening_bracket_index[i + 1]) {\n      opening_bracket_index.push(opening_bracket_index[i])\n    }\n  }\n  if (opening_bracket_index.length == 0) return false\n  let opening_bracket_index = []\n  for (let i = 0; i < opening_bracket_index.length; i++) {\n    if (opening_bracket_index[i] > opening_bracket_index[i + 1]) {\n      opening_bracket_index.push(opening_bracket_index[i])\n    }\n  }\n  if (opening_bracket_index.length == 0) return false\n  let opening_bracket_index = []\n  for (let i = 0; i < opening_bracket_index.length; i++) {\n    if (opening_bracket_index[i] > opening_bracket_index[i + 1]) {\n      opening_bracket_index.push(opening_bracket_index[i])\n    }\n  }\n  if (opening_bracket_index.length == 0) return false\n  let opening_bracket_index = []\n  for (let i = 0; i < opening_bracket_index.length; i++) {\n    if (opening_bracket_index[i] > opening_bracket_index[i + 1]) {\n      opening_bracket_index.push(opening_bracket_index[i])\n    }\n  }\n  if (opening_bracket_index.length == 0) return false\n  let opening_bracket_index = []\n  for (let i = 0; i < opening_bracket_index.length; i++) {\n    if (opening_bracket_index[i] > opening_bracket_index[i + 1]) {\n      opening_bracket_index.push(opening_bracket_index[i])\n    }\n  }\n  if (opening_bracket_index.length == 0) return false\n  let opening_bracket_index = []\n  for (let i = 0; i < opening_bracket_index.length; i++) {\n    if (opening_bracket_index[i] > opening_bracket_index[i + 1]) {\n      opening_bracket_index.push(opening_bracket_index[i])\n    }\n  }\n  if (opening_bracket_index.length == 0) return false\n  let opening_bracket_index = []\n  for (let i = 0; i < opening_bracket_index.length; i++) {\n    if (opening_bracket_index[i] > opening_bracket_index[i + 1]) {\n      opening_bracket_index.push(opening_bracket_index[i])\n    }\n  }\n  if (opening_bracket_index.length == 0) return false\n  let opening_bracket_index = []\n  for (let i = 0; i < opening_bracket_index.length; i++) {\n    if (opening_bracket_index[i] > opening_bracket_index[i + 1]) {\n      opening_bracket_index.push(opening_bracket_index[i])\n    }\n  }\n  if (opening_bracket_index.length == 0) return false\n  let opening_bracket_index = []\n  for (let i = 0; i < opening_bracket_index.length; i++) {\n    if (opening_bracket_index[i] > opening_bracket_index[i + 1]) {\n      opening_bracket_index.push(opening_bracket_index[i])\n    }\n  }\n  if (opening_bracket_index.length == 0) return false\n  let opening_bracket_index = []\n  for (let i = 0; i < opening_bracket_index.length; i++) {\n    if (opening_bracket_index[i] > opening_bracket_index[i + 1]) {\n      opening_bracket_index.push(opening_bracket_index[i])\n    }\n  }\n  if (opening_bracket_index.length == 0) return false\n  let opening_bracket_index = []\n  for (let i = 0; i < "}
{"task_id": "JavaScript/133", "prompt": "/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\n\nconst sumSquares = (lst) => {\n  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n", "canonical_solution": "      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "partial": "/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      # print('@@this is the line to split##')\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "gc": "<|endoftext|>/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\n\nconst sumSquares = (lst) => {\n  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1!= 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = y + y % 1 + 1 }\n    }\n    p = p + Math.pow(y, 2)\n  }\n  return Math.round(p * 100) / 100\n}\n\nmodule.exports = {\n  sumSquares,\n}\n</code>\n<|/ a tags=javascript,math,algorithm |>\n<| c |>\nThis doesn't work if you have a negative number in the list\n<|/ c |>\n<| c |>\nIt does work if you have a negative number in the list. I've added a negative number to the list and it works.\n<|/ c |>\n<| c |>\nIt does work if you have a negative number in the list. I've added a negative number to the list and it works.\n<|/ c |>\n<| c |>\nIt does work if you have a negative number in the list. I've added a negative number to the list and it works.\n<|/ c |>\n<| c |>\nIt does work if you have a negative number in the list. I've added a negative number to the list and it works.\n<|/ c |>\n<| a tags=javascript,math,algorithm |>\n<code>\nfunction sumSquares(arr) {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += Math.pow(arr[i], 2);\n  }\n  return sum;\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't work if you have a negative number in the list\n<|/ c |>\n<| c |>\nIt does work if you have a negative number in the list. I've added a negative number to the list and it works.\n<|/ c |>\n<| a tags=javascript,math,algorithm |>\n<code>\nfunction sumSquares(arr) {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += Math.pow(arr[i], 2);\n  }\n  return sum;\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't work if you have a negative number in the list\n<|/ c |>\n<| a dscore=2 |>\n<code>\nfunction sumSquares(arr) {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += Math.pow(arr[i], 2);\n  }\n  return sum;\n}\n</code>\n<|/ a tags=javascript,math,algorithm |>\n<| a dscore=2 |>\n<code>\nfunction sumSquares(arr) {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += Math.pow(arr[i], 2);\n  }\n  return sum;\n}\n</code>\n<|/ a tags=javascript,math,algorithm |>\n<| a tags=javascript,math,algorithm |>\n<code>\nfunction sumSquares(arr) {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += Math.pow(arr[i], 2);\n  }\n  return sum;\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nfunction sumSquares(arr) {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += Math.pow(arr[i], 2);\n  }\n  return sum;\n}\n</code>\n<|/ a tags=javascript,math,algorithm |>\n<| a tags=javascript,math,algorithm |>\n<code>\nfunction sumSquares(arr) {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += Math.pow(arr[i], 2);\n  }\n  return sum;\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=javascript,math,algorithm |>\n<code>\nfunction sumSquares(arr) {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += Math.pow(arr[i], 2);\n  }\n  return sum;\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nfunction sumSquares(arr) {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += Math.pow(arr[i], 2);\n  }\n  return sum;\n}\n</code>\n<|/ a tags=javascript,math,algorithm |>\n<| a tags=javascript,math,algorithm |>\n<code>\nfunction sumSquares(arr) {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += Math.pow(arr[i], 2);\n  }\n  return sum;\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nfunction sumSquares(arr) {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += Math.pow(arr[i], 2);\n  }\n  return sum;\n}\n</code>\n<|/ a tags=javascript,math,algorithm |>\n<| a tags=javascript,math,algorithm |>\n<code>\nfunction sumSquares(arr) {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += Math.pow(arr[i], 2);\n  }\n  return sum;\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=javascript,math,algorithm |>\n<code>\nfunction sumSquares(arr) {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += Math.pow(arr[i], 2);\n  }\n  return sum;\n}\n</code>\n<|/ a dscore=1 |>\n<| a |>\n<code>\nfunction sumSquares(arr) {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += Math.pow(arr[i], 2);\n  }\n  return sum;\n}\n</code>\n<|/ a dscore=1 tags=javascript,math,algorithm |>\n<| a dscore=1 |>\n<code>\nfunction sumSquares(arr) {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += Math.pow(arr[i], 2);\n  }\n  return sum;\n}\n</code>\n<|/ a tags=javascript,math,algorithm |>\n<| a dscore=1 |>\n<code>\nfunction sumSquares(arr) {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += Math.pow(arr[i], 2);\n  }\n  return sum;\n}\n</code>\n<|/ a tags=javascript,math,algorithm |>\n<| a dscore=1 |>\n<code>\nfunction sumSquares(arr) {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += Math.pow(arr[i], 2);\n  }\n  return sum;\n}\n</code>\n<|/ a tags=javascript,math,algorithm |>\n<| a dscore=1 |>\n<code>\nfunction sumSquares(arr) {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += Math.pow(arr[i], 2);\n  }\n  return sum;\n}\n</code>\n<|/ a tags=javascript,math,algorithm |>\n<| a tags=javascript,math,algorithm |>\n<code>\nfunction sumSquares(arr) {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += Math.pow(arr[i], 2);\n  }\n  return sum;\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nfunction sumSquares(arr) {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += Math.pow(arr[i], "}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\n\nconst checkIfLastCharIsALetter = (txt) => {\n  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n", "canonical_solution": "    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "partial": "/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    # print('@@this is the line to split##')\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "gc": "<|endoftext|>/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\n\nconst checkIfLastCharIsALetter = (txt) => {\n  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n  }\n  if (y >= 65 && y <= 90) { return true }\n  if (y >= 97 && y <= 122) { return true }\n  return false\n}\n\n/* Create a function that returns true if the last character\n  of a given string is a number and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\n\nconst checkIfLastCharIsALetter = (txt) => {\n  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 48 && y <= 57) || (y >= 65 && y <= 90)) { return true }\n  }\n  if (y >= 48 && y <= 57) { return true }\n  if (y >= 65 && y <= 90) { return true }\n  return false\n}\n\n/* Create a function that returns true if the last character\n  of a given string is a number and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\n\nconst checkIfLastCharIsALetter = (txt) => {\n  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 48 && y <= 57) || (y >= 65 && y <= 90)) { return true }\n  }\n  if (y >= 48 && y <= 57) { return true }\n  if (y >= 65 && y <= 90) { return true }\n  return false\n}\n\n/* Create a function that returns true if the last character\n  of a given string is a number and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\n\nconst checkIfLastCharIsALetter = (txt) => {\n  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 48 && y <= 57) || (y >= 65 && y <= 90)) { return true }\n  }\n  if (y >= 48 && y <= 57) { return true }\n  if (y >= 65 && y <= 90) { return true }\n  return false\n}\n\n/* Create a function that returns true if the last character\n  of a given string is a number and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\n\nconst checkIfLastCharIsALetter = (txt) => {\n  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 48 && y <= 57) || (y >= 65 && y <= 90)) { return true }\n  }\n  if (y >= 48 && y <= 57) { return true }\n  if (y >= 65 && y <= 90) { return true }\n  return false\n}\n\n/* Create a function that returns true if the last character\n  of a given string is a number and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\n\nconst checkIfLastCharIsALetter = (txt) => {\n  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 48 && y <= 57) || (y >= 65 && y <= 90)) { return true }\n  }\n  if (y >= 48 && y <= 57) { return true }\n  if (y >= 65 && y <= 90) { return true }\n  return false\n}\n\n/* Create a function that returns true if the last character\n  of a given string is a number and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\n\nconst checkIfLastCharIsALetter = (txt) => {\n  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 48 && y <= 57) || (y >= 65 && y <= 90)) { return true }\n  }\n  if (y >= 48 && y <= 57) { return true }\n  if (y >= 65 && y <= 90) { return true }\n  return false\n}\n\n/* Create a function that returns "}
{"task_id": "JavaScript/135", "prompt": "/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\n\nconst canArrange = (arr) => {\n  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n", "canonical_solution": "  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "partial": "/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n    # print('@@this is the line to split##')\n  }\n  return -1\n}\n\n", "gc": "<|endoftext|>/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\n\nconst canArrange = (arr) => {\n  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n/*\n  Given an array of numbers, return an array which contains all possible pairs\n  of numbers which sum to exactly the given number.\n\n  Examples:\n  pairs([1,2,3]) = [[1,2],[2,3],[3,1]]\n  pairs([1,2,3,4,5]) = [[1,2],[2,3],[3,1],[4,5]]\n  pairs([1,2,3,4,5,6]) = [[1,2],[2,3],[3,1],[4,5],[5,6]]\n  pairs([1,2,3,4,5,6,7]) = [[1,2],[2,3],[3,1],[4,5],[5,6],[7,1]]\n*/\n\nconst pairs = (arr) => {\n  let result = []\n  for (let i = 0; i < arr.length; i++) {\n    let pair = []\n    for (let j = i + 1; j < arr.length; j++) {\n      if (arr[i] + arr[j] == arr[i]) {\n        pair.push(arr[j])\n      }\n    }\n    result.push(pair)\n  }\n  return result\n}\n\n/*\n  Given an array of numbers, return an array which contains all possible pairs\n  of numbers which sum to exactly the given number.\n\n  Examples:\n  pairs([1,2,3]) = [[1,2],[2,3],[3,1]]\n  pairs([1,2,3,4,5]) = [[1,2],[2,3],[3,1],[4,5]]\n  pairs([1,2,3,4,5,6]) = [[1,2],[2,3],[3,1],[4,5],[5,6]]\n  pairs([1,2,3,4,5,6,7]) = [[1,2],[2,3],[3,1],[4,5],[5,6],[7,1]]\n*/\n\nconst pairsWithSum = (arr) => {\n  let result = []\n  for (let i = 0; i < arr.length; i++) {\n    let pair = []\n    for (let j = i + 1; j < arr.length; j++) {\n      if (arr[i] + arr[j] == arr[i]) {\n        pair.push(arr[j])\n      }\n    }\n    result.push(pair)\n  }\n  return result\n}\n\n/*\n  Given an array of numbers, return an array which contains all possible pairs\n  of numbers which sum to exactly the given number.\n\n  Examples:\n  pairsWithSum([1,2,3]) = [[1,2],[2,3],[3,1]]\n  pairsWithSum([1,2,3,4,5]) = [[1,2],[2,3],[3,1],[4,5]]\n  pairsWithSum([1,2,3,4,5,6]) = [[1,2],[2,3],[3,1],[4,5],[5,6]]\n  pairsWithSum([1,2,3,4,5,6,7]) = [[1,2],[2,3],[3,1],[4,5],[5,6],[7,1]]\n*/\n\nconst pairsWithSumAndSum = (arr) => {\n  let result = []\n  for (let i = 0; i < arr.length; i++) {\n    let pair = []\n    for (let j = i + 1; j < arr.length; j++) {\n      if (arr[i] + arr[j] == arr[i]) {\n        pair.push(arr[j])\n      }\n    }\n    result.push(pair)\n  }\n  return result\n}\n\n/*\n  Given an array of numbers, return an array which contains all possible pairs\n  of numbers which sum to exactly the given number.\n\n  Examples:\n  pairsWithSumAndSum([1,2,3]) = [[1,2],[2,3],[3,1]]\n  pairsWithSumAndSum([1,2,3,4,5]) = [[1,2],[2,3],[3,1],[4,5]]\n  pairsWithSumAndSum([1,2,3,4,5,6]) = [[1,2],[2,3],[3,1],[4,5],[5,6]]\n  pairsWithSumAndSum([1,2,3,4,5,6,7]) = [[1,2],[2,3],[3,1],[4,5],[5,6],[7,1]]\n*/\n\nconst pairsWithSumAndSumAndSum = (arr) => {\n  let result = []\n  for (let i = 0; i < arr.length; i++) {\n    let pair = []\n    for (let j = i + 1; j < arr.length; j++) {\n      if (arr[i] + arr[j] == arr[i]) {\n        pair.push(arr[j])\n      }\n    }\n    result.push(pair)\n  }\n  return result\n}\n\n/*\n  Given an array of numbers, return an array which contains all possible pairs\n  of numbers which sum to exactly the given number.\n\n  Examples:\n  pairsWithSumAndSumAndSum([1,2,3]) = [[1,2],[2,3],[3,1]]\n  pairsWithSumAndSumAndSum([1,2,3,4,5]) = [[1,2],[2,3],[3,1],[4,5]]\n  pairsWithSumAndSumAndSum([1,2,3,4,5,6]) = [[1,2],[2,3],[3,1],[4,5],[5,6]]\n  pairsWithSumAndSumAndSum([1,2,3,4,5,6,7]) = [[1,2],[2,3],[3,1],[4,5],[5,6],[7,1]]\n*/\n\nconst pairsWithSumAndSumAndSumAndSum = (arr) => {\n  let result = []\n  for (let i = 0; i < arr.length; i++) {\n    let pair = []\n    for (let j = i + 1; j < arr.length; j++) {\n      if (arr[i] + arr[j] == arr[i]) {\n        pair.push(arr[j])\n      }\n    }\n    result.push(pair)\n  }\n  return result\n}\n\n/*\n  Given an array of numbers, return an array which contains all possible pairs\n  of numbers which sum to exactly the given number.\n\n  Examples:\n  pairsWithSumAndSumAndSumAndSum([1,2,3]) = [[1,2],[2,3],[3,1]]\n  pairsWithSumAndSumAndSumAndSum([1,2,3,4,5]) = [[1,2],[2,3],[3,1],[4,5]]\n  pairsWithSumAndSumAndSumAndSum([1,2,3,4,5,6]) = [[1,2],[2,3],[3,1],[4,5],[5,6]]\n  pairsWithSumAndSumAndSumAndSum([1,2,3,4,5,6,7]) = [[1,2],[2,3],[3,1],[4,5],[5,6],[7,1]]\n*/\n\nconst pairsWithSumAndSumAndSumAndSumAndSum = (arr) => {\n  let result = []\n  for (let i = 0; i < arr.length; i++) {\n    let pair = []\n    for (let j = i + 1; j < arr.length; j++) {\n      if (arr[i] + arr[j] == arr[i]) {\n        pair.push(arr[j])\n      }\n    }\n    result.push(pair)\n  }\n  return result\n}\n\n/*\n  Given an array of numbers, return an array which contains all possible pairs\n  of numbers which sum to exactly the given number.\n\n  Examples:\n  pairsWithSumAndSumAndSumAndSumAndSum([1,2,3]) = [[1,2],[2,3],[3,1]]\n  pairsWithSumAndSumAndSumAndSumAndSum([1,2,3,4,5]) = [[1,2],[2,3],[3,1],[4,5]]\n  pairsWithSumAndSumAndSumAndSumAndSum([1,2,3,4,5,6]) = [[1,2],[2,3],[3,1],[4,5],[5,6]]\n  pairsWithSumAndSumAndSumAndSumAndSum([1,2,3,4,5,6,7]) = [[1,2],[2,3],[3,1],[4,5],[5,6],[7,1]]\n*/\n\nconst pairsWithSumAndSumAndSumAndSumAndSumAndSum = (arr) => {\n  let result = []\n  for (let i = 0; i < arr.length; i++) {\n    let pair = []\n    for (let j = i + 1; j < arr.length; j++) {\n      if (arr[i] + arr[j] == arr[i]) {\n        pair.push(arr[j])\n      }\n    }\n    result."}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\n\nconst largestSmallestIntegers = (lst) => {\n  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n", "canonical_solution": "  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "partial": "/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n    # print('@@this is the line to split##')\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "gc": "<|endoftext|>/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\n\nconst largestSmallestIntegers = (lst) => {\n  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  return [a, b]\n}\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\n\nconst largestSmallestIntegers = (lst) => {\n  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  return [a, b]\n}\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\n\nconst largestSmallestIntegers = (lst) => {\n  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  return [a, b]\n}\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\n\nconst largestSmallestIntegers = (lst) => {\n  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  return [a, b]\n}\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\n\nconst largestSmallestIntegers = (lst) => {\n  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  return [a, b]\n}\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\n\nconst largestSmallestIntegers = (lst) => {\n  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  return [a, b]\n}\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\n\nconst largestSmallestIntegers = (lst) => {\n  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  return [a, b]\n}\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\n\nconst largestSmallestIntegers = (lst) => {\n  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  return [a, b]\n}\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\n\nconst largestSmallestIntegers = (lst) => {\n  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  return [a, b]\n}\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallest"}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be . or ,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ null\n  */\n\nconst compareOne = (a, b) => {\n  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n", "canonical_solution": "  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "partial": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be . or ,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ null\n  */\nconst compareOne = (a, b) => {\n  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  # print('@@this is the line to split##')\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "gc": "<|endoftext|>/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ null\n  */\n\nconst compareOne = (a, b) => {\n  let aa = Number(a)\n  if (typeof a =='string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b =='string') { bb = Number(b.replace(',', '.')) }\n  return aa > bb? 1 : aa < bb? -1 : 0\n}\n\n/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the smaller variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ null\n  */\n\nconst compareOne = (a, b) => {\n  let aa = Number(a)\n  if (typeof a =='string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b =='string') { bb = Number(b.replace(',', '.')) }\n  return aa < bb? 1 : aa > bb? -1 : 0\n}\n\n/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ null\n  */\n\nconst compareOne = (a, b) => {\n  let aa = Number(a)\n  if (typeof a =='string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b =='string') { bb = Number(b.replace(',', '.')) }\n  return aa > bb? 1 : aa < bb? -1 : 0\n}\n\n/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the smaller variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ null\n  */\n\nconst compareOne = (a, b) => {\n  let aa = Number(a)\n  if (typeof a =='string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b =='string') { bb = Number(b.replace(',', '.')) }\n  return aa < bb? 1 : aa > bb? -1 : 0\n}\n\n/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ null\n  */\n\nconst compareOne = (a, b) => {\n  let aa = Number(a)\n  if (typeof a =='string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b =='string') { bb = Number(b.replace(',', '.')) }\n  return aa < bb? 1 : aa > bb? -1 : 0\n}\n\n/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ null\n  */\n\nconst compareOne = (a, b) => {\n  let aa = Number(a)\n  if (typeof a =='string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b =='string') { bb = Number(b.replace(',', '.')) }\n  return aa > bb? 1 : aa < bb? -1 : 0\n}\n\n/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ null\n  */\n\nconst compareOne = (a, b) => {\n  let aa = Number(a)\n  if (typeof a =='string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b =='string') { bb = Number(b.replace(',', '.')) }\n  return aa > bb? 1 : aa < bb? -1 : 0\n}\n\n/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ null\n  */\n\nconst compareOne = (a, b) => {\n  let aa = Number(a)\n  if (typeof a =='string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b =='string') { bb = Number(b.replace(',', '.')) }\n  return aa > bb? 1 : aa < bb? -1 : 0\n}\n\n/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ null\n  */\n\nconst compareOne = (a, b) => {\n  let aa = Number(a)\n  if (typeof a =='string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b =='string') { bb = Number(b.replace(',', '.')) }\n  return aa > "}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\n\nconst isEqualToSumEven = (n) => {\n  return (n >= 8 && n % 2 == 0)\n", "canonical_solution": "}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "partial": "/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  return (n >= 8 && n % 2 == 0)\n  # print('@@this is the line to split##')\n}\n\n", "gc": "<|endoftext|>/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\n\nconst isEqualToSumEven = (n) => {\n  return (n >= 8 && n % 2 == 0)\n}\n\n/*\n  Given a number n, return true if the number is divisible by 3 or 5\n  Example\n  isDivisibleBy3Or5(4) == true\n  isDivisibleBy3Or5(6) == true\n  isDivisibleBy3Or5(8) == false\n  */\n\nconst isDivisibleBy3Or5 = (n) => {\n  return (n % 3 === 0 || n % 5 === 0)\n}\n\n/*\n  Given a number n, return true if the number is divisible by 2 only\n  Example\n  isDivisibleBy2(4) == true\n  isDivisibleBy2(6) == false\n  isDivisibleBy2(8) == false\n  */\n\nconst isDivisibleBy2 = (n) => {\n  return (n % 2 === 0)\n}\n\n/*\n  Given a number n, return true if the number is divisible by 1\n  Example\n  isDivisibleBy1(4) == true\n  isDivisibleBy1(6) == false\n  isDivisibleBy1(8) == false\n  */\n\nconst isDivisibleBy1 = (n) => {\n  return (n % 1 === 0)\n}\n\n/*\n  Given a number n, return true if the number is even\n  Example\n  isEven(4) == true\n  isEven(6) == false\n  isEven(8) == false\n  */\n\nconst isEven = (n) => {\n  return (n % 2 === 0)\n}\n\n/*\n  Given a number n, return true if the number is even\n  Example\n  isEven(5) == false\n  isEven(7) == true\n  isEven(9) == true\n  */\n\nconst isEven = (n) => {\n  return (n % 2 === 0)\n}\n\n/*\n  Given a number n, return true if the number is odd, else false\n  Example\n  isOdd(4) == false\n  isOdd(6) == true\n  isOdd(8) == false\n  */\n\nconst isOdd = (n) => {\n  return (n % 2!== 0)\n}\n\n/*\n  Given a number n, return true if the number is odd, else false\n  Example\n  isOdd(5) == false\n  isOdd(7) == false\n  isOdd(9) == true\n  */\n\nconst isOdd = (n) => {\n  return (n % 2!== 0)\n}\n\n/*\n  Given a number n, return true if the number is positive\n  Example\n  isPositive(4) == true\n  isPositive(6) == false\n  isPositive(8) == false\n  */\n\nconst isPositive = (n) => {\n  return (n >= 0)\n}\n\n/*\n  Given a number n, return true if the number is positive\n  Example\n  isPositive(5) == false\n  isPositive(7) == true\n  isPositive(9) == true\n  */\n\nconst isPositive = (n) => {\n  return (n >= 0)\n}\n\n/*\n  Given a number n, return true if the number is positive\n  Example\n  isPositive(5) == false\n  isPositive(7) == false\n  isPositive(9) == true\n  */\n\nconst isPositive = (n) => {\n  return (n >= 0)\n}\n\n/*\n  Given a number n, return true if the number is positive\n  Example\n  isPositive(5) == false\n  isPositive(7) == false\n  isPositive(9) == true\n  */\n\nconst isPositive = (n) => {\n  return (n >= 0)\n}\n\n/*\n  Given a number n, return true if the number is positive\n  Example\n  isPositive(5) == false\n  isPositive(7) == false\n  isPositive(9) == true\n  */\n\nconst isPositive = (n) => {\n  return (n >= 0)\n}\n\n/*\n  Given a number n, return true if the number is positive\n  Example\n  isPositive(5) == false\n  isPositive(7) == false\n  isPositive(9) == true\n  */\n\nconst isPositive = (n) => {\n  return (n >= 0)\n}\n\n/*\n  Given a number n, return true if the number is positive\n  Example\n  isPositive(5) == false\n  isPositive(7) == false\n  isPositive(9) == true\n  */\n\nconst isPositive = (n) => {\n  return (n >= 0)\n}\n\n/*\n  Given a number n, return true if the number is positive\n  Example\n  isPositive(5) == false\n  isPositive(7) == false\n  isPositive(9) == true\n  */\n\nconst isPositive = (n) => {\n  return (n >= 0)\n}\n\n/*\n  Given a number n, return true if the number is positive\n  Example\n  isPositive(5) == false\n  isPositive(7) == false\n  isPositive(9) == true\n  */\n\nconst isPositive = (n) => {\n  return (n >= 0)\n}\n\n/*\n  Given a number n, return true if the number is positive\n  Example\n  isPositive(5) == false\n  isPositive(7) == false\n  isPositive(9) == true\n  */\n\nconst isPositive = (n) => {\n  return (n >= 0)\n}\n\n/*\n  Given a number n, return true if the number is positive\n  Example\n  isPositive(5) == false\n  isPositive(7) == false\n  isPositive(9) == true\n  */\n\nconst isPositive = (n) => {\n  return (n >= 0)\n}\n\n/*\n  Given a number n, return true if the number is positive\n  Example\n  isPositive(5) == false\n  isPositive(7) == false\n  isPositive(9) == true\n  */\n\nconst isPositive = (n) => {\n  return (n >= 0)\n}\n\n/*\n  Given a number n, return true if the number is positive\n  Example\n  isPositive(5) == false\n  isPositive(7) == false\n  isPositive(9) == true\n  */\n\nconst isPositive = (n) => {\n  return (n >= 0)\n}\n\n/*\n  Given a number n, return true if the number is positive\n  Example\n  isPositive(5) == false\n  isPositive(7) == false\n  isPositive(9) == true\n  */\n\nconst isPositive = (n) => {\n  return (n >= 0)\n}\n\n/*\n  Given a number n, return true if the number is positive\n  Example\n  isPositive(5) == false\n  isPositive(7) == false\n  isPositive(9) == true\n  */\n\nconst isPositive = (n) => {\n  return (n >= 0)\n}\n\n/*\n  Given a number n, return true if the number is positive\n  Example\n  isPositive(5) == false\n  isPositive(7) == false\n  isPositive(9) == true\n  */\n\nconst isPositive = (n) => {\n  return (n >= 0)\n}\n\n/*\n  Given a number n, return true if the number is positive\n  Example\n  isPositive(5) == false\n  isPositive(7) == false\n  isPositive(9) == true\n  */\n\nconst isPositive = (n) => {\n  return (n >= 0)\n}\n\n/*\n  Given a number n, return true if the number is positive\n  Example\n  isPositive(5) == false\n  isPositive(7) == false\n  isPositive(9) == true\n  */\n\nconst isPositive = (n) => {\n  return (n >= 0)\n}\n\n/*\n  Given a number n, return true if the number is positive\n  Example\n  isPositive(5) == false\n  isPositive(7) == false\n  isPositive(9) == true\n  */\n\nconst isPositive = (n) => {\n  return (n >= 0)\n}\n\n/*\n  Given a number n, return true if the number is positive\n  Example\n  is"}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n  where n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\n\nconst specialFactorial = (n) => {\n  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n", "canonical_solution": "      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "partial": "/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n  where n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      # print('@@this is the line to split##')\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "gc": "<|endoftext|>/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n  where n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\n\nconst specialFactorial = (n) => {\n  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      p *= y;\n    }\n    t++;\n    n--;\n  }\n  return t;\n};\n\n/*\n  Given a positive integer n, return the factorial of n using recursive\n  method.\n  */\n\nconst factorial = (n) => {\n  if (n <= 1) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n/*\n  Given a positive integer n, return the factorial of n using iterative\n  method.\n  */\n\nconst factorialIterative = (n) => {\n  let res = 1;\n  let i = 1;\n  while (i <= n) {\n    res *= i;\n    i++;\n  }\n  return res;\n};\n\n/*\n  Given a positive integer n, return the factorial of n using iterative\n  method.\n  */\n\nconst factorialIterativeRecursive = (n) => {\n  let res = 1;\n  let i = 1;\n  while (i <= n) {\n    res *= i;\n    i++;\n  }\n  return res;\n};\n\n/*\n  Given a positive integer n, return the factorial of n using iterative\n  method.\n  */\n\nconst factorialIterativeRecursive2 = (n) => {\n  let res = 1;\n  let i = 1;\n  let t = 1;\n  while (i <= n) {\n    res *= i;\n    i++;\n    t++;\n  }\n  return t;\n};\n\n/*\n  Given a positive integer n, return the factorial of n using iterative\n  method.\n  */\n\nconst factorialIterativeRecursive3 = (n) => {\n  let res = 1;\n  let i = 1;\n  let t = 1;\n  let p = 1;\n  while (i <= n) {\n    res *= i;\n    i++;\n    t++;\n    p *= i;\n  }\n  return p;\n};\n\n/*\n  Given a positive integer n, return the factorial of n using iterative\n  method.\n  */\n\nconst factorialIterativeRecursive4 = (n) => {\n  let res = 1;\n  let i = 1;\n  let t = 1;\n  let p = 1;\n  let y = 1;\n  while (i <= n) {\n    res *= i;\n    i++;\n    t++;\n    p *= i;\n    y++;\n  }\n  return p;\n};\n\n/*\n  Given a positive integer n, return the factorial of n using iterative\n  method.\n  */\n\nconst factorialIterativeRecursive5 = (n) => {\n  let res = 1;\n  let i = 1;\n  let t = 1;\n  let p = 1;\n  let y = 1;\n  let z = 1;\n  while (i <= n) {\n    res *= i;\n    i++;\n    t++;\n    p *= i;\n    y++;\n    z++;\n  }\n  return p;\n};\n\n/*\n  Given a positive integer n, return the factorial of n using iterative\n  method.\n  */\n\nconst factorialIterativeRecursive6 = (n) => {\n  let res = 1;\n  let i = 1;\n  let t = 1;\n  let p = 1;\n  let y = 1;\n  let z = 1;\n  let w = 1;\n  while (i <= n) {\n    res *= i;\n    i++;\n    t++;\n    p *= i;\n    y++;\n    z++;\n    w++;\n  }\n  return p;\n};\n\n/*\n  Given a positive integer n, return the factorial of n using iterative\n  method.\n  */\n\nconst factorialIterativeRecursive7 = (n) => {\n  let res = 1;\n  let i = 1;\n  let t = 1;\n  let p = 1;\n  let y = 1;\n  let z = 1;\n  let w = 1;\n  let x = 1;\n  while (i <= n) {\n    res *= i;\n    i++;\n    t++;\n    p *= i;\n    y++;\n    z++;\n    w++;\n    x++;\n  }\n  return p;\n};\n\n/*\n  Given a positive integer n, return the factorial of n using iterative\n  method.\n  */\n\nconst factorialIterativeRecursive8 = (n) => {\n  let res = 1;\n  let i = 1;\n  let t = 1;\n  let p = 1;\n  let y = 1;\n  let z = 1;\n  let w = 1;\n  let x = 1;\n  let y = 1;\n  let z = 1;\n  let w = 1;\n  let x = 1;\n  let y = 1;\n  let z = 1;\n  let w = 1;\n  let x = 1;\n  let y = 1;\n  let z = 1;\n  let w = 1;\n  let x = 1;\n  let y = 1;\n  let z = 1;\n  let w = 1;\n  let x = 1;\n  let y = 1;\n  let z = 1;\n  let w = 1;\n  let x = 1;\n  let y = 1;\n  let z = 1;\n  let w = 1;\n  let x = 1;\n  let y = 1;\n  let z = 1;\n  let w = 1;\n  let x = 1;\n  let y = 1;\n  let z = 1;\n  let w = 1;\n  let x = 1;\n  let y = 1;\n  let z = 1;\n  let w = 1;\n  let x = 1;\n  let y = 1;\n  let z = 1;\n  let w = 1;\n  let x = 1;\n  let y = 1;\n  let z = 1;\n  let w = 1;\n  let x = 1;\n  let y = 1;\n  let z = 1;\n  let w = 1;\n  let x = 1;\n  let y = 1;\n  let z = 1;\n  let w = 1;\n  let x = 1;\n  let y = 1;\n  let z = 1;\n  let w = 1;\n  let x = 1;\n  let y = 1;\n  let z = 1;\n  let w = 1;\n  let x = 1;\n  let y = 1;\n  let z = 1;\n  let w = 1;\n  let x = 1;\n  let y = 1;\n  let z = 1;\n  let w = 1;\n  let x = 1;\n  let y = 1;\n  let z = 1;\n  let w = 1;\n  let x = 1;\n  let y = 1;\n  let z = 1;\n  let w = 1;\n  let x = 1;\n  let y = 1;\n  let z = 1;\n  let w = 1;\n  let x = 1;\n  let y = 1;\n  let z = 1;\n  let w = 1;\n  let x = 1;\n  let y = 1;\n  let z = 1;\n  let w = 1;\n  let x = 1;\n  let y = 1;\n  let z = 1;\n  let w = 1;\n  let x = 1;\n  let y = 1;\n  let z = 1;\n  let w = 1;\n  let x = 1;\n  let y = 1;\n  let z = 1;\n  let w = 1;\n  let x = 1;\n  let y = 1;\n  let z = 1;\n  let w = 1;\n  let x = 1;\n  let y = 1;\n  let z = 1;\n  let w = 1;\n  let x = 1;\n  let y = 1;\n  let z = 1;\n  let w = 1;\n  let x = 1;\n  let y = 1;\n  let z = 1;\n  let w = 1;\n  let x = 1;\n  let y = 1;\n  let z = 1;\n  let w = 1;\n  let x = 1;\n  let y = 1;\n  let z = 1;\n  let w = 1;\n  let x = 1;\n  let y = 1;\n  let z = 1;\n  let w = 1;\n  let x = 1;\n  let y = 1;\n  let z = 1;\n  let w = 1;\n  let x = 1;\n  let y = 1;\n  let z = 1;\n  let w = 1;\n  let x = 1;\n  let y = 1;\n  let z = 1;\n  let w = 1;\n  let x = 1;\n  let y = 1;\n  let z = 1;\n  let w = 1;\n  let x = 1;\n  let y = 1;\n  let z = 1;\n  let w = 1;\n  let x = 1;\n  let y = 1;\n  let z = 1;\n  let w = 1;\n  let x = 1;\n  let y = 1;\n  let z = 1;\n  let w = 1;\n  let x = 1;\n  let y = 1;\n  let z = 1;\n  let w = 1;\n  let x = 1;\n  let y = 1;\n  let z = 1;\n  let w = 1;"}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\n\nconst fixSpaces = (text) => {\n  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n", "canonical_solution": "      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "partial": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      # print('@@this is the line to split##')\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "gc": "<|endoftext|>/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\n\nconst fixSpaces = (text) => {\n  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] =='') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0\n    }\n  }\n  return t\n}\n\n/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixSpaces(text) == \"Example\"\n  fixSpaces(text) == \"Example_1\"\n  fixSpaces(text) == \" Example_2\"\n  fixSpaces(text) == \" Example   3\"\n  */\n\nconst fixSpaces = (text) => {\n  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] =='') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0\n    }\n  }\n  return t\n}\n\n/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixSpaces(text) == \"Example\"\n  fixSpaces(text) == \"Example_1\"\n  fixSpaces(text) == \" Example_2\"\n  fixSpaces(text) == \" Example   3\"\n  */\n\nconst fixSpaces = (text) => {\n  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] =='') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0\n    }\n  }\n  return t\n}\n\n/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixSpaces(text) == \"Example\"\n  fixSpaces(text) == \"Example_1\"\n  fixSpaces(text) == \" Example_2\"\n  fixSpaces(text) == \" Example   3\"\n  */\n\nconst fixSpaces = (text) => {\n  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] =='') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0\n    }\n  }\n  return t\n}\n\n/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixSpaces(text) == \"Example\"\n  fixSpaces(text) == \"Example_1\"\n  fixSpaces(text) == \" Example_2\"\n  fixSpaces(text) == \" Example   3\"\n  */\n\nconst fixSpaces = (text) => {\n  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] =='') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0\n    }\n  }\n  return t\n}\n\n/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixSpaces(text) == \"Example\"\n  fixSpaces(text) == \"Example_1\"\n  fixSpaces(text) == \" Example_2\"\n  fixSpaces(text) == \" Example   3\"\n  */\n\nconst fixSpaces = (text) => {\n  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] =='') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0\n    }\n  }\n  return t\n}\n\n/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixSpaces(text) == \"Example\"\n  fixSpaces(text) == \"Example_1\"\n  fixSpaces(text) == \" Example_2\"\n  fixSpaces(text) == \" Example   3\"\n  */\n\nconst fixSpaces = (text) => {\n  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] =='') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0\n    }\n  }\n  return t\n}\n\n/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixSpaces(text) == \"Example\"\n  fixSpaces(text) == \"Example_1\"\n  fixSpaces(text) == \" Example_2\"\n  fixSpaces(text) == \" Example   3\"\n  */\n\nconst fixSpaces = (text) => {\n  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] =='') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0\n    }\n  }\n  return t\n}\n\n/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixSpaces(text) == \"Example\"\n  fixSpaces(text) == \"Example_1\"\n  fixSpaces(text) == \" Example_2\"\n  fixSpaces(text) == \" Example   3\"\n  */\n\nconst fixSpaces = (text) => {\n  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] =='') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0\n    }\n  }\n  return t\n}\n\n/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixSpaces(text) == \"Example\"\n  fixSpaces(text) == \"Example_1\"\n  "}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\n\nconst fileNameCheck = (file_name) => {\n  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n", "canonical_solution": "  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "partial": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  # print('@@this is the line to split##')\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "gc": "<|endoftext|>/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\n\nconst fileNameCheck = (file_name) => {\n  let t = file_name.split(/\\./)\n  if (t.length!= 2) { return 'No' }\n  if (t[1]!= 'txt' && t[1]!= 'dll' && t[1]!= 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  return 'Yes'\n}\n\n/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\n\nconst fileNameCheck = (file_name) => {\n  let t = file_name.split(/\\./)\n  if (t.length!= 2) { return 'No' }\n  if (t[1]!= 'txt' && t[1]!= 'dll' && t[1]!= 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  return 'Yes'\n}\n\n/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\n\nconst fileNameCheck = (file_name) => {\n  let t = file_name.split(/\\./)\n  if (t.length!= 2) { return 'No' }\n  if (t[1]!= 'txt' && t[1]!= 'dll' && t[1]!= 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  return 'Yes'\n}\n\n/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\n\nconst fileNameCheck = (file_name) => {\n  let t = file_name.split(/\\./)\n  if (t.length!= 2) { return 'No' }\n  if (t[1]!= 'txt' && t[1]!= 'dll' && t[1]!= 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  return 'Yes'\n}\n\n/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\n\nconst fileNameCheck = (file_name) => {\n  let t = file_name.split(/\\./)\n  if (t.length!= 2) { return 'No' }\n  if (t[1]!= 'txt' && t[1]!= 'dll' && t[1]!= 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  return 'Yes'\n}\n\n/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\n\nconst fileNameCheck = (file_name) => {\n  let t = file_name.split(/\\./)\n  if (t.length!= 2) { return 'No' }\n  if (t[1]!= 'txt' && t[1]!= 'dll' && t[1]!= '"}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\n\nconst sumSquares = (lst) => {\n  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n", "canonical_solution": "    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "partial": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    # print('@@this is the line to split##')\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "gc": "<|endoftext|>/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\n\nconst sumSquares = (lst) => {\n  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n  }\n  return y\n}\n\n/*\n  Write a function that takes a list of integers and returns the sum of the squares of its elements. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\n\nconst sumSquares = (lst) => {\n  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n  }\n  return y\n}\n\n/*\n  Write a function that takes a list of integers and returns the sum of the cubes of its elements. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\n\nconst sumCubes = (lst) => {\n  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] * lst[i] }\n  }\n  return y\n}\n\n/*\n  Write a function that takes a list of integers and returns the sum of the cubes of its elements. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\n\nconst sumCubes = (lst) => {\n  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] * lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] }\n  }\n  return y\n}\n\n/*\n  Write a function that takes a list of integers and returns the sum of the cubes of its elements. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\n\nconst sumCubes = (lst) => {\n  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] * lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] }\n  }\n  return y\n}\n\n/*\n  Write a function that takes a list of integers and returns the sum of the cubes of its elements. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\n\nconst sumCubes = (lst) => {\n  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] * lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] }\n  }\n  return y\n}\n\n/*\n  Write a function that takes a list of integers and returns the sum of the cubes of its elements. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\n\nconst sumCubes = (lst) => {\n  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] * lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] }\n  }\n  return y\n}\n\n/*\n  Write a function that takes a list of integers and returns the sum of the cubes of its elements. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\n\nconst sumCubes = (lst) => {\n  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] * lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] }\n  }\n  return y\n}\n\n/*\n  Write a function that takes a list of integers and returns the sum of the cubes of its elements. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\n\nconst sumCubes = (lst) => {\n  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] * lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] }\n  }\n  return y\n}\n\n/*\n  Write a function that takes a list of integers and returns the sum of the cubes of its elements. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\n\nconst sumCubes = (lst) => {\n  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] * lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] }\n  }\n  return y\n}\n\n/*\n  Write a function that takes a list of integers and returns the sum of the cubes of its elements. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\n\nconst sumCubes = (lst) => {\n  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] * lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] }\n  }\n  return y\n}\n\n/*\n  Write a function that takes a list of integers and returns the sum of the cubes of its elements. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\n\nconst sumCubes = (lst) => {\n  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] * lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] * lst[i]"}
{"task_id": "JavaScript/143", "prompt": "/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\n\nconst wordsInSentence = (sentence) => {\n  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n", "canonical_solution": "      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "partial": "/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      # print('@@this is the line to split##')\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "gc": "<|endoftext|>/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\n\nconst wordsInSentence = (sentence) => {\n  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (t[j].charAt(i)!= t[j].charAt(len - i)) {\n        u = u * i;\n      }\n    }\n    p = p + t[j].charAt(len - 1) + u;\n  }\n  return p;\n};\n\n// console.log(wordsInSentence(\"this is a test\"));\n// console.log(wordsInSentence(\"lets go for swimming\"));\n// console.log(wordsInSentence(\"this is a test sentence\"));\n// console.log(wordsInSentence(\"this is a test sentence with some words\"));\n// console.log(wordsInSentence(\"this is a test sentence with some words and some words\"));\n// console.log(wordsInSentence(\"this is a test sentence with some words and some words and some words\"));\n// console.log(wordsInSentence(\"this is a test sentence with some words and some words and some words and some words\"));\n// console.log(wordsInSentence(\"this is a test sentence with some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and some words and "}
{"task_id": "JavaScript/144", "prompt": "/*Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\n\nconst simplify = (x, n) => {\n  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n", "canonical_solution": "  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "partial": "/*Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  # print('@@this is the line to split##')\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "gc": "<|endoftext|>/*Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\n\nconst simplify = (x, n) => {\n  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let n = Number(a[1]) * Number(b[1])\n  let d = Number(b[0]) * Number(b[1])\n  let res = m / n\n  if (d === 0) {\n    return true\n  }\n  if (d === Infinity) {\n    return false\n  }\n  if (d === -Infinity) {\n    return false\n  }\n  return res\n}\n\nmodule.exports = simplify\n\n},{}],9:[function(require,module,exports){\n/*\n  You are given a string of numbers and a target number as input. Your task is to find the\n  largest number that is a multiple of the target number. For example, the string \"1/3\"\n  should return 3, and the string \"1/4\" should return 4.\n\n  Your function should return true if and only if the target number is a multiple of\n  the numbers in the string.\n\n  Your function should return false if and only if the target number is not a multiple of\n  the numbers in the string.\n\n  Examples:\n\n  targetNumber(\"1/3\", 3) = true\n  targetNumber(\"1/3\", 4) = false\n  targetNumber(\"1/3\", 5) = false\n  targetNumber(\"1/3\", 6) = false\n  targetNumber(\"1/3\", 7) = false\n  targetNumber(\"1/3\", 8) = false\n  targetNumber(\"1/3\", 9) = false\n  targetNumber(\"1/3\", 10) = false\n  targetNumber(\"1/3\", 11) = false\n  targetNumber(\"1/3\", 12) = false\n  targetNumber(\"1/3\", 13) = false\n  targetNumber(\"1/3\", 14) = false\n  targetNumber(\"1/3\", 15) = false\n  targetNumber(\"1/3\", 16) = false\n  targetNumber(\"1/3\", 17) = false\n  targetNumber(\"1/3\", 18) = false\n  targetNumber(\"1/3\", 19) = false\n  targetNumber(\"1/3\", 20) = false\n  targetNumber(\"1/3\", 21) = false\n  targetNumber(\"1/3\", 22) = false\n  targetNumber(\"1/3\", 23) = false\n  targetNumber(\"1/3\", 24) = false\n  targetNumber(\"1/3\", 25) = false\n  targetNumber(\"1/3\", 26) = false\n  targetNumber(\"1/3\", 27) = false\n  targetNumber(\"1/3\", 28) = false\n  targetNumber(\"1/3\", 29) = false\n  targetNumber(\"1/3\", 30) = false\n  targetNumber(\"1/3\", 31) = false\n  targetNumber(\"1/3\", 32) = false\n  targetNumber(\"1/3\", 33) = false\n  targetNumber(\"1/3\", 34) = false\n  targetNumber(\"1/3\", 35) = false\n  targetNumber(\"1/3\", 36) = false\n  targetNumber(\"1/3\", 37) = false\n  targetNumber(\"1/3\", 38) = false\n  targetNumber(\"1/3\", 39) = false\n  targetNumber(\"1/3\", 40) = false\n  targetNumber(\"1/3\", 41) = false\n  targetNumber(\"1/3\", 42) = false\n  targetNumber(\"1/3\", 43) = false\n  targetNumber(\"1/3\", 44) = false\n  targetNumber(\"1/3\", 45) = false\n  targetNumber(\"1/3\", 46) = false\n  targetNumber(\"1/3\", 47) = false\n  targetNumber(\"1/3\", 48) = false\n  targetNumber(\"1/3\", 49) = false\n  targetNumber(\"1/3\", 50) = false\n  targetNumber(\"1/3\", 51) = false\n  targetNumber(\"1/3\", 52) = false\n  targetNumber(\"1/3\", 53) = false\n  targetNumber(\"1/3\", 54) = false\n  targetNumber(\"1/3\", 55) = false\n  targetNumber(\"1/3\", 56) = false\n  targetNumber(\"1/3\", 57) = false\n  targetNumber(\"1/3\", 58) = false\n  targetNumber(\"1/3\", 59) = false\n  targetNumber(\"1/3\", 60) = false\n  targetNumber(\"1/3\", 61) = false\n  targetNumber(\"1/3\", 62) = false\n  targetNumber(\"1/3\", 63) = false\n  targetNumber(\"1/3\", 64) = false\n  targetNumber(\"1/3\", 65) = false\n  targetNumber(\"1/3\", 66) = false\n  targetNumber(\"1/3\", 67) = false\n  targetNumber(\"1/3\", 68) = false\n  targetNumber(\"1/3\", 69) = false\n  targetNumber(\"1/3\", 70) = false\n  targetNumber(\"1/3\", 71) = false\n  targetNumber(\"1/3\", 72) = false\n  targetNumber(\"1/3\", 73) = false\n  targetNumber(\"1/3\", 74) = false\n  targetNumber(\"1/3\", 75) = false\n  targetNumber(\"1/3\", 76) = false\n  targetNumber(\"1/3\", 77) = false\n  targetNumber(\"1/3\", 78) = false\n  targetNumber(\"1/3\", 79) = false\n  targetNumber(\"1/3\", 80) = false\n  targetNumber(\"1/3\", 81) = false\n  targetNumber(\"1/3\", 82) = false\n  targetNumber(\"1/3\", 83) = false\n  targetNumber(\"1/3\", 84) = false\n  targetNumber(\"1/3\", 85) = false\n  targetNumber(\"1/3\", 86) = false\n  targetNumber(\"1/3\", 87) = false\n  targetNumber(\"1/3\", 88) = false\n  targetNumber(\"1/3\", 89) = false\n  targetNumber(\"1/3\", 90) = false\n  targetNumber(\"1/3\", 91) = false\n  targetNumber(\"1/3\", 92) = false\n  targetNumber(\"1/3\", 93) = false\n  targetNumber(\"1/3\", 94) = false\n  targetNumber(\"1/3\", 95) = false\n  targetNumber(\"1/3\", 96) = false\n  targetNumber(\"1/3\", 97) = false\n  targetNumber(\"1/3\", 98) = false\n  targetNumber(\"1/3\", 99) = false\n  targetNumber(\"1/3\", 100) = false\n  targetNumber(\"1/3\", 101) = false\n  targetNumber(\"1/3\", 102) = false\n  targetNumber(\"1/3\", 103) = false\n  targetNumber(\"1/3\", 104) = false\n  targetNumber(\"1/3\", 105) = false\n  targetNumber(\"1/3\", 106) = false\n  targetNumber(\"1/3\", 107) = false\n  targetNumber(\"1/3\", 108) = false\n  targetNumber(\"1/3\", 109) = false\n  targetNumber(\"1/3\", 110) = false\n  targetNumber(\"1/3\", 111) = false\n  targetNumber(\"1/3\", 112) = false\n  targetNumber(\"1/3\", 113) = false\n  targetNumber(\"1/3\", 114) = false\n  targetNumber(\"1/3\", 115) = false\n  targetNumber(\"1/3\", 116) = false\n  targetNumber(\"1/3\", 117) = false\n  targetNumber(\"1/3\", 118) = false\n  targetNumber(\"1/3\", 119) = false\n  targetNumber(\"1/3\", 120) = false\n  targetNumber(\"1/3\", 121) = false\n  targetNumber(\"1/3\", 122) = false\n  targetNumber(\"1/3\", 123) = false\n  targetNumber(\"1/3\", 124) = false\n  targetNumber(\"1/3\", 125) = false\n  targetNumber(\"1/3\", 12"}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\n\nconst orderByPoints = (nums) => {\n  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n", "canonical_solution": "      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "partial": "/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      # print('@@this is the line to split##')\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "gc": "<|endoftext|>/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\n\nconst orderByPoints = (nums) => {\n  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      while (u >= 10) {\n        n += u % 10;\n        u = (u - u % 10) / 10;\n      }\n      if (m > n) {\n        let tmp = n\n        n = m\n        m = tmp\n      }\n      if (m === n) {\n        if (m === 0) p[k] = p[k + 1]\n        p[k + 1] = p[k]\n        p[k] = d\n      } else {\n        let tmp = n\n        n = m\n        m = tmp\n      }\n    }\n  }\n  return p\n}\n\n/*\n  Write a function which sorts the given list of integers\n  in descending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-11, -11, -11, -11, 11]\n  >>> orderByPoints([]) == []\n  */\n\nconst orderByPointsDesc = (nums) => {\n  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = -1\n      let u = 1\n      if (h < 0) { y = 1; h = -h; }\n      if (d < 0) { u = 1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      while (u >= 10) {\n        n += u % 10;\n        u = (u - u % 10) / 10;\n      }\n      if (m > n) {\n        let tmp = n\n        n = m\n        m = tmp\n      }\n      if (m === n) {\n        if (m === 0) p[k] = p[k + 1]\n        p[k + 1] = p[k]\n        p[k] = d\n      } else {\n        let tmp = n\n        n = m\n        m = tmp\n      }\n    }\n  }\n  return p\n}\n\n/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-11, -11, -11, -11, 11]\n  >>> orderByPointsDesc([]) == []\n  */\n\nconst orderByPointsDescDesc = (nums) => {\n  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      while (u >= 10) {\n        n += u % 10;\n        u = (u - u % 10) / 10;\n      }\n      if (m > n) {\n        let tmp = n\n        n = m\n        m = tmp\n      }\n      if (m === n) {\n        if (m === 0) p[k] = p[k + 1]\n        p[k + 1] = p[k]\n        p[k] = d\n      } else {\n        let tmp = n\n        n = m\n        m = tmp\n      }\n    }\n  }\n  return p\n}\n\n/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-11, -11, -11, -11, 11]\n  >>> orderByPointsDescDesc([]) == []\n  */\n\nconst orderByPointsDescDescDesc = (nums) => {\n  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      while (u >= 10) {\n        n += u % 10;\n        u = (u - u % 10) / 10;\n      }\n      if (m > n) {\n        let tmp = n\n        n = m\n        m = tmp\n      }\n      if (m === n) {\n        if (m === 0) p[k] = p[k + 1]\n        p[k + 1] = p[k]\n        p[k] = d\n      } else {\n        let tmp = n\n        n = m\n        m = tmp\n      }\n    }\n  }\n  return p\n}\n\n/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-11, -11, -11, -11, 11]\n  >>> orderByPointsDescDescDesc([]) == []\n  */\n\nconst orderByPointsDescDescDesc = (nums) => {\n  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      while (u >= 10) {\n        n += u % 10;\n        u = (u - u % 10) / 10;\n      }\n      if (m > n) {\n        let tmp = n\n        n = m\n        m = tmp\n      }\n      if (m === n) {\n        if (m === 0) p[k] = p[k + 1]\n        p[k + 1] = p[k]\n        p[k] = d\n      } else {\n        let tmp = n\n        n = m\n        m = tmp\n      }\n    }\n  }\n  return p\n}\n\n/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-11, -11, -11, -11, 11]\n  >>> orderByPointsDescDescDesc([]) == []\n  */"}
{"task_id": "JavaScript/146", "prompt": "/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\n\nconst specialFilter = (nums) => {\n  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n", "canonical_solution": "      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "partial": "/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      # print('@@this is the line to split##')\n      p++\n    }\n  }\n  return p\n}\n\n", "gc": "<|endoftext|>/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\n\nconst specialFilter = (nums) => {\n  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are even (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\n\nconst specialFilter = (nums) => {\n  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 0 && Number(y[y.length - 1]) % 2 == 0) {\n      p++\n    }\n  }\n  return p\n}\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\n\nconst specialFilter = (nums) => {\n  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are even (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\n\nconst specialFilter = (nums) => {\n  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 0 && Number(y[y.length - 1]) % 2 == 0) {\n      p++\n    }\n  }\n  return p\n}\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\n\nconst specialFilter = (nums) => {\n  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are even (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\n\nconst specialFilter = (nums) => {\n  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\n\nconst specialFilter = (nums) => {\n  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are even (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\n\nconst specialFilter = (nums) => {\n  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\n\nconst specialFilter = (nums) => {\n  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are even (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\n\nconst specialFilter = (nums) => {\n  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\n\nconst specialFilter = (nums) => {\n  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are even (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15"}
{"task_id": "JavaScript/147", "prompt": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\n\nconst getMaxTriples = (n) => {\n  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n", "canonical_solution": "      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "partial": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      # print('@@this is the line to split##')\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "gc": "<|endoftext|>/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\n\nconst getMaxTriples = (n) => {\n  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      if (y[i] % y[j] === 0 && y[i] % y[j] === 0 && y[j] % y[i] === 0) {\n        u = y[i]\n      }\n    }\n  }\n  return u\n}\n\n/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\n\nconst getMaxTriples2 = (n) => {\n  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      if (y[i] % y[j] === 0 && y[i] % y[j] === 0 && y[j] % y[i] === 0) {\n        u = y[i]\n      }\n    }\n  }\n  return u\n}\n\n/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\n\nconst getMaxTriples3 = (n) => {\n  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      if (y[i] % y[j] === 0 && y[i] % y[j] === 0 && y[j] % y[i] === 0) {\n        u = y[i]\n      }\n    }\n  }\n  return u\n}\n\n/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\n\nconst getMaxTriples4 = (n) => {\n  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      if (y[i] % y[j] === 0 && y[i] % y[j] === 0 && y[j] % y[i] === 0) {\n        u = y[i]\n      }\n    }\n  }\n  return u\n}\n\n/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\n\nconst getMaxTriples5 = (n) => {\n  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      if (y[i] % y[j] === 0 && y[i] % y[j] === 0 && y[j] % y[i] === 0) {\n        u = y[i]\n      }\n    }\n  }\n  return u\n}\n\n/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\n\nconst getMaxTriples6 = (n) => {\n  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      if (y[i] % y[j] === 0 && y[i] % y[j] === 0 && y[j] % y[i] === 0) {\n        u = y[i]\n      }\n    }\n  }\n  return u\n}\n\n/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\n\nconst getMaxTriples7 = (n) => {\n  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      if (y[i] % y[j] === 0 && y[i] % y[j] === 0 && y[j] % y[i] === 0) {\n        u = y[i]\n      }\n    }\n  }\n  return u\n}\n\n/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n"}
{"task_id": "JavaScript/148", "prompt": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\n\nconst bf = (planet1, planet2) => {\n  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n", "canonical_solution": "  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "partial": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  # print('@@this is the line to split##')\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "gc": "<|endoftext|>/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\n\nconst bf = (planet1, planet2) => {\n  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 && hi == -1) {\n    return []\n  }\n  let mid = Math.floor((lo + hi) / 2)\n  let x = y[mid]\n  let y = y[mid]\n  let z = y[mid]\n  let t = []\n  while ((lo < hi) && (y < z)) {\n    t.push(y)\n    y = y[mid]\n    z = y[mid]\n    mid = Math.floor((lo + hi) / 2)\n    x = y[mid]\n    y = y[mid]\n    z = y[mid]\n  }\n  return t\n}\n\n/* Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the distance to the sun, with each planet name in the tuple being the first\n  element of the tuple.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  distance(\"Mercury\", \"Venus\") ==> 3\n  distance(\"Earth\", \"Mercury\") ==> 2\n  distance(\"Mercury\", \"Earth\") ==> 1\n  distance(\"Earth\", \"Venus\") ==> 0\n  */\n\nconst distance = (planet1, planet2) => {\n  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 && hi == -1) {\n    return 0\n  }\n  let mid = Math.floor((lo + hi) / 2)\n  let x = y[mid]\n  let y = y[mid]\n  let z = y[mid]\n  let t = []\n  while ((lo < hi) && (y < z)) {\n    t.push(y)\n    y = y[mid]\n    z = y[mid]\n    mid = Math.floor((lo + hi) / 2)\n    x = y[mid]\n    y = y[mid]\n    z = y[mid]\n  }\n  return t.length\n}\n\n/* Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the distance to the sun, with each planet name in the tuple being the first\n  element of the tuple.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  distance(\"Mercury\", \"Earth\") ==> 2\n  distance(\"Earth\", \"Mercury\") ==> 1\n  distance(\"Earth\", \"Venus\") ==> 0\n  */\n\nconst distance2 = (planet1, planet2) => {\n  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 && hi == -1) {\n    return 0\n  }\n  let mid = Math.floor((lo + hi) / 2)\n  let x = y[mid]\n  let y = y[mid]\n  let z = y[mid]\n  let t = []\n  while ((lo < hi) && (y < z)) {\n    t.push(y)\n    y = y[mid]\n    z = y[mid]\n    mid = Math.floor((lo + hi) / 2)\n    x = y[mid]\n    y = y[mid]\n    z = y[mid]\n  }\n  return t.length\n}\n\n/* Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the distance to the sun, with each planet name in the tuple being the first\n  element of the tuple.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  distance2(\"Mercury\", \"Earth\") ==> 2\n  distance2(\"Earth\", \"Mercury\") ==> 1\n  distance2(\"Earth\", \"Venus\") ==> 0\n  */\n\nconst distance3 = (planet1, planet2) => {\n  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 && hi == -1) {\n    return 0\n  }\n  let mid = Math.floor((lo + hi) / 2)\n  let x = y[mid]\n  let y = y[mid]\n  let z = y[mid]\n  let t = []\n  while ((lo < hi) && (y < z)) {\n    t.push(y)\n    y = y[mid]\n    z = y[mid]\n    mid = Math.floor((lo + hi) / 2)\n    x = y[mid]\n    y = y[mid]\n    z = y[mid]\n  }\n  return t.length\n}\n\n/* Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the distance to the sun, with each planet name in the tuple being the first\n  element of the tuple.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  "}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\n\nconst sortedListSum = (lst) => {\n  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n", "canonical_solution": "            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "partial": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            # print('@@this is the line to split##')\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "gc": "<|endoftext|>/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\n\nconst sortedListSum = (lst) => {\n  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n        }\n      }\n      if (f) {\n        p[k].splice(k, 1)\n        p[k + 1].splice(k, 1)\n      }\n    }\n  }\n  return p.concat(lst)\n}\n\nconst sortedListSort = (lst) => {\n  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n        }\n      }\n      if (f) {\n        p[k].splice(k, 1)\n        p[k + 1].splice(k, 1)\n      }\n    }\n  }\n  return p.concat(lst)\n}\n\nconst sortedListIntersect = (lst) => {\n  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n        }\n      }\n      if (f) {\n        p[k].splice(k, 1)\n        p[k + 1].splice(k, 1)\n      }\n    }\n  }\n  return p.concat(lst)\n}\n\nconst sortedListDifference = (lst) => {\n  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n        }\n      }\n      if (f) {\n        p[k].splice(k, 1)\n        p[k + 1].splice(k, 1)\n      }\n    }\n  }\n  return p.concat(lst)\n}\n\nconst sortedListDifferenceBy = (lst) => {\n  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n        }\n      }\n      if (f) {\n        p[k].splice(k, 1)\n        p[k + 1].splice(k, 1)\n      }\n    }\n  }\n  return p.concat(lst)\n}\n\nconst sortedListDifferenceWith = (lst) => {\n  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n        }\n      }\n      if (f) {\n        p[k].splice(k, 1)\n        p[k + 1].splice(k, 1)\n      }\n    }\n  }\n  return p.concat(lst)\n}\n\nconst sortedListIntersection = (lst) => {\n  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n        }\n      }\n      if (f) {\n        p[k].splice(k, 1)\n        p[k + 1].splice(k, 1)\n      }\n    }\n  }\n  return p.concat(lst)\n}\n\nconst sortedListSymDifference = (lst) => {\n  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n        }\n      }\n      if (f) {\n        p[k].splice(k, 1)\n        p[k + 1].splice(k, 1)\n      }\n    }\n  }\n  return p.concat(lst)\n}\n\nconst sortedListSymDifferenceWith = (lst) => {\n  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n"}
{"task_id": "JavaScript/150", "prompt": "/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\n\nconst xOrY = (n, x, y) => {\n  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n", "canonical_solution": "    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "partial": "/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    # print('@@this is the line to split##')\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "gc": "<|endoftext|>/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\n\nconst xOrY = (n, x, y) => {\n  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (n % i == 0) { return y }\n  }\n  return x\n}\n\n/*\n  A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\n\nconst xOrY = (n, x, y) => {\n  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (n % i == 0) { return x }\n  }\n  return y\n}\n\n/*\n  A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\n\nconst xOrY = (n, x, y) => {\n  let len = n\n  if (len == 1 || len == 0) { return x }\n  for (let i = 2; i * i <= len; i++) {\n    if (n % i == 0) { return y }\n  }\n  return x\n}\n\n/*\n  A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\n\nconst xOrY = (n, x, y) => {\n  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (n % i == 0) { return x }\n  }\n  return x\n}\n\n/*\n  A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\n\nconst xOrY = (n, x, y) => {\n  let len = n\n  if (len == 1 || len == 0) { return x }\n  for (let i = 2; i * i <= len; i++) {\n    if (n % i == 0) { return y }\n  }\n  return x\n}\n\n/*\n  A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\n\nconst xOrY = (n, x, y) => {\n  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (n % i == 0) { return x }\n  }\n  return x\n}\n\n/*\n  A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\n\nconst xOrY = (n, x, y) => {\n  let len = n\n  if (len == 1 || len == 0) { return x }\n  for (let i = 2; i * i <= len; i++) {\n    if (n % i == 0) { return y }\n  }\n  return x\n}\n\n/*\n  A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\n\nconst xOrY = (n, x, y) => {\n  let len = n\n  if (len == 1 || len == 0) { return x }\n  for (let i = 2; i * i <= len; i++) {\n    if (n % i == 0) { return y }\n  }\n  return x\n}\n\n/*\n  A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\n\nconst xOrY = (n, x, y) => {\n  let len = n\n  if (len == 1 || len == 0) { return x }\n  for (let i = 2; i * i <= len; i++) {\n    if (n % i == 0) { return y }\n  }\n  return x\n}\n\n/*\n  A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\n\nconst xOrY = (n, x, y) => {\n  let len = n\n  if (len == 1 || len == 0) { return x }\n  for (let i = 2; i * i <= len; i++) {\n    if (n % i == 0) { return y }\n  }\n  return x\n}\n\n/*\n  A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\n\nconst xOrY = (n, x, y) => {\n  let len = n\n  if (len == 1 || len == 0) { return x }\n  for (let i = 2; i * i <= len; i++) {\n    if (n % i == 0) { return y }\n  }\n  return x\n}\n\n/*\n  A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\n\nconst xOrY = (n, x, y) => {\n  let len = n\n  if (len == 1 || len == 0) { return x }\n  for (let i = 2; i * i <= len; i++) {\n    if (n % i == 0) { return y }\n  }\n  return x\n}\n\n/*\n  A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\n\nconst xOrY = (n, x, y) => {\n  let len = n\n  if (len == 1 || len == 0) { return x }\n  for (let i = 2; i * i <= len; i++) {\n    if (n % i == 0) { return y }\n  }\n  return x\n}\n\n/*\n  A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\n\nconst xOrY = (n, x, y) => {\n  let len = n\n  if (len == 1 || len == 0) { return x }\n  for (let i = 2; i * i <= len; i++) {\n    if (n % i == 0) { return y }\n  }\n  return x\n}\n\n/*\n  A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\n\nconst xOrY = (n, x, y) => {\n  let len = n\n  if (len == 1 || len == 0) { return x }\n  for (let i = 2; i * i <= len; i++) {\n    if (n % i == 0) { return y }\n  }\n  return x\n}\n\n/*\n  A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\n\nconst xOrY = (n, x, y) => {\n  let len = n\n  if (len"}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\n\nconst doubleTheDifference = (lst) => {\n  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n", "canonical_solution": "    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "partial": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n      # print('@@this is the line to split##')\n    }\n  }\n  return p\n}\n\n", "gc": "<|endoftext|>/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\n\nconst doubleTheDifference = (lst) => {\n  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are even. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 0 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\n\nconst doubleTheDifference = (lst) => {\n  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are even. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 0 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\n\nconst doubleTheDifference = (lst) => {\n  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are even. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 0 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\n\nconst doubleTheDifference = (lst) => {\n  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are even. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 0 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\n\nconst doubleTheDifference = (lst) => {\n  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are even. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 0 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\n\nconst doubleTheDifference = (lst) => {\n  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are even. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 0 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\n\nconst doubleTheDifference = (lst) => {\n  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are even. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 0 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\n\nconst doubleTheDifference = (lst) => {\n  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are even. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 0 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\n\nconst doubleTheDifference = (lst) => {\n  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are even. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 0 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\n\nconst doubleTheDifference = (lst) => {\n  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are even. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 0 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\n\nconst doubleTheDifference = (lst) => {\n  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are even. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 0 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\n\nconst doubleTheDifference = (lst) => {\n  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are even. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 0 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81"}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\n\nconst compare = (game, guess) => {\n  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n", "canonical_solution": " game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "partial": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n # print('@@this is the line to split##')\n game[i]=-game[i];  }\n  return game\n}\n\n", "gc": "<|endoftext|>/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\n\nconst compare = (game, guess) => {\n  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n     return [0,0,0]\n  }\n  return [Math.abs(game[0]-game[1]),Math.abs(game[1]-game[2]),Math.abs(game[2]-game[3])]\n}\n\n/*\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n"}
{"task_id": "JavaScript/153", "prompt": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\n\nconst strongestExtension = (class_name, extensions) => {\n  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n", "canonical_solution": "    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "partial": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n      # print('@@this is the line to split##')\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "gc": "<|endoftext|>/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\n\nconst strongestExtension = (class_name, extensions) => {\n  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n      if (k == 46) { y = -y }\n      if (k == 47) { y = -y }\n      if (k == 48) { y = -y }\n      if (k == 49) { y = -y }\n      if (k == 50) { y = -y }\n      if (k == 51) { y = -y }\n      if (k == 52) { y = -y }\n      if (k == 53) { y = -y }\n      if (k == 54) { y = -y }\n      if (k == 55) { y = -y }\n      if (k == 56) { y = -y }\n      if (k == 57) { y = -y }\n      if (k == 58) { y = -y }\n      if (k == 59) { y = -y }\n      if (k == 60) { y = -y }\n      if (k == 61) { y = -y }\n      if (k == 62) { y = -y }\n      if (k == 63) { y = -y }\n      if (k == 64) { y = -y }\n      if (k == 65) { y = -y }\n      if (k == 66) { y = -y }\n      if (k == 67) { y = -y }\n      if (k == 68) { y = -y }\n      if (k == 69) { y = -y }\n      if (k == 70) { y = -y }\n      if (k == 71) { y = -y }\n      if (k == 72) { y = -y }\n      if (k == 73) { y = -y }\n      if (k == 74) { y = -y }\n      if (k == 75) { y = -y }\n      if (k == 76) { y = -y }\n      if (k == 77) { y = -y }\n      if (k == 78) { y = -y }\n      if (k == 79) { y = -y }\n      if (k == 80) { y = -y }\n      if (k == 81) { y = -y }\n      if (k == 82) { y = -y }\n      if (k == 83) { y = -y }\n      if (k == 84) { y = -y }\n      if (k == 85) { y = -y }\n      if (k == 86) { y = -y }\n      if (k == 87) { y = -y }\n      if (k == 88) { y = -y }\n      if (k == 89) { y = -y }\n      if (k == 90) { y = -y }\n      if (k == 91) { y = -y }\n      if (k == 92) { y = -y }\n      if (k == 93) { y = -y }\n      if (k == 94) { y = -y }\n      if (k == 95) { y = -y }\n      if (k == 96) { y = -y }\n      if (k == 97) { y = -y }\n      if (k == 98) { y = -y }\n      if (k == 99) { y = -y }\n      if (k == 100) { y = -y }\n      if (k == 101) { y = -y }\n      if (k == 102) { y = -y }\n      if (k == 103) { y = -y }\n      if (k == 104) { y = -y }\n      if (k == 105) { y = -y }\n      if (k == 106) { y = -y }\n      if (k == 107) { y = -y }\n      if (k == 108) { y = -y }\n      if (k == 109) { y = -y }\n      if (k == 110) { y = -y }\n      if (k == 111) { y = -y }\n      if (k == 112) { y = -y }\n      if (k == 113) { y = -y }\n      if (k == 114) { y = -y }\n      if (k == 115) { y = -y }\n      if (k == 116) { y = -y }\n      if (k == 117) { y = -y }\n      if (k == 118) { y = -y }\n      if (k == 119) { y = -y }\n      if (k == 120) { y = -y }\n      if (k == 121) { y = -y }\n      if (k == 122) { y = -y }\n      if (k == 123) { y = -y }\n      if (k == 124) { y = -y }\n      if (k == 125) { y = -y }\n      if (k == 126) { y = -y }\n      if (k == 127) { y = -y }\n      if (k == 128) { y = -y }\n      if (k == 129) { y = -y }\n      if (k == 130) { y = -y }\n      if (k == 131) { y = -y }\n      if (k == 132) { y = -y }\n      if (k == 133) { y = -y }\n      if (k == 134) { y = -y }\n      if (k == 135) { y = -y }\n      if (k == 136) { y = -y }\n      if (k == 137) { y = -y }\n      if (k == 138) { y = -y }\n      if (k == 139) { y = -y }\n      if (k == 140) { y = -y }\n      if (k == 141) { y = -y }\n      if (k == 142) { y = -y }\n      if (k == 143) { y = -y }\n      if (k == 144) { y = -y }\n      if (k == 145) { y = -y }\n      if (k == 146) { y = -y }\n      if (k == 147) { y = -y }\n      if (k == 148) { y = -y }\n      if (k == 149) { y = -y }\n      if (k == 150) { y = -y }\n      if (k == 151) { y = -y }\n      if (k == 152) { y = -y }\n      if (k == 153) { y = -y }\n      if (k == 154) { y = -y }\n      if (k == 155) { y = -y }\n      if (k == 156) { y = -y }\n      if (k == 157) { y = -y }\n      if (k == 158) { y = -y }\n      if (k == 159) { y = -y }\n      if (k == 160) { y = -y }\n      if (k == 161) { y = -y }\n      if (k == 162) { y = -y }\n      if (k == 163) { y = -y }\n      if (k == 164) { y = -y }\n      if (k == 165) { y = -y }\n      if (k == 166) { y = -y }\n      if (k == 167) { y = -y }\n      if (k == 168) { y = -y }"}
{"task_id": "JavaScript/154", "prompt": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycpatternCheck(\"abcd\",\"abd\") => false\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => true\n  */\n\nconst cycpatternCheck = (a, b) => {\n  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n", "canonical_solution": "      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "partial": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycpatternCheck(\"abcd\",\"abd\") => false\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => true\n  */\nconst cycpatternCheck = (a, b) => {\n  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n        # print('@@this is the line to split##')\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "gc": "<|endoftext|>/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycpatternCheck(\"abcd\",\"abd\") => false\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => true\n  */\n\nconst cycpatternCheck = (a, b) => {\n  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k]!= pat[j + k]) { y = 0 }\n      }\n      if (y!= 0) { return false }\n    }\n  }\n  return true\n}\n\nmodule.exports = cycpatternCheck;\n\n},{}],3:[function(require,module,exports){\nconst cycpatternCheck = require('./cycpatternCheck');\n\nconst cycpatternCheck2 = (a, b) => {\n  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k]!= pat[j + k]) { y = 0 }\n      }\n      if (y!= 0) { return false }\n    }\n  }\n  return true\n}\n\nmodule.exports = cycpatternCheck2;\n\n},{\"./cycpatternCheck\":2}],4:[function(require,module,exports){\nconst cycpatternCheck = require('./cycpatternCheck');\n\nconst cycpatternCheck3 = (a, b) => {\n  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k]!= pat[j + k]) { y = 0 }\n      }\n      if (y!= 0) { return false }\n    }\n  }\n  return true\n}\n\nmodule.exports = cycpatternCheck3;\n\n},{\"./cycpatternCheck\":2}],5:[function(require,module,exports){\nconst cycpatternCheck = require('./cycpatternCheck');\n\nconst cycpatternCheck4 = (a, b) => {\n  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k]!= pat[j + k]) { y = 0 }\n      }\n      if (y!= 0) { return false }\n    }\n  }\n  return true\n}\n\nmodule.exports = cycpatternCheck4;\n\n},{\"./cycpatternCheck\":2}],6:[function(require,module,exports){\nconst cycpatternCheck = require('./cycpatternCheck');\n\nconst cycpatternCheck5 = (a, b) => {\n  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k]!= pat[j + k]) { y = 0 }\n      }\n      if (y!= 0) { return false }\n    }\n  }\n  return true\n}\n\nmodule.exports = cycpatternCheck5;\n\n},{\"./cycpatternCheck\":2}],7:[function(require,module,exports){\nconst cycpatternCheck = require('./cycpatternCheck');\n\nconst cycpatternCheck6 = (a, b) => {\n  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k]!= pat[j + k]) { y = 0 }\n      }\n      if (y!= 0) { return false }\n    }\n  }\n  return true\n}\n\nmodule.exports = cycpatternCheck6;\n\n},{\"./cycpatternCheck\":2}],8:[function(require,module,exports){\nconst cycpatternCheck = require('./cycpatternCheck');\n\nconst cycpatternCheck7 = (a, b) => {\n  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k]!= pat[j + k]) { y = 0 }\n      }\n      if (y!= 0) { return false }\n    }\n  }\n  return true\n}\n\nmodule.exports = cycpatternCheck7;\n\n},{\"./cycpatternCheck\":2}],9:[function(require,module,exports){\nconst cycpatternCheck = require('./cycpatternCheck');\n\nconst cycpatternCheck8 = (a, b) => {\n  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k]!= pat[j + k]) { y = 0 }\n      }\n      if (y!= 0) { return false }\n    }\n  }\n  return true\n}\n\nmodule.exports = cycpatternCheck8;\n\n},{\"./cycpatternCheck\":2}],10:[function(require,module,exports){\nconst cycpatternCheck = require('./cycpatternCheck');\n\nconst cycpatternCheck9 = (a, b) => {\n  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k]!= pat[j + k]) { y = 0 }\n      }\n      if (y!= 0) { return false }\n    }\n  }\n  return true\n}\n\nmodule.exports = cycpatternCheck9;\n\n},{\"./cycpatternCheck\":2}],11:[function(require,module,exports){\nconst cycpatternCheck = require('./cycpatternCheck');\n\nconst cycpatternCheck10 = (a, b) => {\n  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k]!= pat[j + k]) { y = 0 }\n      }\n      if (y!= 0) { return false }\n    }\n  }\n  return true\n}\n\nmodule.exports = cycpatternCheck10;\n\n},{\"./cycpatternCheck\":2}],12:[function(require,module,exports){\nconst cycpatternCheck = require('./cycpatternCheck');\n\nconst cycpatternCheck11 = (a, b) => {\n  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k]!= pat[j + k]) { y = 0 }\n      }\n      if (y!= 0) { return false }\n    }\n  }\n  return true\n}\n\nmodule.exports = cycpatternCheck11;\n\n},{\"./cycpatternCheck\":2}],13:[function(require,module,exports){\nconst cycpatternCheck = require('./cycpatternCheck');\n\nconst cycpatternCheck12 = (a, b) => {\n  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k]!= pat[j + k]) { y = 0 }\n      }\n      if (y!= 0) { return false }\n    }\n  }\n  return true\n}\n\nmodule.exports = cycpatternCheck12;\n\n},{\"./"}
{"task_id": "JavaScript/155", "prompt": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\n\nconst evenOddCount = (num) => {\n  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n", "canonical_solution": "    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "partial": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    # print('@@this is the line to split##')\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "gc": "<|endoftext|>/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\n\nconst evenOddCount = (num) => {\n  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    num = Math.floor(num / 2)\n  }\n  while (e > 0) {\n    if (e % 2 == 0) { o++ }\n    e = Math.floor(e / 2)\n  }\n  return [o, e]\n}\n\n/*Given a string. return a tuple that has the number of letters in the string and their frequency in the string.\n\n   Example:\n      letterFrequency('abba') ==> (2, 3)\n      letterFrequency('abb') ==> (1, 2)\n      letterFrequency('ab') ==> (1, 1)\n  */\n\nconst letterFrequency = (str) => {\n  let letters = {}\n  let letterCount = 0\n  let letterFrequency = 0\n  for (let i = 0; i < str.length; i++) {\n    let letter = str[i]\n    if (letter in letters) {\n      letters[letter]++\n    } else {\n      letters[letter] = 1\n    }\n  }\n  for (let letter in letters) {\n    if (letters[letter] > 1) {\n      letterFrequency++\n    }\n  }\n  return [letterCount, letterFrequency]\n}\n\n/*Given a string. return a tuple that has the number of words in the string and their frequency in the string.\n\n   Example:\n      wordFrequency('abba') ==> (2, 3)\n      wordFrequency('abb') ==> (1, 2)\n      wordFrequency('ab') ==> (1, 1)\n  */\n\nconst wordFrequency = (str) => {\n  let words = {}\n  let wordCount = 0\n  let wordFrequency = 0\n  for (let i = 0; i < str.length; i++) {\n    let word = str[i]\n    if (word in words) {\n      words[word]++\n    } else {\n      words[word] = 1\n    }\n  }\n  for (let word in words) {\n    if (words[word] > 1) {\n      wordFrequency++\n    }\n  }\n  return [wordCount, wordFrequency]\n}\n\n/*Given a string. return a tuple that has the number of uppercase letters in the string and their frequency in the string.\n\n   Example:\n      uppercaseFrequency('abba') ==> (2, 3)\n      uppercaseFrequency('abb') ==> (1, 2)\n      uppercaseFrequency('ab') ==> (1, 1)\n  */\n\nconst uppercaseFrequency = (str) => {\n  let upperCase = {}\n  let upperCaseCount = 0\n  let upperCaseFrequency = 0\n  for (let i = 0; i < str.length; i++) {\n    let upperCaseLetter = str[i]\n    if (upperCaseLetter in upperCase) {\n      upperCase[upperCaseLetter]++\n    } else {\n      upperCase[upperCaseLetter] = 1\n    }\n  }\n  for (let upperCaseLetter in upperCase) {\n    if (upperCase[upperCaseLetter] > 1) {\n      upperCaseFrequency++\n    }\n  }\n  return [upperCaseCount, upperCaseFrequency]\n}\n\n/*Given a string. return a tuple that has the number of lowercase letters in the string and their frequency in the string.\n\n   Example:\n      lowercaseFrequency('abba') ==> (2, 3)\n      lowercaseFrequency('abb') ==> (1, 2)\n      lowercaseFrequency('ab') ==> (1, 1)\n  */\n\nconst lowercaseFrequency = (str) => {\n  let lowercase = {}\n  let lowercaseCount = 0\n  let lowercaseFrequency = 0\n  for (let i = 0; i < str.length; i++) {\n    let lowercaseLetter = str[i]\n    if (lowercaseLetter in lowercase) {\n      lowercase[lowercaseLetter]++\n    } else {\n      lowercase[lowercaseLetter] = 1\n    }\n  }\n  for (let lowercaseLetter in lowercase) {\n    if (lowercase[lowercaseLetter] > 1) {\n      lowercaseFrequency++\n    }\n  }\n  return [lowercaseCount, lowercaseFrequency]\n}\n\n/*Given a string. return a tuple that has the number of numbers in the string and their frequency in the string.\n\n   Example:\n      numberFrequency('abba') ==> (2, 3)\n      numberFrequency('abb') ==> (1, 2)\n      numberFrequency('ab') ==> (1, 1)\n  */\n\nconst numberFrequency = (str) => {\n  let numbers = {}\n  let numberCount = 0\n  let numberFrequency = 0\n  for (let i = 0; i < str.length; i++) {\n    let number = str[i]\n    if (number in numbers) {\n      numbers[number]++\n    } else {\n      numbers[number] = 1\n    }\n  }\n  for (let number in numbers) {\n    if (numbers[number] > 1) {\n      numberFrequency++\n    }\n  }\n  return [numberCount, numberFrequency]\n}\n\n/*Given a string. return a tuple that has the number of special characters in the string and their frequency in the string.\n\n   Example:\n      specialCharacterFrequency('abba') ==> (2, 3)\n      specialCharacterFrequency('abb') ==> (1, 2)\n      specialCharacterFrequency('ab') ==> (1, 1)\n  */\n\nconst specialCharacterFrequency = (str) => {\n  let specialChars = {}\n  let specialCharCount = 0\n  let specialCharFrequency = 0\n  for (let i = 0; i < str.length; i++) {\n    let specialChar = str[i]\n    if (specialChar in specialChars) {\n      specialChars[specialChar]++\n    } else {\n      specialChars[specialChar] = 1\n    }\n  }\n  for (let specialChar in specialChars) {\n    if (specialChars[specialChar] > 1) {\n      specialCharFrequency++\n    }\n  }\n  return [specialCharCount, specialCharFrequency]\n}\n\n/*Given a string. return a tuple that has the number of special characters in the string and their frequency in the string.\n\n   Example:\n      specialCharacterFrequency('abba') ==> (2, 3)\n      specialCharacterFrequency('abb') ==> (1, 2)\n      specialCharacterFrequency('ab') ==> (1, 1)\n  */\n\nconst specialCharacterFrequency = (str) => {\n  let specialChars = {}\n  let specialCharCount = 0\n  let specialCharFrequency = 0\n  for (let i = 0; i < str.length; i++) {\n    let specialChar = str[i]\n    if (specialChar in specialChars) {\n      specialChars[specialChar]++\n    } else {\n      specialChars[specialChar] = 1\n    }\n  }\n  for (let specialChar in specialChars) {\n    if (specialChars[specialChar] > 1) {\n      specialCharFrequency++\n    }\n  }\n  return [specialCharCount, specialCharFrequency]\n}\n\n/*Given a string. return a tuple that has the number of special characters in the string and their frequency in the string.\n\n   Example:\n      specialCharacterFrequency('abba') ==> (2, 3)\n      specialCharacterFrequency('abb') ==> (1, 2)\n      specialCharacterFrequency('ab') ==> (1, 1)\n  */\n\nconst specialCharacterFrequency = (str) => {\n  let specialChars = {}\n  let specialCharCount = 0\n  let specialCharFrequency = 0\n  for (let i = 0; i < str.length; i++) {\n    let specialChar = str[i]\n    if (specialChar in specialChars) {\n      specialChars[specialChar]++\n    } else {\n      specialChars[specialChar] = 1\n    }\n  }\n  for (let specialChar in specialChars) {\n    if (specialChars[specialChar] > 1) {\n      specialCharFrequency++\n    }\n  }\n  return [specialCharCount, specialCharFrequency]\n}\n\n/*Given a string. return a tuple that has the number of special characters in the string and their frequency in the string.\n\n   Example:\n      specialCharacterFrequency('abba') ==> (2, 3)\n      specialCharacterFrequency('abb') ==> (1, 2)\n      specialCharacterFrequency('ab') ==> (1, 1)\n  */\n\nconst specialCharacterFrequency = (str) => {\n  let specialChars = {}\n  let specialCharCount = 0\n  let specialCharFrequency = 0\n  for (let i = 0; i < str.length; i++) {\n    let specialChar = str[i]\n    if (specialChar in specialChars) {\n      specialChars[specialChar]++"}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\n\nconst intToMiniRoman = (number) => {\n  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n", "canonical_solution": "    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "partial": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    # print('@@this is the line to split##')\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "gc": "<|endoftext|>/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\n\nconst intToMiniRoman = (number) => {\n  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm','m']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    res += sym[i] + div\n    i++\n  }\n  return res.toLowerCase()\n}\n\n/*\n  Given a positive integer, return its decimal equivalent as a string,\n  and if negative, its octal equivalent as a string.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToDecimal(19) == 19\n  >>> intToDecimal(152) == 152\n  >>> intToDecimal(426) == 426\n  */\n\nconst intToDecimal = (number) => {\n  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm','m']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    res += sym[i] + div.toFixed(2) + sym[i + 1]\n    i++\n  }\n  return res.toLowerCase()\n}\n\n/*\n  Given a positive integer, return its hexadecimal equivalent as a string,\n  and if negative, its octal equivalent as a string.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToHex(19) == 0x19\n  >>> intToHex(152) == 0x152\n  >>> intToHex(426) == 0x426\n  */\n\nconst intToHex = (number) => {\n  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm','m']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    res += sym[i] + div.toString(16) + sym[i + 1]\n    i++\n  }\n  return res.toLowerCase()\n}\n\n/*\n  Given a positive integer, return its octal equivalent as a string,\n  and if negative, its hexadecimal equivalent as a string.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToOctal(19) == 19\n  >>> intToOctal(152) == 152\n  >>> intToOctal(426) == 426\n  */\n\nconst intToOctal = (number) => {\n  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm','m']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    res += sym[i] + div.toString(8) + sym[i + 1]\n    i++\n  }\n  return res.toLowerCase()\n}\n\n/*\n  Given a positive integer, return its binary equivalent as a string,\n  and if negative, its octal equivalent as a string.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToBinary(19) == 0b1001\n  >>> intToBinary(152) == 0b10010\n  >>> intToBinary(426) == 0b10010\n  */\n\nconst intToBinary = (number) => {\n  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm','m']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    res += sym[i] + div.toString(2) + sym[i + 1]\n    i++\n  }\n  return res.toLowerCase()\n}\n\n/*\n  Given a positive integer, return its decimal equivalent as a string,\n  and if negative, its hexadecimal equivalent as a string.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToOctal(19) == 19\n  >>> intToOctal(152) == 152\n  >>> intToOctal(426) == 426\n  */\n\nconst intToOctal = (number) => {\n  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm','m']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    res += sym[i] + div.toString(8) + sym[i + 1]\n    i++\n  }\n  return res.toLowerCase()\n}\n\n/*\n  Given a positive integer, return its hexadecimal equivalent as a string,\n  and if negative, its binary equivalent as a string.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToBinary(19) == 0b1001\n  >>> intToBinary(152) == 0b10010\n  >>> intToBinary(426) == 0b10010\n  */\n\nconst intToBinary = (number) => {\n  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm','m']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    res += sym[i] + div.toString(2) + sym[i + 1]\n    i++\n  }\n  return res.toLowerCase()\n}\n\n/*\n  Given a positive integer, return its decimal equivalent as a string,\n  and if negative, its octal equivalent as a string.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToBinary(19) == 19\n  >>> intToBinary(152) == 152\n  >>> intToBinary(426) == 426\n  */\n\nconst intToDecimal = (number) => {\n  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm','m']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    res += sym[i] + div.toFixed(2) + sym[i + 1]\n    i++\n  }\n  return res.toLowerCase()\n}\n\n/*\n  Given a positive integer, return its hexadecimal equivalent as a string,\n  and if negative, its binary equivalent as a string.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToBinary(19) == 0b1001\n  >>> intToBinary(152) == 0b10010\n  >>> intToBinary(426) == 0b10010\n  */\n\n"}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\n\nconst rightAngleTriangle = (a, b, c) => {\n  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n", "canonical_solution": "}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "partial": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n  # print('@@this is the line to split##')\n}\n\n", "gc": "<|endoftext|>/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\n\nconst rightAngleTriangle = (a, b, c) => {\n  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\nmodule.exports = rightAngleTriangle\n\n},{}],4:[function(require,module,exports){\nconst { isNumber, isString } = require('lodash')\n\nconst isNumber = isNumber\nconst isString = isString\n\nconst isNumber = isNumber\nconst isString = isString\n\nconst isNumber = isNumber\nconst isString = isString\n\nconst isNumber = isNumber\nconst isString = isString\n\nconst isNumber = isNumber\nconst isString = isString\n\nconst isNumber = isNumber\nconst isString = isString\n\nconst isNumber = isNumber\nconst isString = isString\n\nconst isNumber = isNumber\nconst isString = isString\n\nconst isNumber = isNumber\nconst isString = isString\n\nconst isNumber = isNumber\nconst isString = isString\n\nconst isNumber = isNumber\nconst isString = isString\n\nconst isNumber = isNumber\nconst isString = isString\n\nconst isNumber = isNumber\nconst isString = isString\n\nconst isNumber = isNumber\nconst isString = isString\n\nconst isNumber = isNumber\nconst isString = isString\n\nconst isNumber = isNumber\nconst isString = isString\n\nconst isNumber = isNumber\nconst isString = isString\n\nconst isNumber = isNumber\nconst isString = isString\n\nconst isNumber = isNumber\nconst isString = isString\n\nconst isNumber = isNumber\nconst isString = isString\n\nconst isNumber = isNumber\nconst isString = isString\n\nconst isNumber = isNumber\nconst isString = isString\n\nconst isNumber = isNumber\nconst isString = isString\n\nconst isNumber = isNumber\nconst isString = isString\n\nconst isNumber = isNumber\nconst isString = isString\n\nconst isNumber = isNumber\nconst isString = isString\n\nconst isNumber = isNumber\nconst isString = isString\n\nconst isNumber = isNumber\nconst isString = isString\n\nconst isNumber = isNumber\nconst isString = isString\n\nconst isNumber = isNumber\nconst isString = isString\n\nconst isNumber = isNumber\nconst isString = isString\n\nconst isNumber = isNumber\nconst isString = isString\n\nconst isNumber = isNumber\nconst isString = isString\n\nconst isNumber = isNumber\nconst isString = isString\n\nconst isNumber = isNumber\nconst isString = isString\n\nconst isNumber = isNumber\nconst isString = isString\n\nconst isNumber = isNumber\nconst isString = isString\n\nconst isNumber = isNumber\nconst isString = isString\n\nconst isNumber = isNumber\nconst isString = isString\n\nconst isNumber = isNumber\nconst isString = isString\n\nconst isNumber = isNumber\nconst isString = isString\n\nconst isNumber = isNumber\nconst isString = isString\n\nconst isNumber = isNumber\nconst isString = isString\n\nconst isNumber = isNumber\nconst isString = isString\n\nconst isNumber = isNumber\nconst isString = isString\n\nconst isNumber = isNumber\nconst isString = isString\n\nconst isNumber = isNumber\nconst isString = isString\n\nconst isNumber = isNumber\nconst isString = isString\n\nconst isNumber = isNumber\nconst isString = isString\n\nconst isNumber = isNumber\nconst isString = isString\n\nconst isNumber = isNumber\nconst isString = isString\n\nconst isNumber = isNumber\nconst isString = isString\n\nconst isNumber = isNumber\nconst isString = isString\n\nconst isNumber = isNumber\nconst isString = isString\n\nconst isNumber = isNumber\nconst isString = isString\n\nconst isNumber = isNumber\nconst isString = isString\n\nconst isNumber = isNumber\nconst isString = isString\n\nconst isNumber = isNumber\nconst isString = isString\n\nconst isNumber = isNumber\nconst isString = isString\n\nconst isNumber = isNumber\nconst isString = isString\n\nconst isNumber = isNumber\nconst isString = isString\n\nconst isNumber = isNumber\nconst isString = isString\n\nconst isNumber = isNumber\nconst isString = isString\n\nconst isNumber = isNumber\nconst isString = isString\n\nconst isNumber = isNumber\nconst isString = isString\n\nconst isNumber = isNumber\nconst isString = isString\n\nconst isNumber = isNumber\nconst isString = isString\n\nconst isNumber = isNumber\nconst isString = isString\n\nconst isNumber = isNumber\nconst isString = isString\n\nconst isNumber = isNumber\nconst isString = isString\n\nconst isNumber = isNumber\nconst isString = isString\n\nconst isNumber = isNumber\nconst isString = isString\n\nconst isNumber = isNumber\nconst isString = isString\n\nconst isNumber = isNumber\nconst isString = isString\n\nconst isNumber = isNumber\nconst isString = isString\n\nconst isNumber = isNumber\nconst isString = isString\n\nconst isNumber = isNumber\nconst isString = isString\n\nconst isNumber = isNumber\nconst isString = isString\n\nconst isNumber = isNumber\nconst isString = isString\n\nconst isNumber = isNumber\nconst isString = isString\n\nconst isNumber = isNumber\nconst isString = isString\n\nconst isNumber = isNumber\nconst isString = isString\n\nconst isNumber = isNumber\nconst isString = isString\n\nconst isNumber = isNumber\nconst isString = isString\n\nconst isNumber = isNumber\nconst isString = isString\n\nconst isNumber = isNumber\nconst isString = isString\n\nconst isNumber = isNumber\nconst isString = isString\n\nconst isNumber = isNumber\nconst isString = isString\n\nconst isNumber = isNumber\nconst isString = isString\n\nconst isNumber = isNumber\nconst isString = isString\n\nconst isNumber = isNumber\nconst isString = isString\n\nconst isNumber = isNumber\nconst isString = isString\n\nconst isNumber = isNumber\nconst isString = isString\n\nconst isNumber = isNumber\nconst isString = isString\n\nconst isNumber = isNumber\nconst isString = isString\n\nconst isNumber = isNumber\nconst isString = isString\n\nconst isNumber = isNumber\nconst isString = isString\n\nconst isNumber = isNumber\nconst isString = isString\n\nconst isNumber = isNumber\nconst isString = isString\n\nconst isNumber = isNumber\nconst isString = isString\n\nconst isNumber = isNumber\nconst isString = isString\n\nconst isNumber = isNumber\nconst isString = isString\n\nconst isNumber = isNumber\nconst isString = isString\n\nconst isNumber = isNumber\nconst isString = isString\n\nconst isNumber = isNumber\nconst isString = isString\n\nconst isNumber = isNumber\nconst isString = isString\n\nconst isNumber = isNumber\nconst isString = isString\n\nconst isNumber = isNumber\nconst isString = isString\n\nconst isNumber = isNumber\nconst isString = isString\n\nconst isNumber = isNumber\nconst isString = isString\n\nconst isNumber = isNumber\nconst isString = isString\n\nconst isNumber = isNumber\nconst isString = isString\n\nconst isNumber = isNumber\nconst isString = isString\n\nconst isNumber = isNumber\nconst isString = isString\n\nconst isNumber = isNumber\nconst isString = isString\n\nconst isNumber = isNumber"}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"string\"\n  findMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"aaaaaaa\"\n  */\n\nconst findMax = (words) => {\n  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n", "canonical_solution": "      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "partial": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"string\"\n  findMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst findMax = (words) => {\n  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n        # print('@@this is the line to split##')\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "gc": "<|endoftext|>/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"string\"\n  findMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  findMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\n\nconst findMax = (words) => {\n  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y > p) { p = y }\n    }\n    if (p > s) { s = p }\n    u = i\n  }\n  return words[u]\n}\n\n/*Write a function that accepts a string and returns the number of unique\n  characters in that string. If a string has multiple unique characters,\n  return the one which comes first in lexicographical order.\n\n  countUnique(\"hello\") === 3\n  countUnique(\"helloworld\") === 4\n  countUnique(\"helloworld\") === 4\n  */\n\nconst countUnique = (str) => {\n  let count = 0\n  let chars = []\n  for (let i = 0; i < str.length; i++) {\n    let y = 1\n    for (let k = 0; k < str.length; k++) {\n      if (str[i] == str[k]) { y = 0 }\n    }\n    if (y > count) { count = y }\n    chars.push(str[i])\n  }\n  return count\n}\n\n/*Write a function that accepts a string and returns the number of unique\n  characters in that string. If a string has multiple unique characters,\n  return the one which comes first in lexicographical order.\n\n  countUnique(\"hello\") === 3\n  countUnique(\"helloworld\") === 4\n  countUnique(\"helloworld\") === 4\n  */\n\nconst countUnique = (str) => {\n  let count = 0\n  let chars = []\n  for (let i = 0; i < str.length; i++) {\n    let y = 1\n    for (let k = 0; k < str.length; k++) {\n      if (str[i] == str[k]) { y = 0 }\n    }\n    if (y > count) { count = y }\n    chars.push(str[i])\n  }\n  return count\n}\n\n/*Write a function that accepts a string and returns the number of unique\n  characters in that string. If a string has multiple unique characters,\n  return the one which comes first in lexicographical order.\n\n  countUnique(\"hello\") === 3\n  countUnique(\"helloworld\") === 4\n  countUnique(\"helloworld\") === 4\n  */\n\nconst countUnique = (str) => {\n  let count = 0\n  let chars = []\n  for (let i = 0; i < str.length; i++) {\n    let y = 1\n    for (let k = 0; k < str.length; k++) {\n      if (str[i] == str[k]) { y = 0 }\n    }\n    if (y > count) { count = y }\n    chars.push(str[i])\n  }\n  return count\n}\n\n/*Write a function that accepts a string and returns the number of unique\n  characters in that string. If a string has multiple unique characters,\n  return the one which comes first in lexicographical order.\n\n  countUnique(\"hello\") === 3\n  countUnique(\"helloworld\") === 4\n  countUnique(\"helloworld\") === 4\n  */\n\nconst countUnique = (str) => {\n  let count = 0\n  let chars = []\n  for (let i = 0; i < str.length; i++) {\n    let y = 1\n    for (let k = 0; k < str.length; k++) {\n      if (str[i] == str[k]) { y = 0 }\n    }\n    if (y > count) { count = y }\n    chars.push(str[i])\n  }\n  return count\n}\n\n/*Write a function that accepts a string and returns the number of unique\n  characters in that string. If a string has multiple unique characters,\n  return the one which comes first in lexicographical order.\n\n  countUnique(\"hello\") === 3\n  countUnique(\"helloworld\") === 4\n  countUnique(\"helloworld\") === 4\n  */\n\nconst countUnique = (str) => {\n  let count = 0\n  let chars = []\n  for (let i = 0; i < str.length; i++) {\n    let y = 1\n    for (let k = 0; k < str.length; k++) {\n      if (str[i] == str[k]) { y = 0 }\n    }\n    if (y > count) { count = y }\n    chars.push(str[i])\n  }\n  return count\n}\n\n/*Write a function that accepts a string and returns the number of unique\n  characters in that string. If a string has multiple unique characters,\n  return the one which comes first in lexicographical order.\n\n  countUnique(\"hello\") === 3\n  countUnique(\"helloworld\") === 4\n  countUnique(\"helloworld\") === 4\n  */\n\nconst countUnique = (str) => {\n  let count = 0\n  let chars = []\n  for (let i = 0; i < str.length; i++) {\n    let y = 1\n    for (let k = 0; k < str.length; k++) {\n      if (str[i] == str[k]) { y = 0 }\n    }\n    if (y > count) { count = y }\n    chars.push(str[i])\n  }\n  return count\n}\n\n/*Write a function that accepts a string and returns the number of unique\n  characters in that string. If a string has multiple unique characters,\n  return the one which comes first in lexicographical order.\n\n  countUnique(\"hello\") === 3\n  countUnique(\"helloworld\") === 4\n  countUnique(\"helloworld\") === 4\n  */\n\nconst countUnique = (str) => {\n  let count = 0\n  let chars = []\n  for (let i = 0; i < str.length; i++) {\n    let y = 1\n    for (let k = 0; k < str.length; k++) {\n      if (str[i] == str[k]) { y = 0 }\n    }\n    if (y > count) { count = y }\n    chars.push(str[i])\n  }\n  return count\n}\n\n/*Write a function that accepts a string and returns the number of unique\n  characters in that string. If a string has multiple unique characters,\n  return the one which comes first in lexicographical order.\n\n  countUnique(\"hello\") === 3\n  countUnique(\"helloworld\") === 4\n  countUnique(\"helloworld\") === 4\n  */\n\nconst countUnique = (str) => {\n  let count = 0\n  let chars = []\n  for (let i = 0; i < str.length; i++) {\n    let y = 1\n    for (let k = 0; k < str.length; k++) {\n      if (str[i] == str[k]) { y = 0 }\n    }\n    if (y > count) { count = y }\n    chars.push(str[i])\n  }\n  return count\n}\n\n/*Write a function that accepts a string and returns the number of unique\n  characters in that string. If a string has multiple unique characters,\n  return the one which comes first in lexicographical order.\n\n  countUnique(\"hello\") === 3\n  countUnique(\"helloworld\") === 4\n  countUnique(\"helloworld\") === 4\n  */\n\nconst countUnique = (str) => {\n  let count = 0\n  let chars = []\n  for (let i = 0; i < str.length; i++) {\n    let y = 1\n    for (let k = 0; k < str.length; k++) {\n      if (str[i] == str[k]) { y = 0 }\n    }\n    if (y > count) { count = y }\n    chars.push(str[i])\n  }\n  return count\n}\n\n/*Write a function that accepts a string and returns the number of unique\n  characters in that string. If a string has multiple unique characters,\n  return the one which comes first in lexicographical order.\n\n  countUnique(\"hello\") === 3\n  countUnique(\"helloworld\") === 4\n  countUnique(\"helloworld\") === 4\n  */\n\nconst countUnique = (str) => {\n  let count = 0\n  let chars = []\n  for (let i = 0; i < str.length; i++) {\n    let "}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\n\nconst eat = (number, need, remaining) => {\n  if (need <= remaining) {\n    return [need + number, remaining - need]\n", "canonical_solution": "  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "partial": "/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  if (need <= remaining) {\n    return [need + number, remaining - need]\n    # print('@@this is the line to split##')\n  }\n  return [remaining + number, 0]\n}\n\n", "gc": "<|endoftext|>/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\n\nconst eat = (number, need, remaining) => {\n  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return []\n}\n\n/*\n  You are a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\n\nconst eat = (number, need, remaining) => {\n  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return []\n}\n\n/*\n  You are a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\n\nconst eat = (number, need, remaining) => {\n  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return []\n}\n\n/*\n  You are a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\n\nconst eat = (number, need, remaining) => {\n  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return []\n}\n\n/*\n  You are a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\n\nconst eat = (number, need, remaining) => {\n  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return []\n}\n\n/*\n  You are a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\n\nconst eat = (number, need, remaining) => {\n  if (need <= remaining) {\n    return [need + number, remaining - need]\n"}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\n\nconst doAlgebra = (operator, operand) => {\n  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n", "canonical_solution": "        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "partial": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        # print('@@this is the line to split##')\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "gc": "<|endoftext|>/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\n\nconst doAlgebra = (operator, operand) => {\n  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] = operand[i + 1] - operand[i]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '+') {\n        operand[i] = operand[i + 1] + operand[i]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n  }\n  return operand\n}\n\nconst doEvaluate = (operator, operand) => {\n  let result = operand\n  for (let i = 0; i < operator.length; i++) {\n    if (operator[i] == '+') {\n      result = doAlgebra(operator, result)\n    }\n    else if (operator[i] == '-') {\n      result = doAlgebra(operator, result)\n    }\n    else if (operator[i] == '*') {\n      result = doAlgebra(operator, result)\n    }\n    else if (operator[i] == '/') {\n      result = doAlgebra(operator, result)\n    }\n    else if (operator[i] == '**') {\n      result = doAlgebra(operator, result)\n    }\n  }\n  return result\n}\n\nconst evaluate = (operator, operand) => {\n  let result = operand\n  for (let i = 0; i < operator.length; i++) {\n    if (operator[i] == '+') {\n      result = doEvaluate(operator, result)\n    }\n    else if (operator[i] == '-') {\n      result = doEvaluate(operator, result)\n    }\n    else if (operator[i] == '*') {\n      result = doEvaluate(operator, result)\n    }\n    else if (operator[i] == '/') {\n      result = doEvaluate(operator, result)\n    }\n    else if (operator[i] == '**') {\n      result = doEvaluate(operator, result)\n    }\n  }\n  return result\n}\n\nconst evaluateArray = (operator, operand) => {\n  let result = operand\n  for (let i = 0; i < operator.length; i++) {\n    if (operator[i] == '+') {\n      result = doEvaluate(operator, result)\n    }\n    else if (operator[i] == '-') {\n      result = doEvaluate(operator, result)\n    }\n    else if (operator[i] == '*') {\n      result = doEvaluate(operator, result)\n    }\n    else if (operator[i] == '/') {\n      result = doEvaluate(operator, result)\n    }\n    else if (operator[i] == '**') {\n      result = doEvaluate(operator, result)\n    }\n  }\n  return result\n}\n\nconst evaluateArrayOfArray = (operator, operand) => {\n  let result = operand\n  for (let i = 0; i < operator.length; i++) {\n    if (operator[i] == '+') {\n      result = doEvaluate(operator, result)\n    }\n    else if (operator[i] == '-') {\n      result = doEvaluate(operator, result)\n    }\n    else if (operator[i] == '*') {\n      result = doEvaluate(operator, result)\n    }\n    else if (operator[i] == '/') {\n      result = doEvaluate(operator, result)\n    }\n    else if (operator[i] == '**') {\n      result = doEvaluate(operator, result)\n    }\n  }\n  return result\n}\n\nconst evaluateArrayOfArrayOfArray = (operator, operand) => {\n  let result = operand\n  for (let i = 0; i < operator.length; i++) {\n    if (operator[i] == '+') {\n      result = doEvaluate(operator, result)\n    }\n    else if (operator[i] == '-') {\n      result = doEvaluate(operator, result)\n    }\n    else if (operator[i] == '*') {\n      result = doEvaluate(operator, result)\n    }\n    else if (operator[i] == '/') {\n      result = doEvaluate(operator, result)\n    }\n    else if (operator[i] == '**') {\n      result = doEvaluate(operator, result)\n    }\n  }\n  return result\n}\n\nconst evaluateArrayOfArrayOfArrayOfArray = (operator, operand) => {\n  let result = operand\n  for (let i = 0; i < operator.length; i++) {\n    if (operator[i] == '+') {\n      result = doEvaluate(operator, result)\n    }\n    else if (operator[i] == '-') {\n      result = doEvaluate(operator, result)\n    }\n    else if (operator[i] == '*') {\n      result = doEvaluate(operator, result)\n    }\n    else if (operator[i] == '/') {\n      result = doEvaluate(operator, result)\n    }\n    else if (operator[i] == '**') {\n      result = doEvaluate(operator, result)\n    }\n  }\n  return result\n}\n\nconst evaluateArrayOfArrayOfArrayOfArrayOfArray = (operator, operand) => {\n  let result = operand\n  for (let i = 0; i < operator.length; i++) {\n    if (operator[i] == '+') {\n      result = doEvaluate(operator, result)\n    }\n    else if (operator[i] == '-') {\n      result = doEvaluate(operator, result)\n    }\n    else if (operator[i] == '*') {\n      result = doEvaluate(operator, result)\n    }\n    else if (operator[i] == '/') {\n      result = doEvaluate(operator, result)\n    }\n    else if (operator[i] == '**') {\n      result = doEvaluate(operator, result)\n    }\n  }\n  return result\n}\n\nconst evaluateArrayOfArrayOfArrayOfArrayOfArrayOfArray = (operator, operand) => {\n  let result = operand\n  for (let i = 0; i < operator.length; i++) {\n    if (operator[i] == '+') {\n      result = doEvaluate(operator, result)\n    }\n    else if (operator[i] == '-') {\n      result = doEvaluate(operator, result)\n    }\n    else if (operator[i] == '*') {\n      result = doEvaluate(operator, result)\n    }\n    else if (operator[i] == '/') {\n      result = doEvaluate(operator, result)\n    }\n    else if (operator[i] == '**') {\n      result = doEvaluate(operator, result)\n    }\n  }\n  return result\n}\n\nconst evaluateArrayOfArrayOfArrayOfArrayOfArrayOfArrayOfArray = (operator, operand) => {\n  let result = operand\n  for (let i = 0; i < operator.length; i++) {\n    if (operator[i] == '+') {\n      result = doEvaluate(operator, result)\n    }\n    else if (operator[i] == '-') {\n      result = doEvaluate(operator, result)\n    }\n    else if (operator[i] == '*') {\n      result = doEvaluate(operator, result)\n    }\n    else if (operator[i] == '/') {\n      result = doEvaluate(operator, result)\n    }\n    else if (operator[i] == '**') {\n      result = doEvaluate(operator, result)\n    }\n  }\n  return result\n}\n\nconst evaluateArrayOfArrayOfArrayOfArrayOfArrayOfArrayOfArrayOfArray"}
{"task_id": "JavaScript/161", "prompt": "/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\n\nconst solve = (s) => {\n  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n", "canonical_solution": "    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "partial": "/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n      # print('@@this is the line to split##')\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "gc": "<|endoftext|>/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\n\nconst solve = (s) => {\n  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    } else if (y >= 48 && y <= 57) {\n      y += 32;\n      t = 2;\n    } else if (y >= 65 && y <= 90) {\n      y -= 32;\n      t = 2;\n    } else if (y >= 97 && y <= 122) {\n      y += 32;\n      t = 2;\n    } else if (y >= 48 && y <= 57) {\n      y += 32;\n      t = 3;\n    } else if (y >= 65 && y <= 90) {\n      y -= 32;\n      t = 3;\n    } else if (y >= 97 && y <= 122) {\n      y += 32;\n      t = 3;\n    } else if (y >= 48 && y <= 57) {\n      y += 32;\n      t = 4;\n    } else if (y >= 65 && y <= 90) {\n      y -= 32;\n      t = 4;\n    } else if (y >= 97 && y <= 122) {\n      y += 32;\n      t = 4;\n    } else if (y >= 48 && y <= 57) {\n      y += 32;\n      t = 5;\n    } else if (y >= 65 && y <= 90) {\n      y -= 32;\n      t = 5;\n    } else if (y >= 97 && y <= 122) {\n      y += 32;\n      t = 5;\n    } else if (y >= 48 && y <= 57) {\n      y += 32;\n      t = 6;\n    } else if (y >= 65 && y <= 90) {\n      y -= 32;\n      t = 6;\n    } else if (y >= 97 && y <= 122) {\n      y += 32;\n      t = 6;\n    } else if (y >= 48 && y <= 57) {\n      y += 32;\n      t = 7;\n    } else if (y >= 65 && y <= 90) {\n      y -= 32;\n      t = 7;\n    } else if (y >= 97 && y <= 122) {\n      y += 32;\n      t = 7;\n    } else if (y >= 48 && y <= 57) {\n      y += 32;\n      t = 8;\n    } else if (y >= 65 && y <= 90) {\n      y -= 32;\n      t = 8;\n    } else if (y >= 97 && y <= 122) {\n      y += 32;\n      t = 8;\n    } else if (y >= 48 && y <= 57) {\n      y += 32;\n      t = 9;\n    } else if (y >= 65 && y <= 90) {\n      y -= 32;\n      t = 9;\n    } else if (y >= 97 && y <= 122) {\n      y += 32;\n      t = 9;\n    } else if (y >= 48 && y <= 57) {\n      y += 32;\n      t = 10;\n    } else if (y >= 65 && y <= 90) {\n      y -= 32;\n      t = 10;\n    } else if (y >= 97 && y <= 122) {\n      y += 32;\n      t = 10;\n    } else if (y >= 48 && y <= 57) {\n      y += 32;\n      t = 11;\n    } else if (y >= 65 && y <= 90) {\n      y -= 32;\n      t = 11;\n    } else if (y >= 97 && y <= 122) {\n      y += 32;\n      t = 11;\n    } else if (y >= 48 && y <= 57) {\n      y += 32;\n      t = 12;\n    } else if (y >= 65 && y <= 90) {\n      y -= 32;\n      t = 12;\n    } else if (y >= 97 && y <= 122) {\n      y += 32;\n      t = 12;\n    } else if (y >= 48 && y <= 57) {\n      y += 32;\n      t = 13;\n    } else if (y >= 65 && y <= 90) {\n      y -= 32;\n      t = 13;\n    } else if (y >= 97 && y <= 122) {\n      y += 32;\n      t = 13;\n    } else if (y >= 48 && y <= 57) {\n      y += 32;\n      t = 14;\n    } else if (y >= 65 && y <= 90) {\n      y -= 32;\n      t = 14;\n    } else if (y >= 97 && y <= 122) {\n      y += 32;\n      t = 14;\n    } else if (y >= 48 && y <= 57) {\n      y += 32;\n      t = 15;\n    } else if (y >= 65 && y <= 90) {\n      y -= 32;\n      t = 15;\n    } else if (y >= 97 && y <= 122) {\n      y += 32;\n      t = 15;\n    } else if (y >= 48 && y <= 57) {\n      y += 32;\n      t = 16;\n    } else if (y >= 65 && y <= 90) {\n      y -= 32;\n      t = 16;\n    } else if (y >= 97 && y <= 122) {\n      y += 32;\n      t = 16;\n    } else if (y >= 48 && y <= 57) {\n      y += 32;\n      t = 17;\n    } else if (y >= 65 && y <= 90) {\n      y -= 32;\n      t = 17;\n    } else if (y >= 97 && y <= 122) {\n      y += 32;\n      t = 17;\n    } else if (y >= 48 && y <= 57) {\n      y += 32;\n      t = 18;\n    } else if (y >= 65 && y <= 90) {\n      y -= 32;\n      t = 18;\n    } else if (y >= 97 && y <= 122) {\n      y += 32;\n      t = 18;\n    } else if (y >= 48 && y <= 57) {\n      y += 32;\n      t = 19;\n    } else if (y >= 65 && y <= 90) {\n      y -= 32;\n      t = 19;\n    } else if (y >= 97 && y <= 122) {\n      y += 32;\n      t = 19;\n    } else if (y >= 48 && y <= 57) {\n      y += 32;\n      t = 20;\n    } else if (y >= 65 && y <= 90) {\n      y -= 32;\n      t = 20;\n    } else if (y >= 97 && y <= 122) {\n      y += 32;\n      t = 20;\n    } else if (y >= 48 && y <= 57) {\n      y += 32;\n      t = 31;\n    } else if (y >= 65 && y <= 90) {\n      y -= 32;\n      t = 31;\n    } else if (y >= 97 && y <= 122) {\n      y += 32;\n      t = 31;\n    } else if (y >= 48 && y <= 57) {\n      y += 32;\n      t = 41;\n    } else if (y >= 65 && y <= 90) {\n      y -= 32;\n      t = 41;\n    } else if (y >= 97 && y <= 122) {\n      y += 32;\n      t = 41;\n    } else if (y >= 48 && y <= 57) {\n      y += 32;\n      t = 42;\n    } else if (y >= 65 && y <= 90) {\n      y -= 32;\n      t = 42;\n    } else if (y >= 97 && y <= 122) {\n      y += 32;\n      t = 42;\n    } else if (y >= 48 && y <= 57) {\n      y += 32;\n      t = 43;\n    } else if (y >= 65 && y <= 90) {\n      y -= 32;\n      t = 43;\n    } else if (y >= 97 && y <= 122) {\n      y += 32;\n      t = 43;\n    } else if (y >= 48 && y <= 57) {\n      y += 32;\n      t = 44;\n    } else if (y >= 65 && y <= 90) {\n      y -= 32;\n      t = 44;\n    } else if (y >= 97 && y <= 122) {\n      y += 32;\n      t = 44;\n    } else if (y >= 48 && y <= 57) {\n      y += 32;\n      t = 45;\n    } else if (y >= 65 && y <= 90) {\n      y -= 32;\n      t = 45;\n    } else if ("}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\n\nconst stringToMd5 = (text) => {\n  if (text == '') { return null }\n  var md5 = require('js-md5')\n", "canonical_solution": "  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "partial": "/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text == '') { return null }\n  var md5 = require('js-md5')\n  # print('@@this is the line to split##')\n  return md5(text)\n}\n\n", "gc": "<|endoftext|>/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\n\nconst stringToMd5 = (text) => {\n  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\n\nconst stringToMd5 = (text) => {\n  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\n\nconst stringToMd5 = (text) => {\n  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\n\nconst stringToMd5 = (text) => {\n  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\n\nconst stringToMd5 = (text) => {\n  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\n\nconst stringToMd5 = (text) => {\n  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\n\nconst stringToMd5 = (text) => {\n  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\n\nconst stringToMd5 = (text) => {\n  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\n\nconst stringToMd5 = (text) => {\n  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\n\nconst stringToMd5 = (text) => {\n  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\n\nconst stringToMd5 = (text) => {\n  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\n\nconst stringToMd5 = (text) => {\n  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\n\nconst stringToMd5 = (text) => {\n  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\n\nconst stringToMd5 = (text) => {\n  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\n\nconst stringToMd5 = (text) => {\n  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\n\nconst stringToMd5 = (text) => {\n  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\n\nconst stringToMd5 = (text) => {\n  if (text == '') { return null }\n  var md5"}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\n\nconst generateIntegers = (a, b) => {\n  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n", "canonical_solution": "  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "partial": "/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  # print('@@this is the line to split##')\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "gc": "<|endoftext|>/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\n\nconst generateIntegers = (a, b) => {\n  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  const result = [];\n  let i = a;\n  let j = 0;\n  while (i > 0) {\n    result.push(i);\n    i = Math.floor(i / 10);\n    j++;\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, return the number of ways to split it into two\n  parts such that each part is at least as large as the other part.\n\n  For example:\n  splitNumber(12) => [4, 2]\n  splitNumber(14) => [4, 2]\n  splitNumber(15) => []\n  */\n\nconst splitNumber = n => {\n  if (n < 2) {\n    return [];\n  }\n  const result = [];\n  let i = 1;\n  let j = 1;\n  while (i <= n) {\n    if (n % i === 0) {\n      result.push([i, j]);\n      i += 1;\n    } else {\n      result.push([i, j]);\n      j += 1;\n    }\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, return the number of ways to split it into two\n  parts such that each part is at least as large as the other part.\n\n  For example:\n  splitNumber(12) => [4, 2]\n  splitNumber(14) => [4, 2]\n  splitNumber(15) => [4, 2]\n  */\n\nconst splitIntegers = n => {\n  if (n < 2) {\n    return [];\n  }\n  const result = [];\n  let i = 1;\n  let j = 1;\n  while (i <= n) {\n    if (n % i === 0) {\n      result.push([i, j]);\n      i += 1;\n    } else {\n      result.push([i, j]);\n      j += 1;\n    }\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, return the number of ways to split it into two\n  parts such that each part is at least as large as the other part.\n\n  For example:\n  splitNumber(12) => [4, 2]\n  splitNumber(14) => [4, 2]\n  splitNumber(15) => [4, 2]\n  */\n\nconst splitIntegers2 = n => {\n  if (n < 2) {\n    return [];\n  }\n  const result = [];\n  let i = 1;\n  let j = 1;\n  while (i <= n) {\n    if (n % i === 0) {\n      result.push([i, j]);\n      i += 1;\n    } else {\n      result.push([i, j]);\n      j += 1;\n    }\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, return the number of ways to split it into two\n  parts such that each part is at least as large as the other part.\n\n  For example:\n  splitNumber(12) => [4, 2]\n  splitNumber(14) => [4, 2]\n  splitNumber(15) => [4, 2]\n  */\n\nconst splitIntegers3 = n => {\n  if (n < 2) {\n    return [];\n  }\n  const result = [];\n  let i = 1;\n  let j = 1;\n  while (i <= n) {\n    if (n % i === 0) {\n      result.push([i, j]);\n      i += 1;\n    } else {\n      result.push([i, j]);\n      j += 1;\n    }\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, return the number of ways to split it into two\n  parts such that each part is at least as large as the other part.\n\n  For example:\n  splitNumber(12) => [4, 2]\n  splitNumber(14) => [4, 2]\n  splitNumber(15) => [4, 2]\n  */\n\nconst splitIntegers4 = n => {\n  if (n < 2) {\n    return [];\n  }\n  const result = [];\n  let i = 1;\n  let j = 1;\n  while (i <= n) {\n    if (n % i === 0) {\n      result.push([i, j]);\n      i += 1;\n    } else {\n      result.push([i, j]);\n      j += 1;\n    }\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, return the number of ways to split it into two\n  parts such that each part is at least as large as the other part.\n\n  For example:\n  splitNumber(12) => [4, 2]\n  splitNumber(14) => [4, 2]\n  splitNumber(15) => [4, 2]\n  */\n\nconst splitIntegers5 = n => {\n  if (n < 2) {\n    return [];\n  }\n  const result = [];\n  let i = 1;\n  let j = 1;\n  while (i <= n) {\n    if (n % i === 0) {\n      result.push([i, j]);\n      i += 1;\n    } else {\n      result.push([i, j]);\n      j += 1;\n    }\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, return the number of ways to split it into two\n  parts such that each part is at least as large as the other part.\n\n  For example:\n  splitNumber(12) => [4, 2]\n  splitNumber(14) => [4, 2]\n  splitNumber(15) => [4, 2]\n  */\n\nconst splitIntegers6 = n => {\n  if (n < 2) {\n    return [];\n  }\n  const result = [];\n  let i = 1;\n  let j = 1;\n  while (i <= n) {\n    if (n % i === 0) {\n      result.push([i, j]);\n      i += 1;\n    } else {\n      result.push([i, j]);\n      j += 1;\n    }\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, return the number of ways to split it into two\n  parts such that each part is at least as large as the other part.\n\n  For example:\n  splitNumber(12) => [4, 2]\n  splitNumber(14) => [4, 2]\n  splitNumber(15) => [4, 2]\n  */\n\nconst splitIntegers7 = n => {\n  if (n < 2) {\n    return [];\n  }\n  const result = [];\n  let i = 1;\n  let j = 1;\n  while (i <= n) {\n    if (n % i === 0) {\n      result.push([i, j]);\n      i += 1;\n    } else {\n      result.push([i, j]);\n      j += 1;\n    }\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, return the number of ways to split it into two\n  parts such that each part is at least as large as the other part.\n\n  For example:\n  splitNumber(12) => [4, 2]\n  splitNumber(14) => [4, 2]\n  splitNumber(15) => [4, 2]\n  */\n\nconst splitIntegers8 = n => {\n  if (n < 2) {\n    return [];\n  }\n  const result = [];\n  let i = 1;\n  let j = 1;\n  while (i <= n) {\n    if (n % i === 0) {\n      result.push([i, j]);\n      i += 1;\n    } else {\n      result.push([i, j]);\n      j += 1;\n    }\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, return the number of ways to split it into two\n  parts such that each part is at least as large as the other part.\n\n  For example:\n  splitNumber(12) => [4, 2]\n  splitNumber(14) => [4, 2]\n  splitNumber(15) => [4, 2]\n  */\n\nconst splitIntegers9 = n => {\n  if (n < 2) {\n    return [];\n  }\n  const result = [];\n  let i = 1;\n  let j = 1;\n  while (i <= n) {\n    if (n % i === 0) {\n      result.push([i, j]);\n      i += 1;\n    } else {\n      result.push([i, j]);\n      j += 1;\n    }\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, return the number of ways to split it into two\n  parts such that each part is at least as large as the other part.\n\n  For example:\n  splitNumber(12) => [4, 2]\n  splitNumber(14) => [4, 2]\n  splitNumber(15) => [4, 2]\n  */\n\nconst split"}
