{"task_id": "JavaScript/0", "prompt": "/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\n\nconst hasCloseElements = (numbers, threshold) => {\n  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n", "canonical_solution": "        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "partial": "/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n          # print('@@this is the line to split##')\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "gc": "<|endoftext|>/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\n\nconst hasCloseElements = (numbers, threshold) => {\n  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i!= j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n};\n\nmodule.exports = hasCloseElements;\n\n},{}],13:[function(require,module,exports){\nconst { hasCloseElements } = require('./hasCloseElements');\n\n/**\n * Check if two arrays are equal, by comparing their lengths.\n * If one array is shorter than the other, the shorter array is returned.\n * If both arrays are equal, they are considered equal.\n * If one array is longer than the other, the longer array is returned.\n * If both arrays are longer than the shorter array, the shorter array is returned.\n * If one array is shorter than the other, the shorter array is returned.\n * If both arrays are equal, they are considered equal.\n * If one array is longer than the other, the longer array is returned.\n * If both arrays are longer than the shorter array, the shorter array is returned.\n * If one array is shorter than the other, the shorter array is returned.\n * If both arrays are equal, they are considered equal.\n * If one array is longer than the other, the longer array is returned.\n * If both arrays are longer than the shorter array, the shorter array is returned.\n * If one array is shorter than the other, the shorter array is returned.\n * If both arrays are equal, they are considered equal.\n * If one array is longer than the other, the longer array is returned.\n * If both arrays are longer than the shorter array, the shorter array is returned.\n * If one array is shorter than the other, the shorter array is returned.\n * If both arrays are equal, they are considered equal.\n * If one array is longer than the other, the longer array is returned.\n * If both arrays are longer than the shorter array, the shorter array is returned.\n * If one array is shorter than the other, the shorter array is returned.\n * If both arrays are equal, they are considered equal.\n * If one array is longer than the other, the longer array is returned.\n * If both arrays are longer than the shorter array, the shorter array is returned.\n * If one array is shorter than the other, the shorter array is returned.\n * If both arrays are equal, they are considered equal.\n * If one array is longer than the other, the longer array is returned.\n * If both arrays are longer than the shorter array, the shorter array is returned.\n * If one array is shorter than the other, the shorter array is returned.\n * If both arrays are equal, they are considered equal.\n * If one array is longer than the other, the longer array is returned.\n * If both arrays are longer than the shorter array, the shorter array is returned.\n * If one array is shorter than the other, the shorter array is returned.\n * If both arrays are equal, they are considered equal.\n * If one array is longer than the other, the longer array is returned.\n * If both arrays are longer than the shorter array, the shorter array is returned.\n * If one array is shorter than the other, the shorter array is returned.\n * If both arrays are equal, they are considered equal.\n * If one array is longer than the other, the longer array is returned.\n * If both arrays are longer than the shorter array, the shorter array is returned.\n * If one array is shorter than the other, the shorter array is returned.\n * If both arrays are equal, they are considered equal.\n * If one array is longer than the other, the longer array is returned.\n * If both arrays are longer than the shorter array, the shorter array is returned.\n * If one array is shorter than the other, the shorter array is returned.\n * If both arrays are equal, they are considered equal.\n * If one array is longer than the other, the longer array is returned.\n * If both arrays are longer than the shorter array, the shorter array is returned.\n * If one array is shorter than the other, the shorter array is returned.\n * If both arrays are equal, they are considered equal.\n * If one array is longer than the other, the longer array is returned.\n * If both arrays are longer than the shorter array, the shorter array is returned.\n * If one array is shorter than the other, the shorter array is returned.\n * If both arrays are equal, they are considered equal.\n * If one array is longer than the other, the longer array is returned.\n * If both arrays are longer than the shorter array, the shorter array is returned.\n * If one array is shorter than the other, the shorter array is returned.\n * If both arrays are equal, they are considered equal.\n * If one array is longer than the other, the longer array is returned.\n * If both arrays are longer than the shorter array, the shorter array is returned.\n * If one array is shorter than the other, the shorter array is returned.\n * If both arrays are equal, they are considered equal.\n * If one array is longer than the other, the longer array is returned.\n * If both arrays are longer than the shorter array, the shorter array is returned.\n * If one array is shorter than the other, the shorter array is returned.\n * If both arrays are equal, they are considered equal.\n * If one array is longer than the other, the longer array is returned.\n * If both arrays are longer than the shorter array, the shorter array is returned.\n * If one array is shorter than the other, the shorter array is returned.\n * If both arrays are equal, they are considered equal.\n * If one array is longer than the other, the longer array is returned.\n * If both arrays are longer than the shorter array, the shorter array is returned.\n * If one array is shorter than the other, the shorter array is returned.\n * If both arrays are equal, they are considered equal.\n * If one array is longer than the other, the longer array is returned.\n * If both arrays are longer than the shorter array, the shorter array is returned.\n * If one array is shorter than the other, the shorter array is returned.\n * If both arrays are equal, they are considered equal.\n * If one array is longer than the other, the longer array is returned.\n * If both arrays are longer than the shorter array, the shorter array is returned.\n * If one array is shorter than the other, the shorter array is returned.\n * If both arrays are equal, they are considered equal.\n * If one array is longer than the other, the longer array is returned.\n * If both arrays are longer than the shorter array, the shorter array is returned.\n * If one array is shorter than the other, the shorter array is returned.\n * If both arrays are equal, they are considered equal.\n * If one array is longer than the other, the longer array is returned.\n * If both arrays are longer than the shorter array, the shorter array is returned.\n * If one array is shorter than the other, the shorter array is returned.\n * If both arrays are equal, they are considered equal.\n * If one array is longer than the other, the longer array is returned.\n * If both arrays are longer than the shorter array, the shorter array is returned.\n * If one array is shorter than the other, the shorter array is returned.\n * If both arrays are equal, they are considered equal.\n * If one array is longer than the other, the longer array is returned.\n * If both arrays are longer than the shorter array, the shorter array is returned.\n * If one array is shorter than the other, the shorter array is returned.\n * If both arrays are equal, they are considered "}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\n\nconst separateParenGroups = (paren_string) => {\n  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n", "canonical_solution": "      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "partial": "/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      # print('@@this is the line to split##')\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "gc": "<|endoftext|>/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\n\nconst separateParenGroups = (paren_string) => {\n  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      if (current_depth == 0) {\n        result.push(current_string);\n        current_string = [];\n      }\n    } else if (c =='') {\n      current_string.push(c);\n    }\n  }\n  if (current_depth == 0) {\n    result.push(current_string);\n  }\n  return result;\n};\n\n/* Input to this function is a string containing multiple groups of parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separateParens('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\n\nconst separateParens = (paren_string) => {\n  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      if (current_depth == 0) {\n        result.push(current_string);\n        current_string = [];\n      }\n    } else if (c =='') {\n      current_string.push(c);\n    }\n  }\n  if (current_depth == 0) {\n    result.push(current_string);\n  }\n  return result;\n};\n\n/* Input to this function is a string containing multiple groups of parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separateParens('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\n\nconst separateParensNoSpaces = (paren_string) => {\n  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      if (current_depth == 0) {\n        result.push(current_string);\n        current_string = [];\n      }\n    } else if (c =='') {\n      current_string.push(c);\n    }\n  }\n  if (current_depth == 0) {\n    result.push(current_string);\n  }\n  return result;\n};\n\n/* Input to this function is a string containing multiple groups of parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separateParensNoSpaces('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\n\nconst separateParensNoSpaces2 = (paren_string) => {\n  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      if (current_depth == 0) {\n        result.push(current_string);\n        current_string = [];\n      }\n    } else if (c =='') {\n      current_string.push(c);\n    }\n  }\n  if (current_depth == 0) {\n    result.push(current_string);\n  }\n  return result;\n};\n\n/* Input to this function is a string containing multiple groups of parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separateParensNoSpaces2('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\n\nconst separateParensNoSpaces3 = (paren_string) => {\n  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      if (current_depth == 0) {\n        result.push(current_string);\n        current_string = [];\n      }\n    } else if (c =='') {\n      current_string.push(c);\n    }\n  }\n  if (current_depth == 0) {\n    result.push(current_string);\n  }\n  return result;\n};\n\n/* Input to this function is a string containing multiple groups of parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separateParensNoSpaces3('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\n\nconst separateParensNoSpaces4 = (paren_string) => {\n  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      if (current_depth == 0) {\n        result.push(current_string);\n        current_string = [];\n      }\n    } else if (c =='') {\n      current_string.push(c);\n    }\n  }\n  if (current_depth == 0) {\n    result.push(current_string);\n  }\n  return result;\n};\n\n/* Input to this function is a string containing multiple groups of parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separateParensNoSpaces4('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\n\nconst separateParensNoSpaces5 = (paren_string) => {\n  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      if (current_depth == 0) {\n        result.push(current_string);\n        current_string = [];\n      }\n    } else if (c =='') {\n      current_string.push(c);\n    }\n  }\n  if (current_depth == 0) {\n    result.push(current_string);\n  }\n  return result;\n};\n\n/* Input to this function is a string containing multiple groups of parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separateParensNoSpaces5('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\n\nconst separateParensNoSpaces6 = (paren_string) => {\n  var result = [];\n  var current_string = [];"}
{"task_id": "JavaScript/2", "prompt": "/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\n\nconst truncateNumber = (number) => {\n  return number % 1.0;\n", "canonical_solution": "}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "partial": "/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  return number % 1.0;\n  # print('@@this is the line to split##')\n}\n\n", "gc": "<|endoftext|>/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\n\nconst truncateNumber = (number) => {\n  return number % 1.0;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\n\nconst truncateInteger = (number) => {\n  return Math.floor(number / 1.0);\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the fractional part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\n\nconst truncateFraction = (number) => {\n  return number - truncateInteger(number);\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the exponent part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\n\nconst truncateExponent = (number) => {\n  return Math.floor(Math.log(number) / Math.LN10);\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the mantissa part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\n\nconst truncateMantissa = (number) => {\n  return Math.floor(Math.log(number) / Math.LN2);\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the sign of the number.\n  >>> truncateNumber(3.5)\n  1\n  */\n\nconst truncateSign = (number) => {\n  return number < 0? -1 : 1;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the exponent of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\n\nconst truncateExponent = (number) => {\n  return Math.floor(Math.log(number) / Math.LN10);\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the mantissa of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\n\nconst truncateMantissa = (number) => {\n  return Math.floor(Math.log(number) / Math.LN2);\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the sign of the number.\n  >>> truncateNumber(3.5)\n  1\n  */\n\nconst truncateSign = (number) => {\n  return number < 0? -1 : 1;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the exponent of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\n\nconst truncateExponent = (number) => {\n  return Math.floor(Math.log(number) / Math.LN10);\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the mantissa of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\n\nconst truncateMantissa = (number) => {\n  return Math.floor(Math.log(number) / Math.LN2);\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the sign of the number.\n  >>> truncateNumber(3.5)\n  1\n  */\n\nconst truncateSign = (number) => {\n  return number < 0? -1 : 1;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the exponent of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\n\nconst truncateExponent = (number) => {\n  return Math.floor(Math.log(number) / Math.LN10);\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the mantissa of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\n\nconst truncateMantissa = (number) => {\n  return Math.floor(Math.log(number) / Math.LN2);\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the sign of the number.\n  >>> truncateNumber(3.5)\n  1\n  */\n\nconst truncateSign = (number) => {\n  return number < 0? -1 : 1;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the exponent of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\n\nconst truncateExponent = (number) => {\n  return Math.floor(Math.log(number) / Math.LN10);\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the mantissa of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\n\nconst truncateMantissa = (number) => {\n  return Math.floor(Math.log(number) / Math.LN2);\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the sign of the number.\n  >>> truncateNumber(3.5)\n  1\n  */\n\nconst truncateSign = (number) => {\n  return number < 0? -1 : 1;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the exponent of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\n\nconst truncateExponent = (number) => {\n  return Math.floor(Math.log(number) / Math.LN10);\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the mantissa of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\n\nconst truncateMantissa = (number) => {\n  return Math.floor(Math.log(number) / Math.LN2);\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the sign of the number.\n  >>> truncateNumber(3.5)\n  1\n  */\n\nconst truncateSign = (number) => {\n  return number < 0? -1 : 1;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  "}
{"task_id": "JavaScript/3", "prompt": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\n\nconst belowZero = (operations) => {\n  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n", "canonical_solution": "      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "partial": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      # print('@@this is the line to split##')\n      return true;\n    }\n  }\n  return false;\n}\n\n", "gc": "<|endoftext|>/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\n\nconst belowZero = (operations) => {\n  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nmodule.exports = belowZero;\n\n/***/ }),\n/* 14 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nconst { isNumber, isString } = __webpack_require__(0);\n\nconst isNegativeNumber = (number) => {\n  return isNumber(number) && number < 0;\n};\n\nconst isPositiveNumber = (number) => {\n  return isNumber(number) && number > 0;\n};\n\nconst isStringOrNumber = (number) => {\n  return isNumber(number) || isString(number);\n};\n\nconst isStringOrNumberOrString = (number) => {\n  return isStringOrNumber(number) || isStringOrNumberOrString(number);\n};\n\nconst isStringOrNumberOrNumberOrStringOrString = (number) => {\n  return isStringOrNumberOrNumberOrString(number) || isStringOrNumberOrStringOrStringOrString(number);\n};\n\nconst isStringOrNumberOrNumberOrStringOrStringOrString = (number) => {\n  return isStringOrNumberOrNumberOrStringOrStringOrString(number) || isStringOrNumberOrNumberOrStringOrStringOrStringOrString(number);\n};\n\nconst isStringOrNumberOrNumberOrStringOrStringOrStringOrString = (number) => {\n  return isStringOrNumberOrNumberOrStringOrStringOrStringOrStringOrString(number) || isStringOrNumberOrNumberOrStringOrStringOrStringOrStringOrString(number);\n};\n\nconst isStringOrNumberOrNumberOrStringOrStringOrStringOrStringOrString = (number) => {\n  return isStringOrNumberOrNumberOrStringOrStringOrStringOrStringOrStringOrString(number) || isStringOrNumberOrNumberOrStringOrStringOrStringOrStringOrStringOrString(number);\n};\n\nconst isStringOrNumberOrNumberOrStringOrStringOrStringOrStringOrString = (number) => {\n  return isStringOrNumberOrNumberOrStringOrStringOrStringOrStringOrStringOrStringOrString(number) || isStringOrNumberOrNumberOrStringOrStringOrStringOrStringOrStringOrString(number);\n};\n\nconst isStringOrNumberOrNumberOrStringOrStringOrStringOrStringOrStringOrString = (number) => {\n  return isStringOrNumberOrNumberOrStringOrStringOrStringOrStringOrStringOrStringOrString(number) || isStringOrNumberOrNumberOrStringOrStringOrStringOrStringOrStringOrString(number);\n};\n\nconst isStringOrNumberOrNumberOrStringOrStringOrStringOrStringOrStringOrString = (number) => {\n  return isStringOrNumberOrNumberOrStringOrStringOrStringOrStringOrStringOrStringOrString(number) || isStringOrNumberOrNumberOrStringOrStringOrStringOrStringOrStringOrStringOrString(number);\n};\n\nconst isStringOrNumberOrNumberOrStringOrStringOrStringOrStringOrStringOrStringOrString = (number) => {\n  return isStringOrNumberOrNumberOrStringOrStringOrStringOrStringOrStringOrStringOrStringOrString(number) || isStringOrNumberOrNumberOrStringOrStringOrStringOrStringOrStringOrStringOrString(number);\n};\n\nconst isStringOrNumberOrNumberOrStringOrStringOrStringOrStringOrStringOrStringOrString = (number) => {\n  return isStringOrNumberOrNumberOrStringOrStringOrStringOrStringOrStringOrStringOrStringOrStringOrString(number) || isStringOrNumberOrNumberOrStringOrStringOrStringOrStringOrStringOrStringOrStringOrString(number);\n};\n\nconst isStringOrNumberOrNumberOrStringOrStringOrStringOrStringOrStringOrStringOrStringOrString = (number) => {\n  return isStringOrNumberOrNumberOrStringOrStringOrStringOrStringOrStringOrStringOrStringOrStringOrString(number) || isStringOrNumberOrNumberOrStringOrStringOrStringOrStringOrStringOrStringOrStringOrString(number);\n};\n\nconst isStringOrNumberOrNumberOrStringOrStringOrStringOrStringOrStringOrStringOrStringOrStringOrString = (number) => {\n  return isStringOrNumberOrNumberOrStringOrStringOrStringOrStringOrStringOrStringOrStringOrStringOrStringOrString(number) || isStringOrNumberOrNumberOrStringOrStringOrStringOrStringOrStringOrStringOrStringOrString(number);\n};\n\nconst isStringOrNumberOrNumberOrStringOrStringOrStringOrStringOrStringOrStringOrStringOrString = (number) => {\n  return isStringOrNumberOrNumberOrStringOrStringOrStringOrStringOrStringOrStringOrStringOrStringOrString(number) || isStringOrNumberOrNumberOrStringOrStringOrStringOrStringOrStringOrStringOrStringOrString(number);\n};\n\nconst isStringOrNumberOrNumberOrStringOrStringOrStringOrStringOrStringOrStringOrStringOrStringOrString = (number) => {\n  return isStringOrNumberOrNumberOrStringOrStringOrStringOrStringOrStringOrStringOrStringOrStringOrStringOrString(number) || isStringOrNumberOrNumberOrStringOrStringOrStringOrStringOrStringOrStringOrString(number);\n};\n\nconst isStringOrNumberOrNumberOrStringOrStringOrStringOrStringOrStringOrStringOrStringOrStringOrString = (number) => {\n  return isStringOrNumberOrNumberOrStringOrStringOrStringOrStringOrStringOrStringOrStringOrStringOrStringOrString(number) || isStringOrNumberOrNumberOrStringOrStringOrStringOrStringOrStringOrStringOrStringOrString(number);\n};\n\nconst isStringOrNumberOrNumberOrStringOrStringOrStringOrStringOrStringOrStringOrStringOrStringOrStringOrStringOrString = (number) => {\n  return isStringOrNumberOrNumberOrStringOrStringOrStringOrStringOrStringOrStringOrStringOrStringOrStringOrStringOrString(number) || isStringOrNumberOrNumberOrStringOrStringOrStringOrStringOrStringOrStringOrStringOrStringOrString(number);\n};\n\nconst isStringOrNumberOrNumberOrStringOrStringOrStringOrStringOrStringOrStringOrStringOrStringOrStringOrStringOrStringOrStringOrStringOrString = (number) => {\n  return isStringOrNumberOrNumberOrStringOrStringOrStringOrStringOrStringOrStringOrStringOrStringOrStringOrStringOrStringOrStringOrStringOrString(number) || isStringOrNumberOrNumberOrStringOrStringOrStringOrStringOrStringOrStringOrStringOrStringOrString(number);\n};\n\nconst isStringOrNumberOrNumberOrStringOrStringOrStringOrStringOrStringOrStringOrStringOrStringOrStringOrStringOrStringOrStringOrStringOrStringOrStringOrString = (number) => {\n  return isStringOrNumberOrNumberOrStringOrStringOrStringOrStringOrStringOrStringOrStringOrStringOrStringOrStringOrStringOrStringOrStringOrStringOrStringOrStringOrStringOrStringOrString(number) || isStringOrNumberOrNumberOrStringOrStringOrStringOrStringOrStringOrStringOrStringOr"}
{"task_id": "JavaScript/4", "prompt": "/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\n\nconst meanAbsoluteDeviation = (numbers) => {\n  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n", "canonical_solution": "    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "partial": "/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    # print('@@this is the line to split##')\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "gc": "<|endoftext|>/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\n\nconst meanAbsoluteDeviation = (numbers) => {\n  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.pow(item - mean, 2);\n  }, 0) / numbers.length;\n};\n\nmodule.exports = meanAbsoluteDeviation;\n\n},{}],5:[function(require,module,exports){\n/**\n * Calculate the mean absolute deviation of a list of numbers.\n *\n * >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n * 1.0\n *\n * >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0])\n * 2.0\n *\n * >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0, 6.0])\n * 3.0\n *\n * >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0])\n * 4.0\n *\n * >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0])\n * 5.0\n *\n * >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0])\n * 6.0\n *\n * >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0])\n * 7.0\n *\n * >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0])\n * 8.0\n *\n * >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0])\n * 9.0\n *\n * >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0])\n * 10.0\n *\n * >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0])\n * 11.0\n *\n * >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0])\n * 12.0\n *\n * >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0])\n * 13.0\n *\n * >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0])\n * 14.0\n *\n * >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0])\n * 15.0\n *\n * >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0])\n * 16.0\n *\n * >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0])\n * 17.0\n *\n * >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0])\n * 18.0\n *\n * >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0, 22.0])\n * 19.0\n *\n * >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0, 22.0, 23.0])\n * 20.0\n *\n * >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0, 22.0, 23.0, 24.0])\n * 21.0\n *\n * >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0, 22.0, 23.0, 24.0, 25.0])\n * 22.0\n *\n * >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0, 22.0, 23.0, 24.0, 25.0, 26.0])\n * 23.0\n *\n * >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0, 22.0, 23.0, 24.0, 25.0, 26.0, 27.0])\n * 24.0\n *\n * >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0, 22.0, 23.0, 24.0, 25.0, 26.0, 27.0, 28.0])\n * 25.0\n *\n * >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0, 22.0, 23.0, 24.0, 25.0, 26.0, 27.0, 28.0, 29.0])\n * 26.0\n *\n * >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0, 22.0, 23.0, 24.0, 25.0, 26.0, 27.0, 28.0, 29.0, 30.0, 31.0])\n * 27.0\n *\n * >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0, 22.0, 23.0, 24.0, 25.0, 26.0, 27.0, 28.0, 29.0, 30.0, 31.0, 32.0])\n * 28.0\n *\n * >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0, 22.0, 23.0, 24.0, 25.0, 26.0, 27.0, 28.0, 29.0, 30.0, 31.0, 32.0, 33.0])\n * 29.0\n *\n * >>> mean"}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\n\nconst intersperse = (numbers, delimeter) => {\n  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n", "canonical_solution": "    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "partial": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    # print('@@this is the line to split##')\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "gc": "<|endoftext|>/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\n\nconst intersperse = (numbers, delimeter) => {\n  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    if (n && n.length == 1 && n[0]) {\n      result.push(n.join(delimeter));\n    } else {\n      result.push(n);\n    }\n  }\n  return result;\n};\n\n/* Remove trailing zeros from `number`\n  >>> removeTrailingZeros(0)\n  0\n  >>> removeTrailingZeros(0)\n  0\n  >>> removeTrailingZeros(0)\n  0\n  >>> removeTrailingZeros(0)\n  0\n  >>> removeTrailingZeros(0)\n  0\n  >>> removeTrailingZeros(0)\n  0\n  >>> removeTrailingZeros(0)\n  0\n  >>> removeTrailingZeros(0)\n  0\n  >>> removeTrailingZeros(0)\n  0\n  >>> removeTrailingZeros(0)\n  0\n  >>> removeTrailingZeros(0)\n  0\n  >>> removeTrailingZeros(0)\n  0\n  >>> removeTrailingZeros(0)\n  0\n  >>> removeTrailingZeros(0)\n  0\n  >>> removeTrailingZeros(0)\n  0\n  >>> removeTrailingZeros(0)\n  0\n  >>> removeTrailingZeros(0)\n  0\n  >>> removeTrailingZeros(0)\n  0\n  >>> removeTrailingZeros(0)\n  0\n  >>> removeTrailingZeros(0)\n  0\n  >>> removeTrailingZeros(0)\n  0\n  >>> removeTrailingZeros(0)\n  0\n  >>> removeTrailingZeros(0)\n  0\n  >>> removeTrailingZeros(0)\n  0\n  >>> removeTrailingZeros(0)\n  0\n  >>> removeTrailingZeros(0)\n  0\n  >>> removeTrailingZeros(0)\n  0\n  >>> removeTrailingZeros(0)\n  0\n  >>> removeTrailingZeros(0)\n  0\n  >>> removeTrailingZeros(0)\n  0\n  >>> removeTrailingZeros(0)\n  0\n  >>> removeTrailingZeros(0)\n  0\n  >>> removeTrailingZeros(0)\n  0\n  >>> removeTrailingZeros(0)\n  0\n  >>> removeTrailingZeros(0)\n  0\n  >>> removeTrailingZeros(0)\n  0\n  >>> removeTrailingZeros(0)\n  0\n  >>> removeTrailingZeros(0)\n  0\n  >>> removeTrailingZeros(0)\n  0\n  >>> removeTrailingZeros(0)\n  0\n  >>> removeTrailingZeros(0)\n  0\n  >>> removeTrailingZeros(0)\n  0\n  >>> removeTrailingZeros(0)\n  0\n  >>> removeTrailingZeros(0)\n  0\n  >>> removeTrailingZeros(0)\n  0\n  >>> removeTrailingZeros(0)\n  0\n  >>> removeTrailingZeros(0)\n  0\n  >>> removeTrailingZeros(0)\n  0\n  >>> removeTrailingZeros(0)\n  0\n  >>> removeTrailingZeros(0)\n  0\n  >>> removeTrailingZeros(0)\n  0\n  >>> removeTrailingZeros(0)\n  0\n  >>> removeTrailingZeros(0)\n  0\n  >>> removeTrailingZeros(0)\n  0\n  >>> removeTrailingZeros(0)\n  0\n  >>> removeTrailingZeros(0)\n  0\n  >>> removeTrailingZeros(0)\n  0\n  >>> removeTrailingZeros(0)\n  0\n  >>> removeTrailingZeros(0)\n  0\n  >>> removeTrailingZeros(0)\n  0\n  >>> removeTrailingZeros(0)\n  0\n  >>> removeTrailingZeros(0)\n  0\n  >>> removeTrailingZeros(0)\n  0\n  >>> removeTrailingZeros(0)\n  0\n  >>> removeTrailingZeros(0)\n  0\n  >>> removeTrailingZeros(0)\n  0\n  >>> removeTrailingZeros(0)\n  0\n  >>> removeTrailingZeros(0)\n  0\n  >>> removeTrailingZeros(0)\n  0\n  >>> removeTrailingZeros(0)\n  0\n  >>> removeTrailingZeros(0)\n  0\n  >>> removeTrailingZeros(0)\n  0\n  >>> removeTrailingZeros(0)\n  0\n  >>> removeTrailingZeros(0)\n  0\n  >>> removeTrailingZeros(0)\n  0\n  >>> removeTrailingZeros(0)\n  0\n  >>> removeTrailingZeros(0)\n  0\n  >>> removeTrailingZeros(0)\n  0\n  >>> removeTrailingZeros(0)\n  0\n  >>> removeTrailingZeros(0)\n  0\n  >>> removeTrailingZeros(0)\n  0\n  >>> removeTrailingZeros(0)\n  0\n  >>> removeTrailingZeros(0)\n  0\n  >>> removeTrailingZeros(0)\n  0\n  >>> removeTrailingZeros(0)\n  0\n  >>> removeTrailingZeros(0)\n  0\n  >>> removeTrailingZeros(0)\n  0\n  >>> removeTrailingZeros(0)\n  0\n  >>> removeTrailingZeros(0)\n  0\n  >>> removeTrailingZeros(0)\n  0\n  >>> removeTrailingZeros(0)\n  0\n  >>> removeTrailingZeros(0)\n  0\n  >>> removeTrailingZeros(0)\n  0\n  >>> removeTrailingZeros(0)\n  0\n  >>> removeTrailingZeros(0)\n  0\n  >>> removeTrailingZeros(0)\n  0\n  >>> removeTrailingZeros(0)\n  0\n  >>> removeTrailingZeros(0)\n  0\n  >>> removeTrailingZeros(0)\n  0\n  >>> removeTrailingZeros(0)\n  0\n  >>> removeTrailingZeros(0)\n  0\n  >>> removeTrailingZeros(0)\n  0\n  >>> removeTrailingZeros(0)\n  0\n  >>> removeTrailingZeros(0)\n  0\n  >>> removeTrailingZeros(0)\n  0\n  >>> removeTrailingZeros(0)\n  0\n  >>> removeTrailingZeros(0)\n  0\n  >>> removeTrailingZeros(0)\n  0\n  "}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\n\nconst parseNestedParens = (paren_string) => {\n  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n", "canonical_solution": "      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "partial": "/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n        # print('@@this is the line to split##')\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "gc": "<|endoftext|>/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\n\nconst parseNestedParens = (paren_string) => {\n  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n        if (depth > max_depth) {\n          max_depth = depth;\n        }\n      }\n    }\n    return max_depth;\n  };\n  var parseParens = paren_string.split(' ');\n  var result = [];\n  var max_depth = parseParenGroup(paren_string);\n  for (var i = 0; i < parseParens.length; i++) {\n    var depth = parseParenGroup('(' + parseParens[i] + ')');\n    if (depth > max_depth) {\n      max_depth = depth;\n    }\n  }\n  return result;\n};\n\nconst parseParensString = (paren_string) => {\n  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n        if (depth > max_depth) {\n          max_depth = depth;\n        }\n      }\n    }\n    return max_depth;\n  };\n  var parseParens = paren_string.split(' ');\n  var result = [];\n  var max_depth = parseParenGroup(paren_string);\n  for (var i = 0; i < parseParens.length; i++) {\n    var depth = parseParenGroup('(' + parseParens[i] + ')');\n    if (depth > max_depth) {\n      max_depth = depth;\n    }\n  }\n  return result;\n};\n\nconst parseParensStringWithParens = (paren_string) => {\n  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n        if (depth > max_depth) {\n          max_depth = depth;\n        }\n      }\n    }\n    return max_depth;\n  };\n  var parseParens = paren_string.split(' ');\n  var result = [];\n  var max_depth = parseParenGroup(paren_string);\n  for (var i = 0; i < parseParens.length; i++) {\n    var depth = parseParenGroup('(' + parseParens[i] + ')');\n    if (depth > max_depth) {\n      max_depth = depth;\n    }\n  }\n  return result;\n};\n\nconst parseParensStringWithParensAndParens = (paren_string) => {\n  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n        if (depth > max_depth) {\n          max_depth = depth;\n        }\n      }\n    }\n    return max_depth;\n  };\n  var parseParens = paren_string.split(' ');\n  var result = [];\n  var max_depth = parseParenGroup(paren_string);\n  for (var i = 0; i < parseParens.length; i++) {\n    var depth = parseParenGroup('(' + parseParens[i] + ')');\n    if (depth > max_depth) {\n      max_depth = depth;\n    }\n  }\n  return result;\n};\n\nconst parseParensStringWithParensAndParensAndParens = (paren_string) => {\n  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n        if (depth > max_depth) {\n          max_depth = depth;\n        }\n      }\n    }\n    return max_depth;\n  };\n  var parseParens = paren_string.split(' ');\n  var result = [];\n  var max_depth = parseParenGroup(paren_string);\n  for (var i = 0; i < parseParens.length; i++) {\n    var depth = parseParenGroup('(' + parseParens[i] + ')');\n    if (depth > max_depth) {\n      max_depth = depth;\n    }\n  }\n  return result;\n};\n\nconst parseParensStringWithParensAndParensAndParensAndParens = (paren_string) => {\n  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n        if (depth > max_depth) {\n          max_depth = depth;\n        }\n      }\n    }\n    return max_depth;\n  };\n  var parseParens = paren_string.split(' ');\n  var result = [];\n  var max_depth = parseParenGroup(paren_string);\n  for (var i = 0; i < parseParens.length; i++) {\n    var depth = parseParenGroup('(' + parseParens[i] + ')');\n    if (depth > max_depth) {\n      max_depth = depth;\n    }\n  }\n  return result;\n};\n\nconst parseParensStringWithParensAndParensAndParensAndParensAndParens = (paren_string) => {\n  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n        if (depth > max_depth) {\n          max_depth = depth;\n        }\n      }\n    }\n    return max_depth;\n  };\n  var parseParens = paren_string.split(' ');\n  var result = [];\n  var max_depth = parseParenGroup(paren_string);\n  for (var i = 0; i < parseParens.length; i++) {\n    var depth = parseParenGroup('(' + parseParens[i] + ')');\n    if (depth > max_depth) {\n      max_depth = depth;\n    }\n  }\n  return result;\n};\n\nconst parseParensStringWithParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAndParensAnd"}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\n\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(x => x.indexOf(substring) != -1);\n", "canonical_solution": "}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "partial": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(x => x.indexOf(substring) != -1);\n  # print('@@this is the line to split##')\n}\n\n", "gc": "<|endoftext|>/* Filter an input list of strings only for ones that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\n\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(x => x.indexOf(substring)!= -1);\n};\n\nexport default filterBySubstring;\n\n},{}],4:[function(require,module,exports){\n'use strict';\n\nconst _ = require('lodash');\n\nconst filterByKey = (obj, key) => {\n  return _.pickBy(obj, x => x[key]);\n};\n\nconst filterByValue = (obj, value) => {\n  return _.pickBy(obj, x => x[key] === value);\n};\n\nconst filterByKeyAndValue = (obj, key, value) => {\n  return _.pickBy(obj, x => x[key] === value && x[key]);\n};\n\nconst filterByKeyAndValueAndValue = (obj, key, value, value) => {\n  return _.pickBy(obj, x => x[key] === value && x[key] === value);\n};\n\nconst filterByKeyAndValueAndValueAndValue = (obj, key, value, value, value) => {\n  return _.pickBy(obj, x => x[key] === value && x[key] === value && x[key]);\n};\n\nconst filterByKeyAndValueAndValueAndValueAndValue = (obj, key, value, value, value, value) => {\n  return _.pickBy(obj, x => x[key] === value && x[key] === value && x[key] === value && x[key]);\n};\n\nconst filterByKeyAndValueAndValueAndValueAndValueAndValue = (obj, key, value, value, value, value, value) => {\n  return _.pickBy(obj, x => x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key]);\n};\n\nconst filterByKeyAndValueAndValueAndValueAndValueAndValueAndValue = (obj, key, value, value, value, value, value, value) => {\n  return _.pickBy(obj, x => x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key]);\n};\n\nconst filterByKeyAndValueAndValueAndValueAndValueAndValueAndValueAndValueAndValueAndValueAndValue = (obj, key, value, value, value, value, value, value, value, value, value, value) => {\n  return _.pickBy(obj, x => x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key] === value && x[key] === value "}
{"task_id": "JavaScript/8", "prompt": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\n\nconst sumProduct = (numbers, int) => {\n  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n", "canonical_solution": "    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "partial": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    # print('@@this is the line to split##')\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "gc": "<|endoftext|>/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\n\nconst sumProduct = (numbers, int) => {\n  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n};\n\nmodule.exports = sumProduct;\n\n/***/ }),\n\n/***/ \"./src/math/sumOfSquares.js\":\n/*!***********************************************!*\\\n !***./src/math/sumOfSquares.js ***!\n  \\***********************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nconst sumOfSquares = (n) => {\n  return n * n;\n};\n\nmodule.exports = sumOfSquares;\n\n/***/ }),\n\n/***/ \"./src/math/sumOfTriangles.js\":\n/*!***********************************************!*\\\n !***./src/math/sumOfTriangles.js ***!\n  \\***********************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nconst sumOfTriangles = (n) => {\n  return n * n * n;\n};\n\nmodule.exports = sumOfTriangles;\n\n/***/ }),\n\n/***/ \"./src/math/sumOfVectors.js\":\n/*!***********************************************!*\\\n !***./src/math/sumOfVectors.js ***!\n  \\***********************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nconst sumOfVectors = (n) => {\n  return n * n;\n};\n\nmodule.exports = sumOfVectors;\n\n/***/ }),\n\n/***/ \"./src/math/sumOfVectorsSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquared"}
{"task_id": "JavaScript/9", "prompt": "/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\n\nconst rollingMax = (numbers) => {\n  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n", "canonical_solution": "      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "partial": "/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      # print('@@this is the line to split##')\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "gc": "<|endoftext|>/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\n\nconst rollingMax = (numbers) => {\n  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(n);\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling minimum element found until given moment\n  in the sequence.\n  >>> rollingMin([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 4, 2, 3]\n  */\n\nconst rollingMin = (numbers) => {\n  var running_min, result = [];\n  for (const n of numbers) {\n    if (running_min == undefined)\n      running_min = n;\n    else\n      running_min = Math.min(running_min, n);\n    result.push(n);\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling sum element found until given moment\n  in the sequence.\n  >>> rollingSum([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 4, 5, 6, 7]\n  */\n\nconst rollingSum = (numbers) => {\n  var running_sum, result = [];\n  for (const n of numbers) {\n    if (running_sum == undefined)\n      running_sum = n;\n    else\n      running_sum += n;\n    result.push(n);\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling mean element found until given moment\n  in the sequence.\n  >>> rollingMean([1, 2, 3, 2, 3, 4, 2])\n  [1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, "}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\n\nconst makePalindrome = (string) => {\n  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n", "canonical_solution": "  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "partial": "/* Test if gniven strig is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  # print('@@this is the line to split##')\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "gc": "<|endoftext|>/* Test if gniven strig is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\n\nconst makePalindrome = (string) => {\n  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  var palindrome = '';\n  var suffix = '';\n  var reversed_string = '';\n  var palindrome_length = 0;\n  var palindrome_length_of_string = 0;\n  var palindrome_length_of_reversed_string = 0;\n  var palindrome_length_of_reversed_string2 = 0;\n  var palindrome_length_of_reversed_string3 = 0;\n  var palindrome_length_of_reversed_string4 = 0;\n  var palindrome_length_of_reversed_string5 = 0;\n  var palindrome_length_of_reversed_string6 = 0;\n  var palindrome_length_of_reversed_string7 = 0;\n  var palindrome_length_of_reversed_string8 = 0;\n  var palindrome_length_of_reversed_string9 = 0;\n  var palindrome_length_of_reversed_string10 = 0;\n  var palindrome_length_of_reversed_string11 = 0;\n  var palindrome_length_of_reversed_string12 = 0;\n  var palindrome_length_of_reversed_string13 = 0;\n  var palindrome_length_of_reversed_string14 = 0;\n  var palindrome_length_of_reversed_string15 = 0;\n  var palindrome_length_of_reversed_string16 = 0;\n  var palindrome_length_of_reversed_string17 = 0;\n  var palindrome_length_of_reversed_string18 = 0;\n  var palindrome_length_of_reversed_string19 = 0;\n  var palindrome_length_of_reversed_string20 = 0;\n  var palindrome_length_of_reversed_string21 = 0;\n  var palindrome_length_of_reversed_string22 = 0;\n  var palindrome_length_of_reversed_string23 = 0;\n  var palindrome_length_of_reversed_string24 = 0;\n  var palindrome_length_of_reversed_string25 = 0;\n  var palindrome_length_of_reversed_string26 = 0;\n  var palindrome_length_of_reversed_string27 = 0;\n  var palindrome_length_of_reversed_string28 = 0;\n  var palindrome_length_of_reversed_string29 = 0;\n  var palindrome_length_of_reversed_string30 = 0;\n  var palindrome_length_of_reversed_string31 = 0;\n  var palindrome_length_of_reversed_string32 = 0;\n  var palindrome_length_of_reversed_string33 = 0;\n  var palindrome_length_of_reversed_string34 = 0;\n  var palindrome_length_of_reversed_string35 = 0;\n  var palindrome_length_of_reversed_string36 = 0;\n  var palindrome_length_of_reversed_string37 = 0;\n  var palindrome_length_of_reversed_string38 = 0;\n  var palindrome_length_of_reversed_string39 = 0;\n  var palindrome_length_of_reversed_string40 = 0;\n  var palindrome_length_of_reversed_string41 = 0;\n  var palindrome_length_of_reversed_string42 = 0;\n  var palindrome_length_of_reversed_string43 = 0;\n  var palindrome_length_of_reversed_string44 = 0;\n  var palindrome_length_of_reversed_string45 = 0;\n  var palindrome_length_of_reversed_string46 = 0;\n  var palindrome_length_of_reversed_string47 = 0;\n  var palindrome_length_of_reversed_string48 = 0;\n  var palindrome_length_of_reversed_string49 = 0;\n  var palindrome_length_of_reversed_string50 = 0;\n  var palindrome_length_of_reversed_string51 = 0;\n  var palindrome_length_of_reversed_string52 = 0;\n  var palindrome_length_of_reversed_string53 = 0;\n  var palindrome_length_of_reversed_string54 = 0;\n  var palindrome_length_of_reversed_string55 = 0;\n  var palindrome_length_of_reversed_string56 = 0;\n  var palindrome_length_of_reversed_string57 = 0;\n  var palindrome_length_of_reversed_string58 = 0;\n  var palindrome_length_of_reversed_string59 = 0;\n  var palindrome_length_of_reversed_string60 = 0;\n  var palindrome_length_of_reversed_string61 = 0;\n  var palindrome_length_of_reversed_string62 = 0;\n  var palindrome_length_of_reversed_string63 = 0;\n  var palindrome_length_of_reversed_string64 = 0;\n  var palindrome_length_of_reversed_string65 = 0;\n  var palindrome_length_of_reversed_string66 = 0;\n  var palindrome_length_of_reversed_string67 = 0;\n  var palindrome_length_of_reversed_string68 = 0;\n  var palindrome_length_of_reversed_string69 = 0;\n  var palindrome_length_of_reversed_string70 = 0;\n  var palindrome_length_of_reversed_string71 = 0;\n  var palindrome_length_of_reversed_string72 = 0;\n  var palindrome_length_of_reversed_string73 = 0;\n  var palindrome_length_of_reversed_string74 = 0;\n  var palindrome_length_of_reversed_string75 = 0;\n  var palindrome_length_of_reversed_string76 = 0;\n  var palindrome_length_of_reversed_string77 = 0;\n  var palindrome_length_of_reversed_string78 = 0;\n  var palindrome_length_of_reversed_string79 = 0;\n  var palindrome_length_of_reversed_string80 = 0;\n  var palindrome_length_of_reversed_string81 = 0;\n  var palindrome_length_of_reversed_string82 = 0;\n  var palindrome_length_of_reversed_string83 = 0;\n  var palindrome_length_of_reversed_string84 = 0;\n  var palindrome_length_of_reversed_string85 = 0;\n  var palindrome_length_of_reversed_string86 = 0;\n  var palindrome_length_of_reversed_string87 = 0;\n  var palindrome_length_of_reversed_string88 = 0;\n  var palindrome_length_of_reversed_string89 = 0;\n  var palindrome_length_of_reversed_string90 = 0;\n  var palindrome_length_of_reversed_string91 = 0;\n  var palindrome_length_of_reversed_string92 = 0;\n  var palindrome_length_of_reversed_string93 = 0;\n  var palindrome_length_of_reversed_string94 = 0;\n  var palindrome_length_of_reversed_string95 = 0;\n  var palindrome_length_of_reversed_string96 = 0;\n  var palindrome_length_of_reversed_string97 = 0;\n  var palindrome_length_of_reversed_string98 = 0;\n  var palindrome_length_of_reversed_string99 = 0;\n  var palindrome_length_of_reversed_string100 = 0;\n  var palindrome_length_of_reversed_string101 = 0;\n  var palindrome_length_of_reversed_string102 = 0;\n  var palindrome_length_of_reversed_string"}
{"task_id": "JavaScript/11", "prompt": "/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\n\nconst stringXor = (a, b) => {\n  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n", "canonical_solution": "      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "partial": "/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      # print('@@this is the line to split##')\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "gc": "<|endoftext|>/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\n\nconst stringXor = (a, b) => {\n  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  };\n  return a.split('').map(function (x) {\n    return b.map(function (y) {\n      return xor(x, y);\n    }).join('');\n  }).join('');\n};\n\nmodule.exports = stringXor;\n\n/***/ }),\n/* 14 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nconst { createHash } = __webpack_require__(0);\n\nconst hash = function (string) {\n  return createHash('md5').update(string).digest('hex');\n};\n\nmodule.exports = hash;\n\n/***/ }),\n/* 15 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nconst { createHash } = __webpack_require__(0);\n\nconst hash = function (string) {\n  return createHash('sha256').update(string).digest('hex');\n};\n\nmodule.exports = hash;\n\n/***/ }),\n/* 16 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nconst { createHash } = __webpack_require__(0);\n\nconst hash = function (string) {\n  return createHash('sha512').update(string).digest('hex');\n};\n\nmodule.exports = hash;\n\n/***/ }),\n/* 17 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nconst { createHash } = __webpack_require__(0);\n\nconst hash = function (string) {\n  return createHash('ripemd160').update(string).digest('hex');\n};\n\nmodule.exports = hash;\n\n/***/ }),\n/* 18 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nconst { createHash } = __webpack_require__(0);\n\nconst hash = function (string) {\n  return createHash('sha512').update(string).digest('hex');\n};\n\nmodule.exports = hash;\n\n/***/ }),\n/* 19 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nconst { createHash } = __webpack_require__(0);\n\nconst hash = function (string) {\n  return createHash('sha512').update(string).digest('hex');\n};\n\nmodule.exports = hash;\n\n/***/ }),\n/* 20 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nconst { createHash } = __webpack_require__(0);\n\nconst hash = function (string) {\n  return createHash('sha512').update(string).digest('hex');\n};\n\nmodule.exports = hash;\n\n/***/ }),\n/* 21 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nconst { createHash } = __webpack_require__(0);\n\nconst hash = function (string) {\n  return createHash('sha512').update(string).digest('hex');\n};\n\nmodule.exports = hash;\n\n/***/ }),\n/* 22 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nconst { createHash } = __webpack_require__(0);\n\nconst hash = function (string) {\n  return createHash('sha512').update(string).digest('hex');\n};\n\nmodule.exports = hash;\n\n/***/ }),\n/* 23 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nconst { createHash } = __webpack_require__(0);\n\nconst hash = function (string) {\n  return createHash('sha512').update(string).digest('hex');\n};\n\nmodule.exports = hash;\n\n/***/ }),\n/* 24 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nconst { createHash } = __webpack_require__(0);\n\nconst hash = function (string) {\n  return createHash('sha512').update(string).digest('hex');\n};\n\nmodule.exports = hash;\n\n/***/ }),\n/* 25 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nconst { createHash } = __webpack_require__(0);\n\nconst hash = function (string) {\n  return createHash('sha512').update(string).digest('hex');\n};\n\nmodule.exports = hash;\n\n/***/ }),\n/* 26 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nconst { createHash } = __webpack_require__(0);\n\nconst hash = function (string) {\n  return createHash('sha512').update(string).digest('hex');\n};\n\nmodule.exports = hash;\n\n/***/ }),\n/* 27 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nconst { createHash } = __webpack_require__(0);\n\nconst hash = function (string) {\n  return createHash('sha512').update(string).digest('hex');\n};\n\nmodule.exports = hash;\n\n/***/ }),\n/* 28 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nconst { createHash } = __webpack_require__(0);\n\nconst hash = function (string) {\n  return createHash('sha512').update(string).digest('hex');\n};\n\nmodule.exports = hash;\n\n/***/ }),\n/* 29 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nconst { createHash } = __webpack_require__(0);\n\nconst hash = function (string) {\n  return createHash('sha512').update(string).digest('hex');\n};\n\nmodule.exports = hash;\n\n/***/ }),\n/* 30 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nconst { createHash } = __webpack_require__(0);\n\nconst hash = function (string) {\n  return createHash('sha512').update(string).digest('hex');\n};\n\nmodule.exports = hash;\n\n/***/ }),\n/* 31 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nconst { createHash } = __webpack_require__(0);\n\nconst hash = function (string) {\n  return createHash('sha512').update(string).digest('hex');\n};\n\nmodule.exports = hash;\n\n/***/ }),\n/* 32 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nconst { createHash } = __webpack_require__(0);\n\nconst hash = function (string) {\n  return createHash('sha512').update(string).digest('hex');\n};\n\nmodule.exports = hash;\n\n/***/ }),\n/* 33 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nconst { createHash } = __webpack_require__(0);\n\nconst hash = function (string) {\n  return createHash('sha512').update(string).digest('hex');\n};\n\nmodule.exports = hash;\n\n/***/ }),\n/* 34 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nconst { createHash } = __webpack_require__(0);\n\nconst hash = function (string) {\n  return createHash('sha512').update(string).digest('hex');\n};\n\nmodule.exports = hash;\n\n/***/ }),\n/* 35 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nconst { createHash } = __webpack_require__(0);\n\nconst hash = function (string) {\n  return createHash('sha512').update(string).digest('hex');\n};\n\nmodule.exports = hash;\n\n/***/ }),\n/* 36 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nconst { createHash } = __webpack_require__(0);\n\nconst hash = function (string) {\n  return createHash('sha512').update(string).digest('hex');\n};\n\nmodule.exports = hash;\n\n/***/ }),\n/* 37 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nconst { createHash } = __webpack_require__(0);\n\nconst hash = function (string) {\n  return createHash('sha512').update(string).digest('hex');\n};\n\nmodule.exports = hash;\n\n/***/ }),\n/* 38 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nconst { createHash } = __webpack_require__(0);\n\nconst hash = function (string) {\n  return createHash('sha512').update(string).digest('hex');\n};\n\nmodule.exports = hash;\n\n/***/ }),\n/* 39 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nconst { createHash } = __webpack_require__(0);\n\nconst hash = function (string) {\n  return createHash('sha512').update(string).digest('hex');\n};\n\nmodule.exports = hash;\n\n/***/ }),\n/* 40 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nconst { createHash } = __webpack_require__(0);\n\nconst hash = function (string) {\n  return createHash('sha512').update(string).digest('hex');\n};\n\nmodule.exports = hash;\n\n/***/ }),\n/* 41 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nconst { createHash } = __webpack_require__(0);\n\nconst hash = function (string) {\n  return createHash('sha512').update(string).digest('hex');\n};\n\nmodule.exports = hash;\n\n/***/ }),\n/* 42 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nconst { createHash } = __webpack_require__(0);\n\nconst hash = function (string) {\n  return createHash('sha512').update(string).digest('hex');\n};\n\nmodule.exports = hash;\n\n/***/ }),\n/* 43 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nconst { createHash } = __webpack_require__(0);\n\nconst hash = function (string) {\n  return createHash('sha512').update(string).digest('hex');\n};\n\nmodule.exports = hash;\n\n/***/ }),\n/* 44 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nconst { createHash } = __webpack_require__(0);\n\nconst hash = function (string) {\n  return createHash('sha512').update(string).digest('hex');\n};\n\nmodule.exports = hash;\n\n/***/ }),\n/* 45 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nconst { createHash } = __webpack_require__(0);\n\nconst hash = function (string) {"}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the longest one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\n\nconst longest = (strings) => {\n  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n", "canonical_solution": "    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "partial": "/* Out of list of strings, return the longest one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    # print('@@this is the line to split##')\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "gc": "<|endoftext|>/* Out of list of strings, return the longest one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\n\nconst longest = (strings) => {\n  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen)\n      return s;\n  }\n  return null;\n};\n\nmodule.exports = longest;\n\n},{}],6:[function(require,module,exports){\nconst { isArray } = Array;\n\n/**\n * Returns true if all elements of the array are true.\n * Returns false if any element of the array is false.\n * Returns undefined if any of the elements of the array is undefined.\n */\nconst all = (...args) => {\n  if (args.length == 0)\n    return undefined;\n  for (const arg of args) {\n    if (arg == undefined)\n      return false;\n  }\n  return true;\n};\n\n/**\n * Returns true if all elements of the array are false.\n * Returns false if any element of the array is true.\n * Returns undefined if any of the elements of the array is undefined.\n */\nconst any = (...args) => {\n  if (args.length == 0)\n    return undefined;\n  for (const arg of args) {\n    if (arg == true)\n      return false;\n  }\n  return true;\n};\n\n/**\n * Returns true if all elements of the array are true.\n * Returns false if any element of the array is false.\n * Returns undefined if any of the elements of the array is undefined.\n */\nconst none = (...args) => {\n  if (args.length == 0)\n    return undefined;\n  for (const arg of args) {\n    if (arg == false)\n      return true;\n  }\n  return false;\n};\n\n/**\n * Returns true if all elements of the array are false.\n * Returns false if any element of the array is true.\n * Returns undefined if any of the elements of the array is undefined.\n */\nconst allFalse = (...args) => {\n  if (args.length == 0)\n    return undefined;\n  for (const arg of args) {\n    if (arg == false)\n      return false;\n  }\n  return true;\n};\n\n/**\n * Returns true if all elements of the array are false.\n * Returns false if any element of the array is true.\n * Returns undefined if any of the elements of the array is undefined.\n */\nconst anyFalse = (...args) => {\n  if (args.length == 0)\n    return undefined;\n  for (const arg of args) {\n    if (arg == true)\n      return false;\n  }\n  return true;\n};\n\n/**\n * Returns true if all elements of the array are true.\n * Returns false if any element of the array is false.\n * Returns undefined if any of the elements of the array is undefined.\n */\nconst noneFalse = (...args) => {\n  if (args.length == 0)\n    return undefined;\n  for (const arg of args) {\n    if (arg == false)\n      return true;\n  }\n  return false;\n};\n\n/**\n * Returns true if all elements of the array are false.\n * Returns false if any element of the array is true.\n * Returns undefined if any of the elements of the array is undefined.\n */\nconst allTrue = (...args) => {\n  if (args.length == 0)\n    return undefined;\n  for (const arg of args) {\n    if (arg == true)\n      return true;\n  }\n  return false;\n};\n\n/**\n * Returns true if all elements of the array are false.\n * Returns false if any element of the array is true.\n * Returns undefined if any of the elements of the array is undefined.\n */\nconst anyTrue = (...args) => {\n  if (args.length == 0)\n    return undefined;\n  for (const arg of args) {\n    if (arg == false)\n      return false;\n  }\n  return true;\n};\n\n/**\n * Returns true if all elements of the array are true.\n * Returns false if any element of the array is false.\n * Returns undefined if any of the elements of the array is undefined.\n */\nconst allTrueOrFalse = (...args) => {\n  if (args.length == 0)\n    return undefined;\n  for (const arg of args) {\n    if (arg == true)\n      return true;\n    if (arg == false)\n      return false;\n  }\n  return true;\n};\n\n/**\n * Returns true if all elements of the array are true.\n * Returns false if any element of the array is false.\n * Returns undefined if any of the elements of the array is undefined.\n */\nconst anyTrueOrFalse = (...args) => {\n  if (args.length == 0)\n    return undefined;\n  for (const arg of args) {\n    if (arg == false)\n      return false;\n    if (arg == true)\n      return true;\n  }\n  return true;\n};\n\n/**\n * Returns true if all elements of the array are true.\n * Returns false if any element of the array is false.\n * Returns undefined if any of the elements of the array is undefined.\n */\nconst allFalseOrTrue = (...args) => {\n  if (args.length == 0)\n    return undefined;\n  for (const arg of args) {\n    if (arg == false)\n      return true;\n    if (arg == true)\n      return false;\n  }\n  return true;\n};\n\n/**\n * Returns true if all elements of the array are true.\n * Returns false if any element of the array is false.\n * Returns undefined if any of the elements of the array is undefined.\n */\nconst anyFalseOrTrue = (...args) => {\n  if (args.length == 0)\n    return undefined;\n  for (const arg of args) {\n    if (arg == true)\n      return false;\n    if (arg == false)\n      return true;\n  }\n  return true;\n};\n\n/**\n * Returns true if all elements of the array are true.\n * Returns false if any element of the array is false.\n * Returns undefined if any of the elements of the array is undefined.\n */\nconst allTrueOrFalseOrTrue = (...args) => {\n  if (args.length == 0)\n    return undefined;\n  for (const arg of args) {\n    if (arg == true)\n      return true;\n    if (arg == false)\n      return false;\n  }\n  return true;\n};\n\n/**\n * Returns true if all elements of the array are true.\n * Returns false if any element of the array is false.\n * Returns undefined if any of the elements of the array is undefined.\n */\nconst anyTrueOrFalseOrTrue = (...args) => {\n  if (args.length == 0)\n    return undefined;\n  for (const arg of args) {\n    if (arg == false)\n      return false;\n    if (arg == true)\n      return true;\n  }\n  return true;\n};\n\n/**\n * Returns true if all elements of the array are true.\n * Returns false if any element of the array is false.\n * Returns undefined if any of the elements of the array is undefined.\n */\nconst allTrueOrFalseOrFalse = (...args) => {\n  if (args.length == 0)\n    return undefined;\n  for (const arg of args) {\n    if (arg == false)\n      return false;\n    if (arg == true)\n      return false;\n  }\n  return true;\n};\n\n/**\n * Returns true if all elements of the array are true.\n * Returns false if any element of the array is false.\n * Returns undefined if any of the elements of the array is undefined.\n */\nconst anyTrueOrFalseOrFalse = (...args) => {\n  if (args.length == 0)\n    return undefined;\n  for (const arg of args) {\n    if (arg == false)\n      return false;\n    if (arg == true)\n      return false;\n  }\n  return true;\n};\n\n/**\n * Returns true if all elements of the array are true.\n * Returns false if any element of the array is false.\n * Returns undefined if any of the elements of the array is undefined.\n */\nconst allTrueOrFalseOrTrueOrFalse = (...args) => {\n  if (args.length == 0)\n    return undefined;\n  for (const arg of args) {\n    if (arg == false)\n      return false;\n    if (arg == true)\n      return false;\n  }\n  return "}
{"task_id": "JavaScript/13", "prompt": "/* Return a greatest common divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\n\nconst greatestCommonDivisor = (a, b) => {\n  while (b != 0) {\n    let temp = a;\n    a = b;\n", "canonical_solution": "    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "partial": "/* Return a greatest common divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  while (b != 0) {\n    let temp = a;\n    a = b;\n    # print('@@this is the line to split##')\n    b = temp % b;\n  }\n  return a;\n}\n\n", "gc": "<|endoftext|>/* Return a greatest common divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\n\nconst greatestCommonDivisor = (a, b) => {\n  while (b!= 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n};\n\n/**\n * Return a random integer between min and max\n * >>> randomInt(1, 100)\n  1\n  >>> randomInt(1, 100)\n  50\n  */\n\nconst randomInt = (a, b) => {\n  return Math.floor(Math.random() * (b - a + 1) + a);\n};\n\n/**\n * Return a random integer between min and max\n * >>> randomInt(1, 100)\n  1\n  >>> randomInt(1, 100)\n  50\n  */\n\nconst randomIntInRange = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n\n/**\n * Return a random integer between min and max\n * >>> randomInt(1, 100)\n  1\n  >>> randomInt(1, 100)\n  50\n  */\n\nconst randomIntInRangeInclusive = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n\n/**\n * Return a random integer between min and max\n * >>> randomInt(1, 100)\n  1\n  >>> randomInt(1, 100)\n  50\n  */\n\nconst randomIntInclusive = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n\n/**\n * Return a random integer between min and max\n * >>> randomInt(1, 100)\n  1\n  >>> randomInt(1, 100)\n  50\n  */\n\nconst randomIntInclusiveInRange = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n\n/**\n * Return a random integer between min and max\n * >>> randomInt(1, 100)\n  1\n  >>> randomInt(1, 100)\n  50\n  */\n\nconst randomIntInclusiveInRangeInclusive = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n\n/**\n * Return a random integer between min and max\n * >>> randomInt(1, 100)\n  1\n  >>> randomInt(1, 100)\n  50\n  */\n\nconst randomIntInclusiveInRangeInclusiveInRange = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n\n/**\n * Return a random integer between min and max\n * >>> randomInt(1, 100)\n  1\n  >>> randomInt(1, 100)\n  50\n  */\n\nconst randomIntInclusiveInRangeInclusiveInRangeInclusive = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n\n/**\n * Return a random integer between min and max\n * >>> randomInt(1, 100)\n  1\n  >>> randomInt(1, 100)\n  50\n  */\n\nconst randomIntInclusiveInRangeInclusiveInRangeInclusiveInRange = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n\n/**\n * Return a random integer between min and max\n * >>> randomInt(1, 100)\n  1\n  >>> randomInt(1, 100)\n  50\n  */\n\nconst randomIntInclusiveInRangeInclusiveInRangeInclusiveInRangeInclusiveInRange = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n\n/**\n * Return a random integer between min and max\n * >>> randomInt(1, 100)\n  1\n  >>> randomInt(1, 100)\n  50\n  */\n\nconst randomIntInclusiveInRangeInclusiveInRangeInclusiveInRangeInclusiveInRange = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n\n/**\n * Return a random integer between min and max\n * >>> randomInt(1, 100)\n  1\n  >>> randomInt(1, 100)\n  50\n  */\n\nconst randomIntInclusiveInRangeInclusiveInRangeInclusiveInRangeInclusiveInRangeInclusiveInRange = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n\n/**\n * Return a random integer between min and max\n * >>> randomInt(1, 100)\n  1\n  >>> randomInt(1, 100)\n  50\n  */\n\nconst randomIntInclusiveInRangeInclusiveInRangeInclusiveInRangeInclusiveInRangeInclusiveInRange = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n\n/**\n * Return a random integer between min and max\n * >>> randomInt(1, 100)\n  1\n  >>> randomInt(1, 100)\n  50\n  */\n\nconst randomIntInclusiveInRangeInclusiveInRangeInclusiveInRangeInclusiveInRangeInclusiveInRange = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n\n/**\n * Return a random integer between min and max\n * >>> randomInt(1, 100)\n  1\n  >>> randomInt(1, 100)\n  50\n  */\n\nconst randomIntInclusiveInRangeInclusiveInRangeInclusiveInRangeInclusiveInRangeInclusiveInRangeInclusiveInRange = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n\n/**\n * Return a random integer between min and max\n * >>> randomInt(1, 100)\n  1\n  >>> randomInt(1, 100)\n  50\n  */\n\nconst randomIntInclusiveInRangeInclusiveInRangeInclusiveInRangeInclusiveInRangeInclusiveInRangeInclusiveInRange = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n\n/**\n * Return a random integer between min and max\n * >>> randomInt(1, 100)\n  1\n  >>> randomInt(1, 100)\n  50\n  */\n\nconst randomIntInclusiveInRangeInclusiveInRangeInclusiveInRangeInclusiveInRangeInclusiveInRangeInclusiveInRange = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n\n/**\n * Return a random integer between min and max\n * >>> randomInt(1, 100)\n  1\n  >>> randomInt(1, 100)\n  50\n  */\n\nconst randomIntInclusiveInRangeInclusiveInRangeInclusiveInRangeInclusiveInRangeInclusiveInRangeInclusiveInRange = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n\n/**\n * Return a random integer between min and max\n * >>> randomInt(1, 100)\n  1\n  >>> randomInt(1, 100)\n  50\n  */\n\nconst randomIntInclusiveInRangeInclusiveInRangeInclusiveInRangeInclusiveInRangeInclusiveInRangeInclusiveInRange = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n\n/**\n * Return a random integer between min and max\n * >>> randomInt(1, 100)\n  1\n  >>> randomInt(1, 100)\n  50\n  */\n\nconst randomIntInclusiveInRangeInclusiveInRangeInclusiveInRangeInclusiveInRangeInclusiveInRangeInclusiveInRange = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n\n/**\n * Return a random integer between min and max\n * >>> randomInt(1, 100)\n  1\n  >>> randomInt(1, 100)\n  50\n  */\n\nconst randomIntInclusiveInRangeInclusiveInRangeInclusiveInRangeInclusiveInRangeInclusiveInRangeInclusiveInRange = (min, max) => {\n  return Math.floor(Math.random() * (max - "}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\n\nconst allPrefixes = (string) => {\n  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n", "canonical_solution": "  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "partial": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n    # print('@@this is the line to split##')\n  }\n  return result;\n}\n\n", "gc": "<|endoftext|>/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\n\nconst allPrefixes = (string) => {\n  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n};\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['c', 'ba', 'ca']\n  */\n\nconst allSuffixes = (string) => {\n  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(i+1));\n  }\n  return result;\n};\n\n/* Return list of all suffixes from longest to shortest of the input string\n  >>> allSuffixes('abc')\n  ['ba', 'ca']\n  */\n\nconst allSuffixesReverse = (string) => {\n  var result = [];\n  for (let i = string.length - 1; i >= 0; i--) {\n    result.push(string.slice(i+1));\n  }\n  return result;\n};\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffixesReverse('abc')\n  ['c', 'ba', 'ca']\n  */\n\nconst allSuffixesReverseReverse = (string) => {\n  var result = [];\n  for (let i = string.length - 1; i >= 0; i--) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n};\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffixesReverseReverse('abc')\n  ['ba', 'ca']\n  */\n\nconst allSuffixesReverseReverseReverse = (string) => {\n  var result = [];\n  for (let i = string.length - 1; i >= 0; i--) {\n    result.push(string.slice(i+1));\n  }\n  return result;\n};\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffixesReverseReverseReverse('abc')\n  ['c', 'ba', 'ca']\n  */\n\nconst allSuffixesReverseReverseReverseReverse = (string) => {\n  var result = [];\n  for (let i = string.length - 1; i >= 0; i--) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n};\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffixesReverseReverseReverseReverse('abc')\n  ['ba', 'ca']\n  */\n\nconst allSuffixesReverseReverseReverseReverseReverse = (string) => {\n  var result = [];\n  for (let i = string.length - 1; i >= 0; i--) {\n    result.push(string.slice(i+1));\n  }\n  return result;\n};\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffixesReverseReverseReverseReverseReverseReverse('abc')\n  ['c', 'ba', 'ca']\n  */\n\nconst allSuffixesReverseReverseReverseReverseReverseReverse = (string) => {\n  var result = [];\n  for (let i = string.length - 1; i >= 0; i--) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n};\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffixesReverseReverseReverseReverseReverseReverseReverseReverse('abc')\n  ['ba', 'ca']\n  */\n\nconst allSuffixesReverseReverseReverseReverseReverseReverseReverseReverse = (string) => {\n  var result = [];\n  for (let i = string.length - 1; i >= 0; i--) {\n    result.push(string.slice(i+1));\n  }\n  return result;\n};\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffixesReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse"}
{"task_id": "JavaScript/15", "prompt": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\n\nconst stringSequence = (n) => {\n  return [...Array(n).keys(), n].join(' ')\n", "canonical_solution": "}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "partial": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  return [...Array(n).keys(), n].join(' ')\n  # print('@@this is the line to split##')\n}\n\n", "gc": "<|endoftext|>/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\n\nconst stringSequence = (n) => {\n  return [...Array(n).keys(), n].join(' ')\n}\n\n/* Return a string containing space-delimited numbers starting from n inclusive.\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\n\nconst stringSequenceUpTo = (n) => {\n  return [...Array(n).keys()].join(' ')\n}\n\n/* Return a string containing space-delimited numbers starting from n inclusive.\n  >>> stringSequenceUpTo(5)\n  '0 1 2 3 4 5'\n  */\n\nconst stringSequenceUpTo = (n, separator ='') => {\n  return [...Array(n).keys()].join(separator)\n}\n\n/* Return a string containing space-delimited numbers starting from n inclusive.\n  >>> stringSequenceUpTo(5,'')\n  '0 1 2 3 4 5'\n  */\n\nconst stringSequenceUpTo = (n, separator ='') => {\n  return [...Array(n).keys()].join(separator)\n}\n\n/* Return a string containing space-delimited numbers starting from n inclusive.\n  >>> stringSequenceUpTo(5,'').length\n  5\n  */\n\nconst stringSequenceUpTo = (n, separator ='') => {\n  return [...Array(n).keys()].join(separator)\n}\n\n/* Return a string containing space-delimited numbers starting from n inclusive.\n  >>> stringSequenceUpTo(5,'').length\n  5\n  */\n\nconst stringSequenceUpTo = (n, separator ='') => {\n  return [...Array(n).keys()].join(separator)\n}\n\n/* Return a string containing space-delimited numbers starting from n inclusive.\n  >>> stringSequenceUpTo(5,'').length\n  5\n  */\n\nconst stringSequenceUpTo = (n, separator ='') => {\n  return [...Array(n).keys()].join(separator)\n}\n\n/* Return a string containing space-delimited numbers starting from n inclusive.\n  >>> stringSequenceUpTo(5,'').length\n  5\n  */\n\nconst stringSequenceUpTo = (n, separator ='') => {\n  return [...Array(n).keys()].join(separator)\n}\n\n/* Return a string containing space-delimited numbers starting from n inclusive.\n  >>> stringSequenceUpTo(5,'').length\n  5\n  */\n\nconst stringSequenceUpTo = (n, separator ='') => {\n  return [...Array(n).keys()].join(separator)\n}\n\n/* Return a string containing space-delimited numbers starting from n inclusive.\n  >>> stringSequenceUpTo(5,'').length\n  5\n  */\n\nconst stringSequenceUpTo = (n, separator ='') => {\n  return [...Array(n).keys()].join(separator)\n}\n\n/* Return a string containing space-delimited numbers starting from n inclusive.\n  >>> stringSequenceUpTo(5,'').length\n  5\n  */\n\nconst stringSequenceUpTo = (n, separator ='') => {\n  return [...Array(n).keys()].join(separator)\n}\n\n/* Return a string containing space-delimited numbers starting from n inclusive.\n  >>> stringSequenceUpTo(5,'').length\n  5\n  */\n\nconst stringSequenceUpTo = (n, separator ='') => {\n  return [...Array(n).keys()].join(separator)\n}\n\n/* Return a string containing space-delimited numbers starting from n inclusive.\n  >>> stringSequenceUpTo(5,'').length\n  5\n  */\n\nconst stringSequenceUpTo = (n, separator ='') => {\n  return [...Array(n).keys()].join(separator)\n}\n\n/* Return a string containing space-delimited numbers starting from n inclusive.\n  >>> stringSequenceUpTo(5,'').length\n  5\n  */\n\nconst stringSequenceUpTo = (n, separator ='') => {\n  return [...Array(n).keys()].join(separator)\n}\n\n/* Return a string containing space-delimited numbers starting from n inclusive.\n  >>> stringSequenceUpTo(5,'').length\n  5\n  */\n\nconst stringSequenceUpTo = (n, separator ='') => {\n  return [...Array(n).keys()].join(separator)\n}\n\n/* Return a string containing space-delimited numbers starting from n inclusive.\n  >>> stringSequenceUpTo(5,'').length\n  5\n  */\n\nconst stringSequenceUpTo = (n, separator ='') => {\n  return [...Array(n).keys()].join(separator)\n}\n\n/* Return a string containing space-delimited numbers starting from n inclusive.\n  >>> stringSequenceUpTo(5,'').length\n  5\n  */\n\nconst stringSequenceUpTo = (n, separator ='') => {\n  return [...Array(n).keys()].join(separator)\n}\n\n/* Return a string containing space-delimited numbers starting from n inclusive.\n  >>> stringSequenceUpTo(5,'').length\n  5\n  */\n\nconst stringSequenceUpTo = (n, separator ='') => {\n  return [...Array(n).keys()].join(separator)\n}\n\n/* Return a string containing space-delimited numbers starting from n inclusive.\n  >>> stringSequenceUpTo(5,'').length\n  5\n  */\n\nconst stringSequenceUpTo = (n, separator ='') => {\n  return [...Array(n).keys()].join(separator)\n}\n\n/* Return a string containing space-delimited numbers starting from n inclusive.\n  >>> stringSequenceUpTo(5,'').length\n  5\n  */\n\nconst stringSequenceUpTo = (n, separator ='') => {\n  return [...Array(n).keys()].join(separator)\n}\n\n/* Return a string containing space-delimited numbers starting from n inclusive.\n  >>> stringSequenceUpTo(5,'').length\n  5\n  */\n\nconst stringSequenceUpTo = (n, separator ='') => {\n  return [...Array(n).keys()].join(separator)\n}\n\n/* Return a string containing space-delimited numbers starting from n inclusive.\n  >>> stringSequenceUpTo(5,'').length\n  5\n  */\n\nconst stringSequenceUpTo = (n, separator ='') => {\n  return [...Array(n).keys()].join(separator)\n}\n\n/* Return a string containing space-delimited numbers starting from n inclusive.\n  >>> stringSequenceUpTo(5,'').length\n  5\n  */\n\nconst stringSequenceUpTo = (n, separator ='') => {\n  return [...Array(n).keys()].join(separator)\n}\n\n/* Return a string containing space-delimited numbers starting from n inclusive.\n  >>> stringSequenceUpTo(5,'').length\n  5\n  */\n\nconst stringSequenceUpTo = (n, separator ='') => {\n  return [...Array(n).keys()].join(separator)\n}\n\n/* Return a string containing space-delimited numbers starting from n inclusive.\n  >>> stringSequenceUpTo(5,'').length\n  5\n  */\n\nconst stringSequenceUpTo = (n, separator ='') => {\n  return [...Array(n).keys()].join(separator)\n}\n\n/* Return a string containing space-delimited numbers starting from n inclusive.\n  >>> stringSequenceUpTo(5,'').length\n  5\n  */\n\nconst stringSequenceUpTo = (n, separator ='') => {\n  return [...Array(n).keys()].join(separator)\n}\n\n/* Return a string containing space-delimited numbers starting from n inclusive.\n  >>> stringSequenceUpTo(5,'').length\n  5\n  */\n\nconst stringSequenceUpTo = (n, separator ='') => {"}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\n\nconst countDistinctCharacters = (string) => {\n  return (new Set(string.toLowerCase())).size;\n", "canonical_solution": "\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "partial": "/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  return (new Set(string.toLowerCase())).size;\n  # print('@@this is the line to split##')\n\n}\n\n", "gc": "<|endoftext|>/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\n\nconst countDistinctCharacters = (string) => {\n  return (new Set(string.toLowerCase())).size;\n};\n\nmodule.exports = countDistinctCharacters;\n\n},{}],17:[function(require,module,exports){\nconst { createHash } = require('crypto');\n\nconst hash = (string) => {\n  return createHash('sha256').update(string).digest('hex');\n};\n\nmodule.exports = hash;\n\n},{\"crypto\":17}],18:[function(require,module,exports){\nconst { createHash } = require('crypto');\n\nconst hash = (string) => {\n  return createHash('sha256').update(string).digest('hex');\n};\n\nmodule.exports = hash;\n\n},{\"crypto\":17}],19:[function(require,module,exports){\nconst { createHash } = require('crypto');\n\nconst hash = (string) => {\n  return createHash('sha256').update(string).digest('hex');\n};\n\nmodule.exports = hash;\n\n},{\"crypto\":17}],20:[function(require,module,exports){\nconst { createHash } = require('crypto');\n\nconst hash = (string) => {\n  return createHash('sha256').update(string).digest('hex');\n};\n\nmodule.exports = hash;\n\n},{\"crypto\":17}],21:[function(require,module,exports){\nconst { createHash } = require('crypto');\n\nconst hash = (string) => {\n  return createHash('sha256').update(string).digest('hex');\n};\n\nmodule.exports = hash;\n\n},{\"crypto\":17}],22:[function(require,module,exports){\nconst { createHash } = require('crypto');\n\nconst hash = (string) => {\n  return createHash('sha256').update(string).digest('hex');\n};\n\nmodule.exports = hash;\n\n},{\"crypto\":17}],23:[function(require,module,exports){\nconst { createHash } = require('crypto');\n\nconst hash = (string) => {\n  return createHash('sha256').update(string).digest('hex');\n};\n\nmodule.exports = hash;\n\n},{\"crypto\":17}],24:[function(require,module,exports){\nconst { createHash } = require('crypto');\n\nconst hash = (string) => {\n  return createHash('sha256').update(string).digest('hex');\n};\n\nmodule.exports = hash;\n\n},{\"crypto\":17}],25:[function(require,module,exports){\nconst { createHash } = require('crypto');\n\nconst hash = (string) => {\n  return createHash('sha256').update(string).digest('hex');\n};\n\nmodule.exports = hash;\n\n},{\"crypto\":17}],26:[function(require,module,exports){\nconst { createHash } = require('crypto');\n\nconst hash = (string) => {\n  return createHash('sha256').update(string).digest('hex');\n};\n\nmodule.exports = hash;\n\n},{\"crypto\":17}],27:[function(require,module,exports){\nconst { createHash } = require('crypto');\n\nconst hash = (string) => {\n  return createHash('sha256').update(string).digest('hex');\n};\n\nmodule.exports = hash;\n\n},{\"crypto\":17}],28:[function(require,module,exports){\nconst { createHash } = require('crypto');\n\nconst hash = (string) => {\n  return createHash('sha256').update(string).digest('hex');\n};\n\nmodule.exports = hash;\n\n},{\"crypto\":17}],29:[function(require,module,exports){\nconst { createHash } = require('crypto');\n\nconst hash = (string) => {\n  return createHash('sha256').update(string).digest('hex');\n};\n\nmodule.exports = hash;\n\n},{\"crypto\":17}],30:[function(require,module,exports){\nconst { createHash } = require('crypto');\n\nconst hash = (string) => {\n  return createHash('sha256').update(string).digest('hex');\n};\n\nmodule.exports = hash;\n\n},{\"crypto\":17}],31:[function(require,module,exports){\nconst { createHash } = require('crypto');\n\nconst hash = (string) => {\n  return createHash('sha256').update(string).digest('hex');\n};\n\nmodule.exports = hash;\n\n},{\"crypto\":17}],32:[function(require,module,exports){\nconst { createHash } = require('crypto');\n\nconst hash = (string) => {\n  return createHash('sha256').update(string).digest('hex');\n};\n\nmodule.exports = hash;\n\n},{\"crypto\":17}],33:[function(require,module,exports){\nconst { createHash } = require('crypto');\n\nconst hash = (string) => {\n  return createHash('sha256').update(string).digest('hex');\n};\n\nmodule.exports = hash;\n\n},{\"crypto\":17}],34:[function(require,module,exports){\nconst { createHash } = require('crypto');\n\nconst hash = (string) => {\n  return createHash('sha256').update(string).digest('hex');\n};\n\nmodule.exports = hash;\n\n},{\"crypto\":17}],35:[function(require,module,exports){\nconst { createHash } = require('crypto');\n\nconst hash = (string) => {\n  return createHash('sha256').update(string).digest('hex');\n};\n\nmodule.exports = hash;\n\n},{\"crypto\":17}],36:[function(require,module,exports){\nconst { createHash } = require('crypto');\n\nconst hash = (string) => {\n  return createHash('sha256').update(string).digest('hex');\n};\n\nmodule.exports = hash;\n\n},{\"crypto\":17}],37:[function(require,module,exports){\nconst { createHash } = require('crypto');\n\nconst hash = (string) => {\n  return createHash('sha256').update(string).digest('hex');\n};\n\nmodule.exports = hash;\n\n},{\"crypto\":17}],38:[function(require,module,exports){\nconst { createHash } = require('crypto');\n\nconst hash = (string) => {\n  return createHash('sha256').update(string).digest('hex');\n};\n\nmodule.exports = hash;\n\n},{\"crypto\":17}],39:[function(require,module,exports){\nconst { createHash } = require('crypto');\n\nconst hash = (string) => {\n  return createHash('sha256').update(string).digest('hex');\n};\n\nmodule.exports = hash;\n\n},{\"crypto\":17}],40:[function(require,module,exports){\nconst { createHash } = require('crypto');\n\nconst hash = (string) => {\n  return createHash('sha256').update(string).digest('hex');\n};\n\nmodule.exports = hash;\n\n},{\"crypto\":17}],41:[function(require,module,exports){\nconst { createHash } = require('crypto');\n\nconst hash = (string) => {\n  return createHash('sha256').update(string).digest('hex');\n};\n\nmodule.exports = hash;\n\n},{\"crypto\":17}],42:[function(require,module,exports){\nconst { createHash } = require('crypto');\n\nconst hash = (string) => {\n  return createHash('sha256').update(string).digest('hex');\n};\n\nmodule.exports = hash;\n\n},{\"crypto\":17}],43:[function(require,module,exports){\nconst { createHash } = require('crypto');\n\nconst hash = (string) => {\n  return createHash('sha256').update(string).digest('hex');\n};\n\nmodule.exports = hash;\n\n},{\"crypto\":17}],44:[function(require,module,exports){\nconst { createHash } = require('crypto');\n\nconst hash = (string) => {\n  return createHash('sha256').update(string).digest('hex');\n};\n\nmodule.exports = hash;\n\n},{\"crypto\":17}],45:[function(require,module,exports){\nconst { createHash } = require('crypto');\n\nconst hash"}
{"task_id": "JavaScript/17", "prompt": "/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\n\nconst parseMusic = (music_string) => {\n  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n", "canonical_solution": "  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "partial": "/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  # print('@@this is the line to split##')\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "gc": "<|endoftext|>/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\n\nconst parseMusic = (music_string) => {\n  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  const notes = music_string.split('|');\n  const result = [];\n  for (let i = 0; i < notes.length; i++) {\n    const note = notes[i];\n    const note_index = note_map[note];\n    if (note_index === undefined) {\n      console.error('Invalid music string');\n      return [];\n    }\n    result.push(note_index);\n  }\n  return result;\n};\n\nmodule.exports = parseMusic;\n\n},{}],4:[function(require,module,exports){\nconst parseNotes = require('./parseNotes');\n\nconst parseNote = (note_string) => {\n  const notes = note_string.split('|');\n  const note_index = parseInt(notes[0], 10);\n  const note_octave = parseInt(notes[1], 10);\n  const note_note = notes[2];\n  const note_note_index = parseInt(note_note, 10);\n  const note_note_index = note_index - note_note_index;\n  return note_index;\n};\n\nconst parseNotes = parseNotes;\n\nmodule.exports = parseNote;\n\n},{\"./parseNotes\":3}],5:[function(require,module,exports){\nconst parseNotes = require('./parseNotes');\n\nconst parseNote = (note_string) => {\n  const notes = note_string.split('|');\n  const note_index = parseInt(notes[0], 10);\n  const note_octave = parseInt(notes[1], 10);\n  const note_note = notes[2];\n  const note_note_index = parseInt(note_note, 10);\n  const note_note_index = note_index - note_note_index;\n  return note_index;\n};\n\nconst parseNotes = parseNotes;\n\nmodule.exports = parseNote;\n\n},{\"./parseNotes\":3}],6:[function(require,module,exports){\nconst parseNotes = require('./parseNotes');\n\nconst parseNote = (note_string) => {\n  const notes = note_string.split('|');\n  const note_index = parseInt(notes[0], 10);\n  const note_octave = parseInt(notes[1], 10);\n  const note_note = notes[2];\n  const note_note_index = parseInt(note_note, 10);\n  const note_note_index = note_index - note_note_index;\n  return note_index;\n};\n\nconst parseNotes = parseNotes;\n\nmodule.exports = parseNote;\n\n},{\"./parseNotes\":3}],7:[function(require,module,exports){\nconst parseNotes = require('./parseNotes');\n\nconst parseNote = (note_string) => {\n  const notes = note_string.split('|');\n  const note_index = parseInt(notes[0], 10);\n  const note_octave = parseInt(notes[1], 10);\n  const note_note = notes[2];\n  const note_note_index = parseInt(note_note, 10);\n  const note_note_index = note_index - note_note_index;\n  return note_index;\n};\n\nconst parseNotes = parseNotes;\n\nmodule.exports = parseNote;\n\n},{\"./parseNotes\":3}],8:[function(require,module,exports){\nconst parseNotes = require('./parseNotes');\n\nconst parseNote = (note_string) => {\n  const notes = note_string.split('|');\n  const note_index = parseInt(notes[0], 10);\n  const note_octave = parseInt(notes[1], 10);\n  const note_note = notes[2];\n  const note_note_index = parseInt(note_note, 10);\n  const note_note_index = note_index - note_note_index;\n  return note_index;\n};\n\nconst parseNotes = parseNotes;\n\nmodule.exports = parseNote;\n\n},{\"./parseNotes\":3}],9:[function(require,module,exports){\nconst parseNotes = require('./parseNotes');\n\nconst parseNote = (note_string) => {\n  const notes = note_string.split('|');\n  const note_index = parseInt(notes[0], 10);\n  const note_octave = parseInt(notes[1], 10);\n  const note_note = notes[2];\n  const note_note_index = parseInt(note_note, 10);\n  const note_note_index = note_index - note_note_index;\n  return note_index;\n};\n\nconst parseNotes = parseNotes;\n\nmodule.exports = parseNote;\n\n},{\"./parseNotes\":3}],10:[function(require,module,exports){\nconst parseNotes = require('./parseNotes');\n\nconst parseNote = (note_string) => {\n  const notes = note_string.split('|');\n  const note_index = parseInt(notes[0], 10);\n  const note_octave = parseInt(notes[1], 10);\n  const note_note = notes[2];\n  const note_note_index = parseInt(note_note, 10);\n  const note_note_index = note_index - note_note_index;\n  return note_index;\n};\n\nconst parseNotes = parseNotes;\n\nmodule.exports = parseNote;\n\n},{\"./parseNotes\":3}],11:[function(require,module,exports){\nconst parseNotes = require('./parseNotes');\n\nconst parseNote = (note_string) => {\n  const notes = note_string.split('|');\n  const note_index = parseInt(notes[0], 10);\n  const note_octave = parseInt(notes[1], 10);\n  const note_note = notes[2];\n  const note_note_index = parseInt(note_note, 10);\n  const note_note_index = note_index - note_note_index;\n  return note_index;\n};\n\nconst parseNotes = parseNotes;\n\nmodule.exports = parseNote;\n\n},{\"./parseNotes\":3}],12:[function(require,module,exports){\nconst parseNotes = require('./parseNotes');\n\nconst parseNote = (note_string) => {\n  const notes = note_string.split('|');\n  const note_index = parseInt(notes[0], 10);\n  const note_octave = parseInt(notes[1], 10);\n  const note_note = notes[2];\n  const note_note_index = parseInt(note_note, 10);\n  const note_note_index = note_index - note_note_index;\n  return note_index;\n};\n\nconst parseNotes = parseNotes;\n\nmodule.exports = parseNote;\n\n},{\"./parseNotes\":3}],13:[function(require,module,exports){\nconst parseNotes = require('./parseNotes');\n\nconst parseNote = (note_string) => {\n  const notes = note_string.split('|');\n  const note_index = parseInt(notes[0], 10);\n  const note_octave = parseInt(notes[1], 10);\n  const note_note = notes[2];\n  const note_note_index = parseInt(note_note, 10);\n  const note_note_index = note_index - note_note_index;\n  return note_index;\n};\n\nconst parseNotes = parseNotes;\n\nmodule.exports = parseNote;\n\n},{\"./parseNotes\":3}],14:[function(require,module,exports){\nconst parseNotes = require('./parseNotes');\n\nconst parseNote = (note_string) => {\n  const notes = note_string.split('|');\n  const note_index = parseInt(notes[0], 10);\n  const note_octave = parseInt(notes[1], 10);\n  const note_note = notes[2];\n  const note_note_index = parseInt(note_note, 10);\n  const note_note_index = note_index - note_note_index;\n  return note_index;\n};\n\nconst parseNotes = parseNotes;\n\nmodule.exports = parseNote;\n\n},{\"./parseNotes\":3}],15:[function(require,module,exports){\nconst parseNotes = require('./parseNotes');\n\nconst parseNote = (note_string) => {\n  const notes = note_string.split('|');\n  const note_index = parseInt(notes[0], 10);\n  const note_octave = parseInt(notes[1], 10);\n  const note_note = notes[2];\n  const note_note_index = parseInt(note_note, 10);\n  const note_note_index = note_index - note_note_index;\n  return note_index;\n};\n\nconst parseNote"}
{"task_id": "JavaScript/18", "prompt": "/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\n\nconst howManyTimes = (string, substring) => {\n  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n", "canonical_solution": "    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "partial": "/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n      # print('@@this is the line to split##')\n    }\n  }\n  return times;\n}\n\n", "gc": "<|endoftext|>/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\n\nconst howManyTimes = (string, substring) => {\n  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n};\n\nmodule.exports = howManyTimes;\n\n},{}],18:[function(require,module,exports){\n'use strict';\n\nconst { isString } = require('lodash');\n\nconst isNumber = (val) => isString(val) && val.length === 1 && val[0] === '.';\n\nconst isStringOrNumber = (val) => isString(val) || isNumber(val);\n\nconst isStringOrNumberOrString = (val) => isStringOrNumber(val) || isString(val);\n\nconst isStringOrNumberOrStringOrNumber = (val) => isStringOrNumberOrString(val) || isNumber(val);\n\nconst isStringOrNumberOrStringOrNumberOrString = (val) => isStringOrNumberOrStringOrNumber(val) || isStringOrNumberOrString(val);\n\nconst isStringOrNumberOrStringOrNumberOrStringOrNumberOrString = (val) => isStringOrNumberOrStringOrNumberOrStringOrNumber(val) || isStringOrNumberOrStringOrStringOrNumber(val);\n\nconst isStringOrNumberOrStringOrNumberOrStringOrNumberOrStringOrNumber = (val) => isStringOrNumberOrStringOrNumberOrStringOrNumberOrString(val) || isStringOrNumberOrStringOrNumberOrStringOrNumber(val);\n\nconst isStringOrNumberOrStringOrNumberOrStringOrNumberOrStringOrNumberOrString = (val) => isStringOrNumberOrStringOrNumberOrStringOrNumberOrStringOrNumberOrString(val) || isStringOrNumberOrStringOrNumberOrStringOrNumberOrString(val);\n\nconst isStringOrNumberOrStringOrNumberOrStringOrNumberOrStringOrNumberOrStringOrNumberOrStringOrNumber = (val) => isStringOrNumberOrStringOrNumberOrStringOrNumberOrStringOrNumberOrStringOrNumber(val) || isStringOrNumberOrStringOrNumberOrStringOrNumberOrStringOrNumber(val);\n\nconst isStringOrNumberOrStringOrNumberOrStringOrNumberOrStringOrNumberOrStringOrNumberOrStringOrNumberOrString = (val) => isStringOrNumberOrStringOrNumberOrStringOrNumberOrStringOrNumberOrStringOrNumberOrStringOrNumberOrStringOrNumber(val) || isStringOrNumberOrStringOrNumberOrStringOrNumberOrStringOrNumberOrStringOrNumber(val);\n\nconst isStringOrNumberOrStringOrNumberOrStringOrNumberOrStringOrNumberOrStringOrNumberOrStringOrNumberOrStringOrNumber = (val) => isStringOrNumberOrStringOrNumberOrStringOrNumberOrStringOrNumberOrStringOrNumberOrStringOrNumberOrStringOrNumber(val) || isStringOrNumberOrStringOrNumberOrStringOrNumberOrStringOrNumberOrStringOrNumber(val);\n\nconst isStringOrNumberOrStringOrNumberOrStringOrNumberOrStringOrNumberOrStringOrNumberOrStringOrNumberOrStringOrNumberOrStringOrNumber = (val) => isStringOrNumberOrStringOrNumberOrStringOrNumberOrStringOrNumberOrStringOrNumberOrStringOrNumberOrStringOrNumberOrStringOrNumber(val) || isStringOrNumberOrStringOrNumberOrStringOrNumberOrStringOrNumberOrStringOrNumberOrStringOrNumber(val);\n\nconst isStringOrNumberOrStringOrNumberOrStringOrNumberOrStringOrNumberOrStringOrNumberOrStringOrNumberOrStringOrNumberOrStringOrNumberOrStringOrNumber = (val) => isStringOrNumberOrStringOrNumberOrStringOrNumberOrStringOrNumberOrStringOrNumberOrStringOrNumberOrStringOrNumberOrStringOrNumberOrStringOrNumber(val) || isStringOrNumberOrStringOrNumberOrStringOrNumberOrStringOrNumberOrStringOrNumberOrStringOrNumberOrStringOrNumber(val);\n\nconst isStringOrNumberOrStringOrNumberOrStringOrNumberOrStringOrNumberOrStringOrNumberOrStringOrNumberOrStringOrNumberOrStringOrNumberOrStringOrNumber = (val) => isStringOrNumberOrStringOrNumberOrStringOrNumberOrStringOrNumberOrStringOrNumberOrStringOrNumberOrStringOrNumberOrStringOrNumberOrStringOrNumber(val) || isStringOrNumberOrStringOrNumberOrStringOrNumberOrStringOrNumberOrStringOrNumberOrStringOrNumberOrStringOrNumber(val);\n\nconst isStringOrNumberOrStringOrNumberOrStringOrNumberOrStringOrNumberOrStringOrNumberOrStringOrNumberOrStringOrNumberOrStringOrNumberOrStringOrNumber = (val) => isStringOrNumberOrStringOrNumberOrStringOrNumberOrStringOrNumberOrStringOrNumberOrStringOrNumberOrStringOrNumberOrStringOrNumberOrStringOrNumber(val) || isStringOrNumberOrStringOrNumberOrStringOrNumberOrStringOrNumberOrStringOrNumberOrStringOrNumber(val);\n\nconst isStringOrNumberOrStringOrNumberOrStringOrNumberOrStringOrNumberOrStringOrNumberOrStringOrNumberOrStringOrNumberOrStringOrNumberOrStringOrNumber = (val) => isStringOrNumberOrStringOrNumberOrStringOrNumberOrStringOrNumberOrStringOrNumberOrStringOrNumberOrStringOrNumberOrStringOrNumberOrStringOrNumber(val) || isStringOrNumberOrStringOrNumberOrStringOrNumberOrStringOrNumberOrStringOrNumberOrStringOrNumber(val);\n\nconst isStringOrNumberOrStringOrNumberOrStringOrNumberOrStringOrNumberOrStringOrNumberOrStringOrNumberOrStringOrNumberOrStringOrNumberOrStringOrNumber = (val) => isStringOrNumberOrStringOrNumberOrStringOrNumberOrStringOrNumberOrStringOrNumberOrStringOrNumberOrStringOrNumberOrStringOrNumberOrStringOrNumberOrStringOrNumber(val) || isStringOrNumberOrStringOrNumberOrStringOrNumberOrStringOrNumberOrStringOrNumberOrStringOrNumberOrStringOrNumber(val);\n\nconst isStringOrNumberOrStringOrNumberOrStringOrNumberOrStringOrNumberOrStringOrNumberOrStringOrNumberOrStringOrNumberOrStringOrNumberOrStringOrNumber = (val) => isStringOrNumberOrStringOrNumberOrStringOrNumberOrStringOrNumberOrStringOrNumberOrStringOrNumberOrStringOrNumberOrStringOrNumberOrStringOrNumber(val) || isStringOrNumberOrStringOrNumberOrStringOrNumberOrStringOrNumberOrStringOrNumberOrStringOrNumberOrStringOrNumber(val);\n\nconst isStringOrNumberOrStringOrNumberOrStringOrNumberOrStringOrNumberOrStringOrNumberOrStringOrNumberOrStringOrNumberOrStringOrNumberOrStringOrNumber = (val) => isStringOrNumberOrStringOrNumberOrStringOrNumberOrStringOrNumberOrStringOrNumberOrStringOrNumberOrStringOrNumberOrStringOrNumberOrStringOrNumber(val) || isStringOrNumberOrStringOrNumberOrStringOrNumberOrStringOrNumberOrStringOrNumberOrStringOrNumber(val);\n\nconst isStringOrNumberOrStringOrNumberOrStringOrNumberOrStringOrNumberOrStringOrNumberOrStringOrNumberOrStringOrNumberOrStringOrNumberOrStringOrNumberOrStringOrNumber = (val) => isStringOrNumberOrStringOrNumberOrStringOrNumberOr"}
{"task_id": "JavaScript/19", "prompt": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\n\nconst sortNumbers = (numbers) => {\n  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n", "canonical_solution": "    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "partial": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    # print('@@this is the line to split##')\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "gc": "<|endoftext|>/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\n\nconst sortNumbers = (numbers) => {\n  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n   'six': 6,\n   'seven': 7,\n    'eight': 8,\n    'nine': 9,\n  };\n  const numbers_sorted = numbers.split(' ').map(n => value_map[n]);\n  return numbers_sorted.join(' ');\n};\n\n/* Given a string, return the first character of the string if it is\n  a letter, otherwise return '?'.\n  >>> firstLetter('hello')\n  'h'\n  >>> firstLetter('hello123')\n  'h'\n  >>> firstLetter('hello123qwerty')\n  '?'\n  */\n\nconst firstLetter = (str) => {\n  return str[0] === str[0].toLowerCase()? str.substr(1) : '?';\n};\n\n/* Given a string, return the first character of the string if it is\n  a number, otherwise return '?'.\n  >>> firstNumber(123)\n  '1'\n  >>> firstNumber(123)\n  '1'\n  >>> firstNumber('123')\n  '1'\n  >>> firstNumber('123qwerty')\n  '?'\n  */\n\nconst firstNumber = (str) => {\n  return str[0] === str[0].toLowerCase()? str.substr(1) : '?';\n};\n\n/* Given a string, return the first character of the string if it is\n  a letter, otherwise return '?'.\n  >>> firstLetter(123)\n  '1'\n  >>> firstLetter(123)\n  '1'\n  >>> firstLetter('123')\n  '1'\n  >>> firstLetter('123qwerty')\n  '?'\n  */\n\nconst firstLetterOrNumber = (str) => {\n  return str[0] === str[0].toLowerCase()? str.substr(1) : '?';\n};\n\n/* Given a string, return the first character of the string if it is\n  a number, otherwise return '?'.\n  >>> firstNumber(123)\n  '1'\n  >>> firstNumber(123)\n  '1'\n  >>> firstNumber('123')\n  '1'\n  >>> firstNumber('123qwerty')\n  '?'\n  */\n\nconst firstNumberOrNumber = (str) => {\n  return str[0] === str[0].toLowerCase()? str.substr(1) : '?';\n};\n\n/* Given a string, return the first character of the string if it is\n  a letter, otherwise return '?'.\n  >>> firstLetter(123)\n  '1'\n  >>> firstLetter(123)\n  '1'\n  >>> firstLetter('123')\n  '1'\n  >>> firstLetter('123qwerty')\n  '?'\n  */\n\nconst firstLetterOrNumberOrLetter = (str) => {\n  return str[0] === str[0].toLowerCase()? str.substr(1) : '?';\n};\n\n/* Given a string, return the first character of the string if it is\n  a number, otherwise return '?'.\n  >>> firstNumber(123)\n  '1'\n  >>> firstNumber(123)\n  '1'\n  >>> firstNumber('123')\n  '1'\n  >>> firstNumber('123qwerty')\n  '?'\n  */\n\nconst firstNumberOrNumberOrLetter = (str) => {\n  return str[0] === str[0].toLowerCase()? str.substr(1) : '?';\n};\n\n/* Given a string, return the first character of the string if it is\n  a letter, otherwise return '?'.\n  >>> firstLetter(123)\n  '1'\n  >>> firstLetter(123)\n  '1'\n  >>> firstLetter('123')\n  '1'\n  >>> firstLetter('123qwerty')\n  '?'\n  */\n\nconst firstLetterOrNumberOrLetterOrNumber = (str) => {\n  return str[0] === str[0].toLowerCase()? str.substr(1) : '?';\n};\n\n/* Given a string, return the first character of the string if it is\n  a number, otherwise return '?'.\n  >>> firstNumber(123)\n  '1'\n  >>> firstNumber(123)\n  '1'\n  >>> firstNumber('123')\n  '1'\n  >>> firstNumber('123qwerty')\n  '?'\n  */\n\nconst firstNumberOrNumberOrLetterOrNumber = (str) => {\n  return str[0] === str[0].toLowerCase()? str.substr(1) : '?';\n};\n\n/* Given a string, return the first character of the string if it is\n  a letter, otherwise return '?'.\n  >>> firstLetter(123)\n  '1'\n  >>> firstLetter(123)\n  '1'\n  >>> firstLetter('123')\n  '1'\n  >>> firstLetter('123qwerty')\n  '?'\n  */\n\nconst firstLetterOrNumberOrLetterOrNumberOrLetter = (str) => {\n  return str[0] === str[0].toLowerCase()? str.substr(1) : '?';\n};\n\n/* Given a string, return the first character of the string if it is\n  a number, otherwise return '?'.\n  >>> firstNumber(123)\n  '1'\n  >>> firstNumber(123)\n  '1'\n  >>> firstNumber('123')\n  '1'\n  >>> firstNumber('123qwerty')\n  '?'\n  */\n\nconst firstNumberOrNumberOrLetterOrNumberOrLetter = (str) => {\n  return str[0] === str[0].toLowerCase()? str.substr(1) : '?';\n};\n\n/* Given a string, return the first character of the string if it is\n  a letter, otherwise return '?'.\n  >>> firstLetter(123)\n  '1'\n  >>> firstLetter(123)\n  '1'\n  >>> firstLetter('123')\n  '1'\n  >>> firstLetter('123qwerty')\n  '?'\n  */\n\nconst firstLetterOrNumberOrLetterOrNumberOrLetterOrNumber = (str) => {\n  return str[0] === str[0].toLowerCase()? str.substr(1) : '?';\n};\n\n/* Given a string, return the first character of the string if it is\n  a number, otherwise return '?'.\n  >>> firstNumber(123)\n  '1'\n  >>> firstNumber(123)\n  '1'\n  >>> firstNumber('123')\n  '1'\n  >>> firstNumber('123qwerty')\n  '?'\n  */\n\nconst firstNumberOrNumberOrLetterOrNumberOrLetterOrNumber = (str) => {\n  return str[0] === str[0].toLowerCase()? str.substr(1) : '?';\n};\n\n/* Given a string, return the first character of the string if it is\n  a letter, otherwise return '?'.\n  >>> firstLetter(123)\n  '1'\n  >>> firstLetter(123)\n  '1'\n  >>> firstLetter('123')\n  '1'\n  >>> firstLetter('123qwerty')\n  '?'\n  */\n\nconst firstLetterOrNumberOrLetterOrNumberOrLetterOrNumberOrLetter = (str) => {\n  return str[0] === str[0].toLowerCase()? str.substr(1) : '?';\n};\n\n/* Given a string, return the first character of the string if it is\n  a number, otherwise return '?'.\n  >>> firstNumber(123)\n  '1'\n  >>> firstNumber(123)\n  '1'\n  >>> firstNumber('123')\n  '1'\n  >>> firstNumber('123qwerty')"}
{"task_id": "JavaScript/20", "prompt": "/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\n\nconst findClosestElements = (numbers) => {\n  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n", "canonical_solution": "          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "partial": "/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          # print('@@this is the line to split##')\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "gc": "<|endoftext|>/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\n\nconst findClosestElements = (numbers) => {\n  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i!= j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          distance = Math.abs(a - b) + Math.abs(a - closest_pair[1]);\n          closest_pair = [a, b];\n        }\n      }\n  return closest_pair;\n};\n\nmodule.exports = findClosestElements;\n\n/***/ }),\n/* 5 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar isInteger = __webpack_require__(3).isInteger;\nvar isNumber = __webpack_require__(3).isNumber;\nvar isString = __webpack_require__(3).isString;\n\nvar isInteger = Number.isInteger || function (value) {\n  return typeof value === 'number' && isFinite(value) && Math.floor(value) === value;\n};\n\nvar isNumber = Number.isNumber || function (value) {\n  return typeof value === 'number' && isFinite(value);\n};\n\nvar isString = String.isString || function (value) {\n  return typeof value ==='string';\n};\n\nvar isString = isString.bind(String);\n\nvar isInteger = isInteger.bind(Number);\n\nvar isNumber = isNumber.bind(Number);\n\nvar isString = isString.bind(String);\n\nvar isInteger = isInteger.bind(Number);\n\nvar isNumber = isNumber.bind(Number);\n\nvar isString = isString.bind(String);\n\nvar isInteger = isInteger.bind(Number);\n\nvar isNumber = isNumber.bind(Number);\n\nvar isString = isString.bind(String);\n\nvar isInteger = isInteger.bind(Number);\n\nvar isNumber = isNumber.bind(Number);\n\nvar isString = isString.bind(String);\n\nvar isInteger = isInteger.bind(Number);\n\nvar isNumber = isNumber.bind(Number);\n\nvar isString = isString.bind(String);\n\nvar isInteger = isInteger.bind(Number);\n\nvar isNumber = isNumber.bind(Number);\n\nvar isString = isString.bind(String);\n\nvar isInteger = isInteger.bind(Number);\n\nvar isNumber = isNumber.bind(Number);\n\nvar isString = isString.bind(String);\n\nvar isInteger = isInteger.bind(Number);\n\nvar isNumber = isNumber.bind(Number);\n\nvar isString = isString.bind(String);\n\nvar isInteger = isInteger.bind(Number);\n\nvar isNumber = isNumber.bind(Number);\n\nvar isString = isString.bind(String);\n\nvar isInteger = isInteger.bind(Number);\n\nvar isNumber = isNumber.bind(Number);\n\nvar isString = isString.bind(String);\n\nvar isInteger = isInteger.bind(Number);\n\nvar isNumber = isNumber.bind(Number);\n\nvar isString = isString.bind(String);\n\nvar isInteger = isInteger.bind(Number);\n\nvar isNumber = isNumber.bind(Number);\n\nvar isString = isString.bind(String);\n\nvar isInteger = isInteger.bind(Number);\n\nvar isNumber = isNumber.bind(Number);\n\nvar isString = isString.bind(String);\n\nvar isInteger = isInteger.bind(Number);\n\nvar isNumber = isNumber.bind(Number);\n\nvar isString = isString.bind(String);\n\nvar isInteger = isInteger.bind(Number);\n\nvar isNumber = isNumber.bind(Number);\n\nvar isString = isString.bind(String);\n\nvar isInteger = isInteger.bind(Number);\n\nvar isNumber = isNumber.bind(Number);\n\nvar isString = isString.bind(String);\n\nvar isInteger = isInteger.bind(Number);\n\nvar isNumber = isNumber.bind(Number);\n\nvar isString = isString.bind(String);\n\nvar isInteger = isInteger.bind(Number);\n\nvar isNumber = isNumber.bind(Number);\n\nvar isString = isString.bind(String);\n\nvar isInteger = isInteger.bind(Number);\n\nvar isNumber = isNumber.bind(Number);\n\nvar isString = isString.bind(String);\n\nvar isInteger = isInteger.bind(Number);\n\nvar isNumber = isNumber.bind(Number);\n\nvar isString = isString.bind(String);\n\nvar isInteger = isInteger.bind(Number);\n\nvar isNumber = isNumber.bind(Number);\n\nvar isString = isString.bind(String);\n\nvar isInteger = isInteger.bind(Number);\n\nvar isNumber = isNumber.bind(Number);\n\nvar isString = isString.bind(String);\n\nvar isInteger = isInteger.bind(Number);\n\nvar isNumber = isNumber.bind(Number);\n\nvar isString = isString.bind(String);\n\nvar isInteger = isInteger.bind(Number);\n\nvar isNumber = isNumber.bind(Number);\n\nvar isString = isString.bind(String);\n\nvar isInteger = isInteger.bind(Number);\n\nvar isNumber = isNumber.bind(Number);\n\nvar isString = isString.bind(String);\n\nvar isInteger = isInteger.bind(Number);\n\nvar isNumber = isNumber.bind(Number);\n\nvar isString = isString.bind(String);\n\nvar isInteger = isInteger.bind(Number);\n\nvar isNumber = isNumber.bind(Number);\n\nvar isString = isString.bind(String);\n\nvar isInteger = isInteger.bind(Number);\n\nvar isNumber = isNumber.bind(Number);\n\nvar isString = isString.bind(String);\n\nvar isInteger = isInteger.bind(Number);\n\nvar isNumber = isNumber.bind(Number);\n\nvar isString = isString.bind(String);\n\nvar isInteger = isInteger.bind(Number);\n\nvar isNumber = isNumber.bind(Number);\n\nvar isString = isString.bind(String);\n\nvar isInteger = isInteger.bind(Number);\n\nvar isNumber = isNumber.bind(Number);\n\nvar isString = isString.bind(String);\n\nvar isInteger = isInteger.bind(Number);\n\nvar isNumber = isNumber.bind(Number);\n\nvar isString = isString.bind(String);\n\nvar isInteger = isInteger.bind(Number);\n\nvar isNumber = isNumber.bind(Number);\n\nvar isString = isString.bind(String);\n\nvar isInteger = isInteger.bind(Number);\n\nvar isNumber = isNumber.bind(Number);\n\nvar isString = isString.bind(String);\n\nvar isInteger = isInteger.bind(Number);\n\nvar isNumber = isNumber.bind(Number);\n\nvar isString = isString.bind(String);\n\nvar isInteger = isInteger.bind(Number);\n\nvar isNumber = isNumber.bind(Number);\n\nvar isString = isString.bind(String);\n\nvar isInteger = isInteger.bind(Number);\n\nvar isNumber = isNumber.bind(Number);\n\nvar isString = isString.bind(String);\n\nvar isInteger = isInteger.bind(Number);\n\nvar isNumber = isNumber.bind(Number);\n\nvar isString = isString.bind(String);\n\nvar isInteger = isInteger.bind(Number);\n\nvar isNumber = isNumber.bind(Number);\n\nvar isString = isString.bind(String);\n\nvar isInteger = isInteger.bind(Number);\n\nvar isNumber = isNumber.bind(Number);\n\nvar isString = isString.bind(String);\n\nvar isInteger = isInteger.bind(Number);\n\nvar isNumber = isNumber.bind(Number);\n\nvar isString = isString.bind(String);\n\nvar isInteger = isInteger.bind(Number);\n\nvar isNumber = isNumber.bind(Number);\n\nvar isString = isString.bind(String);\n\nvar isInteger = isInteger.bind(Number);\n\nvar isNumber = isNumber.bind(Number);\n\nvar isString = isString.bind(String);\n\nvar isInteger = isInteger.bind(Number);\n\nvar isNumber = isNumber.bind(Number);\n\nvar isString = isString.bind(String);\n\nvar "}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\n\nconst rescaleToUnit = (numbers) => {\n  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n", "canonical_solution": "  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "partial": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  # print('@@this is the line to split##')\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "gc": "<|endoftext|>/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\n\nconst rescaleToUnit = (numbers) => {\n  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  var range = max_number - min_number;\n  var new_numbers = [];\n  var i;\n\n  for (i = 0; i < numbers.length; i++) {\n    new_numbers[i] = numbers[i] * range / 2;\n  }\n\n  return new_numbers;\n};\n\nmodule.exports = rescaleToUnit;\n\n/***/ }),\n/* 16 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\"? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj!== Symbol.prototype? \"symbol\" : typeof obj; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar Point = function () {\n  function Point(x, y) {\n    _classCallCheck(this, Point);\n\n    this.x = x;\n    this.y = y;\n  }\n\n  _createClass(Point, [{\n    key: 'distanceTo',\n    value: function distanceTo(point) {\n      return Math.sqrt(Math.pow(this.x - point.x, 2) + Math.pow(this.y - point.y, 2));\n    }\n  }, {\n    key: 'distanceToSquared',\n    value: function distanceToSquared(point) {\n      return Math.pow(this.x - point.x, 2) + Math.pow(this.y - point.y, 2);\n    }\n  }, {\n    key: 'distanceToManhattan',\n    value: function distanceToManhattan(point) {\n      return Math.abs(this.x - point.x) + Math.abs(this.y - point.y);\n    }\n  }, {\n    key: 'distanceToManhattanSquared',\n    value: function distanceToManhattanSquared(point) {\n      return Math.abs(this.x - point.x) + Math.abs(this.y - point.y);\n    }\n  }, {\n    key: 'distanceToEuclidean',\n    value: function distanceToEuclidean(point) {\n      return Math.sqrt(Math.pow(this.x - point.x, 2) + Math.pow(this.y - point.y, 2));\n    }\n  }, {\n    key: 'distanceToEuclideanSquared',\n    value: function distanceToEuclideanSquared(point) {\n      return Math.pow(this.x - point.x, 2) + Math.pow(this.y - point.y, 2);\n    }\n  }, {\n    key: 'distanceToQuadratic',\n    value: function distanceToQuadratic(point) {\n      return Math.pow(this.x - point.x, 2) + Math.pow(this.y - point.y, 2);\n    }\n  }, {\n    key: 'distanceToQuadraticSquared',\n    value: function distanceToQuadraticSquared(point) {\n      return Math.pow(this.x - point.x, 2) + Math.pow(this.y - point.y, 2);\n    }\n  }, {\n    key: 'distanceToCubic',\n    value: function distanceToCubic(point) {\n      return Math.pow(this.x - point.x, 2) + Math.pow(this.y - point.y, 3);\n    }\n  }, {\n    key: 'distanceToCubicSquared',\n    value: function distanceToCubicSquared(point) {\n      return Math.pow(this.x - point.x, 2) + Math.pow(this.y - point.y, 3);\n    }\n  }, {\n    key: 'distanceToQuartic',\n    value: function distanceToQuartic(point) {\n      return Math.pow(this.x - point.x, 2) + Math.pow(this.y - point.y, 4);\n    }\n  }, {\n    key: 'distanceToQuarticSquared',\n    value: function distanceToQuarticSquared(point) {\n      return Math.pow(this.x - point.x, 2) + Math.pow(this.y - point.y, 4);\n    }\n  }, {\n    key: 'distanceToArc',\n    value: function distanceToArc(point) {\n      var dx = this.x - point.x;\n      var dy = this.y - point.y;\n      var distance = Math.sqrt(dx * dx + dy * dy);\n      return distance;\n    }\n  }, {\n    key: 'distanceToEllipse',\n    value: function distanceToEllipse(point) {\n      var dx = this.x - point.x;\n      var dy = this.y - point.y;\n      var distance = Math.sqrt(dx * dx + dy * dy);\n      return distance;\n    }\n  }, {\n    key: 'distanceToLine',\n    value: function distanceToLine(point) {\n      var dx = this.x - point.x;\n      var dy = this.y - point.y;\n      return Math.sqrt(dx * dx + dy * dy);\n    }\n  }, {\n    key: 'distanceToPlane',\n    value: function distanceToPlane(point) {\n      var dx = this.x - point.x;\n      var dy = this.y - point.y;\n      return Math.sqrt(dx * dx + dy * dy);\n    }\n  }, {\n    key: 'distanceToPoint',\n    value: function distanceToPoint(point) {\n      return this.distanceTo(this.origin);\n    }\n  }, {\n    key: 'distanceToLineSegment',\n    value: function distanceToLineSegment(point) {\n      var dx = this.x - point.x;\n      var dy = this.y - point.y;\n      return Math.sqrt(dx * dx + dy * dy);\n    }\n  }, {\n    key: 'distanceToRay',\n    value: function distanceToRay(point) {\n      var dx = this.x - point.x;\n      var dy = this.y - point.y;\n      var distance = Math.sqrt(dx * dx + dy * dy);\n      return distance;\n    }\n  }, {\n    key: 'distanceToRaySegment',\n    value: function distanceToRaySegment(point) {\n      var dx = this.x - point.x;\n      var dy = this.y - point.y;\n      var distance = Math.sqrt(dx * dx + dy * dy);\n      return distance;\n    }\n  }, {\n    key: 'distanceToSegment',\n    value: function distanceToSegment(point) {\n      var dx = this.x - point.x;\n      var dy = this.y - point.y;\n      return Math.sqrt(dx * dx + dy * dy);\n    }\n  }, {\n    key: 'distanceToSurface',\n    value: function distanceToSurface(point) {\n      var dx = this.x - point.x;\n      var dy = this.y - point.y;\n      var distance = Math.sqrt(dx * dx + dy * dy);\n      return distance;\n    }\n  }, {\n    key: 'distanceToTriangle',\n    value: function distanceToTriangle(point) {\n      var dx = this.x - point.x;\n      var dy = this.y - point.y;\n      var distance = Math.sqrt(dx * dx + dy * dy);\n      return distance;\n    }\n  }, {\n    key: 'distanceToQuadraticSurface',\n    value: function distanceToQuadraticSurface(point) {\n      var dx = this.x - point.x;\n      var dy = this.y - point.y;\n      var distance = Math.sqrt(dx * dx + dy * dy);\n      return distance;\n    }\n  }, {\n    key: 'distanceToCubicSurface',\n    value: function distanceToCubicSurface(point) {\n      var dx = this.x - point.x;\n      var dy = this.y - point.y;\n      var distance = Math.sqrt(dx * dx + dy * dy);\n      return distance;\n    }\n  }, {\n    key: 'distanceToEllipsoid',\n    value: function distanceToEllipsoid(point) {\n      var dx = this.x - point.x;\n      var dy = this.y - point.y;\n      var distance = Math.sqrt(dx * dx + dy * dy);\n      return distance;\n    }\n  }, {\n    key: 'distanceToSpline',\n    value: function distanceToSpline(point) {\n      var dx = this.x - point.x;\n      var dy = this.y - point.y;\n      var distance = Math.sqrt(dx * dx + dy * dy);\n      return distance;\n    }\n  }, {\n    key: 'distanceToSurfaceTo"}
{"task_id": "JavaScript/22", "prompt": "/* Filter given list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\n\nconst filterIntegers = (values) => {\n  return values.filter(x => Number.isInteger(x));\n", "canonical_solution": "}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "partial": "/* Filter given list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter(x => Number.isInteger(x));\n  # print('@@this is the line to split##')\n}\n\n", "gc": "<|endoftext|>/* Filter given list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\n\nconst filterIntegers = (values) => {\n  return values.filter(x => Number.isInteger(x));\n};\n\nmodule.exports = filterIntegers;\n\n},{}],9:[function(require,module,exports){\n'use strict';\n\nconst filterStrings = (values) => {\n  return values.filter(x => typeof x ==='string');\n};\n\nmodule.exports = filterStrings;\n\n},{}],10:[function(require,module,exports){\n'use strict';\n\nconst filterNumbers = (values) => {\n  return values.filter(x => typeof x === 'number');\n};\n\nmodule.exports = filterNumbers;\n\n},{}],11:[function(require,module,exports){\n'use strict';\n\nconst filterBooleans = (values) => {\n  return values.filter(x => typeof x === 'boolean');\n};\n\nmodule.exports = filterBooleans;\n\n},{}],12:[function(require,module,exports){\n'use strict';\n\nconst filterObjects = (values) => {\n  return values.filter(x => typeof x === 'object');\n};\n\nmodule.exports = filterObjects;\n\n},{}],13:[function(require,module,exports){\n'use strict';\n\nconst filterArrays = (values) => {\n  return values.filter(x => Array.isArray(x));\n};\n\nmodule.exports = filterArrays;\n\n},{}],14:[function(require,module,exports){\n'use strict';\n\nconst filterDates = (values) => {\n  return values.filter(x => x instanceof Date);\n};\n\nmodule.exports = filterDates;\n\n},{}],15:[function(require,module,exports){\n'use strict';\n\nconst filterRegExps = (values) => {\n  return values.filter(x => x instanceof RegExp);\n};\n\nmodule.exports = filterRegExps;\n\n},{}],16:[function(require,module,exports){\n'use strict';\n\nconst filterArraysOfType = (values, type) => {\n  return values.filter(x => x instanceof type);\n};\n\nmodule.exports = filterArraysOfType;\n\n},{}],17:[function(require,module,exports){\n'use strict';\n\nconst filterObjectsOfType = (values, type) => {\n  return values.filter(x => x instanceof type);\n};\n\nmodule.exports = filterObjectsOfType;\n\n},{}],18:[function(require,module,exports){\n'use strict';\n\nconst filterArraysOfType = (values, type) => {\n  return values.filter(x => x instanceof Array);\n};\n\nmodule.exports = filterArraysOfType;\n\n},{}],19:[function(require,module,exports){\n'use strict';\n\nconst filterObjectsOfType = (values, type) => {\n  return values.filter(x => x instanceof type);\n};\n\nmodule.exports = filterObjectsOfType;\n\n},{}],20:[function(require,module,exports){\n'use strict';\n\nconst filterArraysOfType = (values, type) => {\n  return values.filter(x => x instanceof Array);\n};\n\nmodule.exports = filterArraysOfType;\n\n},{}],21:[function(require,module,exports){\n'use strict';\n\nconst filterObjectsOfType = (values, type) => {\n  return values.filter(x => x instanceof type);\n};\n\nmodule.exports = filterObjectsOfType;\n\n},{}],22:[function(require,module,exports){\n'use strict';\n\nconst filterArraysOfType = (values, type) => {\n  return values.filter(x => x instanceof Array);\n};\n\nmodule.exports = filterArraysOfType;\n\n},{}],23:[function(require,module,exports){\n'use strict';\n\nconst filterObjectsOfType = (values, type) => {\n  return values.filter(x => x instanceof type);\n};\n\nmodule.exports = filterObjectsOfType;\n\n},{}],24:[function(require,module,exports){\n'use strict';\n\nconst filterArraysOfType = (values, type) => {\n  return values.filter(x => x instanceof Array);\n};\n\nmodule.exports = filterArraysOfType;\n\n},{}],25:[function(require,module,exports){\n'use strict';\n\nconst filterObjectsOfType = (values, type) => {\n  return values.filter(x => x instanceof type);\n};\n\nmodule.exports = filterObjectsOfType;\n\n},{}],26:[function(require,module,exports){\n'use strict';\n\nconst filterArraysOfType = (values, type) => {\n  return values.filter(x => x instanceof Array);\n};\n\nmodule.exports = filterArraysOfType;\n\n},{}],27:[function(require,module,exports){\n'use strict';\n\nconst filterObjectsOfType = (values, type) => {\n  return values.filter(x => x instanceof type);\n};\n\nmodule.exports = filterObjectsOfType;\n\n},{}],28:[function(require,module,exports){\n'use strict';\n\nconst filterArraysOfType = (values, type) => {\n  return values.filter(x => x instanceof Array);\n};\n\nmodule.exports = filterArraysOfType;\n\n},{}],29:[function(require,module,exports){\n'use strict';\n\nconst filterObjectsOfType = (values, type) => {\n  return values.filter(x => x instanceof type);\n};\n\nmodule.exports = filterObjectsOfType;\n\n},{}],30:[function(require,module,exports){\n'use strict';\n\nconst filterArraysOfType = (values, type) => {\n  return values.filter(x => x instanceof Array);\n};\n\nmodule.exports = filterArraysOfType;\n\n},{}],31:[function(require,module,exports){\n'use strict';\n\nconst filterObjectsOfType = (values, type) => {\n  return values.filter(x => x instanceof type);\n};\n\nmodule.exports = filterObjectsOfType;\n\n},{}],32:[function(require,module,exports){\n'use strict';\n\nconst filterArraysOfType = (values, type) => {\n  return values.filter(x => x instanceof Array);\n};\n\nmodule.exports = filterArraysOfType;\n\n},{}],33:[function(require,module,exports){\n'use strict';\n\nconst filterObjectsOfType = (values, type) => {\n  return values.filter(x => x instanceof type);\n};\n\nmodule.exports = filterObjectsOfType;\n\n},{}],34:[function(require,module,exports){\n'use strict';\n\nconst filterArraysOfType = (values, type) => {\n  return values.filter(x => x instanceof Array);\n};\n\nmodule.exports = filterArraysOfType;\n\n},{}],35:[function(require,module,exports){\n'use strict';\n\nconst filterObjectsOfType = (values, type) => {\n  return values.filter(x => x instanceof type);\n};\n\nmodule.exports = filterObjectsOfType;\n\n},{}],36:[function(require,module,exports){\n'use strict';\n\nconst filterArraysOfType = (values, type) => {\n  return values.filter(x => x instanceof Array);\n};\n\nmodule.exports = filterArraysOfType;\n\n},{}],37:[function(require,module,exports){\n'use strict';\n\nconst filterObjectsOfType = (values, type) => {\n  return values.filter(x => x instanceof type);\n};\n\nmodule.exports = filterObjectsOfType;\n\n},{}],38:[function(require,module,exports){\n'use strict';\n\nconst filterArraysOfType = (values, type) => {\n  return values.filter(x => x instanceof Array);\n};\n\nmodule.exports = filterArraysOfType;\n\n},{}],39:[function(require,module,exports){\n'use strict';\n\nconst filterObjectsOfType = (values, type) => {\n  return values.filter(x => x instanceof type);\n};\n\nmodule.exports = filterObjectsOfType;\n\n},{}],40:[function(require,module,exports){\n'use strict';\n\nconst filterArraysOfType = (values, type) => {\n  return values.filter(x => x instanceof Array);\n};\n\nmodule.exports = filterArraysOfType;\n\n},{}],41:[function(require,module,exports){\n'use strict';\n\nconst filterObjectsOfType = (values, type) => {\n  return values.filter(x => x instanceof type);\n};\n\nmodule.exports = filterObjectsOfType;\n\n},{}],42:[function(require,module,exports){\n'use strict';\n\nconst filterArraysOfType = (values, type) => {\n  return values.filter(x => x instanceof Array);\n};\n\nmodule.exports = filterArraysOfType;\n\n},{}],43:[function(require,module,exports){\n'use strict';\n\nconst filterObjectsOfType = (values, type) => {\n  return values."}
{"task_id": "JavaScript/23", "prompt": "/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\n\nconst strlen = (string) => {\n  return string.length;\n", "canonical_solution": "}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "partial": "/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length;\n  # print('@@this is the line to split##')\n}\n\n", "gc": "<|endoftext|>/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\n\nconst strlen = (string) => {\n  return string.length;\n};\n\n/**\n * Return true if given string starts with given prefix\n * >>> startsWith('abc', 'ab')\n  true\n  >>> startsWith('abc', 'abc')\n  false\n  */\n\nconst startsWith = (string, prefix) => {\n  return string.startsWith(prefix);\n};\n\n/**\n * Return true if given string ends with given suffix\n * >>> endsWith('abc', 'ab')\n  true\n  >>> endsWith('abc', 'abc')\n  false\n  */\n\nconst endsWith = (string, suffix) => {\n  return string.endsWith(suffix);\n};\n\n/**\n * Return true if given string contains given substring\n * >>> contains('abc', 'ab')\n  true\n  >>> contains('abc', 'abc')\n  false\n  */\n\nconst contains = (string, substring) => {\n  return string.includes(substring);\n};\n\n/**\n * Return true if given string starts with given substring\n * >>> startsWith('abc', 'ab')\n  true\n  >>> startsWith('abc', 'abc')\n  false\n  */\n\nconst startsWith = (string, substring) => {\n  return string.startsWith(substring);\n};\n\n/**\n * Return true if given string ends with given substring\n * >>> endsWith('abc', 'ab')\n  true\n  >>> endsWith('abc', 'abc')\n  false\n  */\n\nconst endsWith = (string, substring) => {\n  return string.endsWith(substring);\n};\n\n/**\n * Return true if given string contains given substring\n * >>> contains('abc', 'ab')\n  true\n  >>> contains('abc', 'abc')\n  false\n  */\n\nconst contains = (string, substring) => {\n  return string.includes(substring);\n};\n\n/**\n * Return true if given string starts with given substring\n * >>> startsWith('abc', 'ab')\n  true\n  >>> startsWith('abc', 'abc')\n  false\n  */\n\nconst startsWith = (string, substring) => {\n  return string.startsWith(substring);\n};\n\n/**\n * Return true if given string ends with given substring\n * >>> endsWith('abc', 'ab')\n  true\n  >>> endsWith('abc', 'abc')\n  false\n  */\n\nconst endsWith = (string, substring) => {\n  return string.endsWith(substring);\n};\n\n/**\n * Return true if given string contains given substring\n * >>> contains('abc', 'ab')\n  true\n  >>> contains('abc', 'abc')\n  false\n  */\n\nconst contains = (string, substring) => {\n  return string.includes(substring);\n};\n\n/**\n * Return true if given string starts with given substring\n * >>> startsWith('abc', 'ab')\n  true\n  >>> startsWith('abc', 'abc')\n  false\n  */\n\nconst startsWith = (string, substring) => {\n  return string.startsWith(substring);\n};\n\n/**\n * Return true if given string ends with given substring\n * >>> endsWith('abc', 'ab')\n  true\n  >>> endsWith('abc', 'abc')\n  false\n  */\n\nconst endsWith = (string, substring) => {\n  return string.endsWith(substring);\n};\n\n/**\n * Return true if given string contains given substring\n * >>> contains('abc', 'ab')\n  true\n  >>> contains('abc', 'abc')\n  false\n  */\n\nconst contains = (string, substring) => {\n  return string.includes(substring);\n};\n\n/**\n * Return true if given string starts with given substring\n * >>> startsWith('abc', 'ab')\n  true\n  >>> startsWith('abc', 'abc')\n  false\n  */\n\nconst startsWith = (string, substring) => {\n  return string.startsWith(substring);\n};\n\n/**\n * Return true if given string ends with given substring\n * >>> endsWith('abc', 'ab')\n  true\n  >>> endsWith('abc', 'abc')\n  false\n  */\n\nconst endsWith = (string, substring) => {\n  return string.endsWith(substring);\n};\n\n/**\n * Return true if given string contains given substring\n * >>> contains('abc', 'ab')\n  true\n  >>> contains('abc', 'abc')\n  false\n  */\n\nconst contains = (string, substring) => {\n  return string.includes(substring);\n};\n\n/**\n * Return true if given string starts with given substring\n * >>> startsWith('abc', 'ab')\n  true\n  >>> startsWith('abc', 'abc')\n  false\n  */\n\nconst startsWith = (string, substring) => {\n  return string.startsWith(substring);\n};\n\n/**\n * Return true if given string ends with given substring\n * >>> endsWith('abc', 'ab')\n  true\n  >>> endsWith('abc', 'abc')\n  false\n  */\n\nconst endsWith = (string, substring) => {\n  return string.endsWith(substring);\n};\n\n/**\n * Return true if given string contains given substring\n * >>> contains('abc', 'ab')\n  true\n  >>> contains('abc', 'abc')\n  false\n  */\n\nconst contains = (string, substring) => {\n  return string.includes(substring);\n};\n\n/**\n * Return true if given string starts with given substring\n * >>> startsWith('abc', 'ab')\n  true\n  >>> startsWith('abc', 'abc')\n  false\n  */\n\nconst startsWith = (string, substring) => {\n  return string.startsWith(substring);\n};\n\n/**\n * Return true if given string ends with given substring\n * >>> endsWith('abc', 'ab')\n  true\n  >>> endsWith('abc', 'abc')\n  false\n  */\n\nconst endsWith = (string, substring) => {\n  return string.endsWith(substring);\n};\n\n/**\n * Return true if given string contains given substring\n * >>> contains('abc', 'ab')\n  true\n  >>> contains('abc', 'abc')\n  false\n  */\n\nconst contains = (string, substring) => {\n  return string.includes(substring);\n};\n\n/**\n * Return true if given string starts with given substring\n * >>> startsWith('abc', 'ab')\n  true\n  >>> startsWith('abc', 'abc')\n  false\n  */\n\nconst startsWith = (string, substring) => {\n  return string.startsWith(substring);\n};\n\n/**\n * Return true if given string ends with given substring\n * >>> endsWith('abc', 'ab')\n  true\n  >>> endsWith('abc', 'abc')\n  false\n  */\n\nconst endsWith = (string, substring) => {\n  return string.endsWith(substring);\n};\n\n/**\n * Return true if given string contains given substring\n * >>> contains('abc', 'ab')\n  true\n  >>> contains('abc', 'abc')\n  false\n  */\n\nconst contains = (string, substring) => {\n  return string.includes(substring);\n};\n\n/**\n * Return true if given string starts with given substring\n * >>> startsWith('abc', 'ab')\n  true\n  >>> startsWith('abc', 'abc')\n  false\n  */\n\nconst startsWith = (string, substring) => {\n  return string.startsWith(substring);\n};\n\n/**\n * Return true if given string ends with given substring\n * >>> endsWith('abc', 'ab')\n  true\n  >>> endsWith('abc', 'abc')\n  false\n  */\n\nconst endsWith = (string, substring) => {\n  return string.endsWith(substring);\n};\n\n/**\n * Return true if given string contains given substring\n * >>> contains('abc', 'ab')\n  true\n  >>> contain"}
{"task_id": "JavaScript/24", "prompt": "/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\n\nconst largestDivisor = (n) => {\n  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n", "canonical_solution": "      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "partial": "/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      # print('@@this is the line to split##')\n      return i;\n}\n\n", "gc": "<|endoftext|>/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\n\nconst largestDivisor = (n) => {\n  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n  return -1;\n};\n\nmodule.exports = largestDivisor;\n\n},{}],15:[function(require,module,exports){\nconst { createHash } = require('crypto');\n\nconst hash = (str) => {\n  return createHash('sha256').update(str).digest('hex');\n};\n\nmodule.exports = hash;\n\n},{\"crypto\":1}],16:[function(require,module,exports){\nconst { createHash } = require('crypto');\n\nconst hash = (str) => {\n  return createHash('sha256').update(str).digest('hex');\n};\n\nmodule.exports = hash;\n\n},{\"crypto\":1}],17:[function(require,module,exports){\nconst { createHash } = require('crypto');\n\nconst hash = (str) => {\n  return createHash('sha256').update(str).digest('hex');\n};\n\nmodule.exports = hash;\n\n},{\"crypto\":1}],18:[function(require,module,exports){\nconst { createHash } = require('crypto');\n\nconst hash = (str) => {\n  return createHash('sha256').update(str).digest('hex');\n};\n\nmodule.exports = hash;\n\n},{\"crypto\":1}],19:[function(require,module,exports){\nconst { createHash } = require('crypto');\n\nconst hash = (str) => {\n  return createHash('sha256').update(str).digest('hex');\n};\n\nmodule.exports = hash;\n\n},{\"crypto\":1}],20:[function(require,module,exports){\nconst { createHash } = require('crypto');\n\nconst hash = (str) => {\n  return createHash('sha256').update(str).digest('hex');\n};\n\nmodule.exports = hash;\n\n},{\"crypto\":1}],21:[function(require,module,exports){\nconst { createHash } = require('crypto');\n\nconst hash = (str) => {\n  return createHash('sha256').update(str).digest('hex');\n};\n\nmodule.exports = hash;\n\n},{\"crypto\":1}],22:[function(require,module,exports){\nconst { createHash } = require('crypto');\n\nconst hash = (str) => {\n  return createHash('sha256').update(str).digest('hex');\n};\n\nmodule.exports = hash;\n\n},{\"crypto\":1}],23:[function(require,module,exports){\nconst { createHash } = require('crypto');\n\nconst hash = (str) => {\n  return createHash('sha256').update(str).digest('hex');\n};\n\nmodule.exports = hash;\n\n},{\"crypto\":1}],24:[function(require,module,exports){\nconst { createHash } = require('crypto');\n\nconst hash = (str) => {\n  return createHash('sha256').update(str).digest('hex');\n};\n\nmodule.exports = hash;\n\n},{\"crypto\":1}],25:[function(require,module,exports){\nconst { createHash } = require('crypto');\n\nconst hash = (str) => {\n  return createHash('sha256').update(str).digest('hex');\n};\n\nmodule.exports = hash;\n\n},{\"crypto\":1}],26:[function(require,module,exports){\nconst { createHash } = require('crypto');\n\nconst hash = (str) => {\n  return createHash('sha256').update(str).digest('hex');\n};\n\nmodule.exports = hash;\n\n},{\"crypto\":1}],27:[function(require,module,exports){\nconst { createHash } = require('crypto');\n\nconst hash = (str) => {\n  return createHash('sha256').update(str).digest('hex');\n};\n\nmodule.exports = hash;\n\n},{\"crypto\":1}],28:[function(require,module,exports){\nconst { createHash } = require('crypto');\n\nconst hash = (str) => {\n  return createHash('sha256').update(str).digest('hex');\n};\n\nmodule.exports = hash;\n\n},{\"crypto\":1}],29:[function(require,module,exports){\nconst { createHash } = require('crypto');\n\nconst hash = (str) => {\n  return createHash('sha256').update(str).digest('hex');\n};\n\nmodule.exports = hash;\n\n},{\"crypto\":1}],30:[function(require,module,exports){\nconst { createHash } = require('crypto');\n\nconst hash = (str) => {\n  return createHash('sha256').update(str).digest('hex');\n};\n\nmodule.exports = hash;\n\n},{\"crypto\":1}],31:[function(require,module,exports){\nconst { createHash } = require('crypto');\n\nconst hash = (str) => {\n  return createHash('sha256').update(str).digest('hex');\n};\n\nmodule.exports = hash;\n\n},{\"crypto\":1}],32:[function(require,module,exports){\nconst { createHash } = require('crypto');\n\nconst hash = (str) => {\n  return createHash('sha256').update(str).digest('hex');\n};\n\nmodule.exports = hash;\n\n},{\"crypto\":1}],33:[function(require,module,exports){\nconst { createHash } = require('crypto');\n\nconst hash = (str) => {\n  return createHash('sha256').update(str).digest('hex');\n};\n\nmodule.exports = hash;\n\n},{\"crypto\":1}],34:[function(require,module,exports){\nconst { createHash } = require('crypto');\n\nconst hash = (str) => {\n  return createHash('sha256').update(str).digest('hex');\n};\n\nmodule.exports = hash;\n\n},{\"crypto\":1}],35:[function(require,module,exports){\nconst { createHash } = require('crypto');\n\nconst hash = (str) => {\n  return createHash('sha256').update(str).digest('hex');\n};\n\nmodule.exports = hash;\n\n},{\"crypto\":1}],36:[function(require,module,exports){\nconst { createHash } = require('crypto');\n\nconst hash = (str) => {\n  return createHash('sha256').update(str).digest('hex');\n};\n\nmodule.exports = hash;\n\n},{\"crypto\":1}],37:[function(require,module,exports){\nconst { createHash } = require('crypto');\n\nconst hash = (str) => {\n  return createHash('sha256').update(str).digest('hex');\n};\n\nmodule.exports = hash;\n\n},{\"crypto\":1}],38:[function(require,module,exports){\nconst { createHash } = require('crypto');\n\nconst hash = (str) => {\n  return createHash('sha256').update(str).digest('hex');\n};\n\nmodule.exports = hash;\n\n},{\"crypto\":1}],39:[function(require,module,exports){\nconst { createHash } = require('crypto');\n\nconst hash = (str) => {\n  return createHash('sha256').update(str).digest('hex');\n};\n\nmodule.exports = hash;\n\n},{\"crypto\":1}],40:[function(require,module,exports){\nconst { createHash } = require('crypto');\n\nconst hash = (str) => {\n  return createHash('sha256').update(str).digest('hex');\n};\n\nmodule.exports = hash;\n\n},{\"crypto\":1}],41:[function(require,module,exports){\nconst { createHash } = require('crypto');\n\nconst hash = (str) => {\n  return createHash('sha256').update(str).digest('hex');\n};\n\nmodule.exports = hash;\n\n},{\"crypto\":1}],42:[function(require,module,exports){\nconst { createHash } = require('crypto');\n\nconst hash = (str) => {\n  return createHash('sha256').update(str).digest('hex');\n};\n\nmodule.exports = hash;\n\n},{\"crypto\":1}],43:[function(require,module,exports){\nconst { createHash } = require('crypto');\n\nconst hash = (str) => {\n  return createHash('sha256').update(str).digest('hex');\n};\n\nmodule.exports = hash;\n\n},{\"crypto\":1}],44:[function(require,module,export"}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\n\nconst factorize = (n) => {\n  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n", "canonical_solution": "    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "partial": "/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n      # print('@@this is the line to split##')\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "gc": "<|endoftext|>/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\n\nconst factorize = (n) => {\n  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n  return fact;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\n\nconst factorize2 = (n) => {\n  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n  return fact.map(function(n) {\n    return Math.sqrt(n);\n  });\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\n\nconst factorize3 = (n) => {\n  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n  return fact.map(function(n) {\n    return Math.sqrt(n);\n  });\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\n\nconst factorize4 = (n) => {\n  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n  return fact.map(function(n) {\n    return Math.sqrt(n);\n  });\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\n\nconst factorize5 = (n) => {\n  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n  return fact.map(function(n) {\n    return Math.sqrt(n);\n  });\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\n\nconst factorize6 = (n) => {\n  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n  return fact.map(function(n) {\n    return Math.sqrt(n);\n  });\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\n\nconst factorize7 = (n) => {\n  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n  return fact.map(function(n) {\n    return Math.sqrt(n);\n  });\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\n\nconst factorize8 = (n) => {\n  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n  return fact.map(function(n) {\n    return Math.sqrt(n);\n  });\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\n\nconst factorize9 = (n) => {\n  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n  return fact.map(function(n) {\n    return Math.sqrt(n);\n  });\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\n\nconst factorize10 = (n) => {\n  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n  return fact.map(function(n) {\n    return Math.sqrt(n);\n  });\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\n\nconst factorize11 = (n) => {\n  var fact = [], i = 2;\n  while (i <= Math."}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\n\nconst removeDuplicates = (numbers) => {\n  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n", "canonical_solution": "      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "partial": "/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      # print('@@this is the line to split##')\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "gc": "<|endoftext|>/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\n\nconst removeDuplicates = (numbers) => {\n  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return Object.keys(dict).map(key => dict[key]);\n};\n\nexport default removeDuplicates;\n\n},{}],17:[function(require,module,exports){\n'use strict';\n\nconst isNumber = require('./isNumber');\n\nconst removeDuplicates = (numbers) => {\n  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return Object.keys(dict).map(key => dict[key]);\n};\n\nconst removeDuplicatesNumber = (numbers) => {\n  var dict = new Object();\n  for (const num of numbers) {\n    if (isNumber(num)) {\n      if (num in dict) {\n        dict[num] += 1;\n      } else {\n        dict[num] = 1;\n      }\n    }\n  }\n  return Object.keys(dict).map(key => dict[key]);\n};\n\nconst removeDuplicatesArray = (numbers) => {\n  var dict = new Object();\n  for (const num of numbers) {\n    if (Array.isArray(num)) {\n      if (num.every(isNumber)) {\n        if (num in dict) {\n          dict[num] += 1;\n        } else {\n          dict[num] = 1;\n        }\n      }\n    }\n  }\n  return Object.keys(dict).map(key => dict[key]);\n};\n\nconst removeDuplicatesString = (strings) => {\n  var dict = new Object();\n  for (const string of strings) {\n    if (string in dict) {\n      dict[string] += 1;\n    } else {\n      dict[string] = 1;\n    }\n  }\n  return Object.keys(dict).map(key => dict[key]);\n};\n\nconst removeDuplicatesBoolean = (booleans) => {\n  var dict = new Object();\n  for (const boolean of booleans) {\n    if (boolean in dict) {\n      dict[boolean] += 1;\n    } else {\n      dict[boolean] = 1;\n    }\n  }\n  return Object.keys(dict).map(key => dict[key]);\n};\n\nconst removeDuplicatesArrayOfNumbers = (arrayOfNumbers) => {\n  var dict = new Object();\n  for (const num of arrayOfNumbers) {\n    if (isNumber(num)) {\n      if (num in dict) {\n        dict[num] += 1;\n      } else {\n        dict[num] = 1;\n      }\n    }\n  }\n  return Object.keys(dict).map(key => dict[key]);\n};\n\nconst removeDuplicatesArrayOfStrings = (arrayOfStrings) => {\n  var dict = new Object();\n  for (const string of arrayOfStrings) {\n    if (string in dict) {\n      dict[string] += 1;\n    } else {\n      dict[string] = 1;\n    }\n  }\n  return Object.keys(dict).map(key => dict[key]);\n};\n\nconst removeDuplicatesArrayOfBooleans = (arrayOfBooleans) => {\n  var dict = new Object();\n  for (const boolean of arrayOfBooleans) {\n    if (boolean in dict) {\n      dict[boolean] += 1;\n    } else {\n      dict[boolean] = 1;\n    }\n  }\n  return Object.keys(dict).map(key => dict[key]);\n};\n\nconst removeDuplicatesArrayOfArrays = (arrayOfArrays) => {\n  var dict = new Object();\n  for (const array of arrayOfArrays) {\n    if (Array.isArray(array)) {\n      if (array.every(isNumber)) {\n        if (array in dict) {\n          dict[array] += 1;\n        } else {\n          dict[array] = 1;\n        }\n      }\n    }\n  }\n  return Object.keys(dict).map(key => dict[key]);\n};\n\nconst removeDuplicatesArrayOfObjects = (arrayOfObjects) => {\n  var dict = new Object();\n  for (const object of arrayOfObjects) {\n    if (object in dict) {\n      dict[object] += 1;\n    } else {\n      dict[object] = 1;\n    }\n  }\n  return Object.keys(dict).map(key => dict[key]);\n};\n\nconst removeDuplicatesArrayOfArraysOfNumbers = (arrayOfArraysOfNumbers) => {\n  var dict = new Object();\n  for (const array of arrayOfArraysOfNumbers) {\n    if (Array.isArray(array)) {\n      if (array.every(isNumber)) {\n        if (array in dict) {\n          dict[array] += 1;\n        } else {\n          dict[array] = 1;\n        }\n      }\n    }\n  }\n  return Object.keys(dict).map(key => dict[key]);\n};\n\nconst removeDuplicatesArrayOfArraysOfStrings = (arrayOfArraysOfStrings) => {\n  var dict = new Object();\n  for (const array of arrayOfArraysOfStrings) {\n    if (Array.isArray(array)) {\n      if (array.every(isString)) {\n        if (array in dict) {\n          dict[array] += 1;\n        } else {\n          dict[array] = 1;\n        }\n      }\n    }\n  }\n  return Object.keys(dict).map(key => dict[key]);\n};\n\nconst removeDuplicatesArrayOfArraysOfBooleans = (arrayOfArraysOfBooleans) => {\n  var dict = new Object();\n  for (const array of arrayOfArraysOfBooleans) {\n    if (Array.isArray(array)) {\n      if (array.every(isBoolean)) {\n        if (array in dict) {\n          dict[array] += 1;\n        } else {\n          dict[array] = 1;\n        }\n      }\n    }\n  }\n  return Object.keys(dict).map(key => dict[key]);\n};\n\nconst removeDuplicatesArrayOfArraysOfArraysOfNumbers = (arrayOfArraysOfArraysOfNumbers) => {\n  var dict = new Object();\n  for (const array of arrayOfArraysOfArraysOfNumbers) {\n    if (Array.isArray(array)) {\n      if (array.every(isNumber)) {\n        if (array in dict) {\n          dict[array] += 1;\n        } else {\n          dict[array] = 1;\n        }\n      }\n    }\n  }\n  return Object.keys(dict).map(key => dict[key]);\n};\n\nconst removeDuplicatesArrayOfArraysOfArraysOfStrings = (arrayOfArraysOfArraysOfStrings) => {\n  var dict = new Object();\n  for (const array of arrayOfArraysOfArraysOfStrings) {\n    if (Array.isArray(array)) {\n      if (array.every(isString)) {\n        if (array in dict) {\n          dict[array] += 1;\n        } else {\n          dict[array] = 1;\n        }\n      }\n    }\n  }\n  return Object.keys(dict).map(key => dict[key]);\n};\n\nconst removeDuplicatesArrayOfArraysOfArraysOfBooleans = (arrayOfArraysOfArraysOfBooleans) => {\n  var dict = new Object();\n  for (const array of arrayOfArraysOfArraysOfBooleans) {\n    if (Array.isArray(array)) {\n      if (array.every(isBoolean)) {\n        if (array in dict) {\n          dict[array] += 1;\n        } else {\n          dict[array] = 1;\n        }\n      }\n    }\n  }\n  return Object.keys(dict).map(key => dict[key]);\n};\n\nconst removeDuplicatesArrayOfArraysOfArraysOfArraysOfNumbers = (arrayOfArraysOfArraysOfArraysOfNumbers) => {\n  var dict = new Object();\n  for (const array of arrayOfArraysOfArraysOfArraysOfNumbers) {\n    if (Array.isArray(array)) {\n      if (array.every(isNumber)) {\n        if (array in dict) {\n          dict[array] += 1;\n        } else {\n          dict[array] = 1;\n        }\n      }\n    }\n  }\n  return Object.keys(dict).map(key => dict[key]);\n};\n\nconst removeDuplicatesArrayOfArraysOfArraysOfArraysOfStrings = (arrayOfArraysOfArraysOfArraysOfStrings) => {\n  var dict = new Object();\n  for (const array of arrayOfArray"}
{"task_id": "JavaScript/27", "prompt": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\n\nconst flipCase = (string) => {\n  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n", "canonical_solution": "          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "partial": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          # print('@@this is the line to split##')\n          .join('');\n}\n\n", "gc": "<|endoftext|>/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\n\nconst flipCase = (string) => {\n  return string.split('')\n         .map(x => (x.toUpperCase() == x? x.toLowerCase() : x.toUpperCase()))\n         .join('');\n};\n\nmodule.exports = flipCase;\n\n},{}],9:[function(require,module,exports){\n'use strict';\n\nconst _ = require('lodash');\n\nconst isNumber = (number) => _.isNumber(number);\n\nconst isString = (string) => _.isString(string);\n\nconst isBoolean = (boolean) => _.isBoolean(boolean);\n\nconst isNull = (null) => _.isNull(null);\n\nconst isUndefined = (undefined) => _.isUndefined(undefined);\n\nconst isRegExp = (regex) => _.isRegExp(regex);\n\nconst isDate = (date) => _.isDate(date);\n\nconst isError = (error) => _.isError(error);\n\nconst isMap = (map) => _.isMap(map);\n\nconst isSet = (set) => _.isSet(set);\n\nconst isWeakMap = (weakMap) => _.isWeakMap(weakMap);\n\nconst isWeakSet = (weakSet) => _.isWeakSet(weakSet);\n\nconst isSetLike = (setLike) => _.isSetLike(setLike);\n\nconst isWeakSetLike = (weakSetLike) => _.isWeakSetLike(weakSetLike);\n\nconst isWeakMapLike = (weakMapLike) => _.isWeakMapLike(weakMapLike);\n\nconst isMapLike = (mapLike) => _.isMapLike(mapLike);\n\nconst isWeakMapLike = (weakMapLike) => _.isWeakMapLike(weakMapLike);\n\nconst isMapSet = (mapSet) => _.isMapSet(mapSet);\n\nconst isWeakMapSet = (weakMapSet) => _.isWeakMapSet(weakMapSet);\n\nconst isSetSet = (setSet) => _.isSetSet(setSet);\n\nconst isWeakMapSet = (weakMapSet) => _.isWeakMapSet(weakMapSet);\n\nconst isSetWeakMap = (setWeakMap) => _.isSetWeakMap(setWeakMap);\n\nconst isWeakMapWeakMap = (weakMapWeakMap) => _.isWeakMapWeakMap(weakMapWeakMap);\n\nconst isWeakSetWeakMap = (setWeakMap) => _.isWeakSetWeakMap(setWeakMap);\n\nconst isWeakSetWeakSet = (weakSetWeakMap) => _.isWeakSetWeakSet(weakSetWeakMap);\n\nconst isWeakMapWeakSet = (weakMapWeakSet) => _.isWeakMapWeakSet(weakMapWeakSet);\n\nconst isSetWeakSet = (setWeakSet) => _.isSetWeakSet(setWeakSet);\n\nconst isWeakMapWeakSet = (weakMapWeakSet) => _.isWeakMapWeakSet(weakMapWeakSet);\n\nconst isSetWeakSet = (setWeakSet) => _.isSetWeakSet(setWeakSet);\n\nconst isWeakMapWeakSet = (weakMapWeakSet) => _.isWeakMapWeakSet(weakMapWeakSet);\n\nconst isSetWeakMap = (setWeakMap) => _.isSetWeakMap(setWeakMap);\n\nconst isWeakMapWeakMap = (weakMapWeakMap) => _.isWeakMapWeakMap(weakMapWeakMap);\n\nconst isSetWeakSet = (setWeakSet) => _.isSetWeakSet(setWeakSet);\n\nconst isWeakMapWeakSet = (weakMapWeakSet) => _.isWeakMapWeakSet(weakMapWeakSet);\n\nconst isWeakSetWeakSet = (weakSetWeakSet) => _.isWeakSetWeakSet(weakSetWeakSet);\n\nconst isWeakMapWeakSet = (weakMapWeakSet) => _.isWeakMapWeakSet(weakMapWeakSet);\n\nconst isSetWeakMap = (setWeakMap) => _.isSetWeakMap(setWeakMap);\n\nconst isWeakMapWeakMap = (weakMapWeakMap) => _.isWeakMapWeakMap(weakMapWeakMap);\n\nconst isSetWeakSet = (setWeakSet) => _.isSetWeakSet(setWeakSet);\n\nconst isWeakMapWeakSet = (weakMapWeakSet) => _.isWeakMapWeakSet(weakMapWeakSet);\n\nconst isSetWeakMap = (setWeakMap) => _.isSetWeakMap(setWeakMap);\n\nconst isWeakMapWeakMap = (weakMapWeakMap) => _.isWeakMapWeakMap(weakMapWeakMap);\n\nconst isSetWeakSet = (setWeakSet) => _.isSetWeakSet(setWeakSet);\n\nconst isWeakMapWeakSet = (weakMapWeakSet) => _.isWeakMapWeakSet(weakMapWeakSet);\n\nconst isWeakMapWeakMap = (weakMapWeakMap) => _.isWeakMapWeakMap(weakMapWeakMap);\n\nconst isSetWeakSet = (setWeakSet) => _.isSetWeakSet(setWeakSet);\n\nconst isWeakMapWeakSet = (weakMapWeakSet) => _.isWeakMapWeakSet(weakMapWeakSet);\n\nconst isSetWeakMap = (setWeakMap) => _.isSetWeakMap(setWeakMap);\n\nconst isWeakMapWeakMap = (weakMapWeakMap) => _.isWeakMapWeakMap(weakMapWeakMap);\n\nconst isSetWeakSet = (setWeakSet) => _.isSetWeakSet(setWeakSet);\n\nconst isWeakMapWeakSet = (weakMapWeakSet) => _.isWeakMapWeakSet(weakMapWeakSet);\n\nconst isWeakMapWeakMap = (weakMapWeakMap) => _.isWeakMapWeakMap(weakMapWeakMap);\n\nconst isSetWeakSet = (setWeakSet) => _.isSetWeakSet(setWeakSet);\n\nconst isWeakMapWeakSet = (weakMapWeakSet) => _.isWeakMapWeakSet(weakMapWeakSet);\n\nconst isSetWeakMap = (setWeakMap) => _.isSetWeakMap(setWeakMap);\n\nconst isWeakMapWeakMap = (weakMapWeakMap) => _.isWeakMapWeakMap(weakMapWeakMap);\n\nconst isSetWeakSet = (setWeakSet) => _.isSetWeakSet(setWeakSet);\n\nconst isWeakMapWeakSet = (weakMapWeakSet) => _.isWeakMapWeakSet(weakMapWeakSet);\n\nconst isWeakMapWeakMap = (weakMapWeakMap) => _.isWeakMapWeakMap(weakMapWeakMap);\n\nconst isSetWeakMap = (setWeakMap) => _.isSetWeakMap(setWeakMap);\n\nconst isWeakMapWeakMap = (weakMapWeakMap) => _.isWeakMapWeakMap(weakMapWeakMap);\n\nconst isSetWeakSet = (setWeakSet) => _.isSetWeakSet(setWeakSet);\n\nconst isWeakMapWeakSet = (weakMapWeakSet) => _.isWeakMapWeakSet(weakMapWeakSet);\n\nconst isWeakMapWeakMap = (weakMapWeakMap) => _.isWeakMapWeakMap(weakMapWeakMap);\n\nconst isSetWeakSet = (setWeakSet) => _.isSetWeakSet(setWeakSet);\n\nconst isWeakMapWeakSet = (weakMapWeakSet) => _.isWeakMapWeakSet(weakMapWeakSet);\n\nconst isWeakMapWeakMap = (weakMapWeakMap) => _.isWeakMapWeakMap(weakMapWeakMap);\n\nconst isSetWeakMap = (setWeakMap) => _.isSetWeakMap(setWeakMap);\n\nconst isWeakMapWeakMap = (weakMapWeakMap) => _.isWeakMapWeakMap(weakMapWeakMap);\n\nconst isSetWeakSet = (setWeakSet) => _.isSetWeakSet(setWeakSet);\n\nconst isWeakMapWeakSet = (weakMapWeakSet) => _.isWeakMapWeakSet(weakMapWeak"}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\n\nconst concatenate = (strings) => {\n  return strings.join('');\n", "canonical_solution": "}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "partial": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.join('');\n  # print('@@this is the line to split##')\n}\n\n", "gc": "<|endoftext|>/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\n\nconst concatenate = (strings) => {\n  return strings.join('');\n};\n\nmodule.exports = concatenate;\n\n},{}],17:[function(require,module,exports){\n'use strict';\n\nconst _ = require('lodash');\n\nconst stringify = require('./stringify');\n\nconst parse = require('./parse');\n\nconst parseValue = require('./parse-value');\n\nconst parseType = require('./parse-type');\n\nconst parseTypes = require('./parse-types');\n\nconst parseValues = require('./parse-values');\n\nconst parseValueType = require('./parse-value-type');\n\nconst parseValueTypes = require('./parse-value-types');\n\nconst parseValues = require('./parse-values');\n\nconst parseValueTypes = require('./parse-value-types');\n\nconst parseValueTypes = require('./parse-value-types');\n\nconst parseValueTypes = require('./parse-value-types');\n\nconst parseValueTypes = require('./parse-value-types');\n\nconst parseValueTypes = require('./parse-value-types');\n\nconst parseValueTypes = require('./parse-value-types');\n\nconst parseValueTypes = require('./parse-value-types');\n\nconst parseValueTypes = require('./parse-value-types');\n\nconst parseValueTypes = require('./parse-value-types');\n\nconst parseValueTypes = require('./parse-value-types');\n\nconst parseValueTypes = require('./parse-value-types');\n\nconst parseValueTypes = require('./parse-value-types');\n\nconst parseValueTypes = require('./parse-value-types');\n\nconst parseValueTypes = require('./parse-value-types');\n\nconst parseValueTypes = require('./parse-value-types');\n\nconst parseValueTypes = require('./parse-value-types');\n\nconst parseValueTypes = require('./parse-value-types');\n\nconst parseValueTypes = require('./parse-value-types');\n\nconst parseValueTypes = require('./parse-value-types');\n\nconst parseValueTypes = require('./parse-value-types');\n\nconst parseValueTypes = require('./parse-value-types');\n\nconst parseValueTypes = require('./parse-value-types');\n\nconst parseValueTypes = require('./parse-value-types');\n\nconst parseValueTypes = require('./parse-value-types');\n\nconst parseValueTypes = require('./parse-value-types');\n\nconst parseValueTypes = require('./parse-value-types');\n\nconst parseValueTypes = require('./parse-value-types');\n\nconst parseValueTypes = require('./parse-value-types');\n\nconst parseValueTypes = require('./parse-value-types');\n\nconst parseValueTypes = require('./parse-value-types');\n\nconst parseValueTypes = require('./parse-value-types');\n\nconst parseValueTypes = require('./parse-value-types');\n\nconst parseValueTypes = require('./parse-value-types');\n\nconst parseValueTypes = require('./parse-value-types');\n\nconst parseValueTypes = require('./parse-value-types');\n\nconst parseValueTypes = require('./parse-value-types');\n\nconst parseValueTypes = require('./parse-value-types');\n\nconst parseValueTypes = require('./parse-value-types');\n\nconst parseValueTypes = require('./parse-value-types');\n\nconst parseValueTypes = require('./parse-value-types');\n\nconst parseValueTypes = require('./parse-value-types');\n\nconst parseValueTypes = require('./parse-value-types');\n\nconst parseValueTypes = require('./parse-value-types');\n\nconst parseValueTypes = require('./parse-value-types');\n\nconst parseValueTypes = require('./parse-value-types');\n\nconst parseValueTypes = require('./parse-value-types');\n\nconst parseValueTypes = require('./parse-value-types');\n\nconst parseValueTypes = require('./parse-value-types');\n\nconst parseValueTypes = require('./parse-value-types');\n\nconst parseValueTypes = require('./parse-value-types');\n\nconst parseValueTypes = require('./parse-value-types');\n\nconst parseValueTypes = require('./parse-value-types');\n\nconst parseValueTypes = require('./parse-value-types');\n\nconst parseValueTypes = require('./parse-value-types');\n\nconst parseValueTypes = require('./parse-value-types');\n\nconst parseValueTypes = require('./parse-value-types');\n\nconst parseValueTypes = require('./parse-value-types');\n\nconst parseValueTypes = require('./parse-value-types');\n\nconst parseValueTypes = require('./parse-value-types');\n\nconst parseValueTypes = require('./parse-value-types');\n\nconst parseValueTypes = require('./parse-value-types');\n\nconst parseValueTypes = require('./parse-value-types');\n\nconst parseValueTypes = require('./parse-value-types');\n\nconst parseValueTypes = require('./parse-value-types');\n\nconst parseValueTypes = require('./parse-value-types');\n\nconst parseValueTypes = require('./parse-value-types');\n\nconst parseValueTypes = require('./parse-value-types');\n\nconst parseValueTypes = require('./parse-value-types');\n\nconst parseValueTypes = require('./parse-value-types');\n\nconst parseValueTypes = require('./parse-value-types');\n\nconst parseValueTypes = require('./parse-value-types');\n\nconst parseValueTypes = require('./parse-value-types');\n\nconst parseValueTypes = require('./parse-value-types');\n\nconst parseValueTypes = require('./parse-value-types');\n\nconst parseValueTypes = require('./parse-value-types');\n\nconst parseValueTypes = require('./parse-value-types');\n\nconst parseValueTypes = require('./parse-value-types');\n\nconst parseValueTypes = require('./parse-value-types');\n\nconst parseValueTypes = require('./parse-value-types');\n\nconst parseValueTypes = require('./parse-value-types');\n\nconst parseValueTypes = require('./parse-value-types');\n\nconst parseValueTypes = require('./parse-value-types');\n\nconst parseValueTypes = require('./parse-value-types');\n\nconst parseValueTypes = require('./parse-value-types');\n\nconst parseValueTypes = require('./parse-value-types');\n\nconst parseValueTypes = require('./parse-value-types');\n\nconst parseValueTypes = require('./parse-value-types');\n\nconst parseValueTypes = require('./parse-value-types');\n\nconst parseValueTypes = require('./parse-value-types');\n\nconst parseValueTypes = require('./parse-value-types');\n\nconst parseValueTypes = require('./parse-value-types');\n\nconst parseValueTypes = require('./parse-value-types');\n\nconst parseValueTypes = require('./parse-value-types');\n\nconst parseValueTypes = require('./parse-value-types');\n\nconst parseValueTypes = require('./parse-value-types');\n\nconst parseValueTypes = require('./parse-value-types');\n\nconst parseValueTypes = require('./parse-value-types');\n\nconst parseValueTypes = require('./parse-value-types');\n\nconst parseValueTypes = require('./parse-value-types');\n\nconst parseValueTypes = require('./parse-value-types');\n\nconst parseValueTypes = require('./parse-value-types');\n\nconst parseValueTypes = require('./parse-value-types');\n\nconst parseValueTypes = require('./parse-value-types');\n\nconst parseValueTypes = require('./parse-value-types');\n\nconst parseValueTypes = require('./parse-value-types');\n\nconst parseValueTypes = require('./parse-value-types');\n\nconst parseValueTypes = require('./parse-value-types');\n\nconst parseValueTypes = require('./parse-value-types');\n\nconst parseValueTypes = require('./parse-value-types');\n\nconst parseValueTypes = require('./parse-value-types');\n\nconst parseValueTypes = require('./parse-value-types');\n\nconst parseValueTypes = require('./parse-value-types');\n\nconst parseValueTypes = require('./parse-value-types');\n\nconst parseValueTypes = require('./parse-value-types');\n\nconst parseValueTypes = require('./parse-value-types');\n\nconst parseValueTypes = require('./parse-value-types');\n\nconst parseValueTypes = require('./parse-value-types');\n\nconst parseValueTypes = require('./parse-value-types');\n\nconst parseValueTypes = require('./parse-value-types');\n\nconst parseValueTypes = require('./parse-value-types');\n\nconst parseValueTypes = require('./parse-value-types');\n\nconst parseValueTypes = require('./parse-value-types');\n\nconst parseValueTypes = require('./parse-value-types');\n\nconst parseValueTypes = require('./parse-value-types');\n\nconst parseValueTypes = require('./parse-value-types');\n\nconst parseValueTypes = require('./parse-value-types');\n\n"}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\n\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(x => x.startsWith(prefix));\n", "canonical_solution": "}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "partial": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(x => x.startsWith(prefix));\n  # print('@@this is the line to split##')\n}\n\n", "gc": "<|endoftext|>/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\n\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(x => x.startsWith(prefix));\n};\n\nmodule.exports = filterByPrefix;\n\n},{}],17:[function(require,module,exports){\n'use strict';\n\nconst _ = require('lodash');\n\nconst filterBy = (list, predicate) => {\n  return _.filter(list, predicate);\n};\n\nmodule.exports = filterBy;\n\n},{\"lodash\":15}],18:[function(require,module,exports){\n'use strict';\n\nconst _ = require('lodash');\n\nconst filterBy = (list, predicate) => {\n  return _.filter(list, predicate);\n};\n\nmodule.exports = filterBy;\n\n},{\"lodash\":15}],19:[function(require,module,exports){\n'use strict';\n\nconst _ = require('lodash');\n\nconst filterBy = (list, predicate) => {\n  return _.filter(list, predicate);\n};\n\nmodule.exports = filterBy;\n\n},{\"lodash\":15}],20:[function(require,module,exports){\n'use strict';\n\nconst _ = require('lodash');\n\nconst filterBy = (list, predicate) => {\n  return _.filter(list, predicate);\n};\n\nmodule.exports = filterBy;\n\n},{\"lodash\":15}],21:[function(require,module,exports){\n'use strict';\n\nconst _ = require('lodash');\n\nconst filterBy = (list, predicate) => {\n  return _.filter(list, predicate);\n};\n\nmodule.exports = filterBy;\n\n},{\"lodash\":15}],22:[function(require,module,exports){\n'use strict';\n\nconst _ = require('lodash');\n\nconst filterBy = (list, predicate) => {\n  return _.filter(list, predicate);\n};\n\nmodule.exports = filterBy;\n\n},{\"lodash\":15}],23:[function(require,module,exports){\n'use strict';\n\nconst _ = require('lodash');\n\nconst filterBy = (list, predicate) => {\n  return _.filter(list, predicate);\n};\n\nmodule.exports = filterBy;\n\n},{\"lodash\":15}],24:[function(require,module,exports){\n'use strict';\n\nconst _ = require('lodash');\n\nconst filterBy = (list, predicate) => {\n  return _.filter(list, predicate);\n};\n\nmodule.exports = filterBy;\n\n},{\"lodash\":15}],25:[function(require,module,exports){\n'use strict';\n\nconst _ = require('lodash');\n\nconst filterBy = (list, predicate) => {\n  return _.filter(list, predicate);\n};\n\nmodule.exports = filterBy;\n\n},{\"lodash\":15}],26:[function(require,module,exports){\n'use strict';\n\nconst _ = require('lodash');\n\nconst filterBy = (list, predicate) => {\n  return _.filter(list, predicate);\n};\n\nmodule.exports = filterBy;\n\n},{\"lodash\":15}],27:[function(require,module,exports){\n'use strict';\n\nconst _ = require('lodash');\n\nconst filterBy = (list, predicate) => {\n  return _.filter(list, predicate);\n};\n\nmodule.exports = filterBy;\n\n},{\"lodash\":15}],28:[function(require,module,exports){\n'use strict';\n\nconst _ = require('lodash');\n\nconst filterBy = (list, predicate) => {\n  return _.filter(list, predicate);\n};\n\nmodule.exports = filterBy;\n\n},{\"lodash\":15}],29:[function(require,module,exports){\n'use strict';\n\nconst _ = require('lodash');\n\nconst filterBy = (list, predicate) => {\n  return _.filter(list, predicate);\n};\n\nmodule.exports = filterBy;\n\n},{\"lodash\":15}],30:[function(require,module,exports){\n'use strict';\n\nconst _ = require('lodash');\n\nconst filterBy = (list, predicate) => {\n  return _.filter(list, predicate);\n};\n\nmodule.exports = filterBy;\n\n},{\"lodash\":15}],31:[function(require,module,exports){\n'use strict';\n\nconst _ = require('lodash');\n\nconst filterBy = (list, predicate) => {\n  return _.filter(list, predicate);\n};\n\nmodule.exports = filterBy;\n\n},{\"lodash\":15}],32:[function(require,module,exports){\n'use strict';\n\nconst _ = require('lodash');\n\nconst filterBy = (list, predicate) => {\n  return _.filter(list, predicate);\n};\n\nmodule.exports = filterBy;\n\n},{\"lodash\":15}],33:[function(require,module,exports){\n'use strict';\n\nconst _ = require('lodash');\n\nconst filterBy = (list, predicate) => {\n  return _.filter(list, predicate);\n};\n\nmodule.exports = filterBy;\n\n},{\"lodash\":15}],34:[function(require,module,exports){\n'use strict';\n\nconst _ = require('lodash');\n\nconst filterBy = (list, predicate) => {\n  return _.filter(list, predicate);\n};\n\nmodule.exports = filterBy;\n\n},{\"lodash\":15}],35:[function(require,module,exports){\n'use strict';\n\nconst _ = require('lodash');\n\nconst filterBy = (list, predicate) => {\n  return _.filter(list, predicate);\n};\n\nmodule.exports = filterBy;\n\n},{\"lodash\":15}],36:[function(require,module,exports){\n'use strict';\n\nconst _ = require('lodash');\n\nconst filterBy = (list, predicate) => {\n  return _.filter(list, predicate);\n};\n\nmodule.exports = filterBy;\n\n},{\"lodash\":15}],37:[function(require,module,exports){\n'use strict';\n\nconst _ = require('lodash');\n\nconst filterBy = (list, predicate) => {\n  return _.filter(list, predicate);\n};\n\nmodule.exports = filterBy;\n\n},{\"lodash\":15}],38:[function(require,module,exports){\n'use strict';\n\nconst _ = require('lodash');\n\nconst filterBy = (list, predicate) => {\n  return _.filter(list, predicate);\n};\n\nmodule.exports = filterBy;\n\n},{\"lodash\":15}],39:[function(require,module,exports){\n'use strict';\n\nconst _ = require('lodash');\n\nconst filterBy = (list, predicate) => {\n  return _.filter(list, predicate);\n};\n\nmodule.exports = filterBy;\n\n},{\"lodash\":15}],40:[function(require,module,exports){\n'use strict';\n\nconst _ = require('lodash');\n\nconst filterBy = (list, predicate) => {\n  return _.filter(list, predicate);\n};\n\nmodule.exports = filterBy;\n\n},{\"lodash\":15}],41:[function(require,module,exports){\n'use strict';\n\nconst _ = require('lodash');\n\nconst filterBy = (list, predicate) => {\n  return _.filter(list, predicate);\n};\n\nmodule.exports = filterBy;\n\n},{\"lodash\":15}],42:[function(require,module,exports){\n'use strict';\n\nconst _ = require('lodash');\n\nconst filterBy = (list, predicate) => {\n  return _.filter(list, predicate);\n};\n\nmodule.exports = filterBy;\n\n},{\"lodash\":15}],43:[function(require,module,exports){\n'use strict';\n\nconst _ = require('lodash');\n\nconst filterBy = (list, predicate) => {\n  return _.filter(list, predicate);\n};\n\nmodule.exports = filterBy;\n\n},{\"lodash\":15}],44:[function(require,module,exports){\n'use strict';\n\nconst _ = require('lodash');\n\nconst filterBy = (list, predicate) => {\n  return _.filter(list, predicate);\n};\n\nmodule.exports = filterBy;\n\n},{\"lodash\":15}],45:[function(require,module,exports){\n'use strict';\n\nconst _ = require('lodash');\n\nconst filterBy = (list, predicate) => {\n  return _.filter(list, predicate);\n};\n\nmodule.exports = filterBy;\n\n},{\"lodash\":15}],46:[function(require,module,exports){\n'use strict';\n\nconst _ = require('lodash');\n\nconst filterBy = (list, predicate) => {\n  return _.filter(list, predicate);\n};\n\nmodule.exports = filterBy;\n\n},{\"lodash\":15}],47:[function(require,module,exports){\n'use strict';\n\nconst _ = require('lodash');\n\nconst filterBy = (list, predicate) => {\n  return _.filter(list, predicate);\n};\n\nmodule.exports = filterBy;\n\n},{\"lodash\":15}],48:[function(require,module,exports){\n'use strict';\n\nconst _ = require('lodash');\n\nconst filterBy = (list, "}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\n\nconst getPositive = (l) => {\n  return l.filter(e => e > 0);\n", "canonical_solution": "}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "partial": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  return l.filter(e => e > 0);\n  # print('@@this is the line to split##')\n}\n\n", "gc": "<|endoftext|>/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\n\nconst getPositive = (l) => {\n  return l.filter(e => e > 0);\n};\n\n/*\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\n\nconst getNegative = (l) => {\n  return l.filter(e => e < 0);\n};\n\n/*\n  >>> getNegative([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\n\nconst getPositiveOrNegative = (l) => {\n  return getPositive(l).concat(getNegative(l));\n};\n\n/*\n  >>> getPositiveOrNegative([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositiveOrNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\n\nconst getPositiveOrZero = (l) => {\n  return getPositiveOrNegative(l).filter(e => e > 0);\n};\n\n/*\n  >>> getPositiveOrZero([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositiveOrZero([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\n\nconst getNegativeOrZero = (l) => {\n  return getNegative(l).filter(e => e < 0);\n};\n\n/*\n  >>> getNegativeOrZero([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getNegativeOrZero([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\n\nconst getPositiveOrNegativeOrZero = (l) => {\n  return getPositiveOrNegative(l).concat(getNegativeOrZero(l));\n};\n\n/*\n  >>> getPositiveOrNegativeOrZero([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositiveOrNegativeOrZero([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\n\nconst getPositiveOrZeroOrNegative = (l) => {\n  return getPositiveOrZero(l).concat(getNegativeOrZero(l));\n};\n\n/*\n  >>> getPositiveOrZeroOrNegative([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositiveOrZeroOrNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\n\nconst getPositiveOrZeroOrZero = (l) => {\n  return getPositiveOrZero(l).concat(getPositiveOrZeroOrNegative(l));\n};\n\n/*\n  >>> getPositiveOrZeroOrZero([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositiveOrZeroOrZero([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\n\nconst getPositiveOrZeroOrNegativeOrZero = (l) => {\n  return getPositiveOrZeroOrNegative(l).concat(getPositiveOrZeroOrZero(l));\n};\n\n/*\n  >>> getPositiveOrZeroOrNegativeOrZero([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositiveOrZeroOrNegativeOrZero([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\n\nconst getPositiveOrZeroOrZeroOrNegative = (l) => {\n  return getPositiveOrZeroOrZero(l).concat(getPositiveOrZeroOrNegativeOrZero(l));\n};\n\n/*\n  >>> getPositiveOrZeroOrZeroOrNegative([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositiveOrZeroOrZeroOrNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\n\nconst getPositiveOrZeroOrZeroOrZero = (l) => {\n  return getPositiveOrZeroOrZero(l).concat(getPositiveOrZeroOrZeroOrNegative(l));\n};\n\n/*\n  >>> getPositiveOrZeroOrZeroOrZero([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositiveOrZeroOrZeroOrZero([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\n\nconst getPositiveOrZeroOrZeroOrNegative = (l) => {\n  return getPositiveOrZeroOrZeroOrNegative(l).concat(getPositiveOrZeroOrZeroOrZero(l));\n};\n\n/*\n  >>> getPositiveOrZeroOrZeroOrNegative([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositiveOrZeroOrZeroOrNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\n\nconst getPositiveOrZeroOrZeroOrZeroOrNegative = (l) => {\n  return getPositiveOrZeroOrZeroOrZeroOrNegative(l).concat(getPositiveOrZeroOrZeroOrZeroOrNegative(l));\n};\n\n/*\n  >>> getPositiveOrZeroOrZeroOrZeroOrNegative([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositiveOrZeroOrZeroOrZeroOrZeroOrNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\n\nconst getPositiveOrZeroOrZeroOrZeroOrZero = (l) => {\n  return getPositiveOrZeroOrZeroOrZeroOrZero(l).concat(getPositiveOrZeroOrZeroOrZeroOrNegative(l));\n};\n\n/*\n  >>> getPositiveOrZeroOrZeroOrZeroOrZeroOrNegative([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositiveOrZeroOrZeroOrZeroOrZeroOrZeroOrNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\n\nconst getPositiveOrZeroOrZeroOrZeroOrZeroOrNegative = (l) => {\n  return getPositiveOrZeroOrZeroOrZeroOrZeroOrNegative(l).concat(getPositiveOrZeroOrZeroOrZeroOrZeroOrZeroOrNegative(l));\n};\n\n/*\n  >>> getPositiveOrZeroOrZeroOrZeroOrZeroOrZeroOrNegative([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositiveOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\n\nconst getPositiveOrZeroOrZeroOrZeroOrZeroOrZero = (l) => {\n  return getPositiveOrZeroOrZeroOrZeroOrZeroOrZeroOrNegative(l).concat(getPositiveOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrNegative(l));\n};\n\n/*\n  >>> getPositiveOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrNegative([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositiveOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\n\nconst "}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a given number is prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\n\nconst isPrime = (n) => {\n  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n", "canonical_solution": "    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "partial": "/*Return true if a given number is prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    # print('@@this is the line to split##')\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "gc": "<|endoftext|>/*Return true if a given number is prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\n\nconst isPrime = (n) => {\n  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k === 0)\n      return false;\n  return true;\n};\n\n/*\n  Given a number, return its prime factors.\n  >>> factors(5)\n  [2, 3]\n  >>> factors(15)\n  [2, 3, 5]\n  >>> factors(21)\n  [2, 3, 5, 7]\n  >>> factors(51)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]\n  >>> factors(101)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]\n  >>> factors(101)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]\n  >>> factors(101)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]\n  >>> factors(101)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 9"}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\n\nconst findZero = (xs) => {\n  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n", "canonical_solution": "    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "partial": "/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    # print('@@this is the line to split##')\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "gc": "<|endoftext|>/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\n\nconst findZero = (xs) => {\n  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    let x = poly(xs, center);\n    if (Math.abs(x) < 1e-10) {\n      return center;\n    }\n    begin += center;\n    end -= center;\n  }\n  return begin;\n}\n\n/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly2 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\n\nconst findZero2 = (xs) => {\n  var begin = -1.0, end = 1.0;\n  while (poly2(xs, begin) * poly2(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    let x = poly2(xs, center);\n    if (Math.abs(x) < 1e-10) {\n      return center;\n    }\n    begin += center;\n    end -= center;\n  }\n  return begin;\n}\n\n/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly3 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\n\nconst findZero3 = (xs) => {\n  var begin = -1.0, end = 1.0;\n  while (poly3(xs, begin) * poly3(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    let x = poly3(xs, center);\n    if (Math.abs(x) < 1e-10) {\n      return center;\n    }\n    begin += center;\n    end -= center;\n  }\n  return begin;\n}\n\n/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly4 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\n\nconst findZero4 = (xs) => {\n  var begin = -1.0, end = 1.0;\n  while (poly4(xs, begin) * poly4(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    let x = poly4(xs, center);\n    if (Math.abs(x) < 1e-10) {\n      return center;\n    }\n    begin += center;\n    end -= center;\n  }\n  return begin;\n}\n\n/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly5 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\n\nconst findZero5 = (xs) => {\n  var begin = -1.0, end = 1.0;\n  while (poly5(xs, begin) * poly5(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    let x = poly5(xs, center);\n    if (Math.abs(x) < 1e-10) {\n      return center;\n    }\n    begin += center;\n    end -= center;\n  }\n  return begin;\n}\n\n/*\n  Evaluates "}
{"task_id": "JavaScript/33", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\n\nconst sortThird = (l) => {\n  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n", "canonical_solution": "  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "partial": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  # print('@@this is the line to split##')\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "gc": "<|endoftext|>/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\n\nconst sortThird = (l) => {\n  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return three;\n};\n\nmodule.exports = sortThird;\n\n},{}],9:[function(require,module,exports){\n/*\n  A simple JavaScript implementation of the Knuth Morris Pratt algorithm.\n  See http://en.wikipedia.org/wiki/Knuth%E2%80%93Morris_prinatt_algorithm\n  \n  Copyright (c) 2007 John Resig (http://ejohn.org/)\n  \n  Permission is hereby granted, free of charge, to any person obtaining\n  a copy of this software and associated documentation files (the\n  \"Software\"), to deal in the Software without restriction, including\n  without limitation the rights to use, copy, modify, merge, publish,\n  distribute, sublicense, and/or sell copies of the Software, and to\n  permit persons to whom the Software is furnished to do so, subject to\n  the following conditions:\n  \n  The above copyright notice and this permission notice shall be\n  included in all copies or substantial portions of the Software.\n  \n  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n  LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n  OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n  WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n  \n  Modifications Copyright 2009-2011 Knut Reinert, FU Berlin\n  \n  Modifications Copyright 2011-2013 David G. Morris\n  \n  Modifications Copyright 2006-2008 John Resig\n  \n  Modifications Copyright 2006-2008 John Resig\n  \n  Modifications Copyright 2006-2008 John Resig\n  \n  Modifications Copyright 2006-2008 John Resig\n  \n  Modifications Copyright 2006-2008 John Resig\n  \n  Modifications Copyright 2006-2008 John Resig\n  \n  Modifications Copyright 2006-2008 John Resig\n  \n  Modifications Copyright 2006-2008 John Resig\n  \n  Modifications Copyright 2006-2008 John Resig\n  \n  Modifications Copyright 2006-2008 John Resig\n  \n  Modifications Copyright 2006-2008 John Resig\n  \n  Modifications Copyright 2006-2008 John Resig\n  \n  Modifications Copyright 2006-2008 John Resig\n  \n  Modifications Copyright 2006-2008 John Resig\n  \n  Modifications Copyright 2006-2008 John Resig\n  \n  Modifications Copyright 2006-2008 John Resig\n  \n  Modifications Copyright 2006-2008 John Resig\n  \n  Modifications Copyright 2006-2008 John Resig\n  \n  Modifications Copyright 2006-2008 John Resig\n  \n  Modifications Copyright 2006-2008 John Resig\n  \n  Modifications Copyright 2006-2008 John Resig\n  \n  Modifications Copyright 2006-2008 John Resig\n  \n  Modifications Copyright 2006-2008 John Resig\n  \n  Modifications Copyright 2006-2008 John Resig\n  \n  Modifications Copyright 2006-2008 John Resig\n  \n  Modifications Copyright 2006-2008 John Resig\n  \n  Modifications Copyright 2006-2008 John Resig\n  \n  Modifications Copyright 2006-2008 John Resig\n  \n  Modifications Copyright 2006-2008 John Resig\n  \n  Modifications Copyright 2006-2008 John Resig\n  \n  Modifications Copyright 2006-2008 John Resig\n  \n  Modifications Copyright 2006-2008 John Resig\n  \n  Modifications Copyright 2006-2008 John Resig\n  \n  Modifications Copyright 2006-2008 John Resig\n  \n  Modifications Copyright 2006-2008 John Resig\n  \n  Modifications Copyright 2006-2008 John Resig\n  \n  Modifications Copyright 2006-2008 John Resig\n  \n  Modifications Copyright 2006-2008 John Resig\n  \n  Modifications Copyright 2006-2008 John Resig\n  \n  Modifications Copyright 2006-2008 John Resig\n  \n  Modifications Copyright 2006-2008 John Resig\n  \n  Modifications Copyright 2006-2008 John Resig\n  \n  Modifications Copyright 2006-2008 John Resig\n  \n  Modifications Copyright 2006-2008 John Resig\n  \n  Modifications Copyright 2006-2008 John Resig\n  \n  Modifications Copyright 2006-2008 John Resig\n  \n  Modifications Copyright 2006-2008 John Resig\n  \n  Modifications Copyright 2006-2008 John Resig\n  \n  Modifications Copyright 2006-2008 John Resig\n  \n  Modifications Copyright 2006-2008 John Resig\n  \n  Modifications Copyright 2006-2008 John Resig\n  \n  Modifications Copyright 2006-2008 John Resig\n  \n  Modifications Copyright 2006-2008 John Resig\n  \n  Modifications Copyright 2006-2008 John Resig\n  \n  Modifications Copyright 2006-2008 John Resig\n  \n  Modifications Copyright 2006-2008 John Resig\n  \n  Modifications Copyright 2006-2008 John Resig\n  \n  Modifications Copyright 2006-2008 John Resig\n  \n  Modifications Copyright 2006-2008 John Resig\n  \n  Modifications Copyright 2006-2008 John Resig\n  \n  Modifications Copyright 2006-2008 John Resig\n  \n  Modifications Copyright 2006-2008 John Resig\n  \n  Modifications Copyright 2006-2008 John Resig\n  \n  Modifications Copyright 2006-2008 John Resig\n  \n  Modifications Copyright 2006-2008 John Resig\n  \n  Modifications Copyright 2006-2008 John Resig\n  \n  Modifications Copyright 2006-2008 John Resig\n  \n  Modifications Copyright 2006-2008 John Resig\n  \n  Modifications Copyright 2006-2008 John Resig\n  \n  Modifications Copyright 2006-2008 John Resig\n  \n  Modifications Copyright 2006-2008 John Resig\n  \n  Modifications Copyright 2006-2008 John Resig\n  \n  Modifications Copyright 2006-2008 John Resig\n  \n  Modifications Copyright 2006-2008 John Resig\n  \n  Modifications Copyright 2006-2008 John Resig\n  \n  Modifications Copyright 2006-2008 John Resig\n  \n  Modifications Copyright 2006-2008 John Resig\n  \n  Modifications Copyright 2006-2008 John Resig\n  \n  Modifications Copyright 2006-2008 John Resig\n  \n  Modifications Copyright 2006-2008 John Resig\n  \n  Modifications Copyright 2006-2008 John Resig\n  \n  Modifications Copyright 2006-2008 John Resig\n  \n  Modifications Copyright 2006-2008 John Resig\n  \n  Modifications Copyright 2006-2008 John Resig\n  \n  Modifications Copyright 2006-2008 John Re"}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\n\nconst unique = (l) => {\n  return Array.from(new Set(l)).sort((a, b) => (a - b));\n", "canonical_solution": "}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "partial": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  return Array.from(new Set(l)).sort((a, b) => (a - b));\n  # print('@@this is the line to split##')\n}\n\n", "gc": "<|endoftext|>/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\n\nconst unique = (l) => {\n  return Array.from(new Set(l)).sort((a, b) => (a - b));\n};\n\nmodule.exports = { unique, unique };\n\n},{}],15:[function(require,module,exports){\n'use strict';\n\nconst { isArray } = Array;\n\n/**\n * Check if a value is an array\n * @param {*} value - The value to check\n * @returns {boolean} - True if the value is an array, false otherwise\n */\nconst isArray = value => Array.isArray(value) || isArray(value);\n\nmodule.exports = isArray;\n\n},{\"Array\":1}],16:[function(require,module,exports){\n'use strict';\n\nconst { isObject } = Object;\n\n/**\n * Check if a value is an object\n * @param {*} value - The value to check\n * @returns {boolean} - True if the value is an object, false otherwise\n */\nconst isObject = value => isObject(value) || isObject(value);\n\nmodule.exports = isObject;\n\n},{\"Object\":1}],17:[function(require,module,exports){\n'use strict';\n\nconst { isString } = String;\n\n/**\n * Check if a value is an string\n * @param {*} value - The value to check\n * @returns {boolean} - True if the value is an string, false otherwise\n */\nconst isString = value => isString(value) || isString(value.toLowerCase());\n\nmodule.exports = isString;\n\n},{\"String\":1}],18:[function(require,module,exports){\n'use strict';\n\nconst { isNumber } = Number;\n\n/**\n * Check if a value is an integer\n * @param {*} value - The value to check\n * @returns {boolean} - True if the value is an integer, false otherwise\n */\nconst isInteger = value => isNumber(value) && Math.floor(value) === value;\n\nmodule.exports = isInteger;\n\n},{\"Number\":1}],19:[function(require,module,exports){\n'use strict';\n\nconst { isArray } = Array;\n\n/**\n * Check if a value is an array\n * @param {*} value - The value to check\n * @returns {boolean} - True if the value is an array, false otherwise\n */\nconst isArray = value => Array.isArray(value) || isArray(value);\n\nmodule.exports = isArray;\n\n},{\"Array\":1}],20:[function(require,module,exports){\n'use strict';\n\nconst { isString } = String;\n\n/**\n * Check if a value is an string\n * @param {*} value - The value to check\n * @returns {boolean} - True if the value is an string, false otherwise\n */\nconst isString = value => isString(value) || isString(value.toLowerCase());\n\nmodule.exports = isString;\n\n},{\"String\":1}],21:[function(require,module,exports){\n'use strict';\n\nconst { isNumber } = Number;\n\n/**\n * Check if a value is an integer\n * @param {*} value - The value to check\n * @returns {boolean} - True if the value is an integer, false otherwise\n */\nconst isInteger = value => isNumber(value) && Math.floor(value) === value;\n\nmodule.exports = isInteger;\n\n},{\"Number\":1}],22:[function(require,module,exports){\n'use strict';\n\nconst { isArray } = Array;\n\n/**\n * Check if a value is an array\n * @param {*} value - The value to check\n * @returns {boolean} - True if the value is an array, false otherwise\n */\nconst isArray = value => Array.isArray(value) || isArray(value);\n\nmodule.exports = isArray;\n\n},{\"Array\":1}],23:[function(require,module,exports){\n'use strict';\n\nconst { isString } = String;\n\n/**\n * Check if a value is an string\n * @param {*} value - The value to check\n * @returns {boolean} - True if the value is an string, false otherwise\n */\nconst isString = value => isString(value) || isString(value.toLowerCase());\n\nmodule.exports = isString;\n\n},{\"String\":1}],24:[function(require,module,exports){\n'use strict';\n\nconst { isNumber } = Number;\n\n/**\n * Check if a value is an integer\n * @param {*} value - The value to check\n * @returns {boolean} - True if the value is an integer, false otherwise\n */\nconst isInteger = value => isNumber(value) && Math.floor(value) === value;\n\nmodule.exports = isInteger;\n\n},{\"Number\":1}],25:[function(require,module,exports){\n'use strict';\n\nconst { isString } = String;\n\n/**\n * Check if a value is an array\n * @param {*} value - The value to check\n * @returns {boolean} - True if the value is an array, false otherwise\n */\nconst isArray = value => Array.isArray(value) || isArray(value);\n\nmodule.exports = isArray;\n\n},{\"String\":1}],26:[function(require,module,exports){\n'use strict';\n\nconst { isString } = String;\n\n/**\n * Check if a value is an object\n * @param {*} value - The value to check\n * @returns {boolean} - True if the value is an object, false otherwise\n */\nconst isObject = value => isObject(value) || isObject(value);\n\nmodule.exports = isObject;\n\n},{\"String\":1}],27:[function(require,module,exports){\n'use strict';\n\nconst { isNumber } = Number;\n\n/**\n * Check if a value is an integer\n * @param {*} value - The value to check\n * @returns {boolean} - True if the value is an integer, false otherwise\n */\nconst isInteger = value => isNumber(value) && Math.floor(value) === value;\n\nmodule.exports = isInteger;\n\n},{\"Number\":1}],28:[function(require,module,exports){\n'use strict';\n\nconst { isString } = String;\n\n/**\n * Check if a value is an array\n * @param {*} value - The value to check\n * @returns {boolean} - True if the value is an array, false otherwise\n */\nconst isArray = value => Array.isArray(value) || isArray(value);\n\nmodule.exports = isArray;\n\n},{\"String\":1}],29:[function(require,module,exports){\n'use strict';\n\nconst { isString } = String;\n\n/**\n * Check if a value is an object\n * @param {*} value - The value to check\n * @returns {boolean} - True if the value is an object, false otherwise\n */\nconst isObject = value => isObject(value) || isObject(value);\n\nmodule.exports = isObject;\n\n},{\"String\":1}],30:[function(require,module,exports){\n'use strict';\n\nconst { isString } = String;\n\n/**\n * Check if a value is an array\n * @param {*} value - The value to check\n * @returns {boolean} - True if the value is an array, false otherwise\n */\nconst isArray = value => Array.isArray(value) || isArray(value);\n\nmodule.exports = isArray;\n\n},{\"String\":1}],31:[function(require,module,exports){\n'use strict';\n\nconst { isString } = String;\n\n/**\n * Check if a value is an object\n * @param {*} value - The value to check\n * @returns {boolean} - True if the value is an object, false otherwise\n */\nconst isObject = value => isObject(value) || isObject(value);\n\nmodule.exports = isObject;\n\n},{\"String\":1}],32:[function(require,module,exports){\n'use strict';\n\nconst { isString } = String;\n\n/**\n * Check if a value is an array\n * @param {*} value - The value to check\n * @returns {boolean} - True if the value is an array, false otherwise\n */\nconst isArray = value => Array.isArray(value) || isArray(value);\n\nmodule.exports = isArray;\n\n},{\"String\":1}],33:[function(require,module,exports){\n'use strict';\n\nconst { isString } = String;\n\n/**\n * Check if a value is an object\n * @param {*} value - The value to check\n * @returns {boolean} - True if the value is an object, false otherwise\n */\nconst isObject = value => isObject(value) || isObject(value);\n\nmodule.exports = isObject;\n\n},{\"String\":1}],34:[function(require,module,exports){\n'use strict';\n\nconst { isString } = String;\n\n/**\n * Check if a value is an array\n * @param {*} value - The value to check\n * @returns {boolean} - True if the value is an array, false otherwise\n */\nconst isArray = value => Array.isArray(value) || isArray(value);\n\nmodule.exports = isArray;\n\n},{\"String\":1}],35:[function(require,module,exports){\n'use strict';\n\nconst { isString } = String;\n\n/**\n * Check if a value is an object\n * @param {*} value - The value to check\n * @returns {boolean} - True if the value is an object, false otherwise\n */\nconst isObject = value => isObject(value) || isObject(value);\n\nmodule.exports = isObject;\n\n},{\"String\":1}],36:[function(require,module,exports){\n'use strict';\n\nconst { isString } = String;\n\n/**\n * Check if a value is an array\n * @param {*} value - The value to check\n * @returns {boolean} - True if the value is an array, false otherwise"}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\n\nconst maxElement = (l) => {\n  return Math.max(...l);\n", "canonical_solution": "}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "partial": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  return Math.max(...l);\n  # print('@@this is the line to split##')\n}\n\n", "gc": "<|endoftext|>/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\n\nconst maxElement = (l) => {\n  return Math.max(...l);\n};\n\n/*Return minimum element in the list.\n  >>> minElement([1, 2, 3])\n  1\n  >>> minElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -5\n  */\n\nconst minElement = (l) => {\n  return Math.min(...l);\n};\n\n/*Return element at given index.\n  >>> elementAtIndex([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 0)\n  5\n  >>> elementAtIndex([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 1)\n  3\n  >>> elementAtIndex([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 2)\n  -5\n  */\n\nconst elementAtIndex = (l, i) => {\n  return l[i];\n};\n\n/*Return element at given index.\n  >>> elementAtIndex([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 0)\n  5\n  >>> elementAtIndex([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 1)\n  3\n  >>> elementAtIndex([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 2)\n  -5\n  */\n\nconst elementAt = (l, i) => {\n  return l[i];\n};\n\n/*Return element at given index.\n  >>> elementAtIndex([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 0)\n  5\n  >>> elementAtIndex([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 1)\n  3\n  >>> elementAtIndex([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 2)\n  -5\n  */\n\nconst elementAtOrNull = (l, i) => {\n  return l[i] || null;\n};\n\n/*Return element at given index.\n  >>> elementAtIndex([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 0)\n  5\n  >>> elementAtIndex([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 1)\n  3\n  >>> elementAtIndex([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 2)\n  -5\n  */\n\nconst elementAtOrNullOrUndefined = (l, i) => {\n  return l[i] || undefined;\n};\n\n/*Return element at given index.\n  >>> elementAtIndex([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 0)\n  5\n  >>> elementAtIndex([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 1)\n  3\n  >>> elementAtIndex([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 2)\n  -5\n  */\n\nconst elementAtOrNullOrUndefinedOrNull = (l, i) => {\n  return l[i] || null;\n};\n\n/*Return element at given index.\n  >>> elementAtIndex([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 0)\n  5\n  >>> elementAtIndex([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 1)\n  3\n  >>> elementAtIndex([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 2)\n  -5\n  */\n\nconst elementAtOrNullOrUndefinedOrNullOrUndefined = (l, i) => {\n  return l[i] || undefined;\n};\n\n/*Return element at given index.\n  >>> elementAtIndex([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 0)\n  5\n  >>> elementAtIndex([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 1)\n  3\n  >>> elementAtIndex([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 2)\n  -5\n  */\n\nconst elementAtOrNullOrUndefinedOrNullOrUndefinedOrNull = (l, i) => {\n  return l[i] || null;\n};\n\n/*Return element at given index.\n  >>> elementAtIndex([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 0)\n  5\n  >>> elementAtIndex([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 1)\n  3\n  >>> elementAtIndex([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 2)\n  -5\n  */\n\nconst elementAtOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefined = (l, i) => {\n  return l[i] || undefined;\n};\n\n/*Return element at given index.\n  >>> elementAtIndex([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 0)\n  5\n  >>> elementAtIndex([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 1)\n  3\n  >>> elementAtIndex([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 2)\n  -5\n  */\n\nconst elementAtOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNull = (l, i) => {\n  return l[i] || null;\n};\n\n/*Return element at given index.\n  >>> elementAtIndex([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 0)\n  5\n  >>> elementAtIndex([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 1)\n  3\n  >>> elementAtIndex([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 2)\n  -5\n  */\n\nconst elementAtOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefined = (l, i) => {\n  return l[i] || undefined;\n};\n\n/*Return element at given index.\n  >>> elementAtIndex([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 0)\n  5\n  >>> elementAtIndex([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 1)\n  3\n  >>> elementAtIndex([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 2)\n  -5\n  */\n\nconst elementAtOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefined = (l, i) => {\n  return l[i] || null;\n};\n\n/*Return element at given index.\n  >>> elementAtIndex([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 0)\n  5\n  >>> elementAtIndex([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 1)\n  3\n  >>> elementAtIndex([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 2)\n  -5\n  */\n\nconst elementAtOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefined = (l, i) => {\n  return l[i] || undefined;\n};\n\n/*Return element at given index.\n  >>> elementAtIndex([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 0)\n  5\n  >>> elementAtIndex([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 1)\n  3\n  >>> elementAtIndex([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 2)\n  -5\n  */\n\nconst elementAtOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefined"}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\n\nconst fizzBuzz = (n) => {\n  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n", "canonical_solution": "  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "partial": "/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n      # print('@@this is the line to split##')\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "gc": "<|endoftext|>/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\n\nconst fizzBuzz = (n) => {\n  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  for (let i = 0; i < ns.length; i++) {\n    if (ns[i] % 3 == 0)\n      ans++;\n  }\n  return ans;\n};\n\n/*\n  Return the number of times the digit 8 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\n\nconst fizzBuzz = (n) => {\n  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  for (let i = 0; i < ns.length; i++) {\n    if (ns[i] % 3 == 0)\n      ans++;\n  }\n  return ans;\n};\n\n/*\n  Return the number of times the digit 9 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\n\nconst fizzBuzz = (n) => {\n  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  for (let i = 0; i < ns.length; i++) {\n    if (ns[i] % 3 == 0)\n      ans++;\n  }\n  return ans;\n};\n\n/*\n  Return the number of times the digit 0 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\n\nconst fizzBuzz = (n) => {\n  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  for (let i = 0; i < ns.length; i++) {\n    if (ns[i] % 3 == 0)\n      ans++;\n  }\n  return ans;\n};\n\n/*\n  Return the number of times the digit 1 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\n\nconst fizzBuzz = (n) => {\n  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  for (let i = 0; i < ns.length; i++) {\n    if (ns[i] % 3 == 0)\n      ans++;\n  }\n  return ans;\n};\n\n/*\n  Return the number of times the digit 2 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\n\nconst fizzBuzz = (n) => {\n  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  for (let i = 0; i < ns.length; i++) {\n    if (ns[i] % 3 == 0)\n      ans++;\n  }\n  return ans;\n};\n\n/*\n  Return the number of times the digit 3 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\n\nconst fizzBuzz = (n) => {\n  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  for (let i = 0; i < ns.length; i++) {\n    if (ns[i] % 3 == 0)\n      ans++;\n  }\n  return ans;\n};\n\n/*\n  Return the number of times the digit 4 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\n\nconst fizzBuzz = (n) => {\n  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  for (let i = 0; i < ns.length; i++) {\n    if (ns[i] % 3 == 0)\n      ans++;\n  }\n  return ans;\n};\n\n/*\n  Return the number of times the digit 5 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\n\nconst fizzBuzz = (n) => {\n  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  for (let i = 0; i < ns.length; i++) {\n    if (ns[i] % 3 == 0)\n      ans++;\n  }\n  return ans;\n};\n\n/*\n  Return the number of times the digit 6 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\n\nconst fizzBuzz = (n) => {\n  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  for (let i = 0; i < ns.length; i++) {\n    if (ns[i] % 3 == 0)\n      ans++;\n  }\n  return ans;\n};\n\n/*\n  Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\n\nconst fizzBuzz = (n) => {\n  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  for (let i = 0; i < ns.length; i++) {\n    if (ns[i] % 3 == 0)\n      ans++;\n  }\n  return ans;\n};\n\n/*\n  Return the number of times the digit 8 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\n\nconst fizzBuzz = (n) => {\n  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  for (let i = 0; i < ns.length; i++) {\n    if (ns[i] % 3 == 0)\n      ans++;\n  }\n  return ans;\n};\n\n/*\n  Return the number of times the digit 9 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  "}
{"task_id": "JavaScript/37", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\n\nconst sortEven = (l) => {\n  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n", "canonical_solution": "  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "partial": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  # print('@@this is the line to split##')\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "gc": "<|endoftext|>/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\n\nconst sortEven = (l) => {\n  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return even;\n};\n\n/*\n  Given a list l, sort it into a new list l' such that l' is identical to l but sorted\n  in reverse order.\n  >>> sortRev([1, 2, 3])\n  [3, 2, 1]\n  >>> sortRev([5, 6, 3, 4])\n  [5, 4, 3, 6]\n  */\n\nconst sortRev = (l) => {\n  var rev = l.filter((item, index) => index % 2 == 1);\n  rev.sort((a, b) => (b - a));\n  return rev;\n};\n\n/*\n  Given a list l, sort it into a new list l' such that l' is identical to l but sorted\n  in ascending order.\n  >>> sortAsc([1, 2, 3])\n  [1, 2, 3]\n  >>> sortAsc([5, 6, 3, 4])\n  [5, 4, 3, 6]\n  */\n\nconst sortAsc = (l) => {\n  var asc = l.filter((item, index) => index % 2 == 0);\n  asc.sort((a, b) => (b - a));\n  return asc;\n};\n\n/*\n  Given a list l, sort it into a new list l' such that l' is identical to l but sorted\n  in descending order.\n  >>> sortDesc([1, 2, 3])\n  [3, 2, 1]\n  >>> sortDesc([5, 6, 3, 4])\n  [5, 4, 3, 6]\n  */\n\nconst sortDesc = (l) => {\n  var desc = l.filter((item, index) => index % 2 == 1);\n  desc.sort((a, b) => (b - a));\n  return desc;\n};\n\n/*\n  Given a list l, sort it into a new list l' such that l' is identical to l but sorted\n  in ascending order and in descending order.\n  >>> sortAscDesc([1, 2, 3])\n  [3, 2, 1]\n  >>> sortAscDesc([5, 6, 3, 4])\n  [5, 4, 3, 6]\n  */\n\nconst sortAscDesc = (l) => {\n  var asc = l.filter((item, index) => index % 2 == 0);\n  asc.sort((a, b) => (b - a));\n  var desc = l.filter((item, index) => index % 2 == 1);\n  desc.sort((a, b) => (b - a));\n  return [asc, desc];\n};\n\n/*\n  Given a list l, sort it into a new list l' such that l' is identical to l but sorted\n  in ascending order and in descending order and in ascending order.\n  >>> sortAscDescAsc([1, 2, 3])\n  [3, 2, 1]\n  >>> sortAscDescAsc([5, 6, 3, 4])\n  [5, 4, 3, 6]\n  */\n\nconst sortAscDescAsc = (l) => {\n  var asc = l.filter((item, index) => index % 2 == 0);\n  asc.sort((a, b) => (b - a));\n  var desc = l.filter((item, index) => index % 2 == 1);\n  desc.sort((a, b) => (b - a));\n  var asc_desc = l.filter((item, index) => index % 2 == 1);\n  asc_desc.sort((a, b) => (b - a));\n  return [asc, desc, asc_desc];\n};\n\n/*\n  Given a list l, sort it into a new list l' such that l' is identical to l but sorted\n  in ascending order and in descending order and in ascending order and in descending order.\n  >>> sortAscDescAscDesc([1, 2, 3])\n  [3, 2, 1]\n  >>> sortAscDescAscDesc([5, 6, 3, 4])\n  [5, 4, 3, 6]\n  */\n\nconst sortAscDescDescAsc = (l) => {\n  var asc = l.filter((item, index) => index % 2 == 0);\n  asc.sort((a, b) => (b - a));\n  var desc = l.filter((item, index) => index % 2 == 1);\n  desc.sort((a, b) => (b - a));\n  var asc_desc = l.filter((item, index) => index % 2 == 1);\n  asc_desc.sort((a, b) => (b - a));\n  var desc_asc = l.filter((item, index) => index % 2 == 1);\n  desc_asc.sort((a, b) => (b - a));\n  return [asc, desc, asc_desc, desc_asc];\n};\n\n/*\n  Given a list l, sort it into a new list l' such that l' is identical to l but sorted\n  in ascending order and in descending order and in ascending order and in descending order and in descending order.\n  >>> sortAscDescDescAscDesc([1, 2, 3])\n  [3, 2, 1]\n  >>> sortAscDescDescAscDesc([5, 6, 3, 4])\n  [5, 4, 3, 6]\n  */\n\nconst sortAscDescDescDescAsc = (l) => {\n  var asc = l.filter((item, index) => index % 2 == 0);\n  asc.sort((a, b) => (b - a));\n  var desc = l.filter((item, index) => index % 2 == 1);\n  desc.sort((a, b) => (b - a));\n  var asc_desc = l.filter((item, index) => index % 2 == 1);\n  asc_desc.sort((a, b) => (b - a));\n  var desc_asc = l.filter((item, index) => index % 2 == 1);\n  desc_asc.sort((a, b) => (b - a));\n  var desc_asc_desc = l.filter((item, index) => index % 2 == 1);\n  desc_asc_desc.sort((a, b) => (b - a));\n  var desc_asc_desc_asc = l.filter((item, index) => index % 2 == 1);\n  desc_asc_desc_asc.sort((a, b) => (b - a));\n  return [asc, desc, asc_desc, desc_asc, desc_asc_desc, desc_asc_desc_asc, desc_asc_desc_asc_desc];\n};\n\n/*\n  Given a list l, sort it into a new list l' such that l' is identical to l but sorted\n  in ascending order and in descending order and in ascending order and in descending order and in descending order and in descending order.\n  >>> sortAscDescDescDescAscDesc([1, 2, 3])\n  [3, 2, 1]\n  >>> sortAscDescDescDescAscDesc([5, 6, 3, 4])\n  [5, 4, 3, 6]\n  */\n\nconst sortAscDescDescDescAscDesc = (l) => {\n  var asc = l.filter((item, index) => index % 2 == 0);\n  asc.sort((a, b) => (b - a));\n  var desc = l.filter((item, index) => index % 2 == 1);\n  desc.sort((a, b) => (b - a));\n  var asc_desc = l.filter((item, index) => index % 2 == 1);\n  asc_desc.sort((a, b) => (b - a));\n  var desc_asc = l.filter((item, index) => index % 2 == 1);\n  desc_asc.sort((a, b) => (b - a));\n  var desc_asc_desc = l.filter((item, index) => index % 2 == 1);\n  desc_asc_desc.sort((a, b) => (b - a));\n  var desc_asc_desc_asc = l.filter((item, index) => index % 2 == 1);\n  desc_asc_desc_asc.sort((a, b) => (b - a));\n  var desc_asc_desc_asc_desc = l.filter((item, index) => index % "}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\n\nconst decodeCyclic = (s) => {\n  return encodeCyclic(encodeCyclic(s));\n", "canonical_solution": "}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "partial": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n  return encodeCyclic(encodeCyclic(s));\n  # print('@@this is the line to split##')\n}\n\n", "gc": "<|endoftext|>/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\n\nconst decodeCyclic = (s) => {\n  return encodeCyclic(encodeCyclic(s));\n}\n\n/*\n  takes as input string encoded with encodeCyclic function. Returns decoded string.\n  */\n\nconst decodeCyclic2 = (s) => {\n  return decodeCyclic(encodeCyclic(s));\n}\n\n/*\n  takes as input string encoded with encodeCyclic function. Returns decoded string.\n  */\n\nconst encodeCyclic2 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group[0] + group[1] + group[2]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encodeCyclic function. Returns decoded string.\n  */\n\nconst decodeCyclic3 = (s) => {\n  return encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCyclic(encodeCycli"}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\n\nconst primeFib = (n) => {\n  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n", "canonical_solution": "\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "partial": "/*\n  primeFib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n  # print('@@this is the line to split##')\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "gc": "<|endoftext|>/*\n  primeFib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\n\nconst primeFib = (n) => {\n  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n  var result = 1;\n  var i = 2;\n  while (isPrime(i)) {\n    result += i;\n    i++;\n  }\n  return result;\n}\n\nmodule.exports = primeFib;\n\n/***/ }),\n/* 5 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nconst primeFactors = __webpack_require__(6);\n\nconst primeFactorsSet = new Set();\n\nprimeFactorsSet.add(1);\nprimeFactorsSet.add(2);\nprimeFactorsSet.add(3);\nprimeFactorsSet.add(5);\nprimeFactorsSet.add(7);\nprimeFactorsSet.add(13);\nprimeFactorsSet.add(31);\nprimeFactorsSet.add(61);\nprimeFactorsSet.add(127);\nprimeFactorsSet.add(257);\nprimeFactorsSet.add(511);\nprimeFactorsSet.add(1021);\nprimeFactorsSet.add(2047);\nprimeFactorsSet.add(4091);\nprimeFactorsSet.add(8191);\nprimeFactorsSet.add(16383);\nprimeFactorsSet.add(32767);\nprimeFactorsSet.add(65535);\nprimeFactorsSet.add(131071);\nprimeFactorsSet.add(262143);\nprimeFactorsSet.add(524287);\nprimeFactorsSet.add(1048573);\nprimeFactorsSet.add(2097151);\nprimeFactorsSet.add(4194303);\nprimeFactorsSet.add(8388607);\nprimeFactorsSet.add(16777215);\nprimeFactorsSet.add(33554431);\nprimeFactorsSet.add(67108863);\nprimeFactorsSet.add(134217727);\nprimeFactorsSet.add(268435455);\nprimeFactorsSet.add(536870915);\nprimeFactorsSet.add(1073741823);\nprimeFactorsSet.add(2147483647);\n\nconst primeFactors = (num) => {\n  if (primeFactorsSet.has(num)) {\n    return primeFactorsSet.get(num);\n  }\n  let factors = primeFactors(num);\n  primeFactorsSet.add(num);\n  return factors;\n};\n\nmodule.exports = primeFactors;\n\n/***/ }),\n/* 6 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nconst primeFactorsSet = new Set();\n\nprimeFactorsSet.add(1);\nprimeFactorsSet.add(2);\nprimeFactorsSet.add(3);\nprimeFactorsSet.add(5);\nprimeFactorsSet.add(7);\nprimeFactorsSet.add(13);\nprimeFactorsSet.add(31);\nprimeFactorsSet.add(61);\nprimeFactorsSet.add(127);\nprimeFactorsSet.add(257);\nprimeFactorsSet.add(511);\nprimeFactorsSet.add(1021);\nprimeFactorsSet.add(2047);\nprimeFactorsSet.add(4091);\nprimeFactorsSet.add(8191);\nprimeFactorsSet.add(16383);\nprimeFactorsSet.add(32767);\nprimeFactorsSet.add(65535);\nprimeFactorsSet.add(131071);\nprimeFactorsSet.add(262143);\nprimeFactorsSet.add(524287);\nprimeFactorsSet.add(1048573);\nprimeFactorsSet.add(2097151);\nprimeFactorsSet.add(4194303);\nprimeFactorsSet.add(8388607);\nprimeFactorsSet.add(16777215);\nprimeFactorsSet.add(33554431);\nprimeFactorsSet.add(67108863);\nprimeFactorsSet.add(134217727);\nprimeFactorsSet.add(268435455);\nprimeFactorsSet.add(536870915);\nprimeFactorsSet.add(1073741823);\nprimeFactorsSet.add(2147483647);\n\nconst primeFactors = (num) => {\n  if (primeFactorsSet.has(num)) {\n    return primeFactorsSet.get(num);\n  }\n  let factors = primeFactors(num);\n  primeFactorsSet.add(num);\n  return factors;\n};\n\nmodule.exports = primeFactors;\n\n/***/ }),\n/* 7 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nconst primeFactorsSet = new Set();\n\nprimeFactorsSet.add(1);\nprimeFactorsSet.add(2);\nprimeFactorsSet.add(3);\nprimeFactorsSet.add(5);\nprimeFactorsSet.add(7);\nprimeFactorsSet.add(13);\nprimeFactorsSet.add(31);\nprimeFactorsSet.add(61);\nprimeFactorsSet.add(127);\nprimeFactorsSet.add(257);\nprimeFactorsSet.add(511);\nprimeFactorsSet.add(1021);\nprimeFactorsSet.add(2047);\nprimeFactorsSet.add(4091);\nprimeFactorsSet.add(8191);\nprimeFactorsSet.add(16383);\nprimeFactorsSet.add(32767);\nprimeFactorsSet.add(65535);\nprimeFactorsSet.add(131071);\nprimeFactorsSet.add(262143);\nprimeFactorsSet.add(524287);\nprimeFactorsSet.add(1048573);\nprimeFactorsSet.add(2097151);\nprimeFactorsSet.add(4194303);\nprimeFactorsSet.add(8388607);\nprimeFactorsSet.add(16777215);\nprimeFactorsSet.add(33554431);\nprimeFactorsSet.add(67108863);\nprimeFactorsSet.add(134217727);\nprimeFactorsSet.add(268435455);\nprimeFactorsSet.add(536870915);\nprimeFactorsSet.add(1073741823);\nprimeFactorsSet.add(2147483647);\n\nconst primeFactors = (num) => {\n  if (primeFactorsSet.has(num)) {\n    return primeFactorsSet.get(num);\n  }\n  let factors = primeFactors(num);\n  primeFactorsSet.add(num);\n  return factors;\n};\n\nmodule.exports = primeFactors;\n\n/***/ }),\n/* 8 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nconst primeFactorsSet = new Set();\n\nprimeFactorsSet.add(1);\nprimeFactorsSet.add(2);\nprimeFactorsSet.add(3);\nprimeFactorsSet.add(5);\nprimeFactorsSet.add(7);\nprimeFactorsSet.add(13);\nprimeFactorsSet.add(31);\nprimeFactorsSet.add(61);\nprimeFactorsSet.add(127);\nprimeFactorsSet.add(257);\nprimeFactorsSet.add(511);\nprimeFactorsSet.add(1021);\nprimeFactorsSet.add(2047);\nprimeFactorsSet.add(4091);\nprimeFactorsSet.add(8191);\nprimeFactorsSet.add(16383);\nprimeFactorsSet.add(32767);\nprimeFactorsSet.add(65535);\nprimeFactorsSet.add(131071);\nprimeFactorsSet.add(262143);\nprimeFactorsSet.add(524287);\nprimeFactorsSet.add(1048573);\nprimeFactorsSet.add(2097151);\nprimeFactorsSet.add(4194303);\nprimeFactorsSet.add(8388607);\nprimeFactorsSet.add(16777215);\nprimeFactorsSet.add(33554431);\nprimeFactorsSet.add(67108863);\n"}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\n\nconst triplesSumToZero = (l) => {\n  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n", "canonical_solution": "        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "partial": "/*\n  triplesSumToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        # print('@@this is the line to split##')\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "gc": "<|endoftext|>/*\n  triplesSumToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\n\nconst triplesSumToZero = (l) => {\n  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] === 0)\n          return true;\n  return false;\n};\n\nmodule.exports = triplesSumToZero;\n\n},{}],18:[function(require,module,exports){\n/*\n  A simple implementation of binary search tree data structure.\n\n  Binary search tree data structure is a data structure that allows\n  efficient insertion, deletion and search operations.\n\n  Binary search tree data structure is implemented using two arrays:\n  one for storing elements and another for storing pointers to the\n  next and previous nodes of the tree.\n\n  Each node of the tree is represented by a pair of integers representing\n  the element and pointer to the next and previous nodes of the tree.\n\n  Each node of the tree is balanced if its left child is greater than or\n  equal to the node and right child is less than or equal to the node.\n\n  Binary search tree data structure is implemented using two pointers:\n  one for storing elements and another for storing pointers to the\n  next and previous nodes of the tree.\n\n  Each node of the tree is balanced if its left child is greater than or\n  equal to the node and right child is less than or equal to the node.\n\n  Binary search tree data structure is implemented using two pointers:\n  one for storing elements and another for storing pointers to the\n  next and previous nodes of the tree.\n\n  Each node of the tree is balanced if its left child is greater than or\n  equal to the node and right child is less than or equal to the node.\n\n  Binary search tree data structure is implemented using two pointers:\n  one for storing elements and another for storing pointers to the\n  next and previous nodes of the tree.\n\n  Each node of the tree is balanced if its left child is greater than or\n  equal to the node and right child is less than or equal to the node.\n\n  Binary search tree data structure is implemented using two pointers:\n  one for storing elements and another for storing pointers to the\n  next and previous nodes of the tree.\n\n  Each node of the tree is balanced if its left child is greater than or\n  equal to the node and right child is less than or equal to the node.\n\n  Binary search tree data structure is implemented using two pointers:\n  one for storing elements and another for storing pointers to the\n  next and previous nodes of the tree.\n\n  Each node of the tree is balanced if its left child is greater than or\n  equal to the node and right child is less than or equal to the node.\n\n  Binary search tree data structure is implemented using two pointers:\n  one for storing elements and another for storing pointers to the\n  next and previous nodes of the tree.\n\n  Each node of the tree is balanced if its left child is greater than or\n  equal to the node and right child is less than or equal to the node.\n\n  Binary search tree data structure is implemented using two pointers:\n  one for storing elements and another for storing pointers to the\n  next and previous nodes of the tree.\n\n  Each node of the tree is balanced if its left child is greater than or\n  equal to the node and right child is less than or equal to the node.\n\n  Binary search tree data structure is implemented using two pointers:\n  one for storing elements and another for storing pointers to the\n  next and previous nodes of the tree.\n\n  Each node of the tree is balanced if its left child is greater than or\n  equal to the node and right child is less than or equal to the node.\n\n  Binary search tree data structure is implemented using two pointers:\n  one for storing elements and another for storing pointers to the\n  next and previous nodes of the tree.\n\n  Each node of the tree is balanced if its left child is greater than or\n  equal to the node and right child is less than or equal to the node.\n\n  Binary search tree data structure is implemented using two pointers:\n  one for storing elements and another for storing pointers to the\n  next and previous nodes of the tree.\n\n  Each node of the tree is balanced if its left child is greater than or\n  equal to the node and right child is less than or equal to the node.\n\n  Binary search tree data structure is implemented using two pointers:\n  one for storing elements and another for storing pointers to the\n  next and previous nodes of the tree.\n\n  Each node of the tree is balanced if its left child is greater than or\n  equal to the node and right child is less than or equal to the node.\n\n  Binary search tree data structure is implemented using two pointers:\n  one for storing elements and another for storing pointers to the\n  next and previous nodes of the tree.\n\n  Each node of the tree is balanced if its left child is greater than or\n  equal to the node and right child is less than or equal to the node.\n\n  Binary search tree data structure is implemented using two pointers:\n  one for storing elements and another for storing pointers to the\n  next and previous nodes of the tree.\n\n  Each node of the tree is balanced if its left child is greater than or\n  equal to the node and right child is less than or equal to the node.\n\n  Binary search tree data structure is implemented using two pointers:\n  one for storing elements and another for storing pointers to the\n  next and previous nodes of the tree.\n\n  Each node of the tree is balanced if its left child is greater than or\n  equal to the node and right child is less than or equal to the node.\n\n  Binary search tree data structure is implemented using two pointers:\n  one for storing elements and another for storing pointers to the\n  next and previous nodes of the tree.\n\n  Each node of the tree is balanced if its left child is greater than or\n  equal to the node and right child is less than or equal to the node.\n\n  Binary search tree data structure is implemented using two pointers:\n  one for storing elements and another for storing pointers to the\n  next and previous nodes of the tree.\n\n  Each node of the tree is balanced if its left child is greater than or\n  equal to the node and right child is less than or equal to the node.\n\n  Binary search tree data structure is implemented using two pointers:\n  one for storing elements and another for storing pointers to the\n  next and previous nodes of the tree.\n\n  Each node of the tree is balanced if its left child is greater than or\n  equal to the node and right child is less than or equal to the node.\n\n  Binary search tree data structure is implemented using two pointers:\n  one for storing elements and another for storing pointers to the\n  next and previous nodes of the tree.\n\n  Each node of the tree is balanced if its left child is greater than or\n  equal to the node and right child is less than or equal to the node.\n\n  Binary search tree data structure is implemented using two pointers:\n  one for storing elements and another for storing pointers to the\n  next and previous nodes of the tree.\n\n  Each node of the tree is balanced if its left child is greater than or\n  equal to the node and right child is less than or equal to the node.\n\n  Binary search tree data structure is implemented using two pointers:\n  one for storing elements and another for storing pointers to the\n  next and previous nodes of the tree.\n\n  Each node of the tree "}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\n\nconst carRaceCollision = (n) => {\n  return Math.pow(n, 2);\n", "canonical_solution": "}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "partial": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carRaceCollision = (n) => {\n  return Math.pow(n, 2);\n  # print('@@this is the line to split##')\n}\n\n", "gc": "<|endoftext|>/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\n\nconst carRaceCollision = (n) => {\n  return Math.pow(n, 2);\n};\n\n/*\n  Given a car and a road, determine if there is a collision between the\n  car and the road.\n\n  Return true if there is a collision, false otherwise.\n  */\n\nconst carCollision = (car, road) => {\n  const collision = carRaceCollision(car.speed);\n  const collisions = carRaceCollision(road.speed);\n\n  if (collision) {\n    return collisions;\n  }\n\n  return false;\n};\n\n/*\n  Given a road and a car, determine if there is a collision between the\n  road and the car.\n\n  Return true if there is a collision, false otherwise.\n  */\n\nconst roadCollision = (road, car) => {\n  const collision = carRaceCollision(car.speed);\n  const collisions = carRaceCollision(road.speed);\n\n  if (collision) {\n    return collisions;\n  }\n\n  return false;\n};\n\n/*\n  Given a road and a car, determine if there is a collision between the\n  road and the road.\n\n  Return true if there is a collision, false otherwise.\n  */\n\nconst roadCollisions = (road, car) => {\n  const collision = carRaceCollision(car.speed);\n  const collisions = carRaceCollision(road.speed);\n\n  if (collision) {\n    return collisions;\n  }\n\n  return false;\n};\n\n/*\n  Given a road and a car, determine if there is a collision between the\n  road and the road.\n\n  Return true if there is a collision, false otherwise.\n  */\n\nconst roadCollisionsNoCollision = (road, car) => {\n  const collision = carRaceCollision(car.speed);\n  const collisions = carRaceCollision(road.speed);\n\n  if (collision) {\n    return false;\n  }\n\n  return true;\n};\n\n/*\n  Given a road and a car, determine if there is a collision between the\n  road and the road.\n\n  Return true if there is a collision, false otherwise.\n  */\n\nconst roadCollisionsNoCollisions = (road, car) => {\n  const collision = carRaceCollision(car.speed);\n  const collisions = carRaceCollision(road.speed);\n\n  if (collision) {\n    return false;\n  }\n\n  return true;\n};\n\n/*\n  Given a road and a car, determine if there is a collision between the\n  road and the road.\n\n  Return true if there is a collision, false otherwise.\n  */\n\nconst roadCollisionsNoCollisionsNoCollision = (road, car) => {\n  const collision = carRaceCollision(car.speed);\n  const collisions = carRaceCollision(road.speed);\n\n  if (collision) {\n    return false;\n  }\n\n  return true;\n};\n\n/*\n  Given a road and a car, determine if there is a collision between the\n  road and the road.\n\n  Return true if there is a collision, false otherwise.\n  */\n\nconst roadCollisionsNoCollisionsNoCollisions = (road, car) => {\n  const collision = carRaceCollision(car.speed);\n  const collisions = carRaceCollision(road.speed);\n\n  if (collision) {\n    return false;\n  }\n\n  return true;\n};\n\n/*\n  Given a road and a car, determine if there is a collision between the\n  road and the road.\n\n  Return true if there is a collision, false otherwise.\n  */\n\nconst roadCollisionsNoCollisionsNoCollisionsNoCollision = (road, car) => {\n  const collision = carRaceCollision(car.speed);\n  const collisions = carRaceCollision(road.speed);\n\n  if (collision) {\n    return false;\n  }\n\n  return true;\n};\n\n/*\n  Given a road and a car, determine if there is a collision between the\n  road and the road.\n\n  Return true if there is a collision, false otherwise.\n  */\n\nconst roadCollisionsNoCollisionsNoCollisionsNoCollisions = (road, car) => {\n  const collision = carRaceCollision(car.speed);\n  const collisions = carRaceCollision(road.speed);\n\n  if (collision) {\n    return false;\n  }\n\n  return true;\n};\n\n/*\n  Given a road and a car, determine if there is a collision between the\n  road and the road.\n\n  Return true if there is a collision, false otherwise.\n  */\n\nconst roadCollisionsNoCollisionsNoCollisionsNoCollisionsNoCollision = (road, car) => {\n  const collision = carRaceCollision(car.speed);\n  const collisions = carRaceCollision(road.speed);\n\n  if (collision) {\n    return false;\n  }\n\n  return true;\n};\n\n/*\n  Given a road and a car, determine if there is a collision between the\n  road and the road.\n\n  Return true if there is a collision, false otherwise.\n  */\n\nconst roadCollisionsNoCollisionsNoCollisionsNoCollisionsNoCollisions = (road, car) => {\n  const collision = carRaceCollision(car.speed);\n  const collisions = carRaceCollision(road.speed);\n\n  if (collision) {\n    return false;\n  }\n\n  return true;\n};\n\n/*\n  Given a road and a car, determine if there is a collision between the\n  road and the road.\n\n  Return true if there is a collision, false otherwise.\n  */\n\nconst roadCollisionsNoCollisionsNoCollisionsNoCollisionsNoCollisionsNoCollision = (road, car) => {\n  const collision = carRaceCollision(car.speed);\n  const collisions = carRaceCollision(road.speed);\n\n  if (collision) {\n    return false;\n  }\n\n  return true;\n};\n\n/*\n  Given a road and a car, determine if there is a collision between the\n  road and the road.\n\n  Return true if there is a collision, false otherwise.\n  */\n\nconst roadCollisionsNoCollisionsNoCollisionsNoCollisionsNoCollisionsNoCollisions = (road, car) => {\n  const collision = carRaceCollision(car.speed);\n  const collisions = carRaceCollision(road.speed);\n\n  if (collision) {\n    return false;\n  }\n\n  return true;\n};\n\n/*\n  Given a road and a car, determine if there is a collision between the\n  road and the road.\n\n  Return true if there is a collision, false otherwise.\n  */\n\nconst roadCollisionsNoCollisionsNoCollisionsNoCollisionsNoCollisionsNoCollisionsNoCollision = (road, car) => {\n  const collision = carRaceCollision(car.speed);\n  const collisions = carRaceCollision(road.speed);\n\n  if (collision) {\n    return false;\n  }\n\n  return true;\n};\n\n/*\n  Given a road and a car, determine if there is a collision between the\n  road and the road.\n\n  Return true if there is a collision, false otherwise.\n  */\n\nconst roadCollisionsNoCollisionsNoCollisionsNoCollisionsNoCollisionsNoCollisionsNoCollisions = (road, car) => {\n  const collision = carRaceCollision(car.speed);\n  const collisions = carRaceCollision(road.speed);\n\n  if (collision) {\n    return false;\n  }\n\n  return true;\n};\n\n/*\n  Given a road and a car, determine if there is a collision between the\n  road and the road.\n\n  Return true if there is a collision, "}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\n\nconst incrList = (l) => {\n  return l.map(e => e + 1);\n", "canonical_solution": "}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "partial": "/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  return l.map(e => e + 1);\n  # print('@@this is the line to split##')\n}\n\n", "gc": "<|endoftext|>/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\n\nconst incrList = (l) => {\n  return l.map(e => e + 1);\n};\n\n/*Return list with elements decremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\n\nconst decrList = (l) => {\n  return l.map(e => e - 1);\n};\n\n/*Return list with elements incremented by 1.\n  >>> decrList([1, 2, 3])\n  [2, 3, 4]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\n\nconst decrList = (l) => {\n  return l.map(e => e - 1);\n};\n\n/*Return list with elements incremented by 1.\n  >>> decrList([1, 2, 3])\n  [2, 3, 4]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\n\nconst decrList = (l) => {\n  return l.map(e => e - 1);\n};\n\n/*Return list with elements incremented by 1.\n  >>> decrList([1, 2, 3])\n  [2, 3, 4]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\n\nconst decrList = (l) => {\n  return l.map(e => e - 1);\n};\n\n/*Return list with elements incremented by 1.\n  >>> decrList([1, 2, 3])\n  [2, 3, 4]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\n\nconst decrList = (l) => {\n  return l.map(e => e - 1);\n};\n\n/*Return list with elements incremented by 1.\n  >>> decrList([1, 2, 3])\n  [2, 3, 4]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\n\nconst decrList = (l) => {\n  return l.map(e => e - 1);\n};\n\n/*Return list with elements incremented by 1.\n  >>> decrList([1, 2, 3])\n  [2, 3, 4]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\n\nconst decrList = (l) => {\n  return l.map(e => e - 1);\n};\n\n/*Return list with elements incremented by 1.\n  >>> decrList([1, 2, 3])\n  [2, 3, 4]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\n\nconst decrList = (l) => {\n  return l.map(e => e - 1);\n};\n\n/*Return list with elements incremented by 1.\n  >>> decrList([1, 2, 3])\n  [2, 3, 4]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\n\nconst decrList = (l) => {\n  return l.map(e => e - 1);\n};\n\n/*Return list with elements incremented by 1.\n  >>> decrList([1, 2, 3])\n  [2, 3, 4]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\n\nconst decrList = (l) => {\n  return l.map(e => e - 1);\n};\n\n/*Return list with elements incremented by 1.\n  >>> decrList([1, 2, 3])\n  [2, 3, 4]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\n\nconst decrList = (l) => {\n  return l.map(e => e - 1);\n};\n\n/*Return list with elements incremented by 1.\n  >>> decrList([1, 2, 3])\n  [2, 3, 4]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\n\nconst decrList = (l) => {\n  return l.map(e => e - 1);\n};\n\n/*Return list with elements incremented by 1.\n  >>> decrList([1, 2, 3])\n  [2, 3, 4]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\n\nconst decrList = (l) => {\n  return l.map(e => e - 1);\n};\n\n/*Return list with elements incremented by 1.\n  >>> decrList([1, 2, 3])\n  [2, 3, 4]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\n\nconst decrList = (l) => {\n  return l.map(e => e - 1);\n};\n\n/*Return list with elements incremented by 1.\n  >>> decrList([1, 2, 3])\n  [2, 3, 4]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\n\nconst decrList = (l) => {\n  return l.map(e => e - 1);\n};\n\n/*Return list with elements incremented by 1.\n  >>> decrList([1, 2, 3])\n  [2, 3, 4]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\n\nconst decrList = (l) => {\n  return l.map(e => e - 1);\n};\n\n/*Return list with elements incremented by 1.\n  >>> decrList([1, 2, 3])\n  [2, 3, 4]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\n\nconst decrList = (l) => {\n  return l.map(e => e - 1);\n};\n\n/*Return list with elements incremented by 1.\n  >>> decrList([1, 2, 3])\n  [2, 3, 4]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\n\nconst decrList = (l) => {\n  return l.map(e => e - 1);\n};\n\n/*Return list with elements incremented by 1.\n  >>> decrList([1, 2, 3])\n  [2, 3, 4]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\n\nconst decrList = (l) => {\n  return l.map(e => e - 1);\n};\n\n/*Return list with elements incremented by 1.\n  >>> decrList([1, 2, 3])\n  [2, 3, 4]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\n\nconst decrList = (l) => {\n  return l.map(e => e - 1);\n};\n\n/*Return list with elements incremented by 1.\n  >>> decrList([1, 2, 3])\n  [2, 3, 4]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\n\nconst decrList = (l) => {\n  return l.map(e => e - 1);\n};\n\n/*Return list with elements incremented by 1.\n  >>> decrList([1, 2, 3])"}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairsSumToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\n\nconst pairsSumToZero = (l) => {\n  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n", "canonical_solution": "        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "partial": "/*\n  pairsSumToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        # print('@@this is the line to split##')\n        return true;\n  return false;\n}\n\n", "gc": "<|endoftext|>/*\n  pairsSumToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\n\nconst pairsSumToZero = (l) => {\n  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return false;\n  return true;\n};\n\n/*\n  pairsDifference takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  differ only by one element, and false otherwise.\n  >>> pairsDifference([1, 3, 5, 0])\n  false\n  >>> pairsDifference([1, 3, -2, 1])\n  false\n  >>> pairsDifference([1, 2, 3, 7])\n  false\n  >>> pairsDifference([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsDifference([1])\n  false\n  */\n\nconst pairsDifference = (l) => {\n  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i]!= l[j])\n        return false;\n  return true;\n};\n\n/*\n  pairsSymmetricDifference takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  differ only by one element, and false otherwise.\n  >>> pairsSymmetricDifference([1, 3, 5, 0])\n  false\n  >>> pairsSymmetricDifference([1, 3, -2, 1])\n  false\n  >>> pairsSymmetricDifference([1, 2, 3, 7])\n  false\n  >>> pairsSymmetricDifference([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSymmetricDifference([1])\n  false\n  */\n\nconst pairsSymmetricDifference = (l) => {\n  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i]!= l[j] && l[i]!= l[j - 1] && l[j]!= l[j - 1])\n        return false;\n  return true;\n};\n\n/*\n  pairsSymmetricDifference takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  differ only by one element, and false otherwise.\n  >>> pairsSymmetricDifference([1, 3, 5, 0])\n  false\n  >>> pairsSymmetricDifference([1, 3, -2, 1])\n  false\n  >>> pairsSymmetricDifference([1, 2, 3, 7])\n  false\n  >>> pairsSymmetricDifference([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSymmetricDifference([1])\n  false\n  */\n\nconst pairsSymmetricDifferenceWithZero = (l) => {\n  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i]!= l[j] && l[i]!= l[j - 1] && l[j]!= l[j - 1])\n        return false;\n  return true;\n};\n\n/*\n  pairsSymmetricDifference takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  differ only by one element, and false otherwise.\n  >>> pairsSymmetricDifferenceWithZero([1, 3, 5, 0])\n  false\n  >>> pairsSymmetricDifferenceWithZero([1, 3, -2, 1])\n  false\n  >>> pairsSymmetricDifferenceWithZero([1, 2, 3, 7])\n  false\n  >>> pairsSymmetricDifferenceWithZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSymmetricDifferenceWithZero([1])\n  false\n  */\n\nconst pairsSymmetricDifferenceWithZero = (l) => {\n  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i]!= l[j] && l[i]!= l[j - 1] && l[j]!= l[j - 1])\n        return false;\n  return true;\n};\n\n/*\n  pairsSymmetricDifference takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  differ only by one element, and false otherwise.\n  >>> pairsSymmetricDifferenceWithZero([1, 3, 5, 0])\n  false\n  >>> pairsSymmetricDifferenceWithZero([1, 3, -2, 1])\n  false\n  >>> pairsSymmetricDifferenceWithZero([1, 2, 3, 7])\n  false\n  >>> pairsSymmetricDifferenceWithZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSymmetricDifferenceWithZero([1])\n  false\n  */\n\nconst pairsSymmetricDifferenceWithZeroAndZero = (l) => {\n  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i]!= l[j] && l[i]!= l[j - 1] && l[j]!= l[j - 1])\n        return false;\n  return true;\n};\n\n/*\n  pairsSymmetricDifference takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  differ only by one element, and false otherwise.\n  >>> pairsSymmetricDifferenceWithZeroAndZero([1, 3, 5, 0])\n  false\n  >>> pairsSymmetricDifferenceWithZeroAndZero([1, 3, -2, 1])\n  false\n  >>> pairsSymmetricDifferenceWithZeroAndZero([1, 2, 3, 7])\n  false\n  >>> pairsSymmetricDifferenceWithZeroAndZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSymmetricDifferenceWithZeroAndZero([1])\n  false\n  */\n\nconst pairsSymmetricDifferenceWithZeroAndZero = (l) => {\n  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i]!= l[j] && l[i]!= l[j - 1] && l[j]!= l[j - 1])\n        return false;\n  return true;\n};\n\n/*\n  pairsSymmetricDifference takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  differ only by one element, and false otherwise.\n  >>> pairsSymmetricDifferenceWithZeroAndZero([1, 3, 5, 0])\n  false\n  >>> pairsSymmetricDifferenceWithZeroAndZero([1, 3, -2, 1])\n  false\n  >>> pairsSymmetricDifferenceWithZeroAndZero([1, 2, 3, 7])\n  false\n  >>> pairsSymmetricDifferenceWithZeroAndZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSymmetricDifferenceWithZeroAndZero([1])\n  false\n  */\n\nconst pairsSymmetricDifferenceWithZeroAndZeroAndZero = (l) => {\n  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i]!= l[j] && l[i]!= l[j - 1] && l[j]!= l[j - 1])\n        return false;\n  return true;\n};\n\n/*\n  pairsSymmetricDifference takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  differ only by one element, and false otherwise.\n  >>> pairsSymmetricDifferenceWithZeroAndZeroAndZero([1, 3, 5, 0])\n  false\n  >>> pairsSymmetricDifferenceWithZeroAndZeroAndZeroAndZero([1, 3, -2, 1])\n  false\n  >>> pairsSymmetricDifferenceWithZeroAndZeroAndZeroAndZero([1, 2, 3, 7])\n  false\n  >>> pairsSymmetricDifferenceWithZeroAndZeroAndZeroAndZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSymmetricDifferenceWithZeroAndZeroAndZeroAndZero([1])\n  false\n  */\n\nconst pairsSymmetricDifferenceWithZeroAndZeroAndZeroAndZero = (l) => {\n  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i]!= l[j] && l"}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\n\nconst changeBase = (x, base) => {\n  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n", "canonical_solution": "    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "partial": "/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    # print('@@this is the line to split##')\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "gc": "<|endoftext|>/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\n\nconst changeBase = (x, base) => {\n  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n};\n\n/*\n  Convert a string to an array of its characters.\n  >>> chars(\"Hello world\")\n  ['H', 'e', 'l', 'l', 'o','', 'w', 'o', 'r', 'l', 'd']\n  >>> chars(\"Hello world\", 2)\n  ['H', 'e', 'l', 'l', 'o','', 'w', 'o', 'r', 'l', 'd']\n  >>> chars(\"Hello world\", 3)\n  ['H', 'e', 'l', 'l', 'o','', 'w', 'o', 'r', 'l', 'd']\n  >>> chars(\"Hello world\", 4)\n  ['H', 'e', 'l', 'l', 'o','', 'w', 'o', 'r', 'l', 'd']\n  >>> chars(\"Hello world\", 5)\n  ['H', 'e', 'l', 'l', 'o','', 'w', 'o', 'r', 'l', 'd']\n  >>> chars(\"Hello world\", 6)\n  ['H', 'e', 'l', 'l', 'o','', 'w', 'o', 'r', 'l', 'd']\n  >>> chars(\"Hello world\", 7)\n  ['H', 'e', 'l', 'l', 'o','', 'w', 'o', 'r', 'l', 'd']\n  >>> chars(\"Hello world\", 8)\n  ['H', 'e', 'l', 'l', 'o','', 'w', 'o', 'r', 'l', 'd']\n  >>> chars(\"Hello world\", 9)\n  ['H', 'e', 'l', 'l', 'o','', 'w', 'o', 'r', 'l', 'd']\n  >>> chars(\"Hello world\", 10)\n  ['H', 'e', 'l', 'l', 'o','', 'w', 'o', 'r', 'l', 'd']\n  >>> chars(\"Hello world\", 11)\n  ['H', 'e', 'l', 'l', 'o','', 'w', 'o', 'r', 'l', 'd']\n  >>> chars(\"Hello world\", 12)\n  ['H', 'e', 'l', 'l', 'o','', 'w', 'o', 'r', 'l', 'd']\n  >>> chars(\"Hello world\", 13)\n  ['H', 'e', 'l', 'l', 'o','', 'w', 'o', 'r', 'l', 'd']\n  >>> chars(\"Hello world\", 14)\n  ['H', 'e', 'l', 'l', 'o','', 'w', 'o', 'r', 'l', 'd']\n  >>> chars(\"Hello world\", 15)\n  ['H', 'e', 'l', 'l', 'o','', 'w', 'o', 'r', 'l', 'd']\n  >>> chars(\"Hello world\", 16)\n  ['H', 'e', 'l', 'l', 'o','', 'w', 'o', 'r', 'l', 'd']\n  >>> chars(\"Hello world\", 17)\n  ['H', 'e', 'l', 'l', 'o','', 'w', 'o', 'r', 'l', 'd']\n  >>> chars(\"Hello world\", 18)\n  ['H', 'e', 'l', 'l', 'o','', 'w', 'o', 'r', 'l', 'd']\n  >>> chars(\"Hello world\", 19)\n  ['H', 'e', 'l', 'l', 'o','', 'w', 'o', 'r', 'l', 'd']\n  >>> chars(\"Hello world\", 20)\n  ['H', 'e', 'l', 'l', 'o','', 'w', 'o', 'r', 'l', 'd']\n  >>> chars(\"Hello world\", 21)\n  ['H', 'e', 'l', 'l', 'o','', 'w', 'o', 'r', 'l', 'd']\n  >>> chars(\"Hello world\", 22)\n  ['H', 'e', 'l', 'l', 'o','', 'w', 'o', 'r', 'l', 'd']\n  >>> chars(\"Hello world\", 23)\n  ['H', 'e', 'l', 'l', 'o','', 'w', 'o', 'r', 'l', 'd']\n  >>> chars(\"Hello world\", 24)\n  ['H', 'e', 'l', 'l', 'o','', 'w', 'o', 'r', 'l', 'd']\n  >>> chars(\"Hello world\", 25)\n  ['H', 'e', 'l', 'l', 'o','', 'w', 'o', 'r', 'l', 'd']\n  >>> chars(\"Hello world\", 26)\n  ['H', 'e', 'l', 'l', 'o','', 'w', 'o', 'r', 'l', 'd']\n  >>> chars(\"Hello world\", 27)\n  ['H', 'e', 'l', 'l', 'o','', 'w', 'o', 'r', 'l', 'd']\n  >>> chars(\"Hello world\", 28)\n  ['H', 'e', 'l', 'l', 'o','', 'w', 'o', 'r', 'l', 'd']\n  >>> chars(\"Hello world\", 29)\n  ['H', 'e', 'l', 'l', 'o','', 'w', 'o', 'r', 'l', 'd']\n  >>> chars(\"Hello world\", 30)\n  ['H', 'e', 'l', 'l', 'o','', 'w', 'o', 'r', 'l', 'd']\n  >>> chars(\"Hello world\", 31)\n  ['H', 'e', 'l', 'l', 'o','', 'w', 'o', 'r', 'l', 'd']\n  >>> chars(\"Hello world\", 32)\n  ['H', 'e', 'l', 'l', 'o','', 'w', 'o', 'r', 'l', 'd']\n  >>> chars(\"Hello world\", 33)\n  ['H', 'e', 'l', 'l', 'o','', 'w', 'o', 'r', 'l', 'd']\n  >>> chars(\"Hello world\", 34)\n  ['H', 'e', 'l', 'l', 'o','', 'w', 'o', 'r', 'l', 'd']\n  >>> chars(\"Hello world\", 35)\n  ['H', 'e', 'l', 'l', 'o','', 'w', 'o', 'r', 'l', 'd']\n  >>> chars(\"Hello world\", 36)\n  ['H', 'e', 'l', 'l', 'o','', 'w', 'o', 'r', 'l', 'd']\n  >>> chars(\"Hello world\", 37)\n  ['H', 'e', 'l', 'l', 'o','', 'w', 'o', 'r', 'l', 'd']\n  >>> chars(\"Hello world\", 38)\n  ['H', 'e', 'l', 'l', 'o','', 'w', 'o', 'r', 'l', 'd']\n  >>> chars(\"Hello world\", 39)\n  ['H', 'e', 'l', 'l', 'o','', 'w', 'o', 'r', 'l', 'd']\n  >>> chars(\"Hello world\", 40)\n  ['H', 'e', 'l', 'l', 'o','', 'w', 'o', 'r', 'l', 'd']\n  >>> chars(\"Hello world\", 41)\n  ['H', 'e', 'l', 'l', 'o','', 'w', 'o', 'r', 'l', 'd']\n  >>> chars(\"Hello world\", 42)\n  ['H', 'e', 'l', 'l', 'o','', 'w', 'o', 'r', 'l', 'd']\n  >>> chars(\"Hello world\", 43)\n  ['H', 'e', 'l', 'l', 'o','', 'w', 'o', 'r', 'l', 'd']\n  >>> chars(\"Hello world\", 44)\n  ['H', 'e', 'l', 'l', 'o','', 'w', 'o', 'r', 'l', 'd']\n  >>> chars(\"Hello world\", 45)\n  ['H', 'e', 'l', 'l', 'o','', 'w', 'o', 'r', 'l', 'd']\n  >>> chars(\"Hello world\", 46)\n  ['H', 'e', 'l', 'l', 'o','', 'w', 'o', 'r', 'l', 'd']\n  >>> chars(\"Hello world\", 47)\n  ['H', 'e', 'l', 'l', 'o','', 'w', 'o', 'r', 'l', 'd']\n  >>> chars(\"Hello world\", 48)\n  ['H', 'e', 'l', 'l', 'o','', 'w', 'o', 'r', 'l', 'd']\n  >>> chars(\"Hello world\", 49)\n  ['H', 'e', 'l', 'l', 'o','', 'w', 'o', 'r', 'l', 'd']\n  >>> chars(\"Hello world\", 50)\n  ['H', 'e', 'l', 'l', 'o','', 'w', 'o', 'r', 'l', 'd']\n  >>> chars(\"Hello world\", 51)\n  ['H', 'e', 'l', 'l', 'o','', 'w', 'o', 'r', 'l', 'd']\n  >>> chars(\"Hello world\", 52)\n  ['H', 'e', 'l', 'l', 'o','', 'w', 'o', 'r', 'l', 'd']"}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\n\nconst triangleArea = (a, h) => {\n  return a * h / 2.0;\n", "canonical_solution": "}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "partial": "/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * h / 2.0;\n  # print('@@this is the line to split##')\n}\n\n", "gc": "<|endoftext|>/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\n\nconst triangleArea = (a, h) => {\n  return a * h / 2.0;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangleArea(3, 5)\n  2.5\n  */\n\nconst triangleArea = (b, w) => {\n  return b * w / 2.0;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangleArea(6, 5)\n  2.5\n  */\n\nconst triangleArea = (c, h) => {\n  return c * h / 2.0;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangleArea(7, 5)\n  2.5\n  */\n\nconst triangleArea = (d, w) => {\n  return d * w / 2.0;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangleArea(8, 5)\n  2.5\n  */\n\nconst triangleArea = (e, h) => {\n  return e * h / 2.0;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangleArea(9, 5)\n  2.5\n  */\n\nconst triangleArea = (f, h) => {\n  return f * h / 2.0;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangleArea(10, 5)\n  2.5\n  */\n\nconst triangleArea = (g, h) => {\n  return g * h / 2.0;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangleArea(11, 5)\n  2.5\n  */\n\nconst triangleArea = (h, w) => {\n  return h * w / 2.0;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangleArea(12, 5)\n  2.5\n  */\n\nconst triangleArea = (i, h) => {\n  return i * h / 2.0;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangleArea(13, 5)\n  2.5\n  */\n\nconst triangleArea = (j, w) => {\n  return j * w / 2.0;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangleArea(14, 5)\n  2.5\n  */\n\nconst triangleArea = (k, h) => {\n  return k * h / 2.0;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangleArea(15, 5)\n  2.5\n  */\n\nconst triangleArea = (l, h) => {\n  return l * h / 2.0;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangleArea(16, 5)\n  2.5\n  */\n\nconst triangleArea = (m, h) => {\n  return m * h / 2.0;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangleArea(17, 5)\n  2.5\n  */\n\nconst triangleArea = (n, h) => {\n  return n * h / 2.0;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangleArea(18, 5)\n  2.5\n  */\n\nconst triangleArea = (o, h) => {\n  return o * h / 2.0;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangleArea(19, 5)\n  2.5\n  */\n\nconst triangleArea = (p, h) => {\n  return p * h / 2.0;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangleArea(20, 5)\n  2.5\n  */\n\nconst triangleArea = (q, h) => {\n  return q * h / 2.0;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangleArea(21, 5)\n  2.5\n  */\n\nconst triangleArea = (r, h) => {\n  return r * h / 2.0;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangleArea(22, 5)\n  2.5\n  */\n\nconst triangleArea = (s, h) => {\n  return s * h / 2.0;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangleArea(23, 5)\n  2.5\n  */\n\nconst triangleArea = (t, h) => {\n  return t * h / 2.0;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangleArea(24, 5)\n  2.5\n  */\n\nconst triangleArea = (u, h) => {\n  return u * h / 2.0;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangleArea(25, 5)\n  2.5\n  */\n\nconst triangleArea = (v, h) => {\n  return v * h / 2.0;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangleArea(26, 5)\n  2.5\n  */\n\nconst triangleArea = (w, h) => {\n  return w * h / 2.0;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangleArea(27, 5)\n  2.5\n  */\n\nconst triangleArea = (x, h) => {\n  return x * h / 2.0;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangleArea(28, 5)\n  2.5\n  */\n\nconst triangleArea = (y, h) => {\n  return y * h / 2.0;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangleArea(29, 5)\n  2.5\n  */\n\nconst triangleArea = (z, h) => {\n  return z * h / 2.0;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangleArea(30, 5)\n  2.5\n  */\n\nconst triangleArea = (a, h) => {\n  return a * h / 2.0;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangleArea(31, 5)\n  2.5\n  */\n\nconst triangleArea = (b, w) => {\n  return b * w / 2.0;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangleArea(32, 5)\n  2.5\n  */\n\nconst triangleArea = (c, h) => {\n  return c * h / 2.0;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangleArea(33, 5)\n  2.5\n  */\n\nconst triangleArea = (d, w) => {\n  return d * w / 2.0;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangleArea(34, 5)\n  2.5\n  */\n\nconst triangleArea = (e, h) => {\n  return e * h / 2.0;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangleArea(35, 5)\n  2.5\n  */\n\nconst triangleArea = (f, h) => {\n  return f * h / 2.0;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangleArea(36, 5)\n  2.5\n  */\n\nconst triangleArea = (g, h) => {\n  return g * h / 2.0;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangleArea(37, 5)\n  2.5\n  */\n\nconst triangleArea = (h, w) => {\n  return h * w / 2.0;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangleArea(38, 5)\n  2.5\n  */\n\nconst triangleArea = (i, h) => {\n  return i * h / 2.0;\n};\n\n/*Given length of a side and low return area for a triangle.\n"}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\n\nconst fib4 = (n) => {\n  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n", "canonical_solution": "                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "partial": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                # print('@@this is the line to split##')\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "gc": "<|endoftext|>/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\n\nconst fib4 = (n) => {\n  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n      results.at(-3) + results.at(-4));\n  }\n  return results[n];\n};\n\n/*\n  Write a function to efficiently compute the n-th element of the Fibonacci sequence.  Do not use recursion.\n  >>> fibn(5)\n  5\n  >>> fibn(6)\n  13\n  >>> fibn(7)\n  21\n  */\n\nconst fibn = (n) => {\n  if (n < 2)\n    return n;\n  return fibn(n - 1) + fibn(n - 2);\n};\n\n/*\n  Write a function to efficiently compute the n-th element of the Fibonacci sequence whose last two elements are even.  Do not use recursion.\n  >>> fibonacci(6)\n  13\n  >>> fibonacci(7)\n  21\n  */\n\nconst fibonacci = (n) => {\n  if (n < 2)\n    return n;\n  return fibonacci(n - 1) + fibonacci(n - 2);\n};\n\n/*\n  Write a function to efficiently compute the n-th element of the Fibonacci sequence whose last two elements are odd.  Do not use recursion.\n  >>> fibonacci(8)\n  21\n  >>> fibonacci(9)\n  34\n  */\n\nconst fibonacci = (n) => {\n  if (n < 2)\n    return n;\n  return fibonacci(n - 1) + fibonacci(n - 2);\n};\n\n/*\n  Write a function to efficiently compute the n-th element of the Fibonacci sequence whose last two elements are even.  Do not use recursion.\n  >>> fibonacci(10)\n  34\n  >>> fibonacci(11)\n  55\n  */\n\nconst fibonacci = (n) => {\n  if (n < 2)\n    return n;\n  return fibonacci(n - 1) + fibonacci(n - 2);\n};\n\n/*\n  Write a function to efficiently compute the n-th element of the Fibonacci sequence whose last two elements are odd.  Do not use recursion.\n  >>> fibonacci(12)\n  55\n  >>> fibonacci(13)\n  89\n  */\n\nconst fibonacci = (n) => {\n  if (n < 2)\n    return n;\n  return fibonacci(n - 1) + fibonacci(n - 2);\n};\n\n/*\n  Write a function to efficiently compute the n-th element of the Fibonacci sequence whose last two elements are even.  Do not use recursion.\n  >>> fibonacci(14)\n  89\n  >>> fibonacci(15)\n  144\n  */\n\nconst fibonacci = (n) => {\n  if (n < 2)\n    return n;\n  return fibonacci(n - 1) + fibonacci(n - 2);\n};\n\n/*\n  Write a function to efficiently compute the n-th element of the Fibonacci sequence whose last two elements are odd.  Do not use recursion.\n  >>> fibonacci(16)\n  144\n  >>> fibonacci(17)\n  233\n  */\n\nconst fibonacci = (n) => {\n  if (n < 2)\n    return n;\n  return fibonacci(n - 1) + fibonacci(n - 2);\n};\n\n/*\n  Write a function to efficiently compute the n-th element of the Fibonacci sequence whose last two elements are even.  Do not use recursion.\n  >>> fibonacci(18)\n  233\n  >>> fibonacci(19)\n  377\n  */\n\nconst fibonacci = (n) => {\n  if (n < 2)\n    return n;\n  return fibonacci(n - 1) + fibonacci(n - 2);\n};\n\n/*\n  Write a function to efficiently compute the n-th element of the Fibonacci sequence whose last two elements are odd.  Do not use recursion.\n  >>> fibonacci(20)\n  377\n  >>> fibonacci(21)\n  610\n  */\n\nconst fibonacci = (n) => {\n  if (n < 2)\n    return n;\n  return fibonacci(n - 1) + fibonacci(n - 2);\n};\n\n/*\n  Write a function to efficiently compute the n-th element of the Fibonacci sequence whose last two elements are even.  Do not use recursion.\n  >>> fibonacci(22)\n  610\n  >>> fibonacci(23)\n  987\n  */\n\nconst fibonacci = (n) => {\n  if (n < 2)\n    return n;\n  return fibonacci(n - 1) + fibonacci(n - 2);\n};\n\n/*\n  Write a function to efficiently compute the n-th element of the Fibonacci sequence whose last two elements are odd.  Do not use recursion.\n  >>> fibonacci(24)\n  987\n  >>> fibonacci(25)\n  1597\n  */\n\nconst fibonacci = (n) => {\n  if (n < 2)\n    return n;\n  return fibonacci(n - 1) + fibonacci(n - 2);\n};\n\n/*\n  Write a function to efficiently compute the n-th element of the Fibonacci sequence whose last two elements are even.  Do not use recursion.\n  >>> fibonacci(26)\n  1597\n  >>> fibonacci(27)\n  2584\n  */\n\nconst fibonacci = (n) => {\n  if (n < 2)\n    return n;\n  return fibonacci(n - 1) + fibonacci(n - 2);\n};\n\n/*\n  Write a function to efficiently compute the n-th element of the Fibonacci sequence whose last two elements are odd.  Do not use recursion.\n  >>> fibonacci(28)\n  2584\n  >>> fibonacci(29)\n  4181\n  */\n\nconst fibonacci = (n) => {\n  if (n < 2)\n    return n;\n  return fibonacci(n - 1) + fibonacci(n - 2);\n};\n\n/*\n  Write a function to efficiently compute the n-th element of the Fibonacci sequence whose last two elements are even.  Do not use recursion.\n  >>> fibonacci(30)\n  4181\n  >>> fibonacci(31)\n  6511\n  */\n\nconst fibonacci = (n) => {\n  if (n < 2)\n    return n;\n  return fibonacci(n - 1) + fibonacci(n - 2);\n};\n\n/*\n  Write a function to efficiently compute the n-th element of the Fibonacci sequence whose last two elements are odd.  Do not use recursion.\n  >>> fibonacci(32)\n  6511\n  >>> fibonacci(33)\n  9043\n  */\n\nconst fi"}
{"task_id": "JavaScript/47", "prompt": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\n\nconst median = (l) => {\n  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n", "canonical_solution": "    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "partial": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    # print('@@this is the line to split##')\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "gc": "<|endoftext|>/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\n\nconst median = (l) => {\n  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    len = Math.floor(l.length / 2);\n  var mid = Math.floor(len / 2);\n  var left = l[mid];\n  var right = l[len - mid];\n  return left + right / 2;\n};\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  3\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  4\n  */\n\nconst mode = (l) => {\n  var len = l.length;\n  if (l.length % 2 == 1)\n    len = Math.floor(l.length / 2);\n  var mid = Math.floor(len / 2);\n  var left = l[mid];\n  var right = l[len - mid];\n  var mode = left + right;\n  var count = 0;\n  var max = 0;\n  var min = Infinity;\n  for (var i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n      count = i;\n    }\n    if (l[i] < min) {\n      min = l[i];\n      count = i;\n    }\n  }\n  return count + 1;\n};\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  3\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  4\n  */\n\nconst mode = (l) => {\n  var len = l.length;\n  if (l.length % 2 == 1)\n    len = Math.floor(l.length / 2);\n  var mid = Math.floor(len / 2);\n  var left = l[mid];\n  var right = l[len - mid];\n  var mode = left + right;\n  var count = 0;\n  var max = 0;\n  var min = Infinity;\n  for (var i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n      count = i;\n    }\n    if (l[i] < min) {\n      min = l[i];\n      count = i;\n    }\n  }\n  return count + 1;\n};\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  3\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  4\n  */\n\nconst mode = (l) => {\n  var len = l.length;\n  if (l.length % 2 == 1)\n    len = Math.floor(l.length / 2);\n  var mid = Math.floor(len / 2);\n  var left = l[mid];\n  var right = l[len - mid];\n  var mode = left + right;\n  var count = 0;\n  var max = 0;\n  var min = Infinity;\n  for (var i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n      count = i;\n    }\n    if (l[i] < min) {\n      min = l[i];\n      count = i;\n    }\n  }\n  return count + 1;\n};\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  3\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  4\n  */\n\nconst mode = (l) => {\n  var len = l.length;\n  if (l.length % 2 == 1)\n    len = Math.floor(l.length / 2);\n  var mid = Math.floor(len / 2);\n  var left = l[mid];\n  var right = l[len - mid];\n  var mode = left + right;\n  var count = 0;\n  var max = 0;\n  var min = Infinity;\n  for (var i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n      count = i;\n    }\n    if (l[i] < min) {\n      min = l[i];\n      count = i;\n    }\n  }\n  return count + 1;\n};\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  3\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  4\n  */\n\nconst mode = (l) => {\n  var len = l.length;\n  if (l.length % 2 == 1)\n    len = Math.floor(l.length / 2);\n  var mid = Math.floor(len / 2);\n  var left = l[mid];\n  var right = l[len - mid];\n  var mode = left + right;\n  var count = 0;\n  var max = 0;\n  var min = Infinity;\n  for (var i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n      count = i;\n    }\n    if (l[i] < min) {\n      min = l[i];\n      count = i;\n    }\n  }\n  return count + 1;\n};\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  3\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  4\n  */\n\nconst mode = (l) => {\n  var len = l.length;\n  if (l.length % 2 == 1)\n    len = Math.floor(l.length / 2);\n  var mid = Math.floor(len / 2);\n  var left = l[mid];\n  var right = l[len - mid];\n  var mode = left + right;\n  var count = 0;\n  var max = 0;\n  var min = Infinity;\n  for (var i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n      count = i;\n    }\n    if (l[i] < min) {\n      min = l[i];\n      count = i;\n    }\n  }\n  return count + 1;\n};\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  3\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  4\n  */\n\nconst mode = (l) => {\n  var len = l.length;\n  if (l.length % 2 == 1)\n    len = Math.floor(l.length / 2);\n  var mid = Math.floor(len / 2);\n  var left = l[mid];\n  var right = l[len - mid];\n  var mode = left + right;\n  var count = 0;\n  var max = 0;\n  var min = Infinity;\n  for (var i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n      count = i;\n    }\n    if (l[i] < min) {\n      min = l[i];\n      count = i;\n    }\n  }\n  return count + 1;\n};\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  3\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  4\n  */\n\nconst mode = (l) => {\n  var len = l.length;\n  if (l.length % 2 == 1)\n    len = Math.floor(l.length / 2);\n  var mid = Math.floor(len / 2);\n  var left = l[mid];\n  var right = l[len - mid];\n  var mode = left + right;\n  var count = 0;\n  var max = 0;\n  var min = Infinity;\n  for (var i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n      count = i;\n    }\n    if (l[i] < min) {\n      min = l[i];\n      count = i;\n    }\n  }\n  return count + 1;\n};\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  3\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  4\n  */\n\nconst mode = (l) => {\n  var len = l.length;\n  if (l.length % 2 == 1)\n    len = Math.floor(l.length / 2);\n  var mid = Math.floor(len / 2);\n  var left = l[mid];\n  var right = l[len - mid];\n  var mode = left + right;\n  var count = 0;\n  var max = 0;\n  var min = Infinity;\n  for (var i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n      count = i;\n    }\n    if (l[i] < min) {\n      min = l[i];\n      count = i;\n    }\n  }\n  return count + 1;\n};\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  3\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  "}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\n\nconst isPalindrome = (text) => {\n  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n", "canonical_solution": "      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "partial": "/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      # print('@@this is the line to split##')\n      return false;\n  return true;\n}\n\n", "gc": "<|endoftext|>/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\n\nconst isPalindrome = (text) => {\n  for (let i = 0; i < text.length; i++)\n    if (text[i]!= text.at(-i-1))\n      return false;\n  return true;\n};\n\n/*\n  Checks if given string is a palindrome of given length\n  >>> isPalindrome('aba', 3)\n  true\n  >>> isPalindrome('aba', 2)\n  false\n  >>> isPalindrome('aba', 1)\n  false\n  >>> isPalindrome('aba', 0)\n  false\n  */\n\nconst isPalindromeOfLength = (text, length) => {\n  if (text.length < length)\n    return false;\n  for (let i = 0; i < text.length; i++)\n    if (text[i]!= text.at(-i-1))\n      return false;\n  return true;\n};\n\n/*\n  Checks if given string is a palindrome of given length\n  >>> isPalindromeOfLength('aba', 3)\n  true\n  >>> isPalindromeOfLength('aba', 2)\n  false\n  >>> isPalindromeOfLength('aba', 1)\n  false\n  >>> isPalindromeOfLength('aba', 0)\n  false\n  */\n\nconst isPalindromeOfLengthAndCase = (text, length, case) => {\n  if (text.length < length)\n    return false;\n  for (let i = 0; i < text.length; i++)\n    if (text[i]!= text.at(-i-1))\n      return false;\n  return true;\n};\n\n/*\n  Checks if given string is a palindrome of given length\n  >>> isPalindromeOfLengthAndCase('aba', 3)\n  true\n  >>> isPalindromeOfLengthAndCase('aba', 2)\n  false\n  >>> isPalindromeOfLengthAndCase('aba', 1)\n  false\n  >>> isPalindromeOfLengthAndCase('aba', 0)\n  false\n  */\n\nconst isPalindromeOfLengthAndCaseAndCase = (text, length, case, caseCase) => {\n  if (text.length < length)\n    return false;\n  for (let i = 0; i < text.length; i++)\n    if (text[i]!= text.at(-i-1))\n      return false;\n  return true;\n};\n\n/*\n  Checks if given string is a palindrome of given length\n  >>> isPalindromeOfLengthAndCaseAndCase('aba', 3)\n  true\n  >>> isPalindromeOfLengthAndCaseAndCase('aba', 2)\n  false\n  >>> isPalindromeOfLengthAndCaseAndCase('aba', 1)\n  false\n  >>> isPalindromeOfLengthAndCaseAndCase('aba', 0)\n  false\n  */\n\nconst isPalindromeOfLengthAndCaseAndCase = (text, length, case, caseCase, caseCaseCase) => {\n  if (text.length < length)\n    return false;\n  for (let i = 0; i < text.length; i++)\n    if (text[i]!= text.at(-i-1))\n      return false;\n  return true;\n};\n\n/*\n  Checks if given string is a palindrome of given length\n  >>> isPalindromeOfLengthAndCaseAndCase('aba', 3)\n  true\n  >>> isPalindromeOfLengthAndCaseAndCase('aba', 2)\n  false\n  >>> isPalindromeOfLengthAndCaseAndCase('aba', 1)\n  false\n  >>> isPalindromeOfLengthAndCaseAndCase('aba', 0)\n  false\n  */\n\nconst isPalindromeOfLengthAndCaseAndCase = (text, length, case, caseCase, caseCaseCase) => {\n  if (text.length < length)\n    return false;\n  for (let i = 0; i < text.length; i++)\n    if (text[i]!= text.at(-i-1))\n      return false;\n  return true;\n};\n\n/*\n  Checks if given string is a palindrome of given length\n  >>> isPalindromeOfLengthAndCaseAndCase('aba', 3)\n  true\n  >>> isPalindromeOfLengthAndCaseAndCase('aba', 2)\n  false\n  >>> isPalindromeOfLengthAndCaseAndCase('aba', 1)\n  false\n  >>> isPalindromeOfLengthAndCaseAndCase('aba', 0)\n  false\n  */\n\nconst isPalindromeOfLengthAndCaseAndCase = (text, length, case, caseCase, caseCaseCase) => {\n  if (text.length < length)\n    return false;\n  for (let i = 0; i < text.length; i++)\n    if (text[i]!= text.at(-i-1))\n      return false;\n  return true;\n};\n\n/*\n  Checks if given string is a palindrome of given length\n  >>> isPalindromeOfLengthAndCaseAndCase('aba', 3)\n  true\n  >>> isPalindromeOfLengthAndCaseAndCase('aba', 2)\n  false\n  >>> isPalindromeOfLengthAndCaseAndCase('aba', 1)\n  false\n  >>> isPalindromeOfLengthAndCaseAndCase('aba', 0)\n  false\n  */\n\nconst isPalindromeOfLengthAndCaseAndCase = (text, length, case, caseCase, caseCaseCase) => {\n  if (text.length < length)\n    return false;\n  for (let i = 0; i < text.length; i++)\n    if (text[i]!= text.at(-i-1))\n      return false;\n  return true;\n};\n\n/*\n  Checks if given string is a palindrome of given length\n  >>> isPalindromeOfLengthAndCaseAndCase('aba', 3)\n  true\n  >>> isPalindromeOfLengthAndCaseAndCase('aba', 2)\n  false\n  >>> isPalindromeOfLengthAndCaseAndCase('aba', 1)\n  false\n  >>> isPalindromeOfLengthAndCaseAndCase('aba', 0)\n  false\n  */\n\nconst isPalindromeOfLengthAndCaseAndCase = (text, length, case, caseCase, caseCaseCase) => {\n  if (text.length < length)\n    return false;\n  for (let i = 0; i < text.length; i++)\n    if (text[i]!= text.at(-i-1))\n      return false;\n  return true;\n};\n\n/*\n  Checks if given string is a palindrome of given length\n  >>> isPalindromeOfLengthAndCaseAndCase('aba', 3)\n  true\n  >>> isPalindromeOfLengthAndCaseAndCase('aba', 2)\n  false\n  >>> isPalindromeOfLengthAndCaseAndCase('aba', 1)\n  false\n  >>> isPalindromeOfLengthAndCaseAndCase('aba', 0)\n  false\n  */\n\nconst isPalindromeOfLengthAndCaseAndCase = (text, length, case, caseCase, caseCaseCase) => {\n  if (text.length < length)\n    return false;\n  for (let i = 0; i < text.length; i++)\n    if (text[i]!= text.at(-i-1))\n      return false;\n  return true;\n};\n\n/*\n  Checks if given string is a palindrome of given length\n  >>> isPalindromeOfLengthAndCaseAndCase('aba', 3)\n  true\n  >>> isPalindromeOfLengthAndCaseAndCase('aba', 2)\n  false\n  >>> isPalindromeOfLengthAndCaseAndCase('aba', 1)\n  false\n  >>> isPalindromeOfLengthAndCaseAnd"}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\n\nconst modp = (n, p) => {\n  var ret = 1;\n  for (let i = 0; i < n; i++)\n", "canonical_solution": "    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "partial": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  var ret = 1;\n  for (let i = 0; i < n; i++)\n    # print('@@this is the line to split##')\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "gc": "<|endoftext|>/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\n\nconst modp = (n, p) => {\n  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret %= p;\n  return ret;\n};\n\n/*\n  >>> modp(1, 3)\n  1\n  >>> modp(3, 1)\n  3\n  >>> modp(3, 3)\n  1\n  >>> modp(3, 5)\n  2\n  >>> modp(3, 11)\n  3\n  >>> modp(3, 21)\n  4\n  >>> modp(3, 51)\n  5\n  >>> modp(3, 101)\n  1\n  >>> modp(3, 151)\n  2\n  >>> modp(3, 201)\n  3\n  >>> modp(3, 251)\n  4\n  >>> modp(3, 301)\n  5\n  >>> modp(3, 351)\n  6\n  >>> modp(3, 401)\n  7\n  >>> modp(3, 451)\n  8\n  >>> modp(3, 501)\n  9\n  >>> modp(3, 551)\n  10\n  >>> modp(3, 601)\n  11\n  >>> modp(3, 651)\n  12\n  >>> modp(3, 701)\n  13\n  >>> modp(3, 751)\n  14\n  >>> modp(3, 801)\n  15\n  >>> modp(3, 851)\n  16\n  >>> modp(3, 901)\n  17\n  >>> modp(3, 951)\n  18\n  >>> modp(3, 1001)\n  19\n  >>> modp(3, 1051)\n  20\n  >>> modp(3, 1101)\n  21\n  >>> modp(3, 1151)\n  22\n  >>> modp(3, 1201)\n  23\n  >>> modp(3, 1251)\n  24\n  >>> modp(3, 1301)\n  25\n  >>> modp(3, 1351)\n  26\n  >>> modp(3, 1401)\n  27\n  >>> modp(3, 1451)\n  28\n  >>> modp(3, 1501)\n  29\n  >>> modp(3, 1551)\n  30\n  >>> modp(3, 1601)\n  31\n  >>> modp(3, 1651)\n  32\n  >>> modp(3, 1701)\n  33\n  >>> modp(3, 1751)\n  34\n  >>> modp(3, 1801)\n  35\n  >>> modp(3, 1851)\n  36\n  >>> modp(3, 1901)\n  37\n  >>> modp(3, 1951)\n  38\n  >>> modp(3, 2001)\n  39\n  >>> modp(3, 2051)\n  40\n  >>> modp(3, 2101)\n  41\n  >>> modp(3, 2151)\n  42\n  >>> modp(3, 2201)\n  43\n  >>> modp(3, 2251)\n  44\n  >>> modp(3, 2301)\n  45\n  >>> modp(3, 2351)\n  46\n  >>> modp(3, 2401)\n  47\n  >>> modp(3, 2451)\n  48\n  >>> modp(3, 2501)\n  49\n  >>> modp(3, 2551)\n  50\n  >>> modp(3, 2601)\n  51\n  >>> modp(3, 2651)\n  52\n  >>> modp(3, 2701)\n  53\n  >>> modp(3, 2751)\n  54\n  >>> modp(3, 2801)\n  55\n  >>> modp(3, 2851)\n  56\n  >>> modp(3, 2901)\n  57\n  >>> modp(3, 2951)\n  58\n  >>> modp(3, 3001)\n  59\n  >>> modp(3, 3051)\n  60\n  >>> modp(3, 3101)\n  61\n  >>> modp(3, 3151)\n  62\n  >>> modp(3, 3201)\n  63\n  >>> modp(3, 3251)\n  64\n  >>> modp(3, 3301)\n  65\n  >>> modp(3, 3351)\n  66\n  >>> modp(3, 3401)\n  67\n  >>> modp(3, 3451)\n  68\n  >>> modp(3, 3501)\n  69\n  >>> modp(3, 3551)\n  70\n  >>> modp(3, 3601)\n  71\n  >>> modp(3, 3651)\n  72\n  >>> modp(3, 3701)\n  73\n  >>> modp(3, 3751)\n  74\n  >>> modp(3, 3801)\n  75\n  >>> modp(3, 3851)\n  76\n  >>> modp(3, 3901)\n  77\n  >>> modp(3, 3951)\n  78\n  >>> modp(3, 4001)\n  79\n  >>> modp(3, 4051)\n  80\n  >>> modp(3, 4101)\n  81\n  >>> modp(3, 4151)\n  82\n  >>> modp(3, 4201)\n  83\n  >>> modp(3, 4251)\n  84\n  >>> modp(3, 4301)\n  85\n  >>> modp(3, 4351)\n  86\n  >>> modp(3, 4401 )\n  87\n  >>> modp(3, 4451 )\n  88\n  >>> modp(3, 4501 )\n  89\n  >>> modp(3, 4551 )\n  90\n  >>> modp(3, 4601 )\n  91\n  >>> modp(3, 4651 )\n  92\n  >>> modp(3, 4701 )\n  93\n  >>> modp(3, 4751 )\n  94\n  >>> modp(3, 4801 )\n  95\n  >>> modp(3, 4851 )\n  96\n  >>> modp(3, 4901 )\n  97\n  >>> modp(3, 4951 )\n  98\n  >>> modp(3, 5001 )\n  99\n  >>> modp(3, 5051 )\n  100\n  >>> modp(3, 5101 )\n  101\n  >>> modp(3, 5151 )\n  102\n  >>> modp(3, 5201 )\n  103\n  >>> modp(3, 5251 )\n  104\n  >>> modp(3, 5301 )\n  105\n  >>> modp(3, 5351 )\n  106\n  >>> modp(3, 5401 )\n  107\n  >>> modp(3, 5451 )\n  108\n  >>> modp(3, 5501 )\n  109\n  >>> modp(3, 5551 )\n  110\n  >>> modp(3, 5601 )\n  111\n  >>> modp(3, 5651 )\n  112\n  >>> modp(3, 5701 )\n  113\n  >>> modp(3, 5751 )\n  114\n  >>> modp(3, 5801 )\n  115\n  >>> modp(3, 5851 )\n  116\n  >>> modp(3, 5901 )\n  117\n  >>> modp(3, 5951 )\n  118\n  >>> modp(3, "}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\n\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n", "canonical_solution": "  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "partial": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n    # print('@@this is the line to split##')\n  )).join(\"\");\n}\n\n", "gc": "<|endoftext|>/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\n\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift2 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\n\nconst decodeShift2 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift3 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\n\nconst decodeShift3 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift4 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\n\nconst decodeShift4 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift5 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\n\nconst decodeShift5 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift6 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\n\nconst decodeShift6 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift7 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\n\nconst decodeShift7 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift8 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\n\nconst decodeShift8 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift9 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\n\nconst decodeShift9 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift10 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\n\nconst decodeShift10 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift11 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\n\nconst decodeShift11 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift12 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \""}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowels is a function that takes string and returns string without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\n\nconst removeVowels = (text) => {\n  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n", "canonical_solution": "                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "partial": "/*\n  removeVowels is a function that takes string and returns string without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                      # print('@@this is the line to split##')\n                    )\n             .join(\"\")\n}\n\n", "gc": "<|endoftext|>/*\n  removeVowels is a function that takes string and returns string without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\n\nconst removeVowels = (text) => {\n  return text.split(\"\")\n            .filter(s =>![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                     .includes(s.toLowerCase())\n             )\n            .join(\"\");\n};\n\n/*\n  removePunctuation is a function that takes string and returns string without punctuation.\n  >>> removePunctuation('')\n  ''\n  >>> removePunctuation(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removePunctuation('abcdef')\n  'abcdef'\n  >>> removePunctuation('aaaaa')\n  ''\n  >>> removePunctuation('aaBAA')\n  'B'\n  >>> removePunctuation('zbcd')\n  'zbcd'\n  */\n\nconst removePunctuation = (text) => {\n  return text.split(\"\")\n            .filter(s =>![\".\", \"!\", \"?\", \";\", \":\", \"'\", '\"', '(', ')', '[', ']', '{', '}', '\\\\', '|', '~}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers in the list l are below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\n\nconst belowThreshold = (l, t) => {\n  for (const e of l)\n    if (e >= t)\n", "canonical_solution": "      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "partial": "/*Return true if all numbers in the list l are below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  for (const e of l)\n    if (e >= t)\n      # print('@@this is the line to split##')\n      return false;\n  return true;\n}\n\n", "gc": "<|endoftext|>/*Return true if all numbers in the list l are below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\n\nconst belowThreshold = (l, t) => {\n  for (const e of l)\n    if (e >= t)\n      return true\n  return false\n}\n\n/*\n  >>> isEven([2, 4, 6, 8])\n  true\n  >>> isEven([2, 4, 6, 8], 2)\n  false\n  >>> isEven([2, 4, 6, 8], 3)\n  true\n  >>> isEven([2, 4, 6, 8], 4)\n  false\n  >>> isEven([2, 4, 6, 8], 5)\n  false\n  >>> isEven([2, 4, 6, 8], 6)\n  false\n  >>> isEven([2, 4, 6, 8], 7)\n  false\n  >>> isEven([2, 4, 6, 8], 8)\n  false\n  >>> isEven([2, 4, 6, 8], 9)\n  false\n  >>> isEven([2, 4, 6, 8], 10)\n  false\n  >>> isEven([2, 4, 6, 8], 11)\n  false\n  >>> isEven([2, 4, 6, 8], 12)\n  false\n  >>> isEven([2, 4, 6, 8], 13)\n  false\n  >>> isEven([2, 4, 6, 8], 14)\n  false\n  >>> isEven([2, 4, 6, 8], 15)\n  false\n  >>> isEven([2, 4, 6, 8], 16)\n  false\n  >>> isEven([2, 4, 6, 8], 17)\n  false\n  >>> isEven([2, 4, 6, 8], 18)\n  false\n  >>> isEven([2, 4, 6, 8], 19)\n  false\n  >>> isEven([2, 4, 6, 8], 20)\n  false\n  >>> isEven([2, 4, 6, 8], 21)\n  false\n  >>> isEven([2, 4, 6, 8], 22)\n  false\n  >>> isEven([2, 4, 6, 8], 23)\n  false\n  >>> isEven([2, 4, 6, 8], 24)\n  false\n  >>> isEven([2, 4, 6, 8], 25)\n  false\n  >>> isEven([2, 4, 6, 8], 26)\n  false\n  >>> isEven([2, 4, 6, 8], 27)\n  false\n  >>> isEven([2, 4, 6, 8], 28)\n  false\n  >>> isEven([2, 4, 6, 8], 29)\n  false\n  >>> isEven([2, 4, 6, 8], 30)\n  false\n  >>> isEven([2, 4, 6, 8], 31)\n  false\n  >>> isEven([2, 4, 6, 8], 32)\n  false\n  >>> isEven([2, 4, 6, 8], 33)\n  false\n  >>> isEven([2, 4, 6, 8], 34)\n  false\n  >>> isEven([2, 4, 6, 8], 35)\n  false\n  >>> isEven([2, 4, 6, 8], 36)\n  false\n  >>> isEven([2, 4, 6, 8], 37)\n  false\n  >>> isEven([2, 4, 6, 8], 38)\n  false\n  >>> isEven([2, 4, 6, 8], 39)\n  false\n  >>> isEven([2, 4, 6, 8], 40)\n  false\n  >>> isEven([2, 4, 6, 8], 41)\n  false\n  >>> isEven([2, 4, 6, 8], 42)\n  false\n  >>> isEven([2, 4, 6, 8], 43)\n  false\n  >>> isEven([2, 4, 6, 8], 44)\n  false\n  >>> isEven([2, 4, 6, 8], 45)\n  false\n  >>> isEven([2, 4, 6, 8], 46)\n  false\n  >>> isEven([2, 4, 6, 8], 47)\n  false\n  >>> isEven([2, 4, 6, 8], 48)\n  false\n  >>> isEven([2, 4, 6, 8], 49)\n  false\n  >>> isEven([2, 4, 6, 8], 50)\n  false\n  >>> isEven([2, 4, 6, 8], 51)\n  false\n  >>> isEven([2, 4, 6, 8], 52)\n  false\n  >>> isEven([2, 4, 6, 8], 53)\n  false\n  >>> isEven([2, 4, 6, 8], 54)\n  false\n  >>> isEven([2, 4, 6, 8], 55)\n  false\n  >>> isEven([2, 4, 6, 8], 56)\n  false\n  >>> isEven([2, 4, 6, 8], 57)\n  false\n  >>> isEven([2, 4, 6, 8], 58)\n  false\n  >>> isEven([2, 4, 6, 8], 59)\n  false\n  >>> isEven([2, 4, 6, 8], 60)\n  false\n  >>> isEven([2, 4, 6, 8], 61)\n  false\n  >>> isEven([2, 4, 6, 8], 62)\n  false\n  >>> isEven([2, 4, 6, 8], 63)\n  false\n  >>> isEven([2, 4, 6, 8], 64)\n  false\n  >>> isEven([2, 4, 6, 8], 65)\n  false\n  >>> isEven([2, 4, 6, 8], 66)\n  false\n  >>> isEven([2, 4, 6, 8], 67)\n  false\n  >>> isEven([2, 4, 6, 8], 68)\n  false\n  >>> isEven([2, 4, 6, 8], 69)\n  false\n  >>> isEven([2, 4, 6, 8], 70)\n  false\n  >>> isEven([2, 4, 6, 8], 71)\n  false\n  >>> isEven([2, 4, 6, 8], 72)\n  false\n  >>> isEven([2, 4, 6, 8], 73)\n  false\n  >>> isEven([2, 4, 6, 8], 74)\n  false\n  >>> isEven([2, 4, 6, 8], 75)\n  false\n  >>> isEven([2, 4, 6, 8], 76)\n  false\n  >>> isEven([2, 4, 6, 8], 77)\n  false\n  >>> isEven([2, 4, 6, 8], 78)\n  false\n  >>> isEven([2, 4, 6, 8], 79)\n  false\n  >>> isEven([2, 4, 6, 8], 80)\n  false\n  >>> isEven([2, 4, 6, 8], 81)\n  false\n  >>> isEven([2, 4, 6, 8], 82)\n  false\n  >>> isEven([2, 4, 6, 8], 83)\n  false\n  >>> isEven([2, 4, 6, 8], 84)\n  false\n  >>> isEven([2, 4, 6, 8], 85)\n  false\n  >>> isEven([2, 4, 6, 8], 86)\n  false\n  >>> isEven([2, 4, 6, 8], 87)\n  false\n  >>> isEven([2, 4, 6, 8], 88)\n  false\n  >>> isEven([2, 4, 6, 8], 89)\n  false\n  >>> isEven([2, 4, 6, 8], 90)\n  false\n  >>> isEven([2, 4, 6, 8], 91)\n  false\n  >>> isEven([2, 4, 6, 8], 92)\n  false\n  >>> isEven([2, 4, 6, 8], 93)\n  false\n  >>> isEven([2, 4, 6, 8], 94)\n  false\n  >>> isEven([2, 4, 6, 8], 95)\n  false\n  >>> isEven([2, 4, 6, 8], 96)\n  false\n  >>> isEven([2, 4, 6, 8], 97)\n  false\n  >>> isEven([2, 4, 6, 8], 98)\n  false\n  >>> isEven([2, 4, 6, 8], 99)\n  false\n  >>> isEven([2, 4, 6, 8], 100)\n"}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\n\nconst add = (x, y) => {\n  return x + y;\n", "canonical_solution": "}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "partial": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n  # print('@@this is the line to split##')\n}\n\n", "gc": "<|endoftext|>/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\n\nconst add = (x, y) => {\n  return x + y;\n};\n\nmodule.exports = add;\n\n},{}],17:[function(require,module,exports){\n/**\n * Module dependencies.\n */\n\nconst { createHash } = require('crypto');\n\n/**\n * SHA1 implementation.\n */\n\nconst sha1 = (text) => {\n  const hash = createHash('sha1');\n  hash.update(text);\n  return hash.digest('hex');\n};\n\nmodule.exports = sha1;\n\n},{\"crypto\":2}],18:[function(require,module,exports){\n/**\n * Module dependencies.\n */\n\nconst { createHash } = require('crypto');\n\n/**\n * SHA256 implementation.\n */\n\nconst sha256 = (text) => {\n  const hash = createHash('sha256');\n  hash.update(text);\n  return hash.digest('hex');\n};\n\nmodule.exports = sha256;\n\n},{\"crypto\":2}],19:[function(require,module,exports){\n/**\n * Module dependencies.\n */\n\nconst { createHash } = require('crypto');\n\n/**\n * SHA512 implementation.\n */\n\nconst sha512 = (text) => {\n  const hash = createHash('sha512');\n  hash.update(text);\n  return hash.digest('hex');\n};\n\nmodule.exports = sha512;\n\n},{\"crypto\":2}],20:[function(require,module,exports){\n/**\n * Module dependencies.\n */\n\nconst { createHash } = require('crypto');\n\n/**\n * SHA384 implementation.\n */\n\nconst sha384 = (text) => {\n  const hash = createHash('sha384');\n  hash.update(text);\n  return hash.digest('hex');\n};\n\nmodule.exports = sha384;\n\n},{\"crypto\":2}],21:[function(require,module,exports){\n/**\n * Module dependencies.\n */\n\nconst { createHash } = require('crypto');\n\n/**\n * SHA256 implementation.\n */\n\nconst sha256 = (text) => {\n  const hash = createHash('sha256');\n  hash.update(text);\n  return hash.digest('hex');\n};\n\nmodule.exports = sha256;\n\n},{\"crypto\":2}],22:[function(require,module,exports){\n/**\n * Module dependencies.\n */\n\nconst { createHash } = require('crypto');\n\n/**\n * SHA1 implementation.\n */\n\nconst sha1 = (text) => {\n  const hash = createHash('sha1');\n  hash.update(text);\n  return hash.digest('hex');\n};\n\nmodule.exports = sha1;\n\n},{\"crypto\":2}],23:[function(require,module,exports){\n/**\n * Module dependencies.\n */\n\nconst { createHash } = require('crypto');\n\n/**\n * SHA256 implementation.\n */\n\nconst sha256 = (text) => {\n  const hash = createHash('sha256');\n  hash.update(text);\n  return hash.digest('hex');\n};\n\nmodule.exports = sha256;\n\n},{\"crypto\":2}],24:[function(require,module,exports){\n/**\n * Module dependencies.\n */\n\nconst { createHash } = require('crypto');\n\n/**\n * SHA384 implementation.\n */\n\nconst sha384 = (text) => {\n  const hash = createHash('sha384');\n  hash.update(text);\n  return hash.digest('hex');\n};\n\nmodule.exports = sha384;\n\n},{\"crypto\":2}],25:[function(require,module,exports){\n/**\n * Module dependencies.\n */\n\nconst { createHash } = require('crypto');\n\n/**\n * SHA512 implementation.\n */\n\nconst sha512 = (text) => {\n  const hash = createHash('sha512');\n  hash.update(text);\n  return hash.digest('hex');\n};\n\nmodule.exports = sha512;\n\n},{\"crypto\":2}],26:[function(require,module,exports){\n/**\n * Module dependencies.\n */\n\nconst { createHash } = require('crypto');\n\n/**\n * SHA1 implementation.\n */\n\nconst sha1 = (text) => {\n  const hash = createHash('sha1');\n  hash.update(text);\n  return hash.digest('hex');\n};\n\nmodule.exports = sha1;\n\n},{\"crypto\":2}],27:[function(require,module,exports){\n/**\n * Module dependencies.\n */\n\nconst { createHash } = require('crypto');\n\n/**\n * SHA256 implementation.\n */\n\nconst sha256 = (text) => {\n  const hash = createHash('sha256');\n  hash.update(text);\n  return hash.digest('hex');\n};\n\nmodule.exports = sha256;\n\n},{\"crypto\":2}],28:[function(require,module,exports){\n/**\n * Module dependencies.\n */\n\nconst { createHash } = require('crypto');\n\n/**\n * SHA384 implementation.\n */\n\nconst sha384 = (text) => {\n  const hash = createHash('sha384');\n  hash.update(text);\n  return hash.digest('hex');\n};\n\nmodule.exports = sha384;\n\n},{\"crypto\":2}],29:[function(require,module,exports){\n/**\n * Module dependencies.\n */\n\nconst { createHash } = require('crypto');\n\n/**\n * SHA512 implementation.\n */\n\nconst sha512 = (text) => {\n  const hash = createHash('sha512');\n  hash.update(text);\n  return hash.digest('hex');\n};\n\nmodule.exports = sha512;\n\n},{\"crypto\":2}],30:[function(require,module,exports){\n/**\n * Module dependencies.\n */\n\nconst { createHash } = require('crypto');\n\n/**\n * SHA1 implementation.\n */\n\nconst sha1 = (text) => {\n  const hash = createHash('sha1');\n  hash.update(text);\n  return hash.digest('hex');\n};\n\nmodule.exports = sha1;\n\n},{\"crypto\":2}],31:[function(require,module,exports){\n/**\n * Module dependencies.\n */\n\nconst { createHash } = require('crypto');\n\n/**\n * SHA256 implementation.\n */\n\nconst sha256 = (text) => {\n  const hash = createHash('sha256');\n  hash.update(text);\n  return hash.digest('hex');\n};\n\nmodule.exports = sha256;\n\n},{\"crypto\":2}],32:[function(require,module,exports){\n/**\n * Module dependencies.\n */\n\nconst { createHash } = require('crypto');\n\n/**\n * SHA384 implementation.\n */\n\nconst sha384 = (text) => {\n  const hash = createHash('sha384');\n  hash.update(text);\n  return hash.digest('hex');\n};\n\nmodule.exports = sha384;\n\n},{\"crypto\":2}],33:[function(require,module,exports){\n/**\n * Module dependencies.\n */\n\nconst { createHash } = require('crypto');\n\n/**\n * SHA512 implementation.\n */\n\nconst sha512 = (text) => {\n  const hash = createHash('sha512');\n  hash.update(text);\n  return hash.digest('hex');\n};\n\nmodule.exports = sha512;\n\n},{\"crypto\":2}],34:[function(require,module,exports){\n/**\n * Module dependencies.\n */\n\nconst { createHash } = require('crypto');\n\n/**\n * SHA1 implementation.\n */\n\nconst sha1 = (text) => {\n  const hash = createHash('sha1');\n  hash.update(text);\n  return hash.digest('hex');\n};\n\nmodule.exports = sha1;\n\n},{\"crypto\":2}],35:[function(require,module,exports){\n/**\n * Module dependencies.\n */\n\nconst { createHash } = require('crypto');\n\n/**\n * SHA256 implementation.\n */\n\nconst sha256 = (text) => {\n  const hash = createHash('sha256');\n  hash.update(text);\n  return hash.digest('hex');\n};\n\nmodule.exports = sha256;\n\n},{\"crypto\":2}],36:[function(require,module,exports){\n/**\n * Module dependencies.\n */\n\nconst { createHash } = require('crypto');\n\n/**\n"}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two words have the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\n\nconst sameChars = (s0, s1) => {\n  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n", "canonical_solution": "}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "partial": "/*\n  Check if two words have the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n  # print('@@this is the line to split##')\n}\n\n", "gc": "<|endoftext|>/*\n  Check if two words have the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\n\nconst sameChars = (s0, s1) => {\n  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n};\n\nmodule.exports = sameChars;\n\n},{}],13:[function(require,module,exports){\n'use strict';\n\nconst { isArray } = Array;\n\nconst isString = (value) => {\n  return typeof value ==='string';\n};\n\nconst isNumber = (value) => {\n  return typeof value === 'number';\n};\n\nconst isBoolean = (value) => {\n  return typeof value === 'boolean';\n};\n\nconst isRegExp = (value) => {\n  return typeof value === 'object' && value instanceof RegExp;\n};\n\nconst isDate = (value) => {\n  return typeof value === 'object' && value instanceof Date;\n};\n\nconst isError = (value) => {\n  return value instanceof Error;\n};\n\nconst isBuffer = (value) => {\n  return Buffer.isBuffer(value);\n};\n\nconst isBlob = (value) => {\n  return value instanceof Blob;\n};\n\nconst isFormData = (value) => {\n  return value instanceof FormData;\n};\n\nconst isURLSearchParams = (value) => {\n  return value instanceof URLSearchParams;\n};\n\nconst isBlobOrBuffer = (value) => {\n  return isBlob(value) || isBuffer(value);\n};\n\nconst isPlainObject = (value) => {\n  return value!== null && typeof value === 'object';\n};\n\nconst isURLSearchParam = (value) => {\n  return isURLSearchParams(value) && value.constructor === URLSearchParams;\n};\n\nconst isFormDataOrBlob = (value) => {\n  return isFormData(value) || isBlob(value);\n};\n\nconst isPlainObjectOrURLSearchParam = (value) => {\n  return isPlainObject(value) || isURLSearchParam(value);\n};\n\nconst isPlainObjectOrFormData = (value) => {\n  return isPlainObject(value) || isFormData(value);\n};\n\nconst isPlainObjectOrBlobOrBuffer = (value) => {\n  return isPlainObject(value) || isBlobOrBuffer(value);\n};\n\nconst isPlainObjectOrBuffer = (value) => {\n  return isPlainObject(value) || isBuffer(value);\n};\n\nconst isPlainObjectOrURLSearchParamOrFormData = (value) => {\n  return isPlainObject(value) || isURLSearchParam(value) || isFormDataOrFormData(value);\n};\n\nconst isPlainObjectOrBlobOrBuffer = (value) => {\n  return isPlainObject(value) || isBlobOrBuffer(value);\n};\n\nconst isPlainObjectOrArray = (value) => {\n  return isPlainObject(value) || isArray(value);\n};\n\nconst isPlainObjectOrURLSearchParamOrArray = (value) => {\n  return isPlainObject(value) || isURLSearchParam(value) || isArray(value);\n};\n\nconst isPlainObjectOrURLSearchParamOrFormDataOrArray = (value) => {\n  return isPlainObject(value) || isURLSearchParam(value) || isFormDataOrFormData(value) || isArray(value);\n};\n\nconst isPlainObjectOrBlobOrArray = (value) => {\n  return isPlainObject(value) || isBlobOrArray(value);\n};\n\nconst isPlainObjectOrArrayOrURLSearchParamOrFormDataOrBlobOrBuffer = (value) => {\n  return isPlainObject(value) || isURLSearchParam(value) || isFormDataOrFormData(value) || isBlobOrBuffer(value);\n};\n\nconst isPlainObjectOrArrayOrURLSearchParamOrFormDataOrBlobOrBuffer = (value) => {\n  return isPlainObject(value) || isURLSearchParam(value) || isFormDataOrFormData(value) || isBlobOrBuffer(value);\n};\n\nconst isPlainObjectOrArrayOrURLSearchParamOrFormDataOrBlobOrBuffer = (value) => {\n  return isPlainObject(value) || isURLSearchParam(value) || isFormDataOrFormData(value) || isBlobOrBuffer(value);\n};\n\nconst isPlainObjectOrArrayOrURLSearchParamOrFormDataOrBlobOrBuffer = (value) => {\n  return isPlainObject(value) || isURLSearchParam(value) || isFormDataOrFormData(value) || isBlobOrBuffer(value);\n};\n\nconst isPlainObjectOrArrayOrURLSearchParamOrFormDataOrBlobOrBuffer = (value) => {\n  return isPlainObject(value) || isURLSearchParam(value) || isFormDataOrFormData(value) || isBlobOrBuffer(value);\n};\n\nconst isPlainObjectOrArrayOrURLSearchParamOrFormDataOrBlobOrBuffer = (value) => {\n  return isPlainObject(value) || isURLSearchParam(value) || isFormDataOrFormData(value) || isBlobOrBuffer(value);\n};\n\nconst isPlainObjectOrArrayOrURLSearchParamOrFormDataOrBlobOrBuffer = (value) => {\n  return isPlainObject(value) || isURLSearchParam(value) || isFormDataOrFormData(value) || isBlobOrBuffer(value);\n};\n\nconst isPlainObjectOrArrayOrURLSearchParamOrFormDataOrBlobOrBuffer = (value) => {\n  return isPlainObject(value) || isURLSearchParam(value) || isFormDataOrFormData(value) || isBlobOrBuffer(value);\n};\n\nconst isPlainObjectOrArrayOrURLSearchParamOrFormDataOrBlobOrBuffer = (value) => {\n  return isPlainObject(value) || isURLSearchParam(value) || isFormDataOrFormData(value) || isBlobOrBuffer(value);\n};\n\nconst isPlainObjectOrArrayOrURLSearchParamOrFormDataOrBlobOrBuffer = (value) => {\n  return isPlainObject(value) || isURLSearchParam(value) || isFormDataOrFormData(value) || isBlobOrBuffer(value);\n};\n\nconst isPlainObjectOrArrayOrURLSearchParamOrFormDataOrBlobOrBuffer = (value) => {\n  return isPlainObject(value) || isURLSearchParam(value) || isFormDataOrFormData(value) || isBlobOrBuffer(value);\n};\n\nconst isPlainObjectOrArrayOrURLSearchParamOrFormDataOrBlobOrBuffer = (value) => {\n  return isPlainObject(value) || isURLSearchParam(value) || isFormDataOrFormData(value) || isBlobOrBuffer(value);\n};\n\nconst isPlainObjectOrArrayOrURLSearchParamOrFormDataOrBlobOrBuffer = (value) => {\n  return isPlainObject(value) || isURLSearchParam(value) || isFormDataOrFormData(value) || isBlobOrBuffer(value);\n};\n\nconst isPlainObjectOrArrayOrURLSearchParamOrFormDataOrBlobOrBuffer = (value) => {\n  return isPlainObject(value) || isURLSearchParam(value) || isFormDataOrFormData(value) || isBlobOrBuffer(value);\n};\n\nconst isPlainObjectOrArrayOrURLSearchParamOrFormDataOrBlobOrBuffer = (value) => {\n  return isPlainObject(value) || isURLSearchParam(value) || isFormDataOrFormData(value) || isBlobOrBuffer(value);\n};\n\nconst isPlainObjectOrArrayOrURLSearchParamOrFormDataOrBlobOrBuffer = (value) => {\n  return isPlainObject(value) || isURLSearchParam(value) || isFormDataOrFormData(value) || isBlobOrBuffer(value);\n};\n\nconst isPlainObjectOrArrayOrURLSearchParamOrFormDataOrBlobOrBuffer = (value) => {\n  return isPlainObject(value) || isURLSearchParam(value) || isFormDataOrFormData(value) || "}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\n\nconst fib = (n) => {\n  if (n == 0)\n    return 0;\n  if (n == 1)\n", "canonical_solution": "    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "partial": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n == 0)\n    return 0;\n  if (n == 1)\n    # print('@@this is the line to split##')\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "gc": "<|endoftext|>/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\n\nconst fib = (n) => {\n  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n-1) + fib(n-2);\n};\n\nmodule.exports = fib;\n\n},{}],9:[function(require,module,exports){\n/*\n  Fibonacci sequence generator.\n  \n  Fibonacci numbers are generated using Fibonacci sequence generator.\n  \n  Fibonacci sequence generator is based on following algorithm:\n  \n  1. Start with first element as 1.\n  2. Generate all fibonacci numbers from 1 to n.\n  3. Add first element to each of the fibonacci numbers and generate all fibonacci numbers from 2 to n.\n  4. Repeat steps 2 and 3 until all fibonacci numbers are generated.\n  \n  Fibonacci sequence generator is based on following algorithm:\n  \n  1. Start with first element as 1.\n  2. Generate all fibonacci numbers from 1 to n.\n  3. Add first element to each of the fibonacci numbers and generate all fibonacci numbers from 2 to n.\n  4. Repeat steps 2 and 3 until all fibonacci numbers are generated.\n  \n  Fibonacci sequence generator is based on following algorithm:\n  \n  1. Start with first element as 1.\n  2. Generate all fibonacci numbers from 1 to n.\n  3. Add first element to each of the fibonacci numbers and generate all fibonacci numbers from 2 to n.\n  4. Repeat steps 2 and 3 until all fibonacci numbers are generated.\n  \n  Fibonacci sequence generator is based on following algorithm:\n  \n  1. Start with first element as 1.\n  2. Generate all fibonacci numbers from 1 to n.\n  3. Add first element to each of the fibonacci numbers and generate all fibonacci numbers from 2 to n.\n  4. Repeat steps 2 and 3 until all fibonacci numbers are generated.\n  \n  Fibonacci sequence generator is based on following algorithm:\n  \n  1. Start with first element as 1.\n  2. Generate all fibonacci numbers from 1 to n.\n  3. Add first element to each of the fibonacci numbers and generate all fibonacci numbers from 2 to n.\n  4. Repeat steps 2 and 3 until all fibonacci numbers are generated.\n  \n  Fibonacci sequence generator is based on following algorithm:\n  \n  1. Start with first element as 1.\n  2. Generate all fibonacci numbers from 1 to n.\n  3. Add first element to each of the fibonacci numbers and generate all fibonacci numbers from 2 to n.\n  4. Repeat steps 2 and 3 until all fibonacci numbers are generated.\n  \n  Fibonacci sequence generator is based on following algorithm:\n  \n  1. Start with first element as 1.\n  2. Generate all fibonacci numbers from 1 to n.\n  3. Add first element to each of the fibonacci numbers and generate all fibonacci numbers from 2 to n.\n  4. Repeat steps 2 and 3 until all fibonacci numbers are generated.\n  \n  Fibonacci sequence generator is based on following algorithm:\n  \n  1. Start with first element as 1.\n  2. Generate all fibonacci numbers from 1 to n.\n  3. Add first element to each of the fibonacci numbers and generate all fibonacci numbers from 2 to n.\n  4. Repeat steps 2 and 3 until all fibonacci numbers are generated.\n  \n  Fibonacci sequence generator is based on following algorithm:\n  \n  1. Start with first element as 1.\n  2. Generate all fibonacci numbers from 1 to n.\n  3. Add first element to each of the fibonacci numbers and generate all fibonacci numbers from 2 to n.\n  4. Repeat steps 2 and 3 until all fibonacci numbers are generated.\n  \n  Fibonacci sequence generator is based on following algorithm:\n  \n  1. Start with first element as 1.\n  2. Generate all fibonacci numbers from 1 to n.\n  3. Add first element to each of the fibonacci numbers and generate all fibonacci numbers from 2 to n.\n  4. Repeat steps 2 and 3 until all fibonacci numbers are generated.\n  \n  Fibonacci sequence generator is based on following algorithm:\n  \n  1. Start with first element as 1.\n  2. Generate all fibonacci numbers from 1 to n.\n  3. Add first element to each of the fibonacci numbers and generate all fibonacci numbers from 2 to n.\n  4. Repeat steps 2 and 3 until all fibonacci numbers are generated.\n  \n  Fibonacci sequence generator is based on following algorithm:\n  \n  1. Start with first element as 1.\n  2. Generate all fibonacci numbers from 1 to n.\n  3. Add first element to each of the fibonacci numbers and generate all fibonacci numbers from 2 to n.\n  4. Repeat steps 2 and 3 until all fibonacci numbers are generated.\n  \n  Fibonacci sequence generator is based on following algorithm:\n  \n  1. Start with first element as 1.\n  2. Generate all fibonacci numbers from 1 to n.\n  3. Add first element to each of the fibonacci numbers and generate all fibonacci numbers from 2 to n.\n  4. Repeat steps 2 and 3 until all fibonacci numbers are generated.\n  \n  Fibonacci sequence generator is based on following algorithm:\n  \n  1. Start with first element as 1.\n  2. Generate all fibonacci numbers from 1 to n.\n  3. Add first element to each of the fibonacci numbers and generate all fibonacci numbers from 2 to n.\n  4. Repeat steps 2 and 3 until all fibonacci numbers are generated.\n  \n  Fibonacci sequence generator is based on following algorithm:\n  \n  1. Start with first element as 1.\n  2. Generate all fibonacci numbers from 1 to n.\n  3. Add first element to each of the fibonacci numbers and generate all fibonacci numbers from 2 to n.\n  4. Repeat steps 2 and 3 until all fibonacci numbers are generated.\n  \n  Fibonacci sequence generator is based on following algorithm:\n  \n  1. Start with first element as 1.\n  2. Generate all fibonacci numbers from 1 to n.\n  3. Add first element to each of the fibonacci numbers and generate all fibonacci numbers from 2 to n.\n  4. Repeat steps 2 and 3 until all fibonacci numbers are generated.\n  \n  Fibonacci sequence generator is based on following algorithm:\n  \n  1. Start with first element as 1.\n"}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\n\nconst correctBracketing = (brackets) => {\n  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n", "canonical_solution": "      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "partial": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      # print('@@this is the line to split##')\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "gc": "<|endoftext|>/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\n\nconst correctBracketing = (brackets) => {\n  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth == 0)\n      return false;\n  }\n  return true;\n};\n\nconst isBracketing = (str) => {\n  return correctBracketing(str);\n};\n\nconst isOpeningBracket = (str) => {\n  return isBracketing(str) && str.indexOf(\"<\") == 0;\n};\n\nconst isClosingBracket = (str) => {\n  return isBracketing(str) && str.indexOf(\">\") == str.length - 1;\n};\n\nconst isOpeningBracketOrClosingBracket = (str) => {\n  return isOpeningBracket(str) || isClosingBracket(str);\n};\n\nconst isOpeningBracketOrOpeningBracket = (str) => {\n  return isOpeningBracket(str) || isClosingBracket(str) || isOpeningBracket(str);\n};\n\nconst isOpeningBracketOrOpeningBracketOrClosingBracket = (str) => {\n  return isOpeningBracketOrOpeningBracket(str) || isClosingBracketOrOpeningBracket(str);\n};\n\nconst isOpeningBracketOrOpeningBracketOrOpeningBracketOrClosingBracket = (str) => {\n  return isOpeningBracketOrOpeningBracketOrOpeningBracket(str) || isClosingBracketOrOpeningBracketOrOpeningBracket(str);\n};\n\nconst isOpeningBracketOrOpeningBracketOrOpeningBracketOrOpeningBracketOrClosingBracket = (str) => {\n  return isOpeningBracketOrOpeningBracketOrOpeningBracketOrOpeningBracketOrClosingBracket(str) || isClosingBracketOrOpeningBracketOrOpeningBracketOrOpeningBracketOrClosingBracket(str);\n};\n\nconst isOpeningBracketOrOpeningBracketOrOpeningBracketOrOpeningBracketOrOpeningBracketOrClosingBracketOrClosingBracket = (str) => {\n  return isOpeningBracketOrOpeningBracketOrOpeningBracketOrOpeningBracketOrOpeningBracketOrOpeningBracketOrClosingBracketOrClosingBracket(str) || isClosingBracketOrOpeningBracketOrOpeningBracketOrOpeningBracketOrOpeningBracketOrOpeningBracketOrClosingBracketOrClosingBracket(str);\n};\n\nconst isOpeningBracketOrOpeningBracketOrOpeningBracketOrOpeningBracketOrOpeningBracketOrOpeningBracketOrClosingBracketOrClosingBracketOrClosingBracketOrClosingBracketOrClosingBracketOrClosingBracketOrClosingBracketOrClosingBracketOrClosingBracketOrClosingBracketOrClosingBracketOrClosingBracketOrClosingBracketOrClosingBracketOrClosingBracketOrClosingBracketOrClosingBracketOrClosingBracketOrClosingBracketOrClosingBracketOrClosingBracketOrClosingBracketOrClosingBracketOrClosingBracketOrClosingBracketOrClosingBracketOrClosingBracketOrClosingBracketOrClosingBracketOrClosingBracketOrClosingBracketOrClosingBracketOrClosingBracketOrClosingBracketOrClosingBracketOrClosingBracketOrClosingBracketOrClosingBracketOrClosingBracketOrClosingBracketOrClosingBracketOrClosingBracketOrClosingBracketOrClosingBracketOrClosingBracketOrClosingBracketOrClosingBracketOrClosingBracketOrClosingBracketOrClosingBracketOrClosingBracketOrClosingBracketOrClosingBracketOrClosingBracketOrClosingBracketOrClosingBracketOrClosingBracketOrClosingBracketOrClosingBracketOrClosingBracketOrClosingBracketOrClosingBracketOrClosingBracketOrClosingBracketOrClosingBracketOrClosingBracketOrClosingBracketOrClosingBracketOrClosingBracketOrClosingBracketOrClosingBracketOrClosingBracketOrClosingBracketOrClosingBracketOrClosingBracketOrClosingBracketOrClosingBracketOrClosingBracketOrClosingBracketOrClosingBracketOrClosingBracketOrClosingBracketOrClosingBracketOrClosingBracketOrClosingBracketOrClosingBracketOrClosingBracketOrClosingBracketOrClosingBracketOrClosingBracketOrClosingBracketOrClosingBracketOrClosingBracketOrClosingBracketOrClosingBracketOrClosingBracketOrClosingBracketOrClosingBracketOrClosingBracketOrClosingBracketOrClosingBracketOrClosingBracketOrClosingBracketOrClosingBracketOrClosingBracketOrClosingBracketOrClosingBracketOrClosingBracketOrClosingBracketOrClosingBracketOrClosingBracketOrClosingBracketOrClosingBracketOrClosingBracketOrClosingBracketOrClosingBracketOrClosingBracketOrClosingBracketOrClosingBracketOrClosingBracketOrClosingBracketOrClosingBracketOrClosingBracketOrClosingBracketOrClosingBracketOrClosingBracketOrClosingBracketOrClosingBracketOrClosingBracketOrClosingBracketOrClosingBracketOrClosingBracketOrClosingBracketOrClosingBracketOrClosingBracketOrClosingBracketOrClosingBracketOrClosingBracketOrClosingBracketOrClosingBracketOrClosingBracketOrClosingBracketOrClosingBracketOrClosingBracketOrClosingBracketOrClosingBracketOrClosingBracketOrClosingBracketOrClosingBracketOrClosingBracketOrClosingBracketOrClosingBracketOrClosingBracketOrClosingBracketOrClosingBracketOrClosingBracketOrClosingBracketOrClosingBracketOrClosingBracketOrClosingBracketOrClosingBracketOrClosingBracketOrClosingBracketOrClosingBracketOrClosingBracketOrClosingBracketOrClosingBracketOrClosingBracketOrClosingBracketOrClosingBracketOrClosingBracketOrClosingBracketOrClosingBracketOrClosingBracketOrClosingBracketOrClosingBracketOrClosingBracketOrClosingBracketOrClosingBracketOrClosingBracketOrClosing"}
{"task_id": "JavaScript/57", "prompt": "/*Return true is list elements are monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\n\nconst monotonic = (l) => {\n  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n", "canonical_solution": "      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "partial": "/*Return true is list elements are monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      # print('@@this is the line to split##')\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "gc": "<|endoftext|>/*Return true is list elements are monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\n\nconst monotonic = (l) => {\n  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2)) {\n    return true;\n  }\n  return false;\n};\n\n/*\n  Return true if list elements are in sorted order.\n  >>> sortedInOrder([1, 2, 4, 20])\n  true\n  >>> sortedInOrder([1, 20, 4, 10])\n  false\n  >>> sortedInOrder([4, 1, 0, -10])\n  true\n  */\n\nconst sortedInOrder = (l) => {\n  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2)) {\n    return true;\n  }\n  return false;\n};\n\n/*\n  Return true if list elements are in ascending order.\n  >>> ascending([1, 2, 4, 20])\n  true\n  >>> ascending([1, 20, 4, 10])\n  false\n  >>> ascending([4, 1, 0, -10])\n  true\n  */\n\nconst ascending = (l) => {\n  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2)) {\n    return true;\n  }\n  return false;\n};\n\n/*\n  Return true if list elements are in descending order.\n  >>> descending([1, 2, 4, 20])\n  true\n  >>> descending([1, 20, 4, 10])\n  false\n  >>> descending([4, 1, 0, -10])\n  true\n  */\n\nconst descending = (l) => {\n  var sort1 = [...l].sort((a, b) => b - a);\n  var sort2 = [...l].sort((a, b) => a - b);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2)) {\n    return true;\n  }\n  return false;\n};\n\n/*\n  Return true if list elements are in ascending or descending order.\n  >>> ascendingOrDescending([1, 2, 4, 20])\n  true\n  >>> ascendingOrDescending([1, 20, 4, 10])\n  false\n  >>> ascendingOrDescending([4, 1, 0, -10])\n  true\n  */\n\nconst ascendingOrDescending = (l) => {\n  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2)) {\n    return true;\n  }\n  return false;\n};\n\n/*\n  Return true if list elements are in ascending or descending order.\n  >>> ascendingOrDescending([1, 2, 4, 20])\n  true\n  >>> ascendingOrDescending([1, 20, 4, 10])\n  false\n  >>> ascendingOrDescending([4, 1, 0, -10])\n  true\n  */\n\nconst isSorted = (l) => {\n  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2)) {\n    return true;\n  }\n  return false;\n};\n\n/*\n  Return true if list elements are in ascending or descending order.\n  >>> ascendingOrDescending([1, 2, 4, 20])\n  true\n  >>> ascendingOrDescending([1, 20, 4, 10])\n  false\n  >>> ascendingOrDescending([4, 1, 0, -10])\n  true\n  */\n\nconst isDescending = (l) => {\n  var sort1 = [...l].sort((a, b) => b - a);\n  var sort2 = [...l].sort((a, b) => a - b);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2)) {\n    return true;\n  }\n  return false;\n};\n\n/*\n  Return true if list elements are in ascending or descending order.\n  >>> ascendingOrDescending([1, 2, 4, 20])\n  true\n  >>> ascendingOrDescending([1, 20, 4, 10])\n  false\n  >>> ascendingOrDescending([4, 1, 0, -10])\n  true\n  */\n\nconst isAscending = (l) => {\n  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2)) {\n    return true;\n  }\n  return false;\n};\n\n/*\n  Return true if list elements are in ascending or descending order.\n  >>> ascendingOrDescending([1, 2, 4, 20])\n  true\n  >>> ascendingOrDescending([1, 20, 4, 10])\n  false\n  >>> ascendingOrDescending([4, 1, 0, -10])\n  true\n  */\n\nconst isAscendingOrDescending = (l) => {\n  var sort1 = [...l].sort((a, b) => b - a);\n  var sort2 = [...l].sort((a, b) => a - b);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2)) {\n    return true;\n  }\n  return false;\n};\n\n/*\n  Return true if list elements are in ascending or descending order.\n  >>> ascendingOrDescending([1, 2, 4, 20])\n  true\n  >>> ascendingOrDescending([1, 20, 4, 10])\n  false\n  >>> ascendingOrDescending([4, 1, 0, -10])\n  true\n  */\n\nconst isInOrder = (l) => {\n  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2)) {\n    return true;\n  }\n  return false;\n};\n\n/*\n  Return true if list elements are in ascending or descending order.\n  >>> ascendingOrDescending([1, 2, 4, 20])\n  true\n  >>> ascendingOrDescending([1, 20, 4, 10])\n  false\n  >>> ascendingOrDescending([4, 1, 0, -10])\n  true\n  */\n\nconst isInOrderOrDescending = (l) => {\n  var sort1 = [...l].sort((a, b) => b - a);\n  var sort2 = [...l].sort((a, b) => a - b);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2)) {\n    return true;\n  }\n  return false;\n};\n\n/*\n  Return true if list elements are in ascending or descending order.\n  >>> ascendingOrDescending([1, 2, 4, 20])\n  true\n  >>> ascendingOrDescending([1, 20, 4, 10])\n  false\n  >>> ascendingOrDescending([4, 1, 0, -10])\n  true\n  */\n\nconst isInOrderOrDescendingOrAscending = (l) => {\n  var sort1 = [...l].sort((a, b) => b - a);\n  var sort2 = [...l].sort((a, b) => a - b);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2)) {\n    return true;\n  }\n  return false;\n};\n\n/*\n  Return true if list elements are in ascending or descending order.\n  >>> ascendingOrDescendingOrAscending([1, 2, 4, 20])\n  true\n  >>> "}
{"task_id": "JavaScript/58", "prompt": "/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\n\nconst common = (l1, l2) => {\n  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n", "canonical_solution": "      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "partial": "/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      # print('@@this is the line to split##')\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "gc": "<|endoftext|>/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\n\nconst common = (l1, l2) => {\n  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 === e2) ret.add(e1);\n  return Array.from(ret);\n};\n\n/*\n  >>> list(['foo', 'bar', 'baz', 'qux'])\n  ['foo', 'bar', 'baz', 'qux']\n  >>> list(['foo', 'bar', 'baz', 'qux'], [])\n  []\n  >>> list(['foo', 'bar', 'baz', 'qux'], ['foo', 'bar', 'baz', 'qux'])\n  ['foo', 'bar', 'baz', 'qux']\n  >>> list(['foo', 'bar', 'baz', 'qux'], ['foo', 'bar', 'baz', 'qux'], [])\n  []\n  >>> list(['foo', 'bar', 'baz', 'qux'], ['foo', 'bar', 'baz', 'qux'], [])\n  []\n  >>> list(['foo', 'bar', 'baz', 'qux'], ['foo', 'bar', 'baz', 'qux'], [])\n  []\n  >>> list(['foo', 'bar', 'baz', 'qux'], ['foo', 'bar', 'baz', 'qux'], [])\n  []\n  >>> list(['foo', 'bar', 'baz', 'qux'], ['foo', 'bar', 'baz', 'qux'], [])\n  []\n  >>> list(['foo', 'bar', 'baz', 'qux'], ['foo', 'bar', 'baz', 'qux'], [])\n  []\n  >>> list(['foo', 'bar', 'baz', 'qux'], ['foo', 'bar', 'baz', 'qux'], [])\n  []\n  >>> list(['foo', 'bar', 'baz', 'qux'], ['foo', 'bar', 'baz', 'qux'], [])\n  []\n  >>> list(['foo', 'bar', 'baz', 'qux'], ['foo', 'bar', 'baz', 'qux'], [])\n  []\n  >>> list(['foo', 'bar', 'baz', 'qux'], ['foo', 'bar', 'baz', 'qux'], [])\n  []\n  >>> list(['foo', 'bar', 'baz', 'qux'], ['foo', 'bar', 'baz', 'qux'], [])\n  []\n  >>> list(['foo', 'bar', 'baz', 'qux'], ['foo', 'bar', 'baz', 'qux'], [])\n  []\n  >>> list(['foo', 'bar', 'baz', 'qux'], ['foo', 'bar', 'baz', 'qux'], [])\n  []\n  >>> list(['foo', 'bar', 'baz', 'qux'], ['foo', 'bar', 'baz', 'qux'], [])\n  []\n  >>> list(['foo', 'bar', 'baz', 'qux'], ['foo', 'bar', 'baz', 'qux'], [])\n  []\n  >>> list(['foo', 'bar', 'baz', 'qux'], ['foo', 'bar', 'baz', 'qux'], [])\n  []\n  >>> list(['foo', 'bar', 'baz', 'qux'], ['foo', 'bar', 'baz', 'qux'], [])\n  []\n  >>> list(['foo', 'bar', 'baz', 'qux'], ['foo', 'bar', 'baz', 'qux'], [])\n  []\n  >>> list(['foo', 'bar', 'baz', 'qux'], ['foo', 'bar', 'baz', 'qux'], [])\n  []\n  >>> list(['foo', 'bar', 'baz', 'qux'], ['foo', 'bar', 'baz', 'qux'], [])\n  []\n  >>> list(['foo', 'bar', 'baz', 'qux'], ['foo', 'bar', 'baz', 'qux'], [])\n  []\n  >>> list(['foo', 'bar', 'baz', 'qux'], ['foo', 'bar', 'baz', 'qux'], [])\n  []\n  >>> list(['foo', 'bar', 'baz', 'qux'], ['foo', 'bar', 'baz', 'qux'], [])\n  []\n  >>> list(['foo', 'bar', 'baz', 'qux'], ['foo', 'bar', 'baz', 'qux'], [])\n  []\n  >>> list(['foo', 'bar', 'baz', 'qux'], ['foo', 'bar', 'baz', 'qux'], [])\n  []\n  >>> list(['foo', 'bar', 'baz', 'qux'], ['foo', 'bar', 'baz', 'qux'], [])\n  []\n  >>> list(['foo', 'bar', 'baz', 'qux'], ['foo', 'bar', 'baz', 'qux'], [])\n  []\n  >>> list(['foo', 'bar', 'baz', 'qux'], ['foo', 'bar', 'baz', 'qux'], [])\n  []\n  >>> list(['foo', 'bar', 'baz', 'qux'], ['foo', 'bar', 'baz', 'qux'], [])\n  []\n  >>> list(['foo', 'bar', 'baz', 'qux'], ['foo', 'bar', 'baz', 'qux'], [])\n  []\n  >>> list(['foo', 'bar', 'baz', 'qux'], ['foo', 'bar', 'baz', 'qux'], [])\n  []\n  >>> list(['foo', 'bar', 'baz', 'qux'], ['foo', 'bar', 'baz', 'qux'], [])\n  []\n  >>> list(['foo', 'bar', 'baz', 'qux'], ['foo', 'bar', 'baz', 'qux'], [])\n  []\n  >>> list(['foo', 'bar', 'baz', 'qux'], ['foo', 'bar', 'baz', 'qux'], [])\n  []\n  >>> list(['foo', 'bar', 'baz', 'qux'], ['foo', 'bar', 'baz', 'qux'], [])\n  []\n  >>> list(['foo', 'bar', 'baz', 'qux'], ['foo', 'bar', 'baz', 'qux'], [])\n  []\n  >>> list(['foo', 'bar', 'baz', 'qux'], ['foo', 'bar', 'baz', 'qux'], [])\n  []\n  >>> list(['foo', 'bar', 'baz', 'qux'], ['foo', 'bar', 'baz', 'qux'], [])\n  []\n  >>> list(['foo', 'bar', 'baz', 'qux'], ['foo', 'bar', 'baz', 'qux'], [])\n  []\n  >>> list(['foo', 'bar', 'baz', 'qux'], ['foo', 'bar', 'baz', 'qux'], [])\n  []\n  >>> list(['foo', 'bar', 'baz', 'qux'], ['foo', 'bar', 'baz', 'qux'], [])\n  []\n  >>> list(['foo', 'bar', 'baz', 'qux'], ['foo', 'bar', 'baz', 'qux'], [])\n  []\n  >>> list(['foo', 'bar', 'baz', 'qux'], ['foo', 'bar', 'baz', 'qux'], [])\n  []\n  >>> list(['foo', 'bar', 'baz', 'qux'], ['foo', 'bar', 'baz', 'qux'], [])\n  []\n  >>> list(['foo', 'bar', 'baz', 'qux'], ['foo', 'bar', 'baz', 'qux'], [])\n  []\n  >>> list(['foo', 'bar', 'baz', 'qux'], ['foo', 'bar', 'baz', 'qux'], [])\n  []\n  >>> list(['foo', 'bar', 'baz', 'qux'], ['foo', 'bar', 'baz', 'qux'], [])\n  []\n  >>> list(['foo', 'bar', 'baz', 'qux'], ['foo', 'bar', 'baz', 'qux'], [])\n  []\n  >>> list(['foo', 'bar', 'baz', 'qux'], ['foo', 'bar', 'baz', 'qux'], [])\n  []\n  >>> list(['foo', 'bar', 'baz', 'qux'], ['foo', 'bar', 'baz', 'qux'], [])\n  []"}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\n\nconst largestPrimeFactor = (n) => {\n  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n", "canonical_solution": "  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "partial": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n    # print('@@this is the line to split##')\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "gc": "<|endoftext|>/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\n\nconst largestPrimeFactor = (n) => {\n  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  };\n\n  var factors = [];\n  var factor = 1;\n  var isFactor = true;\n  while (isPrime(factor)) {\n    factors.push(factor);\n    factor *= 2;\n  }\n  factors.reverse();\n  factors.sort((a, b) => b - a);\n  var largest = factors[0];\n  for (var i = 1; i < factors.length; i++) {\n    if (factors[i] > largest) {\n      largest = factors[i];\n    }\n  }\n  return largest;\n};\n\n/*\n  Given a positive integer n, return true if the number is divisible by 2, 3, 5, 7, or 9.\n  >>> isDivisibleByFive(15)\n  true\n  >>> isDivisibleByFive(17)\n  false\n  >>> isDivisibleByFive(17)\n  true\n  >>> isDivisibleByFive(17)\n  true\n  >>> isDivisibleByFive(17)\n  false\n  >>> isDivisibleByFive(17)\n  true\n  >>> isDivisibleByFive(17)\n  true\n  >>> isDivisibleByFive(17)\n  false\n  >>> isDivisibleByFive(17)\n  true\n  >>> isDivisibleByFive(17)\n  true\n  >>> isDivisibleByFive(17)\n  false\n  >>> isDivisibleByFive(17)\n  true\n  >>> isDivisibleByFive(17)\n  true\n  >>> isDivisibleByFive(17)\n  false\n  >>> isDivisibleByFive(17)\n  true\n  >>> isDivisibleByFive(17)\n  true\n  >>> isDivisibleByFive(17)\n  false\n  >>> isDivisibleByFive(17)\n  true\n  >>> isDivisibleByFive(17)\n  true\n  >>> isDivisibleByFive(17)\n  false\n  >>> isDivisibleByFive(17)\n  true\n  >>> isDivisibleByFive(17)\n  true\n  >>> isDivisibleByFive(17)\n  false\n  >>> isDivisibleByFive(17)\n  true\n  >>> isDivisibleByFive(17)\n  true\n  >>> isDivisibleByFive(17)\n  false\n  >>> isDivisibleByFive(17)\n  true\n  >>> isDivisibleByFive(17)\n  true\n  >>> isDivisibleByFive(17)\n  false\n  >>> isDivisibleByFive(17)\n  true\n  >>> isDivisibleByFive(17)\n  true\n  >>> isDivisibleByFive(17)\n  false\n  >>> isDivisibleByFive(17)\n  true\n  >>> isDivisibleByFive(17)\n  true\n  >>> isDivisibleByFive(17)\n  false\n  >>> isDivisibleByFive(17)\n  true\n  >>> isDivisibleByFive(17)\n  true\n  >>> isDivisibleByFive(17)\n  false\n  >>> isDivisibleByFive(17)\n  true\n  >>> isDivisibleByFive(17)\n  true\n  >>> isDivisibleByFive(17)\n  false\n  >>> isDivisibleByFive(17)\n  true\n  >>> isDivisibleByFive(17)\n  true\n  >>> isDivisibleByFive(17)\n  false\n  >>> isDivisibleByFive(17)\n  true\n  >>> isDivisibleByFive(17)\n  true\n  >>> isDivisibleByFive(17)\n  false\n  >>> isDivisibleByFive(17)\n  true\n  >>> isDivisibleByFive(17)\n  true\n  >>> isDivisibleByFive(17)\n  false\n  >>> isDivisibleByFive(17)\n  true\n  >>> isDivisibleByFive(17)\n  true\n  >>> isDivisibleByFive(17)\n  false\n  >>> isDivisibleByFive(17)\n  true\n  >>> isDivisibleByFive(17)\n  true\n  >>> isDivisibleByFive(17)\n  false\n  >>> isDivisibleByFive(17)\n  true\n  >>> isDivisibleByFive(17)\n  true\n  >>> isDivisibleByFive(17)\n  false\n  >>> isDivisibleByFive(17)\n  true\n  >>> isDivisibleByFive(17)\n  true\n  >>> isDivisibleByFive(17)\n  false\n  >>> isDivisibleByFive(17)\n  true\n  >>> isDivisibleByFive(17)\n  true\n  >>> isDivisibleByFive(17)\n  false\n  >>> isDivisibleByFive(17)\n  true\n  >>> isDivisibleByFive(17)\n  true\n  >>> isDivisibleByFive(17)\n  false\n  >>> isDivisibleByFive(17)\n  true\n  >>> isDivisibleByFive(17)\n  true\n  >>> isDivisibleByFive(17)\n  false\n  >>> isDivisibleByFive(17)\n  true\n  >>> isDivisibleByFive(17)\n  true\n  >>> isDivisibleByFive(17)\n  false\n  >>> isDivisibleByFive(17)\n  true\n  >>> isDivisibleByFive(17)\n  true\n  >>> isDivisibleByFive(17)\n  false\n  >>> isDivisibleByFive(17)\n  true\n  >>> isDivisibleByFive(17)\n  true\n  >>> isDivisibleByFive(17)\n  false\n  >>> isDivisibleByFive(17)\n  true\n  >>> isDivisibleByFive(17)\n  true\n  >>> isDivisibleByFive(17)\n  false\n  >>> isDivisibleByFive(17)\n  true\n  >>> isDivisibleByFive(17)\n  true\n  >>> isDivisibleByFive(17)\n  false\n  >>> isDivisibleByFive(17)\n  true\n  >>> isDivisibleByFive(17)\n  true\n  >>> isDivisibleByFive(17)\n  false\n  >>> isDivisibleByFive(17)\n  true\n  >>> isDivisibleByFive(17)\n  true\n  >>> isDivisibleByFive(17)\n  false\n  >>> isDivisibleByFive(17)\n  true\n  >>> isDivisibleByFive(17)\n  true\n  >>> isDivisibleByFive(17)\n  false\n  >>> is"}
{"task_id": "JavaScript/60", "prompt": "/*sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\n\nconst sumToN = (n) => {\n  return n * (n + 1) / 2;\n", "canonical_solution": "}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "partial": "/*sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  return n * (n + 1) / 2;\n  # print('@@this is the line to split##')\n}\n\n", "gc": "<|endoftext|>/*sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\n\nconst sumToN = (n) => {\n  return n * (n + 1) / 2;\n};\n\n/*\n  A function that returns the sum of all numbers from 1 to n.\n  >>> sum(1)\n  1\n  >>> sum(5)\n  15\n  >>> sum(10)\n  55\n  >>> sum(100)\n  5050\n  >>> sum(1000)\n  5050\n  >>> sum(10000)\n  5050\n  >>> sum(100000)\n  5050\n  >>> sum(1000000)\n  5050\n  >>> sum(10000000)\n  5050\n  >>> sum(100000000)\n  5050\n  >>> sum(1000000000)\n  5050\n  >>> sum(10000000000)\n  5050\n  >>> sum(100000000000)\n  5050\n  >>> sum(1000000000000)\n  5050\n  >>> sum(10000000000000)\n  5050\n  >>> sum(100000000000000)\n  5050\n  >>> sum(1000000000000000)\n  5050\n  >>> sum(10000000000000000)\n  5050\n  >>> sum(100000000000000000)\n  5050\n  >>> sum(1000000000000000001)\n  5050\n  >>> sum(1000000000000000000)\n  5050\n  >>> sum(100000000000000000000)\n  5050\n  >>> sum(1000000000000000000000)\n  5050\n  >>> sum(10000000000000000000000)\n  5050\n  >>> sum(100000000000000000000000)\n  5050\n  >>> sum(1000000000000000000000000)\n  5050\n  >>> sum(10000000000000000000000000)\n  5050\n  >>> sum(100000000000000000000000001)\n  5050\n  >>> sum(100000000000000000000000000)\n  5050\n  >>> sum(1000000000000000000000000000)\n  5050\n  >>> sum(10000000000000000000000000000)\n  5050\n  >>> sum(100000000000000000000000000000)\n  5050\n  >>> sum(1000000000000000000000000000000)\n  5050\n  >>> sum(10000000000000000000000000000000)\n  5050\n  >>> sum(100000000000000000000000000000000)\n  5050\n  >>> sum(1000000000000000000000000000000000)\n  5050\n  >>> sum(10000000000000000000000000000000001)\n  5050\n  >>> sum(10000000000000000000000000000000000)\n  5050\n  >>> sum(1000000000000000000000000000000000000)\n  5050\n  >>> sum(10000000000000000000000000000000000000)\n  5050\n  >>> sum(100000000000000000000000000000000000000)\n  5050\n  >>> sum(1000000000000000000000000000000000000000)\n  5050\n  >>> sum(10000000000000000000000000000000000000000)\n  5050\n  >>> sum(100000000000000000000000000000000000000000)\n  5050\n  >>> sum(1000000000000000000000000000000000000000001)\n  5050\n  >>> sum(1000000000000000000000000000000000000000000)\n  5050\n  >>> sum(10000000000000000000000000000000000000000000)\n  5050\n  >>> sum(100000000000000000000000000000000000000000000)\n  5050\n  >>> sum(1000000000000000000000000000000000000000000000)\n  5050\n  >>> sum(10000000000000000000000000000000000000000000000)\n  5050\n  >>> sum(100000000000000000000000000000000000000000000000)\n  5050\n  >>> sum(1000000000000000000000000000000000000000000000000)\n  5050\n  >>> sum(10000000000000000000000000000000000000000000000000)\n  5050\n  >>> sum(100000000000000000000000000000000000000000000000001)\n  5050\n  >>> sum(100000000000000000000000000000000000000000000000000)\n  5050\n  >>> sum(1000000000000000000000000000000000000000000000000000)\n  5050\n  >>> sum(10000000000000000000000000000000000000000000000000000)\n  5050\n  >>> sum(100000000000000000000000000000000000000000000000000000)\n  5050\n  >>> sum(1000000000000000000000000000000000000000000000000000000)\n  5050\n  >>> sum(10000000000000000000000000000000000000000000000000000000)\n  5050\n  >>> sum(100000000000000000000000000000000000000000000000000000000)\n  5050\n  >>> sum(1000000000000000000000000000000000000000000000000000000000)\n  5050\n  >>> sum(10000000000000000000000000000000000000000000000000000000001)\n  5050\n  >>> sum(10000000000000000000000000000000000000000000000000000000000)\n  5050\n  >>> sum(100000000000000000000000000000000000000000000000000000000000)\n  5050\n  >>> sum(1000000000000000000000000000000000000000000000000000000000000)\n  5050\n  >>> sum(100000000000000000000000000000000000000000000000000000000)\n  5050\n  >>> sum(1000000000000000000000000000000000000000000000000000000000)\n  5050\n  >>> sum(10000000000000000000000000000000000000000000000000000000001)\n  5050\n  >>> sum(10000000000000000000000000000000000000000000000000000000000)\n  5050\n  >>> sum(100000000000000000000000000000000000000000000000000000000000)\n  5050\n  >>> sum(1000000000000000000000000000000000000000000000000000000000000)\n  5050\n  >>> sum(10000000000000000000000000000000000000000000000000000000000000)\n  5050\n  >>> sum(100000000000000000000000000000000000000000000000000000000000000)\n  5050\n  >>> sum(1000000000000000000000000000000000000000000000000000000000000000)\n  5050\n  >>> sum(10000000000000000000000000000000000000000000000000000000000000000)\n  5050\n  >>> sum(100000000000000000000000000000000000000000000000000000000000000000)\n  5050\n  >>> sum(10000000000000000000000000000000000000000000000000000000001)\n  5050\n  >>> sum(10000000000000000000000000000000000000000000000000000000000)\n  5050\n  >>> sum(100000000000000000000000000000000000000000000000000000000000)\n  5050\n  >>> sum(1000000000000000000000000000000000000000000000000000000000000)\n  5050\n  >>> sum(10000000000000000000000000000000000000000000000000000000000000)\n  5050\n  >>> sum(100000000000000000000000000000000000000000000000000000000000000)\n  5050\n  >>> sum(1000000000000000000000000000000000000000000000000000000000000000)\n  5050\n  >>> sum(10000000000000000000000000000000000000000000000000000000000000000)\n  5050\n  >>> sum(100000000000000000000000000000000000000000000000000000000000000000)\n  5050\n  >>> sum(1000000000000000000000000000000000000000000000000000000000000000001)\n  5050\n  >>> sum(10000000000000000000000000000000000000000000000000000000000)\n  5050\n  >>> sum(100000000000000000000000000000000000000000000000000000000000)\n  5050\n  >>> sum(1000000000000000000000000000000000000000000000000000000000000)\n  5050\n  >>> sum(10000000000000000000000000000000000000000000000000000000000000)\n  5050\n  >>> sum(100000000000000000000000000000000000000000000000000000000000000)\n  5050\n  >>> sum(1000000000000000000000000000000000000000000000000000000000000000)\n  5050\n  >>> sum(10000000000000000000000000000000000000000000000000000000000000000)\n  5050\n  >>> sum(100000000000000000000000000000000000000000000000000000000000000000)\n  5050\n  >>> sum(1000000000000000000000000000000000000000000000000000000000000000001)\n  5050\n  >>> sum(10000000000000000000000000000000000000000000000000000000000)\n  5050\n  >>> sum(100000000000000000000000000000000000000000000000000000000000)\n  5050\n  >>> sum(1000000000000000000000000000000000000000000000000000000000000)\n  5050\n  >>> sum(10000000000000000000000000000000000000000000000000000000000000)\n  5050\n  >>> sum(100000000000000000000000000000000000000000000000000000000000000)\n  5050\n  >>> sum(1000000000000000000000000000000000000000000000000000000000000000)\n  5050\n  >>> sum(10000000000000000000000000000000000000000000000000000000000000000)\n  5050\n  >>> sum(100000000000000000000000000000000000000000000000000000000000000000)\n  5050\n  >>> sum(1000000000000000000000000000000000000000000000000000000000000000001)\n  5050\n  >>> sum(10000000000000000000000000000000000000000000000000000000000)\n  5050\n  >>> "}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\n\nconst correctBracketing = (brackets) => {\n  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n", "canonical_solution": "      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "partial": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      # print('@@this is the line to split##')\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "gc": "<|endoftext|>/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\n\nconst correctBracketing = (brackets) => {\n  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth == 0)\n      return false;\n  }\n  return true;\n};\n\nmodule.exports = correctBracketing;\n\n/***/ }),\n/* 6 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nconst correctBracketing = __webpack_require__(5);\n\nconst correctParenthesis = (parenthesis) => {\n  var depth = 0;\n  for (const p of parenthesis) {\n    if (p == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth == 0)\n      return false;\n  }\n  return true;\n};\n\nmodule.exports = correctParenthesis;\n\n/***/ }),\n/* 7 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nconst correctBracketing = __webpack_require__(6);\n\nconst correctParenthesis = (parenthesis) => {\n  var depth = 0;\n  for (const p of parenthesis) {\n    if (p == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth == 0)\n      return false;\n  }\n  return true;\n};\n\nmodule.exports = correctParenthesis;\n\n/***/ }),\n/* 8 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nconst correctBracketing = __webpack_require__(7);\n\nconst correctParenthesis = (parenthesis) => {\n  var depth = 0;\n  for (const p of parenthesis) {\n    if (p == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth == 0)\n      return false;\n  }\n  return true;\n};\n\nmodule.exports = correctParenthesis;\n\n/***/ }),\n/* 9 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nconst correctBracketing = __webpack_require__(8);\n\nconst correctParenthesis = (parenthesis) => {\n  var depth = 0;\n  for (const p of parenthesis) {\n    if (p == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth == 0)\n      return false;\n  }\n  return true;\n};\n\nmodule.exports = correctParenthesis;\n\n/***/ }),\n/* 10 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nconst correctBracketing = __webpack_require__(9);\n\nconst correctParenthesis = (parenthesis) => {\n  var depth = 0;\n  for (const p of parenthesis) {\n    if (p == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth == 0)\n      return false;\n  }\n  return true;\n};\n\nmodule.exports = correctParenthesis;\n\n/***/ }),\n/* 11 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nconst correctBracketing = __webpack_require__(10);\n\nconst correctParenthesis = (parenthesis) => {\n  var depth = 0;\n  for (const p of parenthesis) {\n    if (p == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth == 0)\n      return false;\n  }\n  return true;\n};\n\nmodule.exports = correctParenthesis;\n\n/***/ }),\n/* 12 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nconst correctBracketing = __webpack_require__(11);\n\nconst correctParenthesis = (parenthesis) => {\n  var depth = 0;\n  for (const p of parenthesis) {\n    if (p == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth == 0)\n      return false;\n  }\n  return true;\n};\n\nmodule.exports = correctParenthesis;\n\n/***/ }),\n/* 13 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nconst correctBracketing = __webpack_require__(12);\n\nconst correctParenthesis = (parenthesis) => {\n  var depth = 0;\n  for (const p of parenthesis) {\n    if (p == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth == 0)\n      return false;\n  }\n  return true;\n};\n\nmodule.exports = correctParenthesis;\n\n/***/ }),\n/* 14 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nconst correctBracketing = __webpack_require__(13);\n\nconst correctParenthesis = (parenthesis) => {\n  var depth = 0;\n  for (const p of parenthesis) {\n    if (p == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth == 0)\n      return false;\n  }\n  return true;\n};\n\nmodule.exports = correctParenthesis;\n\n/***/ }),\n/* 15 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nconst correctBracketing = __webpack_require__(14);\n\nconst correctParenthesis = (parenthesis) => {\n  var depth = 0;\n  for (const p of parenthesis) {\n    if (p == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth == 0)\n      return false;\n  }\n  return true;\n};\n\nmodule.exports = correctParenthesis;\n\n/***/ }),\n/* 16 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nconst correctBracketing = __webpack_require__(15);\n\nconst correctParenthesis = (parenthesis) => {\n  var depth = 0;\n  for (const p of parenthesis) {\n    if (p == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth == 0)\n      return false;\n  }\n  return true;\n};\n\nmodule.exports = correctParenthesis;\n\n/***/ }),\n/* 17 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nconst correctBracketing = __webpack_require__(16);\n\nconst correctParenthesis = (parenthesis) => {\n  var depth = 0;\n  for (const p of parenthesis) {\n    if (p == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth == 0)\n      return false;\n  }\n  return true;\n};\n\nmodule.exports = correctParenthesis;\n\n/***/ }),\n/* 18 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nconst correctBracketing = __webpack_require__(17);\n\nconst correctParenthesis = (parenthesis) => {\n  var depth = 0;\n  for (const p of parenthesis) {\n    if (p == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth == 0)\n      return false;\n  }\n  return true;\n};\n\nmodule.exports = correctParenthesis;\n\n/***/ }),\n/* 19 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nconst correctBracketing = __webpack_require__(18);\n\nconst correctParenthesis = (parenthesis) => {\n  var depth = 0;\n  for (const p of parenthesis) {\n    if (p == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth == 0)\n      return false;\n  }\n  return true;\n};\n\nmodule.exports = correctParenthesis;\n\n/***/ }),\n/* 20 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nconst correctBracketing = __webpack_require__(19);\n\nconst correctParenthesis = (parenthesis) => {\n  var depth = 0;\n  for (const p of parenthesis) {\n    if (p == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth == 0)\n      return false;\n  }\n  return true;\n};\n\nmodule.exports = correctParenthesis;\n\n/***/ }),\n/* 21 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nconst correctBracketing = __webpack_require__(20);\n\nconst correctParenthesis = (parenthesis) => {\n  var depth = 0;\n  for (const p of parenthesis) {\n    if (p == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth == 0)\n      return false;\n  }\n  return true;\n};\n\nmodule.exports = correctParenthesis;\n\n/***/ }),\n/* 22 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nconst correctBracketing = __webpack_require__(21);\n\nconst correctParenthesis = (parenthesis) => {\n  var depth = 0;\n  for (const p of parenthesis) {\n    if (p == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth == 0)\n      return false;\n  }\n  return true;\n};\n\nmodule.exports = correctParenthesis;\n\n/***/ }),\n/* 23 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nconst correctBracketing = __webpack_require__(22);\n\nconst correctParenthesis = (parenthesis) => {\n  var depth = 0;\n  for (const p of parenthesis) {\n    if (p == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth == 0)\n      return false;\n"}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\n\nconst derivative = (xs) => {\n  return xs.map((x, i) => x * i).slice(1);\n", "canonical_solution": "}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "partial": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  return xs.map((x, i) => x * i).slice(1);\n  # print('@@this is the line to split##')\n}\n\n", "gc": "<|endoftext|>/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\n\nconst derivative = (xs) => {\n  return xs.map((x, i) => x * i).slice(1);\n};\n\nmodule.exports = derivative;\n\n},{\"./utils\":5}],5:[function(require,module,exports){\nconst utils = require('./utils');\n\nconst toFixed = (n, digits) => {\n  const factor = Math.pow(10, digits);\n  return Math.round(factor * n) / factor;\n};\n\nconst toFixedNumber = (n, digits) => {\n  const factor = Math.pow(10, digits);\n  return parseFloat(n.toFixed(digits));\n};\n\nconst toFixedString = (n, digits) => {\n  const factor = Math.pow(10, digits);\n  return n.toFixed(digits);\n};\n\nconst toFixedArray = (n, digits) => {\n  const factor = Math.pow(10, digits);\n  return n.map(x => x.toFixed(digits));\n};\n\nconst toFixedObject = (n, digits) => {\n  const factor = Math.pow(10, digits);\n  return n.map(x => x.toFixed(digits));\n};\n\nconst toFixedStringArray = (n, digits) => {\n  const factor = Math.pow(10, digits);\n  return n.map(x => x.toFixed(digits));\n};\n\nconst toFixedStringObject = (n, digits) => {\n  const factor = Math.pow(10, digits);\n  return n.map(x => x.toFixed(digits));\n};\n\nconst toFixedArrayObject = (n, digits) => {\n  const factor = Math.pow(10, digits);\n  return n.map(x => x.toFixed(digits));\n};\n\nconst toFixedStringArrayObject = (n, digits) => {\n  const factor = Math.pow(10, digits);\n  return n.map(x => x.toFixed(digits));\n};\n\nconst toFixedStringArrayObjectObject = (n, digits) => {\n  const factor = Math.pow(10, digits);\n  return n.map(x => x.toFixed(digits));\n};\n\nconst toFixedStringArrayObjectObjectObject = (n, digits) => {\n  const factor = Math.pow(10, digits);\n  return n.map(x => x.toFixed(digits));\n};\n\nconst toFixedStringArrayObjectObjectObjectObject = (n, digits) => {\n  const factor = Math.pow(10, digits);\n  return n.map(x => x.toFixed(digits));\n};\n\nconst toFixedStringArrayObjectObjectObjectObjectObject = (n, digits) => {\n  const factor = Math.pow(10, digits);\n  return n.map(x => x.toFixed(digits));\n};\n\nconst toFixedStringArrayObjectObjectObjectObjectObjectObject = (n, digits) => {\n  const factor = Math.pow(10, digits);\n  return n.map(x => x.toFixed(digits));\n};\n\nconst toFixedStringArrayObjectObjectObjectObjectObjectObjectObjectObject = (n, digits) => {\n  const factor = Math.pow(10, digits);\n  return n.map(x => x.toFixed(digits));\n};\n\nconst toFixedStringArrayObjectObjectObjectObjectObjectObjectObjectObjectObjectObject = (n, digits) => {\n  const factor = Math.pow(10, digits);\n  return n.map(x => x.toFixed(digits));\n};\n\nconst toFixedStringArrayObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObject = (n, digits) => {\n  const factor = Math.pow(10, digits);\n  return n.map(x => x.toFixed(digits));\n};\n\nconst toFixedStringArrayObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObject"}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\n\nconst fibfib = (n) => {\n  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n", "canonical_solution": "    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "partial": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    # print('@@this is the line to split##')\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "gc": "<|endoftext|>/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\n\nconst fibfib = (n) => {\n  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\nmodule.exports = fibfib;\n\n},{}],7:[function(require,module,exports){\n/*\n  A Fibonacci sequence is a sequence that starts with 0 and ends with 1.\n  FibFib is a function that computes the n-th element of the Fibonacci sequence.\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\n\nconst fibfib = (n) => {\n  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n-1) + fibfib(n-2);\n};\n\nmodule.exports = fibfib;\n\n},{}],8:[function(require,module,exports){\n/*\n  A Fibonacci sequence is a sequence that starts with 0 and ends with 1.\n  FibFib is a function that computes the n-th element of the Fibonacci sequence.\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\n\nconst fibfib = (n) => {\n  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n-1) + fibfib(n-2);\n};\n\nmodule.exports = fibfib;\n\n},{}],9:[function(require,module,exports){\n/*\n  A Fibonacci sequence is a sequence that starts with 0 and ends with 1.\n  FibFib is a function that computes the n-th element of the Fibonacci sequence.\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\n\nconst fibfib = (n) => {\n  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n-1) + fibfib(n-2);\n};\n\nmodule.exports = fibfib;\n\n},{}],10:[function(require,module,exports){\n/*\n  A Fibonacci sequence is a sequence that starts with 0 and ends with 1.\n  FibFib is a function that computes the n-th element of the Fibonacci sequence.\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\n\nconst fibfib = (n) => {\n  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n-1) + fibfib(n-2);\n};\n\nmodule.exports = fibfib;\n\n},{}],11:[function(require,module,exports){\n/*\n  A Fibonacci sequence is a sequence that starts with 0 and ends with 1.\n  FibFib is a function that computes the n-th element of the Fibonacci sequence.\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\n\nconst fibfib = (n) => {\n  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n-1) + fibfib(n-2);\n};\n\nmodule.exports = fibfib;\n\n},{}],12:[function(require,module,exports){\n/*\n  A Fibonacci sequence is a sequence that starts with 0 and ends with 1.\n  FibFib is a function that computes the n-th element of the Fibonacci sequence.\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\n\nconst fibfib = (n) => {\n  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n-1) + fibfib(n-2);\n};\n\nmodule.exports = fibfib;\n\n},{}],13:[function(require,module,exports){\n/*\n  A Fibonacci sequence is a sequence that starts with 0 and ends with 1.\n  FibFib is a function that computes the n-th element of the Fibonacci sequence.\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\n\nconst fibfib = (n) => {\n  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n-1) + fibfib(n-2);\n};\n\nmodule.exports = fibfib;\n\n},{}],14:[function(require,module,exports){\n/*\n  A Fibonacci sequence is a sequence that starts with 0 and ends with 1.\n  FibFib is a function that computes the n-th element of the Fibonacci sequence.\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\n\nconst fibfib = (n) => {\n  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n-1) + fibfib(n-2);\n};\n\nmodule.exports = fibfib;\n\n},{}],15:[function(require,module,exports){\n/*\n  A Fibonacci sequence is a sequence that starts with 0 and ends with 1.\n  FibFib is a function that computes the n-th element of the Fibonacci sequence.\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\n\nconst fibfib = (n) => {\n  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n-1) + fibfib(n-2);\n};\n\nmodule.exports = fibfib;\n\n},{}],16:[function(require,module,exports){\n/*\n  A Fibonacci sequence is a sequence that starts with 0 and ends with 1.\n  FibFib is a function that computes the n-th element of the Fibonacci sequence.\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\n\nconst fibfib = (n) => {\n  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n-1) + fibfib(n-2);\n};\n\nmodule.exports = fibfib;\n\n},{}],17:[function(require,module,exports){\n/*\n  A Fibonacci sequence is a sequence that starts with 0 and ends with 1.\n  FibFib is a function that computes the n-th element of the Fibonacci sequence.\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\n\nconst fibfib = (n) => {\n  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n-1) + fibfib(n-2);\n};\n\nmodule.exports = fibfib;\n\n},{}],18:[function(require,module,exports){\n/*\n  A Fibonacci sequence is a sequence that starts with 0 and ends with 1.\n  FibFib is a function that computes the n-th element of the Fibonacci sequence.\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\n\nconst fibfib = (n) => {\n  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n-1) + fibfib(n-2);\n};\n\nmodule.exports = fibfib;\n\n},{}],19:[function(require,module,exports){\n/*\n  A Fibonacci sequence is a sequence that starts with 0 and ends with 1."}
{"task_id": "JavaScript/64", "prompt": "/*Write a function vowelsCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\n\nconst vowelsCount = (s) => {\n  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n", "canonical_solution": "  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "partial": "/*Write a function vowelsCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  # print('@@this is the line to split##')\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "gc": "<|endoftext|>/*Write a function vowelsCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\n\nconst vowelsCount = (s) => {\n  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  return n_vowels;\n};\n\n/*Write a function vowelsCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\n\nconst vowelsCount = (s) => {\n  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  return n_vowels;\n};\n\n/*Write a function vowelsCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\n\nconst vowelsCount = (s) => {\n  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  return n_vowels;\n};\n\n/*Write a function vowelsCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\n\nconst vowelsCount = (s) => {\n  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  return n_vowels;\n};\n\n/*Write a function vowelsCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\n\nconst vowelsCount = (s) => {\n  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  return n_vowels;\n};\n\n/*Write a function vowelsCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\n\nconst vowelsCount = (s) => {\n  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  return n_vowels;\n};\n\n/*Write a function vowelsCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\n\nconst vowelsCount = (s) => {\n  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  return n_vowels;\n};\n\n/*Write a function vowelsCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\n\nconst vowelsCount = (s) => {\n  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  return n_vowels;\n};\n\n/*Write a function vowelsCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\n\nconst vowelsCount = (s) => {\n  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  return n_vowels;\n};\n\n/*Write a function vowelsCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\n\nconst vowelsCount = (s) => {\n  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  return n_vowels;\n};\n\n/*Write a function vowelsCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\n\nconst vowelsCount = (s) => {\n  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  return n_"}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\n\nconst circularShift = (x, shift) => {\n  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n", "canonical_solution": "  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "partial": "/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n    # print('@@this is the line to split##')\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "gc": "<|endoftext|>/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\n\nconst circularShift = (x, shift) => {\n  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.split('').reverse().slice(shift).join('');\n};\n\n/*\n  Convert a number to a string in base 10.\n  >>> toBase10(123)\n  \"123\"\n  >>> toBase10(123)\n  \"0123\"\n  >>> toBase10(123)\n  \"000123\"\n  >>> toBase10(123)\n  \"0000123\"\n  >>> toBase10(123)\n  \"00000123\"\n  >>> toBase10(123)\n  \"000000123\"\n  >>> toBase10(123)\n  \"0000000123\"\n  >>> toBase10(123)\n  \"00000000123\"\n  >>> toBase10(123)\n  \"000000000000123\"\n  >>> toBase10(123)\n  \"0000000000000123\"\n  >>> toBase10(123)\n  \"00000000000000123\"\n  >>> toBase10(123)\n  \"000000000000000123\"\n  >>> toBase10(123)\n  \"0000000000000000123\"\n  >>> toBase10(123)\n  \"00000000000000000000123\"\n  >>> toBase10(123)\n  \"000000000000000000000123\"\n  >>> toBase10(123)\n  \"0000000000000000000000123\"\n  >>> toBase10(123)\n  \"00000000000000000000000123\"\n  >>> toBase10(123)\n  \"000000000000000000000000123\"\n  >>> toBase10(123)\n  \"0000000000000000000000000000123\"\n  >>> toBase10(123)\n  \"00000000000000000000000000000123\"\n  >>> toBase10(123)\n  \"000000000000000000000000000000123\"\n  >>> toBase10(123)\n  \"0000000000000000000000000000000123\"\n  >>> toBase10(123)\n  \"00000000000000000000000000000000123\"\n  >>> toBase10(123)\n  \"000000000000000000000000000000000000123\"\n  >>> toBase10(123)\n  \"0000000000000000000000000000000000000123\"\n  >>> toBase10(123)\n  \"00000000000000000000000000000000000000123\"\n  >>> toBase10(123)\n  \"000000000000000000000000000000000000000123\"\n  >>> toBase10(123)\n  \"0000000000000000000000000000000000000000123\"\n  >>> toBase10(123)\n  \"00000000000000000000000000000000000000000000123\"\n  >>> toBase10(123)\n  \"000000000000000000000000000000000000000000000123\"\n  >>> toBase10(123)\n  \"0000000000000000000000000000000000000000000000123\"\n  >>> toBase10(123)\n  \"00000000000000000000000000000000000000000000000123\"\n  >>> toBase10(123)\n  \"000000000000000000000000000000000000000000000000123\"\n  >>> toBase10(123)\n  \"0000000000000000000000000000000000000000000000000000123\"\n  >>> toBase10(123)\n  \"00000000000000000000000000000000000000000000000000000123\"\n  >>> toBase10(123)\n  \"000000000000000000000000000000000000000000000000000000123\"\n  >>> toBase10(123)\n  \"0000000000000000000000000000000000000000000000000000000123\"\n  >>> toBase10(123)\n  \"00000000000000000000000000000000000000000000000000000000123\"\n  >>> toBase10(123)\n  \"0000000000000000000000000000000000000000000000000000123\"\n  >>> toBase10(123)\n  \"00000000000000000000000000000000000000000000000000000123\"\n  >>> toBase10(123)\n  \"000000000000000000000000000000000000000000000000000000123\"\n  >>> toBase10(123)\n  \"0000000000000000000000000000000000000000000000000000000123\"\n  >>> toBase10(123)\n  \"00000000000000000000000000000000000000000000000000000000123\"\n  >>> toBase10(123)\n  \"0000000000000000000000000000000000000000000000000000123\"\n  >>> toBase10(123)\n  \"00000000000000000000000000000000000000000000000000000123\"\n  >>> toBase10(123)\n  \"000000000000000000000000000000000000000000000000000000123\"\n  >>> toBase10(123)\n  \"0000000000000000000000000000000000000000000000000000000123\"\n  >>> toBase10(123)\n  \"00000000000000000000000000000000000000000000000000000000123\"\n  >>> toBase10(123)\n  \"0000000000000000000000000000000000000000000000000000123\"\n  >>> toBase10(123)\n  \"00000000000000000000000000000000000000000000000000000123\"\n  >>> toBase10(123)\n  \"000000000000000000000000000000000000000000000000000000123\"\n  >>> toBase10(123)\n  \"0000000000000000000000000000000000000000000000000000000123\"\n  >>> toBase10(123)\n  \"000000000000000000000000000000000000000000000000123\"\n  >>> toBase10(123)\n  \"0000000000000000000000000000000000000000000000000000123\"\n  >>> toBase10(123)\n  \"00000000000000000000000000000000000000000000000000000123\"\n  >>> toBase10(123)\n  \"000000000000000000000000000000000000000000000000000000123\"\n  >>> toBase10(123)\n  \"0000000000000000000000000000000000000000000000000000000123\"\n  >>> toBase10(123)\n  \"000000000000000000000000000000000000000000000000123\"\n  >>> toBase10(123)\n  \"0000000000000000000000000000000000000000000000000000123\"\n  >>> toBase10(123)\n  \"00000000000000000000000000000000000000000000000000000123\"\n  >>> toBase10(123)\n  \"000000000000000000000000000000000000000000000000000000123\"\n  >>> toBase10(123)\n  \"0000000000000000000000000000000000000000000000000000000123\"\n  >>> toBase10(123)\n  \"000000000000000000000000000000000000000000000000123\"\n  >>> toBase10(123)\n  \"0000000000000000000000000000000000000000000000000000123\"\n  >>> toBase10(123)\n  \"00000000000000000000000000000000000000000000000000000123\"\n  >>> toBase10(123)\n  \"000000000000000000000000000000000000000000000000000000123\"\n  >>> toBase10(123)\n  \"0000000000000000000000000000000000000000000000000000000123\"\n  >>> toBase10(123)\n  \"000000000000000000000000000000000000000000000000123\"\n  >>> toBase10(123)\n  \"0000000000000000000000000000000000000000000000000000123\"\n  >>> toBase10(123)\n  \"00000000000000000000000000000000000000000000000000000123\"\n  >>> toBase10(123)\n  \"000000000000000000000000000000000000000000000000000000123\"\n  >>> toBase10(123)\n  \"0000000000000000000000000000000000000000000000000000000123\"\n  >>> toBase10(123)\n  \"000000000000000000000000000000000000000000000000123\"\n  >>> toBase10(123)\n  \"0000000000000000000000000000000000000000000000000000123\"\n  >>> toBase10(123)\n  \"00000000000000000000000000000000000000000000000000000123\"\n  >>> toBase10(123)\n  \"000000000000000000000000000000000000000000000000000000123\"\n  >>> toBase10(123)\n  \"0000000000000000000000000000000000000000000000000000000123\"\n  >>> toBase10(123)\n  \"000000000000000000000000000000000000000000000000123\"\n  >>> toBase10(123)\n  \"0000000000000000000000000000000000000000000000000000123\"\n  >>> toBase10(123)\n  \"00000000000000000000000000000000000000000000000000000123\"\n  >>> toBase10(123)\n  \"000000000000000000000000000000000000000000000000000000123\""}
{"task_id": "JavaScript/66", "prompt": "/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\n\nconst digitSum = (s) => {\n  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n", "canonical_solution": "    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "partial": "/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    # print('@@this is the line to split##')\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "gc": "<|endoftext|>/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\n\nconst digitSum = (s) => {\n  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + ord_char;\n  }, 0);\n}\n\n/*\n  Write a function that takes a string as input and returns the sum of the lower characters only'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\n\nconst digitSumLower = (s) => {\n  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + ord_char;\n  }, 0);\n}\n\n/*\n  Write a function that takes a string as input and returns the sum of the upper and lower case characters\n  only'\n  ASCII codes.\n\n  Examples:\n      digitSumLower(\"\") => 0\n      digitSumLower(\"abAB\") => 131\n      digitSumLower(\"abcCd\") => 67\n      digitSumLower(\"helloE\") => 69\n      digitSumLower(\"woArBld\") => 131\n      digitSumLower(\"aAaaaXa\") => 153\n  */\n\nconst digitSumLower = (s) => {\n  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + ord_char;\n  }, 0);\n}\n\n/*\n  Write a function that takes a string as input and returns the sum of the upper and lower case characters\n  only'\n  ASCII codes.\n\n  Examples:\n      digitSumUpper(\"\") => 0\n      digitSumUpper(\"abAB\") => 131\n      digitSumUpper(\"abcCd\") => 67\n      digitSumUpper(\"helloE\") => 69\n      digitSumUpper(\"woArBld\") => 131\n      digitSumUpper(\"aAaaaXa\") => 153\n  */\n\nconst digitSumUpper = (s) => {\n  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + ord_char;\n  }, 0);\n}\n\n/*\n  Write a function that takes a string as input and returns the sum of the upper and lower case characters\n  only'\n  ASCII codes.\n\n  Examples:\n      digitSumLower(\"\") => 0\n      digitSumLower(\"abAB\") => 131\n      digitSumLower(\"abcCd\") => 67\n      digitSumLower(\"helloE\") => 69\n      digitSumLower(\"woArBld\") => 131\n      digitSumLower(\"aAaaaXa\") => 153\n  */\n\nconst digitSumLower = (s) => {\n  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + ord_char;\n  }, 0);\n}\n\n/*\n  Write a function that takes a string as input and returns the sum of the upper and lower case characters\n  only'\n  ASCII codes.\n\n  Examples:\n      digitSumUpper(\"\") => 0\n      digitSumUpper(\"abAB\") => 131\n      digitSumUpper(\"abcCd\") => 67\n      digitSumUpper(\"helloE\") => 69\n      digitSumUpper(\"woArBld\") => 131\n      digitSumUpper(\"aAaaaXa\") => 153\n  */\n\nconst digitSumUpperLower = (s) => {\n  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + ord_char;\n  }, 0);\n}\n\n/*\n  Write a function that takes a string as input and returns the sum of the upper and lower case characters\n  only'\n  ASCII codes.\n\n  Examples:\n      digitSumLower(\"\") => 0\n      digitSumLower(\"abAB\") => 131\n      digitSumLower(\"abcCd\") => 67\n      digitSumLower(\"helloE\") => 69\n      digitSumLower(\"woArBld\") => 131\n      digitSumLower(\"aAaaaXa\") => 153\n  */\n\nconst digitSumUpperLower = (s) => {\n  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + ord_char;\n  }, 0);\n}\n\n/*\n  Write a function that takes a string as input and returns the sum of the upper and lower case characters\n  only'\n  ASCII codes.\n\n  Examples:\n      digitSumUpperLower(\"\") => 0\n      digitSumUpperLower(\"abAB\") => 131\n      digitSumUpperLower(\"abcCd\") => 67\n      digitSumUpperLower(\"helloE\") => 69\n      digitSumUpperLower(\"woArBld\") => 131\n      digitSumUpperLower(\"aAaaaXa\") => 153\n  */\n\nconst digitSumUpperLower = (s) => {\n  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + ord_char;\n  }, 0);\n}\n\n/*\n  Write a function that takes a string as input and returns the sum of the upper and lower case characters\n  only'\n  ASCII codes.\n\n  Examples:\n      digitSumUpperLower(\"\") => 0\n      digitSumUpperLower(\"abAB\") => 131\n      digitSumUpperLower(\"abcCd\") => 67\n      digitSumUpperLower(\"helloE\") => 69\n      digitSumUpperLower(\"woArBld\") => 131\n      digitSumUpperLower(\"aAaaaXa\") => 153\n  */\n\nconst digitSumUpperLower = (s) => {\n  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + ord_char;\n  }, 0);\n}\n\n/*\n  Write a function that takes a string as input and returns the sum of the upper and lower case characters\n  only'\n  ASCII codes.\n\n  Examples:\n      digitSumUpperLower(\"\") => 0\n      digitSumUpperLower(\"abAB\") => 131\n      digitSumUpperLower(\"abcCd\") => 67\n      digitSumUpperLower(\"helloE\") => 69\n      digitSumUpperLower(\"woArBld\") => 131\n      digitSumUpperLower(\"aAaaaXa\") => 153\n  */\n\nconst digitSumUpperLower = (s) => {\n  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + ord_char;\n  }, 0);\n}\n\n/*\n  Write a function that takes a string "}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\n\nconst fruitDistribution = (s, n) => {\n  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n", "canonical_solution": "      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "partial": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      # print('@@this is the line to split##')\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "gc": "<|endoftext|>/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\n\nconst fruitDistribution = (s, n) => {\n  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(parseInt(i));\n  return lis.reduce((a, b) => a + b, 0) - n;\n};\n\nconsole.log(fruitDistribution(\"5 apples and 6 oranges\", 19));\nconsole.log(fruitDistribution(\"0 apples and 1 oranges\",3));\nconsole.log(fruitDistribution(\"2 apples and 3 oranges\", 100));\nconsole.log(fruitDistribution(\"100 apples and 1 oranges\",120));\n\n/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\n\nconst fruitDistribution = (s, n) => {\n  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(parseInt(i));\n  return lis.reduce((a, b) => a + b, 0) - n;\n};\n\nconsole.log(fruitDistribution(\"5 apples and 6 oranges\", 19));\nconsole.log(fruitDistribution(\"0 apples and 1 oranges\",3));\nconsole.log(fruitDistribution(\"2 apples and 3 oranges\", 100));\nconsole.log(fruitDistribution(\"100 apples and 1 oranges\",120));\n\n/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\n\nconst fruitDistribution = (s, n) => {\n  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(parseInt(i));\n  return lis.reduce((a, b) => a + b, 0) - n;\n};\n\nconsole.log(fruitDistribution(\"5 apples and 6 oranges\", 19));\nconsole.log(fruitDistribution(\"0 apples and 1 oranges\",3));\nconsole.log(fruitDistribution(\"2 apples and 3 oranges\", 100));\nconsole.log(fruitDistribution(\"100 apples and 1 oranges\",120));\n\n/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\n\nconst fruitDistribution = (s, n) => {\n  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(parseInt(i));\n  return lis.reduce((a, b) => a + b, 0) - n;\n};\n\nconsole.log(fruitDistribution(\"5 apples and 6 oranges\", 19));\nconsole.log(fruitDistribution(\"0 apples and 1 oranges\",3));\nconsole.log(fruitDistribution(\"2 apples and 3 oranges\", 100));\nconsole.log(fruitDistribution(\"100 apples and 1 oranges\",120));\n\n/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\n\nconst fruitDistribution = (s, n) => {\n  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(parseInt(i));\n  return lis.reduce((a, b) => a + b, 0) - n;\n};\n\nconsole.log(fruitDistribution(\"5 apples and 6 oranges\", 19));\nconsole.log(fruitDistribution(\"0 apples and 1 oranges\",3));\nconsole.log(fruitDistribution(\"2 apples and 3 oranges\", 100));\nconsole.log(fruitDistribution(\"100 apples and 1 oranges\",120));\n\n/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\n\nconst fruitDistribution = (s, n) => {\n  var lis = [];\n  for (const i of s."}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\n\nconst pluck = (arr) => {\n  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n", "canonical_solution": "  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "partial": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  # print('@@this is the line to split##')\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "gc": "<|endoftext|>/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\n\nconst pluck = (arr) => {\n  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  var evensIndex = 0;\n  var evensSmallest = 0;\n  var evensSmallestIndex = 0;\n  evens.forEach((x, i) => {\n    if (evensIndex % 2 == 0) {\n      evensSmallest = x;\n      evensSmallestIndex = i;\n    }\n    evensIndex++;\n  });\n  return [evensSmallest, evensSmallestIndex];\n};\n\n// console.log(pluck([4, 2, 3]));\n// console.log(pluck([1, 2, 3]));\n// console.log(pluck([]));\n// console.log(pluck([5, 0, 3, 0, 4, 2]));\n\n// console.log(pluck([4, 2, 3]));\n// console.log(pluck([1, 2, 3]));\n// console.log(pluck([]));\n// console.log(pluck([5, 0, 3, 0, 4, 2]));\n\n// console.log(pluck([4, 2, 3]));\n// console.log(pluck([1, 2, 3]));\n// console.log(pluck([]));\n// console.log(pluck([5, 0, 3, 0, 4, 2]));\n\n// console.log(pluck([4, 2, 3]));\n// console.log(pluck([1, 2, 3]));\n// console.log(pluck([]));\n// console.log(pluck([5, 0, 3, 0, 4, 2]));\n\n// console.log(pluck([4, 2, 3]));\n// console.log(pluck([1, 2, 3]));\n// console.log(pluck([]));\n// console.log(pluck([5, 0, 3, 0, 4, 2]));\n\n// console.log(pluck([4, 2, 3]));\n// console.log(pluck([1, 2, 3]));\n// console.log(pluck([]));\n// console.log(pluck([5, 0, 3, 0, 4, 2]));\n\n// console.log(pluck([4, 2, 3]));\n// console.log(pluck([1, 2, 3]));\n// console.log(pluck([]));\n// console.log(pluck([5, 0, 3, 0, 4, 2]));\n\n// console.log(pluck([4, 2, 3]));\n// console.log(pluck([1, 2, 3]));\n// console.log(pluck([]));\n// console.log(pluck([5, 0, 3, 0, 4, 2]));\n\n// console.log(pluck([4, 2, 3]));\n// console.log(pluck([1, 2, 3]));\n// console.log(pluck([]));\n// console.log(pluck([5, 0, 3, 0, 4, 2]));\n\n// console.log(pluck([4, 2, 3]));\n// console.log(pluck([1, 2, 3]));\n// console.log(pluck([]));\n// console.log(pluck([5, 0, 3, 0, 4, 2]));\n\n// console.log(pluck([4, 2, 3]));\n// console.log(pluck([1, 2, 3]));\n// console.log(pluck([]));\n// console.log(pluck([5, 0, 3, 0, 4, 2]));\n\n// console.log(pluck([4, 2, 3]));\n// console.log(pluck([1, 2, 3]));\n// console.log(pluck([]));\n// console.log(pluck([5, 0, 3, 0, 4, 2]));\n\n// console.log(pluck([4, 2, 3]));\n// console.log(pluck([1, 2, 3]));\n// console.log(pluck([]));\n// console.log(pluck([5, 0, 3, 0, 4, 2]));\n\n// console.log(pluck([4, 2, 3]));\n// console.log(pluck([1, 2, 3]));\n// console.log(pluck([]));\n// console.log(pluck([5, 0, 3, 0, 4, 2]));\n\n// console.log(pluck([4, 2, 3]));\n// console.log(pluck([1, 2, 3]));\n// console.log(pluck([]));\n// console.log(pluck([5, 0, 3, 0, 4, 2]));\n\n// console.log(pluck([4, 2, 3]));\n// console.log(pluck([1, 2, 3]));\n// console.log(pluck([]));\n// console.log(pluck([5, 0, 3, 0, 4, 2]));\n\n// console.log(pluck([4, 2, 3]));\n// console.log(pluck([1, 2, 3]));\n// console.log(pluck([]));\n// console.log(pluck([5, 0, 3, 0, 4, 2]));\n\n// console.log(pluck([4, 2, 3]));\n// console.log(pluck([1, 2, 3]));\n// console.log(pluck([]));\n// console.log(pluck([5, 0, 3, 0, 4, 2]));\n\n// console.log(pluck([4, 2, 3]));\n// console.log(pluck([1, 2, 3]));\n// console.log(pluck([]));\n// console.log(pluck([5, 0, 3, 0, 4, 2]));\n\n// console.log(pluck([4, 2, 3]));\n// console.log(pluck([1, 2, 3]));\n// console.log(pluck([]));\n// console.log(pluck([5, 0, 3, 0, 4, 2]));\n\n// console.log(pluck([4, 2, 3]));\n// console.log(pluck([1, 2, 3]));\n// console.log(pluck([]));\n// console.log(pluck([5, 0, 3, 0, 4, 2]));\n\n// console.log(pluck([4, 2, 3]));\n// console.log(pluck([1, 2, 3]));\n// console.log(pluck([]));\n// console.log(pluck([5, 0, 3, 0, 4, 2]));\n\n// console.log(pluck([4, 2, 3]));\n// console.log(pluck([1, 2, 3]));\n// console.log(pluck([]));\n// console.log(pluck([5, 0, 3, 0, 4, 2]));\n\n// console.log(pluck([4, 2, 3]));\n// console.log(pluck([1, 2, 3]));\n// console.log(pluck([]));\n// console.log(pluck([5, 0, 3, 0, 4, 2]));\n\n// console.log(pluck([4, 2, 3]));\n// console.log(pluck([1, 2, 3]));\n// console.log(pluck([]));\n// console.log(pluck([5, 0, 3, 0, 4, 2]));\n\n// console.log(pluck([4, 2, 3]));\n// console.log(pluck([1, 2, 3]));\n// console.log(pluck([]));\n// console.log(pluck([5, 0, 3, 0, 4, 2]));\n\n// console.log(pluck([4, 2, 3]));\n// console.log(pluck([1, 2, 3]));\n// console.log(pluck([]));\n// console.log(pluck([5, 0, 3, 0, 4, 2]));\n\n// console.log(pluck([4, 2, 3]));\n// console.log(pluck([1, 2, 3]));\n// console.log(pluck([]));\n// console.log(pluck([5, 0, 3, 0, 4, 2]));\n\n// console.log(pluck([4, 2, 3]));\n// console.log(pluck([1, 2, 3]));\n// console.log(pluck([]));\n// console.log(pluck([5, 0, 3, 0, 4, 2]));\n\n// console.log(pluck([4, 2, 3]));\n// console.log(pluck([1, 2, 3]));\n// console.log(pluck([]));\n// console.log(pluck([5, 0, 3, 0, 4, 2]));\n\n// console.log(pluck([4, 2, 3]));\n// console.log(pluck([1, 2, 3]));\n// console.log(pluck([]));\n// console.log(pluck([5, 0, 3, 0, 4, 2]));\n\n// console.log(pluck([4, 2, 3]));\n// console.log(pluck([1, 2, 3]));\n// console.log(pluck([]));\n// console.log(pluck([5, 0, 3, 0, 4, 2]));\n\n// console.log(pluck([4, 2, 3]));\n// console.log(pluck([1, 2, 3]));\n// console.log(pluck([]));\n// console.log(pluck([5, 0, 3, 0, 4, 2]));\n\n// console.log(pluck([4, 2, 3]));\n// console.log(pluck([1, 2, 3]));\n// console.log(pluck([]));\n// console.log(pluck([5, 0, 3, 0, 4, 2]));\n\n// console.log(pluck([4, 2, 3]));\n// console.log(pluck([1, 2, 3]));\n// console.log(pluck([]));\n// console.log(pluck([5, 0, 3, 0, 4, 2]));\n\n// console.log(pluck"}
{"task_id": "JavaScript/69", "prompt": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\n\nconst search = (lst) => {\n  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n", "canonical_solution": "  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "partial": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  # print('@@this is the line to split##')\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "gc": "<|endoftext|>/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\n\nconst search = (lst) => {\n  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 0; i < lst.length; i++) {\n    if (frq[lst[i]] > 0)\n      ans = i;\n  }\n  return ans;\n};\n\nmodule.exports = search;\n\n},{}],3:[function(require,module,exports){\n/*\n  You are given a non-empty list of positive integers. Return the largest integer that is less than\n  zero, and has a frequency less than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 1\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\n\nconst search = (lst) => {\n  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 0; i < lst.length; i++) {\n    if (frq[lst[i]] < 0)\n      ans = i;\n  }\n  return ans;\n};\n\nmodule.exports = search;\n\n},{}],4:[function(require,module,exports){\n/*\n  You are given a non-empty list of positive integers. Return the largest integer that is less than\n  zero, and has a frequency less than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 1\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\n\nconst search = (lst) => {\n  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 0; i < lst.length; i++) {\n    if (frq[lst[i]] < 0)\n      ans = i;\n  }\n  return ans;\n};\n\nmodule.exports = search;\n\n},{}],5:[function(require,module,exports){\n/*\n  You are given a non-empty list of positive integers. Return the largest integer that is less than\n  zero, and has a frequency less than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 1\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\n\nconst search = (lst) => {\n  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 0; i < lst.length; i++) {\n    if (frq[lst[i]] < 0)\n      ans = i;\n  }\n  return ans;\n};\n\nmodule.exports = search;\n\n},{}],6:[function(require,module,exports){\n/*\n  You are given a non-empty list of positive integers. Return the largest integer that is less than\n  zero, and has a frequency less than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 1\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\n\nconst search = (lst) => {\n  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 0; i < lst.length; i++) {\n    if (frq[lst[i]] < 0)\n      ans = i;\n  }\n  return ans;\n};\n\nmodule.exports = search;\n\n},{}],7:[function(require,module,exports){\n/*\n  You are given a non-empty list of positive integers. Return the largest integer that is less than\n  zero, and has a frequency less than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 1\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\n\nconst search = (lst) => {\n  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 0; i < lst.length; i++) {\n    if (frq[lst[i]] < 0)\n      ans = i;\n  }\n  return ans;\n};\n\nmodule.exports = search;\n\n},{}],8:[function(require,module,exports){\n/*\n  You are given a non-empty list of positive integers. Return the largest integer that is less than\n  zero, and has a frequency less than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 1\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\n\nconst search = (lst) => {\n  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 0; i < lst.length; i++) {\n    if (frq[lst[i]] < 0)\n      ans = i;\n  }\n  return ans;\n};\n\nmodule.exports = search;\n\n},{}],9:[function(require,module,exports){\n/*\n  You are given a non-empty list of positive integers. Return the largest integer that is less than\n  zero, and has a frequency less than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 1\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\n\nconst search = (lst) => {\n  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 0; i < lst.length; i++) {\n    if (frq[lst[i]] < 0)\n      ans = i;\n  }\n  return ans;\n};\n\nmodule.exports = search;\n\n},{}],10:[function(require,module,exports){\n/*\n  You are given a non-empty list of positive integers. Return the largest integer that is less than\n  zero, and has a frequency less than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 1\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\n\nconst search = (lst) => {\n  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 0; i < lst.length; i++) {\n    if (frq[lst[i]] < 0)\n      ans = i;\n  }\n  return ans;\n};\n\nmodule.exports = search;\n\n},{}],11:[function(require,module,exports){\n/*\n  You are given a non-empty list of positive integers. Return the largest integer that is less than\n  zero, and has a frequency less than or equal to the value of the integer itself.\n"}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\n\nconst strangeSortList = (lst) => {\n  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n", "canonical_solution": "    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "partial": "/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    # print('@@this is the line to split##')\n    sw = !sw;\n  }\n  return res;\n}\n\n", "gc": "<|endoftext|>/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\n\nconst strangeSortList = (lst) => {\n  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw =!sw;\n  }\n  return res;\n};\n\nmodule.exports = strangeSortList;\n\n},{}],9:[function(require,module,exports){\n'use strict';\n\nconst isNumber = require('./isNumber');\n\nconst isPositive = (num) => isNumber(num) && num >= 0;\n\nconst isNegative = (num) => isNumber(num) && num < 0;\n\nconst isZero = (num) => isNumber(num) && num === 0;\n\nconst isPositiveOrZero = (num) => isPositive(num) || isZero(num);\n\nconst isNegativeOrZero = (num) => isNegative(num) || isZero(num);\n\nconst isPositiveOrNegative = (num) => isPositiveOrZero(num) || isNegativeOrZero(num);\n\nconst isPositiveOrZeroOrNegative = (num) => isPositiveOrNegative(num) || isNegativeOrZero(num);\n\nconst isPositiveOrNegativeOrZero = (num) => isPositiveOrZeroOrNegative(num) || isZeroOrNegative(num);\n\nconst isPositiveOrNegativeOrZeroOrNegative = (num) => isPositiveOrNegativeOrZeroOrNegative(num) || isZeroOrNegativeOrZero(num);\n\nconst isPositiveOrZeroOrNegativeOrZero = (num) => isPositiveOrNegativeOrZeroOrNegative(num) || isZeroOrNegativeOrZero(num);\n\nconst isPositiveOrNegativeOrZeroOrNegativeOrZero = (num) => isPositiveOrZeroOrNegativeOrZeroOrNegative(num) || isZeroOrNegativeOrZeroOrNegative(num);\n\nconst isPositiveOrZeroOrNegativeOrZeroOrNegativeOrZero = (num) => isPositiveOrNegativeOrZeroOrNegativeOrZeroOrNegative(num) || isZeroOrNegativeOrZeroOrNegativeOrZero(num);\n\nconst isPositiveOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZero = (num) => isPositiveOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZero(num) || isZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZero(num);\n\nconst isPositiveOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZero = (num) => isPositiveOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZero(num) || isZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZero(num);\n\nconst isPositiveOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZero = (num) => isPositiveOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZero(num) || isZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZero(num);\n\nconst isPositiveOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZero = (num) => isPositiveOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZero(num) || isZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZero(num);\n\nconst isPositiveOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZero = (num) => isPositiveOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZero(num) || isZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZero(num);\n\nconst isPositiveOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZero = (num) => isPositiveOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZero(num) || isZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZero(num);\n\nconst isPositiveOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZero = (num) => isPositiveOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZero(num) || isZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZero(num);\n\nconst isPositiveOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZero = (num) => isPositiveOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZero(num) || isZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZero(num);\n\nconst isPositiveOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZero = (num) => isPositiveOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZero(num) || isZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZero(num);\n\nconst isPositiveOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZero = (num) => isPositiveOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZero(num) || isZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZero(num);\n\nconst isPositiveOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZero = (num) => isPositiveOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZero(num) || isZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZero(num);\n\nconst isPositiveOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZero = (num) => isPositiveOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZero(num) || isZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZero(num);\n\nconst isPositiveOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZero = (num) => isPositiveOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOr"}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\n\nconst triangleArea = (a, b, c) => {\n  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n", "canonical_solution": "  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "partial": "/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  # print('@@this is the line to split##')\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "gc": "<|endoftext|>/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\n\nconst triangleArea = (a, b, c) => {\n  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var t1 = Math.sqrt(a * a + b * b + c * c);\n  var t2 = Math.sqrt(a * a + b * b - c * c);\n  var t3 = Math.sqrt(a * a - b * b - c * c);\n  var t4 = Math.sqrt(a * a - b * c - c * c);\n  var t5 = Math.sqrt(b * b - c * c);\n  var t6 = Math.sqrt(b * b + c * c);\n  var t7 = Math.sqrt(b * b - c * c);\n  var t8 = Math.sqrt(c * c - a * a);\n  var t9 = Math.sqrt(c * c - a * a - b * b);\n  var t10 = Math.sqrt(c * c - a * a - b * b - c * c);\n  var t11 = Math.sqrt(c * c - a * a - b * b + c * c);\n  var t12 = Math.sqrt(c * c - a * a - b * b - c * c - a * a);\n  var t13 = Math.sqrt(c * c - a * a - b * b + c * c - a * a - b * b);\n  var t14 = Math.sqrt(c * c - a * a - b * b - c * c - a * a - b * b);\n  var t15 = Math.sqrt(c * c - a * a - b * b + c * c - a * a - b * b);\n  var t16 = Math.sqrt(c * c - a * a - b * b - c * c - a * a - b * b);\n  var t17 = Math.sqrt(c * c - a * a - b * b + c * c - a * a - b * b);\n  var t18 = Math.sqrt(c * c - a * a - b * b - c * c - a * a - b * b);\n  var t19 = Math.sqrt(c * c - a * a - b * b + c * c - a * a - b * b);\n  var t20 = Math.sqrt(c * c - a * a - b * b - c * c - a * a - b * b);\n  var t21 = Math.sqrt(c * c - a * a - b * b + c * c - a * a - b * b);\n  var t22 = Math.sqrt(c * c - a * a - b * b - c * c - a * a - b * b);\n  var t23 = Math.sqrt(c * c - a * a - b * b + c * c - a * a - b * b);\n  var t24 = Math.sqrt(c * c - a * a - b * b - c * c - a * a - b * b);\n  var t25 = Math.sqrt(c * c - a * a - b * b + c * c - a * a - b * b);\n  var t26 = Math.sqrt(c * c - a * a - b * b - c * c - a * a - b * b);\n  var t27 = Math.sqrt(c * c - a * a - b * b + c * c - a * a - b * b);\n  var t28 = Math.sqrt(c * c - a * a - b * b - c * c - a * a - b * b);\n  var t29 = Math.sqrt(c * c - a * a - b * b + c * c - a * a - b * b);\n  var t30 = Math.sqrt(c * c - a * a - b * b - c * c - a * a - b * b);\n  var t31 = Math.sqrt(c * c - a * a - b * b + c * c - a * a - b * b);\n  var t32 = Math.sqrt(c * c - a * a - b * b - c * c - a * a - b * b);\n  var t33 = Math.sqrt(c * c - a * a - b * b + c * c - a * a - b * b);\n  var t34 = Math.sqrt(c * c - a * a - b * b - c * c - a * a - b * b);\n  var t35 = Math.sqrt(c * c - a * a - b * b + c * c - a * a - b * b);\n  var t36 = Math.sqrt(c * c - a * a - b * b - c * c - a * a - b * b);\n  var t37 = Math.sqrt(c * c - a * a - b * b + c * c - a * a - b * b);\n  var t38 = Math.sqrt(c * c - a * a - b * b - c * c - a * a - b * b);\n  var t39 = Math.sqrt(c * c - a * a - b * b + c * c - a * a - b * b);\n  var t40 = Math.sqrt(c * c - a * a - b * b - c * c - a * a - b * b);\n  var t41 = Math.sqrt(c * c - a * a - b * b + c * c - a * a - b * b);\n  var t42 = Math.sqrt(c * c - a * a - b * b - c * c - a * a - b * b);\n  var t43 = Math.sqrt(c * c - a * a - b * b + c * c - a * a - b * b);\n  var t44 = Math.sqrt(c * c - a * a - b * b - c * c - a * a - b * b);\n  var t45 = Math.sqrt(c * c - a * a - b * b + c * c - a * a - b * b);\n  var t46 = Math.sqrt(c * c - a * a - b * b - c * c - a * a - b * b);\n  var t47 = Math.sqrt(c * c - a * a - b * b + c * c - a * a - b * b);\n  var t48 = Math.sqrt(c * c - a * a - b * b - c * c - a * a - b * b);\n  var t49 = Math.sqrt(c * c - a * a - b * b + c * c - a * a - b * b);\n  var t50 = Math.sqrt(c * c - a * a - b * b - c * c - a * a - b * b);\n  var t51 = Math.sqrt(c * c - a * a - b * b + c * c - a * a - b * b);\n  var t52 = Math.sqrt(c * c - a * a - b * b - c * c - a * a - b * b);\n  var t53 = Math.sqrt(c * c - a * a - b * b + c * c - a * a - b * b);\n  var t54 = Math.sqrt(c * c - a * a - b * b - c * c - a * a - b * b);\n  var t55 = Math.sqrt(c * c - a * a - b * b + c * c - a * a - b * b);\n  var t56 = Math.sqrt(c * c - a * a - b * b - c * c - a * a - b * b);\n  var t57 = Math.sqrt(c * c - a * a - b * b + c * c - a * a - b * b);\n  var t58 = Math.sqrt(c * c - a * a - b * b - c * c - a * a - b * b);\n  var t59 = Math.sqrt(c * c - a * a - b * b + c * c - a * a - b * b);\n  var t60 = Math.sqrt(c * c - a * a - b * b - c * c - a * a - b * b);\n  var t61 = Math.sqrt(c * c - a * a - b * b + c * c - a"}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\n\nconst willItFly = (q, w) => {\n  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n", "canonical_solution": "      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "partial": "/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      # print('@@this is the line to split##')\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "gc": "<|endoftext|>/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\n\nconst willItFly = (q, w) => {\n  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i]!= q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n};\n\nmodule.exports = willItFly;\n\n},{}],3:[function(require,module,exports){\n/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\n\nconst willItFly = (q, w) => {\n  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i]!= q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n};\n\nmodule.exports = willItFly;\n\n},{}],4:[function(require,module,exports){\n/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\n\nconst willItFly = (q, w) => {\n  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i]!= q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n};\n\nmodule.exports = willItFly;\n\n},{}],5:[function(require,module,exports){\n/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\n\nconst willItFly = (q, w) => {\n  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i]!= q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n};\n\nmodule.exports = willItFly;\n\n},{}],6:[function(require,module,exports){\n/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\n\nconst willItFly = (q, w) => {\n  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i]!= q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n};\n\nmodule.exports = willItFly;\n\n},{}],7:[function(require,module,exports){\n/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\n\nconst willItFly = (q, w) => {\n  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i]!= q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n};\n\nmodule.exports = willItFly;\n\n},{}],8:[function(require,module,exports){\n/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight "}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\n\nconst smallestChange = (arr) => {\n  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n", "canonical_solution": "      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "partial": "/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      # print('@@this is the line to split##')\n      ans++;\n  return ans;\n}\n\n", "gc": "<|endoftext|>/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\n\nconst smallestChange = (arr) => {\n  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i]!= arr.at(-i - 1))\n      ans++;\n  return ans;\n};\n\nmodule.exports = smallestChange;\n\n},{}],3:[function(require,module,exports){\nconst { smallestChange } = require('./smallestChange');\n\n/**\n * Given an array of integers, find the minimum number of elements that\n * need to be changed to make the array palindromic. A palindromic array is an array that\n * is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n * For example:\n * smallestChange([1,2,3,5,4,7,9,6]) == 4\n * smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n * smallestChange([1, 2, 3, 2, 1]) == 0\n */\n\nconst smallestPalindrome = (arr) => {\n  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i]!= arr.at(-i - 1))\n      ans++;\n  return ans;\n};\n\nmodule.exports = smallestPalindrome;\n\n},{\"./smallestChange\":2}],4:[function(require,module,exports){\nconst { smallestChange } = require('./smallestChange');\n\n/**\n * Given an array of integers, find the minimum number of elements that\n * need to be changed to make the array palindromic. A palindromic array is an array that\n * is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n * For example:\n * smallestChange([1,2,3,5,4,7,9,6]) == 4\n * smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n * smallestChange([1, 2, 3, 2, 1]) == 0\n */\n\nconst smallestReverse = (arr) => {\n  var ans = 0;\n  for (let i = Math.floor(arr.length / 2) - 1; i >= 0; i--)\n    if (arr[i]!= arr.at(i))\n      ans++;\n  return ans;\n};\n\nmodule.exports = smallestReverse;\n\n},{\"./smallestChange\":2}],5:[function(require,module,exports){\nconst { smallestChange } = require('./smallestChange');\n\n/**\n * Given an array of integers, find the minimum number of elements that\n * need to be changed to make the array palindromic. A palindromic array is an array that\n * is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n * For example:\n * smallestChange([1,2,3,5,4,7,9,6]) == 4\n * smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n * smallestChange([1, 2, 3, 2, 1]) == 0\n */\n\nconst smallestTriangular = (arr) => {\n  var ans = 0;\n  for (let i = Math.floor(arr.length / 2) - 1; i >= 0; i--)\n    if (arr[i]!= arr.at(i))\n      ans++;\n  return ans;\n};\n\nmodule.exports = smallestTriangular;\n\n},{\"./smallestChange\":2}],6:[function(require,module,exports){\nconst { smallestChange } = require('./smallestChange');\n\n/**\n * Given an array of integers, find the minimum number of elements that\n * need to be changed to make the array palindromic. A palindromic array is an array that\n * is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n * For example:\n * smallestChange([1,2,3,5,4,7,9,6]) == 4\n * smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n * smallestChange([1, 2, 3, 2, 1]) == 0\n */\n\nconst smallestTriangularReverse = (arr) => {\n  var ans = 0;\n  for (let i = Math.floor(arr.length / 2) - 1; i >= 0; i--)\n    if (arr[i]!= arr.at(i))\n      ans++;\n  return ans;\n};\n\nmodule.exports = smallestTriangularReverse;\n\n},{\"./smallestChange\":2}],7:[function(require,module,exports){\nconst { smallestChange } = require('./smallestChange');\n\n/**\n * Given an array of integers, find the minimum number of elements that\n * need to be changed to make the array palindromic. A palindromic array is an array that\n * is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n * For example:\n * smallestChange([1,2,3,5,4,7,9,6]) == 4\n * smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n * smallestChange([1, 2, 3, 2, 1]) == 0\n */\n\nconst smallestTriangularTriangular = (arr) => {\n  var ans = 0;\n  for (let i = Math.floor(arr.length / 2) - 1; i >= 0; i--)\n    if (arr[i]!= arr.at(i))\n      ans++;\n  return ans;\n};\n\nmodule.exports = smallestTriangularTriangular;\n\n},{\"./smallestChange\":2}],8:[function(require,module,exports){\nconst { smallestChange } = require('./smallestChange');\n\n/**\n * Given an array of integers, find the minimum number of elements that\n * need to be changed to make the array palindromic. A palindromic array is an array that\n * is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n * For example:\n * smallestChange([1,2,3,5,4,7,9,6]) == 4\n * smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n * smallestChange([1, 2, 3, 2, 1]) == 0\n */\n\nconst smallestTriangularTriangularReverse = (arr) => {\n  var ans = 0;\n  for (let i = Math.floor(arr.length / 2) - 1; i >= 0; i--)\n    if (arr[i]!= arr.at(i))\n      ans++;\n  return ans;\n};\n\nmodule.exports = smallestTriangularTriangularReverse;\n\n},{\"./smallestChange\":2}],9:[function(require,module,exports){\nconst { smallestChange } = require('./smallestChange');\n\n/**\n * Given an array of integers, find the minimum number of elements that\n * need to be changed to make the array palindromic. A palindromic array is an array that\n * is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n * For example:\n * smallestChange([1,2,3,5,4,7,9,6]) == 4\n * smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n * smallestChange([1, 2, 3, 2, 1]) == 0\n */\n\nconst smallestTriangularTriangularReverseTriangular = (arr) => {\n  var ans = 0;\n  for (let i = Math.floor(arr.length / 2) - 1; i >= 0; i--)\n    if (arr[i]!= arr.at(i))\n      ans++;\n  return ans;\n};\n\nmodule.exports = smallestTriangularTriangularReverseTriangular;\n\n},{\"./smallestChange\":2}],10:[function(require,module,exports){\nconst { smallestChange } = require('./smallestChange');\n\n/**\n * Given an array of integers, find the minimum number of elements that\n * need to be changed to make the array palindromic. A palindromic array is an array that\n * is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n * For example:\n * smallestChange([1,2,3,5,4,7,9,6]) == 4\n * smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n * smallestChange([1, 2, 3, 2, 1]) == 0\n */\n\nconst smallestTriangularTriangularReverseTriangularReverse = (arr) => {\n  var ans = 0;\n  for (let i = Math.floor(arr.length / "}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\n\nconst totalMatch = (lst1, lst2) => {\n  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n", "canonical_solution": "    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "partial": "/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    # print('@@this is the line to split##')\n    return lst1;\n  else\n    return lst2;\n}\n\n", "gc": "<|endoftext|>/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\n\nconst totalMatch = (lst1, lst2) => {\n  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n};\n\nmodule.exports = totalMatch;\n\n},{}],8:[function(require,module,exports){\n/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list greater than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\n\nconst totalMatch = (lst1, lst2) => {\n  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 > l2)\n    return lst1;\n  else\n    return lst2;\n};\n\nmodule.exports = totalMatch;\n\n},{}],9:[function(require,module,exports){\n/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list equal to the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\n\nconst totalMatch = (lst1, lst2) => {\n  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 == l2)\n    return lst1;\n  else\n    return lst2;\n};\n\nmodule.exports = totalMatch;\n\n},{}],10:[function(require,module,exports){\n/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list greater than or equal to the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\n\nconst totalMatch = (lst1, lst2) => {\n  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 >= l2)\n    return lst1;\n  else\n    return lst2;\n};\n\nmodule.exports = totalMatch;\n\n},{}],11:[function(require,module,exports){\n/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\n\nconst totalMatch = (lst1, lst2) => {\n  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 < l2)\n    return lst1;\n  else\n    return lst2;\n};\n\nmodule.exports = totalMatch;\n\n},{}],12:[function(require,module,exports){\n/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than or equal to the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\n\nconst totalMatch = (lst1, lst2) => {\n  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n};\n\nmodule.exports = totalMatch;\n\n},{}],13:[function(require,module,exports){\n/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list equal to the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi"}
{"task_id": "JavaScript/75", "prompt": "/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\n\nconst isMultiplyPrime = (a) => {\n  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n", "canonical_solution": "      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "partial": "/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      # print('@@this is the line to split##')\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "gc": "<|endoftext|>/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\n\nconst isMultiplyPrime = (a) => {\n  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (i % j == 0) return false;\n    }\n  }\n  return true;\n}\n\n/*Write a function that returns true if the given number is the sum of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isSumPrime(30) == true\n  30 = 2 * 3 * 5\n  */\n\nconst isSumPrime = (a) => {\n  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (i + j == 100) return false;\n    }\n  }\n  return true;\n}\n\n/*Write a function that returns true if the given number is the sum of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isSumPrime(30) == true\n  30 = 2 * 3 * 5\n  */\n\nconst isSumPrime = (a) => {\n  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (i + j == 100) return false;\n    }\n  }\n  return true;\n}\n\n/*Write a function that returns true if the given number is the sum of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isSumPrime(30) == true\n  30 = 2 * 3 * 5\n  */\n\nconst isSumPrime = (a) => {\n  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (i + j == 100) return false;\n    }\n  }\n  return true;\n}\n\n/*Write a function that returns true if the given number is the sum of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isSumPrime(30) == true\n  30 = 2 * 3 * 5\n  */\n\nconst isSumPrime = (a) => {\n  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (i + j == 100) return false;\n    }\n  }\n  return true;\n}\n\n/*Write a function that returns true if the given number is the sum of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isSumPrime(30) == true\n  30 = 2 * 3 * 5\n  */\n\nconst isSumPrime = (a) => {\n  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (i + j == 100) return false;\n    }\n  }\n  return true;\n}\n\n/*Write a function that returns true if the given number is the sum of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isSumPrime(30) == true\n  30 = 2 * 3 * 5\n  */\n\nconst isSumPrime = (a) => {\n  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (i + j == 100) return false;\n    }\n  }\n  return true;\n}\n\n/*Write a function that returns true if the given number is the sum of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isSumPrime(30) == true\n  30 = 2 * 3 * 5\n  */\n\nconst isSumPrime = (a) => {\n  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (i + j == 100) return false;\n    }\n  }\n  return true;\n}\n\n/*Write a function that returns true if the given number is the sum of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isSumPrime(30) == true\n  30 = 2 * 3 * 5\n  */\n\nconst isSumPrime = (a) => {\n  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (i + j == 100) return false;\n    }\n  }\n  return true;\n}\n\n/*Write a function that returns true if the given number is the sum of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isSumPrime(30) == true\n  30 = 2 * 3 * 5\n  */\n\nconst isSumPrime = (a) => {\n  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (i + j == 100) return false;\n    }\n  }\n  return true;\n}\n\n/*Write a function that returns true if the given number is the sum of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isSumPrime(30) == true\n  30 = 2 * 3 * 5\n  */\n\nconst isSumPrime = (a) => {\n  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (i + j == 100) return false;\n    }\n  }\n  return true;\n}\n\n/*Write a function that returns true if the given number is the sum of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isSumPrime(30) == true\n  30 = 2 * 3 * 5\n  */\n\nconst isSumPrime = (a) => {\n  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let "}
{"task_id": "JavaScript/76", "prompt": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\n\nconst isSimplePower = (x, n) => {\n  if (n == 1)\n    return (x == 1);\n  var power = 1;\n", "canonical_solution": "  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "partial": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  # print('@@this is the line to split##')\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "gc": "<|endoftext|>/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\n\nconst isSimplePower = (x, n) => {\n  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power <= n) {\n    power *= x;\n  }\n  return power == x;\n};\n\nmodule.exports = isSimplePower;\n\n},{}],4:[function(require,module,exports){\n/*\n  You are given an integer n and an integer k. Your task is to write a function that returns true if n is a prime number and\n  false in other cases.\n  n and k are prime numbers if n%k=0\n  For example:\n  isPrime(2) => true\n  isPrime(3) => false\n  isPrime(5) => false\n  isPrime(7) => true\n  isPrime(11) => false\n  */\n\nconst isPrime = (n) => {\n  if (n == 1)\n    return (n == 1);\n  if (n == 2)\n    return true;\n  if (n % 2 == 0)\n    return false;\n  if (n % 3 == 0)\n    return false;\n  if (n % 5 == 0)\n    return false;\n  if (n % 7 == 0)\n    return true;\n  return isPrime(n / 2);\n};\n\nmodule.exports = isPrime;\n\n},{}],5:[function(require,module,exports){\n/*\n  You are given an integer n and an integer k. Your task is to write a function that returns true if n is a prime number and\n  false in other cases.\n  n and k are prime numbers if n%k=0\n  For example:\n  isPrime(2) => true\n  isPrime(3) => false\n  isPrime(5) => false\n  isPrime(7) => true\n  isPrime(11) => false\n  */\n\nconst isPrime = (n) => {\n  if (n == 1)\n    return (n == 1);\n  if (n == 2)\n    return true;\n  if (n % 2 == 0)\n    return false;\n  if (n % 3 == 0)\n    return false;\n  if (n % 5 == 0)\n    return false;\n  if (n % 7 == 0)\n    return true;\n  return isPrime(n / 2);\n};\n\nmodule.exports = isPrime;\n\n},{}],6:[function(require,module,exports){\n/*\n  You are given an integer n and an integer k. Your task is to write a function that returns true if n is a prime number and\n  false in other cases.\n  n and k are prime numbers if n%k=0\n  For example:\n  isPrime(2) => true\n  isPrime(3) => false\n  isPrime(5) => false\n  isPrime(7) => true\n  isPrime(11) => false\n  */\n\nconst isPrime = (n) => {\n  if (n == 1)\n    return (n == 1);\n  if (n == 2)\n    return true;\n  if (n % 2 == 0)\n    return false;\n  if (n % 3 == 0)\n    return false;\n  if (n % 5 == 0)\n    return false;\n  if (n % 7 == 0)\n    return true;\n  return isPrime(n / 2);\n};\n\nmodule.exports = isPrime;\n\n},{}],7:[function(require,module,exports){\n/*\n  You are given an integer n and an integer k. Your task is to write a function that returns true if n is a prime number and\n  false in other cases.\n  n and k are prime numbers if n%k=0\n  For example:\n  isPrime(2) => true\n  isPrime(3) => false\n  isPrime(5) => false\n  isPrime(7) => true\n  isPrime(11) => false\n  */\n\nconst isPrime = (n) => {\n  if (n == 1)\n    return (n == 1);\n  if (n == 2)\n    return true;\n  if (n % 2 == 0)\n    return false;\n  if (n % 3 == 0)\n    return false;\n  if (n % 5 == 0)\n    return false;\n  if (n % 7 == 0)\n    return true;\n  return isPrime(n / 2);\n};\n\nmodule.exports = isPrime;\n\n},{}],8:[function(require,module,exports){\n/*\n  You are given an integer n and an integer k. Your task is to write a function that returns true if n is a prime number and\n  false in other cases.\n  n and k are prime numbers if n%k=0\n  For example:\n  isPrime(2) => true\n  isPrime(3) => false\n  isPrime(5) => false\n  isPrime(7) => true\n  isPrime(11) => false\n  */\n\nconst isPrime = (n) => {\n  if (n == 1)\n    return (n == 1);\n  if (n == 2)\n    return true;\n  if (n % 2 == 0)\n    return false;\n  if (n % 3 == 0)\n    return false;\n  if (n % 5 == 0)\n    return false;\n  if (n % 7 == 0)\n    return true;\n  return isPrime(n / 2);\n};\n\nmodule.exports = isPrime;\n\n},{}],9:[function(require,module,exports){\n/*\n  You are given an integer n and an integer k. Your task is to write a function that returns true if n is a prime number and\n  false in other cases.\n  n and k are prime numbers if n%k=0\n  For example:\n  isPrime(2) => true\n  isPrime(3) => false\n  isPrime(5) => false\n  isPrime(7) => true\n  isPrime(11) => false\n  */\n\nconst isPrime = (n) => {\n  if (n == 1)\n    return (n == 1);\n  if (n == 2)\n    return true;\n  if (n % 2 == 0)\n    return false;\n  if (n % 3 == 0)\n    return false;\n  if (n % 5 == 0)\n    return false;\n  if (n % 7 == 0)\n    return true;\n  return isPrime(n / 2);\n};\n\nmodule.exports = isPrime;\n\n},{}],10:[function(require,module,exports){\n/*\n  You are given an integer n and an integer k. Your task is to write a function that returns true if n is a prime number and\n  false in other cases.\n  n and k are prime numbers if n%k=0\n  For example:\n  isPrime(2) => true\n  isPrime(3) => false\n  isPrime(5) => false\n  isPrime(7) => true\n  isPrime(11) => false\n  */\n\nconst isPrime = (n) => {\n  if (n == 1)\n    return (n == 1);\n  if (n == 2)\n    return true;\n  if (n % 2 == 0)\n    return false;\n  if (n % 3 == 0)\n    return false;\n  if (n % 5 == 0)\n    return false;\n  if (n % 7 == 0)\n    return true;\n  return isPrime(n / 2);\n};\n\nmodule.exports = isPrime;\n\n},{}],11:[function(require,module,exports){\n/*\n  You are given an integer n and an integer k. Your task is to write a function that returns true if n is a prime number and\n  false in other cases.\n  n and k are prime numbers if n%k=0\n  For example:\n  isPrime(2) => true\n  isPrime(3) => false\n  isPrime(5) => false\n  isPrime(7) => true\n  isPrime(11) => false\n  */\n\nconst isPrime = (n) => {\n  if (n == 1)\n    return (n == 1);\n  if (n == 2)\n    return true;\n  if (n % 2 == 0)\n    return false;\n  if (n % 3 == 0)\n    return false;\n  if (n % 5 == 0)\n    return false;\n  if (n % 7 == 0)\n    return true;\n  return isPrime(n / 2);\n};\n\nmodule.exports = isPrime;\n\n},{}],12:[function(require,module,exports){\n/*\n  You are given an integer n and an integer k. Your task is to write a function that returns true if "}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\n\nconst iscube = (a) => {\n  a = Math.abs(a);\n", "canonical_solution": "  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "partial": "/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  a = Math.abs(a);\n  # print('@@this is the line to split##')\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "gc": "<|endoftext|>/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\n\nconst iscube = (a) => {\n  a = Math.abs(a);\n  if (a <= 1) return true;\n  if (a <= 2) return false;\n  if (a <= 3) return false;\n  if (a <= 4) return true;\n  if (a <= 5) return false;\n  if (a <= 6) return true;\n  if (a <= 7) return false;\n  if (a <= 8) return true;\n  if (a <= 9) return false;\n  if (a <= 10) return true;\n  if (a <= 11) return false;\n  if (a <= 12) return true;\n  if (a <= 13) return false;\n  if (a <= 14) return true;\n  if (a <= 15) return false;\n  if (a <= 16) return true;\n  if (a <= 17) return false;\n  if (a <= 18) return true;\n  if (a <= 19) return false;\n  if (a <= 20) return true;\n  if (a <= 21) return false;\n  if (a <= 22) return true;\n  if (a <= 23) return false;\n  if (a <= 24) return true;\n  if (a <= 25) return false;\n  if (a <= 26) return true;\n  if (a <= 27) return false;\n  if (a <= 28) return true;\n  if (a <= 29) return false;\n  if (a <= 30) return true;\n  if (a <= 31) return false;\n  if (a <= 32) return true;\n  if (a <= 33) return false;\n  if (a <= 34) return true;\n  if (a <= 35) return false;\n  if (a <= 36) return true;\n  if (a <= 37) return false;\n  if (a <= 38) return true;\n  if (a <= 39) return false;\n  if (a <= 40) return true;\n  if (a <= 41) return false;\n  if (a <= 42) return true;\n  if (a <= 43) return false;\n  if (a <= 44) return true;\n  if (a <= 45) return false;\n  if (a <= 46) return true;\n  if (a <= 47) return false;\n  if (a <= 48) return true;\n  if (a <= 49) return false;\n  if (a <= 50) return true;\n  if (a <= 51) return false;\n  if (a <= 52) return true;\n  if (a <= 53) return false;\n  if (a <= 54) return true;\n  if (a <= 55) return false;\n  if (a <= 56) return true;\n  if (a <= 57) return false;\n  if (a <= 58) return true;\n  if (a <= 59) return false;\n  if (a <= 60) return true;\n  if (a <= 61) return false;\n  if (a <= 62) return true;\n  if (a <= 63) return false;\n  if (a <= 64) return true;\n  if (a <= 65) return false;\n  if (a <= 66) return true;\n  if (a <= 67) return false;\n  if (a <= 68) return true;\n  if (a <= 69) return false;\n  if (a <= 70) return true;\n  if (a <= 71) return false;\n  if (a <= 72) return true;\n  if (a <= 73) return false;\n  if (a <= 74) return true;\n  if (a <= 75) return false;\n  if (a <= 76) return true;\n  if (a <= 77) return false;\n  if (a <= 78) return true;\n  if (a <= 79) return false;\n  if (a <= 80) return true;\n  if (a <= 81) return false;\n  if (a <= 82) return true;\n  if (a <= 83) return false;\n  if (a <= 84) return true;\n  if (a <= 85) return false;\n  if (a <= 86) return true;\n  if (a <= 87) return false;\n  if (a <= 88) return true;\n  if (a <= 89) return false;\n  if (a <= 90) return true;\n  if (a <= 91) return false;\n  if (a <= 92) return true;\n  if (a <= 93) return false;\n  if (a <= 94) return true;\n  if (a <= 95) return false;\n  if (a <= 96) return true;\n  if (a <= 97) return false;\n  if (a <= 98) return true;\n  if (a <= 99) return false;\n  if (a <= 100) return true;\n  if (a <= 101) return false;\n  if (a <= 102) return true;\n  if (a <= 103) return false;\n  if (a <= 104) return true;\n  if (a <= 105) return false;\n  if (a <= 106) return true;\n  if (a <= 107) return false;\n  if (a <= 108) return true;\n  if (a <= 109) return false;\n  if (a <= 110) return true;\n  if (a <= 111) return false;\n  if (a <= 112) return true;\n  if (a <= 113) return false;\n  if (a <= 114) return true;\n  if (a <= 115) return false;\n  if (a <= 116) return true;\n  if (a <= 117) return false;\n  if (a <= 118) return true;\n  if (a <= 119) return false;\n  if (a <= 120) return true;\n  if (a <= 121) return false;\n  if (a <= 122) return true;\n  if (a <= 123) return false;\n  if (a <= 124) return true;\n  if (a <= 125) return false;\n  if (a <= 126) return true;\n  if (a <= 127) return false;\n  if (a <= 128) return true;\n  if (a <= 129) return false;\n  if (a <= 130) return true;\n  if (a <= 131) return false;\n  if (a <= 132) return true;\n  if (a <= 133) return false;\n  if (a <= 134) return true;\n  if (a <= 135) return false;\n  if (a <= 136) return true;\n  if (a <= 137) return false;\n  if (a <= 138) return true;\n  if (a <= 139) return false;\n  if (a <= 140) return true;\n  if (a <= 141) return false;\n  if (a <= 142) return true;\n  if (a <= 143) return false;\n  if (a <= 144) return true;\n  if (a <= 145) return false;\n  if (a <= 146) return true;\n  if (a <= 147) return false;\n  if (a <= 148) return true;\n  if (a <= 149) return false;\n  if (a <= 150) return true;\n  if (a <= 151) return false;\n  if (a <= 152) return true;\n  if (a <= 153) return false;\n  if (a <= 154) return true;\n  if (a <= 155) return false;\n  if (a <= 156) return true;\n  if (a <= 157) return false;\n  if (a <= 158) return true;\n  if (a <= 159) return false;\n  if (a <= 160) return true;\n  if (a <= 161) return false;\n  if (a <= 162) return true;\n  if (a <= 163) return false;\n  if (a <= 164) return true;\n  if (a <= 165) return false;\n  if (a <= 166) return true;\n  if (a <= 167) return false;\n  if (a <= 168) return true;\n  if (a <= 169) return false;\n  if (a <= 170) return true;\n  if (a <= 171) return false;\n  if (a <= 172) return true;\n  if (a <= 173) return false;\n  if (a <= 174) return true;\n  if (a <= 175) return false;\n  if (a <= 176) return true;\n  if (a <= 177) return false;\n  if (a <= 178) return true;\n  if (a <= 179) return false;\n  if (a <= 180) return true;\n  if (a <= 181) return false;\n  if (a <= 182) return true;\n  if (a <= 183) return false;\n  if (a <= 184) return true;\n  if (a <= 185) return false;\n  if (a <= 186) return true;\n  if (a <= 187) return false;\n  if (a <= 188) return true;\n  if (a <= 189) return false;\n  if (a <= 190) return true;\n  if (a <= 191) return false;\n  if (a <= 192) return true;\n  if (a <= 193) return false;\n  if (a <= 194) return true;\n  if (a <= 195) return false;\n  if (a <= 196) return true;\n  if (a <= 197) return false;\n  if (a <= 198) return true;\n  if (a <= 199) return false;\n  if (a <= 200) return true;\n  if (a <= 201) return false;\n  if (a <= 202) return true;\n  if (a <= 203) return false;\n  if (a <= 204) return true;\n  if (a <= 205) return false;\n  if (a <= 206) return true;\n  if (a <= 207) return false;\n  if (a <= 208) return true;\n  if (a <= 209) return false;\n  if (a <= 210) return true;\n  if (a <= 211) return false;\n  if (a <= 212) return "}
{"task_id": "JavaScript/78", "prompt": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\n\nconst hexKey = (num) => {\n  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n", "canonical_solution": "    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "partial": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    # print('@@this is the line to split##')\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "gc": "<|endoftext|>/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\n\nconst hexKey = (num) => {\n  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    total += parseInt(num.charAt(i), 16);\n  for (let i = 0; i < primes.length; i++)\n    if (total % primes[i] == 0)\n      return primes[i];\n  return total;\n};\n\n/*\n  Write a function that receives a string and returns the number of characters\n  that are uppercase letters (A===B===C===D===E===F).\n  Examples:\n  For str = \"AB\" the output should be 1.\n  For str = \"1077E\" the output should be 2.\n  For str = \"ABED1A33\" the output should be 4.\n  For str = \"123456789ABCDEF0\" the output should be 6.\n  For str = \"2020\" the output should be 2.\n  */\n\nconst upperKey = (str) => {\n  var total = 0;\n  for (let i = 0; i < str.length; i++)\n    total += str.charCodeAt(i) > 64 && str.charCodeAt(i) < 91;\n  return total;\n};\n\n/*\n  Write a function that receives a string and returns the number of characters\n  that are lowercase letters (a===b===c===d===e===f).\n  Examples:\n  For str = \"AB\" the output should be 1.\n  For str = \"1077E\" the output should be 2.\n  For str = \"ABED1A33\" the output should be 4.\n  For str = \"123456789ABCDEF0\" the output should be 6.\n  For str = \"2020\" the output should be 2.\n  */\n\nconst lowerKey = (str) => {\n  var total = 0;\n  for (let i = 0; i < str.length; i++)\n    total += str.charCodeAt(i) > 96 && str.charCodeAt(i) < 123;\n  return total;\n};\n\n/*\n  Write a function that receives a string and returns the number of characters\n  that are numbers (0-9).\n  Examples:\n  For str = \"AB\" the output should be 1.\n  For str = \"1077E\" the output should be 2.\n  For str = \"ABED1A33\" the output should be 4.\n  For str = \"123456789ABCDEF0\" the output should be 6.\n  For str = \"2020\" the output should be 2.\n  */\n\nconst numberKey = (str) => {\n  var total = 0;\n  for (let i = 0; i < str.length; i++)\n    total += str.charCodeAt(i) > 48 && str.charCodeAt(i) < 57;\n  return total;\n};\n\n/*\n  Write a function that receives a string and returns the number of characters\n  that are symbols (A===B===C===D===E===F).\n  Examples:\n  For str = \"AB\" the output should be 1.\n  For str = \"1077E\" the output should be 2.\n  For str = \"ABED1A33\" the output should be 4.\n  For str = \"123456789ABCDEF0\" the output should be 6.\n  For str = \"2020\" the output should be 2.\n  */\n\nconst symbolKey = (str) => {\n  var total = 0;\n  for (let i = 0; i < str.length; i++)\n    total += str.charCodeAt(i) > 96 && str.charCodeAt(i) < 123;\n  return total;\n};\n\n/*\n  Write a function that receives a string and returns the number of characters\n  that are uppercase letters (A===B===C===D===E===F).\n  Examples:\n  For str = \"AB\" the output should be 1.\n  For str = \"1077E\" the output should be 2.\n  For str = \"ABED1A33\" the output should be 4.\n  For str = \"123456789ABCDEF0\" the output should be 6.\n  For str = \"2020\" the output should be 2.\n  */\n\nconst upperSymbolKey = (str) => {\n  var total = 0;\n  for (let i = 0; i < str.length; i++)\n    total += str.charCodeAt(i) > 64 && str.charCodeAt(i) < 91;\n  return total;\n};\n\n/*\n  Write a function that receives a string and returns the number of characters\n  that are lowercase letters (a===b===c===d===e===f).\n  Examples:\n  For str = \"AB\" the output should be 1.\n  For str = \"1077E\" the output should be 2.\n  For str = \"ABED1A33\" the output should be 4.\n  For str = \"123456789ABCDEF0\" the output should be 6.\n  For str = \"2020\" the output should be 2.\n  */\n\nconst lowerSymbolKey = (str) => {\n  var total = 0;\n  for (let i = 0; i < str.length; i++)\n    total += str.charCodeAt(i) > 96 && str.charCodeAt(i) < 123;\n  return total;\n};\n\n/*\n  Write a function that receives a string and returns the number of characters\n  that are numbers (0-9).\n  Examples:\n  For str = \"AB\" the output should be 1.\n  For str = \"1077E\" the output should be 2.\n  For str = \"ABED1A33\" the output should be 4.\n  For str = \"123456789ABCDEF0\" the output should be 6.\n  For str = \"2020\" the output should be 2.\n  */\n\nconst numberSymbolKey = (str) => {\n  var total = 0;\n  for (let i = 0; i < str.length; i++)\n    total += str.charCodeAt(i) > 48 && str.charCodeAt(i) < 57;\n  return total;\n};\n\n/*\n  Write a function that receives a string and returns the number of characters\n  that are symbols (A===B===C===D===E===F).\n  Examples:\n  For str = \"AB\" the output should be 1.\n  For str = \"1077E\" the output should be 2.\n  For str = \"ABED1A33\" the output should be 4.\n  For str = \"123456789ABCDEF0\" the output should be 6.\n  For str = \"2020\" the output should be 2.\n  */\n\nconst symbolSymbolKey = (str) => {\n  var total = 0;\n  for (let i = 0; i < str.length; i++)\n    total += str.charCodeAt(i) > 96 && str.charCodeAt(i) < 123;\n  return total;\n};\n\n/*\n  Write a function that receives a string and returns the number of characters\n  that are uppercase letters (A===B===C===D===E===F).\n  Examples:\n  For str = \"AB\" the output should be 1.\n  For str = \"1077E\" the output should be 2.\n  For str = \"ABED1A33\" the output should be 4.\n  For str = \"123456789ABCDEF0\" the output should be 6.\n  For str = \"2020\" the output should be 2.\n  */\n\nconst upperSymbolSymbolKey = (str) => {\n  var total = 0;\n  for (let i = 0; i < str.length; i++)\n    total += str.charCodeAt(i) > 64 && str.charCodeAt(i) < 91;\n  return total;\n};\n\n/*\n  Write a function that receives a string and returns the number of characters\n  that are lowercase letters (a===b===c===d===e===f).\n  Examples:\n  For str = \"AB\" the output should be 1.\n  For str = \"1077E\" the output should be 2.\n  For str = \"ABED1A33\" the output should be 4.\n  For str = \"123456789ABCDEF0\" the output should be 6.\n  For str = \"2020\" the "}
{"task_id": "JavaScript/79", "prompt": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\n\nconst decimalToBinary = (decimal) => {\n  return \"db\" + decimal.toString(2) + \"db\";\n", "canonical_solution": "}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "partial": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  return \"db\" + decimal.toString(2) + \"db\";\n  # print('@@this is the line to split##')\n}\n\n", "gc": "<|endoftext|>/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\n\nconst decimalToBinary = (decimal) => {\n  return \"db\" + decimal.toString(2) + \"db\";\n};\n\n/*\n  Write a function called binaryToDecimal that converts a binary number to a decimal number.\n  The function should return a string, with each character representing a decimal number. Each character\n  in the string will be '0' or '1'.\n\n  Examples:\n  binaryToDecimal(\"db1111db\")   # returns 15\n  binaryToDecimal(\"db100000db\")   # returns 32\n  */\n\nconst binaryToDecimal = (binary) => {\n  return binary.replace(/db/g, \"1\").replace(/1/g, \"0\");\n};\n\n/*\n  Write a function called decimalToHex that converts a decimal number to a hex number.\n  The function should return a string, with each character representing a hex number. Each character\n  in the string will be '0' or '1'.\n\n  Examples:\n  decimalToHex(15)   # returns \"db1111\"\n  decimalToHex(32)   # returns \"db100000\"\n  */\n\nconst decimalToHex = (decimal) => {\n  return \"db\" + decimal.toString(16) + \"db\";\n};\n\n/*\n  Write a function called hexToDecimal that converts a hex number to a decimal number.\n  The function should return a string, with each character representing a decimal number. Each character\n  in the string will be '0' or '1'.\n\n  Examples:\n  hexToDecimal(\"db1111\")   # returns 15\n  hexToDecimal(\"db100000\")   # returns 32\n  */\n\nconst hexToDecimal = (hex) => {\n  return hex.replace(/^db/, \"1\").replace(/1/g, \"0\");\n};\n\n/*\n  Write a function called hexToBinary that converts a hex number to a binary number.\n  The function should return a string, with each character representing a binary number. Each character\n  in the string will be '0' or '1'.\n\n  Examples:\n  hexToBinary(\"db1111\")   # returns \"1111\"\n  hexToBinary(\"db100000\")   # returns \"100000\"\n  */\n\nconst hexToBinary = hexToDecimal;\n\n/*\n  Write a function called binaryToHex that converts a binary number to a hex number.\n  The function should return a string, with each character representing a hex number. Each character\n  in the string will be '0' or '1'.\n\n  Examples:\n  binaryToHex(\"1111\")   # returns \"db1111\"\n  binaryToHex(\"100000\")   # returns \"db100000\"\n  */\n\nconst binaryToHex = (binary) => {\n  return binary.replace(/1/g, \"db\").replace(/db/g, \"0\");\n};\n\n/*\n  Write a function called hexToBinary that converts a hex number to a binary number.\n  The function should return a string, with each character representing a binary number. Each character\n  in the string will be '0' or '1'.\n\n  Examples:\n  hexToBinary(\"db1111\")   # returns \"1111\"\n  hexToBinary(\"db100000\")   # returns \"100000\"\n  */\n\nconst hexToBinary = hexToDecimal;\n\n/*\n  Write a function called binaryToOctal that converts a binary number to a octal number.\n  The function should return a string, with each character representing a octal number. Each character\n  in the string will be '0' or '1'.\n\n  Examples:\n  binaryToOctal(\"1111\")   # returns \"11\"\n  binaryToOctal(\"100000\")   # returns \"10\"\n  */\n\nconst binaryToOctal = (binary) => {\n  return binary.replace(/1/g, \"0\").replace(/0/g, \"1\");\n};\n\n/*\n  Write a function called octalToBinary that converts a octal number to a binary number.\n  The function should return a string, with each character representing a binary number. Each character\n  in the string will be '0' or '1'.\n\n  Examples:\n  octalToBinary(\"11\")   # returns \"db1111\"\n  octalToBinary(\"10\")   # returns \"db100000\"\n  */\n\nconst octalToBinary = octalToDecimal;\n\n/*\n  Write a function called binaryToOctal that converts a binary number to a octal number.\n  The function should return a string, with each character representing a octal number. Each character\n  in the string will be '0' or '1'.\n\n  Examples:\n  binaryToOctal(\"db1111\")   # returns \"11\"\n  binaryToOctal(\"db100000\")   # returns \"10\"\n  */\n\nconst binaryToOctal = binaryToDecimal;\n\n/*\n  Write a function called octalToBinary that converts a octal number to a binary number.\n  The function should return a string, with each character representing a binary number. Each character\n  in the string will be '0' or '1'.\n\n  Examples:\n  octalToBinary(\"db1111\")   # returns \"11\"\n  octalToBinary(\"db100000\")   # returns \"10\"\n  */\n\nconst octalToBinary = octalToDecimal;\n\n/*\n  Write a function called binaryToBinary that converts a binary number to a binary number.\n  The function should return a string, with each character representing a binary number. Each character\n  in the string will be '0' or '1'.\n\n  Examples:\n  binaryToBinary(\"1111\")   # returns \"11\"\n  binaryToBinary(\"100000\")   # returns \"10\"\n  */\n\nconst binaryToBinary = binaryToDecimal;\n\n/*\n  Write a function called hexToBinary that converts a hex number to a binary number.\n  The function should return a string, with each character representing a binary number. Each character\n  in the string will be '0' or '1'.\n\n  Examples:\n  hexToBinary(\"db1111\")   # returns \"11\"\n  hexToBinary(\"db100000\")   # returns \"10\"\n  */\n\nconst hexToBinary = hexToDecimal;\n\n/*\n  Write a function called binaryToBinary that converts a binary number to a binary number.\n  The function should return a string, with each character representing a binary number. Each character\n  in the string will be '0' or '1'.\n\n  Examples:\n  binaryToBinary(\"1111\")   # returns \"11\"\n  binaryToBinary(\"100000\")   # returns \"10\"\n  */\n\nconst binaryToBinary = binaryToDecimal;\n\n/*\n  Write a function called hexToBinary that converts a hex number to a binary number.\n  The function should return a string, with each character representing a binary number. Each character\n  in the string will be '0' or '1'.\n\n  Examples:\n  hexToBinary(\"db1111\")   # returns \"11\"\n  hexToBinary(\"db100000\")   # returns \"10\"\n  */\n\nconst hexToBinary = hexToDecimal;\n\n/*\n  Write a function called binaryToBinary that converts a binary number to a binary number.\n  The function should return a string, with each character representing a binary number. Each character\n  in the string will be '0' or '1'.\n\n  Examples:\n  binaryToBinary(\"1111\")   # returns \"11\"\n  binaryToBinary(\"100000\")   # returns \"10\"\n  */\n\nconst binaryToBinary = binaryToDecimal;\n\n/*\n  Write a function called binaryToBinary that converts a binary number to a binary number.\n  The function should return a string, with each character representing a binary number. Each "}
{"task_id": "JavaScript/80", "prompt": "/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\n\nconst isHappy = (s) => {\n  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n", "canonical_solution": "    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "partial": "/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    # print('@@this is the line to split##')\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "gc": "<|endoftext|>/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\n\nconst isHappy = (s) => {\n  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] === s[i + 1] && s[i] === s[i + 2])\n      return false;\n  return true;\n};\n\nmodule.exports = isHappy;\n\n},{}],3:[function(require,module,exports){\n/*\n  You are given a string s.\n  Your task is to check if it is palindrome or not.\n  A string is palindrome if its length is at least 2 and every 2 letters are different.\n  For example:\n  isPalindrome(a) => true\n  isPalindrome(aa) => false\n  isPalindrome(abcd) => false\n  isPalindrome(aabb) => true\n  isPalindrome(adb) => false\n  isPalindrome(xyy) => false\n  */\n\nconst isPalindrome = (s) => {\n  if (s.length < 2)\n    return false;\n  for (let i = 0; i < s.length - 1; i++)\n    if (s[i] === s[s.length - i - 1])\n      return false;\n  return true;\n};\n\nmodule.exports = isPalindrome;\n\n},{}],4:[function(require,module,exports){\n/*\n  You are given a string s.\n  Your task is to check if it is palindrome or not.\n  A string is palindrome if its length is at least 3 and every 3 letters are different.\n  For example:\n  isPalindrome(a) => true\n  isPalindrome(aa) => false\n  isPalindrome(abcd) => false\n  isPalindrome(aabb) => false\n  isPalindrome(adb) => true\n  isPalindrome(xyy) => false\n  */\n\nconst isPalindrome = (s) => {\n  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 1; i++)\n    if (s[i] === s[s.length - i - 1])\n      return false;\n  return true;\n};\n\nmodule.exports = isPalindrome;\n\n},{}],5:[function(require,module,exports){\n/*\n  You are given a string s.\n  Your task is to check if it is palindrome or not.\n  A string is palindrome if its length is at least 3 and every 3 letters are different.\n  For example:\n  isPalindrome(a) => true\n  isPalindrome(aa) => false\n  isPalindrome(abcd) => false\n  isPalindrome(aabb) => false\n  isPalindrome(adb) => false\n  isPalindrome(xyy) => false\n  */\n\nconst isPalindrome = (s) => {\n  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 1; i++)\n    if (s[i] === s[s.length - i - 1])\n      return false;\n  return true;\n};\n\nmodule.exports = isPalindrome;\n\n},{}],6:[function(require,module,exports){\n/*\n  You are given a string s.\n  Your task is to check if it is palindrome or not.\n  A string is palindrome if its length is at least 3 and every 3 letters are different.\n  For example:\n  isPalindrome(a) => true\n  isPalindrome(aa) => false\n  isPalindrome(abcd) => false\n  isPalindrome(aabb) => false\n  isPalindrome(adb) => false\n  isPalindrome(xyy) => false\n  */\n\nconst isPalindrome = (s) => {\n  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 1; i++)\n    if (s[i] === s[s.length - i - 1])\n      return false;\n  return true;\n};\n\nmodule.exports = isPalindrome;\n\n},{}],7:[function(require,module,exports){\n/*\n  You are given a string s.\n  Your task is to check if it is palindrome or not.\n  A string is palindrome if its length is at least 3 and every 3 letters are different.\n  For example:\n  isPalindrome(a) => true\n  isPalindrome(aa) => false\n  isPalindrome(abcd) => false\n  isPalindrome(aabb) => false\n  isPalindrome(adb) => false\n  isPalindrome(xyy) => false\n  */\n\nconst isPalindrome = (s) => {\n  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 1; i++)\n    if (s[i] === s[s.length - i - 1])\n      return false;\n  return true;\n};\n\nmodule.exports = isPalindrome;\n\n},{}],8:[function(require,module,exports){\n/*\n  You are given a string s.\n  Your task is to check if it is palindrome or not.\n  A string is palindrome if its length is at least 3 and every 3 letters are different.\n  For example:\n  isPalindrome(a) => true\n  isPalindrome(aa) => false\n  isPalindrome(abcd) => false\n  isPalindrome(aabb) => false\n  isPalindrome(adb) => false\n  isPalindrome(xyy) => false\n  */\n\nconst isPalindrome = (s) => {\n  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 1; i++)\n    if (s[i] === s[s.length - i - 1])\n      return false;\n  return true;\n};\n\nmodule.exports = isPalindrome;\n\n},{}],9:[function(require,module,exports){\n/*\n  You are given a string s.\n  Your task is to check if it is palindrome or not.\n  A string is palindrome if its length is at least 3 and every 3 letters are different.\n  For example:\n  isPalindrome(a) => true\n  isPalindrome(aa) => false\n  isPalindrome(abcd) => false\n  isPalindrome(aabb) => false\n  isPalindrome(adb) => false\n  isPalindrome(xyy) => false\n  */\n\nconst isPalindrome = (s) => {\n  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 1; i++)\n    if (s[i] === s[s.length - i - 1])\n      return false;\n  return true;\n};\n\nmodule.exports = isPalindrome;\n\n},{}],10:[function(require,module,exports){\n/*\n  You are given a string s.\n  Your task is to check if it is palindrome or not.\n  A string is palindrome if its length is at least 3 and every 3 letters are different.\n  For example:\n  isPalindrome(a) => true\n  isPalindrome(aa) => false\n  isPalindrome(abcd) => false\n  isPalindrome(aabb) => false\n  isPalindrome(adb) => false\n  isPalindrome(xyy) => false\n  */\n\nconst isPalindrome = (s) => {\n  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 1; i++)\n    if (s[i] === s[s.length - i - 1])\n      return false;\n  return true;\n};\n\nmodule.exports = isPalindrome;\n\n},{}],11:[function(require,module,exports){\n/*\n  You are given a string s.\n  Your task is to check if it is palindrome or not.\n  A string is palindrome if its length is at least 3 and every 3 letters are different.\n  For example:\n  isPalindrome(a) => true\n  isPalindrome(aa) => "}
{"task_id": "JavaScript/81", "prompt": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\n\nconst numericalLetterGrade = (grades) => {\n  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n", "canonical_solution": "      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "partial": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      # print('@@this is the line to split##')\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "gc": "<|endoftext|>/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\n\nconst numericalLetterGrade = (grades) => {\n  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n/*\n  It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\n\nconst numericalLetterGrade = (grades) => {\n  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n/*\n  It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\n\nconst numericalLetterGrade = (grades) => {\n  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n/*\n  It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3."}
{"task_id": "JavaScript/82", "prompt": "/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\n\nconst primeLength = (string) => {\n  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n", "canonical_solution": "    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "partial": "/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    # print('@@this is the line to split##')\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "gc": "<|endoftext|>/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\n\nconst primeLength = (string) => {\n  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (i % len == 0) { return false }\n  }\n  return true\n}\n\n/*Write a function that takes a string and returns true if the string\n  contains only letters and numbers and false otherwise\n  Examples\n  containsOnlyLetters('Hello') == true\n  containsOnlyLetters('kittens') == false\n  containsOnlyLetters('kittens') == true\n  containsOnlyLetters('kittens') == true\n  */\n\nconst containsOnlyLetters = (string) => {\n  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 0; i < len; i++) {\n    if (string.charAt(i)!= string.charAt(i)) { return false }\n  }\n  return true\n}\n\n/*Write a function that takes a string and returns true if the string\n  contains only numbers and false otherwise\n  Examples\n  containsOnlyNumbers('Hello') == true\n  containsOnlyNumbers('kittens') == false\n  containsOnlyNumbers('kittens') == true\n  containsOnlyNumbers('kittens') == true\n  */\n\nconst containsOnlyNumbers = (string) => {\n  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 0; i < len; i++) {\n    if (string.charAt(i)!= string.charAt(i)) { return false }\n  }\n  return true\n}\n\n/*Write a function that takes a string and returns true if the string\n  contains only letters and numbers and false otherwise\n  Examples\n  containsOnlyLettersAndNumbers('Hello') == true\n  containsOnlyLettersAndNumbers('kittens') == false\n  containsOnlyLettersAndNumbers('kittens') == true\n  containsOnlyLettersAndNumbers('kittens') == true\n  */\n\nconst containsOnlyLettersAndNumbers = (string) => {\n  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 0; i < len; i++) {\n    if (string.charAt(i)!= string.charAt(i)) { return false }\n  }\n  return true\n}\n\n/*Write a function that takes a string and returns true if the string\n  contains only letters and numbers and false otherwise\n  Examples\n  containsOnlyLettersAndNumbersAndLetters('Hello') == true\n  containsOnlyLettersAndNumbersAndLetters('kittens') == false\n  containsOnlyLettersAndNumbersAndLetters('kittens') == true\n  containsOnlyLettersAndNumbersAndLetters('kittens') == true\n  */\n\nconst containsOnlyLettersAndNumbersAndLetters = (string) => {\n  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 0; i < len; i++) {\n    if (string.charAt(i)!= string.charAt(i)) { return false }\n  }\n  return true\n}\n\n/*Write a function that takes a string and returns true if the string\n  contains only letters and numbers and false otherwise\n  Examples\n  containsOnlyLettersAndNumbersAndLettersAndNumbers('Hello') == true\n  containsOnlyLettersAndNumbersAndLettersAndNumbers('kittens') == false\n  containsOnlyLettersAndNumbersAndLettersAndNumbers('kittens') == true\n  containsOnlyLettersAndNumbersAndLettersAndNumbers('kittens') == true\n  */\n\nconst containsOnlyLettersAndNumbersAndLettersAndNumbers = (string) => {\n  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 0; i < len; i++) {\n    if (string.charAt(i)!= string.charAt(i)) { return false }\n  }\n  return true\n}\n\n/*Write a function that takes a string and returns true if the string\n  contains only letters and numbers and false otherwise\n  Examples\n  containsOnlyLettersAndNumbersAndLettersAndNumbersAndLetters('Hello') == true\n  containsOnlyLettersAndNumbersAndLettersAndNumbersAndLetters('kittens') == false\n  containsOnlyLettersAndNumbersAndLettersAndNumbersAndLetters('kittens') == true\n  containsOnlyLettersAndNumbersAndLettersAndNumbersAndLetters('kittens') == true\n  */\n\nconst containsOnlyLettersAndNumbersAndLettersAndNumbersAndLetters = (string) => {\n  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 0; i < len; i++) {\n    if (string.charAt(i)!= string.charAt(i)) { return false }\n  }\n  return true\n}\n\n/*Write a function that takes a string and returns true if the string\n  contains only letters and numbers and false otherwise\n  Examples\n  containsOnlyLettersAndNumbersAndLettersAndNumbersAndLettersAndNumbers('Hello') == true\n  containsOnlyLettersAndNumbersAndLettersAndNumbersAndLettersAndNumbers('kittens') == false\n  containsOnlyLettersAndNumbersAndLettersAndNumbersAndLettersAndNumbers('kittens') == true\n  containsOnlyLettersAndNumbersAndLettersAndNumbersAndLettersAndNumbers('kittens') == true\n  */\n\nconst containsOnlyLettersAndNumbersAndLettersAndNumbersAndLettersAndNumbers = (string) => {\n  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 0; i < len; i++) {\n    if (string.charAt(i)!= string.charAt(i)) { return false }\n  }\n  return true\n}\n\n/*Write a function that takes a string and returns true if the string\n  contains only letters and numbers and false otherwise\n  Examples\n  containsOnlyLettersAndNumbersAndLettersAndNumbersAndLettersAndNumbersAndLetters('Hello') == true\n  containsOnlyLettersAndNumbersAndLettersAndNumbersAndLettersAndNumbersAndLetters('kittens') == false\n  containsOnlyLettersAndNumbersAndLettersAndNumbersAndLettersAndNumbers('kittens') == true\n  containsOnlyLettersAndNumbersAndLettersAndNumbersAndLettersAndNumbers('kittens') == true\n  */\n\nconst containsOnlyLettersAndNumbersAndLettersAndNumbersAndLettersAndNumbersAndLetters = (string) => {\n  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 0; i < len; i++) {\n    if (string.charAt(i)!= string.charAt(i)) { return false }\n  }\n  return true\n}\n\n/*Write a function that takes a string and returns true if the string\n  contains only letters and numbers and false otherwise\n  Examples\n  containsOnlyLettersAndNumbersAndLettersAndNumbersAndLettersAndNumbersAndLettersAndNumbers('Hello') == true\n  containsOnlyLettersAndNumbersAndLettersAndNumbersAndLettersAndNumbersAndLettersAndNumbers('kittens') == false\n  containsOnlyLettersAndNumbersAndLettersAndNumbersAndLettersAndNumbersAndLettersAndNumbers('kittens') == true\n  containsOnlyLettersAndNumbersAndLettersAndNumbersAndLettersAndNumbersAndLettersAndNumbers('kittens') == true\n  */\n\nconst containsOnlyLettersAndNumbersAndLettersAndNumbersAndLettersAndNumbersAndLettersAndNumbers = (string) => {\n  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 0; i < len; i++) {\n    if (string.charAt(i)!= string.charAt(i)) { return false }\n  }\n  return true\n}\n\n/*Write a function that takes a string and returns true if the string\n  contains only letters and numbers and false otherwise\n  Examples\n  containsOnlyLettersAndNumbersAndLettersAndNumbersAndLettersAndNumbersAndLettersAndNumbers('Hello') == true\n  containsOnlyLettersAndNumbersAndLettersAndNumbersAndLettersAndNumbersAndLettersAndNumbers('kittens') == false\n  containsOnlyLettersAndNumbersAndLettersAndNumbersAndLettersAndNumbersAndLettersAndNumbers('kittens') == true\n  containsOnlyLettersAndNumbersAndLettersAndNumbersAndLettersAndNumber"}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\n\nconst startsOneEnds = (n) => {\n  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n", "canonical_solution": "    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "partial": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst startsOneEnds = (n) => {\n  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    # print('@@this is the line to split##')\n    t = t * 10\n  }\n  return t\n}\n\n", "gc": "<|endoftext|>/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\n\nconst startsOneEnds = (n) => {\n  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    if (n % i == 0) {\n      t += 1\n    }\n  }\n  return t\n}\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\n\nconst startsZeroEnds = (n) => {\n  if (n == 0) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    if (n % i == 0) {\n      t -= 1\n    }\n  }\n  return t\n}\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 2.\n  */\n\nconst startsTwoEnds = (n) => {\n  if (n == 2) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    if (n % i == 0) {\n      t += 1\n    }\n  }\n  return t\n}\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 3.\n  */\n\nconst startsThreeEnds = (n) => {\n  if (n == 3) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    if (n % i == 0) {\n      t += 1\n    }\n  }\n  return t\n}\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 4.\n  */\n\nconst startsFourEnds = (n) => {\n  if (n == 4) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    if (n % i == 0) {\n      t += 1\n    }\n  }\n  return t\n}\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 5.\n  */\n\nconst startsFiveEnds = (n) => {\n  if (n == 5) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    if (n % i == 0) {\n      t += 1\n    }\n  }\n  return t\n}\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 6.\n  */\n\nconst startsSixEnds = (n) => {\n  if (n == 6) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    if (n % i == 0) {\n      t += 1\n    }\n  }\n  return t\n}\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 7.\n  */\n\nconst startsSevenEnds = (n) => {\n  if (n == 7) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    if (n % i == 0) {\n      t += 1\n    }\n  }\n  return t\n}\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 8.\n  */\n\nconst startsEightEnds = (n) => {\n  if (n == 8) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    if (n % i == 0) {\n      t += 1\n    }\n  }\n  return t\n}\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 9.\n  */\n\nconst startsNineEnds = (n) => {\n  if (n == 9) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    if (n % i == 0) {\n      t += 1\n    }\n  }\n  return t\n}\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 10.\n  */\n\nconst startsTenEnds = (n) => {\n  if (n == 10) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    if (n % i == 0) {\n      t += 1\n    }\n  }\n  return t\n}\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 11.\n  */\n\nconst startsElevenEnds = (n) => {\n  if (n == 11) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    if (n % i == 0) {\n      t += 1\n    }\n  }\n  return t\n}\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 12.\n  */\n\nconst startsTwelveEnds = (n) => {\n  if (n == 12) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    if (n % i == 0) {\n      t += 1\n    }\n  }\n  return t\n}\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 13.\n  */\n\nconst startsThirteenEnds = (n) => {\n  if (n == 13) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    if (n % i == 0) {\n      t += 1\n    }\n  }\n  return t\n}\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 14.\n  */\n\nconst startsFourteenEnds = (n) => {\n  if (n == 14) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    if (n % i == 0) {\n      t += 1\n    }\n  }\n  return t\n}\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 15.\n  */\n\nconst startsFifteenEnds = (n) => {\n  if (n == 15) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    if (n % i == 0) {\n      t += 1\n    }\n  }\n  return t\n}\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 16.\n  */\n\nconst startsSixteenEnds = (n) => {\n  if (n == 16) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    if (n % i == 0) {\n      t += 1\n    }\n  }\n  return t\n}\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 17.\n  */\n\nconst startsSeventeenEnds = (n) => {\n  if (n == 17) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    if (n % i == 0) {\n      t += 1\n    }\n  }\n  return t\n}\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 18.\n  */\n\nconst startsEighteenEnds = (n) => {\n  if (n == 18) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    if (n % i == 0) {\n      t += 1\n    }\n  }\n  return t\n}\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 19.\n  */\n\nconst startsNineteenEnds = (n) => {\n  if (n == 19) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    if (n % i == 0) {\n      t += 1\n    }\n  }\n  return t\n}\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 20.\n  */\n\nconst startsTwentyEnd"}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\n\nconst solve = (N) => {\n  let t = 0\n  while (N > 0) {\n    t += N % 10\n", "canonical_solution": "    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "partial": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let t = 0\n  while (N > 0) {\n    t += N % 10\n    # print('@@this is the line to split##')\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "gc": "<|endoftext|>/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\n\nconst solve = (N) => {\n  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = Math.floor(N / 10)\n  }\n  return t\n}\n\nmodule.exports = { solve }\n},{}],13:[function(require,module,exports){\n/*\n  Given a positive integer N, return the sum of its digits in decimal.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of decimal number\n  */\n\nconst solve = (N) => {\n  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = Math.floor(N / 10)\n  }\n  return t\n}\n\nmodule.exports = { solve }\n},{}],14:[function(require,module,exports){\n/*\n  Given a positive integer N, return the sum of its digits in hexadecimal.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of hexadecimal number\n  */\n\nconst solve = (N) => {\n  let t = 0\n  while (N > 0) {\n    t += N % 16\n    N = Math.floor(N / 16)\n  }\n  return t\n}\n\nmodule.exports = { solve }\n},{}],15:[function(require,module,exports){\n/*\n  Given a positive integer N, return the sum of its digits in octal.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of octal number\n  */\n\nconst solve = (N) => {\n  let t = 0\n  while (N > 0) {\n    t += N % 8\n    N = Math.floor(N / 8)\n  }\n  return t\n}\n\nmodule.exports = { solve }\n},{}],16:[function(require,module,exports){\n/*\n  Given a positive integer N, return the sum of its digits in hexadecimal.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of hexadecimal number\n  */\n\nconst solve = (N) => {\n  let t = 0\n  while (N > 0) {\n    t += N % 16\n    N = Math.floor(N / 16)\n  }\n  return t\n}\n\nmodule.exports = { solve }\n},{}],17:[function(require,module,exports){\n/*\n  Given a positive integer N, return the sum of its digits in octal.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of octal number\n  */\n\nconst solve = (N) => {\n  let t = 0\n  while (N > 0) {\n    t += N % 8\n    N = Math.floor(N / 8)\n  }\n  return t\n}\n\nmodule.exports = { solve }\n},{}],18:[function(require,module,exports){\n/*\n  Given a positive integer N, return the sum of its digits in hexadecimal.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of hexadecimal number\n  */\n\nconst solve = (N) => {\n  let t = 0\n  while (N > 0) {\n    t += N % 16\n    N = Math.floor(N / 16)\n  }\n  return t\n}\n\nmodule.exports = { solve }\n},{}],19:[function(require,module,exports){\n/*\n  Given a positive integer N, return the sum of its digits in octal.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of octal number\n  */\n\nconst solve = (N) => {\n  let t = 0\n  while (N > 0) {\n    t += N % 8\n    N = Math.floor(N / 8)\n  }\n  return t\n}\n\nmodule.exports = { solve }\n},{}],20:[function(require,module,exports){\n/*\n  Given a positive integer N, return the sum of its digits in hexadecimal.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of hexadecimal number\n  */\n\nconst solve = (N) => {\n  let t = 0\n  while (N > 0) {\n    t += N % 16\n    N = Math.floor(N / 16)\n  }\n  return t\n}\n\nmodule.exports = { solve }\n},{}],21:[function(require,module,exports){\n/*\n  Given a positive integer N, return the sum of its digits in octal.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @"}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\n\nconst add = (lst) => {\n  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n", "canonical_solution": "    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "partial": "/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n      # print('@@this is the line to split##')\n    }\n  }\n  return t\n}\n\n", "gc": "<|endoftext|>/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\n\nconst add = (lst) => {\n  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n/*Given a non-empty list of integers lst. remove the even elements that are at odd indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 2, 6, 7]\n  */\n\nconst remove = (lst) => {\n  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      lst.pop(i)\n    }\n  }\n  return lst\n}\n\n/*Given a non-empty list of integers lst. return the sum of all even elements that are at odd indices..\n\n\n  Examples:\n      sum([4, 2, 6, 7]) ==> 10\n  */\n\nconst sum = (lst) => {\n  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n/*Given a non-empty list of integers lst. return the product of all even elements that are at odd indices..\n\n\n  Examples:\n      prod([4, 2, 6, 7]) ==> 24\n  */\n\nconst prod = (lst) => {\n  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t *= lst[i]\n    }\n  }\n  return t\n}\n\n/*Given a non-empty list of integers lst. return the sum of all odd elements that are at even indices..\n\n\n  Examples:\n      sum([4, 2, 6, 7]) ==> 10\n  */\n\nconst sumOddEven = (lst) => {\n  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2!= 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n/*Given a non-empty list of integers lst. return the product of all odd elements that are at even indices..\n\n\n  Examples:\n      prodOddEven([4, 2, 6, 7]) ==> 24\n  */\n\nconst prodOddEven = (lst) => {\n  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2!= 0) {\n      t *= lst[i]\n    }\n  }\n  return t\n}\n\n/*Given a non-empty list of integers lst. return the sum of all even elements that are at odd indices..\n\n\n  Examples:\n      sum([4, 2, 6, 7]) ==> 10\n  */\n\nconst sumEven = (lst) => {\n  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n/*Given a non-empty list of integers lst. return the product of all even elements that are at even indices..\n\n\n  Examples:\n      prodEven([4, 2, 6, 7]) ==> 24\n  */\n\nconst prodEven = (lst) => {\n  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t *= lst[i]\n    }\n  }\n  return t\n}\n\n/*Given a non-empty list of integers lst. return the sum of all odd elements that are at even indices..\n\n\n  Examples:\n      sum([4, 2, 6, 7]) ==> 10\n  */\n\nconst sumOddOdd = (lst) => {\n  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2!= 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n/*Given a non-empty list of integers lst. return the product of all odd elements that are at odd indices..\n\n\n  Examples:\n      prodOddOdd([4, 2, 6, 7]) ==> 24\n  */\n\nconst prodOddOdd = (lst) => {\n  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2!= 0) {\n      t *= lst[i]\n    }\n  }\n  return t\n}\n\n/*Given a non-empty list of integers lst. return the sum of all even elements that are at even indices..\n\n\n  Examples:\n      sum([4, 2, 6, 7]) ==> 10\n  */\n\nconst sumEvenOdd = (lst) => {\n  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n/*Given a non-empty list of integers lst. return the product of all even elements that are at odd indices..\n\n\n  Examples:\n      prodEvenOdd([4, 2, 6, 7]) ==> 24\n  */\n\nconst prodEvenOdd = (lst) => {\n  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t *= lst[i]\n    }\n  }\n  return t\n}\n\n/*Given a non-empty list of integers lst. return the sum of all odd elements that are at even indices..\n\n\n  Examples:\n      sum([4, 2, 6, 7]) ==> 10\n  */\n\nconst sumOddEvenOdd = (lst) => {\n  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2!= 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n/*Given a non-empty list of integers lst. return the product of all even elements that are at odd indices..\n\n\n  Examples:\n      prodOddEvenOdd([4, 2, 6, 7]) ==> 24\n  */\n\nconst prodOddEvenOdd = (lst) => {\n  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2!= 0) {\n      t *= lst[i]\n    }\n  }\n  return t\n}\n\n/*Given a non-empty list of integers lst. return the sum of all odd elements that are at even indices..\n\n\n  Examples:\n      sum([4, 2, 6, 7]) ==> 10\n  */\n\nconst sumOddOddEvenOdd = (lst) => {\n  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2!= 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n/*Given a non-empty list of integers lst. return the product of all even elements that are at odd indices..\n\n\n  Examples:\n      prodOddEvenOdd([4, 2, 6, 7]) ==> 24\n  */\n\nconst prodOddEvenOddOdd = (lst) => {\n  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2!= 0) {\n      t *= lst[i]\n    }\n  }\n  return t\n}\n\n/*Given a non-empty list of integers lst. return the sum of all odd elements that are at even indices..\n\n\n  Examples:\n      sum([4, 2, 6, 7]) ==> 10\n  */\n\nconst sumOddOddOddEvenOdd = (lst) => {\n  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2!= 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n/*Given a non-empty list of integers lst. return the product of all even elements that are at odd indices..\n\n\n  Examples:\n      prodOddEvenOddOdd([4, 2, 6, 7]) ==> 24\n  */\n\nconst prodOddEvenOddOddOdd = (lst) => {\n  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2!= 0) {\n      t *= "}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\n\nconst antiShuffle = (s) => {\n  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n", "canonical_solution": "      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "partial": "/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n        # print('@@this is the line to split##')\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "gc": "<|endoftext|>/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\n\nconst antiShuffle = (s) => {\n  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  return arr.join(' ')\n}\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\n\nconst antiShuffle = (s) => {\n  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() > arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  return arr.join(' ')\n}\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\n\nconst antiShuffle = (s) => {\n  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() > arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  return arr.join(' ')\n}\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\n\nconst antiShuffle = (s) => {\n  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() > arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  return arr.join(' ')\n}\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\n\nconst antiShuffle = (s) => {\n  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() > arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  return arr.join(' ')\n}\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\n\nconst antiShuffle = (s) => {\n  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() > arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  return arr.join(' ')\n}\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\n\nconst antiShuffle = (s) => {\n  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; "}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\n\nconst getRow = (lst, x) => {\n  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n", "canonical_solution": "      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "partial": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n        # print('@@this is the line to split##')\n      }\n    }\n  }\n  return t\n}\n\n", "gc": "<|endoftext|>/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\n\nconst getRow = (lst, x) => {\n  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\n\nconst getRows = (lst, x) => {\n  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRows([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRows([], 1) == []\n  getRows([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\n\nconst getRowss = (lst, x) => {\n  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRows([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRows([], 1) == []\n  getRows([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\n\nconst getRowss = (lst, x) => {\n  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRows([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRows([], 1) == []\n  getRows([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\n\nconst getRowss = (lst, x) => {\n  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRows([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRows([], 1) == []\n  getRows([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\n\nconst getRowss = (lst, x) => {\n  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRows([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRows([], 1) == []\n  getRows([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\n\nconst getRowss = (lst, x) => {\n  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n"}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\n\nconst sortArray = (array) => {\n  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n", "canonical_solution": "      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "partial": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n        # print('@@this is the line to split##')\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "gc": "<|endoftext|>/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\n\nconst sortArray = (array) => {\n  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    arr.splice(ind, 0, arr[j])\n    tot = tot + arr[j]\n  }\n  return arr\n}\n\n/*\n  Given an array of non-negative integers, return its maximum sum.\n\n  Example:\n  * maxSum([5, 1, 3, 2]) => 10\n  * maxSum([5, 1, 3, 2, 3, 4]) => 10\n  * maxSum([5, 1, 3, 2, 3, 4]) => 10\n  * maxSum([5, 1, 3, 2, 3, 4]) => 10\n  * maxSum([5, 1, 3, 2, 3, 4]) => 10\n  */\n\nconst maxSum = (array) => {\n  let max = array[0]\n  for (let i = 1; i < array.length; i++) {\n    if (array[i] > max) {\n      max = array[i]\n    }\n  }\n  return max\n}\n\n/*\n  Given an array of non-negative integers, return its minimum value.\n\n  Example:\n  * minSum([5, 1, 3, 2]) => 1\n  * minSum([5, 1, 3, 2, 3, 4]) => 1\n  * minSum([5, 1, 3, 2, 3, 4]) => 1\n  * minSum([5, 1, 3, 2, 3, 4]) => 1\n  * minSum([5, 1, 3, 2, 3, 4]) => 1\n  */\n\nconst minSum = (array) => {\n  let min = array[0]\n  for (let i = 1; i < array.length; i++) {\n    if (array[i] < min) {\n      min = array[i]\n    }\n  }\n  return min\n}\n\n/*\n  Given an array of non-negative integers, return its median value.\n\n  Example:\n  * median([5, 1, 3, 2]) => 2\n  * median([5, 1, 3, 2, 3, 4]) => 2\n  * median([5, 1, 3, 2, 3, 4]) => 2\n  * median([5, 1, 3, 2, 3, 4]) => 2\n  * median([5, 1, 3, 2, 3, 4]) => 2\n  */\n\nconst median = (array) => {\n  let mid = array.length / 2\n  let left = median(array.slice(0, mid))\n  let right = median(array.slice(mid))\n  return left + right / 2\n}\n\n/*\n  Given an array of non-negative integers, return its mode value.\n\n  Example:\n  * mode([5, 1, 3, 2]) => 2\n  * mode([5, 1, 3, 2, 3, 4]) => 2\n  * mode([5, 1, 3, 2, 3, 4]) => 2\n  * mode([5, 1, 3, 2, 3, 4]) => 2\n  * mode([5, 1, 3, 2, 3, 4]) => 2\n  */\n\nconst mode = (array) => {\n  let mode = 0\n  let max = array[0]\n  for (let i = 1; i < array.length; i++) {\n    if (array[i] > max) {\n      max = array[i]\n    }\n  }\n  for (let i = 0; i < array.length; i++) {\n    if (array[i] === max) {\n      mode++\n    }\n  }\n  return mode\n}\n\n/*\n  Given an array of non-negative integers, return its mode value.\n\n  Example:\n  * mode([5, 1, 3, 2]) => 2\n  * mode([5, 1, 3, 2, 3, 4]) => 2\n  * mode([5, 1, 3, 2, 3, 4]) => 2\n  * mode([5, 1, 3, 2, 3, 4]) => 2\n  * mode([5, 1, 3, 2, 3, 4]) => 2\n  */\n\nconst mode = (array) => {\n  let mode = 0\n  let max = array[0]\n  for (let i = 1; i < array.length; i++) {\n    if (array[i] > max) {\n      max = array[i]\n    }\n  }\n  for (let i = 0; i < array.length; i++) {\n    if (array[i] === max) {\n      mode++\n    }\n  }\n  return mode\n}\n\n/*\n  Given an array of non-negative integers, return its mode value.\n\n  Example:\n  * mode([5, 1, 3, 2]) => 2\n  * mode([5, 1, 3, 2, 3, 4]) => 2\n  * mode([5, 1, 3, 2, 3, 4]) => 2\n  * mode([5, 1, 3, 2, 3, 4]) => 2\n  * mode([5, 1, 3, 2, 3, 4]) => 2\n  */\n\nconst mode = (array) => {\n  let mode = 0\n  let max = array[0]\n  for (let i = 1; i < array.length; i++) {\n    if (array[i] > max) {\n      max = array[i]\n    }\n  }\n  for (let i = 0; i < array.length; i++) {\n    if (array[i] === max) {\n      mode++\n    }\n  }\n  return mode\n}\n\n/*\n  Given an array of non-negative integers, return its mode value.\n\n  Example:\n  * mode([5, 1, 3, 2]) => 2\n  * mode([5, 1, 3, 2, 3, 4]) => 2\n  * mode([5, 1, 3, 2, 3, 4]) => 2\n  * mode([5, 1, 3, 2, 3, 4]) => 2\n  * mode([5, 1, 3, 2, 3, 4]) => 2\n  */\n\nconst mode = (array) => {\n  let mode = 0\n  let max = array[0]\n  for (let i = 1; i < array.length; i++) {\n    if (array[i] > max) {\n      max = array[i]\n    }\n  }\n  for (let i = 0; i < array.length; i++) {\n    if (array[i] === max) {\n      mode++\n    }\n  }\n  return mode\n}\n\n/*\n  Given an array of non-negative integers, return its mode value.\n\n  Example:\n  * mode([5, 1, 3, 2]) => 2\n  * mode([5, 1, 3, 2, 3, 4]) => 2\n  * mode([5, 1, 3, 2, 3, 4]) => 2\n  * mode([5, 1, 3, 2, 3, 4]) => 2\n  * mode([5, 1, 3, 2, 3, 4]) => 2\n  */\n\nconst mode = (array) => {\n  let mode = 0\n  let max = array[0]\n  for (let i = 1; i < array.length; i++) {\n    if (array[i] > max) {\n      max = array[i]\n    }\n  }\n  for (let i = 0; i < array.length; i++) {\n    if (array[i] === max) {\n      mode++\n    }\n  }\n  return mode\n}\n\n/*\n  Given an array of non-negative integers, return its mode value.\n\n  Example:\n  * mode([5, 1, 3, 2]) => 2\n  * mode([5, 1, 3, 2, 3, 4]) => 2\n  * mode([5, 1, 3, 2, 3, 4]) => 2\n  * mode([5, 1, 3, 2, 3, 4]) => 2\n  * mode([5, 1, 3, 2, 3, 4]) => 2\n  */\n\nconst mode = (array) => {\n  let mode = 0\n  let max = array[0]\n  for (let i = 1; i < array.length; i++) {\n    if (array[i] > max) {\n      max = array[i]\n    }\n  }\n  for (let i = 0; i < array.length; i++) {\n    if (array[i] === max) {\n      mode++\n    }\n  }\n  return mode\n}\n\n/*\n  Given an array of non-negative integers, return its mode value.\n\n  Example:\n  * mode([5, 1, 3, 2]) => 2\n  * mode([5, 1, 3, 2, 3, 4]) => 2\n  * mode([5, 1, 3, 2, 3, 4]) => 2\n  * mode([5, 1, 3, 2, 3, 4]) => 2\n  * mode([5, 1, 3, 2, 3, 4]) => 2\n  */\n\nconst mode = (array) => {\n  let mode = 0\n  let max = array[0]\n  for (let i = 1; i < array.length; i++) {\n    if (array[i] > max) {\n      max = array[i]\n    }\n  }\n  for (let i = 0; i < array.length; i++) {\n    if (array[i] === max) {\n      mode++\n    }\n  }\n  return mode\n}\n\n/*\n  Given an array of "}
{"task_id": "JavaScript/89", "prompt": "/*Create a function encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\n\nconst encrypt = (s) => {\n  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n", "canonical_solution": "    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "partial": "/*Create a function encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    # print('@@this is the line to split##')\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "gc": "<|endoftext|>/*Create a function encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\n\nconst encrypt = (s) => {\n  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n/*Create a function decrypt that takes a string as an argument and\n  returns a string decrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift up by two multiplied to two places.\n  For example:\n  decrypt('lm') returns 'hi'\n  decrypt('ewhjklnop') returns 'asdfghjkl'\n  decrypt('kj') returns 'gf'\n  decrypt('ix') returns 'et'\n  */\n\nconst decrypt = (s) => {\n  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() - 26\n    if (p < 26) { p += 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n/*Create a function rotate that takes a string as an argument and\n  returns a string rotated the alphabet by one place. \n  For example:\n  rotate('hi') returns 'asdfghjkl'\n  rotate('asdfghjkl') returns 'hi'\n  rotate('gf') returns 'kj'\n  rotate('et') returns 'ix'\n  */\n\nconst rotate = (s) => {\n  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 1\n    if (p > 26) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n/*Create a function reverse that takes a string as an argument and\n  returns a string reversed the alphabet by one place. \n  For example:\n  reverse('hi') returns 'asdfghjkl'\n  reverse('asdfghjkl') returns 'hi'\n  reverse('gf') returns 'kj'\n  reverse('et') returns 'ix'\n  */\n\nconst reverse = (s) => {\n  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() - 26\n    if (p < 26) { p += 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n/*Create a function shuffle that takes a string as an argument and\n  returns a string shuffled into random order. \n  For example:\n  shuffle('hi') returns 'asdfghjkl'\n  shuffle('asdfghjkl') returns 'hi'\n  shuffle('gf') returns 'kj'\n  shuffle('et') returns 'ix'\n  */\n\nconst shuffle = (s) => {\n  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 1\n    if (p > 26) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n/*Create a function shuffle that takes a string as an argument and\n  returns a string shuffled into random order. \n  For example:\n  shuffle('hi') returns 'asdfghjkl'\n  shuffle('asdfghjkl') returns 'hi'\n  shuffle('gf') returns 'kj'\n  shuffle('et') returns 'ix'\n  */\n\nconst shuffle = (s) => {\n  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() - 26\n    if (p < 26) { p += 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n/*Create a function shuffle that takes a string as an argument and\n  returns a string shuffled into random order. \n  For example:\n  shuffle('hi') returns 'asdfghjkl'\n  shuffle('asdfghjkl') returns 'hi'\n  shuffle('gf') returns 'kj'\n  shuffle('et') returns 'ix'\n  */\n\nconst shuffle = (s) => {\n  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 1\n    if (p > 26) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n/*Create a function shuffle that takes a string as an argument and\n  returns a string shuffled into random order. \n  For example:\n  shuffle('hi') returns 'asdfghjkl'\n  shuffle('asdfghjkl') returns 'hi'\n  shuffle('gf') returns 'kj'\n  shuffle('et') returns 'ix'\n  */\n\nconst shuffle = (s) => {\n  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() - 26\n    if (p < 26) { p += 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n/*Create a function shuffle that takes a string as an argument and\n  returns a string shuffled into random order. \n  For example:\n  shuffle('hi') returns 'asdfghjkl'\n  shuffle('asdfghjkl') returns 'hi'\n  shuffle('gf') returns 'kj'\n  shuffle('et') returns 'ix'\n  */\n\nconst shuffle = (s) => {\n  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 1\n    if (p > 26) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n/*Create a function shuffle that takes a string as an argument and\n  returns a string shuffled into random order. \n  For example:\n  shuffle('hi') returns 'asdfghjkl'\n  shuffle('asdfghjkl') returns 'hi'\n  shuffle('gf') returns 'kj'\n  shuffle('et') returns 'ix'\n  */\n\nconst shuffle = (s) => {\n  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() - 26\n    if (p < 26) { p += 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n/*Create a function shuffle that takes a string as an argument and\n  returns a string shuffled into random order. \n  For example:\n  shuffle('hi') returns 'asdfghjkl'\n  shuffle('asdfghjkl') returns 'hi'\n  shuffle('gf') returns 'kj'\n  shuffle('et') returns 'ix'\n  */\n\nconst shuffle = (s) => {\n  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 1\n    if (p > 26) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n/*Create a function shuffle that takes a string as an argument and\n  returns a string shuffled into random order. \n  For example:\n  shuffle('hi') returns 'asdfghjkl'\n  shuffle('asdfghjkl') returns 'hi'\n  shuffle('gf') returns 'kj'\n  shuffle('et') returns 'ix'\n  */\n\nconst shuffle = (s) => {\n  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() - 26\n    if (p < 26) { p += 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n/*Create a function shuffle that takes a string as an argument and\n"}
{"task_id": "JavaScript/90", "prompt": "/*\n  You are given a list of integers.\n  Write a function nextSmallest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\n\nconst nextSmallest = (lst) => {\n  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n", "canonical_solution": "  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "partial": "/*\n  You are given a list of integers.\n  Write a function nextSmallest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nconst nextSmallest = (lst) => {\n  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n    # print('@@this is the line to split##')\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "gc": "<|endoftext|>/*\n  You are given a list of integers.\n  Write a function nextSmallest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\n\nconst nextSmallest = (lst) => {\n  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\nmodule.exports = nextSmallest\n\n},{}],4:[function(require,module,exports){\n/*\n  You are given a list of integers and a target integer.\n  Return the number of ways to arrange the integers in the list such that the target is placed into the first place.\n  \n  nextSmallest([1,2,3,4,5], 5) -> 1\n  nextSmallest([1,2,3,4,5], 6) -> 2\n  nextSmallest([1,2,3,4,5], 7) -> 0\n  nextSmallest([1,2,3,4,5], 8) -> 0\n  nextSmallest([1,2,3,4,5], 9) -> 0\n  nextSmallest([1,2,3,4,5], 10) -> 0\n  nextSmallest([1,2,3,4,5], 11) -> 0\n  nextSmallest([1,2,3,4,5], 12) -> 1\n  nextSmallest([1,2,3,4,5], 13) -> 1\n  nextSmallest([1,2,3,4,5], 14) -> 1\n  nextSmallest([1,2,3,4,5], 15) -> 1\n  nextSmallest([1,2,3,4,5], 16) -> 1\n  nextSmallest([1,2,3,4,5], 17) -> 1\n  nextSmallest([1,2,3,4,5], 18) -> 1\n  nextSmallest([1,2,3,4,5], 19) -> 1\n  nextSmallest([1,2,3,4,5], 20) -> 1\n  nextSmallest([1,2,3,4,5], 21) -> 1\n  nextSmallest([1,2,3,4,5], 22) -> 1\n  nextSmallest([1,2,3,4,5], 23) -> 1\n  nextSmallest([1,2,3,4,5], 24) -> 1\n  nextSmallest([1,2,3,4,5], 25) -> 1\n  nextSmallest([1,2,3,4,5], 26) -> 1\n  nextSmallest([1,2,3,4,5], 27) -> 1\n  nextSmallest([1,2,3,4,5], 28) -> 1\n  nextSmallest([1,2,3,4,5], 29) -> 1\n  nextSmallest([1,2,3,4,5], 30) -> 1\n  nextSmallest([1,2,3,4,5], 31) -> 1\n  nextSmallest([1,2,3,4,5], 32) -> 1\n  nextSmallest([1,2,3,4,5], 33) -> 1\n  nextSmallest([1,2,3,4,5], 34) -> 1\n  nextSmallest([1,2,3,4,5], 35) -> 1\n  nextSmallest([1,2,3,4,5], 36) -> 1\n  nextSmallest([1,2,3,4,5], 37) -> 1\n  nextSmallest([1,2,3,4,5], 38) -> 1\n  nextSmallest([1,2,3,4,5], 39) -> 1\n  nextSmallest([1,2,3,4,5], 40) -> 1\n  nextSmallest([1,2,3,4,5], 41) -> 1\n  nextSmallest([1,2,3,4,5], 42) -> 1\n  nextSmallest([1,2,3,4,5], 43) -> 1\n  nextSmallest([1,2,3,4,5], 44) -> 1\n  nextSmallest([1,2,3,4,5], 45) -> 1\n  nextSmallest([1,2,3,4,5], 46) -> 1\n  nextSmallest([1,2,3,4,5], 47) -> 1\n  nextSmallest([1,2,3,4,5], 48) -> 1\n  nextSmallest([1,2,3,4,5], 49) -> 1\n  nextSmallest([1,2,3,4,5], 50) -> 1\n  nextSmallest([1,2,3,4,5], 51) -> 1\n  nextSmallest([1,2,3,4,5], 52) -> 1\n  nextSmallest([1,2,3,4,5], 53) -> 1\n  nextSmallest([1,2,3,4,5], 54) -> 1\n  nextSmallest([1,2,3,4,5], 55) -> 1\n  nextSmallest([1,2,3,4,5], 56) -> 1\n  nextSmallest([1,2,3,4,5], 57) -> 1\n  nextSmallest([1,2,3,4,5], 58) -> 1\n  nextSmallest([1,2,3,4,5], 59) -> 1\n  nextSmallest([1,2,3,4,5], 60) -> 1\n  nextSmallest([1,2,3,4,5], 61) -> 1\n  nextSmallest([1,2,3,4,5], 62) -> 1\n  nextSmallest([1,2,3,4,5], 63) -> 1\n  nextSmallest([1,2,3,4,5], 64) -> 1\n  nextSmallest([1,2,3,4,5], 65) -> 1\n  nextSmallest([1,2,3,4,5], 66) -> 1\n  nextSmallest([1,2,3,4,5], 67) -> 1\n  nextSmallest([1,2,3,4,5], 68) -> 1\n  nextSmallest([1,2,3,4,5], 69) -> 1\n  nextSmallest([1,2,3,4,5], 70) -> 1\n  nextSmallest([1,2,3,4,5], 71) -> 1\n  nextSmallest([1,2,3,4,5], 72) -> 1\n  nextSmallest([1,2,3,4,5], 73) -> 1\n  nextSmallest([1,2,3,4,5], 74) -> 1\n  nextSmallest([1,2,3,4,5], 75) -> 1\n  nextSmallest([1,2,3,4,5], 76) -> 1\n  nextSmallest([1,2,3,4,5], 77) -> 1\n  nextSmallest([1,2,3,4,5], 78) -> 1\n  nextSmallest([1,2,3,4,5], 79) -> 1\n  nextSmallest([1,2,3,4,5], 80) -> 1\n  nextSmallest([1,2,3,4,5], 81) -> 1\n  nextSmallest([1,2,3,4,5], 82) -> 1\n  nextSmallest([1,2,3,4,5], 83) -> 1\n  nextSmallest([1,2,3,4,5], 84) -> 1\n  nextSmallest([1,2,3,4,5], 85) -> 1\n  nextSmallest([1,2,3,4,5], 86) -> 1\n  nextSmallest([1,2,3,4,5], 87) -> 1\n  nextSmallest([1,2,3,4,5], 88) -> 1\n  nextSmallest([1,2,3,4,5], 89) -> 1\n  nextSmallest([1,2,3,4,5], 90) -> 1\n  nextSmallest([1,2,3,4,5], 91) -> 1\n  nextSmallest([1,2,3,4,5], 92) -> 1\n  nextSmallest([1,2,3,4,5], 93) -> 1\n  nextSmallest([1,2,3,4,5], 94) -> 1\n  nextSmallest([1,2,3,4,5], 95) -> 1\n  nextSmallest([1,2,3,4,5], 96) -> 1\n  nextSmallest([1,2,3,4,5], 97) -> 1\n  nextSmallest([1,2,3,4,5], 98) -> 1\n  nextSmallest([1,2,3,4,5], 99) -> 1\n  nextSmallest([1,2,3,4,5], 100) -> 1\n  nextSmallest([1,2,3,4,5], 101) -> 1\n  nextSmallest([1,2,3,4,5], 102) -> 1\n  nextSmallest([1,2,3,4,5], 103) -> 1\n  nextSmallest([1,2,3,4,5], 104) -> 1\n  nextSmallest([1,2,3,4,5], 105) -> 1\n  nextSmallest([1,2,3,4,5], 106) -> 1"}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\n\nconst isBored = (S) => {\n  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n", "canonical_solution": "        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "partial": "/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        # print('@@this is the line to split##')\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "gc": "<|endoftext|>/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\n\nconst isBored = (S) => {\n  let t = 0\n  if (S[0] == 'I' && S[1] =='') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] =='' && S[i + 2] == 'I' && S[i + 3] =='') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of deaths. A death is a sentence that ends with the word \"!\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isDeath(\"Hello world\")\n  0\n  >>> isDeath(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\n\nconst isDeath = (S) => {\n  let t = 0\n  if (S[0] == '!' && S[1] =='') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] =='' && S[i + 2] == '!' && S[i + 3] =='') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of religions. A religion (a noun) is a sentence that starts with the word \"R\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isReligion(\"Hello world\")\n  0\n  >>> isReligion(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\n\nconst isReligion = (S) => {\n  let t = 0\n  if (S[0] == 'R' && S[1] =='') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] =='' && S[i + 2] == 'R' && S[i + 3] =='') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of religious. A religious (a noun) is a sentence that starts with the word \"R\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isReligious(\"Hello world\")\n  0\n  >>> isReligious(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\n\nconst isReligious = (S) => {\n  let t = 0\n  if (S[0] == 'R' && S[1] =='') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] =='' && S[i + 2] == 'R' && S[i + 3] =='') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of religious people. A religious person (a noun) is a sentence that starts with the word \"R\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isReligiousPerson(\"Hello world\")\n  0\n  >>> isReligiousPerson(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\n\nconst isReligiousPerson = (S) => {\n  let t = 0\n  if (S[0] == 'R' && S[1] =='') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] =='' && S[i + 2] == 'R' && S[i + 3] =='') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of religious people. A religious person (a noun) is a sentence that starts with the word \"R\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isReligiousPerson(\"Hello world\")\n  0\n  >>> isReligiousPerson(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\n\nconst isReligiousPerson = (S) => {\n  let t = 0\n  if (S[0] == 'R' && S[1] =='') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] =='' && S[i + 2] == 'R' && S[i + 3] =='') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of religious people. A religious person (a noun) is a sentence that starts with the word \"R\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isReligiousPerson(\"Hello world\")\n  0\n  >>> isReligiousPerson(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\n\nconst isReligiousPerson = (S) => {\n  let t = 0\n  if (S[0] == 'R' && S[1] =='') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] =='' && S[i + 2] == 'R' && S[i + 3] =='') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of religious people. A religious person (a noun) is a sentence that starts with the word \"R\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isReligiousPerson(\"Hello world\")\n  0\n  >>> isReligiousPerson(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\n\nconst isReligiousPerson = (S) => {\n  let t = 0\n  if (S[0] == 'R' && S[1] =='') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] =='' && S[i + 2] == 'R' && S[i + 3] =='') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of religious people. A religious person (a noun) is a sentence that starts with the word \"R\".\n  Sentence"}
{"task_id": "JavaScript/92", "prompt": "/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\n\nconst anyInt = (x, y, z) => {\n  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n", "canonical_solution": "  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "partial": "/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n    # print('@@this is the line to split##')\n  }\n  return false\n}\n\n", "gc": "<|endoftext|>/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\n\nconst anyInt = (x, y, z) => {\n  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if any of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  allInt(5, 2, 7) ➞ true\n  allInt(3, 2, 2) ➞ false\n  allInt(3, -2, 1) ➞ true\n  allInt(3.6, -2.2, 2) ➞ false\n  */\n\nconst allInt = (x, y, z) => {\n  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if any of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\n\nconst anyInt = (x, y, z) => {\n  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if any of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  allInt(5, 2, 7) ➞ true\n  allInt(3, 2, 2) ➞ false\n  allInt(3, -2, 1) ➞ true\n  allInt(3.6, -2.2, 2) ➞ false\n  */\n\nconst allInt = (x, y, z) => {\n  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if any of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\n\nconst anyInt = (x, y, z) => {\n  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if any of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  allInt(5, 2, 7) ➞ true\n  allInt(3, 2, 2) ➞ false\n  allInt(3, -2, 1) ➞ true\n  allInt(3.6, -2.2, 2) ➞ false\n  */\n\nconst allInt = (x, y, z) => {\n  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if any of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\n\nconst anyInt = (x, y, z) => {\n  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if any of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  allInt(5, 2, 7) ➞ true\n  allInt(3, 2, 2) ➞ false\n  allInt(3, -2, 1) ➞ true\n  allInt(3.6, -2.2, 2) ➞ false\n  */\n\nconst allInt = (x, y, z) => {\n  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if any of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\n\nconst anyInt = (x, y, z) => {\n  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if any of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  allInt(5, 2, 7) ➞ true\n  allInt(3, 2, 2) ➞ false\n  allInt(3, -2, 1) ➞ true\n  allInt(3.6, -2.2, 2) ➞ false\n  */\n\nconst allInt = (x, y, z) => {\n  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if any of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\n\nconst anyInt = (x, y, z) => {\n  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if any of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  allInt(5, "}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\n\nconst encode = (message) => {\n  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n", "canonical_solution": "    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "partial": "/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    # print('@@this is the line to split##')\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "gc": "<|endoftext|>/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\n\nconst encode = (message) => {\n  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    t += String.fromCharCode(p)\n  }\n  return t.toLowerCase()\n}\n\n/*\n  Write a function that takes a message, and decodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  \n  Examples:\n  >>> decode('TGST')\n  'test'\n  >>> decode('tHKS KS C MGSSCGG')\n  'This is a message'\n  */\n\nconst decode = (message) => {\n  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    t += String.fromCharCode(p)\n  }\n  return t.toUpperCase()\n}\n\n/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  \n  Examples:\n  >>> encode('TGST')\n  'test'\n  >>> encode('tHKS KS C MGSSCGG')\n  'This is a message'\n  */\n\nconst encodeAll = (message) => {\n  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    t += String.fromCharCode(p)\n  }\n  return t.toLowerCase()\n}\n\n/*\n  Write a function that takes a message, and decodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  \n  Examples:\n  >>> decode('TGST')\n  'test'\n  >>> decode('tHKS KS C MGSSCGG')\n  'This is a message'\n  */\n\nconst decodeAll = (message) => {\n  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    t += String.fromCharCode(p)\n  }\n  return t.toUpperCase()\n}\n\n/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  \n  Examples:\n  >>> encode('TGST')\n  'test'\n  >>> encode('tHKS KS C MGSSCGG')\n  'This is a message'\n  */\n\nconst encodeAllToUpperCase = (message) => {\n  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    t += String.fromCharCode(p)\n  }\n  return t.toLowerCase()\n}\n\n/*\n  Write a function that takes a message, and decodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  \n  Examples:\n  >>> decode('TGST')\n  'test'\n  >>> decode('tHKS KS C MGSSCGG')\n  'This is a message'\n  */\n\nconst decodeAllToUpperCase = (message) => {\n  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    t += String.fromCharCode(p)\n  }\n  return t.toUpperCase()\n}\n\n/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  \n  Examples:\n  >>> encode('TGST')\n  'test'\n  >>> encode('tHKS KS C MGSSCGG')\n  'This is a message'\n  */\n\nconst encodeAllToLowerCase = (message) => {\n  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    t += String.fromCharCode(p)\n  }\n  return t.toLowerCase()\n}\n\n/*\n  Write a function that takes a message, and decodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  \n  Examples:\n  >>> decode('TGST')\n  'test'\n  >>> decode('tHKS KS C MGSSCGG')\n  'This is a message'\n  */\n\nconst decodeAllToLowerCase = (message) => {\n  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    t += String.fromCharCode(p)\n  }\n  return t.toUpperCase()\n}\n\n/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  \n  Examples:\n  >>> encode('TGST')\n  'test'\n  >>> encode('tHKS KS C MGSSCGG')\n  'This is a message'\n  */\n\nconst encodeAllToUpperCaseAndLowerCase = (message) => {\n  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    t += String.fromCharCode(p)\n  }\n  return t.toLowerCase()\n}\n\n/*\n  Write a function that takes a message, and decodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  \n  Examples:\n  >>> decode('TGST')\n  'test'\n  >>> decode('tHKS KS C MGSSCGG')\n  'This is a message'\n  */\n\nconst decodeAllToUpperCaseAndLowerCase = (message) => {\n  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96"}
{"task_id": "JavaScript/94", "prompt": "/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\n\nconst skjkasdkd = (lst) => {\n  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n", "canonical_solution": "  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "partial": "/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n    # print('@@this is the line to split##')\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "gc": "<|endoftext|>/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\n\nconst skjkasdkd = (lst) => {\n  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  return t\n}\n\nconst skjkasdkd = (lst) => {\n  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  return t\n}\n\nconst skjkasdkd = (lst) => {\n  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  return t\n}\n\nconst skjkasdkd = (lst) => {\n  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  return t\n}\n\nconst skjkasdkd = (lst) => {\n  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  return t\n}\n\nconst skjkasdkd = (lst) => {\n  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  return t\n}\n\nconst skjkasdkd = (lst) => {\n  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  return t\n}\n\nconst skjkasdkd = (lst) => {\n  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  return t\n}\n\nconst skjkasdkd = (lst) => {\n  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  return t\n}\n\nconst skjkasdkd = (lst) => {\n  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  return t\n}\n\nconst skjkasdkd = (lst) => {\n  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  return t\n}\n\nconst skjkasdkd = (lst) => {\n  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  return t\n}\n\nconst skjkasdkd = (lst) => {\n  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  return t\n}\n\nconst skjkasdkd = (lst) => {\n  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  return t\n}\n\nconst skjkasdkd = (lst) => {\n  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  return t\n}\n\nconst skjkasdkd = (lst) => {\n  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  return t\n}\n\nconst skjkasdkd = (lst) => {\n  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  return t\n}\n\nconst skjkasdkd = (lst) => {\n  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  return t\n}\n\nconst skjkasdkd = (lst) => {\n  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  return t\n}\n\nconst skjkasdkd = (lst) => {\n  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j"}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\n\nconst checkDictCase = (dict) => {\n  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n", "canonical_solution": "      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "partial": "/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      # print('@@this is the line to split##')\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "gc": "<|endoftext|>/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\n\nconst checkDictCase = (dict) => {\n  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i] >= lo && key[i] <= hi) {\n        lo = key[i]\n      } else {\n        hi = (key[i] > hi)? key[i] : hi\n      }\n    }\n  }\n  return c === Object.keys(dict).length\n}\n\n/*\n  Given a string, return true if all characters are lower case or all \n  characters are upper case, else return false.\n  The function should return false is the given string is empty.\n  Examples:\n  checkStringCase(\"a\") should return true.\n  checkStringCase(\"A\") should return false.\n  checkStringCase(\"aB\") should return false.\n  checkStringCase(\"aBc\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n"}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\n\nconst countUpTo = (n) => {\n  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n", "canonical_solution": "    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "partial": "/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n      # print('@@this is the line to split##')\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "gc": "<|endoftext|>/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\n\nconst countUpTo = (n) => {\n  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p === 0) { t.push(i) }\n  }\n  return t\n}\n\n/*Implement a function that takes an integer and returns the sum of the digits of that integer.\n  for example:\n  digitSum(2) => 2\n  digitSum(3) => 3\n  digitSum(4) => 5\n  digitSum(5) => 10\n  digitSum(6) => 15\n  digitSum(7) => 20\n  digitSum(8) => 25\n  digitSum(9) => 30\n  digitSum(10) => 35\n  digitSum(11) => 40\n  digitSum(12) => 45\n  digitSum(13) => 50\n  digitSum(14) => 55\n  digitSum(15) => 60\n  digitSum(16) => 65\n  digitSum(17) => 70\n  digitSum(18) => 75\n  digitSum(19) => 80\n  digitSum(20) => 85\n  digitSum(21) => 90\n  digitSum(22) => 95\n  digitSum(23) => 100\n  digitSum(24) => 105\n  digitSum(25) => 110\n  digitSum(26) => 115\n  digitSum(27) => 120\n  digitSum(28) => 125\n  digitSum(29) => 130\n  digitSum(30]) => 135\n  digitSum(31) => 140\n  digitSum(32) => 145\n  digitSum(33) => 150\n  digitSum(34) => 155\n  digitSum(35) => 160\n  digitSum(36) => 165\n  digitSum(37) => 170\n  digitSum(38) => 175\n  digitSum(39) => 180\n  digitSum(40)=> 185\n  digitSum(41) => 190\n  digitSum(42) => 195\n  digitSum(43) => 200\n  digitSum(44) => 205\n  digitSum(45) => 210\n  digitSum(46) => 215\n  digitSum(47) => 220\n  digitSum(48) => 225\n  digitSum(49) => 230\n  digitSum(50) => 235\n  digitSum(51) => 240\n  digitSum(52) => 245\n  digitSum(53) => 250\n  digitSum(54) => 255\n  digitSum(55) => 260\n  digitSum(56) => 265\n  digitSum(57) => 270\n  digitSum(58) => 275\n  digitSum(59) => 280\n  digitSum(60) => 285\n  digitSum(61) => 290\n  digitSum(62) => 295\n  digitSum(63) => 300\n  digitSum(64) => 305\n  digitSum(65) => 310\n  digitSum(66) => 315\n  digitSum(67) => 320\n  digitSum(68) => 325\n  digitSum(69) => 330\n  digitSum(70) => 335\n  digitSum(71) => 340\n  digitSum(72) => 345\n  digitSum(73) => 350\n  digitSum(74) => 355\n  digitSum(75) => 360\n  digitSum(76) => 365\n  digitSum(77) => 370\n  digitSum(78) => 375\n  digitSum(79) => 380\n  digitSum(80) => 385\n  digitSum(81) => 390\n  digitSum(82) => 395\n  digitSum(83) => 400\n  digitSum(84) => 405\n  digitSum(85) => 410\n  digitSum(86) => 415\n  digitSum(87) => 420\n  digitSum(88) => 425\n  digitSum(89) => 430\n  digitSum(90) => 435\n  digitSum(91) => 440\n  digitSum(92) => 445\n  digitSum(93) => 450\n  digitSum(94) => 455\n  digitSum(95) => 460\n  digitSum(96) => 465\n  digitSum(97) => 470\n  digitSum(98) => 475\n  digitSum(99) => 480\n  digitSum(100) => 485\n  digitSum(101) => 490\n  digitSum(102) => 495\n  digitSum(103) => 500\n  digitSum(104) => 505\n  digitSum(105) => 510\n  digitSum(106) => 515\n  digitSum(107) => 520\n  digitSum(108) => 525\n  digitSum(109) => 530\n  digitSum(110)=> 535\n  digitSum(111) => 540\n  digitSum(112) => 545\n  digitSum(113) => 550\n  digitSum(114) => 555\n  digitSum(115) => 560\n  digitSum(116) => 565\n  digitSum(117) => 570\n  digitSum(118) => 575\n  digitSum(119) => 580\n  digitSum(120) => 585\n  digitSum(121) => 590\n  digitSum(122) => 595\n  digitSum(123) => 600\n  digitSum(124) => 605\n  digitSum(125) => 610\n  digitSum(126) => 615\n  digitSum(127) => 620\n  digitSum(128) => 625\n  digitSum(129) => 630\n  digitSum(130) => 635\n  digitSum(131) => 640\n  digitSum(132) => 645\n  digitSum(133) => 650\n  digitSum(134) => 655\n  digitSum(135) => 660\n  digitSum(136) => 665\n  digitSum(137) => 670\n  digitSum(138) => 675\n  digitSum(139) => 680\n  digitSum(140) => 685\n  digitSum(141) => 690\n  digitSum(142) => 695\n  digitSum(143) => 700\n  digitSum(144) => 705\n  digitSum(145) => 710\n  digitSum(146) => 715\n  digitSum(147) => 720\n  digitSum(148) => 725\n  digitSum(149) => 730\n  digitSum(150) => 735\n  digitSum(151) => 740\n  digitSum(152) => 745\n  digitSum(153) => 750\n  digitSum(154) => 755\n  digitSum(155) => 760\n  digitSum(156) => 765\n  digitSum(157) => 770\n  digitSum(158) => 775\n  digitSum(159) => 780\n  digitSum(160) => 785\n  digitSum(161) "}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\n\nconst multiply = (a, b) => {\n  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n", "canonical_solution": "  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "partial": "/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  # print('@@this is the line to split##')\n  return (a % 10) * (b % 10)\n}\n\n", "gc": "<|endoftext|>/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\n\nconst multiply = (a, b) => {\n  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  if (a === 0 || b === 0) {\n    return 0\n  }\n  return a * b\n}\n\n/*\n  Complete the function that takes two integers and returns \n  the sum of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  sum(148, 412) should return 148.\n  sum(19, 28) should return 28.\n  sum(2020, 1851) should return 1851.\n  sum(14,-15) should return 14.\n  */\n\nconst sum = (a, b) => {\n  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  if (a === 0 || b === 0) {\n    return 0\n  }\n  return a + b\n}\n\n/*\n  Complete the function that takes two integers and returns \n  the difference between their unit digits.\n  Assume the input is always valid.\n  Examples:\n  difference(148, 412) should return -412.\n  difference(19, 28) should return 28.\n  difference(2020, 1851) should return 1851.\n  difference(14,-15) should return 14.\n  */\n\nconst difference = (a, b) => {\n  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  if (a === 0 || b === 0) {\n    return 0\n  }\n  return a - b\n}\n\n/*\n  Complete the function that takes two integers and returns \n  the absolute value of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  absolute(148, 412) should return 148.\n  absolute(19, 28) should return 28.\n  absolute(2020, 1851) should return 1851.\n  absolute(14,-15) should return 14.\n  */\n\nconst absolute = (a, b) => {\n  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  if (a === 0 || b === 0) {\n    return 0\n  }\n  return Math.abs(a)\n}\n\n/*\n  Complete the function that takes two integers and returns \n  the square root of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  sqrt(148, 412) should return 148.\n  sqrt(19, 28) should return 28.\n  sqrt(2020, 1851) should return 1851.\n  sqrt(14,-15) should return 14.\n  */\n\nconst sqrt = (a, b) => {\n  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  if (a === 0 || b === 0) {\n    return 0\n  }\n  return Math.sqrt(a)\n}\n\n/*\n  Complete the function that takes two integers and returns \n  the inverse of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  inverse(148, 412) should return 148.\n  inverse(19, 28) should return 28.\n  inverse(2020, 1851) should return 1851.\n  inverse(14,-15) should return 14.\n  */\n\nconst inverse = (a, b) => {\n  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  if (a === 0 || b === 0) {\n    return 0\n  }\n  return 1 / a\n}\n\n/*\n  Complete the function that takes two integers and returns \n  the modulo of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  modulo(148, 412) should return 148.\n  modulo(19, 28) should return 28.\n  modulo(2020, 1851) should return 1851.\n  modulo(14,-15) should return 14.\n  */\n\nconst modulo = (a, b) => {\n  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  if (a === 0 || b === 0) {\n    return 0\n  }\n  return a % b\n}\n\n/*\n  Complete the function that takes two integers and returns \n  the absolute value of the modulo of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  absolute(148, 412) should return 148.\n  absolute(19, 28) should return 28.\n  absolute(2020, 1851) should return 1851.\n  absolute(14,-15) should return 14.\n  */\n\nconst absoluteModulo = (a, b) => {\n  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  if (a === 0 || b === 0) {\n    return 0\n  }\n  return Math.abs(a % b)\n}\n\n/*\n  Complete the function that takes two integers and returns \n  the square root of the modulo of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  absoluteModulo(148, 412) should return 148.\n  absoluteModulo(19, 28) should return 28.\n  absoluteModulo(2020, 1851) should return 1851.\n  absoluteModulo(14,-15) should return 14.\n  */\n\nconst absoluteModuloSqrt = (a, b) => {\n  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  if (a === 0 || b === 0) {\n    return 0\n  }\n  return Math.sqrt(absoluteModulo(a, b))\n}\n\n/*\n  Complete the function that takes two integers and returns \n  the square root of the absolute value of the modulo of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  absoluteModuloSqrt(148, 412) should return 148.\n  absoluteModuloSqrt(19, 28) should return 28.\n  absoluteModuloSqrt(2020, 1851) should return 1851.\n  absoluteModuloSqrt(14,-15) should return 14.\n  */\n\nconst absoluteModuloSqrtModulo = (a, b) => {\n  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  if (a === 0 || b === 0) {\n    return 0\n  }\n  return Math.sqrt(absoluteModulo(a, b) % b)\n}\n\n/*\n  Complete the function that takes two integers and returns \n  the square root of the absolute value of the absolute value of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  absoluteModuloSqrtModulo(148, 412) should return 148.\n  absoluteModuloSqrtModulo(19, 28) should return 28.\n  absoluteModuloSqrtModulo(2020, 1851) should return 1851.\n  absoluteModuloSqrtModulo(14,-15) should return 14.\n  */\n\nconst absoluteModuloSqrtAbsoluteModulo = (a, b) => {\n  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  if (a === 0 || b === 0) {\n    return 0\n  }\n  return Math.sqrt(absoluteModulo(a, b) * absoluteModulo(a, b))\n}\n\n/*\n  Complete the function that takes two integers and returns \n  the square root of the absolute value of the absolute value of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  absoluteModuloSqrtAbsoluteModulo(148, 412) should return 148.\n  absoluteModuloSqrtAbsoluteModulo(19, 28) should return 28.\n  absoluteModuloSqrtAbsoluteModulo(2020, 1851) should return 1851.\n  absoluteModu"}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\n\nconst countUpper = (s) => {\n  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n", "canonical_solution": "  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "partial": "/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n    # print('@@this is the line to split##')\n  }\n  return p\n}\n\n", "gc": "<|endoftext|>/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\n\nconst countUpper = (s) => {\n  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n/*\n  Given a string s, count the number of lowercase vowels in even indices.\n  \n  For example:\n  countLower('aBCdEf') returns 1\n  countLower('abcdefg') returns 0\n  countLower('dBBE') returns 0\n  */\n\nconst countLower = (s) => {\n  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u') { p++ }\n  }\n  return p\n}\n\n/*\n  Given a string s, count the number of vowels in even indices.\n  \n  For example:\n  countVowels('aBCdEf') returns 1\n  countVowels('abcdefg') returns 0\n  countVowels('dBBE') returns 0\n  */\n\nconst countVowels = (s) => {\n  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u') { p++ }\n  }\n  return p\n}\n\n/*\n  Given a string s, count the number of spaces in even indices.\n  \n  For example:\n  countSpace('aBCdEf') returns 1\n  countSpace('abcdefg') returns 0\n  countSpace('dBBE') returns 0\n  */\n\nconst countSpace = (s) => {\n  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] =='') {\n      p++\n    }\n  }\n  return p\n}\n\n/*\n  Given a string s, count the number of spaces in odd indices.\n  \n  For example:\n  countSpace('aBCdEf') returns 1\n  countSpace('abcdefg') returns 0\n  countSpace('dBBE') returns 0\n  */\n\nconst countSpaceOdd = (s) => {\n  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i]!='') {\n      p++\n    }\n  }\n  return p\n}\n\n/*\n  Given a string s, count the number of spaces in even indices.\n  \n  For example:\n  countSpace('aBCdEf') returns 1\n  countSpace('abcdefg') returns 0\n  countSpace('dBBE') returns 0\n  */\n\nconst countSpaceEven = (s) => {\n  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] =='') {\n      p++\n    }\n  }\n  return p\n}\n\n/*\n  Given a string s, count the number of spaces in odd indices.\n  \n  For example:\n  countSpace('aBCdEf') returns 1\n  countSpace('abcdefg') returns 0\n  countSpace('dBBE') returns 0\n  */\n\nconst countSpaceOddEven = (s) => {\n  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] =='') {\n      p++\n    }\n  }\n  return p\n}\n\n/*\n  Given a string s, count the number of spaces in even indices.\n  \n  For example:\n  countSpace('aBCdEf') returns 1\n  countSpace('abcdefg') returns 0\n  countSpace('dBBE') returns 0\n  */\n\nconst countSpaceOddOddEven = (s) => {\n  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] =='') {\n      p++\n    }\n  }\n  return p\n}\n\n/*\n  Given a string s, count the number of spaces in even indices.\n  \n  For example:\n  countSpace('aBCdEf') returns 1\n  countSpace('abcdefg') returns 0\n  countSpace('dBBE') returns 0\n  */\n\nconst countSpaceOddOddOddEven = (s) => {\n  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] =='') {\n      p++\n    }\n  }\n  return p\n}\n\n/*\n  Given a string s, count the number of spaces in even indices.\n  \n  For example:\n  countSpace('aBCdEf') returns 1\n  countSpace('abcdefg') returns 0\n  countSpace('dBBE') returns 0\n  */\n\nconst countSpaceOddOddOddOddEven = (s) => {\n  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] =='') {\n      p++\n    }\n  }\n  return p\n}\n\n/*\n  Given a string s, count the number of spaces in even indices.\n  \n  For example:\n  countSpace('aBCdEf') returns 1\n  countSpace('abcdefg') returns 0\n  countSpace('dBBE') returns 0\n  */\n\nconst countSpaceOddOddOddOddOddEven = (s) => {\n  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] =='') {\n      p++\n    }\n  }\n  return p\n}\n\n/*\n  Given a string s, count the number of spaces in even indices.\n  \n  For example:\n  countSpace('aBCdEf') returns 1\n  countSpace('abcdefg') returns 0\n  countSpace('dBBE') returns 0\n  */\n\nconst countSpaceOddOddOddOddOddOddOddEven = (s) => {\n  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] =='') {\n      p++\n    }\n  }\n  return p\n}\n\n/*\n  Given a string s, count the number of spaces in even indices.\n  \n  For example:\n  countSpace('aBCdEf') returns 1\n  countSpace('abcdefg') returns 0\n  countSpace('dBBE') returns 0\n  */\n\nconst countSpaceOddOddOddOddOddOddOddOddOddEven = (s) => {\n  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] =='') {\n      p++\n    }\n  }\n  return p\n}\n\n/*\n  Given a string s, count the number of spaces in even indices.\n  \n  For example:\n  countSpace('aBCdEf') returns 1\n  countSpace('abcdefg') returns 0\n  countSpace('dBBE') returns 0\n  */\n\nconst countSpaceOddOddOddOddOddOddOddOddOddOddOddEven = (s) => {\n  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] =='') {\n      p++\n    }\n  }\n  return p\n}\n\n/*\n  Given a string s, count the number of spaces in even indices.\n  \n  For example:\n  countSpace('aBCdEf') returns 1\n  countSpace('abcdefg') returns 0\n  countSpace('dBBE') returns 0\n  */\n\nconst countSpaceOddOddOddOddOddOddOddOddOddOddOddOddOddOddEven = (s) => {\n  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] =='') {\n      p++\n    }\n"}
{"task_id": "JavaScript/99", "prompt": "/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\n\nconst closestInteger = (value) => {\n  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n", "canonical_solution": "  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "partial": "/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  # print('@@this is the line to split##')\n  else { value += t }\n  return value\n}\n\n", "gc": "<|endoftext|>/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\n\nconst closestInteger = (value) => {\n  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  return value\n}\n\n/* Create a function that takes a value (string) representing a number\n  and returns the closest floating point number to it. If the number\n  is equidistant from two floating point numbers, round it away from\n  zero.\n  Examples\n  >>> closestFloatingPoint(\"10\")\n  10\n  >>> closestFloatingPoint(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two floating point numbers, the one you should return is the\n  one that is farthest from zero. For example closestFloatingPoint(\"14.5\")\n  should return 15 and closestFloatingPoint(\"-14.5\") should return -15.\n  */\n\nconst closestFloatingPoint = (value) => {\n  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  return value\n}\n\n/* Create a function that takes a value (string) representing a number\n  and returns the closest boolean to it. If the number is equidistant\n  from two booleans, round it away from zero.\n  Examples\n  >>> closestBoolean(\"10\")\n  10\n  >>> closestBoolean(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two booleans, the one you should return is the one that is the\n  farthest from zero. For example closestBoolean(\"14.5\") should\n  return 15 and closestBoolean(\"-14.5\") should return -15.\n  */\n\nconst closestBoolean = (value) => {\n  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  return value\n}\n\n/* Create a function that takes a value (string) representing a number\n  and returns the closest date object to it. If the number is equidistant\n  from two date objects, round it away from zero.\n  Examples\n  >>> closestDate(\"10\")\n  10\n  >>> closestDate(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two date objects, the one you should return is the one that is the\n  farthest from zero. For example closestDate(\"14.5\") should\n  return 15 and closestDate(\"-14.5\") should return -15.\n  */\n\nconst closestDate = (value) => {\n  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  return value\n}\n\n/* Create a function that takes a value (string) representing a number\n  and returns the closest time object to it. If the number is equidistant\n  from two time objects, round it away from zero.\n  Examples\n  >>> closestTime(\"10\")\n  10\n  >>> closestTime(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two time objects, the one you should return is the one that is the\n  farthest from zero. For example closestTime(\"14.5\") should\n  return 15 and closestTime(\"-14.5\") should return -15.\n  */\n\nconst closestTime = (value) => {\n  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  return value\n}\n\n/* Create a function that takes a value (string) representing a number\n  and returns the closest date object to it. If the number is equidistant\n  from two date objects, round it away from zero.\n  Examples\n  >>> closestDate(\"10\")\n  10\n  >>> closestDate(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two date objects, the one you should return is the one that is the\n  farthest from zero. For example closestDate(\"14.5\") should\n  return 15 and closestDate(\"-14.5\") should return -15.\n  */\n\nconst closestDateAndTime = (value) => {\n  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  return value\n}\n\n/* Create a function that takes a value (string) representing a number\n  and returns the closest date object to it. If the number is equidistant\n  from two date objects, round it away from zero.\n  Examples\n  >>> closestDateAndTime(\"10\")\n  10\n  >>> closestDateAndTime(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two date objects, the one you should return is the one that is the\n  farthest from zero. For example closestDateAndTime(\"14.5\") should\n  return 15 and closestDateAndTime(\"-14.5\") should return -15.\n  */\n\nconst closestDateAndTimeAndDate = (value) => {\n  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  return value\n}\n\n/* Create a function that takes a value (string) representing a number\n  and returns the closest date object to it. If the number is equidistant\n  from two date objects, round it away from zero.\n  Examples\n  >>> closestDateAndTimeAndDate(\"10\")\n  10\n  >>> closestDateAndTimeAndDate(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two date objects, the one you should return is the one that is the\n  farthest from zero. For example closestDateAndTimeAndDate(\"14.5\") should\n  return 15 and closestDateAndTimeAndDate(\"-14.5\") should return -15.\n  */\n\nconst closestDateAndTimeAndDateAndTime = (value) => {\n  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  return value\n}\n\n/* Create a function that takes a value (string) representing a number\n  and returns the closest date object to it. If the number is equidistant\n  from two date objects, round it away from zero.\n  Examples\n  >>> closestDateAndTimeAndDateAndTime(\"10\")\n  10\n  >>> closestDateAndTimeAndDateAndTime(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two date objects, the one you should return is the one that is the\n  farthest from zero. For example closestDateAndTimeAndDateAndTime(\"14.5\") should\n  return 15 and closestDateAndTimeAndDateAndTime(\"-14.5\") should return -15.\n  */\n\nconst closestDateAndTimeAndDateAndTimeAndDate = (value) => {\n  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  return "}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\n\nconst makeAPile = (n) => {\n  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n", "canonical_solution": "  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "partial": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n    # print('@@this is the line to split##')\n  }\n  return t\n}\n\n", "gc": "<|endoftext|>/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\n\nconst makeAPile = (n) => {\n  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\n\nconst makeAPile = (n) => {\n  let t = []\n  for (let i = n; i > 0; i -= 2) {\n    t.push(i)\n  }\n  return t\n}\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\n\nconst makeAPile = (n) => {\n  let t = []\n  for (let i = n; i > 0; i -= 2) {\n    t.push(i)\n  }\n  return t\n}\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\n\nconst makeAPile = (n) => {\n  let t = []\n  for (let i = n; i > 0; i -= 2) {\n    t.push(i)\n  }\n  return t\n}\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\n\nconst makeAPile = (n) => {\n  let t = []\n  for (let i = n; i > 0; i -= 2) {\n    t.push(i)\n  }\n  return t\n}\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\n\nconst makeAPile = (n) => {\n  let t = []\n  for (let i = n; i > 0; i -= 2) {\n    t.push(i)\n  }\n  return t\n}\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\n\nconst makeAPile = (n) => {\n  let t = []\n  for (let i = n; i > 0; i -= 2) {\n    t.push(i)\n  }\n  return t\n}\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\n\nconst makeAPile = (n) => {\n  let t = []\n  for (let i = n; i > 0; i -= 2) {\n    t.push(i)\n  }\n  return t\n}\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\n\nconst makeAPile = (n) => {\n  let t = []\n  for (let i = n; i > 0; i -= 2) {\n    t.push(i)\n  }\n  return t\n}\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\n\nconst makeAPile = (n) => {\n  let t = []\n  for (let i = n; i > 0; i -= 2) {\n    t.push(i)\n  }\n  return t\n}\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\n\nconst makeAPile = (n) => {\n  let t = []\n  for (let i = n; i > 0; i -= 2) {\n    t.push(i)\n  }\n  return t\n}\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\n\nconst makeAPile = (n) => {\n  let "}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\n\nconst wordsString = (s) => {\n  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n", "canonical_solution": "    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "partial": "/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n      # print('@@this is the line to split##')\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "gc": "<|endoftext|>/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\n\nconst wordsString = (s) => {\n  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] =='' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n      else {\n        t += s[i];\n      }\n    }\n    else {\n      t += s[i];\n    }\n  }\n  if (k == 0) {\n    p.push(t);\n  }\n  return p;\n}\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\n\nconst wordsArray = (s) => {\n  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] =='' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n      else {\n        t += s[i];\n      }\n    }\n    else {\n      t += s[i];\n    }\n  }\n  if (k == 0) {\n    p.push(t);\n  }\n  return p;\n}\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordsArray(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsArray(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\n\nconst wordsArray2 = (s) => {\n  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] =='' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n      else {\n        t += s[i];\n      }\n    }\n    else {\n      t += s[i];\n    }\n  }\n  if (k == 0) {\n    p.push(t);\n  }\n  return p;\n}\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordsArray2(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsArray2(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\n\nconst wordsArray3 = (s) => {\n  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] =='' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n      else {\n        t += s[i];\n      }\n    }\n    else {\n      t += s[i];\n    }\n  }\n  if (k == 0) {\n    p.push(t);\n  }\n  return p;\n}\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordsArray3(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsArray3(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\n\nconst wordsArray4 = (s) => {\n  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] =='' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n      else {\n        t += s[i];\n      }\n    }\n    else {\n      t += s[i];\n    }\n  }\n  if (k == 0) {\n    p.push(t);\n  }\n  return p;\n}\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordsArray4(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsArray4(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\n\nconst wordsArray5 = (s) => {\n  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] =='' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n      else {\n        t += s[i];\n      }\n    }\n    else {\n      t += s[i];\n    }\n  }\n  if (k == 0) {\n    p.push(t);\n  }\n  return p;\n}\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordsArray5(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsArray5(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\n\nconst wordsArray6 = (s) => {\n  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] =='' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n      else {\n        t += s[i];\n      }\n    }\n    else {\n      t += s[i];\n    }\n  }\n  if (k == 0) {\n    p.push(t);\n  }\n  return p;\n}\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordsArray6(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsArray6(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\n\nconst wordsArray7 = (s) => {\n  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] =='' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n      else {\n        t += s[i];\n      }\n    }\n    else {\n      t += s[i];\n    }\n  }\n  if (k == 0) {\n    p.push(t);\n  }\n  return p;\n}\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordsArray7(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsArray7(\"One, two, "}
{"task_id": "JavaScript/102", "prompt": "/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\n\nconst chooseNum = (x, y) => {\n  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n", "canonical_solution": "  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "partial": "/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n    # print('@@this is the line to split##')\n  }\n  return -1\n}\n\n", "gc": "<|endoftext|>/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\n\nconst chooseNum = (x, y) => {\n  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n/*This function takes two positive numbers x and y and returns the\n  biggest odd integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\n\nconst chooseNum = (x, y) => {\n  for (let i = y; i >= x; i--) {\n    if (i % 2!= 0) {return i }\n  }\n  return -1\n}\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\n\nconst chooseNum = (x, y) => {\n  for (let i = y; i >= x; i--) {\n    if (i % 2 === 0) {return i }\n  }\n  return -1\n}\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\n\nconst chooseNum = (x, y) => {\n  for (let i = y; i >= x; i--) {\n    if (i % 2!== 0) {return i }\n  }\n  return -1\n}\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\n\nconst chooseNum = (x, y) => {\n  for (let i = y; i >= x; i--) {\n    if (i % 2 === 0) {return i }\n  }\n  return -1\n}\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\n\nconst chooseNum = (x, y) => {\n  for (let i = y; i >= x; i--) {\n    if (i % 2!== 0) {return i }\n  }\n  return -1\n}\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\n\nconst chooseNum = (x, y) => {\n  for (let i = y; i >= x; i--) {\n    if (i % 2!== 0) {return i }\n  }\n  return -1\n}\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\n\nconst chooseNum = (x, y) => {\n  for (let i = y; i >= x; i--) {\n    if (i % 2!== 0) {return i }\n  }\n  return -1\n}\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\n\nconst chooseNum = (x, y) => {\n  for (let i = y; i >= x; i--) {\n    if (i % 2!== 0) {return i }\n  }\n  return -1\n}\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\n\nconst chooseNum = (x, y) => {\n  for (let i = y; i >= x; i--) {\n    if (i % 2!== 0) {return i }\n  }\n  return -1\n}\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\n\nconst chooseNum = (x, y) => {\n  for (let i = y; i >= x; i--) {\n    if (i % 2!== 0) {return i }\n  }\n  return -1\n}\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\n\nconst chooseNum = (x, y) => {\n  for (let i = y; i >= x; i--) {\n    if (i % 2!== 0) {return i }\n  }\n  return -1\n}\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\n\nconst chooseNum = (x, y) => {\n  for (let i = y; i >= x; i--) {\n    if (i % 2!== 0) {return i }\n  }\n  return -1\n}\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\n\nconst chooseNum = (x, y) => {\n  for (let i = y; i >= x; i--) {\n    if (i % 2!== 0) {return i }\n  }\n  return -1\n}\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\n\nconst chooseNum = (x, y) => {\n  for (let i = y; i >= x; i--) {\n    if (i % 2!== 0) {return i }\n  }\n  return -1\n}\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\n\nconst chooseNum = (x, y) => {\n  for (let i = y; i >= x; i--) {\n    if (i % 2!== 0) {return i }\n  }\n  return -1\n}\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\n\nconst chooseNum = (x, y) => {\n  for (let i = y; i >= x; i--) {\n"}
{"task_id": "JavaScript/103", "prompt": "/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\n\nconst roundedAvg = (n, m) => {\n  if (n > m) { return -1 }\n  let k = (n + m) / 2\n", "canonical_solution": "  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "partial": "/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  # print('@@this is the line to split##')\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "gc": "<|endoftext|>/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\n\nconst roundedAvg = (n, m) => {\n  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  let bin = n.toString(2)\n  let bin1 = bin.slice(0, k) + bin.slice(k + 1)\n  let bin2 = bin1.slice(0, k) + bin1.slice(k + 1)\n  let bin3 = bin2.slice(0, k) + bin2.slice(k + 1)\n  let bin4 = bin3.slice(0, k) + bin3.slice(k + 1)\n  let bin5 = bin4.slice(0, k) + bin4.slice(k + 1)\n  let bin6 = bin5.slice(0, k) + bin5.slice(k + 1)\n  let bin7 = bin6.slice(0, k) + bin6.slice(k + 1)\n  let bin8 = bin7.slice(0, k) + bin7.slice(k + 1)\n  let bin9 = bin8.slice(0, k) + bin8.slice(k + 1)\n  let bin10 = bin9.slice(0, k) + bin9.slice(k + 1)\n  let bin11 = bin10.slice(0, k) + bin10.slice(k + 1)\n  let bin12 = bin11.slice(0, k) + bin11.slice(k + 1)\n  let bin13 = bin12.slice(0, k) + bin12.slice(k + 1)\n  let bin14 = bin13.slice(0, k) + bin13.slice(k + 1)\n  let bin15 = bin14.slice(0, k) + bin14.slice(k + 1)\n  let bin16 = bin15.slice(0, k) + bin15.slice(k + 1)\n  let bin17 = bin16.slice(0, k) + bin16.slice(k + 1)\n  let bin18 = bin17.slice(0, k) + bin17.slice(k + 1)\n  let bin19 = bin18.slice(0, k) + bin18.slice(k + 1)\n  let bin20 = bin19.slice(0, k) + bin19.slice(k + 1)\n  let bin21 = bin20.slice(0, k) + bin20.slice(k + 1)\n  let bin22 = bin21.slice(0, k) + bin21.slice(k + 1)\n  let bin23 = bin22.slice(0, k) + bin22.slice(k + 1)\n  let bin24 = bin23.slice(0, k) + bin23.slice(k + 1)\n  let bin25 = bin24.slice(0, k) + bin24.slice(k + 1)\n  let bin26 = bin25.slice(0, k) + bin25.slice(k + 1)\n  let bin27 = bin26.slice(0, k) + bin26.slice(k + 1)\n  let bin28 = bin27.slice(0, k) + bin27.slice(k + 1)\n  let bin29 = bin28.slice(0, k) + bin28.slice(k + 1)\n  let bin30 = bin29.slice(0, k) + bin29.slice(k + 1)\n  let bin31 = bin30.slice(0, k) + bin30.slice(k + 1)\n  let bin32 = bin31.slice(0, k) + bin31.slice(k + 1)\n  let bin33 = bin32.slice(0, k) + bin32.slice(k + 1)\n  let bin34 = bin33.slice(0, k) + bin33.slice(k + 1)\n  let bin35 = bin34.slice(0, k) + bin34.slice(k + 1)\n  let bin36 = bin35.slice(0, k) + bin35.slice(k + 1)\n  let bin37 = bin36.slice(0, k) + bin36.slice(k + 1)\n  let bin38 = bin37.slice(0, k) + bin37.slice(k + 1)\n  let bin39 = bin38.slice(0, k) + bin38.slice(k + 1)\n  let bin40 = bin39.slice(0, k) + bin39.slice(k + 1)\n  let bin41 = bin40.slice(0, k) + bin40.slice(k + 1)\n  let bin42 = bin41.slice(0, k) + bin41.slice(k + 1)\n  let bin43 = bin42.slice(0, k) + bin42.slice(k + 1)\n  let bin44 = bin43.slice(0, k) + bin43.slice(k + 1)\n  let bin45 = bin44.slice(0, k) + bin44.slice(k + 1)\n  let bin46 = bin45.slice(0, k) + bin45.slice(k + 1)\n  let bin47 = bin46.slice(0, k) + bin46.slice(k + 1)\n  let bin48 = bin47.slice(0, k) + bin47.slice(k + 1)\n  let bin49 = bin48.slice(0, k) + bin48.slice(k + 1)\n  let bin50 = bin49.slice(0, k) + bin49.slice(k + 1)\n  let bin51 = bin50.slice(0, k) + bin50.slice(k + 1)\n  let bin52 = bin51.slice(0, k) + bin51.slice(k + 1)\n  let bin53 = bin52.slice(0, k) + bin52.slice(k + 1)\n  let bin54 = bin53.slice(0, k) + bin53.slice(k + 1)\n  let bin55 = bin54.slice(0, k) + bin54.slice(k + 1)\n  let bin56 = bin55.slice(0, k) + bin55.slice(k + 1)\n  let bin57 = bin56.slice(0, k) + bin56.slice(k + 1)\n  let bin58 = bin57.slice(0, k) + bin57.slice(k + 1)\n  let bin59 = bin58.slice(0, k) + bin58.slice(k + 1)\n  let bin60 = bin59.slice(0, k) + bin59.slice(k + 1)\n  let bin61 = bin60.slice(0, k) + bin60.slice(k + 1)\n  let bin62 = bin61.slice(0, k) + bin61.slice(k + 1)\n  let bin63 = bin62.slice(0, k) + bin62.slice(k + 1)\n  let bin64 = bin63.slice(0, k) + bin63.slice(k + 1)\n  let bin65 = bin64.slice(0, k) + bin64.slice(k + 1)\n  let bin66 = bin65.slice(0, k) + bin65.slice(k + 1)\n  let bin67 = bin66.slice(0, k) + bin66.slice(k + 1)\n  let bin68 = bin67.slice(0, k) + bin67.slice(k + 1)\n  let bin69 = bin68.slice(0, k) + bin68.slice(k + 1)\n  let bin70 = bin69.slice(0, k) + bin69.slice(k + 1)\n  let bin71 = bin70.slice(0, k) + bin70.slice(k + 1)\n  let bin72 = bin71.slice(0, k) + bin71.slice(k + 1)\n  let bin73 = bin72.slice(0, k) + bin72.slice(k + 1)\n  let bin74 = bin73.slice(0, k) + bin73.slice(k + 1)\n  let bin75 = bin74.slice(0, k) + bin74.slice(k + 1)\n  let bin76 = bin75.slice(0, k) + bin75.slice(k + 1)\n  let bin77 = bin76.slice(0, k) + bin76.slice(k + 1)\n  let bin78 = bin77.slice(0, k) + bin77.slice(k + 1)\n  let bin79 = bin78.slice(0, k) + bin78.slice(k + 1)\n  let bin80 = bin79.slice(0, k) + bin79.slice(k + 1)\n  let bin81 = bin80.slice(0, k) + bin80.slice(k + 1)\n  let bin82 = bin81.slice(0, k) + bin81.slice(k + 1)\n  let bin83 = bin82.slice(0, k) + bin82.slice(k + 1)\n  let bin84 = bin83.slice(0, k) + bin83.slice(k + 1)\n  let bin85 = bin84.slice(0, k) + bin84.slice(k + 1)\n  let bin86 = bin85.slice(0, k) + bin85.slice(k + 1)\n  let bin87 = bin86.slice(0, k) + bin86.slice(k + 1)\n  let bin88 = bin87.slice(0, k) + bin87.slice(k + 1)\n  let bin89 = bin88."}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\n\nconst uniqueDigits = (x) => {\n  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n", "canonical_solution": "  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "partial": "/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n    # print('@@this is the line to split##')\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "gc": "<|endoftext|>/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\n\nconst uniqueDigits = (x) => {\n  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  return p\n}\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that has odd digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\n\nconst oddDigits = (x) => {\n  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 1) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  return p\n}\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that has even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\n\nconst evenDigits = (x) => {\n  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  return p\n}\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that has odd or even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\n\nconst digits = (x) => {\n  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  return p\n}\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that has odd or even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\n\nconst digits = (x) => {\n  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 1) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  return p\n}\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that has odd or even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\n\nconst digits = (x) => {\n  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 1) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  return p\n}\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that has odd or even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\n\nconst digits = (x) => {\n  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 1) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  return p\n}\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that has odd or even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\n\nconst digits = (x) => {\n  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 1) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  return p\n}\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that has odd or even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\n\nconst digits = (x) => {\n  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 1) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  return p\n}\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that has odd or even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\n\nconst digits = (x) => {\n  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 1) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  return p\n}\n\n/*Given a list of positive integers x"}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\n\nconst byLength = (arr) => {\n  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n", "canonical_solution": "      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "partial": "/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      # print('@@this is the line to split##')\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "gc": "<|endoftext|>/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\n\nconst byLength = (arr) => {\n  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      arr[j] = arr[ind]\n      j = ind\n    }\n  }\n  return arr\n}\n\nconst byLengthReversed = (arr) => {\n  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      arr[j] = arr[ind]\n      j = ind\n    }\n  }\n  return arr\n}\n\nconst byLengthReversedWithName = (arr) => {\n  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      arr[j] = arr[ind]\n      j = ind\n    }\n  }\n  return arr\n}\n\nconst byLengthReversedWithNameReversed = (arr) => {\n  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      arr[j] = arr[ind]\n      j = ind\n    }\n  }\n  return arr\n}\n\nconst byLengthReversedWithNameReversedWithName = (arr) => {\n  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      arr[j] = arr[ind]\n      j = ind\n    }\n  }\n  return arr\n}\n\nconst byLengthReversedWithNameReversedWithNameReversed = (arr) => {\n  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      arr[j] = arr[ind]\n      j = ind\n    }\n  }\n  return arr\n}\n\nconst byLengthReversedWithNameReversedWithNameReversedWithName = (arr) => {\n  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      arr[j] = arr[ind]\n      j = ind\n    }\n  }\n  return arr\n}\n\nconst byLengthReversedWithNameReversedWithNameReversedWithNameReversed = (arr) => {\n  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      arr[j] = arr[ind]\n      j = ind\n    }\n  }\n  return arr\n}\n\nconst byLengthReversedWithNameReversedWithNameReversedWithNameReversedWithName = (arr) => {\n  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      arr[j] = arr[ind]\n      j = ind\n    }\n  }\n  return arr\n}\n\nconst byLengthReversedWithNameReversedWithNameReversedWithNameReversedWithNameReversed = (arr) => {\n  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      arr[j] = arr[ind]\n      j = ind\n    }\n  }\n  return arr\n}\n\nconst byLengthReversedWithNameReversedWithNameReversedWithNameReversedWithNameReversedWithName = (arr) => {\n  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      arr[j] = arr[ind]\n      j = ind\n    }\n  }\n  return arr\n}\n\nconst byLengthReversedWithNameReversedWithNameReversedWithNameReversedWithNameReversedWithNameReversed = (arr) => {\n  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      arr[j] = arr[ind]\n      j = ind\n    }\n  }\n  return arr\n}\n\nconst byLengthReversedWithNameReversedWith"}
{"task_id": "JavaScript/106", "prompt": "/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\n\nconst f = (n) => {\n  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n", "canonical_solution": "    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "partial": "/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    # print('@@this is the line to split##')\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "gc": "<|endoftext|>/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\n\nconst f = (n) => {\n  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    if (i % 2 === 0) {\n      k[i] = p\n    } else {\n      k[i] = p * f\n      f *= i\n    }\n  }\n  return k\n}\n\n/* Implement the function g that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the greatest common divisor of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the greatest common divisor of i is the product of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  g(5) == [1, 2, 6, 24, 15]\n  */\n\nconst g = (n) => {\n  let g = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    if (i % 2 === 0) {\n      k[i] = p\n    } else {\n      k[i] = p * g\n      g *= i\n    }\n  }\n  return k\n}\n\n/* Implement the function h that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the greatest common divisor of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the greatest common divisor of i is the product of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  h(5) == [1, 2, 6, 24, 15]\n  */\n\nconst h = (n) => {\n  let h = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    if (i % 2 === 0) {\n      k[i] = p\n    } else {\n      k[i] = p * h\n      h *= i\n    }\n  }\n  return k\n}\n\n/* Implement the function i that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the greatest common divisor of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the greatest common divisor of i is the product of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  i(5) == [1, 2, 6, 24, 15]\n  */\n\nconst i = (n) => {\n  let i = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    if (i % 2 === 0) {\n      k[i] = p\n    } else {\n      k[i] = p * i\n      i *= p\n    }\n  }\n  return k\n}\n\n/* Implement the function j that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the greatest common divisor of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the greatest common divisor of i is the product of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  j(5) == [1, 2, 6, 24, 15]\n  */\n\nconst j = (n) => {\n  let j = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    if (i % 2 === 0) {\n      k[i] = p\n    } else {\n      k[i] = p * j\n      j *= p\n    }\n  }\n  return k\n}\n\n/* Implement the function k that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the greatest common divisor of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the greatest common divisor of i is the product of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  k(5) == [1, 2, 6, 24, 15]\n  */\n\nconst k = (n) => {\n  let k = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    if (i % 2 === 0) {\n      k[i] = p\n    } else {\n      k[i] = p * k\n      k *= p\n    }\n  }\n  return k\n}\n\n/* Implement the function l that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the greatest common divisor of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the greatest common divisor of i is the product of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  l(5) == [1, 2, 6, 24, 15]\n  */\n\nconst l = (n) => {\n  let l = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    if (i % 2 === 0) {\n      k[i] = p\n    } else {\n      k[i] = p * l\n      l *= p\n    }\n  }\n  return k\n}\n\n/* Implement the function m that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the greatest common divisor of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the greatest common divisor of i is the product of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  m(5) == [1, 2, 6, 24, 15]\n  */\n\nconst m = (n) => {\n  let m = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    if (i % 2 === 0) {\n      k[i] = p\n    } else {\n      k[i] = p * m\n      m *= p\n    }\n  }\n  return k\n}\n\n/* Implement the function n that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the greatest common divisor of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the greatest common divisor of i is the product of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  n(5) == [1, 2, 6, 24, 15]\n  */\n\nconst n = (n) => {\n  let n = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    if (i % 2 === 0) {\n      k[i] = p\n    } else {\n      k[i] = p * n\n      n *= p\n    }\n  }\n  return k\n}\n\n/* Implement the function o that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the greatest common divisor of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the greatest common divisor of i is the product of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  o(5) == [1, 2, 6, 24, 15]\n  */\n\nconst o = (n) => {\n  let o = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    if (i % 2 === 0) {\n      k[i] = p\n    } else {\n      "}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\n\nconst evenOddPalindrome = (n) => {\n  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n", "canonical_solution": "      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "partial": "/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n        # print('@@this is the line to split##')\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "gc": "<|endoftext|>/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\n\nconst evenOddPalindrome = (n) => {\n  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j]!= k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p === 0) {\n      e++\n    } else {\n      o++\n    }\n  }\n  return [e, o]\n}\n\nmodule.exports = evenOddPalindrome\n\n},{}],4:[function(require,module,exports){\n/*\n  Given a positive integer n, return a list of all palindromes made from the given integer.\n\n  Example 1:\n\n      Input: 3\n      Output: [1, 2, 3]\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 11]\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned list has all palindromes made from the given integer.\n  */\n\nconst palindromes = (n) => {\n  let arr = []\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j]!= k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p === 0) {\n      arr.push(i)\n    } else {\n      arr.push(`${i}${k}`)\n    }\n  }\n  return arr\n}\n\nmodule.exports = palindromes\n\n},{}],5:[function(require,module,exports){\n/*\n  Given a positive integer n, return a list of all palindromes made from the given integer.\n\n  Example 1:\n\n      Input: 3\n      Output: [1, 2, 3]\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 11]\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned list has all palindromes made from the given integer.\n  */\n\nconst palindromes = (n) => {\n  let arr = []\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j]!= k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p === 0) {\n      arr.push(i)\n    } else {\n      arr.push(`${i}${k}`)\n    }\n  }\n  return arr\n}\n\nmodule.exports = palindromes\n\n},{}],6:[function(require,module,exports){\n/*\n  Given a positive integer n, return a list of all palindromes made from the given integer.\n\n  Example 1:\n\n      Input: 3\n      Output: [1, 2, 3]\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 11]\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned list has all palindromes made from the given integer.\n  */\n\nconst palindromes = (n) => {\n  let arr = []\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j]!= k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p === 0) {\n      arr.push(i)\n    } else {\n      arr.push(`${i}${k}`)\n    }\n  }\n  return arr\n}\n\nmodule.exports = palindromes\n\n},{}],7:[function(require,module,exports){\n/*\n  Given a positive integer n, return a list of all palindromes made from the given integer.\n\n  Example 1:\n\n      Input: 3\n      Output: [1, 2, 3]\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 11]\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned list has all palindromes made from the given integer.\n  */\n\nconst palindromes = (n) => {\n  let arr = []\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j]!= k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p === 0) {\n      arr.push(i)\n    } else {\n      arr.push(`${i}${k}`)\n    }\n  }\n  return arr\n}\n\nmodule.exports = palindromes\n\n},{}],8:[function(require,module,exports){\n/*\n  Given a positive integer n, return a list of all palindromes made from the given integer.\n\n  Example 1:\n\n      Input: 3\n      Output: [1, 2, 3]\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 11]\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned list has all palindromes made from the given integer.\n  */\n\nconst palindromes = (n) => {\n  let arr = []\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j]!= k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p === 0) {\n      arr.push(i)\n    } else {\n      arr.push(`${i}${k}`)\n    }\n  }\n  return arr\n}\n\nmodule.exports = palindromes\n\n},{}],9:[function(require,module,exports){\n/*\n  Given a positive integer n, return a list of all palindromes made from the given integer.\n\n  Example 1:\n\n      Input: 3"}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function countNums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\n\nconst countNums = (arr) => {\n  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n", "canonical_solution": "    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "partial": "/*\n  Write a function countNums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    # print('@@this is the line to split##')\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "gc": "<|endoftext|>/*\n  Write a function countNums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\n\nconst countNums = (arr) => {\n  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (true) {\n      k++;\n      if (k > 9) {\n        k = 0;\n        break;\n      }\n      h *= 10;\n    }\n    if (k > 0) {\n      p++;\n    }\n  }\n  return p;\n};\n\nmodule.exports = countNums;\n\n},{}],9:[function(require,module,exports){\nconst countNums = require('./countNums');\n\nconst countZeros = (arr) => {\n  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h === 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (true) {\n      k++;\n      if (k > 9) {\n        k = 0;\n        break;\n      }\n      h *= 10;\n    }\n    if (k > 0) {\n      p++;\n    }\n  }\n  return p;\n};\n\nconst countOnes = (arr) => {\n  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h === 1) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (true) {\n      k++;\n      if (k > 9) {\n        k = 0;\n        break;\n      }\n      h *= 10;\n    }\n    if (k > 0) {\n      p++;\n    }\n  }\n  return p;\n};\n\nconst countTwos = (arr) => {\n  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h === 2) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (true) {\n      k++;\n      if (k > 9) {\n        k = 0;\n        break;\n      }\n      h *= 10;\n    }\n    if (k > 0) {\n      p++;\n    }\n  }\n  return p;\n};\n\nconst countThrees = (arr) => {\n  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h === 3) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (true) {\n      k++;\n      if (k > 9) {\n        k = 0;\n        break;\n      }\n      h *= 10;\n    }\n    if (k > 0) {\n      p++;\n    }\n  }\n  return p;\n};\n\nconst countFours = (arr) => {\n  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h === 4) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (true) {\n      k++;\n      if (k > 9) {\n        k = 0;\n        break;\n      }\n      h *= 10;\n    }\n    if (k > 0) {\n      p++;\n    }\n  }\n  return p;\n};\n\nconst countFives = (arr) => {\n  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h === 5) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (true) {\n      k++;\n      if (k > 9) {\n        k = 0;\n        break;\n      }\n      h *= 10;\n    }\n    if (k > 0) {\n      p++;\n    }\n  }\n  return p;\n};\n\nconst countSixes = (arr) => {\n  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h === 6) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (true) {\n      k++;\n      if (k > 9) {\n        k = 0;\n        break;\n      }\n      h *= 10;\n    }\n    if (k > 0) {\n      p++;\n    }\n  }\n  return p;\n};\n\nconst countSevens = (arr) => {\n  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h === 7) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (true) {\n      k++;\n      if (k > 9) {\n        k = 0;\n        break;\n      }\n      h *= 10;\n    }\n    if (k > 0) {\n      p++;\n    }\n  }\n  return p;\n};\n\nconst countEights = (arr) => {\n  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h === 8) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (true) {\n      k++;\n      if (k > 9) {\n        k = 0;\n        break;\n      }\n      h *= 10;\n    }\n    if (k > 0) {\n      p++;\n    }\n  }\n  return p;\n};\n\nconst countNines = (arr) => {\n  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h === 9) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (true) {\n      k++;\n      if (k > 9) {\n        k = 0;\n        break;\n      }\n      h *= 10;\n    }\n    if (k > 0) {\n      p++;\n    }\n  }\n  return p;\n};\n\nconst countTens = (arr) => {\n  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h === 10) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (true) {\n      k++;\n      if (k > 9) {\n        k = 0;\n        break;\n      }\n      h *= 10;\n    }\n    if (k > 0) {\n      p++;\n    }\n  }\n  return p;\n};\n\nconst countElevens = (arr) => {\n  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h === 11) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (true) {\n      k++;\n      if (k > 9) {\n        k = 0;\n        break;\n      }\n      h *= 10;\n    }\n    if (k > 0) {\n      p++;\n    }\n  }\n  return p;\n};\n\nconst countTwelves = (arr) => {\n  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h === 12) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (true) {\n      k++;\n      if (k > 9) {\n        k = 0;\n        break;\n      }\n      h *= 10;\n    }\n    if (k > 0) {\n      p++;\n    }\n  }\n  return p;\n};\n\nconst countThirteens = (arr) => {\n  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h === 13) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (true) {\n      k++;\n      if (k > 9) {\n        k = 0;\n        break;\n      }\n      h *= 10;\n    }\n    if (k > 0) {\n      p++;\n    }\n  }\n  return p;\n};\n\nconst countFourteens = (arr) => {\n  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h === 14) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (true) {\n      k++;\n      if (k > 9) {\n        k = 0;\n        break;\n      }\n      h *= 10;\n    }\n    if (k"}
{"task_id": "JavaScript/109", "prompt": "/*We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\n\nconst moveOneBall = (arr) => {\n  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n", "canonical_solution": "    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "partial": "/*We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n      # print('@@this is the line to split##')\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "gc": "<|endoftext|>/*We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\n\nconst moveOneBall = (arr) => {\n  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t === 1) {\n      k++\n      arr[k] = arr[j]\n      j--\n    }\n  }\n  arr[k] = arr[len - 1]\n  return k === len - 1\n}\n\n/*\n  You are given an array 'arr' of N integers arr[1], arr[2],..., arr[N].\n  You are allowed to perform the following operations:\n      You are allowed to perform addition operation any number of times.\n      You are allowed to perform subtraction operation any number of times.\n      You are allowed to perform multiplication operation any number of times.\n      You are allowed to perform division operation any number of times.\n      You are allowed to perform modulo operation any number of times.\n      You are allowed to perform left shift operation any number of times.\n      You are allowed to perform right shift operation any number of times.\n  \n  One addition operation means adding one element to the array i.e. arr[0]. \n  One subtraction operation means subtracting one element from the array i.e.\n  arr[0]. One multiplication operation means multiplying one element by one\n  element i.e. arr[0]. One division operation means dividing one element by one\n  element i.e. arr[0]. One modulo operation means modulo one element by one\n  element i.e. arr[0]. One left shift operation means shifting all elements\n  of the array one position in the left direction. One right shift operation\n  means shifting all elements of the array one position in the right direction.\n  \n  If it is possible to obtain the sorted array by performing the above operations\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performing the above operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\n\nconst moveOneBall = (arr) => {\n  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t === 1) {\n      k++\n      arr[k] = arr[j]\n      j--\n    }\n  }\n  arr[k] = arr[len - 1]\n  return k === len - 1\n}\n\n/*\n  You are given an array 'arr' of N integers arr[1], arr[2],..., arr[N].\n  You are allowed to perform the following operations:\n      You are allowed to perform addition operation any number of times.\n      You are allowed to perform subtraction operation any number of times.\n      You are allowed to perform multiplication operation any number of times.\n      You are allowed to perform division operation any number of times.\n      You are allowed to perform modulo operation any number of times.\n      You are allowed to perform left shift operation any number of times.\n      You are allowed to perform right shift operation any number of times.\n  \n  One addition operation means adding one element to the array i.e. arr[0]. \n  One subtraction operation means subtracting one element from the array i.e.\n  arr[0]. One multiplication operation means multiplying one element by one\n  element i.e. arr[0]. One division operation means dividing one element by one\n  element i.e. arr[0]. One modulo operation means modulo one element by one\n  element i.e. arr[0]. One left shift operation means shifting all elements\n  of the array one position in the left direction. One right shift operation\n  means shifting all elements of the array one position in the right direction.\n  \n  If it is possible to obtain the sorted array by performing the above operations\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performing the above operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\n\nconst moveOneBall = (arr) => {\n  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t === 1) {\n      k++\n      arr[k] = arr[j]\n      j--\n    }\n  }\n  arr[k] = arr[len - 1]\n  return k === len - 1\n}\n\n/*\n  You are given an array 'arr' of N integers arr[1], arr[2],..., arr[N].\n  You are allowed to perform the following operations:\n      You are allowed to perform addition operation any number of times.\n      You are allowed to perform subtraction operation any number of times.\n      You are allowed to perform multiplication operation any number of times.\n      You are allowed to perform division operation any number of times.\n      You are allowed to perform modulo operation any number of times.\n      You are allowed to perform left shift operation any number of times.\n      You are allowed to perform right shift operation any number of times.\n  \n  One addition operation means adding one element to the array i.e. arr[0]. \n  One subtraction operation means subtracting one element from the array i.e.\n  arr[0]. One multiplication operation means multiplying one element by one\n  element i.e. arr[0]. One division operation means dividing one element by one\n  element i.e. arr[0]. One modulo operation means modulo one element by one\n  element i.e. arr[0]. One left shift operation means shifting all elements\n  of the array one position in the left direction. One right shift operation\n  means shifting all elements of the array one position in the right direction.\n  \n  If it is possible to obtain the sorted array by performing the above operations\n  then return true else return false.\n  If the given array is empty then return true"}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an exchange of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of exchanged elements between lst1 and lst2.\n  If it is possible to exchange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\n\nconst exchange = (lst1, lst2) => {\n  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n", "canonical_solution": "  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "partial": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an exchange of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of exchanged elements between lst1 and lst2.\n  If it is possible to exchange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  # print('@@this is the line to split##')\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "gc": "<|endoftext|>/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an exchange of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of exchanged elements between lst1 and lst2.\n  If it is possible to exchange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\n\nconst exchange = (lst1, lst2) => {\n  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  if (t > k) {\n    return \"NO\"\n  } else {\n    return \"YES\"\n  }\n}\n\n/*\n  Write a function that takes as input two lists of numbers and returns a\n  string that describes whether the two lists are sorted in ascending or\n  descending order.\n  For example:\n  sortAscending([1, 2, 3, 4]) => \"Ascending\"\n  sortDescending([1, 2, 3, 4]) => \"Descending\"\n  It is assumed that the input lists will be non-empty.\n  */\n\nconst sortAscending = (lst1, lst2) => {\n  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] > lst2[i]) { t++ }\n  }\n  if (t > k) {\n    return \"Descending\"\n  } else {\n    return \"Ascending\"\n  }\n}\n\n/*\n  Write a function that takes as input two lists of numbers and returns a\n  string that describes whether the two lists are sorted in ascending or\n  descending order.\n  For example:\n  sortAscending([1, 2, 3, 4]) => \"Ascending\"\n  sortDescending([1, 2, 3, 4]) => \"Descending\"\n  It is assumed that the input lists will be non-empty.\n  */\n\nconst sortDescending = (lst1, lst2) => {\n  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] < lst2[i]) { t++ }\n  }\n  if (t > k) {\n    return \"Descending\"\n  } else {\n    return \"Ascending\"\n  }\n}\n\n/*\n  Write a function that takes as input two lists of numbers and returns a\n  string that describes whether the two lists are sorted in ascending or\n  descending order.\n  For example:\n  sortAscending([1, 2, 3, 4]) => \"Ascending\"\n  sortDescending([1, 2, 3, 4]) => \"Descending\"\n  It is assumed that the input lists will be non-empty.\n  */\n\nconst sort = (lst1, lst2) => {\n  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] > lst2[i]) { t++ }\n  }\n  if (t > k) {\n    return \"Descending\"\n  } else {\n    return \"Ascending\"\n  }\n}\n\n/*\n  Write a function that takes as input two lists of numbers and returns a\n  string that describes whether the two lists are sorted in ascending or\n  descending order.\n  For example:\n  sortAscending([1, 2, 3, 4]) => \"Ascending\"\n  sortDescending([1, 2, 3, 4]) => \"Descending\"\n  It is assumed that the input lists will be non-empty.\n  */\n\nconst sortDescending = (lst1, lst2) => {\n  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] < lst2[i]) { t++ }\n  }\n  if (t > k) {\n    return \"Descending\"\n  } else {\n    return \"Ascending\"\n  }\n}\n\n/*\n  Write a function that takes as input two lists of numbers and returns a\n  string that describes whether the two lists are sorted in ascending or\n  descending order.\n  For example:\n  sortAscending([1, 2, 3, 4]) => \"Ascending\"\n  sortDescending([1, 2, 3, 4]) => \"Descending\"\n  It is assumed that the input lists will be non-empty.\n  */\n\nconst sortAscending = (lst1, lst2) => {\n  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] > lst2[i]) { t++ }\n  }\n  if (t > k) {\n    return \"Descending\"\n  } else {\n    return \"Ascending\"\n  }\n}\n\n/*\n  Write a function that takes as input two lists of numbers and returns a\n  string that describes whether the two lists are sorted in ascending or\n  descending order.\n  For example:\n  sortAscending([1, 2, 3, 4]) => \"Ascending\"\n  sortDescending([1, 2, 3, 4]) => \"Descending\"\n  It is assumed that the input lists will be non-empty.\n  */\n\nconst sortDescending = (lst1, lst2) => {\n  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] < lst2[i]) { t++ }\n  }\n  if (t > k) {\n    return \"Descending\"\n  } else {\n    return \"Ascending\"\n  }\n}\n\n/*\n  Write a function that takes as input two lists of numbers and returns a\n  string that describes whether the two lists are sorted in ascending or\n  descending order.\n  For example:\n  sortAscending([1, 2, 3, 4]) => \"Ascending\"\n  sortDescending([1, 2, 3, 4]) => \"Descending\"\n  It is assumed that the input lists will be non-empty.\n  */\n\nconst sort = (lst1, lst2) => {\n  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] > lst2[i]) { t++ }\n  }\n  if (t > k) {\n    return \"Descending\"\n  } else {\n    return \"Ascending\"\n  }\n}\n\n/*\n  Write a function that takes as input two lists of numbers and returns a\n  string that describes whether the two lists are sorted in ascending or\n  descending order.\n  For example:\n  sortAscending([1, 2, 3, 4]) => \"Ascending\"\n  sortDescending([1, 2, 3, 4]) => \"Descending\"\n  It is assumed that the input lists will be non-empty.\n  */\n\nconst sortDescending = (lst1, lst2) => {\n  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] < lst2[i]) { t++ }\n  }\n  if (t > k) {\n    return \"Descending\"\n  } else {\n    return \"Ascending\"\n  }\n}\n\n/*\n  Write a function that takes as input two lists of numbers and returns a\n  string that describes whether the two lists are sorted in ascending or\n  descending order.\n  For example:\n  sortAscending([1, 2, 3, 4]) => \"Ascending\"\n  sortDescending([1, 2, 3, 4]) => \"Descending\"\n  It is assumed that the input lists will be non-empty.\n  */\n\nconst sortAscending = (lst1, lst2) => {\n  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] > lst2[i]) { t++ }\n  }\n  if (t > k) {\n    return \"Descending\"\n  } else {\n    return \"Ascending\"\n  }\n}\n\n/*\n  Write a function that takes as input two lists of numbers and returns a\n  string that describes whether the two lists are sorted in ascending or\n  descending order.\n  For example:\n  sortAscending([1, 2, 3, 4]) => \"Ascending\"\n  "}
{"task_id": "JavaScript/111", "prompt": "/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\n\nconst histogram = (test) => {\n  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n", "canonical_solution": "  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "partial": "/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  # print('@@this is the line to split##')\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "gc": "<|endoftext|>/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\n\nconst histogram = (test) => {\n  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  return d\n}\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\n\nconst histogram = (test) => {\n  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  return d\n}\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\n\nconst histogram = (test) => {\n  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  return d\n}\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\n\nconst histogram = (test) => {\n  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  return d\n}\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\n\nconst histogram = (test) => {\n  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  return d\n}\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\n\nconst histogram = (test) => {\n  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  return d\n}\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\n\nconst histogram = (test) => {\n  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  return d\n}\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\n\nconst histogram = (test) => {\n  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  return d\n}\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\n\nconst histogram = (test) => {\n  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  return "}
{"task_id": "JavaScript/112", "prompt": "/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\n\nconst reverseDelete = (s, c) => {\n  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n", "canonical_solution": "  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "partial": "/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n    # print('@@this is the line to split##')\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "gc": "<|endoftext|>/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\n\nconst reverseDelete = (s, c) => {\n  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  return (t,true)\n}\n\n/*Task\n  Given a string s and an integer n, return true if and only if the string is a palindrome.\n  A palindrome is a string that is read the same backward as forward.\n  Example\n  s = \"abcde\", n = 2, the result should be true\n  s = \"abcde\", n = 5, the result should be false\n  s = \"abcde\", n = 6, the result should be false\n  s = \"abcde\", n = 7, the result should be false\n  s = \"abcde\", n = 8, the result should be false\n  s = \"abcde\", n = 9, the result should be false\n  s = \"abcde\", n = 10, the result should be false\n  s = \"abcde\", n = 11, the result should be false\n  s = \"abcde\", n = 12, the result should be false\n  s = \"abcde\", n = 13, the result should be false\n  s = \"abcde\", n = 14, the result should be false\n  s = \"abcde\", n = 15, the result should be false\n  s = \"abcde\", n = 16, the result should be false\n  s = \"abcde\", n = 17, the result should be false\n  s = \"abcde\", n = 18, the result should be false\n  s = \"abcde\", n = 19, the result should be false\n  s = \"abcde\", n = 20, the result should be false\n  s = \"abcde\", n = 21, the result should be false\n  s = \"abcde\", n = 22, the result should be false\n  s = \"abcde\", n = 23, the result should be false\n  s = \"abcde\", n = 24, the result should be false\n  s = \"abcde\", n = 25, the result should be false\n  s = \"abcde\", n = 26, the result should be false\n  s = \"abcde\", n = 27, the result should be false\n  s = \"abcde\", n = 28, the result should be false\n  s = \"abcde\", n = 29, the result should be false\n  s = \"abcde\", n = 30, the result should be false\n  s = \"abcde\", n = 31, the result should be false\n  s = \"abcde\", n = 32, the result should be false\n  s = \"abcde\", n = 33, the result should be false\n  s = \"abcde\", n = 34, the result should be false\n  s = \"abcde\", n = 35, the result should be false\n  s = \"abcde\", n = 36, the result should be false\n  s = \"abcde\", n = 37, the result should be false\n  s = \"abcde\", n = 38, the result should be false\n  s = \"abcde\", n = 39, the result should be false\n  s = \"abcde\", n = 39, the result should be false\n  s = \"abcde\", n = 40, the result should be false\n  s = \"abcde\", n = 41, the result should be false\n  s = \"abcde\", n = 42, the result should be false\n  s = \"abcde\", n = 43, the result should be false\n  s = \"abcde\", n = 44, the result should be false\n  s = \"abcde\", n = 45, the result should be false\n  s = \"abcde\", n = 46, the result should be false\n  s = \"abcde\", n = 47, the result should be false\n  s = \"abcde\", n = 48, the result should be false\n  s = \"abcde\", n = 49, the result should be false\n  s = \"abcde\", n = 39, the result should be false\n  s = \"abcde\", n = 40, the result should be false\n  s = \"abcde\", n = 41, the result should be false\n  s = \"abcde\", n = 42, the result should be false\n  s = \"abcde\", n = 43, the result should be false\n  s = \"abcde\", n = 44, the result should be false\n  s = \"abcde\", n = 45, the result should be false\n  s = \"abcde\", n = 46, the result should be false\n  s = \"abcde\", n = 47, the result should be false\n  s = \"abcde\", n = 48, the result should be false\n  s = \"abcde\", n = 49, the result should be false\n  s = \"abcde\", n = 39, the result should be false\n  s = \"abcde\", n = 40, the result should be false\n  s = \"abcde\", n = 41, the result should be false\n  s = \"abcde\", n = 42, the result should be false\n  s = \"abcde\", n = 43, the result should be false\n  s = \"abcde\", n = 44, the result should be false\n  s = \"abcde\", n = 45, the result should be false\n  s = \"abcde\", n = 46, the result should be false\n  s = \"abcde\", n = 47, the result should be false\n  s = \"abcde\", n = 48, the result should be false\n  s = \"abcde\", n = 49, the result should be false\n  s = \"abcde\", n = 39, the result should be false\n  s = \"abcde\", n = 40, the result should be false\n  s = \"abcde\", n = 41, the result should be false\n  s = \"abcde\", n = 42, the result should be false\n  s = \"abcde\", n = 43, the result should be false\n  s = \"abcde\", n = 44, the result should be false\n  s = \"abcde\", n = 45, the result should be false\n  s = \"abcde\", n = 46, the result should be false\n  s = \"abcde\", n = 47, the result should be false\n  s = \"abcde\", n = 48, the result should be false\n  s = \"abcde\", n = 49, the result should be false\n  s = \"abcde\", n = 39, the result should be false\n  s = \"abcde\", n = 40, the result should be false\n  s = \"abcde\", n = 41, the result should be false\n  s = \"abcde\", n = 42, the result should be false\n  s = \"abcde\", n = 43, the result should be false\n  s = \"abcde\", n = 44, the result should be false\n  s = \"abcde\", n = 45, the result should be false\n  s = \"abcde\", n = 46, the result should be false\n  s = \"abcde\", n = 47, the result should be false\n  s = \"abcde\", n = 48, the result should be false\n  s = \"abcde\", n = 49, the result should be false\n  s = \"abcde\", n = 39, the result should be false\n  s = \"abcde\", n = 40, the result should be false\n  s = \"abcde\", n = 41, the result should be false\n  s = \"abcde\", n = 42, the result should be false\n  s = \"abcde\", n = 43, the result should be false\n  s = \"abcde\", n = 44, the result should be false\n  s = \"abcde\", n = 45, the result should be false\n  s = \"abcde\", n = 46, the result should be false\n  s = \"abcde\", n = 47, the result should be false\n  s = \"abcde\", n = 48, the result should be false\n  s = \"abcde\", n = 49, the result should be false\n  s = \"abcde\", n = 39, the result should be false\n  s = \"abcde\", n = 40, the result should be false\n  s = \"abcde\", n = 41, the result should be false\n  s = \"abcde\", n = 42, the result should be false\n  s = \"abcde\", n = 43, the result should be false\n  s = \"abcde\", n = 44, the "}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\n\nconst oddCount = (lst) => {\n  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n", "canonical_solution": "    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "partial": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n      # print('@@this is the line to split##')\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "gc": "<|endoftext|>/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\n\nconst oddCount = (lst) => {\n  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    d.push(p)\n  }\n  return d\n}\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of even elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of even digits in the i'th string of the input.\n\n  >>> evenCount(['1234567'])\n  [\"the number of even elements 4n the str4ng 4 of the 4nput.\"]\n  >>> evenCount(['3',\"11111111\"])\n  [\"the number of even elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even elements 8n the str8ng 8 of the 8nput.\"]\n  */\n\nconst evenCount = (lst) => {\n  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 0) { p++ }\n    }\n    d.push(p)\n  }\n  return d\n}\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of pairs of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of pairs of odd digits in the i'th string of the input.\n\n  >>> pairCount(['1234567'])\n  [\"the number of pairs of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> pairCount(['3',\"11111111\"])\n  [\"the number of pairs of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of pairs of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\n\nconst pairCount = (lst) => {\n  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 0) { p++ }\n    }\n    d.push(p)\n  }\n  return d\n}\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of triples of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of triples of odd digits in the i'th string of the input.\n\n  >>> tripleCount(['1234567'])\n  [\"the number of triples of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> tripleCount(['3',\"11111111\"])\n  [\"the number of triples of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of triples of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\n\nconst tripleCount = (lst) => {\n  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 0) { p++ }\n    }\n    d.push(p)\n  }\n  return d\n}\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of quads of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of quads of odd digits in the i'th string of the input.\n\n  >>> quadCount(['1234567'])\n  [\"the number of quads of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> quadCount(['3',\"11111111\"])\n  [\"the number of quads of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of quads of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\n\nconst quadCount = (lst) => {\n  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 0) { p++ }\n    }\n    d.push(p)\n  }\n  return d\n}\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of quintuples of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of quintuples of odd digits in the i'th string of the input.\n\n  >>> quintupleCount(['1234567'])\n  [\"the number of quintuples of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> quintupleCount(['3',\"11111111\"])\n  [\"the number of quintuples of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of quintuples of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\n\nconst quintupleCount = (lst) => {\n  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 0) { p++ }\n    }\n    d.push(p)\n  }\n  return d\n}\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of hexadecimals of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of hexadecimals of odd digits in the i'th string of the input.\n\n  >>> hexadecimalCount(['1234567'])\n  [\"the number of hexadecimals of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> hexadecimalCount(['3',\"11111111\"])\n  [\"the number of hexadecimals of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of hexadecimals of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\n\nconst hexadecimalCount = (lst) => {\n  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 0) { p++ }\n    }\n    d.push(p)\n  }\n  return d\n}\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of binary digits of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of binary digits of odd digits in the i'th string of the input.\n\n  >>> binaryCount(['1234567'])\n  [\"the number of binary digits of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> binaryCount(['3',\"11111111\"])\n  [\"the number of binary digits of odd "}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\n\nconst minSubArraySum = (nums) => {\n  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n", "canonical_solution": "      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "partial": "/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n        # print('@@this is the line to split##')\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "gc": "<|endoftext|>/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\n\nconst minSubArraySum = (nums) => {\n  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) {\n        min = s\n      }\n    }\n  }\n  return min\n}\n\nmodule.exports = minSubArraySum\n\n},{}],9:[function(require,module,exports){\nconst { minSubArraySum } = require('./minSubArraySum')\n\n/**\n * Given an array of integers nums, find the maximum sum of any non-empty sub-array\n * of nums.\n * Example\n * maxSubArraySum([2, 3, 4, 1, 2, 4]) == 4\n * maxSubArraySum([-1, -2, -3]) == -3\n */\n\nconst maxSubArraySum = (nums) => {\n  let max = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s > max) {\n        max = s\n      }\n    }\n  }\n  return max\n}\n\nmodule.exports = maxSubArraySum\n\n},{\"./minSubArraySum\":8}],10:[function(require,module,exports){\nconst { maxSubArraySum } = require('./maxSubArraySum')\n\n/**\n * Given an array of integers nums, find the maximum sum of any non-empty sub-array\n * of nums.\n * Example\n * maxSubArraySum([2, 3, 4, 1, 2, 4]) == 4\n * maxSubArraySum([-1, -2, -3]) == -3\n */\n\nconst maxSubArraySum = (nums) => {\n  let max = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < max) {\n        max = s\n      }\n    }\n  }\n  return max\n}\n\nmodule.exports = maxSubArraySum\n\n},{\"./maxSubArraySum\":8}],11:[function(require,module,exports){\nconst { minSubArraySum } = require('./minSubArraySum')\n\n/**\n * Given an array of integers nums, find the minimum sum of any non-empty sub-array\n * of nums.\n * Example\n * minSubArraySum([2, 3, 4, 1, 2, 4]) == 4\n * minSubArraySum([-1, -2, -3]) == -3\n */\n\nconst minSubArraySum = (nums) => {\n  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s > min) {\n        min = s\n      }\n    }\n  }\n  return min\n}\n\nmodule.exports = minSubArraySum\n\n},{\"./minSubArraySum\":8}],12:[function(require,module,exports){\nconst { maxSubArraySum } = require('./maxSubArraySum')\n\n/**\n * Given an array of integers nums, find the maximum sum of any non-empty sub-array\n * of nums.\n * Example\n * maxSubArraySum([2, 3, 4, 1, 2, 4]) == 4\n * maxSubArraySum([-1, -2, -3]) == -3\n */\n\nconst maxSubArraySum = (nums) => {\n  let max = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < max) {\n        max = s\n      }\n    }\n  }\n  return max\n}\n\nmodule.exports = maxSubArraySum\n\n},{\"./maxSubArraySum\":8}],13:[function(require,module,exports){\nconst { minSubArraySum } = require('./minSubArraySum')\n\n/**\n * Given an array of integers nums, find the minimum sum of any non-empty sub-array\n * of nums.\n * Example\n * minSubArraySum([2, 3, 4, 1, 2, 4]) == 4\n * minSubArraySum([-1, -2, -3]) == -3\n */\n\nconst minSubArraySum = (nums) => {\n  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s > min) {\n        min = s\n      }\n    }\n  }\n  return min\n}\n\nmodule.exports = minSubArraySum\n\n},{\"./minSubArraySum\":8}],14:[function(require,module,exports){\nconst { maxSubArraySum } = require('./maxSubArraySum')\n\n/**\n * Given an array of integers nums, find the maximum sum of any non-empty sub-array\n * of nums.\n * Example\n * maxSubArraySum([2, 3, 4, 1, 2, 4]) == 4\n * maxSubArraySum([-1, -2, -3]) == -3\n */\n\nconst maxSubArraySum = (nums) => {\n  let max = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < max) {\n        max = s\n      }\n    }\n  }\n  return max\n}\n\nmodule.exports = maxSubArraySum\n\n},{\"./maxSubArraySum\":8}],15:[function(require,module,exports){\nconst { minSubArraySum } = require('./minSubArraySum')\n\n/**\n * Given an array of integers nums, find the minimum sum of any non-empty sub-array\n * of nums.\n * Example\n * minSubArraySum([2, 3, 4, 1, 2, 4]) == 4\n * minSubArraySum([-1, -2, -3]) == -3\n */\n\nconst minSubArraySum = (nums) => {\n  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s > min) {\n        min = s\n      }\n    }\n  }\n  return min\n}\n\nmodule.exports = minSubArraySum\n\n},{\"./minSubArraySum\":8}],16:[function(require,module,exports){\nconst { maxSubArraySum } = require('./maxSubArraySum')\n\n/**\n * Given an array of integers nums, find the maximum sum of any non-empty sub-array\n * of nums.\n * Example\n * maxSubArraySum([2, 3, 4, 1, 2, 4]) == 4\n * maxSubArraySum([-1, -2, -3]) == -3\n */\n\nconst maxSubArraySum = (nums) => {\n  let max = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < max) {\n        max = s\n      }\n    }\n  }\n  return max\n}\n\nmodule.exports = maxSubArraySum\n\n},{\"./maxSubArraySum\":8}],17:[function(require,module,exports){\nconst { minSubArraySum } = require('./minSubArraySum')\n\n/**\n * Given an array of integers nums, find the minimum sum of any non-empty sub-array\n * of nums.\n * Example\n * minSubArraySum([2, "}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\n\nconst maxFill = (grid, capacity) => {\n  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n", "canonical_solution": "    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "partial": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    # print('@@this is the line to split##')\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "gc": "<|endoftext|>/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\n\nconst maxFill = (grid, capacity) => {\n  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    if (m > p) { p = m }\n  }\n  return p * capacity\n}\n\nconst fillBucket = (grid, capacity) => {\n  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    if (m > p) { p = m }\n  }\n  return p * capacity\n}\n\nconst fillBuckets = (grid, capacity) => {\n  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    if (m > p) { p = m }\n  }\n  return p * capacity\n}\n\nconst fillBucketsFast = (grid, capacity) => {\n  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    if (m > p) { p = m }\n  }\n  return p * capacity\n}\n\nconst fillBucketsSlow = (grid, capacity) => {\n  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    if (m > p) { p = m }\n  }\n  return p * capacity\n}\n\nconst fillBucketsSlowFast = (grid, capacity) => {\n  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    if (m > p) { p = m }\n  }\n  return p * capacity\n}\n\nconst fillBucketsSlowFastSlow = (grid, capacity) => {\n  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    if (m > p) { p = m }\n  }\n  return p * capacity\n}\n\nconst fillBucketsSlowFastSlowFast = (grid, capacity) => {\n  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    if (m > p) { p = m }\n  }\n  return p * capacity\n}\n\nconst fillBucketsSlowFastSlowFastSlowFast = (grid, capacity) => {\n  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    if (m > p) { p = m }\n  }\n  return p * capacity\n}\n\nconst fillBucketsSlowFastSlowFastSlowFastSlowFast = (grid, capacity) => {\n  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    if (m > p) { p = m }\n  }\n  return p * capacity\n}\n\nconst fillBucketsSlowFastSlowFastSlowFastSlowFastSlowFast = (grid, capacity) => {\n  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    if (m > p) { p = m }\n  }\n  return p * capacity\n}\n\nconst fillBucketsSlowFastSlowFastSlowFastSlowFastSlowFastSlowFast = (grid, capacity) => {\n  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    if (m > p) { p = m }\n  }\n  return p * capacity\n}\n\nconst fillBucketsSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFast = (grid, capacity) => {\n  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    if (m > p) { p = m }\n  }\n  return p * capacity\n}\n\nconst fillBucketsSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlow"}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\n\nconst sortArray = (arr) => {\n  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n", "canonical_solution": "      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "partial": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n        # print('@@this is the line to split##')\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "gc": "<|endoftext|>/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\n\nconst sortArray = (arr) => {\n  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f1 > f2) {\n        ind = k\n      }\n    }\n  }\n  return p.slice(ind)\n}\n\n/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\n\nconst sortArray = (arr) => {\n  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f1 > f2) {\n        ind = k\n      }\n    }\n  }\n  return p.slice(ind)\n}\n\n/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\n\nconst sortArray = (arr) => {\n  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f1 > f2) {\n        ind = k\n      }\n    }\n  }\n  return p.slice(ind)\n}\n\n/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\n\nconst sortArray = (arr) => {\n  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f1 > f2) {\n        ind = k\n      }\n    }\n  }\n  return p.slice(ind)\n}\n\n/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\n\nconst sortArray = (arr) => {\n  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f1 > f2) {\n        ind = k\n      }\n    }\n  }\n  return p.slice(ind)\n}\n\n/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\n\nconst sortArray = (arr) => {\n  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f1 > f2) {\n        ind = k\n      }\n    }\n  }\n  return p.slice(ind)\n}\n\n/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\n\nconst sortArray = (arr) => {\n  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1"}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\n\nconst selectWords = (s, n) => {\n  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n", "canonical_solution": "        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "partial": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        # print('@@this is the line to split##')\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "gc": "<|endoftext|>/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\n\nconst selectWords = (s, n) => {\n  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j]!= 'a' && t[i][j]!= 'e' && t[i][j]!= 'i' && t[i][j]!= 'o' && t[i][j]!= 'u' && t[i][j]!= 'A' &&\n        t[i][j]!= 'E' && t[i][j]!= 'I' && t[i][j]!= 'O' && t[i][j]!= 'U') {\n        l += 1\n      }\n    }\n    if (l == n) {\n      k.push(t[i])\n    }\n  }\n  return k\n}\n\n/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\n\nconst selectWords2 = (s, n) => {\n  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j]!= 'a' && t[i][j]!= 'e' && t[i][j]!= 'i' && t[i][j]!= 'o' && t[i][j]!= 'u' && t[i][j]!= 'A' &&\n        t[i][j]!= 'E' && t[i][j]!= 'I' && t[i][j]!= 'O' && t[i][j]!= 'U') {\n        l += 1\n      }\n    }\n    if (l == n) {\n      k.push(t[i])\n    }\n  }\n  return k\n}\n\n/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\n\nconst selectWords3 = (s, n) => {\n  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j]!= 'a' && t[i][j]!= 'e' && t[i][j]!= 'i' && t[i][j]!= 'o' && t[i][j]!= 'u' && t[i][j]!= 'A' &&\n        t[i][j]!= 'E' && t[i][j]!= 'I' && t[i][j]!= 'O' && t[i][j]!= 'U') {\n        l += 1\n      }\n    }\n    if (l == n) {\n      k.push(t[i])\n    }\n  }\n  return k\n}\n\n/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\n\nconst selectWords4 = (s, n) => {\n  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j]!= 'a' && t[i][j]!= 'e' && t[i][j]!= 'i' && t[i][j]!= 'o' && t[i][j]!= 'u' && t[i][j]!= 'A' &&\n        t[i][j]!= 'E' && t[i][j]!= 'I' && t[i][j]!= 'O' && t[i][j]!= 'U') {\n        l += 1\n      }\n    }\n    if (l == n) {\n      k.push(t[i])\n    }\n  }\n  return k\n}\n\n/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\n\nconst selectWords5 = (s, n) => {\n  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j]!= 'a' && t[i][j]!= 'e' && t[i][j]!= 'i' && t[i][j]!= 'o' && t[i][j]!= 'u' && t[i][j]!= 'A' &&\n        t[i][j]!= 'E' && t[i][j]!= 'I' && t[i][j]!= 'O' && t[i][j]!= 'U') {\n        l += 1\n      }\n    }\n    if (l == n) {\n      k.push(t[i])\n    }\n  }\n  return k\n}\n\n/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little"}
{"task_id": "JavaScript/118", "prompt": "/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\n\nconst getClosestVowel = (word) => {\n  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n", "canonical_solution": "      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "partial": "/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      # print('@@this is the line to split##')\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "gc": "<|endoftext|>/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\n\nconst getClosestVowel = (word) => {\n  for (let i = word.length - 2; i > 0; i--) {\n    if (\n     !(word[i]!= 'a' && word[i]!= 'e' && word[i]!= 'i' && word[i]!= 'o' && word[i]!= 'u' && word[i]!= 'A' &&\n        word[i]!= 'U' && word[i]!= 'O' && word[i]!= 'I' && word[i]!= 'E')\n      &&\n      (word[i + 1]!= 'a' && word[i + 1]!= 'e' && word[i + 1]!= 'i' && word[i + 1]!= 'o' && word[i + 1]!= 'u' && word[i + 1]!= 'A' &&\n        word[i + 1]!= 'U' && word[i + 1]!= 'O' && word[i + 1]!= 'I' && word[i + 1]!= 'E')\n      &&\n      (word[i + 2]!= 'a' && word[i + 2]!= 'e' && word[i + 2]!= 'i' && word[i + 2]!= 'o' && word[i + 2]!= 'u' && word[i + 2]!= 'A' &&\n        word[i + 2]!= 'U' && word[i + 2]!= 'O' && word[i + 2]!= 'I' && word[i + 2]!= 'E')\n    ) {\n      return word[i];\n    }\n  }\n  return \"\";\n};\n\n/*\n  You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\n\nconst getClosestVowel = (word) => {\n  for (let i = word.length - 2; i > 0; i--) {\n    if (\n     !(word[i]!= 'a' && word[i]!= 'e' && word[i]!= 'i' && word[i]!= 'o' && word[i]!= 'u' && word[i]!= 'A' &&\n        word[i]!= 'U' && word[i]!= 'O' && word[i]!= 'I' && word[i]!= 'E')\n      &&\n      (word[i + 1]!= 'a' && word[i + 1]!= 'e' && word[i + 1]!= 'i' && word[i + 1]!= 'o' && word[i + 1]!= 'u' && word[i + 1]!= 'A' &&\n        word[i + 1]!= 'U' && word[i + 1]!= 'O' && word[i + 1]!= 'I' && word[i + 1]!= 'E')\n      &&\n      (word[i + 2]!= 'a' && word[i + 2]!= 'e' && word[i + 2]!= 'i' && word[i + 2]!= 'o' && word[i + 2]!= 'u' && word[i + 2]!= 'A' &&\n        word[i + 2]!= 'U' && word[i + 2]!= 'O' && word[i + 2]!= 'I' && word[i + 2]!= 'E')\n    ) {\n      return word[i];\n    }\n  }\n  return \"\";\n};\n\n/*\n  You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\n\nconst getClosestVowel = (word) => {\n  for (let i = word.length - 2; i > 0; i--) {\n    if (\n     !(word[i]!= 'a' && word[i]!= 'e' && word[i]!= 'i' && word[i]!= 'o' && word[i]!= 'u' && word[i]!= 'A' &&\n        word[i]!= 'U' && word[i]!= 'O' && word[i]!= 'I' && word[i]!= 'E')\n      &&\n      (word[i + 1]!= 'a' && word[i + 1]!= 'e' && word[i + 1]!= 'i' && word[i + 1]!= 'o' && word[i + 1]!= 'u' && word[i + 1]!= 'A' &&\n        word[i + 1]!= 'U' && word[i + 1]!= 'O' && word[i + 1]!= 'I' && word[i + 1]!= 'E')\n      &&\n      (word[i + 2]!= 'a' && word[i + 2]!= 'e' && word[i + 2]!= 'i' && word[i + 2]!= 'o' && word[i + 2]!= 'u' && word[i + 2]!= 'A' &&\n        word[i + 2]!= 'U' && word[i + 2]!= 'O' && word[i + 2]!= 'I' && word[i + 2]!= 'E')\n    ) {\n      return word[i];\n    }\n  }\n  return \"\";\n};\n\n/*\n  You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\n\nconst getClosestVowel = (word) => {\n  for (let i = word.length - 2; i > 0; i--) {\n    if (\n     !(word[i]!= 'a' && word[i]!= 'e' && word[i]!= 'i' && word[i]!= 'o' && word[i]!= 'u' && word[i]!= 'A' &&\n        word[i]!= 'U' && word[i]!= 'O' && word[i]!= 'I' && word[i]!= 'E')\n      &&\n      (word[i + 1]!= 'a' && word[i + 1]!= 'e' && word[i + 1]!= 'i' && word[i + 1]!= 'o' && word[i + 1]!= 'u' && word[i + 1]!= 'A' &&\n        word[i + 1]!= 'U' && word[i + 1]!= 'O' && word[i + 1]!= 'I' && word[i + 1]!= 'E')\n      &&\n      (word[i + 2]!= 'a' && word[i + 2]!= 'e' && word[i + 2]!= 'i' && word[i + 2]!= 'o' && word[i + 2]!= 'u' && word[i + 2]!= 'A' &&\n        word[i + 2]!= 'U' && word[i + 2]!= 'O' && word[i + 2]!= 'I' && word[i + 2]!= 'E')\n    ) {\n      return word[i];\n    }\n  }\n  return \"\";\n};\n\n/*\n  You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  getClosestVowel"}
{"task_id": "JavaScript/119", "prompt": "/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\n\nconst matchParens = (lst) => {\n  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n", "canonical_solution": "  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "partial": "/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  # print('@@this is the line to split##')\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "gc": "<|endoftext|>/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\n\nconst matchParens = (lst) => {\n  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'No' }\n  return 'No'\n}\n\n/* You are given a string S consisting of n characters. You are asked to find\n  the longest common subsequence in S of length n. For example, the string 'abc'\n  is longest common subsequence in 'abc', which is 'ac', which is 'ba', and so\n  on. Return the length of the longest common subsequence in S.\n  Examples:\n  longestCommonSubsequence('abc') == 3\n  longestCommonSubsequence('abcabc') == 3\n  longestCommonSubsequence('abcabcabc') == 3\n  longestCommonSubsequence('abcabcabcabc') == 4\n  longestCommonSubsequence('abcabcabcabcabc') == 5\n  */\n\nconst longestCommonSubsequence = (str) => {\n  let n = str.length\n  let m = 1\n  let max = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let p"}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\n\nconst maximum = (arr, k) => {\n  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n", "canonical_solution": "    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "partial": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    # print('@@this is the line to split##')\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "gc": "<|endoftext|>/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\n\nconst maximum = (arr, k) => {\n  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind === j) break\n    p = p.slice(ind)\n  }\n  return p\n}\n\n// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 1))\n// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 2))\n// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 3))\n// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 4))\n// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 5))\n// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 6))\n// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 7))\n// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 8))\n// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 9))\n// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 10))\n// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 11))\n// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 12))\n// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 13))\n// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 14))\n// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 15))\n// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 16))\n// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 17))\n// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 18))\n// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 19))\n// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 20))\n// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 21))\n// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 22))\n// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 23))\n// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 24))\n// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 25))\n// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 26))\n// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 27))\n// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 28))\n// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 29))\n// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 30))\n// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 31))\n// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 32))\n// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 33))\n// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 34))\n// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 35))\n// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 36))\n// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 37))\n// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 38))\n// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 39))\n// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 40))\n// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 41))\n// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 42))\n// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 43))\n// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 44))\n// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 45))\n// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 46))\n// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 47))\n// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 48))\n// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 49))\n// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 50))\n// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 51))\n// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 52))\n// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 53))\n// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 54))\n// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 55))\n// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 56))\n// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 57))\n// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 58))\n// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 59))\n// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 60))\n// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 61))\n// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 62))\n// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 63))\n// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 64))\n// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 65))\n// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 66))\n// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 67))\n// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 68))\n// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 69))\n// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 70))\n// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 71))\n// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 72))\n// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 73))\n// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 74))\n// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 75))\n// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 76))\n// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 77))\n// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 78))\n// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 79))\n// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 80))\n// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 81))\n// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 82))\n// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 83))\n// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 84))\n// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 85))\n// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 86))\n// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 87))\n// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 88))\n// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 89))\n// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 90))\n// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 91))\n// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 92))\n// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 93))\n// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 94))\n// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 95))\n// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 96))\n// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 97))\n// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 98))\n// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 99))\n// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 100))\n// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 101))\n// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 102))\n// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 103))\n// "}
{"task_id": "JavaScript/121", "prompt": "/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\n\nconst solution = (lst) => {\n  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n", "canonical_solution": "    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "partial": "/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n      # print('@@this is the line to split##')\n    }\n  }\n  return p\n}\n\n", "gc": "<|endoftext|>/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\n\nconst solution = (lst) => {\n  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\nmodule.exports = solution\n\n},{}],4:[function(require,module,exports){\n/*Given a non-empty list of integers, return the sum of all of the even elements that are in odd positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\n\nconst solution = (lst) => {\n  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2!= 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\nmodule.exports = solution\n\n},{}],5:[function(require,module,exports){\n/*Given a non-empty list of integers, return the sum of all of the even elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\n\nconst solution = (lst) => {\n  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\nmodule.exports = solution\n\n},{}],6:[function(require,module,exports){\n/*Given a non-empty list of integers, return the sum of all of the even elements that are in odd positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\n\nconst solution = (lst) => {\n  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2!= 0) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\nmodule.exports = solution\n\n},{}],7:[function(require,module,exports){\n/*Given a non-empty list of integers, return the sum of all of the even elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\n\nconst solution = (lst) => {\n  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\nmodule.exports = solution\n\n},{}],8:[function(require,module,exports){\n/*Given a non-empty list of integers, return the sum of all of the even elements that are in odd positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\n\nconst solution = (lst) => {\n  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2!= 0) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\nmodule.exports = solution\n\n},{}],9:[function(require,module,exports){\n/*Given a non-empty list of integers, return the sum of all of the even elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\n\nconst solution = (lst) => {\n  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\nmodule.exports = solution\n\n},{}],10:[function(require,module,exports){\n/*Given a non-empty list of integers, return the sum of all of the even elements that are in odd positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\n\nconst solution = (lst) => {\n  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2!= 0) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\nmodule.exports = solution\n\n},{}],11:[function(require,module,exports){\n/*Given a non-empty list of integers, return the sum of all of the even elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\n\nconst solution = (lst) => {\n  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\nmodule.exports = solution\n\n},{}],12:[function(require,module,exports){\n/*Given a non-empty list of integers, return the sum of all of the even elements that are in odd positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\n\nconst solution = (lst) => {\n  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\nmodule.exports = solution\n\n},{}],13:[function(require,module,exports){\n/*Given a non-empty list of integers, return the sum of all of the even elements that are in odd positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\n\nconst solution = (lst) => {\n  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2!= 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\nmodule.exports = solution\n\n},{}],14:[function(require,module,exports){\n/*Given a non-empty list of integers, return the sum of all of the even elements that are in odd positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\n\nconst solution = (lst) => {\n  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\nmodule.exports = solution\n\n},{}],15:[function(require,module,exports){\n/*Given a non-empty list of integers, return the sum of all of the even elements that are in odd positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\n\nconst solution = (lst) => {\n  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2!= 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\nmodule.exports = solution\n\n},{}],16:[function(require,module,exports){\n/*Given a non-empty list of integers, return the "}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\n\nconst addElements = (arr, k) => {\n  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n", "canonical_solution": "  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "partial": "/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n    # print('@@this is the line to split##')\n  }\n  return p\n}\n\n", "gc": "<|endoftext|>/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\n\nconst addElements = (arr, k) => {\n  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\nconst findMax = (arr) => {\n  let max = 0\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i]\n    }\n  }\n  return max\n}\n\nconst findMin = (arr) => {\n  let min = 0\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < min) {\n      min = arr[i]\n    }\n  }\n  return min\n}\n\nconst findMaxSubArray = (arr, k) => {\n  let max = 0\n  let min = 0\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i]\n    }\n    if (arr[i] < min) {\n      min = arr[i]\n    }\n  }\n  return [max, min]\n}\n\nconst findMinSubArray = (arr, k) => {\n  let max = 0\n  let min = 0\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < min) {\n      min = arr[i]\n    }\n    if (arr[i] > max) {\n      max = arr[i]\n    }\n  }\n  return [min, max]\n}\n\nconst findMaxSubArrayWithK = (arr, k) => {\n  let max = 0\n  let min = 0\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i]\n    }\n    if (arr[i] < min) {\n      min = arr[i]\n    }\n    if (arr[i] > max) {\n      max = arr[i]\n    }\n    if (arr[i] < min) {\n      min = arr[i]\n    }\n  }\n  return [max, min]\n}\n\nconst findMinSubArrayWithK = (arr, k) => {\n  let max = 0\n  let min = 0\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < min) {\n      min = arr[i]\n    }\n    if (arr[i] > max) {\n      max = arr[i]\n    }\n    if (arr[i] < min) {\n      min = arr[i]\n    }\n    if (arr[i] > max) {\n      max = arr[i]\n    }\n  }\n  return [min, max]\n}\n\nconst findMaxSubArrayWithKAndK = (arr, k) => {\n  let max = 0\n  let min = 0\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i]\n    }\n    if (arr[i] < min) {\n      min = arr[i]\n    }\n    if (arr[i] > max) {\n      max = arr[i]\n    }\n    if (arr[i] < min) {\n      min = arr[i]\n    }\n    if (arr[i] > max) {\n      max = arr[i]\n    }\n    if (arr[i] < min) {\n      min = arr[i]\n    }\n  }\n  return [max, min]\n}\n\nconst findMinSubArrayWithKAndK = (arr, k) => {\n  let max = 0\n  let min = 0\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < min) {\n      min = arr[i]\n    }\n    if (arr[i] > max) {\n      max = arr[i]\n    }\n    if (arr[i] < min) {\n      min = arr[i]\n    }\n    if (arr[i] > max) {\n      max = arr[i]\n    }\n    if (arr[i] < min) {\n      min = arr[i]\n    }\n  }\n  return [min, max]\n}\n\nconst findMaxSubArrayWithKAndKAndK = (arr, k) => {\n  let max = 0\n  let min = 0\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i]\n    }\n    if (arr[i] < min) {\n      min = arr[i]\n    }\n    if (arr[i] > max) {\n      max = arr[i]\n    }\n    if (arr[i] < min) {\n      min = arr[i]\n    }\n    if (arr[i] > max) {\n      max = arr[i]\n    }\n    if (arr[i] < min) {\n      min = arr[i]\n    }\n    if (arr[i] > max) {\n      max = arr[i]\n    }\n    if (arr[i] < min) {\n      min = arr[i]\n    }\n  }\n  return [max, min]\n}\n\nconst findMaxSubArrayWithKAndKAndKAndK = (arr, k) => {\n  let max = 0\n  let min = 0\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i]\n    }\n    if (arr[i] < min) {\n      min = arr[i]\n    }\n    if (arr[i] > max) {\n      max = arr[i]\n    }\n    if (arr[i] < min) {\n      min = arr[i]\n    }\n    if (arr[i] > max) {\n      max = arr[i]\n    }\n    if (arr[i] < min) {\n      min = arr[i]\n    }\n    if (arr[i] > max) {\n      max = arr[i]\n    }\n    if (arr[i] < min) {\n      min = arr[i]\n    }\n    if (arr[i] > max) {\n      max = arr[i]\n    }\n    if (arr[i] < min) {\n      min = arr[i]\n    }\n  }\n  return [max, min]\n}\n\nconst findMaxSubArrayWithKAndKAndKAndKAndK = (arr, k) => {\n  let max = 0\n  let min = 0\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i]\n    }\n    if (arr[i] < min) {\n      min = arr[i]\n    }\n    if (arr[i] > max) {\n      max = arr[i]\n    }\n    if (arr[i] < min) {\n      min = arr[i]\n    }\n    if (arr[i] > max) {\n      max = arr[i]\n    }\n    if (arr[i] < min) {\n      min = arr[i]\n    }\n    if (arr[i] > max) {\n      max = arr[i]\n    }\n    if (arr[i] < min) {\n      min = arr[i]\n    }\n    if (arr[i] > max) {\n      max = arr[i]\n    }\n    if (arr[i] < min) {\n      min = arr[i]\n    }\n    if (arr[i] > max) {\n      max = arr[i]\n    }\n    if (arr[i] < min) {\n      min = arr[i]\n    }\n    if (arr[i] > max) {\n      max = arr[i]\n    }\n    if (arr[i] < min) {\n      min = arr[i]\n    }\n    if (arr[i] > max) {\n      max = arr[i]\n    }\n    if (arr[i] < min) {\n      min = arr[i]\n    }\n    if (arr[i] > max) {\n      max = arr[i]\n    }\n    if (arr[i] < min) {\n      min = arr[i]\n    }\n    if (arr[i] > max) {\n      max = arr[i]\n    }\n    if (arr[i] < min) {\n      min = arr[i]\n    }\n    if (arr[i] > max) {\n      max = arr[i]\n    }\n    if (arr[i] < min) {\n      min = arr[i]\n    }\n    if (arr[i] > max) {\n      max = arr[i]\n    }\n    if (arr[i] < min) {\n      min = arr[i]\n    }\n    if (arr[i] > max) {\n      max = arr[i]\n    }\n    if (arr[i] < min) {\n      min = arr[i]\n    }\n    if (arr[i] > max) {\n      max = arr[i]\n    }\n    if (arr[i] < min) {\n      min = arr[i]\n    }\n    if (arr[i] > max) {\n      max = arr[i]\n    }\n    if (arr[i] < min) {\n      min = arr[i]\n    }\n    if (arr[i] > max) {"}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\n\nconst getOddCollatz = (n) => {\n  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n", "canonical_solution": "  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "partial": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  # print('@@this is the line to split##')\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "gc": "<|endoftext|>/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\n\nconst getOddCollatz = (n) => {\n  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  return p\n}\n\n/*\n  Given a positive integer n, return a sorted list that has the even numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getEvenCollatz(5) returns [1, 5, 16, 8, 4, 2] # The collatz sequence for 5 is [1, 5, 16, 8, 4, 2, 1], so the even numbers are only 1, 5, and 16.\n  */\n\nconst getEvenCollatz = (n) => {\n  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  return p\n}\n\n/*\n  Given a positive integer n, return a sorted list that has the prime factors in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getPrimeFactors(5) returns [1, 3, 5, 7, 9, 11] # The collatz sequence for 5 is [1, 3, 5, 7, 9, 11, 13, 17, 19], so the first prime factors are 1, 3, 5, 7, 9, 11, 13, 17, 19.\n  */\n\nconst getPrimeFactors = (n) => {\n  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  return p\n}\n\n/*\n  Given a positive integer n, return a sorted list that has the prime factors in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getPrimeFactors(5) returns [1, 3, 5, 7, 9, 11] # The collatz sequence for 5 is [1, 3, 5, 7, 9, 11, 13, 17, 19], so the first prime factors are 1, 3, 5, 7, 9, 11, 13, 17, 19.\n  */\n\nconst getPrimeFactors2 = (n) => {\n  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  return p\n}\n\n/*\n  Given a positive integer n, return a sorted list that has the prime factors in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getPrimeFactors(5) returns [1, 3, 5, 7, 9, 11] # The collatz sequence for 5 is [1, 3, 5, 7, 9, 11, 13, 17, 19], so the first prime factors are 1, 3, 5, 7, 9, 11, 13, 17, 19.\n  */\n\nconst getPrimeFactors3 = (n) => {\n  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  return p\n}\n\n/*\n  Given a positive integer n, return a sorted list that has the prime factors in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getPrimeFactors(5) returns [1, 3, 5, 7, 9, 11] # The collatz sequence for 5 is [1, 3, 5, 7, 9, 11, 13, 17, 19], so the first prime factors are 1, 3, 5, 7, 9, 11, 13, 17, 19.\n  */\n\nconst getPrimeFactors"}
{"task_id": "JavaScript/124", "prompt": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\n\nconst validDate = (date) => {\n  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n", "canonical_solution": "  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "partial": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  # print('@@this is the line to split##')\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "gc": "<|endoftext|>/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\n\nconst validDate = (date) => {\n  let t = date.split(/-/)\n  if (t.length!= 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if (t[1] < 1 || t[1] > 12) { return false }\n  if (t[2] == 1 && t[3] > 30) { return false }\n  if (t[2] < 1 || t[2] > 12) { return false }\n  return true\n}\n\n/*\n  Write a function which returns the number of days in a given month.\n  If the month is invalid, return 0.\n  If the month is January, return 31\n  If the month is February, return 28\n  If the month is March, return 31\n  If the month is April, return 30\n  If the month is May, return 31\n  If the month is June, return 30\n  If the month is July, return 31\n  If the month is August, return 31\n  If the month is September, return 30\n  If the month is October, return 31\n  If the month is November, return 30\n  If the month is December, return 31\n*/\n\nconst getDaysInMonth = (month) => {\n  let d = new Date(year, month - 1, 30)\n  return d.getDate()\n}\n\n/*\n  Write a function which returns the number of days in a given year.\n  If the year is invalid, return 0.\n  If the year is 2000, return 366\n  If the year is 2001, return 365\n  If the year is 2002, return 366\n  If the year is 2003, return 365\n  If the year is 2004, return 366\n  If the year is 2005, return 365\n  If the year is 2006, return 366\n  If the year is 2007, return 365\n  If the year is 2008, return 366\n  If the year is 2009, return 365\n  If the year is 2010, return 366\n  If the year is 2011, return 365\n  If the year is 2012, return 366\n  If the year is 2013, return 365\n  If the year is 2014, return 366\n  If the year is 2015, return 366\n  If the year is 2016, return 365\n  If the year is 2017, return 366\n  If the year is 2018, return 365\n  If the year is 2019, return 366\n  If the year is 2020, return 366\n  If the year is 2021, return 366\n  If the year is 2022, return 366\n  If the year is 2023, return 365\n  If the year is 2024, return 366\n  If the year is 2025, return 365\n  If the year is 2026, return 366\n  If the year is 2027, return 365\n  If the year is 2028, return 366\n  If the year is 2029, return 365\n  If the year is 2030, return 366\n  If the year is 2031, return 365\n  If the year is 2032, return 366\n  If the year is 2033, return 365\n  If the year is 2034, return 366\n  If the year is 2035, return 365\n  If the year is 2036, return 366\n  If the year is 2037, return 365\n  If the year is 2038, return 366\n  If the year is 2039, return 365\n  If the year is 2040, return 366\n  If the year is 2041, return 365\n  If the year is 2042, return 366\n  If the year is 2043, return 365\n  If the year is 2044, return 366\n  If the year is 2045, return 365\n  If the year is 2046, return 366\n  If the year is 2047, return 365\n  If the year is 2048, return 366\n  If the year is 2049, return 365\n  If the year is 2050, return 366\n  If the year is 2051, return 365\n  If the year is 2052, return 366\n  If the year is 2053, return 365\n  If the year is 2054, return 366\n  If the year is 2055, return 365\n  If the year is 2056, return 366\n  If the year is 2057, return 365\n  If the year is 2058, return 366\n  If the year is 2059, return 365\n  If the year is 2060, return 366\n  If the year is 2061, return 365\n  If the year is 2062, return 366\n  If the year is 2063, return 365\n  If the year is 2064, return 366\n  If the year is 2065, return 365\n  If the year is 2066, return 366\n  If the year is 2067, return 365\n  If the year is 2068, return 366\n  If the year is 2069, return 365\n  If the year is 2070, return 366\n  If the year is 2071, return 365\n  If the year is 2072, return 366\n  If the year is 2073, return 365\n  If the year is 2074, return 366\n  If the year is 2075, return 365\n  If the year is 2076, return 366\n  If the year is 2077, return 365\n  If the year is 2078, return 366\n  If the year is 2079, return 365\n  If the year is 2080, return 366\n  If the year is 2081, return 365\n  If the year is 2082, return 366\n  If the year is 2083, return 365\n  If the year is 2084, return 366\n  If the year is 2085, return 365\n  If the year is 2086, return 366\n  If the year is 2087, return 365\n  If the year is 2088, return 366\n  If the year is 2089, return 365\n  If the year is 2090, return 366\n  If the year is 2091, return 365\n  If the year is 2092, return 366\n  If the year is 2093, return 365\n  If the year is 2094, return 366\n  If the year is 2095, return 365\n  If the year is 2096, return 366\n  If the year is 2097, return 365\n  If the year is 2098, return 366\n  If the year is 2099, return 365\n  If the year is 2100, return 366\n  If the year is 2101, return 365\n  If the year is 2102, return 366\n  If the year is 2103, return 365\n  If the year is 2104, return 366\n  If the year is 2105, return 365\n  If the year is 2106, return 366\n  If the year is 2107, return 365\n  If the year is 2108, return 366\n  If the year is 210, return 365\n  If the year is 211, return 366\n  If the year is 212, return 365\n  If the year is 213, return 366\n  If the year is 214, return 365\n  If the year is 215, return 366\n  If the year is 216, return 365\n  If the year is 217, return 366\n  If the year is 218, return 365\n  "}
{"task_id": "JavaScript/125", "prompt": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\n\nconst splitWords = (txt) => {\n  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n", "canonical_solution": "      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "partial": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      # print('@@this is the line to split##')\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "gc": "<|endoftext|>/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\n\nconst splitWords = (txt) => {\n  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      let a = 0\n      let b = 0\n      let c = 0\n      let d = 0\n      let e = 0\n      let f = 0\n      let g = 0\n      let h = 0\n      let i = 0\n      let j = 0\n      let k = 0\n      let l = 0\n      let m = 0\n      let n = 0\n      let o = 0\n      let p = 0\n      let q = 0\n      let r = 0\n      let s = 0\n      let t = 0\n      let u = 0\n      let v = 0\n      let w = 0\n      let x = 0\n      let y = 0\n      let z = 0\n      let A = 0\n      let B = 0\n      let C = 0\n      let D = 0\n      let E = 0\n      let F = 0\n      let G = 0\n      let H = 0\n      let I = 0\n      let J = 0\n      let K = 0\n      let L = 0\n      let M = 0\n      let N = 0\n      let O = 0\n      let P = 0\n      let Q = 0\n      let R = 0\n      let S = 0\n      let T = 0\n      let U = 0\n      let V = 0\n      let W = 0\n      let X = 0\n      let Y = 0\n      let Z = 0\n      let a = 0\n      let b = 0\n      let c = 0\n      let d = 0\n      let e = 0\n      let f = 0\n      let g = 0\n      let h = 0\n      let i = 0\n      let j = 0\n      let k = 0\n      let l = 0\n      let m = 0\n      let n = 0\n      let o = 0\n      let p = 0\n      let q = 0\n      let r = 0\n      let s = 0\n      let t = 0\n      let u = 0\n      let v = 0\n      let w = 0\n      let x = 0\n      let y = 0\n      let z = 0\n      let A = 0\n      let B = 0\n      let C = 0\n      let D = 0\n      let E = 0\n      let F = 0\n      let G = 0\n      let H = 0\n      let I = 0\n      let J = 0\n      let K = 0\n      let L = 0\n      let M = 0\n      let N = 0\n      let O = 0\n      let P = 0\n      let Q = 0\n      let R = 0\n      let S = 0\n      let T = 0\n      let U = 0\n      let V = 0\n      let W = 0\n      let X = 0\n      let Y = 0\n      let Z = 0\n      let a = 0\n      let b = 0\n      let c = 0\n      let d = 0\n      let e = 0\n      let f = 0\n      let g = 0\n      let h = 0\n      let i = 0\n      let j = 0\n      let k = 0\n      let l = 0\n      let m = 0\n      let n = 0\n      let o = 0\n      let p = 0\n      let q = 0\n      let r = 0\n      let s = 0\n      let t = 0\n      let u = 0\n      let v = 0\n      let w = 0\n      let x = 0\n      let y = 0\n      let z = 0\n      let A = 0\n      let B = 0\n      let C = 0\n      let D = 0\n      let E = 0\n      let F = 0\n      let G = 0\n      let H = 0\n      let I = 0\n      let J = 0\n      let K = 0\n      let L = 0\n      let M = 0\n      let N = 0\n      let O = 0\n      let P = 0\n      let Q = 0\n      let R = 0\n      let S = 0\n      let T = 0\n      let U = 0\n      let V = 0\n      let W = 0\n      let X = 0\n      let Y = 0\n      let Z = 0\n      let a = 0\n      let b = 0\n      let c = 0\n      let d = 0\n      let e = 0\n      let f = 0\n      let g = 0\n      let h = 0\n      let i = 0\n      let j = 0\n      let k = 0\n      let l = 0\n      let m = 0\n      let n = 0\n      let o = 0\n      let p = 0\n      let q = 0\n      let r = 0\n      let s = 0\n      let t = 0\n      let u = 0\n      let v = 0\n      let w = 0\n      let x = 0\n      let y = 0\n      let z = 0\n      let A = 0\n      let B = 0\n      let C = 0\n      let D = 0\n      let E = 0\n      let F = 0\n      let G = 0\n      let H = 0\n      let I = 0\n      let J = 0\n      let K = 0\n      let L = 0\n      let M = 0\n      let N = 0\n      let O = 0\n      let P = 0\n      let Q = 0\n      let R = 0\n      let S = 0\n      let T = 0\n      let U = 0\n      let V = 0\n      let W = 0\n      let X = 0\n      let Y = 0\n      let Z = 0\n      let a = 0\n      let b = 0\n      let c = 0\n      let d = 0\n      let e = 0\n      let f = 0\n      let g = 0\n      let h = 0\n      let i = 0\n      let j = 0\n      let k = 0\n      let l = 0\n      let m = 0\n      let n = 0\n      let o = 0\n      let p = 0\n      let q = 0\n      let r = 0\n      let s = 0\n      let t = 0\n      let u = 0\n      let v = 0\n      let w = 0\n      let x = 0\n      let y = 0\n      let z = 0\n      let A = 0\n      let B = 0\n      let C = 0\n      let D = 0\n      let E = 0\n      let F = 0\n      let G = 0\n      let H = 0\n      let I = 0\n      let J = 0\n      let K = 0\n      let L = 0\n      let M = 0\n      let N = 0\n      let O = 0\n      let P = 0\n      let Q = 0\n      let R = 0\n      let S = 0\n      let T = 0\n      let U = 0\n      let V = 0\n      let W = 0\n      let X = 0\n      let Y = 0\n      let Z = 0\n      let a = 0\n      let b = 0\n      let c = 0\n      let d = 0\n      let e = 0\n      let f = 0\n      let g = 0\n      let h = 0\n      let i = 0\n      let j = 0\n      let k = 0\n      let l = 0\n      let m = 0\n      let n = 0\n      let o = 0\n      let p = 0\n      let q = 0\n      let r = 0\n      let s = 0\n      let t = 0\n      let u = 0\n      let v = 0\n      let w = 0\n      let x = 0\n      let y = 0\n      let z = 0\n      let A = 0\n      let B = 0\n      let C = 0\n      let D = 0\n      let E = 0\n      let F = 0\n      let G = 0\n      let H = 0\n      let I = 0\n      let J = 0\n      let K = 0\n      let L = 0\n      let M = 0\n      let N = 0\n      let O = 0\n      let P = 0\n      let Q = 0\n      let R = 0\n      let S = 0\n      let T = 0\n      let U = 0\n      let V = 0\n      let W = 0\n      let X = 0\n      let Y = 0\n      let Z = 0\n      let a = 0\n      let b = 0\n      let c = 0\n      let d = 0\n      let e = 0\n      let f = 0\n      let g = 0\n      let h = 0\n      let i = 0\n      let j = 0\n      let k = 0\n      let l = 0\n      let m = 0\n      let n = 0\n      let o = 0\n      let p = 0\n      let q = 0\n      let r = 0\n      let s = 0\n      let t = 0\n      let u = 0\n      let v = 0\n      let w = 0\n      let x = 0\n      let y = 0\n      let z = 0\n      let A = 0\n      let B = 0\n      let C = 0\n      let D = 0\n      let E = 0\n      let F = 0\n      let G = 0\n      let H = 0\n      let I = 0\n      let "}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\n\nconst isSorted = (lst) => {\n  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n", "canonical_solution": "      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "partial": "/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      # print('@@this is the line to split##')\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "gc": "<|endoftext|>/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\n\nconst isSorted = (lst) => {\n  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n    }\n    pre = lst[i]\n  }\n  return dup <= 1\n}\n\n/* Given a list of numbers, return whether or not they are sorted\n  in descending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ false\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ false\n  */\n\nconst isDescending = (lst) => {\n  if (lst.length == 0) { return false }\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] > pre) { return true }\n    if (lst[i] == pre) {\n      pre = lst[i]\n    }\n  }\n  return pre == lst[0]\n}\n\n/* Given a list of numbers, return whether or not they are sorted\n  in ascending order and in descending order. If list has more than 1\n  duplicate of the same number, return false. Assume no negative numbers and\n  only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ false\n  */\n\nconst isSortedAndDescending = (lst) => {\n  if (lst.length == 0) { return false }\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] > pre) { return true }\n    if (lst[i] == pre) {\n      pre = lst[i]\n    }\n  }\n  return pre == lst[0] && isDescending(lst)\n}\n\n/* Given a list of numbers, return whether or not they are sorted\n  in ascending order and in descending order. If list has more than 1\n  duplicate of the same number, return false. Assume no negative numbers and\n  only integers.\n  Examples\n  isSorted([5]) ➞ false\n  isSorted([1, 2, 3, 4, 5]) ➞ false\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ false\n  */\n\nconst isSortedAndDescendingAndUnique = (lst) => {\n  if (lst.length == 0) { return false }\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] > pre) { return true }\n    if (lst[i] == pre) {\n      pre = lst[i]\n    }\n  }\n  return pre == lst[0] && isDescending(lst) && isUnique(lst)\n}\n\n/* Given a list of numbers, return whether or not they are sorted\n  in ascending order and in descending order. If list has more than 1\n  duplicate of the same number, return false. Assume no negative numbers and\n  only integers.\n  Examples\n  isSorted([5]) ➞ false\n  isSorted([1, 2, 3, 4, 5]) ➞ false\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ false\n  */\n\nconst isSortedAndDescendingAndUniqueAndUnique = (lst) => {\n  if (lst.length == 0) { return false }\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] > pre) { return true }\n    if (lst[i] == pre) {\n      pre = lst[i]\n    }\n  }\n  return pre == lst[0] && isDescending(lst) && isUnique(lst) && isUnique(lst)\n}\n\n/* Given a list of numbers, return whether or not they are sorted\n  in ascending order and in descending order. If list has more than 1\n  duplicate of the same number, return false. Assume no negative numbers and\n  only integers.\n  Examples\n  isSorted([5]) ➞ false\n  isSorted([1, 2, 3, 4, 5]) ➞ false\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ false\n  */\n\nconst isSortedAndDescendingAndUniqueAndUniqueAndUnique = (lst) => {\n  if (lst.length == 0) { return false }\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] > pre) { return true }\n    if (lst[i] == pre) {\n      pre = lst[i]\n    }\n  }\n  return pre == lst[0] && isDescending(lst) && isUnique(lst) && isUnique(lst) && isUnique(lst)\n}\n\n/* Given a list of numbers, return whether or not they are sorted\n  in ascending order and in descending order. If list has more than 1\n  duplicate of the same number, return false. Assume no negative numbers and\n  only integers.\n  Examples\n  isSorted([5]) ➞ false\n  isSorted([1, 2, 3, 4, 5]) ➞ false\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ false\n  */\n\nconst isSortedAndDescendingAndUniqueAndUniqueAndUniqueAndUnique = (lst) => {\n  if (lst.length == 0) { return false }\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] > pre) { return true }\n    if (lst[i] == pre) {\n      pre = lst[i]\n    }\n  }\n  return pre == lst[0]"}
{"task_id": "JavaScript/127", "prompt": "/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\n\nconst intersection = (interval1, interval2) => {\n  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n", "canonical_solution": "  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "partial": "/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  # print('@@this is the line to split##')\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "gc": "<|endoftext|>/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\n\nconst intersection = (interval1, interval2) => {\n  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len === 0) { return \"NO\" }\n  let isPrime = true\n  for (let i = 2; i <= len; i++) {\n    if (lo + i < hi) {\n      if (interval1[i] > interval2[i]) { return \"NO\" }\n      if (interval1[i] < interval2[i]) { return \"NO\" }\n      if (interval1[i] === interval2[i]) { return \"YES\" }\n    }\n  }\n  return \"NO\"\n}\n\n/*\n  [input] samples:\n  interval1 = [2,3]\n  interval2 = [4,5]\n  interval3 = [1,2]\n  interval4 = [2,3]\n  interval5 = [1,2]\n  interval6 = [2,3]\n  interval7 = [1,2]\n  interval8 = [2,3]\n  interval9 = [1,2]\n  interval10 = [2,3]\n  interval11 = [1,2]\n  interval12 = [2,3]\n  interval13 = [1,2]\n  interval14 = [2,3]\n  interval15 = [1,2]\n  interval16 = [2,3]\n  interval17 = [1,2]\n  interval18 = [2,3]\n  interval19 = [1,2]\n  interval20 = [2,3]\n  interval21 = [1,2]\n  interval22 = [2,3]\n  interval23 = [1,2]\n  interval24 = [2,3]\n  interval25 = [1,2]\n  interval26 = [2,3]\n  interval27 = [1,2]\n  interval28 = [2,3]\n  interval29 = [1,2]\n  interval30 = [2,3]\n  interval31 = [1,2]\n  interval32 = [2,3]\n  interval33 = [1,2]\n  interval34 = [2,3]\n  interval35 = [1,2]\n  interval36 = [2,3]\n  interval37 = [1,2]\n  interval38 = [2,3]\n  interval39 = [1,2]\n  interval40 = [2,3]\n  interval41 = [1,2]\n  interval42 = [2,3]\n  interval43 = [1,2]\n  interval44 = [2,3]\n  interval45 = [1,2]\n  interval46 = [2,3]\n  interval47 = [1,2]\n  interval48 = [2,3]\n  interval49 = [1,2]\n  interval50 = [2,3]\n  interval51 = [1,2]\n  interval52 = [2,3]\n  interval53 = [1,2]\n  interval54 = [2,3]\n  interval55 = [1,2]\n  interval56 = [2,3]\n  interval57 = [1,2]\n  interval58 = [2,3]\n  interval59 = [1,2]\n  interval60 = [2,3]\n  interval61 = [1,2]\n  interval62 = [2,3]\n  interval63 = [1,2]\n  interval64 = [2,3]\n  interval65 = [1,2]\n  interval66 = [2,3]\n  interval67 = [1,2]\n  interval68 = [2,3]\n  interval69 = [1,2]\n  interval70 = [2,3]\n  interval71 = [1,2]\n  interval72 = [2,3]\n  interval73 = [1,2]\n  interval74 = [2,3]\n  interval75 = [1,2]\n  interval76 = [2,3]\n  interval77 = [1,2]\n  interval78 = [2,3]\n  interval79 = [1,2]\n  interval80 = [2,3]\n  interval81 = [1,2]\n  interval82 = [2,3]\n  interval83 = [1,2]\n  interval84 = [2,3]\n  interval85 = [1,2]\n  interval86 = [2,3]\n  interval87 = [1,2]\n  interval88 = [2,3]\n  interval89 = [1,2]\n  interval90 = [2,3]\n  interval91 = [1,2]\n  interval92 = [2,3]\n  interval93 = [1,2]\n  interval94 = [2,3]\n  interval95 = [1,2]\n  interval96 = [2,3]\n  interval97 = [1,2]\n  interval98 = [2,3]\n  interval99 = [1,2]\n  interval100 = [2,3]\n  interval101 = [1,2]\n  interval102 = [2,3]\n  interval103 = [1,2]\n  interval104 = [2,3]\n  interval105 = [1,2]\n  interval106 = [2,3]\n  interval107 = [1,2]\n  interval108 = [2,3]\n  interval109 = [1,2]\n  interval110 = [2,3]\n  interval111 = [1,2]\n  interval112 = [2,3]\n  interval113 = [1,2]\n  interval114 = [2,3]\n  interval115 = [1,2]\n  interval116 = [2,3]\n  interval117 = [1,2]\n  interval118 = [2,3]\n  interval119 = [1,2]\n  interval120 = [2,3]\n  interval121 = [1,2]\n  interval122 = [2,3]\n  interval123 = [1,2]\n  interval124 = [2,3]\n  interval125 = [1,2]\n  interval126 = [2,3]\n  interval127 = [1,2]\n  interval128 = [2,3]\n  interval129 = [1,2]\n  interval130 = [2,3]\n  interval131 = [1,2]\n  interval132 = [2,3]\n  interval133 = [1,2]\n  interval134 = [2,3]\n  interval135 = [1,2]\n  interval136 = [2,3]\n  interval137 = [1,2]\n  interval138 = [2,3]\n  interval139 = [1,2]\n  interval140 = [2,3]\n  interval141 = [1,2]\n  interval142 = [2,3]\n  interval143 = [1,2]\n  interval144 = [2,3]\n  interval145 = [1,2]\n  interval146 = [2,3]\n  interval147 = [1,2]\n  interval148 = [2,3]\n  interval149 = [1,2]\n  interval150 = [2,3]\n  interval151 = [1,2]\n  interval152 = [2,3]\n  interval153 = [1,2]\n  interval154 = [2,3]\n  interval155 = [1,2]\n  interval156 = [2,3]\n  interval157 = [1,2]\n  interval158 = [2,3]\n  interval159 = [1,2]\n  interval160 = [2,3]\n  interval161 = [1,2]\n  interval162 = [2,3]\n  interval163 = [1,2]\n  interval164 = [2,3]\n  interval165 = [1,2]\n  interval166 = [2,3]\n  interval167 = [1,2]\n  interval168 = [2,3]\n  interval169 = [1,2]\n  interval170 = ["}
{"task_id": "JavaScript/128", "prompt": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\n\nconst prodSigns = (arr) => {\n  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n", "canonical_solution": "    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "partial": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    # print('@@this is the line to split##')\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "gc": "<|endoftext|>/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\n\nconst prodSigns = (arr) => {\n  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] < 0) {\n      n *= -1\n    }\n  }\n  return n * (s / Math.abs(s))\n}\n\nmodule.exports = prodSigns\n\n},{}],4:[function(require,module,exports){\n/*\n  You are given an array arr of integers and you need to return\n  sum of absolute values of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> absSigns([1, 2, 2, -4]) == 9\n  >>> absSigns([0, 1]) == 0\n  >>> absSigns([]) == null\n  */\n\nconst absSigns = (arr) => {\n  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += Math.abs(arr[i])\n    if (arr[i] < 0) {\n      n *= -1\n    }\n  }\n  return n * (s / Math.abs(s))\n}\n\nmodule.exports = absSigns\n\n},{}],5:[function(require,module,exports){\n/*\n  You are given an array arr of integers and you need to return\n  sum of absolute values of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> absSigns([1, 2, 2, -4]) == 9\n  >>> absSigns([0, 1]) == 0\n  >>> absSigns([]) == null\n  */\n\nconst absSigns = (arr) => {\n  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += Math.abs(arr[i])\n    if (arr[i] < 0) {\n      n *= -1\n    }\n  }\n  return n * (s / Math.abs(s))\n}\n\nmodule.exports = absSigns\n\n},{}],6:[function(require,module,exports){\n/*\n  You are given an array arr of integers and you need to return\n  sum of absolute values of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> absSigns([1, 2, 2, -4]) == 9\n  >>> absSigns([0, 1]) == 0\n  >>> absSigns([]) == null\n  */\n\nconst absSigns = (arr) => {\n  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += Math.abs(arr[i])\n    if (arr[i] < 0) {\n      n *= -1\n    }\n  }\n  return n * (s / Math.abs(s))\n}\n\nmodule.exports = absSigns\n\n},{}],7:[function(require,module,exports){\n/*\n  You are given an array arr of integers and you need to return\n  sum of absolute values of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> absSigns([1, 2, 2, -4]) == 9\n  >>> absSigns([0, 1]) == 0\n  >>> absSigns([]) == null\n  */\n\nconst absSigns = (arr) => {\n  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += Math.abs(arr[i])\n    if (arr[i] < 0) {\n      n *= -1\n    }\n  }\n  return n * (s / Math.abs(s))\n}\n\nmodule.exports = absSigns\n\n},{}],8:[function(require,module,exports){\n/*\n  You are given an array arr of integers and you need to return\n  sum of absolute values of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> absSigns([1, 2, 2, -4]) == 9\n  >>> absSigns([0, 1]) == 0\n  >>> absSigns([]) == null\n  */\n\nconst absSigns = (arr) => {\n  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += Math.abs(arr[i])\n    if (arr[i] < 0) {\n      n *= -1\n    }\n  }\n  return n * (s / Math.abs(s))\n}\n\nmodule.exports = absSigns\n\n},{}],9:[function(require,module,exports){\n/*\n  You are given an array arr of integers and you need to return\n  sum of absolute values of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> absSigns([1, 2, 2, -4]) == 9\n  >>> absSigns([0, 1]) == 0\n  >>> absSigns([]) == null\n  */\n\nconst absSigns = (arr) => {\n  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += Math.abs(arr[i])\n    if (arr[i] < 0) {\n      n *= -1\n    }\n  }\n  return n * (s / Math.abs(s))\n}\n\nmodule.exports = absSigns\n\n},{}],10:[function(require,module,exports){\n/*\n  You are given an array arr of integers and you need to return\n  sum of absolute values of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> absSigns([1, 2, 2, -4]) == 9\n  >>> absSigns([0, 1]) == 0\n  >>> absSigns([]) == null\n  */\n\nconst absSigns = (arr) => {\n  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += Math.abs(arr[i])\n    if (arr[i] < 0) {\n      n *= -1\n    }\n  }\n  return n * (s / Math.abs(s))\n}\n\nmodule.exports = absSigns\n\n},{}],11:[function(require,module,exports){\n/*\n  You are given an array arr of integers and you need to return\n  sum of absolute values of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> absSigns([1, 2, 2, -4]) == 9\n  >>> absSigns([0, 1]) == 0\n  >>> absSigns([]) == null\n  */\n\nconst absSigns = (arr) => {\n  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += Math.abs(arr[i])\n    if (arr[i] < 0) {\n      n *= -1\n    }\n  }\n  return n * (s / Math.abs(s))\n}\n\nmodule.exports = absSigns\n\n},{}],12:[function(require,module,exports){\n/*\n  You are given an array arr of integers and you need to return\n  sum of absolute values of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> absSigns([1, 2, 2, -4]) == 9\n  >>> absSigns([0, 1]) == 0\n  >>> absSigns([]) == null\n  */\n\nconst absSigns = (arr) => {\n  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += Math.abs(arr[i])\n    if (arr[i] < 0) {\n      n *= -1\n    }\n  }\n  return n * (s / Math.abs(s))\n}\n\nmodule.exports = absSign"}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\n\nconst minPath = (grid, k) => {\n  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n", "canonical_solution": "  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "partial": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  # print('@@this is the line to split##')\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "gc": "<|endoftext|>/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\n\nconst minPath = (grid, k) => {\n  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let ans = []\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        ans.push(grid[i][j]);\n      }\n    }\n  }\n  ans.sort()\n  return ans.slice(0, k);\n}\n\n/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\n\nconst minPath = (grid, k) => {\n  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let ans = []\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        ans.push(grid[i][j]);\n      }\n    }\n  }\n  ans.sort()\n  return ans.slice(0, k);\n}\n\n/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\n\nconst minPath = (grid, k) => {\n  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let ans = []\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        ans.push(grid[i][j]);\n      }\n    }\n  }\n  ans.sort()\n  return ans.slice(0, k);\n}\n\n/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,"}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\n\nconst tri = (n) => {\n  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n", "canonical_solution": "    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "partial": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n      # print('@@this is the line to split##')\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "gc": "<|endoftext|>/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\n\nconst tri = (n) => {\n  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    } else {\n      p.push(1 + i)\n    }\n  }\n  return p\n}\n\n/*\n  Given a non-negative integer n, return the first n + 1 numbers of the Fibonacci sequence.\n  Examples:\n  fib(5) = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(3) = [0, 1, 1, 2, 3, 5, 8]\n  */\n\nconst fib = (n) => {\n  if (n == 0) { return [0] }\n  if (n == 1) { return [1] }\n  let p = [0, 1]\n  for (let i = 1; i <= n; i++) {\n    p.push(fib(n - 1) + fib(n - 2))\n  }\n  return p\n}\n\n/*\n  Given a non-negative integer n, return the first n + 1 numbers of the Fibonacci sequence.\n  Examples:\n  fib(5) = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(3) = [0, 1, 1, 2, 3, 5, 8]\n  */\n\nconst fib2 = (max) => {\n  let p = [0, 1]\n  for (let i = 1; i <= max; i++) {\n    p.push(fib(n - 1) + fib(n - 2))\n  }\n  return p\n}\n\n/*\n  Given a non-negative integer n, return the first n + 1 numbers of the Fibonacci sequence.\n  Examples:\n  fib(5) = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(3) = [0, 1, 1, 2, 3, 5, 8]\n  */\n\nconst fib3 = (max) => {\n  let p = [0, 1]\n  for (let i = 1; i <= max; i++) {\n    p.push(fib(n - 1) + fib(n - 2) + fib(n - 3))\n  }\n  return p\n}\n\n/*\n  Given a non-negative integer n, return the first n + 1 numbers of the Fibonacci sequence.\n  Examples:\n  fib(5) = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(3) = [0, 1, 1, 2, 3, 5, 8]\n  */\n\nconst fib4 = (max) => {\n  let p = [0, 1]\n  for (let i = 1; i <= max; i++) {\n    p.push(fib(n - 1) + fib(n - 2) + fib(n - 3) + fib(n - 4))\n  }\n  return p\n}\n\n/*\n  Given a non-negative integer n, return the first n + 1 numbers of the Fibonacci sequence.\n  Examples:\n  fib(5) = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(3) = [0, 1, 1, 2, 3, 5, 8]\n  */\n\nconst fib5 = (max) => {\n  let p = [0, 1]\n  for (let i = 1; i <= max; i++) {\n    p.push(fib(n - 1) + fib(n - 2) + fib(n - 3) + fib(n - 4) + fib(n - 5))\n  }\n  return p\n}\n\n/*\n  Given a non-negative integer n, return the first n + 1 numbers of the Fibonacci sequence.\n  Examples:\n  fib(5) = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(3) = [0, 1, 1, 2, 3, 5, 8]\n  */\n\nconst fib6 = (max) => {\n  let p = [0, 1]\n  for (let i = 1; i <= max; i++) {\n    p.push(fib(n - 1) + fib(n - 2) + fib(n - 3) + fib(n - 4) + fib(n - 5) + fib(n - 6))\n  }\n  return p\n}\n\n/*\n  Given a non-negative integer n, return the first n + 1 numbers of the Fibonacci sequence.\n  Examples:\n  fib(5) = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(3) = [0, 1, 1, 2, 3, 5, 8]\n  */\n\nconst fib7 = (max) => {\n  let p = [0, 1]\n  for (let i = 1; i <= max; i++) {\n    p.push(fib(n - 1) + fib(n - 2) + fib(n - 3) + fib(n - 4) + fib(n - 5) + fib(n - 6) + fib(n - 7))\n  }\n  return p\n}\n\n/*\n  Given a non-negative integer n, return the first n + 1 numbers of the Fibonacci sequence.\n  Examples:\n  fib(5) = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(3) = [0, 1, 1, 2, 3, 5, 8]\n  */\n\nconst fib8 = (max) => {\n  let p = [0, 1]\n  for (let i = 1; i <= max; i++) {\n    p.push(fib(n - 1) + fib(n - 2) + fib(n - 3) + fib(n - 4) + fib(n - 5) + fib(n - 6) + fib(n - 7) + fib(n - 8))\n  }\n  return p\n}\n\n/*\n  Given a non-negative integer n, return the first n + 1 numbers of the Fibonacci sequence.\n  Examples:\n  fib(5) = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(3) = [0, 1, 1, 2, 3, 5, 8]\n  */\n\nconst fib9 = (max) => {\n  let p = [0, 1]\n  for (let i = 1; i <= max; i++) {\n    p.push(fib(n - 1) + fib(n - 2) + fib(n - 3) + fib(n - 4) + fib(n - 5) + fib(n - 6) + fib(n - 7) + fib(n - 8) + fib(n - 9))\n  }\n  return p\n}\n\n/*\n  Given a non-negative integer n, return the first n + 1 numbers of the Fibonacci sequence.\n  Examples:\n  fib(5) = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(3) = [0, 1, 1, 2, 3, 5, 8]\n  */\n\nconst fib10 = (max) => {\n  let p = [0, 1]\n  for (let i = 1; i <= max; i++) {\n    p.push(fib(n - 1) + fib(n - 2) + fib(n - 3) + fib(n - 4) + fib(n - 5) + fib(n - 6) + fib(n - 7) + fib(n - 8) + fib(n - 9) + fib(n - 10))\n  }\n  return p\n}\n\n/*\n  Given a non-negative integer n, return the first n + 1 numbers of the Fibonacci sequence.\n  Examples:\n  fib(5) = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(3) = [0, 1, 1, 2, 3, 5, 8]\n  */\n\nconst fib11 = (max) => {\n  let p = [0, 1]\n  for (let i = 1; i <= max; i++) {\n    p.push(fib(n - 1) + fib(n - 2) + fib(n - 3) + fib(n - 4) + fib(n - 5) + fib(n - 6) + fib(n - 7) + fib(n - 8) + fib(n - 9) + fib(n - 10) + fib(n - 11))\n  }\n  return p\n}\n\n/*\n  Given a non-negative integer n, return the first n + 1 numbers of the Fibonacci sequence.\n  Examples:\n  fib(5) = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(3) = [0, 1, 1, 2, 3, 5, 8]\n  */\n\nconst fib12 = (max) => {\n  let p = [0, 1]\n  for (let i = 1; i <= max; i++) {\n    p.push(fib(n - 1) + fib(n - 2) + fib(n - 3) + fib(n - 4) + fib(n - 5) + fib(n - 6) + fib(n - 7"}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integer n, return the product of the odd digits.\n  Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\n\nconst digits = (n) => {\n  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n", "canonical_solution": "    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "partial": "/*Given a positive integer n, return the product of the odd digits.\n  Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n      # print('@@this is the line to split##')\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "gc": "<|endoftext|>/*Given a positive integer n, return the product of the odd digits.\n  Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\n\nconst digits = (n) => {\n  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    } else {\n      p *= y; k = 1;\n    }\n    n = Math.floor(n / 10)\n  }\n  return p * k\n}\n\n/*Given a positive integer n, return the sum of all even digits.\n  Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\n\nconst digits_even = (n) => {\n  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 0) {\n      p *= y; k = 0;\n    } else {\n      p *= y; k = 1;\n    }\n    n = Math.floor(n / 10)\n  }\n  return p * k\n}\n\n/*Given a positive integer n, return the sum of all odd digits.\n  Return 0 if all digits are odd.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\n\nconst digits_odd = (n) => {\n  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    } else {\n      p *= y; k = 1;\n    }\n    n = Math.floor(n / 10)\n  }\n  return p * k\n}\n\n/*Given a positive integer n, return the sum of all digits of the form \"1{n}\"\n  Return 0 if n is 0.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\n\nconst digits_n = (n) => {\n  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 0) {\n      p *= y; k = 0;\n    } else {\n      p *= y; k = 1;\n    }\n    n = Math.floor(n / 10)\n  }\n  return p * k\n}\n\n/*Given a positive integer n, return the sum of all digits of the form \"1{n}\"\n  Return 0 if n is 0.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\n\nconst digits_n_even = (n) => {\n  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 0) {\n      p *= y; k = 0;\n    } else {\n      p *= y; k = 1;\n    }\n    n = Math.floor(n / 10)\n  }\n  return p * k\n}\n\n/*Given a positive integer n, return the sum of all digits of the form \"1{n}\"\n  Return 0 if n is 0.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\n\nconst digits_n_odd = (n) => {\n  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    } else {\n      p *= y; k = 1;\n    }\n    n = Math.floor(n / 10)\n  }\n  return p * k\n}\n\n/*Given a positive integer n, return the sum of all digits of the form \"1{n}\"\n  Return 0 if n is 0.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\n\nconst digits_n_n_even = (n) => {\n  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    } else {\n      p *= y; k = 1;\n    }\n    n = Math.floor(n / 10)\n  }\n  return p * k\n}\n\n/*Given a positive integer n, return the sum of all digits of the form \"1{n}\"\n  Return 0 if n is 0.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\n\nconst digits_n_n_odd = (n) => {\n  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    } else {\n      p *= y; k = 1;\n    }\n    n = Math.floor(n / 10)\n  }\n  return p * k\n}\n\n/*Given a positive integer n, return the sum of all digits of the form \"1{n}\"\n  Return 0 if n is 0.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\n\nconst digits_n_n_n_even = (n) => {\n  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    } else {\n      p *= y; k = 1;\n    }\n    n = Math.floor(n / 10)\n  }\n  return p * k\n}\n\n/*Given a positive integer n, return the sum of all digits of the form \"1{n}\"\n  Return 0 if n is 0.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\n\nconst digits_n_n_n_odd = (n) => {\n  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    } else {\n      p *= y; k = 1;\n    }\n    n = Math.floor(n / 10)\n  }\n  return p * k\n}\n\n/*Given a positive integer n, return the sum of all digits of the form \"1{n}\"\n  Return 0 if n is 0.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\n\nconst digits_n_n_n_n_even = (n) => {\n  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    } else {\n      p *= y; k = 1;\n    }\n    n = Math.floor(n / 10)\n  }\n  return p * k\n}\n\n/*Given a positive integer n, return the sum of all digits of the form \"1{n}\"\n  Return 0 if n is 0.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\n\nconst digits_n_n_n_n_odd = (n) => {\n  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    } else {\n      p *= y; k = 1;\n    }\n    n = Math.floor(n / 10)\n  }\n  return p * k\n}\n\n/*Given a positive integer n, return the sum of all digits of the form \"1{n}\"\n  Return 0 if n is 0.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\n\nconst digits_n_n_n_n_n_even = (n) => {\n  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    } else {\n      p"}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ false\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ true\n  */\n\nconst isNested = (string) => {\n  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n", "canonical_solution": "    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "partial": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ false\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ true\n  */\nconst isNested = (string) => {\n  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    # print('@@this is the line to split##')\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "gc": "<|endoftext|>/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ false\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ true\n  */\n\nconst isNested = (string) => {\n  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    if (closing_bracket_index1[i] > closing_bracket_index1[i + 1]) {\n      closing_bracket_index.push(closing_bracket_index1[i])\n    }\n  }\n  let opening_bracket_index = []\n  for (let i = 0; i < opening_bracket_index.length; i++) {\n    if (opening_bracket_index[i] > opening_bracket_index[i + 1]) {\n      opening_bracket_index.push(opening_bracket_index[i])\n    }\n  }\n  let opening_bracket_index = []\n  for (let i = 0; i < opening_bracket_index.length; i++) {\n    if (opening_bracket_index[i] > opening_bracket_index[i + 1]) {\n      opening_bracket_index.push(opening_bracket_index[i])\n    }\n  }\n  let opening_bracket_index = []\n  for (let i = 0; i < opening_bracket_index.length; i++) {\n    if (opening_bracket_index[i] > opening_bracket_index[i + 1]) {\n      opening_bracket_index.push(opening_bracket_index[i])\n    }\n  }\n  let opening_bracket_index = []\n  for (let i = 0; i < opening_bracket_index.length; i++) {\n    if (opening_bracket_index[i] > opening_bracket_index[i + 1]) {\n      opening_bracket_index.push(opening_bracket_index[i])\n    }\n  }\n  let opening_bracket_index = []\n  for (let i = 0; i < opening_bracket_index.length; i++) {\n    if (opening_bracket_index[i] > opening_bracket_index[i + 1]) {\n      opening_bracket_index.push(opening_bracket_index[i])\n    }\n  }\n  let opening_bracket_index = []\n  for (let i = 0; i < opening_bracket_index.length; i++) {\n    if (opening_bracket_index[i] > opening_bracket_index[i + 1]) {\n      opening_bracket_index.push(opening_bracket_index[i])\n    }\n  }\n  let opening_bracket_index = []\n  for (let i = 0; i < opening_bracket_index.length; i++) {\n    if (opening_bracket_index[i] > opening_bracket_index[i + 1]) {\n      opening_bracket_index.push(opening_bracket_index[i])\n    }\n  }\n  let opening_bracket_index = []\n  for (let i = 0; i < opening_bracket_index.length; i++) {\n    if (opening_bracket_index[i] > opening_bracket_index[i + 1]) {\n      opening_bracket_index.push(opening_bracket_index[i])\n    }\n  }\n  let opening_bracket_index = []\n  for (let i = 0; i < opening_bracket_index.length; i++) {\n    if (opening_bracket_index[i] > opening_bracket_index[i + 1]) {\n      opening_bracket_index.push(opening_bracket_index[i])\n    }\n  }\n  let opening_bracket_index = []\n  for (let i = 0; i < opening_bracket_index.length; i++) {\n    if (opening_bracket_index[i] > opening_bracket_index[i + 1]) {\n      opening_bracket_index.push(opening_bracket_index[i])\n    }\n  }\n  let opening_bracket_index = []\n  for (let i = 0; i < opening_bracket_index.length; i++) {\n    if (opening_bracket_index[i] > opening_bracket_index[i + 1]) {\n      opening_bracket_index.push(opening_bracket_index[i])\n    }\n  }\n  let opening_bracket_index = []\n  for (let i = 0; i < opening_bracket_index.length; i++) {\n    if (opening_bracket_index[i] > opening_bracket_index[i + 1]) {\n      opening_bracket_index.push(opening_bracket_index[i])\n    }\n  }\n  let opening_bracket_index = []\n  for (let i = 0; i < opening_bracket_index.length; i++) {\n    if (opening_bracket_index[i] > opening_bracket_index[i + 1]) {\n      opening_bracket_index.push(opening_bracket_index[i])\n    }\n  }\n  let opening_bracket_index = []\n  for (let i = 0; i < opening_bracket_index.length; i++) {\n    if (opening_bracket_index[i] > opening_bracket_index[i + 1]) {\n      opening_bracket_index.push(opening_bracket_index[i])\n    }\n  }\n  let opening_bracket_index = []\n  for (let i = 0; i < opening_bracket_index.length; i++) {\n    if (opening_bracket_index[i] > opening_bracket_index[i + 1]) {\n      opening_bracket_index.push(opening_bracket_index[i])\n    }\n  }\n  let opening_bracket_index = []\n  for (let i = 0; i < opening_bracket_index.length; i++) {\n    if (opening_bracket_index[i] > opening_bracket_index[i + 1]) {\n      opening_bracket_index.push(opening_bracket_index[i])\n    }\n  }\n  let opening_bracket_index = []\n  for (let i = 0; i < opening_bracket_index.length; i++) {\n    if (opening_bracket_index[i] > opening_bracket_index[i + 1]) {\n      opening_bracket_index.push(opening_bracket_index[i])\n    }\n  }\n  let opening_bracket_index = []\n  for (let i = 0; i < opening_bracket_index.length; i++) {\n    if (opening_bracket_index[i] > opening_bracket_index[i + 1]) {\n      opening_bracket_index.push(opening_bracket_index[i])\n    }\n  }\n  let opening_bracket_index = []\n  for (let i = 0; i < opening_bracket_index.length; i++) {\n    if (opening_bracket_index[i] > opening_bracket_index[i + 1]) {\n      opening_bracket_index.push(opening_bracket_index[i])\n    }\n  }\n  let opening_bracket_index = []\n  for (let i = 0; i < opening_bracket_index.length; i++) {\n    if (opening_bracket_index[i] > opening_bracket_index[i + 1]) {\n      opening_bracket_index.push(opening_bracket_index[i])\n    }\n  }\n  let opening_bracket_index = []\n  for (let i = 0; i < opening_bracket_index.length; i++) {\n    if (opening_bracket_index[i] > opening_bracket_index[i + 1]) {\n      opening_bracket_index.push(opening_bracket_index[i])\n    }\n  }\n  let opening_bracket_index = []\n  for (let i = 0; i < opening_bracket_index.length; i++) {\n    if (opening_bracket_index[i] > opening_bracket_index[i + 1]) {\n      opening_bracket_index.push(opening_bracket_index[i])\n    }\n  }\n  let opening_bracket_index = []\n  for (let i = 0; i < opening"}
{"task_id": "JavaScript/133", "prompt": "/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\n\nconst sumSquares = (lst) => {\n  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n", "canonical_solution": "      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "partial": "/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      # print('@@this is the line to split##')\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "gc": "<|endoftext|>/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\n\nconst sumSquares = (lst) => {\n  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1!= 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = y + y % 1 }\n    }\n    p = p + Math.pow(y, 2)\n  }\n  return Math.round(p * 100) / 100\n}\n\nmodule.exports = sumSquares\n\n},{}],4:[function(require,module,exports){\nconst sumSquares = require('./sumSquares')\n\nconst sumSquares = (lst) => {\n  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1!= 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = y + y % 1 }\n    }\n    p = p + Math.pow(y, 2)\n  }\n  return Math.round(p * 100) / 100\n}\n\nmodule.exports = sumSquares\n\n},{\"./sumSquares\":3}],5:[function(require,module,exports){\nconst sumSquares = require('./sumSquares')\n\nconst sumSquares = (lst) => {\n  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1!= 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = y + y % 1 }\n    }\n    p = p + Math.pow(y, 2)\n  }\n  return Math.round(p * 100) / 100\n}\n\nmodule.exports = sumSquares\n\n},{\"./sumSquares\":3}],6:[function(require,module,exports){\nconst sumSquares = require('./sumSquares')\n\nconst sumSquares = (lst) => {\n  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1!= 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = y + y % 1 }\n    }\n    p = p + Math.pow(y, 2)\n  }\n  return Math.round(p * 100) / 100\n}\n\nmodule.exports = sumSquares\n\n},{\"./sumSquares\":3}],7:[function(require,module,exports){\nconst sumSquares = require('./sumSquares')\n\nconst sumSquares = (lst) => {\n  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1!= 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = y + y % 1 }\n    }\n    p = p + Math.pow(y, 2)\n  }\n  return Math.round(p * 100) / 100\n}\n\nmodule.exports = sumSquares\n\n},{\"./sumSquares\":3}],8:[function(require,module,exports){\nconst sumSquares = require('./sumSquares')\n\nconst sumSquares = (lst) => {\n  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1!= 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = y + y % 1 }\n    }\n    p = p + Math.pow(y, 2)\n  }\n  return Math.round(p * 100) / 100\n}\n\nmodule.exports = sumSquares\n\n},{\"./sumSquares\":3}],9:[function(require,module,exports){\nconst sumSquares = require('./sumSquares')\n\nconst sumSquares = (lst) => {\n  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1!= 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = y + y % 1 }\n    }\n    p = p + Math.pow(y, 2)\n  }\n  return Math.round(p * 100) / 100\n}\n\nmodule.exports = sumSquares\n\n},{\"./sumSquares\":3}],10:[function(require,module,exports){\nconst sumSquares = require('./sumSquares')\n\nconst sumSquares = (lst) => {\n  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1!= 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = y + y % 1 }\n    }\n    p = p + Math.pow(y, 2)\n  }\n  return Math.round(p * 100) / 100\n}\n\nmodule.exports = sumSquares\n\n},{\"./sumSquares\":3}],11:[function(require,module,exports){\nconst sumSquares = require('./sumSquares')\n\nconst sumSquares = (lst) => {\n  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1!= 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = y + y % 1 }\n    }\n    p = p + Math.pow(y, 2)\n  }\n  return Math.round(p * 100) / 100\n}\n\nmodule.exports = sumSquares\n\n},{\"./sumSquares\":3}],12:[function(require,module,exports){\nconst sumSquares = require('./sumSquares')\n\nconst sumSquares = (lst) => {\n  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1!= 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = y + y % 1 }\n    }\n    p = p + Math.pow(y, 2)\n  }\n  return Math.round(p * 100) / 100\n}\n\nmodule.exports = sumSquares\n\n},{\"./sumSquares\":3}],13:[function(require,module,exports){\nconst sumSquares = require('./sumSquares')\n\nconst sumSquares = (lst) => {\n  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1!= 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = y + y % 1 }\n    }\n    p = p + Math.pow(y, 2)\n  }\n  return Math.round(p * 100) / 100\n}\n\nmodule.exports = sumSquares\n\n},{\"./sumSquares\":3}],14:[function(require,module,exports){\nconst sumSquares = require('./sumSquares')\n\nconst sumSquares = (lst) => {\n  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1!= 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = y + y % 1 }\n    }\n    p = p + Math.pow(y, 2)\n  }\n  return Math.round(p * 100) / 100\n}\n\nmodule.exports = sumSquares\n\n},{\"./sumSquares\":3}],15:[function(require,module,exports){\nconst sumSquares = require('./sumSquares')\n\nconst sumSquares = (lst) => {\n  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1!= 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = y + y % 1 }\n    }\n    p = p + Math.pow(y, 2)\n  }\n  return Math.round(p * 100) / 100\n}\n\nmodule.exports = sumSquares\n\n},{\"./sumSquares\":3}],16:[function(require,module,exports){\nconst sumSquares = require('./sumSquares')\n\nconst sumSquares = (lst) => {\n  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1!= 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = y + y % 1 }\n    }\n    p = p + Math.pow(y, 2)\n  }\n  return Math.round"}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\n\nconst checkIfLastCharIsALetter = (txt) => {\n  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n", "canonical_solution": "    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "partial": "/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    # print('@@this is the line to split##')\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "gc": "<|endoftext|>/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\n\nconst checkIfLastCharIsALetter = (txt) => {\n  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n  }\n  return false\n}\n\n/* Create a function that returns true if the last character\n  of a given string is a digit and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsDigit(\"apple pie\") ➞ false\n  checkIfLastCharIsDigit(\"apple pi e\") ➞ true\n  checkIfLastCharIsDigit(\"apple pi e \") ➞ false\n  checkIfLastCharIsDigit(\"\") ➞ false\n  */\n\nconst checkIfLastCharIsDigit = (txt) => {\n  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 48 && y <= 57) || (y >= 65 && y <= 90)) { return true }\n  }\n  return false\n}\n\n/* Create a function that returns true if the last character\n  of a given string is a letter and is not a\n  part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsLetter(\"apple pie\") ➞ false\n  checkIfLastCharIsLetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsLetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsLetter(\"\") ➞ false\n  */\n\nconst checkIfLastCharIsLetter = (txt) => {\n  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n  }\n  return false\n}\n\n/* Create a function that returns true if the last character\n  of a given string is a space and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsSpace(\"apple pie\") ➞ false\n  checkIfLastCharIsSpace(\"apple pi e\") ➞ true\n  checkIfLastCharIsSpace(\"apple pi e \") ➞ false\n  checkIfLastCharIsSpace(\"\") ➞ false\n  */\n\nconst checkIfLastCharIsSpace = (txt) => {\n  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 32 && y <= 39) || (y >= 91 && y <= 96)) { return true }\n  }\n  return false\n}\n\n/* Create a function that returns true if the last character\n  of a given string is a punctuation character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsPunctuation(\"apple pie\") ➞ false\n  checkIfLastCharIsPunctuation(\"apple pi e\") ➞ true\n  checkIfLastCharIsPunctuation(\"apple pi e \") ➞ false\n  checkIfLastCharIsPunctuation(\"\") ➞ false\n  */\n\nconst checkIfLastCharIsPunctuation = (txt) => {\n  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 34 && y <= 39) || (y >= 91 && y <= 96)) { return true }\n  }\n  return false\n}\n\n/* Create a function that returns true if the last character\n  of a given string is a number and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsNumber(\"apple pie\") ➞ false\n  checkIfLastCharIsNumber(\"apple pi e\") ➞ true\n  checkIfLastCharIsNumber(\"apple pi e \") ➞ false\n  checkIfLastCharIsNumber(\"\") ➞ false\n  */\n\nconst checkIfLastCharIsNumber = (txt) => {\n  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 48 && y <= 57) || (y >= 65 && y <= 90)) { return true }\n  }\n  return false\n}\n\n/* Create a function that returns true if the last character\n  of a given string is a letter or a digit and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsLetterOrDigit(\"apple pie\") ➞ false\n  checkIfLastCharIsLetterOrDigit(\"apple pi e\") ➞ true\n  checkIfLastCharIsLetterOrDigit(\"apple pi e \") ➞ false\n  checkIfLastCharIsLetterOrDigit(\"\") ➞ false\n  */\n\nconst checkIfLastCharIsLetterOrDigit = (txt) => {\n  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n  }\n  return false\n}\n\n/* Create a function that returns true if the last character\n  of a given string is a letter or a digit and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsLetterOrDigit(\"apple pie\") ➞ false\n  checkIfLastCharIsLetterOrDigit(\"apple pi e\") ➞ true\n  checkIfLastCharIsLetterOrDigit(\"apple pi e \") ➞ false\n  checkIfLastCharIsLetterOrDigit(\"\") ➞ false\n  */\n\nconst checkIfLastCharIsLetterOrDigitAndSpace = (txt) => {\n  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n  }\n  return false\n}\n\n/* Create a function that returns true if the last character\n  of a given string "}
{"task_id": "JavaScript/135", "prompt": "/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\n\nconst canArrange = (arr) => {\n  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n", "canonical_solution": "  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "partial": "/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n    # print('@@this is the line to split##')\n  }\n  return -1\n}\n\n", "gc": "<|endoftext|>/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\n\nconst canArrange = (arr) => {\n  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n/*\n  Given an array of integers, return an array which contains all the\n  permutations of the array in lexicographic order.\n\n  Examples:\n  permutations([1,2,3]) = [\n    [1,2],\n    [2,1],\n    [1,3],\n    [3,2],\n    [2,3],\n    [1,4],\n    [4,1],\n    [4,2],\n    [3,4],\n    [3,5],\n    [5,4],\n    [5,1],\n    [5,2],\n    [4,5],\n    [1,5],\n    [5,4],\n    [4,5],\n    [2,5],\n    [5,1],\n    [5,2],\n    [1,5],\n    [5,4],\n    [4,5],\n    [3,5],\n    [2,5],\n    [5,1],\n    [5,2],\n    [4,5],\n    [3,5],\n    [2,5],\n    [1,5],\n    [5,4],\n    [4,5],\n    [3,5],\n    [2,5],\n    [1,5],\n    [5,4],\n    [4,5],\n    [3,5],\n    [2,5],\n    [1,5],\n    [5,4],\n    [4,5],\n    [3,5],\n    [2,5],\n    [1,5],\n    [5,4],\n    [4,5],\n    [3,5],\n    [2,5],\n    [1,5],\n    [5,4],\n    [4,5],\n    [3,5],\n    [2,5],\n    [1,5],\n    [5,4],\n    [4,5],\n    [3,5],\n    [2,5],\n    [1,5],\n    [5,4],\n    [4,5],\n    [3,5],\n    [2,5],\n    [1,5],\n    [5,4],\n    [4,5],\n    [3,5],\n    [2,5],\n    [1,5],\n    [5,4],\n    [4,5],\n    [3,5],\n    [2,5],\n    [1,5],\n    [5,4],\n    [4,5],\n    [3,5],\n    [2,5],\n    [1,5],\n    [5,4],\n    [4,5],\n    [3,5],\n    [2,5],\n    [1,5],\n    [5,4],\n    [4,5],\n    [3,5],\n    [2,5],\n    [1,5],\n    [5,4],\n    [4,5],\n    [3,5],\n    [2,5],\n    [1,5],\n    [5,4],\n    [4,5],\n    [3,5],\n    [2,5],\n    [1,5],\n    [5,4],\n    [4,5],\n    [3,5],\n    [2,5],\n    [1,5],\n    [5,4],\n    [4,5],\n    [3,5],\n    [2,5],\n    [1,5],\n    [5,4],\n    [4,5],\n    [3,5],\n    [2,5],\n    [1,5],\n    [5,4],\n    [4,5],\n    [3,5],\n    [2,5],\n    [1,5],\n    [5,4],\n    [4,5],\n    [3,5],\n    [2,5],\n    [1,5],\n    [5,4],\n    [4,5],\n    [3,5],\n    [2,5],\n    [1,5],\n    [5,4],\n    [4,5],\n    [3,5],\n    [2,5],\n    [1,5],\n    [5,4],\n    [4,5],\n    [3,5],\n    [2,5],\n    [1,5],\n    [5,4],\n    [4,5],\n    [3,5],\n    [2,5],\n    [1,5],\n    [5,4],\n    [4,5],\n    [3,5],\n    [2,5],\n    [1,5],\n    [5,4],\n    [4,5],\n    [3,5],\n    [2,5],\n    [1,5],\n    [5,4],\n    [4,5],\n    [3,5],\n    [2,5],\n    [1,5],\n    [5,4],\n    [4,5],\n    [3,5],\n    [2,5],\n    [1,5],\n    [5,4],\n    [4,5],\n    [3,5],\n    [2,5],\n    [1,5],\n    [5,4],\n    [4,5],\n    [3,5],\n    [2,5],\n    [1,5],\n    [5,4],\n    [4,5],\n    [3,5],\n    [2,5],\n    [1,5],\n    [5,4],\n    [4,5],\n    [3,5],\n    [2,5],\n    [1,5],\n    [5,4],\n    [4,5],\n    [3,5],\n    [2,5],\n    [1,5],\n    [5,4],\n    [4,5],\n    [3,5],\n    [2,5],\n    [1,5],\n    [5,4],\n    [4,5],\n    [3,5],\n    [2,5],\n    [1,5],\n    [5,4],\n    [4,5],\n    [3,5],\n    [2,5],\n    [1,5],\n    [5,4],\n    [4,5],\n    [3,5],\n    [2,5],\n    [1,5],\n    [5,4],\n    [4,5],\n    [3,5],\n    [2,5],\n    [1,5],\n    [5,4],\n    [4,5],\n    [3,5],\n    [2,5],\n    [1,5],\n    [5,4],\n    [4,5],\n    [3,5],\n    [2,5],\n    [1,5],\n    [5,4],\n    [4,5],\n    [3,5],\n    [2,5],\n    [1,5],\n    [5,4],\n    [4,5],\n    [3,5],\n    [2,5],\n    [1,5],\n    [5,4],\n    [4,5],\n    [3,5],\n    [2,5],\n    [1,5],\n    [5,4],\n    [4,5],\n    [3,5],\n    [2,5],\n    [1,5],\n    [5,4],\n    [4,5],\n    [3,5],\n    [2,5],\n    [1,5],\n    [5,4],\n    [4,5],\n    [3,5],\n    [2,5],\n    [1,5],\n    [5,4],\n    [4,5],\n    [3,5],\n    [2,5],\n    [1,5],\n    [5,4],\n    [4,5],\n    [3,5],\n    [2,5],\n    [1,5],\n    [5,4],\n    [4,5],\n    [3,5],\n    [2,5],\n    [1,5],\n    [5,4],\n    [4,5],\n    [3,5],\n    [2,5],\n    [1,5],\n    [5,4],\n    [4,5],\n    [3,5],\n    [2,5],\n    [1,5],\n    [5,4],\n    [4,5],\n    [3,5],\n    [2,5],\n    [1,5],\n    [5,4],\n    [4,5],\n    [3,5],\n    [2,5],\n    [1,5],\n    [5,4],\n    [4,5],\n    [3,5],\n    [2,5],\n    [1,5],\n    [5,4],\n    [4,5],\n    [3,5],\n    [2,5],\n    [1,5],\n    [5,4],\n    [4,5],\n    [3,5],\n    [2,5],\n    [1,5],\n    [5,4],\n    [4,5],\n    [3,5],\n    [2,5],\n    [1,5],\n    [5,4],\n    [4,5],\n    [3,5],\n    [2,5],\n    [1,5],\n    [5,4],\n    [4,5],\n    [3,5],\n    [2,5],\n    [1,5],\n    [5,4],\n    [4,5],\n    [3,5],\n    [2,5],\n    [1,5],\n    [5,4],\n    [4,5],\n    [3,5],\n    [2,5],\n    [1,5],\n    [5,4],\n    [4,5],\n    [3,5],\n    [2,5],\n    [1,5],\n    [5,4],\n    [4,5],\n    [3,5],\n    [2,5],\n    [1,5],\n    [5,4],\n    [4,5],\n    [3,5],\n    [2,5],\n    [1,5],\n    [5,4],\n    [4,5],"}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\n\nconst largestSmallestIntegers = (lst) => {\n  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n", "canonical_solution": "  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "partial": "/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n    # print('@@this is the line to split##')\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "gc": "<|endoftext|>/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\n\nconst largestSmallestIntegers = (lst) => {\n  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  return [a, b]\n}\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  smallestLargestIntegers([2, 4, 1, 3, 5, 7]) == (2, 4)\n  smallestLargestIntegers([]) == (null, null)\n  smallestLargestIntegers([0]) == (null, null)\n  */\n\nconst smallestLargestIntegers = (lst) => {\n  let a = -Infinity\n  let b = Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  return [a, b]\n}\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (4, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\n\nconst largestSmallestIntegers = (lst) => {\n  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  return [a, b]\n}\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  smallestLargestIntegers([2, 4, 1, 3, 5, 7]) == (2, 4)\n  smallestLargestIntegers([]) == (null, null)\n  smallestLargestIntegers([0]) == (null, null)\n  */\n\nconst smallestLargestIntegers = (lst) => {\n  let a = -Infinity\n  let b = Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  return [a, b]\n}\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of negative integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (4, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\n\nconst largestSmallestIntegers = (lst) => {\n  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  return [a, b]\n}\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  smallestLargestIntegers([2, 4, 1, 3, 5, 7]) == (4, 1)\n  smallestLargestIntegers([]) == (null, null)\n  smallestLargestIntegers([0]) == (null, null)\n  */\n\nconst smallestLargestIntegers = (lst) => {\n  let a = -Infinity\n  let b = Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  return [a, b]\n}\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of negative integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (4, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\n\nconst largestSmallestIntegers = (lst) => {\n  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  return [a, b]\n}\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  smallestLargestIntegers([2, 4, 1, 3, 5, 7]) == (4, 1)\n  smallestLargestIntegers([]) == (null, null)\n  smallestLargestIntegers([0]) == (null, null)\n  */\n\nconst smallestLargestIntegers = (lst) => {\n  let a = -Infinity\n  let b = Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  return [a, b]\n}\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (4, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\n\nconst largestSmallestIntegers = (lst) => {\n  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  return [a, b]\n}\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of negative integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  smallestLargestIntegers([2, 4, 1, 3, 5, 7]) == (4, 1)\n  smallestLargestIntegers([]) == (null, null)\n  smallestLargestIntegers([0]) == (null, null)\n  */"}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be . or ,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ null\n  */\n\nconst compareOne = (a, b) => {\n  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n", "canonical_solution": "  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "partial": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be . or ,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ null\n  */\nconst compareOne = (a, b) => {\n  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  # print('@@this is the line to split##')\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "gc": "<|endoftext|>/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ null\n  */\n\nconst compareOne = (a, b) => {\n  let aa = Number(a)\n  if (typeof a =='string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b =='string') { bb = Number(b.replace(',', '.')) }\n  if (aa < bb) { return -1 }\n  if (aa > bb) { return 1 }\n  return 0\n}\n\n/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the smaller variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ null\n  */\n\nconst compareOne = (a, b) => {\n  let aa = Number(a)\n  if (typeof a =='string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b =='string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return 1 }\n  if (aa < bb) { return -1 }\n  return 0\n}\n\n/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger or smaller variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ null\n  */\n\nconst compareOne = (a, b) => {\n  let aa = Number(a)\n  if (typeof a =='string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b =='string') { bb = Number(b.replace(',', '.')) }\n  if (aa < bb) { return 1 }\n  if (aa > bb) { return -1 }\n  return 0\n}\n\n/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger or smaller variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ null\n  */\n\nconst compareOne = (a, b) => {\n  let aa = Number(a)\n  if (typeof a =='string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b =='string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return 1 }\n  if (aa < bb) { return -1 }\n  return 0\n}\n\n/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger or smaller variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ null\n  */\n\nconst compareOne = (a, b) => {\n  let aa = Number(a)\n  if (typeof a =='string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b =='string') { bb = Number(b.replace(',', '.')) }\n  if (aa < bb) { return 1 }\n  if (aa > bb) { return -1 }\n  return 0\n}\n\n/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger or smaller variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ null\n  */\n\nconst compareOne = (a, b) => {\n  let aa = Number(a)\n  if (typeof a =='string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b =='string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return 1 }\n  if (aa < bb) { return -1 }\n  return 0\n}\n\n/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger or smaller variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ null\n  */\n\nconst compareOne = (a, b) => {\n  let aa = Number(a)\n  if (typeof a =='string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b =='string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return 1 }\n  if (aa < bb) { return -1 }\n  return 0\n}\n\n/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger or smaller variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ null\n  */\n\nconst compareOne = (a, b) => {\n  let aa = Number(a)\n  if (typeof a =='string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b =='string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return 1 }\n  if (aa < bb) { return -1 }\n  return 0\n}\n\n/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger or smaller variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", "}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\n\nconst isEqualToSumEven = (n) => {\n  return (n >= 8 && n % 2 == 0)\n", "canonical_solution": "}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "partial": "/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  return (n >= 8 && n % 2 == 0)\n  # print('@@this is the line to split##')\n}\n\n", "gc": "<|endoftext|>/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\n\nconst isEqualToSumEven = (n) => {\n  return (n >= 8 && n % 2 == 0)\n}\n\n/*\n  Given a positive integer n, return true if and only if the sum of its digits (starting from right) is a multiple of 4.\n  Example\n  sumOfDigits(4) == true\n  sumOfDigits(5) == false\n  sumOfDigits(7) == true\n  sumOfDigits(8) == false\n  */\n\nconst sumOfDigits = (n) => {\n  let sum = 0\n  for (let i = n; i > 0; i--) {\n    sum += i % 10\n  }\n  return sum % 4 == 0\n}\n\n/*\n  Given a positive integer n, return true if and only if the sum of its digits (starting from right) is a multiple of 4.\n  Example\n  sumOfDigits(4) == true\n  sumOfDigits(5) == false\n  sumOfDigits(7) == true\n  sumOfDigits(8) == false\n  */\n\nconst sumOfDigits2 = (n) => {\n  let sum = 0\n  for (let i = n; i > 0; i--) {\n    sum += n % 10\n  }\n  return sum % 4 == 0\n}\n\n/*\n  Given a positive integer n, return true if and only if the sum of its digits (starting from right) is a multiple of 4.\n  Example\n  sumOfDigits(4) == true\n  sumOfDigits(5) == false\n  sumOfDigits(7) == true\n  sumOfDigits(8) == false\n  */\n\nconst sumOfDigits3 = (n) => {\n  let sum = 0\n  for (let i = n; i > 0; i--) {\n    sum += n % 10\n  }\n  return sum % 4 == 0\n}\n\n/*\n  Given a positive integer n, return true if and only if the sum of its digits (starting from right) is a multiple of 4.\n  Example\n  sumOfDigits(4) == true\n  sumOfDigits(5) == false\n  sumOfDigits(7) == true\n  sumOfDigits(8) == false\n  */\n\nconst sumOfDigits4 = (n) => {\n  let sum = 0\n  for (let i = n; i > 0; i--) {\n    sum += n % 10\n  }\n  return sum % 4 == 0\n}\n\n/*\n  Given a positive integer n, return true if and only if the sum of its digits (starting from right) is a multiple of 4.\n  Example\n  sumOfDigits(4) == true\n  sumOfDigits(5) == false\n  sumOfDigits(7) == true\n  sumOfDigits(8) == false\n  */\n\nconst sumOfDigits5 = (n) => {\n  let sum = 0\n  for (let i = n; i > 0; i--) {\n    sum += n % 10\n  }\n  return sum % 4 == 0\n}\n\n/*\n  Given a positive integer n, return true if and only if the sum of its digits (starting from right) is a multiple of 4.\n  Example\n  sumOfDigits(4) == true\n  sumOfDigits(5) == false\n  sumOfDigits(7) == true\n  sumOfDigits(8) == false\n  */\n\nconst sumOfDigits6 = (n) => {\n  let sum = 0\n  for (let i = n; i > 0; i--) {\n    sum += n % 10\n  }\n  return sum % 4 == 0\n}\n\n/*\n  Given a positive integer n, return true if and only if the sum of its digits (starting from right) is a multiple of 4.\n  Example\n  sumOfDigits(4) == true\n  sumOfDigits(5) == false\n  sumOfDigits(7) == true\n  sumOfDigits(8) == false\n  */\n\nconst sumOfDigits7 = (n) => {\n  let sum = 0\n  for (let i = n; i > 0; i--) {\n    sum += n % 10\n  }\n  return sum % 4 == 0\n}\n\n/*\n  Given a positive integer n, return true if and only if the sum of its digits (starting from right) is a multiple of 4.\n  Example\n  sumOfDigits(4) == true\n  sumOfDigits(5) == false\n  sumOfDigits(7) == true\n  sumOfDigits(8) == false\n  */\n\nconst sumOfDigits8 = (n) => {\n  let sum = 0\n  for (let i = n; i > 0; i--) {\n    sum += n % 10\n  }\n  return sum % 4 == 0\n}\n\n/*\n  Given a positive integer n, return true if and only if the sum of its digits (starting from right) is a multiple of 4.\n  Example\n  sumOfDigits(4) == true\n  sumOfDigits(5) == false\n  sumOfDigits(7) == true\n  sumOfDigits(8) == false\n  */\n\nconst sumOfDigits9 = (n) => {\n  let sum = 0\n  for (let i = n; i > 0; i--) {\n    sum += n % 10\n  }\n  return sum % 4 == 0\n}\n\n/*\n  Given a positive integer n, return true if and only if the sum of its digits (starting from right) is a multiple of 4.\n  Example\n  sumOfDigits(4) == true\n  sumOfDigits(5) == false\n  sumOfDigits(7) == true\n  sumOfDigits(8) == false\n  */\n\nconst sumOfDigits10 = (n) => {\n  let sum = 0\n  for (let i = n; i > 0; i--) {\n    sum += n % 10\n  }\n  return sum % 4 == 0\n}\n\n/*\n  Given a positive integer n, return true if and only if the sum of its digits (starting from right) is a multiple of 4.\n  Example\n  sumOfDigits(4) == true\n  sumOfDigits(5) == false\n  sumOfDigits(7) == true\n  sumOfDigits(8) == false\n  */\n\nconst sumOfDigits11 = (n) => {\n  let sum = 0\n  for (let i = n; i > 0; i--) {\n    sum += n % 10\n  }\n  return sum % 4 == 0\n}\n\n/*\n  Given a positive integer n, return true if and only if the sum of its digits (starting from right) is a multiple of 4.\n  Example\n  sumOfDigits(4) == true\n  sumOfDigits(5) == false\n  sumOfDigits(7) == true\n  sumOfDigits(8) == false\n  */\n\nconst sumOfDigits12 = (n) => {\n  let sum = 0\n  for (let i = n; i > 0; i--) {\n    sum += n % 10\n  }\n  return sum % 4 == 0\n}\n\n/*\n  Given a positive integer n, return true if and only if the sum of its digits (starting from right) is a multiple of 4.\n  Example\n  sumOfDigits(4) == true\n  sumOfDigits(5) == false\n  sumOfDigits(7) == true\n  sumOfDigits(8) == false\n  */\n\nconst sumOfDigits13 = (n) => {\n  let sum = 0\n  for (let i = n; i > 0; i--) {\n    sum += n % 10\n  }\n  return sum % 4 == 0\n}\n\n/*\n  Given a positive integer n, return true if and only if the sum of its digits (starting from right) is a multiple of 4.\n  Example\n  sumOfDigits(4) == true\n  sumOfDigits(5) == false\n  sumOfDigits(7) == true\n  sumOfDigits(8) == false\n  */\n\nconst sumOfDigits14 = (n) => {\n  let sum = 0\n  for (let i = n; i > 0; i--) {\n    sum += n % 10\n  }\n  return sum % 4"}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n  where n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\n\nconst specialFactorial = (n) => {\n  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n", "canonical_solution": "      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "partial": "/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n  where n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      # print('@@this is the line to split##')\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "gc": "<|endoftext|>/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n  where n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\n\nconst specialFactorial = (n) => {\n  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      p *= y;\n    }\n    t++;\n    n--;\n  }\n  return t;\n};\n\n/*\n  Returns the factorial of n using Euler's totient function.\n\n  Euler's totient function is defined as:\n  totient(n) = (n-1)! * n!\n  where n > 0\n\n  For example:\n  >>> totient(4)\n  3628800\n\n  The function will receive an integer as input and should return the totient\n  of this integer.\n  */\n\nconst totient = (n) => {\n  let t = 1;\n  while (n > 1) {\n    t++;\n    n--;\n  }\n  return t;\n};\n\n/*\n  Returns the factorial of n using Euler's totient function.\n\n  Euler's totient function is defined as:\n  totient(n) = (n-1)! * n!\n  where n > 0\n\n  For example:\n  >>> totient(4)\n  3628800\n\n  The function will receive an integer as input and should return the totient\n  of this integer.\n  */\n\nconst factorial = (n) => {\n  let t = 1;\n  while (n > 1) {\n    t++;\n    n--;\n  }\n  return t;\n};\n\n/*\n  Returns the factorial of n using Euler's totient function.\n\n  Euler's totient function is defined as:\n  totient(n) = (n-1)! * n!\n  where n > 0\n\n  For example:\n  >>> totient(4)\n  3628800\n\n  The function will receive an integer as input and should return the totient\n  of this integer.\n  */\n\nconst factorial2 = (n) => {\n  let t = 1;\n  while (n > 1) {\n    t++;\n    n--;\n  }\n  return t;\n};\n\n/*\n  Returns the factorial of n using Euler's totient function.\n\n  Euler's totient function is defined as:\n  totient(n) = (n-1)! * n!\n  where n > 0\n\n  For example:\n  >>> totient(4)\n  3628800\n\n  The function will receive an integer as input and should return the totient\n  of this integer.\n  */\n\nconst factorial3 = (n) => {\n  let t = 1;\n  while (n > 1) {\n    t++;\n    n--;\n  }\n  return t;\n};\n\n/*\n  Returns the factorial of n using Euler's totient function.\n\n  Euler's totient function is defined as:\n  totient(n) = (n-1)! * n!\n  where n > 0\n\n  For example:\n  >>> totient(4)\n  3628800\n\n  The function will receive an integer as input and should return the totient\n  of this integer.\n  */\n\nconst factorial4 = (n) => {\n  let t = 1;\n  while (n > 1) {\n    t++;\n    n--;\n  }\n  return t;\n};\n\n/*\n  Returns the factorial of n using Euler's totient function.\n\n  Euler's totient function is defined as:\n  totient(n) = (n-1)! * n!\n  where n > 0\n\n  For example:\n  >>> totient(4)\n  3628800\n\n  The function will receive an integer as input and should return the totient\n  of this integer.\n  */\n\nconst factorial5 = (n) => {\n  let t = 1;\n  while (n > 1) {\n    t++;\n    n--;\n  }\n  return t;\n};\n\n/*\n  Returns the factorial of n using Euler's totient function.\n\n  Euler's totient function is defined as:\n  totient(n) = (n-1)! * n!\n  where n > 0\n\n  For example:\n  >>> totient(4)\n  3628800\n\n  The function will receive an integer as input and should return the totient\n  of this integer.\n  */\n\nconst factorial6 = (n) => {\n  let t = 1;\n  while (n > 1) {\n    t++;\n    n--;\n  }\n  return t;\n};\n\n/*\n  Returns the factorial of n using Euler's totient function.\n\n  Euler's totient function is defined as:\n  totient(n) = (n-1)! * n!\n  where n > 0\n\n  For example:\n  >>> totient(4)\n  3628800\n\n  The function will receive an integer as input and should return the totient\n  of this integer.\n  */\n\nconst factorial7 = (n) => {\n  let t = 1;\n  while (n > 1) {\n    t++;\n    n--;\n  }\n  return t;\n};\n\n/*\n  Returns the factorial of n using Euler's totient function.\n\n  Euler's totient function is defined as:\n  totient(n) = (n-1)! * n!\n  where n > 0\n\n  For example:\n  >>> totient(4)\n  3628800\n\n  The function will receive an integer as input and should return the totient\n  of this integer.\n  */\n\nconst factorial8 = (n) => {\n  let t = 1;\n  while (n > 1) {\n    t++;\n    n--;\n  }\n  return t;\n};\n\n/*\n  Returns the factorial of n using Euler's totient function.\n\n  Euler's totient function is defined as:\n  totient(n) = (n-1)! * n!\n  where n > 0\n\n  For example:\n  >>> totient(4)\n  3628800\n\n  The function will receive an integer as input and should return the totient\n  of this integer.\n  */\n\nconst factorial9 = (n) => {\n  let t = 1;\n  while (n > 1) {\n    t++;\n    n--;\n  }\n  return t;\n};\n\n/*\n  Returns the factorial of n using Euler's totient function.\n\n  Euler's totient function is defined as:\n  totient(n) = (n-1)! * n!\n  where n > 0\n\n  For example:\n  >>> totient(4)\n  3628800\n\n  The function will receive an integer as input and should return the totient\n  of this integer.\n  */\n\nconst factorial10 = (n) => {\n  let t = 1;\n  while (n > 1) {\n    t++;\n    n--;\n  }\n  return t;\n};\n\n/*\n  Returns the factorial of n using Euler's totient function.\n\n  Euler's totient function is defined as:\n  totient(n) = (n-1)! * n!\n  where n > 0\n\n  For example:\n  >>> totient(4)\n  3628800\n\n  The function will receive an integer as input and should return the totient\n  of this integer.\n  */\n\nconst factorial11 = (n) => {\n  let t = 1;\n  while (n > 1) {\n    t++;\n    n--;\n  }\n  return t;\n};\n\n/*\n  Returns the factorial of n using Euler's totient function.\n\n  Euler's totient function is defined as:\n  totient(n) = (n-1)! * n!\n  where n > 0\n\n  For example:\n  >>> totient(4)\n  3628800\n\n  The function will receive an integer as input and should return the totient\n  of this integer.\n  */\n\nconst factorial12 = (n) => {\n  let t = 1;\n  while (n > 1) {\n    t++;\n    n--;"}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\n\nconst fixSpaces = (text) => {\n  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n", "canonical_solution": "      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "partial": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      # print('@@this is the line to split##')\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "gc": "<|endoftext|>/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\n\nconst fixSpaces = (text) => {\n  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] =='') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 1\n    }\n  }\n  return t\n}\n\n/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixSpaces(text) == \"Example\"\n  fixSpaces(text) == \"Example 1\"\n  fixSpaces(text) == \" Example 2\"\n  fixSpaces(text) == \" Example   3\"\n  */\n\nconst fixSpaces = (text) => {\n  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] =='') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 1\n    }\n  }\n  return t\n}\n\n/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixSpaces(text) == \"Example\"\n  fixSpaces(text) == \"Example 1\"\n  fixSpaces(text) == \" Example 2\"\n  fixSpaces(text) == \" Example   3\"\n  */\n\nconst fixSpaces = (text) => {\n  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] =='') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 1\n    }\n  }\n  return t\n}\n\n/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixSpaces(text) == \"Example\"\n  fixSpaces(text) == \"Example 1\"\n  fixSpaces(text) == \" Example 2\"\n  fixSpaces(text) == \" Example   3\"\n  */\n\nconst fixSpaces = (text) => {\n  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] =='') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 1\n    }\n  }\n  return t\n}\n\n/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixSpaces(text) == \"Example\"\n  fixSpaces(text) == \"Example 1\"\n  fixSpaces(text) == \" Example 2\"\n  fixSpaces(text) == \" Example   3\"\n  */\n\nconst fixSpaces = (text) => {\n  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] =='') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 1\n    }\n  }\n  return t\n}\n\n/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixSpaces(text) == \"Example\"\n  fixSpaces(text) == \"Example 1\"\n  fixSpaces(text) == \" Example 2\"\n  fixSpaces(text) == \" Example   3\"\n  */\n\nconst fixSpaces = (text) => {\n  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] =='') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 1\n    }\n  }\n  return t\n}\n\n/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixSpaces(text) == \"Example\"\n  fixSpaces(text) == \"Example 1\"\n  fixSpaces(text) == \" Example 2\"\n  fixSpaces(text) == \" Example   3\"\n  */\n\nconst fixSpaces = (text) => {\n  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] =='') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 1\n    }\n  }\n  return t\n}\n\n/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixSpaces(text) == \"Example\"\n  fixSpaces(text) == \"Example 1\"\n  fixSpaces(text) == \" Example 2\"\n  fixSpaces(text) == \" Example   3\"\n  */\n\nconst fixSpaces = (text) => {\n  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] =='') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 1\n    }\n  }\n  return t\n}\n\n/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixSpaces(text) == \"Example\"\n  fixSpaces(text) == \"Example 1\"\n  fixSpaces(text) == \" Example 2\"\n  fixSpaces(text) == \" Example   3\"\n  */\n\nconst fixSpaces = (text) => {\n  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] =='') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 1\n    }\n  }\n  return t\n}\n\n/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixSpaces(text) == \"Example\"\n  fixSpaces(text) == \"Example 1\"\n  fixSpaces(text) == \" Example 2\"\n  fixSpaces(text) == \" Example"}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\n\nconst fileNameCheck = (file_name) => {\n  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n", "canonical_solution": "  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "partial": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  # print('@@this is the line to split##')\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "gc": "<|endoftext|>/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\n\nconst fileNameCheck = (file_name) => {\n  let t = file_name.split(/\\./)\n  if (t.length!= 2) { return 'No' }\n  if (t[1]!= 'txt' && t[1]!= 'dll' && t[1]!= 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  if (t[1] == 'txt' && t[0].length!= 1) { return 'No' }\n  return 'Yes'\n}\n\n/*\n  Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\n\nconst fileNameCheck = (file_name) => {\n  let t = file_name.split(/\\./)\n  if (t.length!= 2) { return 'No' }\n  if (t[1]!= 'txt' && t[1]!= 'dll' && t[1]!= 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  if (t[1] == 'txt' && t[0].length!= 1) { return 'No' }\n  return 'Yes'\n}\n\n/*\n  Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\n\nconst fileNameCheck = (file_name) => {\n  let t = file_name.split(/\\./)\n  if (t.length!= 2) { return 'No' }\n  if (t[1]!= 'txt' && t[1]!= 'dll' && t[1]!= 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  if (t[1] == 'txt' && t[0].length!= 1) { return 'No' }\n  return 'Yes'\n}\n\n/*\n  Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\n\nconst fileNameCheck = (file_name) => {\n  let t = file_name.split(/\\./)\n  if (t.length!= 2) { return 'No' }\n  if (t[1]!= 'txt' && t[1]!= 'dll' && t[1]!= 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  if (t[1] == 'txt' && t[0].length!= 1) { return 'No' }\n  return 'Yes'\n}\n\n/*\n  Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\n\nconst fileNameCheck = (file_name) => {\n  let t = file_name.split(/\\./)\n  if (t.length!= 2) { return 'No' }\n  if (t[1]!= 'txt' && t[1]!= 'dll' && t[1]!= 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  if (t[1] == 'txt' && t[0].length!= 1) { return 'No' }\n  return 'Yes'\n}\n\n/*\n  Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these"}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\n\nconst sumSquares = (lst) => {\n  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n", "canonical_solution": "    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "partial": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    # print('@@this is the line to split##')\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "gc": "<|endoftext|>/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\n\nconst sumSquares = (lst) => {\n  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n  }\n  return y\n}\n\n/*\n  Given a list of integers, return a new list containing only the even numbers in the original list. \n  \n  Examples:\n  Given lst = [1,2,3,4,5,6,7,8,9,10], the output should be [2,4,6,8,10].\n  Given lst = [], the output should be [].\n  Given lst = [-1,-5,2,-1,-5]  the output should be [-5,2,-1,-5].\n  */\n\nconst evenNumbers = (lst) => {\n  let even = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 == 0) { even.push(lst[i]) }\n  }\n  return even\n}\n\n/*\n  Given a list of integers, return a new list containing only the odd numbers in the original list. \n  \n  Examples:\n  Given lst = [1,2,3,4,5,6,7,8,9,10], the output should be [4,6,8,10].\n  Given lst = [], the output should be [].\n  Given lst = [-1,-5,2,-1,-5]  the output should be [-5,2,-1,-5].\n  */\n\nconst oddNumbers = (lst) => {\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!= 0) { odd.push(lst[i]) }\n  }\n  return odd\n}\n\n/*\n  Given a list of integers, return a new list containing only the even numbers in the original list and the odd numbers in the original list. \n  \n  Examples:\n  Given lst = [1,2,3,4,5,6,7,8,9,10], the output should be [2,4,6,8,10].\n  Given lst = [], the output should be [].\n  Given lst = [-1,-5,2,-1,-5]  the output should be [-5,2,-1,-5].\n  */\n\nconst evenOddNumbers = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 == 0) { even.push(lst[i]) }\n    if (i % 2!= 0) { odd.push(lst[i]) }\n  }\n  return [even, odd]\n}\n\n/*\n  Given a list of integers, return a new list containing only the even numbers in the original list and the odd numbers in the original list and the even numbers in the original list. \n  \n  Examples:\n  Given lst = [1,2,3,4,5,6,7,8,9,10], the output should be [2,4,6,8,10].\n  Given lst = [], the output should be [].\n  Given lst = [-1,-5,2,-1,-5]  the output should be [-5,2,-1,-5].\n  */\n\nconst evenOddEvenNumbers = (lst) => {\n  let even = []\n  let odd = []\n  let evenOddEven = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 == 0) { even.push(lst[i]) }\n    if (i % 2!= 0) { odd.push(lst[i]) }\n    if (i % 2 == 0) { evenOddEven.push(lst[i]) }\n  }\n  return [even, odd, evenOddEven]\n}\n\n/*\n  Given a list of integers, return a new list containing only the even numbers in the original list and the odd numbers in the original list and the even numbers in the original list and the odd numbers in the original list. \n  \n  Examples:\n  Given lst = [1,2,3,4,5,6,7,8,9,10], the output should be [2,4,6,8,10].\n  Given lst = [], the output should be [].\n  Given lst = [-1,-5,2,-1,-5]  the output should be [-5,2,-1,-5].\n  */\n\nconst evenOddOddEvenNumbers = (lst) => {\n  let even = []\n  let odd = []\n  let evenOddOdd = []\n  let evenOddEvenOdd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 == 0) { even.push(lst[i]) }\n    if (i % 2!= 0) { odd.push(lst[i]) }\n    if (i % 2 == 0) { evenOddOdd.push(lst[i]) }\n    if (i % 2!= 0) { evenOddEvenOdd.push(lst[i]) }\n  }\n  return [even, odd, evenOddOdd, evenOddEvenOdd]\n}\n\n/*\n  Given a list of integers, return a new list containing only the even numbers in the original list and the odd numbers in the original list and the even numbers in the original list and the odd numbers in the original list and the even numbers in the original list and the odd numbers in the original list. \n  \n  Examples:\n  Given lst = [1,2,3,4,5,6,7,8,9,10], the output should be [2,4,6,8,10].\n  Given lst = [], the output should be [].\n  Given lst = [-1,-5,2,-1,-5]  the output should be [-5,2,-1,-5].\n  */\n\nconst evenOddOddOddEvenNumbers = (lst) => {\n  let even = []\n  let odd = []\n  let evenOddOdd = []\n  let evenOddEvenOdd = []\n  let evenOddOddEvenOdd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 == 0) { even.push(lst[i]) }\n    if (i % 2!= 0) { odd.push(lst[i]) }\n    if (i % 2 == 0) { evenOddOdd.push(lst[i]) }\n    if (i % 2!= 0) { evenOddEvenOdd.push(lst[i]) }\n    if (i % 2 == 0) { evenOddOddEvenOdd.push(lst[i]) }\n  }\n  return [even, odd, evenOddOdd, evenOddEvenOdd, evenOddOddEvenOdd]\n}\n\n/*\n  Given a list of integers, return a new list containing only the even numbers in the original list and the odd numbers in the original list and the even numbers in the original list and the odd numbers in the original list and the even numbers in the original list and the odd numbers in the original list and the even numbers in the original list and the odd numbers in the original list and the even numbers in the original list and the odd numbers in the original list and the even numbers in the original list and the odd numbers in the original list and the even numbers in the original list and the odd numbers in the original list and the even numbers in the original list and the odd numbers in the original list and the even numbers in the original list and the odd numbers in the original list and the even numbers in the original list and the odd numbers in the original list and the even numbers in the original list and the odd numbers in the original list and the even numbers in the original list and the odd numbers in the original list and the even numbers in the original list and the odd numbers in the original list and the even numbers in the original list and the odd numbers in the original list and the even numbers in the original list and the odd numbers in the original list and the even numbers in the original list and the odd numbers in the original list and the even numbers in the original list and the odd numbers in the original list and the even numbers in the original list and the odd numbers in the original list and the even numbers in the original list and the odd numbers in the original list and the even numbers in the original list and the odd numbers in the original list and the even numbers in the original list and the odd numbers in the original list and the even numbers in the original list and the odd numbers in the original list and the even numbers in the original list and the odd numbers in the "}
{"task_id": "JavaScript/143", "prompt": "/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\n\nconst wordsInSentence = (sentence) => {\n  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n", "canonical_solution": "      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "partial": "/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      # print('@@this is the line to split##')\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "gc": "<|endoftext|>/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\n\nconst wordsInSentence = (sentence) => {\n  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (t[j].charAt(i) == t[j].charAt(i - 1)) {\n        u++\n      }\n    }\n    if (u > 1) {\n      p += t[j].charAt(0).toUpperCase() + t[j].slice(1)\n    }\n  }\n  return p\n}\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\n\nconst wordsInSentence = (sentence) => {\n  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (t[j].charAt(i) == t[j].charAt(i - 1)) {\n        u++\n      }\n    }\n    if (u > 1) {\n      p += t[j].charAt(0).toUpperCase() + t[j].slice(1)\n    }\n  }\n  return p\n}\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\n\nconst wordsInSentence = (sentence) => {\n  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (t[j].charAt(i) == t[j].charAt(i - 1)) {\n        u++\n      }\n    }\n    if (u > 1) {\n      p += t[j].charAt(0).toUpperCase() + t[j].slice(1)\n    }\n  }\n  return p\n}\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\n\nconst wordsInSentence = (sentence) => {\n  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (t[j].charAt(i) == t[j].charAt(i - 1)) {\n        u++\n      }\n    }\n    if (u > 1) {\n      p += t[j].charAt(0).toUpperCase() + t[j].slice(1)\n    }\n  }\n  return p\n}\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\n\nconst wordsInSentence = (sentence) => {\n  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (t[j].charAt(i) == t[j].charAt(i - 1)) {\n        u++\n      }\n    }\n    if (u > 1) {\n      p += t[j].charAt(0).toUpperCase() + t[j].slice(1)\n    }\n  }\n  return p\n}\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\n\nconst wordsInSentence = (sentence) => {\n  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (t[j].charAt(i) == t[j].charAt(i - 1)) {\n        u++\n      }\n    }\n    if (u > 1) {\n      p += t[j].charAt(0).toUpperCase() + t[j].slice(1)\n    }\n  }\n  return p\n}\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\n\nconst wordsInSentence = (sentence) => {\n  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (t[j].charAt(i) == t[j].charAt(i - 1)) {\n        u++\n"}
{"task_id": "JavaScript/144", "prompt": "/*Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\n\nconst simplify = (x, n) => {\n  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n", "canonical_solution": "  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "partial": "/*Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  # print('@@this is the line to split##')\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "gc": "<|endoftext|>/*Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\n\nconst simplify = (x, n) => {\n  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let n = Number(a[1]) * Number(b[1])\n  let d = Number(a[2]) * Number(b[2])\n  let r = Number(a[3]) * Number(b[3])\n  let t = Number(a[4]) * Number(b[4])\n  let u = Number(a[5]) * Number(b[5])\n  let v = Number(a[6]) * Number(b[6])\n  let w = Number(a[7]) * Number(b[7])\n  let x = Number(a[8]) * Number(b[8])\n  let y = Number(a[9]) * Number(b[9])\n  let z = Number(a[10]) * Number(b[10])\n  let w = Number(a[11]) * Number(b[11])\n  let x = Number(a[12]) * Number(b[12])\n  let y = Number(a[13]) * Number(b[13])\n  let z = Number(a[14]) * Number(b[14])\n  let w = Number(a[15]) * Number(b[15])\n  let x = Number(a[16]) * Number(b[16])\n  let y = Number(a[17]) * Number(b[17])\n  let z = Number(a[18]) * Number(b[18])\n  let w = Number(a[19]) * Number(b[19])\n  let x = Number(a[20]) * Number(b[20])\n  let y = Number(a[21]) * Number(b[21])\n  let z = Number(a[22]) * Number(b[22])\n  let w = Number(a[23]) * Number(b[23])\n  let x = Number(a[24]) * Number(b[24])\n  let y = Number(a[25]) * Number(b[25])\n  let z = Number(a[26]) * Number(b[26])\n  let w = Number(a[27]) * Number(b[27])\n  let x = Number(a[28]) * Number(b[28])\n  let y = Number(a[29]) * Number(b[29])\n  let z = Number(a[30]) * Number(b[30])\n  let w = Number(a[31]) * Number(b[31])\n  let x = Number(a[32]) * Number(b[32])\n  let y = Number(a[33]) * Number(b[33])\n  let z = Number(a[34]) * Number(b[34])\n  let w = Number(a[35]) * Number(b[35])\n  let x = Number(a[36]) * Number(b[36])\n  let y = Number(a[37]) * Number(b[37])\n  let z = Number(a[38]) * Number(b[38])\n  let w = Number(a[39]) * Number(b[39])\n  let x = Number(a[40]) * Number(b[40])\n  let y = Number(a[41]) * Number(b[41])\n  let z = Number(a[42]) * Number(b[42])\n  let w = Number(a[43]) * Number(b[43])\n  let x = Number(a[44]) * Number(b[44])\n  let y = Number(a[45]) * Number(b[45])\n  let z = Number(a[46]) * Number(b[46])\n  let w = Number(a[47]) * Number(b[47])\n  let x = Number(a[48]) * Number(b[48])\n  let y = Number(a[49]) * Number(b[49])\n  let z = Number(a[50]) * Number(b[50])\n  let w = Number(a[51]) * Number(b[51])\n  let x = Number(a[52]) * Number(b[52])\n  let y = Number(a[53]) * Number(b[53])\n  let z = Number(a[54]) * Number(b[54])\n  let w = Number(a[55]) * Number(b[55])\n  let x = Number(a[56]) * Number(b[56])\n  let y = Number(a[57]) * Number(b[57])\n  let z = Number(a[58]) * Number(b[58])\n  let w = Number(a[59]) * Number(b[59])\n  let x = Number(a[60]) * Number(b[60])\n  let y = Number(a[61]) * Number(b[61])\n  let z = Number(a[62]) * Number(b[62])\n  let w = Number(a[63]) * Number(b[63])\n  let x = Number(a[64]) * Number(b[64])\n  let y = Number(a[65]) * Number(b[65])\n  let z = Number(a[66]) * Number(b[66])\n  let w = Number(a[67]) * Number(b[67])\n  let x = Number(a[68]) * Number(b[68])\n  let y = Number(a[69]) * Number(b[69])\n  let z = Number(a[70]) * Number(b[70])\n  let w = Number(a[71]) * Number(b[71])\n  let x = Number(a[72]) * Number(b[72])\n  let y = Number(a[73]) * Number(b[73])\n  let z = Number(a[74]) * Number(b[74])\n  let w = Number(a[75]) * Number(b[75])\n  let x = Number(a[76]) * Number(b[76])\n  let y = Number(a[77]) * Number(b[77])\n  let z = Number(a[78]) * Number(b[78])\n  let w = Number(a[79]) * Number(b[79])\n  let x = Number(a[80]) * Number(b[80])\n  let y = Number(a[81]) * Number(b[81])\n  let z = Number(a[82]) * Number(b[82])\n  let w = Number(a[83]) * Number(b[83])\n  let x = Number(a[84]) * Number(b[84])\n  let y = Number(a[85]) * Number(b[85])\n  let z = Number(a[86]) * Number(b[86])\n  let w = Number(a[87]) * Number(b[87])\n  let x = Number(a[88]) * Number(b[88])\n  let y = Number(a[89]) * Number(b[89])\n  let z = Number(a[90]) * Number(b[90])\n  let w = Number(a[91]) * Number(b[91])\n  let x = Number(a[92]) * Number(b[92])\n  let y = Number(a[93]) * Number(b[93])\n  let z = Number(a[94]) * Number(b[94])\n  let w = Number(a[95]) * Number(b[95])\n  let x = Number(a[96]) * Number(b[96])\n  let y = Number(a[97]) * Number(b[97])\n  let z = Number(a[98]) * Number(b[98])\n  let w = Number(a[99]) * Number(b[99])\n  let x = Number(a[100]) * Number(b[100])\n  let y = Number(a[101]) * Number(b[101])\n  let z = Number(a[102]) * Number(b[102])\n  let w = Number(a[103]) * Number(b[103])\n  let x = Number(a[104]) * Number(b[104])\n  let y = Number(a[105]) * Number(b[105])\n  let z = Number(a[106]) * Number(b[106])\n  let w = Number(a[107]) * Number(b[107])\n  let x = Number(a[108]) * Number(b[108])\n  let y = Number(a[109]) * Number(b[109])\n  let z = Number(a[110]) * Number(b[110])\n  let w = Number(a[111]) * Number(b[111])\n"}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\n\nconst orderByPoints = (nums) => {\n  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n", "canonical_solution": "      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "partial": "/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      # print('@@this is the line to split##')\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "gc": "<|endoftext|>/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\n\nconst orderByPoints = (nums) => {\n  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      while (u >= 10) {\n        n += u % 10;\n        u = (u - u % 10) / 10;\n      }\n      if (m > n) {\n        let t = m;\n        m = n;\n        n = t;\n      }\n      if (m === n) {\n        if (m === 0) return p\n        if (m === 1) return [p, p[0]]\n        if (m === -1) return [p[0], p[p[0].length - 1]]\n        if (m === -2) return [p[p[0].length - 2], p[0]]\n        if (m === -3) return [p[0], p[1], p[0]]\n        if (m === -4) return [p[0], p[1], p[2], p[0]]\n        if (m === -5) return [p[0], p[1], p[2], p[3], p[0]]\n        if (m === -6) return [p[0], p[1], p[2], p[3], p[4], p[0]]\n        if (m === -7) return [p[0], p[1], p[2], p[3], p[4], p[5], p[0]]\n        if (m === -8) return [p[0], p[1], p[2], p[3], p[4], p[5], p[6], p[0]]\n        if (m === -9) return [p[0], p[1], p[2], p[3], p[4], p[5], p[6], p[7], p[0]]\n        if (m === -10) return [p[0], p[1], p[2], p[3], p[4], p[5], p[6], p[7], p[8], p[0]]\n        if (m === -11) return [p[0], p[1], p[2], p[3], p[4], p[5], p[6], p[7], p[8], p[9], p[0]]\n        if (m === -12) return [p[0], p[1], p[2], p[3], p[4], p[5], p[6], p[7], p[8], p[9], p[10], p[0]]\n        if (m === -13) return [p[0], p[1], p[2], p[3], p[4], p[5], p[6], p[7], p[8], p[9], p[10], p[11], p[0]]\n        if (m === -14) return [p[0], p[1], p[2], p[3], p[4], p[5], p[6], p[7], p[8], p[9], p[10], p[11], p[12], p[0]]\n        if (m === -15) return [p[0], p[1], p[2], p[3], p[4], p[5], p[6], p[7], p[8], p[9], p[10], p[11], p[12], p[13], p[0]]\n        if (m === -16) return [p[0], p[1], p[2], p[3], p[4], p[5], p[6], p[7], p[8], p[9], p[10], p[11], p[12], p[13], p[14], p[0]]\n        if (m === -17) return [p[0], p[1], p[2], p[3], p[4], p[5], p[6], p[7], p[8], p[9], p[10], p[11], p[12], p[13], p[14], p[15], p[0]]\n        if (m === -18) return [p[0], p[1], p[2], p[3], p[4], p[5], p[6], p[7], p[8], p[9], p[10], p[11], p[12], p[13], p[14], p[15], p[1]];\n        if (m === -19) return [p[0], p[1], p[2], p[3], p[4], p[5], p[6], p[7], p[8], p[9], p[10], p[11], p[12], p[13], p[14], p[15], p[2], p[0]];\n        if (m === -20) return [p[0], p[1], p[2], p[3], p[4], p[5], p[6], p[7], p[8], p[9], p[10], p[11], p[12], p[13], p[14], p[15], p[2], p[1], p[0]];\n        if (m === -21) return [p[0], p[1], p[2], p[3], p[4], p[5], p[6], p[7], p[8], p[9], p[10], p[11], p[12], p[13], p[14], p[15], p[2], p[1], p[2], p[0]];\n        if (m === -22) return [p[0], p[1], p[2], p[3], p[4], p[5], p[6], p[7], p[8], p[9], p[10], p[11], p[12], p[13], p[14], p[15], p[2], p[1], p[2], p[1], p[0]];\n        if (m === -23) return [p[0], p[1], p[2], p[3], p[4], p[5], p[6], p[7], p[8], p[9], p[10], p[11], p[12], p[13], p[14], p[15], p[2], p[1], p[2], p[1], p[0], p[0]];\n        if (m === -24) return [p[0], p[1], p[2], p[3], p[4], p[5], p[6], p[7], p[8], p[9], p[10], p[11], p[12], p[13], p[14], p[15], p[2], p[1], p[2], p[1], p[0], p[0], p[0]];\n        if (m === -25) return [p[0], p[1], p[2], p[3], p[4], p[5], p[6], p[7], p[8], p[9], p[10], p[11], p[12], p[13], p[14], p[15], p[2], p[1], p[2], p[1], p[0], p[0], p[0], p[0]];\n        if (m === -26) return [p[0], p[1], p[2], p[3], p[4], p[5], p[6], p[7], p[8], p[9], p[10], p[11], p[12], p[13], p[14], p[15], p[2], p[1], p[2], p[1], p[0], p[0], p[0], p[0], p[0]];\n        if (m === -27) return [p[0], p[1], p[2], p[3], p[4], p[5], p[6], p[7], p[8], p[9], p[10], p[11], p[12], p[13], p[14], p[15], p[2], p[1], p[2], p[1], p[0], p[0], p[0], p[0], p[0]];\n        if (m === -28) return [p[0], p[1], p[2], p[3], p[4], p[5], p[6], p[7], p[8], p[9], p[10], p[11], p[12], p[13], p[14], p[15], p[2], p[1], p[2], p[1], p[0], p[0], p[0], p[0], p[0], p[0]];\n        if (m === -29) return [p[0], p[1], p[2], p[3], p[4], p[5], p[6], p[7], p[8], p[9], "}
{"task_id": "JavaScript/146", "prompt": "/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\n\nconst specialFilter = (nums) => {\n  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n", "canonical_solution": "      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "partial": "/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      # print('@@this is the line to split##')\n      p++\n    }\n  }\n  return p\n}\n\n", "gc": "<|endoftext|>/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\n\nconst specialFilter = (nums) => {\n  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\n\nconst specialFilter = (nums) => {\n  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\n\nconst specialFilter = (nums) => {\n  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\n\nconst specialFilter = (nums) => {\n  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\n\nconst specialFilter = (nums) => {\n  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\n\nconst specialFilter = (nums) => {\n  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\n\nconst specialFilter = (nums) => {\n  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\n\nconst specialFilter = (nums) => {\n  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\n\nconst specialFilter = (nums) => {\n  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\n\nconst specialFilter = (nums) => {\n  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\n\nconst specialFilter = (nums) => {\n  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15"}
{"task_id": "JavaScript/147", "prompt": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\n\nconst getMaxTriples = (n) => {\n  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n", "canonical_solution": "      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "partial": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      # print('@@this is the line to split##')\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "gc": "<|endoftext|>/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\n\nconst getMaxTriples = (n) => {\n  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      if (y[i] % y[j] % y[j] === 0) {\n        u++\n      }\n    }\n  }\n  return u\n}\n\n/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 2\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\n\nconst getMaxTriples2 = (n) => {\n  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      if (y[i] % y[j] % y[j] === 0) {\n        u++\n      }\n    }\n  }\n  return u\n}\n\n/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 3\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\n\nconst getMaxTriples3 = (n) => {\n  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      if (y[i] % y[j] % y[j] === 0) {\n        u++\n      }\n    }\n  }\n  return u\n}\n\n/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 4\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\n\nconst getMaxTriples4 = (n) => {\n  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      if (y[i] % y[j] % y[j] === 0) {\n        u++\n      }\n    }\n  }\n  return u\n}\n\n/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 5\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\n\nconst getMaxTriples5 = (n) => {\n  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      if (y[i] % y[j] % y[j] === 0) {\n        u++\n      }\n    }\n  }\n  return u\n}\n\n/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 6\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\n\nconst getMaxTriples6 = (n) => {\n  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      if (y[i] % y[j] % y[j] === 0) {\n        u++\n      }\n    }\n  }\n  return u\n}\n\n/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 7\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\n\nconst getMaxTriples7 = (n) => {\n  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      if (y[i] % y[j] % y[j] === 0) {\n        u++\n      }\n    }\n  }\n  return u\n}\n\n/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 8\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\n\nconst getMaxTriples8 = (n) => {\n  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let "}
{"task_id": "JavaScript/148", "prompt": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\n\nconst bf = (planet1, planet2) => {\n  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n", "canonical_solution": "  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "partial": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  # print('@@this is the line to split##')\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "gc": "<|endoftext|>/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\n\nconst bf = (planet1, planet2) => {\n  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 && hi == -1) {\n    return []\n  }\n  if (lo == -1) {\n    u.push(y[lo])\n    lo = hi\n  }\n  if (hi == -1) {\n    u.push(y[hi])\n    hi = lo\n  }\n  let orb = []\n  for (let i = lo; i <= hi; i++) {\n    orb.push(y[i])\n  }\n  return orb\n}\n\n/* Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the distance to the Sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  d(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  d(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  d(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\n\nconst d = (planet1, planet2) => {\n  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 && hi == -1) {\n    return []\n  }\n  if (lo == -1) {\n    u.push(y[lo])\n    lo = hi\n  }\n  if (hi == -1) {\n    u.push(y[hi])\n    hi = lo\n  }\n  let orb = []\n  for (let i = lo; i <= hi; i++) {\n    orb.push(y[i])\n  }\n  return orb\n}\n\n/* Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the distance to the Sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  e(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  e(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  e(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\n\nconst e = (planet1, planet2) => {\n  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 && hi == -1) {\n    return []\n  }\n  if (lo == -1) {\n    u.push(y[lo])\n    lo = hi\n  }\n  if (hi == -1) {\n    u.push(y[hi])\n    hi = lo\n  }\n  let orb = []\n  for (let i = lo; i <= hi; i++) {\n    orb.push(y[i])\n  }\n  return orb\n}\n\n/* Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the distance to the Sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  f(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  f(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  f(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\n\nconst f = (planet1, planet2) => {\n  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 && hi == -1) {\n    return []\n  }\n  if (lo == -1) {\n    u.push(y[lo])\n    lo = hi\n  }\n  if (hi == -1) {\n    u.push(y[hi])\n    hi = lo\n  }\n  let orb = []\n  for (let i = lo; i <= hi; i++) {\n    orb.push(y[i])\n  }\n  return orb\n}\n\n/* Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the distance to the Sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  g(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  g(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  g(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\n\nconst g = (planet1, planet2) => {\n  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jup"}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\n\nconst sortedListSum = (lst) => {\n  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n", "canonical_solution": "            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "partial": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            # print('@@this is the line to split##')\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "gc": "<|endoftext|>/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\n\nconst sortedListSum = (lst) => {\n  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n        }\n      }\n      if (f) {\n        break;\n      }\n    }\n    if (f) {\n      p.splice(j, 1)\n    }\n  }\n  return p;\n}\n\nconst sortedListMerge = (lst1, lst2) => {\n  let p = []\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i].length % 2 == 0) {\n      p.push(lst1[i])\n    }\n  }\n  for (let j = 0; j < lst2.length; j++) {\n    if (lst2[j].length % 2 == 0) {\n      p.push(lst2[j])\n    }\n  }\n  for (let k = 0; k < p.length; k++) {\n    for (let l = 0; l < p[k].length; l++) {\n      if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n        p[k][l] = p[k + 1][l]\n      }\n    }\n  }\n  return p;\n}\n\nconst sortedListMergeSort = (lst) => {\n  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n        }\n      }\n      if (f) {\n        break;\n      }\n    }\n    if (f) {\n      p.splice(j, 1)\n    }\n  }\n  return p;\n}\n\nconst sortedListMergeSort2 = (lst) => {\n  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n        }\n      }\n      if (f) {\n        break;\n      }\n    }\n    if (f) {\n      p.splice(j, 1)\n    }\n  }\n  return p;\n}\n\nconst sortedListMergeSort3 = (lst) => {\n  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n        }\n      }\n      if (f) {\n        break;\n      }\n    }\n    if (f) {\n      p.splice(j, 1)\n    }\n  }\n  return p;\n}\n\nconst sortedListMergeSort4 = (lst) => {\n  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n        }\n      }\n      if (f) {\n        break;\n      }\n    }\n    if (f) {\n      p.splice(j, 1)\n    }\n  }\n  return p;\n}\n\nconst sortedListMergeSort5 = (lst) => {\n  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n        }\n      }\n      if (f) {\n        break;\n      }\n    }\n    if (f) {\n      p.splice(j, 1)\n    }\n  }\n  return p;\n}\n\nconst sortedListMergeSort6 = (lst) => {\n  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n        }\n      }\n      if (f) {\n        break;\n      }\n    }\n    if (f) {\n      p.splice(j, 1)\n    }\n  }\n  return p;\n}\n\nconst sortedListMergeSort7 = (lst) => {\n  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;"}
{"task_id": "JavaScript/150", "prompt": "/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\n\nconst xOrY = (n, x, y) => {\n  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n", "canonical_solution": "    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "partial": "/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    # print('@@this is the line to split##')\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "gc": "<|endoftext|>/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\n\nconst xOrY = (n, x, y) => {\n  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (n % i === 0) { return y }\n  }\n  return x\n}\n\n/*\n  A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\n\nconst xOrY = (n, x, y) => {\n  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (n % i === 0) { return x }\n  }\n  return y\n}\n\n/*\n  A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\n\nconst xOrY = (n, x, y) => {\n  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (n % i === 0) { return x }\n  }\n  return y\n}\n\n/*\n  A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\n\nconst xOrY = (n, x, y) => {\n  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (n % i === 0) { return x }\n  }\n  return y\n}\n\n/*\n  A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\n\nconst xOrY = (n, x, y) => {\n  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (n % i === 0) { return x }\n  }\n  return y\n}\n\n/*\n  A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\n\nconst xOrY = (n, x, y) => {\n  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (n % i === 0) { return x }\n  }\n  return y\n}\n\n/*\n  A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\n\nconst xOrY = (n, x, y) => {\n  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (n % i === 0) { return x }\n  }\n  return y\n}\n\n/*\n  A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\n\nconst xOrY = (n, x, y) => {\n  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (n % i === 0) { return x }\n  }\n  return y\n}\n\n/*\n  A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\n\nconst xOrY = (n, x, y) => {\n  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (n % i === 0) { return x }\n  }\n  return y\n}\n\n/*\n  A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\n\nconst xOrY = (n, x, y) => {\n  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (n % i === 0) { return x }\n  }\n  return y\n}\n\n/*\n  A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\n\nconst xOrY = (n, x, y) => {\n  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (n % i === 0) { return x }\n  }\n  return y\n}\n\n/*\n  A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\n\nconst xOrY = (n, x, y) => {\n  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (n % i === 0) { return x }\n  }\n  return y\n}\n\n/*\n  A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\n\nconst xOrY = (n, x, y) => {\n  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (n % i === 0) { return x }\n  }\n  return y\n}\n\n/*\n  A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\n\nconst xOrY = (n, x, y) => {\n  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (n % i === 0) { return x }\n  }\n  return y\n}\n\n/*\n  A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\n\nconst xOrY = (n, x, y) => {\n  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (n % i === 0) { return x }\n  }\n  return y\n}\n\n/*\n  A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\n\nconst xOrY = (n, x, y) => {\n  let len = n\n  if (len"}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\n\nconst doubleTheDifference = (lst) => {\n  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n", "canonical_solution": "    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "partial": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n      # print('@@this is the line to split##')\n    }\n  }\n  return p\n}\n\n", "gc": "<|endoftext|>/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\n\nconst doubleTheDifference = (lst) => {\n  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are even. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 0 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == -1\n  doubleTheDifference([9, -2]) == 9\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\n\nconst doubleTheDifference = (lst) => {\n  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 0 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are divisible by both 2 and 3. doubleTheDifference(\n  [1, 3, 2, 0]) == 1 + 0 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == -1\n  doubleTheDifference([9, -2]) == 9\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\n\nconst doubleTheDifference = (lst) => {\n  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0 && lst[i] % 3 === 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are divisible by both 2 and 3. doubleTheDifference(\n  [1, 3, 2, 0]) == 1 + 0 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == -1\n  doubleTheDifference([9, -2]) == 9\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\n\nconst doubleTheDifference = (lst) => {\n  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0 && lst[i] % 3 === 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are divisible by both 2 and 3. doubleTheDifference(\n  [1, 3, 2, 0]) == 1 + 0 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == -1\n  doubleTheDifference([9, -2]) == 9\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\n\nconst doubleTheDifference = (lst) => {\n  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0 && lst[i] % 3 === 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are divisible by both 2 and 3. doubleTheDifference(\n  [1, 3, 2, 0]) == 1 + 0 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == -1\n  doubleTheDifference([9, -2]) == 9\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\n\nconst doubleTheDifference = (lst) => {\n  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0 && lst[i] % 3 === 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are divisible by both 2 and 3. doubleTheDifference(\n  [1, 3, 2, 0]) == 1 + 0 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == -1\n  doubleTheDifference([9, -2]) == 9\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\n\nconst doubleTheDifference = (lst) => {\n  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0 && lst[i] % 3 === 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are divisible by both 2 and 3. doubleTheDifference(\n  [1, 3, 2, 0]) == 1 + 0 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == -1\n  doubleTheDifference([9, -2]) == 9\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\n\nconst doubleTheDifference = (lst) => {\n  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0 && lst[i] % 3 === 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are divisible by both 2 and 3. doubleTheDifference(\n  [1, 3, 2, 0]) == 1 + 0 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == -1\n  doubleTheDifference([9, -2]) == 9\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\n\nconst doubleTheDifference = (lst) => {\n  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0 && lst[i] % 3 === 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are divisible by both 2 and 3. doubleTheDifference(\n  [1, 3, 2, 0]) == 1 + 0 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == -1\n  doubleTheDifference([9, -2]) == 9\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\n\nconst doubleTheDifference = (lst) => {\n  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0 && lst[i] % 3 === 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are divisible by both 2 and 3. doubleTheDifference(\n  [1, 3, 2, 0]) == 1 + 0 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == -1\n  doubleTheDifference([9, -2]) == 9\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\n\nconst doubleTheDifference = (lst) => {\n  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0 && lst[i] % 3 === 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are divisible by both 2 and 3. doubleTheDifference(\n  [1, 3, 2, 0]) == 1 + 0 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == -1\n  doubleTheDifference([9, -2]) == 9\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\n\nconst doubleTheDifference = (lst) => {\n  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0 && lst[i] % 3 === 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are divisible by both 2 and 3. doubleTheDifference(\n"}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\n\nconst compare = (game, guess) => {\n  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n", "canonical_solution": " game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "partial": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n # print('@@this is the line to split##')\n game[i]=-game[i];  }\n  return game\n}\n\n", "gc": "<|endoftext|>/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\n\nconst compare = (game, guess) => {\n  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n     return [Math.abs(game[i]), Math.abs(game[i])]\n  }\n  return [Math.abs(game[i]), Math.abs(game[i])]\n}\n\n/*\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  "}
{"task_id": "JavaScript/153", "prompt": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\n\nconst strongestExtension = (class_name, extensions) => {\n  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n", "canonical_solution": "    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "partial": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n      # print('@@this is the line to split##')\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "gc": "<|endoftext|>/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\n\nconst strongestExtension = (class_name, extensions) => {\n  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n      if (k == 46) { y = -y }\n      if (k == 47) { y = -y }\n      if (k == 48) { y = -y }\n      if (k == 49) { y = -y }\n      if (k == 50) { y = -y }\n      if (k == 51) { y = -y }\n      if (k == 52) { y = -y }\n      if (k == 53) { y = -y }\n      if (k == 54) { y = -y }\n      if (k == 55) { y = -y }\n      if (k == 56) { y = -y }\n      if (k == 57) { y = -y }\n      if (k == 58) { y = -y }\n      if (k == 59) { y = -y }\n      if (k == 60) { y = -y }\n      if (k == 61) { y = -y }\n      if (k == 62) { y = -y }\n      if (k == 63) { y = -y }\n      if (k == 64) { y = -y }\n      if (k == 65) { y = -y }\n      if (k == 66) { y = -y }\n      if (k == 67) { y = -y }\n      if (k == 68) { y = -y }\n      if (k == 69) { y = -y }\n      if (k == 70) { y = -y }\n      if (k == 71) { y = -y }\n      if (k == 72) { y = -y }\n      if (k == 73) { y = -y }\n      if (k == 74) { y = -y }\n      if (k == 75) { y = -y }\n      if (k == 76) { y = -y }\n      if (k == 77) { y = -y }\n      if (k == 78) { y = -y }\n      if (k == 79) { y = -y }\n      if (k == 80) { y = -y }\n      if (k == 81) { y = -y }\n      if (k == 82) { y = -y }\n      if (k == 83) { y = -y }\n      if (k == 84) { y = -y }\n      if (k == 85) { y = -y }\n      if (k == 86) { y = -y }\n      if (k == 87) { y = -y }\n      if (k == 88) { y = -y }\n      if (k == 89) { y = -y }\n      if (k == 90) { y = -y }\n      if (k == 91) { y = -y }\n      if (k == 92) { y = -y }\n      if (k == 93) { y = -y }\n      if (k == 94) { y = -y }\n      if (k == 95) { y = -y }\n      if (k == 96) { y = -y }\n      if (k == 97) { y = -y }\n      if (k == 98) { y = -y }\n      if (k == 99) { y = -y }\n      if (k == 100) { y = -y }\n      if (k == 101) { y = -y }\n      if (k == 102) { y = -y }\n      if (k == 103) { y = -y }\n      if (k == 104) { y = -y }\n      if (k == 105) { y = -y }\n      if (k == 106) { y = -y }\n      if (k == 107) { y = -y }\n      if (k == 108) { y = -y }\n      if (k == 109) { y = -y }\n      if (k == 111) { y = -y }\n      if (k == 112) { y = -y }\n      if (k == 113) { y = -y }\n      if (k == 114) { y = -y }\n      if (k == 115) { y = -y }\n      if (k == 116) { y = -y }\n      if (k == 117) { y = -y }\n      if (k == 118) { y = -y }\n      if (k == 119) { y = -y }\n      if (k == 120) { y = -y }\n      if (k == 121) { y = -y }\n      if (k == 122) { y = -y }\n      if (k == 123) { y = -y }\n      if (k == 124) { y = -y }\n      if (k == 125) { y = -y }\n      if (k == 126) { y = -y }\n      if (k == 127) { y = -y }\n      if (k == 128) { y = -y }\n      if (k == 129) { y = -y }\n      if (k == 130) { y = -y }\n      if (k == 131) { y = -y }\n      if (k == 132) { y = -y }\n      if (k == 133) { y = -y }\n      if (k == 134) { y = -y }\n      if (k == 135) { y = -y }\n      if (k == 136) { y = -y }\n      if (k == 137) { y = -y }\n      if (k == 138) { y = -y }\n      if (k == 139) { y = -y }\n      if (k == 140) { y = -y }\n      if (k == 141) { y = -y }\n      if (k == 142) { y = -y }\n      if (k == 143) { y = -y }\n      if (k == 144) { y = -y }\n      if (k == 145) { y = -y }\n      if (k == 146) { y = -y }\n      if (k == 147) { y = -y }\n      if (k == 148) { y = -y }\n      if (k == 149) { y = -y }\n      if (k == 150) { y = -y }\n      if (k == 151) { y = -y }\n      if (k == 152) { y = -y }\n      if (k == 153) { y = -y }\n      if (k == 154) { y = -y }\n      if (k == 155) { y = -y }\n      if (k == 156) { y = -y }\n      if (k == 157) { y = -y }\n      if (k == 158) { y = -y }\n      if (k == 159) { y = -y }\n      if (k == 160) { y = -y }\n      if (k == 161) { y = -y }\n      if (k == 162) { y = -y }\n      if (k == 163) { y = -y }\n      if (k == 164) { y = -y }\n      if (k == 165) { y = -y }\n      if (k == 166) { y = -y }\n      if (k == 167) { y = -y }\n      if (k == 168) { y = -y }\n      if (k == 169) { y = -y }"}
{"task_id": "JavaScript/154", "prompt": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycpatternCheck(\"abcd\",\"abd\") => false\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => true\n  */\n\nconst cycpatternCheck = (a, b) => {\n  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n", "canonical_solution": "      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "partial": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycpatternCheck(\"abcd\",\"abd\") => false\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => true\n  */\nconst cycpatternCheck = (a, b) => {\n  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n        # print('@@this is the line to split##')\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "gc": "<|endoftext|>/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycpatternCheck(\"abcd\",\"abd\") => false\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => true\n  */\n\nconst cycpatternCheck = (a, b) => {\n  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k]!= pat[j + k]) { y = 0 }\n      }\n      if (y!= 0) { return false }\n    }\n  }\n  return true\n}\n\nmodule.exports = cycpatternCheck;\n\n},{}],7:[function(require,module,exports){\n/*\n  You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycpatternCheck(\"abcd\",\"abd\") => false\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => true\n  */\n\nconst cycpatternCheck = (a, b) => {\n  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k]!= pat[j + k]) { y = 0 }\n      }\n      if (y!= 0) { return false }\n    }\n  }\n  return true\n}\n\nmodule.exports = cycpatternCheck;\n\n},{}],8:[function(require,module,exports){\n/*\n  You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycpatternCheck(\"abcd\",\"abd\") => false\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => true\n  */\n\nconst cycpatternCheck = (a, b) => {\n  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k]!= pat[j + k]) { y = 0 }\n      }\n      if (y!= 0) { return false }\n    }\n  }\n  return true\n}\n\nmodule.exports = cycpatternCheck;\n\n},{}],9:[function(require,module,exports){\n/*\n  You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycpatternCheck(\"abcd\",\"abd\") => false\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => true\n  */\n\nconst cycpatternCheck = (a, b) => {\n  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k]!= pat[j + k]) { y = 0 }\n      }\n      if (y!= 0) { return false }\n    }\n  }\n  return true\n}\n\nmodule.exports = cycpatternCheck;\n\n},{}],10:[function(require,module,exports){\n/*\n  You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycpatternCheck(\"abcd\",\"abd\") => false\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => true\n  */\n\nconst cycpatternCheck = (a, b) => {\n  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k]!= pat[j + k]) { y = 0 }\n      }\n      if (y!= 0) { return false }\n    }\n  }\n  return true\n}\n\nmodule.exports = cycpatternCheck;\n\n},{}],11:[function(require,module,exports){\n/*\n  You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycpatternCheck(\"abcd\",\"abd\") => false\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => true\n  */\n\nconst cycpatternCheck = (a, b) => {\n  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k]!= pat[j + k]) { y = 0 }\n      }\n      if (y!= 0) { return false }\n    }\n  }\n  return true\n}\n\nmodule.exports = cycpatternCheck;\n\n},{}],12:[function(require,module,exports){\n/*\n  You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycpatternCheck(\"abcd\",\"abd\") => false\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => true\n  */\n\nconst cycpatternCheck = (a, b) => {\n  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k]!= pat[j + k]) { y = 0 }\n      }\n      if (y!= 0) { return false }\n    }\n  }\n  return true\n}\n\nmodule.exports = cy"}
{"task_id": "JavaScript/155", "prompt": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\n\nconst evenOddCount = (num) => {\n  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n", "canonical_solution": "    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "partial": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    # print('@@this is the line to split##')\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "gc": "<|endoftext|>/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\n\nconst evenOddCount = (num) => {\n  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    num = Math.floor(num / 2)\n  }\n  while (e > 0) { o++ }\n  return { even: o, odd: e }\n}\n\n/*Given a string, return an array that has each character of the string converted to its corresponding integer.\n\n   Example:\n      toInt('hello') ==> [6, 5, 4, 3, 2, 1]\n      toInt('hello123') ==> [6, 5, 4, 3, 2, 1]\n      toInt('hello123hello') ==> [6, 5, 4, 3, 2, 1]\n      toInt('hello123hello123') ==> [6, 5, 4, 3, 2, 1]\n      toInt('hello123hello123hello') ==> [6, 5, 4, 3, 2, 1]\n  */\n\nconst toInt = str => {\n  let arr = []\n  for (let i = 0; i < str.length; i++) {\n    arr.push(str.charCodeAt(i))\n  }\n  return arr\n}\n\n/*Given a string, return an array that has each character of the string converted to its corresponding integer.\n\n   Example:\n      toInt('hello') ==> [6, 5, 4, 3, 2, 1]\n      toInt('hello123') ==> [6, 5, 4, 3, 2, 1]\n      toInt('hello123hello') ==> [6, 5, 4, 3, 2, 1]\n      toInt('hello123hello123') ==> [6, 5, 4, 3, 2, 1]\n      toInt('hello123hello123hello') ==> [6, 5, 4, 3, 2, 1]\n  */\n\nconst toInt2 = str => {\n  let arr = []\n  for (let i = 0; i < str.length; i++) {\n    arr.push(str.charCodeAt(i).toString(16))\n  }\n  return arr\n}\n\n/*Given a string, return an array that has each character of the string converted to its corresponding integer.\n\n   Example:\n      toInt('hello') ==> [6, 5, 4, 3, 2, 1]\n      toInt('hello123') ==> [6, 5, 4, 3, 2, 1]\n      toInt('hello123hello') ==> [6, 5, 4, 3, 2, 1]\n      toInt('hello123hello123') ==> [6, 5, 4, 3, 2, 1]\n      toInt('hello123hello123hello') ==> [6, 5, 4, 3, 2, 1]\n  */\n\nconst toInt3 = str => {\n  let arr = []\n  for (let i = 0; i < str.length; i++) {\n    arr.push(str.charCodeAt(i).toString(16).toUpperCase())\n  }\n  return arr\n}\n\n/*Given a string, return an array that has each character of the string converted to its corresponding integer.\n\n   Example:\n      toInt('hello') ==> [6, 5, 4, 3, 2, 1]\n      toInt('hello123') ==> [6, 5, 4, 3, 2, 1]\n      toInt('hello123hello') ==> [6, 5, 4, 3, 2, 1]\n      toInt('hello123hello123') ==> [6, 5, 4, 3, 2, 1]\n      toInt('hello123hello123hello') ==> [6, 5, 4, 3, 2, 1]\n  */\n\nconst toInt4 = str => {\n  let arr = []\n  for (let i = 0; i < str.length; i++) {\n    arr.push(str.charCodeAt(i).toString(16).replace(/[^0-9]/g, ''))\n  }\n  return arr\n}\n\n/*Given a string, return an array that has each character of the string converted to its corresponding integer.\n\n   Example:\n      toInt('hello') ==> [6, 5, 4, 3, 2, 1]\n      toInt('hello123') ==> [6, 5, 4, 3, 2, 1]\n      toInt('hello123hello') ==> [6, 5, 4, 3, 2, 1]\n      toInt('hello123hello123') ==> [6, 5, 4, 3, 2, 1]\n      toInt('hello123hello123hello') ==> [6, 5, 4, 3, 2, 1]\n  */\n\nconst toInt5 = str => {\n  let arr = []\n  for (let i = 0; i < str.length; i++) {\n    arr.push(str.charCodeAt(i).toString(16).replace(/[^0-9]/g, '').toUpperCase())\n  }\n  return arr\n}\n\n/*Given a string, return an array that has each character of the string converted to its corresponding integer.\n\n   Example:\n      toInt('hello') ==> [6, 5, 4, 3, 2, 1]\n      toInt('hello123') ==> [6, 5, 4, 3, 2, 1]\n      toInt('hello123hello') ==> [6, 5, 4, 3, 2, 1]\n      toInt('hello123hello123') ==> [6, 5, 4, 3, 2, 1]\n      toInt('hello123hello123hello') ==> [6, 5, 4, 3, 2, 1]\n  */\n\nconst toInt6 = str => {\n  let arr = []\n  for (let i = 0; i < str.length; i++) {\n    arr.push(str.charCodeAt(i).toString(16).replace(/[^0-9]/g, '').toUpperCase().replace(/[^0-9]/g, ''))\n  }\n  return arr\n}\n\n/*Given a string, return an array that has each character of the string converted to its corresponding integer.\n\n   Example:\n      toInt('hello') ==> [6, 5, 4, 3, 2, 1]\n      toInt('hello123') ==> [6, 5, 4, 3, 2, 1]\n      toInt('hello123hello') ==> [6, 5, 4, 3, 2, 1]\n      toInt('hello123hello123') ==> [6, 5, 4, 3, 2, 1]\n      toInt('hello123hello123hello') ==> [6, 5, 4, 3, 2, 1]\n  */\n\nconst toInt7 = str => {\n  let arr = []\n  for (let i = 0; i < str.length; i++) {\n    arr.push(str.charCodeAt(i).toString(16).replace(/[^0-9]/g, '').toUpperCase().replace(/[^0-9]/g, '').toUpperCase().replace(/[^0-9]/g, ''))\n  }\n  return arr\n}\n\n/*Given a string, return an array that has each character of the string converted to its corresponding integer.\n\n   Example:\n      toInt('hello') ==> [6, 5, 4, 3, 2, 1]\n      toInt('hello123') ==> [6, 5, 4, 3, 2, 1]\n      toInt('hello123hello') ==> [6, 5, 4, 3, 2, 1]\n      toInt('hello123hello123') ==> [6, 5, 4, 3, 2, 1]\n      toInt('hello123hello123hello') ==> [6, 5, 4, 3, 2, 1]\n  */\n\nconst toInt8 = str => {\n  let arr = []\n  for (let i = 0; i < str.length; i++) {\n    arr.push(str.charCodeAt(i).toString(16).replace(/[^0-9]/g, '').toUpperCase().replace(/[^0-9]/g, '').toUpperCase().replace(/[^0-9]/g, '').toUpperCase().replace(/[^0-9]/g, ''))\n  }\n  return arr\n}\n\n/*Given a string, return an array that has each character of the string converted to its corresponding integer.\n\n   Example:\n      toInt('hello') ==> [6, 5, 4, 3, 2, 1]\n      toInt('hello123') ==> [6, 5, 4, 3, 2, 1]\n      toInt('hello123hello') ==> [6, 5, 4, 3, 2, 1]\n      toInt('hello123hello123') ==> [6, 5, 4, 3, 2, 1]\n      toInt('hello123hello123hello') ==> [6, 5, 4, 3, 2, 1]\n  */\n\nconst toInt9 = str => {\n  let arr = []\n  for (let i = 0; i < str.length; i++) {\n    arr.push(str.charCodeAt(i).toString(16).replace(/[^0-9]/g, '').toUpperCase().replace(/[^0-9]/g, '').toUpperCase().replace(/[^0-9]/g, '').toUpperCase().replace(/[^0-9]/g, '').toUpperCase().replace(/[^0-9]/g, ''))\n  }\n  return arr\n}\n\n/*Given a string, return an array that has each character of the string converted to its corresponding integer.\n\n   Example:\n      toInt('hello') ==> [6, 5, 4, 3, 2, 1]\n      toInt('hello123') ==> [6, 5, 4, 3, 2, "}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\n\nconst intToMiniRoman = (number) => {\n  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n", "canonical_solution": "    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "partial": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    # print('@@this is the line to split##')\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "gc": "<|endoftext|>/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\n\nconst intToMiniRoman = (number) => {\n  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm','m']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    res += sym[i] + div\n    i++\n  }\n  return res.toLowerCase()\n}\n\n/*\n  Given a positive integer, convert it to a roman numeral equivalent in uppercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToRoman(19) == 'XIX'\n  >>> intToRoman(152) == 'CLI'\n  >>> intToRoman(426) == 'CDXXVI'\n  */\n\nconst intToRoman = (number) => {\n  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['I', 'IV', 'V', 'IX', 'X', 'XL', 'L', 'XC', 'C', 'D', 'CM', 'M']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    res += sym[i] + div\n    i++\n  }\n  return res.toUpperCase()\n}\n\n/*\n  Given a positive integer, convert it to a roman numeral equivalent in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToRoman(19) == 'xix'\n  >>> intToRoman(152) == 'clii'\n  >>> intToRoman(426) == 'cdxxvi'\n  */\n\nconst intToRomanLow = (number) => {\n  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['I', 'IV', 'V', 'IX', 'X', 'XL', 'L', 'XC', 'C', 'D', 'CM', 'M']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    res += sym[i] + div\n    i++\n  }\n  return res.toLowerCase()\n}\n\n/*\n  Given a positive integer, convert it to a roman numeral equivalent in uppercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToRomanLow(19) == 'XIX'\n  >>> intToRomanLow(152) == 'CLI'\n  >>> intToRomanLow(426) == 'CDXXVI'\n  */\n\nconst intToRomanLow = (number) => {\n  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['I', 'IV', 'V', 'IX', 'X', 'XL', 'L', 'XC', 'C', 'D', 'CM', 'M']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    res += sym[i] + div\n    i++\n  }\n  return res.toUpperCase()\n}\n\n/*\n  Given a positive integer, convert it to a roman numeral equivalent in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToRomanLow(19) == 'xix'\n  >>> intToRomanLow(152) == 'clii'\n  >>> intToRomanLow(426) == 'cdxxvi'\n  */\n\nconst intToRomanLow = (number) => {\n  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['I', 'IV', 'V', 'IX', 'X', 'XL', 'L', 'XC', 'C', 'D', 'CM', 'M']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    res += sym[i] + div\n    i++\n  }\n  return res.toLowerCase()\n}\n\n/*\n  Given a positive integer, convert it to a roman numeral equivalent in uppercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToRomanLow(19) == 'xix'\n  >>> intToRomanLow(152) == 'clii'\n  >>> intToRomanLow(426) == 'cdxxvi'\n  */\n\nconst intToRomanLow = (number) => {\n  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['I', 'IV', 'V', 'IX', 'X', 'XL', 'L', 'XC', 'C', 'D', 'CM', 'M']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    res += sym[i] + div\n    i++\n  }\n  return res.toUpperCase()\n}\n\n/*\n  Given a positive integer, convert it to a roman numeral equivalent in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToRomanLow(19) == 'xix'\n  >>> intToRomanLow(152) == 'clii'\n  >>> intToRomanLow(426) == 'cdxxvi'\n  */\n\nconst intToRomanLow = (number) => {\n  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['I', 'IV', 'V', 'IX', 'X', 'XL', 'L', 'XC', 'C', 'D', 'CM', 'M']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    res += sym[i] + div\n    i++\n  }\n  return res.toLowerCase()\n}\n\n/*\n  Given a positive integer, convert it to a roman numeral equivalent in uppercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToRomanLow(19) == 'xix'\n  >>> intToRomanLow(152) == 'clii'\n  >>> intToRomanLow(426) == 'cdxxvi'\n  */\n\nconst intToRomanLow = (number) => {\n  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['I', 'IV', 'V', 'IX', 'X', 'XL', 'L', 'XC', 'C', 'D', 'CM', 'M']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    res += sym[i] + div\n    i++\n  }\n  return res.toUpperCase()\n}\n\n/*\n  Given a positive integer, convert it to a roman numeral equivalent in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToRomanLow(19) == 'xix'\n  >>> intToRomanLow(152) == 'clii'\n  >>> intToRomanLow(426) == 'cdxxvi'\n  */\n\nconst intToRomanLow = (number) => {\n  let num = [1, 4, 5, 9, 10, 40, 50, "}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\n\nconst rightAngleTriangle = (a, b, c) => {\n  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n", "canonical_solution": "}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "partial": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n  # print('@@this is the line to split##')\n}\n\n", "gc": "<|endoftext|>/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\n\nconst rightAngleTriangle = (a, b, c) => {\n  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\nmodule.exports = rightAngleTriangle\n\n},{}],3:[function(require,module,exports){\nconst { isInteger } = require('lodash')\n\n/**\n * Check if a number is even\n * @param {Number} n\n * @returns {Boolean}\n */\nconst isEven = function (n) {\n  return n % 2 === 0\n}\n\n/**\n * Check if a number is odd\n * @param {Number} n\n * @returns {Boolean}\n */\nconst isOdd = function (n) {\n  return n % 2!== 0\n}\n\n/**\n * Check if a number is divisible by 2\n * @param {Number} n\n * @returns {Boolean}\n */\nconst isDivisibleBy2 = function (n) {\n  return n % 2 === 0\n}\n\n/**\n * Check if a number is divisible by 3\n * @param {Number} n\n * @returns {Boolean}\n */\nconst isDivisibleBy3 = function (n) {\n  return n % 2!== 0\n}\n\n/**\n * Check if a number is divisible by 4\n * @param {Number} n\n * @returns {Boolean}\n */\nconst isDivisibleBy4 = function (n) {\n  return n % 2 === 0\n}\n\n/**\n * Check if a number is divisible by 5\n * @param {Number} n\n * @returns {Boolean}\n */\nconst isDivisibleBy5 = function (n) {\n  return n % 2!== 0\n}\n\n/**\n * Check if a number is divisible by 6\n * @param {Number} n\n * @returns {Boolean}\n */\nconst isDivisibleBy6 = function (n) {\n  return n % 2 === 0\n}\n\n/**\n * Check if a number is divisible by 7\n * @param {Number} n\n * @returns {Boolean}\n */\nconst isDivisibleBy7 = function (n) {\n  return n % 2!== 0\n}\n\n/**\n * Check if a number is divisible by 8\n * @param {Number} n\n * @returns {Boolean}\n */\nconst isDivisibleBy8 = function (n) {\n  return n % 2 === 0\n}\n\n/**\n * Check if a number is divisible by 9\n * @param {Number} n\n * @returns {Boolean}\n */\nconst isDivisibleBy9 = function (n) {\n  return n % 2!== 0\n}\n\n/**\n * Check if a number is divisible by 10\n * @param {Number} n\n * @returns {Boolean}\n */\nconst isDivisibleBy10 = function (n) {\n  return n % 2 === 0\n}\n\n/**\n * Check if a number is divisible by 11\n * @param {Number} n\n * @returns {Boolean}\n */\nconst isDivisibleBy11 = function (n) {\n  return n % 2!== 0\n}\n\n/**\n * Check if a number is divisible by 12\n * @param {Number} n\n * @returns {Boolean}\n */\nconst isDivisibleBy12 = function (n) {\n  return n % 2 === 0\n}\n\n/**\n * Check if a number is divisible by 13\n * @param {Number} n\n * @returns {Boolean}\n */\nconst isDivisibleBy13 = function (n) {\n  return n % 2!== 0\n}\n\n/**\n * Check if a number is divisible by 14\n * @param {Number} n\n * @returns {Boolean}\n */\nconst isDivisibleBy14 = function (n) {\n  return n % 2 === 0\n}\n\n/**\n * Check if a number is divisible by 15\n * @param {Number} n\n * @returns {Boolean}\n */\nconst isDivisibleBy15 = function (n) {\n  return n % 2!== 0\n}\n\n/**\n * Check if a number is divisible by 16\n * @param {Number} n\n * @returns {Boolean}\n */\nconst isDivisibleBy16 = function (n) {\n  return n % 2 === 0\n}\n\n/**\n * Check if a number is divisible by 17\n * @param {Number} n\n * @returns {Boolean}\n */\nconst isDivisibleBy17 = function (n) {\n  return n % 2!== 0\n}\n\n/**\n * Check if a number is divisible by 18\n * @param {Number} n\n * @returns {Boolean}\n */\nconst isDivisibleBy18 = function (n) {\n  return n % 2 === 0\n}\n\n/**\n * Check if a number is divisible by 19\n * @param {Number} n\n * @returns {Boolean}\n */\nconst isDivisibleBy19 = function (n) {\n  return n % 2!== 0\n}\n\n/**\n * Check if a number is divisible by 20\n * @param {Number} n\n * @returns {Boolean}\n */\nconst isDivisibleBy20 = function (n) {\n  return n % 2 === 0\n}\n\n/**\n * Check if a number is divisible by 21\n * @param {Number} n\n * @returns {Boolean}\n */\nconst isDivisibleBy21 = function (n) {\n  return n % 2!== 0\n}\n\n/**\n * Check if a number is divisible by 22\n * @param {Number} n\n * @returns {Boolean}\n */\nconst isDivisibleBy22 = function (n) {\n  return n % 2 === 0\n}\n\n/**\n * Check if a number is divisible by 23\n * @param {Number} n\n * @returns {Boolean}\n */\nconst isDivisibleBy23 = function (n) {\n  return n % 2!== 0\n}\n\n/**\n * Check if a number is divisible by 24\n * @param {Number} n\n * @returns {Boolean}\n */\nconst isDivisibleBy24 = function (n) {\n  return n % 2 === 0\n}\n\n/**\n * Check if a number is divisible by 25\n * @param {Number} n\n * @returns {Boolean}\n */\nconst isDivisibleBy25 = function (n) {\n  return n % 2!== 0\n}\n\n/**\n * Check if a number is divisible by 26\n * @param {Number} n\n * @returns {Boolean}\n */\nconst isDivisibleBy26 = function (n) {\n  return n % 2 === 0\n}\n\n/**\n * Check if a number is divisible by 27\n * @param {Number} n\n * @returns {Boolean}\n */\nconst isDivisibleBy27 = function (n) {\n  return n % 2!== 0\n}\n\n/**\n * Check if a number is divisible by 28\n * @param {Number} n\n * @returns {Boolean}\n */\nconst isDivisibleBy28 = function (n) {\n  return n % 2 === 0\n}\n\n/**\n * Check if a number is divisible by 29\n * @param {Number} n\n * @returns {Boolean}\n */\nconst isDivisibleBy29 = function (n) {\n  return n % 2!== 0\n}\n\n/**\n * Check if a number is divisible by 30\n * @param {Number} n\n * @returns {Boolean}\n */\nconst isDivisibleBy30 = function (n) {\n  return n % 2 === 0\n}\n\n/**\n * Check if a number is divisible by 31\n * @param {Number} n\n * @returns {Boolean}\n */\nconst isDivisibleBy31 = function (n) {\n  return n % 2!== 0\n}\n\n/**\n * Check if a number is divisible by 32\n * @param {Number} n\n * @returns {Boolean}\n */\nconst isDivisibleBy32 = function (n) {\n  return n % 2 === 0\n}\n\n/**\n * Check if a number is divisible by 33\n * @param {Number} n\n * @returns {Boolean}\n */\nconst isDivisibleBy33 = function (n) {\n  return n % 2!== 0\n}\n\n/**\n * Check if a number is divisible by 34\n * @param {Number} n\n * @returns {Boolean}\n */\nconst isDivisibleBy34 = function (n) {\n  return n % 2 === 0\n}\n\n/**\n * Check if a number is divisible by 35\n * @param {Number} n\n * @returns {Boolean}\n */\nconst isDivisibleBy35 = function (n) {\n"}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"string\"\n  findMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"aaaaaaa\"\n  */\n\nconst findMax = (words) => {\n  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n", "canonical_solution": "      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "partial": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"string\"\n  findMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst findMax = (words) => {\n  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n        # print('@@this is the line to split##')\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "gc": "<|endoftext|>/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"string\"\n  findMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  findMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\n\nconst findMax = (words) => {\n  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y > p) { p = y }\n    }\n    if (s > u) { u = s }\n    s = p\n  }\n  return words[u]\n}\n\n/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"string\"\n  findMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  findMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\n\nconst findMax = (words) => {\n  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y > p) { p = y }\n    }\n    if (s > u) { u = s }\n    s = p\n  }\n  return words[u]\n}\n\n/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"string\"\n  findMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  findMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\n\nconst findMax = (words) => {\n  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y > p) { p = y }\n    }\n    if (s > u) { u = s }\n    s = p\n  }\n  return words[u]\n}\n\n/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"string\"\n  findMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  findMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\n\nconst findMax = (words) => {\n  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y > p) { p = y }\n    }\n    if (s > u) { u = s }\n    s = p\n  }\n  return words[u]\n}\n\n/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"string\"\n  findMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  findMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\n\nconst findMax = (words) => {\n  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y > p) { p = y }\n    }\n    if (s > u) { u = s }\n    s = p\n  }\n  return words[u]\n}\n\n/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"string\"\n  findMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  findMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\n\nconst findMax = (words) => {\n  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y > p) { p = y }\n    }\n    if (s > u) { u = s }\n    s = p\n  }\n  return words[u]\n}\n\n/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"string\"\n  findMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  findMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\n\nconst findMax = (words) => {\n  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y > p) { p = y }\n    }\n    if (s > u) { u = s }\n    s = p\n  }\n  return words[u]\n}\n\n/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"string\"\n  findMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  findMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\n\nconst findMax = (words) => {\n  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < word"}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\n\nconst eat = (number, need, remaining) => {\n  if (need <= remaining) {\n    return [need + number, remaining - need]\n", "canonical_solution": "  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "partial": "/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  if (need <= remaining) {\n    return [need + number, remaining - need]\n    # print('@@this is the line to split##')\n  }\n  return [remaining + number, 0]\n}\n\n", "gc": "<|endoftext|>/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\n\nconst eat = (number, need, remaining) => {\n  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return eat(number, need - 1, remaining)\n}\n\n/*\n  You are a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\n\nconst eat = (number, need, remaining) => {\n  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return eat(number, need - 1, remaining)\n}\n\n/*\n  You are a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\n\nconst eat = (number, need, remaining) => {\n  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return eat(number, need - 1, remaining)\n}\n\n/*\n  You are a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\n\nconst eat = (number, need, remaining) => {\n  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return eat(number, need - 1, remaining)\n}\n\n/*\n  You are a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\n\nconst eat = (number, need, remaining) => {\n  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return eat(number, need - 1, remaining)\n}\n\n/*\n  You are a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining "}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\n\nconst doAlgebra = (operator, operand) => {\n  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n", "canonical_solution": "        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "partial": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        # print('@@this is the line to split##')\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "gc": "<|endoftext|>/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\n\nconst doAlgebra = (operator, operand) => {\n  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] = operand[i] - operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '+') {\n        operand[i] = operand[i] + operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n  }\n  return operand\n}\n\nconst evaluate = (operator, operand) => {\n  let result = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n"}
{"task_id": "JavaScript/161", "prompt": "/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\n\nconst solve = (s) => {\n  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n", "canonical_solution": "    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "partial": "/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n      # print('@@this is the line to split##')\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "gc": "<|endoftext|>/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\n\nconst solve = (s) => {\n  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    } else if (y >= 48 && y <= 57) {\n      y += 32;\n      t = 2;\n    } else if (y >= 65 && y <= 90) {\n      y -= 32;\n      t = 2;\n    } else if (y >= 97 && y <= 122) {\n      y += 32;\n      t = 2;\n    } else if (y >= 48 && y <= 57) {\n      y += 32;\n      t = 3;\n    } else if (y >= 65 && y <= 90) {\n      y -= 32;\n      t = 3;\n    } else if (y >= 97 && y <= 122) {\n      y += 32;\n      t = 3;\n    } else if (y >= 48 && y <= 57) {\n      y += 32;\n      t = 4;\n    } else if (y >= 65 && y <= 90) {\n      y -= 32;\n      t = 4;\n    } else if (y >= 97 && y <= 122) {\n      y += 32;\n      t = 4;\n    } else if (y >= 48 && y <= 57) {\n      y += 32;\n      t = 5;\n    } else if (y >= 65 && y <= 90) {\n      y -= 32;\n      t = 5;\n    } else if (y >= 97 && y <= 122) {\n      y += 32;\n      t = 5;\n    } else if (y >= 48 && y <= 57) {\n      y += 32;\n      t = 6;\n    } else if (y >= 65 && y <= 90) {\n      y -= 32;\n      t = 6;\n    } else if (y >= 97 && y <= 122) {\n      y += 32;\n      t = 6;\n    } else if (y >= 48 && y <= 57) {\n      y += 32;\n      t = 7;\n    } else if (y >= 65 && y <= 90) {\n      y -= 32;\n      t = 7;\n    } else if (y >= 97 && y <= 122) {\n      y += 32;\n      t = 7;\n    } else if (y >= 48 && y <= 57) {\n      y += 32;\n      t = 8;\n    } else if (y >= 65 && y <= 90) {\n      y -= 32;\n      t = 8;\n    } else if (y >= 97 && y <= 122) {\n      y += 32;\n      t = 8;\n    } else if (y >= 48 && y <= 57) {\n      y += 32;\n      t = 9;\n    } else if (y >= 65 && y <= 90) {\n      y -= 32;\n      t = 9;\n    } else if (y >= 97 && y <= 122) {\n      y += 32;\n      t = 9;\n    } else if (y >= 48 && y <= 57) {\n      y += 32;\n      t = 10;\n    } else if (y >= 65 && y <= 90) {\n      y -= 32;\n      t = 10;\n    } else if (y >= 97 && y <= 122) {\n      y += 32;\n      t = 10;\n    } else if (y >= 48 && y <= 57) {\n      y += 32;\n      t = 11;\n    } else if (y >= 65 && y <= 90) {\n      y -= 32;\n      t = 11;\n    } else if (y >= 97 && y <= 122) {\n      y += 32;\n      t = 11;\n    } else if (y >= 48 && y <= 57) {\n      y += 32;\n      t = 12;\n    } else if (y >= 65 && y <= 90) {\n      y -= 32;\n      t = 12;\n    } else if (y >= 97 && y <= 122) {\n      y += 32;\n      t = 12;\n    } else if (y >= 48 && y <= 57) {\n      y += 32;\n      t = 13;\n    } else if (y >= 65 && y <= 90) {\n      y -= 32;\n      t = 13;\n    } else if (y >= 97 && y <= 122) {\n      y += 32;\n      t = 13;\n    } else if (y >= 48 && y <= 57) {\n      y += 32;\n      t = 14;\n    } else if (y >= 65 && y <= 90) {\n      y -= 32;\n      t = 14;\n    } else if (y >= 97 && y <= 122) {\n      y += 32;\n      t = 14;\n    } else if (y >= 48 && y <= 57) {\n      y += 32;\n      t = 15;\n    } else if (y >= 65 && y <= 90) {\n      y -= 32;\n      t = 15;\n    } else if (y >= 97 && y <= 122) {\n      y += 32;\n      t = 15;\n    } else if (y >= 48 && y <= 57) {\n      y += 32;\n      t = 16;\n    } else if (y >= 65 && y <= 90) {\n      y -= 32;\n      t = 16;\n    } else if (y >= 97 && y <= 122) {\n      y += 32;\n      t = 16;\n    } else if (y >= 48 && y <= 57) {\n      y += 32;\n      t = 17;\n    } else if (y >= 65 && y <= 90) {\n      y -= 32;\n      t = 17;\n    } else if (y >= 97 && y <= 122) {\n      y += 32;\n      t = 17;\n    } else if (y >= 48 && y <= 57) {\n      y += 32;\n      t = 18;\n    } else if (y >= 65 && y <= 90) {\n      y -= 32;\n      t = 18;\n    } else if (y >= 97 && y <= 122) {\n      y += 32;\n      t = 18;\n    } else if (y >= 48 && y <= 57) {\n      y += 32;\n      t = 19;\n    } else if (y >= 65 && y <= 90) {\n      y -= 32;\n      t = 19;\n    } else if (y >= 97 && y <= 122) {\n      y += 32;\n      t = 19;\n    } else if (y >= 48 && y <= 57) {\n      y += 32;\n      t = 20;\n    } else if (y >= 65 && y <= 90) {\n      y -= 32;\n      t = 20;\n    } else if (y >= 97 && y <= 122) {\n      y += 32;\n      t = 20;\n    } else if (y >= 48 && y <= 57) {\n      y += 32;\n      t = 21;\n    } else if (y >= 65 && y <= 90) {\n      y -= 32;\n      t = 21;\n    } else if (y >= 97 && y <= 122) {\n      y += 32;\n      t = 21;\n    } else if (y >= 48 && y <= 57) {\n      y += 32;\n      t = 22;\n    } else if (y >= 65 && y <= 90) {\n      y -= 32;\n      t = 22;\n    } else if (y >= 97 && y <= 122) {\n      y += 32;\n      t = 22;\n    } else if (y >= 48 && y <= 57) {\n      y += 32;\n      t = 23;\n    } else if (y >= 65 && y <= 90) {\n      y -= 32;\n      t = 23;\n    } else if (y >= 97 && y <= 122) {\n      y += 32;\n      t = 23;\n    } else if (y >= 48 && y <= 57) {\n      y += 32;\n      t = 24;\n    } else if (y >= 65 && y <= 90) {\n      y -= 32;\n      t = 24;\n    } else if (y >= 97 && y <= 122) {\n      y += 32;\n      t = 24;\n    } else if (y >= 48 && y <= 57) {\n      y += 32;\n      t = 25;\n    } else if (y >= 65 && y <= 90) {\n      y -= 32;\n      t = 25;\n    } else if (y >= 97 && y <= 122) {\n      y += 32;\n      t = 25;\n    } else if (y >= 48 && y <= 57) {\n      y += 32;\n      t = 26;\n    } else if (y >= 65 && y <= 90) {\n      y -= 32;\n      t = 26;\n    } else if ("}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\n\nconst stringToMd5 = (text) => {\n  if (text == '') { return null }\n  var md5 = require('js-md5')\n", "canonical_solution": "  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "partial": "/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text == '') { return null }\n  var md5 = require('js-md5')\n  # print('@@this is the line to split##')\n  return md5(text)\n}\n\n", "gc": "<|endoftext|>/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\n\nconst stringToMd5 = (text) => {\n  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\n\nconst stringToMd5 = (text) => {\n  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\n\nconst stringToMd5 = (text) => {\n  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\n\nconst stringToMd5 = (text) => {\n  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\n\nconst stringToMd5 = (text) => {\n  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\n\nconst stringToMd5 = (text) => {\n  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\n\nconst stringToMd5 = (text) => {\n  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\n\nconst stringToMd5 = (text) => {\n  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\n\nconst stringToMd5 = (text) => {\n  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\n\nconst stringToMd5 = (text) => {\n  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\n\nconst stringToMd5 = (text) => {\n  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\n\nconst stringToMd5 = (text) => {\n  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\n\nconst stringToMd5 = (text) => {\n  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\n\nconst stringToMd5 = (text) => {\n  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\n\nconst stringToMd5 = (text) => {\n  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\n\nconst stringToMd5 = (text) => {\n  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\n\nconst stringToMd5 = (text) => {\n  if (text == '') { return null }\n  var md5"}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\n\nconst generateIntegers = (a, b) => {\n  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n", "canonical_solution": "  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "partial": "/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  # print('@@this is the line to split##')\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "gc": "<|endoftext|>/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\n\nconst generateIntegers = (a, b) => {\n  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let result = [];\n  let digit;\n  let i;\n  let j;\n  let k;\n  let l;\n  let tmp;\n  let tmp2;\n  let tmp3;\n  let tmp4;\n  let tmp5;\n  let tmp6;\n  let tmp7;\n  let tmp8;\n  let tmp9;\n  let tmp10;\n  let tmp11;\n  let tmp12;\n  let tmp13;\n  let tmp14;\n  let tmp15;\n  let tmp16;\n  let tmp17;\n  let tmp18;\n  let tmp19;\n  let tmp20;\n  let tmp21;\n  let tmp22;\n  let tmp23;\n  let tmp24;\n  let tmp25;\n  let tmp26;\n  let tmp27;\n  let tmp28;\n  let tmp29;\n  let tmp30;\n  let tmp31;\n  let tmp32;\n  let tmp33;\n  let tmp34;\n  let tmp35;\n  let tmp36;\n  let tmp37;\n  let tmp38;\n  let tmp39;\n  let tmp40;\n  let tmp41;\n  let tmp42;\n  let tmp43;\n  let tmp44;\n  let tmp45;\n  let tmp46;\n  let tmp47;\n  let tmp48;\n  let tmp49;\n  let tmp50;\n  let tmp51;\n  let tmp52;\n  let tmp53;\n  let tmp54;\n  let tmp55;\n  let tmp56;\n  let tmp57;\n  let tmp58;\n  let tmp59;\n  let tmp60;\n  let tmp61;\n  let tmp62;\n  let tmp63;\n  let tmp64;\n  let tmp65;\n  let tmp66;\n  let tmp67;\n  let tmp68;\n  let tmp69;\n  let tmp70;\n  let tmp71;\n  let tmp72;\n  let tmp73;\n  let tmp74;\n  let tmp75;\n  let tmp76;\n  let tmp77;\n  let tmp78;\n  let tmp79;\n  let tmp80;\n  let tmp81;\n  let tmp82;\n  let tmp83;\n  let tmp84;\n  let tmp85;\n  let tmp86;\n  let tmp87;\n  let tmp88;\n  let tmp89;\n  let tmp90;\n  let tmp91;\n  let tmp92;\n  let tmp93;\n  let tmp94;\n  let tmp95;\n  let tmp96;\n  let tmp97;\n  let tmp98;\n  let tmp99;\n  let tmp100;\n  let tmp101;\n  let tmp102;\n  let tmp103;\n  let tmp104;\n  let tmp105;\n  let tmp106;\n  let tmp107;\n  let tmp108;\n  let tmp109;\n  let tmp110;\n  let tmp111;\n  let tmp112;\n  let tmp113;\n  let tmp114;\n  let tmp115;\n  let tmp116;\n  let tmp117;\n  let tmp118;\n  let tmp119;\n  let tmp120;\n  let tmp121;\n  let tmp122;\n  let tmp123;\n  let tmp124;\n  let tmp125;\n  let tmp126;\n  let tmp127;\n  let tmp128;\n  let tmp129;\n  let tmp130;\n  let tmp131;\n  let tmp132;\n  let tmp133;\n  let tmp134;\n  let tmp135;\n  let tmp136;\n  let tmp137;\n  let tmp138;\n  let tmp139;\n  let tmp140;\n  let tmp141;\n  let tmp142;\n  let tmp143;\n  let tmp144;\n  let tmp145;\n  let tmp146;\n  let tmp147;\n  let tmp148;\n  let tmp149;\n  let tmp150;\n  let tmp151;\n  let tmp152;\n  let tmp153;\n  let tmp154;\n  let tmp155;\n  let tmp156;\n  let tmp157;\n  let tmp158;\n  let tmp159;\n  let tmp160;\n  let tmp161;\n  let tmp162;\n  let tmp163;\n  let tmp164;\n  let tmp165;\n  let tmp166;\n  let tmp167;\n  let tmp168;\n  let tmp169;\n  let tmp170;\n  let tmp171;\n  let tmp172;\n  let tmp173;\n  let tmp174;\n  let tmp175;\n  let tmp176;\n  let tmp177;\n  let tmp178;\n  let tmp179;\n  let tmp180;\n  let tmp181;\n  let tmp182;\n  let tmp183;\n  let tmp184;\n  let tmp185;\n  let tmp186;\n  let tmp187;\n  let tmp188;\n  let tmp189;\n  let tmp190;\n  let tmp191;\n  let tmp192;\n  let tmp193;\n  let tmp194;\n  let tmp195;\n  let tmp196;\n  let tmp197;\n  let tmp198;\n  let tmp199;\n  let tmp200;\n  let tmp201;\n  let tmp202;\n  let tmp203;\n  let tmp204;\n  let tmp205;\n  let tmp206;\n  let tmp207;\n  let tmp208;\n  let tmp209;\n  let tmp210;\n  let tmp211;\n  let tmp212;\n  let tmp213;\n  let tmp214;\n  let tmp215;\n  let tmp216;\n  let tmp217;\n  let tmp218;\n  let tmp219;\n  let tmp220;\n  let tmp221;\n  let tmp222;\n  let tmp223;\n  let tmp224;\n  let tmp225;\n  let tmp226;\n  let tmp227;\n  let tmp228;\n  let tmp229;\n  let tmp230;\n  let tmp231;\n  let tmp232;\n  let tmp233;\n  let tmp234;\n  let tmp235;\n  let tmp236;\n  let tmp237;\n  let tmp238;\n  let tmp239;\n  let tmp240;\n  let tmp241;\n  let tmp242;\n  let tmp243;\n  let tmp244;\n  let tmp245;\n  let tmp246;\n  let tmp247;\n  let tmp248;\n  let tmp249;\n  let tmp250;\n  let tmp251;\n  let tmp252;\n  let tmp253;\n  let tmp254;\n  let tmp255;\n  let tmp256;\n  let tmp257;\n  let tmp258;\n  let tmp259;\n  let tmp260;\n  let tmp261;\n  let tmp262;\n  let tmp263;\n  let tmp264;\n  let tmp265;\n  let tmp266;\n  let tmp267;\n  let tmp268;\n  let tmp269;\n  let tmp270;\n  let tmp271;\n  let tmp272;\n  let tmp273;\n  let tmp274;\n  let tmp275;\n  let tmp276;\n  let tmp277;\n  let tmp278;\n  let tmp279;\n  let tmp280;\n  let tmp281;\n  let tmp282;\n  let tmp283;\n  let tmp284;\n  let tmp285;\n  let tmp286;\n  let tmp287;\n  let tmp288;\n  let tmp289;\n  let tmp29"}
