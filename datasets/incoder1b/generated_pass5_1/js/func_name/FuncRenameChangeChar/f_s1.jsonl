{"task_id": "JavaScript/0", "prompt": "/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hasclosEElemEntS([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasclosEElemEntS([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasclosEElemEntS = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasclosEElemEntS", "gc": "<|endoftext|>/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hasclosEElemEntS([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasclosEElemEntS([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasclosEElemEntS = (numbers, threshold) => {\n  const len = numbers.length;\n  const result = [];\n  let i = 0;\n  let j = 0;\n  while (i < len) {\n    const a = numbers[i];\n    const b = numbers[j];\n    if (a < b) {\n      result.push([i, j]);\n      i++;\n      j++;\n    } else if (a > b) {\n      result.push([i, j]);\n      i++;\n    } else {\n      j++;\n    }\n  }\n  return result.some(([a, b]) => Math.abs(a - b) < threshold);\n};\n\n/**\n * Check if in given list of numbers, are any two numbers closer to each other than\n * given threshold.\n * >>> hasclosEElemEntS([1.0, 2.0, 3.0], 0.5)\n * false\n * >>> hasclosEElemEntS([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n * true\n */\nconst hasclosEElemEnt = (numbers, threshold) => {\n  const len = numbers.length;\n  const result = [];\n  let i = 0;\n  let j = 0;\n  while (i < len) {\n    const a = numbers[i];\n    const b = numbers[j];\n    if (a < b) {\n      result.push([i, j]);\n      i++;\n    } else if (a > b) {\n      result.push([i, j]);\n      i++;\n    } else {\n      j++;\n    }\n  }\n  return result.some(([a, b]) => Math.abs(a - b) < threshold);\n};\n\n/**\n * Check if in given list of numbers, are any two numbers closer to each other than\n * given threshold.\n * >>> hasclosEElemEnt([1.0, 2.0, 3.0], 0.5)\n * false\n * >>> hasclosEElemEnt([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n * true\n */\nconst hasclosEElem = (numbers, threshold) => {\n  const len = numbers.length;\n  const result = [];\n  let i = 0;\n  let j = 0;\n  while (i < len) {\n    const a = numbers[i];\n    const b = numbers[j];\n    if (a < b) {\n      result.push([i, j]);\n      i++;\n    } else if (a > b) {\n      result.push([i, j]);\n      i++;\n    } else {\n      j++;\n    }\n  }\n  return result.some(([a, b]) => Math.abs(a - b) < threshold);\n};\n\n/**\n * Check if in given list of numbers, are any two numbers closer to each other than\n * given threshold.\n * >>> hasclosEElem([1.0, 2.0, 3.0], 0.5)\n * false\n * >>> hasclosEElem([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n * true\n */\nconst hasclosE = (numbers, threshold) => {\n  const len = numbers.length;\n  const result = [];\n  let i = 0;\n  let j = 0;\n  while (i < len) {\n    const a = numbers[i];\n    const b = numbers[j];\n    if (a < b) {\n      result.push([i, j]);\n      i++;\n    } else if (a > b) {\n      result.push([i, j]);\n      i++;\n    } else {\n      j++;\n    }\n  }\n  return result.some(([a, b]) => Math.abs(a - b) < threshold);\n};\n\n/**\n * Check if in given list of numbers, are any two numbers closer to each other than\n * given threshold.\n * >>> hasclosE([1.0, 2.0, 3.0], 0.5)\n * false\n * >>> hasclosE([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n * true\n */\nconst hasclos = (numbers, threshold) => {\n  const len = numbers.length;\n  const result = [];\n  let i = 0;\n  let j = 0;\n  while (i < len) {\n    const a = numbers[i];\n    const b = numbers[j];\n    if (a < b) {\n      result.push([i, j]);\n      i++;\n    } else if (a > b) {\n      result.push([i, j]);\n      i++;\n    } else {\n      j++;\n    }\n  }\n  return result.some(([a, b]) => Math.abs(a - b) < threshold);\n};\n\n/**\n * Check if in given list of numbers, are any two numbers closer to each other than\n * given threshold.\n * >>> hasclosE([1.0, 2.0, 3.0], 0.5)\n * false\n * >>> hasclosE([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n * true\n */\nconst hasclosEElem = (numbers, threshold) => {\n  const len = numbers.length;\n  const result = [];\n  let i = 0;\n  let j = 0;\n  while (i < len) {\n    const a = numbers[i];\n    const b = numbers[j];\n    if (a < b) {\n      result.push([i, j]);\n      i++;\n    } else if (a > b) {\n      result.push([i, j]);\n      i++;\n    } else {\n      j++;\n    }\n  }\n  return result.some(([a, b]) => Math.abs(a - b) < threshold);\n};\n\n/**\n * Check if in given list of numbers, are any two numbers closer to each other than\n * given threshold.\n * >>> hasclosE([1.0, 2.0, 3.0], 0.5)\n * false\n * >>> hasclosE([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n * true\n */\nconst hasclosEElemEnt = function (numbers, threshold) {\n  const len = numbers.length;\n  const result = [];\n  let i = 0;\n  let j = 0;\n  while (i < len) {\n    const a = numbers[i];\n    const b = numbers[j];\n    if (a < b) {\n      result.push([i, j]);\n      i++;\n    } else if (a > b) {\n      result.push([i, j]);\n      i++;\n    } else {\n      j++;\n    }\n  }\n  return result.some(([a, b]) => Math.abs(a - b) < threshold);\n};\n\n/**\n * Check if in given list of numbers, are any two numbers closer to each other than\n * given threshold.\n * >>> hasclosE([1.0, 2.0, 3.0], 0.5)\n * false\n * >>> hasclosE([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n * true\n */\nconst hasclosEElemEntS = function (numbers, threshold) {\n  const len = numbers.length;\n  const result = [];\n  let i = 0;\n  let j = 0;\n  while (i < len) {\n    const a = numbers[i];\n    const b = numbers[j];\n    if (a < b) {\n      result.push([i, j]);\n      i++;\n    } else if (a > b) {\n      result.push([i, j]);\n      i++;\n    } else {\n      j++;\n    }\n  }\n  return result.some(([a, b]) => Math.abs(a - b) < threshold);\n};\n\n/**\n * Check if in given list of numbers, are any two numbers closer to each other than\n * given threshold.\n * >>> hasclosE([1.0, 2.0, 3.0], 0.5)\n * false\n * >>> hasclosE([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n * true\n */\nconst hasclosEElemEntS = function (numbers, threshold) {\n  const len = numbers.length;\n  const result = [];\n  let i = 0;\n  let j = 0;\n  while (i < len) {\n    const a = numbers[i];\n    const b = numbers[j];\n    if (a < b) {\n      result.push([i, j]);\n      i++;\n    } else if (a > b) {\n      result.push([i, j]);\n      i++;\n    } else {\n      j++;\n    }\n  }\n  return result.some(([a, b]) => Math.abs(a - b) < threshold);", "passed": 0}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> sepAratEPareNGrOups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst sepAratEPareNGrOups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "sepAratEPareNGrOups", "gc": "<|endoftext|>/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> sepAratEPareNGrOups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst sepAratEPareNGrOups = (paren_string) => {\n  let paren_stack = []\n  let paren_stack_len = 0\n  let paren_stack_len2 = 0\n  let paren_stack_len3 = 0\n  let paren_stack_len4 = 0\n  let paren_stack_len5 = 0\n  let paren_stack_len6 = 0\n  let paren_stack_len7 = 0\n  let paren_stack_len8 = 0\n  let paren_stack_len9 = 0\n  let paren_stack_len10 = 0\n  let paren_stack_len11 = 0\n  let paren_stack_len12 = 0\n  let paren_stack_len13 = 0\n  let paren_stack_len14 = 0\n  let paren_stack_len15 = 0\n  let paren_stack_len16 = 0\n  let paren_stack_len17 = 0\n  let paren_stack_len18 = 0\n  let paren_stack_len19 = 0\n  let paren_stack_len20 = 0\n  let paren_stack_len21 = 0\n  let paren_stack_len22 = 0\n  let paren_stack_len23 = 0\n  let paren_stack_len24 = 0\n  let paren_stack_len25 = 0\n  let paren_stack_len26 = 0\n  let paren_stack_len27 = 0\n  let paren_stack_len28 = 0\n  let paren_stack_len29 = 0\n  let paren_stack_len30 = 0\n  let paren_stack_len31 = 0\n  let paren_stack_len32 = 0\n  let paren_stack_len33 = 0\n  let paren_stack_len34 = 0\n  let paren_stack_len35 = 0\n  let paren_stack_len36 = 0\n  let paren_stack_len37 = 0\n  let paren_stack_len38 = 0\n  let paren_stack_len39 = 0\n  let paren_stack_len40 = 0\n  let paren_stack_len41 = 0\n  let paren_stack_len42 = 0\n  let paren_stack_len43 = 0\n  let paren_stack_len44 = 0\n  let paren_stack_len45 = 0\n  let paren_stack_len46 = 0\n  let paren_stack_len47 = 0\n  let paren_stack_len48 = 0\n  let paren_stack_len49 = 0\n  let paren_stack_len50 = 0\n  let paren_stack_len51 = 0\n  let paren_stack_len52 = 0\n  let paren_stack_len53 = 0\n  let paren_stack_len54 = 0\n  let paren_stack_len55 = 0\n  let paren_stack_len56 = 0\n  let paren_stack_len57 = 0\n  let paren_stack_len58 = 0\n  let paren_stack_len59 = 0\n  let paren_stack_len60 = 0\n  let paren_stack_len61 = 0\n  let paren_stack_len62 = 0\n  let paren_stack_len63 = 0\n  let paren_stack_len64 = 0\n  let paren_stack_len65 = 0\n  let paren_stack_len66 = 0\n  let paren_stack_len67 = 0\n  let paren_stack_len68 = 0\n  let paren_stack_len69 = 0\n  let paren_stack_len70 = 0\n  let paren_stack_len71 = 0\n  let paren_stack_len72 = 0\n  let paren_stack_len73 = 0\n  let paren_stack_len74 = 0\n  let paren_stack_len75 = 0\n  let paren_stack_len76 = 0\n  let paren_stack_len77 = 0\n  let paren_stack_len78 = 0\n  let paren_stack_len79 = 0\n  let paren_stack_len80 = 0\n  let paren_stack_len81 = 0\n  let paren_stack_len82 = 0\n  let paren_stack_len83 = 0\n  let paren_stack_len84 = 0\n  let paren_stack_len85 = 0\n  let paren_stack_len86 = 0\n  let paren_stack_len87 = 0\n  let paren_stack_len88 = 0\n  let paren_stack_len89 = 0\n  let paren_stack_len90 = 0\n  let paren_stack_len91 = 0\n  let paren_stack_len92 = 0\n  let paren_stack_len93 = 0\n  let paren_stack_len94 = 0\n  let paren_stack_len95 = 0\n  let paren_stack_len96 = 0\n  let paren_stack_len97 = 0\n  let paren_stack_len98 = 0\n  let paren_stack_len99 = 0\n  let paren_stack_len100 = 0\n  let paren_stack_len101 = 0\n  let paren_stack_len102 = 0\n  let paren_stack_len103 = 0\n  let paren_stack_len104 = 0\n  let paren_stack_len105 = 0\n  let paren_stack_len106 = 0\n  let paren_stack_len107 = 0\n  let paren_stack_len108 = 0\n  let paren_stack_len109 = 0\n  let paren_stack_len110 = 0\n  let paren_stack_len111 = 0\n  let paren_stack_len112 = 0\n  let paren_stack_len113 = 0\n  let paren_stack_len114 = 0\n  let paren_stack_len115 = 0\n  let paren_stack_len116 = 0\n  let paren_stack_len117 = 0\n  let paren_stack_len118 = 0\n  let paren_stack_len119 = 0\n  let paren_stack_len120 = 0\n  let paren_stack_len121 = 0\n  let paren_stack_len122 = 0\n  let paren_stack_len123 = 0\n  let paren_stack_len124 = 0\n  let paren_stack_len125 = 0\n  let paren_stack_len126 = 0\n  let paren_stack_len127 = 0\n  let paren_stack_len128 = 0\n  let paren_stack_len129 = 0\n  let paren_stack_len130 = 0\n  let paren_stack_len131 = 0\n  let paren_stack_len132 = 0\n  let paren_stack_len133 = 0\n  let paren_stack_len134 = 0\n  let paren_stack_len135 = 0\n  let paren_stack_len136 = 0\n  let paren_stack_len137 = 0\n  let paren_stack_len138 = 0\n  let paren_stack_len139 = 0\n  let paren_stack_len140 = 0\n  let paren_stack_len141 = 0\n  let paren_stack_len142 = 0\n  let paren_stack_len143 = 0\n  let paren_stack_len144 = 0\n  let paren_stack_len145 = 0\n  let paren_stack_len146 = 0\n  let paren_stack_len147 = 0\n  let paren_stack_len148 = 0\n  let paren_stack_len149 = 0\n  let paren_stack_len150 = 0\n  let paren_stack_len151 = 0\n  let paren_stack_len152 = 0\n  let paren_stack_len153 = 0\n  let paren_stack_len154 = 0\n  let paren_stack_len155 = 0\n  let paren_stack_len156 = 0\n  let paren_stack_len157 = 0\n  let paren_stack_len158 = 0\n  let paren_stack_len159 = 0\n  let paren_stack_len160 = 0\n  let paren_stack_len161 = 0\n  let paren_stack_len162 = 0\n  let paren_stack_len163 = 0\n  let paren_stack_len164 = 0\n  let paren_stack_len165 = 0\n  let paren_stack_len166 = 0\n  let paren_stack_len167 = 0\n  let paren_stack_len168 = 0\n  let paren_stack_len169 = 0\n  let paren_stack_len170 = 0\n  let paren_stack_len171 = 0\n  let paren_stack_len172 = 0\n  let paren_stack_len173 = 0\n  let paren_stack_len174 = 0\n  let paren_stack_len175 = 0\n  let paren_stack_len176 = 0\n", "passed": 0}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig is a palindrome */\nconst isPAlinDrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPAlinDrome", "gc": "<|endoftext|>/* Test if gniven strig is a palindrome */\nconst isPAlinDrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let longestPalindrome = '';\n  let longestPalindromeLength = 0;\n  let longestPalindromePrefix = '';\n  let longestPalindromeSuffix = '';\n  let longestPalindromeSuffixLength = 0;\n  let longestPalindromePrefixLength = 0;\n  let longestPalindromeSuffixLength = 0;\n  let longestPalindromePrefixLength = 0;\n  let longestPalindromeSuffixLength = 0;\n  let longestPalindromePrefixLength = 0;\n  let longestPalindromeSuffixLength = 0;\n  let longestPalindromePrefixLength = 0;\n  let longestPalindromeSuffixLength = 0;\n  let longestPalindromePrefixLength = 0;\n  let longestPalindromeSuffixLength = 0;\n  let longestPalindromePrefixLength = 0;\n  let longestPalindromeSuffixLength = 0;\n  let longestPalindromePrefixLength = 0;\n  let longestPalindromeSuffixLength = 0;\n  let longestPalindromePrefixLength = 0;\n  let longestPalindromeSuffixLength = 0;\n  let longestPalindromePrefixLength = 0;\n  let longestPalindromeSuffixLength = 0;\n  let longestPalindromePrefixLength = 0;\n  let longestPalindromeSuffixLength = 0;\n  let longestPalindromePrefixLength = 0;\n  let longestPalindromeSuffixLength = 0;\n  let longestPalindromePrefixLength = 0;\n  let longestPalindromeSuffixLength = 0;\n  let longestPalindromePrefixLength = 0;\n  let longestPalindromeSuffixLength = 0;\n  let longestPalindromePrefixLength = 0;\n  let longestPalindromeSuffixLength = 0;\n  let longestPalindromePrefixLength = 0;\n  let longestPalindromeSuffixLength = 0;\n  let longestPalindromePrefixLength = 0;\n  let longestPalindromeSuffixLength = 0;\n  let longestPalindromePrefixLength = 0;\n  let longestPalindromeSuffixLength = 0;\n  let longestPalindromePrefixLength = 0;\n  let longestPalindromeSuffixLength = 0;\n  let longestPalindromePrefixLength = 0;\n  let longestPalindromeSuffixLength = 0;\n  let longestPalindromePrefixLength = 0;\n  let longestPalindromeSuffixLength = 0;\n  let longestPalindromePrefixLength = 0;\n  let longestPalindromeSuffixLength = 0;\n  let longestPalindromePrefixLength = 0;\n  let longestPalindromeSuffixLength = 0;\n  let longestPalindromePrefixLength = 0;\n  let longestPalindromeSuffixLength = 0;\n  let longestPalindromePrefixLength = 0;\n  let longestPalindromeSuffixLength = 0;\n  let longestPalindromePrefixLength = 0;\n  let longestPalindromeSuffixLength = 0;\n  let longestPalindromePrefixLength = 0;\n  let longestPalindromeSuffixLength = 0;\n  let longestPalindromePrefixLength = 0;\n  let longestPalindromeSuffixLength = 0;\n  let longestPalindromePrefixLength = 0;\n  let longestPalindromeSuffixLength = 0;\n  let longestPalindromePrefixLength = 0;\n  let longestPalindromeSuffixLength = 0;\n  let longestPalindromePrefixLength = 0;\n  let longestPalindromeSuffixLength = 0;\n  let longestPalindromePrefixLength = 0;\n  let longestPalindromeSuffixLength = 0;\n  let longestPalindromePrefixLength = 0;\n  let longestPalindromeSuffixLength = 0;\n  let longestPalindromePrefixLength = 0;\n  let longestPalindromeSuffixLength = 0;\n  let longestPalindromePrefixLength = 0;\n  let longestPalindromeSuffixLength = 0;\n  let longestPalindromePrefixLength = 0;\n  let longestPalindromeSuffixLength = 0;\n  let longestPalindromePrefixLength = 0;\n  let longestPalindromeSuffixLength = 0;\n  let longestPalindromePrefixLength = 0;\n  let longestPalindromeSuffixLength = 0;\n  let longestPalindromePrefixLength = 0;\n  let longestPalindromeSuffixLength = 0;\n  let longestPalindromePrefixLength = 0;\n  let longestPalindromeSuffixLength = 0;\n  let longestPalindromePrefixLength = 0;\n  let longestPalindromeSuffixLength = 0;\n  let longestPalindromePrefixLength = 0;\n  let longestPalindromeSuffixLength = 0;\n  let longestPalindromePrefixLength = 0;\n  let longestPalindromeSuffixLength = 0;\n  let longestPalindromePrefixLength = 0;\n  let longestPalindromeSuffixLength = 0;\n  let longestPalindromePrefixLength = 0;\n  let longestPalindromeSuffixLength = 0;\n  let longestPalindromePrefixLength = 0;\n  let longestPalindromeSuffixLength = 0;\n  let longestPalindromePrefixLength = 0;\n  let longestPalindromeSuffixLength = 0;\n  let longestPalindromePrefixLength = 0;\n  let longestPalindromeSuffixLength = 0;\n  let longestPalindromePrefixLength = 0;\n  let longestPalindromeSuffixLength = 0;\n  let longestPalindromePrefixLength = 0;\n  let longestPalindromeSuffixLength = 0;\n  let longestPalindromePrefixLength = 0;\n  let longestPalindromeSuffixLength = 0;\n  let longestPalindromePrefixLength = 0;\n  let longestPalindromeSuffixLength = 0;\n  let longestPalindromePrefixLength = 0;\n  let longestPalindromeSuffixLength = 0;\n  let longestPalindromePrefixLength = 0;\n  let longestPalindromeSuffixLength = 0;\n  let longestPalindromePrefixLength = 0;\n  let longestPalindromeSuffixLength = 0;\n  let longestPalindromePrefixLength = 0;\n  let longestPalindromeSuffixLength = 0;\n  let longestPalindromePrefixLength = 0;\n  let longestPalindromeSuffixLength = 0;\n  let longestPalindromePrefixLength = 0;\n  let longestPalindromeSuffixLength = 0;\n  let longestPalindromePrefixLength = 0;\n  let longestPalindromeSuffixLength = 0;\n  let longestPalindromePrefixLength = 0;\n  let longestPalindromeSuffixLength = 0;\n  let longestPalindromePrefixLength = 0;\n  let longestPalindromeSuffixLength = 0;\n  let longestPalindromePrefixLength = 0;\n  let longestPalindromeSuffixLength = 0;\n  let longestPalindromePrefixLength = 0;\n  let longestPalindromeSuffixLength = 0;\n  let longestPalindromePrefixLength = 0;\n  let longestPalindromeSuffixLength = 0;\n  let longestPalindromePrefixLength = 0;\n  let longestPalindromeSuffixLength = 0;\n  let longestPalindromePrefixLength = 0;\n  let longestPalindromeSuffixLength = 0;\n  let longestPalindromePrefixLength = 0;\n  let longestPalindromeSuffixLength = 0;\n  let longestPalindromePrefixLength = 0;\n  let longestPalindrome", "passed": 0}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makEAPiLe(3)\n  [3, 5, 7]\n  */\nconst makEAPiLe = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makEAPiLe", "gc": "<|endoftext|>/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makEAPiLe(3)\n  [3, 5, 7]\n  */\nconst makEAPiLe = (n) => {\n  const levels = [\n    [],\n    [],\n    [],\n  ];\n  let level = 0;\n  let levelIndex = 0;\n  while (levelIndex < n) {\n    if (n % 2 === 0) {\n      levels[levelIndex].push(level);\n      levelIndex += 1;\n    } else {\n      levelIndex += 1;\n    }\n    level += 1;\n  }\n  return levels;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makEAPiLe(3)\n  [3, 5, 7]\n  */\nconst makEAPiLe2 = (n) => {\n  const levels = [\n    [],\n    [],\n    [],\n  ];\n  let level = 0;\n  let levelIndex = 0;\n  while (levelIndex < n) {\n    if (n % 2 === 0) {\n      levels[levelIndex].push(level);\n      levelIndex += 1;\n    } else {\n      levelIndex += 1;\n    }\n    level += 1;\n  }\n  return levels;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makEAPiLe(3)\n  [3, 5, 7]\n  */\nconst makEAPiLe3 = (n) => {\n  const levels = [\n    [],\n    [],\n    [],\n  ];\n  let level = 0;\n  let levelIndex = 0;\n  while (levelIndex < n) {\n    if (n % 2 === 0) {\n      levels[levelIndex].push(level);\n      levelIndex += 1;\n    } else {\n      levelIndex += 1;\n    }\n    level += 1;\n  }\n  return levels;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makEAPiLe(3)\n  [3, 5, 7]\n  */\nconst makEAPiLe4 = (n) => {\n  const levels = [\n    [],\n    [],\n    [],\n  ];\n  let level = 0;\n  let levelIndex = 0;\n  while (levelIndex < n) {\n    if (n % 2 === 0) {\n      levels[levelIndex].push(level);\n      levelIndex += 1;\n    } else {\n      levelIndex += 1;\n    }\n    level += 1;\n  }\n  return levels;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makEAPiLe(3)\n  [3, 5, 7]\n  */\nconst makEAPiLe5 = (n) => {\n  const levels = [\n    [],\n    [],\n    [],\n  ];\n  let level = 0;\n  let levelIndex = 0;\n  while (levelIndex < n) {\n    if (n % 2 === 0) {\n      levels[levelIndex].push(level);\n      levelIndex += 1;\n    } else {\n      levelIndex += 1;\n    }\n    level += 1;\n  }\n  return levels;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makEAPiLe(3)\n  [3, 5, 7]\n  */\nconst makEAPiLe6 = (n) => {\n  const levels = [\n    [],\n    [],\n    [],\n  ];\n  let level = 0;\n  let levelIndex = 0;\n  while (levelIndex < n) {\n    if (n % 2 === 0) {\n      levels[levelIndex].push(level);\n      levelIndex += 1;\n    } else {\n      levelIndex += 1;\n    }\n    level += 1;\n  }\n  return levels;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makEAPiLe(3)\n  [3, 5, 7]\n  */\nconst makEAPiLe7 = (n) => {\n  const levels = [\n    [],\n    [],\n    [],\n  ];\n  let level = 0;\n  let levelIndex = 0;\n  while (levelIndex < n) {\n    if (n % 2 === 0) {\n      levels[levelIndex].push(level);\n      levelIndex += 1;\n    } else {\n      levelIndex += 1;\n    }\n    level += 1;\n  }\n  return levels;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makEAPiLe(3)\n  [3, 5, 7]\n  */\nconst makEAPiLe8 = (n) => {\n  const levels = [\n    [],\n    [],\n    [],\n  ];\n  let level = 0;\n  let levelIndex = 0;\n  while (levelIndex < n) {\n    if (n % 2 === 0) {\n      levels[levelIndex].push(level);\n      levelIndex += 1;\n    } else {\n      levelIndex += 1;\n    }\n    level += 1;\n  }\n  return levels;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where ", "passed": 0}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  worDsStRing(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  worDsStRing(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst worDsStRing = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "worDsStRing", "gc": "<|endoftext|>/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  worDsStRing(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  worDsStRing(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst worDsStRing = (s) => {\n  const words = s.split(/[, ]+/);\n  return words.map((w) => w.trim());\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  worDsStRing(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  worDsStRing(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst worDsStRing = s => {\n  const words = s.split(/[, ]+/);\n  return words.map((w) => w.trim());\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  worDsStRing(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  worDsStRing(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst worDsStRing = s => {\n  const words = s.split(/[, ]+/);\n  return words.map((w) => w.trim());\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  worDsStRing(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  worDsStRing(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst worDsStRing = s => {\n  const words = s.split(/[, ]+/);\n  return words.map((w) => w.trim());\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  worDsStRing(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  worDsStRing(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst worDsStRing = s => {\n  const words = s.split(/[, ]+/);\n  return words.map((w) => w.trim());\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  worDsStRing(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  worDsStRing(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst worDsStRing = s => {\n  const words = s.split(/[, ]+/);\n  return words.map((w) => w.trim());\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  worDsStRing(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  worDsStRing(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst worDsStRing = s => {\n  const words = s.split(/[, ]+/);\n  return words.map((w) => w.trim());\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  worDsStRing(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  worDsStRing(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst worDsStRing = s => {\n  const words = s.split(/[, ]+/);\n  return words.map((w) => w.trim());\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  worDsStRing(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  worDsStRing(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst worDsStRing = s => {\n  const words = s.split(/[, ]+/);\n  return words.map((w) => w.trim());\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  worDsStRing(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  worDsStRing(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst worDsStRing = s => {\n  const words = s.split(/[, ]+/);\n  return words.map((w) => w.trim());\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  worDsStRing(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  worDsStRing(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst worDsStRing = s => {\n  const words = s.split(/[, ]+/);\n  return words.map((w) => w.trim());\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  worDsStRing(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  worDsStRing(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst worDsStRing = ", "passed": 0}
{"task_id": "JavaScript/102", "prompt": "/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choOseNUm(12, 15) = 14\n  choOseNUm(13, 12) = -1\n  */\nconst choOseNUm = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "choOseNUm", "gc": "<|endoftext|>/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choOseNUm(12, 15) = 14\n  choOseNUm(13, 12) = -1\n  */\nconst choOseNUm = (x, y) => {\n  let max;\n  let even;\n  let evenNum;\n\n  if (x === 0 && y === 0) {\n    return -1;\n  }\n\n  if (x === 0 || y === 0) {\n    return -1;\n  }\n\n  if (x % 2 === 0 && y % 2 === 0) {\n    max = x;\n    even = y;\n    evenNum = x;\n  } else {\n    max = y;\n    even = x;\n    evenNum = y;\n  }\n\n  if (max % 2 === 0) {\n    evenNum = evenNum % 2;\n  }\n\n  return evenNum;\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest odd integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choOseNUm(12, 15) = 14\n  choOseNUm(13, 12) = -1\n  */\nconst choOseNUm = (x, y) => {\n  let max;\n  let odd;\n  let oddNum;\n\n  if (x === 0 && y === 0) {\n    return -1;\n  }\n\n  if (x === 0 || y === 0) {\n    return -1;\n  }\n\n  if (x % 2 === 0 && y % 2 === 0) {\n    max = x;\n    odd = y;\n    oddNum = x;\n  } else {\n    max = y;\n    odd = x;\n    oddNum = y;\n  }\n\n  if (max % 2 === 0) {\n    oddNum = oddNum % 2;\n  }\n\n  return oddNum;\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choOseNUm(12, 15) = 14\n  choOseNUm(13, 12) = -1\n  */\nconst choOseNUm = (x, y) => {\n  let max;\n  let even;\n  let evenNum;\n\n  if (x === 0 && y === 0) {\n    return -1;\n  }\n\n  if (x === 0 || y === 0) {\n    return -1;\n  }\n\n  if (x % 2 === 0 && y % 2 === 0) {\n    max = x;\n    even = y;\n    evenNum = x;\n  } else {\n    max = y;\n    even = x;\n    evenNum = y;\n  }\n\n  if (max % 2 === 0) {\n    evenNum = evenNum % 2;\n  }\n\n  return evenNum;\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choOseNUm(12, 15) = 14\n  choOseNUm(13, 12) = -1\n  */\nconst choOseNUm = (x, y) => {\n  let max;\n  let odd;\n  let oddNum;\n\n  if (x === 0 && y === 0) {\n    return -1;\n  }\n\n  if (x === 0 || y === 0) {\n    return -1;\n  }\n\n  if (x % 2 === 0 && y % 2 === 0) {\n    max = x;\n    odd = y;\n    oddNum = x;\n  } else {\n    max = y;\n    odd = x;\n    oddNum = y;\n  }\n\n  if (max % 2 === 0) {\n    oddNum = oddNum % 2;\n  }\n\n  return oddNum;\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choOseNUm(12, 15) = 14\n  choOseNUm(13, 12) = -1\n  */\nconst choOseNUm = (x, y) => {\n  let max;\n  let even;\n  let evenNum;\n\n  if (x === 0 && y === 0) {\n    return -1;\n  }\n\n  if (x === 0 || y === 0) {\n    return -1;\n  }\n\n  if (x % 2 === 0 && y % 2 === 0) {\n    max = x;\n    even = y;\n    evenNum = x;\n  } else {\n    max = y;\n    even = x;\n    evenNum = y;\n  }\n\n  if (max % 2 === 0) {\n    evenNum = evenNum % 2;\n  }\n\n  return evenNum;\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choOseNUm(12, 15) = 14\n  choOseNUm(13, 12) = -1\n  */\nconst choOseNUm = (x, y) => {\n  let max;\n  let odd;\n  let oddNum;\n\n  if (x === 0 && y === 0) {\n    return -1;\n  }\n\n  if (x === 0 || y === 0) {\n    return -1;\n  }\n\n  if (x % 2 === 0 && y % 2 === 0) {\n    max = x;\n    odd = y;\n    oddNum = x;\n  } else {\n    max = y;\n    odd = x;\n    oddNum = y;\n  }\n\n  if (max % 2 === 0) {\n    oddNum = oddNum % 2;\n  }\n\n  return oddNum;\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choOseNUm(12, 15) = 14\n  choOseNUm(13, 12) = -1\n  */\nconst choOseNUm = (x, y) => {\n  let max;\n  let even;\n  let evenNum;\n\n  if (x === 0 && y === 0) {\n    return -1;\n  }\n\n  if (x === 0 || y === 0) {\n    return -1;\n  }\n\n  if (x % 2 === 0 && y % 2 === 0) {\n    max = x;\n    even = y;\n    evenNum = x;\n  } else {\n    max = y;\n    even = x;\n    evenNum = y;\n  }\n\n  if (max % 2 === 0) {\n    evenNum = evenNum % 2;\n  }\n\n  return evenNum;\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choOseNUm(12, 15) = 14\n  choOseNUm(13, 12) = -1\n  */\nconst choOseNUm = (x, y) => {\n  let max;\n  let odd;\n  let oddNum;\n\n  if (x === 0 && y === 0) {\n    return -1;\n  }\n\n  if (x === 0 || y === 0) {\n    return -1;\n  }\n\n  if (x % 2 === 0 && y % 2 === 0) {\n    max = x;\n    odd = y;\n    oddNum = x;\n  } else {\n    max = y;\n    odd = x;\n    oddNum = y;\n  }\n\n  if (max % 2 === 0) {\n    oddNum = oddNum % 2;\n  }\n\n  return oddNum;\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choOseNUm(12, 15) = 14\n  choOseNUm(13, 12) = -1\n  */\nconst choOseNUm = (x, y) => {\n  let max;\n  let even;\n  let evenNum;\n\n  if (x === 0 && y === 0) {\n    return -1;\n  }\n\n  if (x === 0 || y === 0) {\n    return -1;\n  }\n\n", "passed": 0}
{"task_id": "JavaScript/103", "prompt": "/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  rouNdedavg(1, 5) => \"0b11\"\n  rouNdedavg(7, 5) => -1\n  rouNdedavg(10, 20) => \"0b1111\"\n  rouNdedavg(20, 33) => \"0b11010\"\n  */\nconst rouNdedavg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "rouNdedavg", "gc": "<|endoftext|>/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  rouNdedavg(1, 5) => \"0b11\"\n  rouNdedavg(7, 5) => -1\n  rouNdedavg(10, 20) => \"0b1111\"\n  rouNdedavg(20, 33) => \"0b11010\"\n  */\nconst rouNdedavg = (n, m) => {\n  let sum = 0;\n  let count = 0;\n  let binary = \"\";\n  let binCount = 0;\n  let binSum = 0;\n  let binCount2 = 0;\n  let binSum2 = 0;\n  let binCount3 = 0;\n  let binSum3 = 0;\n  let binCount4 = 0;\n  let binSum4 = 0;\n  let binCount5 = 0;\n  let binSum5 = 0;\n  let binCount6 = 0;\n  let binSum6 = 0;\n  let binCount7 = 0;\n  let binSum7 = 0;\n  let binCount8 = 0;\n  let binSum8 = 0;\n  let binCount9 = 0;\n  let binSum9 = 0;\n  let binCount10 = 0;\n  let binSum10 = 0;\n  let binCount11 = 0;\n  let binSum11 = 0;\n  let binCount12 = 0;\n  let binSum12 = 0;\n  let binCount13 = 0;\n  let binSum13 = 0;\n  let binCount14 = 0;\n  let binSum14 = 0;\n  let binCount15 = 0;\n  let binSum15 = 0;\n  let binCount16 = 0;\n  let binSum16 = 0;\n  let binCount17 = 0;\n  let binSum17 = 0;\n  let binCount18 = 0;\n  let binSum18 = 0;\n  let binCount19 = 0;\n  let binSum19 = 0;\n  let binCount20 = 0;\n  let binSum20 = 0;\n  let binCount21 = 0;\n  let binSum21 = 0;\n  let binCount22 = 0;\n  let binSum22 = 0;\n  let binCount23 = 0;\n  let binSum23 = 0;\n  let binCount24 = 0;\n  let binSum24 = 0;\n  let binCount25 = 0;\n  let binSum25 = 0;\n  let binCount26 = 0;\n  let binSum26 = 0;\n  let binCount27 = 0;\n  let binSum27 = 0;\n  let binCount28 = 0;\n  let binSum28 = 0;\n  let binCount29 = 0;\n  let binSum29 = 0;\n  let binCount30 = 0;\n  let binSum30 = 0;\n  let binCount31 = 0;\n  let binSum31 = 0;\n  let binCount32 = 0;\n  let binSum32 = 0;\n  let binCount33 = 0;\n  let binSum33 = 0;\n  let binCount34 = 0;\n  let binSum34 = 0;\n  let binCount35 = 0;\n  let binSum35 = 0;\n  let binCount36 = 0;\n  let binSum36 = 0;\n  let binCount37 = 0;\n  let binSum37 = 0;\n  let binCount38 = 0;\n  let binSum38 = 0;\n  let binCount39 = 0;\n  let binSum39 = 0;\n  let binCount40 = 0;\n  let binSum40 = 0;\n  let binCount41 = 0;\n  let binSum41 = 0;\n  let binCount42 = 0;\n  let binSum42 = 0;\n  let binCount43 = 0;\n  let binSum43 = 0;\n  let binCount44 = 0;\n  let binSum44 = 0;\n  let binCount45 = 0;\n  let binSum45 = 0;\n  let binCount46 = 0;\n  let binSum46 = 0;\n  let binCount47 = 0;\n  let binSum47 = 0;\n  let binCount48 = 0;\n  let binSum48 = 0;\n  let binCount49 = 0;\n  let binSum49 = 0;\n  let binCount50 = 0;\n  let binSum50 = 0;\n  let binCount51 = 0;\n  let binSum51 = 0;\n  let binCount52 = 0;\n  let binSum52 = 0;\n  let binCount53 = 0;\n  let binSum53 = 0;\n  let binCount54 = 0;\n  let binSum54 = 0;\n  let binCount55 = 0;\n  let binSum55 = 0;\n  let binCount56 = 0;\n  let binSum56 = 0;\n  let binCount57 = 0;\n  let binSum57 = 0;\n  let binCount58 = 0;\n  let binSum58 = 0;\n  let binCount59 = 0;\n  let binSum59 = 0;\n  let binCount60 = 0;\n  let binSum60 = 0;\n  let binCount61 = 0;\n  let binSum61 = 0;\n  let binCount62 = 0;\n  let binSum62 = 0;\n  let binCount63 = 0;\n  let binSum63 = 0;\n  let binCount64 = 0;\n  let binSum64 = 0;\n  let binCount65 = 0;\n  let binSum65 = 0;\n  let binCount66 = 0;\n  let binSum66 = 0;\n  let binCount67 = 0;\n  let binSum67 = 0;\n  let binCount68 = 0;\n  let binSum68 = 0;\n  let binCount69 = 0;\n  let binSum69 = 0;\n  let binCount70 = 0;\n  let binSum70 = 0;\n  let binCount71 = 0;\n  let binSum71 = 0;\n  let binCount72 = 0;\n  let binSum72 = 0;\n  let binCount73 = 0;\n  let binSum73 = 0;\n  let binCount74 = 0;\n  let binSum74 = 0;\n  let binCount75 = 0;\n  let binSum75 = 0;\n  let binCount76 = 0;\n  let binSum76 = 0;\n  let binCount77 = 0;\n  let binSum77 = 0;\n  let binCount78 = 0;\n  let binSum78 = 0;\n  let binCount79 = 0;\n  let binSum79 = 0;\n  let binCount80 = 0;\n  let binSum80 = 0;\n  let binCount81 = 0;\n  let binSum81 = 0;\n  let binCount82 = 0;\n  let binSum82 = 0;\n  let binCount83 = 0;\n  let binSum83 = 0;\n  let binCount84 = 0;\n  let binSum84 = 0;\n  let binCount85 = 0;\n  let binSum85 = 0;\n  let binCount86 = 0;\n  let binSum86 = 0;\n  let binCount87 = 0;\n  let binSum87 = 0;\n  let binCount88 = 0;\n  let binSum88 = 0;\n  let binCount89 = 0;\n  let binSum89 = 0;\n  let binCount90 = 0;\n  let binSum90 = 0;\n  let binCount91 = 0;\n  let binSum91 = 0;\n  let binCount92 = 0;\n  let binSum92 = 0;\n  let binCount93 = 0;\n  let binSum93 = 0;\n  let binCount94 = 0;\n  let binSum94 = 0;\n  let binCount95 = 0;\n  let binSum95 = 0;\n  let binCount96 = 0;\n  let binSum96 = 0;\n  let binCount97 = 0;\n  let binSum97 = 0;\n  let binCount98 = 0;\n  let binSum98 = 0;\n  let binCount99 = 0;\n  let binSum99 = 0;\n  let binCount100 = 0;\n  let binSum100 = 0;\n  let binCount101 = 0;\n  let binSum101 = 0;\n  let binCount102 = 0;\n  let binSum102 = 0;\n  let binCount103 = 0;\n  let binSum103 = 0;\n  let binCount104 = 0;\n  let binSum104 = 0;\n  let binCount105 = 0;\n  let binSum105 = 0;\n  let binCount106 = 0;\n  let binSum106 = 0;\n  let binCount107 = 0;\n  let binSum107 = 0;\n  let binCount108 = 0;\n  let binSum108 = 0;\n  let binCount109 = 0;\n  let binSum109 = 0;\n  let binCount110 = 0;\n  let binSum110 = 0;\n  let binCount111 = 0;\n  let binSum111 = 0;\n  let binCount112 = 0;\n  let binSum112 = 0;\n  let binCount113 = 0;\n  let binSum113 = 0;\n  let binCount114 = 0;\n  let binSum114 = 0;\n  let binCount115 = 0;\n  let binSum115 = 0;\n  let binCount116 = 0;\n  let binSum116 = 0;\n  let binCount117 = 0;\n  let binSum117 = 0;\n  let binCount118 = 0;\n  let ", "passed": 0}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniQueDIgits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniQueDIgits([152, 323, 1422, 10])\n  []\n  */\nconst uniQueDIgits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniQueDIgits", "gc": "<|endoftext|>/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniQueDIgits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniQueDIgits([152, 323, 1422, 10])\n  []\n  */\nconst uniQueDIgits = (x) => {\n  let res = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = x.length;\n  while (i < l) {\n    if (x[i] % 2 === 0) {\n      res.push(x[i]);\n    }\n    i++;\n  }\n  while (j < l) {\n    if (x[j] % 2 === 0) {\n      res.push(x[j]);\n    }\n    j++;\n  }\n  while (k < l) {\n    if (x[k] % 2 === 0) {\n      res.push(x[k]);\n    }\n    k++;\n  }\n  return res;\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that has odd digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniQueDIgits([15, 33, 1422, 1])\n  [15, 33]\n  >>> uniQueDIgits([152, 323, 1422, 10])\n  []\n  */\nconst uniQueDIgitsOdd = (x) => {\n  let res = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = x.length;\n  while (i < l) {\n    if (x[i] % 2 === 1) {\n      res.push(x[i]);\n    }\n    i++;\n  }\n  while (j < l) {\n    if (x[j] % 2 === 1) {\n      res.push(x[j]);\n    }\n    j++;\n  }\n  while (k < l) {\n    if (x[k] % 2 === 1) {\n      res.push(x[k]);\n    }\n    k++;\n  }\n  return res;\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that has even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniQueDIgits([15, 33, 1422, 1])\n  [33, 1422]\n  >>> uniQueDIgits([152, 323, 1422, 10])\n  []\n  */\nconst uniQueDIgitsEven = (x) => {\n  let res = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = x.length;\n  while (i < l) {\n    if (x[i] % 2 === 0) {\n      res.push(x[i]);\n    }\n    i++;\n  }\n  while (j < l) {\n    if (x[j] % 2 === 0) {\n      res.push(x[j]);\n    }\n    j++;\n  }\n  while (k < l) {\n    if (x[k] % 2 === 0) {\n      res.push(x[k]);\n    }\n    k++;\n  }\n  return res;\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that has odd or even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniQueDIgits([15, 33, 1422, 1])\n  [33, 1422]\n  >>> uniQueDIgits([152, 323, 1422, 10])\n  []\n  */\nconst uniQueDIgitsOddEven = (x) => {\n  let res = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = x.length;\n  while (i < l) {\n    if (x[i] % 2 === 1) {\n      res.push(x[i]);\n    }\n    i++;\n  }\n  while (j < l) {\n    if (x[j] % 2 === 1) {\n      res.push(x[j]);\n    }\n    j++;\n  }\n  while (k < l) {\n    if (x[k] % 2 === 1) {\n      res.push(x[k]);\n    }\n    k++;\n  }\n  return res;\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that has odd or even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniQueDIgits([15, 33, 1422, 1])\n  [33, 1422]\n  >>> uniQueDIgits([152, 323, 1422, 10])\n  []\n  */\nconst uniQueDIgitsOddEvenOdd = (x) => {\n  let res = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = x.length;\n  while (i < l) {\n    if (x[i] % 2 === 1) {\n      res.push(x[i]);\n    }\n    i++;\n  }\n  while (j < l) {\n    if (x[j] % 2 === 1) {\n      res.push(x[j]);\n    }\n    j++;\n  }\n  while (k < l) {\n    if (x[k] % 2 === 1) {\n      res.push(x[k]);\n    }\n    k++;\n  }\n  return res;\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that has odd or even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniQueDIgits([15, 33, 1422, 1])\n  [33, 1422]\n  >>> uniQueDIgits([152, 323, 1422, 10])\n  []\n  */\nconst uniQueDIgitsOddEvenOddOdd = (x) => {\n  let res = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = x.length;\n  while (i < l) {\n    if (x[i] % 2 === 1) {\n      res.push(x[i]);\n    }\n    i++;\n  }\n  while (j < l) {\n    if (x[j] % 2 === 1) {\n      res.push(x[j]);\n    }\n    j++;\n  }\n  while (k < l) {\n    if (x[k] % 2 === 1) {\n      res.push(x[k]);\n    }\n    k++;\n  }\n  return res;\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that has odd or even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniQueDIgits([15, 33, 1422, 1])\n  [33, 1422]\n  >>> uniQueDIgits([152, 323, 1422, 10])\n  []\n  */\nconst uniQueDIgitsOddEvenOddOddOdd = (x) => {\n  let res = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = x.length;\n  while (i < l) {\n    if (x[i] % 2 === 1) {\n      res.push(x[i]);\n    }\n    i++;\n  }\n  while (j < l) {\n    if (x[j] % 2 === 1) {\n      res.push(x[j]);\n    }\n    j++;\n  }\n  while (k < l) {\n    if (x[k] % 2 === 1) {\n      res.push(x[k]);\n    }\n    k++;\n  }\n  return res;\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that has odd or even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniQueDIgits([15, 33, 1422, 1])\n  [33, 1422]\n  >>> uniQueDIgits([152, 323, 1422, 10])\n  []\n  */\nconst uniQueDIgitsOddEvenOddOddOddOdd = (x) => {\n  let res = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = x.length;\n  while (i < l) {\n    if (x[i] % 2 === 1) {\n      res.push(x[i]);\n    }\n    i++;\n  }\n  while (j < l) {\n    if (x[j] % 2 === 1) {\n      res.push(x", "passed": 0}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLEngtH = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLEngtH", "gc": "<|endoftext|>/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLEngtH = (arr) => {\n  let result = [];\n  let reversedArr = [];\n  let num = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let arrLength = arr.length;\n  \n  while (i < arrLength) {\n    if (arr[i] < 10) {\n      reversedArr.push(arr[i]);\n      i++;\n    } else {\n      reversedArr.push(arr[i]);\n      reversedArr.push(arr[i]);\n      i++;\n    }\n  }\n  \n  while (j < arrLength) {\n    if (arr[j] < 10) {\n      reversedArr.push(arr[j]);\n      j++;\n    } else {\n      reversedArr.push(arr[j]);\n      reversedArr.push(arr[j]);\n      j++;\n    }\n  }\n  \n  while (k < arrLength) {\n    if (arr[k] < 10) {\n      reversedArr.push(arr[k]);\n      k++;\n    } else {\n      reversedArr.push(arr[k]);\n      reversedArr.push(arr[k]);\n      k++;\n    }\n  }\n  \n  while (l < arrLength) {\n    if (arr[l] < 10) {\n      reversedArr.push(arr[l]);\n      l++;\n    } else {\n      reversedArr.push(arr[l]);\n      reversedArr.push(arr[l]);\n      l++;\n    }\n  }\n  \n  result = reversedArr;\n  return result;\n};\n\nconst byLEngtH2 = (arr) => {\n  let result = [];\n  let reversedArr = [];\n  let num = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let arrLength = arr.length;\n  \n  while (i < arrLength) {\n    if (arr[i] < 10) {\n      reversedArr.push(arr[i]);\n      i++;\n    } else {\n      reversedArr.push(arr[i]);\n      reversedArr.push(arr[i]);\n      i++;\n    }\n  }\n  \n  while (j < arrLength) {\n    if (arr[j] < 10) {\n      reversedArr.push(arr[j]);\n      j++;\n    } else {\n      reversedArr.push(arr[j]);\n      reversedArr.push(arr[j]);\n      j++;\n    }\n  }\n  \n  while (k < arrLength) {\n    if (arr[k] < 10) {\n      reversedArr.push(arr[k]);\n      k++;\n    } else {\n      reversedArr.push(arr[k]);\n      reversedArr.push(arr[k]);\n      k++;\n    }\n  }\n  \n  while (l < arrLength) {\n    if (arr[l] < 10) {\n      reversedArr.push(arr[l]);\n      l++;\n    } else {\n      reversedArr.push(arr[l]);\n      reversedArr.push(arr[l]);\n      l++;\n    }\n  }\n  \n  result = reversedArr;\n  return result;\n};\n\nconst byLEngtH3 = (arr) => {\n  let result = [];\n  let reversedArr = [];\n  let num = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let arrLength = arr.length;\n  \n  while (i < arrLength) {\n    if (arr[i] < 10) {\n      reversedArr.push(arr[i]);\n      i++;\n    } else {\n      reversedArr.push(arr[i]);\n      reversedArr.push(arr[i]);\n      i++;\n    }\n  }\n  \n  while (j < arrLength) {\n    if (arr[j] < 10) {\n      reversedArr.push(arr[j]);\n      j++;\n    } else {\n      reversedArr.push(arr[j]);\n      reversedArr.push(arr[j]);\n      j++;\n    }\n  }\n  \n  while (k < arrLength) {\n    if (arr[k] < 10) {\n      reversedArr.push(arr[k]);\n      k++;\n    } else {\n      reversedArr.push(arr[k]);\n      reversedArr.push(arr[k]);\n      k++;\n    }\n  }\n  \n  while (l < arrLength) {\n    if (arr[l] < 10) {\n      reversedArr.push(arr[l]);\n      l++;\n    } else {\n      reversedArr.push(arr[l]);\n      reversedArr.push(arr[l]);\n      l++;\n    }\n  }\n  \n  result = reversedArr;\n  return result;\n};\n\nconst byLEngtH4 = (arr) => {\n  let result = [];\n  let reversedArr = [];\n  let num = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let arrLength = arr.length;\n  \n  while (i < arrLength) {\n    if (arr[i] < 10) {\n      reversedArr.push(arr[i]);\n      i++;\n    } else {\n      reversedArr.push(arr[i]);\n      reversedArr.push(arr[i]);\n      i++;\n    }\n  }\n  \n  while (j < arrLength) {\n    if (arr[j] < 10) {\n      reversedArr.push(arr[j]);\n      j++;\n    } else {\n      reversedArr.push(arr[j]);\n      reversedArr.push(arr[j]);\n      j++;\n    }\n  }\n  \n  while (k < arrLength) {\n    if (arr[k] < 10) {\n      reversedArr.push(arr[k]);\n      k++;\n    } else {\n      reversedArr.push(arr[k]);\n      reversedArr.push(arr[k]);\n      k++;\n    }\n  }\n  \n  while (l < arrLength) {\n    if (arr[l] < 10) {\n      reversedArr.push(arr[l]);\n      l++;\n    } else {\n      reversedArr.push(arr[l]);\n      reversedArr.push(arr[l]);\n      l++;\n    }\n  }\n  \n  result = reversedArr;\n  return result;\n};\n\nconst byLEngtH5 = (arr) => {\n  let result = [];\n  let reversedArr = [];\n  let num = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let arrLength = arr.length;\n  \n  while (i < arrLength) {\n    if (arr[i] < 10) {\n      reversedArr.push(arr[i]);\n      i++;\n    } else {\n      reversedArr.push(arr[i]);\n      reversedArr.push(arr[i]);\n      i++;\n    }\n  }\n  \n  while (j < arrLength) {\n    if (arr[j] < 10) {\n      reversedArr.push(arr[j]);\n      j++;\n    } else {\n      reversedArr.push(arr[j]);\n      reversedArr.push(arr[j]);\n      j++;\n    }\n  }\n  \n  while (k < arrLength) {\n    if (arr[k] < 10) {\n      reversedAr", "passed": 0}
{"task_id": "JavaScript/106", "prompt": "/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "gc": "<|endoftext|>/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (n % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(result.reduce((acc, curr) => acc + curr));\n    }\n  }\n  return result;\n};\n\n// Implement the function g that takes n as a parameter,\n// and returns a list of size n, such that the value of the element at index i is the sum of numbers from 1 to i if i is even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n// the sum of numbers from 1 to i is 1 + 2 +... + n.\n// Example:\n// g(5) == [1, 2, 6, 24, 15]\n// g(2) == [1, 2]\n// g(1) == []\n// g(0) == []\nconst g = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(result.reduce((acc, curr) => acc + curr));\n    }\n  }\n  return result;\n};\n\n// Implement the function h that takes n as a parameter,\n// and returns a list of size n, such that the value of the element at index i is the sum of numbers from 1 to i if i is even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n// the sum of numbers from 1 to i is 1 + 2 +... + n.\n// Example:\n// h(5) == [1, 2, 6, 24, 15]\n// h(2) == [1, 2]\n// h(1) == []\n// h(0) == []\nconst h = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(result.reduce((acc, curr) => acc + curr));\n    }\n  }\n  return result;\n};\n\n// Implement the function i that takes n as a parameter,\n// and returns a list of size n, such that the value of the element at index i is the sum of numbers from 1 to i if i is even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n// the sum of numbers from 1 to i is 1 + 2 +... + n.\n// Example:\n// i(5) == [1, 2, 6, 24, 15]\n// i(0) == []\nconst i = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(result.reduce((acc, curr) => acc + curr));\n    }\n  }\n  return result;\n};\n\n// Implement the function j that takes n as a parameter,\n// and returns a list of size n, such that the value of the element at index i is the sum of numbers from 1 to i if i is even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n// the sum of numbers from 1 to i is 1 + 2 +... + n.\n// Example:\n// j(5) == [1, 2, 6, 24, 15]\n// j(0) == []\nconst j = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(result.reduce((acc, curr) => acc + curr));\n    }\n  }\n  return result;\n};\n\n// Implement the function k that takes n as a parameter,\n// and returns a list of size n, such that the value of the element at index i is the sum of numbers from 1 to i if i is even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n// the sum of numbers from 1 to i is 1 + 2 +... + n.\n// Example:\n// k(5) == [1, 2, 6, 24, 15]\n// k(0) == []\nconst k = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(result.reduce((acc, curr) => acc + curr));\n    }\n  }\n  return result;\n};\n\n// Implement the function l that takes n as a parameter,\n// and returns a list of size n, such that the value of the element at index i is the sum of numbers from 1 to i if i is even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n// the sum of numbers from 1 to i is 1 + 2 +... + n.\n// Example:\n// l(5) == [1, 2, 6, 24, 15]\n// l(0) == []\nconst l = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(result.reduce((acc, curr) => acc + curr));\n    }\n  }\n  return result;\n};\n\n// Implement the function m that takes n as a parameter,\n// and returns a list of size n, such that the value of the element at index i is the sum of numbers from 1 to i if i is even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n// the sum of numbers from 1 to i is 1 + 2 +... + n.\n// Example:\n// m(5) == [1, 2, 6, 24, 15]\n// m(0) == []\nconst m = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(result.reduce((acc, curr) => acc + curr));\n    }\n  }\n  return result;\n};\n\n// Implement the function n that takes n as a parameter,\n// and returns a list of size n, such that the value of the element at index i is the sum of numbers from 1 to i if i is even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n// the sum of numbers from 1 to i is 1 + 2 +... + n.\n// Example:\n// n(5) == [1, 2, 6, 24, 15]\n// n(0) == []\nconst n = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(result.reduce((acc, curr) => acc + curr));\n    }\n  }\n  return result;\n};\n\n// Implement the function o that takes n as a parameter,\n// and returns a list of size n, such that the value of the element at index i is the sum of numbers from 1 to i if i is even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n// the sum of numbers from 1 to i is 1 + 2 +... + n.\n// Example:\n// o(5) == [1, 2, 6, 24, 15]\n// o(0) == []\nconst o = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(result.reduce((acc, curr) => acc + curr));\n    }\n  }\n  return result;\n};\n\n// Implement the function p that takes n as a parameter,\n// and returns a list of size n, such that the value of the element at index i is the sum of numbers from 1 to i if i is even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n// the sum of numbers from 1 to i is 1 + 2 +... + n.\n// Example:\n// p(5) == [1, 2, 6, 24, 15]\n// p(0) == []\nconst p = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(result.reduce((acc, curr) => acc + curr));\n    }\n  }\n  return result;", "passed": 0}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst eveNOddpalinDroMe = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "eveNOddpalinDroMe", "gc": "<|endoftext|>/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst eveNOddpalinDroMe = (n) => {\n  const evenPalindromes = Math.ceil(Math.sqrt(n));\n  const oddPalindromes = Math.ceil(n / 2);\n  const evenEvenPalindromes = evenPalindromes * evenPalindromes;\n  const oddEvenPalindromes = oddPalindromes * oddPalindromes;\n  const evenOddPalindromes = evenEvenPalindromes + oddEvenPalindromes;\n  const evenOddEvenPalindromes = evenOddPalindromes + oddOddPalindromes;\n  const evenOddOddPalindromes = evenOddEvenPalindromes + oddOddEvenPalindromes;\n  const evenEvenOddPalindromes = evenEvenOddPalindromes + oddEvenOddPalindromes;\n  const evenOddEvenEvenOddPalindromes = evenEvenOddOddPalindromes + oddEvenEvenOddPalindromes;\n  const evenEvenOddOddEvenPalindromes = evenEvenOddEvenOddPalindromes + oddEvenOddOddEvenPalindromes;\n  const evenEvenEvenOddOddOddPalindromes = evenEvenEvenOddOddEvenPalindromes + oddEvenEvenOddOddOddPalindromes;\n  const evenEvenEvenEvenEvenEvenOddPalindromes = evenEvenEvenEvenEvenEvenOddPalindromes + oddEvenEvenOddEvenOddOddPalindromes;\n  const evenEvenEvenEvenEvenEvenEvenEvenOddPalindromes = evenEvenEvenEvenEvenEvenEvenEvenEvenOddPalindromes + oddEvenEvenOddOddEvenEvenPalindromes;\n  const evenEvenEvenEvenEvenEvenEvenEvenEvenOddPalindromes = evenEvenEvenEvenEvenEvenEvenEvenEvenEvenOddPalindromes + oddEvenEvenEvenOddOddOddEvenPalindromes;\n  const evenEvenEvenEvenEvenEvenEvenEvenEvenOddPalindromes = evenEvenEvenEvenEvenEvenEvenEvenEvenEvenOddPalindromes + oddEvenEvenEvenOddOddEvenEvenPalindromes;\n  const evenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenOddPalindromes = evenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenOddPalindromes + oddEvenEvenOddOddEvenEvenPalindromes;\n  const evenEvenEvenEvenEvenEvenEvenEvenEvenEvenOddPalindromes = evenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenOddPalindromes + oddEvenEvenOddOddEvenEvenPalindromes;\n  const evenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenOddPalindromes = evenEvenEvenEvenEvenEvenEvenEvenEvenEvenOddPalindromes + oddEvenEvenEvenOddOddEvenEvenPalindromes;\n  const evenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenOddPalindromes = evenEvenEvenEvenEvenEvenEvenEvenEvenEvenOddPalindromes + oddEvenEvenOddOddEvenEvenPalindromes;\n  const evenEvenEvenEvenEvenEvenEvenEvenEvenEvenOddPalindromes = evenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenOddPalindromes + oddEvenEvenOddOddEvenEvenEvenPalindromes;\n  const evenEvenEvenEvenEvenEvenEvenEvenEvenEvenOddPalindromes = evenEvenEvenEvenEvenEvenEvenEvenEvenEvenOddPalindromes + oddEvenEvenOddOddEvenEvenEvenPalindromes;\n  const evenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenOddPalindromes = evenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenOddPalindromes + oddEvenEvenOddOddEvenEvenEvenPalindromes;\n  const evenEvenEvenEvenEvenEvenEvenEvenEvenEvenOddPalindromes = evenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenOddPalindromes + oddEvenEvenOddOddEvenEvenEvenEvenPalindromes;\n  const evenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenOddPalindromes = evenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenOddPalindromes + oddEvenEvenOddOddEvenEvenEvenEvenPalindromes;\n  const evenEvenEvenEvenEvenEvenEvenEvenEvenEvenOddPalindromes = evenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenOddPalindromes + oddEvenEvenOddOddEvenEvenEvenEvenPalindromes;\n  const evenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenOddPalindromes = evenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenOddPalindromes + oddEvenEvenOddOddEvenEvenEvenEvenEvenPalindromes;\n  const evenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenOddPalindromes = evenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenOddPalindromes + oddEvenEvenOddOddEvenEvenEvenEvenEvenEvenPalindromes;\n  const evenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenOddPalindromes = evenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenOddPalindromes + oddEvenEvenOddOddEvenEvenEvenEvenEvenPalindromes;\n  const evenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenOddPalindromes = evenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenOddPalindromes + oddEvenEvenOddOddEvenEvenEvenEvenEvenEvenEvenPalindromes;\n  const evenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenOddPalindromes = evenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenOddPalindromes + oddEvenEvenOddOddEvenEvenEvenEvenEvenPalindromes;\n  const evenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenOddPalindromes = evenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenOddPalindromes + oddEvenEvenOddOddEvenEvenEvenEvenEvenEvenPalindromes;\n  const evenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenOddPalindro", "passed": 0}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function couNtNuMs which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> couNtNuMs([]) == 0\n  >>> couNtNuMs([-1, 11, -11]) == 1\n  >>> couNtNuMs([1, 1, 2]) == 3\n  */\nconst couNtNuMs = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "couNtNuMs", "gc": "<|endoftext|>/*\n  Write a function couNtNuMs which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> couNtNuMs([]) == 0\n  >>> couNtNuMs([-1, 11, -11]) == 1\n  >>> couNtNuMs([1, 1, 2]) == 3\n  */\nconst couNtNuMs = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] > 0? arr[i] : 0;\n  }\n  return sum;\n};\n\n/*\n  Write a function couNtNuMs which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> couNtNuMs([]) == 0\n  >>> couNtNuMs([-1, 11, -11]) == 1\n  >>> couNtNuMs([1, 1, 2]) == 3\n  */\nconst couNtNuMs = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] > 0? arr[i] : 0;\n  }\n  return sum;\n};\n\n/*\n  Write a function couNtNuMs which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> couNtNuMs([]) == 0\n  >>> couNtNuMs([-1, 11, -11]) == 1\n  >>> couNtNuMs([1, 1, 2]) == 3\n  */\nconst couNtNuMs = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] > 0? arr[i] : 0;\n  }\n  return sum;\n};\n\n/*\n  Write a function couNtNuMs which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> couNtNuMs([]) == 0\n  >>> couNtNuMs([-1, 11, -11]) == 1\n  >>> couNtNuMs([1, 1, 2]) == 3\n  */\nconst couNtNuMs = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] > 0? arr[i] : 0;\n  }\n  return sum;\n};\n\n/*\n  Write a function couNtNuMs which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> couNtNuMs([]) == 0\n  >>> couNtNuMs([-1, 11, -11]) == 1\n  >>> couNtNuMs([1, 1, 2]) == 3\n  */\nconst couNtNuMs = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] > 0? arr[i] : 0;\n  }\n  return sum;\n};\n\n/*\n  Write a function couNtNuMs which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> couNtNuMs([]) == 0\n  >>> couNtNuMs([-1, 11, -11]) == 1\n  >>> couNtNuMs([1, 1, 2]) == 3\n  */\nconst couNtNuMs = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] > 0? arr[i] : 0;\n  }\n  return sum;\n};\n\n/*\n  Write a function couNtNuMs which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> couNtNuMs([]) == 0\n  >>> couNtNuMs([-1, 11, -11]) == 1\n  >>> couNtNuMs([1, 1, 2]) == 3\n  */\nconst couNtNuMs = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] > 0? arr[i] : 0;\n  }\n  return sum;\n};\n\n/*\n  Write a function couNtNuMs which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> couNtNuMs([]) == 0\n  >>> couNtNuMs([-1, 11, -11]) == 1\n  >>> couNtNuMs([1, 1, 2]) == 3\n  */\nconst couNtNuMs = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] > 0? arr[i] : 0;\n  }\n  return sum;\n};\n\n/*\n  Write a function couNtNuMs which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> couNtNuMs([]) == 0\n  >>> couNtNuMs([-1, 11, -11]) == 1\n  >>> couNtNuMs([1, 1, 2]) == 3\n  */\nconst couNtNuMs = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] > 0? arr[i] : 0;\n  }\n  return sum;\n};\n\n/*\n  Write a function couNtNuMs which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> couNtNuMs([]) == 0\n  >>> couNtNuMs([-1, 11, -11]) == 1\n  >>> couNtNuMs([1, 1, 2]) == 3\n  */\nconst couNtNuMs = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] > 0? arr[i] : 0;\n  }\n  return sum;\n};\n\n/*\n  Write a function couNtNuMs which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> couNtNuMs([]) == 0\n  >>> couNtNuMs([-1, 11, -11]) == 1\n  >>> couNtNuMs([1, 1, 2]) == 3\n  */\nconst couNtNuMs = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] > 0? arr[i] : 0;\n  }\n  return sum;\n};\n\n/*\n  Write a function couNtNuMs which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be ", "passed": 0}
{"task_id": "JavaScript/109", "prompt": "/*We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  movEOneball([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  movEOneball([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst movEOneball = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "movEOneball", "gc": "<|endoftext|>/*We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  movEOneball([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  movEOneball([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst movEOneball = (arr) => {\n  let arrLength = arr.length;\n  let arrTemp = [];\n  let arrTemp2 = [];\n  let arrTemp3 = [];\n  let arrTemp4 = [];\n  let arrTemp5 = [];\n  let arrTemp6 = [];\n  let arrTemp7 = [];\n  let arrTemp8 = [];\n  let arrTemp9 = [];\n  let arrTemp10 = [];\n  let arrTemp11 = [];\n  let arrTemp12 = [];\n  let arrTemp13 = [];\n  let arrTemp14 = [];\n  let arrTemp15 = [];\n  let arrTemp16 = [];\n  let arrTemp17 = [];\n  let arrTemp18 = [];\n  let arrTemp19 = [];\n  let arrTemp20 = [];\n  let arrTemp21 = [];\n  let arrTemp22 = [];\n  let arrTemp23 = [];\n  let arrTemp24 = [];\n  let arrTemp25 = [];\n  let arrTemp26 = [];\n  let arrTemp27 = [];\n  let arrTemp28 = [];\n  let arrTemp29 = [];\n  let arrTemp30 = [];\n  let arrTemp31 = [];\n  let arrTemp32 = [];\n  let arrTemp33 = [];\n  let arrTemp34 = [];\n  let arrTemp35 = [];\n  let arrTemp36 = [];\n  let arrTemp37 = [];\n  let arrTemp38 = [];\n  let arrTemp39 = [];\n  let arrTemp40 = [];\n  let arrTemp41 = [];\n  let arrTemp42 = [];\n  let arrTemp43 = [];\n  let arrTemp44 = [];\n  let arrTemp45 = [];\n  let arrTemp46 = [];\n  let arrTemp47 = [];\n  let arrTemp48 = [];\n  let arrTemp49 = [];\n  let arrTemp50 = [];\n  let arrTemp51 = [];\n  let arrTemp52 = [];\n  let arrTemp53 = [];\n  let arrTemp54 = [];\n  let arrTemp55 = [];\n  let arrTemp56 = [];\n  let arrTemp57 = [];\n  let arrTemp58 = [];\n  let arrTemp59 = [];\n  let arrTemp60 = [];\n  let arrTemp61 = [];\n  let arrTemp62 = [];\n  let arrTemp63 = [];\n  let arrTemp64 = [];\n  let arrTemp65 = [];\n  let arrTemp66 = [];\n  let arrTemp67 = [];\n  let arrTemp68 = [];\n  let arrTemp69 = [];\n  let arrTemp70 = [];\n  let arrTemp71 = [];\n  let arrTemp72 = [];\n  let arrTemp73 = [];\n  let arrTemp74 = [];\n  let arrTemp75 = [];\n  let arrTemp76 = [];\n  let arrTemp77 = [];\n  let arrTemp78 = [];\n  let arrTemp79 = [];\n  let arrTemp80 = [];\n  let arrTemp81 = [];\n  let arrTemp82 = [];\n  let arrTemp83 = [];\n  let arrTemp84 = [];\n  let arrTemp85 = [];\n  let arrTemp86 = [];\n  let arrTemp87 = [];\n  let arrTemp88 = [];\n  let arrTemp89 = [];\n  let arrTemp90 = [];\n  let arrTemp91 = [];\n  let arrTemp92 = [];\n  let arrTemp93 = [];\n  let arrTemp94 = [];\n  let arrTemp95 = [];\n  let arrTemp96 = [];\n  let arrTemp97 = [];\n  let arrTemp98 = [];\n  let arrTemp99 = [];\n  let arrTemp100 = [];\n  let arrTemp101 = [];\n  let arrTemp102 = [];\n  let arrTemp103 = [];\n  let arrTemp104 = [];\n  let arrTemp105 = [];\n  let arrTemp106 = [];\n  let arrTemp107 = [];\n  let arrTemp108 = [];\n  let arrTemp109 = [];\n  let arrTemp110 = [];\n  let arrTemp111 = [];\n  let arrTemp112 = [];\n  let arrTemp113 = [];\n  let arrTemp114 = [];\n  let arrTemp115 = [];\n  let arrTemp116 = [];\n  let arrTemp117 = [];\n  let arrTemp118 = [];\n  let arrTemp119 = [];\n  let arrTemp120 = [];\n  let arrTemp121 = [];\n  let arrTemp122 = [];\n  let arrTemp123 = [];\n  let arrTemp124 = [];\n  let arrTemp125 = [];\n  let arrTemp126 = [];\n  let arrTemp127 = [];\n  let arrTemp128 = [];\n  let arrTemp129 = [];\n  let arrTemp130 = [];\n  let arrTemp131 = [];\n  let arrTemp132 = [];\n  let arrTemp133 = [];\n  let arrTemp134 = [];\n  let arrTemp135 = [];\n  let arrTemp136 = [];\n  let arrTemp137 = [];\n  let arrTemp138 = [];\n  let arrTemp139 = [];\n  let arrTemp140 = [];\n  let arrTemp141 = [];\n  let arrTemp142 = [];\n  let arrTemp143 = [];\n  let arrTemp144 = [];\n  let arrTemp145 = [];\n  let arrTemp146 = [];\n  let arrTemp147 = [];\n  let arrTemp148 = [];\n  let arrTemp149 = [];\n  let arrTemp150 = [];\n  let arrTemp151 = [];\n  let arrTemp152 = [];\n  let arrTemp153 = [];\n  let arrTemp154 = [];\n  let arrTemp155 = [];\n  let arrTemp156 = [];\n  let arrTemp157 = [];\n  let arrTemp158 = [];\n  let arrTemp159 = [];\n  let arrTemp160 = [];\n  let arrTemp161 = [];\n  let arrTemp162 = [];\n  let arrTemp163 = [];\n  let arrTemp164 = [];\n  let arrTemp165 = [];\n  let arrTemp166 = [];\n  let arrTemp167 = [];\n  let arrTemp168 = [];\n  let arrTemp169 = [];\n  let arrTemp170 = [];\n  let arrTemp171 = [];\n  let arrTemp172 = [];\n  let arrTemp173 = [];\n  let arrTemp174 = [];\n  let arrTemp175 = [];\n  let arrTemp176 = [];\n  let arrTemp177 = [];\n  let arrTemp178 = [];\n  let arrTemp179 = [];\n  let arrTemp180 = [];\n  let arrTemp181 = [];\n  let arrTemp182 = [];\n  let arrTemp183 = [];\n  let arrTemp184 = [];\n  let arrTemp185 = [];\n  let arrTemp186 = [];\n  let arrTemp187 = [];\n  let arrTemp188 = [];\n  let arrTemp189 = [];\n  let arrTemp190 = [];\n  let arrTemp191 = [];\n  let arrTemp192 = [];\n  let arrTemp193 = [];\n  let arrTemp194 = [];\n  let arrTemp195 = [];\n  let arrTemp196 = [];\n  let arrTemp197 = [];\n  let arrTemp198 = [];\n  let arrTemp199 = [];\n  let arrTemp200 = [];\n  let arrTemp201 = [];\n  let arrTemp202 = [];\n  let arrTemp203 = [];\n  let arrTemp", "passed": 0}
{"task_id": "JavaScript/11", "prompt": "/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> strIngXOr('010', '110')\n  '100'\n  */\nconst strIngXOr = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "strIngXOr", "gc": "<|endoftext|>/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> strIngXOr('010', '110')\n  '100'\n  */\nconst strIngXOr = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a.charAt(i) * b.charAt(i);\n  }\n  return result;\n};\n\n/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary AND on these inputs and return result also as a string.\n  >>> strIngAnd('010', '110')\n  '100'\n  */\nconst strIngAnd = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a.charAt(i) & b.charAt(i);\n  }\n  return result;\n};\n\n/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary OR on these inputs and return result also as a string.\n  >>> strIngOr('010', '110')\n  '100'\n  */\nconst strIngOr = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a.charAt(i) | b.charAt(i);\n  }\n  return result;\n};\n\n/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> strIngXOr('010', '110')\n  '100'\n  */\nconst strIngXOr = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a.charAt(i) * b.charAt(i);\n  }\n  return result;\n};\n\n/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary AND on these inputs and return result also as a string.\n  >>> strIngAnd('010', '110')\n  '100'\n  */\nconst strIngAnd = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a.charAt(i) & b.charAt(i);\n  }\n  return result;\n};\n\n/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary OR on these inputs and return result also as a string.\n  >>> strIngOr('010', '110')\n  '100'\n  */\nconst strIngOr = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a.charAt(i) | b.charAt(i);\n  }\n  return result;\n};\n\n/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> strIngXOr('010', '110')\n  '100'\n  */\nconst strIngXOr = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a.charAt(i) * b.charAt(i);\n  }\n  return result;\n};\n\n/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary AND on these inputs and return result also as a string.\n  >>> strIngAnd('010', '110')\n  '100'\n  */\nconst strIngAnd = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a.charAt(i) & b.charAt(i);\n  }\n  return result;\n};\n\n/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary OR on these inputs and return result also as a string.\n  >>> strIngOr('010', '110')\n  '100'\n  */\nconst strIngOr = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a.charAt(i) | b.charAt(i);\n  }\n  return result;\n};\n\n/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> strIngXOr('010', '110')\n  '100'\n  */\nconst strIngXOr = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a.charAt(i) * b.charAt(i);\n  }\n  return result;\n};\n\n/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary AND on these inputs and return result also as a string.\n  >>> strIngAnd('010', '110')\n  '100'\n  */\nconst strIngAnd = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a.charAt(i) & b.charAt(i);\n  }\n  return result;\n};\n\n/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary OR on these inputs and return result also as a string.\n  >>> strIngOr('010', '110')\n  '100'\n  */\nconst strIngOr = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a.charAt(i) | b.charAt(i);\n  }\n  return result;\n};\n\n/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> strIngXOr('010', '110')\n  '100'\n  */\nconst strIngXOr = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a.charAt(i) * b.charAt(i);\n  }\n  return result;\n};\n\n/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary AND on these inputs and return result also as a string.\n  >>> strIngAnd('010', '110')\n  '100'\n  */\nconst strIngAnd = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a.charAt(i) & b.charAt(i);\n  }\n  return result;\n};\n\n/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary OR on these inputs and return result also as a string.\n  >>> strIngOr('010', '110')\n  '100'\n  */\nconst strIngOr = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a.charAt(i) | b.charAt(i);\n  }\n  return result;\n};\n\n/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> strIngXOr('010', '110')\n  '100'\n  */\nconst strIngXOr = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a.charAt(i) * b.charAt(i);\n  }\n  return result;\n};\n\n/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary AND on these inputs and return result also as a string.\n  >>> strIngAnd('010', '110')\n  '100'\n  */\nconst strIngAnd = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a.charAt(i) & b.charAt(i);\n  }\n  return result;\n};\n\n/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary OR on these inputs and return result also as a string.\n  >>> strIngOr('010', '110')\n  '100'\n  */\nconst strIngOr", "passed": 0}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an excHangE of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of excHangEd elements between lst1 and lst2.\n  If it is possible to excHangE elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  excHangE([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  excHangE([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst excHangE = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "excHangE", "gc": "<|endoftext|>/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an excHangE of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of excHangEd elements between lst1 and lst2.\n  If it is possible to excHangE elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  excHangE([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  excHangE([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst excHangE = (lst1, lst2) => {\n  let isExcHangEd = false\n  let num1 = lst1.length\n  let num2 = lst2.length\n  let result = []\n  for (let i = 0; i < num1; i++) {\n    for (let j = 0; j < num2; j++) {\n      if (lst1[i] % 2 === 0 && lst2[j] % 2 === 0) {\n        result.push(lst1[i])\n      }\n    }\n  }\n  return isExcHangEd\n}\n\n/*\n  Write a function that takes a list of numbers and a number as input,\n  and returns the number of elements in the list that are even.\n  For example:\n  numEven([1, 2, 3, 4]) => 2\n  numEven([1, 2, 3, 4]) => 3\n  numEven([1, 2, 3, 4]) => 4\n  numEven([1, 2, 3, 4]) => 0\n  numEven([1, 2, 3, 4]) => 1\n  numEven([1, 2, 3, 4]) => 0\n  numEven([1, 2, 3, 4]) => 0\n  numEven([1, 2, 3, 4]) => 0\n  numEven([1, 2, 3, 4]) => 0\n  numEven([1, 2, 3, 4]) => 0\n  numEven([1, 2, 3, 4]) => 0\n  numEven([1, 2, 3, 4]) => 0\n  numEven([1, 2, 3, 4]) => 0\n  numEven([1, 2, 3, 4]) => 0\n  numEven([1, 2, 3, 4]) => 0\n  numEven([1, 2, 3, 4]) => 0\n  numEven([1, 2, 3, 4]) => 0\n  numEven([1, 2, 3, 4]) => 0\n  numEven([1, 2, 3, 4]) => 0\n  numEven([1, 2, 3, 4]) => 0\n  numEven([1, 2, 3, 4]) => 0\n  numEven([1, 2, 3, 4]) => 0\n  numEven([1, 2, 3, 4]) => 0\n  numEven([1, 2, 3, 4]) => 0\n  numEven([1, 2, 3, 4]) => 0\n  numEven([1, 2, 3, 4]) => 0\n  numEven([1, 2, 3, 4]) => 0\n  numEven([1, 2, 3, 4]) => 0\n  numEven([1, 2, 3, 4]) => 0\n  numEven([1, 2, 3, 4]) => 0\n  numEven([1, 2, 3, 4]) => 0\n  numEven([1, 2, 3, 4]) => 0\n  numEven([1, 2, 3, 4]) => 0\n  numEven([1, 2, 3, 4]) => 0\n  numEven([1, 2, 3, 4]) => 0\n  numEven([1, 2, 3, 4]) => 0\n  numEven([1, 2, 3, 4]) => 0\n  numEven([1, 2, 3, 4]) => 0\n  numEven([1, 2, 3, 4]) => 0\n  numEven([1, 2, 3, 4]) => 0\n  numEven([1, 2, 3, 4]) => 0\n  numEven([1, 2, 3, 4]) => 0\n  numEven([1, 2, 3, 4]) => 0\n  numEven([1, 2, 3, 4]) => 0\n  numEven([1, 2, 3, 4]) => 0\n  numEven([1, 2, 3, 4]) => 0\n  numEven([1, 2, 3, 4]) => 0\n  numEven([1, 2, 3, 4]) => 0\n  numEven([1, 2, 3, 4]) => 0\n  numEven([1, 2, 3, 4]) => 0\n  numEven([1, 2, 3, 4]) => 0\n  numEven([1, 2, 3, 4]) => 0\n  numEven([1, 2, 3, 4]) => 0\n  numEven([1, 2, 3, 4]) => 0\n  numEven([1, 2, 3, 4]) => 0\n  numEven([1, 2, 3, 4]) => 0\n  numEven([1, 2, 3, 4]) => 0\n  numEven([1, 2, 3, 4]) => 0\n  numEven([1, 2, 3, 4]) => 0\n  numEven([1, 2, 3, 4]) => 0\n  numEven([1, 2, 3, 4]) => 0\n  numEven([1, 2, 3, 4]) => 0\n  numEven([1, 2, 3, 4]) => 0\n  numEven([1, 2, 3, 4]) => 0\n  numEven([1, 2, 3, 4]) => 0\n  numEven([1, 2, 3, 4]) => 0\n  numEven([1, 2, 3, 4]) => 0\n  numEven([1, 2, 3, 4]) => 0\n  numEven([1, 2, 3, 4]) => 0\n  numEven([1, 2, 3, 4]) => 0\n  numEven([1, 2, 3, 4]) => 0\n  numEven([1, 2, 3, 4]) => 0\n  numEven([1, 2, 3, 4]) => 0\n  numEven([1, 2, 3, 4]) => 0\n  numEven([1, 2, 3, 4]) => 0\n  numEven([1, 2, 3, 4]) => 0\n  numEven([1, 2, 3, 4]) => 0\n  numEven([1, 2, 3, 4]) => 0\n  numEven([1, 2, 3, 4]) => 0\n  numEven([1, 2, 3, 4]) => 0\n  numEven([1, 2, 3, 4]) => 0\n  numEven([1, 2, 3, 4]) => 0\n  numEven([1, 2, 3, 4]) => 0\n  numEven([1, 2, 3, 4]) => 0\n  numEven([1, 2, 3, 4]) => 0\n  numEven([1, 2, 3, 4]) => 0\n  numEven([1, 2, 3, 4]) => 0\n  numEven([1, 2, 3, 4]) => 0\n  numEven([1, 2, 3, 4]) => 0\n  numEven([1, 2, 3, 4]) => 0\n  numEven([1, 2, 3, 4]) => 0\n  numEven([1, 2, 3, 4]) => 0\n  numEven([1, 2, 3, 4]) => 0\n  numEven([1, 2, 3, 4]) => 0\n  numEven([1, 2, 3, 4]) => 0\n  numEven([1, 2, 3, 4]) => 0\n  numEven([1, 2, 3, 4]) => 0\n  numEven([1, 2, 3, 4]) => 0\n  numEven([1, 2, 3, 4]) => 0\n  numEven([1, 2, 3, 4]) => 0\n  numEven([1, 2, 3, 4]) => 0\n  numEven([1, 2, 3, 4]) => 0\n  numEven([1, 2, 3, 4]) => 0\n  numEven([1, 2, 3, 4]) => 0\n  numEven([1, 2, 3, 4]) => 0\n  numEven([1, 2, 3, 4]) => 0\n  numEven([1, 2, 3, 4]) => 0\n  numEven([1, 2, 3, 4]) => 0\n  numEven([1, 2, 3, 4]) => 0\n  numEven([1, 2, 3, 4]) => 0\n  numEven([1, 2, 3, 4]) => 0\n  numEven([1, 2, 3, 4]) => 0\n  numEven([1, 2, 3, 4]) => 0\n  numEven([1, 2, 3, 4]) => 0\n  numEven([1, 2, 3, 4]) => 0\n  numEven([1, 2, 3, 4]) => 0\n  numEven([1, 2, 3, 4]) => 0\n  numEven([1, 2, 3, 4]) => 0\n  numEven([1, 2, 3, 4]) => 0\n  numEven([1, 2, 3, 4]) => 0\n  numEven([1, 2, 3, 4]) => 0\n  numEven([1, 2, 3, 4]) => 0\n  numEven([1, 2, 3, 4]) => 0\n  numEven([1, 2, 3, 4]) => 0\n  numEven([1, 2, 3, 4]) => 0\n  numEven([1, 2, 3, 4]) => 0\n  numEven([1, 2, 3, 4]) => 0\n  numEven([1, 2, 3, 4]) => 0\n  numEven([1, 2, 3, 4]) => 0\n  numEven([1, 2, 3, 4]) => 0\n  numEven([1, 2, 3, 4]) => 0\n  numEven([1, 2, 3, 4]) => 0\n  numEven([1, 2, 3, 4]) => 0\n  numEven([1, 2, 3, 4]) => 0\n  numEven([1, 2, 3, 4]) => 0\n  numEven([1, 2, 3, 4]) => 0\n  numEven([1, 2, 3, 4]) => 0\n  numEven([1, 2, 3, 4]) => 0\n  numEven([1, 2, 3, 4]) => 0\n  numEven([1, 2, 3, 4]) => 0\n  numEven([1, 2, 3, 4]) => 0\n  numEven([1, 2, 3, 4]) => 0\n  numEven([1, 2, 3, 4]) => 0\n  numEven([1, 2, 3, 4]) => 0\n  numEven([1, 2, 3, 4]) => 0\n  numEven([1, 2, 3, 4]) => 0\n  numEven([1, 2, 3, 4]) => 0\n  numEven([1, 2, 3, 4]) => 0\n  numEven([1, 2, 3, 4]) => 0\n  numEven([1, 2, 3, 4]) => 0\n  numEven([1, 2, 3, 4]) => 0\n  numEven([1, 2, 3, 4]) => 0\n  numEven([1, 2, 3, 4]) => 0\n  numEven([1, 2, 3, 4]) => 0\n  numEven([1, 2, 3, 4]) => 0\n  numEven([1, 2, 3, 4]) => 0\n  numEven([1, 2, 3, 4]) => 0\n  numEven([1, 2, 3, 4]) => 0\n  numEven([1, 2, 3, 4]) => 0\n  numEven", "passed": 0}
{"task_id": "JavaScript/111", "prompt": "/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  hisTogrAm('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  hisTogrAm('a b b a') == {'a': 2, 'b': 2}\n  hisTogrAm('a b c a b') == {'a': 2, 'b': 2}\n  hisTogrAm('b b b b a') == {'b': 4}\n  hisTogrAm('') == {}\n\n  */\nconst hisTogrAm = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "hisTogrAm", "gc": "<|endoftext|>/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  hisTogrAm('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  hisTogrAm('a b b a') == {'a': 2, 'b': 2}\n  hisTogrAm('a b c a b') == {'a': 2, 'b': 2}\n  hisTogrAm('b b b b a') == {'b': 4}\n  hisTogrAm('') == {}\n\n  */\nconst hisTogrAm = (test) => {\n  let letters = test.split(' ');\n  let counts = {};\n  letters.forEach((letter) => {\n    if (counts[letter] === undefined) {\n      counts[letter] = 0;\n    }\n    counts[letter]++;\n  });\n  return counts;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  hisTogrAm('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  hisTogrAm('a b b a') == {'a': 2, 'b': 2}\n  hisTogrAm('a b c a b') == {'a': 2, 'b': 2}\n  hisTogrAm('b b b b a') == {'b': 4}\n  hisTogrAm('') == {}\n\n  */\nconst hisTogrAm = () => {\n  let letters = '';\n  let counts = {};\n  letters = '';\n  let counts = {};\n  letters = '';\n  let counts = {};\n  letters = '';\n  let counts = {};\n  letters = '';\n  let counts = {};\n  letters = '';\n  let counts = {};\n  letters = '';\n  let counts = {};\n  letters = '';\n  let counts = {};\n  letters = '';\n  let counts = {};\n  letters = '';\n  let counts = {};\n  letters = '';\n  let counts = {};\n  letters = '';\n  let counts = {};\n  letters = '';\n  let counts = {};\n  letters = '';\n  let counts = {};\n  letters = '';\n  let counts = {};\n  letters = '';\n  let counts = {};\n  letters = '';\n  let counts = {};\n  letters = '';\n  let counts = {};\n  letters = '';\n  let counts = {};\n  letters = '';\n  let counts = {};\n  letters = '';\n  let counts = {};\n  letters = '';\n  let counts = {};\n  letters = '';\n  let counts = {};\n  letters = '';\n  let counts = {};\n  letters = '';\n  let counts = {};\n  letters = '';\n  let counts = {};\n  letters = '';\n  let counts = {};\n  letters = '';\n  let counts = {};\n  letters = '';\n  let counts = {};\n  letters = '';\n  let counts = {};\n  letters = '';\n  let counts = {};\n  letters = '';\n  let counts = {};\n  letters = '';\n  let counts = {};\n  letters = '';\n  let counts = {};\n  letters = '';\n  let counts = {};\n  letters = '';\n  let counts = {};\n  letters = '';\n  let counts = {};\n  letters = '';\n  let counts = {};\n  letters = '';\n  let counts = {};\n  letters = '';\n  let counts = {};\n  letters = '';\n  let counts = {};\n  letters = '';\n  let counts = {};\n  letters = '';\n  let counts = {};\n  letters = '';\n  let counts = {};\n  letters = '';\n  let counts = {};\n  letters = '';\n  let counts = {};\n  letters = '';\n  let counts = {};\n  letters = '';\n  let counts = {};\n  letters = '';\n  let counts = {};\n  letters = '';\n  let counts = {};\n  letters = '';\n  let counts = {};\n  letters = '';\n  let counts = {};\n  letters = '';\n  let counts = {};\n  letters = '';\n  let counts = {};\n  letters = '';\n  let counts = {};\n  letters = '';\n  let counts = {};\n  letters = '';\n  let counts = {};\n  letters = '';\n  let counts = {};\n  letters = '';\n  let counts = {};\n  letters = '';\n  let counts = {};\n  letters = '';\n  let counts = {};\n  letters = '';\n  let counts = {};\n  letters = '';\n  let counts = {};\n  letters = '';\n  let counts = {};\n  letters = '';\n  let counts = {};\n  letters = '';\n  let counts = {};\n  letters = '';\n  let counts = {};\n  letters = '';\n  let counts = {};\n  letters = '';\n  let counts = {};\n  letters = '';\n  let counts = {};\n  letters = '';\n  let counts = {};\n  letters = '';\n  let counts = {};\n  letters = '';\n  let counts = {};\n  letters = '';\n  let counts = {};\n  letters = '';\n  let counts = {};\n  letters = '';\n  let counts = {};\n  letters = '';\n  let counts = {};\n  letters = '';\n  let counts = {};\n  letters = '';\n  let counts = {};\n  letters = '';\n  let counts = {};\n  letters = '';\n  let counts = {};\n  letters = '';\n  let counts = {};\n  letters = '';\n  let counts = {};\n  letters = '';\n  let counts = {};\n  letters = '';\n  let counts = {};\n  letters = '';\n  let counts = {};\n  letters = '';\n  let counts = {};\n  letters = '';\n  let counts = {};\n  letters = '';\n  let counts = {};\n  letters = '';\n  let counts = {};\n  letters = '';\n  let counts = {};\n  letters = '';\n  let counts = {};\n  letters = '';\n  let counts = {};\n  letters = '';\n  let counts = {};\n  letters = '';\n  let counts = {};\n  letters = '';\n  let counts = {};\n  letters = '';\n  let counts = {};\n  letters = '';\n  let counts = {};\n  letters = '';\n  let counts = {};\n  letters = '';\n  let counts = {};\n  letters = '';\n  let counts = {};\n  letters = '';\n  let counts = {};\n  letters = '';\n  let counts = {};\n  letters = '';\n  let counts = {};\n  letters = '';\n  let counts = {};\n  letters = '';\n  let counts = {};\n  letters = '';\n  let counts = {};\n  letters = '';\n  let counts = {};\n  letters = '';\n  let counts = {};\n  letters = '';\n  let counts = {};\n  letters = '';\n  let counts = {};\n  letters = '';\n  let counts = {};\n  letters = '';\n  let counts = {};\n  letters = '';\n  let counts = {};\n  letters = '';\n  let counts = {};\n  letters = '';\n  let counts = {};\n  letters = '';\n  let counts = {};\n  letters = '';\n  let counts = {};\n  letters = '';\n  let counts = {};\n  letters = '';\n  let counts = {};\n  letters = '';\n  let counts = {};\n  letters = '';\n  let counts = {};\n  letters = '';\n  let counts = {};\n  letters = '';\n  let counts = {};\n  letters = '';\n  let counts = {};\n  letters = '';\n  let counts = {};\n  letters = '';\n  let counts = {};\n  letters = '';\n  let counts = {};\n  letters = '';\n  let counts = {};\n  letters = '';\n  let counts = {};\n  letters = '';\n  let counts = {};\n  letters = '';\n  let counts = {};\n  letters = '';\n  let counts = {};\n  letters = '';\n  let counts = {};\n  letters = '';", "passed": 0}
{"task_id": "JavaScript/112", "prompt": "/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst revErsedeletE = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "revErsedeletE", "gc": "<|endoftext|>/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst revErsedeletE = (s, c) => {\n  let result = '';\n  let isPalindrome = true;\n  let i = s.length - 1;\n  let j = c.length - 1;\n  while (i >= 0 && j >= 0) {\n    if (s[i] == c[j]) {\n      result += s[i];\n      i--;\n      j--;\n    } else {\n      isPalindrome = false;\n      break;\n    }\n  }\n  return [result, isPalindrome];\n};\n\n/*Task\n  Given a string s and a character c, you have to delete all the characters in s that are equal to any character in c.\n  Then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst revErsedeletF = (s, c) => {\n  let result = '';\n  let isPalindrome = true;\n  let i = s.length - 1;\n  let j = c.length - 1;\n  while (i >= 0 && j >= 0) {\n    if (s[i] == c[j]) {\n      result += s[i];\n      i--;\n      j--;\n    } else {\n      isPalindrome = false;\n      break;\n    }\n  }\n  return [result, isPalindrome];\n};\n\n/*Task\n  Given a string s and a character c, you have to delete all the characters in s that are equal to any character in c.\n  Then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst revErsedeletG = (s, c) => {\n  let result = '';\n  let isPalindrome = true;\n  let i = s.length - 1;\n  let j = c.length - 1;\n  while (i >= 0 && j >= 0) {\n    if (s[i] == c[j]) {\n      result += s[i];\n      i--;\n      j--;\n    } else {\n      isPalindrome = false;\n      break;\n    }\n  }\n  return [result, isPalindrome];\n};\n\n/*Task\n  Given a string s and a character c, you have to delete all the characters in s that are equal to any character in c.\n  Then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst revErsedeletH = (s, c) => {\n  let result = '';\n  let isPalindrome = true;\n  let i = s.length - 1;\n  let j = c.length - 1;\n  while (i >= 0 && j >= 0) {\n    if (s[i] == c[j]) {\n      result += s[i];\n      i--;\n      j--;\n    } else {\n      isPalindrome = false;\n      break;\n    }\n  }\n  return [result, isPalindrome];\n};\n\n/*Task\n  Given a string s and a character c, you have to delete all the characters in s that are equal to any character in c.\n  Then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst revErsedeletI = (s, c) => {\n  let result = '';\n  let isPalindrome = true;\n  let i = s.length - 1;\n  let j = c.length - 1;\n  while (i >= 0 && j >= 0) {\n    if (s[i] == c[j]) {\n      result += s[i];\n      i--;\n      j--;\n    } else {\n      isPalindrome = false;\n      break;\n    }\n  }\n  return [result, isPalindrome];\n};\n\n/*Task\n  Given a string s and a character c, you have to delete all the characters in s that are equal to any character in c.\n  Then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst revErsedeletJ = (s, c) => {\n  let result = '';\n  let isPalindrome = true;\n  let i = s.length - 1;\n  let j = c.length - 1;\n  while (i >= 0 && j >= 0) {\n    if (s[i] == c[j]) {\n      result += s[i];\n      i--;\n      j--;\n    } else {\n      isPalindrome = false;\n      break;\n    }\n  }\n  return [result, isPalindrome];\n};\n\n/*Task\n  Given a string s and a character c, you have to delete all the characters in s that are equal to any character in c.\n  Then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst revErsedeletK = (s, c) => {\n  let result = '';\n  let isPalindrome = true;\n  let i = s.length - 1;\n  let j = c.length - 1;\n  while (i >= 0 && j >= 0) {\n    if (s[i] == c[j]) {\n      result += s[i];\n      i--;\n      j--;\n    } else {\n      isPalindrome = false;\n      break;\n    }\n  }\n  return [result, isPalindrome];\n};\n\n/*Task\n  Given a string s and a character c, you have to delete all the characters in s that are equal to any character in c.\n  Then check if the result string is palin", "passed": 0}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> oddcounT(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddcounT(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddcounT = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddcounT", "gc": "<|endoftext|>/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> oddcounT(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddcounT(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddcounT = (lst) => {\n  let odd = [];\n  lst.forEach((str) => {\n    let oddnum = 0;\n    for (let i = 0; i < str.length; i++) {\n      if (str[i] === '1') {\n        oddnum++;\n      }\n    }\n    odd.push(oddnum);\n  });\n  return odd.join(' ');\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of even elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of even digits in the i'th string of the input.\n\n  >>> evencounT(['1234567'])\n  [\"the number of even elements 4n the str4ng 4 of the 4nput.\"]\n  >>> evencounT(['3',\"11111111\"])\n  [\"the number of even elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst evencounT = (lst) => {\n  let even = [];\n  lst.forEach((str) => {\n    let evennum = 0;\n    for (let i = 0; i < str.length; i++) {\n      if (str[i] === '1') {\n        evennum++;\n      }\n    }\n    even.push(evennum);\n  });\n  return even.join(' ');\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of even elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of even digits in the i'th string of the input.\n\n  >>> oddcounT(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddcounT(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddcounT = (lst) => {\n  let odd = [];\n  lst.forEach((str) => {\n    let evennum = 0;\n    for (let i = 0; i < str.length; i++) {\n      if (str[i] === '1') {\n        evennum++;\n      }\n    }\n    odd.push(evennum);\n  });\n  return odd.join(' ');\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of even elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of even digits in the i'th string of the input.\n\n  >>> evencounT(['1234567'])\n  [\"the number of even elements 4n the str4ng 4 of the 4nput.\"]\n  >>> evencounT(['3',\"11111111\"])\n  [\"the number of even elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst evencounT = (lst) => {\n  let even = [];\n  lst.forEach((str) => {\n    let oddnum = 0;\n    for (let i = 0; i < str.length; i++) {\n      if (str[i] === '1') {\n        oddnum++;\n      }\n    }\n    even.push(oddnum);\n  });\n  return even.join(' ');\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of even elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of even digits in the i'th string of the input.\n\n  >>> oddcounT(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddcounT(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddcounT = (lst) => {\n  let odd = [];\n  lst.forEach((str) => {\n    let evennum = 0;\n    for (let i = 0; i < str.length; i++) {\n      if (str[i] === '1') {\n        evennum++;\n      }\n    }\n    odd.push(evennum);\n  });\n  return odd.join(' ');\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of even elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of even digits in the i'th string of the input.\n\n  >>> evencounT(['1234567'])\n  [\"the number of even elements 4n the str4ng 4 of the 4nput.\"]\n  >>> evencounT(['3',\"11111111\"])\n  [\"the number of even elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst evencounT = (lst) => {\n  let even = [];\n  lst.forEach((str) => {\n    let oddnum = 0;\n    for (let i = 0; i < str.length; i++) {\n      if (str[i] === '1') {\n        oddnum++;\n      }\n    }\n    even.push(oddnum);\n  });\n  return even.join(' ');\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of even elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of even digits in the i'th string of the input.\n\n  >>> oddcounT(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddcounT(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddcounT = (lst) => {\n  let odd = [];\n  lst.forEach((str) => {\n    let evennum = 0;\n    for (let i = 0; i < str.length; i++) {\n      if (str[i] === '1') {\n        evennum++;\n      }\n    }\n    odd.push(evennum);\n  });\n  return odd.join(' ');\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of even elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of even digits in the i'th string of the input.\n\n  >>> evencounT(['1234567'])\n  [\"the number of even elements 4n the str4ng 4 of the 4nput.\"]\n  >>> evencounT(['3',\"11111111\"])\n  [\"the number of even elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even elements 8n the str8ng", "passed": 0}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minsubARraySUm([2, 3, 4, 1, 2, 4]) == 1\n  minsubARraySUm([-1, -2, -3]) == -6\n  */\nconst minsubARraySUm = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minsubARraySUm", "gc": "<|endoftext|>/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minsubARraySUm([2, 3, 4, 1, 2, 4]) == 1\n  minsubARraySUm([-1, -2, -3]) == -6\n  */\nconst minsubARraySUm = (nums) => {\n  let sum = 0;\n  let minSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    if (nums[i] < minSum) {\n      minSum = nums[i];\n    }\n    sum += minSum;\n  }\n  return sum;\n};\n\n/*\n  Given an array of integers nums, find the minimum number of non-empty sub-arrays\n  of nums.\n  Example\n  minsubARrayCount([2, 3, 4, 1, 2, 4]) == 4\n  minsubARrayCount([-1, -2, -3]) == 3\n  */\nconst minsubARrayCount = (nums) => {\n  let count = 0;\n  let minCount = 0;\n  for (let i = 1; i < nums.length; i++) {\n    if (nums[i] < minCount) {\n      minCount = nums[i];\n    }\n    count += minCount;\n  }\n  return count;\n};\n\n/*\n  Given an array of integers nums, find the maximum sum of any non-empty sub-array\n  of nums.\n  Example\n  maxsubARraySUm([2, 3, 4, 1, 2, 4]) == 4\n  maxsubARraySUm([-1, -2, -3]) == 3\n  */\nconst maxsubARraySUm = (nums) => {\n  let sum = 0;\n  let maxSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    if (nums[i] > maxSum) {\n      maxSum = nums[i];\n    }\n    sum += maxSum;\n  }\n  return sum;\n};\n\n/*\n  Given an array of integers nums, find the maximum number of non-empty sub-arrays\n  of nums.\n  Example\n  maxsubARrayCount([2, 3, 4, 1, 2, 4]) == 4\n  maxsubARrayCount([-1, -2, -3]) == 3\n  */\nconst maxsubARrayCount = (nums) => {\n  let count = 0;\n  let maxCount = 0;\n  for (let i = 1; i < nums.length; i++) {\n    if (nums[i] > maxCount) {\n      maxCount = nums[i];\n    }\n    count += maxCount;\n  }\n  return count;\n};\n\n/*\n  Given an array of integers nums, find the minimum number of non-empty sub-arrays\n  of nums.\n  Example\n  minsubARrayCount([2, 3, 4, 1, 2, 4]) == 4\n  minsubARrayCount([-1, -2, -3]) == 3\n  */\nconst minsubARrayCount = (nums) => {\n  let count = 0;\n  let minCount = 0;\n  for (let i = 1; i < nums.length; i++) {\n    if (nums[i] < minCount) {\n      minCount = nums[i];\n    }\n    count += minCount;\n  }\n  return count;\n};\n\n/*\n  Given an array of integers nums, find the maximum sum of any non-empty sub-array\n  of nums.\n  Example\n  maxsubARraySUm([2, 3, 4, 1, 2, 4]) == 4\n  maxsubARraySUm([-1, -2, -3]) == 3\n  */\nconst maxsubARraySUm = (nums) => {\n  let sum = 0;\n  let maxSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    if (nums[i] > maxSum) {\n      maxSum = nums[i];\n    }\n    sum += maxSum;\n  }\n  return sum;\n};\n\n/*\n  Given an array of integers nums, find the maximum number of non-empty sub-arrays\n  of nums.\n  Example\n  maxsubARrayCount([2, 3, 4, 1, 2, 4]) == 4\n  maxsubARrayCount([-1, -2, -3]) == 3\n  */\nconst maxsubARrayCount = (nums) => {\n  let count = 0;\n  let maxCount = 0;\n  for (let i = 1; i < nums.length; i++) {\n    if (nums[i] > maxCount) {\n      maxCount = nums[i];\n    }\n    count += maxCount;\n  }\n  return count;\n};\n\n/*\n  Given an array of integers nums, find the minimum number of non-empty sub-arrays\n  of nums.\n  Example\n  minsubARrayCount([2, 3, 4, 1, 2, 4]) == 4\n  minsubARrayCount([-1, -2, -3]) == 3\n  */\nconst minsubARrayCount = (nums) => {\n  let count = 0;\n  let minCount = 0;\n  for (let i = 1; i < nums.length; i++) {\n    if (nums[i] < minCount) {\n      minCount = nums[i];\n    }\n    count += minCount;\n  }\n  return count;\n};\n\n/*\n  Given an array of integers nums, find the maximum sum of any non-empty sub-array\n  of nums.\n  Example\n  maxsubARraySUm([2, 3, 4, 1, 2, 4]) == 4\n  maxsubARraySUm([-1, -2, -3]) == 3\n  */\nconst maxsubARraySUm = (nums) => {\n  let sum = 0;\n  let maxSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    if (nums[i] > maxSum) {\n      maxSum = nums[i];\n    }\n    sum += maxSum;\n  }\n  return sum;\n};\n\n/*\n  Given an array of integers nums, find the minimum number of non-empty sub-arrays\n  of nums.\n  Example\n  minsubARrayCount([2, 3, 4, 1, 2, 4]) == 4\n  minsubARrayCount([-1, -2, -3]) == 3\n  */\nconst minsubARrayCount = (nums) => {\n  let count = 0;\n  let minCount = 0;\n  for (let i = 1; i < nums.length; i++) {\n    if (nums[i] < minCount) {\n      minCount = nums[i];\n    }\n    count += minCount;\n  }\n  return count;\n};\n\n/*\n  Given an array of integers nums, find the maximum number of non-empty sub-arrays\n  of nums.\n  Example\n  maxsubARrayCount([2, 3, 4, 1, 2, 4]) == 4\n  maxsubARrayCount([-1, -2, -3]) == 3\n  */\nconst maxsubARrayCount = (nums) => {\n  let count = 0;\n  let maxCount = 0;\n  for (let i = 1; i < nums.length; i++) {\n    if (nums[i] > maxCount) {\n      maxCount = nums[i];\n    }\n    count += maxCount;\n  }\n  return count;\n};\n\n/*\n  Given an array of integers nums, find the minimum number of non-empty sub-arrays\n  of nums.\n  Example\n  minsubARrayCount([2, 3, 4, 1, 2, 4]) == 4\n  minsubARrayCount([-1, -2, -3]) == 3\n  */\nconst minsubARrayCount = (nums) => {\n  let count = 0;\n  let minCount = 0;\n  for (let i = 1; i < nums.length; i++) {\n    if (nums[i] < minCount) {\n      minCount = nums[i];\n    }\n    count += minCount;\n  }\n  return count;\n};\n\n/*\n  Given an array of integers nums, find the maximum sum of any non-empty sub-array\n  of nums.\n  Example\n  maxsubARraySUm([2, 3, 4, 1, 2, 4]) == 4\n  maxsubARraySUm([-1, -2, -3]) == 3\n  */\nconst maxsubARraySUm = (nums) => {\n  let sum = 0;\n  let maxSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    if (nums[i] > maxSum) {\n      maxSum = nums[i];\n    }\n    sum += maxSum;\n  }\n  return sum;\n};\n\n/*\n  Given an array of integers nums, find the minimum number of non-empty sub-arrays\n  of nums.\n  Example\n  minsubARrayCount([2, 3, 4, 1, 2, 4]) == 4\n  minsubARrayCount([-1, -2, -3]) == 3\n  */\nconst minsubARrayCount = (num", "passed": 0}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxfill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxfill", "gc": "<|endoftext|>/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxfill = (grid, capacity) => {\n    const n = grid.length;\n    const m = grid[0].length;\n    const res = new Array(n).fill(0);\n    const buckets = new Array(m).fill(0);\n    const bucketCapacity = capacity / n;\n    \n    for(let i = 0; i < n; i++) {\n        for(let j = 0; j < m; j++) {\n            res[i][j] = grid[i][j];\n            buckets[i][j] = bucketCapacity;\n        }\n    }\n    \n    for(let i = 0; i < n; i++) {\n        for(let j = 0; j < m; j++) {\n            if(res[i][j] === 1) {\n                buckets[i][j] = 0;\n            }\n        }\n    }\n    \n    return buckets.length;\n};\n\n/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to fill the buckets such that each bucket has capacity of 1.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxfill1 = (grid, capacity) => {\n    const n = grid.length;\n    const m = grid[0].length;\n    const res = new Array(n).fill(0);\n    const buckets = new Array(m).fill(0);\n    const bucketCapacity = capacity / n;\n    \n    for(let i = 0; i < n; i++) {\n        for(let j = 0; j < m; j++) {\n            res[i][j] = grid[i][j];\n            buckets[i][j] = bucketCapacity;\n        }\n    }\n    \n    for(let i = 0; i < n; i++) {\n        for(let j = 0; j < m; j++) {\n            if(res[i][j] === 1) {\n                buckets[i][j] = 0;\n            }\n        }\n    }\n    \n    return buckets.length;\n};\n\n/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to fill the buckets such that each bucket has capacity of 1.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxfill2 = (grid, capacity) => {\n    const n = grid.length;\n    const m = grid[0].length;\n    const res = new Array(n).fill(0);\n    const buckets = new Array(m).fill(0);\n    const bucketCapacity = capacity / n;\n    \n    for(let i = 0; i < n; i++) {\n        for(let j = 0; j < m; j++) {\n            res[i][j] = grid[i][j];\n            buckets[i][j] = bucketCapacity;\n        }\n    }\n    \n    for(let i = 0; i < n; i++) {\n        for(let j = 0; j < m; j++) {\n            if(res[i][j] === 1) {\n                buckets[i][j] = 0;\n            }\n        }\n    }\n    \n    return buckets.length;\n};\n\n/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to fill the buckets such that each bucket has capacity of 1.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxfill3 = (grid, capacity) => {\n    const n = grid.length;\n    const m = grid[0].length;\n    const res = new Array(n).fill(0);\n    const buckets = new Array(m).fill(0);\n    const bucketCapacity = capacity / n;\n    \n    for(let i = 0; i < n; i++) {\n        for(let j = 0; j < m; j++) {\n            res[i][j] = grid[i][j];\n            buckets[i][j] = bucketCapacity;\n        }\n    }\n    \n    for(let i = 0; i < n; i++) {\n        for(let j = 0; j < m; j++) {\n            if(res[i][j] === 1) {\n                buckets[i][j] = 0;\n            }\n        }\n    }\n    \n    return buckets.length;\n};\n\n/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to fill the buckets such that each bucket has capacity of 1.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,", "passed": 0}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sorTArrAy([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sorTArrAy([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sorTArrAy([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sorTArrAy = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sorTArrAy", "gc": "<|endoftext|>/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sorTArrAy([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sorTArrAy([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sorTArrAy([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sorTArrAy = (arr) => {\n  const len = arr.length;\n  const ones = [];\n  let i = 0;\n  while (i < len) {\n    if (arr[i] === 1) {\n      ones.push(arr[i]);\n    }\n    i++;\n  }\n  ones = ones.sort((a, b) => a - b);\n  let j = 0;\n  while (j < ones.length) {\n    if (ones[j] === 1) {\n      ones[j] = 0;\n    }\n    j++;\n  }\n  return ones;\n};\n\n/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in descending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sorTArrAy([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sorTArrAy([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sorTArrAy([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sorTArrAyDesc = (arr) => {\n  const len = arr.length;\n  const ones = [];\n  let i = 0;\n  while (i < len) {\n    if (arr[i] === 1) {\n      ones.push(arr[i]);\n    }\n    i++;\n  }\n  ones = ones.sort((a, b) => b - a);\n  let j = 0;\n  while (j < ones.length) {\n    if (ones[j] === 1) {\n      ones[j] = 0;\n    }\n    j++;\n  }\n  return ones;\n};\n\n/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sorTArrAy([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sorTArrAy([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sorTArrAy([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sorTArrAyAsc = (arr) => {\n  const len = arr.length;\n  const ones = [];\n  let i = 0;\n  while (i < len) {\n    if (arr[i] === 1) {\n      ones.push(arr[i]);\n    }\n    i++;\n  }\n  ones = ones.sort((a, b) => a - b);\n  let j = 0;\n  while (j < ones.length) {\n    if (ones[j] === 1) {\n      ones[j] = 0;\n    }\n    j++;\n  }\n  return ones;\n};\n\n/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in descending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sorTArrAy([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sorTArrAy([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sorTArrAy([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sorTArrAyDescAsc = (arr) => {\n  const len = arr.length;\n  const ones = [];\n  let i = 0;\n  while (i < len) {\n    if (arr[i] === 1) {\n      ones.push(arr[i]);\n    }\n    i++;\n  }\n  ones = ones.sort((a, b) => b - a);\n  let j = 0;\n  while (j < ones.length) {\n    if (ones[j] === 1) {\n      ones[j] = 0;\n    }\n    j++;\n  }\n  return ones;\n};\n\n/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sorTArrAy([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sorTArrAy([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sorTArrAy([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sorTArrAyAscDesc = (arr) => {\n  const len = arr.length;\n  const ones = [];\n  let i = 0;\n  while (i < len) {\n    if (arr[i] === 1) {\n      ones.push(arr[i]);\n    }\n    i++;\n  }\n  ones = ones.sort((a, b) => a - b);\n  let j = 0;\n  while (j < ones.length) {\n    if (ones[j] === 1) {\n      ones[j] = 0;\n    }\n    j++;\n  }\n  return ones;\n};\n\n/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in descending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sorTArrAy([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sorTArrAy([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sorTArrAy([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sorTArrAyDescDesc = (arr) => {\n  const len = arr.length;\n  const ones = [];\n  let i = 0;\n  while (i < len) {\n    if (arr[i] === 1) {\n      ones.push(arr[i]);\n    }\n    i++;\n  }\n  ones = ones.sort((a, b) => b - a);\n  let j = 0;\n  while (j < ones.length) {\n    if (ones[j] === 1) {\n      ones[j] = 0;\n    }\n    j++;\n  }\n  return ones;\n};\n\n/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sorTArrAy([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sorTArrAy([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sorTArrAy([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sorTArrAyAscDescDesc = (arr) => {\n  const len = arr.length;\n  const ones = [];\n  let i = 0;\n  while (i < len) {\n    if (arr[i] === 1) {\n      ones.push(arr[i]);\n    }\n    i++;\n  }\n  ones = ones.sort((a, b) => b - a);\n  let j = 0;\n  while (j < ones.length) {\n    if (ones[j] === 1) {\n      ones[j] = 0;\n    }\n    j++;\n  }\n  return ones;\n};\n\n/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in descending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sorTArrAy([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sorTArrAy([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sorTArrAy([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sorTArrAyDescDescAsc = (arr) => {\n  const len = arr.length;\n  const ones = [];\n  let i = 0;\n  while (i < len) {\n", "passed": 0}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selEctWOrds(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selEctWOrds(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selEctWOrds(\"simple white space\", 2) ==> []\n  selEctWOrds(\"Hello world\", 4) ==> [\"world\"]\n  selEctWOrds(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selEctWOrds = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selEctWOrds", "gc": "<|endoftext|>/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selEctWOrds(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selEctWOrds(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selEctWOrds(\"simple white space\", 2) ==> []\n  selEctWOrds(\"Hello world\", 4) ==> [\"world\"]\n  selEctWOrds(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selEctWOrds = (s, n) => {\n  let words = [];\n  let word = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let count = 0;\n  let temp = '';\n  let temp2 = '';\n  let temp3 = '';\n  let temp4 = '';\n  let temp5 = '';\n  let temp6 = '';\n  let temp7 = '';\n  let temp8 = '';\n  let temp9 = '';\n  let temp10 = '';\n  let temp11 = '';\n  let temp12 = '';\n  let temp13 = '';\n  let temp14 = '';\n  let temp15 = '';\n  let temp16 = '';\n  let temp17 = '';\n  let temp18 = '';\n  let temp19 = '';\n  let temp20 = '';\n  let temp21 = '';\n  let temp22 = '';\n  let temp23 = '';\n  let temp24 = '';\n  let temp25 = '';\n  let temp26 = '';\n  let temp27 = '';\n  let temp28 = '';\n  let temp29 = '';\n  let temp30 = '';\n  let temp31 = '';\n  let temp32 = '';\n  let temp33 = '';\n  let temp34 = '';\n  let temp35 = '';\n  let temp36 = '';\n  let temp37 = '';\n  let temp38 = '';\n  let temp39 = '';\n  let temp40 = '';\n  let temp41 = '';\n  let temp42 = '';\n  let temp43 = '';\n  let temp44 = '';\n  let temp45 = '';\n  let temp46 = '';\n  let temp47 = '';\n  let temp48 = '';\n  let temp49 = '';\n  let temp50 = '';\n  let temp51 = '';\n  let temp52 = '';\n  let temp53 = '';\n  let temp54 = '';\n  let temp55 = '';\n  let temp56 = '';\n  let temp57 = '';\n  let temp58 = '';\n  let temp59 = '';\n  let temp60 = '';\n  let temp61 = '';\n  let temp62 = '';\n  let temp63 = '';\n  let temp64 = '';\n  let temp65 = '';\n  let temp66 = '';\n  let temp67 = '';\n  let temp68 = '';\n  let temp69 = '';\n  let temp70 = '';\n  let temp71 = '';\n  let temp72 = '';\n  let temp73 = '';\n  let temp74 = '';\n  let temp75 = '';\n  let temp76 = '';\n  let temp77 = '';\n  let temp78 = '';\n  let temp79 = '';\n  let temp80 = '';\n  let temp81 = '';\n  let temp82 = '';\n  let temp83 = '';\n  let temp84 = '';\n  let temp85 = '';\n  let temp86 = '';\n  let temp87 = '';\n  let temp88 = '';\n  let temp89 = '';\n  let temp90 = '';\n  let temp91 = '';\n  let temp92 = '';\n  let temp93 = '';\n  let temp94 = '';\n  let temp95 = '';\n  let temp96 = '';\n  let temp97 = '';\n  let temp98 = '';\n  let temp99 = '';\n  let temp100 = '';\n  let temp101 = '';\n  let temp102 = '';\n  let temp103 = '';\n  let temp104 = '';\n  let temp105 = '';\n  let temp106 = '';\n  let temp107 = '';\n  let temp108 = '';\n  let temp109 = '';\n  let temp110 = '';\n  let temp111 = '';\n  let temp112 = '';\n  let temp113 = '';\n  let temp114 = '';\n  let temp115 = '';\n  let temp116 = '';\n  let temp117 = '';\n  let temp118 = '';\n  let temp119 = '';\n  let temp120 = '';\n  let temp121 = '';\n  let temp122 = '';\n  let temp123 = '';\n  let temp124 = '';\n  let temp125 = '';\n  let temp126 = '';\n  let temp127 = '';\n  let temp128 = '';\n  let temp129 = '';\n  let temp130 = '';\n  let temp131 = '';\n  let temp132 = '';\n  let temp133 = '';\n  let temp134 = '';\n  let temp135 = '';\n  let temp136 = '';\n  let temp137 = '';\n  let temp138 = '';\n  let temp139 = '';\n  let temp140 = '';\n  let temp141 = '';\n  let temp142 = '';\n  let temp143 = '';\n  let temp144 = '';\n  let temp145 = '';\n  let temp146 = '';\n  let temp147 = '';\n  let temp148 = '';\n  let temp149 = '';\n  let temp150 = '';\n  let temp151 = '';\n  let temp152 = '';\n  let temp153 = '';\n  let temp154 = '';\n  let temp155 = '';\n  let temp156 = '';\n  let temp157 = '';\n  let temp158 = '';\n  let temp159 = '';\n  let temp160 = '';\n  let temp161 = '';\n  let temp162 = '';\n  let temp163 = '';\n  let temp164 = '';\n  let temp165 = '';\n  let temp166 = '';\n  let temp167 = '';\n  let temp168 = '';\n  let temp169 = '';\n  let temp170 = '';\n  let temp171 = '';\n  let temp172 = '';\n  let temp173 = '';\n  let temp174 = '';\n  let temp175 = '';\n  let temp176 = '';\n  let temp177 = '';\n  let temp178 = '';\n  let temp179 = '';\n  let temp180 = '';\n  let temp181 = '';\n  let temp182 = '';\n  let temp183 = '';\n  let temp184 = '';\n  let temp185 = '';\n  let temp186 = '';\n  let temp187 = '';\n  let temp188 = '';\n  let temp189 = '';\n  let temp190 = '';\n  let temp191 = '';\n  let temp192 = '';\n  let temp193 = '';\n  let temp194 = '';\n  let temp195 = '';\n  let temp196 = '';\n  let temp197 = '';\n  let temp198 = '';\n  let temp199 = '';\n  let temp200 = '';\n  let temp201 = '';\n  let temp202 = '';\n  let temp203 = '';\n  let temp204 = '';\n  let temp205 = '';\n  let temp206 = '';\n  let temp207 = '';\n  let temp208 = '';\n  let temp209 = '';\n  let temp210 = '';\n  let temp211 = '';\n  let temp212 = '';\n  let temp213 = '';\n  let temp214 = '';\n  let temp215 = '';\n  let temp216 = '';\n  let temp217 = '';\n  let temp218 = '';\n  let temp219 = '';\n  let temp220 = '';\n  let temp221 = '';\n  let temp222 = '';\n  let temp223 = '';\n  let temp224 = '';\n  let temp225 = '';\n  let temp226 = '';\n  let temp227 = '';\n  let temp228 = '';\n  let temp229 = '';\n  let temp230 = '';\n  let temp231 = '';\n  let temp232 = '';\n  let temp233 = '';\n  let temp234 = '';\n  let temp235 = '';\n  let temp236 = '';\n  let temp237 = '';\n  let temp238 = '';\n  let temp239 = '';\n  let temp240 = '';\n  let temp241 = '';\n  let temp242 = '';\n  let temp243 = '';\n  let temp244 = '';\n  let temp245 = '';\n  let temp246 = '';\n  let temp247 = '';\n  let temp248 = '';\n  let temp249 = '';\n  let temp250 = '';\n  let temp251 = '';\n  let temp252 = '';\n  let temp253 = '';\n  let temp254 = '';\n  let temp255 = '';\n  let temp256 = '';\n  let temp257 = '';\n  let temp258 = '';\n  let temp259 = '';\n  let temp260 = '';\n  let temp", "passed": 0}
{"task_id": "JavaScript/118", "prompt": "/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  getclosEstVoWel(\"yogurt\") ==> \"u\"\n  getclosEstVoWel(\"FULL\") ==> \"U\"\n  getclosEstVoWel(\"quick\") ==> \"\"\n  getclosEstVoWel(\"ab\") ==> \"\"\n  */\nconst getclosEstVoWel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getclosEstVoWel", "gc": "<|endoftext|>/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  getclosEstVoWel(\"yogurt\") ==> \"u\"\n  getclosEstVoWel(\"FULL\") ==> \"U\"\n  getclosEstVoWel(\"quick\") ==> \"\"\n  getclosEstVoWel(\"ab\") ==> \"\"\n  */\nconst getclosEstVoWel = (word) => {\n  let vowels = vowelsArr.map((v) => v.name);\n  let vowelsArr = vowels.filter((v) => word.includes(v));\n  let vowelsArr2 = vowels.filter((v) => word.includes(v.toUpperCase()));\n  let vowelsArr3 = vowels.filter((v) => word.includes(v.toLowerCase()));\n  let vowelsArr4 = vowels.filter((v) => word.includes(v.toUpperCase().toUpperCase()));\n  let vowelsArr5 = vowels.filter((v) => word.includes(v.toLowerCase().toLowerCase()));\n  let vowelsArr6 = vowels.filter((v) => word.includes(v.toUpperCase().toUpperCase().toUpperCase()));\n  let vowelsArr7 = vowels.filter((v) => word.includes(v.toLowerCase().toLowerCase().toLowerCase()));\n  let vowelsArr8 = vowels.filter((v) => word.includes(v.toUpperCase().toUpperCase().toUpperCase().toUpperCase()));\n  let vowelsArr9 = vowels.filter((v) => word.includes(v.toLowerCase().toLowerCase().toLowerCase().toLowerCase()));\n  let vowelsArr10 = vowels.filter((v) => word.includes(v.toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase()));\n  let vowelsArr11 = vowels.filter((v) => word.includes(v.toLowerCase().toLowerCase().toLowerCase().toLowerCase().toLowerCase()));\n  let vowelsArr12 = vowels.filter((v) => word.includes(v.toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase()));\n  let vowelsArr13 = vowels.filter((v) => word.includes(v.toLowerCase().toLowerCase().toLowerCase().toLowerCase().toLowerCase().toLowerCase()));\n  let vowelsArr14 = vowels.filter((v) => word.includes(v.toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase()));\n  let vowelsArr15 = vowels.filter((v) => word.includes(v.toLowerCase().toLowerCase().toLowerCase().toLowerCase().toLowerCase().toLowerCase().toLowerCase()));\n  let vowelsArr16 = vowels.filter((v) => word.includes(v.toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase()));\n  let vowelsArr17 = vowels.filter((v) => word.includes(v.toLowerCase().toLowerCase().toLowerCase().toLowerCase().toLowerCase().toLowerCase().toLowerCase()));\n  let vowelsArr18 = vowels.filter((v) => word.includes(v.toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase()));\n  let vowelsArr19 = vowels.filter((v) => word.includes(v.toLowerCase().toLowerCase().toLowerCase().toLowerCase().toLowerCase().toLowerCase().toLowerCase()));\n  let vowelsArr20 = vowels.filter((v) => word.includes(v.toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase()));\n  let vowelsArr21 = vowels.filter((v) => word.includes(v.toLowerCase().toLowerCase().toLowerCase().toLowerCase().toLowerCase().toLowerCase().toLowerCase()));\n  let vowelsArr22 = vowels.filter((v) => word.includes(v.toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase()));\n  let vowelsArr23 = vowels.filter((v) => word.includes(v.toLowerCase().toLowerCase().toLowerCase().toLowerCase().toLowerCase().toLowerCase().toLowerCase().toLowerCase()));\n  let vowelsArr24 = vowels.filter((v) => word.includes(v.toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase()));\n  let vowelsArr25 = vowels.filter((v) => word.includes(v.toLowerCase().toLowerCase().toLowerCase().toLowerCase().toLowerCase().toLowerCase().toLowerCase().toLowerCase()));\n  let vowelsArr26 = vowels.filter((v) => word.includes(v.toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase()));\n  let vowelsArr27 = vowels.filter((v) => word.includes(v.toLowerCase().toLowerCase().toLowerCase().toLowerCase().toLowerCase().toLowerCase().toLowerCase().toLowerCase()));\n  let vowelsArr28 = vowels.filter((v) => word.includes(v.toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase()));\n  let vowelsArr29 = vowels.filter((v) => word.includes(v.toLowerCase().toLowerCase().toLowerCase().toLowerCase().toLowerCase().toLowerCase().toLowerCase().toLowerCase()));\n  let vowelsArr30 = vowels.filter((v) => word.includes(v.toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase()));\n  let vowelsArr31 = vowels.filter((v) => word.includes(v.toLowerCase().toLowerCase().toLowerCase().toLowerCase().toLowerCase().toLowerCase().toLowerCase().toLowerCase()));\n  let vowelsArr32 = vowels.filter((v) => word.includes(v.toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase()));\n  let vowelsArr33 = vowels.filter((v) => word.includes(v.toLowerCase().toLowerCase().toLowerCase().toLowerCase().toLowerCase().toLowerCase().toLowerCase().toLowerCase()));\n  let vowelsArr34 = vowels.filter((v) => word.includes(v.toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase()));\n  let vowelsArr35 = vowels.filter((v) => word.includes(v.toLowerCase().toLowerCase().toLowerCase().toLowerCase().toLowerCase().toLowerCase().toLowerCase().toLowerCase()));\n  let vowelsArr36 = vowels.filter((v) => word.includes(v.toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase()));\n  let vowelsArr37 = vowels.filter((v) => word.includes(v.toLowerCase().toLowerCase().toLowerCase().toLowerCase().toLowerCase().toLowerCase().toLowerCase().toLowerCase()));\n  let vowelsArr38 = vowels.filter((v) => word.includes(v.toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase()));\n  let vowelsArr39 = vowels.filter((v) => word.includes(v.toLowerCase().toLowerCase().toLowerCase().toLowerCase().toLowerCase().toLowerCase().toLowerCase().toLowerCase()));\n  let vowelsArr40 = vowels.filter((v) => word.includes(v.toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase()));\n  let vowelsArx41 = vowels.filter((", "passed": 0}
{"task_id": "JavaScript/119", "prompt": "/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matChPaRens(['()(', ')']) == 'Yes'\n  matChPaRens([')', ')']) == 'No'\n  */\nconst matChPaRens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matChPaRens", "gc": "<|endoftext|>/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matChPaRens(['()(', ')']) == 'Yes'\n  matChPaRens([')', ')']) == 'No'\n  */\nconst matChPaRens = (lst) => {\n  const res = [];\n  let curr = lst[0];\n  let next = lst[1];\n  while (curr) {\n    if (curr.match(/\\(|\\)/g)) {\n      res.push(curr);\n      curr = next;\n      next = lst[1];\n    } else {\n      res.push(curr);\n      curr = next;\n      next = lst[0];\n    }\n  }\n  return res.length === 1? res[0] : res.join('');\n};\n\n/* You are given a string S consisting of only lowercase English letters.\n  Return the number of unique English letters in S.\n  Examples:\n  countLetters('abcabc') // 3\n  countLetters('abc') // 1\n  countLetters('') // 0\n  */\nconst countLetters = (str) => {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i].match(/[a-z]/)) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* You are given a string S consisting of only lowercase English letters.\n  Return the number of unique English letters in S.\n  Examples:\n  countLetters('abcabc') // 3\n  countLetters('abc') // 1\n  countLetters('') // 0\n  */\nconst countLettersLower = (str) => {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i].match(/[a-z]/i)) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* You are given a string S consisting of only uppercase English letters.\n  Return the number of unique English letters in S.\n  Examples:\n  countLetters('ABC') // 3\n  countLetters('ABC') // 1\n  countLetters('') // 0\n  */\nconst countLettersUpper = (str) => {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i].match(/[A-Z]/)) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* You are given a string S consisting of only lowercase English letters.\n  Return the number of unique English letters in S.\n  Examples:\n  countLetters('abcabc') // 3\n  countLetters('abc') // 1\n  countLetters('') // 0\n  */\nconst countLettersMixed = (str) => {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i].match(/[a-z]/i)) {\n      count++;\n    }\n    if (str[i].match(/[A-Z]/)) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* You are given a string S consisting of only lowercase English letters.\n  Return the number of unique English letters in S.\n  Examples:\n  countLetters('abcabc') // 3\n  countLetters('abc') // 1\n  countLetters('') // 0\n  */\nconst countLettersMixedLower = (str) => {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i].match(/[a-z]/i)) {\n      count++;\n    }\n    if (str[i].match(/[A-Z]/)) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* You are given a string S consisting of only uppercase English letters.\n  Return the number of unique English letters in S.\n  Examples:\n  countLetters('ABC') // 3\n  countLetters('ABC') // 1\n  countLetters('') // 0\n  */\nconst countLettersMixedUpper = (str) => {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i].match(/[a-z]/i)) {\n      count++;\n    }\n    if (str[i].match(/[A-Z]/)) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* You are given a string S consisting of only lowercase English letters.\n  Return the number of unique English letters in S.\n  Examples:\n  countLetters('abcabc') // 3\n  countLetters('abc') // 1\n  countLetters('') // 0\n  */\nconst countLettersMixedMixed = (str) => {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i].match(/[a-z]/i)) {\n      count++;\n    }\n    if (str[i].match(/[A-Z]/)) {\n      count++;\n    }\n    if (str[i].match(/[a-z]/)) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* You are given a string S consisting of only lowercase English letters.\n  Return the number of unique English letters in S.\n  Examples:\n  countLetters('abcabc') // 3\n  countLetters('abc') // 1\n  countLetters('') // 0\n  */\nconst countLettersMixedMixedLower = (str) => {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i].match(/[a-z]/i)) {\n      count++;\n    }\n    if (str[i].match(/[A-Z]/)) {\n      count++;\n    }\n    if (str[i].match(/[a-z]/)) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* You are given a string S consisting of only uppercase English letters.\n  Return the number of unique English letters in S.\n  Examples:\n  countLetters('ABC') // 3\n  countLetters('ABC') // 1\n  countLetters('') // 0\n  */\nconst countLettersMixedMixedUpper = (str) => {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i].match(/[a-z]/i)) {\n      count++;\n    }\n    if (str[i].match(/[A-Z]/)) {\n      count++;\n    }\n    if (str[i].match(/[a-z]/)) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* You are given a string S consisting of only lowercase English letters.\n  Return the number of unique English letters in S.\n  Examples:\n  countLetters('abcabc') // 3\n  countLetters('abc') // 1\n  countLetters('') // 0\n  */\nconst countLettersMixedMixedMixed = (str) => {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i].match(/[a-z]/i)) {\n      count++;\n    }\n    if (str[i].match(/[A-Z]/)) {\n      count++;\n    }\n    if (str[i].match(/[a-z]/)) {\n      count++;\n    }\n    if (str[i].match(/[A-Z]/)) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* You are given a string S consisting of only lowercase English letters.\n  Return the number of unique English letters in S.\n  Examples:\n  countLetters('abcabc') // 3\n  countLetters('abc') // 1\n  countLetters('') // 0\n  */\nconst countLettersMixedMixedMixedLower = (str) => {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i].match(/[a-z]/i)) {\n      count++;\n    }\n    if (str[i].match(/[A-Z]/)) {\n      count++;\n    }\n    if (str[i].match(/[a-z]/)) {\n      count++;\n    }\n    if (str[i].match(/[A-Z]/)) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* You are given a string S consisting of only uppercase English letters.\n  Return the number of unique English letters in S.\n  Examples:\n  countLetter", "passed": 1}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the lonGest one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> lonGest([])\n\n  >>> lonGest(['a', 'b', 'c'])\n  'a'\n  >>> lonGest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst lonGest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "lonGest", "gc": "<|endoftext|>/* Out of list of strings, return the lonGest one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> lonGest([])\n\n  >>> lonGest(['a', 'b', 'c'])\n  'a'\n  >>> lonGest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst lonGest = (strings) => {\n  if (strings.length === 0) {\n    return null\n  }\n\n  let longest = strings[0].length\n  let longestString = ''\n\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].length > longest) {\n      longestString = strings[i]\n      longest = strings[i].length\n    }\n  }\n\n  return longestString\n}\n\n/**\n  Return the longest substring of a given string that is a prefix of another\n  string. Return the first one in case of multiple strings of the same length.\n  Return null in case the input string is empty.\n  >>> longestPrefix(['a', 'b', 'c'])\n  'a'\n  >>> longestPrefix(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longestPrefix = (strings) => {\n  if (strings.length === 0) {\n    return null\n  }\n\n  let longest = strings[0].length\n  let longestString = ''\n\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].length > longest) {\n      longestString = strings[i]\n      longest = strings[i].length\n    }\n  }\n\n  return longestString.substring(0, longest)\n}\n\n/**\n  Return the longest substring of a given string that is a suffix of another\n  string. Return the first one in case of multiple strings of the same length.\n  Return null in case the input string is empty.\n  >>> longestSuffix(['a', 'b', 'c'])\n  'c'\n  >>> longestSuffix(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longestSuffix = (strings) => {\n  if (strings.length === 0) {\n    return null\n  }\n\n  let longest = strings[0].length\n  let longestString = ''\n\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].length > longest) {\n      longestString = strings[i]\n      longest = strings[i].length\n    }\n  }\n\n  return longestString.substring(longest)\n}\n\n/**\n  Return the longest substring of a given string that is a prefix of another\n  string. Return the first one in case of multiple strings of the same length.\n  Return null in case the input string is empty.\n  >>> longestPrefixAndSuffix(['a', 'b', 'c'])\n  'a'\n  >>> longestPrefixAndSuffix(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longestPrefixAndSuffix = (strings) => {\n  if (strings.length === 0) {\n    return null\n  }\n\n  let longest = strings[0].length\n  let longestString = ''\n\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].length > longest) {\n      longestString = strings[i]\n      longest = strings[i].length\n    }\n  }\n\n  return longestString.substring(0, longest) + longestString.substring(longest)\n}\n\n/**\n  Return the longest substring of a given string that is a suffix of another\n  string. Return the first one in case of multiple strings of the same length.\n  Return null in case the input string is empty.\n  >>> longestPrefixAndSuffix(['a', 'b', 'c'])\n  'c'\n  >>> longestPrefixAndSuffix(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longestPrefixAndSuffix = (strings) => {\n  if (strings.length === 0) {\n    return null\n  }\n\n  let longest = strings[0].length\n  let longestString = ''\n\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].length > longest) {\n      longestString = strings[i]\n      longest = strings[i].length\n    }\n  }\n\n  return longestString.substring(0, longest) + longestString.substring(longest)\n}\n\n/**\n  Return the longest substring of a given string that is a prefix of another\n  string. Return the first one in case of multiple strings of the same length.\n  Return null in case the input string is empty.\n  >>> longestPrefixAndSuffix(['a', 'b', 'c'])\n  'a'\n  >>> longestPrefixAndSuffix(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longestPrefixAndSuffix = (strings) => {\n  if (strings.length === 0) {\n    return null\n  }\n\n  let longest = strings[0].length\n  let longestString = ''\n\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].length > longest) {\n      longestString = strings[i]\n      longest = strings[i].length\n    }\n  }\n\n  return longestString.substring(0, longest) + longestString.substring(longest)\n}\n\n/**\n  Return the longest substring of a given string that is a suffix of another\n  string. Return the first one in case of multiple strings of the same length.\n  Return null in case the input string is empty.\n  >>> longestPrefixAndSuffix(['a', 'b', 'c'])\n  'c'\n  >>> longestPrefixAndSuffix(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longestPrefixAndSuffix = (strings) => {\n  if (strings.length === 0) {\n    return null\n  }\n\n  let longest = strings[0].length\n  let longestString = ''\n\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].length > longest) {\n      longestString = strings[i]\n      longest = strings[i].length\n    }\n  }\n\n  return longestString.substring(0, longest) + longestString.substring(longest)\n}\n\n/**\n  Return the longest substring of a given string that is a prefix of another\n  string. Return the first one in case of multiple strings of the same length.\n  Return null in case the input string is empty.\n  >>> longestPrefixAndSuffix(['a', 'b', 'c'])\n  'a'\n  >>> longestPrefixAndSuffix(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longestPrefixAndSuffix = (strings) => {\n  if (strings.length === 0) {\n    return null\n  }\n\n  let longest = strings[0].length\n  let longestString = ''\n\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].length > longest) {\n      longestString = strings[i]\n      longest = strings[i].length\n    }\n  }\n\n  return longestString.substring(0, longest) + longestString.substring(longest)\n}\n\n/**\n  Return the longest substring of a given string that is a suffix of another\n  string. Return the first one in case of multiple strings of the same length.\n  Return null in case the input string is empty.\n  >>> longestPrefixAndSuffix(['a', 'b', 'c'])\n  'c'\n  >>> longestPrefixAndSuffix(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longestPrefixAndSuffix = (strings) => {\n  if (strings.length === 0) {\n    return null\n  }\n\n  let longest = strings[0].length\n  let longestString = ''\n\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].length > longest) {\n      longestString = strings[i]\n      longest = strings[i].length\n    }\n  }\n\n  return longestString.substring(0, longest) + longestString.substring(longest)\n}\n\n/**\n  Return the longest substring of a given string that is a prefix of another\n  string. Return the first one in case of multiple strings of the same length.\n  Return null in case the input string is empty.\n  >>> longestPrefixAndSuffix(['a', 'b', 'c'])\n  'a'\n  >>> longestPrefixAndSuffix(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longestPrefixAndSuffix = (strings) => {\n  if (strings.length === 0) {\n    return null\n  }\n\n  let longest = strings[0].length\n  let longestString = ''\n\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].length > longest) {\n      longestString = strings[i]\n      longest = strings[i].length\n    }\n  }\n\n  return longestString.substring(0, longest) + longestString.substring(longest)\n}\n\n/**\n  Return the longest substring of a given string that is a suffix of another\n  string. Return the first one in case of multiple strings of the same length.\n  Return null in case the input string is empty.\n  >>> longestPrefixAndSuffix(['a', 'b', 'c'])\n  'c'\n  >>> longestPrefixAndSuffix(['a', 'bb', 'ccc'])\n", "passed": 0}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maxImum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maxImum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maxImum", "gc": "<|endoftext|>/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maxImum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maxImum = (arr, k) => {\n  const maxNum = arr[0];\n  let maxIndex = 0;\n  let maxValue = 0;\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] > maxNum) {\n      maxValue = arr[i];\n      maxIndex = i;\n      maxNum = arr[i];\n    }\n  }\n  return [maxNum, maxIndex, maxValue];\n};\n\n// https://leetcode.com/problems/find-the-maximum-subarray-sum/\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @param {number} k\n * @return {number}\n */\nvar findMaxSubArraySum = function(head, k) {\n  let sum = 0;\n  let cur = head;\n  while (cur) {\n    sum += cur.val;\n    cur = cur.next;\n  }\n  return sum;\n};\n\n// https://leetcode.com/problems/find-the-maximum-subarray-sum/discuss/7896/Java-Solution-with-O(n) complexity\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @param {number} k\n * @return {number}\n */\nvar findMaxSubArraySum = function(head, k) {\n  let sum = 0;\n  let cur = head;\n  while (cur) {\n    sum += cur.val;\n    cur = cur.next;\n    if (sum >= k) {\n      return sum;\n    }\n  }\n  return sum;\n};\n\n// https://leetcode.com/problems/find-the-maximum-subarray-sum/discuss/7896/Java-Solution-with-O(n) complexity\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @param {number} k\n * @return {number}\n */\nvar findMaxSubArraySum = function(head, k) {\n  let sum = 0;\n  let cur = head;\n  while (cur) {\n    sum += cur.val;\n    cur = cur.next;\n    if (sum >= k) {\n      return sum;\n    }\n    cur = cur.next;\n  }\n  return sum;\n};\n\n// https://leetcode.com/problems/find-the-maximum-subarray-sum/discuss/7896/Java-Solution-with-O(n) complexity\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @param {number} k\n * @return {number}\n */\nvar findMaxSubArraySum = function(head, k) {\n  let sum = 0;\n  let cur = head;\n  while (cur) {\n    sum += cur.val;\n    cur = cur.next;\n    if (sum >= k) {\n      return sum;\n    }\n    cur = cur.next;\n  }\n  return sum;\n};\n\n// https://leetcode.com/problems/find-the-maximum-subarray-sum/discuss/7896/Java-Solution-with-O(n) complexity\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @param {number} k\n * @return {number}\n */\nvar findMaxSubArraySum = function(head, k) {\n  let sum = 0;\n  let cur = head;\n  while (cur) {\n    sum += cur.val;\n    cur = cur.next;\n    if (sum >= k) {\n      return sum;\n    }\n    cur = cur.next;\n  }\n  return sum;\n};\n\n// https://leetcode.com/problems/find-the-maximum-subarray-sum/discuss/7896/Java-Solution-with-O(n) complexity\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @param {number} k\n * @return {number}\n */\nvar findMaxSubArraySum = function(head, k) {\n  let sum = 0;\n  let cur = head;\n  while (cur) {\n    sum += cur.val;\n    cur = cur.next;\n    if (sum >= k) {\n      return sum;\n    }\n    cur = cur.next;\n  }\n  return sum;\n};\n\n// https://leetcode.com/problems/find-the-maximum-subarray-sum/discuss/7896/Java-Solution-with-O(n) complexity\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @param {number} k\n * @return {number}\n */\nvar findMaxSubArraySum = function(head, k) {\n  let sum = 0;\n  let cur = head;\n  while (cur) {\n    sum += cur.val;\n    cur = cur.next;\n    if (sum >= k) {\n      return sum;\n    }\n    cur = cur.next;\n  }\n  return sum;\n};\n\n// https://leetcode.com/problems/find-the-maximum-subarray-sum/discuss/7896/Java-Solution-with-O(n) complexity\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @param {number} k\n * @return {number}\n */\nvar findMaxSubArraySum = function(head, k) {\n  let sum = 0;\n  let cur = head;\n  while (cur) {\n    sum += cur.val;\n    cur = cur.next;\n    if (sum >= k) {\n      return sum;\n    }\n    cur = cur.next;\n  }\n  return sum;\n};\n\n// https://leetcode.com/problems/find-the-maximum-subarray-sum/discuss/7896/Java-Solution-with-O(n) complexity\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @param {number} k\n * @return {number}\n */\nvar findMaxSubArraySum = function(head, k) {\n  let sum = 0;\n  let cur = head;\n  while (cur) {\n    sum += cur.val;\n    cur = cur.next;\n    if (sum >= k) {\n      return sum;\n    }\n    cur = cur.next;\n  }\n  return sum;\n};\n\n// https://leetcode.com/problems/find-the-maximum-subarray-sum/discuss/7896/Java-Solution-with-O(n) complexity\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @param {number} k\n * @return {number}", "passed": 0}
{"task_id": "JavaScript/121", "prompt": "/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solUtioN([5, 8, 7, 1]) ==> 12\n  solUtioN([3, 3, 3, 3, 3]) ==> 9\n  solUtioN([30, 13, 24, 321]) ==>0\n  */\nconst solUtioN = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solUtioN", "gc": "<|endoftext|>/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solUtioN([5, 8, 7, 1]) ==> 12\n  solUtioN([3, 3, 3, 3, 3]) ==> 9\n  solUtioN([30, 13, 24, 321]) ==>0\n  */\nconst solUtioN = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non-empty list of integers, return the sum of all of the even elements that are in odd positions.\n  \n\n  Examples\n  solUtioN([5, 8, 7, 1]) ==> 12\n  solUtioN([3, 3, 3, 3, 3]) ==> 9\n  solUtioN([30, 13, 24, 321]) ==>0\n  */\nconst solUtioNodd = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non-empty list of integers, return the sum of all of the even elements that are in even positions.\n  \n\n  Examples\n  solUtioEven([5, 8, 7, 1]) ==> 12\n  solUtioEven([3, 3, 3, 3, 3]) ==> 9\n  solUtioEven([30, 13, 24, 321]) ==>0\n  */\nconst solUtioEven = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non-empty list of integers, return the sum of all of the odd elements that are in odd positions.\n  \n\n  Examples\n  solUtioOdd([5, 8, 7, 1]) ==> 12\n  solUtioOdd([3, 3, 3, 3, 3]) ==> 9\n  solUtioOdd([30, 13, 24, 321]) ==>0\n  */\nconst solUtioOdd = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non-empty list of integers, return the sum of all of the even elements that are in even positions.\n  \n\n  Examples\n  solUtioEvenOdd([5, 8, 7, 1]) ==> 12\n  solUtioEvenOdd([3, 3, 3, 3, 3]) ==> 9\n  solUtioEvenOdd([30, 13, 24, 321]) ==>0\n  */\nconst solUtioEvenOdd = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solUtioOddOdd([5, 8, 7, 1]) ==> 12\n  solUtioOddOdd([3, 3, 3, 3, 3]) ==> 9\n  solUtioOddOdd([30, 13, 24, 321]) ==>0\n  */\nconst solUtioOddOdd = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non-empty list of integers, return the sum of all of the even elements that are in odd positions.\n  \n\n  Examples\n  solUtioEvenOddOdd([5, 8, 7, 1]) ==> 12\n  solUtioEvenOddOdd([3, 3, 3, 3, 3]) ==> 9\n  solUtioEvenOddOdd([30, 13, 24, 321]) ==>0\n  */\nconst solUtioEvenOddOdd = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non-empty list of integers, return the sum of all of the even elements that are in even positions.\n  \n\n  Examples\n  solUtioOddOddOddOdd([5, 8, 7, 1]) ==> 12\n  solUtioOddOddOddOdd([3, 3, 3, 3, 3]) ==> 9\n  solUtioOddOddOddOdd([30, 13, 24, 321]) ==>0\n  */\nconst solUtioOddOddOddOdd = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non-empty list of integers, return the sum of all of the even elements that are in odd positions.\n  \n\n  Examples\n  solUtioEvenOddOddOddOdd([5, 8, 7, 1]) ==> 12\n  solUtioEvenOddOddOddOdd([3, 3, 3, 3, 3]) ==> 9\n  solUtioEvenOddOddOddOdd([30, 13, 24, 321]) ==>0\n  */\nconst solUtioEvenOddOddOddOdd = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non-empty list of integers, return the sum of all of the even elements that are in even positions.\n  \n\n  Examples\n  solUtioOddOddOddOddOddOdd([5, 8, 7, 1]) ==> 12\n  solUtioOddOddOddOddOddOdd([3, 3, 3, 3, 3]) ==> 9\n  solUtioOddOddOddOddOddOdd([30, 13, 24, 321]) ==>0\n  */\nconst solUtioOddOddOddOddOddOdd = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non-empty list of integers, return the sum of all of the even elements that are in odd positions.\n  \n\n  Examples\n  solUtioEvenOddOddOddOddOdd([5, 8, 7, 1]) ==> 12\n  solUtioEvenOddOddOddOddOddOdd([3, 3, 3, 3, 3]) ==> 9\n  solUtioEvenOddOddOddOddOddOdd([30, 13, 24, 321]) ==>0\n  */\nconst solUtioEvenOddOddOddOddOdd = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non-empty list of integers, return the sum of all of the even elements that are in even positions.\n  \n\n  Examples\n  solUtioOddOddOddOddOddOddOdd([5, 8, 7, 1]", "passed": 0}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addelemEnts = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addelemEnts", "gc": "<|endoftext|>/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addelemEnts = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 9) {\n      sum += arr[i];\n    } else if (arr[i] > 9 && arr[i] % 10 === 0) {\n      sum += arr[i];\n    } else if (arr[i] % 10 === 0 && arr[i] % 100 === 0) {\n      sum += arr[i];\n    } else if (arr[i] % 100 === 0) {\n      sum += arr[i];\n    }\n  }\n  return sum - sum % 10;\n};\n\n// https://leetcode.com/problems/sum-of-digits-in-a-string/\n/**\n * @param {string} s\n * @return {number}\n */\nvar sumOfDigits = function (s) {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i) - '0'.charCodeAt(0);\n  }\n  return sum;\n};\n\n// https://leetcode.com/problems/find-the-number-of-digits-in-a-string/\n/**\n * @param {string} s\n * @return {number}\n */\nvar numberOfDigits = function (s) {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i) - '0'.charCodeAt(0);\n  }\n  return sum;\n};\n\n// https://leetcode.com/problems/find-the-number-of-digits-in-a-string/\n/**\n * @param {string} s\n * @return {number}\n */\nvar numberOfDigitsWithZero = function (s) {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i) - '0'.charCodeAt(0);\n  }\n  return sum;\n};\n\n// https://leetcode.com/problems/find-the-number-of-digits-in-a-string/\n/**\n * @param {string} s\n * @return {number}\n */\nvar numberOfDigitsWithOne = function (s) {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i) - '0'.charCodeAt(0);\n  }\n  return sum;\n};\n\n// https://leetcode.com/problems/find-the-number-of-digits-in-a-string/\n/**\n * @param {string} s\n * @return {number}\n */\nvar numberOfDigitsWithTwo = function (s) {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i) - '0'.charCodeAt(0);\n  }\n  return sum;\n};\n\n// https://leetcode.com/problems/find-the-number-of-digits-in-a-string/\n/**\n * @param {string} s\n * @return {number}\n */\nvar numberOfDigitsWithThree = function (s) {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i) - '0'.charCodeAt(0);\n  }\n  return sum;\n};\n\n// https://leetcode.com/problems/find-the-number-of-digits-in-a-string/\n/**\n * @param {string} s\n * @return {number}\n */\nvar numberOfDigitsWithFour = function (s) {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i) - '0'.charCodeAt(0);\n  }\n  return sum;\n};\n\n// https://leetcode.com/problems/find-the-number-of-digits-in-a-string/\n/**\n * @param {string} s\n * @return {number}\n */\nvar numberOfDigitsWithFive = function (s) {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i) - '0'.charCodeAt(0);\n  }\n  return sum;\n};\n\n// https://leetcode.com/problems/find-the-number-of-digits-in-a-string/\n/**\n * @param {string} s\n * @return {number}\n */\nvar numberOfDigitsWithSix = function (s) {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i) - '0'.charCodeAt(0);\n  }\n  return sum;\n};\n\n// https://leetcode.com/problems/find-the-number-of-digits-in-a-string/\n/**\n * @param {string} s\n * @return {number}\n */\nvar numberOfDigitsWithSeven = function (s) {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i) - '0'.charCodeAt(0);\n  }\n  return sum;\n};\n\n// https://leetcode.com/problems/find-the-number-of-digits-in-a-string/\n/**\n * @param {string} s\n * @return {number}\n */\nvar numberOfDigitsWithEight = function (s) {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i) - '0'.charCodeAt(0);\n  }\n  return sum;\n};\n\n// https://leetcode.com/problems/find-the-number-of-digits-in-a-string/\n/**\n * @param {string} s\n * @return {number}\n */\nvar numberOfDigitsWithNine = function (s) {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i) - '0'.charCodeAt(0);\n  }\n  return sum;\n};\n\n// https://leetcode.com/problems/find-the-number-of-digits-in-a-string/\n/**\n * @param {string} s\n * @return {number}\n */\nvar numberOfDigitsWithTen = function (s) {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i) - '0'.charCodeAt(0);\n  }\n  return sum;\n};\n\n// https://leetcode.com/problems/find-the-number-of-digits-in-a-string/\n/**\n * @param {string} s\n * @return {number}\n */\nvar numberOfDigitsWithEleven = function (s) {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i) - '0'.charCodeAt(0);\n  }\n  return sum;\n};\n\n// https://leetcode.com/problems/find-the-number-of-digits-in-a-string/\n/**\n * @param {string} s\n * @return {number}\n */\nvar numberOfDigitsWithTwelve = function (s) {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i) - '0'.charCodeAt(0);\n  }\n  return sum;\n};\n\n// https://leetcode.com/problems/find-the-number-of-digits-in-a-string/\n/**\n * @param {string} s\n * @return {number}\n */\nvar numberOfDigitsWithThirteen = function (s) {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i) - '0'.charCodeAt(0);\n  }\n  return sum;\n};\n\n// https://leetcode.com/problems/find-the-number-of-digits-in-a-string/\n/**\n * @param {string} s\n * @return {number}\n */\nvar numberOfDigitsWithFourteen = function (s) {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i) - '0'.charCodeAt(0);\n  }\n  return sum;\n};\n\n// https://leetcode.com/problems/find-the-number-of-digits-in-a-string/\n/**\n * @param {string} s\n * @return {number}\n */\nvar numberOfDigitsWithFifteen = function (s) {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i) - '0'.charCodeAt(0);\n  }\n  return sum;\n};\n\n// https://leetcode.com/problems/find-the-number-of-digits-in-a-string/\n/**\n * @param {string} s\n * @return {number}\n */\nvar numberOfDigitsWithSixteen = function (s) {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i) - '0'.charCodeAt(0);\n  }\n  return sum;\n};\n\n// https://leetcode.com/problems/find-the-number-of-digits-in-a-string/\n/**\n * @param {string} s\n * @return {number}\n */\nvar numberOfDigitsWithSeventeen = function (s) {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i) - '0'.charCodeAt(", "passed": 0}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getoddCOllatZ(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getoddCOllatZ = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getoddCOllatZ", "gc": "<|endoftext|>/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getoddCOllatZ(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getoddCOllatZ = (n) => {\n  let list = [];\n  let last = 1;\n  let current = 1;\n  let i;\n\n  for (i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      list.push(last);\n      last = current;\n      current = current * 3 + 1;\n    } else {\n      list.push(current);\n      current = current * 3 + 1;\n    }\n  }\n\n  return list;\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the even numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getoddCOllatZ(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getoddCOllatZ = (n) => {\n  let list = [];\n  let last = 1;\n  let current = 1;\n  let i;\n\n  for (i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      list.push(last);\n      last = current;\n      current = current * 3 + 1;\n    } else {\n      list.push(current);\n      current = current * 3 + 1;\n    }\n  }\n\n  return list;\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the prime numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getoddCOllatZ(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getoddCOllatZ = (n) => {\n  let list = [];\n  let last = 1;\n  let current = 1;\n  let i;\n\n  for (i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      list.push(last);\n      last = current;\n      current = current * 3 + 1;\n    } else {\n      list.push(current);\n      current = current * 3 + 1;\n    }\n  }\n\n  return list;\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the prime numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getoddCOllatZ(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getoddCOllatZ = (n) => {\n  let list = [];\n  let last = 1;\n  let current = 1;\n  let i;\n\n  for (i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      list.push(last);\n      last = current;\n      current = current * 3 + 1;\n    } else {\n      list.push(current);\n      current = current * 3 + 1;\n    }\n  }\n\n  return list;\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the prime numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getoddCOllatZ(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getoddCOllatZ = (n) => {\n  let list = [];\n  let last = 1;\n  let current = 1;\n  let i;\n\n  for (i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      list.push(last);\n      last = current;\n      current = current * 3 + 1;\n    } else {\n      list.push(current);\n      current = current * 3 + 1;\n    }\n  }\n\n  return list;\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the prime numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getoddCOllatZ(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getoddCOllatZ = (n) => {\n  let list = [];\n  let last = 1;\n  let current = 1;\n  let i;\n\n  for (i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      list.push(last);\n", "passed": 0}
{"task_id": "JavaScript/124", "prompt": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  valIdDaTe('03-11-2000') => true\n\n  valIdDaTe('15-01-2012') => false\n\n  valIdDaTe('04-0-2040') => false\n\n  valIdDaTe('06-04-2020') => true\n\n  valIdDaTe('06/04/2020') => false\n  */\nconst valIdDaTe = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "valIdDaTe", "gc": "<|endoftext|>/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  valIdDaTe('03-11-2000') => true\n\n  valIdDaTe('15-01-2012') => false\n\n  valIdDaTe('04-0-2040') => false\n\n  valIdDaTe('06-04-2020') => true\n\n  valIdDaTe('06/04/2020') => false\n  */\nconst valIdDaTe = (date) => {\n  const dateArr = date.split('-');\n  const dateObj = new Date(dateArr[0], dateArr[1] - 1, dateArr[2]);\n  const dateDays = dateObj.getDate();\n  const dateMonth = dateObj.getMonth() + 1;\n  const dateYear = dateObj.getFullYear();\n  const dateDaysMinusOne = dateDays - 1;\n  const dateDaysMinusOneMinusOne = dateDaysMinusOne - 1;\n  const dateDaysMinusOneMinusOneMinusOne = dateDaysMinusOneMinusOne - 1;\n  const dateDaysMinusOneMinusOneMinusOneMinusOne = dateDaysMinusOneMinusOneMinusOne - 1;\n  const dateDaysMinusOneMinusOneMinusOneMinusOneMinusOne = dateDaysMinusOneMinusOneMinusOneMinusOneMinusOne - 1;\n  const dateDaysMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne = dateDaysMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne", "passed": 0}
{"task_id": "JavaScript/125", "prompt": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  splItWoRds(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splItWoRds(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splItWoRds(\"abcdef\") == 3\n  */\nconst splItWoRds = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splItWoRds", "gc": "<|endoftext|>/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splItWoRds(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splItWoRds(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splItWoRds(\"abcdef\") == 3\n  */\nconst splItWoRds = (txt) => {\n  const words = txt.split(/\\s+/);\n  const numWords = words.length;\n  let wordCount = 0;\n  let word;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let ", "passed": 0}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSOrteD([5]) ➞ true\n  isSOrteD([1, 2, 3, 4, 5]) ➞ true\n  isSOrteD([1, 3, 2, 4, 5]) ➞ false\n  isSOrteD([1, 2, 3, 4, 5, 6]) ➞ true\n  isSOrteD([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSOrteD([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSOrteD([1, 2, 2, 3, 3, 4]) ➞ true\n  isSOrteD([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSOrteD = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSOrteD", "gc": "<|endoftext|>/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSOrteD([5]) ➞ true\n  isSOrteD([1, 2, 3, 4, 5]) ➞ true\n  isSOrteD([1, 3, 2, 4, 5]) ➞ false\n  isSOrteD([1, 2, 3, 4, 5, 6]) ➞ true\n  isSOrteD([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSOrteD([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSOrteD([1, 2, 2, 3, 3, 4]) ➞ true\n  isSOrteD([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSOrteD = (lst) => {\n  const sorted = lst.sort((a, b) => a - b);\n  return sorted.every((v, i) => v === sorted[i + 1]);\n};\n\n/**\n * Given a list of numbers, return whether or not they are sorted\n  in descending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isDOrte([5]) ➞ true\n  isDOrte([1, 2, 3, 4, 5]) ➞ true\n  isDOrte([1, 3, 2, 4, 5]) ➞ false\n  isDOrte([1, 2, 3, 4, 5, 6]) ➞ true\n  isDOrte([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isDOrte([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isDOrte([1, 2, 2, 3, 3, 4]) ➞ true\n  isDOrte([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isDOrte = (lst) => {\n  const sorted = lst.sort((a, b) => b - a);\n  return sorted.every((v, i) => v === sorted[i]);\n};\n\n/**\n * Given a list of numbers, return whether or not they are sorted\n  in ascending order and in descending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isAscD([5]) ➞ true\n  isAscD([1, 2, 3, 4, 5]) ➞ true\n  isAscD([1, 3, 2, 4, 5]) ➞ false\n  isAscD([1, 2, 3, 4, 5, 6]) ➞ true\n  isAscD([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isAscD([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isAscD([1, 2, 2, 3, 3, 4]) ➞ true\n  isAscD([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isAscD = (lst) => {\n  const sorted = lst.sort((a, b) => b - a);\n  return sorted.every((v, i) => v === sorted[i + 1]);\n};\n\n/**\n * Given a list of numbers, return whether or not they are sorted\n  in ascending order and in descending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isDescD([5]) ➞ true\n  isDescD([1, 2, 3, 4, 5]) ➞ true\n  isDescD([1, 3, 2, 4, 5]) ➞ false\n  isDescD([1, 2, 3, 4, 5, 6]) ➞ true\n  isDescD([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isDescD([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isDescD([1, 2, 2, 3, 3, 4]) ➞ true\n  isDescD([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isDescD = (lst) => {\n  const sorted = lst.sort((a, b) => b - a);\n  return sorted.every((v, i) => v === sorted[i]);\n};\n\n/**\n * Given a list of numbers, return whether or not they are sorted\n  in ascending order and in descending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isAscD([5]) ➞ true\n  isAscD([1, 2, 3, 4, 5]) ➞ true\n  isAscD([1, 3, 2, 4, 5]) ➞ false\n  isAscD([1, 2, 3, 4, 5, 6]) ➞ true\n  isAscD([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isAscD([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isAscD([1, 2, 2, 3, 3, 4]) ➞ true\n  isAscD([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isAscDDesc = (lst) => {\n  const sorted = lst.sort((a, b) => b - a);\n  return sorted.every((v, i) => v === sorted[i + 1]);\n};\n\n/**\n * Given a list of numbers, return whether or not they are sorted\n  in ascending order and in descending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isDescD([5]) ➞ true\n  isDescD([1, 2, 3, 4, 5]) ➞ true\n  isDescD([1, 3, 2, 4, 5]) ➞ false\n  isDescD([1, 2, 3, 4, 5, 6]) ➞ true\n  isDescD([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isDescD([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isDescD([1, 2, 2, 3, 3, 4]) ➞ true\n  isDescD([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isDescDDesc = (lst) => {\n  const sorted = lst.sort((a, b) => b - a);\n  return sorted.every((v, i) => v === sorted[i]);\n};\n\n/**\n * Given a list of numbers, return whether or not they are sorted\n  in ascending order and in descending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isAscDDesc([5]) ➞ true\n  isAscDDesc([1, 2, 3, 4, 5]) ➞ true\n  isAscDDesc([1, 3, 2, 4, 5]) ➞ false\n  isAscDDesc([1, 2, 3, 4, 5, 6]) ➞ true\n  isAscDDesc([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isAscDDesc([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isAscDDesc([1, 2, 2, 3, 3, 4]) ➞ true\n  isAscDDesc([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isAscDDescDesc = (lst) => {\n  const sorted = lst.sort((a, b) => b - a);\n  return sorted.every((v, i) => v === sorted[i + 1]);\n};\n\n/**\n * Given a list of numbers, return whether or not they are sorted\n  in ascending order and in descending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isAscDDescDesc([5]) ➞ true\n  isAscDDescDesc([1, 2, 3, 4, 5]) ➞ true\n  isAscDDescDesc([1, 3, 2, 4, 5]) ➞ false\n  isAscDDescDesc([1, 2, 3, 4, 5, 6]) ➞ true\n  isAscDDescDesc([1, 2, 3, 4, 5, 6, 7]) ➞ ", "passed": 0}
{"task_id": "JavaScript/127", "prompt": "/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intErseCtion of these two \n  intervals is a prime number.\n  Example, the intErseCtion of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intErseCtion is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intErseCtion((1, 2), (2, 3)) ==> \"NO\"\n  intErseCtion((-1, 1), (0, 4)) ==> \"NO\"\n  intErseCtion((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intErseCtion = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intErseCtion", "gc": "<|endoftext|>/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intErseCtion of these two \n  intervals is a prime number.\n  Example, the intErseCtion of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intErseCtion is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intErseCtion((1, 2), (2, 3)) ==> \"NO\"\n  intErseCtion((-1, 1), (0, 4)) ==> \"NO\"\n  intErseCtion((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intErseCtion = (interval1, interval2) => {\n  const [start1, end1] = interval1;\n  const [start2, end2] = interval2;\n  const [start3, end3] = interval2;\n  const [start4, end4] = interval2;\n  const [start5, end5] = interval2;\n  const [start6, end6] = interval2;\n  const [start7, end7] = interval2;\n  const [start8, end8] = interval2;\n  const [start9, end9] = interval2;\n  const [start10, end10] = interval2;\n  const [start11, end11] = interval2;\n  const [start12, end12] = interval2;\n  const [start13, end13] = interval2;\n  const [start14, end14] = interval2;\n  const [start15, end15] = interval2;\n  const [start16, end16] = interval2;\n  const [start17, end17] = interval2;\n  const [start18, end18] = interval2;\n  const [start19, end19] = interval2;\n  const [start20, end20] = interval2;\n  const [start21, end21] = interval2;\n  const [start22, end22] = interval2;\n  const [start23, end23] = interval2;\n  const [start24, end24] = interval2;\n  const [start25, end25] = interval2;\n  const [start26, end26] = interval2;\n  const [start27, end27] = interval2;\n  const [start28, end28] = interval2;\n  const [start29, end29] = interval2;\n  const [start30, end30] = interval2;\n  const [start31, end31] = interval2;\n  const [start32, end32] = interval2;\n  const [start33, end33] = interval2;\n  const [start34, end34] = interval2;\n  const [start35, end35] = interval2;\n  const [start36, end36] = interval2;\n  const [start37, end37] = interval2;\n  const [start38, end38] = interval2;\n  const [start39, end39] = interval2;\n  const [start40, end40] = interval2;\n  const [start41, end41] = interval2;\n  const [start42, end42] = interval2;\n  const [start43, end43] = interval2;\n  const [start44, end44] = interval2;\n  const [start45, end45] = interval2;\n  const [start46, end46] = interval2;\n  const [start47, end47] = interval2;\n  const [start48, end48] = interval2;\n  const [start49, end49] = interval2;\n  const [start50, end50] = interval2;\n  const [start51, end51] = interval2;\n  const [start52, end52] = interval2;\n  const [start53, end53] = interval2;\n  const [start54, end54] = interval2;\n  const [start55, end55] = interval2;\n  const [start56, end56] = interval2;\n  const [start57, end57] = interval2;\n  const [start58, end58] = interval2;\n  const [start59, end59] = interval2;\n  const [start60, end60] = interval2;\n  const [start61, end61] = interval2;\n  const [start62, end62] = interval2;\n  const [start63, end63] = interval2;\n  const [start64, end64] = interval2;\n  const [start65, end65] = interval2;\n  const [start66, end66] = interval2;\n  const [start67, end67] = interval2;\n  const [start68, end68] = interval2;\n  const [start69, end69] = interval2;\n  const [start70, end70] = interval2;\n  const [start71, end71] = interval2;\n  const [start72, end72] = interval2;\n  const [start73, end73] = interval2;\n  const [start74, end74] = interval2;\n  const [start75, end75] = interval2;\n  const [start76, end76] = interval2;\n  const [start77, end77] = interval2;\n  const [start78, end78] = interval2;\n  const [start79, end79] = interval2;\n  const [start80, end80] = interval2;\n  const [start81, end81] = interval2;\n  const [start82, end82] = interval2;\n  const [start83, end83] = interval2;\n  const [start84, end84] = interval2;\n  const [start85, end85] = interval2;\n  const [start86, end86] = interval2;\n  const [start87, end87] = interval2;\n  const [start88, end88] = interval2;\n  const [start89, end89] = interval2;\n  const [start90, end90] = interval2;\n  const [start91, end91] = interval2;\n  const [start92, end92] = interval2;\n  const [start93, end93] = interval2;\n  const [start94, end94] = interval2;\n  const [start95, end95] = interval2;\n  const [start96, end96] = interval2;\n  const [start97, end97] = interval2;\n  const [start98, end98] = interval2;\n  const [start99, end99] = interval2;\n  const [start100, end100] = interval2;\n  const [start101, end101] = interval2;\n  const [start102, end102] = interval2;\n  const [start103, end103] = interval2;\n  const [start104, end104] = interval2;\n  const [start105, end105] = interval2;\n  const [start106, end106] = interval2;\n  const [start107, end107] = interval2;\n  const [start108, end108] = interval2;\n  const [start109, end109] = interval2;\n  const [start110, end110] = interval2;\n  const [start111, end111] = interval2;\n  const [start112, end112] = interval2;\n  const [start113, end113] = interval2;\n  const [start114, end114] = interval2;\n  const [start115, end115] = interval2;\n  const [start116, end116] = interval2;\n  const [start117, end117] = interval2;\n  const [start118, end118] = interval2;\n  const [start119, end119] = interval2;\n  const [start120, end120] = interval2;\n  const [start121, end121] = interval2;\n  const [start122, end122] = interval2;\n  const [start123, end123] = interval2;\n  const [start124, end124] = interval2;\n  const [start125, end125] = interval2;\n  const [start126, end126] = interval2;\n  const [start127, end127] = interval2;", "passed": 0}
{"task_id": "JavaScript/128", "prompt": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> proDSigNs([1, 2, 2, -4]) == -9\n  >>> proDSigNs([0, 1]) == 0\n  >>> proDSigNs([]) == null\n  */\nconst proDSigNs = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "proDSigNs", "gc": "<|endoftext|>/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> proDSigNs([1, 2, 2, -4]) == -9\n  >>> proDSigNs([0, 1]) == 0\n  >>> proDSigNs([]) == null\n  */\nconst proDSigNs = (arr) => {\n  let sum = 0;\n  let sign = 1;\n  let signs = arr.map(x => sign * x);\n  signs.forEach(sign => sum += sign);\n  return sum;\n};\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> proDSigNs([1, 2, 2, -4]) == -9\n  >>> proDSigNs([0, 1]) == 0\n  >>> proDSigNs([]) == null\n  */\nconst proDSigNs2 = (arr) => {\n  let sum = 0;\n  let sign = 1;\n  let signs = arr.map(x => sign * x);\n  signs.forEach(sign => sum += sign);\n  return sum;\n};\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> proDSigNs([1, 2, 2, -4]) == -9\n  >>> proDSigNs([0, 1]) == 0\n  >>> proDSigNs([]) == null\n  */\nconst proDSigNs3 = (arr) => {\n  let sum = 0;\n  let sign = 1;\n  let signs = arr.map(x => sign * x);\n  signs.forEach(sign => sum += sign);\n  return sum;\n};\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> proDSigNs([1, 2, 2, -4]) == -9\n  >>> proDSigNs([0, 1]) == 0\n  >>> proDSigNs([]) == null\n  */\nconst proDSigNs4 = (arr) => {\n  let sum = 0;\n  let sign = 1;\n  let signs = arr.map(x => sign * x);\n  signs.forEach(sign => sum += sign);\n  return sum;\n};\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> proDSigNs([1, 2, 2, -4]) == -9\n  >>> proDSigNs([0, 1]) == 0\n  >>> proDSigNs([]) == null\n  */\nconst proDSigNs5 = (arr) => {\n  let sum = 0;\n  let sign = 1;\n  let signs = arr.map(x => sign * x);\n  signs.forEach(sign => sum += sign);\n  return sum;\n};\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> proDSigNs([1, 2, 2, -4]) == -9\n  >>> proDSigNs([0, 1]) == 0\n  >>> proDSigNs([]) == null\n  */\nconst proDSigNs6 = (arr) => {\n  let sum = 0;\n  let sign = 1;\n  let signs = arr.map(x => sign * x);\n  signs.forEach(sign => sum += sign);\n  return sum;\n};\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> proDSigNs([1, 2, 2, -4]) == -9\n  >>> proDSigNs([0, 1]) == 0\n  >>> proDSigNs([]) == null\n  */\nconst proDSigNs7 = (arr) => {\n  let sum = 0;\n  let sign = 1;\n  let signs = arr.map(x => sign * x);\n  signs.forEach(sign => sum += sign);\n  return sum;\n};\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> proDSigNs([1, 2, 2, -4]) == -9\n  >>> proDSigNs([0, 1]) == 0\n  >>> proDSigNs([]) == null\n  */\nconst proDSigNs8 = (arr) => {\n  let sum = 0;\n  let sign = 1;\n  let signs = arr.map(x => sign * x);\n  signs.forEach(sign => sum += sign);\n  return sum;\n};\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> proDSigNs([1, 2, 2, -4]) == -9\n  >>> proDSigNs([0, 1]) == 0\n  >>> proDSigNs([]) == null\n  */\nconst proDSigNs9 = (arr) => {\n  let sum = 0;\n  let sign = 1;\n  let signs = arr.map(x => sign * x);\n  signs.forEach(sign => sum += sign);\n  return sum;\n};\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> proDSigNs([1, 2, 2, -4]) == -9\n  >>> proDSigNs([0, 1]) == 0\n  >>> proDSigNs([]) == null\n  */\nconst proDSigNs10 = (arr) => {\n  let sum = 0;\n  let sign = 1;\n  let signs = arr.map(x => sign * x);\n  signs.forEach(sign => sum += sign);\n  return sum;\n};\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> proDSigNs([1, 2, 2, -4]) == -9\n  >>> proDSigNs([0, 1]) == 0\n  >>> proDSigNs([]) == null\n  */\nconst proDSigNs11 = (arr) => {\n  let sum = 0;\n  let sign = 1;\n  let signs = arr.map(x => sign * x);\n  signs.forEach(sign => sum += sign);\n  return sum;\n};\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> proDSigNs([1, 2, 2, -4]) == -9\n  >>> proDSigNs([0, 1]) == 0\n  >>> ", "passed": 0}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minpath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minpath", "gc": "<|endoftext|>/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minpath = (grid, k) => {\n  let lst_A = [], \n    lst_B = [], \n    ans = [],\n    i, j, k, lst_i, lst_j, lst_k, ans_i, ans_j, ans_k, ans_l, ans_r, ans_c, ans_i, ans_j;\n  \n  for(i = 0; i < grid.length; i++) {\n    for(j = 0; j < grid[i].length; j++) {\n      lst_A.push(grid[i][j]);\n      lst_B.push(grid[i][j]);\n    }\n  }\n  \n  for(i = 0; i < lst_A.length; i++) {\n    for(j = 0; j < lst_A.length; j++) {\n      ans_i = lst_A[i];\n      ans_j = lst_A[j];\n      ans_k = lst_A[k];\n      ans_l = lst_A[lst_A.length - 1];\n      ans_r = lst_A[lst_A.length - 2];\n      ans_c = lst_A[lst_A.length - 3];\n      ans_i = lst_A[lst_A.length - 4];\n      ans_j = lst_A[lst_A.length - 5];\n      ans_k = lst_A[lst_A.length - 6];\n      ans_l = lst_A[lst_A.length - 7];\n      ans_r = lst_A[lst_A.length - 8];\n      ans_c = lst_A[lst_A.length - 9];\n      \n      if(ans_i < ans_j && ans_i < ans_k && ans_i < ans_l && ans_i < ans_r && ans_i < ans_c && ans_j < ans_k && ans_j < ans_l && ans_j < ans_r && ans_j < ans_c && ans_k < ans_l && ans_k < ans_r && ans_k < ans_c && ans_l < ans_r && ans_l < ans_c && ans_r < ans_c && ans_c < ans_i) {\n        ans.push(ans_i);\n      }\n    }\n  }\n  \n  return ans;\n};\n\n/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minpath = (grid, k) => {\n  let lst_A = [], \n    lst_B = [], \n    ans = [],\n    i, j, k, lst_i, lst_j, lst_k, ans_i, ans_j, ans_k, ans_l, ans_r, ans_c, ans_i, ans_j;\n  \n  for(i = 0; i < grid.length; i++) {\n    for(j = 0; j < grid[i].length; j++) {\n      lst_A.push(grid[i][j]);\n      lst_B.push(grid[i][j]);\n    }\n  }\n  \n  for(i = 0; i < lst_A.length; i++) {\n    for(j = 0; j < lst_A.length; j++) {\n      ans_i = lst_A[i];\n      ans_j = lst_A[j];\n      ans_k = lst_A[k];\n      ans_l = lst_A[lst_A.length - 1];\n      ans_r = lst_A[lst_A.length - 2];\n      ans_c = lst_A[lst_A.length - 3];\n      ans_i = lst_A[lst_A.length - 4];\n      ans_j = lst_A[lst_A.length - 5];\n      ans_k = lst_A[lst_A.length - 6];\n      ans_l = lst_A[lst_A.length - 7];\n      ans_r = lst_A[lst_A.length - 8];\n      ans_c = lst_A[lst_A.length - 9];\n      \n      if(ans_i < ans_j && ans_i < ans_k && ans_i < ans_l && ans_i < ans_r && ans_i < ans_c && ans_j < ans_k && ans_j < ans_l && ans_j < ans_r && ans_j < ans_c && ans_k < ans_l && ans_k < ans_r && ans_k < ans_c && ans_l < ans_r && ans_l < ans_c && ans_r < ans_c && ans_c < ans_i) {\n        ans.push(ans_i);\n      }\n    }\n  }\n  \n  return ans;\n};\n\n/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can ", "passed": 0}
{"task_id": "JavaScript/13", "prompt": "/* Return a greatest common divisor of two integers a and b\n  >>> greAtesTCommOnDIvisoR(3, 5)\n  1\n  >>> greAtesTCommOnDIvisoR(25, 15)\n  5\n  */\nconst greAtesTCommOnDIvisoR = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greAtesTCommOnDIvisoR", "gc": "<|endoftext|>/* Return a greatest common divisor of two integers a and b\n  >>> greAtesTCommOnDIvisoR(3, 5)\n  1\n  >>> greAtesTCommOnDIvisoR(25, 15)\n  5\n  */\nconst greAtesTCommOnDIvisoR = (a, b) => {\n  const aDiv = a % b;\n  const bDiv = b / a;\n  return aDiv === bDiv? aDiv : greAtesTCommOnDIvisoR(a, bDiv);\n};\n\n// Given a number and a divisor, return the number divided by that divisor.\n// If no divisor is given, return 0.\nconst greAtesTDivideByDivisorR = (number, divisor) => {\n  if (divisor === undefined) {\n    return 0;\n  }\n  return number / divisor;\n};\n\n// Given a number and a divisor, return the number multiplied by that divisor.\n// If no divisor is given, return 1.\nconst greAtesTMultipliedByDivisorR = (number, divisor) => {\n  if (divisor === undefined) {\n    return 1;\n  }\n  return number * divisor;\n};\n\n// Given a number and a divisor, return the number multiplied by that divisor.\n// If no divisor is given, return 0.\nconst greAtesTDividedByDivisorR = (number, divisor) => {\n  if (divisor === undefined) {\n    return 0;\n  }\n  return greAtesTMultipliedByDivisorR(number, divisor);\n};\n\n// Given a number and a divisor, return the number multiplied by that divisor.\n// If no divisor is given, return 1.\nconst greAtesTDividedByDivisor = (number, divisor) => {\n  if (divisor === undefined) {\n    return 1;\n  }\n  return greAtesTDividedByDivisorR(number, divisor);\n};\n\n// Given a number and a divisor, return the number multiplied by that divisor.\n// If no divisor is given, return 0.\nconst greAtesTDividedByDivisorOnDivisorR = (number, divisor) => {\n  if (divisor === undefined) {\n    return 0;\n  }\n  return greAtesTDividedByDivisorR(number, divisor);\n};\n\n// Given a number and a divisor, return the number multiplied by that divisor.\n// If no divisor is given, return 1.\nconst greAtesTDividedByDivisorOnDivisor = (number, divisor) => {\n  if (divisor === undefined) {\n    return 1;\n  }\n  return greAtesTDividedByDivisorOnDivisorR(number, divisor);\n};\n\n// Given a number and a divisor, return the number multiplied by that divisor.\n// If no divisor is given, return 0.\nconst greAtesTDividedByDivisorOnDivisorOnDivisorR = (number, divisor) => {\n  if (divisor === undefined) {\n    return 0;\n  }\n  return greAtesTDividedByDivisorOnDivisorR(number, divisor);\n};\n\n// Given a number and a divisor, return the number multiplied by that divisor.\n// If no divisor is given, return 1.\nconst greAtesTDividedByDivisorOnDivisorOnDivisor = (number, divisor) => {\n  if (divisor === undefined) {\n    return 1;\n  }\n  return greAtesTDividedByDivisorOnDivisorOnDivisorR(number, divisor);\n};\n\n// Given a number and a divisor, return the number multiplied by that divisor.\n// If no divisor is given, return 0.\nconst greAtesTDividedByDivisorOnDivisorOnDivisorOnDivisor = (number, divisor) => {\n  if (divisor === undefined) {\n    return 0;\n  }\n  return greAtesTDividedByDivisorOnDivisorOnDivisorOnDivisorR(number, divisor);\n};\n\n// Given a number and a divisor, return the number multiplied by that divisor.\n// If no divisor is given, return 1.\nconst greAtesTDividedByDivisorOnDivisorOnDivisorOnDivisorOnDivisor = (number, divisor) => {\n  if (divisor === undefined) {\n    return 1;\n  }\n  return greAtesTDividedByDivisorOnDivisorOnDivisorOnDivisorR(number, divisor);\n};\n\n// Given a number and a divisor, return the number multiplied by that divisor.\n// If no divisor is given, return 0.\nconst greAtesTDividedByDivisorOnDivisorOnDivisorOnDivisorOnDivisorOnDivisor = (number, divisor) => {\n  if (divisor === undefined) {\n    return 0;\n  }\n  return greAtesTDividedByDivisorOnDivisorOnDivisorOnDivisorOnDivisorR(number, divisor);\n};\n\n// Given a number and a divisor, return the number multiplied by that divisor.\n// If no divisor is given, return 1.\nconst greAtesTDividedByDivisorOnDivisorOnDivisorOnDivisorOnDivisorOnDivisorOnDivisor = (number, divisor) => {\n  if (divisor === undefined) {\n    return 1;\n  }\n  return greAtesTDividedByDivisorOnDivisorOnDivisorOnDivisorOnDivisorOnDivisorR(number, divisor);\n};\n\n// Given a number and a divisor, return the number multiplied by that divisor.\n// If no divisor is given, return 0.\nconst greAtesTDividedByDivisorOnDivisorOnDivisorOnDivisorOnDivisorOnDivisorOnDivisorOnDivisorOnDivisor = (number, divisor) => {\n  if (divisor === undefined) {\n    return 0;\n  }\n  return greAtesTDividedByDivisorOnDivisorOnDivisorOnDivisorOnDivisorOnDivisorOnDivisorR(number, divisor);\n};\n\n// Given a number and a divisor, return the number multiplied by that divisor.\n// If no divisor is given, return 1.\nconst greAtesTDividedByDivisorOnDivisorOnDivisorOnDivisorOnDivisorOnDivisorOnDivisorOnDivisorOnDivisorOnDivisorOnDivisor = (number, divisor) => {\n  if (divisor === undefined) {\n    return 1;\n  }\n  return greAtesTDividedByDivisorOnDivisorOnDivisorOnDivisorOnDivisorOnDivisorOnDivisorOnDivisorOnDivisorOnDivisorR(number, divisor);\n};\n\n// Given a number and a divisor, return the number multiplied by that divisor.\n// If no divisor is given, return 0.\nconst greAtesTDividedByDivisorOnDivisorOnDivisorOnDivisorOnDivisorOnDivisorOnDivisorOnDivisorOnDivisorOnDivisorOnDivisorOnDivisorOnDivisorOnDivisorOnDivisorOnDivisorOnDivisorOnDivisorOnDivisorOnDivisorOnDivisorOnDivisorOnDivisorOnDivisorOnDivisorOnDivisorOnDivisorOnDivisorOnDivisorOnDivisorOnDivisorOnDivisorOnDivisorOnDivisorOnDivisorOnDivisorOnDivisorOnDivisorOnDivisorOnDivisorOnDivisorOnDivisorOnDivisorOnDivisorOnDivisorOnDivisorOnDivisorOnDivisorOnDivisorOnDivisorOnDivisorOnDivisorOnDivisorOnDivisorOnDivisorOnDivisorOnDivisorOnDivisorOnDivisorOnDivisorOnDivisorOnDivisorOnDivisorOnDivisorOnDivisorOn", "passed": 0}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "gc": "<|endoftext|>/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  if (n <= 1) return [n, n, n, n];\n  return [\n    tri(n - 1) + tri(n - 2) + tri(n + 1),\n    tri(n - 1) + tri(n - 2) + tri(n),\n    tri(n - 1) + tri(n + 1) + tri(n - 2),\n    tri(n - 1) + tri(n + 1) + tri(n),\n  ];\n};\n\n/*\n  Given a positive integer n, return the first n numbers of the Fibonacci sequence.\n  Examples:\n  fib(5) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(6) = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]\n  fib(7) = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597]\n  fib(8) = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584]\n  fib(9) = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765]\n  fib(10) = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 9043, 15999]\n  fib(11) = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 9043, 15999, 23397]\n  fib(12) = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 9043, 15999, 23397, 42957]\n  fib(13) = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 9043, 15999, 23397, 42957, 6765]\n  fib(14) = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 9043, 15999, 23397, 42957, 6765, 141]\n  fib(15) = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 9043, 15999, 23397, 42957, 6765, 141, 233]\n  fib(16) = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 9043, 15999, 23397, 42957, 6765, 141, 233, 37]\n  fib(17) = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 9043, 15999, 23397, 42957, 6765, 141, 233, 37, 55]\n  fib(18) = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 9043, 15999, 23397, 42957, 6765, 141, 233, 37, 55, 89]\n  fib(19) = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 9043, 15999, 23397, 42957, 6765, 141, 233, 37, 55, 89, 144]\n  fib(20) = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 9043, 15999, 23397, 42957, 6765, 141, 233, 37, 55, 89, 144, 233]\n  fib(21) = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 9043, 15999, 23397, 42957, 6765, 141, 233, 37, 55, 89, 144, 233, 37, 55]\n  fib(22) = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 9043, 15999, 23397, 42957, 6765, 141, 233, 37, 55, 89, 144, 233, 37, 55, 89, 144, 233, 37, 55, 89, 144, 233, 37, 55, 89, 144, 233, 37, 55, 89, 144, 233, 37, 55, 89, 144, 233, 37, 55, 89, 144, 233, 37, 55, 89, 144, 233, 37, 55, 89, 144, 233, 37, 55, 89, 144, 233, 37, 55, 89, 144, 233, 37, 55, 89, 144, 233, 37, 55, 89, 144, 233, 37, 55, 89, 144, 233, 37, 55, 89, 144, 233, 37, 55, 89, 144, 233, 37, 55, 89, 144, 233, 37, 55, 89, 144, 233, 37, 55, 89, 144, 233, 37, 55, 89, 144, 233, 37, 55, 89, 144, 233, 37, 55, 89, 144, 233, 37, 55, 89, 144, 233, 37, 55, 89, 144, 233, 37, 55, 89, 144, 233, 37, 55, 89, 144, 233, 37, 55, 89, 144, 233, 37, 55, 89, 144, 233, 37, 55, 89, 144, 233, 37, 55, 89, 144, 233, 37, 55, 89, 144, 233, 37, 55, 89, 144, 233, 37, 55, 89, 144, 233, 37, 55, 89, 144, 233, 37, 55, 89, 144, 233, 37, 55, 89, 144, 233, 37, 55, 89, 144, 233, 37, 55, 89, 144, 233, 37, 55, 89, 144, 233, 37, 55, 89, 144, 233, 37, 55, 89, 144, 233, 37, 55, 89, 144, 233, 37, 55, 89, 144, 233, 37, 55, 89, 144, 233, 37, 55, 89, 144, 233, 37, 55, 89, 144, 233, 37, 55, 89, 144, 233, 37, 55, 89, 144, 233, 37, 55, 89, 144, 233, 37, 55, 89, ", "passed": 0}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integer n, return the product of the odd digIts.\n  Return 0 if all digIts are even.\n  For example:\n  digIts(1)  == 1\n  digIts(4)  == 0\n  digIts(235) == 15\n  */\nconst digIts = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digIts", "gc": "<|endoftext|>/*Given a positive integer n, return the product of the odd digIts.\n  Return 0 if all digIts are even.\n  For example:\n  digIts(1)  == 1\n  digIts(4)  == 0\n  digIts(235) == 15\n  */\nconst digIts = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    sum += n % i;\n    n /= i;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the product of the even digIts.\n  Return 0 if all digIts are odd.\n  For example:\n  digIts(1)  == 1\n  digIts(4)  == 0\n  digIts(235) == 15\n  */\nconst evenDigIts = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    sum += n % i;\n    n /= i;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the product of the odd powers.\n  Return 0 if all powers are odd.\n  For example:\n  powers(1)  == 1\n  powers(4)  == 0\n  powers(235) == 15\n  */\nconst oddPowers = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    sum += Math.pow(n, i);\n    n /= i;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the product of the even powers.\n  Return 0 if all powers are even.\n  For example:\n  powers(1)  == 1\n  powers(4)  == 0\n  powers(235) == 15\n  */\nconst evenPowers = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    sum += Math.pow(n, i);\n    n /= i;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the product of the odd powers.\n  Return 0 if all powers are odd.\n  For example:\n  powers(1)  == 1\n  powers(4)  == 0\n  powers(235) == 15\n  */\nconst oddPowersOddDivisors = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    sum += Math.pow(n, i);\n    n /= i;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the product of the even powers.\n  Return 0 if all powers are even.\n  For example:\n  powers(1)  == 1\n  powers(4)  == 0\n  powers(235) == 15\n  */\nconst evenPowersOddDivisors = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    sum += Math.pow(n, i);\n    n /= i;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the product of the odd powers.\n  Return 0 if all powers are odd.\n  For example:\n  powers(1)  == 1\n  powers(4)  == 0\n  powers(235) == 15\n  */\nconst oddPowersEvenDivisors = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    sum += Math.pow(n, i);\n    n /= i;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the product of the even powers.\n  Return 0 if all powers are even.\n  For example:\n  powers(1)  == 1\n  powers(4)  == 0\n  powers(235) == 15\n  */\nconst evenPowersEvenDivisors = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    sum += Math.pow(n, i);\n    n /= i;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the product of the odd powers.\n  Return 0 if all powers are odd.\n  For example:\n  powers(1)  == 1\n  powers(4)  == 0\n  powers(235) == 15\n  */\nconst oddPowersOddPowers = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    sum += Math.pow(n, i);\n    n /= i;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the product of the even powers.\n  Return 0 if all powers are even.\n  For example:\n  powers(1)  == 1\n  powers(4)  == 0\n  powers(235) == 15\n  */\nconst evenPowersOddPowers = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    sum += Math.pow(n, i);\n    n /= i;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the product of the odd powers.\n  Return 0 if all powers are odd.\n  For example:\n  powers(1)  == 1\n  powers(4)  == 0\n  powers(235) == 15\n  */\nconst oddPowersEvenPowers = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    sum += Math.pow(n, i);\n    n /= i;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the product of the odd powers.\n  Return 0 if all powers are odd.\n  For example:\n  powers(1)  == 1\n  powers(4)  == 0\n  powers(235) == 15\n  */\nconst evenPowersEvenPowers = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    sum += Math.pow(n, i);\n    n /= i;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the product of the odd powers.\n  Return 0 if all powers are odd.\n  For example:\n  powers(1)  == 1\n  powers(4)  == 0\n  powers(235) == 15\n  */\nconst oddPowersOddPowersOddDivisors = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    sum += Math.pow(n, i);\n    n /= i;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the product of the even powers.\n  Return 0 if all powers are even.\n  For example:\n  powers(1)  == 1\n  powers(4)  == 0\n  powers(235) == 15\n  */\nconst evenPowersEvenPowersOddDivisors = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    sum += Math.pow(n, i);\n    n /= i;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the product of the odd powers.\n  Return 0 if all powers are odd.\n  For example:\n  powers(1)  == 1\n  powers(4)  == 0\n  powers(235) == 15\n  */\nconst oddPowersOddPowersEvenDivisors = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    sum += Math.pow(n, i);\n    n /= i;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the product of the even powers.\n  Return 0 if all powers are even.\n  For example:\n  powers(1)  == 1\n  powers(4)  == 0\n  powers(235) == 15\n  */\nconst evenPowersEvenPowersEvenDivisors = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    sum += Math.pow(n, i);\n    n /= i;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the product of the odd powers.\n  Return 0 if all powers are odd.\n  For example:\n  powers(1)  == 1\n  powers(4)  == 0", "passed": 0}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNEsteD('[[]]') ➞ true\n  isNEsteD('[]]]]]]][[[[[]') ➞ false\n  isNEsteD('[][]') ➞ false\n  isNEsteD('[]') ➞ false\n  isNEsteD('[[][]]') ➞ true\n  isNEsteD('[[]][[') ➞ true\n  */\nconst isNEsteD = (string) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNEsteD", "gc": "<|endoftext|>/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNEsteD('[[]]') ➞ true\n  isNEsteD('[]]]]]]][[[[[]') ➞ false\n  isNEsteD('[][]') ➞ false\n  isNEsteD('[]') ➞ false\n  isNEsteD('[[][]]') ➞ true\n  isNEsteD('[[]][[') ➞ true\n  */\nconst isNEsteD = (string) => {\n  const nestingDepth = nestingDepthOf(string);\n  const nestingDepthInBrackets = nestingDepth - nestingDepthOf('[');\n  return nestingDepthInBrackets > 0;\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNEsteD('[[]]') ➞ true\n  isNEsteD('[]]]]]]][[[[[]') ➞ false\n  isNEsteD('[][]') ➞ false\n  isNEsteD('[]') ➞ false\n  isNEsteD('[[][]]') ➞ true\n  isNEsteD('[[]][[') ➞ true\n  */\nconst isNEsteD = (string) => {\n  const nestingDepth = nestingDepthOf(string);\n  const nestingDepthInBrackets = nestingDepth - nestingDepthOf('[');\n  return nestingDepthInBrackets > 0;\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNEsteD('[[]]') ➞ true\n  isNEsteD('[]]]]]]][[[[[]') ➞ false\n  isNEsteD('[][]') ➞ false\n  isNEsteD('[]') ➞ false\n  isNEsteD('[[][]]') ➞ true\n  isNEsteD('[[]][[') ➞ true\n  */\nconst isNEsteD = (string) => {\n  const nestingDepth = nestingDepthOf(string);\n  const nestingDepthInBrackets = nestingDepth - nestingDepthOf('[');\n  return nestingDepthInBrackets > 0;\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNEsteD('[[]]') ➞ true\n  isNEsteD('[]]]]]]][[[[[]') ➞ false\n  isNEsteD('[][]') ➞ false\n  isNEsteD('[]') ➞ false\n  isNEsteD('[[][]]') ➞ true\n  isNEsteD('[[]][[') ➞ true\n  */\nconst isNEsteD = (string) => {\n  const nestingDepth = nestingDepthOf(string);\n  const nestingDepthInBrackets = nestingDepth - nestingDepthOf('[');\n  return nestingDepthInBrackets > 0;\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNEsteD('[[]]') ➞ true\n  isNEsteD('[]]]]]]][[[[[]') ➞ false\n  isNEsteD('[][]') ➞ false\n  isNEsteD('[]') ➞ false\n  isNEsteD('[[][]]') ➞ true\n  isNEsteD('[[]][[') ➞ true\n  */\nconst isNEsteD = (string) => {\n  const nestingDepth = nestingDepthOf(string);\n  const nestingDepthInBrackets = nestingDepth - nestingDepthOf('[');\n  return nestingDepthInBrackets > 0;\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNEsteD('[[]]') ➞ true\n  isNEsteD('[]]]]]]][[[[[]') ➞ false\n  isNEsteD('[][]') ➞ false\n  isNEsteD('[]') ➞ false\n  isNEsteD('[[][]]') ➞ true\n  isNEsteD('[[]][[') ➞ true\n  */\nconst isNEsteD = (string) => {\n  const nestingDepth = nestingDepthOf(string);\n  const nestingDepthInBrackets = nestingDepth - nestingDepthOf('[');\n  return nestingDepthInBrackets > 0;\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNEsteD('[[]]') ➞ true\n  isNEsteD('[]]]]]]][[[[[]') ➞ false\n  isNEsteD('[][]') ➞ false\n  isNEsteD('[]') ➞ false\n  isNEsteD('[[][]]') ➞ true\n  isNEsteD('[[]][[') ➞ true\n  */\nconst isNEsteD = (string) => {\n  const nestingDepth = nestingDepthOf(string);\n  const nestingDepthInBrackets = nestingDepth - nestingDepthOf('[');\n  return nestingDepthInBrackets > 0;\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNEsteD('[[]]') ➞ true\n  isNEsteD('[]]]]]]][[[[[]') ➞ false\n  isNEsteD('[][]') ➞ false\n  isNEsteD('[]') ➞ false\n  isNEsteD('[[][]]') ➞ true\n  isNEsteD('[[]][[') ➞ true\n  */\nconst isNEsteD = (string) => {\n  const nestingDepth = nestingDepthOf(string);\n  const nestingDepthInBrackets = nestingDepth - nestingDepthOf('[');\n  return nestingDepthInBrackets > 0;\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  ", "passed": 0}
{"task_id": "JavaScript/133", "prompt": "/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumsquaRes = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumsquaRes", "gc": "<|endoftext|>/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumsquaRes = (lst) => {\n  let sum = 0;\n  let sumsq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n    sumsq += Math.pow(lst[i], 2);\n  }\n  return Math.ceil(sum / sumsq) * sumsq;\n};\n\n/*\n  You are given a list of numbers.\n  You need to return the sum of cubed numbers in the given list,\n  round each element in the list to the lower int(Floor) first.\n  Examples:\n  For lst = [1,2,3] the output should be 9\n  For lst = [1,4,9] the output should be 27\n  For lst = [1,3,5,7] the output should be 57\n  For lst = [1.4,4.2,0] the output should be 24\n  For lst = [-2.4,1,1] the output should be 1\n  */\nconst sumcubeRes = (lst) => {\n  let sum = 0;\n  let sumsq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 3);\n    sumsq += Math.pow(lst[i], 3);\n  }\n  return Math.floor(sum / sumsq) * sumsq;\n};\n\n/*\n  You are given a list of numbers.\n  You need to return the sum of cubed numbers in the given list,\n  round each element in the list to the lower int(Floor) first.\n  Examples:\n  For lst = [1,2,3] the output should be 9\n  For lst = [1,4,9] the output should be 27\n  For lst = [1,3,5,7] the output should be 57\n  For lst = [1.4,4.2,0] the output should be 24\n  For lst = [-2.4,1,1] the output should be 1\n  */\nconst sumcubeRes = (lst) => {\n  let sum = 0;\n  let sumsq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 4);\n    sumsq += Math.pow(lst[i], 4);\n  }\n  return Math.floor(sum / sumsq) * sumsq;\n};\n\n/*\n  You are given a list of numbers.\n  You need to return the sum of cubed numbers in the given list,\n  round each element in the list to the lower int(Floor) first.\n  Examples:\n  For lst = [1,2,3] the output should be 9\n  For lst = [1,4,9] the output should be 27\n  For lst = [1,3,5,7] the output should be 57\n  For lst = [1.4,4.2,0] the output should be 24\n  For lst = [-2.4,1,1] the output should be 1\n  */\nconst sumcubeRes = (lst) => {\n  let sum = 0;\n  let sumsq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 5);\n    sumsq += Math.pow(lst[i], 5);\n  }\n  return Math.floor(sum / sumsq) * sumsq;\n};\n\n/*\n  You are given a list of numbers.\n  You need to return the sum of cubed numbers in the given list,\n  round each element in the list to the lower int(Floor) first.\n  Examples:\n  For lst = [1,2,3] the output should be 9\n  For lst = [1,4,9] the output should be 27\n  For lst = [1,3,5,7] the output should be 57\n  For lst = [1.4,4.2,0] the output should be 24\n  For lst = [-2.4,1,1] the output should be 1\n  */\nconst sumcubeRes = (lst) => {\n  let sum = 0;\n  let sumsq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 6);\n    sumsq += Math.pow(lst[i], 6);\n  }\n  return Math.floor(sum / sumsq) * sumsq;\n};\n\n/*\n  You are given a list of numbers.\n  You need to return the sum of cubed numbers in the given list,\n  round each element in the list to the lower int(Floor) first.\n  Examples:\n  For lst = [1,2,3] the output should be 9\n  For lst = [1,4,9] the output should be 27\n  For lst = [1,3,5,7] the output should be 57\n  For lst = [1.4,4.2,0] the output should be 24\n  For lst = [-2.4,1,1] the output should be 1\n  */\nconst sumcubeRes = (lst) => {\n  let sum = 0;\n  let sumsq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 7);\n    sumsq += Math.pow(lst[i], 7);\n  }\n  return Math.floor(sum / sumsq) * sumsq;\n};\n\n/*\n  You are given a list of numbers.\n  You need to return the sum of cubed numbers in the given list,\n  round each element in the list to the lower int(Floor) first.\n  Examples:\n  For lst = [1,2,3] the output should be 9\n  For lst = [1,4,9] the output should be 27\n  For lst = [1,3,5,7] the output should be 57\n  For lst = [1.4,4.2,0] the output should be 24\n  For lst = [-2.4,1,1] the output should be 1\n  */\nconst sumcubeRes = (lst) => {\n  let sum = 0;\n  let sumsq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 8);\n    sumsq += Math.pow(lst[i], 8);\n  }\n  return Math.floor(sum / sumsq) * sumsq;\n};\n\n/*\n  You are given a list of numbers.\n  You need to return the sum of cubed numbers in the given list,\n  round each element in the list to the lower int(Floor) first.\n  Examples:\n  For lst = [1,2,3] the output should be 9\n  For lst = [1,4,9] the output should be 27\n  For lst = [1,3,5,7] the output should be 57\n  For lst = [1.4,4.2,0] the output should be 24\n  For lst = [-2.4,1,1] the output should be 1\n  */\nconst sumcubeRes = (lst) => {\n  let sum = 0;\n  let sumsq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 9);\n    sumsq += Math.pow(lst[i], 9);\n  }\n  return Math.floor(sum / sumsq) * sumsq;\n};\n\n/*\n  You are given a list of numbers.\n  You need to return the sum of cubed numbers in the given list,\n  round each element in the list to the lower int(Floor) first.\n  Examples:\n  For lst = [1,2,3] the output should be 9\n  For lst = [1,4,9] the output should be 27\n  For lst = [1,3,5,7] the output should be 57\n  For lst = [1.4,4.2,0] the output should be 24\n  For lst = [-2.4,1,1] the output should be 1\n  */\nconst sumcubeRes = (lst) => {\n  let sum = 0;\n  let sumsq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 10);\n    sumsq += Math.pow(lst[i], 10);\n  }\n  return Math.floor(sum / sumsq) * sumsq;\n};\n\n/*\n  You are given a list of numbers.\n  You need to return the sum of cubed numbers in the given list,\n  round each element in the list to the lower int(Floor) first.\n  Examples:\n  For lst = [1,2,3] the output should be 9\n  For lst = [1,4,9] the output should be 27\n  For lst = [1,3,5,7] the output should be 57\n  For lst = [1.4,4.2,0] the output should be 24\n  For lst = [-2.4,1,1] the output should be 1\n  */\nconst sumcubeRes = (lst) => {\n  let sum = 0;\n  let sumsq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 11);\n    sumsq += Math.pow(lst[i], 11);\n  }\n  return Math.floor(sum / sumsq) * sumsq;\n};\n\n/*\n", "passed": 0}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  cheCkIflastCHarisALeTter(\"apple pie\") ➞ false\n  cheCkIflastCHarisALeTter(\"apple pi e\") ➞ true\n  cheCkIflastCHarisALeTter(\"apple pi e \") ➞ false\n  cheCkIflastCHarisALeTter(\"\") ➞ false\n  */\nconst cheCkIflastCHarisALeTter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "cheCkIflastCHarisALeTter", "gc": "<|endoftext|>/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  cheCkIflastCHarisALeTter(\"apple pie\") ➞ false\n  cheCkIflastCHarisALeTter(\"apple pi e\") ➞ true\n  cheCkIflastCHarisALeTter(\"apple pi e \") ➞ false\n  cheCkIflastCHarisALeTter(\"\") ➞ false\n  */\nconst cheCkIflastCHarisALeTter = (txt) => {\n  let lastChar = txt.charAt(txt.length - 1);\n  let isLastCharAWord = lastChar ==='' || lastChar === '\\t';\n  return isLastCharAWord;\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a digit and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  cheCkIflastCHarisALeTter(\"apple pie\") ➞ false\n  cheCkIflastCHarisALeTter(\"apple pi e\") ➞ true\n  cheCkIflastCHarisALeTter(\"apple pi e \") ➞ false\n  cheCkIflastCHarisALeTter(\"\") ➞ false\n  */\nconst cheCkIflastCHarisALeTter = (txt) => {\n  let lastChar = txt.charAt(txt.length - 1);\n  let isLastCharDigit = lastChar >= '0' && lastChar <= '9';\n  return isLastCharDigit;\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a letter and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  cheCkIflastCHarisALeTter(\"apple pie\") ➞ false\n  cheCkIflastCHarisALeTter(\"apple pi e\") ➞ true\n  cheCkIflastCHarisALeTter(\"apple pi e \") ➞ false\n  cheCkIflastCHarisALeTter(\"\") ➞ false\n  */\nconst cheCkIflastCHarisALeTter = (txt) => {\n  let lastChar = txt.charAt(txt.length - 1);\n  let isLastCharLetter = lastChar >= 'a' && lastChar <= 'z';\n  return isLastCharLetter;\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a letter and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  cheCkIflastCHarisALeTter(\"apple pie\") ➞ false\n  cheCkIflastCHarisALeTter(\"apple pi e\") ➞ true\n  cheCkIflastCHarisALeTter(\"apple pi e \") ➞ false\n  cheCkIflastCHarisALeTter(\"\") ➞ false\n  */\nconst cheCkIflastCHarisALeTter = (txt) => {\n  let lastChar = txt.charAt(txt.length - 1);\n  let isLastCharLetter = lastChar >= 'A' && lastChar <= 'Z';\n  return isLastCharLetter;\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a letter and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  cheCkIflastCHarisALeTter(\"apple pie\") ➞ false\n  cheCkIflastCHarisALeTter(\"apple pi e\") ➞ true\n  cheCkIflastCHarisALeTter(\"apple pi e \") ➞ false\n  cheCkIflastCHarisALeTter(\"\") ➞ false\n  */\nconst cheCkIflastCHarisALeTter = (txt) => {\n  let lastChar = txt.charAt(txt.length - 1);\n  let isLastCharLetter = lastChar >= 'a' && lastChar <= 'z';\n  return isLastCharLetter;\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a letter and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  cheCkIflastCHarisALeTter(\"apple pie\") ➞ false\n  cheCkIflastCHarisALeTter(\"apple pi e\") ➞ true\n  cheCkIflastCHarisALeTter(\"apple pi e \") ➞ false\n  cheCkIflastCHarisALeTter(\"\") ➞ false\n  */\nconst cheCkIflastCHarisALeTter = (txt) => {\n  let lastChar = txt.charAt(txt.length - 1);\n  let isLastCharLetter = lastChar >= 'A' && lastChar <= 'Z';\n  return isLastCharLetter;\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a letter and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  cheCkIflastCHarisALeTter(\"apple pie\") ➞ false\n  cheCkIflastCHarisALeTter(\"apple pi e\") ➞ true\n  cheCkIflastCHarisALeTter(\"apple pi e \") ➞ false\n  cheCkIflastCHarisALeTter(\"\") ➞ false\n  */\nconst cheCkIflastCHarisALeTter = (txt) => {\n  let lastChar = txt.charAt(txt.length - 1);\n  let isLastCharLetter = lastChar >= 'a' && lastChar <= 'z';\n  return isLastCharLetter;\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a letter and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  cheCkIflastCHarisALeTter(\"apple pie\") ➞ false\n  cheCkIflastCHarisALeTter(\"apple pi e\") ➞ true\n  cheCkIflastCHarisALeTter(\"apple pi e \") ➞ false\n  cheCkIflastCH", "passed": 0}
{"task_id": "JavaScript/135", "prompt": "/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canarraNge([1,2,4,3,5]) = 3\n  canarraNge([1,2,3]) = -1\n  */\nconst canarraNge = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canarraNge", "gc": "<|endoftext|>/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canarraNge([1,2,4,3,5]) = 3\n  canarraNge([1,2,3]) = -1\n  */\nconst canarraNge = (arr) => {\n  let index = -1;\n  for (let i = arr.length - 1; i >= 0; i--) {\n    if (arr[i] > arr[index]) {\n      index = i;\n    }\n  }\n  return index;\n};\n\n/*\n  Given an array of integers, return a new array which contains all the\n  integers except the one at index. For example, given [1,2,3,4,5], return [2,4,5].\n\n  Examples:\n  removeOne([1,2,3,4,5]) = [2,4,5]\n  removeOne([1,2,3,4,5]) = [2,3]\n  */\nconst removeOne = (arr) => {\n  let newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (i!== canarraNge(arr)) {\n      newArr.push(arr[i]);\n    }\n  }\n  return newArr;\n};\n\n/*\n  Given an array of integers, return a new array which contains all the\n  integers except the one at index. For example, given [1,2,3,4,5], return [2,4,5].\n\n  Examples:\n  removeTwo([1,2,3,4,5]) = [2,4,5]\n  removeTwo([1,2,3,4,5]) = [2,3]\n  */\nconst removeTwo = (arr) => {\n  let newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (i!== canarraNge(arr)) {\n      newArr.push(arr[i]);\n    }\n  }\n  return newArr;\n};\n\n/*\n  Given an array of integers, return a new array which contains all the\n  integers except the one at index. For example, given [1,2,3,4,5], return [2,4,5].\n\n  Examples:\n  removeThree([1,2,3,4,5]) = [2,4,5]\n  removeThree([1,2,3,4,5]) = [2,3]\n  */\nconst removeThree = (arr) => {\n  let newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (i!== canarraNge(arr)) {\n      newArr.push(arr[i]);\n    }\n  }\n  return newArr;\n};\n\n/*\n  Given an array of integers, return a new array which contains all the\n  integers except the one at index. For example, given [1,2,3,4,5], return [2,4,5].\n\n  Examples:\n  removeFour([1,2,3,4,5]) = [2,4,5]\n  removeFour([1,2,3,4,5]) = [2,3]\n  */\nconst removeFour = (arr) => {\n  let newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (i!== canarraNge(arr)) {\n      newArr.push(arr[i]);\n    }\n  }\n  return newArr;\n};\n\n/*\n  Given an array of integers, return a new array which contains all the\n  integers except the one at index. For example, given [1,2,3,4,5], return [2,4,5].\n\n  Examples:\n  removeFive([1,2,3,4,5]) = [2,4,5]\n  removeFive([1,2,3,4,5]) = [2,3]\n  */\nconst removeFive = (arr) => {\n  let newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (i!== canarraNge(arr)) {\n      newArr.push(arr[i]);\n    }\n  }\n  return newArr;\n};\n\n/*\n  Given an array of integers, return a new array which contains all the\n  integers except the one at index. For example, given [1,2,3,4,5], return [2,4,5].\n\n  Examples:\n  removeSix([1,2,3,4,5]) = [2,4,5]\n  removeSix([1,2,3,4,5]) = [2,3]\n  */\nconst removeSix = (arr) => {\n  let newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (i!== canarraNge(arr)) {\n      newArr.push(arr[i]);\n    }\n  }\n  return newArr;\n};\n\n/*\n  Given an array of integers, return a new array which contains all the\n  integers except the one at index. For example, given [1,2,3,4,5], return [2,4,5].\n\n  Examples:\n  removeSeven([1,2,3,4,5]) = [2,4,5]\n  removeSeven([1,2,3,4,5]) = [2,3]\n  */\nconst removeSeven = (arr) => {\n  let newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (i!== canarraNge(arr)) {\n      newArr.push(arr[i]);\n    }\n  }\n  return newArr;\n};\n\n/*\n  Given an array of integers, return a new array which contains all the\n  integers except the one at index. For example, given [1,2,3,4,5], return [2,4,5].\n\n  Examples:\n  removeEight([1,2,3,4,5]) = [2,4,5]\n  removeEight([1,2,3,4,5]) = [2,3]\n  */\nconst removeEight = (arr) => {\n  let newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (i!== canarraNge(arr)) {\n      newArr.push(arr[i]);\n    }\n  }\n  return newArr;\n};\n\n/*\n  Given an array of integers, return a new array which contains all the\n  integers except the one at index. For example, given [1,2,3,4,5], return [2,4,5].\n\n  Examples:\n  removeNine([1,2,3,4,5]) = [2,4,5]\n  removeNine([1,2,3,4,5]) = [2,3]\n  */\nconst removeNine = (arr) => {\n  let newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (i!== canarraNge(arr)) {\n      newArr.push(arr[i]);\n    }\n  }\n  return newArr;\n};\n\n/*\n  Given an array of integers, return a new array which contains all the\n  integers except the one at index. For example, given [1,2,3,4,5], return [2,4,5].\n\n  Examples:\n  removeTen([1,2,3,4,5]) = [2,4,5]\n  removeTen([1,2,3,4,5]) = [2,3]\n  */\nconst removeTen = (arr) => {\n  let newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (i!== canarraNge(arr)) {\n      newArr.push(arr[i]);\n    }\n  }\n  return newArr;\n};\n\n/*\n  Given an array of integers, return a new array which contains all the\n  integers except the one at index. For example, given [1,2,3,4,5], return [2,4,5].\n\n  Examples:\n  removeEleven([1,2,3,4,5]) = [2,4,5]\n  removeEleven([1,2,3,4,5]) = [2,3]\n  */\nconst removeEleven = (arr) => {\n  let newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (i!== canarraNge(arr)) {\n      newArr.push(arr[i]);\n    }\n  }\n  return newArr;\n};\n\n/*\n  Given an array of integers, return a new array which contains all the\n  integers except the one at index. For example, given [1,2,3,4,5], return [2,4,5].\n\n  Examples:\n  removeTwelve([1,2,3,4,5]) = [2,4,5]\n  removeTwelve([1,2,3,4,5]) = [2,3]\n  */\nconst removeTwelve = (arr) => {\n  let newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (i!== canarraNge(arr)) {\n      newArr.push(arr[i]);\n    }\n  }\n  return newArr;\n};\n\n/*\n  Given an array of integers, return a new array which contains all the\n  integers except the one at index. For example, given [1,2,3,4,5], return [2,4,5].\n\n  Examples:\n  remove", "passed": 0}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  larGestsmallEstintegErs([2, 4, 1, 3, 5, 7]) == (null, 1)\n  larGestsmallEstintegErs([]) == (null, null)\n  larGestsmallEstintegErs([0]) == (null, null)\n  */\nconst larGestsmallEstintegErs = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "larGestsmallEstintegErs", "gc": "<|endoftext|>/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  larGestsmallEstintegErs([2, 4, 1, 3, 5, 7]) == (null, 1)\n  larGestsmallEstintegErs([]) == (null, null)\n  larGestsmallEstintegErs([0]) == (null, null)\n  */\nconst larGestsmallEstintegErs = (lst) => {\n  const largest = largestPositiveInteger(lst);\n  const smallest = smallestNegativeInteger(lst);\n  if (largest === null || smallest === null) {\n    return null;\n  }\n  return [largest, smallest];\n};\n\n/**\n * Return the largest positive integer in a list.\n * If the list is empty, return null.\n */\nconst largestPositiveInteger = (lst) => {\n  if (lst === null || lst.length === 0) {\n    return null;\n  }\n  return lst.reduce((acc, curr) => Math.max(acc, curr), 0);\n};\n\n/**\n * Return the smallest negative integer in a list.\n * If the list is empty, return null.\n */\nconst smallestNegativeInteger = (lst) => {\n  if (lst === null || lst.length === 0) {\n    return null;\n  }\n  return lst.reduce((acc, curr) => Math.min(acc, curr), 0);\n};\n\n/**\n * Return the largest positive integer in a list.\n * If the list is empty, return null.\n */\nconst largestPositiveIntegerOrNull = (lst) => {\n  if (lst === null || lst.length === 0) {\n    return null;\n  }\n  return lst.reduce((acc, curr) => Math.max(acc, curr), 0);\n};\n\n/**\n * Return the smallest negative integer in a list.\n * If the list is empty, return null.\n */\nconst smallestNegativeIntegerOrNull = (lst) => {\n  if (lst === null || lst.length === 0) {\n    return null;\n  }\n  return lst.reduce((acc, curr) => Math.min(acc, curr), 0);\n};\n\n/**\n * Return the largest positive integer in a list.\n * If the list is empty, return null.\n */\nconst largestPositiveIntegerOrNull = (lst) => {\n  if (lst === null || lst.length === 0) {\n    return null;\n  }\n  return lst.reduce((acc, curr) => Math.max(acc, curr), 0);\n};\n\n/**\n * Return the smallest negative integer in a list.\n * If the list is empty, return null.\n */\nconst smallestNegativeIntegerOrNull = (lst) => {\n  if (lst === null || lst.length === 0) {\n    return null;\n  }\n  return lst.reduce((acc, curr) => Math.min(acc, curr), 0);\n};\n\n/**\n * Return the largest positive integer in a list.\n * If the list is empty, return null.\n */\nconst largestPositiveIntegerOrNull = (lst) => {\n  if (lst === null || lst.length === 0) {\n    return null;\n  }\n  return lst.reduce((acc, curr) => Math.max(acc, curr), 0);\n};\n\n/**\n * Return the smallest negative integer in a list.\n * If the list is empty, return null.\n */\nconst smallestNegativeIntegerOrNull = (lst) => {\n  if (lst === null || lst.length === 0) {\n    return null;\n  }\n  return lst.reduce((acc, curr) => Math.min(acc, curr), 0);\n};\n\n/**\n * Return the largest positive integer in a list.\n * If the list is empty, return null.\n */\nconst largestPositiveIntegerOrNull = (lst) => {\n  if (lst === null || lst.length === 0) {\n    return null;\n  }\n  return lst.reduce((acc, curr) => Math.max(acc, curr), 0);\n};\n\n/**\n * Return the smallest negative integer in a list.\n * If the list is empty, return null.\n */\nconst smallestNegativeIntegerOrNull = (lst) => {\n  if (lst === null || lst.length === 0) {\n    return null;\n  }\n  return lst.reduce((acc, curr) => Math.min(acc, curr), 0);\n};\n\n/**\n * Return the largest positive integer in a list.\n * If the list is empty, return null.\n */\nconst largestPositiveIntegerOrNull = (lst) => {\n  if (lst === null || lst.length === 0) {\n    return null;\n  }\n  return lst.reduce((acc, curr) => Math.max(acc, curr), 0);\n};\n\n/**\n * Return the smallest negative integer in a list.\n * If the list is empty, return null.\n */\nconst smallestNegativeIntegerOrNull = (lst) => {\n  if (lst === null || lst.length === 0) {\n    return null;\n  }\n  return lst.reduce((acc, curr) => Math.min(acc, curr), 0);\n};\n\n/**\n * Return the largest positive integer in a list.\n * If the list is empty, return null.\n */\nconst largestPositiveIntegerOrNull = (lst) => {\n  if (lst === null || lst.length === 0) {\n    return null;\n  }\n  return lst.reduce((acc, curr) => Math.max(acc, curr), 0);\n};\n\n/**\n * Return the smallest negative integer in a list.\n * If the list is empty, return null.\n */\nconst smallestNegativeIntegerOrNull = (lst) => {\n  if (lst === null || lst.length === 0) {\n    return null;\n  }\n  return lst.reduce((acc, curr) => Math.min(acc, curr), 0);\n};\n\n/**\n * Return the largest positive integer in a list.\n * If the list is empty, return null.\n */\nconst largestPositiveIntegerOrNull = (lst) => {\n  if (lst === null || lst.length === 0) {\n    return null;\n  }\n  return lst.reduce((acc, curr) => Math.max(acc, curr), 0);\n};\n\n/**\n * Return the smallest negative integer in a list.\n * If the list is empty, return null.\n */\nconst smallestNegativeIntegerOrNull = (lst) => {\n  if (lst === null || lst.length === 0) {\n    return null;\n  }\n  return lst.reduce((acc, curr) => Math.min(acc, curr), 0);\n};\n\n/**\n * Return the largest positive integer in a list.\n * If the list is empty, return null.\n */\nconst largestPositiveIntegerOrNull = (lst) => {\n  if (lst === null || lst.length === 0) {\n    return null;\n  }\n  return lst.reduce((acc, curr) => Math.max(acc, curr), 0);\n};\n\n/**\n * Return the smallest negative integer in a list.\n * If the list is empty, return null.\n */\nconst smallestNegativeIntegerOrNull = (lst) => {\n  if (lst === null || lst.length === 0) {\n    return null;\n  }\n  return lst.reduce((acc, curr) => Math.min(acc, curr), 0);\n};\n\n/**\n * Return the largest positive integer in a list.\n * If the list is empty, return null.\n */\nconst largestPositiveIntegerOrNull = (lst) => {\n  if (lst === null || lst.length === 0) {\n    return null;\n  }\n  return lst.reduce((acc, curr) => Math.max(acc, curr), 0);\n};\n\n/**\n * Return the smallest negative integer in a list.\n * If the list is empty, return null.\n */\nconst smallestNegativeIntegerOrNull = (lst) => {\n  if (lst === null || lst.length === 0) {\n    return null;\n  }\n  return lst.reduce((acc, curr) => Math.min(acc, curr), 0);\n};\n\n/**\n * Return the largest positive integer in a list.\n * If the list is empty, return null.\n */\nconst largestPositiveIntegerOrNull = (lst) => {\n  if (lst === null || lst.length === 0) {\n    return null;\n  }\n  return lst.reduce((acc, curr) => Math.max(acc, curr), 0);\n};\n\n/**\n * Return the smallest negative integer in a list.\n * If the list is empty, return null.\n */\nconst smallestNegativeIntegerOrNull = (lst) => {\n  if (lst === null || lst.length === 0) {\n    return null;\n  }\n  return lst.reduce((acc, curr) => Math.min(acc, curr), 0);\n};\n\n/**\n * Return the largest positive integer in a list.\n * If the list is empty, return null.\n */\nconst largestPositiveIntegerOrNull = (lst) => {\n  if (lst === null || lst.length === 0) {\n    return null;\n  }\n  return lst.reduce((acc, curr", "passed": 0}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be . or ,\n\n  comPareone(1, 2.5) ➞ 2.5\n  comPareone(1, \"2,3\") ➞ \"2,3\"\n  comPareone(\"5,1\", \"6\") ➞ \"6\"\n  comPareone(\"1\", 1) ➞ null\n  */\nconst comPareone = (a, b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "comPareone", "gc": "<|endoftext|>/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  comPareone(1, 2.5) ➞ 2.5\n  comPareone(1, \"2,3\") ➞ \"2,3\"\n  comPareone(\"5,1\", \"6\") ➞ \"6\"\n  comPareone(\"1\", 1) ➞ null\n  */\nconst comPareone = (a, b) => {\n  if (a === null || b === null) {\n    return null\n  }\n  if (a === \"\" || b === \"\") {\n    return null\n  }\n  if (a === \"\" && b === \"\") {\n    return null\n  }\n  if (a === \"\" && b === \"\") {\n    return null\n  }\n  if (a === \"\" && b === \"\") {\n    return null\n  }\n  if (a === \"\" && b === \"\") {\n    return null\n  }\n  if (a === \"\" && b === \"\") {\n    return null\n  }\n  if (a === \"\" && b === \"\") {\n    return null\n  }\n  if (a === \"\" && b === \"\") {\n    return null\n  }\n  if (a === \"\" && b === \"\") {\n    return null\n  }\n  if (a === \"\" && b === \"\") {\n    return null\n  }\n  if (a === \"\" && b === \"\") {\n    return null\n  }\n  if (a === \"\" && b === \"\") {\n    return null\n  }\n  if (a === \"\" && b === \"\") {\n    return null\n  }\n  if (a === \"\" && b === \"\") {\n    return null\n  }\n  if (a === \"\" && b === \"\") {\n    return null\n  }\n  if (a === \"\" && b === \"\") {\n    return null\n  }\n  if (a === \"\" && b === \"\") {\n    return null\n  }\n  if (a === \"\" && b === \"\") {\n    return null\n  }\n  if (a === \"\" && b === \"\") {\n    return null\n  }\n  if (a === \"\" && b === \"\") {\n    return null\n  }\n  if (a === \"\" && b === \"\") {\n    return null\n  }\n  if (a === \"\" && b === \"\") {\n    return null\n  }\n  if (a === \"\" && b === \"\") {\n    return null\n  }\n  if (a === \"\" && b === \"\") {\n    return null\n  }\n  if (a === \"\" && b === \"\") {\n    return null\n  }\n  if (a === \"\" && b === \"\") {\n    return null\n  }\n  if (a === \"\" && b === \"\") {\n    return null\n  }\n  if (a === \"\" && b === \"\") {\n    return null\n  }\n  if (a === \"\" && b === \"\") {\n    return null\n  }\n  if (a === \"\" && b === \"\") {\n    return null\n  }\n  if (a === \"\" && b === \"\") {\n    return null\n  }\n  if (a === \"\" && b === \"\") {\n    return null\n  }\n  if (a === \"\" && b === \"\") {\n    return null\n  }\n  if (a === \"\" && b === \"\") {\n    return null\n  }\n  if (a === \"\" && b === \"\") {\n    return null\n  }\n  if (a === \"\" && b === \"\") {\n    return null\n  }\n  if (a === \"\" && b === \"\") {\n    return null\n  }\n  if (a === \"\" && b === \"\") {\n    return null\n  }\n  if (a === \"\" && b === \"\") {\n    return null\n  }\n  if (a === \"\" && b === \"\") {\n    return null\n  }\n  if (a === \"\" && b === \"\") {\n    return null\n  }\n  if (a === \"\" && b === \"\") {\n    return null\n  }\n  if (a === \"\" && b === \"\") {\n    return null\n  }\n  if (a === \"\" && b === \"\") {\n    return null\n  }\n  if (a === \"\" && b === \"\") {\n    return null\n  }\n  if (a === \"\" && b === \"\") {\n    return null\n  }\n  if (a === \"\" && b === \"\") {\n    return null\n  }\n  if (a === \"\" && b === \"\") {\n    return null\n  }\n  if (a === \"\" && b === \"\") {\n    return null\n  }\n  if (a === \"\" && b === \"\") {\n    return null\n  }\n  if (a === \"\" && b === \"\") {\n    return null\n  }\n  if (a === \"\" && b === \"\") {\n    return null\n  }\n  if (a === \"\" && b === \"\") {\n    return null\n  }\n  if (a === \"\" && b === \"\") {\n    return null\n  }\n  if (a === \"\" && b === \"\") {\n    return null\n  }\n  if (a === \"\" && b === \"\") {\n    return null\n  }\n  if (a === \"\" && b === \"\") {\n    return null\n  }\n  if (a === \"\" && b === \"\") {\n    return null\n  }\n  if (a === \"\" && b === \"\") {\n    return null\n  }\n  if (a === \"\" && b === \"\") {\n    return null\n  }\n  if (a === \"\" && b === \"\") {\n    return null\n  }\n  if (a === \"\" && b === \"\") {\n    return null\n  }\n  if (a === \"\" && b === \"\") {\n    return null\n  }\n  if (a === \"\" && b === \"\") {\n    return null\n  }\n  if (a === \"\" && b === \"\") {\n    return null\n  }\n  if (a === \"\" && b === \"\") {\n    return null\n  }\n  if (a === \"\" && b === \"\") {\n    return null\n  }\n  if (a === \"\" && b === \"\") {\n    return null\n  }\n  if (a === \"\" && b === \"\") {\n    return null\n  }\n  if (a === \"\" && b === \"\") {\n    return null\n  }\n  if (a === \"\" && b === \"\") {\n    return null\n  }\n  if (a === \"\" && b === \"\") {\n    return null\n  }\n  if (a === \"\" && b === \"\") {\n    return null\n  }\n  if (a === \"\" && b === \"\") {\n    return null\n  }\n  if (a === \"\" && b === \"\") {\n    return null\n  }\n  if (a === \"\" && b === \"\") {\n    return null\n  }\n  if (a === \"\" && b === \"\") {\n    return null\n  }\n  if (a === \"\" && b === \"\") {\n    return null\n  }\n  if (a === \"\" && b === \"\") {\n    return null\n  }\n  if (a === \"\" && b === \"\") {\n    return null\n  }\n  if (a === \"\" && b === \"\") {\n    return null\n  }\n  if (a === \"\" && b === \"\") {\n    return null\n  }\n  if (a === \"\" && b === \"\") {\n    return null\n  }\n  if (a === \"\" && b === \"\") {\n    return null\n  }\n  if (a === \"\" && b === \"\") {\n    return null\n  }\n  if (a === \"\" && b === \"\") {\n    return null\n  }\n  if (a === \"\" && b === \"\") {\n    return null\n  }\n  if (a === \"\" && b === \"\") {\n    return null\n  }\n  if (a === \"\" && b === \"\") {\n    return null\n  }\n  if (a === \"\" && b === \"\") {\n    return null\n  }\n  if (a === \"\" && b === \"\") {\n    return null\n  }\n  if (a === \"\" && b === \"\") {\n    return null\n  }\n  if (a === \"\" && b === \"\") {\n    return null\n  }\n  if (a === \"\"", "passed": 0}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEQualtoSumeveN(4) == false\n  isEQualtoSumeveN(6) == false\n  isEQualtoSumeveN(8) == true\n  */\nconst isEQualtoSumeveN = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEQualtoSumeveN", "gc": "<|endoftext|>/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEQualtoSumeveN(4) == false\n  isEQualtoSumeveN(6) == false\n  isEQualtoSumeveN(8) == true\n  */\nconst isEQualtoSumeveN = (n) => {\n  let sum = 0;\n  let isEven = true;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n      isEven = false;\n    }\n  }\n  return isEven;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 negative even numbers\n  Example\n  isEQualtoSumeveN(-4) == false\n  isEQualtoSumeveN(-6) == false\n  isEQualtoSumeveN(-8) == true\n  */\nconst isEQualtoSumeveN = (n) => {\n  let sum = 0;\n  let isEven = true;\n  for (let i = -n; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n      isEven = false;\n    }\n  }\n  return isEven;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 negative odd numbers\n  Example\n  isEQualtoSumeveN(-4) == false\n  isEQualtoSumeveN(-6) == false\n  isEQualtoSumeveN(-8) == false\n  */\nconst isEQualtoSumeveN = (n) => {\n  let sum = 0;\n  let isEven = true;\n  for (let i = -n; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n      isEven = true;\n    }\n  }\n  return isEven;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n  Example\n  isEQualtoSumeveN(4) == true\n  isEQualtoSumeveN(6) == true\n  isEQualtoSumeveN(8) == true\n  */\nconst isEQualtoSumeveN = (n) => {\n  let sum = 0;\n  let isEven = true;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n      isEven = false;\n    }\n  }\n  return isEven;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEQualtoSumeveN(4) == true\n  isEQualtoSumeveN(6) == true\n  isEQualtoSumeveN(8) == true\n  */\nconst isEQualtoSumeveN = (n) => {\n  let sum = 0;\n  let isEven = true;\n  for (let i = -n; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n      isEven = false;\n    }\n  }\n  return isEven;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 negative odd numbers\n  Example\n  isEQualtoSumeveN(-4) == true\n  isEQualtoSumeveN(-6) == true\n  isEQualtoSumeveN(-8) == true\n  */\nconst isEQualtoSumeveN = (n) => {\n  let sum = 0;\n  let isEven = true;\n  for (let i = -n; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n      isEven = true;\n    }\n  }\n  return isEven;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 negative even numbers\n  Example\n  isEQualtoSumeveN(-4) == true\n  isEQualtoSumeveN(-6) == true\n  isEQualtoSumeveN(-8) == true\n  */\nconst isEQualtoSumeveN = (n) => {\n  let sum = 0;\n  let isEven = true;\n  for (let i = -n; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n      isEven = false;\n    }\n  }\n  return isEven;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n  Example\n  isEQualtoSumeveN(4) == true\n  isEQualtoSumeveN(6) == true\n  isEQualtoSumeveN(8) == true\n  */\nconst isEQualtoSumeveN = (n) => {\n  let sum = 0;\n  let isEven = true;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n      isEven = false;\n    }\n  }\n  return isEven;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEQualtoSumeveN(4) == true\n  isEQualtoSumeveN(6) == true\n  isEQualtoSumeveN(8) == true\n  */\nconst isEQualtoSumeveN = (n) => {\n  let sum = 0;\n  let isEven = true;\n  for (let i = -n; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n      isEven = false;\n    }\n  }\n  return isEven;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 negative odd numbers\n  Example\n  isEQualtoSumeveN(-4) == true\n  isEQualtoSumeveN(-6) == true\n  isEQualtoSumeveN(-8) == true\n  */\nconst isEQualtoSumeveN = (n) => {\n  let sum = 0;\n  let isEven = true;\n  for (let i = -n; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n      isEven = false;\n    }\n  }\n  return isEven;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 negative even numbers\n  Example\n  isEQualtoSumeveN(-4) == true\n  isEQualtoSumeveN(-6) == true\n  isEQualtoSumeveN(-8) == true\n  */\nconst isEQualtoSumeveN = (n) => {\n  let sum = 0;\n  let isEven = true;\n  for (let i = -n; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n      isEven = false;\n    }\n  }\n  return isEven;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n  Example\n  isEQualtoSumeveN(4) == true\n  isEQualtoSumeveN(6) == true\n  isEQualtoSumeveN(8) == true\n  */\nconst isEQualtoSumeveN = (n) => {\n  let sum = 0;\n  let isEven = true;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n      isEven = false;\n    }\n  }\n  return isEven;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 negative odd numbers\n  Example\n  isEQualtoSumeveN(-4) == true\n  isEQualtoSumeveN(-6) == true\n  isEQualtoSumeveN(-8) == true\n  */\nconst isEQualtoSumeveN = (n) => {\n  let sum = 0;\n  let isEven = true;\n  for (let i = -n; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n      ", "passed": 0}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n  where n > 0\n\n  For example:\n  >>> speCialfactoRiaL(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst speCialfactoRiaL = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "speCialfactoRiaL", "gc": "<|endoftext|>/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n  where n > 0\n\n  For example:\n  >>> speCialfactoRiaL(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst speCialfactoRiaL = (n) => {\n  if (n <= 0) {\n    return 1;\n  }\n  return n * speCialfactoRiaL(n - 1) + n * speCialfactoRiaL(n - 2) * speCialfactoRiaL(n - 3) * speCialfactoRiaL(n - 4) * speCialfactoRiaL(n - 5) * speCialfactoRiaL(n - 6) * speCialfactoRiaL(n - 7) * speCialfactoRiaL(n - 8) * speCialfactoRiaL(n - 9) * speCialfactoRiaL(n - 10) * speCialfactoRiaL(n - 11) * speCialfactoRiaL(n - 12) * speCialfactoRiaL(n - 13) * speCialfactoRiaL(n - 14) * speCialfactoRiaL(n - 15);\n};\n\n/*\n  Given a positive integer n, return the factorial of n modulo 11.\n\n  For example:\n  >>> modulo11(10)\n  11\n\n  >>> modulo11(12)\n  12\n\n  >>> modulo11(13)\n  13\n\n  >>> modulo11(14)\n  14\n\n  >>> modulo11(15)\n  15\n\n  >>> modulo11(16)\n  16\n\n  >>> modulo11(17)\n  17\n\n  >>> modulo11(18)\n  18\n\n  >>> modulo11(19)\n  19\n\n  >>> modulo11(20)\n  20\n\n  >>> modulo11(21)\n  21\n\n  >>> modulo11(22)\n  22\n\n  >>> modulo11(23)\n  23\n\n  >>> modulo11(24)\n  24\n\n  >>> modulo11(25)\n  25\n\n  >>> modulo11(26)\n  26\n\n  >>> modulo11(27)\n  27\n\n  >>> modulo11(28)\n  28\n\n  >>> modulo11(29)\n  29\n\n  >>> modulo11(30)\n  30\n\n  >>> modulo11(31)\n  31\n\n  >>> modulo11(32)\n  32\n\n  >>> modulo11(33)\n  33\n\n  >>> modulo11(34)\n  34\n\n  >>> modulo11(35)\n  35\n\n  >>> modulo11(36)\n  36\n\n  >>> modulo11(37)\n  37\n\n  >>> modulo11(38)\n  38\n\n  >>> modulo11(39)\n  39\n\n  >>> modulo11(40)\n  40\n\n  >>> modulo11(41)\n  41\n\n  >>> modulo11(42)\n  42\n\n  >>> modulo11(43)\n  43\n\n  >>> modulo11(44)\n  44\n\n  >>> modulo11(45)\n  45\n\n  >>> modulo11(46)\n  46\n\n  >>> modulo11(47)\n  47\n\n  >>> modulo11(48)\n  48\n\n  >>> modulo11(49)\n  49\n\n  >>> modulo11(50)\n  50\n\n  >>> modulo11(51)\n  51\n\n  >>> modulo11(52)\n  52\n\n  >>> modulo11(53)\n  53\n\n  >>> modulo11(54)\n  54\n\n  >>> modulo11(55)\n  55\n\n  >>> modulo11(56)\n  56\n\n  >>> modulo11(57)\n  57\n\n  >>> modulo11(58)\n  58\n\n  >>> modulo11(59)\n  59\n\n  >>> modulo11(60)\n  60\n\n  >>> modulo11(61)\n  61\n\n  >>> modulo11(62)\n  62\n\n  >>> modulo11(63)\n  63\n\n  >>> modulo11(64)\n  64\n\n  >>> modulo11(65)\n  65\n\n  >>> modulo11(66)\n  66\n\n  >>> modulo11(67)\n  67\n\n  >>> modulo11(68)\n  68\n\n  >>> modulo11(69)\n  69\n\n  >>> modulo11(70)\n  70\n\n  >>> modulo11(71)\n  71\n\n  >>> modulo11(72)\n  72\n\n  >>> modulo11(73)\n  73\n\n  >>> modulo11(74)\n  74\n\n  >>> modulo11(75)\n  75\n\n  >>> modulo11(76)\n  76\n\n  >>> modulo11(77)\n  77\n\n  >>> modulo11(78)\n  78\n\n  >>> modulo11(79)\n  79\n\n  >>> modulo11(80)\n  80\n\n  >>> modulo11(81)\n  81\n\n  >>> modulo11(82)\n  82\n\n  >>> modulo11(83)\n  83\n\n  >>> modulo11(84)\n  84\n\n  >>> modulo11(85)\n  85\n\n  >>> modulo11(86)\n  86\n\n  >>> modulo11(87)\n  87\n\n  >>> modulo11(88)\n  88\n\n  >>> modulo11(89)\n  89\n\n  >>> modulo11(90)\n  90\n\n  >>> modulo11(91)\n  91\n\n  >>> modulo11(92)\n  92\n\n  >>> modulo11(93)\n  93\n\n  >>> modulo11(94)\n  94\n\n  >>> modulo11(95)\n  95\n\n  >>> modulo11(96)\n  96\n\n  >>> modulo11(97)\n  97\n\n  >>> modulo11(98)\n  98\n\n  >>> modulo11(99)\n  99\n\n  >>> modulo11(100)\n  100\n\n  >>> modulo11(101)\n  101\n\n  >>> modulo11(102)\n  102\n\n  >>> modulo11(103)\n  103\n\n  >>> modulo11(104)\n  104\n\n  >>> modulo11(105)\n  105\n\n  >>> modulo11(106)\n  106\n\n  >>> modulo11(107)\n  107\n\n  >>> modulo11(108)\n  108\n\n  >>> modulo11(109)\n  109\n\n  >>> modulo11(110)\n  110\n\n  >>> modulo11(111)\n  111\n\n  >>> modulo11(112)\n  112\n\n  >>> modulo11(113)\n  113\n\n  >>> modulo11(114)\n  114\n\n  >>> modulo11(115)\n  ", "passed": 0}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allprefIxes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allprefIxes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allprefIxes", "gc": "<|endoftext|>/* Return list of all prefixes from shortest to longest of the input string\n  >>> allprefIxes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allprefIxes = (string) => {\n  let ixes = [];\n  let ix = 0;\n  let len = string.length;\n  let last = 0;\n  while (len > 0) {\n    last = ix;\n    ix++;\n    ixes = ixes.concat(string[ix].split(''));\n    len = ixes.length;\n  }\n  return ixes;\n};\n\n/* Return list of all prefixes from shortest to longest of the input string\n  >>> allprefIxes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allprefIxes2 = (string) => {\n  let ixes = [];\n  let ix = 0;\n  let len = string.length;\n  let last = 0;\n  while (len > 0) {\n    last = ix;\n    ix++;\n    ixes = ixes.concat(string[ix].split(''));\n    len = ixes.length;\n  }\n  return ixes.slice(0, last);\n};\n\n/* Return list of all prefixes from shortest to longest of the input string\n  >>> allprefIxes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allprefIxes3 = (string) => {\n  let ixes = [];\n  let ix = 0;\n  let len = string.length;\n  let last = 0;\n  while (len > 0) {\n    last = ix;\n    ix++;\n    ixes = ixes.concat(string[ix].split(''));\n    len = ixes.length;\n  }\n  return ixes.slice(0, last);\n};\n\n/* Return list of all prefixes from shortest to longest of the input string\n  >>> allprefIxes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allprefIxes4 = (string) => {\n  let ixes = [];\n  let ix = 0;\n  let len = string.length;\n  let last = 0;\n  while (len > 0) {\n    last = ix;\n    ix++;\n    ixes = ixes.concat(string[ix].split(''));\n    len = ixes.length;\n  }\n  return ixes.slice(0, last);\n};\n\n/* Return list of all prefixes from shortest to longest of the input string\n  >>> allprefIxes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allprefIxes5 = (string) => {\n  let ixes = [];\n  let ix = 0;\n  let len = string.length;\n  let last = 0;\n  while (len > 0) {\n    last = ix;\n    ix++;\n    ixes = ixes.concat(string[ix].split(''));\n    len = ixes.length;\n  }\n  return ixes.slice(0, last);\n};\n\n/* Return list of all prefixes from shortest to longest of the input string\n  >>> allprefIxes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allprefIxes6 = (string) => {\n  let ixes = [];\n  let ix = 0;\n  let len = string.length;\n  let last = 0;\n  while (len > 0) {\n    last = ix;\n    ix++;\n    ixes = ixes.concat(string[ix].split(''));\n    len = ixes.length;\n  }\n  return ixes.slice(0, last);\n};\n\n/* Return list of all prefixes from shortest to longest of the input string\n  >>> allprefIxes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allprefIxes7 = (string) => {\n  let ixes = [];\n  let ix = 0;\n  let len = string.length;\n  let last = 0;\n  while (len > 0) {\n    last = ix;\n    ix++;\n    ixes = ixes.concat(string[ix].split(''));\n    len = ixes.length;\n  }\n  return ixes.slice(0, last);\n};\n\n/* Return list of all prefixes from shortest to longest of the input string\n  >>> allprefIxes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allprefIxes8 = (string) => {\n  let ixes = [];\n  let ix = 0;\n  let len = string.length;\n  let last = 0;\n  while (len > 0) {\n    last = ix;\n    ix++;\n    ixes = ixes.concat(string[ix].split(''));\n    len = ixes.length;\n  }\n  return ixes.slice(0, last);\n};\n\n/* Return list of all prefixes from shortest to longest of the input string\n  >>> allprefIxes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allprefIxes9 = (string) => {\n  let ixes = [];\n  let ix = 0;\n  let len = string.length;\n  let last = 0;\n  while (len > 0) {\n    last = ix;\n    ix++;\n    ixes = ixes.concat(string[ix].split(''));\n    len = ixes.length;\n  }\n  return ixes.slice(0, last);\n};\n\n/* Return list of all prefixes from shortest to longest of the input string\n  >>> allprefIxes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allprefIxes10 = (string) => {\n  let ixes = [];\n  let ix = 0;\n  let len = string.length;\n  let last = 0;\n  while (len > 0) {\n    last = ix;\n    ix++;\n    ixes = ixes.concat(string[ix].split(''));\n    len = ixes.length;\n  }\n  return ixes.slice(0, last);\n};\n\n/* Return list of all prefixes from shortest to longest of the input string\n  >>> allprefIxes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allprefIxes11 = (string) => {\n  let ixes = [];\n  let ix = 0;\n  let len = string.length;\n  let last = 0;\n  while (len > 0) {\n    last = ix;\n    ix++;\n    ixes = ixes.concat(string[ix].split(''));\n    len = ixes.length;\n  }\n  return ixes.slice(0, last);\n};\n\n/* Return list of all prefixes from shortest to longest of the input string\n  >>> allprefIxes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allprefIxes12 = (string) => {\n  let ixes = [];\n  let ix = 0;\n  let len = string.length;\n  let last = 0;\n  while (len > 0) {\n    last = ix;\n    ix++;\n    ixes = ixes.concat(string[ix].split(''));\n    len = ixes.length;\n  }\n  return ixes.slice(0, last);\n};\n\n/* Return list of all prefixes from shortest to longest of the input string\n  >>> allprefIxes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allprefIxes13 = (string) => {\n  let ixes = [];\n  let ix = 0;\n  let len = string.length;\n  let last = 0;\n  while (len > 0) {\n    last = ix;\n    ix++;\n    ixes = ixes.concat(string[ix].split(''));\n    len = ixes.length;\n  }\n  return ixes.slice(0, last);\n};\n\n/* Return list of all prefixes from shortest to longest of the input string\n  >>> allprefIxes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allprefIxes14 = (string) => {\n  let ixes = [];\n  let ix = 0;\n  let len = string.length;\n  let last = 0;\n  while (len > 0) {\n    last = ix;\n    ix++;\n    ixes = ixes.concat(string[ix].split(''));\n    len = ixes.length;\n  }\n  return ixes.slice(0, last);\n};\n\n/* Return list of all prefixes from shortest to longest of the input string\n  >>> allprefIxes('abc')\n  ", "passed": 0}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixspacEs(\"Example\") == \"Example\"\n  fixspacEs(\"Example 1\") == \"Example_1\"\n  fixspacEs(\" Example 2\") == \"_Example_2\"\n  fixspacEs(\" Example   3\") == \"_Example-3\"\n  */\nconst fixspacEs = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixspacEs", "gc": "<|endoftext|>/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixspacEs(\"Example\") == \"Example\"\n  fixspacEs(\"Example 1\") == \"Example_1\"\n  fixspacEs(\" Example 2\") == \"_Example_2\"\n  fixspacEs(\" Example   3\") == \"_Example-3\"\n  */\nconst fixspacEs = (text) => {\n  return text.replace(/\\s/g, \"_\").replace(/\\s{2,}/, \" \");\n}\n\n/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixspacEs(\"Example\") == \"Example\"\n  fixspacEs(\"Example 1\") == \"Example_1\"\n  fixspacEs(\" Example 2\") == \"_Example_2\"\n  fixspacEs(\" Example   3\") == \"_Example-3\"\n  */\nconst fixspacEs2 = (text) => {\n  return text.replace(/\\s/g, \"_\").replace(/\\s{2,}/, \" \");\n}\n\n/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixspacEs(\"Example\") == \"Example\"\n  fixspacEs(\"Example 1\") == \"Example_1\"\n  fixspacEs(\" Example 2\") == \"_Example_2\"\n  fixspacEs(\" Example   3\") == \"_Example-3\"\n  */\nconst fixspacEs3 = (text) => {\n  return text.replace(/\\s/g, \"_\").replace(/\\s{2,}/, \" \");\n}\n\n/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixspacEs(\"Example\") == \"Example\"\n  fixspacEs(\"Example 1\") == \"Example_1\"\n  fixspacEs(\" Example 2\") == \"_Example_2\"\n  fixspacEs(\" Example   3\") == \"_Example-3\"\n  */\nconst fixspacEs4 = (text) => {\n  return text.replace(/\\s/g, \"_\").replace(/\\s{2,}/, \" \");\n}\n\n/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixspacEs(\"Example\") == \"Example\"\n  fixspacEs(\"Example 1\") == \"Example_1\"\n  fixspacEs(\" Example 2\") == \"_Example_2\"\n  fixspacEs(\" Example   3\") == \"_Example-3\"\n  */\nconst fixspacEs5 = (text) => {\n  return text.replace(/\\s/g, \"_\").replace(/\\s{2,}/, \" \");\n}\n\n/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixspacEs(\"Example\") == \"Example\"\n  fixspacEs(\"Example 1\") == \"Example_1\"\n  fixspacEs(\" Example 2\") == \"_Example_2\"\n  fixspacEs(\" Example   3\") == \"_Example-3\"\n  */\nconst fixspacEs6 = (text) => {\n  return text.replace(/\\s/g, \"_\").replace(/\\s{2,}/, \" \");\n}\n\n/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixspacEs(\"Example\") == \"Example\"\n  fixspacEs(\"Example 1\") == \"Example_1\"\n  fixspacEs(\" Example 2\") == \"_Example_2\"\n  fixspacEs(\" Example   3\") == \"_Example-3\"\n  */\nconst fixspacEs7 = (text) => {\n  return text.replace(/\\s/g, \"_\").replace(/\\s{2,}/, \" \");\n}\n\n/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixspacEs(\"Example\") == \"Example\"\n  fixspacEs(\"Example 1\") == \"Example_1\"\n  fixspacEs(\" Example 2\") == \"_Example_2\"\n  fixspacEs(\" Example   3\") == \"_Example-3\"\n  */\nconst fixspacEs8 = (text) => {\n  return text.replace(/\\s/g, \"_\").replace(/\\s{2,}/, \" \");\n}\n\n/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixspacEs(\"Example\") == \"Example\"\n  fixspacEs(\"Example 1\") == \"Example_1\"\n  fixspacEs(\" Example 2\") == \"_Example_2\"\n  fixspacEs(\" Example   3\") == \"_Example-3\"\n  */\nconst fixspacEs9 = (text) => {\n  return text.replace(/\\s/g, \"_\").replace(/\\s{2,}/, \" \");\n}\n\n/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixspacEs(\"Example\") == \"Example\"\n  fixspacEs(\"Example 1\") == \"Example_1\"\n  fixspacEs(\" Example 2\") == \"_Example_2\"\n  fixspacEs(\" Example   3\") == \"_Example-3\"\n  */\nconst fixspacEs10 = (text) => {\n  return text.replace(/\\s/g, \"_\").replace(/\\s{2,}/, \" \");\n}\n\n/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixspacEs(\"Example\") == \"Example\"\n  fixspacEs(\"Example 1\") == \"Example_1\"\n  fixspacEs(\" Example 2\") == \"_Example_2\"\n  fixspacEs(\" Example   3\") == \"_Example-3\"\n  */\nconst fixspacEs11 = (text) => {\n  return text.replace(/\\s/g, \"_\").replace(/\\s{2,}/, \" \");\n}\n\n/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixspacEs(\"Example\") == \"Example\"\n  fixspacEs(\"Example 1\") == \"Example_1\"\n  fixspacEs(\" Example 2\") == \"_Example_2\"\n  fixspacEs(\" Example   3\") == \"_Example-3\"\n  */\nconst fixspacEs12 = (text) => {\n  return text.replace(/\\s/g, \"_\").replace(/\\s{2,}/, \" \");\n}\n\n/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixspacEs(\"Example\") == \"Example\"\n  fixspacEs(\"Example 1\") == \"Example_1\"\n  fixspacEs(\" Example 2\") == \"_Example_2\"\n  fixspacEs(\" Example   3\") == \"_", "passed": 0}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  filENamEChecK(\"example.txt\") # => 'Yes'\n  filENamEChecK(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst filENamEChecK = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "filENamEChecK", "gc": "<|endoftext|>/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  filENamEChecK(\"example.txt\") # => 'Yes'\n  filENamEChecK(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst filENamEChecK = (file_name) => {\n  const re = /^[0-9]{3}\\.[a-zA-Z]{2,}$/;\n  return re.test(file_name);\n};\n\n/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  filENamEChecK(\"example.txt\") # => 'Yes'\n  filENamEChecK(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst filENamEChecK = (file_name) => {\n  const re = /^[0-9]{3}\\.[a-zA-Z]{2,}$/;\n  return re.test(file_name);\n};\n\n/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  filENamEChecK(\"example.txt\") # => 'Yes'\n  filENamEChecK(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst filENamEChecK = (file_name) => {\n  const re = /^[0-9]{3}\\.[a-zA-Z]{2,}$/;\n  return re.test(file_name);\n};\n\n/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  filENamEChecK(\"example.txt\") # => 'Yes'\n  filENamEChecK(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst filENamEChecK = (file_name) => {\n  const re = /^[0-9]{3}\\.[a-zA-Z]{2,}$/;\n  return re.test(file_name);\n};\n\n/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  filENamEChecK(\"example.txt\") # => 'Yes'\n  filENamEChecK(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst filENamEChecK = (file_name) => {\n  const re = /^[0-9]{3}\\.[a-zA-Z]{2,}$/;\n  return re.test(file_name);\n};\n\n/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  filENamEChecK(\"example.txt\") # => 'Yes'\n  filENamEChecK(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst filENamEChecK = (file_name) => {\n  const re = /^[0-9]{3}\\.[a-zA-Z]{2,}$/;\n  return re.test(file_name);\n};\n\n/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  filENamEChecK(\"example.txt\") # => 'Yes'\n  filENamEChecK(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst filENamEChecK = (file_name) => {\n  const re = /^[0-9]{3}\\.[a-zA-Z]{2,}$/;\n  return re.test(file_name);\n};\n\n/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considere", "passed": 0}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumsquaRes = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumsquaRes", "gc": "<|endoftext|>/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumsquaRes = (lst) => {\n  let sum = 0;\n  \n  for(let i = 0; i < lst.length; i++) {\n    if(i % 3 === 0 && i % 4!== 0) {\n      sum += lst[i] * lst[i];\n    }\n    else if(i % 3 === 0 && i % 4 === 0 && lst[i] % 3!== 0) {\n      sum += lst[i] * lst[i];\n    }\n    else if(i % 3 === 0 && i % 4 === 0 && lst[i] % 4!== 0) {\n      sum += lst[i] * lst[i];\n    }\n    else if(i % 3 === 0 && i % 4 === 0 && lst[i] % 3 === 0 && lst[i] % 4!== 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  \n  return sum;\n}\n\n/*\n  This function will take a list of integers. For all entries in the list, the function shall cube the integer entry if its index is a multiple of 3 and \n  will square its entry if its index is a multiple of 4. The function will not change the entries in the list whose indexes are not a multiple of 3 or 4. The function \n  shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst cubeRes = (lst) => {\n  let sum = 0;\n  \n  for(let i = 0; i < lst.length; i++) {\n    if(i % 3 === 0 && i % 4!== 0) {\n      sum += lst[i] * lst[i];\n    }\n    else if(i % 3 === 0 && i % 4 === 0 && lst[i] % 3!== 0) {\n      sum += lst[i] * lst[i];\n    }\n    else if(i % 3 === 0 && i % 4 === 0 && lst[i] % 4!== 0) {\n      sum += lst[i] * lst[i];\n    }\n    else if(i % 3 === 0 && i % 4 === 0 && lst[i] % 3 === 0 && lst[i] % 4!== 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  \n  return sum;\n}\n\n/*\n  This function will take a list of integers. For all entries in the list, the function shall square its entry if its index is a multiple of 3 and \n  will cube the entry if its index is a multiple of 4. The function will not change the entries in the list whose indexes are not a multiple of 3 or 4. The function \n  shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst squareRes = (lst) => {\n  let sum = 0;\n  \n  for(let i = 0; i < lst.length; i++) {\n    if(i % 3 === 0 && i % 4!== 0) {\n      sum += lst[i] * lst[i];\n    }\n    else if(i % 3 === 0 && i % 4 === 0 && lst[i] % 3!== 0) {\n      sum += lst[i] * lst[i];\n    }\n    else if(i % 3 === 0 && i % 4 === 0 && lst[i] % 4!== 0) {\n      sum += lst[i] * lst[i];\n    }\n    else if(i % 3 === 0 && i % 4 === 0 && lst[i] % 3 === 0 && lst[i] % 4!== 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  \n  return sum;\n}\n\n/*\n  This function will take a list of integers. For all entries in the list, the function shall cube the entry if its index is a multiple of 3 and \n  will square its entry if its index is a multiple of 4. The function will not change the entries in the list whose indexes are not a multiple of 3 or 4. The function \n  shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst cubeCubeRes = (lst) => {\n  let sum = 0;\n  \n  for(let i = 0; i < lst.length; i++) {\n    if(i % 3 === 0 && i % 4!== 0) {\n      sum += lst[i] * lst[i];\n    }\n    else if(i % 3 === 0 && i % 4 === 0 && lst[i] % 3!== 0) {\n      sum += lst[i] * lst[i];\n    }\n    else if(i % 3 === 0 && i % 4 === 0 && lst[i] % 4!== 0) {\n      sum += lst[i] * lst[i];\n    }\n    else if(i % 3 === 0 && i % 4 === 0 && lst[i] % 3 === 0 && lst[i] % 4!== 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  \n  return sum;\n}\n\n/*\n  This function will take a list of integers. For all entries in the list, the function shall cube the entry if its index is a multiple of 3 and \n  will square its entry if its index is a multiple of 4. The function will not change the entries in the list whose indexes are not a multiple of 3 or 4. The function \n  shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst cubeCubeCubeRes = (lst) => {\n  let sum = 0;\n  \n  for(let i = 0; i < lst.length; i++) {\n    if(i % 3 === 0 && i % 4!== 0) {\n      sum += lst[i] * lst[i];\n    }\n    else if(i % 3 === 0 && i % 4 === 0 && lst[i] % 3!== 0) {\n      sum += lst[i] * lst[i];\n    }\n    else if(i % 3 === 0 && i % 4 === 0 && lst[i] % 4!== 0) {\n      sum += lst[i] * lst[i];\n    }\n    else if(i % 3 === 0 && i % 4 === 0 && lst[i] % 3 === 0 && lst[i] % 4!== 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  \n  return sum;\n}\n\n/*\n  This function will take a list of integers. For all entries in the list, the function shall cube the entry if its index is a multiple of 3 and \n  will square its entry if its index is a multiple of 4. The function will not change the entries in the list whose indexes are not a multiple of 3 or 4. The function \n  shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst cubeCubeCubeCubeRes = (lst) => {\n  let sum = 0;\n  \n  for(let i = 0; i < lst.length; i++) {\n    if(i % 3 === 0 && i % 4!== 0) {\n      sum += lst[i] * lst[i];\n    }\n    else if(i % 3 === 0 && i % 4 === 0 && lst[i] % 3!== 0) {\n      sum += lst[i] * lst[i];\n    }\n    else if(i % 3 === 0 && i % 4 === 0 && lst[i] % 4!== 0) {\n      sum += lst[i] * lst[i];\n    }\n    else if(i % 3 === 0 && i % 4 === 0 && lst[i] % 3 === 0 && lst[i] % 4!== 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  \n  return sum;\n}\n\n/*\n  This function will take a list of integers. For all entries in the list, the function shall cube the entry if its index is a multiple of 3 and \n  will square its entry if its index is a multiple of 4. The function will not change the entries in the list whose indexes are not a multiple of 3 or 4. The function \n  shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [", "passed": 0}
{"task_id": "JavaScript/143", "prompt": "/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst worDsInsenteNce = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "worDsInsenteNce", "gc": "<|endoftext|>/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst worDsInsenteNce = (sentence) => {\n    const words = sentence.split(\" \");\n    const newWords = [];\n    for (let i = 0; i < words.length; i++) {\n        let isPrime = true;\n        for (let j = i + 1; j < words.length; j++) {\n            if (words[i] % words[j] === 0) {\n                isPrime = false;\n                break;\n            }\n        }\n        if (isPrime) {\n            newWords.push(words[i]);\n        }\n    }\n    return newWords.join(\" \");\n};\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst worDsInsenteNce = (sentence) => {\n    const words = sentence.split(\" \");\n    const newWords = [];\n    for (let i = 0; i < words.length; i++) {\n        let isPrime = true;\n        for (let j = i + 1; j < words.length; j++) {\n            if (words[i] % words[j] === 0) {\n                isPrime = false;\n                break;\n            }\n        }\n        if (isPrime) {\n            newWords.push(words[i]);\n        }\n    }\n    return newWords.join(\" \");\n};\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst worDsInsenteNce = (sentence) => {\n    const words = sentence.split(\" \");\n    const newWords = [];\n    for (let i = 0; i < words.length; i++) {\n        let isPrime = true;\n        for (let j = i + 1; j < words.length; j++) {\n            if (words[i] % words[j] === 0) {\n                isPrime = false;\n                break;\n            }\n        }\n        if (isPrime) {\n            newWords.push(words[i]);\n        }\n    }\n    return newWords.join(\" \");\n};\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst worDsInsenteNce = (sentence) => {\n    const words = sentence.split(\" \");\n    const newWords = [];\n    for (let i = 0; i < words.length; i++) {\n        let isPrime = true;\n        for (let j = i + 1; j < words.length; j++) {\n            if (words[i] % words[j] === 0) {\n                isPrime = false;\n                break;\n            }\n        }\n        if (isPrime) {\n            newWords.push(words[i]);\n        }\n    }\n    return newWords.join(\" \");\n};\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst worDsInsenteNce = (sentence) => {\n    const words = sentence.split(\" \");\n    const newWords = [];\n    for (let i = 0; i < words.length; i++) {\n        let isPrime = true;\n        for (let j = i + 1; j < words.length; j++) {\n            if (words[i] % words[j] === 0) {\n                isPrime = false;\n                break;\n            }\n        }\n        if (isPrime) {\n            newWords.push(words[i]);\n        }\n    }\n    return newWords.join(\" \");\n};\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst worDsInsenteNce = (sentence) => {\n    const words = sentence.split(\" \");\n    const newWords = [];\n    for (let i = 0; i < words.length; i++) {\n        let isPrime = true;\n        for (let j = i + 1; j < words.length; j++) {\n            if (words[i] % words[j] === 0) {\n                isPrime = false;\n                break;\n            }\n        }\n        if (isPrime) {\n            newWords.push(words[i]);\n        }\n    }\n    return newWords.join(\" \");\n};\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst worDsInsenteNce = (sentence) => {\n    const words = sentence.split(\" \");\n    const newWords = [];\n    for (let i = 0; i < words.length; i++) {\n        let isPrime = true;\n        for (let j = i + 1; j < words.length; j++) {\n            if (words[i] % words[j] === 0) {\n                isPrime = false;\n                break;\n            }\n        }\n        if (isPrime) {\n            newWords.push(words[i]);\n        }\n    }\n    return newWords.join(\" \");\n};\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string ", "passed": 0}
{"task_id": "JavaScript/144", "prompt": "/*Your task is to implement a function that will simPlifY the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simPlifY(\"1/5\", \"5/1\") = true\n  simPlifY(\"1/6\", \"2/1\") = false\n  simPlifY(\"7/10\", \"10/2\") = false\n  */\nconst simPlifY = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simPlifY", "gc": "<|endoftext|>/*Your task is to implement a function that will simPlifY the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simPlifY(\"1/5\", \"5/1\") = true\n  simPlifY(\"1/6\", \"2/1\") = false\n  simPlifY(\"7/10\", \"10/2\") = false\n  */\nconst simPlifY = (x, n) => {\n  if (x === \"\" || n === \"\") {\n    return false;\n  }\n  if (x.indexOf(\"/\")!== -1) {\n    return false;\n  }\n  if (n.indexOf(\"/\")!== -1) {\n    return false;\n  }\n  if (x.indexOf(\".\")!== -1) {\n    return false;\n  }\n  if (n.indexOf(\".\")!== -1) {\n    return false;\n  }\n  if (x.indexOf(\"0\")!== -1) {\n    return false;\n  }\n  if (n.indexOf(\"0\")!== -1) {\n    return false;\n  }\n  if (x.indexOf(\".\")!== -1 && n.indexOf(\".\")!== -1) {\n    return false;\n  }\n  if (x.indexOf(\".\")!== -1 && n.indexOf(\".\") === -1) {\n    return false;\n  }\n  if (x.indexOf(\".\") === -1 && n.indexOf(\".\")!== -1) {\n    return false;\n  }\n  if (x.indexOf(\".\") === -1 && n.indexOf(\".\") === -1) {\n    return false;\n  }\n  if (x.indexOf(\".\") === -1 && n.indexOf(\".\") === -1) {\n    return false;\n  }\n  if (x.indexOf(\".\") === -1 && n.indexOf(\".\") === -1) {\n    return false;\n  }\n  if (x.indexOf(\".\") === -1 && n.indexOf(\".\") === -1) {\n    return false;\n  }\n  if (x.indexOf(\".\") === -1 && n.indexOf(\".\") === -1) {\n    return false;\n  }\n  if (x.indexOf(\".\") === -1 && n.indexOf(\".\") === -1) {\n    return false;\n  }\n  if (x.indexOf(\".\") === -1 && n.indexOf(\".\") === -1) {\n    return false;\n  }\n  if (x.indexOf(\".\") === -1 && n.indexOf(\".\") === -1) {\n    return false;\n  }\n  if (x.indexOf(\".\") === -1 && n.indexOf(\".\") === -1) {\n    return false;\n  }\n  if (x.indexOf(\".\") === -1 && n.indexOf(\".\") === -1) {\n    return false;\n  }\n  if (x.indexOf(\".\") === -1 && n.indexOf(\".\") === -1) {\n    return false;\n  }\n  if (x.indexOf(\".\") === -1 && n.indexOf(\".\") === -1) {\n    return false;\n  }\n  if (x.indexOf(\".\") === -1 && n.indexOf(\".\") === -1) {\n    return false;\n  }\n  if (x.indexOf(\".\") === -1 && n.indexOf(\".\") === -1) {\n    return false;\n  }\n  if (x.indexOf(\".\") === -1 && n.indexOf(\".\") === -1) {\n    return false;\n  }\n  if (x.indexOf(\".\") === -1 && n.indexOf(\".\") === -1) {\n    return false;\n  }\n  if (x.indexOf(\".\") === -1 && n.indexOf(\".\") === -1) {\n    return false;\n  }\n  if (x.indexOf(\".\") === -1 && n.indexOf(\".\") === -1) {\n    return false;\n  }\n  if (x.indexOf(\".\") === -1 && n.indexOf(\".\") === -1) {\n    return false;\n  }\n  if (x.indexOf(\".\") === -1 && n.indexOf(\".\") === -1) {\n    return false;\n  }\n  if (x.indexOf(\".\") === -1 && n.indexOf(\".\") === -1) {\n    return false;\n  }\n  if (x.indexOf(\".\") === -1 && n.indexOf(\".\") === -1) {\n    return false;\n  }\n  if (x.indexOf(\".\") === -1 && n.indexOf(\".\") === -1) {\n    return false;\n  }\n  if (x.indexOf(\".\") === -1 && n.indexOf(\".\") === -1) {\n    return false;\n  }\n  if (x.indexOf(\".\") === -1 && n.indexOf(\".\") === -1) {\n    return false;\n  }\n  if (x.indexOf(\".\") === -1 && n.indexOf(\".\") === -1) {\n    return false;\n  }\n  if (x.indexOf(\".\") === -1 && n.indexOf(\".\") === -1) {\n    return false;\n  }\n  if (x.indexOf(\".\") === -1 && n.indexOf(\".\") === -1) {\n    return false;\n  }\n  if (x.indexOf(\".\") === -1 && n.indexOf(\".\") === -1) {\n    return false;\n  }\n  if (x.indexOf(\".\") === -1 && n.indexOf(\".\") === -1) {\n    return false;\n  }\n  if (x.indexOf(\".\") === -1 && n.indexOf(\".\") === -1) {\n    return false;\n  }\n  if (x.indexOf(\".\") === -1 && n.indexOf(\".\") === -1) {\n    return false;\n  }\n  if (x.indexOf(\".\") === -1 && n.indexOf(\".\") === -1) {\n    return false;\n  }\n  if (x.indexOf(\".\") === -1 && n.indexOf(\".\") === -1) {\n    return false;\n  }\n  if (x.indexOf(\".\") === -1 && n.indexOf(\".\") === -1) {\n    return false;\n  }\n  if (x.indexOf(\".\") === -1 && n.indexOf(\".\") === -1) {\n    return false;\n  }\n  if (x.indexOf(\".\") === -1 && n.indexOf(\".\") === -1) {\n    return false;\n  }\n  if (x.indexOf(\".\") === -1 && n.indexOf(\".\") === -1) {\n    return false;\n  }\n  if (x.indexOf(\".\") === -1 && n.indexOf(\".\") === -1) {\n    return false;\n  }\n  if (x.indexOf(\".\") === -1 && n.indexOf(\".\") === -1) {\n    return false;\n  }\n  if (x.indexOf(\".\") === -1 && n.indexOf(\".\") === -1) {\n    return false;\n  }\n  if (x.indexOf(\".\") === -1 && n.indexOf(\".\") === -1) {\n    return false;\n  }\n  if (x.indexOf(\".\") === -1 && n.indexOf(\".\") === -1) {\n    return false;\n  }\n  if (x.indexOf(\".\") === -1 && n.indexOf(\".\") === -1) {\n    return false;\n  }\n  if (x.indexOf(\".\") === -1 && n.indexOf(\".\") === -1) {\n    return false;\n  }\n  if (x.indexOf(\".\") === -1 && n.indexOf(\".\") === -1) {\n    return false;\n  }\n  if (x.indexOf(\".\") === -1 && n.indexOf(\".\") === -1) {\n    return false;\n  }\n  if (x.indexOf(\".\") === -1 && n.indexOf(\".\") === -1) {\n    return false;\n  }\n  if (x.indexOf(\".\") === -1 && n.indexOf(\".\") === -1) {\n    return false;\n  }\n  if (x.indexOf(\".\") === -1 && n.indexOf(\".\") === -1) {\n    return false;\n  }\n  if (x.indexOf(\".\") === -1 && n.indexOf(\".\") === -1) {\n    return false;\n  }\n  if (x.indexOf(\".\") === -1 && n.indexOf(\".\") === -1) {\n    return false;\n  }\n  if (x.indexOf(\".\") === -1 && n.indexOf(\".\") === -1) {\n    return false;\n  }\n  if (x.indexOf(\".\") === -1 && n.indexOf(\".\") === -1) {\n    return false;\n  }\n  if (x.indexOf(\".\") === -1 && n.indexOf(\".\") === -1) {\n    return false;\n  }\n  if (x.indexOf(\".\") === -1 && n.indexOf(\".\") === -1) {\n    return false;\n  }\n  if (x.indexOf(\".\") === -1 && n.indexOf(\".\") === -1) {\n    return false;\n  }\n  if (x.indexOf(\".\") === -1 && n.indexOf(\".\") === -1) {\n    return false;\n  }\n  if (x.indexOf(\".\") === -1 && n.indexOf(\".\") === -1) {\n    return false;\n  }\n  if (x.indexOf(\".\") === -1 && n.indexOf(\".\") === -1) {\n    return false;\n  }\n  if (x.indexOf(\".\") === -1 && n.indexOf(\".\") === -1) {\n    return false;\n  }\n  if (x.indexOf(\".\") === -1 && n.indexOf(\".\") === -1) {\n    return false;\n  }\n  if (x.indexOf(\".\") === -1 && n.indexOf(\".\") === -1) {\n    return false;\n  }\n  if (x.indexOf(\".\") === -1 && n.indexOf(\".\") === -1) {\n    return false;\n  }\n  if (x.indexOf(\".\") === -1 && n.indexOf(\".\") === -1) {\n    return false;\n  }\n  if (x.indexOf(\".\") === -1 && n.indexOf(\".\") === -1) {\n    return false;\n  }\n  if (x.indexOf(\".", "passed": 0}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> ordErBypointS([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> ordErBypointS([]) == []\n  */\nconst ordErBypointS = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "ordErBypointS", "gc": "<|endoftext|>/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> ordErBypointS([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> ordErBypointS([]) == []\n  */\nconst ordErBypointS = (nums) => {\n  let sum = 0;\n  let index = 0;\n  let result = [];\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n    if (sum % 10 === 0) {\n      result.push(nums[i]);\n      index++;\n    }\n  }\n  result.sort((a, b) => a - b);\n  return result;\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in descending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> ordErBypointD([1, 11, -1, -11, -12]) == [11, -11, -11, -11, -12]\n  >>> ordErBypointD([]) == []\n  */\nconst ordErBypointD = (nums) => {\n  let sum = 0;\n  let index = 0;\n  let result = [];\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n    if (sum % 10 === 0) {\n      result.push(nums[i]);\n      index++;\n    }\n  }\n  result.sort((a, b) => b - a);\n  return result;\n};\n\n/*\n  Write a function which returns the sum of the digits of a\n  number represented as a string.\n\n  For example:\n  >>> sumDigitsOf('123') == 3\n  >>> sumDigitsOf('123') == 3\n  >>> sumDigitsOf('123') == 3\n  >>> sumDigitsOf('123') == 3\n  >>> sumDigitsOf('123') == 3\n  >>> sumDigitsOf('123') == 3\n  >>> sumDigitsOf('123') == 3\n  >>> sumDigitsOf('123') == 3\n  >>> sumDigitsOf('123') == 3\n  >>> sumDigitsOf('123') == 3\n  >>> sumDigitsOf('123') == 3\n  >>> sumDigitsOf('123') == 3\n  >>> sumDigitsOf('123') == 3\n  >>> sumDigitsOf('123') == 3\n  >>> sumDigitsOf('123') == 3\n  >>> sumDigitsOf('123') == 3\n  >>> sumDigitsOf('123') == 3\n  >>> sumDigitsOf('123') == 3\n  >>> sumDigitsOf('123') == 3\n  >>> sumDigitsOf('123') == 3\n  >>> sumDigitsOf('123') == 3\n  >>> sumDigitsOf('123') == 3\n  >>> sumDigitsOf('123') == 3\n  >>> sumDigitsOf('123') == 3\n  >>> sumDigitsOf('123') == 3\n  >>> sumDigitsOf('123') == 3\n  >>> sumDigitsOf('123') == 3\n  >>> sumDigitsOf('123') == 3\n  >>> sumDigitsOf('123') == 3\n  >>> sumDigitsOf('123') == 3\n  >>> sumDigitsOf('123') == 3\n  >>> sumDigitsOf('123') == 3\n  >>> sumDigitsOf('123') == 3\n  >>> sumDigitsOf('123') == 3\n  >>> sumDigitsOf('123') == 3\n  >>> sumDigitsOf('123') == 3\n  >>> sumDigitsOf('123') == 3\n  >>> sumDigitsOf('123') == 3\n  >>> sumDigitsOf('123') == 3\n  >>> sumDigitsOf('123') == 3\n  >>> sumDigitsOf('123') == 3\n  >>> sumDigitsOf('123') == 3\n  >>> sumDigitsOf('123') == 3\n  >>> sumDigitsOf('123') == 3\n  >>> sumDigitsOf('123') == 3\n  >>> sumDigitsOf('123') == 3\n  >>> sumDigitsOf('123') == 3\n  >>> sumDigitsOf('123') == 3\n  >>> sumDigitsOf('123') == 3\n  >>> sumDigitsOf('123') == 3\n  >>> sumDigitsOf('123') == 3\n  >>> sumDigitsOf('123') == 3\n  >>> sumDigitsOf('123') == 3\n  >>> sumDigitsOf('123') == 3\n  >>> sumDigitsOf('123') == 3\n  >>> sumDigitsOf('123') == 3\n  >>> sumDigitsOf('123') == 3\n  >>> sumDigitsOf('123') == 3\n  >>> sumDigitsOf('123') == 3\n  >>> sumDigitsOf('123') == 3\n  >>> sumDigitsOf('123') == 3\n  >>> sumDigitsOf('123') == 3\n  >>> sumDigitsOf('123') == 3\n  >>> sumDigitsOf('123') == 3\n  >>> sumDigitsOf('123') == 3\n  >>> sumDigitsOf('123') == 3\n  >>> sumDigitsOf('123') == 3\n  >>> sumDigitsOf('123') == 3\n  >>> sumDigitsOf('123') == 3\n  >>> sumDigitsOf('123') == 3\n  >>> sumDigitsOf('123') == 3\n  >>> sumDigitsOf('123') == 3\n  >>> sumDigitsOf('123') == 3\n  >>> sumDigitsOf('123') == 3\n  >>> sumDigitsOf('123') == 3\n  >>> sumDigitsOf('123') == 3\n  >>> sumDigitsOf('123') == 3\n  >>> sumDigitsOf('123') == 3\n  >>> sumDigitsOf('123') == 3\n  >>> sumDigitsOf('123') == 3\n  >>> sumDigitsOf('123') == 3\n  >>> sumDigitsOf('123') == 3\n  >>> sumDigitsOf('123') == 3\n  >>> sumDigitsOf('123') == 3\n  >>> sumDigitsOf('123') == 3\n  >>> sumDigitsOf('123') == 3\n  >>> sumDigitsOf('123') == 3\n  >>> sumDigitsOf('123') == 3\n  >>> sumDigitsOf('123') == 3\n  >>> sumDigitsOf('123') == 3\n  >>> sumDigitsOf('123') == 3\n  >>> sumDigitsOf('123') == 3\n  >>> sumDigitsOf('123') == 3\n  >>> sumDigitsOf('123') == 3\n  >>> sumDigitsOf('123') == 3\n  >>> sumDigitsOf('123') == 3\n  >>> sumDigitsOf('123') == 3\n  >>> sumDigitsOf('123') == 3\n  >>> sumDigitsOf('123') == 3\n  >>> sumDigitsOf('123') == 3\n  >>> sumDigitsOf('123') == 3\n  >>> sumDigitsOf('123') == 3\n  >>> sumDigitsOf('123') == 3\n  >>> sumDigitsOf('123') == 3\n  >>> sumDigitsOf('123') == 3\n  >>> sumDigitsOf('123') == 3\n  >>> sumDigitsOf('123') == 3\n  >>> sumDigitsOf('123') == 3\n  >>> sumDigitsOf('123') == 3\n  >>> sumDigitsOf", "passed": 0}
{"task_id": "JavaScript/146", "prompt": "/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  speCialfilteR([15, -73, 14, -15]) => 1 \n  speCialfilteR([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst speCialfilteR = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "speCialfilteR", "gc": "<|endoftext|>/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  speCialfilteR([15, -73, 14, -15]) => 1 \n  speCialfilteR([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst speCialfilteR = (nums) => {\n  let sum = 0;\n  nums.forEach((num) => {\n    if (num % 2 === 0 && num > 10) {\n      sum += num;\n    }\n  });\n  return sum;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are even (1, 3, 5, 7, 9).\n  For example:\n  speCialfilteR([15, -73, 14, -15]) => 1 \n  speCialfilteR([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst speCialfilteC = (nums) => {\n  let sum = 0;\n  nums.forEach((num) => {\n    if (num % 2 === 0 && num > 10) {\n      sum += num;\n    }\n  });\n  return sum;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  speCialfilteR([15, -73, 14, -15]) => 1 \n  speCialfilteR([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst speCialfilteB = (nums) => {\n  let sum = 0;\n  nums.forEach((num) => {\n    if (num % 2 === 0 && num > 10) {\n      sum += num;\n    }\n  });\n  return sum;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are even (1, 3, 5, 7, 9).\n  For example:\n  speCialfilteR([15, -73, 14, -15]) => 1 \n  speCialfilteR([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst speCialfilteA = (nums) => {\n  let sum = 0;\n  nums.forEach((num) => {\n    if (num % 2 === 0 && num > 10) {\n      sum += num;\n    }\n  });\n  return sum;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  speCialfilteR([15, -73, 14, -15]) => 1 \n  speCialfilteR([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst speCialfilte = (nums) => {\n  let sum = 0;\n  nums.forEach((num) => {\n    if (num % 2 === 0 && num > 10) {\n      sum += num;\n    }\n  });\n  return sum;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are even (1, 3, 5, 7, 9).\n  For example:\n  speCialfilteR([15, -73, 14, -15]) => 1 \n  speCialfilteR([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst speCialfilteR = (nums) => {\n  let sum = 0;\n  nums.forEach((num) => {\n    if (num % 2 === 0 && num > 10) {\n      sum += num;\n    }\n  });\n  return sum;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  speCialfilteR([15, -73, 14, -15]) => 1 \n  speCialfilteR([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst speCialfilteC = (nums) => {\n  let sum = 0;\n  nums.forEach((num) => {\n    if (num % 2 === 0 && num > 10) {\n      sum += num;\n    }\n  });\n  return sum;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are even (1, 3, 5, 7, 9).\n  For example:\n  speCialfilteR([15, -73, 14, -15]) => 1 \n  speCialfilteR([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst speCialfilteB = (nums) => {\n  let sum = 0;\n  nums.forEach((num) => {\n    if (num % 2 === 0 && num > 10) {\n      sum += num;\n    }\n  });\n  return sum;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are even (1, 3, 5, 7, 9).\n  For example:\n  speCialfilteR([15, -73, 14, -15]) => 1 \n  speCialfilteR([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst speCialfilteA = (nums) => {\n  let sum = 0;\n  nums.forEach((num) => {\n    if (num % 2 === 0 && num > 10) {\n      sum += num;\n    }\n  });\n  return sum;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  speCialfilteR([15, -73, 14, -15]) => 1 \n  speCialfilteR([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst speCialfilte = (nums) => {\n  let sum = 0;\n  nums.forEach((num) => {\n    if (num % 2 === 0 && num > 10) {\n      sum += num;\n    }\n  });\n  return sum;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are even (1, 3, 5, 7, 9).\n  For example:\n  speCialfilteR([15, -73, 14, -15]) => 1 \n  speCialfilteR([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst speCialfilteR = (nums) => {\n  let sum = 0;\n  nums.forEach((num) => {\n    if (num % 2 === 0 && num > 10) {\n      sum += num;\n    }\n  });\n  return sum;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  speCialfilteR([15, -73, 14, -15]) => 1 \n  speCialfilteR([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst speCialfilteC = (nums) => {\n  let sum = 0;\n  nums.forEach((num) => {\n    if (num % 2 === 0 && num > 10) {\n      sum += num;\n    }\n  });\n  return sum;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  ", "passed": 0}
{"task_id": "JavaScript/147", "prompt": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getmaxTRipleS = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getmaxTRipleS", "gc": "<|endoftext|>/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getmaxTRipleS = (n) => {\n  const a = [...Array(n - 1).keys()].map(i => i + 1);\n  let count = 0;\n  for (let i = 0; i < a.length; i++) {\n    for (let j = i + 1; j < a.length; j++) {\n      for (let k = j + 1; k < a.length; k++) {\n        if (a[i] % 3 === 0 && a[j] % 3 === 0 && a[k] % 3 === 0) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 2\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getmaxTRiplesN = (n) => {\n  const a = [...Array(n - 1).keys()].map(i => i + 1);\n  let count = 0;\n  for (let i = 0; i < a.length; i++) {\n    for (let j = i + 1; j < a.length; j++) {\n      for (let k = j + 1; k < a.length; k++) {\n        if (a[i] % 3 === 0 && a[j] % 3 === 0 && a[k] % 3 === 0) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 3\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getmaxTRiplesN2 = (n) => {\n  const a = [...Array(n - 1).keys()].map(i => i + 1);\n  let count = 0;\n  for (let i = 0; i < a.length; i++) {\n    for (let j = i + 1; j < a.length; j++) {\n      for (let k = j + 1; k < a.length; k++) {\n        if (a[i] % 3 === 0 && a[j] % 3 === 0 && a[k] % 3 === 0) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 4\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getmaxTRiplesN3 = (n) => {\n  const a = [...Array(n - 1).keys()].map(i => i + 1);\n  let count = 0;\n  for (let i = 0; i < a.length; i++) {\n    for (let j = i + 1; j < a.length; j++) {\n      for (let k = j + 1; k < a.length; k++) {\n        if (a[i] % 3 === 0 && a[j] % 3 === 0 && a[k] % 3 === 0) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 5\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getmaxTRiplesN4 = (n) => {\n  const a = [...Array(n - 1).keys()].map(i => i + 1);\n  let count = 0;\n  for (let i = 0; i < a.length; i++) {\n    for (let j = i + 1; j < a.length; j++) {\n      for (let k = j + 1; k < a.length; k++) {\n        if (a[i] % 3 === 0 && a[j] % 3 === 0 && a[k] % 3 === 0) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 6\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getmaxTRiplesN5 = (n) => {\n  const a = [...Array(n - 1).keys()].map(i => i + 1);\n  let count = 0;\n  for (let i = 0; i < a.length; i++) {\n    for (let j = i + 1; j < a.length; j++) {\n      for (let k = j + 1; k < a.length; k++) {\n        if (a[i] % 3 === 0 && a[j] % 3 === 0 && a[k] % 3 === 0) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 7\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getmaxTRiplesN6 = (n) => {\n  const a = [...Array(n - 1).keys()].map(i => i + 1);\n  let count = 0;\n  for (let i = 0; i < a.length; i++) {\n    for (let j = i + 1; j < a.length; j++) {\n      for (let k = j + 1; k < a.length; k++) {\n        if (a[i] % 3 === 0 && a[j] % 3 === 0 && a[k] % 3 === 0) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a", "passed": 0}
{"task_id": "JavaScript/148", "prompt": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "gc": "<|endoftext|>/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  const orbit1 = planet1.toUpperCase();\n  const orbit2 = planet2.toUpperCase();\n  const orbits = [orbit1, orbit2];\n  const distance = Math.sqrt(\n    Math.pow(orbit1[0] - orbit2[0], 2) +\n    Math.pow(orbit1[1] - orbit2[1], 2)\n  );\n  const closestPlanet = orbits.find((orbit) => {\n    return distance < Math.pow(orbit[0], 2) +\n      Math.pow(orbit[1], 2);\n  });\n  return [closestPlanet, orbits.splice(closestPlanet, 1)];\n};\n\n/* Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the distance to the sun from the planet named planet1.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  distance(\"Jupiter\", \"Neptune\") ==> (3.141592653589793, 3.141592653589793)\n  distance(\"Earth\", \"Mercury\") ==> (3.141592653589793, 3.141592653589793)\n  distance(\"Mercury\", \"Uranus\") ==> (3.141592653589793, 3.141592653589793)\n  */\nconst distance = (planet1, planet2) => {\n  const orbit1 = planet1.toUpperCase();\n  const orbit2 = planet2.toUpperCase();\n  const distance = Math.sqrt(\n    Math.pow(orbit1[0] - orbit2[0], 2) +\n    Math.pow(orbit1[1] - orbit2[1], 2)\n  );\n  return [distance, orbits.splice(distance, 1)];\n};\n\n/* Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the distance to the sun from the planet named planet1.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  distance(\"Jupiter\", \"Neptune\") ==> (3.141592653589793, 3.141592653589793)\n  distance(\"Earth\", \"Mercury\") ==> (3.141592653589793, 3.141592653589793)\n  distance(\"Mercury\", \"Uranus\") ==> (3.141592653589793, 3.141592653589793)\n  */\nconst distanceToSun = (planet1, planet2) => {\n  const orbit1 = planet1.toUpperCase();\n  const orbit2 = planet2.toUpperCase();\n  const distance = Math.sqrt(\n    Math.pow(orbit1[0] - orbit2[0], 2) +\n    Math.pow(orbit1[1] - orbit2[1], 2)\n  );\n  const closestPlanet = orbits.find((orbit) => {\n    return distance < Math.pow(orbit[0], 2) +\n      Math.pow(orbit[1], 2);\n  });\n  return [closestPlanet, orbits.splice(closestPlanet, 1)];\n};\n\n/* Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the distance to the sun from the planet named planet1.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  distanceToSun(\"Jupiter\", \"Neptune\") ==> (3.141592653589793, 3.141592653589793)\n  distanceToSun(\"Earth\", \"Mercury\") ==> (3.141592653589793, 3.141592653589793)\n  distanceToSun(\"Mercury\", \"Uranus\") ==> (3.141592653589793, 3.141592653589793)\n  */\nconst distanceToSunOrbit = (planet1, planet2) => {\n  const orbit1 = planet1.toUpperCase();\n  const orbit2 = planet2.toUpperCase();\n  const distance = Math.sqrt(\n    Math.pow(orbit1[0] - orbit2[0], 2) +\n    Math.pow(orbit1[1] - orbit2[1], 2)\n  );\n  const closestPlanet = orbits.find((orbit) => {\n    return distance < Math.pow(orbit[0], 2) +\n      Math.pow(orbit[1], 2);\n  });\n  return [closestPlanet, orbits.splice(closestPlanet, 1)];\n};\n\n/* Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the distance to the sun from the planet named planet1.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  distanceToSunOrbit(\"Jupiter\", \"Neptune\") ==> (3.141592653589793, 3.141592653589793)\n  distanceToSunOrbit(\"Earth\", \"Mercury\") ==> (3.141592653589793, 3.141592653589793)\n  distanceToSunOrbit(\"Mercury\", \"Uranus\") ==> (3.141592653589793, 3.141592653589793)\n  */\nconst distanceToSunOrbitDistance = (planet1, planet2) => {\n  const orbit1 = planet1.toUpperCase();\n  const orbit2 = planet2.toUpperCase();\n  const distance = Math.sqrt(\n    Math.pow(orbit1[0] - orbit2[0], 2) +\n    Math.pow(orbit1[1] - orbit2[1], 2)\n  );\n  const closestPlanet = orbits.find((orbit) => {\n    return distance < Math.pow(orbit[0], 2) +\n      Math.pow(orbit[1], 2);\n  });\n  return [closestPlanet, orbits.splice(closestPlanet, 1)];\n};\n\n/* Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the distance to the sun from the planet named planet1.\n  The ", "passed": 0}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sorTedLIstSuM = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sorTedLIstSuM", "gc": "<|endoftext|>/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sorTedLIstSuM = (lst) => {\n  let res = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 === 0) {\n      res.push(lst[i]);\n    }\n  }\n  return res;\n};\n\n/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sorTedLIstSuM2 = (lst, sort) => {\n  let res = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 === 0) {\n      res.push(lst[i]);\n    }\n  }\n  return res.sort((a, b) => sort.indexOf(a) - sort.indexOf(b));\n};\n\n/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sorTedLIstSuM3 = (lst, sort) => {\n  let res = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 === 0) {\n      res.push(lst[i]);\n    }\n  }\n  return res.sort((a, b) => sort.indexOf(a) - sort.indexOf(b), (a, b) => sort.indexOf(b) - sort.indexOf(a));\n};\n\n/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sorTedLIstSuM4 = (lst, sort) => {\n  let res = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 === 0) {\n      res.push(lst[i]);\n    }\n  }\n  return res.sort((a, b) => sort.indexOf(a) - sort.indexOf(b), (a, b) => sort.indexOf(b) - sort.indexOf(a), (a, b) => sort.indexOf(a) - sort.indexOf(b));\n};\n\n/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sorTedLIstSuM5 = (lst, sort) => {\n  let res = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 === 0) {\n      res.push(lst[i]);\n    }\n  }\n  return res.sort((a, b) => sort.indexOf(a) - sort.indexOf(b), (a, b) => sort.indexOf(b) - sort.indexOf(a), (a, b) => sort.indexOf(a) - sort.indexOf(b), (a, b) => sort.indexOf(a) - sort.indexOf(b));\n};\n\n/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sorTedLIstSuM6 = (lst, sort) => {\n  let res = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 === 0) {\n      res.push(lst[i]);\n    }\n  }\n  return res.sort((a, b) => sort.indexOf(a) - sort.indexOf(b), (a, b) => sort.indexOf(b) - sort.indexOf(a), (a, b) => sort.indexOf(a) - sort.indexOf(b), (a, b) => sort.indexOf(a) - sort.indexOf(b), (a, b) => sort.indexOf(a) - sort.indexOf(b));\n};\n\n/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sorTedLIstSuM7 = (lst, sort) => {\n  let res = [];\n  for (let i = 0; i < lst.length; i++) {\n", "passed": 0}
{"task_id": "JavaScript/15", "prompt": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strIngSEquenCe(0)\n  '0'\n  >>> strIngSEquenCe(5)\n  '0 1 2 3 4 5'\n  */\nconst strIngSEquenCe = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "strIngSEquenCe", "gc": "<|endoftext|>/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strIngSEquenCe(0)\n  '0'\n  >>> strIngSEquenCe(5)\n  '0 1 2 3 4 5'\n  */\nconst strIngSEquenCe = (n) => {\n  let s = '';\n  for (let i = 1; i <= n; i++) {\n    s += i;\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbers starting from n inclusive.\n  >>> strIngSEquenCe(5)\n  '0 1 2 3 4 5'\n  */\nconst strIngSEquence = (n) => {\n  let s = '';\n  for (let i = 1; i <= n; i++) {\n    s += i;\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbers starting from n inclusive.\n  >>> strIngSEquence(5)\n  '0 1 2 3 4 5'\n  */\nconst strIngSequence = (n) => {\n  let s = '';\n  for (let i = 1; i <= n; i++) {\n    s += i;\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbers starting from n inclusive.\n  >>> strIngSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst strIngSequence = (n) => {\n  let s = '';\n  for (let i = 1; i <= n; i++) {\n    s += i;\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbers starting from n inclusive.\n  >>> strIngSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst strIngSequence = (n) => {\n  let s = '';\n  for (let i = 1; i <= n; i++) {\n    s += i;\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbers starting from n inclusive.\n  >>> strIngSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst strIngSequence = (n) => {\n  let s = '';\n  for (let i = 1; i <= n; i++) {\n    s += i;\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbers starting from n inclusive.\n  >>> strIngSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst strIngSequence = (n) => {\n  let s = '';\n  for (let i = 1; i <= n; i++) {\n    s += i;\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbers starting from n inclusive.\n  >>> strIngSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst strIngSequence = (n) => {\n  let s = '';\n  for (let i = 1; i <= n; i++) {\n    s += i;\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbers starting from n inclusive.\n  >>> strIngSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst strIngSequence = (n) => {\n  let s = '';\n  for (let i = 1; i <= n; i++) {\n    s += i;\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbers starting from n inclusive.\n  >>> strIngSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst strIngSequence = (n) => {\n  let s = '';\n  for (let i = 1; i <= n; i++) {\n    s += i;\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbers starting from n inclusive.\n  >>> strIngSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst strIngSequence = (n) => {\n  let s = '';\n  for (let i = 1; i <= n; i++) {\n    s += i;\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbers starting from n inclusive.\n  >>> strIngSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst strIngSequence = (n) => {\n  let s = '';\n  for (let i = 1; i <= n; i++) {\n    s += i;\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbers starting from n inclusive.\n  >>> strIngSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst strIngSequence = (n) => {\n  let s = '';\n  for (let i = 1; i <= n; i++) {\n    s += i;\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbers starting from n inclusive.\n  >>> strIngSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst strIngSequence = (n) => {\n  let s = '';\n  for (let i = 1; i <= n; i++) {\n    s += i;\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbers starting from n inclusive.\n  >>> strIngSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst strIngSequence = (n) => {\n  let s = '';\n  for (let i = 1; i <= n; i++) {\n    s += i;\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbers starting from n inclusive.\n  >>> strIngSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst strIngSequence = (n) => {\n  let s = '';\n  for (let i = 1; i <= n; i++) {\n    s += i;\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbers starting from n inclusive.\n  >>> strIngSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst strIngSequence = (n) => {\n  let s = '';\n  for (let i = 1; i <= n; i++) {\n    s += i;\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbers starting from n inclusive.\n  >>> strIngSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst strIngSequence = (n) => {\n  let s = '';\n  for (let i = 1; i <= n; i++) {\n    s += i;\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbers starting from n inclusive.\n  >>> strIngSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst strIngSequence = (n) => {\n  let s = '';\n  for (let i = 1; i <= n; i++) {\n    s += i;\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbers starting from n inclusive.\n  >>> strIngSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst strIngSequence = (n) => {\n  let s = '';\n  for (let i = 1; i <= n; i++) {\n    s += i;\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbers starting from n inclusive.\n  >>> strIngSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst strIngSequence = (n) => {\n  let s = '';\n  for (let i = 1; i <= n; i++) {\n    s += i;\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbers starting from n inclusive.\n  >>> strIngSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst strIngSequence = (n) => {\n  let s = '';\n  for (let i = 1; i <= n; i++) {\n    s += i;\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbers starting from n inclusive.\n  >>> strIngSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst strIngSequence = (n) => {\n  let s = '';\n  for (let i = 1; i <= n; i++) {\n    s += i;\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbers starting from n inclusive.\n  >>> strIngSequence(5)\n  '0 1 2 3 4 5'\n  */\n", "passed": 0}
{"task_id": "JavaScript/150", "prompt": "/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOry(7, 34, 12) == 34\n  for xOry(15, 8, 5) == 5\n  \n  */\nconst xOry = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOry", "gc": "<|endoftext|>/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOry(7, 34, 12) == 34\n  for xOry(15, 8, 5) == 5\n  \n  */\nconst xOry = (n, x, y) => {\n  if (n < 2) return y;\n  if (n % 2 === 0) return x;\n  return xOry(n / 2, y, x);\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOry(7, 34, 12) == 34\n  for xOry(15, 8, 5) == 5\n  \n  */\nconst xOr = (n, x, y) => {\n  if (n < 2) return y;\n  if (n % 2 === 0) return x;\n  return xOr(n / 2, y, x);\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOr(7, 34, 12) == 34\n  for xOr(15, 8, 5) == 5\n  \n  */\nconst xN = (n, x, y) => {\n  if (n < 2) return y;\n  if (n % 2 === 0) return x;\n  return xN(n / 2, y, x);\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xN(7, 34, 12) == 34\n  for xN(15, 8, 5) == 5\n  \n  */\nconst xNOr = (n, x, y) => {\n  if (n < 2) return y;\n  if (n % 2 === 0) return x;\n  return xNOr(n / 2, y, x);\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xNOr(7, 34, 12) == 34\n  for xNOr(15, 8, 5) == 5\n  \n  */\nconst xNOry = (n, x, y) => {\n  if (n < 2) return y;\n  if (n % 2 === 0) return x;\n  return xNOry(n / 2, y, x);\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xNOry(7, 34, 12) == 34\n  for xNOry(15, 8, 5) == 5\n  \n  */\nconst xNOr = (n, x, y) => {\n  if (n < 2) return y;\n  if (n % 2 === 0) return x;\n  return xNOr(n / 2, y, x);\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xNOr(7, 34, 12) == 34\n  for xNOr(15, 8, 5) == 5\n  \n  */\nconst xNOry = (n, x, y) => {\n  if (n < 2) return y;\n  if (n % 2 === 0) return x;\n  return xNOry(n / 2, y, x);\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xNOr(7, 34, 12) == 34\n  for xNOr(15, 8, 5) == 5\n  \n  */\nconst xNOr = (n, x, y) => {\n  if (n < 2) return y;\n  if (n % 2 === 0) return x;\n  return xNOr(n / 2, y, x);\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xNOr(7, 34, 12) == 34\n  for xNOr(15, 8, 5) == 5\n  \n  */\nconst xNOry = (n, x, y) => {\n  if (n < 2) return y;\n  if (n % 2 === 0) return x;\n  return xNOry(n / 2, y, x);\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xNOr(7, 34, 12) == 34\n  for xNOr(15, 8, 5) == 5\n  \n  */\nconst xNOr = (n, x, y) => {\n  if (n < 2) return y;\n  if (n % 2 === 0) return x;\n  return xNOr(n / 2, y, x);\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xNOr(7, 34, 12) == 34\n  for xNOr(15, 8, 5) == 5\n  \n  */\nconst xNOry = (n, x, y) => {\n  if (n < 2) return y;\n  if (n % 2 === 0) return x;\n  return xNOry(n / 2, y, x);\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xNOr(7, 34, 12) == 34\n  for xNOr(15, 8, 5) == 5\n  \n  */\nconst xNOr = (n, x, y) => {\n  if (n < 2) return y;\n  if (n % 2 === 0) return x;\n  return xNOr(n / 2, y, x);\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xNOr(7, 34, 12) == 34\n  for xNOr(15, 8, 5) == 5\n  \n  */\nconst xNOry = (n, x, y) => {\n  if (n < 2) return y;\n  if (n % 2 === 0) return x;\n  return xNOry(n / 2, y, x);\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xNOr(7, 34, 12) == 34\n  for xNOr(15, 8, 5) == 5\n  \n  */\nconst xNOr = (n, x, y) => {\n  if (n < 2) return y;\n  if (n % 2 === 0) return x;\n  return xNOr(n / 2, y, x);\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xNOr(7, 34, 12) == 34\n  for xNOr(15, 8, 5) == 5\n  \n  */\nconst xNOry = (n, x, y) => {\n  if (n < 2) return y;\n  if (n % 2 === 0) return x;\n  return xNOry(n / 2, y, x);\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xNOr(7, 34, 12) == 34\n  for xNOr(15, 8, 5) == 5\n  \n  */\nconst xNOr = (n, x, y) => {\n  if (n < 2) return y;\n  if (n % 2 === 0) return x;\n  return xNOr(n / 2, y, x);\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xNOr(7, 34, 12) == 34\n  for xNOr(15, 8, 5) == 5\n  \n  */\nconst xNOry = (n, x, y) => {\n  if (n < 2) return y;\n  if (n % 2 === 0) return x;\n  return xNOry(n / 2, y, x);\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xNOr(7, 34, 12) == 34\n  for xNOr(15, 8, 5", "passed": 0}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  douBleTHeDifFerEnce([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  douBleTHeDifFerEnce([-1, -2, 0]) == 0\n  douBleTHeDifFerEnce([9, -2]) == 81\n  douBleTHeDifFerEnce([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst douBleTHeDifFerEnce = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "douBleTHeDifFerEnce", "gc": "<|endoftext|>/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  douBleTHeDifFerEnce([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  douBleTHeDifFerEnce([-1, -2, 0]) == 0\n  douBleTHeDifFerEnce([9, -2]) == 81\n  douBleTHeDifFerEnce([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst douBleTHeDifFerEnce = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are even. Ignore numbers that are negative or not integers.\n  douBleTHeDifFerEnce([1, 3, 2, 0]) == 1 + 0 + 0 + 0 = 10\n  douBleTHeDifFerEnce([-1, -2, 0]) == -1\n  douBleTHeDifFerEnce([9, -2]) == 81\n  douBleTHeDifFerEnce([0]) == -1\n  If the input list is empty, return 0.\n  */\nconst douBleTHeDifFerEnce2 = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are divisible by both 2 and 3. douBleTHeDifFerEnce2([1, 3, 2, 0]) == 1 + 0 + 0 + 0 = 10\n  douBleTHeDifFerEnce2([-1, -2, 0]) == -1\n  douBleTHeDifFerEnce2([9, -2]) == 81\n  douBleTHeDifFerEnce2([0]) == -1\n  If the input list is empty, return 0.\n  */\nconst douBleTHeDifFerEnce3 = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0 && lst[i] % 3 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are divisible by both 2 and 3. douBleTHeDifFerEnce3([1, 3, 2, 0]) == 1 + 0 + 0 + 0 = 10\n  douBleTHeDifFerEnce3([-1, -2, 0]) == -1\n  douBleTHeDifFerEnce3([9, -2]) == 81\n  douBleTHeDifFerEnce3([0]) == -1\n  If the input list is empty, return 0.\n  */\nconst douBleTHeDifFerEnce4 = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0 && lst[i] % 3 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are divisible by both 2 and 3. douBleTHeDifFerEnce4([1, 3, 2, 0]) == 1 + 0 + 0 + 0 = 10\n  douBleTHeDifFerEnce4([-1, -2, 0]) == -1\n  douBleTHeDifFerEnce4([9, -2]) == 81\n  douBleTHeDifFerEnce4([0]) == -1\n  If the input list is empty, return 0.\n  */\nconst douBleTHeDifFerEnce5 = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0 && lst[i] % 3 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are divisible by both 2 and 3. douBleTHeDifFerEnce5([1, 3, 2, 0]) == 1 + 0 + 0 + 0 = 10\n  douBleTHeDifFerEnce5([-1, -2, 0]) == -1\n  douBleTHeDifFerEnce5([9, -2]) == 81\n  douBleTHeDifFerEnce5([0]) == -1\n  If the input list is empty, return 0.\n  */\nconst douBleTHeDifFerEnce6 = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0 && lst[i] % 3 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are divisible by both 2 and 3. douBleTHeDifFerEnce6([1, 3, 2, 0]) == 1 + 0 + 0 + 0 = 10\n  douBleTHeDifFerEnce6([-1, -2, 0]) == -1\n  douBleTHeDifFerEnce6([9, -2]) == 81\n  douBleTHeDifFerEnce6([0]) == -1\n  If the input list is empty, return 0.\n  */\nconst douBleTHeDifFerEnce7 = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0 && lst[i] % 3 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are divisible by both 2 and 3. douBleTHeDifFerEnce7([1, 3, 2, 0]) == 1 + 0 + 0 + 0 = 10\n  douBleTHeDifFerEnce7([-1, -2, 0]) == -1\n  douBleTHeDifFerEnce7([9, -2]) == 81\n  douBleTHeDifFerEnce7([0]) == -1\n  If the input list is empty, return 0.\n  */\nconst douBleTHeDifFerEnce8 = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0 && lst[i] % 3 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are divisible by both 2 and 3. douBleTHeDifFerEnce8([1, 3, 2, 0]) == 1 + 0 + 0 + 0 = 10\n  douBleTHeDifFerEnce8([-1, -2, 0]) == -1\n  douBleTHeDifFerEnce8([9, -2]) == 81\n  douBleTHeDifFerEnce8([0]) == -1\n  If the input ", "passed": 1}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  comPare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  comPare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst comPare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "comPare", "gc": "<|endoftext|>/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  comPare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  comPare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst comPare = (game, guess) => {\n  const gameScores = game.map((score) => score);\n  const gameGuesses = guess.map((score) => score);\n  const gameScoreDifferences = gameScores.map((score) => Math.abs(score - gameGuesses[0]));\n  const gameGuessesDifferences = gameGuesses.map((score) => Math.abs(score - gameGuesses[0]));\n  const gameScoreDifferenceDifferences = gameScoreDifferences.map((score) => Math.abs(score - gameGuesses[0]));\n  const gameGuessesDifferenceDifferences = gameGuessesDifferences.map((score) => Math.abs(score - gameGuesses[0]));\n  const gameScoreDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferences.map((score) => Math.abs(score - gameGuesses[0]));\n  const gameGuessesDifferenceDifferenceDifferences = gameGuessesDifferenceDifferences.map((score) => Math.abs(score - gameGuesses[0]));\n  const gameScoreDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferences.map((score) => Math.abs(score - gameGuesses[0]));\n  const gameGuessesDifferenceDifferenceDifferenceDifferences = gameGuessesDifferenceDifferenceDifferences.map((score) => Math.abs(score - gameGuesses[0]));\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferenceDifferences.map((score) => Math.abs(score - gameGuesses[0]));\n  const gameGuessesDifferenceDifferenceDifferenceDifferenceDifferences = gameGuessesDifferenceDifferenceDifferenceDifferenceDifferences.map((score) => Math.abs(score - gameGuesses[0]));\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferenceDifferences.map((score) => Math.abs(score - gameGuesses[0]));\n  const gameGuessesDifferenceDifferenceDifferenceDifferenceDifferences = gameGuessesDifferenceDifferenceDifferenceDifferences.map((score) => Math.abs(score - gameGuesses[0]));\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferenceDifferences.map((score) => Math.abs(score - gameGuesses[0]));\n  const gameGuessesDifferenceDifferenceDifferenceDifferenceDifferences = gameGuessesDifferenceDifferenceDifferenceDifferenceDifferences.map((score) => Math.abs(score - gameGuesses[0]));\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferenceDifferences.map((score) => Math.abs(score - gameGuesses[0]));\n  const gameGuessesDifferenceDifferenceDifferenceDifferenceDifferenceDifferences = gameGuessesDifferenceDifferenceDifferenceDifferenceDifferences.map((score) => Math.abs(score - gameGuesses[0]));\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferences.map((score) => Math.abs(score - gameGuesses[0]));\n  const gameGuessesDifferenceDifferenceDifferenceDifferenceDifferenceDifferences = gameGuessesDifferenceDifferenceDifferenceDifferenceDifferences.map((score) => Math.abs(score - gameGuesses[0]));\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferences.map((score) => Math.abs(score - gameGuesses[0]));\n  const gameGuessesDifferenceDifferenceDifferenceDifferenceDifferenceDifferences = gameGuessesDifferenceDifferenceDifferenceDifferenceDifferences.map((score) => Math.abs(score - gameGuesses[0]));\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferences.map((score) => Math.abs(score - gameGuesses[0]));\n  const gameGuessesDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferences = gameGuessesDifferenceDifferenceDifferenceDifferenceDifferenceDifferences.map((score) => Math.abs(score - gameGuesses[0]));\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferences.map((score) => Math.abs(score - gameGuesses[0]));\n  const gameGuessesDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferences = gameGuessesDifferenceDifferenceDifferenceDifferenceDifferenceDifferences.map((score) => Math.abs(score - gameGuesses[0]));\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferences.map((score) => Math.abs(score - gameGuesses[0]));\n  const gameGuessesDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferences = gameGuessesDifferenceDifferenceDifferenceDifferenceDifferenceDifferences.map((score) => Math.abs(score - gameGuesses[0]));\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferences.map((score) => Math.abs(score - gameGuesses[0]));\n  const gameGuessesDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferences = gameGuessesDifferenceDifferenceDifferenceDifferenceDifferenceDifferences.map((score) => Math.abs(score - gameGuesses[0]));\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferences.map((score) => Math.abs(score - gameGuesses[0]));\n  const gameGuessesDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferences = gameGuessesDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferences.map((score) => Math.abs(score - gameGuesses[0]));\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferences.map((score) => Math.abs(score - gameGuesses[0]));\n  const gameGuessesDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferences = gameGuessesDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferences.map((score) => Math.abs(score - gameGuesses[0]));\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferences.map((score) => Math.abs(score - gameGuesses[0]));\n  const gameGuessesDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferences = gameGuessesDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferences.map((score) => Math.abs(score - gameGuesses[0]));\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferences.map((score) => Math.abs(score - gameGuesses[0]));\n  const gameGuessesDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferences = gameGuessesDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferences.map((score) => Math.abs(score - gameGuesses[0]));\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferences.map((score) => Math.abs(score - gameGuesses[0]));\n  const gameGuessesDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferences = gameGuessesDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferences.map((score) => Math.abs(score ", "passed": 0}
{"task_id": "JavaScript/153", "prompt": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strOngeStExtEnsIon('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strOngeStExtEnsIon = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strOngeStExtEnsIon", "gc": "<|endoftext|>/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strOngeStExtEnsIon('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strOngeStExtEnsIon = (class_name, extensions) => {\n  const strOngeStExtEnsIon = class_name.split('.').reduce((acc, cur) => {\n    const curExt = cur.split('').reduce((acc, cur) => {\n      if (acc.length > 0) {\n        const curExt = acc.toUpperCase();\n        if (curExt.includes(cur)) {\n          return acc;\n        }\n      }\n      return acc;\n    }, cur);\n    return `${acc}${curExt}`;\n  }, '');\n  return strOngeStExtEnsIon? `${class_name}${strOngeStExtEnsIon}` : class_name;\n};\n\n/*\n  Given a class name and a list of extensions, return the class name with\n  the highest extension's strength.\n  Example:\n  strOngeStExtEnsIon('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n*/\nconst strOngeStExtEnsIonMax = (class_name, extensions) => {\n  const strOngeStExtEnsIonMax = class_name.split('.').reduce((acc, cur) => {\n    const curExt = cur.split('').reduce((acc, cur) => {\n      if (acc.length > 0) {\n        const curExt = acc.toUpperCase();\n        if (curExt.includes(cur)) {\n          return acc;\n        }\n      }\n      return acc;\n    }, cur);\n    return `${acc}${curExt}`;\n  }, '');\n  return strOngeStExtEnsIonMax? `${class_name}${strOngeStExtEnsIonMax}` : class_name;\n};\n\n/*\n  Given a class name and a list of extensions, return the class name with\n  the lowest extension's strength.\n  Example:\n  strOngeStExtEnsIon('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n*/\nconst strOngeStExtEnsIonMin = (class_name, extensions) => {\n  const strOngeStExtEnsIonMin = class_name.split('.').reduce((acc, cur) => {\n    const curExt = cur.split('').reduce((acc, cur) => {\n      if (acc.length > 0) {\n        const curExt = acc.toUpperCase();\n        if (curExt.includes(cur)) {\n          return acc;\n        }\n      }\n      return acc;\n    }, cur);\n    return `${acc}${curExt}`;\n  }, '');\n  return strOngeStExtEnsIonMin? `${class_name}${strOngeStExtEnsIonMin}` : class_name;\n};\n\n/*\n  Given a class name and a list of extensions, return the class name with\n  the highest extension's strength.\n  Example:\n  strOngeStExtEnsIon('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n*/\nconst strOngeStExtEnsIonMaxStr = (class_name, extensions) => {\n  const strOngeStExtEnsIonMaxStr = class_name.split('.').reduce((acc, cur) => {\n    const curExt = cur.split('').reduce((acc, cur) => {\n      if (acc.length > 0) {\n        const curExt = acc.toUpperCase();\n        if (curExt.includes(cur)) {\n          return acc;\n        }\n      }\n      return acc;\n    }, cur);\n    return `${acc}${curExt}`;\n  }, '');\n  return strOngeStExtEnsIonMaxStr? `${class_name}${strOngeStExtEnsIonMaxStr}` : class_name;\n};\n\n/*\n  Given a class name and a list of extensions, return the class name with\n  the lowest extension's strength.\n  Example:\n  strOngeStExtEnsIon('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n*/\nconst strOngeStExtEnsIonMinStr = (class_name, extensions) => {\n  const strOngeStExtEnsIonMinStr = class_name.split('.').reduce((acc, cur) => {\n    const curExt = cur.split('').reduce((acc, cur) => {\n      if (acc.length > 0) {\n        const curExt = acc.toUpperCase();\n        if (curExt.includes(cur)) {\n          return acc;\n        }\n      }\n      return acc;\n    }, cur);\n    return `${acc}${curExt}`;\n  }, '');\n  return strOngeStExtEnsIonMinStr? `${class_name}${strOngeStExtEnsIonMinStr}` : class_name;\n};\n\n/*\n  Given a class name and a list of extensions, return the class name with\n  the highest extension's strength.\n  Example:\n  strOngeStExtEnsIon('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n*/\nconst strOngeStExtEnsIonMaxStrMax = (class_name, extensions) => {\n  const strOngeStExtEnsIonMaxStr = class_name.split('.').reduce((acc, cur) => {\n    const curExt = cur.split('').reduce((acc, cur) => {\n      if (acc.length > 0) {\n        const curExt = acc.toUpperCase();\n        if (curExt.includes(cur)) {\n          return acc;\n        }\n      }\n      return acc;\n    }, cur);\n    return `${acc}${curExt}`;\n  }, '');\n  return strOngeStExtEnsIonMaxStr? `${class_name}${strOngeStExtEnsIonMaxStr}` : class_name;\n};\n\n/*\n  Given a class name and a list of extensions, return the class name with\n  the lowest extension's strength.\n  Example:\n  strOngeStExtEnsIon('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n*/\nconst strOngeStExtEnsIonMinStrMin = (class_name, extensions) => {\n  const strOngeStExtEnsIonMinStr = class_name.split('.').reduce((acc, cur) => {\n    const curExt = cur.split('').reduce((acc, cur) => {\n      if (acc.length > 0) {\n        const curExt = acc.toUpperCase();\n        if (curExt.includes(cur)) {\n          return acc;\n        }\n      }\n      return acc;\n    }, cur);\n    return `${acc}${curExt}`;\n  }, '');\n  return strOngeStExtEnsIonMinStr? `${class_name}${strOngeStExtEnsIonMinStr}` : class_name;\n};\n\n/*\n  Given a class name and a list of extensions, return the ", "passed": 0}
{"task_id": "JavaScript/154", "prompt": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycPattErnChEck(\"abcd\",\"abd\") => false\n  cycPattErnChEck(\"hello\",\"ell\") => true\n  cycPattErnChEck(\"whassup\",\"psus\") => false\n  cycPattErnChEck(\"abab\",\"baa\") => true\n  cycPattErnChEck(\"efef\",\"eeff\") => false\n  cycPattErnChEck(\"himenss\",\"simen\") => true\n  */\nconst cycPattErnChEck = (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycPattErnChEck", "gc": "<|endoftext|>/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycPattErnChEck(\"abcd\",\"abd\") => false\n  cycPattErnChEck(\"hello\",\"ell\") => true\n  cycPattErnChEck(\"whassup\",\"psus\") => false\n  cycPattErnChEck(\"abab\",\"baa\") => true\n  cycPattErnChEck(\"efef\",\"eeff\") => false\n  cycPattErnChEck(\"himenss\",\"simen\") => true\n  */\nconst cycPattErnChEck = (a, b) => {\n  let isMatch = false;\n  let rotatedWord = a.split('').map(x => x.split('').map(y => y.split(''))).reduce((a, b) => a.concat(b), []);\n  let rotatedWordRotation = rotatedWord.map(x => x.map(y => y.split(''))).reduce((a, b) => a.concat(b), []);\n  let rotatedWordRotation = rotatedWordRotation.map(x => x.map(y => y.split(''))).reduce((a, b) => a.concat(b), []);\n  let rotatedWordRotation = rotatedWordRotation.map(x => x.map(y => y.split(''))).reduce((a, b) => a.concat(b), []);\n  let rotatedWordRotation = rotatedWordRotation.map(x => x.map(y => y.split(''))).reduce((a, b) => a.concat(b), []);\n  let rotatedWordRotation = rotatedWordRotation.map(x => x.map(y => y.split(''))).reduce((a, b) => a.concat(b), []);\n  let rotatedWordRotation = rotatedWordRotation.map(x => x.map(y => y.split(''))).reduce((a, b) => a.concat(b), []);\n  let rotatedWordRotation = rotatedWordRotation.map(x => x.map(y => y.split(''))).reduce((a, b) => a.concat(b), []);\n  let rotatedWordRotation = rotatedWordRotation.map(x => x.map(y => y.split(''))).reduce((a, b) => a.concat(b), []);\n  let rotatedWordRotation = rotatedWordRotation.map(x => x.map(y => y.split(''))).reduce((a, b) => a.concat(b), []);\n  let rotatedWordRotation = rotatedWordRotation.map(x => x.map(y => y.split(''))).reduce((a, b) => a.concat(b), []);\n  let rotatedWordRotation = rotatedWordRotation.map(x => x.map(y => y.split(''))).reduce((a, b) => a.concat(b), []);\n  let rotatedWordRotation = rotatedWordRotation.map(x => x.map(y => y.split(''))).reduce((a, b) => a.concat(b), []);\n  let rotatedWordRotation = rotatedWordRotation.map(x => x.map(y => y.split(''))).reduce((a, b) => a.concat(b), []);\n  let rotatedWordRotation = rotatedWordRotation.map(x => x.map(y => y.split(''))).reduce((a, b) => a.concat(b), []);\n  let rotatedWordRotation = rotatedWordRotation.map(x => x.map(y => y.split(''))).reduce((a, b) => a.concat(b), []);\n  let rotatedWordRotation = rotatedWordRotation.map(x => x.map(y => y.split(''))).reduce((a, b) => a.concat(b), []);\n  let rotatedWordRotation = rotatedWordRotation.map(x => x.map(y => y.split(''))).reduce((a, b) => a.concat(b), []);\n  let rotatedWordRotation = rotatedWordRotation.map(x => x.map(y => y.split(''))).reduce((a, b) => a.concat(b), []);\n  let rotatedWordRotation = rotatedWordRotation.map(x => x.map(y => y.split(''))).reduce((a, b) => a.concat(b), []);\n  let rotatedWordRotation = rotatedWordRotation.map(x => x.map(y => y.split(''))).reduce((a, b) => a.concat(b), []);\n  let rotatedWordRotation = rotatedWordRotation.map(x => x.map(y => y.split(''))).reduce((a, b) => a.concat(b), []);\n  let rotatedWordRotation = rotatedWordRotation.map(x => x.map(y => y.split(''))).reduce((a, b) => a.concat(b), []);\n  let rotatedWordRotation = rotatedWordRotation.map(x => x.map(y => y.split(''))).reduce((a, b) => a.concat(b), []);\n  let rotatedWordRotation = rotatedWordRotation.map(x => x.map(y => y.split(''))).reduce((a, b) => a.concat(b), []);\n  let rotatedWordRotation = rotatedWordRotation.map(x => x.map(y => y.split(''))).reduce((a, b) => a.concat(b), []);\n  let rotatedWordRotation = rotatedWordRotation.map(x => x.map(y => y.split(''))).reduce((a, b) => a.concat(b), []);\n  let rotatedWordRotation = rotatedWordRotation.map(x => x.map(y => y.split(''))).reduce((a, b) => a.concat(b), []);\n  let rotatedWordRotation = rotatedWordRotation.map(x => x.map(y => y.split(''))).reduce((a, b) => a.concat(b), []);\n  let rotatedWordRotation = rotatedWordRotation.map(x => x.map(y => y.split(''))).reduce((a, b) => a.concat(b), []);\n  let rotatedWordRotation = rotatedWordRotation.map(x => x.map(y => y.split(''))).reduce((a, b) => a.concat(b), []);\n  let rotatedWordRotation = rotatedWordRotation.map(x => x.map(y => y.split(''))).reduce((a, b) => a.concat(b), []);\n  let rotatedWordRotation = rotatedWordRotation.map(x => x.map(y => y.split(''))).reduce((a, b) => a.concat(b), []);\n  let rotatedWordRotation = rotatedWordRotation.map(x => x.map(y => y.split(''))).reduce((a, b) => a.concat(b), []);\n  let rotatedWordRotation = rotatedWordRotation.map(x => x.map(y => y.split(''))).reduce((a, b) => a.concat(b), []);\n  let rotatedWordRotation = rotatedWordRotation.map(x => x.map(y => y.split(''))).reduce((a, b) => a.concat(b), []);\n  let rotatedWordRotation = rotatedWordRotation.map(x => x.map(y => y.split(''))).reduce((a, b) => a.concat(b), []);\n  let rotatedWordRotation = rotatedWordRotation.map(x => x.map(y => y.split(''))).reduce((a, b) => a.concat(b), []);\n  let rotatedWordRotation = rotatedWordRotation.map(x => x.map(y => y.split(''))).reduce((a, b) => a.concat(b), []);\n  let rotatedWordRotation = rotatedWordRotation.map(x => x.map(y => y.split(''))).reduce((a, b) => a.concat(b), []);\n  let rotatedWordRotation = rotatedWordRotation.map(x => x.map(y => y.split(''))).reduce((a, b) => a.concat(b), []);\n  let rotatedWordRotation = rotatedWordRotation.map(x => x.map(y => y.split(''))).reduce((a, b) => a.concat(b), []);\n  let rotatedWordRotation = rotatedWordRotation.map(x => x.map(y => y.split(''))).reduce((a, b) => ", "passed": 0}
{"task_id": "JavaScript/155", "prompt": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      eveNOddcount(-12) ==> (1, 1)\n      eveNOddcount(123) ==> (1, 2)\n  */\nconst eveNOddcount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "eveNOddcount", "gc": "<|endoftext|>/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      eveNOddcount(-12) ==> (1, 1)\n      eveNOddcount(123) ==> (1, 2)\n  */\nconst eveNOddcount = (num) => {\n  let even = 0, odd = 0;\n  for(let i = num; i >= 0; i--) {\n    if(i % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n};\n\n/*Given a string, return an array that has all the characters in the string.\n\n   Example:\n      stringToArray('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      stringToArray('helloworld') ==> ['h', 'e', 'l', 'l', 'o', 'd']\n      stringToArray('helloworld!') ==> ['h', 'e', 'l', 'l', 'o', 'd', '!']\n  */\nconst stringToArray = (str) => {\n  let arr = [];\n  for(let i = 0; i < str.length; i++) {\n    arr.push(str.charAt(i));\n  }\n  return arr;\n};\n\n/*Given a string, return an array that has all the characters in the string that are in uppercase.\n\n   Example:\n      stringToUpperCase('hello') ==> ['H', 'e', 'l', 'l', 'o']\n      stringToUpperCase('helloworld') ==> ['H', 'e', 'l', 'l', 'o', 'd']\n      stringToUpperCase('helloworld!') ==> ['H', 'e', 'l', 'l', 'o', 'd', '!']\n  */\nconst stringToUpperCase = (str) => {\n  let arr = [];\n  for(let i = 0; i < str.length; i++) {\n    if(str.charAt(i).toUpperCase() === str.charAt(i).toUpperCase()) {\n      arr.push(str.charAt(i).toUpperCase());\n    }\n  }\n  return arr;\n};\n\n/*Given a string, return an array that has all the characters in the string that are in lowercase.\n\n   Example:\n      stringToLowerCase('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      stringToLowerCase('helloworld') ==> ['h', 'e', 'l', 'l', 'o', 'd']\n      stringToLowerCase('helloworld!') ==> ['h', 'e', 'l', 'l', 'o', 'd', '!']\n  */\nconst stringToLowerCase = (str) => {\n  let arr = [];\n  for(let i = 0; i < str.length; i++) {\n    if(str.charAt(i).toLowerCase() === str.charAt(i).toLowerCase()) {\n      arr.push(str.charAt(i).toLowerCase());\n    }\n  }\n  return arr;\n};\n\n/*Given a string, return an array that has all the characters in the string that are in uppercase and lowercase.\n\n   Example:\n      stringToUpperCaseAndLowerCase('hello') ==> ['H', 'e', 'l', 'l', 'o']\n      stringToUpperCaseAndLowerCase('helloworld') ==> ['H', 'e', 'l', 'l', 'o', 'd']\n      stringToUpperCaseAndLowerCase('helloworld!') ==> ['H', 'e', 'l', 'l', 'o', 'd', '!']\n  */\nconst stringToUpperCaseAndLowerCase = (str) => {\n  let arr = [];\n  for(let i = 0; i < str.length; i++) {\n    if(str.charAt(i).toUpperCase() === str.charAt(i).toLowerCase()) {\n      arr.push(str.charAt(i).toUpperCase());\n    } else {\n      arr.push(str.charAt(i).toLowerCase());\n    }\n  }\n  return arr;\n};\n\n/*Given a string, return an array that has all the characters in the string that are in uppercase and lowercase and are separated by a single space.\n\n   Example:\n      stringToUpperCaseAndLowerCaseAndSpace('hello') ==> ['H', 'e', 'l', 'l', 'o']\n      stringToUpperCaseAndLowerCaseAndSpace('helloworld') ==> ['H', 'e', 'l', 'l', 'o', 'd']\n      stringToUpperCaseAndLowerCaseAndSpace('helloworld!') ==> ['H', 'e', 'l', 'l', 'o', 'd', '!']\n  */\nconst stringToUpperCaseAndLowerCaseAndSpace = (str) => {\n  let arr = [];\n  for(let i = 0; i < str.length; i++) {\n    if(str.charAt(i).toUpperCase() === str.charAt(i).toLowerCase()) {\n      arr.push(str.charAt(i).toUpperCase());\n    } else {\n      arr.push(str.charAt(i).toLowerCase());\n    }\n  }\n  arr.push(\" \");\n  return arr;\n};\n\n/*Given a string, return an array that has all the characters in the string that are in uppercase and lowercase and are separated by a single space and are separated by a single period.\n\n   Example:\n      stringToUpperCaseAndLowerCaseAndPeriod('hello') ==> ['H', 'e', 'l', 'l', 'o']\n      stringToUpperCaseAndLowerCaseAndPeriod('helloworld') ==> ['H', 'e', 'l', 'l', 'o', 'd']\n      stringToUpperCaseAndLowerCaseAndPeriod('helloworld!') ==> ['H', 'e', 'l', 'l', 'o', 'd', '!']\n  */\nconst stringToUpperCaseAndLowerCaseAndPeriod = (str) => {\n  let arr = [];\n  for(let i = 0; i < str.length; i++) {\n    if(str.charAt(i).toUpperCase() === str.charAt(i).toLowerCase()) {\n      arr.push(str.charAt(i).toUpperCase());\n    } else {\n      arr.push(str.charAt(i).toLowerCase());\n    }\n  }\n  arr.push(\". \");\n  return arr;\n};\n\n/*Given a string, return an array that has all the characters in the string that are in uppercase and lowercase and are separated by a single space and are separated by a single period and are separated by a single comma.\n\n   Example:\n      stringToUpperCaseAndLowerCaseAndComma('hello') ==> ['H', 'e', 'l', 'l', 'o']\n      stringToUpperCaseAndLowerCaseAndComma('helloworld') ==> ['H', 'e', 'l', 'l', 'o', 'd']\n      stringToUpperCaseAndLowerCaseAndComma('helloworld!') ==> ['H', 'e', 'l', 'l', 'o', 'd', '!']\n  */\nconst stringToUpperCaseAndLowerCaseAndComma = (str) => {\n  let arr = [];\n  for(let i = 0; i < str.length; i++) {\n    if(str.charAt(i).toUpperCase() === str.charAt(i).toLowerCase()) {\n      arr.push(str.charAt(i).toUpperCase());\n    } else {\n      arr.push(str.charAt(i).toLowerCase());\n    }\n  }\n  arr.push(\", \");\n  return arr;\n};\n\n/*Given a string, return an array that has all the characters in the string that are in uppercase and lowercase and are separated by a single space and are separated by a single period and are separated by a single comma and are separated by a single space.\n\n   Example:\n      stringToUpperCaseAndLowerCaseAndCommaAndSpace('hello') ==> ['H', 'e', 'l', 'l', 'o']\n      stringToUpperCaseAndLowerCaseAndCommaAndSpace('helloworld') ==> ['H', 'e', 'l', 'l', 'o', 'd']\n      stringToUpperCaseAndLowerCaseAndCommaAndSpace('helloworld!') ==> ['H', 'e', 'l', 'l', 'o', 'd', '!']\n  */\nconst stringToUpperCaseAndLowerCaseAndCommaAndSpace = (str) => {\n  let arr = [];\n  for(let i = 0; i < str.length; i++) {\n    if(str.charAt(i).toUpperCase() === str.charAt(i).toLowerCase()) {\n      arr.push(str.charAt(i).toUpperCase());\n    } else {\n      arr.push(str.charAt(i).toLowerCase());\n    }\n  }\n  arr.push(\", \", \", \", \", \", \", \", \", \", \", \", \", \", \", \", \", \", \", \", \", \", \", \", \", \", \", \", \", \", \", \", \", \", \", \", \", \", \", \", \", \", \", \", \", \", \", \", \", \", \", \", \", \", \", \", \", \", \", \", ", "passed": 0}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> inttoMiNiRomAn(19) == 'xix'\n  >>> inttoMiNiRomAn(152) == 'clii'\n  >>> inttoMiNiRomAn(426) == 'cdxxvi'\n  */\nconst inttoMiNiRomAn = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "inttoMiNiRomAn", "gc": "<|endoftext|>/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> inttoMiNiRomAn(19) == 'xix'\n  >>> inttoMiNiRomAn(152) == 'clii'\n  >>> inttoMiNiRomAn(426) == 'cdxxvi'\n  */\nconst inttoMiNiRomAn = (number) => {\n  const str = intToMiNiRomAn(number);\n  return str.toLowerCase();\n};\n\n/*\n  Given a positive integer, obtain its hexadecimal equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> inttoHexaMiNiRomAn(19) == '0xxix'\n  >>> inttoHexaMiNiRomAn(152) == '0xclii'\n  >>> inttoHexaMiNiRomAn(426) == '0xcdxxvi'\n  */\nconst inttoHexaMiNiRomAn = (number) => {\n  const str = intToHexaMiNiRomAn(number);\n  return str.toLowerCase();\n};\n\n/*\n  Given a positive integer, obtain its decimal equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> inttoDecMiNiRomAn(19) == '19'\n  >>> inttoDecMiNiRomAn(152) == '152'\n  >>> inttoDecMiNiRomAn(426) == '426'\n  */\nconst inttoDecMiNiRomAn = (number) => {\n  const str = intToDecMiNiRomAn(number);\n  return str.toLowerCase();\n};\n\n/*\n  Given a positive integer, obtain its hexadecimal equivalent as a string,\n  and return it in uppercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> inttoHexaDecMiNiRomAn(19) == '0x19'\n  >>> inttoHexaDecMiNiRomAn(152) == '0x152'\n  >>> inttoHexaDecMiNiRomAn(426) == '0x426'\n  */\nconst inttoHexaDecMiNiRomAn = (number) => {\n  const str = intToHexaDecMiNiRomAn(number);\n  return str.toUpperCase();\n};\n\n/*\n  Given a positive integer, obtain its decimal equivalent as a string,\n  and return it in uppercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> inttoDecHexaDecMiNiRomAn(19) == '19'\n  >>> inttoDecHexaDecMiNiRomAn(152) == '152'\n  >>> inttoDecHexaDecMiNiRomAn(426) == '426'\n  */\nconst inttoDecHexaDecMiNiRomAn = (number) => {\n  const str = intToDecHexaDecMiNiRomAn(number);\n  return str.toUpperCase();\n};\n\n/*\n  Given a positive integer, obtain its hexadecimal equivalent as a string,\n  and return it in uppercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> inttoHexaDecHexaDecMiNiRomAn(19) == '0x19'\n  >>> inttoHexaDecHexaDecMiNiRomAn(152) == '0x152'\n  >>> inttoHexaDecHexaDecMiNiRomAn(426) == '0x426'\n  */\nconst inttoHexaDecHexaDecMiNiRomAn = (number) => {\n  const str = intToHexaDecHexaDecMiNiRomAn(number);\n  return str.toUpperCase();\n};\n\n/*\n  Given a positive integer, obtain its hexadecimal equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> inttoHexaDecHexaDecHexaDecMiNiRomAn(19) == '0x19'\n  >>> inttoHexaDecHexaDecHexaDecHexaDecMiNiRomAn(152) == '0x152'\n  >>> inttoHexaDecHexaDecHexaDecHexaDecMiNiRomAn(426) == '0x426'\n  */\nconst inttoHexaDecHexaDecHexaDecMiNiRomAn = (number) => {\n  const str = intToHexaDecHexaDecHexaDecMiNiRomAn(number);\n  return str.toLowerCase();\n};\n\n/*\n  Given a positive integer, obtain its hexadecimal equivalent as a string,\n  and return it in uppercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> inttoHexaDecHexaDecHexaDecHexaDecMiNiRomAn(19) == '0x19'\n  >>> inttoHexaDecHexaDecHexaDecHexaDecHexaDecMiNiRomAn(152) == '0x152'\n  >>> inttoHexaDecHexaDecHexaDecHexaDecHexaDecMiNiRomAn(426) == '0x426'\n  */\nconst inttoHexaDecHexaDecHexaDecHexaDecMiNiRomAn = (number) => {\n  const str = intToHexaDecHexaDecHexaDecHexaDecMiNiRomAn(number);\n  return str.toUpperCase();\n};\n\n/*\n  Given a positive integer, obtain its hexadecimal equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> inttoHexaDecHexaDecHexaDecHexaDecHexaDecMiNiRomAn(19) == '0x19'\n  >>> inttoHexaDecHexaDecHexaDecHexaDecHexaDecHexaDecMiNiRomAn(152) == '0x152'\n  >>> inttoHexaDecHexaDecHexaDecHexaDecHexaDecHexaDecMiNiRomAn(426) == '0x426'\n  */\nconst inttoHexaDecHexaDecHexaDecHexaDecHexaDecMiNiRomAn = (number) => {\n  const str = intToHexaDecHexaDecHexaDecHexaDecHexaDecMiNiRomAn(number);\n  return str.toLowerCase();\n};\n\n/*\n  Given a positive integer, obtain its hexadecimal equivalent as a string,\n  and return it in uppercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> inttoHexaDecHexaDecHexaDecHexaDecHexaDecHexaDecMiNiRomAn(19) == '0x19'\n  >>> inttoHexaDecHexaDecHexaDecHexaDecHexaDecHexaDecHexaDecMiNiRomAn(152) == '0x152'\n  >>> inttoHexaDecHexaDecHexaDecHexaDecHexaDecHexaDecHexaDecMiNiRomAn(426) == '0x426'\n  */\nconst inttoHexaDecHexaDecHexaDecHexaDecHexaDecHexaDecMiNiRomAn = (number) => {\n  const str = intToHexaDecHexaDecHexaDecHexaDecHexaDecHexaDecMiNiRomAn(number);\n  return str.toUpperCase();\n};\n\n/*\n  Given a positive integer, obtain its hexadecimal ", "passed": 0}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rigHtAnGleTrIanGle(3, 4, 5) == true\n  rigHtAnGleTrIanGle(1, 2, 3) == false\n  */\nconst rigHtAnGleTrIanGle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rigHtAnGleTrIanGle", "gc": "<|endoftext|>/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rigHtAnGleTrIanGle(3, 4, 5) == true\n  rigHtAnGleTrIanGle(1, 2, 3) == false\n  */\nconst rigHtAnGleTrIanGle = (a, b, c) => {\n  const aLen = a.length;\n  const bLen = b.length;\n  const cLen = c.length;\n  const a1 = aLen - 1;\n  const a2 = a1;\n  const a3 = a1 + 1;\n  const b1 = bLen - 1;\n  const b2 = b1;\n  const b3 = b1 + 1;\n  const c1 = cLen - 1;\n  const c2 = c1;\n  const c3 = c1 + 1;\n  if (a2 >= b1 && b2 >= c1 && c2 >= a1 && a3 >= b1 && b3 >= c1 && c3 >= a1) {\n    return true;\n  }\n  return false;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a left-angled triangle, false otherwise.\n  A left-angled triangle is a triangle in which one angle is left angle or\n  180 degree.\n  Example:\n  lefHtAnGleTrIanGle(3, 4, 5) == true\n  lefHtAnGleTrIanGle(1, 2, 3) == false\n  */\nconst lefHtAnGleTrIanGle = (a, b, c) => {\n  const aLen = a.length;\n  const bLen = b.length;\n  const cLen = c.length;\n  const a1 = aLen - 1;\n  const a2 = a1;\n  const a3 = a1 + 1;\n  const b1 = bLen - 1;\n  const b2 = b1;\n  const b3 = b1 + 1;\n  const c1 = cLen - 1;\n  const c2 = c1;\n  const c3 = c1 + 1;\n  if (a2 >= b1 && b2 >= c1 && c2 >= a1 && a3 >= b1 && b3 >= c1 && c3 >= a1) {\n    return true;\n  }\n  return false;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a square, false otherwise.\n  A square is a triangle in which one side is square or 180 degree.\n  Example:\n  squaRtIanGle(3, 4, 5) == true\n  squaRtIanGle(1, 2, 3) == false\n  */\nconst squaRtIanGle = (a, b, c) => {\n  const aLen = a.length;\n  const bLen = b.length;\n  const cLen = c.length;\n  const a1 = aLen - 1;\n  const a2 = a1;\n  const a3 = a1 + 1;\n  const b1 = bLen - 1;\n  const b2 = b1;\n  const b3 = b1 + 1;\n  const c1 = cLen - 1;\n  const c2 = c1;\n  const c3 = c1 + 1;\n  if (a2 >= b1 && b2 >= c1 && c2 >= a1 && a3 >= b1 && b3 >= c1 && c3 >= a1) {\n    return true;\n  }\n  return false;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a circle, false otherwise.\n  A circle is a triangle in which one side is circle or 360 degree.\n  Example:\n  circRtIanGle(3, 4, 5) == true\n  circRtIanGle(1, 2, 3) == false\n  */\nconst circRtIanGle = (a, b, c) => {\n  const aLen = a.length;\n  const bLen = b.length;\n  const cLen = c.length;\n  const a1 = aLen - 1;\n  const a2 = a1;\n  const a3 = a1 + 1;\n  const b1 = bLen - 1;\n  const b2 = b1;\n  const b3 = b1 + 1;\n  const c1 = cLen - 1;\n  const c2 = c1;\n  const c3 = c1 + 1;\n  if (a2 >= b1 && b2 >= c1 && c2 >= a1 && a3 >= b1 && b3 >= c1 && c3 >= a1) {\n    return true;\n  }\n  return false;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a pentagon, false otherwise.\n  A pentagon is a triangle in which one side is pentagon or 180 degree.\n  Example:\n  pentaGleTrIanGle(3, 4, 5) == true\n  pentaGleTrIanGle(1, 2, 3) == false\n  */\nconst pentaGleTrIanGle = (a, b, c) => {\n  const aLen = a.length;\n  const bLen = b.length;\n  const cLen = c.length;\n  const a1 = aLen - 1;\n  const a2 = a1;\n  const a3 = a1 + 1;\n  const b1 = bLen - 1;\n  const b2 = b1;\n  const b3 = b1 + 1;\n  const c1 = cLen - 1;\n  const c2 = c1;\n  const c3 = c1 + 1;\n  if (a2 >= b1 && b2 >= c1 && c2 >= a1 && a3 >= b1 && b3 >= c1 && c3 >= a1) {\n    return true;\n  }\n  return false;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a hexagon, false otherwise.\n  A hexagon is a triangle in which one side is hexagon or 360 degree.\n  Example:\n  hexaGleTrIanGle(3, 4, 5) == true\n  hexaGleTrIanGle(1, 2, 3) == false\n  */\nconst hexaGleTrIanGle = (a, b, c) => {\n  const aLen = a.length;\n  const bLen = b.length;\n  const cLen = c.length;\n  const a1 = aLen - 1;\n  const a2 = a1;\n  const a3 = a1 + 1;\n  const b1 = bLen - 1;\n  const b2 = b1;\n  const b3 = b1 + 1;\n  const c1 = cLen - 1;\n  const c2 = c1;\n  const c3 = c1 + 1;\n  if (a2 >= b1 && b2 >= c1 && c2 >= a1 && a3 >= b1 && b3 >= c1 && c3 >= a1) {\n    return true;\n  }\n  return false;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a heptagon, false otherwise.\n  A heptagon is a triangle in which one side is heptagon or 360 degree.\n  Example:\n  heptaGleTrIanGle(3, 4, 5) == true\n  heptaGleTrIanGle(1, 2, 3) == false\n  */\nconst heptaGleTrIanGle = (a, b, c) => {\n  const aLen = a.length;\n  const bLen = b.length;\n  const cLen = c.length;\n  const a1 = aLen - 1;\n  const a2 = a1;\n  const a3 = a1 + 1;\n  const b1 = bLen - 1;\n  const b2 = b1;\n  const b3 = b1 + 1;\n  const c1 = cLen - 1;\n  const c2 = c1;\n  const c3 = c1 + 1;", "passed": 0}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  finDMax([\"name\", \"of\", \"string\"]) === \"string\"\n  finDMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  finDMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst finDMax = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "finDMax", "gc": "<|endoftext|>/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  finDMax([\"name\", \"of\", \"string\"]) === \"string\"\n  finDMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  finDMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst finDMax = (words) => {\n  let max = 0;\n  let maxWord = '';\n  let maxChar = 0;\n  let maxUniqueChar = 0;\n  let maxUniqueWord = '';\n  let maxUniqueWordChar = 0;\n  let maxUniqueWordChar2 = 0;\n  let maxUniqueWordChar3 = 0;\n  let maxUniqueWordChar4 = 0;\n  let maxUniqueWordChar5 = 0;\n  let maxUniqueWordChar6 = 0;\n  let maxUniqueWordChar7 = 0;\n  let maxUniqueWordChar8 = 0;\n  let maxUniqueWordChar9 = 0;\n  let maxUniqueWordChar10 = 0;\n  let maxUniqueWordChar11 = 0;\n  let maxUniqueWordChar12 = 0;\n  let maxUniqueWordChar13 = 0;\n  let maxUniqueWordChar14 = 0;\n  let maxUniqueWordChar15 = 0;\n  let maxUniqueWordChar16 = 0;\n  let maxUniqueWordChar17 = 0;\n  let maxUniqueWordChar18 = 0;\n  let maxUniqueWordChar19 = 0;\n  let maxUniqueWordChar20 = 0;\n  let maxUniqueWordChar21 = 0;\n  let maxUniqueWordChar22 = 0;\n  let maxUniqueWordChar23 = 0;\n  let maxUniqueWordChar24 = 0;\n  let maxUniqueWordChar25 = 0;\n  let maxUniqueWordChar26 = 0;\n  let maxUniqueWordChar27 = 0;\n  let maxUniqueWordChar28 = 0;\n  let maxUniqueWordChar29 = 0;\n  let maxUniqueWordChar30 = 0;\n  let maxUniqueWordChar31 = 0;\n  let maxUniqueWordChar32 = 0;\n  let maxUniqueWordChar33 = 0;\n  let maxUniqueWordChar34 = 0;\n  let maxUniqueWordChar35 = 0;\n  let maxUniqueWordChar36 = 0;\n  let maxUniqueWordChar37 = 0;\n  let maxUniqueWordChar38 = 0;\n  let maxUniqueWordChar39 = 0;\n  let maxUniqueWordChar40 = 0;\n  let maxUniqueWordChar41 = 0;\n  let maxUniqueWordChar42 = 0;\n  let maxUniqueWordChar43 = 0;\n  let maxUniqueWordChar44 = 0;\n  let maxUniqueWordChar45 = 0;\n  let maxUniqueWordChar46 = 0;\n  let maxUniqueWordChar47 = 0;\n  let maxUniqueWordChar48 = 0;\n  let maxUniqueWordChar49 = 0;\n  let maxUniqueWordChar50 = 0;\n  let maxUniqueWordChar51 = 0;\n  let maxUniqueWordChar52 = 0;\n  let maxUniqueWordChar53 = 0;\n  let maxUniqueWordChar54 = 0;\n  let maxUniqueWordChar55 = 0;\n  let maxUniqueWordChar56 = 0;\n  let maxUniqueWordChar57 = 0;\n  let maxUniqueWordChar58 = 0;\n  let maxUniqueWordChar59 = 0;\n  let maxUniqueWordChar60 = 0;\n  let maxUniqueWordChar61 = 0;\n  let maxUniqueWordChar62 = 0;\n  let maxUniqueWordChar63 = 0;\n  let maxUniqueWordChar64 = 0;\n  let maxUniqueWordChar65 = 0;\n  let maxUniqueWordChar66 = 0;\n  let maxUniqueWordChar67 = 0;\n  let maxUniqueWordChar68 = 0;\n  let maxUniqueWordChar69 = 0;\n  let maxUniqueWordChar70 = 0;\n  let maxUniqueWordChar71 = 0;\n  let maxUniqueWordChar72 = 0;\n  let maxUniqueWordChar73 = 0;\n  let maxUniqueWordChar74 = 0;\n  let maxUniqueWordChar75 = 0;\n  let maxUniqueWordChar76 = 0;\n  let maxUniqueWordChar77 = 0;\n  let maxUniqueWordChar78 = 0;\n  let maxUniqueWordChar79 = 0;\n  let maxUniqueWordChar80 = 0;\n  let maxUniqueWordChar81 = 0;\n  let maxUniqueWordChar82 = 0;\n  let maxUniqueWordChar83 = 0;\n  let maxUniqueWordChar84 = 0;\n  let maxUniqueWordChar85 = 0;\n  let maxUniqueWordChar86 = 0;\n  let maxUniqueWordChar87 = 0;\n  let maxUniqueWordChar88 = 0;\n  let maxUniqueWordChar89 = 0;\n  let maxUniqueWordChar90 = 0;\n  let maxUniqueWordChar91 = 0;\n  let maxUniqueWordChar92 = 0;\n  let maxUniqueWordChar93 = 0;\n  let maxUniqueWordChar94 = 0;\n  let maxUniqueWordChar95 = 0;\n  let maxUniqueWordChar96 = 0;\n  let maxUniqueWordChar97 = 0;\n  let maxUniqueWordChar98 = 0;\n  let maxUniqueWordChar99 = 0;\n  let maxUniqueWordChar100 = 0;\n  let maxUniqueWordChar101 = 0;\n  let maxUniqueWordChar102 = 0;\n  let maxUniqueWordChar103 = 0;\n  let maxUniqueWordChar104 = 0;\n  let maxUniqueWordChar105 = 0;\n  let maxUniqueWordChar106 = 0;\n  let maxUniqueWordChar107 = 0;\n  let maxUniqueWordChar108 = 0;\n  let maxUniqueWordChar109 = 0;\n  let maxUniqueWordChar110 = 0;\n  let maxUniqueWordChar111 = 0;\n  let maxUniqueWordChar112 = 0;\n  let maxUniqueWordChar113 = 0;\n  let maxUniqueWordChar114 = 0;\n  let maxUniqueWordChar115 = 0;\n  let maxUniqueWordChar116 = 0;\n  let maxUniqueWordChar117 = 0;\n  let maxUniqueWordChar118 = 0;\n  let maxUniqueWordChar119 = 0;\n  let maxUniqueWordChar120 = 0;\n  let maxUniqueWordChar121 = 0;\n  let maxUniqueWordChar122 = 0;\n  let maxUniqueWordChar123 = 0;\n  let maxUniqueWordChar124 = 0;\n  let maxUniqueWordChar125 = 0;\n  let maxUniqueWordChar126 = 0;\n  let maxUniqueWordChar127 = 0;\n  let maxUniqueWordChar128 = 0;\n  let maxUniqueWordChar129 = 0;\n  let maxUniqueWordChar130 = 0;\n  let maxUniqueWordChar131 = 0;\n  let maxUniqueWordChar132 = 0;\n  let maxUniqueWordChar133 = 0;\n  let maxUniqueWordChar134 = 0;\n  let maxUniqueWordChar135 = 0;\n  let maxUniqueWordChar136 = 0;\n  let maxUniqueWordChar137 = 0;\n  let maxUniqueWordChar138 = 0;\n  let maxUniqueWordChar139 = 0;\n  let maxUniqueWordChar140 = 0;\n  let maxUniqueWordChar141 = 0;\n  let maxUniqueWordChar142 = 0;\n  let maxUniqueWordChar143 = 0;\n  let maxUniqueWordChar144 = 0;\n  let maxUniqueWordChar145 = 0;\n  let maxUniqueWordChar146 = 0;\n  let maxUniqueWordChar147 = 0;\n  let maxUniqueWordChar148 = 0;\n  let maxUniqueWordChar149 = 0;\n  let maxUniqueWordChar150 = 0;\n  let maxUniqueWordChar151 = 0;\n  let maxUniqueWordChar152 = 0;\n  let maxUniqueWordChar153 = 0;\n  let maxUniqueWordChar154 = 0;\n  let maxUniqueWordChar155 = 0;\n  let maxUniqueWordChar156 = 0;\n  let maxUniqueWordChar157 = 0;\n  let maxUniqueWordChar158 = 0;\n  let maxUniqueWordChar159 = 0;\n  let maxUniqueWordChar160 = 0;\n  let maxUniqueWordChar161 = 0;\n  let maxUniqueWordChar162 = 0;\n  let maxUniqueWordChar163 = 0;\n  let maxUniqueWordChar164 = 0;\n  let maxUniqueWordChar165 = 0;\n  let maxUniqueWordChar166 = 0;\n  let maxUniqueWordChar167 = 0;\n  let maxUniqueWordChar168 = 0;\n  let maxUniqueWordChar169 = 0;\n  let maxUniqueWordChar170 = 0;\n  let maxUniqueWordChar171 = 0;\n  let maxUniqueWordChar172 = 0;\n  let maxUniqueWordChar173 = 0;\n  let maxUniqueWordChar174 = 0;\n  let maxUniqueWordChar175 = 0;\n  let maxUniqueWordChar", "passed": 0}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "gc": "<|endoftext|>/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  const carrots = Math.ceil(number * Math.ceil(need / 100));\n  const remainingCarrots = Math.ceil(remaining / 100);\n  const totalCarrots = carrots + remainingCarrots;\n  const totalEaten = carrots + remainingCarrots - totalCarrots;\n  return [totalCarrots, totalEaten];\n};\n\n/*\n  You are a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  const carrots = Math.ceil(number * Math.ceil(need / 100));\n  const remainingCarrots = Math.ceil(remaining / 100);\n  const totalCarrots = carrots + remainingCarrots;\n  const totalEaten = carrots + remainingCarrots - totalCarrots;\n  return [totalCarrots, totalEaten];\n};\n\n/*\n  You are a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  const carrots = Math.ceil(number * Math.ceil(need / 100));\n  const remainingCarrots = Math.ceil(remaining / 100);\n  const totalCarrots = carrots + remainingCarrots;\n  const totalEaten = carrots + remainingCarrots - totalCarrots;\n  return [totalCarrots, totalEaten];\n};\n\n/*\n  You are a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  const carrots = Math.ceil(number * Math.ceil(need / 100));\n  const remainingCarrots = Math.ceil(remaining / 100);\n  const totalCarrots = carrots + remainingCarrots;\n  const totalEaten = carrots + remainingCarrots - totalCarrots;\n  return [totalCarrots, totalEaten];\n};\n\n/*\n  You are a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  const carrots = Math.ceil(number * Math.ceil(need / 100));\n  const remainingCarrots = Math.ceil(remaining / 100);\n  const totalCarrots = carrots + remainingCarrots;\n  const totalEaten = carrots + remainingCarrots - totalCarrots;\n  return [totalCarrots, totalEat", "passed": 0}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> couNtDiStincTChAractErs('xyzXYZ')\n  3\n  >>> couNtDiStincTChAractErs('Jerry')\n  4\n  */\nconst couNtDiStincTChAractErs = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "couNtDiStincTChAractErs", "gc": "<|endoftext|>/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> couNtDiStincTChAractErs('xyzXYZ')\n  3\n  >>> couNtDiStincTChAractErs('Jerry')\n  4\n  */\nconst couNtDiStincTChAractErs = (string) => {\n  let count = 0;\n  let char;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let ", "passed": 0}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doALgebRa = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doALgebRa", "gc": "<|endoftext|>/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doALgebRa = (operator, operand) => {\n  let result = 0;\n  let operatorLength = operator.length;\n  let operandLength = operand.length;\n  let operatorIndex = 0;\n  let operandIndex = 0;\n  while (operandIndex < operandLength) {\n    if (operatorIndex < operatorLength) {\n      result += operator[operatorIndex] * operand[operandIndex];\n      operatorIndex++;\n    } else {\n      result += operand[operandIndex];\n      operandIndex++;\n    }\n  }\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doALgebRb = (operator, operand) => {\n  let result = 0;\n  let operatorLength = operator.length;\n  let operandLength = operand.length;\n  let operatorIndex = 0;\n  let operandIndex = 0;\n  while (operandIndex < operandLength) {\n    if (operatorIndex < operatorLength) {\n      result += operator[operatorIndex] * operand[operandIndex];\n      operatorIndex++;\n    } else {\n      result += operand[operandIndex];\n      operandIndex++;\n    }\n  }\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doALgebRc = (operator, operand) => {\n  let result = 0;\n  let operatorLength = operator.length;\n  let operandLength = operand.length;\n  let operatorIndex = 0;\n  let operandIndex = 0;\n  while (operandIndex < operandLength) {\n    if (operatorIndex < operatorLength) {\n      result += operator[operatorIndex] * operand[operandIndex];\n      operatorIndex++;\n    } else {\n      result += operand[operandIndex];\n      operandIndex++;\n    }\n  }\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doALgebRd = (operator, operand) => {\n  let result = 0;\n  let operatorLength = operator.length;\n  let operandLength = operand.length;\n  let operatorIndex = 0;\n  let operandIndex = 0;\n  while (operandIndex < operandLength) {\n    if (operatorIndex < operatorLength) {\n      result += operator[operatorIndex] * operand[operandIndex];\n      operatorIndex++;\n    } else {\n      result += operand[operandIndex];\n      operandIndex++;\n    }\n  }\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doALgebRe = (operator, operand) => {\n  let result = 0;\n  let operatorLength = operator.length;\n  let operandLength = operand.length;\n  let operatorIndex = 0;\n  let operandIndex = 0;\n  while (operandIndex < operandLength) {\n    if (operatorIndex < operatorLength) {\n      result += operator[operatorIndex] * operand[operandIndex];\n      operatorIndex++;\n    } else {\n      result += operand[operandIndex];\n      operandIndex++;\n    }\n  }\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doALgebRf = (operator, operand) => {\n  let result = 0;\n  let operatorLength = operator.length;\n  let operandLength = operand.length;\n  let operatorIndex = 0;\n  let operandIndex = 0;\n  while (operandIndex < operandLength) {\n    if (operatorIndex < operatorLength) {\n      result += operator[operatorIndex] * operand[operandIndex];\n      operatorIndex++;\n", "passed": 0}
{"task_id": "JavaScript/161", "prompt": "/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solVe(\"1234\") = \"4321\"\n  solVe(\"ab\") = \"AB\"\n  solVe(\"#a@C\") = \"#A@c\"\n  */\nconst solVe = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solVe", "gc": "<|endoftext|>/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solVe(\"1234\") = \"4321\"\n  solVe(\"ab\") = \"AB\"\n  solVe(\"#a@C\") = \"#A@c\"\n  */\nconst solVe = (s) => {\n  let newStr = \"\";\n  let newStr2 = \"\";\n  let newStr3 = \"\";\n  let newStr4 = \"\";\n  let newStr5 = \"\";\n  let newStr6 = \"\";\n  let newStr7 = \"\";\n  let newStr8 = \"\";\n  let newStr9 = \"\";\n  let newStr10 = \"\";\n  let newStr11 = \"\";\n  let newStr12 = \"\";\n  let newStr13 = \"\";\n  let newStr14 = \"\";\n  let newStr15 = \"\";\n  let newStr16 = \"\";\n  let newStr17 = \"\";\n  let newStr18 = \"\";\n  let newStr19 = \"\";\n  let newStr20 = \"\";\n  let newStr21 = \"\";\n  let newStr22 = \"\";\n  let newStr23 = \"\";\n  let newStr24 = \"\";\n  let newStr25 = \"\";\n  let newStr26 = \"\";\n  let newStr27 = \"\";\n  let newStr28 = \"\";\n  let newStr29 = \"\";\n  let newStr30 = \"\";\n  let newStr31 = \"\";\n  let newStr32 = \"\";\n  let newStr33 = \"\";\n  let newStr34 = \"\";\n  let newStr35 = \"\";\n  let newStr36 = \"\";\n  let newStr37 = \"\";\n  let newStr38 = \"\";\n  let newStr39 = \"\";\n  let newStr40 = \"\";\n  let newStr41 = \"\";\n  let newStr42 = \"\";\n  let newStr43 = \"\";\n  let newStr44 = \"\";\n  let newStr45 = \"\";\n  let newStr46 = \"\";\n  let newStr47 = \"\";\n  let newStr48 = \"\";\n  let newStr49 = \"\";\n  let newStr50 = \"\";\n  let newStr51 = \"\";\n  let newStr52 = \"\";\n  let newStr53 = \"\";\n  let newStr54 = \"\";\n  let newStr55 = \"\";\n  let newStr56 = \"\";\n  let newStr57 = \"\";\n  let newStr58 = \"\";\n  let newStr59 = \"\";\n  let newStr60 = \"\";\n  let newStr61 = \"\";\n  let newStr62 = \"\";\n  let newStr63 = \"\";\n  let newStr64 = \"\";\n  let newStr65 = \"\";\n  let newStr66 = \"\";\n  let newStr67 = \"\";\n  let newStr68 = \"\";\n  let newStr69 = \"\";\n  let newStr70 = \"\";\n  let newStr71 = \"\";\n  let newStr72 = \"\";\n  let newStr73 = \"\";\n  let newStr74 = \"\";\n  let newStr75 = \"\";\n  let newStr76 = \"\";\n  let newStr77 = \"\";\n  let newStr78 = \"\";\n  let newStr79 = \"\";\n  let newStr80 = \"\";\n  let newStr81 = \"\";\n  let newStr82 = \"\";\n  let newStr83 = \"\";\n  let newStr84 = \"\";\n  let newStr85 = \"\";\n  let newStr86 = \"\";\n  let newStr87 = \"\";\n  let newStr88 = \"\";\n  let newStr89 = \"\";\n  let newStr90 = \"\";\n  let newStr91 = \"\";\n  let newStr92 = \"\";\n  let newStr93 = \"\";\n  let newStr94 = \"\";\n  let newStr95 = \"\";\n  let newStr96 = \"\";\n  let newStr97 = \"\";\n  let newStr98 = \"\";\n  let newStr99 = \"\";\n  let newStr100 = \"\";\n  let newStr101 = \"\";\n  let newStr102 = \"\";\n  let newStr103 = \"\";\n  let newStr104 = \"\";\n  let newStr105 = \"\";\n  let newStr106 = \"\";\n  let newStr107 = \"\";\n  let newStr108 = `\n  ${newStr101}\n  ${newStr102}\n  ${newStr103}\n  ${newStr104}\n  ${newStr105}\n  ${newStr106}\n  ${newStr107}\n  ${newStr108}\n  ${newStr109}\n  ${newStr110}\n  ${newStr111}\n  ${newStr112}\n  ${newStr113}\n  ${newStr114}\n  ${newStr115}\n  ${newStr116}\n  ${newStr117}\n  ${newStr118}\n  ${newStr119}\n  ${newStr120}\n  ${newStr121}\n  ${newStr122}\n  ${newStr123}\n  ${newStr124}\n  ${newStr125}\n  ${newStr126}\n  ${newStr127}\n  ${newStr128}\n  ${newStr129}\n  ${newStr130}\n  ${newStr131}\n  ${newStr132}\n  ${newStr133}\n  ${newStr134}\n  ${newStr135}\n  ${newStr136}\n  ${newStr137}\n  ${newStr138}\n  ${newStr139}\n  ${newStr140}\n  ${newStr141}\n  ${newStr142}\n  ${newStr143}\n  ${newStr144}\n  ${newStr145}\n  ${newStr146}\n  ${newStr147}\n  ${newStr148}\n  ${newStr149}\n  ${newStr150}\n  ${newStr151}\n  ${newStr152}\n  ${newStr153}\n  ${newStr154}\n  ${newStr155}\n  ${newStr156}\n  ${newStr157}\n  ${newStr158}\n  ${newStr159}\n  ${newStr160}\n  ${newStr161}\n  ${newStr162}\n  ${newStr163}\n  ${newStr164}\n  ${newStr165}\n  ${newStr166}\n  ${newStr167}\n  ${newStr168}\n  ${newStr169}\n  ${newStr170}\n  ${newStr171}\n  ${newStr172}\n  ${newStr173}\n  ${newStr174}\n  ${newStr175}\n  ${newStr176}\n  ${newStr177}\n  ${newStr178}\n  ${newStr179}\n  ${newStr180}\n  ${newStr181}\n  ${newStr182}\n  ${newStr183}\n  ${newStr184}\n  ${newStr185}\n  ${newStr186}\n  ${newStr187}\n  ${newStr188}\n  ${newStr189}\n  ${newStr190}\n  ${newStr191}\n  ${newStr192}\n  ${newStr193}\n  ${newStr194}\n  ${newStr195}\n  ${newStr196}\n  ${newStr197}\n  ${newStr198}\n  ${newStr199}\n  ${newStr200}\n  ${newStr201}\n  ${newStr202}\n  ${newStr203}\n  ${newStr204}\n  ${newStr205}\n  ${newStr206}\n  ${newStr207}\n  ${newStr208}\n  ${new", "passed": 0}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> strIngTOMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst strIngTOMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "strIngTOMd5", "gc": "<|endoftext|>/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> strIngTOMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst strIngTOMd5 = (text) => {\n  if (!text) {\n    return null;\n  }\n  return crypto.createHash('md5').update(text).digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> strIngTOMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst strIngTOMd5 = (text) => {\n  if (!text) {\n    return null;\n  }\n  return crypto.createHash('md5').update(text).digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> strIngTOMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst strIngTOMd5 = (text) => {\n  if (!text) {\n    return null;\n  }\n  return crypto.createHash('md5').update(text).digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> strIngTOMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst strIngTOMd5 = (text) => {\n  if (!text) {\n    return null;\n  }\n  return crypto.createHash('md5').update(text).digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> strIngTOMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst strIngTOMd5 = (text) => {\n  if (!text) {\n    return null;\n  }\n  return crypto.createHash('md5').update(text).digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> strIngTOMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst strIngTOMd5 = (text) => {\n  if (!text) {\n    return null;\n  }\n  return crypto.createHash('md5').update(text).digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> strIngTOMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst strIngTOMd5 = (text) => {\n  if (!text) {\n    return null;\n  }\n  return crypto.createHash('md5').update(text).digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> strIngTOMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst strIngTOMd5 = (text) => {\n  if (!text) {\n    return null;\n  }\n  return crypto.createHash('md5').update(text).digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> strIngTOMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst strIngTOMd5 = (text) => {\n  if (!text) {\n    return null;\n  }\n  return crypto.createHash('md5').update(text).digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> strIngTOMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst strIngTOMd5 = (text) => {\n  if (!text) {\n    return null;\n  }\n  return crypto.createHash('md5').update(text).digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> strIngTOMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst strIngTOMd5 = (text) => {\n  if (!text) {\n    return null;\n  }\n  return crypto.createHash('md5').update(text).digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> strIngTOMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst strIngTOMd5 = (text) => {\n  if (!text) {\n    return null;\n  }\n  return crypto.createHash('md5').update(text).digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> strIngTOMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst strIngTOMd5 = (text) => {\n  if (!text) {\n    return null;\n  }\n  return crypto.createHash('md5').update(text).digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> strIngTOMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst strIngTOMd5 = (text) => {\n  if (!text) {\n    return null;\n  }\n  return crypto.createHash('md5').update(text).digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> strIngTOMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst strIngTOMd5 = (text) => {\n  if (!text) {\n    return null;\n  }\n  return crypto.createHash('md5').update(text).digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> strIngTOMd5", "passed": 0}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  genEratEInteGerS(2, 8) => [2, 4, 6, 8]\n  genEratEInteGerS(8, 2) => [2, 4, 6, 8]\n  genEratEInteGerS(10, 14) => []\n  */\nconst genEratEInteGerS = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "genEratEInteGerS", "gc": "<|endoftext|>/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  genEratEInteGerS(2, 8) => [2, 4, 6, 8]\n  genEratEInteGerS(8, 2) => [2, 4, 6, 8]\n  genEratEInteGerS(10, 14) => []\n  */\nconst genEratEInteGerS = (a, b) => {\n  let result = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = a % b;\n  while (l > 0) {\n    result.push(a);\n    i++;\n    l = l / b;\n  }\n  while (l < 0) {\n    result.push(b);\n    j++;\n    l = l / b;\n  }\n  while (j < i) {\n    result.push(a);\n    j++;\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, return the number of digits in its binary\n  representation.\n\n  For example:\n  numBinary(10) => 2\n  numBinary(100) => 4\n  numBinary(1000) => 8\n  numBinary(10000) => 16\n  numBinary(100000) => 32\n  numBinary(1000000) => 64\n  numBinary(1000000000) => 128\n  numBinary(1000000000000) => 256\n  numBinary(1000000000000000) => 512\n  numBinary(10000000000000000) => 1024\n  numBinary(1000000000000000000) => 2048\n  numBinary(100000000000000000000) => 4096\n  numBinary(1000000000000000000000) => 8192\n  numBinary(10000000000000000000000) => 16384\n  numBinary(100000000000000000000000) => 32768\n  numBinary(1000000000000000000000000) => 65536\n  numBinary(10000000000000000000000000) => 131072\n  numBinary(100000000000000000000000000) => 262144\n  numBinary(1000000000000000000000000000) => 524288\n  numBinary(10000000000000000000000000000) => 1048576\n  numBinary(100000000000000000000000000000) => 2097152\n  numBinary(1000000000000000000000000000000) => 4194304\n  numBinary(10000000000000000000000000000000) => 8388608\n  numBinary(100000000000000000000000000000000) => 16777216\n  numBinary(1000000000000000000000000000000000) => 33554432\n  numBinary(1000000000000000000000000000000000) => 67108864\n  numBinary(1000000000000000000000000000000000) =>\n  134217728\n  numBinary(10000000000000000000000000000000000) => 268435456\n  numBinary(100000000000000000000000000000000000) =>\n  536870912\n  numBinary(1000000000000000000000000000000000000) =>\n  1073741824\n  numBinary(10000000000000000000000000000000000000) =>\n  2147483648\n  numBinary(100000000000000000000000000000000000000) =>\n  4294967296\n  numBinary(1000000000000000000000000000000000000000) =>\n  838860768\n  numBinary(10000000000000000000000000000000000000000) =>\n  167772160\n  numBinary(100000000000000000000000000000000000000000) =>\n  3355443200\n  numBinary(100000000000000000000000000000000000000000) =>\n  67108864000\n  numBinary(100000000000000000000000000000000000000000) =>\n  134217728000\n  numBinary(1000000000000000000000000000000000000000000) =>\n  268435456000\n  numBinary(10000000000000000000000000000000000000000000) =>\n  53687091200\n  numBinary(100000000000000000000000000000000000000000000) =>\n  107374182400\n  numBinary(1000000000000000000000000000000000000000000000) =>\n  2147483648000\n  numBinary(10000000000000000000000000000000000000000000000) =>\n  4294967296000\n  numBinary(100000000000000000000000000000000000000000000000) =>\n  838860768000\n  numBinary(1000000000000000000000000000000000000000000000000) =>\n  16777216000000\n  numBinary(10000000000000000000000000000000000000000000000000) =>\n  3355442400\n  numBinary(10000000000000000000000000000000000000000000000000) =>\n  671088640000\n  numBinary(10000000000000000000000000000000000000000000000000) =>\n  1342177280000\n  numBinary(100000000000000000000000000000000000000000000000000) =>\n  2684354560000\n  numBinary(10000000000000000000000000000000000000000000000000000) =>\n  5368709120000\n  numBinary(100000000000000000000000000000000000000000000000000000) =>\n  10737418240000\n  numBinary(100000000000000000000000000000000000000000000000) =>\n  21474836480000\n  numBinary(10000000000000000000000000000000000000000000000) =>\n  42949672960000\n  numBinary(100000000000000000000000000000000000000000000000) =>\n  8388607680000\n  numBinary(1000000000000000000000000000000000000000000000000) =>\n  16777216000000\n  numBinary(10000000000000000000000000000000000000000000000000) =>\n  33554424000000\n  numBinary(10000000000000000000000000000000000000000000000000) =>\n  671088640000000\n  numBinary(10000000000000000000000000000000000000000000000000) =>\n  1342177280000000\n  numBinary(1000000000000000000000000000000000000000000000000) =>\n  2684354560000000\n  numBinary(10000000000000000000000000000000000000000000000000) =>\n  5368709120000000\n  numBinary(10000000000000000000000000000000000000000000000000) =>\n  10737418240000000\n  numBinary(1000000000000000000000000000000000000000000000000) =>\n  21474836480000000\n  numBinary(10000000000000000000000000000000000000000000000000) =>\n  42949672960000000\n  numBinary(1000000000000000000000000000000000000000000000000) =>\n  8388607680000000\n  numBinary(10000000000000000000000000000000000000000000000000) =>\n  167772160000000.000\n  numBinary(1000000000000000000000000000000000000000000000000) =>\n  33554424000.000\n  numBinary(10000000000000000000000000000000000000000000000000) =>\n  671088640000.000\n  numBinary(1000000000000000000000000000000000000000000000000) =>\n  1342177280000.000\n  numBinary(10000000000000000000000000000000000000000000000000) =>\n  2684354560000.000\n  numBinary(1000000000000000000000000000000000000000000000000) =>\n  5368709120000.000\n  numBinary(10000000000000000000000000000000000000000000000000) =>\n  10737418240000.000\n  numBinary(1000000000000000000000000000000000000000000000000) =>\n  21474836480000.000\n  numBinary(10000000000000000000000000000000000000000000000000) =>\n  42949672960000.000\n  numBinary(1000000000000000000000000000000000000000000000000) =>\n  8388607680000.000\n  numBinary(1000000000000000000000000000000000000000000000000) =>\n  16777216000000.000\n  numBinary(10000000000000000000000000000000000000000000000000) =>\n  33554424000.000\n  numBinary(1000000000000000000000000000000000000000000000000) =>\n  671088640000.000\n  numBinary(1000000000000000000000000000000000000000000000000) =>\n  1342177280000.000\n  numBinary(10000000000000000000000000000000000000000000000000) =>\n  2684354560000.000\n  numBinary(1000000000000000000000000000000000000000000000000) =>\n  536", "passed": 0}
{"task_id": "JavaScript/17", "prompt": "/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parSeMuSic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parSeMuSic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parSeMuSic", "gc": "<|endoftext|>/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parSeMuSic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parSeMuSic = (music_string) => {\n  const notes = music_string.split('|');\n  const notes_lengths = notes.map((note) => note.length);\n  const notes_beats = notes_lengths.map((notes_length) => notes_length / 4);\n  return notes_beats;\n};\n\n/**\n  Given a string, return a list of integers representing how many beats does each note last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parSeMuSic('o o|.| o| o|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parSeMuSicNotes = (music_string) => {\n  const notes = music_string.split('|');\n  const notes_lengths = notes.map((note) => note.length);\n  const notes_beats = notes_lengths.map((notes_length) => notes_length / 4);\n  return notes_beats;\n};\n\n/**\n  Given a string, return a list of integers representing how many beats does each note last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parSeMuSic('o o|.| o| o|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parSeMuSicNotes_notes_length = (music_string) => {\n  const notes = music_string.split('|');\n  const notes_lengths = notes.map((note) => note.length);\n  const notes_beats = notes_lengths.map((notes_length) => notes_length / 4);\n  return notes_beats;\n};\n\n/**\n  Given a string, return a list of integers representing how many beats does each note last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parSeMuSic('o o|.| o| o|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parSeMuSicNotes_notes_length_notes_beats = (music_string) => {\n  const notes = music_string.split('|');\n  const notes_lengths = notes.map((note) => note.length);\n  const notes_beats = notes_lengths.map((notes_length) => notes_length / 4);\n  return notes_beats;\n};\n\n/**\n  Given a string, return a list of integers representing how many beats does each note last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parSeMuSic('o o|.| o| o|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parSeMuSicNotes_notes_length_notes_beats_notes_length = (music_string) => {\n  const notes = music_string.split('|');\n  const notes_lengths = notes.map((note) => note.length);\n  const notes_beats = notes_lengths.map((notes_length) => notes_length / 4);\n  const notes_lengths_notes_beats = notes_beats.map((notes_beat) => notes_length / notes_length);\n  return notes_lengths_notes_beats;\n};\n\n/**\n  Given a string, return a list of integers representing how many beats does each note last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parSeMuSic('o o|.| o| o|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parSeMuSicNotes_notes_length_notes_beats_notes_length_notes_beats = (music_string) => {\n  const notes = music_string.split('|');\n  const notes_lengths = notes.map((note) => note.length);\n  const notes_beats = notes_lengths.map((notes_length) => notes_length / 4);\n  const notes_lengths_notes_beats = notes_beats.map((notes_beat) => notes_length / notes_length);\n  const notes_beats_notes_lengths_beats = notes_beats.map((notes_beat) => notes_length / notes_length);\n  return notes_lengths_notes_beats_notes_lengths_beats;\n};\n\n/**\n  Given a string, return a list of integers representing how many beats does each note last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parSeMuSic('o o|.| o| o|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parSeMuSicNotes_notes_length_notes_beats_notes_length_notes_beats_notes_beats = (music_string) => {\n  const notes = music_string.split('|');\n  const notes_lengths = notes.map((note) => note.length);\n  const notes_beats = notes_lengths.map((notes_length) => notes_length / 4);\n  const notes_lengths_notes_beats = notes_beats.map((notes_length) => notes_length / notes_length);\n  const notes_beats_notes_lengths_beats = notes_beats.map((notes_length) => notes_length / notes_length);\n  const notes_beats_notes_lengths_beats_notes_beats = notes_beats.map((notes_length) => notes_length / notes_length);\n  return notes_lengths_notes_beats_notes_lengths_beats_notes_beats;\n};\n\n/**\n  Given a string, return a list of integers representing how many beats does each note last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parSeMuSic", "passed": 0}
{"task_id": "JavaScript/18", "prompt": "/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howmanytimes('', 'a')\n  0\n  >>> howmanytimes('aaa', 'a')\n  3\n  >>> howmanytimes('aaaa', 'aa')\n  3\n  */\nconst howmanytimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howmanytimes", "gc": "<|endoftext|>/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howmanytimes('', 'a')\n  0\n  >>> howmanytimes('aaa', 'a')\n  3\n  >>> howmanytimes('aaaa', 'aa')\n  3\n  */\nconst howmanytimes = (string, substring) => {\n  let count = 0;\n  let index = 0;\n  let length = string.length;\n  while (index < length) {\n    if (string.charAt(index) === substring) {\n      count++;\n    }\n    index++;\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count non-overlapping cases.\n  >>> howmanytimes('', 'a')\n  0\n  >>> howmanytimes('aaa', 'a')\n  3\n  >>> howmanytimes('aaaa', 'aa')\n  3\n  */\nconst howmanytimes_ = (string, substring) => {\n  let count = 0;\n  let index = 0;\n  let length = string.length;\n  while (index < length) {\n    if (string.charAt(index) === substring) {\n      count++;\n    }\n    index++;\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count non-overlapping cases.\n  >>> howmanytimes('', 'a')\n  0\n  >>> howmanytimes('aaa', 'a')\n  3\n  >>> howmanytimes('aaaa', 'aa')\n  3\n  */\nconst howmanytimes_ = (string, substring) => {\n  let count = 0;\n  let index = 0;\n  let length = string.length;\n  while (index < length) {\n    if (string.charAt(index) === substring) {\n      count++;\n    }\n    index++;\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count non-overlapping cases.\n  >>> howmanytimes('', 'a')\n  0\n  >>> howmanytimes('aaa', 'a')\n  3\n  >>> howmanytimes('aaaa', 'aa')\n  3\n  */\nconst howmanytimes_ = (string, substring) => {\n  let count = 0;\n  let index = 0;\n  let length = string.length;\n  while (index < length) {\n    if (string.charAt(index) === substring) {\n      count++;\n    }\n    index++;\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count non-overlapping cases.\n  >>> howmanytimes('', 'a')\n  0\n  >>> howmanytimes('aaa', 'a')\n  3\n  >>> howmanytimes('aaaa', 'aa')\n  3\n  */\nconst howmanytimes_ = (string, substring) => {\n  let count = 0;\n  let index = 0;\n  let length = string.length;\n  while (index < length) {\n    if (string.charAt(index) === substring) {\n      count++;\n    }\n    index++;\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count non-overlapping cases.\n  >>> howmanytimes('', 'a')\n  0\n  >>> howmanytimes('aaa', 'a')\n  3\n  >>> howmanytimes('aaaa', 'aa')\n  3\n  */\nconst howmanytimes_ = (string, substring) => {\n  let count = 0;\n  let index = 0;\n  let length = string.length;\n  while (index < length) {\n    if (string.charAt(index) === substring) {\n      count++;\n    }\n    index++;\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count non-overlapping cases.\n  >>> howmanytimes('', 'a')\n  0\n  >>> howmanytimes('aaa', 'a')\n  3\n  >>> howmanytimes('aaaa', 'aa')\n  3\n  */\nconst howmanytimes_ = (string, substring) => {\n  let count = 0;\n  let index = 0;\n  let length = string.length;\n  while (index < length) {\n    if (string.charAt(index) === substring) {\n      count++;\n    }\n    index++;\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count non-overlapping cases.\n  >>> howmanytimes('', 'a')\n  0\n  >>> howmanytimes('aaa', 'a')\n  3\n  >>> howmanytimes('aaaa', 'aa')\n  3\n  */\nconst howmanytimes_ = (string, substring) => {\n  let count = 0;\n  let index = 0;\n  let length = string.length;\n  while (index < length) {\n    if (string.charAt(index) === substring) {\n      count++;\n    }\n    index++;\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count non-overlapping cases.\n  >>> howmanytimes('', 'a')\n  0\n  >>> howmanytimes('aaa', 'a')\n  3\n  >>> howmanytimes('aaaa', 'aa')\n  3\n  */\nconst howmanytimes_ = (string, substring) => {\n  let count = 0;\n  let index = 0;\n  let length = string.length;\n  while (index < length) {\n    if (string.charAt(index) === substring) {\n      count++;\n    }\n    index++;\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count non-overlapping cases.\n  >>> howmanytimes('', 'a')\n  0\n  >>> howmanytimes('aaa', 'a')\n  3\n  >>> howmanytimes('aaaa', 'aa')\n  3\n  */\nconst howmanytimes_ = (string, substring) => {\n  let count = 0;\n  let index = 0;\n  let length = string.length;\n  while (index < length) {\n    if (string.charAt(index) === substring) {\n      count++;\n    }\n    index++;\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count non-overlapping cases.\n  >>> howmanytimes('', 'a')\n  0\n  >>> howmanytimes('aaa', 'a')\n  3\n  >>> howmanytimes('aaaa', 'aa')\n  3\n  */\nconst howmanytimes_ = (string, substring) => {\n  let count = 0;\n  let index = 0;\n  let length = string.length;\n  while (index < length) {\n    if (string.charAt(index) === substring) {\n      count++;\n    }\n    index++;\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count non-overlapping cases.\n  >>> howmanytimes('', 'a')\n  0\n  >>> howmanytimes('aaa', 'a')\n  3\n  >>> howmanytimes('aaaa', 'aa')\n  3\n  */\nconst howmanytimes_ = (string, substring) => {\n  let count = 0;\n  let index = 0;\n  let length = string.length;\n  while (index < length) {\n    if (string.charAt(index) === substring) {\n      count++;\n    }\n    index++;\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count non-overlapping cases.\n  >>> howmanytimes('', 'a')\n  0\n  >>> howmanytimes('aaa', 'a')\n  3\n  >>> howmanytimes('aaaa', 'aa')\n  3\n  */\nconst howmanytimes_ = (string, substring) => {\n  let count = 0;\n  let index = 0;\n  let length = string.length;\n  while (index < length) {\n    if (string.charAt(index) === substring) {\n      count++;\n    }\n    index++;\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count non-overlapping cases.\n  >>> howmanytimes('', 'a')\n  0\n  >>> howmanytimes('aaa', 'a')\n  3\n  >>> howmanytimes('aaaa', 'aa')\n  3\n  */\nconst howmanytimes_ = (string, substring) => {\n  let count = 0;\n  let index = 0;\n  let length = string.length;\n  while (index < length) {\n    if (string.charAt(index) === substring) {\n      count++;\n    }\n    index++;\n  }\n  return count;", "passed": 0}
{"task_id": "JavaScript/19", "prompt": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sorTNumBers('three one five')\n  'one three five'\n  */\nconst sorTNumBers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sorTNumBers", "gc": "<|endoftext|>/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sorTNumBers('three one five')\n  'one three five'\n  */\nconst sorTNumBers = (numbers) => {\n  let sortedNums = numbers.split(' ').sort((a, b) => a - b);\n  return sortedNums.join(' ');\n};\n\n/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from largest to smallest\n  >>> sorTNumGers('three one five')\n  'five three one'\n  */\nconst sorTNumGers = (numbers) => {\n  let sortedNums = numbers.split(' ').sort((a, b) => b - a);\n  return sortedNums.join(' ');\n};\n\n/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sorTNumGers('three one five')\n  'five three one'\n  */\nconst sorTNumGersReverse = (numbers) => {\n  let sortedNums = numbers.split(' ').sort((a, b) => b - a);\n  return sortedNums.join(' ');\n};\n\n/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from largest to smallest\n  >>> sorTNumGersReverse('three one five')\n  'five three one'\n  */\nconst sorTNumGersReverseReverse = (numbers) => {\n  let sortedNums = numbers.split(' ').sort((a, b) => b - a);\n  return sortedNums.join(' ');\n};\n\n/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sorTNumGersReverseReverse('three one five')\n  'five three one'\n  */\nconst sorTNumGersReverseReverseReverse = (numbers) => {\n  let sortedNums = numbers.split(' ').sort((a, b) => b - a);\n  return sortedNums.join(' ');\n};\n\n/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from largest to smallest\n  >>> sorTNumGersReverseReverseReverse('three one five')\n  'five three one'\n  */\nconst sorTNumGersReverseReverseReverseReverse = (numbers) => {\n  let sortedNums = numbers.split(' ').sort((a, b) => b - a);\n  return sortedNums.join(' ');\n};\n\n/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sorTNumGersReverseReverseReverseReverse('three one five')\n  'five three one'\n  */\nconst sorTNumGersReverseReverseReverseReverseReverse = (numbers) => {\n  let sortedNums = numbers.split(' ').sort((a, b) => b - a);\n  return sortedNums.join(' ');\n};\n\n/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from largest to smallest\n  >>> sorTNumGersReverseReverseReverseReverseReverse('three one five')\n  'five three one'\n  */\nconst sorTNumGersReverseReverseReverseReverseReverseReverse = (numbers) => {\n  let sortedNums = numbers.split(' ').sort((a, b) => b - a);\n  return sortedNums.join(' ');\n};\n\n/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sorTNumGersReverseReverseReverseReverseReverseReverseReverse('three one five')\n  'five three one'\n  */\nconst sorTNumGersReverseReverseReverseReverseReverseReverseReverse = (numbers) => {\n  let sortedNums = numbers.split(' ').sort((a, b) => b - a);\n  return sortedNums.join(' ');\n};\n\n/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from largest to smallest\n  >>> sorTNumGersReverseReverseReverseReverseReverseReverseReverseReverse('three one five')\n  'five three one'\n  */\nconst sorTNumGersReverseReverseReverseReverseReverseReverseReverseReverseReverse = (numbers) => {\n  let sortedNums = numbers.split(' ').sort((a, b) => b - a);\n  return sortedNums.join(' ');\n};\n\n/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sorTNumGersReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse", "passed": 0}
{"task_id": "JavaScript/2", "prompt": "/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truNcatENumbEr(3.5)\n  0.5\n  */\nconst truNcatENumbEr = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truNcatENumbEr", "gc": "<|endoftext|>/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truNcatENumbEr(3.5)\n  0.5\n  */\nconst truNcatENumbEr = (number) => {\n  const decimals = Math.floor(Math.log(number) / Math.LN10);\n  const decimal = number / Math.pow(10, decimals);\n  return decimal;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truNcatENumbEr(3.5)\n  3\n  */\nconst truNcatENumbIEr = (number) => {\n  const decimals = Math.floor(Math.log(number) / Math.LN10);\n  const decimal = number / Math.pow(10, decimals);\n  return decimal;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truNcatENumbIEr(3.5)\n  3\n  */\nconst truNcatENumbIErEr = (number) => {\n  const decimals = Math.floor(Math.log(number) / Math.LN10);\n  const decimal = number / Math.pow(10, decimals);\n  return decimal;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truNcatENumbIErEr(3.5)\n  3\n  */\nconst truNcatENumbIErErEr = (number) => {\n  const decimals = Math.floor(Math.log(number) / Math.LN10);\n  const decimal = number / Math.pow(10, decimals);\n  return decimal;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truNcatENumbIErErEr(3.5)\n  3\n  */\nconst truNcatENumbIErErErEr = (number) => {\n  const decimals = Math.floor(Math.log(number) / Math.LN10);\n  const decimal = number / Math.pow(10, decimals);\n  return decimal;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truNcatENumbIErErErEr(3.5)\n  3\n  */\nconst truNcatENumbIErErErErEr = (number) => {\n  const decimals = Math.floor(Math.log(number) / Math.LN10);\n  const decimal = number / Math.pow(10, decimals);\n  return decimal;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truNcatENumbIErErErErEr(3.5)\n  3\n  */\nconst truNcatENumbIErErErErEr = (number) => {\n  const decimals = Math.floor(Math.log(number) / Math.LN10);\n  const decimal = number / Math.pow(10, decimals);\n  return decimal;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truNcatENumbIErErErErEr(3.5)\n  3\n  */\nconst truNcatENumbIErErErErErEr = (number) => {\n  const decimals = Math.floor(Math.log(number) / Math.LN10);\n  const decimal = number / Math.pow(10, decimals);\n  return decimal;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truNcatENumbIErErErErErEr(3.5)\n  3\n  */\nconst truNcatENumbIErErErErErEr = (number) => {\n  const decimals = Math.floor(Math.log(number) / Math.LN10);\n  const decimal = number / Math.pow(10, decimals);\n  return decimal;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truNcatENumbIErErErErErEr(3.5)\n  3\n  */\nconst truNcatENumbIErErErErErEr = (number) => {\n  const decimals = Math.floor(Math.log(number) / Math.LN10);\n  const decimal = number / Math.pow(10, decimals);\n  return decimal;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truNcatENumbIErErErErErEr(3.5)\n  3\n  */\nconst truNcatENumbIErErErErErErEr = (number) => {\n  const decimals = Math.floor(Math.log(number) / Math.LN10);\n  const decimal = number / Math.pow(10, decimals);\n  return decimal;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truNcatENumbIErErErErErErEr(3.5)\n  3\n  */\nconst truNcatENumbIErErErErErErErEr = (number) => {\n  const decimals = Math.floor(Math.log(number) / Math.LN10);\n  const decimal = number / Math.pow(10, decimals);\n  return decimal;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truNcatENumbIErErErErErErErErEr(3.5)\n  3\n  */\nconst truNcatENumbIErErErErErErErEr = (number) => {\n  const decimals = Math.floor(Math.log(number) / Math.LN10);\n  const decimal = number / Math.pow(10, decimals);\n  return decimal;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truNcatENumbIErErErErErErErErErEr(3.5)\n  3\n  */\nconst truNcatENumbIErErErErErErErErErErErErErErErErErErErErErErErErErErErErErErErErErErErErErErErErErErErErErErErErErErErErErErErErErErErErErErErErErErErErErErEr", "passed": 0}
{"task_id": "JavaScript/20", "prompt": "/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> finDCloSestELemEnts([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> finDCloSestELemEnts([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst finDCloSestELemEnts = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "finDCloSestELemEnts", "gc": "<|endoftext|>/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> finDCloSestELemEnts([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> finDCloSestELemEnts([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst finDCloSestELemEnts = (numbers) => {\n  const minDistance = Number.MAX_VALUE;\n  const minDistanceIndex = -1;\n  const minDistanceNumbers = [];\n  const minDistanceNumbersIndex = [];\n  const minDistanceNumbersValues = [];\n  const minDistanceNumbersValuesIndex = [];\n  const minDistanceNumbersValuesValues = [];\n  const minDistanceNumbersValuesValuesIndex = [];\n  const minDistanceNumbersValuesValuesValues = [];\n  const minDistanceNumbersValuesValuesIndex = [];\n  const minDistanceNumbersValuesValuesValues = [];\n  const minDistanceNumbersValuesValuesIndex = [];\n  const minDistanceNumbersValuesValuesValues = [];\n  const minDistanceNumbersValuesValuesIndex = [];\n  const minDistanceNumbersValuesValuesValues = [];\n  const minDistanceNumbersValuesValuesIndex = [];\n  const minDistanceNumbersValuesValuesValues = [];\n  const minDistanceNumbersValuesValuesIndex = [];\n  const minDistanceNumbersValuesValuesValues = [];\n  const minDistanceNumbersValuesValuesIndex = [];\n  const minDistanceNumbersValuesValuesValues = [];\n  const minDistanceNumbersValuesValuesIndex = [];\n  const minDistanceNumbersValuesValuesValues = [];\n  const minDistanceNumbersValuesValuesIndex = [];\n  const minDistanceNumbersValuesValuesValues = [];\n  const minDistanceNumbersValuesValuesIndex = [];\n  const minDistanceNumbersValuesValuesValues = [];\n  const minDistanceNumbersValuesValuesIndex = [];\n  const minDistanceNumbersValuesValuesValues = [];\n  const minDistanceNumbersValuesValuesIndex = [];\n  const minDistanceNumbersValuesValuesValues = [];\n  const minDistanceNumbersValuesValuesIndex = [];\n  const minDistanceNumbersValuesValuesValues = [];\n  const minDistanceNumbersValuesValuesIndex = [];\n  const minDistanceNumbersValuesValuesValues = [];\n  const minDistanceNumbersValuesValuesIndex = [];\n  const minDistanceNumbersValuesValuesValues = [];\n  const minDistanceNumbersValuesValuesIndex = [];\n  const minDistanceNumbersValuesValuesValues = [];\n  const minDistanceNumbersValuesValuesIndex = [];\n  const minDistanceNumbersValuesValuesValues = [];\n  const minDistanceNumbersValuesValuesIndex = [];\n  const minDistanceNumbersValuesValuesValues = [];\n  const minDistanceNumbersValuesValuesIndex = [];\n  const minDistanceNumbersValuesValuesValues = [];\n  const minDistanceNumbersValuesValuesIndex = [];\n  const minDistanceNumbersValuesValuesValues = [];\n  const minDistanceNumbersValuesValuesIndex = [];\n  const minDistanceNumbersValuesValuesValues = [];\n  const minDistanceNumbersValuesValuesIndex = [];\n  const minDistanceNumbersValuesValuesValues = [];\n  const minDistanceNumbersValuesValuesIndex = [];\n  const minDistanceNumbersValuesValuesValues = [];\n  const minDistanceNumbersValuesValuesIndex = [];\n  const minDistanceNumbersValuesValuesValues = [];\n  const minDistanceNumbersValuesValuesIndex = [];\n  const minDistanceNumbersValuesValuesValues = [];\n  const minDistanceNumbersValuesValuesIndex = [];\n  const minDistanceNumbersValuesValuesValues = [];\n  const minDistanceNumbersValuesValuesIndex = [];\n  const minDistanceNumbersValuesValuesValues = [];\n  const minDistanceNumbersValuesValuesIndex = [];\n  const minDistanceNumbersValuesValuesValues = [];\n  const minDistanceNumbersValuesValuesIndex = [];\n  const minDistanceNumbersValuesValuesValues = [];\n  const minDistanceNumbersValuesValuesIndex = [];\n  const minDistanceNumbersValuesValuesValues = [];\n  const minDistanceNumbersValuesValuesIndex = [];\n  const minDistanceNumbersValuesValuesValues = [];\n  const minDistanceNumbersValuesValuesIndex = [];\n  const minDistanceNumbersValuesValuesValues = [];\n  const minDistanceNumbersValuesValuesIndex = [];\n  const minDistanceNumbersValuesValuesValues = [];\n  const minDistanceNumbersValuesValuesIndex = [];\n  const minDistanceNumbersValuesValuesValues = [];\n  const minDistanceNumbersValuesValuesIndex = [];\n  const minDistanceNumbersValuesValuesValues = [];\n  const minDistanceNumbersValuesValuesIndex = [];\n  const minDistanceNumbersValuesValuesValues = [];\n  const minDistanceNumbersValuesValuesIndex = [];\n  const minDistanceNumbersValuesValuesValues = [];\n  const minDistanceNumbersValuesValuesIndex = [];\n  const minDistanceNumbersValuesValuesValues = [];\n  const minDistanceNumbersValuesValuesIndex = [];\n  const minDistanceNumbersValuesValuesValues = [];\n  const minDistanceNumbersValuesValuesIndex = [];\n  const minDistanceNumbersValuesValuesValues = [];\n  const minDistanceNumbersValuesValuesIndex = [];\n  const minDistanceNumbersValuesValuesValues = [];\n  const minDistanceNumbersValuesValuesIndex = [];\n  const minDistanceNumbersValuesValuesValues = [];\n  const minDistanceNumbersValuesValuesIndex = [];\n  const minDistanceNumbersValuesValuesValues = [];\n  const minDistanceNumbersValuesValuesIndex = [];\n  const minDistanceNumbersValuesValuesValues = [];\n  const minDistanceNumbersValuesValuesIndex = [];\n  const minDistanceNumbersValuesValuesValues = [];\n  const minDistanceNumbersValuesValuesIndex = [];\n  const minDistanceNumbersValuesValuesValues = [];\n  const minDistanceNumbersValuesValuesIndex = [];\n  const minDistanceNumbersValuesValuesValues = [];\n  const minDistanceNumbersValuesValuesIndex = [];\n  const minDistanceNumbersValuesValuesValues = [];\n  const minDistanceNumbersValuesValuesIndex = [];\n  const minDistanceNumbersValuesValuesValues = [];\n  const minDistanceNumbersValuesValuesIndex = [];\n  const minDistanceNumbersValuesValuesValues = [];\n  const minDistanceNumbersValuesValuesIndex = [];\n  const minDistanceNumbersValuesValuesValues = [];\n  const minDistanceNumbersValuesValuesIndex = [];\n  const minDistanceNumbersValuesValuesValues = [];\n  const minDistanceNumbersValuesValuesIndex = [];\n  const minDistanceNumbersValuesValuesValues = [];\n  const minDistanceNumbersValuesValuesIndex = [];\n  const minDistanceNumbersValuesValuesValues = [];\n  const minDistanceNumbersValuesValuesIndex = [];\n  const minDistanceNumbersValuesValuesValues = [];\n  const minDistanceNumbersValuesValuesIndex = [];\n  const minDistanceNumbersValuesValuesValues = [];\n  const minDistanceNumbersValuesValuesIndex = [];\n  const minDistanceNumbersValuesValuesValues = [];\n  const minDistanceNumbersValuesValuesIndex = [];\n  const minDistanceNumbersValuesValuesValues = [];\n  const minDistanceNumbersValuesValuesIndex = [];\n  const minDistanceNumbersValuesValuesValues = [];\n  const minDistanceNumbersValuesValuesIndex = [];\n  const minDistanceNumbersValuesValuesValues = [];\n  const minDistanceNumbersValuesValuesIndex = [];\n  const minDistanceNumbersValuesValuesValues = [];\n  const minDistanceNumbersValuesValuesIndex = [];\n  const minDistanceNumbersValuesValuesValues = [];\n  const minDistanceNumbersValuesValuesIndex = [];\n  const minDistanceNumbersValuesValuesValues = [];\n  const minDistanceNumbersValuesValuesIndex = [];\n  const minDistanceNumbersValuesValuesValues = [];\n  const minDistanceNumbersValuesValuesIndex = [];\n  const minDistanceNumbersValuesValuesValues = [];\n  const minDistanceNumbersValuesValuesIndex = [];\n  const minDistanceNumbersValuesValuesValues = [];\n  const minDistanceNumbersValuesValuesIndex = [];\n  const minDistanceNumbersValuesValuesValues = [];\n  const minDistanceNumbersValuesValuesIndex = [];\n  const minDistanceNumbersValuesValuesValues = [];\n  const minDistanceNumbersValuesValuesIndex = [];\n  const minDistanceNumbersValuesValuesValues = [];\n  const ", "passed": 0}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> resCaletoUniT([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst resCaletoUniT = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "resCaletoUniT", "gc": "<|endoftext|>/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> resCaletoUniT([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst resCaletoUniT = (numbers) => {\n  const result = [];\n  let min = 0;\n  let max = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] < min) {\n      min = numbers[i];\n    }\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(numbers[i] * (max - min) + min);\n  }\n  return result;\n};\n\n/**\n * Given a list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> resCaletoUniT([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst resCaletoUniT2 = (numbers) => {\n  const result = [];\n  let min = 0;\n  let max = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] < min) {\n      min = numbers[i];\n    }\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(numbers[i] * (max - min) + min);\n  }\n  return result;\n};\n\n/**\n * Given a list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> resCaletoUniT([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst resCaletoUniT3 = (numbers) => {\n  const result = [];\n  let min = 0;\n  let max = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] < min) {\n      min = numbers[i];\n    }\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(numbers[i] * (max - min) + min);\n  }\n  return result;\n};\n\n/**\n * Given a list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> resCaletoUniT([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst resCaletoUniT4 = (numbers) => {\n  const result = [];\n  let min = 0;\n  let max = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] < min) {\n      min = numbers[i];\n    }\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(numbers[i] * (max - min) + min);\n  }\n  return result;\n};\n\n/**\n * Given a list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> resCaletoUniT([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst resCaletoUniT5 = (numbers) => {\n  const result = [];\n  let min = 0;\n  let max = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] < min) {\n      min = numbers[i];\n    }\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(numbers[i] * (max - min) + min);\n  }\n  return result;\n};\n\n/**\n * Given a list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> resCaletoUniT([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst resCaletoUniT6 = (numbers) => {\n  const result = [];\n  let min = 0;\n  let max = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] < min) {\n      min = numbers[i];\n    }\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(numbers[i] * (max - min) + min);\n  }\n  return result;\n};\n\n/**\n * Given a list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> resCaletoUniT([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst resCaletoUniT7 = (numbers) => {\n  const result = [];\n  let min = 0;\n  let max = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] < min) {\n      min = numbers[i];\n    }\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(numbers[i] * (max - min) + min);\n  }\n  return result;\n};\n\n/**\n * Given a list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> resCaletoUniT([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst resCaletoUniT8 = (numbers) => {\n  const result = [];\n  let min = 0;\n  let max = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] < min) {\n      min = numbers[i];\n    }\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(numbers[i] * (max - min) + min);\n  }\n  return result;\n};\n\n/**\n * Given a list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> resCaletoUniT([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst resCaletoUniT9 = (numbers) => {\n  const result = [];\n  let min = 0;\n  let max = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] < min) {\n      min = numbers[i];\n    }\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(numbers[i] * (max - min) + min);\n  }\n  return result;\n};\n\n/**\n * Given a list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> resCaletoUniT([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst resCaletoUniT10 = (numbers) => {\n  const result = [];\n  let min = 0;\n  let max = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] < min) {\n      min = numbers[i];\n    }\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(numbers[i] * (max - min) + min);\n  }\n  return result;\n};\n\n/**\n * Given a list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> resCaleto", "passed": 0}
{"task_id": "JavaScript/22", "prompt": "/* Filter given list of any python values only for integers\n  >>> filTerINtegeRs(['a', 3.14, 5])\n  [5]\n  >>> filTerINtegeRs([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filTerINtegeRs = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filTerINtegeRs", "gc": "<|endoftext|>/* Filter given list of any python values only for integers\n  >>> filTerINtegeRs(['a', 3.14, 5])\n  [5]\n  >>> filTerINtegeRs([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filTerINtegeRs = (values) => {\n  const isInt = value => typeof value === 'number' && isFinite(value)\n  return values.filter(isInt)\n}\n\n// Filter given list of any python values only for floats\nconst filTerINtegeRsFloat = (values) => {\n  const isFloat = value => typeof value === 'number' && isFinite(value)\n  return values.filter(isFloat)\n}\n\n// Filter given list of any python values only for strings\nconst filTerINtegeRsString = (values) => {\n  const isString = value => typeof value ==='string'\n  return values.filter(isString)\n}\n\n// Filter given list of any python values only for booleans\nconst filTerINtegeRsBool = (values) => {\n  const isBool = value => typeof value === 'boolean'\n  return values.filter(isBool)\n}\n\n// Filter given list of any python values only for None\nconst filTerINtegeRsNone = (values) => {\n  const isNone = value => value === undefined || value === null\n  return values.filter(isNone)\n}\n\n// Filter given list of any python values only for empty lists\nconst filTerINtegeRsEmptyList = (values) => {\n  const isEmptyList = value => Array.isArray(value) && value.length === 0\n  return values.filter(isEmptyList)\n}\n\n// Filter given list of any python values only for empty dictionaries\nconst filTerINtegeRsEmptyDict = (values) => {\n  const isEmptyDict = value => typeof value === 'object' &&!Object.keys(value).length\n  return values.filter(isEmptyDict)\n}\n\n// Filter given list of any python values only for empty strings\nconst filTerINtegeRsEmptyString = (values) => {\n  const isEmptyString = value => typeof value ==='string' && value.length === 0\n  return values.filter(isEmptyString)\n}\n\n// Filter given list of any python values only for empty numbers\nconst filTerINtegeRsEmptyNumber = (values) => {\n  const isEmptyNumber = value => typeof value === 'number' && isNaN(value)\n  return values.filter(isEmptyNumber)\n}\n\n// Filter given list of any python values only for empty booleans\nconst filTerINtegeRsEmptyBool = (values) => {\n  const isEmptyBool = value => typeof value === 'boolean' && value === false\n  return values.filter(isEmptyBool)\n}\n\n// Filter given list of any python values only for empty None\nconst filTerINtegeRsEmptyNone = (values) => {\n  const isEmptyNone = value => value === undefined || value === null\n  return values.filter(isEmptyNone)\n}\n\n// Filter given list of any python values only for empty lists\nconst filTerINtegeRsEmptyListEmpty = (values) => {\n  const isEmptyListEmpty = value => Array.isArray(value) && value.length === 0\n  return values.filter(isEmptyListEmpty)\n}\n\n// Filter given list of any python values only for empty dictionaries\nconst filTerINtegeRsEmptyDictEmpty = (values) => {\n  const isEmptyDictEmpty = value => typeof value === 'object' &&!Object.keys(value).length\n  return values.filter(isEmptyDictEmpty)\n}\n\n// Filter given list of any python values only for empty strings\nconst filTerINtegeRsEmptyStringEmpty = (values) => {\n  const isEmptyStringEmpty = value => typeof value ==='string' && value.length === 0\n  return values.filter(isEmptyStringEmpty)\n}\n\n// Filter given list of any python values only for empty numbers\nconst filTerINtegeRsEmptyNumberEmpty = (values) => {\n  const isEmptyNumberEmpty = value => typeof value === 'number' && isNaN(value)\n  return values.filter(isEmptyNumberEmpty)\n}\n\n// Filter given list of any python values only for empty booleans\nconst filTerINtegeRsEmptyBoolEmpty = (values) => {\n  const isEmptyBoolEmpty = value => typeof value === 'boolean' && value === false\n  return values.filter(isEmptyBoolEmpty)\n}\n\n// Filter given list of any python values only for empty None\nconst filTerINtegeRsEmptyNoneEmpty = (values) => {\n  const isEmptyNoneEmpty = value => value === undefined || value === null\n  return values.filter(isEmptyNoneEmpty)\n}\n\n// Filter given list of any python values only for empty lists\nconst filTerINtegeRsEmptyListEmptyEmpty = (values) => {\n  const isEmptyListEmptyEmpty = value => Array.isArray(value) && value.length === 0\n  return values.filter(isEmptyListEmptyEmpty)\n}\n\n// Filter given list of any python values only for empty dictionaries\nconst filTerINtegeRsEmptyDictEmptyEmpty = (values) => {\n  const isEmptyDictEmptyEmpty = value => typeof value === 'object' &&!Object.keys(value).length\n  return values.filter(isEmptyDictEmptyEmpty)\n}\n\n// Filter given list of any python values only for empty strings\nconst filTerINtegeRsEmptyStringEmptyEmpty = (values) => {\n  const isEmptyStringEmptyEmpty = value => typeof value ==='string' && value.length === 0\n  return values.filter(isEmptyStringEmptyEmpty)\n}\n\n// Filter given list of any python values only for empty numbers\nconst filTerINtegeRsEmptyNumberEmptyEmpty = (values) => {\n  const isEmptyNumberEmptyEmpty = value => typeof value === 'number' && isNaN(value)\n  return values.filter(isEmptyNumberEmptyEmpty)\n}\n\n// Filter given list of any python values only for empty booleans\nconst filTerINtegeRsEmptyBoolEmpty = (values) => {\n  const isEmptyBoolEmpty = value => typeof value === 'boolean' && value === false\n  return values.filter(isEmptyBoolEmpty)\n}\n\n// Filter given list of any python values only for empty None\nconst filTerINtegeRsEmptyNoneEmpty = (values) => {\n  const isEmptyNoneEmpty = value => value === undefined || value === null\n  return values.filter(isEmptyNoneEmpty)\n}\n\n// Filter given list of any python values only for empty lists\nconst filTerINtegeRsEmptyListEmptyEmpty = (values) => {\n  const isEmptyListEmptyEmpty = value => Array.isArray(value) && value.length === 0\n  return values.filter(isEmptyListEmptyEmpty)\n}\n\n// Filter given list of any python values only for empty dictionaries\nconst filTerINtegeRsEmptyDictEmptyEmpty = (values) => {\n  const isEmptyDictEmptyEmpty = value => typeof value === 'object' &&!Object.keys(value).length\n  return values.filter(isEmptyDictEmptyEmpty)\n}\n\n// Filter given list of any python values only for empty strings\nconst filTerINtegeRsEmptyStringEmptyEmpty = (values) => {\n  const isEmptyStringEmptyEmpty = value => typeof value ==='string' && value.length === 0\n  return values.filter(isEmptyStringEmptyEmpty)\n}\n\n// Filter given list of any python values only for empty numbers\nconst filTerINtegeRsEmptyNumberEmptyEmpty = (values) => {\n  const isEmptyNumberEmptyEmpty = value => typeof value === 'number' && isNaN(value)\n  return values.filter(isEmptyNumberEmptyEmpty)\n}\n\n// Filter given list of any python values only for empty booleans\nconst filTerINtegeRsEmptyBoolEmpty = (values) => {\n  const isEmptyBoolEmpty = value => typeof value === 'boolean' && value === false\n  return values.filter(isEmptyBoolEmpty)\n}\n\n// Filter given list of any python values only for empty None\nconst filTerINtegeRsEmptyNoneEmpty = (values) => {\n  const isEmptyNoneEmpty = value => value === undefined || value === null\n  return values.filter(isEmptyNoneEmpty)\n}\n\n// Filter given list of any python values only for empty lists", "passed": 0}
{"task_id": "JavaScript/23", "prompt": "/* Return length of given string\n  >>> strLen('')\n  0\n  >>> strLen('abc')\n  3\n  */\nconst strLen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strLen", "gc": "<|endoftext|>/* Return length of given string\n  >>> strLen('')\n  0\n  >>> strLen('abc')\n  3\n  */\nconst strLen = (string) => {\n  if (string === null || string === undefined) {\n    return 0;\n  }\n  return string.length;\n};\n\n/**\n * Return true if given string starts with given prefix\n * >>> startsWith('abc', 'ab')\n  true\n  >>> startsWith('abc', 'abc')\n  false\n  */\nconst startsWith = (string, prefix) => {\n  if (string === null || string === undefined) {\n    return false;\n  }\n  return string.startsWith(prefix);\n};\n\n/**\n * Return true if given string ends with given suffix\n * >>> endsWith('abc', 'ab')\n  true\n  >>> endsWith('abc', 'abc')\n  false\n  */\nconst endsWith = (string, suffix) => {\n  if (string === null || string === undefined) {\n    return false;\n  }\n  return string.endsWith(suffix);\n};\n\n/**\n * Return true if given string contains given substring\n * >>> contains('abc', 'ab')\n  true\n  >>> contains('abc', 'abc')\n  false\n  */\nconst contains = (string, substring) => {\n  if (string === null || string === undefined) {\n    return false;\n  }\n  return string.includes(substring);\n};\n\n/**\n * Return true if given string starts with given substring\n * >>> startsWith('abc', 'ab')\n  true\n  >>> startsWith('abc', 'abc')\n  false\n  */\nconst startsWith = (string, substring) => {\n  if (string === null || string === undefined) {\n    return false;\n  }\n  return string.startsWith(substring);\n};\n\n/**\n * Return true if given string ends with given substring\n * >>> endsWith('abc', 'ab')\n  true\n  >>> endsWith('abc', 'abc')\n  false\n  */\nconst endsWith = (string, substring) => {\n  if (string === null || string === undefined) {\n    return false;\n  }\n  return string.endsWith(substring);\n};\n\n/**\n * Return true if given string contains given substring\n * >>> contains('abc', 'ab')\n  true\n  >>> contains('abc', 'abc')\n  false\n  */\nconst contains = (string, substring) => {\n  if (string === null || string === undefined) {\n    return false;\n  }\n  return string.includes(substring);\n};\n\n/**\n * Return true if given string starts with given substring\n * >>> startsWith('abc', 'ab')\n  true\n  >>> startsWith('abc', 'abc')\n  false\n  */\nconst startsWith = (string, substring) => {\n  if (string === null || string === undefined) {\n    return false;\n  }\n  return string.startsWith(substring);\n};\n\n/**\n * Return true if given string ends with given substring\n * >>> endsWith('abc', 'ab')\n  true\n  >>> endsWith('abc', 'abc')\n  false\n  */\nconst endsWith = (string, substring) => {\n  if (string === null || string === undefined) {\n    return false;\n  }\n  return string.endsWith(substring);\n};\n\n/**\n * Return true if given string contains given substring\n * >>> contains('abc', 'ab')\n  true\n  >>> contains('abc', 'abc')\n  false\n  */\nconst contains = (string, substring) => {\n  if (string === null || string === undefined) {\n    return false;\n  }\n  return string.includes(substring);\n};\n\n/**\n * Return true if given string starts with given substring\n * >>> startsWith('abc', 'ab')\n  true\n  >>> startsWith('abc', 'abc')\n  false\n  */\nconst startsWith = (string, substring) => {\n  if (string === null || string === undefined) {\n    return false;\n  }\n  return string.startsWith(substring);\n};\n\n/**\n * Return true if given string ends with given substring\n * >>> endsWith('abc', 'ab')\n  true\n  >>> endsWith('abc', 'abc')\n  false\n  */\nconst endsWith = (string, substring) => {\n  if (string === null || string === undefined) {\n    return false;\n  }\n  return string.endsWith(substring);\n};\n\n/**\n * Return true if given string contains given substring\n * >>> contains('abc', 'ab')\n  true\n  >>> contains('abc', 'abc')\n  false\n  */\nconst contains = (string, substring) => {\n  if (string === null || string === undefined) {\n    return false;\n  }\n  return string.includes(substring);\n};\n\n/**\n * Return true if given string starts with given substring\n * >>> startsWith('abc', 'ab')\n  true\n  >>> startsWith('abc', 'abc')\n  false\n  */\nconst startsWith = (string, substring) => {\n  if (string === null || string === undefined) {\n    return false;\n  }\n  return string.startsWith(substring);\n};\n\n/**\n * Return true if given string ends with given substring\n * >>> endsWith('abc', 'ab')\n  true\n  >>> endsWith('abc', 'abc')\n  false\n  */\nconst endsWith = (string, substring) => {\n  if (string === null || string === undefined) {\n    return false;\n  }\n  return string.endsWith(substring);\n};\n\n/**\n * Return true if given string contains given substring\n * >>> contains('abc', 'ab')\n  true\n  >>> contains('abc', 'abc')\n  false\n  */\nconst contains = (string, substring) => {\n  if (string === null || string === undefined) {\n    return false;\n  }\n  return string.includes(substring);\n};\n\n/**\n * Return true if given string starts with given substring\n * >>> startsWith('abc', 'ab')\n  true\n  >>> startsWith('abc', 'abc')\n  false\n  */\nconst startsWith = (string, substring) => {\n  if (string === null || string === undefined) {\n    return false;\n  }\n  return string.startsWith(substring);\n};\n\n/**\n * Return true if given string ends with given substring\n * >>> endsWith('abc', 'ab')\n  true\n  >>> endsWith('abc', 'abc')\n  false\n  */\nconst endsWith = (string, substring) => {\n  if (string === null || string === undefined) {\n    return false;\n  }\n  return string.endsWith(substring);\n};\n\n/**\n * Return true if given string contains given substring\n * >>> contains('abc', 'ab')\n  true\n  >>> contains('abc', 'abc')\n  false\n  */\nconst contains = (string, substring) => {\n  if (string === null || string === undefined) {\n    return false;\n  }\n  return string.includes(substring);\n};\n\n/**\n * Return true if given string starts with given substring\n * >>> startsWith('abc', 'ab')\n  true\n  >>> startsWith('abc', 'abc')\n  false\n  */\nconst startsWith = (string, substring) => {\n  if (string === null || string === undefined) {\n    return false;\n  }\n  return string.startsWith(substring);\n};\n\n/**\n * Return true if given string ends with given substring\n * >>> endsWith('abc', 'ab')\n  true\n  >>> endsWith('abc', 'abc')\n  false\n  */\nconst endsWith = (string, substring) => {\n  if (string === null || string === undefined) {\n    return false;\n  }\n  return string.endsWith(substring);\n};\n\n/**\n * Return true if given string contains given substring\n * >>> contains('abc', 'ab')\n  true\n  >>> contains('abc', 'abc')\n  false\n  */\nconst contains = (string, substring) => {\n  if (string === null || string === undefined) {\n    return false;\n  }\n  return string.includes(substring);\n};\n\n/**\n * Return true if given string starts with given substring\n * >>> startsWith('abc', 'ab')\n  true\n  >>> startsWith('abc', 'abc')\n  false\n  */\nconst startsWith = (string, substring) => {", "passed": 0}
{"task_id": "JavaScript/24", "prompt": "/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> larGestdivisOr(15)\n  5\n  */\nconst larGestdivisOr = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "larGestdivisOr", "gc": "<|endoftext|>/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> larGestdivisOr(15)\n  5\n  */\nconst larGestdivisOr = (n) => {\n  let largest = n;\n  let largestDividedByTen = 0;\n  let largestDividedByTenDividedByTen = 0;\n  let largestDividedByTenDividedByTenDividedByTen = 0;\n  let largestDividedByTenDividedByTenDividedByTenDividedByTen = 0;\n  let largestDividedByTenDividedByTenDividedByTenDividedByTenDividedByTen = 0;\n  let largestDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTen = 0;\n  let largestDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedBy", "passed": 0}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> facToriZe(8)\n  [2, 2, 2]\n  >>> facToriZe(25)\n  [5, 5]\n  >>> facToriZe(70)\n  [2, 5, 7]\n  */\nconst facToriZe = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "facToriZe", "gc": "<|endoftext|>/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> facToriZe(8)\n  [2, 2, 2]\n  >>> facToriZe(25)\n  [5, 5]\n  >>> facToriZe(70)\n  [2, 5, 7]\n  */\nconst facToriZe = (n) => {\n  let factors = [];\n  let factor = 0;\n  let factors = [];\n  let factor = 0;\n  let factors = [];\n  let factor = 0;\n  let factors = [];\n  let factor = 0;\n  let factors = [];\n  let factor = 0;\n  let factors = [];\n  let factor = 0;\n  let factors = [];\n  let factor = 0;\n  let factors = [];\n  let factor = 0;\n  let factors = [];\n  let factor = 0;\n  let factors = [];\n  let factor = 0;\n  let factors = [];\n  let factor = 0;\n  let factors = [];\n  let factor = 0;\n  let factors = [];\n  let factor = 0;\n  let factors = [];\n  let factor = 0;\n  let factors = [];\n  let factor = 0;\n  let factors = [];\n  let factor = 0;\n  let factors = [];\n  let factor = 0;\n  let factors = [];\n  let factor = 0;\n  let factors = [];\n  let factor = 0;\n  let factors = [];\n  let factor = 0;\n  let factors = [];\n  let factor = 0;\n  let factors = [];\n  let factor = 0;\n  let factors = [];\n  let factor = 0;\n  let factors = [];\n  let factor = 0;\n  let factors = [];\n  let factor = 0;\n  let factors = [];\n  let factor = 0;\n  let factors = [];\n  let factor = 0;\n  let factors = [];\n  let factor = 0;\n  let factors = [];\n  let factor = 0;\n  let factors = [];\n  let factor = 0;\n  let factors = [];\n  let factor = 0;\n  let factors = [];\n  let factor = 0;\n  let factors = [];\n  let factor = 0;\n  let factors = [];\n  let factor = 0;\n  let factors = [];\n  let factor = 0;\n  let factors = [];\n  let factor = 0;\n  let factors = [];\n  let factor = 0;\n  let factors = [];\n  let factor = 0;\n  let factors = [];\n  let factor = 0;\n  let factors = [];\n  let factor = 0;\n  let factors = [];\n  let factor = 0;\n  let factors = [];\n  let factor = 0;\n  let factors = [];\n  let factor = 0;\n  let factors = [];\n  let factor = 0;\n  let factors = [];\n  let factor = 0;\n  let factors = [];\n  let factor = 0;\n  let factors = [];\n  let factor = 0;\n  let factors = [];\n  let factor = 0;\n  let factors = [];\n  let factor = 0;\n  let factors = [];\n  let factor = 0;\n  let factors = [];\n  let factor = 0;\n  let factors = [];\n  let factor = 0;\n  let factors = [];\n  let factor = 0;\n  let factors = [];\n  let factor = 0;\n  let factors = [];\n  let factor = 0;\n  let factors = [];\n  let factor = 0;\n  let factors = [];\n  let factor = 0;\n  let factors = [];\n  let factor = 0;\n  let factors = [];\n  let factor = 0;\n  let factors = [];\n  let factor = 0;\n  let factors = [];\n  let factor = 0;\n  let factors = [];\n  let factor = 0;\n  let factors = [];\n  let factor = 0;\n  let factors = [];\n  let factor = 0;\n  let factors = [];\n  let factor = 0;\n  let factors = [];\n  let factor = 0;\n  let factors = [];\n  let factor = 0;\n  let factors = [];\n  let factor = 0;\n  let factors = [];\n  let factor = 0;\n  let factors = [];\n  let factor = 0;\n  let factors = [];\n  let factor = 0;\n  let factors = [];\n  let factor = 0;\n  let factors = [];\n  let factor = 0;\n  let factors = [];\n  let factor = 0;\n  let factors = [];\n  let factor = 0;\n  let factors = [];\n  let factor = 0;\n  let factors = [];\n  let factor = 0;\n  let factors = [];\n  let factor = 0;\n  let factors = [];\n  let factor = 0;\n  let factors = [];\n  let factor = 0;\n  let factors = [];\n  let factor = 0;\n  let factors = [];\n  let factor = 0;\n  let factors = [];\n  let factor = 0;\n  let factors = [];\n  let factor = 0;\n  let factors = [];\n  let factor = 0;\n  let factors = [];\n  let factor = 0;\n  let factors = [];\n  let factor = 0;\n  let factors = [];\n  let factor = 0;\n  let factors = [];\n  let factor = 0;\n  let factors = [];\n  let factor = 0;\n  let factors = [];\n  let factor = 0;\n  let factors = [];\n  let factor = 0;\n  let factors = [];\n  let factor = 0;\n  let factors = [];\n  let factor = 0;\n  let factors = [];\n  let factor = 0;\n  let factors = [];\n  let factor = 0;\n  let factors = [];\n  let factor = 0;\n  let factors = [];\n  let factor = 0;\n  let factors = [];\n  let factor = 0;\n  let factors = [];\n  let factor = 0;\n  let factors = [];\n  let factor = 0;\n  let factors = [];\n  let factor = 0;\n  let factors = [];\n  let factor = 0;\n  let factors = [];\n  let factor = 0;\n  let factors = [];\n  let factor = 0;\n  let factors = [];\n  let factor = 0;\n  let factors = [];\n  let factor = 0;\n  let factors = [];\n  let factor = 0;\n  let factors = [];\n  let factor = 0;\n  let factors = [];\n  let factor = 0;\n  let factors = [];\n  let factor = 0;\n  let factors = [];\n  let factor = 0;\n  let factors = [];\n  let factor = 0;\n  let factors = [];\n  let factor = 0;\n  let factors = [];\n  let factor = 0;\n  let factors = [];\n  let factor = 0;\n  let factors = [];\n  let factor = 0;\n  let factors = [];\n  let factor = 0;\n  let factors = [];\n  let factor = 0;\n  let factors = [];\n  let factor = 0;\n  let factors = [];\n  let factor = 0;\n  let factors = [];\n  let factor = 0;\n  let factors = [];\n  let factor = 0;\n  let factors = [];\n  let factor = 0;\n  let factors = [];\n  let factor = 0;\n  let factors = [];\n  let factor = 0;\n  let factors = [];\n  let factor = 0;\n  let factors = [];\n  let factor = 0;\n  let factors = [];\n  let factor = 0;\n  let factors = [];\n  let factor = 0;\n  let factors = [];\n  let factor = 0;\n  let factors = [];\n  let factor = 0;\n  let factors = [];\n  let factor = 0;\n  let factors = [];\n  let factor = 0;\n  let factors = [];\n  let factor = 0;\n  let factors = [];\n  let factor = 0;\n  let factors = [];\n  let factor = 0;\n  let factors = [];\n  let factor = 0;\n  let factors = [];\n  let factor = 0;\n  let factors = [];\n  let factor = 0;\n  let factors = [];\n  let factor = 0;\n  let factors = [];\n  let factor = 0;\n  let factors = [];\n  let factor = 0;\n  let factors = [];\n  let factor = 0;\n  let factors = [];\n  let factor = 0;\n  let factors = [];\n  let factor = 0;\n  let factors = [];\n  let factor = 0;\n  let factors = [];\n  let factor = 0;\n  let factors = [];\n  let factor = 0;\n  let factors = [];\n  let factor = 0;\n  let factors = [];\n  let factor = 0;\n  let factors = [];\n  let factor = 0;\n  let factors = [];\n  let factor = 0;\n  let factors = [];\n  let factor = 0;\n  let factors = [];\n  let factor = 0;\n  let factors = [];\n  let factor = 0;\n  let factors = [];\n  let factor = 0;\n  let factors = [];\n  let factor = 0;\n  let factors = [];\n  let factor = 0;\n  let factors = [];\n  let factor = 0;\n  let factors = [];\n  let factor = 0;\n  let factors = [];\n  let factor = 0;\n  let factors = [];\n  let factor = 0;\n  let factors = [];\n  let factor = 0;\n  let factors = [];\n  let factor = 0;\n  let factors = [];\n  let factor = 0;\n  let factors = [];\n  let factor = 0;\n  let factors = [];\n  let factor = 0;\n  let factors = [];\n  let factor = 0;\n  let factors = [];\n  let factor = 0;\n  let factors = [];\n  let factor = 0;\n  let factors = [];\n  let factor = 0;\n  let factors = [];\n  let factor = 0;\n  let factors = [];\n  let factor = 0;\n  let factors = [];\n  let factor = 0;\n  let factors = [];\n  let factor = 0;\n  let factors = [];\n  let factor = 0;\n  let factors = [];\n  let factor = 0;\n  let factors = [];\n  let factor = 0;\n  let factors = [];\n  let factor", "passed": 0}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> remOveDUplicAteS([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst remOveDUplicAteS = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "remOveDUplicAteS", "gc": "<|endoftext|>/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> remOveDUplicAteS([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst remOveDUplicAteS = (numbers) => {\n  let seen = {};\n  let result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    let number = numbers[i];\n    if (seen[number]) {\n      continue;\n    }\n    seen[number] = true;\n    result.push(number);\n  }\n  return result;\n};\n\n/**\n * Given a string, remove all characters that occur more than once.\n * Keep order of characters left the same as in the input.\n * >>> removeOveDUplicAteS('abcabc')\n * 'abc'\n */\nconst removeOveDUplicAteS = (str) => {\n  let result = '';\n  for (let i = 0; i < str.length; i++) {\n    let char = str[i];\n    if (result.length === 0) {\n      result += char;\n    } else {\n      if (result.length > 1 && result.charAt(result.length - 1) === char) {\n        result += char;\n      } else {\n        result += char;\n      }\n    }\n  }\n  return result;\n};\n\n/**\n * Given a string, remove all characters that occur more than once.\n * Keep order of characters left the same as in the input.\n * >>> removeOveDUplicAteS('abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcab", "passed": 0}
{"task_id": "JavaScript/27", "prompt": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> fliPCasE('Hello')\n  'hELLO'\n  */\nconst fliPCasE = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "fliPCasE", "gc": "<|endoftext|>/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> fliPCasE('Hello')\n  'hELLO'\n  */\nconst fliPCasE = (string) => {\n  return string.toLowerCase().split('')\n   .map((char) => char.toUpperCase())\n   .join('');\n};\n\n/* For a given string, flip uppercase characters to lowercase and lowercase to uppercase.\n  >>> fliPCasW('Hello')\n  'HELLO'\n  */\nconst fliPCasW = (string) => {\n  return string.toUpperCase().split('')\n   .map((char) => char.toLowerCase())\n   .join('');\n};\n\n/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> fliPCase('Hello')\n  'HELLO'\n  */\nconst fliPCase = (string) => {\n  return string.toLowerCase().split('')\n   .map((char) => char.toUpperCase())\n   .join('');\n};\n\n/* For a given string, flip uppercase characters to lowercase and lowercase to uppercase.\n  >>> fliPCaseW('Hello')\n  'HELLO'\n  */\nconst fliPCaseW = (string) => {\n  return string.toUpperCase().split('')\n   .map((char) => char.toLowerCase())\n   .join('');\n};\n\n/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> fliPCaseE('Hello')\n  'hELLO'\n  */\nconst fliPCaseE = (string) => {\n  return string.toLowerCase().split('')\n   .map((char) => char.toUpperCase())\n   .join('');\n};\n\n/* For a given string, flip uppercase characters to lowercase and lowercase to uppercase.\n  >>> fliPCaseW('Hello')\n  'HELLO'\n  */\nconst fliPCaseW = (string) => {\n  return string.toUpperCase().split('')\n   .map((char) => char.toLowerCase())\n   .join('');\n};\n\n/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> fliPCaseE('Hello')\n  'hELLO'\n  */\nconst fliPCaseE = (string) => {\n  return string.toLowerCase().split('')\n   .map((char) => char.toUpperCase())\n   .join('');\n};\n\n/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> fliPCaseW('Hello')\n  'HELLO'\n  */\nconst fliPCaseW = (string) => {\n  return string.toUpperCase().split('')\n   .map((char) => char.toLowerCase())\n   .join('');\n};\n\n/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> fliPCaseE('Hello')\n  'hELLO'\n  */\nconst fliPCaseE = (string) => {\n  return string.toLowerCase().split('')\n   .map((char) => char.toUpperCase())\n   .join('');\n};\n\n/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> fliPCaseW('Hello')\n  'HELLO'\n  */\nconst fliPCaseW = (string) => {\n  return string.toUpperCase().split('')\n   .map((char) => char.toLowerCase())\n   .join('');\n};\n\n/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> fliPCaseE('Hello')\n  'hELLO'\n  */\nconst fliPCaseE = (string) => {\n  return string.toLowerCase().split('')\n   .map((char) => char.toUpperCase())\n   .join('');\n};\n\n/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> fliPCaseW('Hello')\n  'HELLO'\n  */\nconst fliPCaseW = (string) => {\n  return string.toUpperCase().split('')\n   .map((char) => char.toLowerCase())\n   .join('');\n};\n\n/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> fliPCaseE('Hello')\n  'hELLO'\n  */\nconst fliPCaseE = (string) => {\n  return string.toLowerCase().split('')\n   .map((char) => char.toUpperCase())\n   .join('');\n};\n\n/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> fliPCaseW('Hello')\n  'HELLO'\n  */\nconst fliPCaseW = (string) => {\n  return string.toUpperCase().split('')\n   .map((char) => char.toLowerCase())\n   .join('');\n};\n\n/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> fliPCaseE('Hello')\n  'hELLO'\n  */\nconst fliPCaseE = (string) => {\n  return string.toLowerCase().split('')\n   .map((char) => char.toUpperCase())\n   .join('');\n};\n\n/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> fliPCaseW('Hello')\n  'HELLO'\n  */\nconst fliPCaseW = (string) => {\n  return string.toUpperCase().split('')\n   .map((char) => char.toLowerCase())\n   .join('');\n};\n\n/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> fliPCaseE('Hello')\n  'hELLO'\n  */\nconst fliPCaseE = (string) => {\n  return string.toLowerCase().split('')\n   .map((char) => char.toUpperCase())\n   .join('');\n};\n\n/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> fliPCaseW('Hello')\n  'HELLO'\n  */\nconst fliPCaseW = (string) => {\n  return string.toUpperCase().split('')\n   .map((char) => char.toLowerCase())\n   .join('');\n};\n\n/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> fliPCaseE('Hello')\n  'hELLO'\n  */\nconst fliPCaseE = (string) => {\n  return string.toLowerCase().split('')\n   .map((char) => char.toUpperCase())\n   .join('');\n};\n\n/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> fliPCaseW('Hello')\n  'HELLO'\n  */\nconst fliPCaseW = (string) => {\n  return string.toUpperCase().split('')\n   .map((char) => char.toLowerCase())\n   .join('');\n};\n\n/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> fliPCaseE('Hello')\n  'hELLO'\n  */\nconst fliPCaseE = (string) => {\n  return string.toLowerCase().split('')\n   .map((char) => char.toUpperCase())\n   .join('');\n};\n\n/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> fliPCaseW('Hello')\n  'HELLO'\n  */\nconst fliPCaseW = (string) => {\n  return string.toUpperCase().split('')\n   .map((char) => char.toLowerCase())\n   .join('');\n};\n\n/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> fliPCaseE('Hello')\n  'hELLO'\n  */\nconst fliPCaseE = (string) => {\n  return string.toLowerCase().split('')\n", "passed": 0}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single string\n  >>> conCateNate([])\n  ''\n  >>> conCateNate(['a', 'b', 'c'])\n  'abc'\n  */\nconst conCateNate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "conCateNate", "gc": "<|endoftext|>/* Concatenate list of strings into a single string\n  >>> conCateNate([])\n  ''\n  >>> conCateNate(['a', 'b', 'c'])\n  'abc'\n  */\nconst conCateNate = (strings) => {\n  return strings.reduce((acc, cur) => acc + cur, \"\");\n};\n\n/**\n * Convert string to number\n * >>> convertStrToNum('abc')\n  3\n  >>> convertStrToNum('123')\n  123\n  >>> convertStrToNum('123.45')\n  123.45\n  >>> convertStrToNum('123.4567')\n  123.4567\n  >>> convertStrToNum('123.4567.89')\n  123.4567.89\n  >>> convertStrToNum('123.4567.89.123')\n  123.4567.89.123\n  >>> convertStrToNum('123.4567.89.123.45')\n  123.4567.89.123.45\n  >>> convertStrToNum('123.4567.89.123.45.67')\n  123.4567.89.123.45.67\n  >>> convertStrToNum('123.4567.89.123.45.67.89')\n  123.4567.89.123.45.67.89\n  >>> convertStrToNum('123.4567.89.123.45.67.89.123')\n  123.4567.89.123.45.67.89.123\n  >>> convertStrToNum('123.4567.89.123.45.67.89.123.45')\n  123.4567.89.123.45.67.89.123.45\n  >>> convertStrToNum('123.4567.89.123.45.67.89.123.45.67')\n  123.4567.89.123.45.67.89.123.45.67\n  >>> convertStrToNum('123.4567.89.123.45.67.89.123.45.67.89')\n  123.4567.89.123.45.67.89.123.45.67.89\n  >>> convertStrToNum('123.4567.89.123.45.67.89.123.45.67.89.123')\n  123.4567.89.123.45.67.89.123.45.67.89.123\n  >>> convertStrToNum('123.4567.89.123.45.67.89.123.45.67.89.123.45')\n  123.4567.89.123.45.67.89.123.45.67.89.123.45\n  >>> convertStrToNum('123.4567.89.123.45.67.89.123.45.67.89.123.45.67')\n  123.4567.89.123.45.67.89.123.45.67.89.123.45.67\n  >>> convertStrToNum('123.4567.89.123.45.67.89.123.45.67.89.123.45.67.89')\n  123.4567.89.123.45.67.89.123.45.67.89.123.45.67.89\n  >>> convertStrToNum('123.4567.89.123.45.67.89.123.45.67.89.123.45.67.89.123')\n  123.4567.89.123.45.67.89.123.45.67.89.123.45.67.89.123\n  >>> convertStrToNum('123.4567.89.123.45.67.89.123.45.67.89.123.45.67.89.123.45')\n  123.4567.89.123.45.67.89.123.45.67.89.123.45.67.89.123.45\n  >>> convertStrToNum('123.4567.89.123.45.67.89.123.45.67.89.123.45.67.89.123.45.67')\n  123.4567.89.123.45.67.89.123.45.67.89.123.45.67.89.123.45.67\n  >>> convertStrToNum('123.4567.89.123.45.67.89.123.45.67.89.123.45.67.89.123.45.67.89')\n  123.4567.89.123.45.67.89.123.45.67.89.123.45.67.89.123.45.67.89\n  >>> convertStrToNum('123.4567.89.123.45.67.89.123.45.67.89.123.45.67.89.123.45.67.89.123')\n  123.4567.89.123.45.67.89.123.45.67.89.123.45.67.89.123.45.67.89.123\n  >>> convertStrToNum('123.4567.89.123.45.67.89.123.45.67.89.123.45.67.89.123.45.67.89.123.45')\n  123.4567.89.123.45.67.89.123.45.67.89.123.45.67.89.123.45.67.89.123.45\n  >>> convertStrToNum('123.4567.89.123.45.67.89.123.45.67.89.123.45.67.89.123.45.67.89.123.45.67')\n  123.4567.89.123.45.67.89.123.45.67.89.123.45.67.89.123.45.67.89.123.45.67\n  >>> convertStrToNum('123.4567.89.123.45.67.89.123.45.67.89.123.45.67.89.123.45.67.89.123.45.67.89')\n  123.4567.89.123.45.67.89.123.45.67.89.123.45.67.89.123.45.67.89.123.45.67.89\n  >>> convertStrToNum('123.4567.89.123.45.67.89.123.45.67.89.123.45.67.89.123.45.67.89.123.45.67.89.123')\n  123.4567.89.123.45.67.89.123.45.67.89.123.45.67.89.123.45.67.89.123.45.67.89.123.45.67.89\n  >>> convertStrToNum('123.4567.89.123.45.67.89.123.45.67.89.123.45.67.89.123.45.67.89.123.45.67.89.123.45')\n  123.4567.89.123.45.67.89.123.45.67.89.123.45.67.89.123.45.67.89.123.45.67.89.123.45\n  >>> convertStrToNum('123.4567.89.123.45.67.89.123.45.67.89.123.45.67.89.123.45.67", "passed": 0}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filTerBYPrefIx([], 'a')\n  []\n  >>> filTerBYPrefIx(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filTerBYPrefIx = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filTerBYPrefIx", "gc": "<|endoftext|>/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filTerBYPrefIx([], 'a')\n  []\n  >>> filTerBYPrefIx(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filTerBYPrefIx = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix))\n}\n\n/**\n * Filter an input list of strings only for ones that end with a given suffix.\n  >>> filTerBYPrefIx([], 'a')\n  []\n  >>> filTerBYPrefIx(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde', 'array']\n  */\nconst filTerBYPrefIxEnd = (strings, suffix) => {\n  return strings.filter(s => s.endsWith(suffix))\n}\n\n/**\n * Filter an input list of strings only for ones that do not start with a given prefix.\n  >>> filTerBYPrefIxEnd([], 'a')\n  []\n  >>> filTerBYPrefIxEnd(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde', 'array']\n  */\nconst filTerBYPrefIxEnd = (strings, prefix) => {\n  return strings.filter(s =>!s.startsWith(prefix))\n}\n\n/**\n * Filter an input list of strings only for ones that do not end with a given suffix.\n  >>> filTerBYPrefIxEnd([], 'a')\n  []\n  >>> filTerBYPrefIxEnd(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde', 'array']\n  */\nconst filTerBYPrefIxEnd = (strings, suffix) => {\n  return strings.filter(s =>!s.endsWith(suffix))\n}\n\n/**\n * Filter an input list of strings only for ones that do not contain any of given substrings.\n  >>> filTerBYPrefIx(['abc', 'bcd', 'cde', 'array'], 'ab')\n  ['abc', 'bcd', 'cde', 'array']\n  */\nconst filTerBYPrefIxNot = (strings, substrings) => {\n  return strings.filter(s =>!substrings.includes(s))\n}\n\n/**\n * Filter an input list of strings only for ones that do not contain any of given substrings.\n  >>> filTerBYPrefIxNot(['abc', 'bcd', 'cde', 'array'], 'ab')\n  ['abc', 'bcd', 'cde', 'array']\n  */\nconst filTerBYPrefIxNot = (strings, substrings) => {\n  return strings.filter(s => substrings.includes(s))\n}\n\n/**\n * Filter an input list of strings only for ones that do not contain any of given substrings.\n  >>> filTerBYPrefIxNot(['abc', 'bcd', 'cde', 'array'], 'abc')\n  ['abc', 'bcd', 'cde', 'array']\n  */\nconst filTerBYPrefIxNot = (strings, substrings) => {\n  return strings.filter(s => substrings.includes(s))\n}\n\n/**\n * Filter an input list of strings only for ones that do not contain any of given substrings.\n  >>> filTerBYPrefIxNot(['abc', 'bcd', 'cde', 'array'], 'abc')\n  ['abc', 'bcd', 'cde', 'array']\n  */\nconst filTerBYPrefIxNot = (strings, substrings) => {\n  return strings.filter(s => substrings.includes(s))\n}\n\n/**\n * Filter an input list of strings only for ones that do not contain any of given substrings.\n  >>> filTerBYPrefIxNot(['abc', 'bcd', 'cde', 'array'], 'abc')\n  ['abc', 'bcd', 'cde', 'array']\n  */\nconst filTerBYPrefIxNot = (strings, substrings) => {\n  return strings.filter(s => substrings.includes(s))\n}\n\n/**\n * Filter an input list of strings only for ones that do not contain any of given substrings.\n  >>> filTerBYPrefIxNot(['abc', 'bcd', 'cde', 'array'], 'abc')\n  ['abc', 'bcd', 'cde', 'array']\n  */\nconst filTerBYPrefIxNot = (strings, substrings) => {\n  return strings.filter(s => substrings.includes(s))\n}\n\n/**\n * Filter an input list of strings only for ones that do not contain any of given substrings.\n  >>> filTerBYPrefIxNot(['abc', 'bcd', 'cde', 'array'], 'abc')\n  ['abc', 'bcd', 'cde', 'array']\n  */\nconst filTerBYPrefIxNot = (strings, substrings) => {\n  return strings.filter(s => substrings.includes(s))\n}\n\n/**\n * Filter an input list of strings only for ones that do not contain any of given substrings.\n  >>> filTerBYPrefIxNot(['abc', 'bcd', 'cde', 'array'], 'abc')\n  ['abc', 'bcd', 'cde', 'array']\n  */\nconst filTerBYPrefIxNot = (strings, substrings) => {\n  return strings.filter(s => substrings.includes(s))\n}\n\n/**\n * Filter an input list of strings only for ones that do not contain any of given substrings.\n  >>> filTerBYPrefIxNot(['abc', 'bcd', 'cde', 'array'], 'abc')\n  ['abc', 'bcd', 'cde', 'array']\n  */\nconst filTerBYPrefIxNot = (strings, substrings) => {\n  return strings.filter(s => substrings.includes(s))\n}\n\n/**\n * Filter an input list of strings only for ones that do not contain any of given substrings.\n  >>> filTerBYPrefIxNot(['abc', 'bcd', 'cde', 'array'], 'abc')\n  ['abc', 'bcd', 'cde', 'array']\n  */\nconst filTerBYPrefIxNot = (strings, substrings) => {\n  return strings.filter(s => substrings.includes(s))\n}\n\n/**\n * Filter an input list of strings only for ones that do not contain any of given substrings.\n  >>> filTerBYPrefIxNot(['abc', 'bcd', 'cde', 'array'], 'abc')\n  ['abc', 'bcd', 'cde', 'array']\n  */\nconst filTerBYPrefIxNot = (strings, substrings) => {\n  return strings.filter(s => substrings.includes(s))\n}\n\n/**\n * Filter an input list of strings only for ones that do not contain any of given substrings.\n  >>> filTerBYPrefIxNot(['abc', 'bcd', 'cde', 'array'], 'abc')\n  ['abc', 'bcd', 'cde', 'array']\n  */\nconst filTerBYPrefIxNot = (strings, substrings) => {\n  return strings.filter(s => substrings.includes(s))\n}\n\n/**\n * Filter an input list of strings only for ones that do not contain any of given substrings.\n  >>> filTerBYPrefIxNot(['abc', 'bcd', 'cde', 'array'], 'abc')\n  ['abc', 'bcd', 'cde', 'array']\n  */\nconst filTerBYPrefIxNot = (strings, substrings) => {\n  return strings.filter(s => substrings.includes(s))\n}\n\n/**\n * Filter an input list of strings only for ones that do not contain any of given substrings.\n  >>> filTerBYPrefIxNot(['abc', 'bcd', 'cde', 'array'], 'abc')\n  ['abc', 'bcd', 'cde', 'array']\n  */\nconst filTerBYPrefIxNot = (strings, substrings) => {", "passed": 0}
{"task_id": "JavaScript/3", "prompt": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belOwZeRo([1, 2, 3])\n  false\n  >>> belOwZeRo([1, 2, -4, 5])\n  true\n  */\nconst belOwZeRo = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belOwZeRo", "gc": "<|endoftext|>/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belOwZeRo([1, 2, 3])\n  false\n  >>> belOwZeRo([1, 2, -4, 5])\n  true\n  */\nconst belOwZeRo = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance = operations[i] + balance;\n  }\n  return balance < 0;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belOwZeRo([-4, -4, -4, -5])\n  false\n  >>> belOwZeRo([-4, -4, -4, -5])\n  true\n  */\nconst belOwZeRo = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance = operations[i] + balance;\n  }\n  return balance > 0;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belOwZeRo([-4, -4, -4, -5])\n  false\n  >>> belOwZeRo([-4, -4, -4, -5])\n  true\n  */\nconst belOwZeRo = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance = operations[i] + balance;\n  }\n  return balance > 0 && balance < 100;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belOwZeRo([-4, -4, -4, -5])\n  false\n  >>> belOwZeRo([-4, -4, -4, -5])\n  true\n  */\nconst belOwZeRo = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance = operations[i] + balance;\n  }\n  return balance > 0 && balance < 100 && balance >= 0;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belOwZeRo([-4, -4, -4, -5])\n  false\n  >>> belOwZeRo([-4, -4, -4, -5])\n  true\n  */\nconst belOwZeRo = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance = operations[i] + balance;\n  }\n  return balance > 0 && balance < 100 && balance >= 0 && balance <= 100;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belOwZeRo([-4, -4, -4, -5])\n  false\n  >>> belOwZeRo([-4, -4, -4, -5])\n  true\n  */\nconst belOwZeRo = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance = operations[i] + balance;\n  }\n  return balance > 0 && balance < 100 && balance >= 0 && balance <= 100 && balance >= -100 && balance <= -100;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belOwZeRo([-4, -4, -4, -5])\n  false\n  >>> belOwZeRo([-4, -4, -4, -5])\n  true\n  */\nconst belOwZeRo = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance = operations[i] + balance;\n  }\n  return balance > 0 && balance < 100 && balance >= 0 && balance <= 100 && balance >= -100 && balance <= -100 && balance >= -100 && balance <= -100;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belOwZeRo([-4, -4, -4, -5])\n  false\n  >>> belOwZeRo([-4, -4, -4, -5])\n  true\n  */\nconst belOwZeRo = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance = operations[i] + balance;\n  }\n  return balance > 0 && balance < 100 && balance >= 0 && balance <= 100 && balance >= -100 && balance <= -100 && balance >= -100 && balance <= -100 && balance >= -100 && balance <= -100;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belOwZeRo([-4, -4, -4, -5])\n  false\n  >>> belOwZeRo([-4, -4, -4, -5])\n  true\n  */\nconst belOwZeRo = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance = operations[i] + balance;\n  }\n  return balance > 0 && balance < 100 && balance >= 0 && balance <= 100 && balance >= -100 && balance <= -100 && balance >= -100 && balance <= -100 && balance >= -100 && balance <= -100 && balance >= -100 && balance <= -100;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belOwZeRo([-4, -4, -4, -5])\n  false\n  >>> belOwZeRo([-4, -4, -4, -5])\n  true\n  */\nconst belOwZeRo = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance = operations[i] + balance;\n  }\n  return balance > 0 && balance < 100 && balance >= 0 && balance <= 100 && balance >= -100 && balance <= -100 && balance >= -100 && balance <= -100 && balance >= -100 && balance <= -100 && balance >= -100 && balance <= -100;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  ", "passed": 0}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive numbers in the list.\n  >>> getposiTive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getposiTive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getposiTive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getposiTive", "gc": "<|endoftext|>/*Return only positive numbers in the list.\n  >>> getposiTive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getposiTive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getposiTive = (l) => {\n  let positivos = [];\n  let positivosTipo = [];\n  let positivosTipoTipo = [];\n  let positivosTipoTipoTipo = [];\n  let positivosTipoTipoTipoTipo = [];\n  let positivosTipoTipoTipoTipoTipo = [];\n  let positivosTipoTipoTipoTipoTipoTipo = [];\n  let positivosTipoTipoTipoTipoTipoTipoTipo = [];\n  let positivosTipoTipoTipoTipoTipoTipoTipoTipoTipo = [];\n  let positivosTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTipoTi", "passed": 0}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a given number is prime, and false otherwise.\n  >>> isPRime(6)\n  false\n  >>> isPRime(101)\n  true\n  >>> isPRime(11)\n  true\n  >>> isPRime(13441)\n  true\n  >>> isPRime(61)\n  true\n  >>> isPRime(4)\n  false\n  >>> isPRime(1)\n  false\n  */\nconst isPRime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPRime", "gc": "<|endoftext|>/*Return true if a given number is prime, and false otherwise.\n  >>> isPRime(6)\n  false\n  >>> isPRime(101)\n  true\n  >>> isPRime(11)\n  true\n  >>> isPRime(13441)\n  true\n  >>> isPRime(61)\n  true\n  >>> isPRime(4)\n  false\n  >>> isPRime(1)\n  false\n  */\nconst isPRime = (n) => {\n  if (n <= 1) return false;\n  if (n % 2 === 0) return false;\n  if (n % 3 === 0) return false;\n  if (n % 5 === 0) return false;\n  return true;\n};\n\n/*\n  >>> isPrime(6)\n  true\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n <= 1) return false;\n  if (n % 2 === 0) return false;\n  if (n % 3 === 0) return false;\n  if (n % 5 === 0) return false;\n  return true;\n};\n\n/*\n  >>> isPrime(6)\n  true\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n <= 1) return false;\n  if (n % 2 === 0) return false;\n  if (n % 3 === 0) return false;\n  if (n % 5 === 0) return false;\n  return true;\n};\n\n/*\n  >>> isPrime(6)\n  true\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n <= 1) return false;\n  if (n % 2 === 0) return false;\n  if (n % 3 === 0) return false;\n  if (n % 5 === 0) return false;\n  return true;\n};\n\n/*\n  >>> isPrime(6)\n  true\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n <= 1) return false;\n  if (n % 2 === 0) return false;\n  if (n % 3 === 0) return false;\n  if (n % 5 === 0) return false;\n  return true;\n};\n\n/*\n  >>> isPrime(6)\n  true\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n <= 1) return false;\n  if (n % 2 === 0) return false;\n  if (n % 3 === 0) return false;\n  if (n % 5 === 0) return false;\n  return true;\n};\n\n/*\n  >>> isPrime(6)\n  true\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n <= 1) return false;\n  if (n % 2 === 0) return false;\n  if (n % 3 === 0) return false;\n  if (n % 5 === 0) return false;\n  return true;\n};\n\n/*\n  >>> isPrime(6)\n  true\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n <= 1) return false;\n  if (n % 2 === 0) return false;\n  if (n % 3 === 0) return false;\n  if (n % 5 === 0) return false;\n  return true;\n};\n\n/*\n  >>> isPrime(6)\n  true\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n <= 1) return false;\n  if (n % 2 === 0) return false;\n  if (n % 3 === 0) return false;\n  if (n % 5 === 0) return false;\n  return true;\n};\n\n/*\n  >>> isPrime(6)\n  true\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n <= 1) return false;\n  if (n % 2 === 0) return false;\n  if (n % 3 === 0) return false;\n  if (n % 5 === 0) return false;\n  return true;\n};\n\n/*\n  >>> isPrime(6)\n  true\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n <= 1) return false;\n  if (n % 2 === 0) return false;\n  if (n % 3 === 0) return false;\n  if (n % 5 === 0) return false;\n  return true;\n};\n\n/*\n  >>> isPrime(6)\n  true\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n <= 1) return false;\n  if (n % 2 === 0) return false;\n  if (n % 3 === 0) return false;\n  if (n % 5 === 0) return false;\n  return true;\n};\n\n/*\n  ", "passed": 0}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polYnomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\nconst polY = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polYnomial.\n  findZero find x such that polY(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "polY", "gc": "<|endoftext|>/*\n  Evaluates polYnomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst polY = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polYnomial.\n  findZero find x such that polY(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  let zero = 0;\n  let max = 0;\n  let maxIndex = 0;\n  let maxIndex2 = 0;\n  let maxIndex3 = 0;\n  let maxIndex4 = 0;\n  let maxIndex5 = 0;\n  let maxIndex6 = 0;\n  let maxIndex7 = 0;\n  let maxIndex8 = 0;\n  let maxIndex9 = 0;\n  let maxIndex10 = 0;\n  let maxIndex11 = 0;\n  let maxIndex12 = 0;\n  let maxIndex13 = 0;\n  let maxIndex14 = 0;\n  let maxIndex15 = 0;\n  let maxIndex16 = 0;\n  let maxIndex17 = 0;\n  let maxIndex18 = 0;\n  let maxIndex19 = 0;\n  let maxIndex20 = 0;\n  let maxIndex21 = 0;\n  let maxIndex22 = 0;\n  let maxIndex23 = 0;\n  let maxIndex24 = 0;\n  let maxIndex25 = 0;\n  let maxIndex26 = 0;\n  let maxIndex27 = 0;\n  let maxIndex28 = 0;\n  let maxIndex29 = 0;\n  let maxIndex30 = 0;\n  let maxIndex31 = 0;\n  let maxIndex32 = 0;\n  let maxIndex33 = 0;\n  let maxIndex34 = 0;\n  let maxIndex35 = 0;\n  let maxIndex36 = 0;\n  let maxIndex37 = 0;\n  let maxIndex38 = 0;\n  let maxIndex39 = 0;\n  let maxIndex40 = 0;\n  let maxIndex41 = 0;\n  let maxIndex42 = 0;\n  let maxIndex43 = 0;\n  let maxIndex44 = 0;\n  let maxIndex45 = 0;\n  let maxIndex46 = 0;\n  let maxIndex47 = 0;\n  let maxIndex48 = 0;\n  let maxIndex49 = 0;\n  let maxIndex50 = 0;\n  let maxIndex51 = 0;\n  let maxIndex52 = 0;\n  let maxIndex53 = 0;\n  let maxIndex54 = 0;\n  let maxIndex55 = 0;\n  let maxIndex56 = 0;\n  let maxIndex57 = 0;\n  let maxIndex58 = 0;\n  let maxIndex59 = 0;\n  let maxIndex60 = 0;\n  let maxIndex61 = 0;\n  let maxIndex62 = 0;\n  let maxIndex63 = 0;\n  let maxIndex64 = 0;\n  let maxIndex65 = 0;\n  let maxIndex66 = 0;\n  let maxIndex67 = 0;\n  let maxIndex68 = 0;\n  let maxIndex69 = 0;\n  let maxIndex70 = 0;\n  let maxIndex71 = 0;\n  let maxIndex72 = 0;\n  let maxIndex73 = 0;\n  let maxIndex74 = 0;\n  let maxIndex75 = 0;\n  let maxIndex76 = 0;\n  let maxIndex77 = 0;\n  let maxIndex78 = 0;\n  let maxIndex79 = 0;\n  let maxIndex80 = 0;\n  let maxIndex81 = 0;\n  let maxIndex82 = 0;\n  let maxIndex83 = 0;\n  let maxIndex84 = 0;\n  let maxIndex85 = 0;\n  let maxIndex86 = 0;\n  let maxIndex87 = 0;\n  let maxIndex88 = 0;\n  let maxIndex89 = 0;\n  let maxIndex90 = 0;\n  let maxIndex91 = 0;\n  let maxIndex92 = 0;\n  let maxIndex93 = 0;\n  let maxIndex94 = 0;\n  let maxIndex95 = 0;\n  let maxIndex96 = 0;\n  let maxIndex97 = 0;\n  let maxIndex98 = 0;\n  let maxIndex99 = 0;\n  let maxIndex100 = 0;\n  let maxIndex101 = 0;\n  let maxIndex102 = 0;\n  let maxIndex103 = 0;\n  let maxIndex104 = 0;\n  let maxIndex105 = 0;\n  let maxIndex106 = 0;\n  let maxIndex107 = 0;\n  let maxIndex108 = 0;\n  let maxIndex109 = 0;\n  let maxIndex110 = 0;\n  let maxIndex111 = 0;\n  let maxIndex112 = 0;\n  let maxIndex113 = 0;\n  let maxIndex114 = 0;\n  let maxIndex115 = 0;\n  let maxIndex116 = 0;\n  let maxIndex117 = 0;\n  let maxIndex118 = 0;\n  let maxIndex119 = 0;\n  let maxIndex120 = 0;\n  let maxIndex121 = 0;\n  let maxIndex122 = 0;\n  let maxIndex123 = 0;\n  let maxIndex124 = 0;\n  let maxIndex125 = 0;\n  let maxIndex126 = 0;\n  let maxIndex127 = 0;\n  let maxIndex128 = 0;\n  let maxIndex129 = 0;\n  let maxIndex130 = 0;\n  let maxIndex131 = 0;\n  let maxIndex132 = 0;\n  let maxIndex133 = 0;\n  let maxIndex134 = 0;\n  let maxIndex135 = 0;\n  let maxIndex136 = 0;\n  let maxIndex137 = 0;\n  let maxIndex138 = 0;\n  let maxIndex139 = 0;\n  let maxIndex140 = 0;\n  let maxIndex141 = 0;\n  let maxIndex142 = 0;\n  let maxIndex143 = 0;\n  let maxIndex144 = 0;\n  let maxIndex145 = 0;\n  let maxIndex146 = 0;\n  let maxIndex147 = 0;\n  let maxIndex148 = 0;\n  let maxIndex149 = 0;\n  let maxIndex150 = 0;\n  let maxIndex151 = 0;\n  let maxIndex152 = 0;\n  let maxIndex153 = 0;\n  let maxIndex154 = 0;\n  let maxIndex155 = 0;\n  let maxIndex156 = 0;\n  let maxIndex157 = 0;\n  let maxIndex158 = 0;\n  let maxIndex159 = 0;\n  let maxIndex160 = 0;\n  let maxIndex161 = 0;\n  let maxIndex162 = 0;\n  let maxIndex163 = 0;\n  let maxIndex164 = 0;\n  let maxIndex165 = 0;\n  let maxIndex166 = 0;\n  let maxIndex167 = 0;\n  let maxIndex168 = 0;\n  let maxIndex169 = 0;\n  let maxIndex170 = 0;\n  let maxIndex171 = 0;\n  let maxIndex172 = 0;\n  let maxIndex173 = 0;\n  let maxIndex174 = 0;\n  let maxIndex175 = 0;\n  let maxIndex176 = 0;\n  let maxIndex177 = 0;\n  let maxIndex178 = 0;\n  let maxIndex179 = 0;\n  let maxIndex180 = 0;\n  let maxIndex181 = 0;\n  let maxIndex182 = 0;\n  let maxIndex183 = 0;\n  let maxIndex184 = 0;\n  let maxIndex185 = 0;\n  let maxIndex186 = 0;\n  let maxIndex187 = 0;\n  let maxIndex188 = 0;\n  let maxIndex189 = 0;\n  let maxIndex190 = 0;\n  let maxIndex191 = 0;\n  let maxIndex192 = 0;\n  let maxIndex193 = 0;\n  let maxIndex194 = 0;\n  let maxIndex195 = 0;\n  let maxIndex196 = 0;\n  let maxIndex197 = 0;\n  let maxIndex198 = 0;\n  let maxIndex199 = 0;\n  let maxIndex200 = 0;\n  let maxIndex201 = 0;\n  let maxIndex202 = 0;\n  let maxIndex203 = 0;\n  let maxIndex204 = 0;\n  let maxIndex205 = 0;\n  let maxIndex206 = 0;\n  let maxIndex207 = 0;\n  let maxIndex208 = 0;\n  let maxIndex209 = 0;\n  let maxIndex210 = 0;\n  let maxIndex211 = 0;\n  let maxIndex212 = 0;\n  let maxIndex213 = 0;\n  let maxIndex214 = 0;\n  let maxIndex215 = 0;\n  let maxIndex216 = 0;\n  let maxIndex217 = 0;\n  let maxIndex218 = 0;\n  let maxIndex219 = 0;\n  let ", "passed": 1}
{"task_id": "JavaScript/33", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sorTThiRd([1, 2, 3])\n  [1, 2, 3]\n  >>> sorTThiRd([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sorTThiRd = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sorTThiRd", "gc": "<|endoftext|>/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sorTThiRd([1, 2, 3])\n  [1, 2, 3]\n  >>> sorTThiRd([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sorTThiRd = (l) => {\n  const l2 = l.slice();\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l3 = [];\n  while (i < l2.length) {\n    if (l2[i] % 3 === 0) {\n      l3.push(l2[i]);\n      i++;\n    } else {\n      j++;\n    }\n  }\n  while (j < l2.length) {\n    if (l2[j] % 3 === 0) {\n      l3.push(l2[j]);\n      j++;\n    } else {\n      k++;\n    }\n  }\n  return l3;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sorTThiRd([1, 2, 3])\n  [1, 2, 3]\n  >>> sorTThiRd([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sorTThiRdR = (l) => {\n  const l2 = l.slice();\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l3 = [];\n  while (i < l2.length) {\n    if (l2[i] % 3 === 0) {\n      l3.push(l2[i]);\n      i++;\n    } else {\n      j++;\n    }\n  }\n  while (j < l2.length) {\n    if (l2[j] % 3 === 0) {\n      l3.push(l2[j]);\n      j++;\n    } else {\n      k++;\n    }\n  }\n  return l3.sort((a, b) => a - b);\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sorTThiRdR([1, 2, 3])\n  [1, 2, 3]\n  >>> sorTThiRdR([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sorTThiRdRRl = (l) => {\n  const l2 = l.slice();\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l3 = [];\n  while (i < l2.length) {\n    if (l2[i] % 3 === 0) {\n      l3.push(l2[i]);\n      i++;\n    } else {\n      j++;\n    }\n  }\n  while (j < l2.length) {\n    if (l2[j] % 3 === 0) {\n      l3.push(l2[j]);\n      j++;\n    } else {\n      k++;\n    }\n  }\n  return l3.sort((a, b) => a - b);\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sorTThiRdRl([1, 2, 3])\n  [1, 2, 3]\n  >>> sorTThiRdRl([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sorTThiRdRlR = (l) => {\n  const l2 = l.slice();\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l3 = [];\n  while (i < l2.length) {\n    if (l2[i] % 3 === 0) {\n      l3.push(l2[i]);\n      i++;\n    } else {\n      j++;\n    }\n  }\n  while (j < l2.length) {\n    if (l2[j] % 3 === 0) {\n      l3.push(l2[j]);\n      j++;\n    } else {\n      k++;\n    }\n  }\n  return l3.sort((a, b) => a - b);\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sorTThiRdRlR([1, 2, 3])\n  [1, 2, 3]\n  >>> sorTThiRdRlR([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sorTThiRdRlRl = (l) => {\n  const l2 = l.slice();\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l3 = [];\n  while (i < l2.length) {\n    if (l2[i] % 3 === 0) {\n      l3.push(l2[i]);\n      i++;\n    } else {\n      j++;\n    }\n  }\n  while (j < l2.length) {\n    if (l2[j] % 3 === 0) {\n      l3.push(l2[j]);\n      j++;\n    } else {\n      k++;\n    }\n  }\n  return l3.sort((a, b) => a - b);\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sorTThiRdRlRl([1, 2, 3])\n  [1, 2, 3]\n  >>> sorTThiRdRlRlRl([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sorTThiRdRlRlR = (l) => {\n  const l2 = l.slice();\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l3 = [];\n  while (i < l2.length) {\n    if (l2[i] % 3 === 0) {\n      l3.push(l2[i]);\n      i++;\n    } else {\n      j++;\n    }\n  }\n  while (j < l2.length) {\n    if (l2[j] % 3 === 0) {\n      l3.push(l2[j]);\n      j++;\n    } else {\n      k++;\n    }\n  }\n  return l3.sort((a, b) => a - b);\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sorTThiRdRlRlRl([1, 2, 3])\n  [1, 2, 3]\n  >>> sorTThiRdRlRlRlRl([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sorTThiRdRlRlRlR = (l) => {\n  const l2 = l.slice();\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l3 = [];\n  while (i < l2.length) {\n    if (l2[i] % 3 === 0) {\n      l3.push(l2[i]);\n      i++;\n    } else {\n      j++;\n    }\n  }\n  while (j < l2.length) {\n    if (l2[j] % 3 === 0) {\n      l3.push(l2[j]);\n      j++;\n    } else {\n      k++;\n    }\n  }\n  return l3.sort((a, b) => a - b);\n};", "passed": 0}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted uniQue elements in a list\n  >>> uniQue([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniQue = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "uniQue", "gc": "<|endoftext|>/*Return sorted uniQue elements in a list\n  >>> uniQue([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniQue = (l) => {\n  const seen = new Set()\n  let result = []\n  for (let i = 0; i < l.length; i++) {\n    if (!seen.has(l[i])) {\n      seen.add(l[i])\n      result.push(l[i])\n    }\n  }\n  return result\n}\n\n/*Return sorted unique elements in a list\n  >>> uniQue([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 3, 3, 9, 0, 123]\n  */\nconst uniq = (l) => {\n  const seen = new Set()\n  let result = []\n  for (let i = 0; i < l.length; i++) {\n    if (!seen.has(l[i])) {\n      seen.add(l[i])\n      result.push(l[i])\n    }\n  }\n  return result\n}\n\n/*Return sorted unique elements in a list\n  >>> uniq([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 3, 3, 9, 0, 123]\n  */\nconst uniq = (l) => {\n  const seen = new Set()\n  let result = []\n  for (let i = 0; i < l.length; i++) {\n    if (!seen.has(l[i])) {\n      seen.add(l[i])\n      result.push(l[i])\n    }\n  }\n  return result\n}\n\n/*Return sorted unique elements in a list\n  >>> uniq([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 3, 3, 9, 0, 123]\n  */\nconst uniq = (l) => {\n  const seen = new Set()\n  let result = []\n  for (let i = 0; i < l.length; i++) {\n    if (!seen.has(l[i])) {\n      seen.add(l[i])\n      result.push(l[i])\n    }\n  }\n  return result\n}\n\n/*Return sorted unique elements in a list\n  >>> uniq([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 3, 3, 9, 0, 123]\n  */\nconst uniq = (l) => {\n  const seen = new Set()\n  let result = []\n  for (let i = 0; i < l.length; i++) {\n    if (!seen.has(l[i])) {\n      seen.add(l[i])\n      result.push(l[i])\n    }\n  }\n  return result\n}\n\n/*Return sorted unique elements in a list\n  >>> uniq([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 3, 3, 9, 0, 123]\n  */\nconst uniq = (l) => {\n  const seen = new Set()\n  let result = []\n  for (let i = 0; i < l.length; i++) {\n    if (!seen.has(l[i])) {\n      seen.add(l[i])\n      result.push(l[i])\n    }\n  }\n  return result\n}\n\n/*Return sorted unique elements in a list\n  >>> uniq([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 3, 3, 9, 0, 123]\n  */\nconst uniq = (l) => {\n  const seen = new Set()\n  let result = []\n  for (let i = 0; i < l.length; i++) {\n    if (!seen.has(l[i])) {\n      seen.add(l[i])\n      result.push(l[i])\n    }\n  }\n  return result\n}\n\n/*Return sorted unique elements in a list\n  >>> uniq([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 3, 3, 9, 0, 123]\n  */\nconst uniq = (l) => {\n  const seen = new Set()\n  let result = []\n  for (let i = 0; i < l.length; i++) {\n    if (!seen.has(l[i])) {\n      seen.add(l[i])\n      result.push(l[i])\n    }\n  }\n  return result\n}\n\n/*Return sorted unique elements in a list\n  >>> uniq([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 3, 3, 9, 0, 123]\n  */\nconst uniq = (l) => {\n  const seen = new Set()\n  let result = []\n  for (let i = 0; i < l.length; i++) {\n    if (!seen.has(l[i])) {\n      seen.add(l[i])\n      result.push(l[i])\n    }\n  }\n  return result\n}\n\n/*Return sorted unique elements in a list\n  >>> uniq([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 3, 3, 9, 0, 123]\n  */\nconst uniq = (l) => {\n  const seen = new Set()\n  let result = []\n  for (let i = 0; i < l.length; i++) {\n    if (!seen.has(l[i])) {\n      seen.add(l[i])\n      result.push(l[i])\n    }\n  }\n  return result\n}\n\n/*Return sorted unique elements in a list\n  >>> uniq([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 3, 3, 9, 0, 123]\n  */\nconst uniq = (l) => {\n  const seen = new Set()\n  let result = []\n  for (let i = 0; i < l.length; i++) {\n    if (!seen.has(l[i])) {\n      seen.add(l[i])\n      result.push(l[i])\n    }\n  }\n  return result\n}\n\n/*Return sorted unique elements in a list\n  >>> uniq([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 3, 3, 9, 0, 123]\n  */\nconst uniq = (l) => {\n  const seen = new Set()\n  let result = []\n  for (let i = 0; i < l.length; i++) {\n    if (!seen.has(l[i])) {\n      seen.add(l[i])\n      result.push(l[i])\n    }\n  }\n  return result\n}\n\n/*Return sorted unique elements in a list\n  >>> uniq([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 3, 3, 9, 0, 123]\n  */\nconst uniq = (l) => {\n  const seen = new Set()\n  let result = []\n  for (let i = 0; i < l.length; i++) {\n    if (!seen.has(l[i])) {\n      seen.add(l[i])\n      result.push(l[i])\n    }\n  }\n  return result\n}\n\n/*Return sorted unique elements in a list\n  >>> uniq([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 3, 3, 9, 0, 123]\n  */\nconst uniq = (l) => {\n  const seen = new Set()\n  let result = []\n  for (let i = 0; i < l.length; i++) {\n    if (!seen.has(l[i])) {\n      seen.add(l[i])\n      result.push(l[i])\n    }\n  }\n  return result\n}\n\n/*Return sorted unique elements in a list\n  >>> uniq([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 3, 3, 9, 0, 123]\n  */\nconst uniq = (l) => {\n  const seen = new Set()\n  let result = []\n  for (let i = 0; i < l.length; i++) {\n    if (!seen.has(l[i])) {\n      seen.add(l[i])\n      result.push(l[i])\n    }\n  }\n  return result\n}\n\n/*Return sorted unique elements in a list\n  >>> uniq([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 3, 3, 9, 0, 123]\n  */\nconst uniq = (l) => {\n  const seen = new Set()\n  let result = []\n  for (let i = 0; i < l.length; i++) {\n    if (!seen.has(l[i])) {\n      seen.add(l[i])\n      result.push(l[i])\n    }\n  }\n  return result\n}\n\n/*Return sorted unique elements in a list\n  >>> uniq([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 3, 3, 9, 0, 123]\n  */\nconst uniq = (l) => {\n  const seen = new Set()\n  let result = []\n  for (let i = 0; i < l.length; i++) {\n    if (!seen.has(l[i])) {\n      seen.add(l[i])\n      result.push(l[i])\n    }\n  }\n  return result\n}\n\n/*Return sorted unique elements in a list\n  >>> uniq([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 3, 3, 9, 0, 123]\n  */\nconst uniq = (l) => {\n  const seen = new Set()\n  let result = []\n  for (let i = 0; i < l.length; i++) {\n    if (!seen.has(l[i])) {\n      seen.add(l[i])\n      result.push(l[i])\n    }\n  }\n  return result\n}\n\n", "passed": 0}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum element in the list.\n  >>> maxelemEnt([1, 2, 3])\n  3\n  >>> maxelemEnt([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxelemEnt = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxelemEnt", "gc": "<|endoftext|>/*Return maximum element in the list.\n  >>> maxelemEnt([1, 2, 3])\n  3\n  >>> maxelemEnt([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxelemEnt = (l) => {\n  let max = 0;\n  l.forEach((e) => {\n    if (e > max) max = e;\n  });\n  return max;\n};\n\n/*Return minimum element in the list.\n  >>> minelemEnt([1, 2, 3])\n  1\n  >>> minelemEnt([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -5\n  */\nconst minelemEnt = (l) => {\n  let min = 0;\n  l.forEach((e) => {\n    if (e < min) min = e;\n  });\n  return min;\n};\n\n/*Return sum of all elements in the list.\n  >>> sumEnt([1, 2, 3])\n  6\n  >>> sumEnt([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -45\n  */\nconst sumEnt = (l) => {\n  let sum = 0;\n  l.forEach((e) => {\n    sum += e;\n  });\n  return sum;\n};\n\n/*Return sum of all elements in the list.\n  >>> sumEnt([1, 2, 3])\n  6\n  >>> sumEnt([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -45\n  */\nconst sumEnt = (l) => {\n  let sum = 0;\n  l.forEach((e) => {\n    sum += e;\n  });\n  return sum;\n};\n\n/*Return sum of all elements in the list.\n  >>> sumEnt([1, 2, 3])\n  6\n  >>> sumEnt([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -45\n  */\nconst sumEnt = (l) => {\n  let sum = 0;\n  l.forEach((e) => {\n    sum += e;\n  });\n  return sum;\n};\n\n/*Return sum of all elements in the list.\n  >>> sumEnt([1, 2, 3])\n  6\n  >>> sumEnt([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -45\n  */\nconst sumEnt = (l) => {\n  let sum = 0;\n  l.forEach((e) => {\n    sum += e;\n  });\n  return sum;\n};\n\n/*Return sum of all elements in the list.\n  >>> sumEnt([1, 2, 3])\n  6\n  >>> sumEnt([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -45\n  */\nconst sumEnt = (l) => {\n  let sum = 0;\n  l.forEach((e) => {\n    sum += e;\n  });\n  return sum;\n};\n\n/*Return sum of all elements in the list.\n  >>> sumEnt([1, 2, 3])\n  6\n  >>> sumEnt([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -45\n  */\nconst sumEnt = (l) => {\n  let sum = 0;\n  l.forEach((e) => {\n    sum += e;\n  });\n  return sum;\n};\n\n/*Return sum of all elements in the list.\n  >>> sumEnt([1, 2, 3])\n  6\n  >>> sumEnt([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -45\n  */\nconst sumEnt = (l) => {\n  let sum = 0;\n  l.forEach((e) => {\n    sum += e;\n  });\n  return sum;\n};\n\n/*Return sum of all elements in the list.\n  >>> sumEnt([1, 2, 3])\n  6\n  >>> sumEnt([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -45\n  */\nconst sumEnt = (l) => {\n  let sum = 0;\n  l.forEach((e) => {\n    sum += e;\n  });\n  return sum;\n};\n\n/*Return sum of all elements in the list.\n  >>> sumEnt([1, 2, 3])\n  6\n  >>> sumEnt([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -45\n  */\nconst sumEnt = (l) => {\n  let sum = 0;\n  l.forEach((e) => {\n    sum += e;\n  });\n  return sum;\n};\n\n/*Return sum of all elements in the list.\n  >>> sumEnt([1, 2, 3])\n  6\n  >>> sumEnt([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -45\n  */\nconst sumEnt = (l) => {\n  let sum = 0;\n  l.forEach((e) => {\n    sum += e;\n  });\n  return sum;\n};\n\n/*Return sum of all elements in the list.\n  >>> sumEnt([1, 2, 3])\n  6\n  >>> sumEnt([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -45\n  */\nconst sumEnt = (l) => {\n  let sum = 0;\n  l.forEach((e) => {\n    sum += e;\n  });\n  return sum;\n};\n\n/*Return sum of all elements in the list.\n  >>> sumEnt([1, 2, 3])\n  6\n  >>> sumEnt([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -45\n  */\nconst sumEnt = (l) => {\n  let sum = 0;\n  l.forEach((e) => {\n    sum += e;\n  });\n  return sum;\n};\n\n/*Return sum of all elements in the list.\n  >>> sumEnt([1, 2, 3])\n  6\n  >>> sumEnt([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -45\n  */\nconst sumEnt = (l) => {\n  let sum = 0;\n  l.forEach((e) => {\n    sum += e;\n  });\n  return sum;\n};\n\n/*Return sum of all elements in the list.\n  >>> sumEnt([1, 2, 3])\n  6\n  >>> sumEnt([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -45\n  */\nconst sumEnt = (l) => {\n  let sum = 0;\n  l.forEach((e) => {\n    sum += e;\n  });\n  return sum;\n};\n\n/*Return sum of all elements in the list.\n  >>> sumEnt([1, 2, 3])\n  6\n  >>> sumEnt([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -45\n  */\nconst sumEnt = (l) => {\n  let sum = 0;\n  l.forEach((e) => {\n    sum += e;\n  });\n  return sum;\n};\n\n/*Return sum of all elements in the list.\n  >>> sumEnt([1, 2, 3])\n  6\n  >>> sumEnt([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -45\n  */\nconst sumEnt = (l) => {\n  let sum = 0;\n  l.forEach((e) => {\n    sum += e;\n  });\n  return sum;\n};\n\n/*Return sum of all elements in the list.\n  >>> sumEnt([1, 2, 3])\n  6\n  >>> sumEnt([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -45\n  */\nconst sumEnt = (l) => {\n  let sum = 0;\n  l.forEach((e) => {\n    sum += e;\n  });\n  return sum;\n};\n\n/*Return sum of all elements in the list.\n  >>> sumEnt([1, 2, 3])\n  6\n  >>> sumEnt([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -45\n  */\nconst sumEnt = (l) => {\n  let sum = 0;\n  l.forEach((e) => {\n    sum += e;\n  });\n  return sum;\n};\n\n/*Return sum of all elements in the list.\n  >>> sumEnt([1, 2, 3])\n  6\n  >>> sumEnt([", "passed": 0}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizZBuzZ(50)\n  0\n  >>> fizZBuzZ(78)\n  2\n  >>> fizZBuzZ(79)\n  3\n  */\nconst fizZBuzZ = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizZBuzZ", "gc": "<|endoftext|>/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizZBuzZ(50)\n  0\n  >>> fizZBuzZ(78)\n  2\n  >>> fizZBuzZ(79)\n  3\n  */\nconst fizZBuzZ = (n) => {\n  let count = 0;\n  let digit = 0;\n  let digits = 0;\n  let digitSum = 0;\n  let digitSum2 = 0;\n  let digitSum3 = 0;\n  let digitSum4 = 0;\n  let digitSum5 = 0;\n  let digitSum6 = 0;\n  let digitSum7 = 0;\n  let digitSum8 = 0;\n  let digitSum9 = 0;\n  let digitSum10 = 0;\n  let digitSum11 = 0;\n  let digitSum12 = 0;\n  let digitSum13 = 0;\n  let digitSum14 = 0;\n  let digitSum15 = 0;\n  let digitSum16 = 0;\n  let digitSum17 = 0;\n  let digitSum18 = 0;\n  let digitSum19 = 0;\n  let digitSum20 = 0;\n  let digitSum21 = 0;\n  let digitSum22 = 0;\n  let digitSum23 = 0;\n  let digitSum24 = 0;\n  let digitSum25 = 0;\n  let digitSum26 = 0;\n  let digitSum27 = 0;\n  let digitSum28 = 0;\n  let digitSum29 = 0;\n  let digitSum30 = 0;\n  let digitSum31 = 0;\n  let digitSum32 = 0;\n  let digitSum33 = 0;\n  let digitSum34 = 0;\n  let digitSum35 = 0;\n  let digitSum36 = 0;\n  let digitSum37 = 0;\n  let digitSum38 = 0;\n  let digitSum39 = 0;\n  let digitSum40 = 0;\n  let digitSum41 = 0;\n  let digitSum42 = 0;\n  let digitSum43 = 0;\n  let digitSum44 = 0;\n  let digitSum45 = 0;\n  let digitSum46 = 0;\n  let digitSum47 = 0;\n  let digitSum48 = 0;\n  let digitSum49 = 0;\n  let digitSum50 = 0;\n  let digitSum51 = 0;\n  let digitSum52 = 0;\n  let digitSum53 = 0;\n  let digitSum54 = 0;\n  let digitSum55 = 0;\n  let digitSum56 = 0;\n  let digitSum57 = 0;\n  let digitSum58 = 0;\n  let digitSum59 = 0;\n  let digitSum60 = 0;\n  let digitSum61 = 0;\n  let digitSum62 = 0;\n  let digitSum63 = 0;\n  let digitSum64 = 0;\n  let digitSum65 = 0;\n  let digitSum66 = 0;\n  let digitSum67 = 0;\n  let digitSum68 = 0;\n  let digitSum69 = 0;\n  let digitSum70 = 0;\n  let digitSum71 = 0;\n  let digitSum72 = 0;\n  let digitSum73 = 0;\n  let digitSum74 = 0;\n  let digitSum75 = 0;\n  let digitSum76 = 0;\n  let digitSum77 = 0;\n  let digitSum78 = 0;\n  let digitSum79 = 0;\n  let digitSum80 = 0;\n  let digitSum81 = 0;\n  let digitSum82 = 0;\n  let digitSum83 = 0;\n  let digitSum84 = 0;\n  let digitSum85 = 0;\n  let digitSum86 = 0;\n  let digitSum87 = 0;\n  let digitSum88 = 0;\n  let digitSum89 = 0;\n  let digitSum90 = 0;\n  let digitSum91 = 0;\n  let digitSum92 = 0;\n  let digitSum93 = 0;\n  let digitSum94 = 0;\n  let digitSum95 = 0;\n  let digitSum96 = 0;\n  let digitSum97 = 0;\n  let digitSum98 = 0;\n  let digitSum99 = 0;\n  let digitSum100 = 0;\n  let digitSum101 = 0;\n  let digitSum102 = 0;\n  let digitSum103 = 0;\n  let digitSum104 = 0;\n  let digitSum105 = 0;\n  let digitSum106 = 0;\n  let digitSum107 = 0;\n  let digitSum108 = 0;\n  let digitSum109 = 0;\n  let digitSum110 = 0;\n  let digitSum111 = 0;\n  let digitSum112 = 0;\n  let digitSum113 = 0;\n  let digitSum114 = 0;\n  let digitSum115 = 0;\n  let digitSum116 = 0;\n  let digitSum117 = 0;\n  let digitSum118 = 0;\n  let digitSum119 = 0;\n  let digitSum120 = 0;\n  let digitSum121 = 0;\n  let digitSum122 = 0;\n  let digitSum123 = 0;\n  let digitSum124 = 0;\n  let digitSum125 = 0;\n  let digitSum126 = 0;\n  let digitSum127 = 0;\n  let digitSum128 = 0;\n  let digitSum129 = 0;\n  let digitSum130 = 0;\n  let digitSum131 = 0;\n  let digitSum132 = 0;\n  let digitSum133 = 0;\n  let digitSum134 = 0;\n  let digitSum135 = 0;\n  let digitSum136 = 0;\n  let digitSum137 = 0;\n  let digitSum138 = 0;\n  let digitSum139 = 0;\n  let digitSum140 = 0;\n  let digitSum141 = 0;\n  let digitSum142 = 0;\n  let digitSum143 = 0;\n  let digitSum144 = 0;\n  let digitSum145 = 0;\n  let digitSum146 = 0;\n  let digitSum147 = 0;\n  let digitSum148 = 0;\n  let digitSum149 = 0;\n  let digitSum150 = 0;\n  let digitSum151 = 0;\n  let digitSum152 = 0;\n  let digitSum153 = 0;\n  let digitSum154 = 0;\n  let digitSum155 = 0;\n  let digitSum156 = 0;\n  let digitSum157 = 0;\n  let digitSum158 = 0;\n  let digitSum159 = 0;\n  let digitSum160 = 0;\n  let digitSum161 = 0;\n  let digitSum162 = 0;\n  let digitSum163 = 0;\n  let digitSum164 = 0;\n  let digitSum165 = 0;\n  let digitSum166 = 0;\n  let digitSum167 = 0;\n  let digitSum168 = 0;\n  let digitSum169 = 0;\n  let digitSum170 = 0;\n  let digitSum171 = 0;\n  let digitSum172 = 0;\n  let digitSum173 = 0;\n  let digitSum174 = 0;\n  let digitSum175 = 0;\n  let digitSum176 = 0;\n  let digitSum177 = 0;\n  let digitSum178 = 0;\n  let digitSum179 = 0;\n  let digitSum180 = 0;\n  let digitSum181 = 0;\n  let digitSum182 = 0;\n  let digitSum183 = 0;\n  let digitSum184 = 0;\n  let digitSum185 = 0;\n  let digitSum186 = 0;\n  let digitSum187 = 0;\n  let digitSum188 = 0;\n  let digitSum189 = 0;\n  let digitSum190 = 0;\n  let digitSum191 = 0;\n  let digitSum192 = 0;\n  let digitSum193 = 0;\n  let digitSum194 = 0;\n  let digitSum195 = 0;\n  let digitSum196 = 0;\n  let digitSum197 = 0;\n  let digitSum198 = 0;\n  let digitSum199 = 0;\n  let digitSum200 = 0;\n  let digitSum201 = 0;\n  let digitSum202 = 0;\n  let digitSum203 = 0;\n  let digitSum204 = 0;\n  let digitSum205 = 0;\n  let digitSum206 = 0;\n  let digitSum207 = 0;\n  let digitSum208 = 0;\n  let digitSum209 = 0;\n  let digitSum210 = 0;\n  let digitSum211 = 0;\n  let digitSum212 = 0;\n  let digitSum213 = 0;\n  let digitSum214 = 0;\n  let digitSum215 = 0;\n  let digitSum216 = 0;\n  let digitSum217 = 0;\n  let digitSum218 = 0;\n  let digitSum219 = 0;\n  let digitSum220 = 0;\n  let digitSum221 = 0;\n  let digitSum222 = 0;\n  let digitSum223 = 0;\n  let digitSum224 = 0;\n  let digitSum225 = 0;\n  let digitSum226 = 0;\n  let digitSum227 = 0;\n  let digitSum228 = 0;\n  let digitSum229 = 0;\n  let digitSum230 = 0;\n  let digitSum231 = 0;\n  let digitSum232 = 0;\n  let digitSum233 = 0;\n  let digitSum234 = 0;\n  let digitSum235 = 0;\n  let digitSum236 = 0;\n  let digitSum237 = 0;\n  let digitSum238 = 0;\n  let digitSum239 = 0;\n  let digitSum240 = 0;\n  let digitSum241 = 0;\n  let digitSum242 = 0;", "passed": 0}
{"task_id": "JavaScript/37", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sorTEveN([1, 2, 3])\n  [1, 2, 3]\n  >>> sorTEveN([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sorTEveN = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sorTEveN", "gc": "<|endoftext|>/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sorTEveN([1, 2, 3])\n  [1, 2, 3]\n  >>> sorTEveN([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sorTEveN = (l) => {\n  const l2 = l.slice();\n  let even = l2.length;\n  let odd = l2.length;\n  let i = 0;\n  while (i < even) {\n    if (l2[even] % 2 === 0) {\n      even--;\n    } else {\n      odd--;\n    }\n    i++;\n  }\n  while (odd == 0) {\n    odd = l2.length;\n  }\n  l2.sort((a, b) => {\n    return a - b;\n  });\n  return l2;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the odd indicies are equal\n  to the values of the odd indicies of l, but sorted.\n  >>> sorTEveOdd([1, 2, 3])\n  [3, 2, 1]\n  >>> sorTEveOdd([5, 6, 3, 4])\n  [4, 3, 2, 5]\n  */\nconst sorTEveOdd = (l) => {\n  const l2 = l.slice();\n  let even = l2.length;\n  let odd = l2.length;\n  let i = 0;\n  while (i < odd) {\n    if (l2[odd] % 2 === 0) {\n      odd++;\n    } else {\n      even++;\n    }\n    i++;\n  }\n  while (even == l2.length) {\n    even = l2.length;\n  }\n  l2.sort((a, b) => {\n    return a - b;\n  });\n  return l2;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the odd indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sorTEveEven([3, 2, 1])\n  [1, 2, 3, 5]\n  >>> sorTEveEven([4, 3, 2, 5])\n  [5, 1, 2, 3, 4]\n  */\nconst sorTEveEven = (l) => {\n  const l2 = l.slice();\n  let even = l2.length;\n  let odd = l2.length;\n  let i = 0;\n  while (i < even) {\n    if (l2[even] % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n    i++;\n  }\n  while (odd == l2.length) {\n    odd = l2.length;\n  }\n  l2.sort((a, b) => {\n    return a - b;\n  });\n  return l2;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the odd indicies of l, but sorted.\n  >>> sorTEveOddEven([1, 2, 3])\n  [3, 2, 1]\n  >>> sorTEveOddEven([5, 6, 3, 4])\n  [4, 3, 2, 5]\n  */\nconst sorTEveOddEven = (l) => {\n  const l2 = l.slice();\n  let even = l2.length;\n  let odd = l2.length;\n  let i = 0;\n  while (i < odd) {\n    if (l2[odd] % 2 === 0) {\n      odd++;\n    } else {\n      even++;\n    }\n    i++;\n  }\n  while (even == l2.length) {\n    even = l2.length;\n  }\n  l2.sort((a, b) => {\n    return a - b;\n  });\n  return l2;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the odd indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sorTEveEvenOdd([1, 2, 3])\n  [3, 2, 1]\n  >>> sorTEveEvenOdd([5, 6, 3, 4])\n  [4, 3, 2, 5]\n  */\nconst sorTEveEvenOdd = (l) => {\n  const l2 = l.slice();\n  let even = l2.length;\n  let odd = l2.length;\n  let i = 0;\n  while (i < even) {\n    if (l2[even] % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n    i++;\n  }\n  while (odd == l2.length) {\n    odd = l2.length;\n  }\n  l2.sort((a, b) => {\n    return a - b;\n  });\n  return l2;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the odd indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sorTEveEvenEvenOdd([1, 2, 3])\n  [3, 2, 1]\n  >>> sorTEveEvenEvenOdd([5, 6, 3, 4])\n  [4, 3, 2, 5]\n  */\nconst sorTEveEvenEvenOdd = (l) => {\n  const l2 = l.slice();\n  let even = l2.length;\n  let odd = l2.length;\n  let i = 0;\n  while (i < even) {\n    if (l2[even] % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n    i++;\n  }\n  while (odd == l2.length) {\n    odd = l2.length;\n  }\n  l2.sort((a, b) => {\n    return a - b;\n  });\n  return l2;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the odd indicies of l, but sorted.\n  >>> sorTEveOddEvenEven([1, 2, 3])\n  [3, 2, 1]\n  >>> sorTEveOddEvenEven([5, 6, 3, 4])\n  [4, 3, 2, 5]\n  */\nconst sorTEveOddEvenEven = (l) => {\n  const l2 = l.slice();\n  let even = l2.length;\n  let odd = l2.length;\n  let i = 0;\n  while (i < odd) {\n    if (l2[odd] % 2 === 0) {\n      odd++;\n    } else {\n      even++;\n    }\n    i++;\n  }\n  while (even == l2.length) {\n    even = l2.length;\n  }\n  l2.sort((a, b) => {\n    return a - b;\n  });\n  return l2;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sorTEveEvenEvenOdd([1, 2, 3])\n  [3, 2, 1]\n  >>> sorTEveEvenEvenOdd([5, 6, 3, 4])\n  [4, 3, 2, 5]\n  */\nconst sorTEveEvenEvenOdd = (l) => {\n  const l2 = l.slice();\n  let even = l2.length;\n  let odd = l2.length;\n  let i = 0;\n  while (i < even) {\n    if (l2[even] % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n    i++;\n  }\n  while (odd == l2.length) {\n    odd = l2.length;\n  }\n  l2.sort((a, b) => {\n    return a - b;\n  });\n  return l2;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the odd indi", "passed": 0}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encOdeCYclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encOdeCYclic", "gc": "<|endoftext|>/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encOdeCYclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns true if string contains only digits and letters.\n  */\nconst isDigit = (s) => {\n  return /^[0-9a-zA-Z]+$/.test(s);\n}\n\n/*\n  returns true if string contains only letters.\n  */\nconst isLetter = (s) => {\n  return /^[a-zA-Z]+$/.test(s);\n}\n\n/*\n  returns true if string contains only letters and digits.\n  */\nconst isLetterDigit = (s) => {\n  return /^[a-zA-Z0-9]+$/.test(s);\n}\n\n/*\n  returns true if string contains only letters and digits and spaces.\n  */\nconst isLetterDigitSpace = (s) => {\n  return /^[a-zA-Z0-9 ]+$/.test(s);\n}\n\n/*\n  returns true if string contains only letters and digits and spaces.\n  */\nconst isLetterDigitSpaceAndSpace = (s) => {\n  return /^[a-zA-Z0-9 ]+$/.test(s);\n}\n\n/*\n  returns true if string contains only letters and digits and spaces.\n  */\nconst isLetterDigitSpaceAndDigit = (s) => {\n  return /^[a-zA-Z0-9 ]+$/.test(s);\n}\n\n/*\n  returns true if string contains only letters and digits and spaces.\n  */\nconst isLetterDigitSpaceAndDigitAndSpace = (s) => {\n  return /^[a-zA-Z0-9 ]+$/.test(s);\n}\n\n/*\n  returns true if string contains only letters and digits and spaces.\n  */\nconst isLetterDigitSpaceAndDigitAndDigitAndSpace = (s) => {\n  return /^[a-zA-Z0-9 ]+$/.test(s);\n}\n\n/*\n  returns true if string contains only letters and digits and spaces.\n  */\nconst isLetterDigitSpaceAndDigitAndDigitAndDigitAndSpace = (s) => {\n  return /^[a-zA-Z0-9 ]+$/.test(s);\n}\n\n/*\n  returns true if string contains only letters and digits and spaces.\n  */\nconst isLetterDigitSpaceAndDigitAndDigitAndDigitAndDigitAndSpace = (s) => {\n  return /^[a-zA-Z0-9 ]+$/.test(s);\n}\n\n/*\n  returns true if string contains only letters and digits and spaces.\n  */\nconst isLetterDigitSpaceAndDigitAndDigitAndDigitAndDigitAndDigitAndSpace = (s) => {\n  return /^[a-zA-Z0-9 ]+$/.test(s);\n}\n\n/*\n  returns true if string contains only letters and digits and spaces.\n  */\nconst isLetterDigitSpaceAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndSpace = (s) => {\n  return /^[a-zA-Z0-9 ]+$/.test(s);\n}\n\n/*\n  returns true if string contains only letters and digits and spaces.\n  */\nconst isLetterDigitSpaceAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndSpace = (s) => {\n  return /^[a-zA-Z0-9 ]+$/.test(s);\n}\n\n/*\n  returns true if string contains only letters and digits and spaces.\n  */\nconst isLetterDigitSpaceAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigit", "passed": 0}
{"task_id": "JavaScript/39", "prompt": "/*\n  priMeFiB returns n-th number that is a Fibonacci number and it's also prime.\n  >>> priMeFiB(1)\n  2\n  >>> priMeFiB(2)\n  3\n  >>> priMeFiB(3)\n  5\n  >>> priMeFiB(4)\n  13\n  >>> priMeFiB(5)\n  89\n  */\nconst priMeFiB = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "priMeFiB", "gc": "<|endoftext|>/*\n  priMeFiB returns n-th number that is a Fibonacci number and it's also prime.\n  >>> priMeFiB(1)\n  2\n  >>> priMeFiB(2)\n  3\n  >>> priMeFiB(3)\n  5\n  >>> priMeFiB(4)\n  13\n  >>> priMeFiB(5)\n  89\n  */\nconst priMeFiB = (n) => {\n  if (n < 2) return n;\n  const a = priMeFiB(n - 1);\n  const b = priMeFiB(n - 2);\n  return a + b;\n};\n\n/*\n  priMeFiB returns n-th number that is a Fibonacci number and it's also prime.\n  >>> priMeFiB(10)\n  2\n  >>> priMeFiB(11)\n  3\n  >>> priMeFiB(12)\n  5\n  >>> priMeFiB(13)\n  8\n  >>> priMeFiB(14)\n  13\n  >>> priMeFiB(15)\n  21\n  >>> priMeFiB(16)\n  34\n  >>> priMeFiB(17)\n  55\n  >>> priMeFiB(18)\n  89\n  */\nconst priMeFiBPrime = (n) => {\n  if (n < 2) return n;\n  const a = priMeFiBPrime(n - 1);\n  const b = priMeFiBPrime(n - 2);\n  return a + b;\n};\n\n/*\n  priMeFiBPrime returns n-th number that is a Fibonacci number and it's also prime.\n  >>> priMeFiBPrime(10)\n  2\n  >>> priMeFiBPrime(11)\n  3\n  >>> priMeFiBPrime(12)\n  5\n  >>> priMeFiBPrime(13)\n  8\n  >>> priMeFiBPrime(14)\n  13\n  >>> priMeFiBPrime(15)\n  21\n  >>> priMeFiBPrime(16)\n  34\n  >>> priMeFiBPrime(17)\n  55\n  >>> priMeFiBPrime(18)\n  89\n  */\nconst priMeFiBPrimePrime = (n) => {\n  if (n < 2) return n;\n  const a = priMeFiBPrimePrime(n - 1);\n  const b = priMeFiBPrimePrime(n - 2);\n  return a + b;\n};\n\n/*\n  priMeFiBPrime returns n-th number that is a Fibonacci number and it's also prime.\n  >>> priMeFiBPrimePrime(10)\n  2\n  >>> priMeFiBPrimePrime(11)\n  3\n  >>> priMeFiBPrimePrime(12)\n  5\n  >>> priMeFiBPrimePrime(13)\n  8\n  >>> priMeFiBPrimePrime(14)\n  13\n  >>> priMeFiBPrimePrime(15)\n  21\n  >>> priMeFiBPrimePrime(16)\n  34\n  >>> priMeFiBPrimePrime(17)\n  55\n  >>> priMeFiBPrimePrime(18)\n  89\n  */\nconst priMeFiBPrimePrimePrime = (n) => {\n  if (n < 2) return n;\n  const a = priMeFiBPrimePrimePrime(n - 1);\n  const b = priMeFiBPrimePrimePrime(n - 2);\n  return a + b;\n};\n\n/*\n  priMeFiBPrime returns n-th number that is a Fibonacci number and it's also prime.\n  >>> priMeFiBPrimePrimePrime(10)\n  2\n  >>> priMeFiBPrimePrimePrime(11)\n  3\n  >>> priMeFiBPrimePrimePrime(12)\n  5\n  >>> priMeFiBPrimePrimePrime(13)\n  8\n  >>> priMeFiBPrimePrimePrime(14)\n  13\n  >>> priMeFiBPrimePrimePrime(15)\n  21\n  >>> priMeFiBPrimePrimePrime(16)\n  34\n  >>> priMeFiBPrimePrimePrime(17)\n  55\n  >>> priMeFiBPrimePrimePrime(18)\n  89\n  */\nconst priMeFiBPrimePrimePrime = (n) => {\n  if (n < 2) return n;\n  const a = priMeFiBPrimePrimePrimePrime(n - 1);\n  const b = priMeFiBPrimePrimePrimePrime(n - 2);\n  return a + b;\n};\n\n/*\n  priMeFiBPrime returns n-th number that is a Fibonacci number and it's also prime.\n  >>> priMeFiBPrimePrimePrimePrime(10)\n  2\n  >>> priMeFiBPrimePrimePrimePrime(11)\n  3\n  >>> priMeFiBPrimePrimePrimePrime(12)\n  5\n  >>> priMeFiBPrimePrimePrimePrime(13)\n  8\n  >>> priMeFiBPrimePrimePrimePrime(14)\n  13\n  >>> priMeFiBPrimePrimePrimePrime(15)\n  21\n  >>> priMeFiBPrimePrimePrimePrime(16)\n  34\n  >>> priMeFiBPrimePrimePrimePrime(17)\n  55\n  >>> priMeFiBPrimePrimePrimePrime(18)\n  89\n  */\nconst priMeFiBPrimePrimePrimePrime = (n) => {\n  if (n < 2) return n;\n  const a = priMeFiBPrimePrimePrimePrimePrime(n - 1);\n  const b = priMeFiBPrimePrimePrimePrimePrime(n - 2);\n  return a + b;\n};\n\n/*\n  priMeFiBPrime returns n-th number that is a Fibonacci number and it's also prime.\n  >>> priMeFiBPrimePrimePrimePrimePrime(10)\n  2\n  >>> priMeFiBPrimePrimePrimePrimePrime(11)\n  3\n  >>> priMeFiBPrimePrimePrimePrime(12)\n  5\n  >>> priMeFiBPrimePrimePrimePrime(13)\n  8\n  >>> priMeFiBPrimePrimePrimePrimePrime(14)\n  13\n  >>> priMeFiBPrimePrimePrimePrimePrime(15)\n  21\n  >>> priMeFiBPrimePrimePrimePrimePrime(16)\n  34\n  >>> priMeFiBPrimePrimePrimePrimePrime(17)\n  55\n  >>> priMeFiBPrimePrimePrimePrimePrime(18)\n  89\n  */\nconst priMeFiBPrimePrimePrimePrimePrime = (n) => {\n  if (n < 2) return n;\n  const a = priMeFiBPrimePrimePrimePrimePrimePri", "passed": 0}
{"task_id": "JavaScript/4", "prompt": "/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meaNAbsOlutedevIatioN([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meaNAbsOlutedevIatioN = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meaNAbsOlutedevIatioN", "gc": "<|endoftext|>/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meaNAbsOlutedevIatioN([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meaNAbsOlutedevIatioN = (numbers) => {\n  const n = numbers.length;\n  const mean = numbers.reduce((acc, x) => acc + x, 0) / n;\n  const deviations = numbers.map((x) => Math.abs(x - mean));\n  const meanDeviation = deviations.reduce((acc, x) => acc + x, 0) / n;\n  return Math.sqrt(meanDeviation);\n};\n\n/* For a given list of input numbers, calculate Mean Squared Deviation\n  around the mean of this dataset.\n  Mean Squared Deviation is the average of the squared difference\n  between each element and a centerpoint (mean in this case):\n  MSD = average | x - x_mean |^2\n  >>> meaNAbsOlutedevIatioN([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meaNAbsOlutedevIatioN2 = (numbers) => {\n  const n = numbers.length;\n  const mean = numbers.reduce((acc, x) => acc + x, 0) / n;\n  const deviations = numbers.map((x) => Math.abs(x - mean));\n  const meanDeviation = deviations.reduce((acc, x) => acc + x, 0) / n;\n  return Math.sqrt(meanDeviation * meanDeviation);\n};\n\n/* For a given list of input numbers, calculate Mean Squared Deviation\n  around the mean of this dataset.\n  Mean Squared Deviation is the average of the squared difference\n  between each element and a centerpoint (mean in this case):\n  MSD = average | x - x_mean |^2\n  >>> meaNAbsOlutedevIatioN([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meaNAbsOlutedevIatioN3 = (numbers) => {\n  const n = numbers.length;\n  const mean = numbers.reduce((acc, x) => acc + x, 0) / n;\n  const deviations = numbers.map((x) => Math.abs(x - mean));\n  const meanDeviation = deviations.reduce((acc, x) => acc + x, 0) / n;\n  return Math.sqrt(meanDeviation * meanDeviation * meanDeviation);\n};\n\n/* For a given list of input numbers, calculate Mean Squared Deviation\n  around the mean of this dataset.\n  Mean Squared Deviation is the average of the squared difference\n  between each element and a centerpoint (mean in this case):\n  MSD = average | x - x_mean |^2\n  >>> meaNAbsOlutedevIatioN([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meaNAbsOlutedevIatioN4 = (numbers) => {\n  const n = numbers.length;\n  const mean = numbers.reduce((acc, x) => acc + x, 0) / n;\n  const deviations = numbers.map((x) => Math.abs(x - mean));\n  const meanDeviation = deviations.reduce((acc, x) => acc + x, 0) / n;\n  return Math.sqrt(meanDeviation * meanDeviation * meanDeviation * meanDeviation);\n};\n\n/* For a given list of input numbers, calculate Mean Squared Deviation\n  around the mean of this dataset.\n  Mean Squared Deviation is the average of the squared difference\n  between each element and a centerpoint (mean in this case):\n  MSD = average | x - x_mean |^2\n  >>> meaNAbsOlutedevIatioN([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meaNAbsOlutedevIatioN5 = (numbers) => {\n  const n = numbers.length;\n  const mean = numbers.reduce((acc, x) => acc + x, 0) / n;\n  const deviations = numbers.map((x) => Math.abs(x - mean));\n  const meanDeviation = deviations.reduce((acc, x) => acc + x, 0) / n;\n  return Math.sqrt(meanDeviation * meanDeviation * meanDeviation * meanDeviation * meanDeviation);\n};\n\n/* For a given list of input numbers, calculate Mean Squared Deviation\n  around the mean of this dataset.\n  Mean Squared Deviation is the average of the squared difference\n  between each element and a centerpoint (mean in this case):\n  MSD = average | x - x_mean |^2\n  >>> meaNAbsOlutedevIatioN([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meaNAbsOlutedevIatioN6 = (numbers) => {\n  const n = numbers.length;\n  const mean = numbers.reduce((acc, x) => acc + x, 0) / n;\n  const deviations = numbers.map((x) => Math.abs(x - mean));\n  const meanDeviation = deviations.reduce((acc, x) => acc + x, 0) / n;\n  return Math.sqrt(meanDeviation * meanDeviation * meanDeviation * meanDeviation * meanDeviation * meanDeviation * meanDeviation);\n};\n\n/* For a given list of input numbers, calculate Mean Squared Deviation\n  around the mean of this dataset.\n  Mean Squared Deviation is the average of the squared difference\n  between each element and a centerpoint (mean in this case):\n  MSD = average | x - x_mean |^2\n  >>> meaNAbsOlutedevIatioN([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meaNAbsOlutedevIatioN7 = (numbers) => {\n  const n = numbers.length;\n  const mean = numbers.reduce((acc, x) => acc + x, 0) / n;\n  const deviations = numbers.map((x) => Math.abs(x - mean));\n  const meanDeviation = deviations.reduce((acc, x) => acc + x, 0) / n;\n  return Math.sqrt(meanDeviation * meanDeviation * meanDeviation * meanDeviation * meanDeviation * meanDeviation * meanDeviation * meanDeviation * meanDeviation);\n};\n\n/* For a given list of input numbers, calculate Mean Squared Deviation\n  around the mean of this dataset.\n  Mean Squared Deviation is the average of the squared difference\n  between each element and a centerpoint (mean in this case):\n  MSD = average | x - x_mean |^2\n  >>> meaNAbsOlutedevIatioN([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meaNAbsOlutedevIatioN8 = (numbers) => {\n  const n = numbers.length;\n  const mean = numbers.reduce((acc, x) => acc + x, 0) / n;\n  const deviations = numbers.map((x) => Math.abs(x - mean));\n  const meanDeviation = deviations.reduce((acc, x) => acc + x, 0) / n;\n  return Math.sqrt(meanDeviation * meanDeviation * meanDeviation * meanDeviation * meanDeviation * meanDeviation * meanDeviation * meanDeviation * meanDeviation * meanDeviation * meanDeviation * meanDeviation * meanDeviation);\n};\n\n/* For a given list of input numbers, calculate Mean Squared Deviation\n  around the mean of this dataset.\n  Mean Squared Deviation is the average of the squared difference\n  between each element and a centerpoint (mean in this case):", "passed": 0}
{"task_id": "JavaScript/40", "prompt": "/*\n  triPlessumTozerO takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triPlessumTozerO([1, 3, 5, 0])\n  false\n  >>> triPlessumTozerO([1, 3, -2, 1])\n  true\n  >>> triPlessumTozerO([1, 2, 3, 7])\n  false\n  >>> triPlessumTozerO([2, 4, -5, 3, 9, 7])\n  true\n  >>> triPlessumTozerO([1])\n  false\n  */\nconst triPlessumTozerO = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triPlessumTozerO", "gc": "<|endoftext|>/*\n  triPlessumTozerO takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triPlessumTozerO([1, 3, 5, 0])\n  false\n  >>> triPlessumTozerO([1, 3, -2, 1])\n  true\n  >>> triPlessumTozerO([1, 2, 3, 7])\n  false\n  >>> triPlessumTozerO([2, 4, -5, 3, 9, 7])\n  true\n  >>> triPlessumTozerO([1])\n  false\n  */\nconst triPlessumTozerO = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  triPlessumTozerO takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triPlessumTozerO([1, 3, 5, 0])\n  false\n  >>> triPlessumTozerO([1, 3, -2, 1])\n  true\n  >>> triPlessumTozerO([1, 2, 3, 7])\n  false\n  >>> triPlessumTozerO([2, 4, -5, 3, 9, 7])\n  true\n  >>> triPlessumTozerO([1])\n  false\n  */\nconst triPlessumTozerO = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  triPlessumTozerO takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triPlessumTozerO([1, 3, 5, 0])\n  false\n  >>> triPlessumTozerO([1, 3, -2, 1])\n  true\n  >>> triPlessumTozerO([1, 2, 3, 7])\n  false\n  >>> triPlessumTozerO([2, 4, -5, 3, 9, 7])\n  true\n  >>> triPlessumTozerO([1])\n  false\n  */\nconst triPlessumTozerO = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  triPlessumTozerO takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triPlessumTozerO([1, 3, 5, 0])\n  false\n  >>> triPlessumTozerO([1, 3, -2, 1])\n  true\n  >>> triPlessumTozerO([1, 2, 3, 7])\n  false\n  >>> triPlessumTozerO([2, 4, -5, 3, 9, 7])\n  true\n  >>> triPlessumTozerO([1])\n  false\n  */\nconst triPlessumTozerO = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  triPlessumTozerO takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triPlessumTozerO([1, 3, 5, 0])\n  false\n  >>> triPlessumTozerO([1, 3, -2, 1])\n  true\n  >>> triPlessumTozerO([1, 2, 3, 7])\n  false\n  >>> triPlessumTozerO([2, 4, -5, 3, 9, 7])\n  true\n  >>> triPlessumTozerO([1])\n  false\n  */\nconst triPlessumTozerO = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  triPlessumTozerO takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triPlessumTozerO([1, 3, 5, 0])\n  false\n  >>> triPlessumTozerO([1, 3, -2, 1])\n  true\n  >>> triPlessumTozerO([1, 2, 3, 7])\n  false\n  >>> triPlessumTozerO([2, 4, -5, 3, 9, 7])\n  true\n  >>> triPlessumTozerO([1])\n  false\n  */\nconst triPlessumTozerO = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  triPlessumTozerO takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triPlessumTozerO([1, 3, 5, 0])\n  false\n  >>> triPlessumTozerO([1, 3, -2, 1])\n  true\n  >>> triPlessumTozerO([1, 2, 3, 7])\n  false\n  >>> triPlessumTozerO([2, 4, -5, 3, 9, 7])\n  true\n  >>> triPlessumTozerO([1])\n  false\n  */\nconst triPlessumTozerO = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  triPlessumTozerO takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triPlessumTozerO([1, 3, 5, 0])\n  false\n  >>> triPlessumTozerO([1, 3, -2, 1])\n  true\n  >>> triPlessumTozerO([1, 2, 3, 7])\n  false\n  >>> triPlessumTozerO([2, 4, -5, 3, 9, 7])\n  true\n  >>> triPlessumTozerO([1])\n  false\n  */\nconst triPlessumTozerO = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  triPlessumTozerO takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triPlessumTozerO([1, 3, 5, 0])\n  false\n  >>> triPlessumTozerO([1, 3, -2, 1])\n  true\n  >>> triPlessumTozerO([1, 2, 3, 7])\n  false\n  >>> triPlessumTozerO([2, 4, -5, 3, 9, 7])\n  true\n  >>> triPlessumTozerO([1])\n  false\n  */\nconst triPlessumTozerO = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  triPlessumTozerO takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triPlessumTozerO([1, 3, 5, 0])\n", "passed": 0}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carracecolliSioN = (n) => {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carracecolliSioN", "gc": "<|endoftext|>/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carracecolliSioN = (n) => {\n  let collisions = 0;\n  let carsLeft = n;\n  let carsRight = n;\n  let carsSpeed = 0;\n  let carsDirection = 0;\n  let carsDirection2 = 0;\n  let carsDirection3 = 0;\n  let carsDirection4 = 0;\n  let carsDirection5 = 0;\n  let carsDirection6 = 0;\n  let carsDirection7 = 0;\n  let carsDirection8 = 0;\n  let carsDirection9 = 0;\n  let carsDirection10 = 0;\n  let carsDirection11 = 0;\n  let carsDirection12 = 0;\n  let carsDirection13 = 0;\n  let carsDirection14 = 0;\n  let carsDirection15 = 0;\n  let carsDirection16 = 0;\n  let carsDirection17 = 0;\n  let carsDirection18 = 0;\n  let carsDirection19 = 0;\n  let carsDirection20 = 0;\n  let carsDirection21 = 0;\n  let carsDirection22 = 0;\n  let carsDirection23 = 0;\n  let carsDirection24 = 0;\n  let carsDirection25 = 0;\n  let carsDirection26 = 0;\n  let carsDirection27 = 0;\n  let carsDirection28 = 0;\n  let carsDirection29 = 0;\n  let carsDirection30 = 0;\n  let carsDirection31 = 0;\n  let carsDirection32 = 0;\n  let carsDirection33 = 0;\n  let carsDirection34 = 0;\n  let carsDirection35 = 0;\n  let carsDirection36 = 0;\n  let carsDirection37 = 0;\n  let carsDirection38 = 0;\n  let carsDirection39 = 0;\n  let carsDirection40 = 0;\n  let carsDirection41 = 0;\n  let carsDirection42 = 0;\n  let carsDirection43 = 0;\n  let carsDirection44 = 0;\n  let carsDirection45 = 0;\n  let carsDirection46 = 0;\n  let carsDirection47 = 0;\n  let carsDirection48 = 0;\n  let carsDirection49 = 0;\n  let carsDirection50 = 0;\n  let carsDirection51 = 0;\n  let carsDirection52 = 0;\n  let carsDirection53 = 0;\n  let carsDirection54 = 0;\n  let carsDirection55 = 0;\n  let carsDirection56 = 0;\n  let carsDirection57 = 0;\n  let carsDirection58 = 0;\n  let carsDirection59 = 0;\n  let carsDirection60 = 0;\n  let carsDirection61 = 0;\n  let carsDirection62 = 0;\n  let carsDirection63 = 0;\n  let carsDirection64 = 0;\n  let carsDirection65 = 0;\n  let carsDirection66 = 0;\n  let carsDirection67 = 0;\n  let carsDirection68 = 0;\n  let carsDirection69 = 0;\n  let carsDirection70 = 0;\n  let carsDirection71 = 0;\n  let carsDirection72 = 0;\n  let carsDirection73 = 0;\n  let carsDirection74 = 0;\n  let carsDirection75 = 0;\n  let carsDirection76 = 0;\n  let carsDirection77 = 0;\n  let carsDirection78 = 0;\n  let carsDirection79 = 0;\n  let carsDirection80 = 0;\n  let carsDirection81 = 0;\n  let carsDirection82 = 0;\n  let carsDirection83 = 0;\n  let carsDirection84 = 0;\n  let carsDirection85 = 0;\n  let carsDirection86 = 0;\n  let carsDirection87 = 0;\n  let carsDirection88 = 0;\n  let carsDirection89 = 0;\n  let carsDirection90 = 0;\n  let carsDirection91 = 0;\n  let carsDirection92 = 0;\n  let carsDirection93 = 0;\n  let carsDirection94 = 0;\n  let carsDirection95 = 0;\n  let carsDirection96 = 0;\n  let carsDirection97 = 0;\n  let carsDirection98 = 0;\n  let carsDirection99 = 0;\n  let carsDirection100 = 0;\n  let carsDirection101 = 0;\n  let carsDirection102 = 0;\n  let carsDirection103 = 0;\n  let carsDirection104 = 0;\n  let carsDirection105 = 0;\n  let carsDirection106 = 0;\n  let carsDirection107 = 0;\n  let carsDirection108 = 0;\n  let carsDirection109 = 0;\n  let carsDirection110 = 0;\n  let carsDirection111 = 0;\n  let carsDirection112 = 0;\n  let carsDirection113 = 0;\n  let carsDirection114 = 0;\n  let carsDirection115 = 0;\n  let carsDirection116 = 0;\n  let carsDirection117 = 0;\n  let carsDirection118 = 0;\n  let carsDirection119 = 0;\n  let carsDirection120 = 0;\n  let carsDirection121 = 0;\n  let carsDirection122 = 0;\n  let carsDirection123 = 0;\n  let carsDirection124 = 0;\n  let carsDirection125 = 0;\n  let carsDirection126 = 0;\n  let carsDirection127 = 0;\n  let carsDirection128 = 0;\n  let carsDirection129 = 0;\n  let carsDirection130 = 0;\n  let carsDirection131 = 0;\n  let carsDirection132 = 0;\n  let carsDirection133 = 0;\n  let carsDirection134 = 0;\n  let carsDirection135 = 0;\n  let carsDirection136 = 0;\n  let carsDirection137 = 0;\n  let carsDirection138 = 0;\n  let carsDirection139 = 0;\n  let carsDirection140 = 0;\n  let carsDirection141 = 0;\n  let carsDirection142 = 0;\n  let carsDirection143 = 0;\n  let carsDirection144 = 0;\n  let carsDirection145 = 0;\n  let carsDirection146 = 0;\n  let carsDirection147 = 0;\n  let carsDirection148 = 0;\n  let carsDirection149 = 0;\n  let carsDirection150 = 0;\n  let carsDirection151 = 0;\n  let carsDirection152 = 0;\n  let carsDirection153 = 0;\n  let carsDirection154 = 0;\n  let carsDirection155 = 0;\n  let carsDirection156 = 0;\n  let carsDirection157 = 0;\n  let carsDirection158 = 0;\n  let carsDirection159 = 0;\n  let carsDirection160 = 0;\n  let carsDirection161 = 0;\n  let carsDirection162 = 0;\n  let carsDirection163 = 0;\n  let carsDirection164 = 0;\n  let carsDirection165 = 0;\n  let carsDirection166 = 0;\n  let carsDirection167 = 0;\n  let carsDirection168 = 0;\n  let carsDirection169 = 0;\n  let carsDirection170 = 0;\n  let carsDirection171 = 0;\n  let carsDirection172 = 0;\n  let carsDirection173 = 0;\n  let carsDirection174 = 0;\n  let carsDirection175 = 0;\n  let carsDirection176 = 0;\n  let carsDirection177 = 0;\n  let carsDirection178 = 0;\n  let carsDirection179 = 0;\n  let carsDirection180 = 0;\n  let carsDirection181 = 0;\n  let carsDirection182 = 0;\n  let carsDirection183 = 0;\n  let carsDirection184 = 0;\n  let carsDirection185 = 0;\n  let carsDirection186 = 0;\n  let carsDirection187 = 0;\n  let carsDirection188 = 0;\n  let carsDirection189 = 0;\n  let carsDirection190 = 0;\n  let carsDirection191 = 0;\n  let carsDirection192 = 0;\n  let carsDirection193 = 0;\n  let carsDirection194 = 0;\n  let carsDirection195 = 0;", "passed": 0}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements incremented by 1.\n  >>> incRLisT([1, 2, 3])\n  [2, 3, 4]\n  >>> incRLisT([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incRLisT = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incRLisT", "gc": "<|endoftext|>/*Return list with elements incremented by 1.\n  >>> incRLisT([1, 2, 3])\n  [2, 3, 4]\n  >>> incRLisT([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incRLisT = (l) => {\n  let i = l.length - 1;\n  let res = new Array(l.length);\n  while (i >= 0) {\n    res[i] = l[i + 1];\n    i--;\n  }\n  return res;\n};\n\n/**\n * Return list with elements decremented by 1.\n  >>> decRLisT([1, 2, 3])\n  [2, 3, 4]\n  >>> decRLisT([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 3, 3, 9, 0, 123]\n  */\nconst decRLisT = (l) => {\n  let i = l.length - 1;\n  let res = new Array(l.length);\n  while (i >= 0) {\n    res[i] = l[i];\n    i--;\n  }\n  return res;\n};\n\n/**\n * Return list with elements incremented by 1.\n  >>> incRLisU([1, 2, 3])\n  [2, 3, 4]\n  >>> incRLisU([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incRLisU = (l) => {\n  let i = l.length - 1;\n  let res = new Array(l.length);\n  while (i >= 0) {\n    res[i] = l[i + 1];\n    i--;\n  }\n  return res;\n};\n\n/**\n * Return list with elements decremented by 1.\n  >>> decRLisU([1, 2, 3])\n  [2, 3, 4]\n  >>> decRLisU([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 3, 3, 9, 0, 123]\n  */\nconst decRLisU = (l) => {\n  let i = l.length - 1;\n  let res = new Array(l.length);\n  while (i >= 0) {\n    res[i] = l[i];\n    i--;\n  }\n  return res;\n};\n\n/**\n * Return list with elements incremented by 1.\n  >>> incRLisB([1, 2, 3])\n  [2, 3, 4]\n  >>> incRLisB([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incRLisB = (l) => {\n  let i = l.length - 1;\n  let res = new Array(l.length);\n  while (i >= 0) {\n    res[i] = l[i + 1];\n    i--;\n  }\n  return res;\n};\n\n/**\n * Return list with elements decremented by 1.\n  >>> decRLisB([1, 2, 3])\n  [2, 3, 4]\n  >>> decRLisB([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 3, 3, 9, 0, 123]\n  */\nconst decRLisB = (l) => {\n  let i = l.length - 1;\n  let res = new Array(l.length);\n  while (i >= 0) {\n    res[i] = l[i];\n    i--;\n  }\n  return res;\n};\n\n/**\n * Return list with elements incremented by 1.\n  >>> incRLisS([1, 2, 3])\n  [2, 3, 4]\n  >>> incRLisS([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incRLisS = (l) => {\n  let i = l.length - 1;\n  let res = new Array(l.length);\n  while (i >= 0) {\n    res[i] = l[i + 1];\n    i--;\n  }\n  return res;\n};\n\n/**\n * Return list with elements decremented by 1.\n  >>> decRLisS([1, 2, 3])\n  [2, 3, 4]\n  >>> decRLisS([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 3, 3, 9, 0, 123]\n  */\nconst decRLisS = (l) => {\n  let i = l.length - 1;\n  let res = new Array(l.length);\n  while (i >= 0) {\n    res[i] = l[i];\n    i--;\n  }\n  return res;\n};\n\n/**\n * Return list with elements incremented by 1.\n  >>> incRLisB([1, 2, 3])\n  [2, 3, 4]\n  >>> incRLisB([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incRLisB = (l) => {\n  let i = l.length - 1;\n  let res = new Array(l.length);\n  while (i >= 0) {\n    res[i] = l[i + 1];\n    i--;\n  }\n  return res;\n};\n\n/**\n * Return list with elements decremented by 1.\n  >>> decRLisB([1, 2, 3])\n  [2, 3, 4]\n  >>> decRLisB([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 3, 3, 9, 0, 123]\n  */\nconst decRLisB = (l) => {\n  let i = l.length - 1;\n  let res = new Array(l.length);\n  while (i >= 0) {\n    res[i] = l[i];\n    i--;\n  }\n  return res;\n};\n\n/**\n * Return list with elements incremented by 1.\n  >>> incRLisU([1, 2, 3])\n  [2, 3, 4]\n  >>> incRLisU([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incRLisU = (l) => {\n  let i = l.length - 1;\n  let res = new Array(l.length);\n  while (i >= 0) {\n    res[i] = l[i + 1];\n    i--;\n  }\n  return res;\n};\n\n/**\n * Return list with elements decremented by 1.\n  >>> decRLisU([1, 2, 3])\n  [2, 3, 4]\n  >>> decRLisU([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 3, 3, 9, 0, 123]\n  */\nconst decRLisU = (l) => {\n  let i = l.length - 1;\n  let res = new Array(l.length);\n  while (i >= 0) {\n    res[i] = l[i];\n    i--;\n  }\n  return res;\n};\n\n/**\n * Return list with elements incremented by 1.\n  >>> incRLisB([1, 2, 3])\n  [2, 3, 4]\n  >>> incRLisB([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incRLisB = (l) => {\n  let i = l.length - 1;\n  let res = new Array(l.length);\n  while (i >= 0) {\n    res[i] = l[i + 1];\n    i--;\n  }\n  return res;\n};\n\n/**\n * Return list with elements decremented by 1.\n  >>> decRLisB([1, 2, 3])\n  [2, 3, 4]\n  >>> decRLisB([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 3, 3, 9, 0, 123]\n  */\nconst decRLisB = (l) => {\n  let i = l.length - 1;\n  let res = new Array(l.length);\n  while (i >= 0) {\n    res[i] = l[i];\n    i--;\n  }\n  return res;\n};\n\n/**\n * Return list with elements incremented by 1.\n  >>> incRLisS([1, 2, 3])\n  [2, 3, 4]\n  >>> incRLisS([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incRLisS = (l) => {\n  let i = l.length - 1;\n  let res = new Array(l.length);\n  while (i >= 0) {\n    res[i] = l[i + 1];\n    i--;\n  }\n  return res;\n};\n\n/**\n * Return list with elements decremented by 1.\n  >>> decRLisS([1, 2, 3])\n  [2, 3, 4]\n  >>> decRLisS([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 3, 3, 9, 0, 123]\n  */\nconst decRLisS = (l) => {\n  let i = l.length - 1;\n  let res = new Array(l.length);\n  while (i >= 0) {\n    res[i] = l[i];\n    i--;\n  }\n  return res;\n};\n\n/**\n * Return list ", "passed": 0}
{"task_id": "JavaScript/43", "prompt": "/*\n  paiRsSuMToZeRo takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> paiRsSuMToZeRo([1, 3, 5, 0])\n  false\n  >>> paiRsSuMToZeRo([1, 3, -2, 1])\n  false\n  >>> paiRsSuMToZeRo([1, 2, 3, 7])\n  false\n  >>> paiRsSuMToZeRo([2, 4, -5, 3, 5, 7])\n  true\n  >>> paiRsSuMToZeRo([1])\n  false\n  */\nconst paiRsSuMToZeRo = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "paiRsSuMToZeRo", "gc": "<|endoftext|>/*\n  paiRsSuMToZeRo takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> paiRsSuMToZeRo([1, 3, 5, 0])\n  false\n  >>> paiRsSuMToZeRo([1, 3, -2, 1])\n  false\n  >>> paiRsSuMToZeRo([1, 2, 3, 7])\n  false\n  >>> paiRsSuMToZeRo([2, 4, -5, 3, 5, 7])\n  true\n  >>> paiRsSuMToZeRo([1])\n  false\n  */\nconst paiRsSuMToZeRo = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n};\n\n/**\n  paiRsSuMToZe takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> paiRsSuMToZe([1, 3, 5, 0])\n  false\n  >>> paiRsSuMToZe([1, 3, -2, 1])\n  false\n  >>> paiRsSuMToZe([1, 2, 3, 7])\n  false\n  >>> paiRsSuMToZe([2, 4, -5, 3, 5, 7])\n  true\n  >>> paiRsSuMToZe([1])\n  false\n  */\nconst paiRsSuMToZe = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n};\n\n/**\n  paiRsSuMToZe takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> paiRsSuMToZe([1, 3, 5, 0])\n  false\n  >>> paiRsSuMToZe([1, 3, -2, 1])\n  false\n  >>> paiRsSuMToZe([1, 2, 3, 7])\n  false\n  >>> paiRsSuMToZe([2, 4, -5, 3, 5, 7])\n  true\n  >>> paiRsSuMToZe([1])\n  false\n  */\nconst paiRsSuMToZe = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n};\n\n/**\n  paiRsSuMToZe takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> paiRsSuMToZe([1, 3, 5, 0])\n  false\n  >>> paiRsSuMToZe([1, 3, -2, 1])\n  false\n  >>> paiRsSuMToZe([1, 2, 3, 7])\n  false\n  >>> paiRsSuMToZe([2, 4, -5, 3, 5, 7])\n  true\n  >>> paiRsSuMToZe([1])\n  false\n  */\nconst paiRsSuMToZe = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n};\n\n/**\n  paiRsSuMToZe takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> paiRsSuMToZe([1, 3, 5, 0])\n  false\n  >>> paiRsSuMToZe([1, 3, -2, 1])\n  false\n  >>> paiRsSuMToZe([1, 2, 3, 7])\n  false\n  >>> paiRsSuMToZe([2, 4, -5, 3, 5, 7])\n  true\n  >>> paiRsSuMToZe([1])\n  false\n  */\nconst paiRsSuMToZe = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n};\n\n/**\n  paiRsSuMToZe takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> paiRsSuMToZe([1, 3, 5, 0])\n  false\n  >>> paiRsSuMToZe([1, 3, -2, 1])\n  false\n  >>> paiRsSuMToZe([1, 2, 3, 7])\n  false\n  >>> paiRsSuMToZe([2, 4, -5, 3, 5, 7])\n  true\n  >>> paiRsSuMToZe([1])\n  false\n  */\nconst paiRsSuMToZe = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n};\n\n/**\n  paiRsSuMToZe takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> paiRsSuMToZe([1, 3, 5, 0])\n  false\n  >>> paiRsSuMToZe([1, 3, -2, 1])\n  false\n  >>> paiRsSuMToZe([1, 2, 3, 7])\n  false\n  >>> paiRsSuMToZe([2, 4, -5, 3, 5, 7])\n  true\n  >>> paiRsSuMToZe([1])\n  false\n  */\nconst paiRsSuMToZe = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n};\n\n/**\n  paiRsSuMToZe takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> paiRsSuMToZe([1, 3, 5, 0])\n  false\n  >>> paiRsSuMToZe([1, 3, -2, 1])\n  false\n  >>> paiRsSuMToZe([1, 2, 3, 7])\n  false\n  >>> paiRsSuMToZe([2, 4, -5, 3, 5, 7])\n  true\n  >>> paiRsSuMToZe([1])\n  false\n  */\nconst paiRsSuMToZe = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n};\n\n/**\n  paiRsSuMToZe takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> paiRsSuMToZe([1, 3, 5, 0])\n  false\n  >>> paiRsSuMToZe([1, 3, -2, 1])\n  false\n  >>> paiRsSuMToZe([1, 2, 3, 7])\n  false\n  >>> paiRsSuMToZe([2, 4, -5, 3, 5, 7])\n  true\n  >>> paiRsSuMToZe([1])\n  false\n  */\nconst paiRsSuMToZe = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return ", "passed": 0}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> chaNgeBAse(8, 3)\n  '22'\n  >>> chaNgeBAse(8, 2)\n  '1000'\n  >>> chaNgeBAse(7, 2)\n  '111'\n  */\nconst chaNgeBAse = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "chaNgeBAse", "gc": "<|endoftext|>/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> chaNgeBAse(8, 3)\n  '22'\n  >>> chaNgeBAse(8, 2)\n  '1000'\n  >>> chaNgeBAse(7, 2)\n  '111'\n  */\nconst chaNgeBAse = (x, base) => {\n  const str = ''\n  let i = 0\n  let j = 0\n  let k = 0\n  let len = 0\n  let len2 = 0\n  let len3 = 0\n  let len4 = 0\n  let len5 = 0\n  let len6 = 0\n  let len7 = 0\n  let len8 = 0\n  let len9 = 0\n  let len10 = 0\n  let len11 = 0\n  let len12 = 0\n  let len13 = 0\n  let len14 = 0\n  let len15 = 0\n  let len16 = 0\n  let len17 = 0\n  let len18 = 0\n  let len19 = 0\n  let len20 = 0\n  let len21 = 0\n  let len22 = 0\n  let len23 = 0\n  let len24 = 0\n  let len25 = 0\n  let len26 = 0\n  let len27 = 0\n  let len28 = 0\n  let len29 = 0\n  let len30 = 0\n  let len31 = 0\n  let len32 = 0\n  let len33 = 0\n  let len34 = 0\n  let len35 = 0\n  let len36 = 0\n  let len37 = 0\n  let len38 = 0\n  let len39 = 0\n  let len40 = 0\n  let len41 = 0\n  let len42 = 0\n  let len43 = 0\n  let len44 = 0\n  let len45 = 0\n  let len46 = 0\n  let len47 = 0\n  let len48 = 0\n  let len49 = 0\n  let len50 = 0\n  let len51 = 0\n  let len52 = 0\n  let len53 = 0\n  let len54 = 0\n  let len55 = 0\n  let len56 = 0\n  let len57 = 0\n  let len58 = 0\n  let len59 = 0\n  let len60 = 0\n  let len61 = 0\n  let len62 = 0\n  let len63 = 0\n  let len64 = 0\n  let len65 = 0\n  let len66 = 0\n  let len67 = 0\n  let len68 = 0\n  let len69 = 0\n  let len70 = 0\n  let len71 = 0\n  let len72 = 0\n  let len73 = 0\n  let len74 = 0\n  let len75 = 0\n  let len76 = 0\n  let len77 = 0\n  let len78 = 0\n  let len79 = 0\n  let len80 = 0\n  let len81 = 0\n  let len82 = 0\n  let len83 = 0\n  let len84 = 0\n  let len85 = 0\n  let len86 = 0\n  let len87 = 0\n  let len88 = 0\n  let len89 = 0\n  let len90 = 0\n  let len91 = 0\n  let len92 = 0\n  let len93 = 0\n  let len94 = 0\n  let len95 = 0\n  let len96 = 0\n  let len97 = 0\n  let len98 = 0\n  let len99 = 0\n  let len100 = 0\n  let len101 = 0\n  let len102 = 0\n  let len103 = 0\n  let len104 = 0\n  let len105 = 0\n  let len106 = 0\n  let len107 = 0\n  let len108 = 0\n  let len109 = 0\n  let len110 = 0\n  let len111 = 0\n  let len112 = 0\n  let len113 = 0\n  let len114 = 0\n  let len115 = 0\n  let len116 = 0\n  let len117 = 0\n  let len118 = 0\n  let len119 = 0\n  let len120 = 0\n  let len121 = 0\n  let len122 = 0\n  let len123 = 0\n  let len124 = 0\n  let len125 = 0\n  let len126 = 0\n  let len127 = 0\n  let len128 = 0\n  let len129 = 0\n  let len130 = 0\n  let len131 = 0\n  let len132 = 0\n  let len133 = 0\n  let len134 = 0\n  let len135 = 0\n  let len136 = 0\n  let len137 = 0\n  let len138 = 0\n  let len139 = 0\n  let len140 = 0\n  let len141 = 0\n  let len142 = 0\n  let len143 = 0\n  let len144 = 0\n  let len145 = 0\n  let len146 = 0\n  let len147 = 0\n  let len148 = 0\n  let len149 = 0\n  let len150 = 0\n  let len151 = 0\n  let len152 = 0\n  let len153 = 0\n  let len154 = 0\n  let len155 = 0\n  let len156 = 0\n  let len157 = 0\n  let len158 = 0\n  let len159 = 0\n  let len160 = 0\n  let len161 = 0\n  let len162 = 0\n  let len163 = 0\n  let len164 = 0\n  let len165 = 0\n  let len166 = 0\n  let len167 = 0\n  let len168 = 0\n  let len169 = 0\n  let len170 = 0\n  let len171 = 0\n  let len172 = 0\n  let len173 = 0\n  let len174 = 0\n  let len175 = 0\n  let len176 = 0\n  let len177 = 0\n  let len178 = 0\n  let len179 = 0\n  let len180 = 0\n  let len181 = 0\n  let len182 = 0\n  let len183 = 0\n  let len184 = 0\n  let len185 = 0\n  let len186 = 0\n  let len187 = 0\n  let len188 = 0\n  let len189 = 0\n  let len190 = 0\n  let len191 = 0\n  let len192 = 0\n  let len193 = 0\n  let len194 = 0\n  let len195 = 0\n  let len196 = 0\n  let len197 = 0\n  let len198 = 0\n  let len199 = 0\n  let len200 = 0\n  let len201 = 0\n  let len202 = 0\n  let len203 = 0\n  let len204 = 0\n  let len205 = 0\n  let len206 = 0\n  let len207 = 0\n  let len208 = 0\n  let len209 = 0\n  let len210 = 0\n  let len211 = 0\n  let len212 = 0\n  let len213 = 0\n  let len214 = 0\n  let len215 = 0\n  let len216 = 0\n  let len217 = 0\n  let len218 = 0\n  let len219 = 0\n  let len220 = 0\n  let len221 = 0\n  let len222 = 0\n  let len223 = 0\n  let len224 = 0\n  let len225 = 0\n  let len226 = 0\n  let len227 = 0\n  let len228 = 0\n  let len229 = 0\n  let len230 = 0\n  let len231 = 0\n  let len232 = 0\n  let len233 = 0\n  let len234 = 0\n  let len235 = 0\n  let len236 = 0\n  let len237 = 0\n  let len238 = 0\n  let len239 = 0\n  let len240 = 0\n  let len241 = 0\n  let len242 = 0\n  let len243 = 0\n  let len244 = 0\n  let len245 = 0\n  let len246 = 0\n  let len247 = 0\n  let len248 = 0\n  let len249 = 0\n  let len250 = 0\n  let len251 = 0\n  let len252 = 0\n  let len253 = 0\n  let len254 = 0\n  let len255 = 0\n  let len256 = 0\n  let len257 = 0\n  let len258 = 0\n  let len259 = 0\n  let len260 = 0\n  let len261 = 0\n  let len262 = 0\n  let len263 = 0\n  let len264 = 0\n  let len265 = 0\n  let len266 = 0\n  let len267 = 0\n  let len268 = 0\n  let len269 = 0\n  let len270 = 0\n  let len271 = 0\n  let len272 = 0\n  let len273 = 0\n  let len274 = 0\n  let len275 = 0\n  let len276 = 0\n  let len277 = 0\n  let len278 = 0\n  let len279 = 0\n  let len280 = 0\n  let len281", "passed": 0}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(5, 3)\n  7.5\n  */\nconst triAnglEArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triAnglEArea", "gc": "<|endoftext|>/*Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(5, 3)\n  7.5\n  */\nconst triAnglEArea = (a, h) => {\n  return Math.sqrt(a * a + h * h);\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triAnglEArea(6, 3)\n  11.5\n  */\nconst triAnglEArea = (a, l) => {\n  return Math.sqrt(a * a + l * l);\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triAnglEArea(6, 4)\n  12.5\n  */\nconst triAnglEArea = (a, l) => {\n  return Math.sqrt(a * a + l * l);\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triAnglEArea(6, 5)\n  15.5\n  */\nconst triAnglEArea = (a, l) => {\n  return Math.sqrt(a * a + l * l);\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triAnglEArea(6, 6)\n  20.5\n  */\nconst triAnglEArea = (a, l) => {\n  return Math.sqrt(a * a + l * l);\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triAnglEArea(6, 7)\n  25.5\n  */\nconst triAnglEArea = (a, l) => {\n  return Math.sqrt(a * a + l * l);\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triAnglEArea(6, 8)\n  30.5\n  */\nconst triAnglEArea = (a, l) => {\n  return Math.sqrt(a * a + l * l);\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triAnglEArea(6, 9)\n  35.5\n  */\nconst triAnglEArea = (a, l) => {\n  return Math.sqrt(a * a + l * l);\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triAnglEArea(6, 10)\n  40.5\n  */\nconst triAnglEArea = (a, l) => {\n  return Math.sqrt(a * a + l * l);\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triAnglEArea(6, 11)\n  45.5\n  */\nconst triAnglEArea = (a, l) => {\n  return Math.sqrt(a * a + l * l);\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triAnglEArea(6, 12)\n  50\n  */\nconst triAnglEArea = (a, l) => {\n  return Math.sqrt(a * a + l * l);\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triAnglEArea(6, 13)\n  55\n  */\nconst triAnglEArea = (a, l) => {\n  return Math.sqrt(a * a + l * l);\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triAnglEArea(6, 14)\n  60\n  */\nconst triAnglEArea = (a, l) => {\n  return Math.sqrt(a * a + l * l);\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triAnglEArea(6, 15)\n  65\n  */\nconst triAnglEArea = (a, l) => {\n  return Math.sqrt(a * a + l * l);\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triAnglEArea(6, 16)\n  70\n  */\nconst triAnglEArea = (a, l) => {\n  return Math.sqrt(a * a + l * l);\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triAnglEArea(6, 17)\n  75\n  */\nconst triAnglEArea = (a, l) => {\n  return Math.sqrt(a * a + l * l);\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triAnglEArea(6, 18)\n  80\n  */\nconst triAnglEArea = (a, l) => {\n  return Math.sqrt(a * a + l * l);\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triAnglEArea(6, 19)\n  85\n  */\nconst triAnglEArea = (a, l) => {\n  return Math.sqrt(a * a + l * l);\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triAnglEArea(6, 20)\n  90\n  */\nconst triAnglEArea = (a, l) => {\n  return Math.sqrt(a * a + l * l);\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triAnglEArea(6, 21)\n  95\n  */\nconst triAnglEArea = (a, l) => {\n  return Math.sqrt(a * a + l * l);\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triAnglEArea(6, 22)\n  100\n  */\nconst triAnglEArea = (a, l) => {\n  return Math.sqrt(a * a + l * l);\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triAnglEArea(6, 23)\n  105\n  */\nconst triAnglEArea = (a, l) => {\n  return Math.sqrt(a * a + l * l);\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triAnglEArea(6, 24)\n  110\n  */\nconst triAnglEArea = (a, l) => {\n  return Math.sqrt(a * a + l * l);\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triAnglEArea(6, 25)\n  115\n  */\nconst triAnglEArea = (a, l) => {\n  return Math.sqrt(a * a + l * l);\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triAnglEArea(6, 26)\n  120\n  */\nconst triAnglEArea = (a, l) => {\n  return Math.sqrt(a * a + l * l);\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triAnglEArea(6, 27)\n  125\n  */\nconst triAnglEArea = (a, l) => {\n  return Math.sqrt(a * a + l * l);\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triAnglEArea(6, 28)\n  130\n  */\nconst triAnglEArea = (a, l) => {\n  return Math.sqrt(a * a + l * l);\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triAnglEArea(6, 29)\n  135\n  */\nconst triAnglEArea = (a, l) => {\n  return Math.sqrt(a * a + l * l);\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triAnglEArea(6, 30)\n  140\n  */\nconst triAnglEArea = (a, l) => {\n  return Math.sqrt(a * a + l * l);\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triAnglEArea(6, 31)\n  145\n  */\nconst triAnglEArea = (a, l) => {", "passed": 0}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "gc": "<|endoftext|>/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n <= 0) {\n    return 0;\n  }\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n};\n\n/*\n  Write a function to compute the Fibonacci number sequence that starts with 0 and ends with n-1.\n  >>> fib(n = 5)\n  [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]\n  >>> fib(n = 6)\n  [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229, 832040, 1346269, 2178309, 3524578, 5702887, 9227413, 14930352, 24157817, 39088169]\n  >>> fib(n = 7)\n  [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229, 832040, 1346269, 2178309, 3524578, 5702887, 9227413, 14930352, 24157817, 39088169]\n  >>> fib(n = 8)\n  [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229, 832040, 1346269, 2178309, 3524578, 5702887, 9227413, 14930352, 24157817, 39088169]\n  >>> fib(n = 9)\n  [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229, 832040, 1346269, 2178309, 3524578, 5702887, 9227413, 14930352, 24157817, 39088169]\n  >>> fib(n = 10)\n  [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229, 832040, 1346269, 2178309, 3524578, 5702887, 9227413, 14930352, 24157817, 39088169]\n  >>> fib(n = 11)\n  [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229, 832040, 1346269, 2178309, 3524578, 5702887, 9227413, 14930352, 24157817, 39088169]\n  >>> fib(n = 12)\n  [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229, 832040, 1346269, 2178309, 3524578, 5702887, 9227413, 14930352, 24157817, 39088169]\n  >>> fib(n = 13)\n  [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229, 832040, 1346269, 2178309, 3524578, 5702887, 9227413, 14930352, 24157817, 39088169]\n  >>> fib(n = 14)\n  [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229, 832040, 1346269, 2178309, 3524578, 5702887, 9227413, 14930352, 24157817, 39088169]\n  >>> fib(n = 15)\n  [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229, 832040, 1346269, 2178309, 3524578, 5702887, 9227413, 14930352, 24157817, 39088169]\n  >>> fib(n = 16)\n  [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229, 832040, 1346269, 2178309, 3524578, 5702887, 9227413, 14930352, 24157817, 39088169]\n  >>> fib(n = 17)\n  [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229, 832040, 1346269, 2178309, 3524578, 5702887, 9227413, 14930352, 24157817, 39088169]\n  >>> fib(n = 18)\n  [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229, 832040, 1346269, 2178309, 3524578, 5702887, 9227413, 14930352, 24157817, 39088169]\n  >>> fib(n = 19)\n  [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 1094", "passed": 0}
{"task_id": "JavaScript/47", "prompt": "/*Return medIan of elements in the list l.\n  >>> medIan([3, 1, 2, 4, 5])\n  3\n  >>> medIan([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medIan = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "medIan", "gc": "<|endoftext|>/*Return medIan of elements in the list l.\n  >>> medIan([3, 1, 2, 4, 5])\n  3\n  >>> medIan([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medIan = (l) => {\n  let sum = 0;\n  let count = 0;\n  let max = 0;\n  l.forEach((el) => {\n    if (el > max) {\n      max = el;\n    }\n    if (el === max) {\n      count++;\n    } else {\n      sum += el;\n    }\n  });\n  return sum / count;\n};\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  let sum = 0;\n  let count = 0;\n  let max = 0;\n  l.forEach((el) => {\n    if (el > max) {\n      max = el;\n    }\n    if (el === max) {\n      count++;\n    } else {\n      sum += el;\n    }\n  });\n  return sum / count;\n};\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  3\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst mode = (l) => {\n  let max = 0;\n  let count = 0;\n  let maxCount = 0;\n  let maxSum = 0;\n  let maxMode = 0;\n  l.forEach((el) => {\n    if (el > max) {\n      max = el;\n    }\n    if (el === max) {\n      count++;\n    } else {\n      sum += el;\n    }\n  });\n  maxCount = count;\n  maxSum = sum;\n  maxMode = max;\n  return maxMode;\n};\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  3\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst mode = (l) => {\n  let max = 0;\n  let count = 0;\n  let maxCount = 0;\n  let maxSum = 0;\n  let maxMode = 0;\n  l.forEach((el) => {\n    if (el > max) {\n      max = el;\n    }\n    if (el === max) {\n      count++;\n    } else {\n      sum += el;\n    }\n  });\n  maxCount = count;\n  maxSum = sum;\n  maxMode = max;\n  return maxMode;\n};\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  3\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst mode = (l) => {\n  let max = 0;\n  let count = 0;\n  let maxCount = 0;\n  let maxSum = 0;\n  let maxMode = 0;\n  l.forEach((el) => {\n    if (el > max) {\n      max = el;\n    }\n    if (el === max) {\n      count++;\n    } else {\n      sum += el;\n    }\n  });\n  maxCount = count;\n  maxSum = sum;\n  maxMode = max;\n  return maxMode;\n};\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  3\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst mode = (l) => {\n  let max = 0;\n  let count = 0;\n  let maxCount = 0;\n  let maxSum = 0;\n  let maxMode = 0;\n  l.forEach((el) => {\n    if (el > max) {\n      max = el;\n    }\n    if (el === max) {\n      count++;\n    } else {\n      sum += el;\n    }\n  });\n  maxCount = count;\n  maxSum = sum;\n  maxMode = max;\n  return maxMode;\n};\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  3\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst mode = (l) => {\n  let max = 0;\n  let count = 0;\n  let maxCount = 0;\n  let maxSum = 0;\n  let maxMode = 0;\n  l.forEach((el) => {\n    if (el > max) {\n      max = el;\n    }\n    if (el === max) {\n      count++;\n    } else {\n      sum += el;\n    }\n  });\n  maxCount = count;\n  maxSum = sum;\n  maxMode = max;\n  return maxMode;\n};\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  3\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst mode = (l) => {\n  let max = 0;\n  let count = 0;\n  let maxCount = 0;\n  let maxSum = 0;\n  let maxMode = 0;\n  l.forEach((el) => {\n    if (el > max) {\n      max = el;\n    }\n    if (el === max) {\n      count++;\n    } else {\n      sum += el;\n    }\n  });\n  maxCount = count;\n  maxSum = sum;\n  maxMode = max;\n  return maxMode;\n};\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  3\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst mode = (l) => {\n  let max = 0;\n  let count = 0;\n  let maxCount = 0;\n  let maxSum = 0;\n  let maxMode = 0;\n  l.forEach((el) => {\n    if (el > max) {\n      max = el;\n    }\n    if (el === max) {\n      count++;\n    } else {\n      sum += el;\n    }\n  });\n  maxCount = count;\n  maxSum = sum;\n  maxMode = max;\n  return maxMode;\n};\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  3\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst mode = (l) => {\n  let max = 0;\n  let count = 0;\n  let maxCount = 0;\n  let maxSum = 0;\n  let maxMode = 0;\n  l.forEach((el) => {\n    if (el > max) {\n      max = el;\n    }\n    if (el === max) {\n      count++;\n    } else {\n      sum += el;\n    }\n  });\n  maxCount = count;\n  maxSum = sum;\n  maxMode = max;\n  return maxMode;\n};\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  3\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst mode = (l) => {\n  let max = 0;\n  let count = 0;\n  let maxCount = 0;\n  let maxSum = 0;\n  let maxMode = 0;\n  l.forEach((el) => {\n    if (el > max) {\n      max = el;\n    }\n    if (el === max) {\n      count++;\n    } else {\n      sum += el;\n    }\n  });\n  maxCount = count;\n  maxSum = sum;\n  maxMode = max;\n  return maxMode;\n};\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  3\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst mode = (l) => {\n  let max = 0;\n  let count = 0;\n  let maxCount = 0;\n  let maxSum = 0;\n  let maxMode = 0;\n  l.forEach((el) => {\n    if (el > max) {\n      max = el;\n    }\n    if (el === max) {\n      count++;\n    } else {\n      sum += el;\n    }\n  });\n  maxCount = count;\n", "passed": 0}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if given string is a palindrome\n  >>> isPAlinDrome('')\n  true\n  >>> isPAlinDrome('aba')\n  true\n  >>> isPAlinDrome('aaaaa')\n  true\n  >>> isPAlinDrome('zbcd')\n  false\n  */\nconst isPAlinDrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPAlinDrome", "gc": "<|endoftext|>/*\n  Checks if given string is a palindrome\n  >>> isPAlinDrome('')\n  true\n  >>> isPAlinDrome('aba')\n  true\n  >>> isPAlinDrome('aaaaa')\n  true\n  >>> isPAlinDrome('zbcd')\n  false\n  */\nconst isPAlinDrome = (text) => {\n  let reversed = text.reverse();\n  let reversedString = reversed.toString();\n  let reversedStringLength = reversedString.length;\n  let reversedStringReversed = reversedString.split('').reverse().join('');\n  let reversedStringReversedLength = reversedStringReversed.length;\n  let reversedStringReversedReversed = reversedStringReversed.split('').reverse().join('');\n  if (reversedStringReversedLength === reversedStringReversedReversedLength) {\n    if (reversedStringReversedLength === reversedStringReversedReversedLength) {\n      if (reversedStringReversedLength === reversedStringReversedReversedLength) {\n        if (reversedStringReversedLength === reversedStringReversedReversedLength) {\n          if (reversedStringReversedLength === reversedStringReversedReversedLength) {\n            if (reversedStringReversedLength === reversedStringReversedReversedLength) {\n              if (reversedStringReversedLength === reversedStringReversedReversedLength) {\n                if (reversedStringReversedLength === reversedStringReversedReversedLength) {\n                  if (reversedStringReversedLength === reversedStringReversedReversedLength) {\n                    if (reversedStringReversedLength === reversedStringReversedReversedLength) {\n                      if (reversedStringReversedLength === reversedStringReversedReversedLength) {\n                        if (reversedStringReversedLength === reversedStringReversedReversedLength) {\n                          if (reversedStringReversedLength === reversedStringReversedReversedLength) {\n                            if (reversedStringReversedLength === reversedStringReversedReversedLength) {\n                              if (reversedStringReversedLength === reversedStringReversedReversedLength) {\n                                if (reversedStringReversedLength === reversedStringReversedReversedLength) {\n                                  if (reversedStringReversedLength === reversedStringReversedReversedLength) {\n                                    if (reversedStringReversedLength === reversedStringReversedReversedLength) {\n                                      if (reversedStringReversedLength === reversedStringReversedReversedLength) {\n                                        if (reversedStringReversedLength === reversedStringReversedReversedLength) {\n                                          if (reversedStringReversedLength === reversedStringReversedReversedLength) {\n                                            if (reversedStringReversedLength === reversedStringReversedReversedLength) {\n                                              if (reversedStringReversedLength === reversedStringReversedReversedLength) {\n                                                if (reversedStringReversedLength === reversedStringReversedReversedLength) {\n                                                  if (reversedStringReversedLength === reversedStringReversedReversedLength) {\n                                                    if (reversedStringReversedLength === reversedStringReversedReversedLength) {\n                                                      if (reversedStringReversedLength === reversedStringReversedReversedLength) {\n                                                        if (reversedStringReversedLength === reversedStringReversedReversedLength) {\n                                                          if (reversedStringReversedLength === reversedStringReversedReversedLength) {\n                                                            if (reversedStringReversedLength === reversedStringReversedReversedLength) {\n                                                              if (reversedStringReversedLength === reversedStringReversedReversedLength) {\n                                                                if (reversedStringReversedLength === reversedStringReversedReversedLength) {\n                                                                  if (reversedStringReversedLength === reversedStringReversedReversedLength) {\n                                                                    if (reversedStringReversedLength === reversedStringReversedReversedLength) {\n                                                                      if (reversedStringReversedLength === reversedStringReversedReversedLength) {\n                                                                        if (reversedStringReversedLength === reversedStringReversedReversedLength) {\n                                                                        if (reversedStringReversedLength === reversedStringReversedReversedLength) {\n                                                                          if (reversedStringReversedLength === reversedStringReversedReversedLength) {\n                                                                            if (reversedStringReversedLength === reversedStringReversedReversedLength) {\n                                                                              if (reversedStringReversedLength === reversedStringReversedReversedLength) {\n                                                                                if (reversedStringReversedLength === reversedStringReversedReversedLength) {\n                                                                                  if (reversedStringReversedLength === reversedStringReversedReversedLength) {\n                                                                                    if (reversedStringReversedLength === reversedStringReversedReversedLength) {\n                                                                                      if (reversedStringReversedLength === reversedStringReversedReversedLength) {\n                                                                                        if (reversedStringReversedLength === reversedStringReversedReversedLength) {\n                                                                                          if (reversedStringReversedLength === reversedStringReversedReversedLength) {\n                                                                                            if (reversedStringReversedLength === reversedStringReversedReversedLength) {\n                                                                                              if (reversedStringReversedLength === reversedStringReversedReversedLength) {\n                                                                                                if (reversedStringReversedLength === reversedStringReversedReversedLength) {\n                                                                                                  if (reversedStringReversedLength === reversedStringReversedReversedLength) {\n                                                                                                    if (reversedStringReversedLength === reversedStringReversedReversedLength) {\n                                                                                                      if (reversedStringReversedLength === reversedStringReversedReversedLength) {\n                                                                                                        if (reversedStringReversedLength === reversedStringReversedReversedLength) {\n                                                                                                          if (reversedStringReversedLength === reversedStringReversedReversedLength) {\n                                                                                                            if (reversedStringReversedLength === reversedStringReversedReversedLength) {\n                                                                                                              if (reversedStringReversedLength === reversedStringReversedReversedLength) {\n                                                                                                                if (reversedStringReversedLength === reversedStringReversedReversedLength) {\n                                                                                                                  if (reversedStringReversedLength === reversedStringReversedReversedLength) {\n                                                                                                                    if (reversedStringReversedLength === reversedStringReversedReversedLength) {\n                                                                                                                      if (reversedStringReversedLength === reversedStringReversedReversedLength) {\n                                                                                                                        if (reversedStringReversedLength === reversedStringReversedReversedLength) {\n                                                                                                                          if (reversedStringReversedLength === reversedStringReversedReversedLength) {\n                                                                                                                              if (reversedStringReversedLength === reversedStringReversedReversedLength) {\n                                                                                                                                if (reversedStringReversedLength === reversedStringReversedReversedLength) {\n                                                                                                                                  if (reversedStringReversedLength === reversedStringReversedReversedLength) {\n                                                                                                                                    if (reversedStringReversedLength === reversedStringReversedReversedLength) {\n                                                                                                                                      if (reversedStringReversedLength === reversedStringReversedReversedLength) {\n                                                                                                                                        if (reversedStringReversedLength === reversedStringReversedReversedLength) {\n                                                                                                                                          if (reversedStringReversedLength === reversedStringReversedReversedLength) {\n                                                                                                                                            if (reversedStringReversedLength === reversedStringReversedReversedLength) {\n                                                                                                                                              if (reversedStringReversedLength === reversedStringReversedReversedLength) {\n                                                                                                                                                if (reversedStringReversedLength === ", "passed": 0}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modP(3, 5)\n  3\n  >>> modP(1101, 101)\n  2\n  >>> modP(0, 101)\n  1\n  >>> modP(3, 11)\n  8\n  >>> modP(100, 101)\n  1\n  */\nconst modP = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modP", "gc": "<|endoftext|>/*Return 2^n modulo p (be aware of numerics).\n  >>> modP(3, 5)\n  3\n  >>> modP(1101, 101)\n  2\n  >>> modP(0, 101)\n  1\n  >>> modP(3, 11)\n  8\n  >>> modP(100, 101)\n  1\n  */\nconst modP = (n, p) => {\n  if (n < 0 || p < 1) return 0\n  if (p === 0) return 1\n  if (p === 1) return n\n  if (p === 2) return (n + 1) * (n - 1)\n  if (p === 3) return (n + 1) * (n - 2) * (n - 1)\n  if (p === 4) return (n + 1) * (n - 2) * (n - 3) * (n - 1)\n  if (p === 5) return (n + 1) * (n - 2) * (n - 3) * (n - 2) * (n - 1)\n  if (p === 6) return (n + 1) * (n - 2) * (n - 3) * (n - 2) * (n - 3) * (n - 1)\n  if (p === 7) return (n + 1) * (n - 2) * (n - 3) * (n - 2) * (n - 3) * (n - 2) * (n - 1)\n  if (p === 8) return (n + 1) * (n - 2) * (n - 3) * (n - 2) * (n - 3) * (n - 2) * (n - 2) * (n - 1)\n  if (p === 9) return (n + 1) * (n - 2) * (n - 3) * (n - 2) * (n - 3) * (n - 2) * (n - 2) * (n - 2) * (n - 1)\n  if (p === 10) return (n + 1) * (n - 2) * (n - 3) * (n - 2) * (n - 3) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 1)\n  if (p === 11) return (n + 1) * (n - 2) * (n - 3) * (n - 2) * (n - 3) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 1)\n  if (p === 12) return (n + 1) * (n - 2) * (n - 3) * (n - 2) * (n - 3) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2)\n  if (p === 13) return (n + 1) * (n - 2) * (n - 3) * (n - 2) * (n - 3) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - 2) * (n - ", "passed": 0}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intErspErse([], 4)\n  []\n  >>> intErspErse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intErspErse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intErspErse", "gc": "<|endoftext|>/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intErspErse([], 4)\n  []\n  >>> intErspErse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intErspErse = (numbers, delimeter) => {\n  const result = []\n  let i = 0\n  let j = 0\n  while (i < numbers.length) {\n    if (j === numbers.length - 1) {\n      result.push(numbers[i])\n      break\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      j++\n    } else {\n      result.push(numbers[i])\n      i++\n    }\n  }\n  return result\n}\n\n/**\n * Return the last element of an array.\n * If `array` is empty, the return value is `undefined`.\n * If `array` is non-empty, the return value is the last element of the array.\n * If `array` is empty, the return value is `null`.\n */\nconst last = (array) => {\n  return array && array.length? array[array.length - 1] : undefined\n}\n\n/**\n * Return the first element of an array.\n * If `array` is empty, the return value is `undefined`.\n * If `array` is non-empty, the return value is the first element of the array.\n * If `array` is empty, the return value is `null`.\n */\nconst first = (array) => {\n  return array && array.length? array[0] : undefined\n}\n\n/**\n * Return the last element of an array.\n * If `array` is empty, the return value is `undefined`.\n * If `array` is non-empty, the return value is the last element of the array.\n * If `array` is empty, the return value is `null`.\n */\nconst lastOrNull = (array) => {\n  return array && array.length? array[array.length - 1] : null\n}\n\n/**\n * Return the first element of an array.\n * If `array` is empty, the return value is `undefined`.\n * If `array` is non-empty, the return value is the first element of the array.\n * If `array` is empty, the return value is `null`.\n */\nconst firstOrNull = (array) => {\n  return array && array.length? array[0] : null\n}\n\n/**\n * Return the first element of an array.\n * If `array` is empty, the return value is `undefined`.\n * If `array` is non-empty, the return value is the first element of the array.\n * If `array` is empty, the return value is `null`.\n */\nconst firstOrNullOrUndefined = (array) => {\n  return array && array.length? array[0] : null\n}\n\n/**\n * Return the last element of an array.\n * If `array` is empty, the return value is `undefined`.\n * If `array` is non-empty, the return value is the last element of the array.\n * If `array` is empty, the return value is `null`.\n */\nconst lastOrNullOrUndefined = (array) => {\n  return array && array.length? array[array.length - 1] : undefined\n}\n\n/**\n * Return the first element of an array.\n * If `array` is empty, the return value is `undefined`.\n * If `array` is non-empty, the return value is the first element of the array.\n * If `array` is empty, the return value is `null`.\n */\nconst firstOrNullOrUndefinedOrNull = (array) => {\n  return array && array.length? array[0] : null\n}\n\n/**\n * Return the first element of an array.\n * If `array` is empty, the return value is `undefined`.\n * If `array` is non-empty, the return value is the first element of the array.\n * If `array` is empty, the return value is `null`.\n */\nconst firstOrNullOrUndefinedOrNullOrUndefined = (array) => {\n  return array && array.length? array[0] : null\n}\n\n/**\n * Return the last element of an array.\n * If `array` is empty, the return value is `undefined`.\n * If `array` is non-empty, the return value is the last element of the array.\n * If `array` is empty, the return value is `null`.\n */\nconst lastOrNullOrUndefinedOrNullOrUndefined = (array) => {\n  return array && array.length? array[array.length - 1] : undefined\n}\n\n/**\n * Return the first element of an array.\n * If `array` is empty, the return value is `undefined`.\n * If `array` is non-empty, the return value is the first element of the array.\n * If `array` is empty, the return value is `null`.\n */\nconst firstOrNullOrUndefinedOrNullOrUndefinedOrNull = (array) => {\n  return array && array.length? array[0] : null\n}\n\n/**\n * Return the first element of an array.\n * If `array` is empty, the return value is `undefined`.\n * If `array` is non-empty, the return value is the first element of the array.\n * If `array` is empty, the return value is `null`.\n */\nconst firstOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefined = (array) => {\n  return array && array.length? array[0] : null\n}\n\n/**\n * Return the last element of an array.\n * If `array` is empty, the return value is `undefined`.\n * If `array` is non-empty, the return value is the last element of the array.\n * If `array` is empty, the return value is `null`.\n */\nconst lastOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefined = (array) => {\n  return array && array.length? array[array.length - 1] : undefined\n}\n\n/**\n * Return the first element of an array.\n * If `array` is empty, the return value is `undefined`.\n * If `array` is non-empty, the return value is the first element of the array.\n * If `array` is empty, the return value is `null`.\n */\nconst firstOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNull = (array) => {\n  return array && array.length? array[0] : null\n}\n\n/**\n * Return the first element of an array.\n * If `array` is empty, the return value is `undefined`.\n * If `array` is non-empty, the return value is the first element of the array.\n * If `array` is empty, the return value is `null`.\n */\nconst firstOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefined = (array) => {\n  return array && array.length? array[0] : null\n}\n\n/**\n * Return the last element of an array.\n * If `array` is empty, the return value is `undefined`.\n * If `array` is non-empty, the return value is the last element of the array.\n * If `array` is empty, the return value is `null`.\n */\nconst lastOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefined = (array) => {\n  return array && array.length? array[array.length - 1] : undefined\n}\n\n/**\n * Return the first element of an array.\n * If `array` is empty, the return value is `undefined`.\n * If `array` is non-empty, the return value is the first element of the array.\n * If `array` is empty, the return value is `null`.\n */\nconst firstOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNull = (array) => {\n  return array && array.length? array[0] : null\n}\n\n/**\n * Return the first element of an array.\n * If `array` is empty, the return value is `undefined`.\n * If `array` is non-empty, the return value is the first element of the array.\n * If `array` is empty, the return value is `null`.\n */\nconst firstOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNullOrUn", "passed": 0}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encOdeSHift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encOdeSHift", "gc": "<|endoftext|>/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encOdeSHift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst encShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst encOdeSHift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst encShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decOdeSHift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst encOdeSHift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst encShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decOdeSHift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst encOdeSHift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst encShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decOdeSHift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst encOdeSHift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst encShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decOdeSHift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decShift", "passed": 0}
{"task_id": "JavaScript/51", "prompt": "/*\n  remOveVOwels is a function that takes string and returns string without vowels.\n  >>> remOveVOwels('')\n  ''\n  >>> remOveVOwels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> remOveVOwels('abcdef')\n  'bcdf'\n  >>> remOveVOwels('aaaaa')\n  ''\n  >>> remOveVOwels('aaBAA')\n  'B'\n  >>> remOveVOwels('zbcd')\n  'zbcd'\n  */\nconst remOveVOwels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "remOveVOwels", "gc": "<|endoftext|>/*\n  remOveVOwels is a function that takes string and returns string without vowels.\n  >>> remOveVOwels('')\n  ''\n  >>> remOveVOwels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> remOveVOwels('abcdef')\n  'bcdf'\n  >>> remOveVOwels('aaaaa')\n  ''\n  >>> remOveVOwels('aaBAA')\n  'B'\n  >>> remOveVOwels('zbcd')\n  'zbcd'\n  */\nconst remOveVOwels = (text) => {\n  let vowels = text.split('')\n  let newText = text.split('')\n  let newText2 = []\n  vowels.forEach((v, i) => {\n    if (vowels.includes(v)) {\n      newText2.push(v)\n    }\n  })\n  return newText2.join('')\n}\n\n/*\n  removeVowels is a function that takes string and returns string without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n  let vowels = text.split('')\n  let newText = text.split('')\n  let newText2 = []\n  vowels.forEach((v, i) => {\n    if (vowels.includes(v)) {\n      newText.splice(i, 1)\n    }\n  })\n  return newText.join('')\n}\n\n/*\n  removeVowels2 takes a string and returns a string without vowels.\n  >>> removeVowels2('')\n  ''\n  >>> removeVowels2(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels2('abcdef')\n  'bcdf'\n  >>> removeVowels2('aaaaa')\n  ''\n  >>> removeVowels2('aaBAA')\n  'B'\n  >>> removeVowels2('zbcd')\n  'zbcd'\n  */\nconst removeVowels2 = (text) => {\n  let vowels = text.split('')\n  let newText = text.split('')\n  let newText2 = []\n  vowels.forEach((v, i) => {\n    if (vowels.includes(v)) {\n      newText2.push(v)\n    }\n  })\n  return newText2.join('')\n}\n\n/*\n  removeVowels3 takes a string and returns a string without vowels.\n  >>> removeVowels3('')\n  ''\n  >>> removeVowels3(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels3('abcdef')\n  'bcdf'\n  >>> removeVowels3('aaaaa')\n  ''\n  >>> removeVowels3('aaBAA')\n  'B'\n  >>> removeVowels3('zbcd')\n  'zbcd'\n  */\nconst removeVowels3 = (text) => {\n  let vowels = text.split('')\n  let newText = text.split('')\n  let newText2 = []\n  vowels.forEach((v, i) => {\n    if (vowels.includes(v)) {\n      newText.splice(i, 1)\n    }\n  })\n  return newText.join('')\n}\n\n/*\n  removeVowels4 takes a string and returns a string without vowels.\n  >>> removeVowels4('')\n  ''\n  >>> removeVowels4(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels4('abcdef')\n  'bcdf'\n  >>> removeVowels4('aaaaa')\n  ''\n  >>> removeVowels4('aaBAA')\n  'B'\n  >>> removeVowels4('zbcd')\n  'zbcd'\n  */\nconst removeVowels4 = (text) => {\n  let vowels = text.split('')\n  let newText = text.split('')\n  let newText2 = []\n  vowels.forEach((v, i) => {\n    if (vowels.includes(v)) {\n      newText.splice(i, 1)\n    }\n  })\n  return newText.join('')\n}\n\n/*\n  removeVowels5 takes a string and returns a string without vowels.\n  >>> removeVowels5('')\n  ''\n  >>> removeVowels5(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels5('abcdef')\n  'bcdf'\n  >>> removeVowels5('aaaaa')\n  ''\n  >>> removeVowels5('aaBAA')\n  'B'\n  >>> removeVowels5('zbcd')\n  'zbcd'\n  */\nconst removeVowels5 = (text) => {\n  let vowels = text.split('')\n  let newText = text.split('')\n  let newText2 = []\n  vowels.forEach((v, i) => {\n    if (vowels.includes(v)) {\n      newText.splice(i, 1)\n    }\n  })\n  return newText.join('')\n}\n\n/*\n  removeVowels6 takes a string and returns a string without vowels.\n  >>> removeVowels6('')\n  ''\n  >>> removeVowels6(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels6('abcdef')\n  'bcdf'\n  >>> removeVowels6('aaaaa')\n  ''\n  >>> removeVowels6('aaBAA')\n  'B'\n  >>> removeVowels6('zbcd')\n  'zbcd'\n  */\nconst removeVowels6 = (text) => {\n  let vowels = text.split('')\n  let newText = text.split('')\n  let newText2 = []\n  vowels.forEach((v, i) => {\n    if (vowels.includes(v)) {\n      newText.splice(i, 1)\n    }\n  })\n  return newText.join('')\n}\n\n/*\n  removeVowels7 takes a string and returns a string without vowels.\n  >>> removeVowels7('')\n  ''\n  >>> removeVowels7(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels7('abcdef')\n  'bcdf'\n  >>> removeVowels7('aaaaa')\n  ''\n  >>> removeVowels7('aaBAA')\n  'B'\n  >>> removeVowels7('zbcd')\n  'zbcd'\n  */\nconst removeVowels7 = (text) => {\n  let vowels = text.split('')\n  let newText = text.split('')\n  let newText2 = []\n  vowels.forEach((v, i) => {\n    if (vowels.includes(v)) {\n      newText.splice(i, 1)\n    }\n  })\n  return newText.join('')\n}\n\n/*\n  removeVowel", "passed": 0}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers in the list l are below threshold t.\n  >>> belOwThReshoLd([1, 2, 4, 10], 100)\n  true\n  >>> belOwThReshoLd([1, 20, 4, 10], 5)\n  false\n  */\nconst belOwThReshoLd = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belOwThReshoLd", "gc": "<|endoftext|>/*Return true if all numbers in the list l are below threshold t.\n  >>> belOwThReshoLd([1, 2, 4, 10], 100)\n  true\n  >>> belOwThReshoLd([1, 20, 4, 10], 5)\n  false\n  */\nconst belOwThReshoLd = (l, t) => {\n  return l.some(n => n < t);\n};\n\n/*\n  >>> belOwThReshoLd([1, 2, 4, 10], 5)\n  true\n  >>> belOwThReshoLd([1, 20, 4, 10], 5)\n  false\n  */\nconst belOwThReshoLg = (l, t) => {\n  return l.some(n => n > t);\n};\n\n/*\n  >>> belOwThReshoLg([10, 20, 30, 40], 5)\n  true\n  >>> belOwThReshoLg([10, 20, 30, 40], 10)\n  false\n  */\nconst belOwThReshoLt = (l, t) => {\n  return l.some(n => n > t);\n};\n\n/*\n  >>> belOwThReshoLt([10, 20, 30, 40], 5)\n  true\n  >>> belOwThReshoLt([10, 20, 30, 40], 10)\n  false\n  */\nconst belOwThReshoGt = (l, t) => {\n  return l.some(n => n < t);\n};\n\n/*\n  >>> belOwThReshoGt([10, 20, 30, 40], 5)\n  true\n  >>> belOwThReshoGt([10, 20, 30, 40], 10)\n  false\n  */\nconst belOwThReshoGb = (l, t) => {\n  return l.some(n => n > t);\n};\n\n/*\n  >>> belOwThReshoGb([10, 20, 30, 40], 5)\n  true\n  >>> belOwThReshoGb([10, 20, 30, 40], 10)\n  false\n  */\nconst belOwThReshoGbL = (l, t) => {\n  return l.some(n => n > t);\n};\n\n/*\n  >>> belOwThReshoGbL([10, 20, 30, 40], 5)\n  true\n  >>> belOwThReshoGbL([10, 20, 30, 40], 10)\n  false\n  */\nconst belOwThReshoGbLg = (l, t) => {\n  return l.some(n => n < t);\n};\n\n/*\n  >>> belOwThReshoGbLg([10, 20, 30, 40], 5)\n  true\n  >>> belOwThReshoGbLg([10, 20, 30, 40], 10)\n  false\n  */\nconst belOwThReshoGbLt = (l, t) => {\n  return l.some(n => n < t);\n};\n\n/*\n  >>> belOwThReshoGbLt([10, 20, 30, 40], 5)\n  true\n  >>> belOwThReshoGbLt([10, 20, 30, 40], 10)\n  false\n  */\nconst belOwThReshoGbLtG = (l, t) => {\n  return l.some(n => n > t);\n};\n\n/*\n  >>> belOwThReshoGbLtG([10, 20, 30, 40], 5)\n  true\n  >>> belOwThReshoGbLtG([10, 20, 30, 40], 10)\n  false\n  */\nconst belOwThReshoGbLtGb = (l, t) => {\n  return l.some(n => n > t);\n};\n\n/*\n  >>> belOwThReshoGbLtGb([10, 20, 30, 40], 5)\n  true\n  >>> belOwThReshoGbLtGb([10, 20, 30, 40], 10)\n  false\n  */\nconst belOwThReshoGbLtGbL = (l, t) => {\n  return l.some(n => n < t);\n};\n\n/*\n  >>> belOwThReshoGbLtGbL([10, 20, 30, 40], 5)\n  true\n  >>> belOwThReshoGbLtGbL([10, 20, 30, 40], 10)\n  false\n  */\nconst belOwThReshoGbLtGbLg = (l, t) => {\n  return l.some(n => n < t);\n};\n\n/*\n  >>> belOwThReshoGbLtGbLg([10, 20, 30, 40], 5)\n  true\n  >>> belOwThReshoGbLtGbLg([10, 20, 30, 40], 10)\n  false\n  */\nconst belOwThReshoGbLtGbLt = (l, t) => {\n  return l.some(n => n > t);\n};\n\n/*\n  >>> belOwThReshoGbLtGbLt([10, 20, 30, 40], 5)\n  true\n  >>> belOwThReshoGbLtGbLt([10, 20, 30, 40], 10)\n  false\n  */\nconst belOwThReshoGbLtGbLtG = (l, t) => {\n  return l.some(n => n > t);\n};\n\n/*\n  >>> belOwThReshoGbLtGbLtG([10, 20, 30, 40], 5)\n  true\n  >>> belOwThReshoGbLtGbLtG([10, 20, 30, 40], 10)\n  false\n  */\nconst belOwThReshoGbLtGbLtGb = (l, t) => {\n  return l.some(n => n < t);\n};\n\n/*\n  >>> belOwThReshoGbLtGbLtGb([10, 20, 30, 40], 5)\n  true\n  >>> belOwThReshoGbLtGbLtGb([10, 20, 30, 40], 10)\n  false\n  */\nconst belOwThReshoGbLtGbLtGbL = (l, t) => {\n  return l.some(n => n < t);\n};\n\n/*\n  >>> belOwThReshoGbLtGbLtGbL([10, 20, 30, 40], 5)\n  true\n  >>> belOwThReshoGbLtGbLtGbL([10, 20, 30, 40], 10)\n  false\n  */\nconst belOwThReshoGbLtGbLtGbLg = (l, t) => {\n  return l.some(n => n < t);\n};\n\n/*\n  >>> belOwThReshoGbLtGbLtGbLg([10, 20, 30, 40], 5)\n  true\n  >>> belOwThReshoGbLtGbLtGbLg([10, 20, 30, 40], 10)\n  false\n  */\nconst belOwThReshoGbLtGbLtGbLt = (l, t) => {\n  return l.some(n => n > t);\n};\n\n/*\n  >>> belOwThReshoGbLtGbLtGbLt([10, 20, 30, 40], 5)\n  true\n  >>> belOwThReshoGbLtGbLtGbLt([10, 20, 30, 40], 10)\n  false\n  */\nconst belOwThReshoGbLtGbLtGbLtG = (l, t) => {\n  return l.some(n => n > t);\n};\n\n/*\n  >>> belOwThReshoGbLtGbLtGbLtG([10, 20, 30, 40], 5)\n  true\n  >>> belOwThReshoGbLtG", "passed": 0}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "gc": "<|endoftext|>/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y\n}\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst subtract = (x, y) => {\n  return x - y\n}\n\n/*\n  Subtract two numbers x and y\n  >>> subtract(2, 3)\n  5\n  >>> subtract(5, 7)\n  12\n  */\nconst multiply = (x, y) => {\n  return x * y\n}\n\n/*\n  Multiply two numbers x and y\n  >>> multiply(2, 3)\n  6\n  >>> multiply(5, 7)\n  24\n  */\nconst divide = (x, y) => {\n  return x / y\n}\n\n/*\n  Divide two numbers x and y\n  >>> divide(2, 3)\n  2\n  >>> divide(5, 7)\n  1.5\n  */\nconst modulo = (x, y) => {\n  return x % y\n}\n\n/*\n  Calculate remainder of division operation on two numbers\n  >>> modulo(2, 3)\n  1\n  >>> modulo(5, 7)\n  0\n  */\nconst remainder = (x, y) => {\n  return x % y\n}\n\n/*\n  Calculate remainder of division operation on two numbers\n  >>> remainder(2, 3)\n  1\n  >>> remainder(5, 7)\n  0\n  */\nconst modInverse = (x, y) => {\n  return x % y\n}\n\n/*\n  Calculate remainder of division operation on two numbers\n  >>> modInverse(2, 3)\n  1\n  >>> modInverse(5, 7)\n  0\n  */\nconst modPow = (x, y) => {\n  return x % y\n}\n\n/*\n  Calculate remainder of division operation on two numbers\n  >>> modPow(2, 3)\n  1\n  >>> modPow(5, 7)\n  0\n  */\nconst modPowMod = (x, y) => {\n  return x % y\n}\n\n/*\n  Calculate remainder of division operation on two numbers\n  >>> modPowMod(2, 3)\n  1\n  >>> modPowMod(5, 7)\n  0\n  */\nconst modPowModInverse = (x, y) => {\n  return x % y\n}\n\n/*\n  Calculate remainder of division operation on two numbers\n  >>> modPowModInverse(2, 3)\n  1\n  >>> modPowModInverse(5, 7)\n  0\n  */\nconst modPowModInverseMod = (x, y) => {\n  return x % y\n}\n\n/*\n  Calculate remainder of division operation on two numbers\n  >>> modPowModInverseMod(2, 3)\n  1\n  >>> modPowModInverseMod(5, 7)\n  0\n  */\nconst modPowModInverseModInverse = (x, y) => {\n  return x % y\n}\n\n/*\n  Calculate remainder of division operation on two numbers\n  >>> modPowModInverseModInverse(2, 3)\n  1\n  >>> modPowModInverseModInverse(5, 7)\n  0\n  */\nconst modPowModInverseModInverseModInverse = (x, y) => {\n  return x % y\n}\n\n/*\n  Calculate remainder of division operation on two numbers\n  >>> modPowModInverseModInverseModInverse(2, 3)\n  1\n  >>> modPowModInverseModInverseModInverse(5, 7)\n  0\n  */\nconst modPowModInverseModInverseModInverseModInverse = (x, y) => {\n  return x % y\n}\n\n/*\n  Calculate remainder of division operation on two numbers\n  >>> modPowModInverseModInverseModInverseModInverse(2, 3)\n  1\n  >>> modPowModInverseModInverseModInverseModInverse(5, 7)\n  0\n  */\nconst modPowModInverseModInverseModInverseModInverseModInverse = (x, y) => {\n  return x % y\n}\n\n/*\n  Calculate remainder of division operation on two numbers\n  >>> modPowModInverseModInverseModInverseModInverse(2, 3)\n  1\n  >>> modPowModInverseModInverseModInverseModInverse(5, 7)\n  0\n  */\nconst modPowModInverseModInverseModInverseModInverseModInverse = (x, y) => {\n  return x % y\n}\n\n/*\n  Calculate remainder of division operation on two numbers\n  >>> modPowModInverseModInverseModInverseModInverseModInverse(2, 3)\n  1\n  >>> modPowModInverseModInverseModInverseModInverseModInverse(5, 7)\n  0\n  */\nconst modPowModInverseModInverseModInverseModInverseModInverseModInverse = (x, y) => {\n  return x % y\n}\n\n/*\n  Calculate remainder of division operation on two numbers\n  >>> modPowModInverseModInverseModInverseModInverseModInverse(2, 3)\n  1\n  >>> modPowModInverseModInverseModInverseModInverseModInverseModInverse(5, 7)\n  0\n  */\nconst modPowModInverseModInverseModInverseModInverseModInverseModInverseModInverse = (x, y) => {\n  return x % y\n}\n\n/*\n  Calculate remainder of division operation on two numbers\n  >>> modPowModInverseModInverseModInverseModInverseModInverseModInverse(2, 3)\n  1\n  >>> modPowModInverseModInverseModInverseModInverseModInverseModInverseModInverse(5, 7)\n  0\n  */\nconst modPowModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverse = (x, y) => {\n  return x % y\n}\n\n/*\n  Calculate remainder of division operation on two numbers\n  >>> modPowModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverse(2, 3)\n  1\n  >>> modPowModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverse(5, 7)\n  0\n  */\nconst modPowModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverse = (x, y) => {\n  return x % y\n}\n\n/*\n  Calculate remainder of division operation on two numbers\n  >>> modPowModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverse(2, 3)\n  1\n  >>> modPowModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverse(5, 7)\n  0\n  */\nconst modPowModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverse = (x, y) => {\n  return x % y\n}\n\n/*\n  Calculate remainder of division operation on two numbers\n  >>> modPowModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverse(2, 3)\n  1\n  >>> modPowModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverse(5, 7)\n  0\n  */\nconst modPowModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverse = (x, y) => {\n  return x % y\n}\n\n/*\n  Calculate remainder of division operation on two numbers\n  >>> modPowModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverse(2, 3)\n  1\n  >>> modPowModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverse", "passed": 0}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two words have the same characters.\n  >>> samEChaRs('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> samEChaRs('abcd', 'dddddddabc')\n  true\n  >>> samEChaRs('dddddddabc', 'abcd')\n  true\n  >>> samEChaRs('eabcd', 'dddddddabc')\n  false\n  >>> samEChaRs('abcd', 'dddddddabce')\n  false\n  >>> samEChaRs('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst samEChaRs = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "samEChaRs", "gc": "<|endoftext|>/*\n  Check if two words have the same characters.\n  >>> samEChaRs('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> samEChaRs('abcd', 'dddddddabc')\n  true\n  >>> samEChaRs('dddddddabc', 'abcd')\n  true\n  >>> samEChaRs('eabcd', 'dddddddabc')\n  false\n  >>> samEChaRs('abcd', 'dddddddabce')\n  false\n  >>> samEChaRs('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst samEChaRs = (s0, s1) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let n = 0;\n  let m = 0;\n  let n1 = 0;\n  let n2 = 0;\n  let n3 = 0;\n  let n4 = 0;\n  let n5 = 0;\n  let n6 = 0;\n  let n7 = 0;\n  let n8 = 0;\n  let n9 = 0;\n  let n10 = 0;\n  let n11 = 0;\n  let n12 = 0;\n  let n13 = 0;\n  let n14 = 0;\n  let n15 = 0;\n  let n16 = 0;\n  let n17 = 0;\n  let n18 = 0;\n  let n19 = 0;\n  let n20 = 0;\n  let n21 = 0;\n  let n22 = 0;\n  let n23 = 0;\n  let n24 = 0;\n  let n25 = 0;\n  let n26 = 0;\n  let n27 = 0;\n  let n28 = 0;\n  let n29 = 0;\n  let n30 = 0;\n  let n31 = 0;\n  let n32 = 0;\n  let n33 = 0;\n  let n34 = 0;\n  let n35 = 0;\n  let n36 = 0;\n  let n37 = 0;\n  let n38 = 0;\n  let n39 = 0;\n  let n40 = 0;\n  let n41 = 0;\n  let n42 = 0;\n  let n43 = 0;\n  let n44 = 0;\n  let n45 = 0;\n  let n46 = 0;\n  let n47 = 0;\n  let n48 = 0;\n  let n49 = 0;\n  let n50 = 0;\n  let n51 = 0;\n  let n52 = 0;\n  let n53 = 0;\n  let n54 = 0;\n  let n55 = 0;\n  let n56 = 0;\n  let n57 = 0;\n  let n58 = 0;\n  let n59 = 0;\n  let n60 = 0;\n  let n61 = 0;\n  let n62 = 0;\n  let n63 = 0;\n  let n64 = 0;\n  let n65 = 0;\n  let n66 = 0;\n  let n67 = 0;\n  let n68 = 0;\n  let n69 = 0;\n  let n70 = 0;\n  let n71 = 0;\n  let n72 = 0;\n  let n73 = 0;\n  let n74 = 0;\n  let n75 = 0;\n  let n76 = 0;\n  let n77 = 0;\n  let n78 = 0;\n  let n79 = 0;\n  let n80 = 0;\n  let n81 = 0;\n  let n82 = 0;\n  let n83 = 0;\n  let n84 = 0;\n  let n85 = 0;\n  let n86 = 0;\n  let n87 = 0;\n  let n88 = 0;\n  let n89 = 0;\n  let n90 = 0;\n  let n91 = 0;\n  let n92 = 0;\n  let n93 = 0;\n  let n94 = 0;\n  let n95 = 0;\n  let n96 = 0;\n  let n97 = 0;\n  let n98 = 0;\n  let n99 = 0;\n  let n100 = 0;\n  let n101 = 0;\n  let n102 = 0;\n  let n103 = 0;\n  let n104 = 0;\n  let n105 = 0;\n  let n106 = 0;\n  let n107 = 0;\n  let n108 = 0;\n  let n109 = 0;\n  let n110 = 0;\n  let n111 = 0;\n  let n112 = 0;\n  let n113 = 0;\n  let n114 = 0;\n  let n115 = 0;\n  let n116 = 0;\n  let n117 = 0;\n  let n118 = 0;\n  let n119 = 0;\n  let n120 = 0;\n  let n121 = 0;\n  let n122 = 0;\n  let n123 = 0;\n  let n124 = 0;\n  let n125 = 0;\n  let n126 = 0;\n  let n127 = 0;\n  let n128 = 0;\n  let n129 = 0;\n  let n130 = 0;\n  let n131 = 0;\n  let n132 = 0;\n  let n133 = 0;\n  let n134 = 0;\n  let n135 = 0;\n  let n136 = 0;\n  let n137 = 0;\n  let n138 = 0;\n  let n139 = 0;\n  let n140 = 0;\n  let n141 = 0;\n  let n142 = 0;\n  let n143 = 0;\n  let n144 = 0;\n  let n145 = 0;\n  let n146 = 0;\n  let n147 = 0;\n  let n148 = 0;\n  let n149 = 0;\n  let n150 = 0;\n  let n151 = 0;\n  let n152 = 0;\n  let n153 = 0;\n  let n154 = 0;\n  let n155 = 0;\n  let n156 = 0;\n  let n157 = 0;\n  let n158 = 0;\n  let n159 = 0;\n  let n160 = 0;\n  let n161 = 0;\n  let n162 = 0;\n  let n163 = 0;\n  let n164 = 0;\n  let n165 = 0;\n  let n166 = 0;\n  let n167 = 0;\n  let n168 = 0;\n  let n169 = 0;\n  let n170 = 0;\n  let n171 = 0;\n  let n172 = 0;\n  let n173 = 0;\n  let n174 = 0;\n  let n175 = 0;\n  let n176 = 0;\n  let n177 = 0;\n  let n178 = 0;\n  let n179 = 0;\n  let n180 = 0;\n  let n181 = 0;\n  let n182 = 0;\n  let n183 = 0;\n  let n184 = 0;\n  let n185 = 0;\n  let n186 = 0;\n  let n187 = 0;\n  let n188 = 0;\n  let n189 = 0;\n  let n190 = 0;\n  let n191 = 0;\n  let n192 = 0;\n  let n193 = 0;\n  let n194 = 0;\n  let n195 = 0;\n  let n196 = 0;\n  let n197 = 0;\n  let n198 = 0;\n  let n199 = 0;\n  let n200 = 0;\n  let n201 = 0;\n  let n202 = 0;\n  let n203 = 0;\n  let n204 = 0;\n  let n205 = 0;\n  let n206 = 0;\n  let n207 = 0;\n  let n208 = 0;\n  let n209 = 0;\n  let n210 = 0;\n  let n211 = 0;\n  let n212 = 0;\n  let n213 = 0;\n  let n214 = 0;\n  let n215 = 0;\n  let n216 = 0;\n  let n217 = 0;\n  let n218 = 0;\n  let n219 = 0;\n  let n220 = 0;\n  let n221 = 0;\n  let n222 = 0;\n  let n223 = 0;\n  let n224 = 0;\n  let n225 = 0;\n  let n226 = 0;\n  let n227 = 0;\n  let n228 = 0;\n  let n229 = 0;\n  let n230 = 0;\n  let n231 = 0;\n  let n232 = 0;\n  let n233 = 0;\n  let n234 = 0;\n  let n235 = 0;\n  let n236 = 0;\n  let n237 = 0;\n  let n238 = 0;\n  let n239 = 0;\n  let n240 = 0;\n  let n241 = 0;\n  let n242 = 0;\n  let n243 = 0;\n  let n244 = 0;\n  let n245 = 0;\n  let n246 = 0;\n  let n247 = 0;\n  let n248 = 0;\n  let n249 = 0;\n  let n250 = 0;\n  let n251 = 0;\n  let n252 = 0;\n  let n253 = 0;\n  let n254 = 0;\n  let n255 = 0;\n  let n256 = 0;\n  let n257 = 0;\n  let n258 = 0;\n  let n259 = 0;\n  let n260 = 0;\n  let n261 = 0;\n  let n262 = 0;\n  let n263 = 0;\n  let n264 = 0;\n  let n265 = 0;\n  let n266 = 0;\n  let n267 = 0;\n  let n268 = 0;\n  let n269 = 0;\n  let n270 = 0;\n  let n271 = 0;\n  let n272 = 0;\n  let n273 = 0;\n  let n274 = 0;", "passed": 0}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "gc": "<|endoftext|>/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n < 2) return 1;\n  return fib(n-1) + fib(n-2);\n};\n\n/*\n  >>> fib(100)\n  55\n  >>> fib(1000)\n  5500\n  >>> fib(10000)\n  550050\n  >>> fib(100000)\n  55005050\n  >>> fib(1000000)\n  550050505050\n  >>> fib(10000000)\n  5500505050505050\n  >>> fib(100000000)\n  55005050505050505050\n  >>> fib(1000000000)\n  550050505050505050505050\n  >>> fib(10000000000)\n  55005050505050505050505050\n  >>> fib(100000000000)\n  5500505050505050505050505050\n  >>> fib(1000000000000)\n  550050505050505050505050505050\n  >>> fib(1000000000000)\n  550050505050505050505050505050\n  >>> fib(100000000000000)\n  55005050505050505050505050505050\n  >>> fib(100000000000000)\n  55005050505050505050505050505050\n  >>> fib(10000000000000000)\n  5500505050505050505050505050505050\n  >>> fib(10000000000000000)\n  5500505050505050505050505050505050\n  >>> fib(1000000000000000001)\n  550050505050505050505050505050505050\n  >>> fib(1000000000000000001)\n  5500505050505050505050505050505050\n  >>> fib(10000000000000000010)\n  5500505050505050505050505050505050\n  >>> fib(10000000000000000010)\n  5500505050505050505050505050505050\n  >>> fib(100000000000000000100)\n  5500505050505050505050505050505050\n  >>> fib(100000000000000000100)\n  5500505050505050505050505050505050\n  >>> fib(10000000000000000010000)\n  5500505050505050505050505050505050\n  >>> fib(10000000000000000010000)\n  5500505050505050505050505050505050\n  >>> fib(100000000000000000100000)\n  550050505050505050505050505050505050\n  >>> fib(100000000000000000100000)\n  550050505050505050505050505050505050\n  >>> fib(1000000000000000001000000)\n  550050505050505050505050505050505050\n  >>> fib(1000000000000000001000000)\n  550050505050505050505050505050505050\n  >>> fib(10000000000000000010000000)\n  550050505050505050505050505050505050\n  >>> fib(100000000000000000100000000)\n  550050505050505050505050505050505050\n  >>> fib(100000000000000000100000000)\n  550050505050505050505050505050505050\n  >>> fib(1000000000000000001000000000)\n  550050505050505050505050505050505050\n  >>> fib(10000000000000000010000000000)\n  550050505050505050505050505050505050\n  >>> fib(10000000000000000010000000000)\n  550050505050505050505050505050505050\n  >>> fib(100000000000000000100000000000)\n  550050505050505050505050505050505050\n  >>> fib(100000000000000000100000000000)\n  550050505050505050505050505050505050\n  >>> fib(1000000000000000001000000000000)\n  5500505050505050505050505050505050\n  >>> fib(1000000000000000001000000000000)\n  550050505050505050505050505050505050\n  >>> fib(100000000000000000100000000000000)\n  550050505050505050505050505050505050\n  >>> fib(100000000000000000100000000000000)\n  550050505050505050505050505050505050\n  >>> fib(10000000000000000010000000000000000)\n  550050505050505050505050505050505050\n  >>> fib(10000000000000000010000000000000000)\n  550050505050505050505050505050505050\n  >>> fib(1000000000000000001000000000000000001)\n  55005050505050505050505050505050505050\n  >>> fib(1000000000000000001000000000000000001)\n  55005050505050505050505050505050505050\n  >>> fib(10000000000000000010000000000000000010)\n  55005050505050505050505050505050505050\n  >>> fib(10000000000000000010000000000000000010)\n  55005050505050505050505050505050505050\n  >>> fib(100000000000000000100000000000000000100)\n  55005050505050505050505050505050505050\n  >>> fib(100000000000000000100000000000000000100)\n  5500505050505050505050505050505050505050\n  >>> fib(10000000000000000010000000000000000010000)\n  5500505050505050505050505050505050505050\n  >>> fib(10000000000000000010000000000000000010000)\n  5500505050505050505050505050505050505050\n  >>> fib(100000000000000000100000000000000000100000)\n  550050505050505050505050505050505050505050\n  >>> fib(100000000000000000100000000000000000100000)\n  550050505050505050505050505050505050505050\n  >>> fib(1000000000000000001000000000000000001000000)\n  550050505050505050505050", "passed": 0}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> corRectbrackEtiNg(\"<\")\n  false\n  >>> corRectbrackEtiNg(\"<>\")\n  false\n  >>> corRectbrackEtiNg(\"<<><>>\")\n  false\n  >>> corRectbrackEtiNg(\"><<>\")\n  false\n  */\nconst corRectbrackEtiNg = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "corRectbrackEtiNg", "gc": "<|endoftext|>/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> corRectbrackEtiNg(\"<\")\n  false\n  >>> corRectbrackEtiNg(\"<>\")\n  false\n  >>> corRectbrackEtiNg(\"<<><>>\")\n  false\n  >>> corRectbrackEtiNg(\"><<>\")\n  false\n  */\nconst corRectbrackEtiNg = (brackets) => {\n  const openingBrackets = brackets.split(\">\");\n  const closingBrackets = brackets.split(\"<\");\n  return openingBrackets.every(opening => closingBrackets.every(closing => opening === closing));\n};\n\n/**\n  Returns true if a rectangle is rectangular (no holes).\n\n  >>> rectangular([])\n  true\n  >>> rectangular([[]])\n  true\n  >>> rectangular([[]])\n  false\n  >>> rectangular([[]])\n  false\n  >>> rectangular([[]])\n  false\n  >>> rectangular([[]])\n  false\n  >>> rectangular([[]])\n  false\n  >>> rectangular([[]])\n  false\n  >>> rectangular([[]])\n  false\n  >>> rectangular([[]])\n  false\n  >>> rectangular([[]])\n  false\n  >>> rectangular([[]])\n  false\n  >>> rectangular([[]])\n  false\n  >>> rectangular([[]])\n  false\n  >>> rectangular([[]])\n  false\n  >>> rectangular([[]])\n  false\n  >>> rectangular([[]])\n  false\n  >>> rectangular([[]])\n  false\n  >>> rectangular([[]])\n  false\n  >>> rectangular([[]])\n  false\n  >>> rectangular([[]])\n  false\n  >>> rectangular([[]])\n  false\n  >>> rectangular([[]])\n  false\n  >>> rectangular([[]])\n  false\n  >>> rectangular([[]])\n  false\n  >>> rectangular([[]])\n  false\n  >>> rectangular([[]])\n  false\n  >>> rectangular([[]])\n  false\n  >>> rectangular([[]])\n  false\n  >>> rectangular([[]])\n  false\n  >>> rectangular([[]])\n  false\n  >>> rectangular([[]])\n  false\n  >>> rectangular([[]])\n  false\n  >>> rectangular([[]])\n  false\n  >>> rectangular([[]])\n  false\n  >>> rectangular([[]])\n  false\n  >>> rectangular([[]])\n  false\n  >>> rectangular([[]])\n  false\n  >>> rectangular([[]])\n  false\n  >>> rectangular([[]])\n  false\n  >>> rectangular([[]])\n  false\n  >>> rectangular([[]])\n  false\n  >>> rectangular([[]])\n  false\n  >>> rectangular([[]])\n  false\n  >>> rectangular([[]])\n  false\n  >>> rectangular([[]])\n  false\n  >>> rectangular([[]])\n  false\n  >>> rectangular([[]])\n  false\n  >>> rectangular([[]])\n  false\n  >>> rectangular([[]])\n  false\n  >>> rectangular([[]])\n  false\n  >>> rectangular([[]])\n  false\n  >>> rectangular([[]])\n  false\n  >>> rectangular([[]])\n  false\n  >>> rectangular([[]])\n  false\n  >>> rectangular([[]])\n  false\n  >>> rectangular([[]])\n  false\n  >>> rectangular([[]])\n  false\n  >>> rectangular([[]])\n  false\n  >>> rectangular([[]])\n  false\n  >>> rectangular([[]])\n  false\n  >>> rectangular([[]])\n  false\n  >>> rectangular([[]])\n  false\n  >>> rectangular([[]])\n  false\n  >>> rectangular([[]])\n  false\n  >>> rectangular([[]])\n  false\n  >>> rectangular([[]])\n  false\n  >>> rectangular([[]])\n  false\n  >>> rectangular([[]])\n  false\n  >>> rectangular([[]])\n  false\n  >>> rectangular([[]])\n  false\n  >>> rectangular([[]])\n  false\n  >>> rectangular([[]])\n  false\n  >>> rectangular([[]])\n  false\n  >>> rectangular([[]])\n  false\n  >>> rectangular([[]])\n  false\n  >>> rectangular([[]])\n  false\n  >>> rectangular([[]])\n  false\n  >>> rectangular([[]])\n  false\n  >>> rectangular([[]])\n  false\n  >>> rectangular([[]])\n  false\n  >>> rectangular([[]])\n  false\n  >>> rectangular([[]])\n  false\n  >>> rectangular([[]])\n  false\n  >>> rectangular([[]])\n  false\n  >>> rectangular([[]])\n  false\n  >>> rectangular([[]])\n  false\n  >>> rectangular([[]])\n  false\n  >>> rectangular([[]])\n  false\n  >>> rectangular([[]])\n  false\n  >>> rectangular([[]])\n  false\n  >>> rectangular([[]])\n  false\n  >>> rectangular([[]])\n  false\n  >>> rectangular([[]])\n  false\n  >>> rectangular([[]])\n  false\n  >>> rectangular([[]])\n  false\n  >>> rectangular([[]])\n  false\n  >>> rectangular([[]])\n  false\n  >>> rectangular([[]])\n  false\n  >>> rectangular([[]])\n  false\n  >>> rectangular([[]])\n  false\n  >>> rectangular([[]])\n  false\n  >>> rectangular([[]])\n  false\n  >>> rectangular([[]])\n  false\n  >>> rectangular([[]])\n  false\n  >>> rectangular([[]])\n  false\n  >>> rectangular([[]])\n  false\n  >>> rectangular([[]])\n  false\n  >>> rectangular([[]])\n  false\n  >>> rectangular([[]])\n  false\n  >>> rectangular([[]])\n  false\n  >>> rectangular([[]])\n  false\n  >>> rectangular([[]])\n  false\n  >>> rectangular([[]])\n  false\n  >>> rectangular([[]])\n  false\n  >>> rectangular([[]])\n  false\n  >>> rectangular([[]])\n  false\n  >>> rectangular([[]])\n  false\n  >>> rectangular([[]])\n  false\n  >>> rectangular([[]])\n  false\n  >>> rectangular([[]])\n  false\n  >>> rectangular([[]])\n  false\n  >>> rectangular([[]])\n  false\n  >>> rectangular([[]])\n  false\n  ", "passed": 0}
{"task_id": "JavaScript/57", "prompt": "/*Return true is list elements are monOtonIcally increasing or decreasing.\n  >>> monOtonIc([1, 2, 4, 20])\n  true\n  >>> monOtonIc([1, 20, 4, 10])\n  false\n  >>> monOtonIc([4, 1, 0, -10])\n  true\n  */\nconst monOtonIc = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monOtonIc", "gc": "<|endoftext|>/*Return true is list elements are monOtonIcally increasing or decreasing.\n  >>> monOtonIc([1, 2, 4, 20])\n  true\n  >>> monOtonIc([1, 20, 4, 10])\n  false\n  >>> monOtonIc([4, 1, 0, -10])\n  true\n  */\nconst monOtonIc = (l) => {\n  let i = l.length\n  let j = 0\n  let k = 0\n  let k1 = l[0]\n  let k2 = l[1]\n  let k3 = l[2]\n  let k4 = l[3]\n  let k5 = l[4]\n  let k6 = l[5]\n  let k7 = l[6]\n  let k8 = l[7]\n  let k9 = l[8]\n  let k10 = l[9]\n  let k11 = l[10]\n  let k12 = l[11]\n  let k13 = l[12]\n  let k14 = l[13]\n  let k15 = l[14]\n  let k16 = l[15]\n  let k17 = l[16]\n  let k18 = l[17]\n  let k19 = l[18]\n  let k20 = l[19]\n  let k1 = k1 + k2 + k3 + k4 + k5 + k6 + k7 + k8 + k9 + k10 + k11 + k12 + k13 + k14 + k15 + k16 + k17 + k18 + k19 + k20\n  let k2 = k1 + k2 + k3 + k4 + k5 + k6 + k7 + k8 + k9 + k10 + k11 + k12 + k13 + k14 + k15 + k16 + k17 + k18 + k19 + k20\n  let k3 = k1 + k2 + k3 + k4 + k5 + k6 + k7 + k8 + k9 + k10 + k11 + k12 + k13 + k14 + k15 + k16 + k17 + k18 + k19 + k20\n  let k4 = k1 + k2 + k3 + k4 + k5 + k6 + k7 + k8 + k9 + k10 + k11 + k12 + k13 + k14 + k15 + k16 + k17 + k18 + k19 + k20\n  let k5 = k1 + k2 + k3 + k4 + k5 + k6 + k7 + k8 + k9 + k10 + k11 + k12 + k13 + k14 + k15 + k16 + k17 + k18 + k19 + k20\n  let k6 = k1 + k2 + k3 + k4 + k5 + k6 + k7 + k8 + k9 + k10 + k11 + k12 + k13 + k14 + k15 + k16 + k17 + k18 + k19 + k20\n  let k7 = k1 + k2 + k3 + k4 + k5 + k6 + k7 + k8 + k9 + k10 + k11 + k12 + k13 + k14 + k15 + k16 + k17 + k18 + k19 + k20\n  let k8 = k1 + k2 + k3 + k4 + k5 + k6 + k7 + k8 + k9 + k10 + k11 + k12 + k13 + k14 + k15 + k16 + k17 + k18 + k19 + k20\n  let k9 = k1 + k2 + k3 + k4 + k5 + k6 + k7 + k8 + k9 + k10 + k11 + k12 + k13 + k14 + k15 + k16 + k17 + k18 + k19 + k20\n  let k10 = k1 + k2 + k3 + k4 + k5 + k6 + k7 + k8 + k9 + k10 + k11 + k12 + k13 + k14 + k15 + k16 + k17 + k18 + k19 + k20\n  let k11 = k1 + k2 + k3 + k4 + k5 + k6 + k7 + k8 + k9 + k10 + k11 + k12 + k13 + k14 + k15 + k16 + k17 + k18 + k19 + k20\n  let k12 = k1 + k2 + k3 + k4 + k5 + k6 + k7 + k8 + k9 + k10 + k11 + k12 + k13 + k14 + k15 + k16 + k17 + k18 + k19 + k20\n  let k13 = k1 + k2 + k3 + k4 + k5 + k6 + k7 + k8 + k9 + k10 + k11 + k12 + k13 + k14 + k15 + k16 + k17 + k18 + k19 + k20\n  let k14 = k1 + k2 + k3 + k4 + k5 + k6 + k7 + k8 + k9 + k10 + k11 + k12 + k13 + k14 + k15 + k16 + k17 + k18 + k19 + k20\n  let k15 = k1 + k2 + k3 + k4 + k5 + k6 + k7 + k8 + k9 + k10 + k11 + k12 + k13 + k14 + k15 + k16 + k17 + k18 + k19 + k20\n  let k16 = k1 + k2 + k3 + k4 + k5 + k6 + k7 + k8 + k9 + k10 + k11 + k12 + k13 + k14 + k15 + k16 + k17 + k18 + k19 + k20\n  let k17 = k1 + k2 + k3 + k4 + k5 + k6 + k7 + k8 + k9 + k10 + k11 + k12 + k13 + k14 + k15 + k16 + k17 + k18 + k19 + k20\n  let k18 = k1 + k2 + k3 + k4 + k5 + k6 + k7 + k8 + k9 + k10 + k11 + k12 + k13 + k14 + k15 + k16 + k17 + k18 + k19 + k20\n  let k19 = k1 + k2 + k3 + k4 + k5 + k6 + k7 + k8 + k9 + k10 + k11 + k12 + k13 + k14 + k15 + k16 + k17 + k18 + k19 + k20\n  let k20 = k1 + k2 + k3 + k4 + k5 + k6 + k7 + k8 + k9 + k10 + k11 + k12 + k13 + k14 + k15 + k16 + k17 + k18 + k19 + k20\n  let k1 = k1 + k2 + k3 + k4 + k5 + k6 + k7 + k8 + k9 + k10 + k11 + k12 + k13 + k14 + k15 + k16 + k17 + k18 + k19 + k20\n  let k2 = k1 + k2 + k3 + k4 + k5 + k6 + k7 + k8 + k9 + k10 + k11 + k12 + k13 + k14 + k15 + k16 + k17 + k18 + k19 + k20\n  let k3 = k1 + k2 + k3 + k4 + ", "passed": 0}
{"task_id": "JavaScript/58", "prompt": "/*Return sorted unique comMon elements for two lists.\n  >>> comMon([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> comMon([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst comMon = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "comMon", "gc": "<|endoftext|>/*Return sorted unique comMon elements for two lists.\n  >>> comMon([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> comMon([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst comMon = (l1, l2) => {\n  let result = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let len1 = l1.length\n  let len2 = l2.length\n  while (i < len1 && j < len2) {\n    if (l1[i] < l2[j]) {\n      result.push(l1[i])\n      i++\n    } else {\n      result.push(l2[j])\n      j++\n    }\n  }\n  while (i < len1) {\n    result.push(l1[i])\n    i++\n  }\n  while (j < len2) {\n    result.push(l2[j])\n    j++\n  }\n  return result\n}\n\n/*Return sorted unique comMon elements for two lists.\n  >>> comMon([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> comMon([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst comMon = (l1, l2) => {\n  let result = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let len1 = l1.length\n  let len2 = l2.length\n  while (i < len1 && j < len2) {\n    if (l1[i] < l2[j]) {\n      result.push(l1[i])\n      i++\n    } else {\n      result.push(l2[j])\n      j++\n    }\n  }\n  while (i < len1) {\n    result.push(l1[i])\n    i++\n  }\n  while (j < len2) {\n    result.push(l2[j])\n    j++\n  }\n  return result\n}\n\n/*Return sorted unique comMon elements for two lists.\n  >>> comMon([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> comMon([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst comMon = (l1, l2) => {\n  let result = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let len1 = l1.length\n  let len2 = l2.length\n  while (i < len1 && j < len2) {\n    if (l1[i] < l2[j]) {\n      result.push(l1[i])\n      i++\n    } else {\n      result.push(l2[j])\n      j++\n    }\n  }\n  while (i < len1) {\n    result.push(l1[i])\n    i++\n  }\n  while (j < len2) {\n    result.push(l2[j])\n    j++\n  }\n  return result\n}\n\n/*Return sorted unique comMon elements for two lists.\n  >>> comMon([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> comMon([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst comMon = (l1, l2) => {\n  let result = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let len1 = l1.length\n  let len2 = l2.length\n  while (i < len1 && j < len2) {\n    if (l1[i] < l2[j]) {\n      result.push(l1[i])\n      i++\n    } else {\n      result.push(l2[j])\n      j++\n    }\n  }\n  while (i < len1) {\n    result.push(l1[i])\n    i++\n  }\n  while (j < len2) {\n    result.push(l2[j])\n    j++\n  }\n  return result\n}\n\n/*Return sorted unique comMon elements for two lists.\n  >>> comMon([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> comMon([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst comMon = (l1, l2) => {\n  let result = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let len1 = l1.length\n  let len2 = l2.length\n  while (i < len1 && j < len2) {\n    if (l1[i] < l2[j]) {\n      result.push(l1[i])\n      i++\n    } else {\n      result.push(l2[j])\n      j++\n    }\n  }\n  while (i < len1) {\n    result.push(l1[i])\n    i++\n  }\n  while (j < len2) {\n    result.push(l2[j])\n    j++\n  }\n  return result\n}\n\n/*Return sorted unique comMon elements for two lists.\n  >>> comMon([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> comMon([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst comMon = (l1, l2) => {\n  let result = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let len1 = l1.length\n  let len2 = l2.length\n  while (i < len1 && j < len2) {\n    if (l1[i] < l2[j]) {\n      result.push(l1[i])\n      i++\n    } else {\n      result.push(l2[j])\n      j++\n    }\n  }\n  while (i < len1) {\n    result.push(l1[i])\n    i++\n  }\n  while (j < len2) {\n    result.push(l2[j])\n    j++\n  }\n  return result\n}\n\n/*Return sorted unique comMon elements for two lists.\n  >>> comMon([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> comMon([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst comMon = (l1, l2) => {\n  let result = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let len1 = l1.length\n  let len2 = l2.length\n  while (i < len1 && j < len2) {\n    if (l1[i] < l2[j]) {\n      result.push(l1[i])\n      i++\n    } else {\n      result.push(l2[j])\n      j++\n    }\n  }\n  while (i < len1) {\n    result.push(l1[i])\n    i++\n  }\n  while (j < len2) {\n    result.push(l2[j])\n    j++\n  }\n  return result\n}\n\n/*Return sorted unique comMon elements for two lists.\n  >>> comMon([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> comMon([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst comMon = (l1, l2) => {\n  let result = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let len1 = l1.length\n  let len2 = l2.length\n  while (i < len1 && j < len2) {\n    if (l1[i] < l2[j]) {\n      result.push(l1[i])\n      i++\n    } else {\n      result.push(l2[j])\n      j++\n    }\n  }\n  while (i < len1) {\n    result.push(l1[i])\n    i++\n  }\n  while (j < len2) {\n    result.push(l2[j])\n    j++\n  }\n  return result\n}\n\n/*Return sorted unique comMon elements for two lists.\n  >>> comMon([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> comMon([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst comMon = (l1, l2) => {\n  let result = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let len1 = l1.length\n  let len2 = l2.length\n  while (i < len1 && j < len2) {\n    if (l1[i] < l2[j]) {\n      result.push(l1[i])\n      i++\n    } else {\n      result.", "passed": 0}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> larGestprimefacTor(13195)\n  29\n  >>> larGestprimefacTor(2048)\n  2\n  */\nconst larGestprimefacTor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "larGestprimefacTor", "gc": "<|endoftext|>/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> larGestprimefacTor(13195)\n  29\n  >>> larGestprimefacTor(2048)\n  2\n  */\nconst larGestprimefacTor = (n) => {\n  let primefac = 0;\n  let primefacTor = 0;\n  let primefacTorTor2 = 0;\n  let primefacTor3 = 0;\n  let primefacTor4 = 0;\n  let primefacTor5 = 0;\n  let primefacTor6 = 0;\n  let primefacTor7 = 0;\n  let primefacTor8 = 0;\n  let primefacTor9 = 0;\n  let primefacTor10 = 0;\n  let primefacTor11 = 0;\n  let primefacTor12 = 0;\n  let primefacTor13 = 0;\n  let primefacTor14 = 0;\n  let primefacTor15 = 0;\n  let primefacTor16 = 0;\n  let primefacTor17 = 0;\n  let primefacTor18 = 0;\n  let primefacTor19 = 0;\n  let primefacTor20 = 0;\n  let primefacTor21 = 0;\n  let primefacTor22 = 0;\n  let primefacTor23 = 0;\n  let primefacTor24 = 0;\n  let primefacTor25 = 0;\n  let primefacTor26 = 0;\n  let primefacTor27 = 0;\n  let primefacTor28 = 0;\n  let primefacTor29 = 0;\n  let primefacTor30 = 0;\n  let primefacTor31 = 0;\n  let primefacTor32 = 0;\n  let primefacTor33 = 0;\n  let primefacTor34 = 0;\n  let primefacTor35 = 0;\n  let primefacTor36 = 0;\n  let primefacTor37 = 0;\n  let primefacTor38 = 0;\n  let primefacTor39 = 0;\n  let primefacTor40 = 0;\n  let primefacTor41 = 0;\n  let primefacTor42 = 0;\n  let primefacTor43 = 0;\n  let primefacTor44 = 0;\n  let primefacTor45 = 0;\n  let primefacTor46 = 0;\n  let primefacTor47 = 0;\n  let primefacTor48 = 0;\n  let primefacTor49 = 0;\n  let primefacTor50 = 0;\n  let primefacTor51 = 0;\n  let primefacTor52 = 0;\n  let primefacTor53 = 0;\n  let primefacTor54 = 0;\n  let primefacTor55 = 0;\n  let primefacTor56 = 0;\n  let primefacTor57 = 0;\n  let primefacTor58 = 0;\n  let primefacTor59 = 0;\n  let primefacTor60 = 0;\n  let primefacTor61 = 0;\n  let primefacTor62 = 0;\n  let primefacTor63 = 0;\n  let primefacTor64 = 0;\n  let primefacTor65 = 0;\n  let primefacTor66 = 0;\n  let primefacTor67 = 0;\n  let primefacTor68 = 0;\n  let primefacTor69 = 0;\n  let primefacTor70 = 0;\n  let primefacTor71 = 0;\n  let primefacTor72 = 0;\n  let primefacTor73 = 0;\n  let primefacTor74 = 0;\n  let primefacTor75 = 0;\n  let primefacTor76 = 0;\n  let primefacTor77 = 0;\n  let primefacTor78 = 0;\n  let primefacTor79 = 0;\n  let primefacTor80 = 0;\n  let primefacTor81 = 0;\n  let primefacTor82 = 0;\n  let primefacTor83 = 0;\n  let primefacTor84 = 0;\n  let primefacTor85 = 0;\n  let primefacTor86 = 0;\n  let primefacTor87 = 0;\n  let primefacTor88 = 0;\n  let primefacTor89 = 0;\n  let primefacTor90 = 0;\n  let primefacTor91 = 0;\n  let primefacTor92 = 0;\n  let primefacTor93 = 0;\n  let primefacTor94 = 0;\n  let primefacTor95 = 0;\n  let primefacTor96 = 0;\n  let primefacTor97 = 0;\n  let primefacTor98 = 0;\n  let primefacTor99 = 0;\n  let primefacTor100 = 0;\n  let primefacTor101 = 0;\n  let primefacTor102 = 0;\n  let primefacTor103 = 0;\n  let primefacTor104 = 0;\n  let primefacTor105 = 0;\n  let primefacTor106 = 0;\n  let primefacTor107 = 0;\n  let primefacTor108 = 0;\n  let primefacTor109 = 0;\n  let primefacTor110 = 0;\n  let primefacTor111 = 0;\n  let primefacTor112 = 0;\n  let primefacTor113 = 0;\n  let primefacTor114 = 0;\n  let primefacTor115 = 0;\n  let primefacTor116 = 0;\n  let primefacTor117 = 0;\n  let primefacTor118 = 0;\n  let primefacTor119 = 0;\n  let primefacTor120 = 0;\n  let primefacTor121 = 0;\n  let primefacTor122 = 0;\n  let primefacTor123 = 0;\n  let primefacTor124 = 0;\n  let primefacTor125 = 0;\n  let primefacTor126 = 0;\n  let primefacTor127 = 0;\n  let primefacTor128 = 0;\n  let primefacTor129 = 0;\n  let primefacTor130 = 0;\n  let primefacTor131 = 0;\n  let primefacTor132 = 0;\n  let primefacTor133 = 0;\n  let primefacTor134 = 0;\n  let primefacTor135 = 0;\n  let primefacTor136 = 0;\n  let primefacTor137 = 0;\n  let primefacTor138 = 0;\n  let primefacTor139 = 0;\n  let primefacTor140 = 0;\n  let primefacTor141 = 0;\n  let primefacTor142 = 0;\n  let primefacTor143 = 0;\n  let primefacTor144 = 0;\n  let primefacTor145 = 0;\n  let primefacTor146 = 0;\n  let primefacTor147 = 0;\n  let primefacTor148 = 0;\n  let primefacTor149 = 0;\n  let primefacTor150 = 0;\n  let primefacTor151 = 0;\n  let primefacTor152 = 0;\n  let primefacTor153 = 0;\n  let primefacTor154 = 0;\n  let primefacTor155 = 0;\n  let primefacTor156 = 0;\n  let primefacTor157 = 0;\n  let primefacTor158 = 0;\n  let primefacTor159 = 0;\n  let primefacTor160 = 0;\n  let primefacTor161 = 0;\n  let primefacTor162 = 0;\n  let primefacTor163 = 0;\n  let primefacTor164 = 0;\n  let primefacTor165 = 0;\n  let primefacTor166 = 0;\n  let primefacTor167 = 0;\n  let primefacTor168 = 0;\n  let primefacTor169 = 0;\n  let primefacTor170 = 0;\n  let primefacTor171 = 0;\n  let primefacTor172 = 0;\n  let primefacTor173 = 0;\n  let primefacTor174 = 0;\n  let primefacTor175 = 0;\n  let primefacTor176 = 0;\n  let primefacTor177 = 0;\n  let primefacTor178 = 0;\n  let primefacTor179 = 0;\n  let primefacTor180 = 0;\n  let primefacTor181 = 0;\n  let primefacTor182 = 0;\n  let primefacTor183 = 0;\n  let primefacTor184 = 0;\n  let primefacTor185 = 0;\n  let primefacTor186 = 0;\n  let primefacTor187 = 0;\n  let primefacTor188 = 0;\n  let primefacTor189 = 0;\n  let primefacTor190 = 0;\n  let primefacTor191 = 0;\n  let primefacTor192 = 0;\n  let primefacTor193 = 0;\n  let primefacTor194 = 0;\n  let primefacTor195 = 0;\n  let primefacTor196 = 0;\n  let primefacTor197 = 0;\n  let primefacTor198 = 0;\n  let primefacTor199 = 0;\n  let primefacTor200 = 0;\n  let primefacTor201 = 0;\n  let primefacTor202 = 0;\n  let primefacTor203 = 0;\n  let primefacTor204 = 0;\n  let primefacTor205 = 0;\n  let primefacTor206 = 0;\n  let primefacTor207 = 0;\n  let primefacTor208 = 0;\n  let primefacTor209 = 0;\n  let primefacTor210 = 0;\n  let primefacTor211 = 0;", "passed": 0}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parSeNeStedPAreNs('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parSeNeStedPAreNs = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parSeNeStedPAreNs", "gc": "<|endoftext|>/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parSeNeStedPAreNs('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parSeNeStedPAreNs = (paren_string) => {\n  const paren_groups = paren_string.match(/\\(([^)]+)\\)/g);\n  const deepest_level = 0;\n  const result = [];\n  for (let i = 0; i < paren_groups.length; i++) {\n    const paren_group = paren_groups[i];\n    const paren_group_parens = paren_group.match(/\\(([^)]+)\\)/g);\n    const paren_group_parens_length = paren_group_parens.length;\n    const paren_group_parens_index = paren_group_parens.findIndex((paren_group_paren) => paren_group_paren.includes('('));\n    const paren_group_parens_length = paren_group_parens.length;\n    const paren_group_parens_index = paren_group_parens.findIndex((paren_group_paren) => paren_group_paren.includes(')'));\n    const paren_group_parens_length = paren_group_parens.length;\n    const paren_group_parens_index = paren_group_parens.findIndex((paren_group_paren) => paren_group_paren.includes('('));\n    const paren_group_parens_length = paren_group_parens.length;\n    const paren_group_parens_index = paren_group_parens.findIndex((paren_group_paren) => paren_group_paren.includes(')'));\n    const paren_group_parens_length = paren_group_parens.length;\n    const paren_group_parens_index = paren_group_parens.findIndex((paren_group_paren) => paren_group_paren.includes('('));\n    const paren_group_parens_length = paren_group_parens.length;\n    const paren_group_parens_index = paren_group_parens.findIndex((paren_group_paren) => paren_group_paren.includes(')'));\n    const paren_group_parens_length = paren_group_parens.length;\n    const paren_group_parens_index = paren_group_parens.findIndex((paren_group_paren) => paren_group_paren.includes('('));\n    const paren_group_parens_length = paren_group_parens.length;\n    const paren_group_parens_index = paren_group_parens.findIndex((paren_group_paren) => paren_group_paren.includes(')'));\n    const paren_group_parens_length = paren_group_parens.length;\n    const paren_group_parens_index = paren_group_parens.findIndex((paren_group_paren) => paren_group_paren.includes('('));\n    const paren_group_parens_length = paren_group_parens.length;\n    const paren_group_parens_index = paren_group_parens.findIndex((paren_group_paren) => paren_group_paren.includes(')'));\n    const paren_group_parens_length = paren_group_parens.length;\n    const paren_group_parens_index = paren_group_parens.findIndex((paren_group_paren) => paren_group_paren.includes('('));\n    const paren_group_parens_length = paren_group_parens.length;\n    const paren_group_parens_index = paren_group_parens.findIndex((paren_group_paren) => paren_group_paren.includes(')'));\n    const paren_group_parens_length = paren_group_parens.length;\n    const paren_group_parens_index = paren_group_parens.findIndex((paren_group_paren) => paren_group_paren.includes('('));\n    const paren_group_parens_length = paren_group_parens.length;\n    const paren_group_parens_index = paren_group_parens.findIndex((paren_group_paren) => paren_group_paren.includes(')'));\n    const paren_group_parens_length = paren_group_parens.length;\n    const paren_group_parens_index = paren_group_parens.findIndex((paren_group_paren) => paren_group_paren.includes('('));\n    const paren_group_parens_length = paren_group_parens.length;\n    const paren_group_parens_index = paren_group_parens.findIndex((paren_group_paren) => paren_group_paren.includes(')'));\n    const paren_group_parens_length = paren_group_parens.length;\n    const paren_group_parens_index = paren_group_parens.findIndex((paren_group_paren) => paren_group_paren.includes('('));\n    const paren_group_parens_length = paren_group_parens.length;\n    const paren_group_parens_index = paren_group_parens.findIndex((paren_group_paren) => paren_group_paren.includes(')'));\n    const paren_group_parens_length = paren_group_parens.length;\n    const paren_group_parens_index = paren_group_parens.findIndex((paren_group_paren) => paren_group_paren.includes('('));\n    const paren_group_parens_length = paren_group_parens.length;\n    const paren_group_parens_index = paren_group_parens.findIndex((paren_group_paren) => paren_group_paren.includes(')'));\n    const paren_group_parens_length = paren_group_parens.length;\n    const paren_group_parens_index = paren_group_parens.findIndex((paren_group_paren) => paren_group_paren.includes('('));\n    const paren_group_parens_length = paren_group_parens.length;\n    const paren_group_parens_index = paren_group_parens.findIndex((paren_group_paren) => paren_group_paren.includes(')'));\n    const paren_group_parens_length = paren_group_parens.length;\n    const paren_group_parens_index = paren_group_parens.findIndex((paren_group_paren) => paren_group_paren.includes('('));\n    const paren_group_parens_length = paren_group_parens.length;\n    const paren_group_parens_index = paren_group_parens.findIndex((paren_group_paren) => paren_group_paren.includes(')'));\n    const paren_group_parens_length = paren_group_parens.length;\n    const paren_group_parens_index = paren_group_parens.findIndex((paren_group_paren) => paren_group_paren.includes('('));\n    const paren_group_parens_length = paren_group_parens.length;\n    const paren_group_parens_index = paren_group_parens.findIndex((paren_group_paren) => paren_group_paren.includes(')'));\n    const paren_group_parens_length = paren_group_parens.length;\n    const paren_group_parens_index = paren_group_parens.findIndex((paren_group_paren) => paren_group_paren.includes('('));\n    const paren_group_parens_length = paren_group_parens.length;\n    const paren_group_parens_index = paren_group_parens.findIndex((paren_group_paren) => paren_group_paren.includes(')'));\n    const paren_group_parens_length = paren_group_parens.length;\n    const paren_group_parens_index = paren_group_parens.findIndex((paren_group_paren) => paren_group_paren.includes('('));\n    const paren_group_parens_length = paren_group_parens.length;\n    const paren_group_parens_index = paren_group_parens.findIndex((paren_group_paren) => paren_group_paren.includes(')'));\n    const paren_group_parens_length = paren_group_parens.length;\n    const paren_group_parens_index = paren_group_parens.findIndex((paren_group_paren) => paren_group_paren.includes('('));\n    const paren_group_parens_length = paren_group_parens.length;\n    const paren_group_parens_index = paren_group_parens.findIndex((paren_group_paren) => ", "passed": 0}
{"task_id": "JavaScript/60", "prompt": "/*sumtoN is a function that sums numbers from 1 to n.\n  >>> sumtoN(30)\n  465\n  >>> sumtoN(100)\n  5050\n  >>> sumtoN(5)\n  15\n  >>> sumtoN(10)\n  55\n  >>> sumtoN(1)\n  1\n  */\nconst sumtoN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumtoN", "gc": "<|endoftext|>/*sumtoN is a function that sums numbers from 1 to n.\n  >>> sumtoN(30)\n  465\n  >>> sumtoN(100)\n  5050\n  >>> sumtoN(5)\n  15\n  >>> sumtoN(10)\n  55\n  >>> sumtoN(1)\n  1\n  */\nconst sumtoN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumtoM is a function that sums numbers from 1 to m.\n  >>> sumtoM(30)\n  465\n  >>> sumtoM(100)\n  5050\n  >>> sumtoM(5)\n  15\n  >>> sumtoM(10)\n  55\n  >>> sumtoM(1)\n  1\n  */\nconst sumtoM = (m) => {\n  let sum = 0;\n  for (let i = 1; i <= m; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumtoK is a function that sums numbers from 1 to k.\n  >>> sumtoK(30)\n  465\n  >>> sumtoK(100)\n  5050\n  >>> sumtoK(5)\n  15\n  >>> sumtoK(10)\n  55\n  >>> sumtoK(1)\n  1\n  */\nconst sumtoK = (k) => {\n  let sum = 0;\n  for (let i = 1; i <= k; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumtoN is a function that sums numbers from 1 to n.\n  >>> sumtoN(30)\n  465\n  >>> sumtoN(100)\n  5050\n  >>> sumtoN(5)\n  15\n  >>> sumtoN(10)\n  55\n  >>> sumtoN(1)\n  1\n  */\nconst sumtoN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumtoM is a function that sums numbers from 1 to m.\n  >>> sumtoM(30)\n  465\n  >>> sumtoM(100)\n  5050\n  >>> sumtoM(5)\n  15\n  >>> sumtoM(10)\n  55\n  >>> sumtoM(1)\n  1\n  */\nconst sumtoM = (m) => {\n  let sum = 0;\n  for (let i = 1; i <= m; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumtoK is a function that sums numbers from 1 to k.\n  >>> sumtoK(30)\n  465\n  >>> sumtoK(100)\n  5050\n  >>> sumtoK(5)\n  15\n  >>> sumtoK(10)\n  55\n  >>> sumtoK(1)\n  1\n  */\nconst sumtoK = (k) => {\n  let sum = 0;\n  for (let i = 1; i <= k; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumtoN is a function that sums numbers from 1 to n.\n  >>> sumtoN(30)\n  465\n  >>> sumtoN(100)\n  5050\n  >>> sumtoN(5)\n  15\n  >>> sumtoN(10)\n  55\n  >>> sumtoN(1)\n  1\n  */\nconst sumtoN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumtoM is a function that sums numbers from 1 to m.\n  >>> sumtoM(30)\n  465\n  >>> sumtoM(100)\n  5050\n  >>> sumtoM(5)\n  15\n  >>> sumtoM(10)\n  55\n  >>> sumtoM(1)\n  1\n  */\nconst sumtoM = (m) => {\n  let sum = 0;\n  for (let i = 1; i <= m; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumtoK is a function that sums numbers from 1 to k.\n  >>> sumtoK(30)\n  465\n  >>> sumtoK(100)\n  5050\n  >>> sumtoK(5)\n  15\n  >>> sumtoK(10)\n  55\n  >>> sumtoK(1)\n  1\n  */\nconst sumtoK = (k) => {\n  let sum = 0;\n  for (let i = 1; i <= k; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumtoN is a function that sums numbers from 1 to n.\n  >>> sumtoN(30)\n  465\n  >>> sumtoN(100)\n  5050\n  >>> sumtoN(5)\n  15\n  >>> sumtoN(10)\n  55\n  >>> sumtoN(1)\n  1\n  */\nconst sumtoN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumtoM is a function that sums numbers from 1 to m.\n  >>> sumtoM(30)\n  465\n  >>> sumtoM(100)\n  5050\n  >>> sumtoM(5)\n  15\n  >>> sumtoM(10)\n  55\n  >>> sumtoM(1)\n  1\n  */\nconst sumtoM = (m) => {\n  let sum = 0;\n  for (let i = 1; i <= m; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumtoK is a function that sums numbers from 1 to k.\n  >>> sumtoK(30)\n  465\n  >>> sumtoK(100)\n  5050\n  >>> sumtoK(5)\n  15\n  >>> sumtoK(10)\n  55\n  >>> sumtoK(1)\n  1\n  */\nconst sumtoK = (k) => {\n  let sum = 0;\n  for (let i = 1; i <= k; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumtoN is a function that sums numbers from 1 to n.\n  >>> sumtoN(30)\n  465\n  >>> sumtoN(100)\n  5050\n  >>> sumtoN(5)\n  15\n  >>> sumtoN(10)\n  55\n  >>> sumtoN(1)\n  1\n  */\nconst sumtoN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumtoM is a function that sums numbers from 1 to m.\n  >>> sumtoM(30)\n  465\n  >>> sumtoM(100)\n  5050\n  >>> sumtoM(5)\n  15\n  >>> sumtoM(10)\n  55\n  >>> sumtoM(1)\n  1\n  */\nconst sumtoM = (m) => {\n  let sum = 0;\n  for (let i = 1; i <= m; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumtoK is a function that sums numbers from 1 to k.\n  >>> sumtoK(30)\n  465\n  >>> sumtoK(100)\n  5050\n  >>> sumtoK(5)\n  15\n  >>> sumtoK(10)\n  55\n  >>> sumtoK(1)\n  1\n  */\nconst sumtoK = (k) => {\n  let ", "passed": 0}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> corRectbrackEtiNg(\"(\")\n  false\n  >>> corRectbrackEtiNg(\"()\")\n  true\n  >>> corRectbrackEtiNg(\"(()())\")\n  true\n  >>> corRectbrackEtiNg(\")(()\")\n  false\n  */\nconst corRectbrackEtiNg = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "corRectbrackEtiNg", "gc": "<|endoftext|>/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> corRectbrackEtiNg(\"(\")\n  false\n  >>> corRectbrackEtiNg(\"()\")\n  true\n  >>> corRectbrackEtiNg(\"(()())\")\n  true\n  >>> corRectbrackEtiNg(\")(()\")\n  false\n  */\nconst corRectbrackEtiNg = (brackets) => {\n  const bracketsArr = brackets.split('');\n  const openingBrackets = bracketsArr.filter(\n    (bracket) => bracketsArr.indexOf(bracket) === 0\n  );\n  const closingBrackets = bracketsArr.filter(\n    (bracket) => bracketsArr.indexOf(bracket) === bracketsArr.length - 1\n  );\n  return openingBrackets.length === closingBrackets.length;\n};\n\n/**\n * corRectbrackEtiNg - returns true if brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> corRectbrackEtiNg(\"(())\")\n  false\n  >>> corRectbrackEtiNg(\"(())()\")\n  true\n  >>> corRectbrackEtiNg(\"(()())\")\n  true\n  >>> corRectbrackEtiNg(\"(()())()\")\n  true\n  */\nconst corRectbrackEti = (brackets) => {\n  const bracketsArr = brackets.split('');\n  const openingBrackets = bracketsArr.filter(\n    (bracket) => bracketsArr.indexOf(bracket) === 0\n  );\n  const closingBrackets = bracketsArr.filter(\n    (bracket) => bracketsArr.indexOf(bracket) === bracketsArr.length - 1\n  );\n  return openingBrackets.length === closingBrackets.length;\n};\n\n/**\n * corRectbrackEti - returns true if brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> corRectbrackEti(\"(())\")\n  false\n  >>> corRectbrackEti(\"(())()\")\n  true\n  >>> corRectbrackEti(\"(()())\")\n  true\n  >>> corRectbrackEti(\"(()())()\")\n  true\n  */\nconst corRectbrackEti = (brackets) => {\n  const bracketsArr = brackets.split('');\n  const openingBrackets = bracketsArr.filter(\n    (bracket) => bracketsArr.indexOf(bracket) === 0\n  );\n  const closingBrackets = bracketsArr.filter(\n    (bracket) => bracketsArr.indexOf(bracket) === bracketsArr.length - 1\n  );\n  return openingBrackets.length === closingBrackets.length;\n};\n\n/**\n * corRectbrack - returns true if brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> corRectbrack(\"(())\")\n  false\n  >>> corRectbrack(\"(())()\")\n  true\n  >>> corRectbrack(\"(()())\")\n  true\n  >>> corRectbrack(\"(()())()\")\n  true\n  */\nconst corRectbrack = (brackets) => {\n  const bracketsArr = brackets.split('');\n  const openingBrackets = bracketsArr.filter(\n    (bracket) => bracketsArr.indexOf(bracket) === 0\n  );\n  const closingBrackets = bracketsArr.filter(\n    (bracket) => bracketsArr.indexOf(bracket) === bracketsArr.length - 1\n  );\n  return openingBrackets.length === closingBrackets.length;\n};\n\n/**\n * corRectbrack - returns true if brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> corRectbrack(\"(())\")\n  false\n  >>> corRectbrack(\"(())()\")\n  true\n  >>> corRectbrack(\"(()())\")\n  true\n  >>> corRectbrack(\"(()())()\")\n  true\n  */\nconst corRectbrack = (brackets) => {\n  const bracketsArr = brackets.split('');\n  const openingBrackets = bracketsArr.filter(\n    (bracket) => bracketsArr.indexOf(bracket) === 0\n  );\n  const closingBrackets = bracketsArr.filter(\n    (bracket) => bracketsArr.indexOf(bracket) === bracketsArr.length - 1\n  );\n  return openingBrackets.length === closingBrackets.length;\n};\n\n/**\n * corRectbrack - returns true if brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> corRectbrack(\"(())\")\n  false\n  >>> corRectbrack(\"(())()\")\n  true\n  >>> corRectbrack(\"(()())\")\n  true\n  >>> corRectbrack(\"(()())()\")\n  true\n  */\nconst corRectbrack = (brackets) => {\n  const bracketsArr = brackets.split('');\n  const openingBrackets = bracketsArr.filter(\n    (bracket) => bracketsArr.indexOf(bracket) === 0\n  );\n  const closingBrackets = bracketsArr.filter(\n    (bracket) => bracketsArr.indexOf(bracket) === bracketsArr.length - 1\n  );\n  return openingBrackets.length === closingBrackets.length;\n};\n\n/**\n * corRectbrack - returns true if brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> corRectbrack(\"(())\")\n  false\n  >>> corRectbrack(\"(())()\")\n  true\n  >>> corRectbrack(\"(()())\")\n  true\n  >>> corRectbrack(\"(()())()\")\n  true\n  */\nconst corRectbrack = (brackets) => {\n  const bracketsArr = brackets.split('');\n  const openingBrackets = bracketsArr.filter(\n    (bracket) => bracketsArr.indexOf(bracket) === 0\n  );\n  const closingBrackets = bracketsArr.filter(\n    (bracket) => bracketsArr.indexOf(bracket) === bracketsArr.length - 1\n  );\n  return openingBrackets.length === closingBrackets.length;\n};\n\n/**\n * corRectbrack - returns true if brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> corRectbrack(\"(())\")\n  false\n  >>> corRectbrack(\"(())()\")\n  true\n  >>> corRectbrack(\"(()())\")\n  true\n  >>> corRectbrack(\"(()())()\")\n  true\n  */\nconst corRectbrack = (brackets) => {\n  const bracketsArr = brackets.split('');\n  const openingBrackets = bracketsArr.filter(\n    (bracket) => bracketsArr.indexOf(bracket) === 0\n  );\n  const closingBrackets = bracketsArr.filter(\n    (bra", "passed": 0}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   Return derIvatIve of this polynomial in the same form.\n  >>> derIvatIve([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derIvatIve([1, 2, 3])\n  [2, 6]\n  */\nconst derIvatIve = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derIvatIve", "gc": "<|endoftext|>/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return derIvatIve of this polynomial in the same form.\n  >>> derIvatIve([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derIvatIve([1, 2, 3])\n  [2, 6]\n  */\nconst derIvatIve = (xs) => {\n  const n = xs.length\n  const res = []\n  for (let i = 0; i < n; i++) {\n    const x = xs[i]\n    const x0 = x\n    const x1 = x\n    const x2 = x\n    const x3 = x\n    const x4 = x\n    const x5 = x\n    const x6 = x\n    const x7 = x\n    const x8 = x\n    const x9 = x\n    const x10 = x\n    const x11 = x\n    const x12 = x\n    const x13 = x\n    const x14 = x\n    const x15 = x\n    const x16 = x\n    const x17 = x\n    const x18 = x\n    const x19 = x\n    const x20 = x\n    const x21 = x\n    const x22 = x\n    const x23 = x\n    const x24 = x\n    const x25 = x\n    const x26 = x\n    const x27 = x\n    const x28 = x\n    const x29 = x\n    const x30 = x\n    const x31 = x\n    const x32 = x\n    const x33 = x\n    const x34 = x\n    const x35 = x\n    const x36 = x\n    const x37 = x\n    const x38 = x\n    const x39 = x\n    const x40 = x\n    const x41 = x\n    const x42 = x\n    const x43 = x\n    const x44 = x\n    const x45 = x\n    const x46 = x\n    const x47 = x\n    const x48 = x\n    const x49 = x\n    const x50 = x\n    const x51 = x\n    const x52 = x\n    const x53 = x\n    const x54 = x\n    const x55 = x\n    const x56 = x\n    const x57 = x\n    const x58 = x\n    const x59 = x\n    const x60 = x\n    const x61 = x\n    const x62 = x\n    const x63 = x\n    const x64 = x\n    const x65 = x\n    const x66 = x\n    const x67 = x\n    const x68 = x\n    const x69 = x\n    const x70 = x\n    const x71 = x\n    const x72 = x\n    const x73 = x\n    const x74 = x\n    const x75 = x\n    const x76 = x\n    const x77 = x\n    const x78 = x\n    const x79 = x\n    const x80 = x\n    const x81 = x\n    const x82 = x\n    const x83 = x\n    const x84 = x\n    const x85 = x\n    const x86 = x\n    const x87 = x\n    const x88 = x\n    const x89 = x\n    const x90 = x\n    const x91 = x\n    const x92 = x\n    const x93 = x\n    const x94 = x\n    const x95 = x\n    const x96 = x\n    const x97 = x\n    const x98 = x\n    const x99 = x\n    const x100 = x\n    const x101 = x\n    const x102 = x\n    const x103 = x\n    const x104 = x\n    const x105 = x\n    const x106 = x\n    const x107 = x\n    const x108 = x\n    const x109 = x\n    const x110 = x\n    const x111 = x\n    const x112 = x\n    const x113 = x\n    const x114 = x\n    const x115 = x\n    const x116 = x\n    const x117 = x\n    const x118 = x\n    const x119 = x\n    const x120 = x\n    const x121 = x\n    const x122 = x\n    const x123 = x\n    const x124 = x\n    const x125 = x\n    const x126 = x\n    const x127 = x\n    const x128 = x\n    const x129 = x\n    const x130 = x\n    const x131 = x\n    const x132 = x\n    const x133 = x\n    const x134 = x\n    const x135 = x\n    const x136 = x\n    const x137 = x\n    const x138 = x\n    const x139 = x\n    const x140 = x\n    const x141 = x\n    const x142 = x\n    const x143 = x\n    const x144 = x\n    const x145 = x\n    const x146 = x\n    const x147 = x\n    const x148 = x\n    const x149 = x\n    const x150 = x\n    const x151 = x\n    const x152 = x\n    const x153 = x\n    const x154 = x\n    const x155 = x\n    const x156 = x\n    const x157 = x\n    const x158 = x\n    const x159 = x\n    const x160 = x\n    const x161 = x\n    const x162 = x\n    const x163 = x\n    const x164 = x\n    const x165 = x\n    const x166 = x\n    const x167 = x\n    const x168 = x\n    const x169 = x\n    const x170 = x\n    const x171 = x\n    const x172 = x\n    const x173 = x\n    const x174 = x\n    const x175 = x\n    const x176 = x\n    const x177 = x\n    const x178 = x\n    const x179 = x\n    const x180 = x\n    const x181 = x\n    const x182 = x\n    const x183 = x\n    const x184 = x\n    const x185 = x\n    const x186 = x\n    const x187 = x\n    const x188 = x\n    const x189 = x\n    const x190 = x\n    const x191 = x\n    const x192 = x\n    const x193 = x\n    const x194 = x\n    const x195 = x\n    const x196 = x\n    const x197 = x\n    const x198 = x\n    const x199 = x\n    const x200 = x\n    const x201 = x\n    const x202 = x\n    const x203 = x\n    const x204 = x\n    const x205 = x\n    const x206 = x\n    const x207 = x\n    const x208 = x\n    const x209 = x\n    const x210 = x\n    const x211 = x\n    const x212 = x\n    const x213 = x\n    const x214 = x\n    const x215 = x\n    const x216 = x\n    const x217 = x\n    const x218 = x\n    const x219 = x\n    const x220 = x\n    const x221 = x\n    const x222 = x\n    const x223 = x\n    const x224 = x\n    const x225 = x\n    const x226 = x\n    const x227 = x\n    const x228 = x\n    const x229 = x\n    const x230 = x\n    const x231 = x\n    const x232 = x\n    const x233 = x\n    const x234 = x\n    const x235 = x\n    const x236 = x\n    const x237 = x\n    const x238 = x\n    const x239 = x\n    const x240 = x\n    const x241 = x\n    const x242 = x\n    const x243 = x\n    const x244 = x\n    const x245 = x\n    const x246 = x\n    const x247 = x\n    const x248 = x\n    const x249 = x\n    const x250 = x\n    const x251 = x\n    const x252 = x\n    const x253 = x\n    const x254 = x\n    const x255 = x\n    const x256 = x\n    const x257 = x\n    const x258 = x\n    const x259 = x\n    const x260 = x\n    const x261 = x\n    const x26", "passed": 0}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibFib(0) == 0\n  fibFib(1) == 0\n  fibFib(2) == 1\n  fibFib(n) == fibFib(n-1) + fibFib(n-2) + fibFib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibFib number sequence.\n  >>> fibFib(1)\n  0\n  >>> fibFib(5)\n  4\n  >>> fibFib(8)\n  24\n  */\nconst fibFib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibFib", "gc": "<|endoftext|>/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibFib(0) == 0\n  fibFib(1) == 0\n  fibFib(2) == 1\n  fibFib(n) == fibFib(n-1) + fibFib(n-2) + fibFib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibFib number sequence.\n  >>> fibFib(1)\n  0\n  >>> fibFib(5)\n  4\n  >>> fibFib(8)\n  24\n  */\nconst fibFib = (n) => {\n  let fibFib = 0;\n  for (let i = 1; i <= n; i++) {\n    fibFib = fibFib + fibFib + fibFib;\n  }\n  return fibFib;\n};\n\n/*\n  Write a function to compute the nth Fibonacci number in the Fibonacci sequence using recursion.\n  >>> fibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFibFib", "passed": 0}
{"task_id": "JavaScript/64", "prompt": "/*Write a function vowElsCOunt which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowElsCOunt(\"abcde\")\n  2\n  >>> vowElsCOunt(\"ACEDY\")\n  3\n  */\nconst vowElsCOunt = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowElsCOunt", "gc": "<|endoftext|>/*Write a function vowElsCOunt which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowElsCOunt(\"abcde\")\n  2\n  >>> vowElsCOunt(\"ACEDY\")\n  3\n  */\nconst vowElsCOunt = (s) => {\n  let count = 0;\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let vowelsEnd = vowels.indexOf(\"y\");\n  let vowelsStart = 0;\n  let vowelsEnd2 = vowels.indexOf(\"e\");\n  let vowelsStart2 = vowels.indexOf(\"a\");\n  let vowelsEnd3 = vowels.indexOf(\"i\");\n  let vowelsStart3 = vowels.indexOf(\"o\");\n  let vowelsEnd4 = vowels.indexOf(\"u\");\n  let vowelsStart4 = vowels.indexOf(\"y\");\n  let vowelsEnd5 = vowels.indexOf(\"d\");\n  let vowelsStart5 = vowels.indexOf(\"c\");\n  let vowelsEnd6 = vowels.indexOf(\"b\");\n  let vowelsStart6 = vowels.indexOf(\"a\");\n  let vowelsEnd7 = vowels.indexOf(\"c\");\n  let vowelsStart7 = vowels.indexOf(\"b\");\n  let vowelsEnd8 = vowels.indexOf(\"d\");\n  let vowelsStart8 = vowels.indexOf(\"e\");\n  let vowelsEnd9 = vowels.indexOf(\"f\");\n  let vowelsStart9 = vowels.indexOf(\"g\");\n  let vowelsEnd10 = vowels.indexOf(\"h\");\n  let vowelsStart10 = vowels.indexOf(\"i\");\n  let vowelsEnd11 = vowels.indexOf(\"j\");\n  let vowelsStart11 = vowels.indexOf(\"k\");\n  let vowelsEnd12 = vowels.indexOf(\"l\");\n  let vowelsStart12 = vowels.indexOf(\"m\");\n  let vowelsEnd13 = vowels.indexOf(\"n\");\n  let vowelsStart13 = vowels.indexOf(\"o\");\n  let vowelsEnd14 = vowels.indexOf(\"p\");\n  let vowelsStart14 = vowels.indexOf(\"q\");\n  let vowelsEnd15 = vowels.indexOf(\"r\");\n  let vowelsStart15 = vowels.indexOf(\"s\");\n  let vowelsEnd16 = vowels.indexOf(\"t\");\n  let vowelsStart16 = vowels.indexOf(\"u\");\n  let vowelsEnd17 = vowels.indexOf(\"v\");\n  let vowelsStart17 = vowels.indexOf(\"w\");\n  let vowelsEnd18 = vowels.indexOf(\"x\");\n  let vowelsStart18 = vowels.indexOf(\"y\");\n  let vowelsEnd19 = vowels.indexOf(\"z\");\n  let vowelsStart19 = vowels.indexOf(\"A\");\n  let vowelsEnd20 = vowels.indexOf(\"E\");\n  let vowelsStart20 = vowels.indexOf(\"I\");\n  let vowelsEnd21 = vowels.indexOf(\"O\");\n  let vowelsStart21 = vowels.indexOf(\"U\");\n  let vowelsEnd22 = vowels.indexOf(\"Y\");\n  let vowelsStart22 = vowels.indexOf(\"D\");\n  let vowelsEnd23 = vowels.indexOf(\"C\");\n  let vowelsStart23 = vowels.indexOf(\"B\");\n  let vowelsEnd24 = vowels.indexOf(\"A\");\n  let vowelsStart24 = vowels.indexOf(\"E\");\n  let vowelsEnd25 = vowels.indexOf(\"I\");\n  let vowelsStart25 = vowels.indexOf(\"O\");\n  let vowelsEnd26 = vowels.indexOf(\"U\");\n  let vowelsStart26 = vowels.indexOf(\"Y\");\n  let vowelsEnd27 = vowels.indexOf(\"D\");\n  let vowelsStart27 = vowels.indexOf(\"C\");\n  let vowelsEnd28 = vowels.indexOf(\"B\");\n  let vowelsStart28 = vowels.indexOf(\"A\");\n  let vowelsEnd29 = vowels.indexOf(\"E\");\n  let vowelsStart29 = vowels.indexOf(\"I\");\n  let vowelsEnd30 = vowels.indexOf(\"O\");\n  let vowelsStart30 = vowels.indexOf(\"U\");\n  let vowelsEnd31 = vowels.indexOf(\"Y\");\n  let vowelsStart31 = vowels.indexOf(\"D\");\n  let vowelsEnd32 = vowels.indexOf(\"C\");\n  let vowelsStart32 = vowels.indexOf(\"B\");\n  let vowelsEnd33 = vowels.indexOf(\"A\");\n  let vowelsStart33 = vowels.indexOf(\"E\");\n  let vowelsEnd34 = vowels.indexOf(\"I\");\n  let vowelsStart34 = vowels.indexOf(\"O\");\n  let vowelsEnd35 = vowels.indexOf(\"U\");\n  let vowelsStart35 = vowels.indexOf(\"Y\");\n  let vowelsEnd36 = vowels.indexOf(\"D\");\n  let vowelsStart36 = vowels.indexOf(\"C\");\n  let vowelsEnd37 = vowels.indexOf(\"B\");\n  let vowelsStart37 = vowels.indexOf(\"A\");\n  let vowelsEnd38 = vowels.indexOf(\"E\");\n  let vowelsStart38 = vowels.indexOf(\"I\");\n  let vowelsEnd39 = vowels.indexOf(\"O\");\n  let vowelsStart39 = vowels.indexOf(\"U\");\n  let vowelsEnd40 = vowels.indexOf(\"Y\");\n  let vowelsStart40 = vowels.indexOf(\"D\");\n  let vowelsEnd41 = vowels.indexOf(\"C\");\n  let vowelsStart41 = vowels.indexOf(\"B\");\n  let vowelsEnd42 = vowels.indexOf(\"A\");\n  let vowelsStart42 = vowels.indexOf(\"E\");\n  let vowelsEnd43 = vowels.indexOf(\"I\");\n  let vowelsStart43 = vowels.indexOf(\"O\");\n  let vowelsEnd44 = vowels.indexOf(\"U\");\n  let vowelsStart44 = vowels.indexOf(\"Y\");\n  let vowelsEnd45 = vowels.indexOf(\"D\");\n  let vowelsStart45 = vowels.indexOf(\"C\");\n  let vowelsEnd46 = vowels.indexOf(\"B\");\n  let vowelsStart46 = vowels.indexOf(\"A\");\n  let vowelsEnd47 = vowels.indexOf(\"E\");\n  let vowelsStart47 = vowels.indexOf(\"I\");\n  let vowelsEnd48 = vowels.indexOf(\"O\");\n  let vowelsStart48 = vowels.indexOf(\"U\");\n  let vowelsEnd49 = vowels.indexOf(\"Y\");\n  let vowelsStart49 = vowels.indexOf(\"D\");\n  let vowelsEnd50 = vowels.indexOf(\"C\");\n  let vowelsStart50 = vowels.indexOf(\"B\");\n  let vowelsEnd51 = vowels.indexOf(\"A\");\n  let vowelsStart51 = vowels.indexOf(\"E\");\n  let vowelsEnd52 = vowels.indexOf(\"I\");\n  let vowelsStart52 = vowels.indexOf(\"O\");\n  let vowelsEnd53 = vowels.indexOf(\"U\");\n  let vowelsStart53 = vowels.indexOf(\"Y\");\n  let vowelsEnd54 = vowels.indexOf(\"D\");\n  let vowelsStart54 = vowels.indexOf(\"C\");\n  let vowelsEnd55 = vowels.indexOf(\"B\");\n  let vowelsStart55 = vowels.indexOf(\"A\");\n  let vowelsEnd56 = vowels.indexOf(\"E\");\n  let vowels", "passed": 0}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> cirCulaRShifT(12, 1)\n  \"21\"\n  >>> cirCulaRShifT(12, 2)\n  \"12\"\n  */\nconst cirCulaRShifT = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "cirCulaRShifT", "gc": "<|endoftext|>/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> cirCulaRShifT(12, 1)\n  \"21\"\n  >>> cirCulaRShifT(12, 2)\n  \"12\"\n  */\nconst cirCulaRShifT = (x, shift) => {\n  const digits = x.toString().split('')\n  let result = digits\n   .slice(digits.length - shift)\n   .join('')\n  return result\n}\n\n/*\n  Given a number x, return its cube root modulo m.\n  >>> cirCulaRModulo(123, 2)\n  1\n  >>> cirCulaRModulo(123, 3)\n  0\n  >>> cirCulaRModulo(123, 4)\n  -1\n  >>> cirCulaRModulo(123, 5)\n  -1\n  >>> cirCulaRModulo(123, 6)\n  -1\n  >>> cirCulaRModulo(123, 7)\n  -1\n  >>> cirCulaRModulo(123, 8)\n  -1\n  >>> cirCulaRModulo(123, 9)\n  -1\n  >>> cirCulaRModulo(123, 10)\n  -1\n  >>> cirCulaRModulo(123, 11)\n  -1\n  >>> cirCulaRModulo(123, 12)\n  -1\n  >>> cirCulaRModulo(123, 13)\n  -1\n  >>> cirCulaRModulo(123, 14)\n  -1\n  >>> cirCulaRModulo(123, 15)\n  -1\n  >>> cirCulaRModulo(123, 16)\n  -1\n  >>> cirCulaRModulo(123, 17)\n  -1\n  >>> cirCulaRModulo(123, 18)\n  -1\n  >>> cirCulaRModulo(123, 19)\n  -1\n  >>> cirCulaRModulo(123, 20)\n  -1\n  >>> cirCulaRModulo(123, 21)\n  -1\n  >>> cirCulaRModulo(123, 22)\n  -1\n  >>> cirCulaRModulo(123, 23)\n  -1\n  >>> cirCulaRModulo(123, 24)\n  -1\n  >>> cirCulaRModulo(123, 25)\n  -1\n  >>> cirCulaRModulo(123, 26)\n  -1\n  >>> cirCulaRModulo(123, 27)\n  -1\n  >>> cirCulaRModulo(123, 28)\n  -1\n  >>> cirCulaRModulo(123, 29)\n  -1\n  >>> cirCulaRModulo(123, 30)\n  -1\n  >>> cirCulaRModulo(123, 31)\n  -1\n  >>> cirCulaRModulo(123, 32)\n  -1\n  >>> cirCulaRModulo(123, 33)\n  -1\n  >>> cirCulaRModulo(123, 34)\n  -1\n  >>> cirCulaRModulo(123, 35)\n  -1\n  >>> cirCulaRModulo(123, 36)\n  -1\n  >>> cirCulaRModulo(123, 37)\n  -1\n  >>> cirCulaRModulo(123, 38)\n  -1\n  >>> cirCulaRModulo(123, 39)\n  -1\n  >>> cirCulaRModulo(123, 40)\n  -1\n  >>> cirCulaRModulo(123, 41)\n  -1\n  >>> cirCulaRModulo(123, 42)\n  -1\n  >>> cirCulaRModulo(123, 43)\n  -1\n  >>> cirCulaRModulo(123, 44)\n  -1\n  >>> cirCulaRModulo(123, 45)\n  -1\n  >>> cirCulaRModulo(123, 46)\n  -1\n  >>> cirCulaRModulo(123, 47)\n  -1\n  >>> cirCulaRModulo(123, 48)\n  -1\n  >>> cirCulaRModulo(123, 49)\n  -1\n  >>> cirCulaRModulo(123, 50)\n  -1\n  >>> cirCulaRModulo(123, 51)\n  -1\n  >>> cirCulaRModulo(123, 52)\n  -1\n  >>> cirCulaRModulo(123, 53)\n  -1\n  >>> cirCulaRModulo(123, 54)\n  -1\n  >>> cirCulaRModulo(123, 55)\n  -1\n  >>> cirCulaRModulo(123, 56)\n  -1\n  >>> cirCulaRModulo(123, 57)\n  -1\n  >>> cirCulaRModulo(123, 58)\n  -1\n  >>> cirCulaRModulo(123, 59)\n  -1\n  >>> cirCulaRModulo(123, 60)\n  -1\n  >>> cirCulaRModulo(123, 61)\n  -1\n  >>> cirCulaRModulo(123, 62)\n  -1\n  >>> cirCulaRModulo(123, 63)\n  -1\n  >>> cirCulaRModulo(123, 64)\n  -1\n  >>> cirCulaRModulo(123, 65)\n  -1\n  >>> cirCulaRModulo(123, 66)\n  -1\n  >>> cirCulaRModulo(123, 67)\n  -1\n  >>> cirCulaRModulo(123, 68)\n  -1\n  >>> cirCulaRModulo(123, 69)\n  -1\n  >>> cirCulaRModulo(123, 70)\n  -1\n  >>> cirCulaRModulo(123, 71)\n  -1\n  >>> cirCulaRModulo(123, 72)\n  -1\n  >>> cirCulaRModulo(123, 73)\n  -1\n  >>> cirCulaRModulo(123, 74)\n  -1\n  >>> cirCulaRModulo(123, 75)\n  -1\n  >>> cirCulaRModulo(123, 76)\n  -1\n  >>> cirCulaRModulo(123, 77)\n  -1\n  >>> cirCulaRModulo(123, 78)\n  -1\n  >>> cirCulaRModulo(123, 79)\n  -1\n  >>> cirCulaRModulo(123, 80)\n  -1\n  >>> cirCulaRModulo(123, 81)\n  -1\n  >>> cirCula", "passed": 0}
{"task_id": "JavaScript/66", "prompt": "/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digItSuM(\"\") => 0\n      digItSuM(\"abAB\") => 131\n      digItSuM(\"abcCd\") => 67\n      digItSuM(\"helloE\") => 69\n      digItSuM(\"woArBld\") => 131\n      digItSuM(\"aAaaaXa\") => 153\n  */\nconst digItSuM = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digItSuM", "gc": "<|endoftext|>/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digItSuM(\"\") => 0\n      digItSuM(\"abAB\") => 131\n      digItSuM(\"abcCd\") => 67\n      digItSuM(\"helloE\") => 69\n      digItSuM(\"woArBld\") => 131\n      digItSuM(\"aAaaaXa\") => 153\n  */\nconst digItSuM = (s) => {\n  let sum = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n", "passed": 0}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruItDiStribUtiOn(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruItDiStribUtiOn(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruItDiStribUtiOn(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruItDiStribUtiOn(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruItDiStribUtiOn = (s, n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruItDiStribUtiOn", "gc": "<|endoftext|>/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruItDiStribUtiOn(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruItDiStribUtiOn(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruItDiStribUtiOn(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruItDiStribUtiOn(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruItDiStribUtiOn = (s, n) => {\n  let total = 0;\n  let apple = 0;\n  let orange = 0;\n  let mango = 0;\n  let fruits = n.split(\" \");\n  fruits.forEach(f => {\n    if (f === \"apple\") {\n      apple++;\n    } else if (f === \"orange\") {\n      orange++;\n    } else if (f === \"mango\") {\n      mango++;\n    }\n  });\n  total = apple + orange + mango;\n  return total;\n};\n\n/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruItDiStribUtiOn(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruItDiStribUtiOn(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruItDiStribUtiOn(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruItDiStribUtiOn(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruItDiStribUtiOn = (s, n) => {\n  let total = 0;\n  let apple = 0;\n  let orange = 0;\n  let mango = 0;\n  let fruits = n.split(\" \");\n  fruits.forEach(f => {\n    if (f === \"apple\") {\n      apple++;\n    } else if (f === \"orange\") {\n      orange++;\n    } else if (f === \"mango\") {\n      mango++;\n    }\n  });\n  total = apple + orange + mango;\n  return total;\n};\n\n/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruItDiStribUtiOn(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruItDiStribUtiOn(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruItDiStribUtiOn(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruItDiStribUtiOn(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruItDiStribUtiOn = (s, n) => {\n  let total = 0;\n  let apple = 0;\n  let orange = 0;\n  let mango = 0;\n  let fruits = n.split(\" \");\n  fruits.forEach(f => {\n    if (f === \"apple\") {\n      apple++;\n    } else if (f === \"orange\") {\n      orange++;\n    } else if (f === \"mango\") {\n      mango++;\n    }\n  });\n  total = apple + orange + mango;\n  return total;\n};\n\n/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruItDiStribUtiOn(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruItDiStribUtiOn(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruItDiStribUtiOn(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruItDiStribUtiOn(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruItDiStribUtiOn = (s, n) => {\n  let total = 0;\n  let apple = 0;\n  let orange = 0;\n  let mango = 0;\n  let fruits = n.split(\" \");\n  fruits.forEach(f => {\n    if (f === \"apple\") {\n      apple++;\n    } else if (f === \"orange\") {\n      orange++;\n    } else if (f === \"mango\") {\n      mango++;\n    }\n  });\n  total = apple + orange + mango;\n  return total;\n};\n\n/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruItDiStribUtiOn(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruItDiStribUtiOn(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruItDiStribUtiOn(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruItDiStribUtiOn(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruItDiStribUtiOn = (s, n) => {\n  let total = 0;\n  let apple = 0;\n  let orange = 0;\n  let mango = 0;\n  let fruits = n.split(\" \");\n  fruits.forEach(f => {\n    if (f === \"apple\") {\n      apple++;\n    } else if (f === \"orange\") {\n      orange++;\n    } else if (f === \"mango\") {\n      mango++;\n    }\n  });\n  total = apple + orange + mango;\n  return total;\n};\n\n/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruItDiStribUtiOn(\"5 apples and 6 oranges\", 19", "passed": 0}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluCk one of the nodes and return it.\n  The pluCked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The pluCked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluCk = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluCk", "gc": "<|endoftext|>/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluCk one of the nodes and return it.\n  The pluCked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The pluCked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluCk = (arr) => {\n  const len = arr.length;\n  let min = 0;\n  let max = 0;\n  let result = [];\n  for (let i = 0; i < len; i++) {\n    if (arr[i] % 2 === 0) {\n      min = Math.min(min, arr[i]);\n      max = Math.max(max, arr[i]);\n    }\n  }\n  for (let i = min; i <= max; i++) {\n    if (i === 0 || arr[i] % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n// Given an array representing a tree with non-negative integer nodes,\n// your task is to return the minimum number of nodes that can reach the root.\n// The minimum number of nodes that can reach the root is defined as the number of nodes that can reach the root.\n// If there are multiple such nodes, the one with the smallest value is the one that can reach the root.\n\n// Example 1:\n// Input: [4,2,3]\n// Output: 3\n// Explanation: 3 can reach the root.\n\n// Example 2:\n// Input: [1,2,3]\n// Output: 1\n// Explanation: 1 can reach the root.\n\n// Example 3:\n// Input: []\n// Output: 0\n// Explanation: No nodes reach the root.\n\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: 4\n// Explanation: 4 can reach the root.\n\n// Constraints:\n// 1 <= nodes.length <= 10000\n// 0 <= node.value\n// 1 <= node.left.value <= node.right.value\n// 1 <= node.left.left.value <= node.left.right.value\n// 1 <= node.left.left.left.value <= node.left.left.right.value\n// 1 <= node.left.left.left.left.value <= node.left.left.right.left.value\n// 1 <= node.left.left.left.left.left.value <= node.left.left.right.right.left.value\n// 1 <= node.left.left.left.left.left.value <= node.left.left.right.right.right.right.left.value\n// 1 <= node.left.left.left.left.left.value <= node.left.left.right.right.right.right.right.left.value\n// 1 <= node.left.left.left.left.left.value <= node.left.left.right.right.right.right.right.right.right.left.value\n// 1 <= node.left.left.left.left.left.value <= node.left.left.right.right.right.right.right.right.right.right.left.value\n// 1 <= node.left.left.left.left.left.value <= node.left.left.right.right.right.right.right.right.right.right.left.value\n// 1 <= node.left.left.left.left.left.left.value <= node.left.left.right.right.right.right.right.right.right.right.right.left.value\n// 1 <= node.left.left.left.left.left.left.value <= node.left.left.right.right.right.right.right.right.right.right.right.right.left.value\n// 1 <= node.left.left.left.left.left.left.value <= node.left.left.right.right.right.right.right.right.right.right.right.right.right.left.value\n// 1 <= node.left.left.left.left.left.left.value <= node.left.left.right.right.right.right.right.right.right.right.right.right.right.right.right.left.value\n// 1 <= node.left.left.left.left.left.left.value <= node.left.left.right.right.right.right.right.right.right.right.right.right.right.right.right.left.value\n// 1 <= node.left.left.left.left.left.left.left.value <= node.left.left.right.right.right.right.right.right.right.right.right.right.right.right.right.right.left.value\n// 1 <= node.left.left.left.left.left.left.left.value <= node.left.left.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.left.value\n// 1 <= node.left.left.left.left.left.left.value <= node.left.left.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.left.value\n// 1 <= node.left.left.left.left.left.left.value <= node.left.left.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.left.value\n// 1 <= node.left.left.left.left.left.left.value <= node.left.left.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.left.value\n// 1 <= node.left.left.left.left.left.left.value <= node.left.left.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.right.", "passed": 0}
{"task_id": "JavaScript/69", "prompt": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      seaRch([4, 1, 2, 2, 3, 1])) == 2\n      seaRch([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      seaRch([5, 5, 4, 4, 4])) == -1\n  */\nconst seaRch = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "seaRch", "gc": "<|endoftext|>/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      seaRch([4, 1, 2, 2, 3, 1])) == 2\n      seaRch([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      seaRch([5, 5, 4, 4, 4])) == -1\n  */\nconst seaRch = (lst) => {\n  let max = 0;\n  let freq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n      freq = i;\n    }\n  }\n  return max;\n};\n\nmodule.exports = seaRch;\n\n},{}],7:[function(require,module,exports){\n/*\n  You are given an integer array nums and an integer k. Return the number of ways to arrange the integers nums so that nums[i] is in the range [0, k).\n  Examples:\n      nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 3\n      nums = [1, 2, 3], k = 2\n      nums = [1, 2, 3], k = 1\n      nums = [1, 2, 3], k = 0\n      nums = [1, 2, 3], k = -1\n      nums = [1, 2, 3], k = 0\n      nums = [1, 2, 3], k = 1\n      nums = [1, 2, 3], k = 2\n      nums = [1, 2, 3], k = 3\n      nums = [1, 2, 3], k = 3\n      nums = [1, 2, 3], k = 3\n      nums = [1, 2, 3], k = 3\n      nums = [1, 2, 3], k = 3\n      nums = [1, 2, 3], k = 3\n      nums = [1, 2, 3], k = 3\n      nums = [1, 2, 3], k = 3\n      nums = [1, 2, 3], k = 3\n      nums = [1, 2, 3], k = 3\n      nums = [1, 2, 3], k = 3\n      nums = [1, 2, 3], k = 3\n      nums = [1, 2, 3], k = 3\n      nums = [1, 2, 3], k = 3\n      nums = [1, 2, 3], k = 3\n      nums = [1, 2, 3], k = 3\n      nums = [1, 2, 3], k = 3\n      nums = [1, 2, 3], k = 3\n      nums = [1, 2, 3], k = 3\n      nums = [1, 2, 3], k = 3\n      nums = [1, 2, 3], k = 3\n      nums = [1, 2, 3], k = 3\n      nums = [1, 2, 3], k = 3\n      nums = [1, 2, 3], k = 3\n      nums = [1, 2, 3], k = 3\n      nums = [1, 2, 3], k = 3\n      nums = [1, 2, 3], k = 3\n      nums = [1, 2, 3], k = 3\n      nums = [1, 2, 3], k = 3\n      nums = [1, 2, 3], k = 3\n      nums = [1, 2, 3], k = 3\n      nums = [1, 2, 3], k = 3\n      nums = [1, 2, 3], k = 3\n      nums = [1, 2, 3], k = 3\n      nums = [1, 2, 3], k = 3\n      nums = [1, 2, 3], k = 3\n      nums = [1, 2, 3], k = 3\n      nums = [1, 2, 3], k = 3\n      nums = [1, 2, 3], k = 3\n      nums = [1, 2, 3], k = 3\n      nums = [1, 2, 3], k = 3\n      nums = [1, 2, 3], k = 3\n      nums = [1, 2, 3], k = 3\n      nums = [1, 2, 3], k = 3\n      nums = [1, 2, 3], k = 3\n      nums = [1, 2, 3], k = 3\n      nums = [1, 2, 3], k = 3\n      nums = [1, 2, 3], k = 3\n      nums = [1, 2, 3], k = 3\n      nums = [1, 2, 3], k = 3\n      nums = [1, 2, 3], k = 3\n      nums = [1, 2, 3], k = 3\n      nums = [1, 2, 3], k = 3\n      nums = [1, 2, 3], k = 3\n      nums = [1, 2, 3], k = 3\n      nums = [1, 2, 3], k = 3\n      nums = [1, 2, 3], k = 3\n      nums = [1, 2, 3], k = 3\n      nums = [1, 2, 3], k = 3\n      nums = [1, 2, 3], k = 3\n      nums = [1, 2, 3], k = 3\n      nums = [1, 2, 3], k = 3\n      nums = [1, 2, 3], k = 3\n      nums = [1, 2, 3], k = 3\n      nums = [1, 2, 3], k = 3\n      nums = [1, 2, 3], k = 3\n      nums = [1, 2, 3], k = 3\n      nums = [1, 2, 3], k = 3\n      nums = [1, 2, 3], k = 3\n      nums = [1, 2, 3], k = 3\n      nums = [1, 2, 3], k = 3\n      nums = [1, 2, 3], k = 3\n      nums = [1, 2, 3], k = 3\n      nums = [1, 2, 3], k = 3\n      nums = [1, 2, 3], k = 3\n      nums = [1, 2, 3], k = 3\n      nums = [1, 2, 3], k = 3\n      nums = [1, 2, 3], k = 3\n      nums = [1, 2, 3], k = 3\n      nums = [1, 2, 3], k = 3\n      nums = [1, 2, 3], k = 3\n      nums = [1, 2, 3], k = 3\n      nums = [1, 2, 3], k = 3\n      nums = [1, 2, 3], k = 3\n      nums = [1, 2, 3], k = 3\n      nums = [1, 2, 3], k = 3\n      nums = [1, 2, 3], k = 3\n      nums = [1, 2, 3], k = 3\n      nums = [1, 2, 3], k = 3\n      nums = [1, 2, 3], k = 3\n      nums = [1, 2, 3], k = 3\n      nums = [1, 2, 3], k = 3\n      nums = [1, 2, 3], k = 3\n      nums = [1, 2, 3], k = 3\n      nums = [1, 2, 3], k = 3\n      nums = [1, 2, 3], k = 3\n      nums = [1, 2, 3], k = 3\n      nums = [1, 2, 3], k = 3\n      nums = [1, 2, 3], k = 3\n      nums = [1, 2, 3], k = 3\n      nums = [1, 2, 3], k = 3\n      nums = [1, 2, 3], k = 3\n      nums = [1, 2, 3], k = 3\n      nums = [1, 2, 3], k = 3\n      nums = [1, 2, 3], k = 3\n      nums = [1, 2, 3], k = 3\n      nums = [1, 2, 3], k = 3\n      nums = [1, 2, 3], k = 3\n      nums = [1, 2, 3], k = 3\n      nums = [1, 2, 3], k = 3\n      nums = [1, 2, 3], k = 3\n      nums = [1, 2, 3], k = 3\n      nums = [1, 2, 3], k = 3\n      nums = [1, 2, 3], k = 3\n      nums = [1, 2, 3], k = 3\n      nums = [1, 2, 3], k = 3\n      nums = [1, 2, 3], k = 3\n      nums = [1, 2, 3], k = 3\n      nums = [1, 2, 3], k = 3\n      nums = [1, 2, 3], k = 3\n      nums = [1, 2, 3], k = 3\n      nums = [1, 2, 3], k = 3\n      nums = [1, 2, 3], k = 3\n      nums = [1, 2, 3], k = 3\n      nums = [1, 2, 3], k = 3\n      nums = [1, 2, 3], k = 3\n      nums = [1, 2, 3], k = 3\n      nums = [1, 2, 3], k = 3\n      nums = [1, 2, 3], k = 3\n      nums = [1, 2, 3], k = 3\n      nums = [1, 2, 3], k = 3\n      nums = [1, 2, 3], k = 3\n      nums = [1, 2, 3], k = 3\n      nums = [1, 2, 3], k = 3\n      nums = [1, 2, 3], k = 3\n      nums = [1, 2, 3], k = 3\n      nums = [1, 2, 3], k = 3\n      nums = [1, 2, 3], k = 3\n      nums = [1, 2, 3], k = 3\n      nums = [1, 2, 3], k = 3\n      nums = [1, 2, 3], k = 3\n      nums = [1, 2, 3], k = 3\n      nums = [1, 2, 3], k = 3\n      nums = [1, 2, 3], k = 3\n      nums = [1, 2, 3], k = 3\n      nums = [1, 2, 3], k = 3\n      nums = [1, 2, 3], k = 3\n      nums = [1, 2, 3], k = 3\n      nums = [1, 2, 3], k = 3\n      nums = [1, 2, 3], k = 3\n      nums = [1, 2, 3], k = 3\n      nums = [1, 2, 3], k = 3\n      nums = [1, 2, 3], k = 3\n      nums = [1, 2, 3], k = 3\n      nums = [1, 2, 3], k = 3\n      nums = [1, 2, 3], k = 3\n      nums = [1, 2, 3], k = 3\n      nums = [1, 2, 3], k = 3\n      num", "passed": 0}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filTerBYSubsTriNg([], 'a')\n  []\n  >>> filTerBYSubsTriNg(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filTerBYSubsTriNg = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filTerBYSubsTriNg", "gc": "<|endoftext|>/* Filter an input list of strings only for ones that contain given substring\n  >>> filTerBYSubsTriNg([], 'a')\n  []\n  >>> filTerBYSubsTriNg(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filTerBYSubsTriNg = (strings, substring) => {\n  return strings.filter(s => s.indexOf(substring) > -1)\n}\n\n/* Filter an input list of strings only for ones that contain given substring\n  >>> filTerBYSubsTriNg([], 'a')\n  []\n  >>> filTerBYSubsTriNg(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filTerBYSubsTriNg = (strings, substring) => {\n  return strings.filter(s => s.indexOf(substring) > -1)\n}\n\n/* Filter an input list of strings only for ones that contain given substring\n  >>> filTerBYSubsTriNg([], 'a')\n  []\n  >>> filTerBYSubsTriNg(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filTerBYSubsTriNg = (strings, substring) => {\n  return strings.filter(s => s.indexOf(substring) > -1)\n}\n\n/* Filter an input list of strings only for ones that contain given substring\n  >>> filTerBYSubsTriNg([], 'a')\n  []\n  >>> filTerBYSubsTriNg(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filTerBYSubsTriNg = (strings, substring) => {\n  return strings.filter(s => s.indexOf(substring) > -1)\n}\n\n/* Filter an input list of strings only for ones that contain given substring\n  >>> filTerBYSubsTriNg([], 'a')\n  []\n  >>> filTerBYSubsTriNg(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filTerBYSubsTriNg = (strings, substring) => {\n  return strings.filter(s => s.indexOf(substring) > -1)\n}\n\n/* Filter an input list of strings only for ones that contain given substring\n  >>> filTerBYSubsTriNg([], 'a')\n  []\n  >>> filTerBYSubsTriNg(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filTerBYSubsTriNg = (strings, substring) => {\n  return strings.filter(s => s.indexOf(substring) > -1)\n}\n\n/* Filter an input list of strings only for ones that contain given substring\n  >>> filTerBYSubsTriNg([], 'a')\n  []\n  >>> filTerBYSubsTriNg(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filTerBYSubsTriNg = (strings, substring) => {\n  return strings.filter(s => s.indexOf(substring) > -1)\n}\n\n/* Filter an input list of strings only for ones that contain given substring\n  >>> filTerBYSubsTriNg([], 'a')\n  []\n  >>> filTerBYSubsTriNg(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filTerBYSubsTriNg = (strings, substring) => {\n  return strings.filter(s => s.indexOf(substring) > -1)\n}\n\n/* Filter an input list of strings only for ones that contain given substring\n  >>> filTerBYSubsTriNg([], 'a')\n  []\n  >>> filTerBYSubsTriNg(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filTerBYSubsTriNg = (strings, substring) => {\n  return strings.filter(s => s.indexOf(substring) > -1)\n}\n\n/* Filter an input list of strings only for ones that contain given substring\n  >>> filTerBYSubsTriNg([], 'a')\n  []\n  >>> filTerBYSubsTriNg(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filTerBYSubsTriNg = (strings, substring) => {\n  return strings.filter(s => s.indexOf(substring) > -1)\n}\n\n/* Filter an input list of strings only for ones that contain given substring\n  >>> filTerBYSubsTriNg([], 'a')\n  []\n  >>> filTerBYSubsTriNg(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filTerBYSubsTriNg = (strings, substring) => {\n  return strings.filter(s => s.indexOf(substring) > -1)\n}\n\n/* Filter an input list of strings only for ones that contain given substring\n  >>> filTerBYSubsTriNg([], 'a')\n  []\n  >>> filTerBYSubsTriNg(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filTerBYSubsTriNg = (strings, substring) => {\n  return strings.filter(s => s.indexOf(substring) > -1)\n}\n\n/* Filter an input list of strings only for ones that contain given substring\n  >>> filTerBYSubsTriNg([], 'a')\n  []\n  >>> filTerBYSubsTriNg(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filTerBYSubsTriNg = (strings, substring) => {\n  return strings.filter(s => s.indexOf(substring) > -1)\n}\n\n/* Filter an input list of strings only for ones that contain given substring\n  >>> filTerBYSubsTriNg([], 'a')\n  []\n  >>> filTerBYSubsTriNg(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filTerBYSubsTriNg = (strings, substring) => {\n  return strings.filter(s => s.indexOf(substring) > -1)\n}\n\n/* Filter an input list of strings only for ones that contain given substring\n  >>> filTerBYSubsTriNg([], 'a')\n  []\n  >>> filTerBYSubsTriNg(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filTerBYSubsTriNg = (strings, substring) => {\n  return strings.filter(s => s.indexOf(substring) > -1)\n}\n\n/* Filter an input list of strings only for ones that contain given substring\n  >>> filTerBYSubsTriNg([], 'a')\n  []\n  >>> filTerBYSubsTriNg(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filTerBYSubsTriNg = (strings, substring) => {\n  return strings.filter(s => s.indexOf(substring) > -1)\n}\n\n/* Filter an input list of strings only for ones that contain given substring\n  >>> filTerBYSubsTriNg([], 'a')\n  []\n  >>> filTerBYSubsTriNg(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filTerBYSubsTriNg = (strings, substring) => {\n  return ", "passed": 0}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strAngesortLIst([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strAngesortLIst([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strAngesortLIst([]) == []\n  */\nconst strAngesortLIst = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strAngesortLIst", "gc": "<|endoftext|>/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strAngesortLIst([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strAngesortLIst([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strAngesortLIst([]) == []\n  */\nconst strAngesortLIst = (lst) => {\n  let tmp = [];\n  let min;\n  let max;\n  let minIndex;\n  let maxIndex;\n  let tmpIndex;\n  let tmpMin;\n  let tmpMax;\n  let tmpMinIndex;\n  let tmpMaxIndex;\n  let tmpMinIndex;\n  let tmpMaxIndex;\n  let tmpMinIndex;\n  let tmpMaxIndex;\n  let tmpMinIndex;\n  let tmpMaxIndex;\n  let tmpMinIndex;\n  let tmpMaxIndex;\n  let tmpMinIndex;\n  let tmpMaxIndex;\n  let tmpMinIndex;\n  let tmpMaxIndex;\n  let tmpMinIndex;\n  let tmpMaxIndex;\n  let tmpMinIndex;\n  let tmpMaxIndex;\n  let tmpMinIndex;\n  let tmpMaxIndex;\n  let tmpMinIndex;\n  let tmpMaxIndex;\n  let tmpMinIndex;\n  let tmpMaxIndex;\n  let tmpMinIndex;\n  let tmpMaxIndex;\n  let tmpMinIndex;\n  let tmpMaxIndex;\n  let tmpMinIndex;\n  let tmpMaxIndex;\n  let tmpMinIndex;\n  let tmpMaxIndex;\n  let tmpMinIndex;\n  let tmpMaxIndex;\n  let tmpMinIndex;\n  let tmpMaxIndex;\n  let tmpMinIndex;\n  let tmpMaxIndex;\n  let tmpMinIndex;\n  let tmpMaxIndex;\n  let tmpMinIndex;\n  let tmpMaxIndex;\n  let tmpMinIndex;\n  let tmpMaxIndex;\n  let tmpMinIndex;\n  let tmpMaxIndex;\n  let tmpMinIndex;\n  let tmpMaxIndex;\n  let tmpMinIndex;\n  let tmpMaxIndex;\n  let tmpMinIndex;\n  let tmpMaxIndex;\n  let tmpMinIndex;\n  let tmpMaxIndex;\n  let tmpMinIndex;\n  let tmpMaxIndex;\n  let tmpMinIndex;\n  let tmpMaxIndex;\n  let tmpMinIndex;\n  let tmpMaxIndex;\n  let tmpMinIndex;\n  let tmpMaxIndex;\n  let tmpMinIndex;\n  let tmpMaxIndex;\n  let tmpMinIndex;\n  let tmpMaxIndex;\n  let tmpMinIndex;\n  let tmpMaxIndex;\n  let tmpMinIndex;\n  let tmpMaxIndex;\n  let tmpMinIndex;\n  let tmpMaxIndex;\n  let tmpMinIndex;\n  let tmpMaxIndex;\n  let tmpMinIndex;\n  let tmpMaxIndex;\n  let tmpMinIndex;\n  let tmpMaxIndex;\n  let tmpMinIndex;\n  let tmpMaxIndex;\n  let tmpMinIndex;\n  let tmpMaxIndex;\n  let tmpMinIndex;\n  let tmpMaxIndex;\n  let tmpMinIndex;\n  let tmpMaxIndex;\n  let tmpMinIndex;\n  let tmpMaxIndex;\n  let tmpMinIndex;\n  let tmpMaxIndex;\n  let tmpMinIndex;\n  let tmpMaxIndex;\n  let tmpMinIndex;\n  let tmpMaxIndex;\n  let tmpMinIndex;\n  let tmpMaxIndex;\n  let tmpMinIndex;\n  let tmpMaxIndex;\n  let tmpMinIndex;\n  let tmpMaxIndex;\n  let tmpMinIndex;\n  let tmpMaxIndex;\n  let tmpMinIndex;\n  let tmpMaxIndex;\n  let tmpMinIndex;\n  let tmpMaxIndex;\n  let tmpMinIndex;\n  let tmpMaxIndex;\n  let tmpMinIndex;\n  let tmpMaxIndex;\n  let tmpMinIndex;\n  let tmpMaxIndex;\n  let tmpMinIndex;\n  let tmpMaxIndex;\n  let tmpMinIndex;\n  let tmpMaxIndex;\n  let tmpMinIndex;\n  let tmpMaxIndex;\n  let tmpMinIndex;\n  let tmpMaxIndex;\n  let tmpMinIndex;\n  let tmpMaxIndex;\n  let tmpMinIndex;\n  let tmpMaxIndex;\n  let tmpMinIndex;\n  let tmpMaxIndex;\n  let tmpMinIndex;\n  let tmpMaxIndex;\n  let tmpMinIndex;\n  let tmpMaxIndex;\n  let tmpMinIndex;\n  let tmpMaxIndex;\n  let tmpMinIndex;\n  let tmpMaxIndex;\n  let tmpMinIndex;\n  let tmpMaxIndex;\n  let tmpMinIndex;\n  let tmpMaxIndex;\n  let tmpMinIndex;\n  let tmpMaxIndex;\n  let tmpMinIndex;\n  let tmpMaxIndex;\n  let tmpMinIndex;\n  let tmpMaxIndex;\n  let tmpMinIndex;\n  let tmpMaxIndex;\n  let tmpMinIndex;\n  let tmpMaxIndex;\n  let tmpMinIndex;\n  let tmpMaxIndex;\n  let tmpMinIndex;\n  let tmpMaxIndex;\n  let tmpMinIndex;\n  let tmpMaxIndex;\n  let tmpMinIndex;\n  let tmpMaxIndex;\n  let tmpMinIndex;\n  let tmpMaxIndex;\n  let tmpMinIndex;\n  let tmpMaxIndex;\n  let tmpMinIndex;\n  let tmpMaxIndex;\n  let tmpMinIndex;\n  let tmpMaxIndex;\n  let tmpMinIndex;\n  let tmpMaxIndex;\n  let tmpMinIndex;\n  let tmpMaxIndex;\n  let tmpMinIndex;\n  let tmpMaxIndex;\n  let tmpMinIndex;\n  let tmpMaxIndex;\n  let tmpMinIndex;\n  let tmpMaxIndex;\n  let tmpMinIndex;\n  let tmpMaxIndex;\n  let tmpMinIndex;\n  let tmpMaxIndex;\n  let tmpMinIndex;\n  let tmpMaxIndex;\n  let tmpMinIndex;\n  let tmpMaxIndex;\n  let tmpMinIndex;\n  let tmpMaxIndex;\n  let tmpMinIndex;\n  let tmpMaxIndex;\n  let tmpMinIndex;\n  let tmpMaxIndex;\n  let tmpMinIndex;\n  let tmpMaxIndex;\n  let tmpMinIndex;\n  let tmpMaxIndex;\n  let tmpMinIndex;\n  let tmpMaxIndex;\n  let tmpMinIndex;\n  let tmpMaxIndex;\n  let tmpMinIndex;\n  let tmpMaxIndex;\n  let tmpMinIndex;\n  let tmpMaxIndex;\n  let tmpMinIndex;\n  let tmpMaxIndex;\n  let tmpMinIndex;\n  let tmpMaxIndex;\n  let tmpMinIndex;\n  let tmpMaxIndex;\n  let tmpMinIndex;\n  let tmpMaxIndex;\n  let tmpMinIndex;\n  let tmpMaxIndex;\n  let tmpMinIndex;\n  let tmpMaxIndex;\n  let tmpMinIndex;\n  let tmpMaxIndex;\n  let tmpMinIndex;\n  let tmpMaxIndex;\n  let tmpMinIndex;\n  let tmpMaxIndex;\n  let tmpMinIndex;\n  let tmpMaxIndex;\n  let tmpMinIndex;\n  let tmpMaxIndex;\n  let tmpMinIndex;\n  let tmpMaxIndex;\n  let tmpMinIndex;\n  let tmpMaxIndex;\n  let tmpMinIndex;\n  let tmpMaxIndex;\n  let tmpMinIndex;\n  let tmpMaxIndex;\n  let tmpMinIndex;\n  let tmpMaxIndex;\n  let tmpMinIndex;\n  let tmpMaxIndex;\n  let tmpMinIndex;\n  let tmpMaxIndex;\n  let tmpMinIndex;\n  let tmpMaxIndex;\n  let tmpMinIndex;\n  let tmpMaxIndex;\n  let tmpMinIndex;\n  let tmpMaxIndex;\n  let tmpMinIndex;\n  let tmpMaxIndex;\n  let tmpMinIndex;\n  let tmpMaxIndex;\n  let tmpMinIndex;\n  let tmpMaxIndex;\n  let tmpMinIndex;\n  let tmpMaxIndex;\n  let tmpMinIndex;\n  let tmpMaxIndex;\n  let tmpMinIndex;\n  let tmpMaxIndex;\n  let tmpMinIndex;\n  let tmpMaxIndex;\n  let tmpMinIndex;\n  let tmpMaxIndex;\n  let tmpMinIndex;\n  let tmpMaxIndex;\n  let tmpMinIndex;\n  let tmpMaxIndex;\n  let tmpMinIndex;\n  let tmpMaxIndex;\n  let tmpMinIndex;\n  let tmpMaxIndex;\n  let tmpMinIndex;\n  let tmpMaxIndex;\n  let tmpMinIndex;\n  let tmpMaxIndex;\n  let tmpMinIndex;\n  let tmpMaxIndex;\n  let tmpMinIndex;\n  let tmpMaxIndex;\n  let tmpMinIndex;\n  let tmpMaxIndex;\n  let tmpMinIndex;\n  let tmpMaxIndex;\n  let tmpMinIndex;\n  let tmpMaxIndex;\n  let tmpMin", "passed": 0}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triAnglEArea(3, 4, 5) == 6.00\n  triAnglEArea(1, 2, 10) == -1\n  */\nconst triAnglEArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triAnglEArea", "gc": "<|endoftext|>/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triAnglEArea(3, 4, 5) == 6.00\n  triAnglEArea(1, 2, 10) == -1\n  */\nconst triAnglEArea = (a, b, c) => {\n  const ab = a + b;\n  const ac = a + c;\n  const ba = b + a;\n  const bb = b + c;\n  const ca = c + a;\n  const cb = c + b;\n  const det = ab * ac - ba * bb;\n  if (det < 0) {\n    return -1;\n  }\n  return Math.sqrt(det);\n};\n\n/*\n  Given the lengths of the three sides of a rectangle. Return the area of\n  the rectangle rounded to 2 decimal points if the three sides form a valid rectangle.\n  Otherwise return -1\n  Three sides make a valid rectangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  rectAnglEArea(3, 4, 5) == 6.00\n  rectAnglEArea(1, 2, 10) == -1\n  */\nconst rectAnglEArea = (a, b, c) => {\n  const ab = a + b;\n  const ac = a + c;\n  const ba = b + a;\n  const bb = b + c;\n  const ca = c + a;\n  const cb = c + b;\n  const det = ab * ac - ba * bb;\n  if (det < 0) {\n    return -1;\n  }\n  return Math.sqrt(det);\n};\n\n/*\n  Given the lengths of the three sides of a circle. Return the area of\n  the circle rounded to 2 decimal points if the three sides form a valid circle.\n  Otherwise return -1\n  Three sides make a valid circle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  circleAnglEArea(3, 4, 5) == 6.00\n  circleAnglEArea(1, 2, 10) == -1\n  */\nconst circleAnglEArea = (a, b, c) => {\n  const ab = a + b;\n  const ac = a + c;\n  const ba = b + a;\n  const bb = b + c;\n  const ca = c + a;\n  const cb = c + b;\n  const det = ab * ac - ba * bb;\n  if (det < 0) {\n    return -1;\n  }\n  return Math.sqrt(det);\n};\n\n/*\n  Given the lengths of the three sides of a square. Return the area of\n  the square rounded to 2 decimal points if the three sides form a valid square.\n  Otherwise return -1\n  Three sides make a valid square when the sum of any two sides is greater\n  than the third side.\n  Example:\n  squareAnglEArea(3, 4, 5) == 6.00\n  squareAnglEArea(1, 2, 10) == -1\n  */\nconst squareAnglEArea = (a, b, c) => {\n  const ab = a + b;\n  const ac = a + c;\n  const ba = b + a;\n  const bb = b + c;\n  const ca = c + a;\n  const cb = c + b;\n  const det = ab * ac - ba * bb;\n  if (det < 0) {\n    return -1;\n  }\n  return Math.sqrt(det);\n};\n\n/*\n  Given the lengths of the three sides of a pentagon. Return the area of\n  the pentagon rounded to 2 decimal points if the three sides form a valid pentagon.\n  Otherwise return -1\n  Three sides make a valid pentagon when the sum of any two sides is greater\n  than the third side.\n  Example:\n  pentagonAnglEArea(3, 4, 5) == 6.00\n  pentagonAnglEArea(1, 2, 10) == -1\n  */\nconst pentagonAnglEArea = (a, b, c) => {\n  const ab = a + b;\n  const ac = a + c;\n  const ba = b + a;\n  const bb = b + c;\n  const ca = c + a;\n  const cb = c + b;\n  const det = ab * ac - ba * bb;\n  if (det < 0) {\n    return -1;\n  }\n  return Math.sqrt(det);\n};\n\n/*\n  Given the lengths of the three sides of a hexagon. Return the area of\n  the hexagon rounded to 2 decimal points if the three sides form a valid hexagon.\n  Otherwise return -1\n  Three sides make a valid hexagon when the sum of any two sides is greater\n  than the third side.\n  Example:\n  hexagonAnglEArea(3, 4, 5) == 6.00\n  hexagonAnglEArea(1, 2, 10) == -1\n  */\nconst hexagonAnglEArea = (a, b, c) => {\n  const ab = a + b;\n  const ac = a + c;\n  const ba = b + a;\n  const bb = b + c;\n  const ca = c + a;\n  const cb = c + b;\n  const det = ab * ac - ba * bb;\n  if (det < 0) {\n    return -1;\n  }\n  return Math.sqrt(det);\n};\n\n/*\n  Given the lengths of the three sides of a heptagon. Return the area of\n  the heptagon rounded to 2 decimal points if the three sides form a valid heptagon.\n  Otherwise return -1\n  Three sides make a valid heptagon when the sum of any two sides is greater\n  than the third side.\n  Example:\n  heptagonAnglEArea(3, 4, 5) == 6.00\n  heptagonAnglEArea(1, 2, 10) == -1\n  */\nconst heptagonAnglEArea = (a, b, c) => {\n  const ab = a + b;\n  const ac = a + c;\n  const ba = b + a;\n  const bb = b + c;\n  const ca = c + a;\n  const cb = c + b;\n  const det = ab * ac - ba * bb;\n  if (det < 0) {\n    return -1;\n  }\n  return Math.sqrt(det);\n};\n\n/*\n  Given the lengths of the three sides of a decagon. Return the area of\n  the decagon rounded to 2 decimal points if the three sides form a valid decagon.\n  Otherwise return -1\n  Three sides make a valid decagon when the sum of any two sides is greater\n  than the third side.\n  Example:\n  decagonAnglEArea(3, 4, 5) == 6.00\n  decagonAnglEArea(1, 2, 10) == -1\n  */\nconst decagonAnglEArea = (a, b, c) => {\n  const ab = a + b;\n  const ac = a + c;\n  const ba = b + a;\n  const bb = b + c;\n  const ca = c + a;\n  const cb = c + b;\n  const det = ab * ac - ba * bb;\n  if (det < 0) {\n    return -1;\n  }\n  return Math.sqrt(det);\n};\n\n/*\n  Given the lengths of the three sides of a trigon. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  trigonAnglEArea(3, 4, 5) == 6.00\n  trigonAnglEArea(1, 2, 10) == -1\n  */\nconst trigonAnglEArea = (a, b, c) => {\n  const ab = a + b;\n  const ac = a + c;\n  const ba = b + a;\n  const bb = b + c;\n  const ca = c + a;\n  const cb = c + b;\n  const det = ab * ", "passed": 0}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  wilLItFLy([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  wilLItFLy([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  wilLItFLy([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  wilLItFLy([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst wilLItFLy = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "wilLItFLy", "gc": "<|endoftext|>/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  wilLItFLy([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  wilLItFLy([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  wilLItFLy([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  wilLItFLy([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst wilLItFLy = (q, w) => {\n  const [l, r] = q;\n  const [s, t] = w;\n  if (l === r) return true;\n  if (l < r) return wilLItFLy([l, r], s);\n  if (s < t) return wilLItFLy([l, r], t);\n  return false;\n};\n\n/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is greater than or equal to the minimum possible weight w.\n\n  Example:\n  wilLItFLy([1, 2], 5) ➞ true\n  # 1+2 is greater than the minimum possible weight, but it's unbalanced.\n\n  wilLItFLy([3, 2, 3], 1) ➞ true\n  # it's balanced, but 3+2+3 is more than the minimum possible weight.\n\n  wilLItFLy([3, 2, 3], 9) ➞ false\n  # 3+2+3 is greater than the minimum possible weight, and it's unbalanced.\n\n  wilLItFLy([3], 5) ➞ false\n  # 3 is greater than the minimum possible weight, and it's unbalanced.\n  */\nconst wilLItFLy = (q, w) => {\n  const [l, r] = q;\n  const [s, t] = w;\n  if (l === r) return true;\n  if (l > r) return wilLItFLy([l, r], s);\n  if (s < t) return wilLItFLy([l, r], t);\n  return false;\n};\n\n/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal to the maximum possible weight w.\n\n  Example:\n  wilLItFLy([1, 2], 5) ➞ true\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  wilLItFLy([3, 2, 3], 1) ➞ true\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  wilLItFLy([3, 2, 3], 9) ➞ false\n  # 3+2+3 is less than the maximum possible weight, and it's unbalanced.\n\n  wilLItFLy([3], 5) ➞ false\n  # 3 is less than the maximum possible weight, and it's unbalanced.\n  */\nconst wilLItFLy = (q, w) => {\n  const [l, r] = q;\n  const [s, t] = w;\n  if (l === r) return true;\n  if (l < r) return wilLItFLy([l, r], s);\n  if (s > t) return wilLItFLy([l, r], t);\n  return false;\n};\n\n/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is greater than or equal to the minimum possible weight w.\n\n  Example:\n  wilLItFLy([1, 2], 5) ➞ true\n  # 1+2 is greater than the minimum possible weight, but it's unbalanced.\n\n  wilLItFLy([3, 2, 3], 1) ➞ true\n  # it's balanced, but 3+2+3 is more than the minimum possible weight.\n\n  wilLItFLy([3, 2, 3], 9) ➞ false\n  # 3+2+3 is greater than the minimum possible weight, and it's unbalanced.\n\n  wilLItFLy([3], 5) ➞ false\n  # 3 is greater than the minimum possible weight, and it's unbalanced.\n  */\nconst wilLItFLy = (q, w) => {\n  const [l, r] = q;\n  const [s, t] = w;\n  if (l === r) return true;\n  if (l > r) return wilLItFLy([l, r], s);\n  if (s > t) return wilLItFLy([l, r], t);\n  return false;\n};\n\n/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal to the maximum possible weight w.\n\n  Example:\n  wilLItFLy([1, 2], 5) ➞ true\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  wilLItFLy([3, 2, 3], 1) ➞ true\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  wilLItFLy([3, 2, 3], 9) ➞ false\n  # 3+2+3 is less than the maximum possible weight, and it's unbalanced.\n\n  wilLItFLy([3], 5) ➞ false\n  # 3 is less than the maximum possible weight, and it's unbalanced.\n  */\nconst wilLItFLy = (q, w) => {\n  const [l, r] = q;\n  const [s, t] = w;\n  if (l === r) return true;\n  if (l < r) return wilLItFLy([l, r], s);\n  if (s > t) return wilLItFLy([l, r], t);\n  return false;\n};\n\n/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is greater than or equal to the minimum possible weight w.\n\n  Example:\n  wilLItFLy([1, 2], 5) ➞ true\n  # 1+2 is greater than the minimum possible weight, but it's unbalanced.\n\n  wilLItFLy([3, 2, 3], 1) ➞ true\n  # it's balanced, but 3+2+3 is more than the minimum possible weight.\n\n  wilLItFLy([3, 2, 3], 9) ➞ false\n  # 3+2+3 is greater than the minimum possible weight, and it's unbalanced.\n\n  wilLItFLy([3], 5) ➞ false\n  # 3 is greater than the minimum possible weight, and it's unbalanced.\n  */\nconst wilLItFLy = (q, w) => {\n  const [l, r] = q;\n  const [s, t] = w;\n  if (l === r) return true;\n  if (l > r) return wilLItFLy([l, r], s);\n  if (s > t) return wilLItFLy([l, r], t);\n  return false;\n};\n\n/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly ", "passed": 0}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smaLlesTChanGe([1,2,3,5,4,7,9,6]) == 4\n  smaLlesTChanGe([1, 2, 3, 4, 3, 2, 2]) == 1\n  smaLlesTChanGe([1, 2, 3, 2, 1]) == 0\n  */\nconst smaLlesTChanGe = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smaLlesTChanGe", "gc": "<|endoftext|>/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smaLlesTChanGe([1,2,3,5,4,7,9,6]) == 4\n  smaLlesTChanGe([1, 2, 3, 4, 3, 2, 2]) == 1\n  smaLlesTChanGe([1, 2, 3, 2, 1]) == 0\n  */\nconst smaLlesTChanGe = (arr) => {\n  let min = Number.MAX_VALUE;\n  let max = 0;\n  let len = arr.length;\n  for (let i = 0; i < len; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n    }\n    if (arr[i] < min) {\n      min = arr[i];\n    }\n  }\n  return min === max? min : smaLlesTChanGe(arr.slice(min, max + 1));\n};\n\n/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smaLlesTChanGe([1,2,3,5,4,7,9,6]) == 4\n  smaLlesTChanGe([1, 2, 3, 4, 3, 2, 2]) == 1\n  smaLlesTChanGe([1, 2, 3, 2, 1]) == 0\n  */\nconst smaLlesTChanGeReverse = (arr) => {\n  let min = Number.MAX_VALUE;\n  let max = 0;\n  let len = arr.length;\n  for (let i = 0; i < len; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n    }\n    if (arr[i] < min) {\n      min = arr[i];\n    }\n  }\n  return min === max? min : smaLlesTChanGeReverse(arr.slice(min, max + 1));\n};\n\n/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smaLlesTChanGe([1,2,3,5,4,7,9,6]) == 4\n  smaLlesTChanGe([1, 2, 3, 4, 3, 2, 2]) == 1\n  smaLlesTChanGe([1, 2, 3, 2, 1]) == 0\n  */\nconst smaLlesTChanGeReverseReverse = (arr) => {\n  let min = Number.MAX_VALUE;\n  let max = 0;\n  let len = arr.length;\n  for (let i = 0; i < len; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n    }\n    if (arr[i] < min) {\n      min = arr[i];\n    }\n  }\n  return min === max? min : smaLlesTChanGeReverseReverse(arr.slice(min, max + 1));\n};\n\n/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smaLlesTChanGe([1,2,3,5,4,7,9,6]) == 4\n  smaLlesTChanGe([1, 2, 3, 4, 3, 2, 2]) == 1\n  smaLlesTChanGe([1, 2, 3, 2, 1]) == 0\n  */\nconst smaLlesTChanGeReverseReverseReverse = (arr) => {\n  let min = Number.MAX_VALUE;\n  let max = 0;\n  let len = arr.length;\n  for (let i = 0; i < len; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n    }\n    if (arr[i] < min) {\n      min = arr[i];\n    }\n  }\n  return min === max? min : smaLlesTChanGeReverseReverseReverse(arr.slice(min, max + 1));\n};\n\n/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smaLlesTChanGe([1,2,3,5,4,7,9,6]) == 4\n  smaLlesTChanGe([1, 2, 3, 4, 3, 2, 2]) == 1\n  smaLlesTChanGe([1, 2, 3, 2, 1]) == 0\n  */\nconst smaLlesTChanGeReverseReverseReverseReverse = (arr) => {\n  let min = Number.MAX_VALUE;\n  let max = 0;\n  let len = arr.length;\n  for (let i = 0; i < len; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n    }\n    if (arr[i] < min) {\n      min = arr[i];\n    }\n  }\n  return min === max? min : smaLlesTChanGeReverseReverseReverse(arr.slice(min, max + 1));\n};\n\n/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smaLlesTChanGe([1,2,3,5,4,7,9,6]) == 4\n  smaLlesTChanGe([1, 2, 3, 4, 3, 2, 2]) == 1\n  smaLlesTChanGe([1, 2, 3, 2, 1]) == 0\n  */\nconst smaLlesTChanGeReverseReverseReverseReverse = (arr) => {\n  let min = Number.MAX_VALUE;\n  let max = 0;\n  let len = arr.length;\n  for (let i = 0; i < len; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n    }\n    if (arr[i] < min) {\n      min = arr[i];\n    }\n  }\n  return min === max? min : smaLlesTChanGeReverseReverseReverseReverse(arr.slice(min, max + 1));\n};\n\n/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smaLlesTChanGe([1,2,3,5,4,7,9,6]) == 4\n  smaLlesTChanGe([1, 2, 3, 4, 3, 2, 2]) == 1\n  smaLlesTChanGe([1, 2, 3, 2, 1]) == 0\n  */\nconst smaLlesTChanGeReverseReverseReverseReverseReverse = (arr) => {\n  let min = Number.MAX_VALUE;\n  let max = 0;\n  let len = arr.length;\n  for (let i = 0; i < len; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n    }\n    if (arr[i] < min) {\n      min = arr[i];\n    }\n  }\n  return min === max? min : smaLlesTChanGeReverseReverseReverseReverseReverse(arr.slice(min, max + 1));\n};\n\n/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smaLlesTChanGe([1,2,3,5,4,7,9,6]) == 4\n  smaLlesTChanGe([1, 2, 3, 4, 3, 2, 2]) == 1\n  smaLlesTChanGe([1, 2, 3, 2, 1]) == 0\n  */\nconst smaLlesTChanGeReverseReverseReverseReverseReverseReverse = (arr) => {\n  let min = Number.MAX_VALUE;\n  let max = 0;\n  let len = arr.length;\n  for (let i = 0; i < len; i++) {\n    if (arr[i] > max) {\n      max = arr", "passed": 0}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totAlMaTch([], []) ➞ []\n  totAlMaTch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totAlMaTch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totAlMaTch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totAlMaTch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totAlMaTch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totAlMaTch", "gc": "<|endoftext|>/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totAlMaTch([], []) ➞ []\n  totAlMaTch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totAlMaTch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totAlMaTch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totAlMaTch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totAlMaTch = (lst1, lst2) => {\n  const count1 = lst1.reduce((acc, cur) => acc + cur.length, 0)\n  const count2 = lst2.reduce((acc, cur) => acc + cur.length, 0)\n  return count1 < count2? lst1 : lst2\n}\n\n/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list greater than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totAlMaTch([], []) ➞ []\n  totAlMaTch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totAlMaTch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totAlMaTch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totAlMaTch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totAlMaTch = (lst1, lst2) => {\n  const count1 = lst1.reduce((acc, cur) => acc + cur.length, 0)\n  const count2 = lst2.reduce((acc, cur) => acc + cur.length, 0)\n  return count1 > count2? lst1 : lst2\n}\n\n/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list equal the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totAlMaTch([], []) ➞ []\n  totAlMaTch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totAlMaTch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totAlMaTch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totAlMaTch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totAlMaTch = (lst1, lst2) => {\n  const count1 = lst1.reduce((acc, cur) => acc + cur.length, 0)\n  const count2 = lst2.reduce((acc, cur) => acc + cur.length, 0)\n  return count1 == count2? lst1 : lst2\n}\n\n/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list not equal the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totAlMaTch([], []) ➞ []\n  totAlMaTch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totAlMaTch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totAlMaTch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totAlMaTch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totAlMaTch = (lst1, lst2) => {\n  const count1 = lst1.reduce((acc, cur) => acc + cur.length, 0)\n  const count2 = lst2.reduce((acc, cur) => acc + cur.length, 0)\n  return count1!= count2? lst1 : lst2\n}\n\n/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list between the first and last char.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totAlMaTch([], []) ➞ []\n  totAlMaTch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totAlMaTch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totAlMaTch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totAlMaTch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totAlMaTch = (lst1, lst2) => {\n  const count1 = lst1.reduce((acc, cur) => acc + cur.length, 0)\n  const count2 = lst2.reduce((acc, cur) => acc + cur.length, 0)\n  return count1 < count2? lst1.slice(count1, count2) : lst2.slice(count1, count2)\n}\n\n/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list between the first and last char.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totAlMaTch([], []) ➞ []\n  totAlMaTch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totAlMaTch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totAlMaTch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totAlMaTch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totAlMaTch = (lst1, lst2) => {\n  const count1 = lst1.reduce((acc, cur) => acc + cur.length, 0)\n  const count2 = lst2.reduce((acc, cur) => acc + cur.length, 0)\n  return count1 < count2? lst1.slice(0, count1) : lst2.slice(0, count2)\n}\n\n/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list between the first and last char.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totAlMaTch([], []) ➞ []\n  totAlMaTch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totAlMaTch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totAlMaTch(['hi', 'admin'], ['hI', 'hi", "passed": 0}
{"task_id": "JavaScript/75", "prompt": "/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMUltiPlyPrIme(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMUltiPlyPrIme = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMUltiPlyPrIme", "gc": "<|endoftext|>/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMUltiPlyPrIme(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMUltiPlyPrIme = (a) => {\n  let isMUltiPlyPrIme = true;\n  if (a < 100) {\n    for (let i = 2; i <= a; i++) {\n      if (a % i === 0) {\n        isMUltiPlyPrIme = false;\n        break;\n      }\n    }\n  }\n  return isMUltiPlyPrIme;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMUltiPlyPrIme(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMUltiPlyPrIme = (a) => {\n  let isMUltiPlyPrIme = true;\n  if (a < 100) {\n    for (let i = 2; i <= a; i++) {\n      if (a % i === 0) {\n        isMUltiPlyPrIme = false;\n        break;\n      }\n    }\n  }\n  return isMUltiPlyPrIme;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMUltiPlyPrIme(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMUltiPlyPrIme = (a) => {\n  let isMUltiPlyPrIme = true;\n  if (a < 100) {\n    for (let i = 2; i <= a; i++) {\n      if (a % i === 0) {\n        isMUltiPlyPrIme = false;\n        break;\n      }\n    }\n  }\n  return isMUltiPlyPrIme;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMUltiPlyPrIme(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMUltiPlyPrIme = (a) => {\n  let isMUltiPlyPrIme = true;\n  if (a < 100) {\n    for (let i = 2; i <= a; i++) {\n      if (a % i === 0) {\n        isMUltiPlyPrIme = false;\n        break;\n      }\n    }\n  }\n  return isMUltiPlyPrIme;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMUltiPlyPrIme(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMUltiPlyPrIme = (a) => {\n  let isMUltiPlyPrIme = true;\n  if (a < 100) {\n    for (let i = 2; i <= a; i++) {\n      if (a % i === 0) {\n        isMUltiPlyPrIme = false;\n        break;\n      }\n    }\n  }\n  return isMUltiPlyPrIme;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMUltiPlyPrIme(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMUltiPlyPrIme = (a) => {\n  let isMUltiPlyPrIme = true;\n  if (a < 100) {\n    for (let i = 2; i <= a; i++) {\n      if (a % i === 0) {\n        isMUltiPlyPrIme = false;\n        break;\n      }\n    }\n  }\n  return isMUltiPlyPrIme;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMUltiPlyPrIme(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMUltiPlyPrIme = (a) => {\n  let isMUltiPlyPrIme = true;\n  if (a < 100) {\n    for (let i = 2; i <= a; i++) {\n      if (a % i === 0) {\n        isMUltiPlyPrIme = false;\n        break;\n      }\n    }\n  }\n  return isMUltiPlyPrIme;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMUltiPlyPrIme(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMUltiPlyPrIme = (a) => {\n  let isMUltiPlyPrIme = true;\n  if (a < 100) {\n    for (let i = 2; i <= a; i++) {\n      if (a % i === 0) {\n        isMUltiPlyPrIme = false;\n        break;\n      }\n    }\n  }\n  return isMUltiPlyPrIme;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMUltiPlyPrIme(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMUltiPlyPrIme = (a) => {\n  let isMUltiPlyPrIme = true;\n  if (a < 100) {\n    for (let i = 2; i <= a; i++) {\n      if (a % i === 0) {\n        isMUltiPlyPrIme = false;\n        break;\n      }\n    }\n  }\n  return isMUltiPlyPrIme;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMUltiPlyPrIme(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMUltiPlyPrIme = (a) => {\n  let isMUltiPlyPrIme = true;\n  if (a < 100) {\n    for (let i = 2; i <= a; i++) {\n      if (a % i === 0) {\n        isMUltiPlyPrIme = false;\n        break;\n      }\n    }\n  }\n  return isMUltiPlyPrIme;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMUltiPlyPrIme(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMUltiPlyPrIme = (a) => {\n  let isMUltiPlyPrIme = true;\n  if (a < 100) {\n    for (let i = 2; i <= a; i++) {\n      if (a % i === 0) {\n        isMUltiPlyPrIme = false;\n        break;\n      }\n    }\n  }\n  return isMUltiPlyPrIme;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a", "passed": 0}
{"task_id": "JavaScript/76", "prompt": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSImplEPoweR(1, 4) => true\n  isSImplEPoweR(2, 2) => true\n  isSImplEPoweR(8, 2) => true\n  isSImplEPoweR(3, 2) => false\n  isSImplEPoweR(3, 1) => false\n  isSImplEPoweR(5, 3) => false\n  */\nconst isSImplEPoweR = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSImplEPoweR", "gc": "<|endoftext|>/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSImplEPoweR(1, 4) => true\n  isSImplEPoweR(2, 2) => true\n  isSImplEPoweR(8, 2) => true\n  isSImplEPoweR(3, 2) => false\n  isSImplEPoweR(3, 1) => false\n  isSImplEPoweR(5, 3) => false\n  */\nconst isSImplEPoweR = (x, n) => {\n  if (n <= 0) return false;\n  if (n % 2 === 0) return false;\n  if (n % 3 === 0) return false;\n  if (n % 5 === 0) return false;\n  if (n % 7 === 0) return false;\n  if (n % 11 === 0) return false;\n  if (n % 13 === 0) return false;\n  if (n % 15 === 0) return false;\n  if (n % 17 === 0) return false;\n  if (n % 19 === 0) return false;\n  if (n % 23 === 0) return false;\n  if (n % 29 === 0) return false;\n  if (n % 31 === 0) return false;\n  if (n % 37 === 0) return false;\n  if (n % 41 === 0) return false;\n  if (n % 43 === 0) return false;\n  if (n % 47 === 0) return false;\n  if (n % 53 === 0) return false;\n  if (n % 59 === 0) return false;\n  if (n % 61 === 0) return false;\n  if (n % 67 === 0) return false;\n  if (n % 71 === 0) return false;\n  if (n % 73 === 0) return false;\n  if (n % 79 === 0) return false;\n  if (n % 83 === 0) return false;\n  if (n % 89 === 0) return false;\n  if (n % 97 === 0) return false;\n  if (n % 101 === 0) return false;\n  if (n % 103 === 0) return false;\n  if (n % 107 === 0) return false;\n  if (n % 109 === 0) return false;\n  if (n % 111 === 0) return false;\n  if (n % 113 === 0) return false;\n  if (n % 115 === 0) return false;\n  if (n % 121 === 0) return false;\n  if (n % 123 === 0) return false;\n  if (n % 125 === 0) return false;\n  if (n % 129 === 0) return false;\n  if (n % 131 === 0) return false;\n  if (n % 133 === 0) return false;\n  if (n % 135 === 0) return false;\n  if (n % 137 === 0) return false;\n  if (n % 139 === 0) return false;\n  if (n % 141 === 0) return false;\n  if (n % 143 === 0) return false;\n  if (n % 145 === 0) return false;\n  if (n % 147 === 0) return false;\n  if (n % 149 === 0) return false;\n  if (n % 151 === 0) return false;\n  if (n % 153 === 0) return false;\n  if (n % 155 === 0) return false;\n  if (n % 157 === 0) return false;\n  if (n % 159 === 0) return false;\n  if (n % 161 === 0) return false;\n  if (n % 163 === 0) return false;\n  if (n % 165 === 0) return false;\n  if (n % 167 === 0) return false;\n  if (n % 169 === 0) return false;\n  if (n % 171 === 0) return false;\n  if (n % 173 === 0) return false;\n  if (n % 175 === 0) return false;\n  if (n % 177 === 0) return false;\n  if (n % 179 === 0) return false;\n  if (n % 181 === 0) return false;\n  if (n % 183 === 0) return false;\n  if (n % 185 === 0) return false;\n  if (n % 187 === 0) return false;\n  if (n % 189 === 0) return false;\n  if (n % 191 === 0) return false;\n  if (n % 193 === 0) return false;\n  if (n % 195 === 0) return false;\n  if (n % 197 === 0) return false;\n  if (n % 199 === 0) return false;\n  if (n % 201 === 0) return false;\n  if (n % 203 === 0) return false;\n  if (n % 205 === 0) return false;\n  if (n % 207 === 0) return false;\n  if (n % 209 === 0) return false;\n  if (n % 211 === 0) return false;\n  if (n % 213 === 0) return false;\n  if (n % 215 === 0) return false;\n  if (n % 217 === 0) return false;\n  if (n % 219 === 0) return false;\n  if (n % 221 === 0) return false;\n  if (n % 223 === 0) return false;\n  if (n % 225 === 0) return false;\n  if (n % 227 === 0) return false;\n  if (n % 229 === 0) return false;\n  if (n % 231 === 0) return false;\n  if (n % 233 === 0) return false;\n  if (n % 235 === 0) return false;\n  if (n % 237 === 0) return false;\n  if (n % 239 === 0) return false;\n  if (n % 241 === 0) return false;\n  if (n % 243 === 0) return false;\n  if (n % 245 === 0) return false;\n  if (n % 247 === 0) return false;\n  if (n % 249 === 0) return false;\n  if (n % 251 === 0) return false;\n  if (n % 253 === 0) return false;\n  if (n % 255 === 0) return false;\n  if (n % 257 === 0) return false;\n  if (n % 259 === 0) return false;\n  if (n % 261 === 0) return false;\n  if (n % 263 === 0) return false;\n  if (n % 265 === 0) return false;\n  if (n % 267 === 0) return false;\n  if (n % 269 === 0) return false;\n  if (n % 271 === 0) return false;\n  if (n % 273 === 0) return false;\n  if (n % 275 === 0) return false;\n  if (n % 277 === 0) return false;\n  if (n % 279 === 0) return false;\n  if (n % 281 === 0) return false;\n  if (n % 283 === 0) return false;\n  if (n % 285 === 0) return false;\n  if (n % 287 === 0) return false;\n  if (n % 289 === 0) return false;\n  if (n % 291 === 0) return false;\n  if (n % 293 === 0) return false;\n  if (n % 295 === 0) return false;\n  if (n % 297 === 0) return false;\n  if (n % 299 === 0) return false;\n  if (n % 301 === 0) return false;\n  if (n % 303 === 0) return false;\n  if (n % 305 === 0) return false;\n  if (n % 307 === 0) return false;\n  if (n % 309 === 0) return false;\n  if (n % 311 === 0) return false;\n  if (n % 315 === 0) return false;\n  if (n % 317 === 0) return false;\n  if (n % 319 === 0) return false;\n  if (n % 321 === 0) return false;\n  if (n % 323 === 0) return false;\n  if (n % 325 === 0) return false;\n  if (n % 327 === 0) return false;\n  if (n % 329 === 0) return false;\n  if (n % 331 === 0) return false;\n  if (n % 333 === 0) return false;\n  if (n % 335 === 0) return false;\n  if (n % 337 === 0) return false;\n  if (n % 339 === 0) return false;\n  if (n % 341 === 0) return false;\n  if (n % 343 === 0) return false;\n  if (n % 345 === 0) return false;\n  if (n % 347 === 0) return false;\n  if (n % 349 === 0) return false;\n  if (n % 351 === 0) return false;\n  if (n % 353 === 0) return false;\n  if (n % 355 === 0) return false;\n  if (n % 357 === 0) return false;\n  if (n % 359 === 0) return false;\n  if (n % 361 === 0) return false;\n  if (n % 363 === 0) return false;\n  if (n % 365 === 0) return false;\n  if (n % 367 === 0) return false;\n  if (n % 369 === 0) return false;\n  if (n % 371 === 0) return false;\n  if (n % 373 === 0) return false;\n  if (n % 375 === 0) return false;\n  if (n % 377 === 0) return false;\n  if (n % 379 === 0) return false;\n  if (n % 381 === 0) return false;\n  if (n % 383 === 0) return false;\n  if (n % 385 === 0) return false;\n  if (n % 387 === 0) return false;\n  if (n % 389 === 0) return false;\n  if (n % 39", "passed": 0}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscUbe(1) ==> true\n  iscUbe(2) ==> false\n  iscUbe(-1) ==> true\n  iscUbe(64) ==> true\n  iscUbe(0) ==> true\n  iscUbe(180) ==> false\n  */\nconst iscUbe = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscUbe", "gc": "<|endoftext|>/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscUbe(1) ==> true\n  iscUbe(2) ==> false\n  iscUbe(-1) ==> true\n  iscUbe(64) ==> true\n  iscUbe(0) ==> true\n  iscUbe(180) ==> false\n  */\nconst iscUbe = (a) => {\n  if (a < 1 || a > 64) {\n    throw new Error('iscUbe - a must be between 1 and 64');\n  }\n  return a % 2 === 0;\n};\n\n/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscUbe(1) ==> true\n  iscUbe(2) ==> false\n  iscUbe(-1) ==> true\n  iscUbe(64) ==> true\n  iscUbe(0) ==> true\n  iscUbe(180) ==> false\n  */\nconst iscUbe2 = (a) => {\n  if (a < 1 || a > 64) {\n    throw new Error('iscUbe - a must be between 1 and 64');\n  }\n  return a % 2 === 0;\n};\n\n/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscUbe(1) ==> true\n  iscUbe(2) ==> false\n  iscUbe(-1) ==> true\n  iscUbe(64) ==> true\n  iscUbe(0) ==> true\n  iscUbe(180) ==> false\n  */\nconst iscUbe3 = (a) => {\n  if (a < 1 || a > 64) {\n    throw new Error('iscUbe - a must be between 1 and 64');\n  }\n  return a % 2 === 0;\n};\n\n/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscUbe(1) ==> true\n  iscUbe(2) ==> false\n  iscUbe(-1) ==> true\n  iscUbe(64) ==> true\n  iscUbe(0) ==> true\n  iscUbe(180) ==> false\n  */\nconst iscUbe4 = (a) => {\n  if (a < 1 || a > 64) {\n    throw new Error('iscUbe - a must be between 1 and 64');\n  }\n  return a % 2 === 0;\n};\n\n/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscUbe(1) ==> true\n  iscUbe(2) ==> false\n  iscUbe(-1) ==> true\n  iscUbe(64) ==> true\n  iscUbe(0) ==> true\n  iscUbe(180) ==> false\n  */\nconst iscUbe5 = (a) => {\n  if (a < 1 || a > 64) {\n    throw new Error('iscUbe - a must be between 1 and 64');\n  }\n  return a % 2 === 0;\n};\n\n/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscUbe(1) ==> true\n  iscUbe(2) ==> false\n  iscUbe(-1) ==> true\n  iscUbe(64) ==> true\n  iscUbe(0) ==> true\n  iscUbe(180) ==> false\n  */\nconst iscUbe6 = (a) => {\n  if (a < 1 || a > 64) {\n    throw new Error('iscUbe - a must be between 1 and 64');\n  }\n  return a % 2 === 0;\n};\n\n/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscUbe(1) ==> true\n  iscUbe(2) ==> false\n  iscUbe(-1) ==> true\n  iscUbe(64) ==> true\n  iscUbe(0) ==> true\n  iscUbe(180) ==> false\n  */\nconst iscUbe7 = (a) => {\n  if (a < 1 || a > 64) {\n    throw new Error('iscUbe - a must be between 1 and 64');\n  }\n  return a % 2 === 0;\n};\n\n/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscUbe(1) ==> true\n  iscUbe(2) ==> false\n  iscUbe(-1) ==> true\n  iscUbe(64) ==> true\n  iscUbe(0) ==> true\n  iscUbe(180) ==> false\n  */\nconst iscUbe8 = (a) => {\n  if (a < 1 || a > 64) {\n    throw new Error('iscUbe - a must be between 1 and 64');\n  }\n  return a % 2 === 0;\n};\n\n/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscUbe(1) ==> true\n  iscUbe(2) ==> false\n  iscUbe(-1) ==> true\n  iscUbe(64) ==> true\n  iscUbe(0) ==> true\n  iscUbe(180) ==> false\n  */\nconst iscUbe9 = (a) => {\n  if (a < 1 || a > 64) {\n    throw new Error('iscUbe - a must be between 1 and 64');\n  }\n  return a % 2 === 0;\n};\n\n/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscUbe(1) ==> true\n  iscUbe(2) ==> false\n  iscUbe(-1) ==> true\n  iscUbe(64) ==> true\n  iscUbe(0) ==> true\n  iscUbe(180) ==> false\n  */\nconst iscUbe10 = (a) => {\n  if (a < 1 || a > 64) {\n    throw new Error('iscUbe - a must be between 1 and 64');\n  }\n  return a % 2 === 0;\n};\n\n/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscUbe(1) ==> true\n  iscUbe(2) ==> false\n  iscUbe(-1) ==> true\n  iscUbe(64) ==> true\n  iscUbe(0) ==> true\n  iscUbe(180) ==> ", "passed": 0}
{"task_id": "JavaScript/78", "prompt": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexkey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexkey", "gc": "<|endoftext|>/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexkey = (num) => {\n  let numArray = num.split('');\n  let primeArray = [];\n  let primeCount = 0;\n  let numArrayLength = numArray.length;\n  let numArrayIndex = 0;\n  let primeArrayIndex = 0;\n  let primeCountIndex = 0;\n  let primeArrayLength = 0;\n  let primeArrayIndexLength = 0;\n  let primeArrayIndexLength2 = 0;\n  let primeArrayIndexLength3 = 0;\n  let primeArrayIndexLength4 = 0;\n  let primeArrayIndexLength5 = 0;\n  let primeArrayIndexLength6 = 0;\n  let primeArrayIndexLength7 = 0;\n  let primeArrayIndexLength8 = 0;\n  let primeArrayIndexLength9 = 0;\n  let primeArrayIndexLength10 = 0;\n  let primeArrayIndexLength11 = 0;\n  let primeArrayIndexLength12 = 0;\n  let primeArrayIndexLength13 = 0;\n  let primeArrayIndexLength14 = 0;\n  let primeArrayIndexLength15 = 0;\n  let primeArrayIndexLength16 = 0;\n  let primeArrayIndexLength17 = 0;\n  let primeArrayIndexLength18 = 0;\n  let primeArrayIndexLength19 = 0;\n  let primeArrayIndexLength20 = 0;\n  let primeArrayIndexLength21 = 0;\n  let primeArrayIndexLength22 = 0;\n  let primeArrayIndexLength23 = 0;\n  let primeArrayIndexLength24 = 0;\n  let primeArrayIndexLength25 = 0;\n  let primeArrayIndexLength26 = 0;\n  let primeArrayIndexLength27 = 0;\n  let primeArrayIndexLength28 = 0;\n  let primeArrayIndexLength29 = 0;\n  let primeArrayIndexLength30 = 0;\n  let primeArrayIndexLength31 = 0;\n  let primeArrayIndexLength32 = 0;\n  let primeArrayIndexLength33 = 0;\n  let primeArrayIndexLength34 = 0;\n  let primeArrayIndexLength35 = 0;\n  let primeArrayIndexLength36 = 0;\n  let primeArrayIndexLength37 = 0;\n  let primeArrayIndexLength38 = 0;\n  let primeArrayIndexLength39 = 0;\n  let primeArrayIndexLength40 = 0;\n  let primeArrayIndexLength41 = 0;\n  let primeArrayIndexLength42 = 0;\n  let primeArrayIndexLength43 = 0;\n  let primeArrayIndexLength44 = 0;\n  let primeArrayIndexLength45 = 0;\n  let primeArrayIndexLength46 = 0;\n  let primeArrayIndexLength47 = 0;\n  let primeArrayIndexLength48 = 0;\n  let primeArrayIndexLength49 = 0;\n  let primeArrayIndexLength50 = 0;\n  let primeArrayIndexLength51 = 0;\n  let primeArrayIndexLength52 = 0;\n  let primeArrayIndexLength53 = 0;\n  let primeArrayIndexLength54 = 0;\n  let primeArrayIndexLength55 = 0;\n  let primeArrayIndexLength56 = 0;\n  let primeArrayIndexLength57 = 0;\n  let primeArrayIndexLength58 = 0;\n  let primeArrayIndexLength59 = 0;\n  let primeArrayIndexLength60 = 0;\n  let primeArrayIndexLength61 = 0;\n  let primeArrayIndexLength62 = 0;\n  let primeArrayIndexLength63 = 0;\n  let primeArrayIndexLength64 = 0;\n  let primeArrayIndexLength65 = 0;\n  let primeArrayIndexLength66 = 0;\n  let primeArrayIndexLength67 = 0;\n  let primeArrayIndexLength68 = 0;\n  let primeArrayIndexLength69 = 0;\n  let primeArrayIndexLength70 = 0;\n  let primeArrayIndexLength71 = 0;\n  let primeArrayIndexLength72 = 0;\n  let primeArrayIndexLength73 = 0;\n  let primeArrayIndexLength74 = 0;\n  let primeArrayIndexLength75 = 0;\n  let primeArrayIndexLength76 = 0;\n  let primeArrayIndexLength77 = 0;\n  let primeArrayIndexLength78 = 0;\n  let primeArrayIndexLength79 = 0;\n  let primeArrayIndexLength80 = 0;\n  let primeArrayIndexLength81 = 0;\n  let primeArrayIndexLength82 = 0;\n  let primeArrayIndexLength83 = 0;\n  let primeArrayIndexLength84 = 0;\n  let primeArrayIndexLength85 = 0;\n  let primeArrayIndexLength86 = 0;\n  let primeArrayIndexLength87 = 0;\n  let primeArrayIndexLength88 = 0;\n  let primeArrayIndexLength89 = 0;\n  let primeArrayIndexLength90 = 0;\n  let primeArrayIndexLength91 = 0;\n  let primeArrayIndexLength92 = 0;\n  let primeArrayIndexLength93 = 0;\n  let primeArrayIndexLength94 = 0;\n  let primeArrayIndexLength95 = 0;\n  let primeArrayIndexLength96 = 0;\n  let primeArrayIndexLength97 = 0;\n  let primeArrayIndexLength98 = 0;\n  let primeArrayIndexLength99 = 0;\n  let primeArrayIndexLength100 = 0;\n  let primeArrayIndexLength101 = 0;\n  let primeArrayIndexLength102 = 0;\n  let primeArrayIndexLength103 = 0;\n  let primeArrayIndexLength104 = 0;\n  let primeArrayIndexLength105 = 0;\n  let primeArrayIndexLength106 = 0;\n  let primeArrayIndexLength107 = 0;\n  let primeArrayIndexLength108 = 0;\n  let primeArrayIndexLength109 = 0;\n  let primeArrayIndexLength110 = 0;\n  let primeArrayIndexLength111 = 0;\n  let primeArrayIndexLength112 = 0;\n  let primeArrayIndexLength113 = 0;\n  let primeArrayIndexLength114 = 0;\n  let primeArrayIndexLength115 = 0;\n  let primeArrayIndexLength116 = 0;\n  let primeArrayIndexLength117 = 0;\n  let primeArrayIndexLength118 = 0;\n  let primeArrayIndexLength119 = 0;\n  let primeArrayIndexLength120 = 0;\n  let primeArrayIndexLength121 = 0;\n  let primeArrayIndexLength122 = 0;\n  let primeArrayIndexLength123 = 0;\n  let primeArrayIndexLength124 = 0;\n  let primeArrayIndexLength125 = 0;\n  let primeArrayIndexLength126 = 0;\n  let primeArrayIndexLength127 = 0;\n  let primeArrayIndexLength128 = 0;\n  let primeArrayIndexLength129 = 0;\n  let primeArrayIndexLength130 = 0;\n  let primeArrayIndexLength131 = 0;\n  let primeArrayIndexLength132 = 0;\n  let primeArrayIndexLength133 = 0;\n  let primeArrayIndexLength134 = 0;\n  let primeArrayIndexLength135 = 0;\n  let primeArrayIndexLength136 = 0;\n  let primeArrayIndexLength137 = 0;\n  let primeArrayIndexLength138 = 0;\n  let primeArrayIndexLength139 = 0;\n  let primeArrayIndexLength140 = 0;\n  let primeArrayIndexLength141 = 0;\n  let primeArrayIndexLength142 = 0;\n  let primeArrayIndexLength143 = 0;\n  let primeArrayIndexLength144 = 0;\n  let primeArrayIndexLength145 = 0;\n  let primeArrayIndexLength146 = 0;\n  let primeArrayIndexLength147 = 0;\n  let primeArrayIndexLength148 = 0;\n  let primeArrayIndexLength149 = 0;\n  let primeArrayIndexLength150 = 0;\n  let primeArrayIndexLength151 = 0;\n  let primeArrayIndexLength152 = 0;\n  let primeArrayIndexLength153 = 0;\n  let primeArrayIndexLength154 = 0;\n  let primeArrayIndexLength155 = 0;\n  let ", "passed": 0}
{"task_id": "JavaScript/79", "prompt": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decImaltoBinAry(15)   # returns \"db1111db\"\n  decImaltoBinAry(32)   # returns \"db100000db\"\n  */\nconst decImaltoBinAry = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decImaltoBinAry", "gc": "<|endoftext|>/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decImaltoBinAry(15)   # returns \"db1111db\"\n  decImaltoBinAry(32)   # returns \"db100000db\"\n  */\nconst decImaltoBinAry = (decimal) => {\n  let binary = '';\n  let decimalString = decimal.toString();\n  for (let i = 0; i < decimalString.length; i++) {\n    if (decimalString.charAt(i) == '1') {\n      binary += '1';\n    } else {\n      binary += '0';\n    }\n  }\n  return binary;\n};\n\n/*\n  Given a string, convert it to decimal form. Return the decimal form of the string.\n\n  Examples:\n  decimalToBinAry('hello')   # returns \"11110\"\n  decimalToBinAry('hello')   # returns \"11110\"\n  decimalToBinAry('hello')   # returns \"11110\"\n  */\nconst decimalToBinAry = (string) => {\n  let decimal = '';\n  let stringLength = string.length;\n  for (let i = 0; i < stringLength; i++) {\n    decimal += string[i].toString().padStart(2, '0');\n  }\n  return decimal;\n};\n\n/*\n  Given a string, convert it to decimal form. Return the decimal form of the string.\n\n  Examples:\n  decimalToBinAry('hello')   # returns \"11110\"\n  decimalToBinAry('hello')   # returns \"11110\"\n  decimalToBinAry('hello')   # returns \"11110\"\n  */\nconst decimalToBinAry = (string) => {\n  let decimal = '';\n  let stringLength = string.length;\n  for (let i = 0; i < stringLength; i++) {\n    decimal += string[i].toString().padStart(2, '0');\n  }\n  return decimal;\n};\n\n/*\n  Given a string, convert it to decimal form. Return the decimal form of the string.\n\n  Examples:\n  decimalToBinAry('hello')   # returns \"11110\"\n  decimalToBinAry('hello')   # returns \"11110\"\n  decimalToBinAry('hello')   # returns \"11110\"\n  */\nconst decimalToBinAry = (string) => {\n  let decimal = '';\n  let stringLength = string.length;\n  for (let i = 0; i < stringLength; i++) {\n    decimal += string[i].toString().padStart(2, '0');\n  }\n  return decimal;\n};\n\n/*\n  Given a string, convert it to decimal form. Return the decimal form of the string.\n\n  Examples:\n  decimalToBinAry('hello')   # returns \"11110\"\n  decimalToBinAry('hello')   # returns \"11110\"\n  decimalToBinAry('hello')   # returns \"11110\"\n  */\nconst decimalToBinAry = (string) => {\n  let decimal = '';\n  let stringLength = string.length;\n  for (let i = 0; i < stringLength; i++) {\n    decimal += string[i].toString().padStart(2, '0');\n  }\n  return decimal;\n};\n\n/*\n  Given a string, convert it to decimal form. Return the decimal form of the string.\n\n  Examples:\n  decimalToBinAry('hello')   # returns \"11110\"\n  decimalToBinAry('hello')   # returns \"11110\"\n  decimalToBinAry('hello')   # returns \"11110\"\n  */\nconst decimalToBinAry = (string) => {\n  let decimal = '';\n  let stringLength = string.length;\n  for (let i = 0; i < stringLength; i++) {\n    decimal += string[i].toString().padStart(2, '0');\n  }\n  return decimal;\n};\n\n/*\n  Given a string, convert it to decimal form. Return the decimal form of the string.\n\n  Examples:\n  decimalToBinAry('hello')   # returns \"11110\"\n  decimalToBinAry('hello')   # returns \"11110\"\n  decimalToBinAry('hello')   # returns \"11110\"\n  */\nconst decimalToBinAry = (string) => {\n  let decimal = '';\n  let stringLength = string.length;\n  for (let i = 0; i < stringLength; i++) {\n    decimal += string[i].toString().padStart(2, '0');\n  }\n  return decimal;\n};\n\n/*\n  Given a string, convert it to decimal form. Return the decimal form of the string.\n\n  Examples:\n  decimalToBinAry('hello')   # returns \"11110\"\n  decimalToBinAry('hello')   # returns \"11110\"\n  decimalToBinAry('hello')   # returns \"11110\"\n  */\nconst decimalToBinAry = (string) => {\n  let decimal = '';\n  let stringLength = string.length;\n  for (let i = 0; i < stringLength; i++) {\n    decimal += string[i].toString().padStart(2, '0');\n  }\n  return decimal;\n};\n\n/*\n  Given a string, convert it to decimal form. Return the decimal form of the string.\n\n  Examples:\n  decimalToBinAry('hello')   # returns \"11110\"\n  decimalToBinAry('hello')   # returns \"11110\"\n  decimalToBinAry('hello')   # returns \"11110\"\n  */\nconst decimalToBinAry = (string) => {\n  let decimal = '';\n  let stringLength = string.length;\n  for (let i = 0; i < stringLength; i++) {\n    decimal += string[i].toString().padStart(2, '0');\n  }\n  return decimal;\n};\n\n/*\n  Given a string, convert it to decimal form. Return the decimal form of the string.\n\n  Examples:\n  decimalToBinAry('hello')   # returns \"11110\"\n  decimalToBinAry('hello')   # returns \"11110\"\n  decimalToBinAry('hello')   # returns \"11110\"\n  */\nconst decimalToBinAry = (string) => {\n  let decimal = '';\n  let stringLength = string.length;\n  for (let i = 0; i < stringLength; i++) {\n    decimal += string[i].toString().padStart(2, '0');\n  }\n  return decimal;\n};\n\n/*\n  Given a string, convert it to decimal form. Return the decimal form of the string.\n\n  Examples:\n  decimalToBinAry('hello')   # returns \"11110\"\n  decimalToBinAry('hello')   # returns \"11110\"\n  decimalToBinAry('hello')   # returns \"11110\"\n  */\nconst decimalToBinAry = (string) => {\n  let decimal = '';\n  let stringLength = string.length;\n  for (let i = 0; i < stringLength; i++) {\n    decimal += string[i].toString().padStart(2, '0');\n  }\n  return decimal;\n};\n\n/*\n  Given a string, convert it to decimal form. Return the decimal form of the string.\n\n  Examples:\n  decimalToBinAry('hello')   # returns \"11110\"\n  decimalToBinAry('hello')   # returns \"11110\"\n  decimalToBinAry('hello')   # returns \"11110\"\n  */\nconst decimalToBinAry = (string) => {\n  let decimal = '';\n  let stringLength = string.length;\n  for (let i = 0; i < stringLength; i++) {\n    decimal += string[i].toString().padStart(2, '0');\n  }\n  return decimal;\n};\n\n/*\n  Given a string, convert it to decimal form. Return the decimal form of the string.\n\n  Examples:\n  decimalToBinAry('hello')   # returns \"11110\"\n  decimalToBinAry('hello')   # returns \"11110\"\n  decimal", "passed": 0}
{"task_id": "JavaScript/8", "prompt": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumprodUct([])\n  (0, 1)\n  >>> sumprodUct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumprodUct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumprodUct", "gc": "<|endoftext|>/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumprodUct([])\n  (0, 1)\n  >>> sumprodUct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumprodUct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n};\n\n/* Given a list of integers, return a list of tuples consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumprodUctUct([])\n  []\n  >>> sumprodUctUct([1, 2, 3, 4])\n  [(1, 24), (10, 24)]\n  */\nconst sumprodUctUct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  let result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n    result.push([sum, product]);\n  }\n  return result;\n};\n\n/* Given a list of integers, return a list of tuples consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumprodUctUctUctUct([])\n  []\n  >>> sumprodUctUctUctUctUct([1, 2, 3, 4])\n  [(1, 24), (10, 24), (24, 24)]\n  */\nconst sumprodUctUctUctUct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  let result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n    result.push([sum, product]);\n  }\n  return result;\n};\n\n/* Given a list of integers, return a list of tuples consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumprodUctUctUctUctUctUct([])\n  []\n  >>> sumprodUctUctUctUctUctUct([1, 2, 3, 4])\n  [(1, 24), (10, 24), (24, 24)]\n  */\nconst sumprodUctUctUctUctUct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  let result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n    result.push([sum, product]);\n  }\n  return result;\n};\n\n/* Given a list of integers, return a list of tuples consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumprodUctUctUctUctUctUctUct([])\n  []\n  >>> sumprodUctUctUctUctUctUctUct([1, 2, 3, 4])\n  [(1, 24), (10, 24), (24, 24)]\n  */\nconst sumprodUctUctUctUctUctUct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  let result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n    result.push([sum, product]);\n  }\n  return result;\n};\n\n/* Given a list of integers, return a list of tuples consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumprodUctUctUctUctUctUctUctUctUct([])\n  []\n  >>> sumprodUctUctUctUctUctUctUctUctUct([1, 2, 3, 4])\n  [(1, 24), (10, 24), (24, 24)]\n  */\nconst sumprodUctUctUctUctUctUctUctUct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  let result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n    result.push([sum, product]);\n  }\n  return result;\n};\n\n/* Given a list of integers, return a list of tuples consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumprodUctUctUctUctUctUctUctUctUctUctUctUctUct([])\n  []\n  >>> sumprodUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUct", "passed": 0}
{"task_id": "JavaScript/80", "prompt": "/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHAppy(a) => false\n  isHAppy(aa) => false\n  isHAppy(abcd) => true\n  isHAppy(aabb) => false\n  isHAppy(adb) => true\n  isHAppy(xyy) => false\n  */\nconst isHAppy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHAppy", "gc": "<|endoftext|>/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHAppy(a) => false\n  isHAppy(aa) => false\n  isHAppy(abcd) => true\n  isHAppy(aabb) => false\n  isHAppy(adb) => true\n  isHAppy(xyy) => false\n  */\nconst isHAppy = (s) => {\n  const len = s.length;\n  const letters = s.split('');\n  let isHappy = true;\n  for (let i = 0; i < len - 1; i++) {\n    if (letters[i] === letters[i + 1]) {\n      isHappy = false;\n    }\n  }\n  return isHappy;\n};\n\n/*You are given a string s.\n  Your task is to check if the string is palindrome or not.\n  A string is palindrome if it reads the same backward as forward.\n  For example:\n  isPalindrome(a) => true\n  isPalindrome(aa) => false\n  isPalindrome(abcd) => false\n  isPalindrome(aabb) => true\n  isPalindrome(adb) => false\n  isPalindrome(xyy) => true\n  */\nconst isPalindrome = (s) => {\n  const len = s.length;\n  const letters = s.split('');\n  let isPalindrome = true;\n  for (let i = 0; i < len - 1; i++) {\n    if (letters[i] === letters[len - i - 1]) {\n      isPalindrome = false;\n    }\n  }\n  return isPalindrome;\n};\n\n/*You are given a string s.\n  Your task is to check if the string is palindrome or not.\n  A string is palindrome if it reads the same backward as forward.\n  For example:\n  isPalindrome(a) => true\n  isPalindrome(aa) => false\n  isPalindrome(abcd) => false\n  isPalindrome(aabb) => true\n  isPalindrome(adb) => false\n  isPalindrome(xyy) => true\n  */\nconst isPalindromeReverse = (s) => {\n  const len = s.length;\n  const letters = s.split('');\n  let isPalindrome = true;\n  for (let i = 0; i < len - 1; i++) {\n    if (letters[i] === letters[len - i - 1]) {\n      isPalindrome = false;\n    }\n  }\n  return isPalindrome;\n};\n\n/*You are given a string s.\n  Your task is to check if the string is palindrome or not.\n  A string is palindrome if it reads the same backward as forward.\n  For example:\n  isPalindrome(a) => true\n  isPalindrome(aa) => false\n  isPalindrome(abcd) => false\n  isPalindrome(aabb) => true\n  isPalindrome(adb) => false\n  isPalindrome(xyy) => true\n  */\nconst isPalindromeReversed = (s) => {\n  const len = s.length;\n  const letters = s.split('');\n  let isPalindrome = true;\n  for (let i = 0; i < len - 1; i++) {\n    if (letters[i] === letters[len - i - 1]) {\n      isPalindrome = false;\n    }\n  }\n  return isPalindrome;\n};\n\n/*You are given a string s.\n  Your task is to check if the string is palindrome or not.\n  A string is palindrome if it reads the same backward as forward.\n  For example:\n  isPalindrome(a) => true\n  isPalindrome(aa) => false\n  isPalindrome(abcd) => false\n  isPalindrome(aabb) => true\n  isPalindrome(adb) => false\n  isPalindrome(xyy) => true\n  */\nconst isPalindromeReversedReverse = (s) => {\n  const len = s.length;\n  const letters = s.split('');\n  let isPalindrome = true;\n  for (let i = 0; i < len - 1; i++) {\n    if (letters[i] === letters[len - i - 1]) {\n      isPalindrome = false;\n    }\n  }\n  return isPalindrome;\n};\n\n/*You are given a string s.\n  Your task is to check if the string is palindrome or not.\n  A string is palindrome if it reads the same backward as forward.\n  For example:\n  isPalindrome(a) => true\n  isPalindrome(aa) => false\n  isPalindrome(abcd) => false\n  isPalindrome(aabb) => true\n  isPalindrome(adb) => false\n  isPalindrome(xyy) => true\n  */\nconst isPalindromeReversedReversed = (s) => {\n  const len = s.length;\n  const letters = s.split('');\n  let isPalindrome = true;\n  for (let i = 0; i < len - 1; i++) {\n    if (letters[i] === letters[len - i - 1]) {\n      isPalindrome = false;\n    }\n  }\n  return isPalindrome;\n};\n\n/*You are given a string s.\n  Your task is to check if the string is palindrome or not.\n  A string is palindrome if it reads the same backward as forward.\n  For example:\n  isPalindrome(a) => true\n  isPalindrome(aa) => false\n  isPalindrome(abcd) => false\n  isPalindrome(aabb) => true\n  isPalindrome(adb) => false\n  isPalindrome(xyy) => true\n  */\nconst isPalindromeReversedReversedReverse = (s) => {\n  const len = s.length;\n  const letters = s.split('');\n  let isPalindrome = true;\n  for (let i = 0; i < len - 1; i++) {\n    if (letters[i] === letters[len - i - 1]) {\n      isPalindrome = false;\n    }\n  }\n  return isPalindrome;\n};\n\n/*You are given a string s.\n  Your task is to check if the string is palindrome or not.\n  A string is palindrome if it reads the same backward as forward.\n  For example:\n  isPalindrome(a) => true\n  isPalindrome(aa) => false\n  isPalindrome(abcd) => false\n  isPalindrome(aabb) => true\n  isPalindrome(adb) => false\n  isPalindrome(xyy) => true\n  */\nconst isPalindromeReversedReversedReversed = (s) => {\n  const len = s.length;\n  const letters = s.split('');\n  let isPalindrome = true;\n  for (let i = 0; i < len - 1; i++) {\n    if (letters[i] === letters[len - i - 1]) {\n      isPalindrome = false;\n    }\n  }\n  return isPalindrome;\n};\n\n/*You are given a string s.\n  Your task is to check if the string is palindrome or not.\n  A string is palindrome if it reads the same backward as forward.\n  For example:\n  isPalindrome(a) => true\n  isPalindrome(aa) => false\n  isPalindrome(abcd) => false\n  isPalindrome(aabb) => true\n  isPalindrome(adb) => false\n  isPalindrome(xyy) => true\n  */\nconst isPalindromeReversedReversedReversedReverse = (s) => {\n  const len = s.length;\n  const letters = s.split('');\n  let isPalindrome = true;\n  for (let i = 0; i < len - 1; i++) {\n    if (letters[i] === letters[len - i - 1]) {\n      isPalindrome = false;\n    }\n  }\n  return isPalindrome;\n};\n\n/*You are given a string s.\n  Your task is to check if the string is palindrome or not.", "passed": 0}
{"task_id": "JavaScript/81", "prompt": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numEricAlLetTergrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numEricAlLetTergrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numEricAlLetTergrade", "gc": "<|endoftext|>/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numEricAlLetTergrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numEricAlLetTergrade = (grades) => {\n  let letterGrades = [];\n  let numOfGrades = grades.length;\n  let numOfLetters = numOfGrades * 2;\n  let numOfLettersMinusOne = numOfLetters - 1;\n  let numOfLettersPlusOne = numOfLetters + 1;\n  let numOfLettersMinusOnePlusOne = numOfLettersMinusOne + 1;\n  let numOfLettersPlusOnePlusOne = numOfLettersPlusOne + 1;\n  let numOfLettersMinusOnePlusOnePlusOne = numOfLettersMinusOnePlusOne + 1;\n  let numOfLettersPlusOnePlusOnePlusOne = numOfLettersPlusOnePlusOne + 1;\n  let numOfLettersMinusOnePlusOnePlusOnePlusOne = numOfLettersMinusOnePlusOnePlusOne + 1;\n  let numOfLettersPlusOnePlusOnePlusOnePlusOne = numOfLettersPlusOnePlusOnePlusOnePlusOne + 1;\n  let numOfLettersMinusOnePlusOnePlusOnePlusOnePlusOne = numOfLettersMinusOnePlusOnePlusOnePlusOnePlusOne + 1;\n  let numOfLettersPlusOnePlusOnePlusOnePlusOnePlusOnePlusOne = numOfLettersPlusOnePlusOnePlusOnePlusOnePlusOnePlusOne + 1;\n  let numOfLettersMinusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOne = numOfLettersMinusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOne + 1;\n  let numOfLettersPlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOne = numOfLettersPlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOne", "passed": 0}
{"task_id": "JavaScript/82", "prompt": "/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  priMeLeNgth('Hello') == true\n  priMeLeNgth('abcdcba') == true\n  priMeLeNgth('kittens') == true\n  priMeLeNgth('orange') == false\n  */\nconst priMeLeNgth = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "priMeLeNgth", "gc": "<|endoftext|>/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  priMeLeNgth('Hello') == true\n  priMeLeNgth('abcdcba') == true\n  priMeLeNgth('kittens') == true\n  priMeLeNgth('orange') == false\n  */\nconst priMeLeNgth = (string) => {\n  let prime = true;\n  let length = string.length;\n  for(let i = 2; i < length; i++){\n    if(string[i] === '1'){\n      prime = false;\n      break;\n    }\n  }\n  return prime;\n}\n\n/*Write a function that takes a string and returns true if the string\n  length is divisible by 3 or false otherwise\n  Examples\n  divisibleBy3('Hello') == true\n  divisibleBy3('abcdcba') == true\n  divisibleBy3('kittens') == false\n  divisibleBy3('orange') == false\n  */\nconst divisibleBy3 = (string) => {\n  let prime = true;\n  let length = string.length;\n  for(let i = 2; i < length; i++){\n    if(string[i] === '3' && string[i + 1] === '3' && string[i + 2] === '3'){\n      prime = false;\n      break;\n    }\n  }\n  return prime;\n}\n\n/*Write a function that takes a string and returns true if the string\n  length is divisible by 5 or false otherwise\n  Examples\n  divisibleBy5('Hello') == true\n  divisibleBy5('abcdcba') == true\n  divisibleBy5('kittens') == false\n  divisibleBy5('orange') == false\n  */\nconst divisibleBy5 = (string) => {\n  let prime = true;\n  let length = string.length;\n  for(let i = 2; i < length; i++){\n    if(string[i] === '5' && string[i + 1] === '5' && string[i + 2] === '5' && string[i + 3] === '5'){\n      prime = false;\n      break;\n    }\n  }\n  return prime;\n}\n\n/*Write a function that takes a string and returns true if the string\n  length is divisible by 7 or false otherwise\n  Examples\n  divisibleBy7('Hello') == true\n  divisibleBy7('abcdcba') == true\n  divisibleBy7('kittens') == false\n  divisibleBy7('orange') == false\n  */\nconst divisibleBy7 = (string) => {\n  let prime = true;\n  let length = string.length;\n  for(let i = 2; i < length; i++){\n    if(string[i] === '7' && string[i + 1] === '7' && string[i + 2] === '7' && string[i + 3] === '7' && string[i + 4] === '7' && string[i + 5] === '7' && string[i + 6] === '7' && string[i + 7] === '7'){\n      prime = false;\n      break;\n    }\n  }\n  return prime;\n}\n\n/*Write a function that takes a string and returns true if the string\n  length is divisible by 9 or false otherwise\n  Examples\n  divisibleBy9('Hello') == true\n  divisibleBy9('abcdcba') == true\n  divisibleBy9('kittens') == false\n  divisibleBy9('orange') == false\n  */\nconst divisibleBy9 = (string) => {\n  let prime = true;\n  let length = string.length;\n  for(let i = 2; i < length; i++){\n    if(string[i] === '9' && string[i + 1] === '9' && string[i + 2] === '9' && string[i + 3] === '9' && string[i + 4] === '9' && string[i + 5] === '9' && string[i + 6] === '9' && string[i + 7] === '9' && string[i + 8] === '9' && string[i + 9] === '9'){\n      prime = false;\n      break;\n    }\n  }\n  return prime;\n}\n\n/*Write a function that takes a string and returns true if the string\n  length is divisible by 11 or false otherwise\n  Examples\n  divisibleBy11('Hello') == true\n  divisibleBy11('abcdcba') == true\n  divisibleBy11('kittens') == false\n  divisibleBy11('orange') == false\n  */\nconst divisibleBy11 = (string) => {\n  let prime = true;\n  let length = string.length;\n  for(let i = 2; i < length; i++){\n    if(string[i] === '11' && string[i + 1] === '11' && string[i + 2] === '11' && string[i + 3] === '11' && string[i + 4] === '11' && string[i + 5] === '11' && string[i + 6] === '11' && string[i + 7] === '11' && string[i + 8] === '11' && string[i + 9] === '11' && string[i + 10] === '11' && string[i + 11] === '11'){\n      prime = false;\n      break;\n    }\n  }\n  return prime;\n}\n\n/*Write a function that takes a string and returns true if the string\n  length is divisible by 13 or false otherwise\n  Examples\n  divisibleBy13('Hello') == true\n  divisibleBy13('abcdcba') == true\n  divisibleBy13('kittens') == false\n  divisibleBy13('orange') == false\n  */\nconst divisibleBy13 = (string) => {\n  let prime = true;\n  let length = string.length;\n  for(let i = 2; i < length; i++){\n    if(string[i] === '13' && string[i + 1] === '13' && string[i + 2] === '13' && string[i + 3] === '13' && string[i + 4] === '13' && string[i + 5] === '13' && string[i + 6] === '13' && string[i + 7] === '13' && string[i + 8] === '13' && string[i + 9] === '13' && string[i + 10] === '13' && string[i + 11] === '13' && string[i + 12] === '13' && string[i + 13] === '13'){\n      prime = false;\n      break;\n    }\n  }\n  return prime;\n}\n\n/*Write a function that takes a string and returns true if the string\n  length is divisible by 15 or false otherwise\n  Examples\n  divisibleBy15('Hello') == true\n  divisibleBy15('abcdcba') == true\n  divisibleBy15('kittens') == false\n  divisibleBy15('orange') == false\n  */\nconst divisibleBy15 = (string) => {\n  let prime = true;\n  let length = string.length;\n  for(let i = 2; i < length; i++){\n    if(string[i] === '15' && string[i + 1] === '15' && string[i + 2] === '15' && string[i + 3] === '15' && string[i + 4] === '15' && string[i + 5] === '15' && string[i + 6] === '15' && string[i + 7] === '15' && string[i + 8] === '15' && string[i + 9] === '15' && string[i + 10] === '15' && string[i + 11] === '15' && string[i + 12] === '15' && string[i + 13] === '15' && string[i + 14] === '15' && string[i + 15] === '15'){\n      prime = false;\n      break;\n    }\n  }\n  return prime;\n}\n\n/*Write a function that takes a string and returns true if the string\n  length is divisible by 17 or false otherwise\n  Examples\n  divisibleBy17('Hello') == true\n  divisibleBy17('abcdcba') == true\n  divisibleBy17('kittens') == false\n  divisibleBy17('orange') == false\n  */\nconst divisibleBy17 = (string) => {\n  let prime = true;\n  let length = string.length;\n  for(let i = 2; i < length; i++){\n    if(string[i] === '17' && string[i + 1] === '17' && string[i + 2] === '17' && string[i + 3] === '17' && string[i + 4] === '17' && string[i + 5] === '17' && string[i + 6] === '17' && string[i + 7] === '17' && string[i + 8] === '17' && string[i + 9] === '17' && string", "passed": 0}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst staRtsONeEndS = (n) => {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "staRtsONeEndS", "gc": "<|endoftext|>/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst staRtsONeEndS = (n) => {\n  let count = 0;\n  let i = 1;\n  let j = 1;\n  while (i <= n) {\n    if (n % 10 === 0) {\n      count += j;\n      j = 1;\n    }\n    i += 1;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst staRtsONeStartS = (n) => {\n  let count = 0;\n  let i = 1;\n  let j = 1;\n  while (i <= n) {\n    if (n % 10 === 1) {\n      count += j;\n      j = 1;\n    }\n    i += 1;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst staRtsONeEndN = (n) => {\n  let count = 0;\n  let i = 1;\n  let j = 1;\n  while (i <= n) {\n    if (n % 10 === 1) {\n      count += j;\n      j = 1;\n    }\n    i += 1;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst staRtsONeStartN = (n) => {\n  let count = 0;\n  let i = 1;\n  let j = 1;\n  while (i <= n) {\n    if (n % 10 === 1) {\n      count += j;\n      j = 1;\n    }\n    i += 1;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst staRtsONeEndM = (n) => {\n  let count = 0;\n  let i = 1;\n  let j = 1;\n  while (i <= n) {\n    if (n % 10 === 1) {\n      count += j;\n      j = 1;\n    }\n    i += 1;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst staRtsONeStartM = (n) => {\n  let count = 0;\n  let i = 1;\n  let j = 1;\n  while (i <= n) {\n    if (n % 10 === 1) {\n      count += j;\n      j = 1;\n    }\n    i += 1;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst staRtsONeEndL = (n) => {\n  let count = 0;\n  let i = 1;\n  let j = 1;\n  while (i <= n) {\n    if (n % 10 === 1) {\n      count += j;\n      j = 1;\n    }\n    i += 1;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst staRtsONeStartL = (n) => {\n  let count = 0;\n  let i = 1;\n  let j = 1;\n  while (i <= n) {\n    if (n % 10 === 1) {\n      count += j;\n      j = 1;\n    }\n    i += 1;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst staRtsONeEndC = (n) => {\n  let count = 0;\n  let i = 1;\n  let j = 1;\n  while (i <= n) {\n    if (n % 10 === 1) {\n      count += j;\n      j = 1;\n    }\n    i += 1;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst staRtsONeStartC = (n) => {\n  let count = 0;\n  let i = 1;\n  let j = 1;\n  while (i <= n) {\n    if (n % 10 === 1) {\n      count += j;\n      j = 1;\n    }\n    i += 1;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst staRtsONeEndZ = (n) => {\n  let count = 0;\n  let i = 1;\n  let j = 1;\n  while (i <= n) {\n    if (n % 10 === 1) {\n      count += j;\n      j = 1;\n    }\n    i += 1;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst staRtsONeStartZ = (n) => {\n  let count = 0;\n  let i = 1;\n  let j = 1;\n  while (i <= n) {\n    if (n % 10 === 1) {\n      count += j;\n      j = 1;\n    }\n    i += 1;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst staRtsONeEndV = (n) => {\n  let count = 0;\n  let i = 1;\n  let j = 1;\n  while (i <= n) {\n    if (n % 10 === 1) {\n      count += j;\n      j = 1;\n    }\n    i += 1;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst staRtsONeStartV = (n) => {\n  let count = 0;\n  let i = 1;\n  let j = 1;\n  while (i <= n) {\n    if (n % 10 === 1) {\n      count += j;\n      j = 1;\n    }\n    i += 1;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst staRtsONeEndX = (n) => {\n  let count = 0;\n  let i = 1;\n  let j = 1;\n  while (i <= n) {\n    if (n % 10 === 1) {\n      count += j;\n      j = 1;\n    }\n    i += 1;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst staRtsONeStartX = (n) => {\n  let count = 0;\n  let i = 1;\n  let j = 1;\n  while (i <= n) {\n    if (n % 10 === 1) {\n      count += j;\n      j = 1;\n    }\n    i += 1;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst staRtsONeEndCZ = (n) => {\n  let count = 0;\n  let i = 1;\n  let j = 1;\n  while (i <= n) {\n    if (n % 10 === 1) {\n      count += j;\n      j = 1;\n    }\n    i += 1;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst staRtsONeStartCZ = (n) => {\n  let count = 0;\n  let i = 1;\n  let j = 1;\n  while (i <= n) {\n    if (n % 10 === 1) {\n      count += j;\n      j = 1;\n    }\n    i += 1;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with ", "passed": 0}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solVe = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solVe", "gc": "<|endoftext|>/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solVe = (N) => {\n  let sum = 0;\n  let binary = \"\";\n  for (let i = 0; i <= N; i++) {\n    binary = binary + binary(i);\n    sum = sum + parseInt(binary.charAt(0), 2);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the total sum of its digits in decimal.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of decimal number\n  */\nconst solDe = (N) => {\n  let sum = 0;\n  let decimal = \"\";\n  for (let i = 0; i <= N; i++) {\n    decimal = decimal + decimal(i);\n    sum = sum + parseInt(decimal.charAt(0), 10);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the total sum of its digits in hexadecimal.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of hexadecimal number\n  */\nconst solHex = (N) => {\n  let sum = 0;\n  let hex = \"\";\n  for (let i = 0; i <= N; i++) {\n    hex = hex + hex(i);\n    sum = sum + parseInt(hex.charAt(0), 16);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the total sum of its digits in octal.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of octal number\n  */\nconst solOct = (N) => {\n  let sum = 0;\n  let oct = \"\";\n  for (let i = 0; i <= N; i++) {\n    oct = oct + oct(i);\n    sum = sum + parseInt(oct.charAt(0), 8);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the total sum of its digits in hexadecimal.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of hexadecimal number\n  */\nconst solHexa = (N) => {\n  let sum = 0;\n  let hexa = \"\";\n  for (let i = 0; i <= N; i++) {\n    hexa = hexa + hexa(i);\n    sum = sum + parseInt(hexa.charAt(0), 16);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the total sum of its digits in octal.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of octal number\n  */\nconst solOcta = (N) => {\n  let sum = 0;\n  let octa = \"\";\n  for (let i = 0; i <= N; i++) {\n    octa = octa + octa(i);\n    sum = sum + parseInt(octa.charAt(0), 8);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the total sum of its digits in hexadecimal.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of hexadecimal number\n  */\nconst solHexadecimal = (N) => {\n  let sum = 0;\n  let hexadecimal = \"\";\n  for (let i = 0; i <= N; i++) {\n    hexadecimal = hexadecimal + hexadecimal(i);\n    sum = sum + parseInt(hexadecimal.charAt(0), 16);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the total sum of its digits in decimal.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of decimal number\n  */\nconst solDecimal = (N) => {\n  let sum = 0;\n  let decimal = \"\";\n  for (let i = 0; i <= N; i++) {\n    decimal = decimal + decimal(i);\n    sum = sum + parseInt(decimal.charAt(0), 10);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the total sum of its digits in hexadecimal.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of hexadecimal number\n  */\nconst solHexadecimaldecimal = (N) => {\n  let sum = 0;\n  let hexadecimal = \"\";\n  for (let i = 0; i <= N; i++) {\n    hexadecimal = hexadecimal + hexadecimal(i);\n    sum = sum + parseInt(hexadecimal.charAt(0), 16);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n", "passed": 0}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "gc": "<|endoftext|>/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let even = 0;\n  let odd = lst.length;\n  let evenOdd = even;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      even++;\n    } else {\n      odd--;\n    }\n  }\n  return even + odd;\n};\n\n/*Given a non-empty list of integers lst. remove the even elements that are at odd indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 2, 6, 7]\n  */\nconst remove = (lst) => {\n  let even = 0;\n  let odd = lst.length;\n  let evenOdd = even;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      even++;\n    } else {\n      odd--;\n    }\n  }\n  return lst.filter((item, index) => {\n    if (index % 2 === 0) {\n      return item % 2 === 0;\n    } else {\n      return item % 2!== 0;\n    }\n  });\n};\n\n/*Given a non-empty list of integers lst. return the sum of the even elements that are at odd indices..\n\n\n  Examples:\n      sum([4, 2, 6, 7]) ==> 6\n  */\nconst sum = (lst) => {\n  let even = 0;\n  let odd = lst.length;\n  let evenOdd = even;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      even++;\n    } else {\n      odd--;\n    }\n  }\n  return even + odd;\n};\n\n/*Given a non-empty list of integers lst. return the difference of the even elements that are at odd indices..\n\n\n  Examples:\n      diff([4, 2, 6, 7]) ==> 2\n  */\nconst diff = (lst) => {\n  let even = 0;\n  let odd = lst.length;\n  let evenOdd = even;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      even++;\n    } else {\n      odd--;\n    }\n  }\n  return even - odd;\n};\n\n/*Given a non-empty list of integers lst. return the product of the even elements that are at odd indices..\n\n\n  Examples:\n      prod([4, 2, 6, 7]) ==> 24\n  */\nconst prod = (lst) => {\n  let even = 0;\n  let odd = lst.length;\n  let evenOdd = even;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      even++;\n    } else {\n      odd--;\n    }\n  }\n  return even * odd;\n};\n\n/*Given a non-empty list of integers lst. return the product of the odd elements that are at even indices..\n\n\n  Examples:\n      prodOdd([4, 2, 6, 7]) ==> 24\n  */\nconst prodOdd = (lst) => {\n  let even = 0;\n  let odd = lst.length;\n  let evenOdd = even;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      evenOdd++;\n    } else {\n      odd--;\n    }\n  }\n  return evenOdd * odd;\n};\n\n/*Given a non-empty list of integers lst. return the product of the even elements that are at odd indices..\n\n\n  Examples:\n      prodEven([4, 2, 6, 7]) ==> 24\n  */\nconst prodEven = (lst) => {\n  let even = 0;\n  let odd = lst.length;\n  let evenOdd = even;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      even++;\n    } else {\n      odd--;\n    }\n  }\n  return even * odd;\n};\n\n/*Given a non-empty list of integers lst. return the product of the odd elements that are at even indices..\n\n\n  Examples:\n      prodOddEven([4, 2, 6, 7]) ==> 24\n  */\nconst prodOddEven = (lst) => {\n  let even = 0;\n  let odd = lst.length;\n  let evenOdd = even;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      evenOdd++;\n    } else {\n      odd--;\n    }\n  }\n  return evenOdd * odd;\n};\n\n/*Given a non-empty list of integers lst. return the product of the even elements that are at odd indices..\n\n\n  Examples:\n      prodEvenOdd([4, 2, 6, 7]) ==> 24\n  */\nconst prodEvenOdd = (lst) => {\n  let even = 0;\n  let odd = lst.length;\n  let evenOdd = even;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      evenOdd++;\n    } else {\n      odd--;\n    }\n  }\n  return evenOdd * odd;\n};\n\n/*Given a non-empty list of integers lst. return the product of the odd elements that are at even indices..\n\n\n  Examples:\n      prodOddEvenOdd([4, 2, 6, 7]) ==> 24\n  */\nconst prodOddEvenOdd = (lst) => {\n  let even = 0;\n  let odd = lst.length;\n  let evenOdd = even;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      evenOdd++;\n    } else {\n      odd--;\n    }\n  }\n  return evenOdd * odd;\n};\n\n/*Given a non-empty list of integers lst. return the product of the odd elements that are at odd indices..\n\n\n  Examples:\n      prodEvenOddOddEven([4, 2, 6, 7]) ==> 24\n  */\nconst prodEvenOddOddEven = (lst) => {\n  let even = 0;\n  let odd = lst.length;\n  let evenOdd = even;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      evenOdd++;\n    } else {\n      odd--;\n    }\n  }\n  return evenOdd * odd;\n};\n\n/*Given a non-empty list of integers lst. return the product of the even elements that are at odd indices..\n\n\n  Examples:\n      prodEvenOddOddEvenOdd([4, 2, 6, 7]) ==> 24\n  */\nconst prodEvenOddOddEvenOdd = (lst) => {\n  let even = 0;\n  let odd = lst.length;\n  let evenOdd = even;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      evenOdd++;\n    } else {\n      odd--;\n    }\n  }\n  return evenOdd * odd;\n};\n\n/*Given a non-empty list of integers lst. return the product of the odd elements that are at even indices..\n\n\n  Examples:\n      prodEvenOddOddEvenOddEvenOdd([4, 2, 6, 7]) ==> 24\n  */\nconst prodEvenOddOddEvenOddEvenOdd = (lst) => {\n  let even = 0;\n  let odd = lst.length;\n  let evenOdd = even;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      evenOdd++;\n    } else {\n      odd--;\n    }\n  }\n  return evenOdd * odd;\n};\n\n/*Given a non-empty list of integers lst. return the product of the odd elements that are at odd indices..\n\n\n  Examples:\n      prodEvenOddOddEvenOddEvenOddEvenOdd([4, 2, 6, 7]) ==> 24\n  */\nconst prodEvenOddOddEvenOddEvenOddEvenOdd = (lst) => {\n  let even = 0;\n  let odd = lst.length;\n  let evenOdd = even;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      evenOdd++;\n    } else {\n      odd--;\n    }\n  }\n  return evenOdd * odd;\n};\n\n/*Given a non-empty list of integers lst. return the product of the ", "passed": 0}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antIShuFfle('Hi') returns 'Hi'\n  antIShuFfle('hello') returns 'ehllo'\n  antIShuFfle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antIShuFfle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antIShuFfle", "gc": "<|endoftext|>/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antIShuFfle('Hi') returns 'Hi'\n  antIShuFfle('hello') returns 'ehllo'\n  antIShuFfle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antIShuFfle = (s) => {\n  let newString = '';\n  let words = s.split(' ');\n  let newWord = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let temp = '';\n  let tempWord = '';\n  let tempWordWord = '';\n  let tempWordWordWord = '';\n  let tempWordWordWordWord = '';\n  let tempWordWordWordWordWord = '';\n  let tempWordWordWordWordWordWord = '';\n  let tempWordWordWordWordWordWordWord = '';\n  let tempWordWordWordWordWordWordWordWord = '';\n  let tempWordWordWordWordWordWordWordWordWordWord = '';\n  let tempWordWordWordWordWordWordWordWordWordWordWord = '';\n  let tempWordWordWordWordWordWordWordWordWordWordWordWord = '';\n  let tempWordWordWordWordWordWordWordWordWordWordWordWordWordWord = '';\n  let tempWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWord", "passed": 0}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getrow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getrow([], 1) == []\n  getrow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getrow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getrow", "gc": "<|endoftext|>/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getrow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getrow([], 1) == []\n  getrow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getrow = (lst, x) => {\n  const row = []\n  let i = 0\n  let j = 0\n  while (i < lst.length) {\n    if (lst[i][j] === x) {\n      row.push([i, j])\n      i++\n      j++\n    } else {\n      i++\n    }\n  }\n  row.sort((a, b) => a - b)\n  return row\n}\n\n/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getcol([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 1), (1, 3), (2, 4), (2, 0), (3, 5), (3, 0)]\n  getcol([], 1) == []\n  getcol([[], [1], [1, 2, 3]], 3) == [(1, 3)]\n  */\nconst getcol = (lst, x) => {\n  const col = []\n  let i = 0\n  let j = 0\n  while (i < lst.length) {\n    if (lst[j][i] === x) {\n      col.push([i, j])\n      i++\n      j++\n    } else {\n      i++\n    }\n  }\n  col.sort((a, b) => b[1] - a[1])\n  return col\n}\n\n/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getrowcol([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (2, 4), (3, 5), (4, 1), (5, 0), (6, 1)]\n  getrowcol([], 1) == []\n  getrowcol([[], [1], [1, 2, 3]], 3) == [(0, 3)]\n  */\nconst getrowcol = (lst, x) => {\n  const rowcol = []\n  let i = 0\n  let j = 0\n  while (i < lst.length) {\n    if (lst[i][j] === x) {\n      rowcol.push([i, j])\n      i++\n      j++\n    } else {\n      i++\n    }\n  }\n  rowcol.sort((a, b) => b[1] - a[1])\n  return rowcol\n}\n\n/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getrowcol([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (2, 4), (3, 5), (4, 1), (5, 0), (6, 1)]\n  getrowcol([], 1) == []\n  getrowcol([[], [1], [1, 2, 3]], 3) == [(0, 3)]\n  */\nconst getrowcol = (lst, x) => {\n  const rowcol = []\n  let i = 0\n  let j = 0\n  while (i < lst.length) {\n    if (lst[i][j] === x) {\n      rowcol.push([i, j])\n      i++\n      j++\n    } else {\n      i++\n    }\n  }\n  rowcol.sort((a, b) => b[1] - a[1])\n  return rowcol\n}\n\n/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getrowcol([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (2, 4), (3, 5), (4, 1), (5, 0), (6, 1)]\n  getrowcol([], 1) == []\n  getrowcol([[], [1], [1, 2, 3]], 3) == [(0, 3)]\n  */\nconst getrowcol = (lst, x) => {\n  const rowcol = []\n  let i = 0\n  let j = 0\n  while (i < lst.length) {\n    if (lst[i][j] === x) {\n      rowcol.push([i, j])\n      i++\n      j++\n    } else {\n      i++\n    }\n  }\n  rowcol.sort((a, b) => b[1] - a[1])\n  return rowcol\n}\n\n/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getrowcol([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (2, 4), (3, 5), (4, 1), (5, 0), (6, 1)]\n  getrowcol([], 1) == []\n  getrowcol([[], [1], [1, 2, 3]], 3) == [(0, 3)]\n  */\nconst getrowcol = (lst, x) => {\n  const rowcol = []\n  let i = 0\n  let j = 0\n  while (i < lst.length) {\n    if (lst[i][j] === x) {\n      rowcol.push([i, j])\n      i++\n      j++\n    } else {\n      i++\n    }\n  }\n  rowcol.sort((a, b) => b[1] - a[1])\n  return rowcol\n}\n\n/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.", "passed": 0}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sorTArrAy([]) => []\n  * sorTArrAy([5]) => [5]\n  * sorTArrAy([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sorTArrAy([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sorTArrAy = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sorTArrAy", "gc": "<|endoftext|>/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sorTArrAy([]) => []\n  * sorTArrAy([5]) => [5]\n  * sorTArrAy([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sorTArrAy([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sorTArrAy = (array) => {\n  let result = [];\n  let sum = 0;\n  let index = 0;\n  let temp;\n  while (index < array.length) {\n    temp = array[index];\n    sum += temp;\n    if (sum % 2 === 0) {\n      result.push(temp);\n      sum = 0;\n    } else {\n      index++;\n    }\n  }\n  return result;\n};\n\n/*\n  Given an array of non-negative integers, return an array of the same length as given array,\n  but in ascending order.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sorTArrAyAsc([]) => []\n  * sorTArrAyAsc([5]) => [5]\n  * sorTArrAyAsc([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sorTArrAyAsc([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sorTArrAyAsc = (array) => {\n  let result = [];\n  let sum = 0;\n  let index = 0;\n  let temp;\n  while (index < array.length) {\n    temp = array[index];\n    sum += temp;\n    if (sum % 2 === 0) {\n      result.push(temp);\n      sum = 0;\n    } else {\n      index++;\n    }\n  }\n  return result.sort((a, b) => a - b);\n};\n\n/*\n  Given an array of non-negative integers, return an array of the same length as given array,\n  but in descending order.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sorTArrAyDesc([]) => []\n  * sorTArrAyDesc([5]) => [5]\n  * sorTArrAyDesc([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sorTArrAyDesc([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sorTArrAyDesc = (array) => {\n  let result = [];\n  let sum = 0;\n  let index = 0;\n  let temp;\n  while (index < array.length) {\n    temp = array[index];\n    sum += temp;\n    if (sum % 2 === 0) {\n      result.push(temp);\n      sum = 0;\n    } else {\n      index++;\n    }\n  }\n  return result.sort((a, b) => b - a);\n};\n\n/*\n  Given an array of non-negative integers, return an array of the same length as given array,\n  but in ascending order and in descending order.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sorTArrAyDescAsc([]) => []\n  * sorTArrAyDescAsc([5]) => [5]\n  * sorTArrAyDescAsc([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sorTArrAyDescAsc([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sorTArrAyDescAsc = (array) => {\n  let result = [];\n  let sum = 0;\n  let index = 0;\n  let temp;\n  while (index < array.length) {\n    temp = array[index];\n    sum += temp;\n    if (sum % 2 === 0) {\n      result.push(temp);\n      sum = 0;\n    } else {\n      index++;\n    }\n  }\n  return result.sort((a, b) => b - a);\n};\n\n/*\n  Given an array of non-negative integers, return an array of the same length as given array,\n  but in ascending order and in descending order and in ascending order.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sorTArrAyDescAscAsc([]) => []\n  * sorTArrAyDescAscAsc([5]) => [5]\n  * sorTArrAyDescAscAsc([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sorTArrAyDescAscAsc([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sorTArrAyDescAscAsc = (array) => {\n  let result = [];\n  let sum = 0;\n  let index = 0;\n  let temp;\n  while (index < array.length) {\n    temp = array[index];\n    sum += temp;\n    if (sum % 2 === 0) {\n      result.push(temp);\n      sum = 0;\n    } else {\n      index++;\n    }\n  }\n  return result.sort((a, b) => b - a);\n};\n\n/*\n  Given an array of non-negative integers, return an array of the same length as given array,\n  but in ascending order and in descending order and in ascending order and in descending order.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sorTArrAyDescAscAscAsc([]) => []\n  * sorTArrAyDescAscAscAsc([5]) => [5]\n  * sorTArrAyDescAscAscAsc([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sorTArrAyDescAscAscAsc([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sorTArrAyDescAscAscAsc = (array) => {\n  let result = [];\n  let sum = 0;\n  let index = 0;\n  let temp;\n  while (index < array.length) {\n    temp = array[index];\n    sum += temp;\n    if (sum % 2 === 0) {\n      result.push(temp);\n      sum = 0;\n    } else {\n      index++;\n    }\n  }\n  return result.sort((a, b) => b - a);\n};\n\n/*\n  Given an array of non-negative integers, return an array of the same length as given array,\n  but in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sorTArrAyDescAscAscAscAsc([]) => []\n  * sorTArrAyDescAscAscAscAsc([5]) => [5]\n  * sorTArrAyDescAscAscAscAsc([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sorTArrAyDescAscAscAscAsc([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sorTArrAyDescAscAscAscAsc = (array) => {\n  let result = [];\n  let sum = 0;\n  let index = 0;\n  let temp;\n  while (index < array.length) {\n    temp = array[index];\n    sum += temp;\n    if (sum % 2 === 0) {\n      result.push(temp);\n      sum = 0;\n    } else {\n      index++;\n    }\n  }\n  return result.sort((a, b) => b - a);\n};\n\n/*\n  Given an array of non-negative integers, return an array of the same length as given array,\n  but in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order.\n\n  Note:\n  * don't change the given array.\n\n  Examples:", "passed": 0}
{"task_id": "JavaScript/89", "prompt": "/*Create a function encRypt that takes a string as an argument and\n  returns a string encRypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encRypt('hi') returns 'lm'\n  encRypt('asdfghjkl') returns 'ewhjklnop'\n  encRypt('gf') returns 'kj'\n  encRypt('et') returns 'ix'\n  */\nconst encRypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encRypt", "gc": "<|endoftext|>/*Create a function encRypt that takes a string as an argument and\n  returns a string encRypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encRypt('hi') returns 'lm'\n  encRypt('asdfghjkl') returns 'ewhjklnop'\n  encRypt('gf') returns 'kj'\n  encRypt('et') returns 'ix'\n  */\nconst encRypt = (s) => {\n  let rotated = '';\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let len = alphabet.length;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = s.length;\n  let rotatedLen = 0;\n  let rotatedChar = '';\n  \n  while(i < l) {\n    j = i;\n    k = j;\n    \n    while(j < l) {\n      rotatedChar = alphabet[rotatedLen];\n      rotatedLen += 2;\n      rotated += rotatedChar;\n      j += 1;\n    }\n    \n    i += 1;\n  }\n  \n  return rotated;\n}\n\n/*Create a function encRyptedString that takes a string as an argument and\n  returns a string encRypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encRyptedString('hi') returns 'lm'\n  encRyptedString('asdfghjkl') returns 'ewhjklnop'\n  encRyptedString('gf') returns 'kj'\n  encRyptedString('et') returns 'ix'\n  */\nconst encRyptedString = (s) => {\n  let rotated = '';\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let len = alphabet.length;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = s.length;\n  let rotatedLen = 0;\n  let rotatedChar = '';\n  \n  while(i < l) {\n    j = i;\n    k = j;\n    \n    while(j < l) {\n      rotatedChar = alphabet[rotatedLen];\n      rotatedLen += 2;\n      rotated += rotatedChar;\n      j += 1;\n    }\n    \n    i += 1;\n  }\n  \n  return rotated;\n}\n\n/*Create a function encRyptedString that takes a string as an argument and\n  returns a string encRypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encRyptedString('hi') returns 'lm'\n  encRyptedString('asdfghjkl') returns 'ewhjklnop'\n  encRyptedString('gf') returns 'kj'\n  encRyptedString('et') returns 'ix'\n  */\nconst encRyptedString = (s) => {\n  let rotated = '';\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let len = alphabet.length;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = s.length;\n  let rotatedLen = 0;\n  let rotatedChar = '';\n  \n  while(i < l) {\n    j = i;\n    k = j;\n    \n    while(j < l) {\n      rotatedChar = alphabet[rotatedLen];\n      rotatedLen += 2;\n      rotated += rotatedChar;\n      j += 1;\n    }\n    \n    i += 1;\n  }\n  \n  return rotated;\n}\n\n/*Create a function encRyptedString that takes a string as an argument and\n  returns a string encRypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encRyptedString('hi') returns 'lm'\n  encRyptedString('asdfghjkl') returns 'ewhjklnop'\n  encRyptedString('gf') returns 'kj'\n  encRyptedString('et') returns 'ix'\n  */\nconst encRyptedString = (s) => {\n  let rotated = '';\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let len = alphabet.length;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = s.length;\n  let rotatedLen = 0;\n  let rotatedChar = '';\n  \n  while(i < l) {\n    j = i;\n    k = j;\n    \n    while(j < l) {\n      rotatedChar = alphabet[rotatedLen];\n      rotatedLen += 2;\n      rotated += rotatedChar;\n      j += 1;\n    }\n    \n    i += 1;\n  }\n  \n  return rotated;\n}\n\n/*Create a function encRyptedString that takes a string as an argument and\n  returns a string encRypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encRyptedString('hi') returns 'lm'\n  encRyptedString('asdfghjkl') returns 'ewhjklnop'\n  encRyptedString('gf') returns 'kj'\n  encRyptedString('et') returns 'ix'\n  */\nconst encRyptedString = (s) => {\n  let rotated = '';\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let len = alphabet.length;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = s.length;\n  let rotatedLen = 0;\n  let rotatedChar = '';\n  \n  while(i < l) {\n    j = i;\n    k = j;\n    \n    while(j < l) {\n      rotatedChar = alphabet[rotatedLen];\n      rotatedLen += 2;\n      rotated += rotatedChar;\n      j += 1;\n    }\n    \n    i += 1;\n  }\n  \n  return rotated;\n}\n\n/*Create a function encRyptedString that takes a string as an argument and\n  returns a string encRypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encRyptedString('hi') returns 'lm'\n  encRyptedString('asdfghjkl') returns 'ewhjklnop'\n  encRyptedString('gf') returns 'kj'\n  encRyptedString('et') returns 'ix'\n  */\nconst encRyptedString = (s) => {\n  let rotated = '';\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let len = alphabet.length;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = s.length;\n  let rotatedLen = 0;\n  let rotatedChar = '';\n  \n  while(i < l) {\n    j = i;\n    k = j;\n    \n    while(j < l) {\n      rotatedChar = alphabet[rotatedLen];\n      rotatedLen += 2;\n      rot", "passed": 0}
{"task_id": "JavaScript/9", "prompt": "/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rolLingmax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rolLingmax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rolLingmax", "gc": "<|endoftext|>/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rolLingmax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rolLingmax = (numbers) => {\n  let max = 0;\n  let maxIndex = 0;\n  let maxValue = 0;\n  let currentIndex = 0;\n  let currentValue = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    currentValue = numbers[i];\n    if (currentValue > maxValue) {\n      max = currentValue;\n      maxIndex = i;\n      maxValue = currentValue;\n    }\n  }\n  return [maxValue, maxIndex];\n};\n\n/* From a given list of integers, generate a list of rolling minimum element found until given moment\n  in the sequence.\n  >>> rolLingmin([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 4, 2, 3]\n  */\nconst rolLingmin = (numbers) => {\n  let min = 0;\n  let minIndex = 0;\n  let minValue = 0;\n  let currentIndex = 0;\n  let currentValue = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    currentValue = numbers[i];\n    if (currentValue < minValue) {\n      min = currentValue;\n      minIndex = i;\n      minValue = currentValue;\n    }\n  }\n  return [min, minIndex];\n};\n\n/* Given a list of integers, generate a list of rolling mean element found until given moment\n  in the sequence.\n  >>> rolLingmean([1, 2, 3, 2, 3, 4, 2])\n  [1.666666666666666, 2.666666666666666, 3.666666666666666, 4.666666666666666, 5.666666666666666, 6.666666666666666, 7.666666666666666, 8.666666666666666, 9.666666666666666]\n  */\nconst rolLingmean = (numbers) => {\n  let mean = 0;\n  let meanIndex = 0;\n  let meanValue = 0;\n  let currentIndex = 0;\n  let currentValue = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    currentValue = numbers[i];\n    meanValue += currentValue;\n    meanIndex += 1;\n  }\n  meanValue /= meanIndex;\n  return [meanValue, meanIndex];\n};\n\n/* Given a list of integers, generate a list of rolling standard deviation element found until given moment\n  in the sequence.\n  >>> rolLingstd([1, 2, 3, 2, 3, 4, 2])\n  [1.666666666666666, 2.666666666666666, 3.666666666666666, 4.666666666666666, 5.666666666666666, 6.666666666666666, 7.666666666666666, 8.666666666666666, 9.666666666666666]\n  */\nconst rolLingstd = (numbers) => {\n  let std = 0;\n  let stdIndex = 0;\n  let stdValue = 0;\n  let currentIndex = 0;\n  let currentValue = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    currentValue = numbers[i];\n    stdValue += Math.pow(currentValue - meanValue, 2);\n    stdIndex += 1;\n  }\n  stdValue /= stdIndex;\n  return [stdValue, stdIndex];\n};\n\n/* Given a list of integers, generate a list of rolling variance element found until given moment\n  in the sequence.\n  >>> rolLingvar([1, 2, 3, 2, 3, 4, 2])\n  [1.666666666666666, 2.666666666666666, 3.666666666666666, 4.666666666666666, 5.666666666666666, 6.666666666666666, 7.666666666666666, 8.666666666666666, 9.666666666666666]\n  */\nconst rolLingvar = (numbers) => {\n  let var = 0;\n  let varIndex = 0;\n  let varValue = 0;\n  let currentIndex = 0;\n  let currentValue = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    currentValue = numbers[i];\n    varValue += Math.pow(currentValue - meanValue, 2);\n    varIndex += 1;\n  }\n  varValue /= varIndex;\n  return [varValue, varIndex];\n};\n\n/* Given a list of integers, generate a list of rolling median element found until given moment\n  in the sequence.\n  >>> rolLingmedian([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 4, 2, 3]\n  */\nconst rolLingmedian = (numbers) => {\n  let median = 0;\n  let medianIndex = 0;\n  let medianValue = 0;\n  let currentIndex = 0;\n  let currentValue = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    currentValue = numbers[i];\n    if (currentValue > medianValue) {\n      median = currentValue;\n      medianIndex = i;\n      medianValue = currentValue;\n    }\n  }\n  return [median, medianIndex];\n};\n\n/* Given a list of integers, generate a list of rolling mode element found until given moment\n  in the sequence.\n  >>> rolLingmode([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rolLingmode = (numbers) => {\n  let mode = 0;\n  let modeIndex = 0;\n  let modeValue = 0;\n  let currentIndex = 0;\n  let currentValue = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    currentValue = numbers[i];\n    if (currentValue > modeValue) {\n      mode = currentValue;\n      modeIndex = i;\n      modeValue = currentValue;\n    }\n  }\n  return [mode, modeIndex];\n};\n\n/* Given a list of integers, generate a list of rolling min element found until given moment\n  in the sequence.\n  >>> rolLingmin([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 4, 2, 3]\n  */\nconst rolLingmin = (numbers) => {\n  let min = 0;\n  let minIndex = 0;\n  let minValue = 0;\n  let currentIndex = 0;\n  let currentValue = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    currentValue = numbers[i];\n    if (currentValue < minValue) {\n      min = currentValue;\n      minIndex = i;\n      minValue = currentValue;\n    }\n  }\n  return [min, minIndex];\n};\n\n/* Given a list of integers, generate a list of rolling max element found until given moment\n  in the sequence.\n  >>> rolLingmax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rolLingmax = (numbers) => {\n  let max = 0;\n  let maxIndex = 0;\n  let maxValue = 0;\n  let currentIndex = 0;\n  let currentValue = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    currentValue = numbers[i];\n    if (currentValue > maxValue) {\n      max = currentValue;\n      maxIndex = i;\n      maxValue = currentValue;\n    }\n  }\n  return [max, maxIndex];\n};\n\n/* Given a list of integers, generate a list of rolling min element found until given moment\n  in the sequence.\n  >>> rolLingmin([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 4, 2, 3]\n  */\nconst rolLingmin = (numbers) => {\n  let min = 0;\n  let minIndex = 0;\n  let minValue = 0;\n  let currentIndex = 0;\n  let currentValue = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    currentValue = numbers[i];\n    if (currentValue < minValue) {\n      min = currentValue;\n      minIndex = i;\n      minValue = currentValue;\n    }\n  }\n  return [min, minIndex];\n};\n\n/* Given a list of integers, generate a list of rolling mean element found until given moment\n  in the sequence.\n  >>> rolLingmean([1, 2, 3, 2, 3, 4, 2])\n  [1.666666666666666, 2.666666666666666, 3.666666666666666, 4.666666666666666, 5.666666666666666, 6.666666666666666, 7.666666666666666, 8.666666666666666, 9.666666666666666]\n  */\nconst rolLingmean = (numbers) => {\n  let mean = 0;\n  let meanIndex = 0;\n  let meanValue = 0;\n  let currentIndex = 0;\n  let currentValue = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    currentValue = numbers[i];\n    meanValue += currentValue;\n    meanIndex += 1;\n  }\n  meanValue /= meanIndex;\n  return [meanValue, meanIndex];\n};\n\n/* Given a list of integers, generate a list of rolling standard deviation element found until given moment\n  in the sequence.\n  >>> rolLingstd([1, 2, 3, 2, 3, 4, 2])\n  [1.666666666666666, ", "passed": 0}
{"task_id": "JavaScript/90", "prompt": "/*\n  You are given a list of integers.\n  Write a function nexTSmaLlest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nexTSmaLlest([1, 2, 3, 4, 5]) == 2\n  nexTSmaLlest([5, 1, 4, 3, 2]) == 2\n  nexTSmaLlest([]) == null\n  nexTSmaLlest([1, 1]) == null\n  */\nconst nexTSmaLlest = (lst) => {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nexTSmaLlest", "gc": "<|endoftext|>/*\n  You are given a list of integers.\n  Write a function nexTSmaLlest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nexTSmaLlest([1, 2, 3, 4, 5]) == 2\n  nexTSmaLlest([5, 1, 4, 3, 2]) == 2\n  nexTSmaLlest([]) == null\n  nexTSmaLlest([1, 1]) == null\n  */\nconst nexTSmaLlest = (lst) => {\n  let minLlest = lst[0];\n  let minIndex = lst.findIndex(x => x < minLlest);\n  if (minIndex === -1) {\n    return null;\n  }\n  minLlest = lst[minIndex];\n  minIndex = lst.findIndex(x => x > minLlest);\n  if (minIndex === -1) {\n    return null;\n  }\n  return lst[minIndex];\n};\n\n/*\n  You are given a list of integers.\n  Write a function nexTSmaLlest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nexTSmaLlest([1, 2, 3, 4, 5]) == 3\n  nexTSmaLlest([5, 1, 4, 3, 2]) == 3\n  nexTSmaLlest([]) == null\n  nexTSmaLlest([1, 1]) == null\n  */\nconst nexTSmaLlest = (lst) => {\n  let minLlest = lst[0];\n  let minIndex = lst.findIndex(x => x < minLlest);\n  if (minIndex === -1) {\n    return null;\n  }\n  minLlest = lst[minIndex];\n  minIndex = lst.findIndex(x => x > minLlest);\n  if (minIndex === -1) {\n    return null;\n  }\n  return lst[minIndex];\n};\n\n/*\n  You are given a list of integers.\n  Write a function nexTSmaLlest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nexTSmaLlest([1, 2, 3, 4, 5]) == 4\n  nexTSmaLlest([5, 1, 4, 3, 2]) == 4\n  nexTSmaLlest([]) == null\n  nexTSmaLlest([1, 1]) == null\n  */\nconst nexTSmaLlest = (lst) => {\n  let minLlest = lst[0];\n  let minIndex = lst.findIndex(x => x < minLlest);\n  if (minIndex === -1) {\n    return null;\n  }\n  minLlest = lst[minIndex];\n  minIndex = lst.findIndex(x => x > minLlest);\n  if (minIndex === -1) {\n    return null;\n  }\n  return lst[minIndex];\n};\n\n/*\n  You are given a list of integers.\n  Write a function nexTSmaLlest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nexTSmaLlest([1, 2, 3, 4, 5]) == 5\n  nexTSmaLlest([5, 1, 4, 3, 2]) == 5\n  nexTSmaLlest([]) == null\n  nexTSmaLlest([1, 1]) == null\n  */\nconst nexTSmaLlest = (lst) => {\n  let minLlest = lst[0];\n  let minIndex = lst.findIndex(x => x < minLlest);\n  if (minIndex === -1) {\n    return null;\n  }\n  minLlest = lst[minIndex];\n  minIndex = lst.findIndex(x => x > minLlest);\n  if (minIndex === -1) {\n    return null;\n  }\n  return lst[minIndex];\n};\n\n/*\n  You are given a list of integers.\n  Write a function nexTSmaLlest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nexTSmaLlest([1, 2, 3, 4, 5]) == 6\n  nexTSmaLlest([5, 1, 4, 3, 2]) == 6\n  nexTSmaLlest([]) == null\n  nexTSmaLlest([1, 1]) == null\n  */\nconst nexTSmaLlest = (lst) => {\n  let minLlest = lst[0];\n  let minIndex = lst.findIndex(x => x < minLlest);\n  if (minIndex === -1) {\n    return null;\n  }\n  minLlest = lst[minIndex];\n  minIndex = lst.findIndex(x => x > minLlest);\n  if (minIndex === -1) {\n    return null;\n  }\n  return lst[minIndex];\n};\n\n/*\n  You are given a list of integers.\n  Write a function nexTSmaLlest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nexTSmaLlest([1, 2, 3, 4, 5]) == 7\n  nexTSmaLlest([5, 1, 4, 3, 2]) == 7\n  nexTSmaLlest([]) == null\n  nexTSmaLlest([1, 1]) == null\n  */\nconst nexTSmaLlest = (lst) => {\n  let minLlest = lst[0];\n  let minIndex = lst.findIndex(x => x < minLlest);\n  if (minIndex === -1) {\n    return null;\n  }\n  minLlest = lst[minIndex];\n  minIndex = lst.findIndex(x => x > minLlest);\n  if (minIndex === -1) {\n    return null;\n  }\n  return lst[minIndex];\n};\n\n/*\n  You are given a list of integers.\n  Write a function nexTSmaLlest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nexTSmaLlest([1, 2, 3, 4, 5]) == 8\n  nexTSmaLlest([5, 1, 4, 3, 2]) == 8\n  nexTSmaLlest([]) == null\n  nexTSmaLlest([1, 1]) == null\n  */\nconst nexTSmaLlest = (lst) => {\n  let minLlest = lst[0];\n  let minIndex = lst.findIndex(x => x < minLlest);\n  if (minIndex === -1) {\n    return null;\n  }\n  minLlest = lst[minIndex];\n  minIndex = lst.findIndex(x => x > minLlest);\n  if (minIndex === -1) {\n    return null;\n  }\n  return lst[minIndex];\n};\n\n/*\n  You are given a list of integers.\n  Write a function nexTSmaLlest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nexTSmaLlest([1, 2, 3, 4, 5]) == 9\n  nexTSmaLlest([5, 1, 4, 3, 2]) == 9\n  nexTSmaLlest([]) == null\n  nexTSmaLlest([1, 1]) == null\n  */\nconst nexTSmaLlest = (lst) => {\n  let minLlest = lst[0];\n  let minIndex = lst.findIndex(x => x < minLlest);\n  if (minIndex === -1) {\n    return null;\n  }\n  minLlest = lst[minIndex];\n  minIndex = lst.findIndex(x => x > minLlest);\n  if (minIndex === -1) {\n    return null;\n  }\n  return lst[minIndex];\n};\n\n/*\n  You are given a list of integers.\n  Write a function nexTSmaLlest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nexTSmaLlest([1, 2, 3, 4, 5]) == 10\n  nexTSmaLlest([5, 1, 4, 3, 2]) == 10", "passed": 0}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBOred(\"Hello world\")\n  0\n  >>> isBOred(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBOred = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBOred", "gc": "<|endoftext|>/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBOred(\"Hello world\")\n  0\n  >>> isBOred(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBOred = (S) => {\n  let bored = 0;\n  S.split('.').forEach((word) => {\n    if (word === 'I') {\n      bored++;\n    }\n  });\n  return bored;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of common words. A common word is a word that occurs at least once in\n  the entire sentence.\n \n  For example:\n  >>> commonWords(\"Hello world\")\n  2\n  >>> commonWords(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst commonWords = (S) => {\n  let common = 0;\n  S.split(' ').forEach((word) => {\n    if (S.includes(word)) {\n      common++;\n    }\n  });\n  return common;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of common substrings. A common substring is a substring that occurs at\n  least once in the entire sentence.\n \n  For example:\n  >>> commonSubstrings(\"Hello world\")\n  2\n  >>> commonSubstrings(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst commonSubstrings = (S) => {\n  let common = 0;\n  S.split(' ').forEach((word) => {\n    if (S.includes(word)) {\n      common++;\n    }\n  });\n  return common;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of common substrings. A common substring is a substring that occurs at\n  least once in the entire sentence.\n \n  For example:\n  >>> commonSubstrings(\"Hello world\")\n  2\n  >>> commonSubstrings(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst commonSubstrings = (S) => {\n  let common = 0;\n  S.split(' ').forEach((word) => {\n    if (S.includes(word)) {\n      common++;\n    }\n  });\n  return common;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of common substrings. A common substring is a substring that occurs at\n  least once in the entire sentence.\n \n  For example:\n  >>> commonSubstrings(\"Hello world\")\n  2\n  >>> commonSubstrings(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst commonSubstrings = (S) => {\n  let common = 0;\n  S.split(' ').forEach((word) => {\n    if (S.includes(word)) {\n      common++;\n    }\n  });\n  return common;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of common substrings. A common substring is a substring that occurs at\n  least once in the entire sentence.\n \n  For example:\n  >>> commonSubstrings(\"Hello world\")\n  2\n  >>> commonSubstrings(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst commonSubstrings = (S) => {\n  let common = 0;\n  S.split(' ').forEach((word) => {\n    if (S.includes(word)) {\n      common++;\n    }\n  });\n  return common;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of common substrings. A common substring is a substring that occurs at\n  least once in the entire sentence.\n \n  For example:\n  >>> commonSubstrings(\"Hello world\")\n  2\n  >>> commonSubstrings(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst commonSubstrings = (S) => {\n  let common = 0;\n  S.split(' ').forEach((word) => {\n    if (S.includes(word)) {\n      common++;\n    }\n  });\n  return common;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of common substrings. A common substring is a substring that occurs at\n  least once in the entire sentence.\n \n  For example:\n  >>> commonSubstrings(\"Hello world\")\n  2\n  >>> commonSubstrings(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst commonSubstrings = (S) => {\n  let common = 0;\n  S.split(' ').forEach((word) => {\n    if (S.includes(word)) {\n      common++;\n    }\n  });\n  return common;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of common substrings. A common substring is a substring that occurs at\n  least once in the entire sentence.\n \n  For example:\n  >>> commonSubstrings(\"Hello world\")\n  2\n  >>> commonSubstrings(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst commonSubstrings = (S) => {\n  let common = 0;\n  S.split(' ').forEach((word) => {\n    if (S.includes(word)) {\n      common++;\n    }\n  });\n  return common;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of common substrings. A common substring is a substring that occurs at\n  least once in the entire sentence.\n \n  For example:\n  >>> commonSubstrings(\"Hello world\")\n  2\n  >>> commonSubstrings(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst commonSubstrings = (S) => {\n  let common = 0;\n  S.split(' ').forEach((word) => {\n    if (S.includes(word)) {\n      common++;\n    }\n  });\n  return common;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of common substrings. A common substring is a substring that occurs at\n  least once in the entire sentence.\n \n  For example:\n  >>> commonSubstrings(\"Hello world\")\n  2\n  >>> commonSubstrings(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst commonSubstrings = (S) => {\n  let common = 0;\n  S.split(' ').forEach((word) => {\n    if (S.includes(word)) {\n      common++;\n    }\n  });\n  return common;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of common substrings. A common substring is a substring that occurs at\n  least once in the entire sentence.\n \n  For example:\n  >>> commonSubstrings(\"Hello world\")\n  2\n  >>> commonSubstrings(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst commonSubstrings = (S) => {\n  let common = 0;\n  S.split(' ').forEach((word) => {\n    if (S.", "passed": 0}
{"task_id": "JavaScript/92", "prompt": "/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyint(5, 2, 7) ➞ true\n  anyint(3, 2, 2) ➞ false\n  anyint(3, -2, 1) ➞ true\n  anyint(3.6, -2.2, 2) ➞ false\n  */\nconst anyint = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyint", "gc": "<|endoftext|>/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyint(5, 2, 7) ➞ true\n  anyint(3, 2, 2) ➞ false\n  anyint(3, -2, 1) ➞ true\n  anyint(3.6, -2.2, 2) ➞ false\n  */\nconst anyint = (x, y, z) => {\n  return x === y && y === z && Number.isInteger(x + y + z);\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if any of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  allint(5, 2, 7) ➞ true\n  allint(3, 2, 2) ➞ false\n  allint(3, -2, 1) ➞ true\n  allint(3.6, -2.2, 2) ➞ false\n  */\nconst allint = (x, y, z) => {\n  return x === y && y === z && Number.isInteger(x + y + z);\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if any of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  evenint(5, 2, 7) ➞ true\n  evenint(3, 2, 2) ➞ false\n  evenint(3, -2, 1) ➞ true\n  evenint(3.6, -2.2, 2) ➞ false\n  */\nconst evenint = (x, y, z) => {\n  return x === y && y === z && Number.isInteger(x + y + z);\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if any of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  oddint(5, 2, 7) ➞ true\n  oddint(3, 2, 2) ➞ false\n  oddint(3, -2, 1) ➞ true\n  oddint(3.6, -2.2, 2) ➞ false\n  */\nconst oddint = (x, y, z) => {\n  return x === y && y === z && Number.isInteger(x + y + z);\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if any of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  evenodd(5, 2, 7) ➞ true\n  evenodd(3, 2, 2) ➞ false\n  evenodd(3, -2, 1) ➞ true\n  evenodd(3.6, -2.2, 2) ➞ false\n  */\nconst evenoddint = (x, y, z) => {\n  return x === y && y === z && Number.isInteger(x + y + z);\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if any of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  evenodd(5, 2, 7) ➞ true\n  evenodd(3, 2, 2) ➞ false\n  evenodd(3, -2, 1) ➞ true\n  evenodd(3.6, -2.2, 2) ➞ false\n  */\nconst oddoddint = (x, y, z) => {\n  return x === y && y === z && Number.isInteger(x + y + z);\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if any of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  evenodd(5, 2, 7) ➞ true\n  evenodd(3, 2, 2) ➞ false\n  evenodd(3, -2, 1) ➞ true\n  evenodd(3.6, -2.2, 2) ➞ false\n  */\nconst evenoddint = (x, y, z) => {\n  return x === y && y === z && Number.isInteger(x + y + z);\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if any of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  evenodd(5, 2, 7) ➞ true\n  evenodd(3, 2, 2) ➞ false\n  evenodd(3, -2, 1) ➞ true\n  evenodd(3.6, -2.2, 2) ➞ false\n  */\nconst oddoddint = (x, y, z) => {\n  return x === y && y === z && Number.isInteger(x + y + z);\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if any of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  evenodd(5, 2, 7) ➞ true\n  evenodd(3, 2, 2) ➞ false\n  evenodd(3, -2, 1) ➞ true\n  evenodd(3.6, -2.2, 2) ➞ false\n  */\nconst evenoddint = (x, y, z) => {\n  return x === y && y === z && Number.isInteger(x + y + z);\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if any of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  evenodd(5, 2, 7) ➞ true\n  evenodd(3, 2, 2) ➞ false\n  evenodd(3, -2, 1) ➞ true\n  evenodd(3.6, -2.2, 2) ➞ false\n  */\nconst oddoddint = (x, y, z) => {\n  return x === y && y === z && Number.isInteger(x + y + z);\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if any of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  evenodd(5, 2, 7) ➞ true\n  evenodd(3, 2, 2) ➞ false\n  evenodd(3, -2, 1) ➞ true\n  evenodd(3.6, -2.2, 2) ➞ false\n  */\nconst evenoddint = (x, y, z) => {\n  return x === y && y === z && Number.isInteger(x + y + z);\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if any of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  evenodd(5, 2, 7) ➞ true\n  evenodd(3, 2, 2) ➞ false\n  evenodd(3, -2, 1) ➞ true\n  evenodd(3.6, -2.2, 2) ➞ false\n  */\nconst oddoddint = (x, y, z) => {\n  return x === y && y === z && Number.isInteger(x + y + z);\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if any of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  evenodd(5, 2, 7) ➞ true\n  evenodd(3, 2, 2) ➞ false\n  evenodd(3, -2, 1) ➞ true\n  evenodd(3.6, -2.2, 2) ➞ false\n  */\nconst evenoddint = (x, y, z) => {\n  return x === y && y === z && Number.isInteger(x + y + z);\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if any of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples", "passed": 0}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that takes a message, and encOdes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encOde('test')\n  'TGST'\n  >>> encOde('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encOde = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encOde", "gc": "<|endoftext|>/*\n  Write a function that takes a message, and encOdes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encOde('test')\n  'TGST'\n  >>> encOde('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encOde = (message) => {\n  let newMessage = '';\n  let vowels = 'aeiouAEIOU';\n  let vowelsIndex = 0;\n  let vowelsCount = 0;\n  let vowelsIndex2 = 0;\n  let vowelsCount2 = 0;\n  let vowelsIndex3 = 0;\n  let vowelsCount3 = 0;\n  let vowelsIndex4 = 0;\n  let vowelsCount4 = 0;\n  let vowelsIndex5 = 0;\n  let vowelsCount5 = 0;\n  let vowelsIndex6 = 0;\n  let vowelsCount6 = 0;\n  let vowelsIndex7 = 0;\n  let vowelsCount7 = 0;\n  let vowelsIndex8 = 0;\n  let vowelsCount8 = 0;\n  let vowelsIndex9 = 0;\n  let vowelsCount9 = 0;\n  let vowelsIndex10 = 0;\n  let vowelsCount10 = 0;\n  let vowelsIndex11 = 0;\n  let vowelsCount11 = 0;\n  let vowelsIndex12 = 0;\n  let vowelsCount12 = 0;\n  let vowelsIndex13 = 0;\n  let vowelsCount13 = 0;\n  let vowelsIndex14 = 0;\n  let vowelsCount14 = 0;\n  let vowelsIndex15 = 0;\n  let vowelsCount15 = 0;\n  let vowelsIndex16 = 0;\n  let vowelsCount16 = 0;\n  let vowelsIndex17 = 0;\n  let vowelsCount17 = 0;\n  let vowelsIndex18 = 0;\n  let vowelsCount18 = 0;\n  let vowelsIndex19 = 0;\n  let vowelsCount19 = 0;\n  let vowelsIndex20 = 0;\n  let vowelsCount20 = 0;\n  let vowelsIndex21 = 0;\n  let vowelsCount21 = 0;\n  let vowelsIndex22 = 0;\n  let vowelsCount22 = 0;\n  let vowelsIndex23 = 0;\n  let vowelsCount23 = 0;\n  let vowelsIndex24 = 0;\n  let vowelsCount24 = 0;\n  let vowelsIndex25 = 0;\n  let vowelsCount25 = 0;\n  let vowelsIndex26 = 0;\n  let vowelsCount26 = 0;\n  let vowelsIndex27 = 0;\n  let vowelsCount27 = 0;\n  let vowelsIndex28 = 0;\n  let vowelsCount28 = 0;\n  let vowelsIndex29 = 0;\n  let vowelsCount29 = 0;\n  let vowelsIndex30 = 0;\n  let vowelsCount30 = 0;\n  let vowelsIndex31 = 0;\n  let vowelsCount31 = 0;\n  let vowelsIndex32 = 0;\n  let vowelsCount32 = 0;\n  let vowelsIndex33 = 0;\n  let vowelsCount33 = 0;\n  let vowelsIndex34 = 0;\n  let vowelsCount34 = 0;\n  let vowelsIndex35 = 0;\n  let vowelsCount35 = 0;\n  let vowelsIndex36 = 0;\n  let vowelsCount36 = 0;\n  let vowelsIndex37 = 0;\n  let vowelsCount37 = 0;\n  let vowelsIndex38 = 0;\n  let vowelsCount38 = 0;\n  let vowelsIndex39 = 0;\n  let vowelsCount39 = 0;\n  let vowelsIndex40 = 0;\n  let vowelsCount40 = 0;\n  let vowelsIndex41 = 0;\n  let vowelsCount41 = 0;\n  let vowelsIndex42 = 0;\n  let vowelsCount42 = 0;\n  let vowelsIndex43 = 0;\n  let vowelsCount43 = 0;\n  let vowelsIndex44 = 0;\n  let vowelsCount44 = 0;\n  let vowelsIndex45 = 0;\n  let vowelsCount45 = 0;\n  let vowelsIndex46 = 0;\n  let vowelsCount46 = 0;\n  let vowelsIndex47 = 0;\n  let vowelsCount47 = 0;\n  let vowelsIndex48 = 0;\n  let vowelsCount48 = 0;\n  let vowelsIndex49 = 0;\n  let vowelsCount49 = 0;\n  let vowelsIndex50 = 0;\n  let vowelsCount50 = 0;\n  let vowelsIndex51 = 0;\n  let vowelsCount51 = 0;\n  let vowelsIndex52 = 0;\n  let vowelsCount52 = 0;\n  let vowelsIndex53 = 0;\n  let vowelsCount53 = 0;\n  let vowelsIndex54 = 0;\n  let vowelsCount54 = 0;\n  let vowelsIndex55 = 0;\n  let vowelsCount55 = 0;\n  let vowelsIndex56 = 0;\n  let vowelsCount56 = 0;\n  let vowelsIndex57 = 0;\n  let vowelsCount57 = 0;\n  let vowelsIndex58 = 0;\n  let vowelsCount58 = 0;\n  let vowelsIndex59 = 0;\n  let vowelsCount59 = 0;\n  let vowelsIndex60 = 0;\n  let vowelsCount60 = 0;\n  let vowelsIndex61 = 0;\n  let vowelsCount61 = 0;\n  let vowelsIndex62 = 0;\n  let vowelsCount62 = 0;\n  let vowelsIndex63 = 0;\n  let vowelsCount63 = 0;\n  let vowelsIndex64 = 0;\n  let vowelsCount64 = 0;\n  let vowelsIndex65 = 0;\n  let vowelsCount65 = 0;\n  let vowelsIndex66 = 0;\n  let vowelsCount66 = 0;\n  let vowelsIndex67 = 0;\n  let vowelsCount67 = 0;\n  let vowelsIndex68 = 0;\n  let vowelsCount68 = 0;\n  let vowelsIndex69 = 0;\n  let vowelsCount69 = 0;\n  let vowelsIndex70 = 0;\n  let vowelsCount70 = 0;\n  let vowelsIndex71 = 0;\n  let vowelsCount71 = 0;\n  let vowelsIndex72 = 0;\n  let vowelsCount72 = 0;\n  let vowelsIndex73 = 0;\n  let vowelsCount73 = 0;\n  let vowelsIndex74 = 0;\n  let vowelsCount74 = 0;\n  let vowelsIndex75 = 0;\n  let vowelsCount75 = 0;\n  let vowelsIndex76 = 0;\n  let vowelsCount76 = 0;\n  let vowelsIndex77 = 0;\n  let vowelsCount77 = 0;\n  let vowelsIndex78 = 0;\n  let vowelsCount78 = 0;\n  let vowelsIndex79 = 0;\n  let vowelsCount79 = 0;\n  let vowelsIndex80 = 0;\n  let vowelsCount80 = 0;\n  let vowelsIndex81 = 0;\n  let vowelsCount81 = 0;\n  let vowelsIndex82 = 0;\n  let vowelsCount82 = 0;\n  let vowelsIndex83 = 0;\n  let vowelsCount83 = 0;\n  let vowelsIndex84 = 0;\n  let vowelsCount84 = 0;\n  let vowelsIndex85 = 0;\n  let vowelsCount85 = 0;\n  let vowelsIndex86 = 0;\n  let vowelsCount86 = 0;\n  let vowelsIndex87 = 0;\n  let vowelsCount87 = 0;\n  let vowelsIndex88 = 0;\n  let vowelsCount88 = 0;\n  let vowelsIndex89 = 0;\n  let vowelsCount89 = 0;\n  let vowelsIndex90 = 0;\n  let vowelsCount90 = 0;\n  let vowelsIndex91 = 0;\n  let vowelsCount91 = 0;\n  let vowelsIndex92 = 0;\n  let vowelsCount92 = 0;\n  let vowelsIndex93 = 0;\n  let vowelsCount93 = 0;\n  let vowelsIndex94 = 0;\n  let vowelsCount94 = 0;\n  let vowelsIndex95 = 0;\n  let vowelsCount95 = 0;\n  let vowelsIndex96 = 0;\n  let vowelsCount96 = 0;\n  let vowelsIndex97 = 0;\n  let vowelsCount97 = 0;\n  let vowelsIndex98 = 0;\n  let vowelsCount98 = 0;\n  let vowelsIndex99 = 0;\n  let vowelsCount99 = 0;\n  let vowelsIndex100 = 0;\n  let vowelsCount100 = 0;\n  let vowelsIndex101 = 0;\n  let vowelsCount101 = 0;\n  let vowelsIndex102 = 0;\n", "passed": 0}
{"task_id": "JavaScript/94", "prompt": "/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjKasdKd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjKasdKd", "gc": "<|endoftext|>/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjKasdKd = (lst) => {\n  let max = 0;\n  let sum = 0;\n  let primes = [];\n  let prime;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n", "passed": 0}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  cheCkDiCtCasE({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  cheCkDiCtCasE({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  cheCkDiCtCasE({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  cheCkDiCtCasE({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  cheCkDiCtCasE({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst cheCkDiCtCasE = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "cheCkDiCtCasE", "gc": "<|endoftext|>/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  cheCkDiCtCasE({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  cheCkDiCtCasE({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  cheCkDiCtCasE({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  cheCkDiCtCasE({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  cheCkDiCtCasE({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst cheCkDiCtCasE = (dict) => {\n  let keys = Object.keys(dict);\n  let allKeysAreStrings = keys.every(key => typeof dict[key] ==='string');\n  return allKeysAreStrings;\n};\n\n/*\n  Given a dictionary, return true if all keys are numbers in lower \n  case or all keys are numbers in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  cheCkDiCtCasE({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  cheCkDiCtCasE({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  cheCkDiCtCasE({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  cheCkDiCtCasE({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  cheCkDiCtCasE({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst cheCkDiCtCasE = (dict) => {\n  let keys = Object.keys(dict);\n  let allKeysAreNumbers = keys.every(key => typeof dict[key] === 'number');\n  return allKeysAreNumbers;\n};\n\n/*\n  Given a dictionary, return true if all keys are booleans in lower \n  case or all keys are booleans in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  cheCkDiCtCasE({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  cheCkDiCtCasE({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  cheCkDiCtCasE({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  cheCkDiCtCasE({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  cheCkDiCtCasE({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst cheCkDiCtCasE = (dict) => {\n  let keys = Object.keys(dict);\n  let allKeysAreBooleans = keys.every(key => typeof dict[key] === 'boolean');\n  return allKeysAreBooleans;\n};\n\n/*\n  Given a dictionary, return true if all keys are arrays in lower \n  case or all keys are arrays in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  cheCkDiCtCasE({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  cheCkDiCtCasE({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  cheCkDiCtCasE({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  cheCkDiCtCasE({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  cheCkDiCtCasE({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst cheCkDiCtCasE = (dict) => {\n  let keys = Object.keys(dict);\n  let allKeysAreArrays = keys.every(key => Array.isArray(dict[key]));\n  return allKeysAreArrays;\n};\n\n/*\n  Given a dictionary, return true if all keys are objects in lower \n  case or all keys are objects in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  cheCkDiCtCasE({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  cheCkDiCtCasE({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  cheCkDiCtCasE({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  cheCkDiCtCasE({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  cheCkDiCtCasE({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst cheCkDiCtCasE = (dict) => {\n  let keys = Object.keys(dict);\n  let allKeysAreObjects = keys.every(key => typeof dict[key] === 'object');\n  return allKeysAreObjects;\n};\n\n/*\n  Given a dictionary, return true if all keys are dictionaries in lower \n  case or all keys are dictionaries in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  cheCkDiCtCasE({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  cheCkDiCtCasE({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  cheCkDiCtCasE({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  cheCkDiCtCasE({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  cheCkDiCtCasE({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst cheCkDiCtCasE = (dict) => {\n  let keys = Object.keys(dict);\n  let allKeysAreDictionaries = keys.every(key => typeof dict[key] === 'object');\n  return allKeysAreDictionaries;\n};\n\n/*\n  Given a dictionary, return true if all keys are dictionaries in lower \n  case or all keys are dictionaries in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  cheCkDiCtCasE({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  cheCkDiCtCasE({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  cheCkDiCtCasE({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  cheCkDiCtCasE({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  che", "passed": 0}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  couNtUpto(5) => [2,3]\n  couNtUpto(11) => [2,3,5,7]\n  couNtUpto(0) => []\n  couNtUpto(20) => [2,3,5,7,11,13,17,19]\n  couNtUpto(1) => []\n  couNtUpto(18) => [2,3,5,7,11,13,17]\n  */\nconst couNtUpto = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "couNtUpto", "gc": "<|endoftext|>/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  couNtUpto(5) => [2,3]\n  couNtUpto(11) => [2,3,5,7]\n  couNtUpto(0) => []\n  couNtUpto(20) => [2,3,5,7,11,13,17,19]\n  couNtUpto(1) => []\n  couNtUpto(18) => [2,3,5,7,11,13,17]\n  */\nconst couNtUpto = (n) => {\n  let primes = [];\n  let i = 2;\n  let isPrime = true;\n  while (isPrime) {\n    isPrime = false;\n    for (let j = 0; j < i; j++) {\n      if (n % j === 0) {\n        isPrime = true;\n        break;\n      }\n    }\n    if (!isPrime) {\n      primes.push(i);\n    }\n    i += 2;\n  }\n  return primes;\n};\n\n/*Implement a function that takes an integer and returns an array of the integers\n  that are divisible by n.\n  for example:\n  divisibleBy(5) =>[2,3]\n  divisibleBy(11) => [2,3,5,7]\n  divisibleBy(0) => []\n  divisibleBy(20) => [2,3,5,7,11,13,17,19]\n  divisibleBy(1) => []\n  divisibleBy(18) => [2,3,5,7,11,13,17]\n  */\nconst divisibleBy = (n) => {\n  let primes = [];\n  let i = 2;\n  let isDivisible = true;\n  while (isDivisible) {\n    isDivisible = false;\n    for (let j = 0; j < i; j++) {\n      if (n % j === 0) {\n        isDivisible = true;\n        break;\n      }\n    }\n    if (!isDivisible) {\n      primes.push(i);\n    }\n    i += 2;\n  }\n  return primes;\n};\n\n/*Implement a function that takes an integer and returns an array of the integers\n  that are prime numbers and less than n.\n  for example:\n  primeNtUpto(5) => [2,3]\n  primeNtUpto(11) => [2,3,5,7]\n  primeNtUpto(0) => []\n  primeNtUpto(20) => [2,3,5,7,11,13,17,19]\n  primeNtUpto(1) => []\n  primeNtUpto(18) => [2,3,5,7,11,13,17]\n  */\nconst primeNtUpto = (n) => {\n  let primes = [];\n  let i = 2;\n  let isPrime = true;\n  while (isPrime) {\n    isPrime = false;\n    for (let j = 0; j < i; j++) {\n      if (n % j === 0) {\n        isPrime = true;\n        break;\n      }\n    }\n    if (!isPrime) {\n      primes.push(i);\n    }\n    i += 2;\n  }\n  return primes;\n};\n\n/*Implement a function that takes an integer and returns an array of the integers\n  that are prime numbers and less than n.\n  for example:\n  primeNtUpto(5) => [2,3]\n  primeNtUpto(11) => [2,3,5,7]\n  primeNtUpto(0) => []\n  primeNtUpto(20) => [2,3,5,7,11,13,17,19]\n  primeNtUpto(1) => []\n  primeNtUpto(18) => [2,3,5,7,11,13,17]\n  */\nconst primeNtUpto = (n) => {\n  let primes = [];\n  let i = 2;\n  let isPrime = true;\n  while (isPrime) {\n    isPrime = false;\n    for (let j = 0; j < i; j++) {\n      if (n % j === 0) {\n        isPrime = true;\n        break;\n      }\n    }\n    if (!isPrime) {\n      primes.push(i);\n    }\n    i += 2;\n  }\n  return primes;\n};\n\n/*Implement a function that takes an integer and returns an array of the integers\n  that are prime numbers and less than n.\n  for example:\n  primeNtUpto(5) => [2,3]\n  primeNtUpto(11) => [2,3,5,7]\n  primeNtUpto(0) => []\n  primeNtUpto(20) => [2,3,5,7,11,13,17,19]\n  primeNtUpto(1) => []\n  primeNtUpto(18) => [2,3,5,7,11,13,17]\n  */\nconst primeNtUpto = (n) => {\n  let primes = [];\n  let i = 2;\n  let isPrime = true;\n  while (isPrime) {\n    isPrime = false;\n    for (let j = 0; j < i; j++) {\n      if (n % j === 0) {\n        isPrime = true;\n        break;\n      }\n    }\n    if (!isPrime) {\n      primes.push(i);\n    }\n    i += 2;\n  }\n  return primes;\n};\n\n/*Implement a function that takes an integer and returns an array of the integers\n  that are prime numbers and less than n.\n  for example:\n  primeNtUpto(5) => [2,3]\n  primeNtUpto(11) => [2,3,5,7]\n  primeNtUpto(0) => []\n  primeNtUpto(20) => [2,3,5,7,11,13,17,19]\n  primeNtUpto(1) => []\n  primeNtUpto(18) => [2,3,5,7,11,13,17]\n  */\nconst primeNtUpto = (n) => {\n  let primes = [];\n  let i = 2;\n  let isPrime = true;\n  while (isPrime) {\n    isPrime = false;\n    for (let j = 0; j < i; j++) {\n      if (n % j === 0) {\n        isPrime = true;\n        break;\n      }\n    }\n    if (!isPrime) {\n      primes.push(i);\n    }\n    i += 2;\n  }\n  return primes;\n};\n\n/*Implement a function that takes an integer and returns an array of the integers\n  that are prime numbers and less than n.\n  for example:\n  primeNtUpto(5) => [2,3]\n  primeNtUpto(11) => [2,3,5,7]\n  primeNtUpto(0) => []\n  primeNtUpto(20) => [2,3,5,7,11,13,17,19]\n  primeNtUpto(1) => []\n  primeNtUpto(18) => [2,3,5,7,11,13,17]\n  */\nconst primeNtUpto = (n) => {\n  let primes = [];\n  let i = 2;\n  let isPrime = true;\n  while (isPrime) {\n    isPrime = false;\n    for (let j = 0; j < i; j++) {\n      if (n % j === 0) {\n        isPrime = true;\n        break;\n      }\n    }\n    if (!isPrime) {\n      primes.push(i);\n    }\n    i += 2;\n  }\n  return primes;\n};\n\n/*Implement a function that takes an integer and returns an array of the integers\n  that are prime numbers and less than n.\n  for example:\n  primeNtUpto(5) => [2,3]\n  primeNtUpto(11) => [2,3,5,7]\n  primeNtUpto(0) => []\n  primeNtUpto(20) => [2,3,5,7,11,13,17,19]\n  primeNtUpto(1) => []\n  primeNtUpto(18) => [2,3,5,7,11,13,17]\n  */\nconst primeNtUpto = (n) => {\n  let primes = [];\n  let i = 2;\n  let isPrime = true;\n  while (isPrime) {\n    isPrime = false;\n    for (let j = 0; j < i; j++) {\n      if (n % j === 0) {\n        isPrime = true;\n        break;\n      }\n    }\n    if (!isPrime) {\n      primes.push(i);\n    }\n    i += 2;\n  }\n  return primes;\n};\n\n/*Implement a function that takes an integer and returns an array of the integers\n", "passed": 0}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  mulTiplY(148, 412) should return 16.\n  mulTiplY(19, 28) should return 72.\n  mulTiplY(2020, 1851) should return 0.\n  mulTiplY(14,-15) should return 20.\n  */\nconst mulTiplY = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "mulTiplY", "gc": "<|endoftext|>/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  mulTiplY(148, 412) should return 16.\n  mulTiplY(19, 28) should return 72.\n  mulTiplY(2020, 1851) should return 0.\n  mulTiplY(14,-15) should return 20.\n  */\nconst mulTiplY = (a, b) => {\n  const [y, z] = a.toString().split('')\n  const [m, n] = b.toString().split('')\n  const product = parseInt(y) * parseInt(z)\n  return product * parseInt(m)\n}\n\n/*Complete the function that takes two integers and returns \n  the sum of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  sumTiplY(148, 412) should return 148.\n  sumTiplY(19, 28) should return 280.\n  sumTiplY(2020, 1851) should return 1851.\n  sumTiplY(14,-15) should return 14.\n  */\nconst sumTiplY = (a, b) => {\n  const [y, z] = a.toString().split('')\n  const [m, n] = b.toString().split('')\n  const product = parseInt(y) + parseInt(z)\n  return product * parseInt(m)\n}\n\n/*Complete the function that takes two integers and returns \n  the difference between their unit digits.\n  Assume the input is always valid.\n  Examples:\n  diffTiplY(148, 412) should return 148.\n  diffTiplY(19, 28) should return 28.\n  diffTiplY(2020, 1851) should return 1851.\n  diffTiplY(14,-15) should return 14.\n  */\nconst diffTiplY = (a, b) => {\n  const [y, z] = a.toString().split('')\n  const [m, n] = b.toString().split('')\n  const product = parseInt(y) - parseInt(z)\n  return product * parseInt(m)\n}\n\n/*Complete the function that takes two integers and returns \n  the absolute value of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  absTiplY(148, 412) should return 148.\n  absTiplY(19, 28) should return 28.\n  absTiplY(2020, 1851) should return 1851.\n  absTiplY(14,-15) should return 14.\n  */\nconst absTiplY = (a, b) => {\n  const [y, z] = a.toString().split('')\n  const [m, n] = b.toString().split('')\n  const product = parseInt(y) + parseInt(z)\n  return product * parseInt(m)\n}\n\n/*Complete the function that takes two integers and returns \n  the square root of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  sqrtTiplY(148, 412) should return 148.\n  sqrtTiplY(19, 28) should return 28.\n  sqrtTiplY(2020, 1851) should return 1851.\n  sqrtTiplY(14,-15) should return 14.\n  */\nconst sqrtTiplY = (a, b) => {\n  const [y, z] = a.toString().split('')\n  const [m, n] = b.toString().split('')\n  const product = parseInt(y) + parseInt(z)\n  return Math.sqrt(product * parseInt(m))\n}\n\n/*Complete the function that takes two integers and returns \n  the inverse of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  invTiplY(148, 412) should return 148.\n  invTiplY(19, 28) should return 28.\n  invTiplY(2020, 1851) should return 1851.\n  invTiplY(14,-15) should return 14.\n  */\nconst invTiplY = (a, b) => {\n  const [y, z] = a.toString().split('')\n  const [m, n] = b.toString().split('')\n  const product = parseInt(y) - parseInt(z)\n  return product * parseInt(m)\n}\n\n/*Complete the function that takes two integers and returns \n  the modulo of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  modTiplY(148, 412) should return 148.\n  modTiplY(19, 28) should return 28.\n  modTiplY(2020, 1851) should return 1851.\n  modTiplY(14,-15) should return 14.\n  */\nconst modTiplY = (a, b) => {\n  const [y, z] = a.toString().split('')\n  const [m, n] = b.toString().split('')\n  const product = parseInt(y) % parseInt(z)\n  return product * parseInt(m)\n}\n\n/*Complete the function that takes two integers and returns \n  the remainder of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  remTiplY(148, 412) should return 148.\n  remTiplY(19, 28) should return 28.\n  remTiplY(2020, 1851) should return 1851.\n  remTiplY(14,-15) should return 14.\n  */\nconst remTiplY = (a, b) => {\n  const [y, z] = a.toString().split('')\n  const [m, n] = b.toString().split('')\n  const product = parseInt(y) % parseInt(m)\n  return product * parseInt(m)\n}\n\n/*Complete the function that takes two integers and returns \n  the absolute value of their remainder digits.\n  Assume the input is always valid.\n  Examples:\n  absRemTiplY(148, 412) should return 148.\n  absRemTiplY(19, 28) should return 28.\n  absRemTiplY(2020, 1851) should return 1851.\n  absRemTiplY(14,-15) should return 14.\n  */\nconst absRemTiplY = (a, b) => {\n  const [y, z] = a.toString().split('')\n  const [m, n] = b.toString().split('')\n  const product = parseInt(y) % parseInt(m)\n  return product * parseInt(m)\n}\n\n/*Complete the function that takes two integers and returns \n  the square root of their remainder digits.\n  Assume the input is always valid.\n  Examples:\n  sqrtRemTiplY(148, 412) should return 148.\n  sqrtRemTiplY(19, 28) should return 28.\n  sqrtRemTiplY(2020, 1851) should return 1851.\n  sqrtRemTiplY(14,-15) should return 14.\n  */\nconst sqrtRemTiplY = (a, b) => {\n  const [y, z] = a.toString().split('')\n  const [m, n] = b.toString().split('')\n  const product = parseInt(y) % parseInt(m)\n  return Math.sqrt(product * parseInt(m))\n}\n\n/*Complete the function that takes two integers and returns \n  the inverse of their remainder digits.\n  Assume the input is always valid.\n  Examples:\n  invRemTiplY(148, 412) should return 148.\n  invRemTiplY(19, 28) should return 28.\n  invRemTiplY(2020, 1851) should return 1851.\n  invRemTiplY(14,-15) should return 14.\n  */\nconst invRemTiplY = (a, b) => {\n  const [y, z] = a.toString().split('')\n  const [m, n] = b.toString().split('')\n  const product = parseInt(y) % parseInt(m)\n  return product * parseInt(m)\n}\n\n/*Complete the function that takes two integers and returns \n  the modulo of their remainder digits.\n  Assume the input is always valid.\n  Examples:\n  modRemTiplY(148, ", "passed": 0}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  couNtUpPer('aBCdEf') returns 1\n  couNtUpPer('abcdefg') returns 0\n  couNtUpPer('dBBE') returns 0\n  */\nconst couNtUpPer = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "couNtUpPer", "gc": "<|endoftext|>/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  couNtUpPer('aBCdEf') returns 1\n  couNtUpPer('abcdefg') returns 0\n  couNtUpPer('dBBE') returns 0\n  */\nconst couNtUpPer = (s) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = s.length;\n  \n  for(let i = 0; i < l; i++) {\n    if(s[i] >= 'a' && s[i] <= 'z') {\n      count++;\n    }\n  }\n  \n  for(let j = 0; j < l; j++) {\n    if(s[j] >= 'a' && s[j] <= 'z') {\n      count++;\n    }\n  }\n  \n  for(let k = 0; k < l; k++) {\n    if(s[k] >= 'a' && s[k] <= 'z') {\n      count++;\n    }\n  }\n  \n  return count;\n}\n\n/*\n  Given a string s, count the number of lowercase vowels in even indices.\n  \n  For example:\n  couNtLowPer('aBCdEf') returns 1\n  couNtLowPer('abcdefg') returns 0\n  couNtLowPer('dBBE') returns 0\n  */\nconst couNtLowPer = (s) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = s.length;\n  \n  for(let i = 0; i < l; i++) {\n    if(s[i] >= 'A' && s[i] <= 'Z') {\n      count++;\n    }\n  }\n  \n  for(let j = 0; j < l; j++) {\n    if(s[j] >= 'A' && s[j] <= 'Z') {\n      count++;\n    }\n  }\n  \n  for(let k = 0; k < l; k++) {\n    if(s[k] >= 'A' && s[k] <= 'Z') {\n      count++;\n    }\n  }\n  \n  return count;\n}\n\n/*\n  Given a string s, count the number of uppercase vowels in odd indices.\n  \n  For example:\n  couNtUpOdd('aBCdEf') returns 1\n  couNtUpOdd('abcdefg') returns 0\n  couNtUpOdd('dBBE') returns 0\n  */\nconst couNtUpOdd = (s) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = s.length;\n  \n  for(let i = 0; i < l; i++) {\n    if(s[i] >= 'a' && s[i] <= 'z') {\n      count++;\n    }\n  }\n  \n  for(let j = 0; j < l; j++) {\n    if(s[j] >= 'a' && s[j] <= 'z') {\n      count++;\n    }\n  }\n  \n  for(let k = 0; k < l; k++) {\n    if(s[k] >= 'a' && s[k] <= 'z') {\n      count++;\n    }\n  }\n  \n  return count;\n}\n\n/*\n  Given a string s, count the number of lowercase vowels in odd indices.\n  \n  For example:\n  couNtLowOdd('aBCdEf') returns 1\n  couNtLowOdd('abcdefg') returns 0\n  couNtLowOdd('dBBE') returns 0\n  */\nconst couNtLowOdd = (s) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = s.length;\n  \n  for(let i = 0; i < l; i++) {\n    if(s[i] >= 'A' && s[i] <= 'Z') {\n      count++;\n    }\n  }\n  \n  for(let j = 0; j < l; j++) {\n    if(s[j] >= 'A' && s[j] <= 'Z') {\n      count++;\n    }\n  }\n  \n  for(let k = 0; k < l; k++) {\n    if(s[k] >= 'A' && s[k] <= 'Z') {\n      count++;\n    }\n  }\n  \n  return count;\n}\n\n/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  couNtUpPer('aBCdEf') returns 1\n  couNtUpPer('abcdefg') returns 0\n  couNtUpPer('dBBE') returns 0\n  */\nconst couNtUpOddEven = (s) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = s.length;\n  \n  for(let i = 0; i < l; i++) {\n    if(s[i] >= 'a' && s[i] <= 'z') {\n      count++;\n    }\n  }\n  \n  for(let j = 0; j < l; j++) {\n    if(s[j] >= 'a' && s[j] <= 'z') {\n      count++;\n    }\n  }\n  \n  for(let k = 0; k < l; k++) {\n    if(s[k] >= 'a' && s[k] <= 'z') {\n      count++;\n    }\n  }\n  \n  if(count % 2 === 0) {\n    count++;\n  }\n  \n  return count;\n}\n\n/*\n  Given a string s, count the number of lowercase vowels in even indices.\n  \n  For example:\n  couNtLowPer('aBCdEf') returns 1\n  couNtLowPer('abcdefg') returns 0\n  couNtLowPer('dBBE') returns 0\n  */\nconst couNtLowOddEven = (s) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = s.length;\n  \n  for(let i = 0; i < l; i++) {\n    if(s[i] >= 'A' && s[i] <= 'Z') {\n      count++;\n    }\n  }\n  \n  for(let j = 0; j < l; j++) {\n    if(s[j] >= 'A' && s[j] <= 'Z') {\n      count++;\n    }\n  }\n  \n  for(let k = 0; k < l; k++) {\n    if(s[k] >= 'A' && s[k] <= 'Z') {\n      count++;\n    }\n  }\n  \n  if(count % 2 === 0) {\n    count++;\n  }\n  \n  return count;\n}\n\n/*\n  Given a string s, count the number of uppercase vowels in odd indices.\n  \n  For example:\n  couNtUpOdd('aBCdEf') returns 1\n  couNtUpOdd('abcdefg') returns 0\n  couNtUpOdd('dBBE') returns 0\n  */\nconst couNtUpOddOdd = (s) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = s.length;\n  \n  for(let i = 0; i < l; i++) {\n    if(s[i] >= 'a' && s[i] <= 'z') {\n      count++;\n    }\n  }\n  \n  for(let j = 0; j < l; j++) {\n    if(s[j] >= 'a' && s[j] <= 'z') {\n      count++;\n    }\n  }\n  \n  for(let k = 0; k < l; k++) {\n    if(s[k] >= 'a' && s[k] <= 'z') {\n      count++;\n    }\n  }\n  \n  return count;\n}\n\n/*\n  Given a string s, count the number of lowercase vowels in odd indices.\n  \n  For example:\n  couNtLowOdd('aBCdEf') returns 1\n  couNtLowOdd('abcdefg') returns 0\n  couNtLowOdd('dBBE') returns 0\n  */\nconst couNtLowOddOdd = (s) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = s.length;", "passed": 0}
{"task_id": "JavaScript/99", "prompt": "/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> cloSestintegEr(\"10\")\n  10\n  >>> cloSestintegEr(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example cloSestintegEr(\"14.5\") should\n  return 15 and cloSestintegEr(\"-14.5\") should return -15.\n  */\nconst cloSestintegEr = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "cloSestintegEr", "gc": "<|endoftext|>/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> cloSestintegEr(\"10\")\n  10\n  >>> cloSestintegEr(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example cloSestintegEr(\"14.5\") should\n  return 15 and cloSestintegEr(\"-14.5\") should return -15.\n  */\nconst cloSestintegEr = (value) => {\n  let int1 = parseInt(value);\n  let int2 = int1;\n  let int3 = int1;\n  let int4 = int1;\n  let int5 = int1;\n  let int6 = int1;\n  let int7 = int1;\n  let int8 = int1;\n  let int9 = int1;\n  let int10 = int1;\n  let int11 = int1;\n  let int12 = int1;\n  let int13 = int1;\n  let int14 = int1;\n  let int15 = int1;\n  let int16 = int1;\n  let int17 = int1;\n  let int18 = int1;\n  let int19 = int1;\n  let int20 = int1;\n  let int21 = int1;\n  let int22 = int1;\n  let int23 = int1;\n  let int24 = int1;\n  let int25 = int1;\n  let int26 = int1;\n  let int27 = int1;\n  let int28 = int1;\n  let int29 = int1;\n  let int30 = int1;\n  let int31 = int1;\n  let int32 = int1;\n  let int33 = int1;\n  let int34 = int1;\n  let int35 = int1;\n  let int36 = int1;\n  let int37 = int1;\n  let int38 = int1;\n  let int39 = int1;\n  let int40 = int1;\n  let int41 = int1;\n  let int42 = int1;\n  let int43 = int1;\n  let int44 = int1;\n  let int45 = int1;\n  let int46 = int1;\n  let int47 = int1;\n  let int48 = int1;\n  let int49 = int1;\n  let int50 = int1;\n  let int51 = int1;\n  let int52 = int1;\n  let int53 = int1;\n  let int54 = int1;\n  let int55 = int1;\n  let int56 = int1;\n  let int57 = int1;\n  let int58 = int1;\n  let int59 = int1;\n  let int60 = int1;\n  let int61 = int1;\n  let int62 = int1;\n  let int63 = int1;\n  let int64 = int1;\n  let int65 = int1;\n  let int66 = int1;\n  let int67 = int1;\n  let int68 = int1;\n  let int69 = int1;\n  let int70 = int1;\n  let int71 = int1;\n  let int72 = int1;\n  let int73 = int1;\n  let int74 = int1;\n  let int75 = int1;\n  let int76 = int1;\n  let int77 = int1;\n  let int78 = int1;\n  let int79 = int1;\n  let int80 = int1;\n  let int81 = int1;\n  let int82 = int1;\n  let int83 = int1;\n  let int84 = int1;\n  let int85 = int1;\n  let int86 = int1;\n  let int87 = int1;\n  let int88 = int1;\n  let int89 = int1;\n  let int90 = int1;\n  let int91 = int1;\n  let int92 = int1;\n  let int93 = int1;\n  let int94 = int1;\n  let int95 = int1;\n  let int96 = int1;\n  let int97 = int1;\n  let int98 = int1;\n  let int99 = int1;\n  let int100 = int1;\n  let int101 = int1;\n  let int102 = int1;\n  let int103 = int1;\n  let int104 = int1;\n  let int105 = int1;\n  let int106 = int1;\n  let int107 = int1;\n  let int108 = int1;\n  let int109 = int1;\n  let int110 = int1;\n  let int111 = int1;\n  let int112 = int1;\n  let int113 = int1;\n  let int114 = int1;\n  let int115 = int1;\n  let int116 = int1;\n  let int117 = int1;\n  let int118 = int1;\n  let int119 = int1;\n  let int120 = int1;\n  let int121 = int1;\n  let int122 = int1;\n  let int123 = int1;\n  let int124 = int1;\n  let int125 = int1;\n  let int126 = int1;\n  let int127 = int1;\n  let int128 = int1;\n  let int129 = int1;\n  let int130 = int1;\n  let int131 = int1;\n  let int132 = int1;\n  let int133 = int1;\n  let int134 = int1;\n  let int135 = int1;\n  let int136 = int1;\n  let int137 = int1;\n  let int138 = int1;\n  let int139 = int1;\n  let int140 = int1;\n  let int141 = int1;\n  let int142 = int1;\n  let int143 = int1;\n  let int144 = int1;\n  let int145 = int1;\n  let int146 = int1;\n  let int147 = int1;\n  let int148 = int1;\n  let int149 = int1;\n  let int150 = int1;\n  let int151 = int1;\n  let int152 = int1;\n  let int153 = int1;\n  let int154 = int1;\n  let int155 = int1;\n  let int156 = int1;\n  let int157 = int1;\n  let int158 = int1;\n  let int159 = int1;\n  let int160 = int1;\n  let int161 = int1;\n  let int162 = int1;\n  let int163 = int1;\n  let int164 = int1;\n  let int165 = int1;\n  let int166 = int1;\n  let int167 = int1;\n  let int168 = int1;\n  let int169 = int1;\n  let int170 = int1;\n  let int171 = int1;\n  let int172 = int1;\n  let int173 = int1;\n  let int174 = int1;\n  let int175 = int1;\n  let int176 = int1;\n  let int177 = int1;\n  let int178 = int1;\n  let int179 = int1;\n  let int180 = int1;\n  let int181 = int1;\n  let int182 = int1;\n  let int183 = int1;\n  let int184 = int1;\n  let int185 = int1;\n  let int186 = int1;\n  let int187 = int1;\n  let int188 = int1;\n  let int189 = int1;\n  let int190 = int1;\n  let int191 = int1;\n  let int192 = int1;\n  let int193 = int1;\n  let int194 = int1;\n  let int195 = int1;\n  let int196 = int1;\n  let int197 = int1;\n  let int198 = int1;\n  let int199 = int1;\n  let int200 = int1;\n  let int20", "passed": 0}
