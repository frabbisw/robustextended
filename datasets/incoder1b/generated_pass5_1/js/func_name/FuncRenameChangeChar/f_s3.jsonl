{"task_id": "JavaScript/0", "prompt": "/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hasclosEElemEntS([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasclosEElemEntS([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasclosEElemEntS = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasclosEElemEntS", "gc": "<|endoftext|>/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hasclosEElemEntS([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasclosEElemEntS([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasclosEElemEntS = (numbers, threshold) => {\n  const n = numbers.length\n  const m = numbers.length\n  let i = 0\n  let j = 0\n  let k = 0\n  let sum = 0\n  let sum2 = 0\n  let sum3 = 0\n  let sum4 = 0\n  let sum5 = 0\n  let sum6 = 0\n  let sum7 = 0\n  let sum8 = 0\n  let sum9 = 0\n  let sum10 = 0\n  let sum11 = 0\n  let sum12 = 0\n  let sum13 = 0\n  let sum14 = 0\n  let sum15 = 0\n  let sum16 = 0\n  let sum17 = 0\n  let sum18 = 0\n  let sum19 = 0\n  let sum20 = 0\n  let sum21 = 0\n  let sum22 = 0\n  let sum23 = 0\n  let sum24 = 0\n  let sum25 = 0\n  let sum26 = 0\n  let sum27 = 0\n  let sum28 = 0\n  let sum29 = 0\n  let sum30 = 0\n  let sum31 = 0\n  let sum32 = 0\n  let sum33 = 0\n  let sum34 = 0\n  let sum35 = 0\n  let sum36 = 0\n  let sum37 = 0\n  let sum38 = 0\n  let sum39 = 0\n  let sum40 = 0\n  let sum41 = 0\n  let sum42 = 0\n  let sum43 = 0\n  let sum44 = 0\n  let sum45 = 0\n  let sum46 = 0\n  let sum47 = 0\n  let sum48 = 0\n  let sum49 = 0\n  let sum50 = 0\n  let sum51 = 0\n  let sum52 = 0\n  let sum53 = 0\n  let sum54 = 0\n  let sum55 = 0\n  let sum56 = 0\n  let sum57 = 0\n  let sum58 = 0\n  let sum59 = 0\n  let sum60 = 0\n  let sum61 = 0\n  let sum62 = 0\n  let sum63 = 0\n  let sum64 = 0\n  let sum65 = 0\n  let sum66 = 0\n  let sum67 = 0\n  let sum68 = 0\n  let sum69 = 0\n  let sum70 = 0\n  let sum71 = 0\n  let sum72 = 0\n  let sum73 = 0\n  let sum74 = 0\n  let sum75 = 0\n  let sum76 = 0\n  let sum77 = 0\n  let sum78 = 0\n  let sum79 = 0\n  let sum80 = 0\n  let sum81 = 0\n  let sum82 = 0\n  let sum83 = 0\n  let sum84 = 0\n  let sum85 = 0\n  let sum86 = 0\n  let sum87 = 0\n  let sum88 = 0\n  let sum89 = 0\n  let sum90 = 0\n  let sum91 = 0\n  let sum92 = 0\n  let sum93 = 0\n  let sum94 = 0\n  let sum95 = 0\n  let sum96 = 0\n  let sum97 = 0\n  let sum98 = 0\n  let sum99 = 0\n  let sum100 = 0\n  let sum101 = 0\n  let sum102 = 0\n  let sum103 = 0\n  let sum104 = 0\n  let sum105 = 0\n  let sum106 = 0\n  let sum107 = 0\n  let sum108 = 0\n  let sum109 = 0\n  let sum110 = 0\n  let sum111 = 0\n  let sum112 = 0\n  let sum113 = 0\n  let sum114 = 0\n  let sum115 = 0\n  let sum116 = 0\n  let sum117 = 0\n  let sum118 = 0\n  let sum119 = 0\n  let sum120 = 0\n  let sum121 = 0\n  let sum122 = 0\n  let sum123 = 0\n  let sum124 = 0\n  let sum125 = 0\n  let sum126 = 0\n  let sum127 = 0\n  let sum128 = 0\n  let sum129 = 0\n  let sum130 = 0\n  let sum131 = 0\n  let sum132 = 0\n  let sum133 = 0\n  let sum134 = 0\n  let sum135 = 0\n  let sum136 = 0\n  let sum137 = 0\n  let sum138 = 0\n  let sum139 = 0\n  let sum140 = 0\n  let sum141 = 0\n  let sum142 = 0\n  let sum143 = 0\n  let sum144 = 0\n  let sum145 = 0\n  let sum146 = 0\n  let sum147 = 0\n  let sum148 = 0\n  let sum149 = 0\n  let sum150 = 0\n  let sum151 = 0\n  let sum152 = 0\n  let sum153 = 0\n  let sum154 = 0\n  let sum155 = 0\n  let sum156 = 0\n  let sum157 = 0\n  let sum158 = 0\n  let sum159 = 0\n  let sum160 = 0\n  let sum161 = 0\n  let sum162 = 0\n  let sum163 = 0\n  let sum164 = 0\n  let sum165 = 0\n  let sum166 = 0\n  let sum167 = 0\n  let sum168 = 0\n  let sum169 = 0\n  let sum170 = 0\n  let sum171 = 0\n  let sum172 = 0\n  let sum173 = 0\n  let sum174 = 0\n  let sum175 = 0\n  let sum176 = 0\n  let sum177 = 0\n  let sum178 = 0\n  let sum179 = 0\n  let sum180 = 0\n  let sum181 = 0\n  let sum182 = 0\n  let sum183 = 0\n  let sum184 = 0\n  let sum185 = 0\n  let sum186 = 0\n  let sum187 = 0\n  let sum188 = 0\n  let sum189 = 0\n  let sum190 = 0\n  let sum191 = 0\n  let sum192 = 0\n  let sum193 = 0\n  let sum194 = 0\n  let sum195 = 0\n  let sum196 = 0\n  let sum197 = 0\n  let sum198 = 0\n  let sum199 = 0\n  let sum200 = 0\n  let sum201 = 0\n  let sum202 = 0\n  let sum203 = 0\n  let sum204 = 0\n  let sum205 = 0\n  let sum206 = 0\n  let sum207 = 0\n  let sum208 = 0\n  let sum209 = 0\n  let sum210 = 0\n  let sum211 = 0\n  let sum212 = 0\n  let sum213 = 0\n  let sum214 = 0\n  let sum215 = 0\n  let sum216 = 0\n  let sum217 = 0\n  let sum218 = 0\n  let sum219 = 0\n  let sum220 = 0\n  let sum221 = 0\n  let sum222 = 0\n  let sum223 = 0\n  let sum224 = 0\n  let sum225 = 0\n  let sum226 = 0\n  let sum227 = 0\n  let sum228 = 0\n  let sum229 = 0\n  let sum230 = 0\n  let sum231 = 0\n  let sum232 = 0\n  let sum233 = 0\n  let sum234 = 0\n  let sum235 = 0\n  let sum236 = 0\n  let sum237 = 0\n  let sum238 = 0\n  let sum239 = 0\n  let sum240 = 0\n  let sum241 = 0\n  let sum242 = 0\n  let sum243 = 0\n  let sum244 = 0\n  let sum245 = 0\n  let sum246 = 0\n  let sum247 = 0\n  let sum248 = 0\n  let sum249 = 0\n  let sum250 = 0\n  let sum251 = 0\n  let sum252 = 0\n  let sum253 = 0\n  let sum254 = 0\n  let sum255 = 0\n  let sum256 = 0\n  let sum257 = 0\n  let sum258 = 0\n  let sum259 = 0\n  let sum260 = 0\n  let sum261 = 0\n  let sum262 = 0\n  let sum263 = 0\n  let sum264 = 0\n  let sum265 = 0\n  let sum266 = 0\n  let sum267 = 0\n  let sum268 = 0\n  let sum269 = 0\n  let sum270 = 0\n  let sum271 = 0\n  let sum272 = 0\n  let sum273 = 0\n  let sum274 = 0\n  let sum275 = 0\n  let sum276 = 0\n  let sum277 = 0\n  let sum278 = 0\n  let sum279 = 0\n  let ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> sepAratEPareNGrOups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst sepAratEPareNGrOups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "sepAratEPareNGrOups", "gc": "<|endoftext|>/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> sepAratEPareNGrOups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst sepAratEPareNGrOups = (paren_string) => {\n  const paren_groups = paren_string.match(/\\(([^)]*)\\)/gi);\n  const paren_group_strings = paren_groups.map(group => group.trim());\n  const paren_group_strings_set = paren_group_strings.reduce((acc, curr, index) => {\n    if (index === 0) {\n      acc.push(curr);\n    } else {\n      acc.push(curr, paren_group_strings_set[index - 1]);\n    }\n    return acc;\n  }, []);\n  return paren_group_strings_set;\n};\n\n/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> sepAratEPareNGrOups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst sepAratEPareNGrOupsNoSpaces = (paren_string) => {\n  const paren_groups = paren_string.match(/\\(([^)]*)\\)/gi);\n  const paren_group_strings = paren_groups.map(group => group.trim());\n  const paren_group_strings_set = paren_group_strings.reduce((acc, curr, index) => {\n    if (index === 0) {\n      acc.push(curr);\n    } else {\n      acc.push(curr, paren_group_strings_set[index - 1]);\n    }\n    return acc;\n  }, []);\n  return paren_group_strings_set;\n};\n\n/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> sepAratEPareNGrOups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst sepAratEPareNGrOupsNoSpacesNoSpaces = (paren_string) => {\n  const paren_groups = paren_string.match(/\\(([^)]*)\\)/gi);\n  const paren_group_strings = paren_groups.map(group => group.trim());\n  const paren_group_strings_set = paren_group_strings.reduce((acc, curr, index) => {\n    if (index === 0) {\n      acc.push(curr);\n    } else {\n      acc.push(curr, paren_group_strings_set[index - 1]);\n    }\n    return acc;\n  }, []);\n  return paren_group_strings_set;\n};\n\n/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> sepAratEPareNGrOups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst sepAratEPareNGrOupsNoSpacesNoSpacesNoSpaces = (paren_string) => {\n  const paren_groups = paren_string.match(/\\(([^)]*)\\)/gi);\n  const paren_group_strings = paren_groups.map(group => group.trim());\n  const paren_group_strings_set = paren_group_strings.reduce((acc, curr, index) => {\n    if (index === 0) {\n      acc.push(curr);\n    } else {\n      acc.push(curr, paren_group_strings_set[index - 1]);\n    }\n    return acc;\n  }, []);\n  return paren_group_strings_set;\n};\n\n/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> sepAratEPareNGrOups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst sepAratEPareNGrOupsNoSpacesNoSpacesNoSpacesNoSpaces = (paren_string) => {\n  const paren_groups = paren_string.match(/\\(([^)]*)\\)/gi);\n  const paren_group_strings = paren_groups.map(group => group.trim());\n  const paren_group_strings_set = paren_group_strings.reduce((acc, curr, index) => {\n    if (index === 0) {\n      acc.push(curr);\n    } else {\n      acc.push(curr, paren_group_strings_set[index - 1]);\n    }\n    return acc;\n  }, []);\n  return paren_group_strings_set;\n};\n\n/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> sepAratEPareNGrOups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst sepAratEPareNGrOupsNoSpacesNoSpacesNoSpacesNoSpacesNoSpaces = (paren_string) => {\n  const paren_groups = paren_string.match(/\\(([^)]*)\\)/gi);\n  const paren_group_strings = paren_groups.map(group => group.trim());\n  const paren_group_strings_set = paren_group_strings.reduce((acc, curr, index) => {\n    if (index === 0) {\n      acc.push(curr);\n    } else {\n      acc.push(curr, paren_group_strings_set[index - 1]);\n    }\n    return acc;\n  }, []);\n  return paren_group_strings_set;\n};\n\n/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> sepAratEPareNGrOups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst sepAratEPareNGrOupsNoSpacesNoSpacesNoSpacesNoSpacesNoSpacesNoSpaces = (paren_string) => {\n  const paren_groups = paren_string.match(/\\(([^)]*)\\)/gi);\n  const paren_group_strings = paren_groups.map(group => group.trim());\n  const paren_group_strings_set = paren_group_strings.reduce((acc, curr, index) => {\n    if (index === 0) {\n      acc.push(curr);\n    } else {\n      acc.push(curr, paren_group_strings_set[index - 1]);\n    }\n    return acc;\n  }, []);\n  return paren_group_strings_set;\n};\n\n/* Input ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig is a palindrome */\nconst isPAlinDrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPAlinDrome", "gc": "<|endoftext|>/* Test if gniven strig is a palindrome */\nconst isPAlinDrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let palindrome = '';\n  let palindromeLength = 0;\n  let palindromePrefix = '';\n  let palindromeSuffix = '';\n  let palindromePrefixLength = 0;\n  let palindromeSuffixLength = 0;\n  let palindromePrefixReverse = '';\n  let palindromeSuffixReverse = '';\n  let palindromePrefixReverseLength = 0;\n  let palindromeSuffixReverseLength = 0;\n  let palindromePrefixReverseReverse = '';\n  let palindromeSuffixReverseReverse = '';\n  let palindromePrefixReverseReverseLength = 0;\n  let palindromeSuffixReverseReverseLength = 0;\n  let palindromePrefixReverseReverseReverse = '';\n  let palindromeSuffixReverseReverseReverse = '';\n  let palindromePrefixReverseReverseReverseLength = 0;\n  let palindromeSuffixReverseReverseReverseLength = 0;\n  let palindromePrefixReverseReverseReverseReverse = '';\n  let palindromeSuffixReverseReverseReverseReverse = '';\n  let palindromePrefixReverseReverseReverseReverseLength = 0;\n  let palindromeSuffixReverseReverseReverseReverseLength = 0;\n  let palindromePrefixReverseReverseReverseReverseReverse = '';\n  let palindromeSuffixReverseReverseReverseReverseReverse = '';\n  let palindromePrefixReverseReverseReverseReverseReverseReverse = '';\n  let palindromeSuffixReverseReverseReverseReverseReverse = '';\n  let palindromePrefixReverseReverseReverseReverseReverseReverse = '';\n  let palindromeSuffixReverseReverseReverseReverseReverseReverse = '';\n  let palindromePrefixReverseReverseReverseReverseReverseReverseReverse = '';\n  let palindromeSuffixReverseReverseReverseReverseReverseReverseReverse = '';\n  let palindromePrefixReverseReverseReverseReverseReverseReverseReverseReverse = '';\n  let palindromeSuffixReverseReverseReverseReverseReverseReverseReverseReverse = '';\n  let palindromePrefixReverseReverseReverseReverseReverseReverseReverseReverseReverse = '';\n  let palindromeSuffixReverseReverseReverseReverseReverseReverseReverseReverseReverse = '';\n  let palindromePrefixReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse = '';\n  let palindromeSuffixReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse = '';\n  let palindromePrefixReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse = '';\n  let palindromeSuffixReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse = '';\n  let palindromePrefixReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse = '';\n  let palindromeSuffixReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse = '';\n  let palindromePrefixReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse = '';\n  let palindromeSuffixReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse = '';\n  let palindromePrefixReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makEAPiLe(3)\n  [3, 5, 7]\n  */\nconst makEAPiLe = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makEAPiLe", "gc": "<|endoftext|>/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makEAPiLe(3)\n  [3, 5, 7]\n  */\nconst makEAPiLe = (n) => {\n  let level = [];\n  let levelNum = 1;\n  let levelNumOdd = 0;\n  let levelNumEven = 0;\n  let levelNumOddEven = 0;\n  let levelNumEvenOdd = 0;\n  let levelNumEvenOddEven = 0;\n  let levelNumEvenOddOdd = 0;\n  let levelNumEvenOddEvenOdd = 0;\n  let levelNumEvenOddOddEvenOdd = 0;\n  let levelNumEvenOddOddEvenOddEven = 0;\n  let levelNumEvenOddOddEvenOddOdd = 0;\n  let levelNumEvenOddOddEvenOddOddEven = 0;\n  let levelNumEvenOddOddEvenOddOddOddOdd = 0;\n  let levelNumEvenOddOddEvenOddOddEvenOdd = 0;\n  let levelNumEvenOddOddEvenOddOddOddOddEven = 0;\n  let levelNumEvenOddOddEvenOddOddOddOddOddOdd = 0;\n  let levelNumEvenOddOddEvenOddOddOddEvenOddOddOdd = 0;\n  let levelNumEvenOddOddEvenOddOddOddOddOddEvenOdd = 0;\n  let levelNumEvenOddOddEvenOddOddOddOddOddOddOddEven = 0;\n  let levelNumEvenOddOddEvenOddOddOddOddOddOddOddOddOdd = 0;\n  let levelNumEvenOddOddEvenOddOddOddOddOddEvenOddOddOdd = 0;\n  let levelNumEvenOddOddEvenOddOddOddOddOddOddOddOddOddEven = 0;\n  let levelNumEvenOddOddEvenOddOddOddOddOddOddOddOddOddOddOddOdd = 0;\n  let levelNumEvenOddOddEvenOddOddOddOddOddOddOddOddOddOddOddEven = 0;\n  let levelNumEvenOddOddEvenOddOddOddOddOddOddOddOddOddOddOddOddOddOdd = 0;\n  let levelNumEvenOddOddEvenOddOddOddOddOddOddOddOddOddOddOddOddOddOddEven = 0;\n  let levelNumEvenOddOddEvenOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddEven = 0;\n  let levelNumEvenOddOddEvenOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddEven = 0;\n  let levelNumEvenOddOddEvenOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddO", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  worDsStRing(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  worDsStRing(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst worDsStRing = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "worDsStRing", "gc": "<|endoftext|>/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  worDsStRing(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  worDsStRing(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst worDsStRing = (s) => {\n  const words = s.split(/[,\\s\\s]+/);\n  return words.map((word) => word.trim());\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  worDsStRing(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  worDsStRing(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst worDsStRing = s => {\n  const words = s.split(/[,\\s\\s]+/);\n  return words.map((word) => word.trim());\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  worDsStRing(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  worDsStRing(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst worDsStRing = s => {\n  const words = s.split(/[,\\s\\s]+/);\n  return words.map((word) => word.trim());\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  worDsStRing(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  worDsStRing(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst worDsStRing = s => {\n  const words = s.split(/[,\\s\\s]+/);\n  return words.map((word) => word.trim());\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  worDsStRing(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  worDsStRing(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst worDsStRing = s => {\n  const words = s.split(/[,\\s\\s]+/);\n  return words.map((word) => word.trim());\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  worDsStRing(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  worDsStRing(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst worDsStRing = s => {\n  const words = s.split(/[,\\s\\s]+/);\n  return words.map((word) => word.trim());\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  worDsStRing(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  worDsStRing(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst worDsStRing = s => {\n  const words = s.split(/[,\\s\\s]+/);\n  return words.map((word) => word.trim());\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  worDsStRing(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  worDsStRing(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst worDsStRing = s => {\n  const words = s.split(/[,\\s\\s]+/);\n  return words.map((word) => word.trim());\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  worDsStRing(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  worDsStRing(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst worDsStRing = s => {\n  const words = s.split(/[,\\s\\s]+/);\n  return words.map((word) => word.trim());\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  worDsStRing(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  worDsStRing(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst worDsStRing = s => {\n  const words = s.split(/[,\\s\\s]+/);\n  return words.map((word) => word.trim());\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  worDsStRing(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  worDsStRing(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst worDsStRing = s => {\n  const words = s.split(/[,\\s\\s]+/);\n  return words.map((word) => word.trim());\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  worDsStRing(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  worDsStRing(\"One, two, three, four, five, six\") == [\"One", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/102", "prompt": "/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choOseNUm(12, 15) = 14\n  choOseNUm(13, 12) = -1\n  */\nconst choOseNUm = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "choOseNUm", "gc": "<|endoftext|>/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choOseNUm(12, 15) = 14\n  choOseNUm(13, 12) = -1\n  */\nconst choOseNUm = (x, y) => {\n  const num1 = Math.floor(x / 2);\n  const num2 = Math.floor(y / 2);\n  if (num1 === num2) {\n    return num1;\n  }\n  return -1;\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest odd integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choOseNUm(12, 15) = 15\n  choOseNUm(13, 12) = -1\n  */\nconst choOseNUm = (x, y) => {\n  const num1 = Math.floor(x / 2);\n  const num2 = Math.floor(y / 2);\n  if (num1 === num2) {\n    return num1;\n  }\n  return -1;\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choOseNUm(12, 15) = 12\n  choOseNUm(13, 12) = -1\n  */\nconst choOseNUm = (x, y) => {\n  const num1 = Math.floor(x / 2);\n  const num2 = Math.floor(y / 2);\n  if (num1 === num2) {\n    return num1;\n  }\n  return -1;\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choOseNUm(12, 15) = 15\n  choOseNUm(13, 12) = -1\n  */\nconst choOseNUm = (x, y) => {\n  const num1 = Math.floor(x / 2);\n  const num2 = Math.floor(y / 2);\n  if (num1 === num2) {\n    return num1;\n  }\n  return -1;\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choOseNUm(12, 15) = 15\n  choOseNUm(13, 12) = -1\n  */\nconst choOseNUm = (x, y) => {\n  const num1 = Math.floor(x / 2);\n  const num2 = Math.floor(y / 2);\n  if (num1 === num2) {\n    return num1;\n  }\n  return -1;\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choOseNUm(12, 15) = 15\n  choOseNUm(13, 12) = -1\n  */\nconst choOseNUm = (x, y) => {\n  const num1 = Math.floor(x / 2);\n  const num2 = Math.floor(y / 2);\n  if (num1 === num2) {\n    return num1;\n  }\n  return -1;\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choOseNUm(12, 15) = 15\n  choOseNUm(13, 12) = -1\n  */\nconst choOseNUm = (x, y) => {\n  const num1 = Math.floor(x / 2);\n  const num2 = Math.floor(y / 2);\n  if (num1 === num2) {\n    return num1;\n  }\n  return -1;\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choOseNUm(12, 15) = 15\n  choOseNUm(13, 12) = -1\n  */\nconst choOseNUm = (x, y) => {\n  const num1 = Math.floor(x / 2);\n  const num2 = Math.floor(y / 2);\n  if (num1 === num2) {\n    return num1;\n  }\n  return -1;\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choOseNUm(12, 15) = 15\n  choOseNUm(13, 12) = -1\n  */\nconst choOseNUm = (x, y) => {\n  const num1 = Math.floor(x / 2);\n  const num2 = Math.floor(y / 2);\n  if (num1 === num2) {\n    return num1;\n  }\n  return -1;\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choOseNUm(12, 15) = 15\n  choOseNUm(13, 12) = -1\n  */\nconst choOseNUm = (x, y) => {\n  const num1 = Math.floor(x / 2);\n  const num2 = Math.floor(y / 2);\n  if (num1 === num2) {\n    return num1;\n  }\n  return -1;\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choOseNUm(12, 15) = 15\n  choOseNUm(13, 12) = -1\n  */\nconst choOseNUm = (x, y) => {\n  const num1 = Math.floor(x / 2);\n  const num2 = Math.floor(y / 2);\n  if (num1 === num2) {\n    return num1;\n  }\n  return -1;\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choOseNUm(12, 15) = 15\n  choOseNUm(13, 12) = -1\n  */\nconst choOseNUm = (x, y) => {\n  const num1 = Math.floor(x / 2);\n  const num2 = Math.floor(y / 2);\n  if (num1 === num2) {\n    return num1;\n  }\n  return -1;\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choOseNUm(12, 15) = 15\n  choOseNUm(13, 12) = -1\n  */\nconst choOseNUm = (x, y) => {\n  const num1 = Math.floor(x / 2);\n  const num2 = Math.floor(y / 2);\n  if (num1 === num2) {\n    return num1;\n  }\n  return -1;\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choOseNUm(12, 15) = 15\n  choOseNUm(13, 12) = -1\n  */\nconst choOseNUm = (x, y) => {\n  const num1 = Math.floor(x / 2);\n  const num2 = Math.floor(y / 2);\n  if (num1 === num2) {\n    return num1;\n  }\n  return -1;\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choOseNUm(12, 15) = 15\n  choOseNUm(13, 12) = -1\n  */\nconst ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/103", "prompt": "/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  rouNdedavg(1, 5) => \"0b11\"\n  rouNdedavg(7, 5) => -1\n  rouNdedavg(10, 20) => \"0b1111\"\n  rouNdedavg(20, 33) => \"0b11010\"\n  */\nconst rouNdedavg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "rouNdedavg", "gc": "<|endoftext|>/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  rouNdedavg(1, 5) => \"0b11\"\n  rouNdedavg(7, 5) => -1\n  rouNdedavg(10, 20) => \"0b1111\"\n  rouNdedavg(20, 33) => \"0b11010\"\n  */\nconst rouNdedavg = (n, m) => {\n  let sum = 0;\n  let count = 0;\n  let binary = \"\";\n  for (let i = n; i <= m; i++) {\n    sum += i;\n    count++;\n  }\n  binary = sum.toString(2);\n  if (count > 1) {\n    binary = binary.substring(0, binary.length - 1);\n  }\n  return binary;\n};\n\n/*\n  You are given two positive integers n and m, and your task is to compute the\n  largest power of 2 that divides both n and m. \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  pow2Ndedavg(1, 5) => \"0b11\"\n  pow2Ndedavg(7, 5) => -1\n  pow2Ndedavg(10, 20) => \"0b1111\"\n  pow2Ndedavg(20, 33) => \"0b11010\"\n  */\nconst pow2Ndedavg = (n, m) => {\n  let sum = 0;\n  let count = 0;\n  let binary = \"\";\n  for (let i = n; i <= m; i++) {\n    sum += i;\n    count++;\n  }\n  binary = sum.toString(2);\n  if (count > 1) {\n    binary = binary.substring(0, binary.length - 1);\n  }\n  return binary;\n};\n\n/*\n  You are given two positive integers n and m, and your task is to compute the\n  smallest power of 2 that divides both n and m. \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  pow2Ndedavg(1, 5) => \"0b11\"\n  pow2Ndedavg(7, 5) => -1\n  pow2Ndedavg(10, 20) => \"0b1111\"\n  pow2Ndedavg(20, 33) => \"0b11010\"\n  */\nconst pow2Nedavg = (n, m) => {\n  let sum = 0;\n  let count = 0;\n  let binary = \"\";\n  for (let i = n; i <= m; i++) {\n    sum += i;\n    count++;\n  }\n  binary = sum.toString(2);\n  if (count > 1) {\n    binary = binary.substring(0, binary.length - 1);\n  }\n  return binary;\n};\n\n/*\n  You are given two positive integers n and m, and your task is to compute the\n  largest power of 2 that divides both n and m. \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  pow2Nedavg(1, 5) => \"0b11\"\n  pow2Nedavg(7, 5) => -1\n  pow2Nedavg(10, 20) => \"0b1111\"\n  pow2Nedavg(20, 33) => \"0b11010\"\n  */\nconst pow2Nedavg = (n, m) => {\n  let sum = 0;\n  let count = 0;\n  let binary = \"\";\n  for (let i = n; i <= m; i++) {\n    sum += i;\n    count++;\n  }\n  binary = sum.toString(2);\n  if (count > 1) {\n    binary = binary.substring(0, binary.length - 1);\n  }\n  return binary;\n};\n\n/*\n  You are given two positive integers n and m, and your task is to compute the\n  smallest power of 2 that divides both n and m. \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  pow2Nedavg(1, 5) => \"0b11\"\n  pow2Nedavg(7, 5) => -1\n  pow2Nedavg(10, 20) => \"0b1111\"\n  pow2Nedavg(20, 33) => \"0b11010\"\n  */\nconst pow2Nedavg = (n, m) => {\n  let sum = 0;\n  let count = 0;\n  let binary = \"\";\n  for (let i = n; i <= m; i++) {\n    sum += i;\n    count++;\n  }\n  binary = sum.toString(2);\n  if (count > 1) {\n    binary = binary.substring(0, binary.length - 1);\n  }\n  return binary;\n};\n\n/*\n  You are given two positive integers n and m, and your task is to compute the\n  largest power of 2 that divides both n and m. \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  pow2Nedavg(1, 5) => \"0b11\"\n  pow2Nedavg(7, 5) => -1\n  pow2Nedavg(10, 20) => \"0b1111\"\n  pow2Nedavg(20, 33) => \"0b11010\"\n  */\nconst pow2Nedavg = (n, m) => {\n  let sum = 0;\n  let count = 0;\n  let binary = \"\";\n  for (let i = n; i <= m; i++) {\n    sum += i;\n    count++;\n  }\n  binary = sum.toString(2);\n  if (count > 1) {\n    binary = binary.substring(0, binary.length - 1);\n  }\n  return binary;\n};\n\n/*\n  You are given two positive integers n and m, and your task is to compute the\n  smallest power of 2 that divides both n and m. \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  pow2Nedavg(1, 5) => \"0b11\"\n  pow2Nedavg(7, 5) => -1\n  pow2Nedavg(10, 20) => \"0b1111\"\n  pow2Nedavg(20, 33) => \"0b11010\"\n  */\nconst pow2Nedavg = (n, m) => {\n  let sum = 0;\n  let count = 0;\n  let binary = \"\";\n  for (let i = n; i <= m; i++) {\n    sum += i;\n    count++;\n  }\n  binary = sum.toString(2);\n  if (count > 1) {\n    binary = binary.substring(0, binary.length - 1);\n  }\n  return binary;\n};\n\n/*\n  You are given two positive integers n and m, and your task is to compute the\n  largest power of 2 that divides both n and m. \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  pow2Nedavg(1, 5) => \"0b11\"\n  pow2Nedavg(7, 5) => -1\n  pow2Nedavg(10, 20) => \"0b1111\"\n  pow2Nedavg(20, 33) => \"0b11010\"\n  */\nconst pow2Nedavg = (n, m) => {\n  let sum = 0;\n  let count = 0;\n  let binary = \"\";\n  for (let i = n; i <= m; i++) {\n    sum += i;\n    count++;\n  }\n  binary = sum.toString(2);\n  if (count > 1) {\n    binary = binary.substring(0, binary.length - 1);\n  }\n  return binary;\n};\n\n/*\n  You are given two positive integers n and m, and your task is to compute the\n  smallest ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniQueDIgits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniQueDIgits([152, 323, 1422, 10])\n  []\n  */\nconst uniQueDIgits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniQueDIgits", "gc": "<|endoftext|>/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniQueDIgits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniQueDIgits([152, 323, 1422, 10])\n  []\n  */\nconst uniQueDIgits = (x) => {\n  const res = [];\n  const len = x.length;\n  let i = 0;\n  let j = 0;\n  while (i < len) {\n    if (x[i] % 2 === 0) {\n      res.push(x[i]);\n    }\n    i++;\n  }\n  while (j < len) {\n    if (x[j] % 2 === 0) {\n      res.push(x[j]);\n    }\n    j++;\n  }\n  return res;\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that has any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniQueDIgits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniQueDIgits([152, 323, 1422, 10])\n  []\n  */\nconst uniQueDIgitsEven = xs => {\n  const res = [];\n  const len = xs.length;\n  let i = 0;\n  let j = 0;\n  while (i < len) {\n    if (xs[i] % 2 === 0) {\n      res.push(xs[i]);\n    }\n    i++;\n  }\n  while (j < len) {\n    if (xs[j] % 2 === 0) {\n      res.push(xs[j]);\n    }\n    j++;\n  }\n  return res;\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that has any odd digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniQueDIgits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniQueDIgits([152, 323, 1422, 10])\n  []\n  */\nconst uniQueDIgitsOdd = xs => {\n  const res = [];\n  const len = xs.length;\n  let i = 0;\n  let j = 0;\n  while (i < len) {\n    if (xs[i] % 2!== 0) {\n      res.push(xs[i]);\n    }\n    i++;\n  }\n  while (j < len) {\n    if (xs[j] % 2!== 0) {\n      res.push(xs[j]);\n    }\n    j++;\n  }\n  return res;\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that has any even digit or odd digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniQueDIgits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniQueDIgits([152, 323, 1422, 10])\n  []\n  */\nconst uniQueDIgitsEvenOdd = xs => {\n  const res = [];\n  const len = xs.length;\n  let i = 0;\n  let j = 0;\n  while (i < len) {\n    if (xs[i] % 2 === 0 || xs[j] % 2 === 0) {\n      res.push(xs[i]);\n    }\n    i++;\n    j++;\n  }\n  while (j < len) {\n    if (xs[i] % 2 === 0 || xs[j] % 2!== 0) {\n      res.push(xs[j]);\n    }\n    j++;\n  }\n  return res;\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that has any even digit or odd digit and has even or odd \n  digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniQueDIgits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniQueDIgits([152, 323, 1422, 10])\n  []\n  */\nconst uniQueDIgitsEvenOddEven = xs => {\n  const res = [];\n  const len = xs.length;\n  let i = 0;\n  let j = 0;\n  while (i < len) {\n    if (xs[i] % 2 === 0 || xs[j] % 2 === 0) {\n      res.push(xs[i]);\n    }\n    i++;\n    j++;\n  }\n  while (j < len) {\n    if (xs[i] % 2 === 0 || xs[j] % 2!== 0) {\n      res.push(xs[j]);\n    }\n    j++;\n  }\n  return res;\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that has any even digit or odd digit and has even or odd \n  digit and has even or odd digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniQueDIgits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniQueDIgits([152, 323, 1422, 10])\n  []\n  */\nconst uniQueDIgitsEvenOddOddEven = xs => {\n  const res = [];\n  const len = xs.length;\n  let i = 0;\n  let j = 0;\n  while (i < len) {\n    if (xs[i] % 2 === 0 || xs[j] % 2 === 0 || xs[i] % 2 === 0 || xs[j] % 2 === 0) {\n      res.push(xs[i]);\n    }\n    i++;\n    j++;\n  }\n  while (j < len) {\n    if (xs[i] % 2 === 0 || xs[j] % 2 === 0 || xs[i] % 2 === 0 || xs[j] % 2!== 0) {\n      res.push(xs[j]);\n    }\n    j++;\n  }\n  return res;\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that has any even digit or odd digit and has even or odd \n  digit and has even or odd digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniQueDIgits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniQueDIgits([152, 323, 1422, 10])\n  []\n  */\nconst uniQueDIgitsEvenOddOddOddEven = xs => {\n  const res = [];\n  const len = xs.length;\n  let i = 0;\n  let j = 0;\n  while (i < len) {\n    if (xs[i] % 2 === 0 || xs[j] % 2 === 0 || xs[i] % 2 === 0 || xs[j] % 2 === 0 || xs[i] % 2 === 0 || xs[j] % 2 === 0) {\n      res.push(xs[i]);\n    }\n    i++;\n    j++;\n  }\n  while (j < len) {\n    if (xs[i] % 2 === 0 || xs[j] % 2 === 0 || xs[i] % 2 === 0 || xs[j] % 2 === 0 || xs[i] % 2 === 0 || xs[j] % 2!== 0) {\n      res.push(xs[j]);\n    }\n    j++;\n  }\n  return res;\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that has any even digit or odd digit and has even or odd \n  digit and has even or odd digit and has even or odd digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniQueDIgits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniQueDIgits([152, 323, 1422, 10])\n  []\n  */\nconst uniQueDIgitsEvenOddOddOddOddEven = xs => {\n  const res = [];\n  const len = xs.length;\n  let i = 0;\n  let j = 0;\n  while (i < len) {\n    if (xs[i] % 2 === 0 || xs[j] % 2 === 0 || xs[i] % 2 === 0 || xs[j] % 2 === 0 || xs[i] % 2 === 0 || xs[j] % 2 === 0 || xs[i] % 2 ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLEngtH = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLEngtH", "gc": "<|endoftext|>/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLEngtH = (arr) => {\n  const reversed = arr.slice().reverse();\n  const reversedArr = reversed.map((val, index) => reversed[index]);\n  return reversedArr;\n};\n\n/**\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLEngtH2 = (arr) => {\n  const reversed = arr.slice().reverse();\n  const reversedArr = reversed.map((val, index) => reversed[index]);\n  return reversedArr;\n};\n\n/**\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLEngtH3 = (arr) => {\n  const reversed = arr.slice().reverse();\n  const reversedArr = reversed.map((val, index) => reversed[index]);\n  return reversedArr;\n};\n\n/**\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLEngtH4 = (arr) => {\n  const reversed = arr.slice().reverse();\n  const reversedArr = reversed.map((val, index) => reversed[index]);\n  return reversedArr;\n};\n\n/**\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLEngtH5 = (arr) => {\n  const reversed = arr.slice().reverse();\n  const reversedArr = reversed.map((val, index) => reversed[index]);\n  return reversedArr;\n};\n\n/**\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLEngtH6 = (arr) => {\n  const reversed = arr.slice().reverse();\n  const reversedArr = reversed.map((val, index) => reversed[index]);\n  return reversedArr;\n};\n\n/**\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/106", "prompt": "/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "gc": "<|endoftext|>/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(result.reduce((acc, val) => acc + val, 1));\n    }\n  }\n  return result;\n};\n\n// Implement the function g that takes two parameters,\n// a and b, and returns a list of size a, such that the value of the element at index i is the product of a\n// and b if i is even or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n// the product of a and b is the multiplication of the numbers from 1 to i (a * b).\n// Example:\n// g(6, 3) == [6, 24, 120]\n// g(6, 2) == [6, 24, 120]\n// g(6, 1) == [6, 24, 120]\n// g(6, 0) == [6, 24, 120]\n// g(6, -1) == [6, 24, 120]\n// g(6, -2) == [6, 24, 120]\n// g(6, -3) == [6, 24, 120]\n// g(6, -4) == [6, 24, 120]\n// g(6, -5) == [6, 24, 120]\n// g(6, -6) == [6, 24, 120]\n// g(6, -7) == [6, 24, 120]\n// g(6, -8) == [6, 24, 120]\n// g(6, -9) == [6, 24, 120]\n// g(6, -10) == [6, 24, 120]\n// g(6, -11) == [6, 24, 120]\n// g(6, -12) == [6, 24, 120]\n// g(6, -13) == [6, 24, 120]\n// g(6, -14) == [6, 24, 120]\n// g(6, -15) == [6, 24, 120]\n// g(6, -16) == [6, 24, 120]\n// g(6, -17) == [6, 24, 120]\n// g(6, -18) == [6, 24, 120]\n// g(6, -19) == [6, 24, 120]\n// g(6, -20) == [6, 24, 120]\n// g(6, -21) == [6, 24, 120]\n// g(6, -22) == [6, 24, 120]\n// g(6, -23) == [6, 24, 120]\n// g(6, -24) == [6, 24, 120]\n// g(6, -25) == [6, 24, 120]\n// g(6, -26) == [6, 24, 120]\n// g(6, -27) == [6, 24, 120]\n// g(6, -28) == [6, 24, 120]\n// g(6, -29) == [6, 24, 120]\n// g(6, -30) == [6, 24, 120]\n// g(6, -31) == [6, 24, 120]\n// g(6, -32) == [6, 24, 120]\n// g(6, -33) == [6, 24, 120]\n// g(6, -34) == [6, 24, 120]\n// g(6, -35) == [6, 24, 120]\n// g(6, -36) == [6, 24, 120]\n// g(6, -37) == [6, 24, 120]\n// g(6, -38) == [6, 24, 120]\n// g(6, -39) == [6, 24, 120]\n// g(6, -40) == [6, 24, 120]\n// g(6, -41) == [6, 24, 120]\n// g(6, -42) == [6, 24, 120]\n// g(6, -43) == [6, 24, 120]\n// g(6, -44) == [6, 24, 120]\n// g(6, -45) == [6, 24, 120]\n// g(6, -46) == [6, 24, 120]\n// g(6, -47) == [6, 24, 120]\n// g(6, -48) == [6, 24, 120]\n// g(6, -49) == [6, 24, 120]\n// g(6, -50) == [6, 24, 120]\n// g(6, -51) == [6, 24, 120]\n// g(6, -52) == [6, 24, 120]\n// g(6, -53) == [6, 24, 120]\n// g(6, -54) == [6, 24, 120]\n// g(6, -55) == [6, 24, 120]\n// g(6, -56) == [6, 24, 120]\n// g(6, -57) == [6, 24, 120]\n// g(6, -58) == [6, 24, 120]\n// g(6, -59) == [6, 24, 120]\n// g(6, -60) == [6, 24, 120]\n// g(6, -61) == [6, 24, 120]\n// g(6, -62) == [6, 24, 120]\n// g(6, -63) == [6, 24, 120]\n// g(6, -64) == [6, 24, 120]\n// g(6, -65) == [6, 24, 120]\n// g(6, -66) == [6, 24, 120]\n// g(6, -67) == [6, 24, 120]\n// g(6, -68) == [6, 24, 120]\n// g(6, -69) == [6, 24, 120]\n// g(6, -70) == [6, 24, 120]\n// g(6, -71) == [6, 24, 120]\n// g(6, -72) == [6, 24, 120]\n// g(6, -73) == [6, 24, 120]\n// g(6, -74) == [6, 24, 120]\n// g(6, -75) == [6, 24, 120]\n// g(6, -76) == [6, 24, 120]\n// g(6, -77) == [6, 24, 120]\n// g(6, -78) == [6, 24, 120]\n// g(6, -79) == [6, 24, 120]\n// g(6, -80) == [6, 24, 120]\n// g(6, -81) == [6, 24, 120]\n// g(6, -82) == [6, 24, 120]\n// g(6, -83) == [6, 24, 120]\n// g(6, -84) == [6, 24, 120]\n// g(6, -85) == [6, 24, 120]\n// g(6, -86) == [6, 24, 120]\n// g(6, -87) == [6, 24, 120]\n// g(6, -88) == [6, 24, 120]\n// g(6, -89) == [6, 24, 120]\n// g(6, -90) == [6, 24, 120]\n// g(6, -91) == [6, 24, 120]\n// g(6, -92) == [6, 24, 120]\n// g(6, -93) == [6, 24, 120]\n// g(6, -94) == [6, 24, 120]\n// g(6, -95) == [6, 24, 120]\n// g(6, -96) == [6, 24, 120]\n// g(6, -97) == [6, 24, 120]\n// g(6, -98) == [6, 24, 120]\n// g(6, -99) == [6, 24, 120]\n// g(6, -100) == [6, 24, 120]\n// g(6, -10", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst eveNOddpalinDroMe = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "eveNOddpalinDroMe", "gc": "<|endoftext|>/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst eveNOddpalinDroMe = (n) => {\n  const even = n & 1;\n  const odd = n >> 1;\n  return [even, odd];\n};\n\n/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(2, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (2, 3)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst eodNOddpalinDroMe = (n) => {\n  const even = n & 1;\n  const odd = n >> 1;\n  return [even, odd];\n};\n\n/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(3, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (3, 4)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst eNOddpalinDroMe = (n) => {\n  const even = n & 1;\n  const odd = n >> 1;\n  return [even, odd];\n};\n\n/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(4, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst eodNOddpalinDroMe = (n) => {\n  const even = n & 1;\n  const odd = n >> 1;\n  return [even, odd];\n};\n\n/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(5, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (5, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. five of them are even, and six of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (5, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. five of them are even, and six of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst eNOddpalinDroMe = (n) => {\n  const even = n & 1;\n  const odd = n >> 1;\n  return [even, odd];\n};\n\n/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(6, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (6, 7)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. six of them are even, and seven of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (6, 7)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. six of them are even, and seven of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst eodNOddpalinDroMe = (n) => {\n  const even = n & 1;\n  const odd = n >> 1;\n  return [even, odd];\n};\n\n/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(7, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (7, 8)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. seven of them are even, and eight of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (7, 8)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. seven of them are even, and eight of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst eNOddpalinDroMe = (n) => {\n  const even = n & 1;\n  const odd = n >> 1;\n  return [even, odd];\n};\n\n/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(8, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (8, 9)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. eight of them are even, and nine of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (8, 9)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. eight of them are even, and nine of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst eodNOddpalinDroMe = (n) => {\n  const even = n & 1;\n  const odd = n >> 1;\n  return [even, odd];\n};\n\n/*\n  Given ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function couNtNuMs which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> couNtNuMs([]) == 0\n  >>> couNtNuMs([-1, 11, -11]) == 1\n  >>> couNtNuMs([1, 1, 2]) == 3\n  */\nconst couNtNuMs = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "couNtNuMs", "gc": "<|endoftext|>/*\n  Write a function couNtNuMs which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> couNtNuMs([]) == 0\n  >>> couNtNuMs([-1, 11, -11]) == 1\n  >>> couNtNuMs([1, 1, 2]) == 3\n  */\nconst couNtNuMs = (arr) => {\n  let n = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= 0) {\n      n += arr[i];\n    }\n  }\n  return n;\n};\n\n/*\n  Write a function couNtNuMs which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> couNtNuMs([]) == 0\n  >>> couNtNuMs([-1, 11, -11]) == 1\n  >>> couNtNuMs([1, 1, 2]) == 3\n  */\nconst couNtNuMs = (arr) => {\n  let n = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= 0) {\n      n += arr[i];\n    }\n  }\n  return n;\n};\n\n/*\n  Write a function couNtNuMs which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> couNtNuMs([]) == 0\n  >>> couNtNuMs([-1, 11, -11]) == 1\n  >>> couNtNuMs([1, 1, 2]) == 3\n  */\nconst couNtNuMs = (arr) => {\n  let n = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= 0) {\n      n += arr[i];\n    }\n  }\n  return n;\n};\n\n/*\n  Write a function couNtNuMs which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> couNtNuMs([]) == 0\n  >>> couNtNuMs([-1, 11, -11]) == 1\n  >>> couNtNuMs([1, 1, 2]) == 3\n  */\nconst couNtNuMs = (arr) => {\n  let n = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= 0) {\n      n += arr[i];\n    }\n  }\n  return n;\n};\n\n/*\n  Write a function couNtNuMs which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> couNtNuMs([]) == 0\n  >>> couNtNuMs([-1, 11, -11]) == 1\n  >>> couNtNuMs([1, 1, 2]) == 3\n  */\nconst couNtNuMs = (arr) => {\n  let n = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= 0) {\n      n += arr[i];\n    }\n  }\n  return n;\n};\n\n/*\n  Write a function couNtNuMs which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> couNtNuMs([]) == 0\n  >>> couNtNuMs([-1, 11, -11]) == 1\n  >>> couNtNuMs([1, 1, 2]) == 3\n  */\nconst couNtNuMs = (arr) => {\n  let n = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= 0) {\n      n += arr[i];\n    }\n  }\n  return n;\n};\n\n/*\n  Write a function couNtNuMs which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> couNtNuMs([]) == 0\n  >>> couNtNuMs([-1, 11, -11]) == 1\n  >>> couNtNuMs([1, 1, 2]) == 3\n  */\nconst couNtNuMs = (arr) => {\n  let n = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= 0) {\n      n += arr[i];\n    }\n  }\n  return n;\n};\n\n/*\n  Write a function couNtNuMs which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> couNtNuMs([]) == 0\n  >>> couNtNuMs([-1, 11, -11]) == 1\n  >>> couNtNuMs([1, 1, 2]) == 3\n  */\nconst couNtNuMs = (arr) => {\n  let n = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= 0) {\n      n += arr[i];\n    }\n  }\n  return n;\n};\n\n/*\n  Write a function couNtNuMs which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> couNtNuMs([]) == 0\n  >>> couNtNuMs([-1, 11, -11]) == 1\n  >>> couNtNuMs([1, 1, 2]) == 3\n  */\nconst couNtNuMs = (arr) => {\n  let n = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= 0) {\n      n += arr[i];\n    }\n  }\n  return n;\n};\n\n/*\n  Write a function couNtNuMs which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> couNtNuMs([]) == 0\n  >>> couNtNuMs([-1, 11, -11]) == 1\n  >>> couNtNuMs([1, 1, 2]) == 3\n  */\nconst couNtNuMs = (arr) => {\n  let n = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= 0) {\n      n += arr[i];\n    }\n  }\n  return n;\n};\n\n/*\n  Write a function couNtNuMs which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> couNtNuMs([]) == 0\n  >>> couNtNuMs([-1, 11, -11]) == 1\n  >>> couNtNuMs([1, 1, 2]) == 3\n  */\nconst couNtNuMs = (arr) => {\n  let n = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= 0) {\n      n += arr[i];\n    }\n  }\n  return n;\n};\n\n/*\n  Write a function co", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/109", "prompt": "/*We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  movEOneball([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  movEOneball([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst movEOneball = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "movEOneball", "gc": "<|endoftext|>/*We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  movEOneball([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  movEOneball([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst movEOneball = (arr) => {\n  let len = arr.length;\n  let count = 0;\n  let flag = true;\n  while (count < len) {\n    let temp = arr[count];\n    arr[count] = arr[count + 1];\n    arr[count + 1] = temp;\n    count++;\n  }\n  return flag;\n};\n\n/*\n  Given an array arr of N integers arr[1], arr[2],..., arr[N], \n  You are allowed to perform the following operation on the given array:\n  You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  movEOneball([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  movEOneball([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst movEOneball2 = (arr) => {\n  let len = arr.length;\n  let count = 0;\n  let flag = true;\n  while (count < len) {\n    let temp = arr[count];\n    arr[count] = arr[count + 1];\n    arr[count + 1] = temp;\n    count++;\n  }\n  return flag;\n};\n\n/*\n  Given an array arr of N integers arr[1], arr[2],..., arr[N], \n  You are allowed to perform the following operation on the given array:\n  You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  movEOneball([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  movEOneball([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst movEOneball3 = (arr) => {\n  let len = arr.length;\n  let count = 0;\n  let flag = true;\n  while (count < len) {\n    let temp = arr[count];\n    arr[count] = arr[count + 1];\n    arr[count + 1] = temp;\n    count++;\n  }\n  return flag;\n};\n\n/*\n  Given an array arr of N integers arr[1], arr[2],..., arr[N], \n  You are allowed to perform the following operation on the given array:\n  You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  movEOneball([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  movEOneball([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst movEOneball4 = (arr) => {\n  let len = arr.length;\n  let count = 0;\n  let flag = true;\n  while (count < len) {\n    let temp = arr[count];\n    arr[count] = arr[count + 1];\n    arr[count + 1] = temp;\n    count++;\n  }\n  return flag;\n};\n\n/*\n  Given an array arr of N integers arr[1], arr[2],..., arr[N], \n  You are allowed to perform the following operation on the given array:\n  You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  movEOneball([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  movEOneball([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst movEOneball5 = (arr) => {\n  let len = arr.length;\n  let count = 0;\n  let flag = true;\n  while (count < len) {\n    let temp = arr[count];\n    arr[count] = arr[count + 1];\n    arr[count + 1] = temp;\n    count++;\n  }\n  return flag;\n};\n\n/*\n  Given an array arr of N integers arr[1], arr[2],..., arr[N], \n  You are allowed to perform the following operation on the given array:\n  You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/11", "prompt": "/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> strIngXOr('010', '110')\n  '100'\n  */\nconst strIngXOr = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "strIngXOr", "gc": "<|endoftext|>/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> strIngXOr('010', '110')\n  '100'\n  */\nconst strIngXOr = (a, b) => {\n  let res = '';\n  for (let i = 0; i < a.length; i++) {\n    res += a.charAt(i) ^ b.charAt(i);\n  }\n  return res;\n};\n\n/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary AND (^) on these inputs and return result also as a string.\n  >>> strIngAnd('010', '110')\n  '100'\n  */\nconst strIngAnd = (a, b) => {\n  let res = '';\n  for (let i = 0; i < a.length; i++) {\n    res += a.charAt(i) & b.charAt(i);\n  }\n  return res;\n};\n\n/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary OR (|) on these inputs and return result also as a string.\n  >>> strIngOr('010', '110')\n  '100'\n  */\nconst strIngOr = (a, b) => {\n  let res = '';\n  for (let i = 0; i < a.length; i++) {\n    res += a.charAt(i) | b.charAt(i);\n  }\n  return res;\n};\n\n/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR (^) on these inputs and return result also as a string.\n  >>> strIngXOr('010', '110')\n  '100'\n  */\nconst strIngXOr = (a, b) => {\n  let res = '';\n  for (let i = 0; i < a.length; i++) {\n    res += a.charAt(i) ^ b.charAt(i);\n  }\n  return res;\n};\n\n/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary AND (^) on these inputs and return result also as a string.\n  >>> strIngAnd('010', '110')\n  '100'\n  */\nconst strIngAnd = (a, b) => {\n  let res = '';\n  for (let i = 0; i < a.length; i++) {\n    res += a.charAt(i) & b.charAt(i);\n  }\n  return res;\n};\n\n/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary OR (|) on these inputs and return result also as a string.\n  >>> strIngOr('010', '110')\n  '100'\n  */\nconst strIngOr = (a, b) => {\n  let res = '';\n  for (let i = 0; i < a.length; i++) {\n    res += a.charAt(i) | b.charAt(i);\n  }\n  return res;\n};\n\n/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR (^) on these inputs and return result also as a string.\n  >>> strIngXOr('010', '110')\n  '100'\n  */\nconst strIngXOr = (a, b) => {\n  let res = '';\n  for (let i = 0; i < a.length; i++) {\n    res += a.charAt(i) ^ b.charAt(i);\n  }\n  return res;\n};\n\n/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary AND (^) on these inputs and return result also as a string.\n  >>> strIngAnd('010', '110')\n  '100'\n  */\nconst strIngAnd = (a, b) => {\n  let res = '';\n  for (let i = 0; i < a.length; i++) {\n    res += a.charAt(i) & b.charAt(i);\n  }\n  return res;\n};\n\n/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary OR (|) on these inputs and return result also as a string.\n  >>> strIngOr('010', '110')\n  '100'\n  */\nconst strIngOr = (a, b) => {\n  let res = '';\n  for (let i = 0; i < a.length; i++) {\n    res += a.charAt(i) | b.charAt(i);\n  }\n  return res;\n};\n\n/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR (^) on these inputs and return result also as a string.\n  >>> strIngXOr('010', '110')\n  '100'\n  */\nconst strIngXOr = (a, b) => {\n  let res = '';\n  for (let i = 0; i < a.length; i++) {\n    res += a.charAt(i) ^ b.charAt(i);\n  }\n  return res;\n};\n\n/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary AND (^) on these inputs and return result also as a string.\n  >>> strIngAnd('010', '110')\n  '100'\n  */\nconst strIngAnd = (a, b) => {\n  let res = '';\n  for (let i = 0; i < a.length; i++) {\n    res += a.charAt(i) & b.charAt(i);\n  }\n  return res;\n};\n\n/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary OR (|) on these inputs and return result also as a string.\n  >>> strIngOr('010', '110')\n  '100'\n  */\nconst strIngOr = (a, b) => {\n  let res = '';\n  for (let i = 0; i < a.length; i++) {\n    res += a.charAt(i) | b.charAt(i);\n  }\n  return res;\n};\n\n/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR (^) on these inputs and return result also as a string.\n  >>> strIngXOr('010', '110')\n  '100'\n  */\nconst strIngXOr = (a, b) => {\n  let res = '';\n  for (let i = 0; i < a.length; i++) {\n    res += a.charAt(i) ^ b.charAt(i);\n  }\n  return res;\n};\n\n/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary AND (^) on these inputs and return result also as a string.\n  >>> strIngAnd('010', '110')\n  '100'\n  */\nconst strIngAnd = (a, b) => {\n  let res = '';\n  for (let i = 0; i < a.length; i++) {\n    res += a.charAt(i) & b.charAt(i);\n  }\n  return res;\n};\n\n/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary OR (|) on these inputs and return result also as a string.\n  >>> strIngOr('010', '110')\n  '100'\n  */\nconst strIngOr = (a, b) => {\n  let res = '';\n  for (let i = 0; i < a.length; i++) {\n    res += a.charAt(i) | b.charAt(i);\n  }\n  return res;\n};\n\n/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR (^) on these inputs and return result also as a string.\n  >>> strIngXOr('010', '110')\n  '100'\n  */\nconst strIngXOr = (a, b) => {\n  let res = '';\n  for (let i = 0; i < a.length; i++) {\n    res += a.charAt(i) ^ b.charAt(i);\n  }\n  return res;\n};\n\n/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary AND (^) on these inputs and return result also as a string.\n  >>> strIngAnd('010', '110')\n  '100'\n  */\nconst strIngAnd = (a, b) => {\n  let res = '';\n  for (let i = 0; i < a.length; i++) {\n    res += a.charAt(i) & b.charAt(i);\n  }\n  return res;\n};\n\n/* ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an excHangE of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of excHangEd elements between lst1 and lst2.\n  If it is possible to excHangE elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  excHangE([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  excHangE([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst excHangE = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "excHangE", "gc": "<|endoftext|>/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an excHangE of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of excHangEd elements between lst1 and lst2.\n  If it is possible to excHangE elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  excHangE([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  excHangE([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst excHangE = (lst1, lst2) => {\n  let isExcHanged = false;\n  let isExcHanged2 = false;\n  let isExcHanged3 = false;\n  let isExcHanged4 = false;\n  let isExcHanged5 = false;\n  let isExcHanged6 = false;\n  let isExcHanged7 = false;\n  let isExcHanged8 = false;\n  let isExcHanged9 = false;\n  let isExcHanged10 = false;\n  let isExcHanged11 = false;\n  let isExcHanged12 = false;\n  let isExcHanged13 = false;\n  let isExcHanged14 = false;\n  let isExcHanged15 = false;\n  let isExcHanged16 = false;\n  let isExcHanged17 = false;\n  let isExcHanged18 = false;\n  let isExcHanged19 = false;\n  let isExcHanged20 = false;\n  let isExcHanged21 = false;\n  let isExcHanged22 = false;\n  let isExcHanged23 = false;\n  let isExcHanged24 = false;\n  let isExcHanged25 = false;\n  let isExcHanged26 = false;\n  let isExcHanged27 = false;\n  let isExcHanged28 = false;\n  let isExcHanged29 = false;\n  let isExcHanged30 = false;\n  let isExcHanged31 = false;\n  let isExcHanged32 = false;\n  let isExcHanged33 = false;\n  let isExcHanged34 = false;\n  let isExcHanged35 = false;\n  let isExcHanged36 = false;\n  let isExcHanged37 = false;\n  let isExcHanged38 = false;\n  let isExcHanged39 = false;\n  let isExcHanged40 = false;\n  let isExcHanged41 = false;\n  let isExcHanged42 = false;\n  let isExcHanged43 = false;\n  let isExcHanged44 = false;\n  let isExcHanged45 = false;\n  let isExcHanged46 = false;\n  let isExcHanged47 = false;\n  let isExcHanged48 = false;\n  let isExcHanged49 = false;\n  let isExcHanged50 = false;\n  let isExcHanged51 = false;\n  let isExcHanged52 = false;\n  let isExcHanged53 = false;\n  let isExcHanged54 = false;\n  let isExcHanged55 = false;\n  let isExcHanged56 = false;\n  let isExcHanged57 = false;\n  let isExcHanged58 = false;\n  let isExcHanged59 = false;\n  let isExcHanged60 = false;\n  let isExcHanged61 = false;\n  let isExcHanged62 = false;\n  let isExcHanged63 = false;\n  let isExcHanged64 = false;\n  let isExcHanged65 = false;\n  let isExcHanged66 = false;\n  let isExcHanged67 = false;\n  let isExcHanged68 = false;\n  let isExcHanged69 = false;\n  let isExcHanged70 = false;\n  let isExcHanged71 = false;\n  let isExcHanged72 = false;\n  let isExcHanged73 = false;\n  let isExcHanged74 = false;\n  let isExcHanged75 = false;\n  let isExcHanged76 = false;\n  let isExcHanged77 = false;\n  let isExcHanged78 = false;\n  let isExcHanged79 = false;\n  let isExcHanged80 = false;\n  let isExcHanged81 = false;\n  let isExcHanged82 = false;\n  let isExcHanged83 = false;\n  let isExcHanged84 = false;\n  let isExcHanged85 = false;\n  let isExcHanged86 = false;\n  let isExcHanged87 = false;\n  let isExcHanged88 = false;\n  let isExcHanged89 = false;\n  let isExcHanged90 = false;\n  let isExcHanged91 = false;\n  let isExcHanged92 = false;\n  let isExcHanged93 = false;\n  let isExcHanged94 = false;\n  let isExcHanged95 = false;\n  let isExcHanged96 = false;\n  let isExcHanged97 = false;\n  let isExcHanged98 = false;\n  let isExcHanged99 = false;\n  let isExcHanged100 = false;\n  let isExcHanged101 = false;\n  let isExcHanged102 = false;\n  let isExcHanged103 = false;\n  let isExcHanged104 = false;\n  let isExcHanged105 = false;\n  let isExcHanged106 = false;\n  let isExcHanged107 = false;\n  let isExcHanged108 = false;\n  let isExcHanged109 = false;\n  let isExcHanged110 = false;\n  let isExcHanged111 = false;\n  let isExcHanged112 = false;\n  let isExcHanged113 = false;\n  let isExcHanged114 = false;\n  let isExcHanged115 = false;\n  let isExcHanged116 = false;\n  let isExcHanged117 = false;\n  let isExcHanged118 = false;\n  let isExcHanged119 = false;\n  let isExcHanged120 = false;\n  let isExcHanged121 = false;\n  let isExcHanged122 = false;\n  let isExcHanged123 = false;\n  let isExcHanged124 = false;\n  let isExcHanged125 = false;\n  let isExcHanged126 = false;\n  let isExcHanged127 = false;\n  let isExcHanged128 = false;\n  let isExcHanged129 = false;\n  let isExcHanged130 = false;\n  let isExcHanged131 = false;\n  let isExcHanged132 = false;\n  let isExcHanged133 = false;\n  let isExcHanged134 = false;\n  let isEx", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/111", "prompt": "/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  hisTogrAm('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  hisTogrAm('a b b a') == {'a': 2, 'b': 2}\n  hisTogrAm('a b c a b') == {'a': 2, 'b': 2}\n  hisTogrAm('b b b b a') == {'b': 4}\n  hisTogrAm('') == {}\n\n  */\nconst hisTogrAm = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "hisTogrAm", "gc": "<|endoftext|>/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  hisTogrAm('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  hisTogrAm('a b b a') == {'a': 2, 'b': 2}\n  hisTogrAm('a b c a b') == {'a': 2, 'b': 2}\n  hisTogrAm('b b b b a') == {'b': 4}\n  hisTogrAm('') == {}\n\n  */\nconst hisTogrAm = (test) => {\n  const letters = test.split(' ');\n  const letterMap = {};\n  letters.forEach((letter) => {\n    letterMap[letter] = letterMap[letter] || 0;\n    letterMap[letter]++;\n  });\n  return letterMap;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  hisTogrAm('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  hisTogrAm('a b b a') == {'a': 2, 'b': 2}\n  hisTogrAm('a b c a b') == {'a': 2, 'b': 2}\n  hisTogrAm('b b b b a') == {'b': 4}\n  hisTogrAm('') == {}\n\n  */\nconst hisTogrAm = () => {\n  const letters = hisTogrAm.split(' ');\n  const letterMap = {};\n  letters.forEach((letter) => {\n    letterMap[letter] = letterMap[letter] || 0;\n    letterMap[letter]++;\n  });\n  return letterMap;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  hisTogrAm('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  hisTogrAm('a b b a') == {'a': 2, 'b': 2}\n  hisTogrAm('a b c a b') == {'a': 2, 'b': 2}\n  hisTogrAm('b b b b a') == {'b': 4}\n  hisTogrAm('') == {}\n\n  */\nconst hisTogrAm = () => {\n  const letters = hisTogrAm.split(' ');\n  const letterMap = {};\n  letters.forEach((letter) => {\n    letterMap[letter] = letterMap[letter] || 0;\n    letterMap[letter]++;\n  });\n  return letterMap;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  hisTogrAm('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  hisTogrAm('a b b a') == {'a': 2, 'b': 2}\n  hisTogrAm('a b c a b') == {'a': 2, 'b': 2}\n  hisTogrAm('b b b b a') == {'b': 4}\n  hisTogrAm('') == {}\n\n  */\nconst hisTogrAm = () => {\n  const letters = hisTogrAm.split(' ');\n  const letterMap = {};\n  letters.forEach((letter) => {\n    letterMap[letter] = letterMap[letter] || 0;\n    letterMap[letter]++;\n  });\n  return letterMap;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  hisTogrAm('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  hisTogrAm('a b b a') == {'a': 2, 'b': 2}\n  hisTogrAm('a b c a b') == {'a': 2, 'b': 2}\n  hisTogrAm('b b b b a') == {'b': 4}\n  hisTogrAm('') == {}\n\n  */\nconst hisTogrAm = () => {\n  const letters = hisTogrAm.split(' ');\n  const letterMap = {};\n  letters.forEach((letter) => {\n    letterMap[letter] = letterMap[letter] || 0;\n    letterMap[letter]++;\n  });\n  return letterMap;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  hisTogrAm('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  hisTogrAm('a b b a') == {'a': 2, 'b': 2}\n  hisTogrAm('a b c a b') == {'a': 2, 'b': 2}\n  hisTogrAm('b b b b a') == {'b': 4}\n  hisTogrAm('') == {}\n\n  */\nconst hisTogrAm = () => {\n  const letters = hisTogrAm.split(' ');\n  const letterMap = {};\n  letters.forEach((letter) => {\n    letterMap[letter] = letterMap[letter] || 0;\n    letterMap[letter]++;\n  });\n  return letterMap;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  hisTogrAm('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  hisTogrAm('a b b a') == {'a': 2, 'b': 2}\n  hisTogrAm('a b c a b') == {'a': 2, 'b': 2}\n  hisTogrAm('b b b b a') == {'b': 4}\n  hisTogrAm('') == {}\n\n  */\nconst hisTogrAm = () => {\n  const letters = hisTogrAm.split(' ');\n  const letterMap = {};\n  letters.forEach((letter) => {\n    letterMap[letter] = letterMap[letter] || 0;\n    letterMap[letter]++;\n  });\n  return letterMap;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  hisTogrAm('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  hisTogrAm('a b b a') == {'a': 2, 'b': 2}\n  hisTogrAm('a b c a b') == {'a': 2, 'b': 2}\n  hisTogrAm('b b b b a') == {'b': 4}\n  hisTogrAm('') == {}\n\n  */\nconst hisTogrAm = () => {\n  const letters = hisTogrAm.split(' ');\n  const letterMap = {};\n  letters.forEach((letter) => {\n    letterMap[letter] = letterMap[letter] || 0;\n    letterMap[letter]++;\n  });\n  return letterMap;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/112", "prompt": "/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst revErsedeletE = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "revErsedeletE", "gc": "<|endoftext|>/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst revErsedeletE = (s, c) => {\n  let rev = s.split(\"\").reverse().join(\"\");\n  let rev_c = c.split(\"\").reverse().join(\"\");\n  let rev_c_rev = rev_c.split(\"\").reverse().join(\"\");\n  let rev_c_rev2 = rev_c_rev.split(\"\").reverse().join(\"\");\n  let rev_c_rev3 = rev_c_rev2.split(\"\").reverse().join(\"\");\n  let rev_c_rev4 = rev_c_rev3.split(\"\").reverse().join(\"\");\n  let rev_c_rev5 = rev_c_rev4.split(\"\").reverse().join(\"\");\n  let rev_c_rev6 = rev_c_rev5.split(\"\").reverse().join(\"\");\n  let rev_c_rev7 = rev_c_rev6.split(\"\").reverse().join(\"\");\n  let rev_c_rev8 = rev_c_rev7.split(\"\").reverse().join(\"\");\n  let rev_c_rev9 = rev_c_rev8.split(\"\").reverse().join(\"\");\n  let rev_c_rev10 = rev_c_rev9.split(\"\").reverse().join(\"\");\n  let rev_c_rev11 = rev_c_rev10.split(\"\").reverse().join(\"\");\n  let rev_c_rev12 = rev_c_rev11.split(\"\").reverse().join(\"\");\n  let rev_c_rev13 = rev_c_rev12.split(\"\").reverse().join(\"\");\n  let rev_c_rev14 = rev_c_rev13.split(\"\").reverse().join(\"\");\n  let rev_c_rev15 = rev_c_rev14.split(\"\").reverse().join(\"\");\n  let rev_c_rev16 = rev_c_rev15.split(\"\").reverse().join(\"\");\n  let rev_c_rev17 = rev_c_rev16.split(\"\").reverse().join(\"\");\n  let rev_c_rev18 = rev_c_rev17.split(\"\").reverse().join(\"\");\n  let rev_c_rev19 = rev_c_rev18.split(\"\").reverse().join(\"\");\n  let rev_c_rev20 = rev_c_rev19.split(\"\").reverse().join(\"\");\n  let rev_c_rev21 = rev_c_rev20.split(\"\").reverse().join(\"\");\n  let rev_c_rev22 = rev_c_rev21.split(\"\").reverse().join(\"\");\n  let rev_c_rev23 = rev_c_rev22.split(\"\").reverse().join(\"\");\n  let rev_c_rev24 = rev_c_rev23.split(\"\").reverse().join(\"\");\n  let rev_c_rev25 = rev_c_rev24.split(\"\").reverse().join(\"\");\n  let rev_c_rev26 = rev_c_rev25.split(\"\").reverse().join(\"\");\n  let rev_c_rev27 = rev_c_rev26.split(\"\").reverse().join(\"\");\n  let rev_c_rev28 = rev_c_rev27.split(\"\").reverse().join(\"\");\n  let rev_c_rev29 = rev_c_rev28.split(\"\").reverse().join(\"\");\n  let rev_c_rev30 = rev_c_rev29.split(\"\").reverse().join(\"\");\n  let rev_c_rev31 = rev_c_rev30.split(\"\").reverse().join(\"\");\n  let rev_c_rev32 = rev_c_rev31.split(\"\").reverse().join(\"\");\n  let rev_c_rev33 = rev_c_rev32.split(\"\").reverse().join(\"\");\n  let rev_c_rev34 = rev_c_rev33.split(\"\").reverse().join(\"\");\n  let rev_c_rev35 = rev_c_rev34.split(\"\").reverse().join(\"\");\n  let rev_c_rev36 = rev_c_rev35.split(\"\").reverse().join(\"\");\n  let rev_c_rev37 = rev_c_rev36.split(\"\").reverse().join(\"\");\n  let rev_c_rev38 = rev_c_rev37.split(\"\").reverse().join(\"\");\n  let rev_c_rev39 = rev_c_rev38.split(\"\").reverse().join(\"\");\n  let rev_c_rev40 = rev_c_rev39.split(\"\").reverse().join(\"\");\n  let rev_c_rev41 = rev_c_rev40.split(\"\").reverse().join(\"\");\n  let rev_c_rev42 = rev_c_rev41.split(\"\").reverse().join(\"\");\n  let rev_c_rev43 = rev_c_rev42.split(\"\").reverse().join(\"\");\n  let rev_c_rev44 = rev_c_rev43.split(\"\").reverse().join(\"\");\n  let rev_c_rev45 = rev_c_rev44.split(\"\").reverse().join(\"\");\n  let rev_c_rev46 = rev_c_rev45.split(\"\").reverse().join(\"\");\n  let rev_c_rev47 = rev_c_rev46.split(\"\").reverse().join(\"\");\n  let rev_c_rev48 = rev_c_rev47.split(\"\").reverse().join(\"\");\n  let rev_c_rev49 = rev_c_rev48.split(\"\").reverse().join(\"\");\n  let rev_c_rev50 = rev_c_rev49.split(\"\").reverse().join(\"\");\n  let rev_c_rev51 = rev_c_rev50.split(\"\").reverse().join(\"\");\n  let rev_c_rev52 = rev_c_rev51.split(\"\").reverse().join(\"\");\n  let rev_c_rev53 = rev_c_rev52.split(\"\").reverse().join(\"\");\n  let rev_c_rev54 = rev_c_rev53.split(\"\").reverse().join(\"\");\n  let rev_c_rev55 = rev_c_rev54.split(\"\").reverse().join(\"\");\n  let rev_c_rev56 = rev_c_rev55.split(\"\").reverse().join(\"\");\n  let rev_c_rev57 = rev_c_rev56.split(\"\").reverse().join(\"\");\n  let rev_c_rev58 = rev_c_rev57.split(\"\").reverse().join(\"\");\n  let rev_c_rev59 = rev_c_rev58.split(\"\").reverse().join(\"\");\n  let rev_c_rev60 = rev_c_rev59.split(\"\").reverse().join(\"\");\n  let rev_c_rev61 = rev_c_rev60.split(\"\").reverse().join(\"\");\n  let rev_c_rev62 = rev_c_rev61.split(\"\").reverse().join(\"\");\n  let rev_c_rev63 = rev_c_rev62.split(\"\").reverse().join(\"\");\n  let rev_c_rev64 = rev_c_rev63.split(\"\").reverse().join(\"\");\n  let rev_c_rev65 = rev_c_rev64.split(\"\").reverse().join(\"\");\n  let rev_c_rev66 = rev_c_rev65.split(\"\").reverse().join(\"\");\n  let rev_c_rev67 = rev_c_rev66.split(\"\").reverse().join(\"\");\n  let rev_c_rev68 = rev_c_rev67.split(\"\").reverse().join(\"\");\n  let rev_c_rev69 = rev_c_rev68.split(\"\").reverse().join(\"\");\n  let rev_c_rev70 = rev_c_rev69.split(\"\").reverse().join(\"\");\n  let rev_c_rev71 = rev_", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> oddcounT(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddcounT(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddcounT = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddcounT", "gc": "<|endoftext|>/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> oddcounT(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddcounT(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddcounT = (lst) => {\n  let oddCount = 0;\n  let oddCounts = [];\n  lst.forEach((str) => {\n    oddCount = 0;\n    str.split('').forEach((digit) => {\n      if (digit === '1') {\n        oddCount++;\n      } else if (digit === '0') {\n        oddCount--;\n      }\n    });\n    oddCounts.push(oddCount);\n  });\n  return oddCounts;\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of even elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of even digits in the i'th string of the input.\n\n  >>> evencounT(['1234567'])\n  [\"the number of even elements 4n the str4ng 4 of the 4nput.\"]\n  >>> evencounT(['3',\"11111111\"])\n  [\"the number of even elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst evencounT = (lst) => {\n  let evenCount = 0;\n  let evenCounts = [];\n  lst.forEach((str) => {\n    evenCount = 0;\n    str.split('').forEach((digit) => {\n      if (digit === '1') {\n        evenCount++;\n      } else if (digit === '0') {\n        evenCount--;\n      }\n    });\n    evenCounts.push(evenCount);\n  });\n  return evenCounts;\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of even elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of even digits in the i'th string of the input.\n\n  >>> oddcounT(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddcounT(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddcounte = (lst) => {\n  let oddCount = 0;\n  let oddCounts = [];\n  lst.forEach((str) => {\n    oddCount = 0;\n    str.split('').forEach((digit) => {\n      if (digit === '1') {\n        oddCount++;\n      } else if (digit === '0') {\n        oddCount--;\n      }\n    });\n    oddCounts.push(oddCount);\n  });\n  return oddCounts;\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of even elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of even digits in the i'th string of the input.\n\n  >>> evencounte(['1234567'])\n  [\"the number of even elements 4n the str4ng 4 of the 4nput.\"]\n  >>> evencounte(['3',\"11111111\"])\n  [\"the number of even elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst evencounte = (lst) => {\n  let evenCount = 0;\n  let evenCounts = [];\n  lst.forEach((str) => {\n    evenCount = 0;\n    str.split('').forEach((digit) => {\n      if (digit === '1') {\n        evenCount++;\n      } else if (digit === '0') {\n        evenCount--;\n      }\n    });\n    evenCounts.push(evenCount);\n  });\n  return evenCounts;\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of even elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of even digits in the i'th string of the input.\n\n  >>> oddcounte(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddcounte(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddcountee = (lst) => {\n  let oddCount = 0;\n  let oddCounts = [];\n  lst.forEach((str) => {\n    oddCount = 0;\n    str.split('').forEach((digit) => {\n      if (digit === '1') {\n        oddCount++;\n      } else if (digit === '0') {\n        oddCount--;\n      }\n    });\n    oddCounts.push(oddCount);\n  });\n  return oddCounts;\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of even elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of even digits in the i'th string of the input.\n\n  >>> evencountee(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> evencountee(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst evencountee = (lst) => {\n  let evenCount = 0;\n  let evenCounts = [];\n  lst.forEach((str) => {\n    evenCount = 0;\n    str.split('').forEach((digit) => {\n      if (digit === '1') {\n        evenCount++;\n      } else if (digit === '0') {\n        evenCount--;\n      }\n    });\n    evenCounts.push(evenCount);\n  });\n  return evenCounts;\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of even elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of even digits in the i'th string of the input.\n\n  >>> oddcountee(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddcountee(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddcounteee = (lst) => {\n  let oddCount = 0;\n  let oddCounts = [];\n  lst.forEach((str) => {\n    oddCount = 0;\n    str.split('').forEach((digit) => {\n      if (digit === '1') {\n        oddCount++;\n      } else if (digit === '0') {\n        oddCount--;\n      }\n    });\n    oddCounts.push(oddCount);\n  });\n  return oddCounts;\n};\n\n/*Given ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minsubARraySUm([2, 3, 4, 1, 2, 4]) == 1\n  minsubARraySUm([-1, -2, -3]) == -6\n  */\nconst minsubARraySUm = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minsubARraySUm", "gc": "<|endoftext|>/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minsubARraySUm([2, 3, 4, 1, 2, 4]) == 1\n  minsubARraySUm([-1, -2, -3]) == -6\n  */\nconst minsubARraySUm = (nums) => {\n  let sum = 0;\n  let minSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    sum += nums[i];\n    if (sum < minSum) {\n      minSum = sum;\n    }\n  }\n  return minSum;\n};\n\n/*\n  Given an array of integers nums, find the maximum sum of any non-empty sub-array\n  of nums.\n  Example\n  maxsubARraySUm([2, 3, 4, 1, 2, 4]) == 4\n  maxsubARraySUm([-1, -2, -3]) == 6\n  */\nconst maxsubARraySUm = (nums) => {\n  let sum = 0;\n  let maxSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    sum += nums[i];\n    if (sum > maxSum) {\n      maxSum = sum;\n    }\n  }\n  return maxSum;\n};\n\n/*\n  Given an array of integers nums, find the minimum number of non-empty sub-arrays\n  of nums.\n  Example\n  minsubArrayCount([2, 3, 4, 1, 2, 4]) == 4\n  minsubArrayCount([-1, -2, -3]) == 6\n  */\nconst minsubArrayCount = (nums) => {\n  let count = 0;\n  let minCount = 0;\n  for (let i = 1; i < nums.length; i++) {\n    if (nums[i] > 0) {\n      count++;\n      if (count < minCount) {\n        minCount = count;\n      }\n    }\n  }\n  return minCount;\n};\n\n/*\n  Given an array of integers nums, find the maximum number of non-empty sub-arrays\n  of nums.\n  Example\n  maxsubArrayCount([2, 3, 4, 1, 2, 4]) == 4\n  maxsubArrayCount([-1, -2, -3]) == 6\n  */\nconst maxsubArrayCount = (nums) => {\n  let count = 0;\n  let maxCount = 0;\n  for (let i = 1; i < nums.length; i++) {\n    if (nums[i] > 0) {\n      count++;\n      if (count > maxCount) {\n        maxCount = count;\n      }\n    }\n  }\n  return maxCount;\n};\n\n/*\n  Given an array of integers nums, find the minimum number of non-empty sub-arrays\n  of nums.\n  Example\n  minsubArrayCount([2, 3, 4, 1, 2, 4]) == 4\n  minsubArrayCount([-1, -2, -3]) == 6\n  */\nconst minsubArraySum = (nums) => {\n  let sum = 0;\n  let minSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    sum += nums[i];\n    if (sum < minSum) {\n      minSum = sum;\n    }\n  }\n  return minSum;\n};\n\n/*\n  Given an array of integers nums, find the maximum number of non-empty sub-arrays\n  of nums.\n  Example\n  maxsubArrayCount([2, 3, 4, 1, 2, 4]) == 4\n  maxsubArrayCount([-1, -2, -3]) == 6\n  */\nconst maxsubArraySum = (nums) => {\n  let sum = 0;\n  let maxSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    sum += nums[i];\n    if (sum > maxSum) {\n      maxSum = sum;\n    }\n  }\n  return maxSum;\n};\n\n/*\n  Given an array of integers nums, find the minimum number of non-empty sub-arrays\n  of nums.\n  Example\n  minsubArraySum([2, 3, 4, 1, 2, 4]) == 4\n  minsubArraySum([-1, -2, -3]) == 6\n  */\nconst minsubArrayMin = (nums) => {\n  let minSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    if (nums[i] < minSum) {\n      minSum = nums[i];\n    }\n  }\n  return minSum;\n};\n\n/*\n  Given an array of integers nums, find the maximum number of non-empty sub-arrays\n  of nums.\n  Example\n  maxsubArraySum([2, 3, 4, 1, 2, 4]) == 4\n  maxsubArraySum([-1, -2, -3]) == 6\n  */\nconst maxsubArrayMin = (nums) => {\n  let minSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    if (nums[i] > minSum) {\n      minSum = nums[i];\n    }\n  }\n  return minSum;\n};\n\n/*\n  Given an array of integers nums, find the minimum number of non-empty sub-arrays\n  of nums.\n  Example\n  minsubArrayMin([2, 3, 4, 1, 2, 4]) == 4\n  minsubArrayMin([-1, -2, -3]) == 6\n  */\nconst minsubArrayMax = (nums) => {\n  let maxSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    if (nums[i] > maxSum) {\n      maxSum = nums[i];\n    }\n  }\n  return maxSum;\n};\n\n/*\n  Given an array of integers nums, find the maximum number of non-empty sub-arrays\n  of nums.\n  Example\n  maxsubArrayMax([2, 3, 4, 1, 2, 4]) == 4\n  maxsubArrayMax([-1, -2, -3]) == 6\n  */\nconst maxsubArrayMax = (nums) => {\n  let maxSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    if (nums[i] < maxSum) {\n      maxSum = nums[i];\n    }\n  }\n  return maxSum;\n};\n\n/*\n  Given an array of integers nums, find the minimum number of non-empty sub-arrays\n  of nums.\n  Example\n  minsubArraySum([2, 3, 4, 1, 2, 4]) == 4\n  minsubArraySum([-1, -2, -3]) == 6\n  */\nconst minsubArraySumMax = (nums) => {\n  let sum = 0;\n  let minSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    sum += nums[i];\n    if (sum < minSum) {\n      minSum = sum;\n    }\n  }\n  return minSum;\n};\n\n/*\n  Given an array of integers nums, find the maximum number of non-empty sub-arrays\n  of nums.\n  Example\n  maxsubArraySumMax([2, 3, 4, 1, 2, 4]) == 4\n  maxsubArraySumMax([-1, -2, -3]) == 6\n  */\nconst maxsubArraySumMax = (nums) => {\n  let sum = 0;\n  let maxSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    sum += nums[i];\n    if (sum > maxSum) {\n      maxSum = sum;\n    }\n  }\n  return maxSum;\n};\n\n/*\n  Given an array of integers nums, find the minimum number of non-empty sub-arrays\n  of nums.\n  Example\n  minsubArraySumMax([2, 3, 4, 1, 2, 4]) == 4\n  minsubArraySumMax([-1, -2, -3]) == 6\n  */\nconst minsubArraySumMin = (nums) => {\n  let minSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    if (nums[i] < minSum) {\n      minSum = nums[i];\n    }\n  }\n  return minSum;\n};\n\n/*\n  Given an array of integers nums, find the maximum number of non-empty sub-arrays\n  of nums.\n  Example\n  maxsubArraySumMin([2, 3, 4, 1, 2, 4]) == 4\n  maxsubArraySumMin([-1, -2, -3]) == 6\n  */\nconst maxsubArraySumMin = (nums) => {\n  let minSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    if (nums[i] > minSum) {\n      minSum = nums[i];\n    }\n  }\n  return minSum;\n};\n\n/*\n  Given an array of integers nums, find the minimum number of ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxfill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxfill", "gc": "<|endoftext|>/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxfill = (grid, capacity) => {\n  const n = grid.length;\n  const m = grid[0].length;\n  let count = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (grid[i][j] === 1) {\n        count += 1;\n        if (count >= capacity) {\n          return count;\n        }\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to fill the wells so that they can all be empty.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxfill2d = (grid, capacity) => {\n  const n = grid.length;\n  const m = grid[0].length;\n  let count = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (grid[i][j] === 1) {\n        count += 1;\n        if (count >= capacity) {\n          return count;\n        }\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to fill the wells so that they can all be empty.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxfill3d = (grid, capacity) => {\n  const n = grid.length;\n  const m = grid[0].length;\n  let count = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (grid[i][j] === 1) {\n        count += 1;\n        if (count >= capacity) {\n          return count;\n        }\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to fill the wells so that they can all be empty.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxfill4d = (grid, capacity) => {\n  const n = grid.length;\n  const m = grid[0].length;\n  let count = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (grid[i][j] === 1) {\n        count += 1;\n        if (count >= capacity) {\n          return count;\n        }\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to fill the wells so that they can all be empty.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxfill5d = (grid, capacity) => {\n  const n = grid.length;\n  const m = grid[0].length;\n  let count = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (grid[i][j] === 1) {\n        count += 1;\n        if (count >= capacity) {\n          return count;\n        }\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to fill ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sorTArrAy([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sorTArrAy([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sorTArrAy([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sorTArrAy = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sorTArrAy", "gc": "<|endoftext|>/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sorTArrAy([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sorTArrAy([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sorTArrAy([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sorTArrAy = (arr) => {\n  const sorted = arr.sort((a, b) => a - b);\n  return sorted.map((num) => num.toString());\n};\n\n/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in descending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sorTArrAy([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sorTArrAy([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sorTArrAy([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sorTArrAyDesc = (arr) => {\n  const sorted = arr.sort((a, b) => b - a);\n  return sorted.map((num) => num.toString());\n};\n\n/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order and\n  in reverse order.\n\n  It must be implemented like this:\n  >>> sorTArrAyDesc([-2, 1, -4, 3, 1]) == [-2, 1, -4, 3, 1]\n  >>> sorTArrAyDesc([-2, 1, -4, 3, 1]) == [-4, -2, 1, 3, 1]\n  >>> sorTArrAyDesc([-2, 1, -4, 3, 1]) == [-4, -2, 1, 3, 1]\n  >>> sorTArrAyDesc([-2, 1, -4, 3, 1]) == [-4, -2, 1, 3, 1]\n  >>> sorTArrAyDesc([-2, 1, -4, 3, 1]) == [-4, -2, 1, 3, 1]\n  >>> sorTArrAyDesc([-2, 1, -4, 3, 1]) == [-4, -2, 1, 3, 1]\n  >>> sorTArrAyDesc([-2, 1, -4, 3, 1]) == [-4, -2, 1, 3, 1]\n  >>> sorTArrAyDesc([-2, 1, -4, 3, 1]) == [-4, -2, 1, 3, 1]\n  >>> sorTArrAyDesc([-2, 1, -4, 3, 1]) == [-4, -2, 1, 3, 1]\n  >>> sorTArrAyDesc([-2, 1, -4, 3, 1]) == [-4, -2, 1, 3, 1]\n  >>> sorTArrAyDesc([-2, 1, -4, 3, 1]) == [-4, -2, 1, 3, 1]\n  >>> sorTArrAyDesc([-2, 1, -4, 3, 1]) == [-4, -2, 1, 3, 1]\n  >>> sorTArrAyDesc([-2, 1, -4, 3, 1]) == [-4, -2, 1, 3, 1]\n  >>> sorTArrAyDesc([-2, 1, -4, 3, 1]) == [-4, -2, 1, 3, 1]\n  >>> sorTArrAyDesc([-2, 1, -4, 3, 1]) == [-4, -2, 1, 3, 1]\n  >>> sorTArrAyDesc([-2, 1, -4, 3, 1]) == [-4, -2, 1, 3, 1]\n  >>> sorTArrAyDesc([-2, 1, -4, 3, 1]) == [-4, -2, 1, 3, 1]\n  >>> sorTArrAyDesc([-2, 1, -4, 3, 1]) == [-4, -2, 1, 3, 1]\n  >>> sorTArrAyDesc([-2, 1, -4, 3, 1]) == [-4, -2, 1, 3, 1]\n  >>> sorTArrAyDesc([-2, 1, -4, 3, 1]) == [-4, -2, 1, 3, 1]\n  >>> sorTArrAyDesc([-2, 1, -4, 3, 1]) == [-4, -2, 1, 3, 1]\n  >>> sorTArrAyDesc([-2, 1, -4, 3, 1]) == [-4, -2, 1, 3, 1]\n  >>> sorTArrAyDesc([-2, 1, -4, 3, 1]) == [-4, -2, 1, 3, 1]\n  >>> sorTArrAyDesc([-2, 1, -4, 3, 1]) == [-4, -2, 1, 3, 1]\n  >>> sorTArrAyDesc([-2, 1, -4, 3, 1]) == [-4, -2, 1, 3, 1]\n  >>> sorTArrAyDesc([-2, 1, -4, 3, 1]) == [-4, -2, 1, 3, 1]\n  >>> sorTArrAyDesc([-2, 1, -4, 3, 1]) == [-4, -2, 1, 3, 1]\n  >>> sorTArrAyDesc([-2, 1, -4, 3, 1]) == [-4, -2, 1, 3, 1]\n  >>> sorTArrAyDesc([-2, 1, -4, 3, 1]) == [-4, -2, 1, 3, 1]\n  >>> sorTArrAyDesc([-2, 1, -4, 3, 1]) == [-4, -2, 1, 3, 1]\n  >>> sorTArrAyDesc([-2, 1, -4, 3, 1]) == [-4, -2, 1, 3, 1]\n  >>> sorTArrAyDesc([-2, 1, -4, 3, 1]) == [-4, -2, 1, 3, 1]\n  >>> sorTArrAyDesc([-2, 1, -4, 3, 1]) == [-4, -2, 1, 3, 1]\n  >>> sorTArrAyDesc([-2, 1, -4, 3, 1]) == [-4, -2, 1, 3, 1]\n  >>> sorTArrAyDesc([-2, 1, -4, 3, 1]) == [-4, -2, 1, 3, 1]\n  >>> sorTArrAyDesc([-2, 1, -4, 3, 1]) == [-4, -2, 1, 3, 1]\n  >>> sorTArrAyDesc([-2, 1, -4, 3, 1]) == [-4, -2, 1, 3, 1]\n  >>> sorTArrAyDesc([-2, 1, -4, 3, 1]) == [-4, -2, 1, 3, 1]\n  >>> sorTArrAyDesc([-2, 1, -4, 3, 1]) == [-4, -2, 1, 3, 1]\n  >>> sorTArrAyDesc([-2, 1, -4, 3, 1]) == [-4, -2, 1, 3, 1]\n  >>> sorTArrAyDesc([-2, 1, -4, 3, 1]) == [-4, -2, 1, 3, 1]\n  >>> sorTArrAyDesc([-2, 1, -4, 3, 1]) == [-4, -2, 1, 3, 1]\n  >>> sorTArrAyDesc([-2, 1, -4, 3, 1]) == [-4, -2, 1, 3, 1]\n  >>> sorTArrAyDesc([-2, 1, -4, 3, 1]) == [-4, -2, 1, 3, 1]\n  >>> sorTArrAyDesc([-2, 1, -4, 3, 1]) == [-4, -2, 1, 3, 1]\n  >>> sorTArrAyDesc([-2, 1, -4, 3, 1]) == [-4, -2, 1, 3, 1]\n  >>> sorTArrAyDesc([-2, 1, -4, 3, 1]) == [-4, -2, 1, 3, 1]\n  >>> sorTArrAyDesc([-2, 1, -4, 3, 1]) == [-4, -2, 1, 3, 1]\n  >>> sorTArrAyDesc([-2, 1, -4, 3, 1]) == [-4, -2, 1, 3, 1]\n  >>> sorTArrAyDesc([-2, 1, -4, 3, 1]) == [-4, -2, 1, 3, 1]\n  >>> sorTArrAyDesc([-2, 1, -4, 3, 1]) == [-4, -2, 1, 3, 1]\n  >>> sorTArrAyDesc([-2, 1, -4, 3, 1]) == [-4, -2, 1, 3, 1]\n  >>> sorTArrAyDesc([-2, 1, -4, 3, 1]", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selEctWOrds(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selEctWOrds(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selEctWOrds(\"simple white space\", 2) ==> []\n  selEctWOrds(\"Hello world\", 4) ==> [\"world\"]\n  selEctWOrds(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selEctWOrds = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selEctWOrds", "gc": "<|endoftext|>/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selEctWOrds(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selEctWOrds(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selEctWOrds(\"simple white space\", 2) ==> []\n  selEctWOrds(\"Hello world\", 4) ==> [\"world\"]\n  selEctWOrds(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selEctWOrds = (s, n) => {\n  let res = [];\n  let word = '';\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/118", "prompt": "/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  getclosEstVoWel(\"yogurt\") ==> \"u\"\n  getclosEstVoWel(\"FULL\") ==> \"U\"\n  getclosEstVoWel(\"quick\") ==> \"\"\n  getclosEstVoWel(\"ab\") ==> \"\"\n  */\nconst getclosEstVoWel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getclosEstVoWel", "gc": "<|endoftext|>/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  getclosEstVoWel(\"yogurt\") ==> \"u\"\n  getclosEstVoWel(\"FULL\") ==> \"U\"\n  getclosEstVoWel(\"quick\") ==> \"\"\n  getclosEstVoWel(\"ab\") ==> \"\"\n  */\nconst getclosEstVoWel = (word) => {\n  let vowels = \"\";\n  let vowelsArray = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  let vowelsArray2 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n  let vowelsArray3 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  let vowelsArray4 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n  let vowelsArray5 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  let vowelsArray6 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n  let vowelsArray7 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  let vowelsArray8 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n  let vowelsArray9 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  let vowelsArray10 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n  let vowelsArray11 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  let vowelsArray12 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n  let vowelsArray13 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  let vowelsArray14 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n  let vowelsArray15 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  let vowelsArray16 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n  let vowelsArray17 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  let vowelsArray18 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n  let vowelsArray19 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  let vowelsArray20 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n  let vowelsArray21 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  let vowelsArray22 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n  let vowelsArray23 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  let vowelsArray24 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n  let vowelsArray25 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  let vowelsArray26 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n  let vowelsArray27 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  let vowelsArray28 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n  let vowelsArray29 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  let vowelsArray30 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n  let vowelsArray31 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  let vowelsArray32 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n  let vowelsArray33 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  let vowelsArray34 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n  let vowelsArray35 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  let vowelsArray36 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n  let vowelsArray37 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  let vowelsArray38 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n  let vowelsArray39 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  let vowelsArray40 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n  let vowelsArray41 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  let vowelsArray42 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n  let vowelsArray43 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  let vowelsArray44 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n  let vowelsArray45 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  let vowelsArray46 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n  let vowelsArray47 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  let vowelsArray48 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n  let vowelsArray49 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  let vowelsArray50 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n  let vowelsArray51 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  let vowelsArray52 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n  let vowelsArray53 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  let vowelsArray54 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n  let vowelsArray55 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  let vowelsArray56 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n  let vowelsArray57 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  let vowelsArray58 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n  let vowelsArray59 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  let vowelsArray60 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n  let vowelsArray61 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  let vowelsArray62 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n  let vowelsArray63 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  let vowelsArray64 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n  let vowelsArray65 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  let vowelsArray66 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n  let vowelsArray67 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  let vowelsArray68 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n  let vowelsArray69 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  let vowelsArray70 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n  let vowelsArray71 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  let vowelsArray72 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n  let vowelsArray73 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  let vowelsArray74 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n  let vowelsArray75 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  let vowelsArray76 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n  let vowelsArray77 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  let vowelsArray78 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n  let vowelsArray79 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  let vowelsArray80 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n  let vowelsArray81 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  let vowelsArray82 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n  let vowelsArray83 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  let vowelsArray84 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n  let vowelsArray85 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  let vowel", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/119", "prompt": "/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matChPaRens(['()(', ')']) == 'Yes'\n  matChPaRens([')', ')']) == 'No'\n  */\nconst matChPaRens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matChPaRens", "gc": "<|endoftext|>/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matChPaRens(['()(', ')']) == 'Yes'\n  matChPaRens([')', ')']) == 'No'\n  */\nconst matChPaRens = (lst) => {\n  let res = 'No';\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      res += 'Yes';\n    } else if (lst[i] === ')') {\n      res += 'No';\n    }\n  }\n  return res;\n};\n\n/* You are given a string S consisting of only letters and digits. You are\n  asked to find if there is a way to convert S into another string that is\n  valid for S. For example, the string '123abc' can be converted to '123bca'.\n  Return 'Yes' if there is a way to convert S into another string that is\n  valid for S, and return 'No' otherwise.\n  Examples:\n  convertToValid('123abc') == 'Yes'\n  convertToValid('123bca') == 'No'\n  */\nconst convertToValid = (str) => {\n  let res = 'No';\n  let newStr = '';\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] >= '0' && str[i] <= '9') {\n      newStr += str[i];\n    } else {\n      res += 'No';\n    }\n  }\n  if (newStr === str) {\n    res += 'Yes';\n  }\n  return res;\n};\n\n/* You are given a string S consisting of only letters and digits. You are\n  asked to find if there is a way to convert S into another string that is\n  valid for S. For example, the string '123abc' can be converted to '123bca'.\n  Return 'Yes' if there is a way to convert S into another string that is\n  valid for S, and return 'No' otherwise.\n  Examples:\n  convertToValid('123abc') == 'Yes'\n  convertToValid('123bca') == 'No'\n  */\nconst convertToValid = (str) => {\n  let res = 'No';\n  let newStr = '';\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] >= '0' && str[i] <= '9') {\n      newStr += str[i];\n    } else {\n      res += 'No';\n    }\n  }\n  if (newStr === str) {\n    res += 'Yes';\n  }\n  return res;\n};\n\n/* You are given a string S consisting of only letters and digits. You are\n  asked to find if there is a way to convert S into another string that is\n  valid for S. For example, the string '123abc' can be converted to '123bca'.\n  Return 'Yes' if there is a way to convert S into another string that is\n  valid for S, and return 'No' otherwise.\n  Examples:\n  convertToValid('123abc') == 'Yes'\n  convertToValid('123bca') == 'No'\n  */\nconst convertToValid = (str) => {\n  let res = 'No';\n  let newStr = '';\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] >= '0' && str[i] <= '9') {\n      newStr += str[i];\n    } else {\n      res += 'No';\n    }\n  }\n  if (newStr === str) {\n    res += 'Yes';\n  }\n  return res;\n};\n\n/* You are given a string S consisting of only letters and digits. You are\n  asked to find if there is a way to convert S into another string that is\n  valid for S. For example, the string '123abc' can be converted to '123bca'.\n  Return 'Yes' if there is a way to convert S into another string that is\n  valid for S, and return 'No' otherwise.\n  Examples:\n  convertToValid('123abc') == 'Yes'\n  convertToValid('123bca') == 'No'\n  */\nconst convertToValid = (str) => {\n  let res = 'No';\n  let newStr = '';\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] >= '0' && str[i] <= '9') {\n      newStr += str[i];\n    } else {\n      res += 'No';\n    }\n  }\n  if (newStr === str) {\n    res += 'Yes';\n  }\n  return res;\n};\n\n/* You are given a string S consisting of only letters and digits. You are\n  asked to find if there is a way to convert S into another string that is\n  valid for S. For example, the string '123abc' can be converted to '123bca'.\n  Return 'Yes' if there is a way to convert S into another string that is\n  valid for S, and return 'No' otherwise.\n  Examples:\n  convertToValid('123abc') == 'Yes'\n  convertToValid('123bca') == 'No'\n  */\nconst convertToValid = (str) => {\n  let res = 'No';\n  let newStr = '';\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] >= '0' && str[i] <= '9') {\n      newStr += str[i];\n    } else {\n      res += 'No';\n    }\n  }\n  if (newStr === str) {\n    res += 'Yes';\n  }\n  return res;\n};\n\n/* You are given a string S consisting of only letters and digits. You are\n  asked to find if there is a way to convert S into another string that is\n  valid for S. For example, the string '123abc' can be converted to '123bca'.\n  Return 'Yes' if there is a way to convert S into another string that is\n  valid for S, and return 'No' otherwise.\n  Examples:\n  convertToValid('123abc') == 'Yes'\n  convertToValid('123bca') == 'No'\n  */\nconst convertToValid = (str) => {\n  let res = 'No';\n  let newStr = '';\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] >= '0' && str[i] <= '9') {\n      newStr += str[i];\n    } else {\n      res += 'No';\n    }\n  }\n  if (newStr === str) {\n    res += 'Yes';\n  }\n  return res;\n};\n\n/* You are given a string S consisting of only letters and digits. You are\n  asked to find if there is a way to convert S into another string that is\n  valid for S. For example, the string '123abc' can be converted to '123bca'.\n  Return 'Yes' if there is a way to convert S into another string that is\n  valid for S, and return 'No' otherwise.\n  Examples:\n  convertToValid('123abc') == 'Yes'\n  convertToValid('123bca') == 'No'\n  */\nconst convertToValid = (str) => {\n  let res = 'No';\n  let newStr = '';\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] >= '0' && str[i] <= '9') {\n      newStr += str[i];\n    } else {\n      res += 'No';\n    }\n  }\n  if (newStr === str) {\n    res += 'Yes';\n  }\n  return res;\n};\n\n/* You are given a string S consisting of only letters and digits. You are\n  asked to find if there is a way to convert S into another string that is\n  valid for S. For example, the string '123abc' can be converted to '123bca'.\n  Return 'Yes' if there is a way to convert S into ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the lonGest one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> lonGest([])\n\n  >>> lonGest(['a', 'b', 'c'])\n  'a'\n  >>> lonGest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst lonGest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "lonGest", "gc": "<|endoftext|>/* Out of list of strings, return the lonGest one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> lonGest([])\n\n  >>> lonGest(['a', 'b', 'c'])\n  'a'\n  >>> lonGest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst lonGest = (strings) => {\n  if (strings.length === 0) {\n    return null\n  }\n\n  const longest = strings[0].length\n  let longestString = ''\n\n  for (let i = 1; i < strings.length; i++) {\n    const length = strings[i].length\n    if (length > longest) {\n      longestString = strings[i]\n      longest = length\n    }\n  }\n\n  return longestString\n}\n\n/* Given a string, return its first letter. Return the empty string in case of no letter\n  in the string.\n  >>> firstLetter(['a', 'b', 'c'])\n  'a'\n  >>> firstLetter(['a', 'bb', 'ccc'])\n  'c'\n  */\nconst firstLetter = (strings) => {\n  if (strings.length === 0) {\n    return ''\n  }\n\n  return strings[0][0]\n}\n\n/* Given a string, return its last letter. Return the empty string in case of no letter\n  in the string.\n  >>> lastLetter(['a', 'b', 'c'])\n  'c'\n  >>> lastLetter(['a', 'bb', 'ccc'])\n  'c'\n  */\nconst lastLetter = (strings) => {\n  if (strings.length === 0) {\n    return ''\n  }\n\n  return strings[strings.length - 1][0]\n}\n\n/* Given a string, return its first letter in uppercase. Return the empty string in case of no letter\n  in the string.\n  >>> firstLetterUpper(['a', 'b', 'c'])\n  'A'\n  >>> firstLetterUpper(['a', 'bb', 'ccc'])\n  'C'\n  */\nconst firstLetterUpper = (strings) => {\n  if (strings.length === 0) {\n    return ''\n  }\n\n  return strings[0][0].toUpperCase()\n}\n\n/* Given a string, return its last letter in uppercase. Return the empty string in case of no letter\n  in the string.\n  >>> lastLetterUpper(['a', 'b', 'c'])\n  'C'\n  >>> lastLetterUpper(['a', 'bb', 'ccc'])\n  'C'\n  */\nconst lastLetterUpper = (strings) => {\n  if (strings.length === 0) {\n    return ''\n  }\n\n  return strings[strings.length - 1][0].toUpperCase()\n}\n\n/* Given a string, return its first letter in lowercase. Return the empty string in case of no letter\n  in the string.\n  >>> firstLetterLower(['a', 'b', 'c'])\n  'a'\n  >>> firstLetterLower(['a', 'bb', 'ccc'])\n  'a'\n  */\nconst firstLetterLower = (strings) => {\n  if (strings.length === 0) {\n    return ''\n  }\n\n  return strings[0][0].toLowerCase()\n}\n\n/* Given a string, return its last letter in lowercase. Return the empty string in case of no letter\n  in the string.\n  >>> lastLetterLower(['a', 'b', 'c'])\n  'a'\n  >>> lastLetterLower(['a', 'bb', 'ccc'])\n  'a'\n  */\nconst lastLetterLower = (strings) => {\n  if (strings.length === 0) {\n    return ''\n  }\n\n  return strings[strings.length - 1][0].toLowerCase()\n}\n\n/* Given a string, return its first letter in titlecase. Return the empty string in case of no letter\n  in the string.\n  >>> firstLetterTitle(['a', 'b', 'c'])\n  'A B'\n  >>> firstLetterTitle(['a', 'bb', 'ccc'])\n  'A B'\n  */\nconst firstLetterTitle = (strings) => {\n  if (strings.length === 0) {\n    return ''\n  }\n\n  return strings[0][0].toLowerCase().replace(/\\b\\w/g,'').trim()\n}\n\n/* Given a string, return its last letter in titlecase. Return the empty string in case of no letter\n  in the string.\n  >>> lastLetterTitle(['a', 'b', 'c'])\n  'A B'\n  >>> lastLetterTitle(['a', 'bb', 'ccc'])\n  'A B'\n  */\nconst lastLetterTitle = (strings) => {\n  if (strings.length === 0) {\n    return ''\n  }\n\n  return strings[strings.length - 1][0].toLowerCase().replace(/\\b\\w/g,'').trim()\n}\n\n/* Given a string, return its first letter in camelCase. Return the empty string in case of no letter\n  in the string.\n  >>> firstLetterCamelCase(['a', 'b', 'c'])\n  'aB'\n  >>> firstLetterCamelCase(['a', 'bb', 'ccc'])\n  'aB'\n  */\nconst firstLetterCamelCase = (strings) => {\n  if (strings.length === 0) {\n    return ''\n  }\n\n  return strings[0][0].toLowerCase().replace(/\\b\\w/g,'').trim().replace(/-/g,'')\n}\n\n/* Given a string, return its last letter in camelCase. Return the empty string in case of no letter\n  in the string.\n  >>> lastLetterCamelCase(['a', 'b', 'c'])\n  'aB'\n  >>> lastLetterCamelCase(['a', 'bb', 'ccc'])\n  'aB'\n  */\nconst lastLetterCamelCase = (strings) => {\n  if (strings.length === 0) {\n    return ''\n  }\n\n  return strings[strings.length - 1][0].toLowerCase().replace(/\\b\\w/g,'').trim().replace(/-/g,'')\n}\n\n/* Given a string, return its first letter in PascalCase. Return the empty string in case of no letter\n  in the string.\n  >>> firstLetterPascalCase(['a', 'b', 'c'])\n  'Abc'\n  >>> firstLetterPascalCase(['a', 'bb', 'ccc'])\n  'Abc'\n  */\nconst firstLetterPascalCase = (strings) => {\n  if (strings.length === 0) {\n    return ''\n  }\n\n  return strings[0][0].toLowerCase().replace(/\\b\\w/g,'').trim().replace(/-/g,'').replace(/_/g,'')\n}\n\n/* Given a string, return its last letter in PascalCase. Return the empty string in case of no letter\n  in the string.\n  >>> lastLetterPascalCase(['a', 'b', 'c'])\n  'Abc'\n  >>> lastLetterPascalCase(['a', 'bb', 'ccc'])\n  'Abc'\n  */\nconst lastLetterPascalCase = (strings) => {\n  if (strings.length === 0) {\n    return ''\n  }\n\n  return strings[strings.length - 1][0].toLowerCase().replace(/\\b\\w/g,'').trim().replace(/-/g,'').replace(/_/g,'')\n}\n\n/* Given a string, return its first letter in snake_case. Return the empty string in case of no letter\n  in the string.\n  >>> firstLetterSnakeCase(['a', 'b', 'c'])\n  'a_b_c'\n  >>> firstLetterSnakeCase(['a', 'bb', 'ccc'])\n  'a_b_c'\n  */\nconst firstLetterSnakeCase = (strings) => {\n  if (strings.length === 0) {\n    return ''\n  }\n\n  return strings[0][0].toLowerCase().replace(/\\b\\w/g,'').trim().replace(/-/g,'').replace(/_/g,'').replace(/([a-z])([A-Z])/g, '$1_$2')\n}\n\n/* Given a string, return its last letter in snake_case. Return the empty string in case of no letter\n  in the string.\n  >>> lastLetterSnakeCase(['a', 'b', 'c'])\n  'a_b_c'\n  >>> lastLetterSnakeCase(['a', 'bb', 'ccc'])\n  'a_b_c'\n  */\nconst lastLetterSnakeCase = (strings) => {\n  if (strings.length === 0) {\n    return ''\n  }\n\n  return strings[strings.length - 1][0].toLowerCase().replace(/\\b\\w/g,'').trim().replace(/-/g,'').replace(/_/g,'').replace(/([a-z])([A-Z])/g, '$1_$2')", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maxImum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maxImum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maxImum", "gc": "<|endoftext|>/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maxImum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maxImum = (arr, k) => {\n  const len = arr.length;\n  const result = [];\n  let max = 0;\n  let i = 0;\n  while (i < len) {\n    if (arr[i] > max) {\n      max = arr[i];\n      result.push(max);\n    }\n    i++;\n  }\n  return result;\n};\n\n// https://leetcode.com/problems/find-the-maximum-subarray/discuss/43437/Java-solution-for-finding-the-maximum-subarray-from-an-array-of-arrays\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {number[]} nums\n * @return {number[]}\n */\nvar findMaxSubArray = function(nums) {\n  const len = nums.length;\n  const result = [];\n  let max = 0;\n  let i = 0;\n  while (i < len) {\n    if (nums[i] > max) {\n      max = nums[i];\n      result.push(max);\n    }\n    i++;\n  }\n  return result;\n};\n\n// https://leetcode.com/problems/find-the-maximum-subarray-from-an-array-of-arrays\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {number[][]} nums\n * @return {number[]}\n */\nvar findMaxSubArray = function(nums) {\n  const len = nums.length;\n  const result = [];\n  let max = 0;\n  let i = 0;\n  while (i < len) {\n    if (nums[i][0] > max) {\n      max = nums[i][0];\n      result.push(max);\n    }\n    i++;\n  }\n  return result;\n};\n\n// https://leetcode.com/problems/find-the-maximum-subarray-from-an-array-of-arrays\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {number[][]} nums\n * @return {number[]}\n */\nvar findMaxSubArray = function(nums) {\n  const len = nums.length;\n  const result = [];\n  let max = 0;\n  let i = 0;\n  while (i < len) {\n    if (nums[i][0] > max) {\n      max = nums[i][0];\n      result.push(max);\n    }\n    i++;\n  }\n  return result;\n};\n\n// https://leetcode.com/problems/find-the-maximum-subarray-from-an-array-of-arrays\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {number[][]} nums\n * @return {number[]}\n */\nvar findMaxSubArray = function(nums) {\n  const len = nums.length;\n  const result = [];\n  let max = 0;\n  let i = 0;\n  while (i < len) {\n    if (nums[i][0] > max) {\n      max = nums[i][0];\n      result.push(max);\n    }\n    i++;\n  }\n  return result;\n};\n\n// https://leetcode.com/problems/find-the-maximum-subarray-from-an-array-of-arrays\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {number[][]} nums\n * @return {number[]}\n */\nvar findMaxSubArray = function(nums) {\n  const len = nums.length;\n  const result = [];\n  let max = 0;\n  let i = 0;\n  while (i < len) {\n    if (nums[i][0] > max) {\n      max = nums[i][0];\n      result.push(max);\n    }\n    i++;\n  }\n  return result;\n};\n\n// https://leetcode.com/problems/find-the-maximum-subarray-from-an-array-of-arrays\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {number[][]} nums\n * @return {number[]}\n */\nvar findMaxSubArray = function(nums) {\n  const len = nums.length;\n  const result = [];\n  let max = 0;\n  let i = 0;\n  while (i < len) {\n    if (nums[i][0] > max) {\n      max = nums[i][0];\n      result.push(max);\n    }\n    i++;\n  }\n  return result;\n};\n\n// https://leetcode.com/problems/find-the-maximum-subarray-from-an-array-of-arrays\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {number[][]} nums\n * @return {number[]}\n */\nvar findMaxSubArray = function(nums) {\n  const len = nums.length;\n  const result = [];\n  let max = 0;\n  let i = 0;\n  while (i < len) {\n    if (nums[i][0] > max) {\n      max = nums[i][0];\n      result.push(max);\n    }\n    i++;\n  }\n  return result;\n};\n\n// https://leetcode.com/problems/find-the-maximum-subarray-from-an-array-of-arrays\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {number[][]} nums\n * @return {number[]}\n */\nvar findMaxSubArray = function(nums) {\n  const len = nums.length;\n  const result = [];\n  let max = 0;\n  let i = 0;\n  while (i < len) {\n    if (nums[i][0] > max) {\n      max = nums[i][0];\n      result.push(max);\n    }\n    i++;\n  }\n  return result;\n};\n\n// https://leetcode.com/problems/find-the-maximum-subarray-from-an-array-of-arrays\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {number[][]} nums\n * @return {number[]}\n */\nvar findMaxSubArray = function(nums) {\n  const len = nums.length;\n  const result = [];\n  let max = 0;\n  let i = 0;\n  while (i < len) {\n    if (nums[i][0] > max) {\n      max = nums[i][0];\n      result.push(max);\n    }\n    i++;\n  }\n  return result;\n};\n\n// https://leetcode.com/problems/find-the-maximum-subarray-from-an-array-of-arrays\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {number[][]} nums\n * @return {number[]}\n */\nvar findMaxSubArray = function(nums) {\n  const len = nums.length;\n  const result = [];\n  let max = 0;\n  let i = 0;\n  while (i < len) {\n    if (nums[i][0] > max) {\n      max = nums[i][0];", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/121", "prompt": "/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solUtioN([5, 8, 7, 1]) ==> 12\n  solUtioN([3, 3, 3, 3, 3]) ==> 9\n  solUtioN([30, 13, 24, 321]) ==>0\n  */\nconst solUtioN = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solUtioN", "gc": "<|endoftext|>/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solUtioN([5, 8, 7, 1]) ==> 12\n  solUtioN([3, 3, 3, 3, 3]) ==> 9\n  solUtioN([30, 13, 24, 321]) ==>0\n  */\nconst solUtioN = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 1) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non-empty list of integers, return the sum of all of the even elements that are in odd positions.\n  \n\n  Examples\n  solUtioOd([5, 8, 7, 1]) ==> 12\n  solUtioOd([3, 3, 3, 3, 3]) ==> 9\n  solUtioOd([30, 13, 24, 321]) ==>0\n  */\nconst solUtioOd = (lst, i) => {\n  let sum = 0;\n  for (let j = 0; j < lst.length; j++) {\n    if (lst[j] % 2 === 1) {\n      sum += lst[j];\n    }\n  }\n  return sum;\n};\n\n/*Given a non-empty list of integers, return the sum of all of the even elements that are in even positions.\n  \n\n  Examples\n  solUtioEven([5, 8, 7, 1]) ==> 12\n  solUtioEven([3, 3, 3, 3, 3]) ==> 9\n  solUtioEven([30, 13, 24, 321]) ==>0\n  */\nconst solUtioEven = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 1) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non-empty list of integers, return the sum of all of the odd elements that are in odd positions.\n  \n\n  Examples\n  solUtioOddEven([5, 8, 7, 1]) ==> 12\n  solUtioOddEven([3, 3, 3, 3, 3]) ==> 9\n  solUtioOddEven([30, 13, 24, 321]) ==>0\n  */\nconst solUtioOddEven = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 1) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non-empty list of integers, return the sum of all of the even elements that are in even positions.\n  \n\n  Examples\n  solUtioEvenOdd([5, 8, 7, 1]) ==> 12\n  solUtioEvenOdd([3, 3, 3, 3, 3]) ==> 9\n  solUtioEvenOdd([30, 13, 24, 321]) ==>0\n  */\nconst solUtioEvenOdd = (lst, i) => {\n  let sum = 0;\n  for (let j = 0; j < lst.length; j++) {\n    if (lst[j] % 2 === 1) {\n      sum += lst[j];\n    }\n  }\n  return sum;\n};\n\n/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solUtioOddEvenOdd([5, 8, 7, 1]) ==> 12\n  solUtioOddEvenOdd([3, 3, 3, 3, 3]) ==> 9\n  solUtioOddEvenOdd([30, 13, 24, 321]) ==>0\n  */\nconst solUtioOddEvenOdd = (lst, i) => {\n  let sum = 0;\n  for (let j = 0; j < lst.length; j++) {\n    if (lst[j] % 2 === 1) {\n      sum += lst[j];\n    }\n  }\n  return sum;\n};\n\n/*Given a non-empty list of integers, return the sum of all of the even elements that are in odd positions.\n  \n\n  Examples\n  solUtioEvenOddOdd([5, 8, 7, 1]) ==> 12\n  solUtioEvenOddOdd([3, 3, 3, 3, 3]) ==> 9\n  solUtioEvenOddOdd([30, 13, 24, 321]) ==>0\n  */\nconst solUtioEvenOddOdd = (lst, i) => {\n  let sum = 0;\n  for (let j = 0; j < lst.length; j++) {\n    if (lst[j] % 2 === 1) {\n      sum += lst[j];\n    }\n  }\n  return sum;\n};\n\n/*Given a non-empty list of integers, return the sum of all of the even elements that are in even positions.\n  \n\n  Examples\n  solUtioOddEvenOddOdd([5, 8, 7, 1]) ==> 12\n  solUtioOddEvenOddOdd([3, 3, 3, 3, 3]) ==> 9\n  solUtioOddEvenOddOdd([30, 13, 24, 321]) ==>0\n  */\nconst solUtioOddEvenOddOdd = (lst, i) => {\n  let sum = 0;\n  for (let j = 0; j < lst.length; j++) {\n    if (lst[j] % 2 === 1) {\n      sum += lst[j];\n    }\n  }\n  return sum;\n};\n\n/*Given a non-empty list of integers, return the sum of all of the even elements that are in odd positions.\n  \n\n  Examples\n  solUtioEvenOddOddOdd([5, 8, 7, 1]) ==> 12\n  solUtioEvenOddOddOdd([3, 3, 3, 3, 3]) ==> 9\n  solUtioEvenOddOddOdd([30, 13, 24, 321]) ==>0\n  */\nconst solUtioEvenOddOddOdd = (lst, i) => {\n  let sum = 0;\n  for (let j = 0; j < lst.length; j++) {\n    if (lst[j] % 2 === 1) {\n      sum += lst[j];\n    }\n  }\n  return sum;\n};\n\n/*Given a non-empty list of integers, return the sum of all of the even elements that are in even positions.\n  \n\n  Examples\n  solUtioOddEvenOddOddOdd([5, 8, 7, 1]) ==> 12\n  solUtioOddEvenOddOddOdd([3, 3, 3, 3, 3]) ==> 9\n  solUtioOddEvenOddOddOdd([30, 13, 24, 321]) ==>0\n  */\nconst solUtioOddEvenOddOddOdd = (lst, i) => {\n  let sum = 0;\n  for (let j = 0; j < lst.length; j++) {\n    if (lst[j] % 2 === 1) {\n      sum += lst[j];\n    }\n  }\n  return sum;\n};\n\n/*Given a non-empty list of integers, return the sum of all of the even elements that are in odd positions.\n  \n\n  Examples\n  solUtioEvenOddOddOddOdd([5, 8, 7, 1]) ==> 12\n  solUtioEvenOddOddOddOddOdd([3, 3, 3, 3, 3]) ==> 9\n  solUtioEvenOddOddOddOddOdd([30, 13, 24, 321]) ==>0\n  */\nconst solUtioEvenOddOddOddOdd = (lst, i) => {\n  let sum = 0;\n  for (let j = 0; j < lst.length; j++) {\n    if (lst[j] % 2 === 1) {\n      sum += lst[j];\n    }\n  }\n  return sum;\n};\n\n/*Given a non-empty list of integers, return the sum of all of the even elements that are in even positions.\n  \n\n  Examples\n  solUtioOddEven", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addelemEnts = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addelemEnts", "gc": "<|endoftext|>/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addelemEnts = (arr, k) => {\n  let sum = 0;\n  let i = 0;\n  let j = 0;\n  let temp = 0;\n  let temp2 = 0;\n  let temp3 = 0;\n  let temp4 = 0;\n  let temp5 = 0;\n  let temp6 = 0;\n  let temp7 = 0;\n  let temp8 = 0;\n  let temp9 = 0;\n  let temp10 = 0;\n  let temp11 = 0;\n  let temp12 = 0;\n  let temp13 = 0;\n  let temp14 = 0;\n  let temp15 = 0;\n  let temp16 = 0;\n  let temp17 = 0;\n  let temp18 = 0;\n  let temp19 = 0;\n  let temp20 = 0;\n  let temp21 = 0;\n  let temp22 = 0;\n  let temp23 = 0;\n  let temp24 = 0;\n  let temp25 = 0;\n  let temp26 = 0;\n  let temp27 = 0;\n  let temp28 = 0;\n  let temp29 = 0;\n  let temp30 = 0;\n  let temp31 = 0;\n  let temp32 = 0;\n  let temp33 = 0;\n  let temp34 = 0;\n  let temp35 = 0;\n  let temp36 = 0;\n  let temp37 = 0;\n  let temp38 = 0;\n  let temp39 = 0;\n  let temp40 = 0;\n  let temp41 = 0;\n  let temp42 = 0;\n  let temp43 = 0;\n  let temp44 = 0;\n  let temp45 = 0;\n  let temp46 = 0;\n  let temp47 = 0;\n  let temp48 = 0;\n  let temp49 = 0;\n  let temp50 = 0;\n  let temp51 = 0;\n  let temp52 = 0;\n  let temp53 = 0;\n  let temp54 = 0;\n  let temp55 = 0;\n  let temp56 = 0;\n  let temp57 = 0;\n  let temp58 = 0;\n  let temp59 = 0;\n  let temp60 = 0;\n  let temp61 = 0;\n  let temp62 = 0;\n  let temp63 = 0;\n  let temp64 = 0;\n  let temp65 = 0;\n  let temp66 = 0;\n  let temp67 = 0;\n  let temp68 = 0;\n  let temp69 = 0;\n  let temp70 = 0;\n  let temp71 = 0;\n  let temp72 = 0;\n  let temp73 = 0;\n  let temp74 = 0;\n  let temp75 = 0;\n  let temp76 = 0;\n  let temp77 = 0;\n  let temp78 = 0;\n  let temp79 = 0;\n  let temp80 = 0;\n  let temp81 = 0;\n  let temp82 = 0;\n  let temp83 = 0;\n  let temp84 = 0;\n  let temp85 = 0;\n  let temp86 = 0;\n  let temp87 = 0;\n  let temp88 = 0;\n  let temp89 = 0;\n  let temp90 = 0;\n  let temp91 = 0;\n  let temp92 = 0;\n  let temp93 = 0;\n  let temp94 = 0;\n  let temp95 = 0;\n  let temp96 = 0;\n  let temp97 = 0;\n  let temp98 = 0;\n  let temp99 = 0;\n  let temp100 = 0;\n  let temp101 = 0;\n  let temp102 = 0;\n  let temp103 = 0;\n  let temp104 = 0;\n  let temp105 = 0;\n  let temp106 = 0;\n  let temp107 = 0;\n  let temp108 = 0;\n  let temp109 = 0;\n  let temp110 = 0;\n  let temp111 = 0;\n  let temp112 = 0;\n  let temp113 = 0;\n  let temp114 = 0;\n  let temp115 = 0;\n  let temp116 = 0;\n  let temp117 = 0;\n  let temp118 = 0;\n  let temp119 = 0;\n  let temp120 = 0;\n  let temp121 = 0;\n  let temp122 = 0;\n  let temp123 = 0;\n  let temp124 = 0;\n  let temp125 = 0;\n  let temp126 = 0;\n  let temp127 = 0;\n  let temp128 = 0;\n  let temp129 = 0;\n  let temp130 = 0;\n  let temp131 = 0;\n  let temp132 = 0;\n  let temp133 = 0;\n  let temp134 = 0;\n  let temp135 = 0;\n  let temp136 = 0;\n  let temp137 = 0;\n  let temp138 = 0;\n  let temp139 = 0;\n  let temp140 = 0;\n  let temp141 = 0;\n  let temp142 = 0;\n  let temp143 = 0;\n  let temp144 = 0;\n  let temp145 = 0;\n  let temp146 = 0;\n  let temp147 = 0;\n  let temp148 = 0;\n  let temp149 = 0;\n  let temp150 = 0;\n  let temp151 = 0;\n  let temp152 = 0;\n  let temp153 = 0;\n  let temp154 = 0;\n  let temp155 = 0;\n  let temp156 = 0;\n  let temp157 = 0;\n  let temp158 = 0;\n  let temp159 = 0;\n  let temp160 = 0;\n  let temp161 = 0;\n  let temp162 = 0;\n  let temp163 = 0;\n  let temp164 = 0;\n  let temp165 = 0;\n  let temp166 = 0;\n  let temp167 = 0;\n  let temp168 = 0;\n  let temp169 = 0;\n  let temp170 = 0;\n  let temp171 = 0;\n  let temp172 = 0;\n  let temp173 = 0;\n  let temp174 = 0;\n  let temp175 = 0;\n  let temp176 = 0;\n  let temp177 = 0;\n  let temp178 = 0;\n  let temp179 = 0;\n  let temp180 = 0;\n  let temp181 = 0;\n  let temp182 = 0;\n  let temp183 = 0;\n  let temp184 = 0;\n  let temp185 = 0;\n  let temp186 = 0;\n  let temp187 = 0;\n  let temp188 = 0;\n  let temp189 = 0;\n  let temp190 = 0;\n  let temp191 = 0;\n  let temp192 = 0;\n  let temp193 = 0;\n  let temp194 = 0;\n  let temp195 = 0;\n  let temp196 = 0;\n  let temp197 = 0;\n  let temp198 = 0;\n  let temp199 = 0;\n  let temp200 = 0;\n  let temp201 = 0;\n  let temp202 = 0;\n  let temp203 = 0;\n  let temp204 = 0;\n  let temp205 = 0;\n  let temp206 = 0;\n  let temp207 = 0;\n  let temp208 = 0;\n  let temp209 = 0;\n  let temp210 = 0;\n  let temp211 = 0;\n  let temp212 = 0;\n  let temp213 = 0;\n  let temp214 = 0;\n  let temp215 = 0;\n  let temp216 = 0;\n  let temp217 = 0;\n  let temp218 = 0;\n  let temp219 = 0;\n  let temp220 = 0;\n  let temp221 = 0;\n  let temp222 = 0;\n  let temp223 = 0;\n  let temp224 = 0;\n  let temp225 = 0;\n  let temp226 = 0;\n  let temp227 = 0;\n  let temp228 = 0;\n  let temp229 = 0;\n  let temp230 = 0;\n  let temp231 = 0;\n  let temp232 = 0;\n  let temp233 = 0;\n  let temp234 = 0;\n  let temp235 = 0;\n  let temp236 = 0;\n  let temp237 = 0;\n  let temp238 = 0;\n  let temp239 = 0;\n  let temp240 = 0;\n  let temp241 = 0;\n  let temp242 = 0;\n  let temp243 = 0;\n  let temp244 = 0;\n  let temp245 = 0;\n  let temp246 = 0;\n  let temp247 = 0;\n  let temp248 = 0;\n  let temp249 = 0;\n  let temp250 = 0;\n  let temp251 = 0;\n  let temp252 = 0;\n  let temp253 = 0;\n  let temp254 = 0;\n  let temp255 = 0;\n  let temp256 = 0;\n  let temp257 = 0;\n  let temp258 = 0;\n  let temp259 = 0;\n  let temp260 = 0;\n  let temp261 = 0;\n  let temp262 = 0;\n  let temp263 = 0;\n  let temp264 = 0;\n  let temp265 = 0;\n  let temp266 = 0;\n  let temp267 = 0;\n  let temp268 = 0;\n  let temp269 = 0;\n  let temp270 = 0;\n  let temp271 = 0;\n  let temp272 = 0;\n  let temp273 = 0;\n  let temp274 = 0;\n  let temp275 = 0;\n  let temp276 = 0;\n  let temp277 = 0;\n  let temp278 = 0;\n  let temp279 = 0;\n  let temp280 = 0;\n  let temp281 = 0;\n  let temp282 = 0;\n  let temp283 = 0;\n  let temp284 = 0;\n  let temp285 = 0;\n  let temp286 = 0;\n  let ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getoddCOllatZ(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getoddCOllatZ = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getoddCOllatZ", "gc": "<|endoftext|>/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getoddCOllatZ(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getoddCOllatZ = (n) => {\n  let collatz = [1, 1];\n  for (let i = 1; i <= n; i++) {\n    collatz[i] = collatz[i - 1] * 3 + collatz[i - 2];\n  }\n  return collatz;\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the even numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getoddCOllatZ(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getoddCOllatZ = (n) => {\n  let collatz = [1, 1];\n  for (let i = 1; i <= n; i++) {\n    collatz[i] = collatz[i - 1] * 3 + collatz[i - 2];\n  }\n  return collatz;\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the prime numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getoddCOllatZ(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getoddCOllatZ = (n) => {\n  let collatz = [1, 1];\n  for (let i = 1; i <= n; i++) {\n    collatz[i] = collatz[i - 1] * 3 + collatz[i - 2];\n  }\n  return collatz;\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the prime numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getoddCOllatZ(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getoddCOllatZ = (n) => {\n  let collatz = [1, 1];\n  for (let i = 1; i <= n; i++) {\n    collatz[i] = collatz[i - 1] * 3 + collatz[i - 2];\n  }\n  return collatz;\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the prime numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getoddCOllatZ(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getoddCOllatZ = (n) => {\n  let collatz = [1, 1];\n  for (let i = 1; i <= n; i++) {\n    collatz[i] = collatz[i - 1] * 3 + collatz[i - 2];\n  }\n  return collatz;\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the prime numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getoddCOllatZ(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getoddCOllatZ = (n) => {\n  let collatz = [1, 1];\n  for (let i = 1; i <= n; i++) {\n    collatz[i] = collatz[i - 1] * 3 + collatz[i - 2];\n  }\n  return collatz;\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the prime numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/124", "prompt": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  valIdDaTe('03-11-2000') => true\n\n  valIdDaTe('15-01-2012') => false\n\n  valIdDaTe('04-0-2040') => false\n\n  valIdDaTe('06-04-2020') => true\n\n  valIdDaTe('06/04/2020') => false\n  */\nconst valIdDaTe = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "valIdDaTe", "gc": "<|endoftext|>/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  valIdDaTe('03-11-2000') => true\n\n  valIdDaTe('15-01-2012') => false\n\n  valIdDaTe('04-0-2040') => false\n\n  valIdDaTe('06-04-2020') => true\n\n  valIdDaTe('06/04/2020') => false\n  */\nconst valIdDaTe = (date) => {\n  const dateArr = date.split('-');\n  const dateArr = dateArr.map((item) => {\n    return parseInt(item);\n  });\n  const dateArr = dateArr.filter((item) => {\n    return item >= 1 && item <= 31;\n  });\n  const dateArr = dateArr.filter((item) => {\n    return item >= 1 && item <= 30;\n  });\n  const dateArr = dateArr.filter((item) => {\n    return item >= 1 && item <= 29;\n  });\n  const dateArr = dateArr.filter((item) => {\n    return item >= 1 && item <= 12;\n  });\n  const dateArr = dateArr.filter((item) => {\n    return item >= 1 && item <= 12;\n  });\n  const dateArr = dateArr.filter((item) => {\n    return item >= 1 && item <= 12;\n  });\n  const dateArr = dateArr.filter((item) => {\n    return item >= 1 && item <= 12;\n  });\n  const dateArr = dateArr.filter((item) => {\n    return item >= 1 && item <= 12;\n  });\n  const dateArr = dateArr.filter((item) => {\n    return item >= 1 && item <= 12;\n  });\n  const dateArr = dateArr.filter((item) => {\n    return item >= 1 && item <= 12;\n  });\n  const dateArr = dateArr.filter((item) => {\n    return item >= 1 && item <= 12;\n  });\n  const dateArr = dateArr.filter((item) => {\n    return item >= 1 && item <= 12;\n  });\n  const dateArr = dateArr.filter((item) => {\n    return item >= 1 && item <= 12;\n  });\n  const dateArr = dateArr.filter((item) => {\n    return item >= 1 && item <= 12;\n  });\n  const dateArr = dateArr.filter((item) => {\n    return item >= 1 && item <= 12;\n  });\n  const dateArr = dateArr.filter((item) => {\n    return item >= 1 && item <= 12;\n  });\n  const dateArr = dateArr.filter((item) => {\n    return item >= 1 && item <= 12;\n  });\n  const dateArr = dateArr.filter((item) => {\n    return item >= 1 && item <= 12;\n  });\n  const dateArr = dateArr.filter((item) => {\n    return item >= 1 && item <= 12;\n  });\n  const dateArr = dateArr.filter((item) => {\n    return item >= 1 && item <= 12;\n  });\n  const dateArr = dateArr.filter((item) => {\n    return item >= 1 && item <= 12;\n  });\n  const dateArr = dateArr.filter((item) => {\n    return item >= 1 && item <= 12;\n  });\n  const dateArr = dateArr.filter((item) => {\n    return item >= 1 && item <= 12;\n  });\n  const dateArr = dateArr.filter((item) => {\n    return item >= 1 && item <= 12;\n  });\n  const dateArr = dateArr.filter((item) => {\n    return item >= 1 && item <= 12;\n  });\n  const dateArr = dateArr.filter((item) => {\n    return item >= 1 && item <= 12;\n  });\n  const dateArr = dateArr.filter((item) => {\n    return item >= 1 && item <= 12;\n  });\n  const dateArr = dateArr.filter((item) => {\n    return item >= 1 && item <= 12;\n  });\n  const dateArr = dateArr.filter((item) => {\n    return item >= 1 && item <= 12;\n  });\n  const dateArr = dateArr.filter((item) => {\n    return item >= 1 && item <= 12;\n  });\n  const dateArr = dateArr.filter((item) => {\n    return item >= 1 && item <= 12;\n  });\n  const dateArr = dateArr.filter((item) => {\n    return item >= 1 && item <= 12;\n  });\n  const dateArr = dateArr.filter((item) => {\n    return item >= 1 && item <= 12;\n  });\n  const dateArr = dateArr.filter((item) => {\n    return item >= 1 && item <= 12;\n  });\n  const dateArr = dateArr.filter((item) => {\n    return item >= 1 && item <= 12;\n  });\n  const dateArr = dateArr.filter((item) => {\n    return item >= 1 && item <= 12;\n  });\n  const dateArr = dateArr.filter((item) => {\n    return item >= 1 && item <= 12;\n  });\n  const dateArr = dateArr.filter((item) => {\n    return item >= 1 && item <= 12;\n  });\n  const dateArr = dateArr.filter((item) => {\n    return item >= 1 && item <= 12;\n  });\n  const dateArr = dateArr.filter((item) => {\n    return item >= 1 && item <= 12;\n  });\n  const dateArr = dateArr.filter((item) => {\n    return item >= 1 && item <= 12;\n  });\n  const dateArr = dateArr.filter((item) => {\n    return item >= 1 && item <= 12;\n  });\n  const dateArr = dateArr.filter((item) => {\n    return item >= 1 && item <= 12;\n  });\n  const dateArr = dateArr.filter((item) => {\n    return item >= 1 && item <= 12;\n  });\n  const dateArr = dateArr.filter((item) => {\n    return item >= 1 && item <= 12;\n  });\n  const dateArr = dateArr.filter((item) => {\n    return item >= 1 && item <= 12;\n  });\n  const dateArr = dateArr.filter((item) => {\n    return item >= 1 && item <= 12;\n  });\n  const dateArr = dateArr.filter((item) => {\n    return item >= 1 && item <= 12;\n  });\n  const dateArr = dateArr.filter((item) => {\n    return item >= 1 && item <= 12;\n  });\n  const dateArr = dateArr.filter((item) => {\n    return item >= 1 && item <= 12;\n  });\n  const dateArr = dateArr.filter((item) => {\n    return item >= 1 && item <= 12;\n  });\n  const dateArr = dateArr.filter((item) => {\n    return item >= 1 && item <= 12;\n  });\n  const dateArr = dateArr.filter((item) => {\n    return item >= 1 && item <= 12;\n  });\n  const dateArr = dateArr.filter((item) => {\n    return item >= 1 && item <= 12;\n  });\n  const dateArr = dateArr.filter((item) => {\n    return item >= 1 && item <= 12;\n  });\n  const dateArr = dateArr.filter((item) => {\n    return item >= 1 && item <= 12;\n  });\n  const dateArr = dateArr.filter((item) => {\n    return item >= 1 && item <= 12;\n  });\n  const dateArr = dateArr.filter((item) => {\n    return item >= 1 && item <= 12;\n  });\n  const dateArr = dateArr.filter((item) => {\n    return item >= 1 && item <= 12;\n  });", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/125", "prompt": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  splItWoRds(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splItWoRds(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splItWoRds(\"abcdef\") == 3\n  */\nconst splItWoRds = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splItWoRds", "gc": "<|endoftext|>/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splItWoRds(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splItWoRds(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splItWoRds(\"abcdef\") == 3\n  */\nconst splItWoRds = (txt) => {\n  let words = txt.split(' ');\n  let result = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSOrteD([5]) ➞ true\n  isSOrteD([1, 2, 3, 4, 5]) ➞ true\n  isSOrteD([1, 3, 2, 4, 5]) ➞ false\n  isSOrteD([1, 2, 3, 4, 5, 6]) ➞ true\n  isSOrteD([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSOrteD([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSOrteD([1, 2, 2, 3, 3, 4]) ➞ true\n  isSOrteD([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSOrteD = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSOrteD", "gc": "<|endoftext|>/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSOrteD([5]) ➞ true\n  isSOrteD([1, 2, 3, 4, 5]) ➞ true\n  isSOrteD([1, 3, 2, 4, 5]) ➞ false\n  isSOrteD([1, 2, 3, 4, 5, 6]) ➞ true\n  isSOrteD([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSOrteD([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSOrteD([1, 2, 2, 3, 3, 4]) ➞ true\n  isSOrteD([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSOrteD = (lst) => {\n  const set = new Set();\n  lst.forEach((num) => {\n    if (set.has(num)) {\n      return false;\n    }\n    set.add(num);\n  });\n  return true;\n};\n\n/* Given a list of numbers, return whether or not they are sorted\n  in descending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isDOrte([5]) ➞ false\n  isDOrte([1, 2, 3, 4, 5]) ➞ true\n  isDOrte([1, 3, 2, 4, 5]) ➞ false\n  isDOrte([1, 2, 3, 4, 5, 6]) ➞ true\n  isDOrte([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isDOrte([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isDOrte([1, 2, 2, 3, 3, 4]) ➞ true\n  isDOrte([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isDOrte = (lst) => {\n  const set = new Set();\n  lst.forEach((num) => {\n    if (set.has(num)) {\n      return false;\n    }\n    set.add(num);\n  });\n  return true;\n};\n\n/* Given a list of numbers, return whether or not they are sorted\n  in ascending order and in descending order. If list has more than 1\n  duplicate of the same number, return false. Assume no negative numbers\n  and only integers.\n  Examples\n  isAscD([5]) ➞ false\n  isAscD([1, 2, 3, 4, 5]) ➞ true\n  isAscD([1, 3, 2, 4, 5]) ➞ false\n  isAscD([1, 2, 3, 4, 5, 6]) ➞ true\n  isAscD([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isAscD([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isAscD([1, 2, 2, 3, 3, 4]) ➞ true\n  isAscD([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isAscD = (lst) => {\n  const set = new Set();\n  lst.forEach((num) => {\n    if (set.has(num)) {\n      return false;\n    }\n    set.add(num);\n  });\n  return true;\n};\n\n/* Given a list of numbers, return whether or not they are sorted\n  in ascending order and in descending order and in ascending order\n  and in descending order and in ascending order and in descending\n  order and in ascending order and in descending order and in ascending\n  order and in descending order and in ascending order and in descending\n  order and in ascending order and in descending order and in ascending\n  order and in descending order and in ascending order and in descending\n  order and in ascending order and in descending order and in ascending\n  order and in descending order and in ascending order and in descending\n  order and in ascending order and in descending order and in ascending\n  order and in descending order and in ascending order and in descending\n  order and in ascending order and in descending order and in ascending\n  order and in descending order and in ascending order and in descending\n  order and in ascending order and in descending order and in ascending\n  order and in descending order and in ascending order and in descending\n  order and in ascending order and in descending order and in ascending\n  order and in descending order and in ascending order and in descending\n  order and in ascending order and in descending order and in ascending\n  order and in descending order and in ascending order and in descending\n  order and in ascending order and in descending order and in ascending\n  order and in descending order and in ascending order and in descending\n  order and in ascending order and in descending order and in ascending\n  order and in descending order and in ascending order and in descending\n  order and in ascending order and in descending order and in ascending\n  order and in descending order and in ascending order and in descending\n  order and in ascending order and in descending order and in ascending\n  order and in descending order and in ascending order and in descending\n  order and in ascending order and in descending order and in ascending\n  order and in descending order and in ascending order and in descending\n  order and in ascending order and in descending order and in ascending\n  order and in descending order and in ascending order and in descending\n  order and in ascending order and in descending order and in ascending\n  order and in descending order and in ascending order and in descending\n  order and in ascending order and in descending order and in ascending\n  order and in descending order and in ascending order and in descending\n  order and in ascending order and in descending order and in ascending\n  order and in descending order and in ascending order and in descending\n  order and in ascending order and in descending order and in ascending\n  order and in descending order and in ascending order and in descending\n  order and in ascending order and in descending order and in ascending\n  order and in descending order and in ascending order and in descending\n  order and in ascending order and in descending order and in ascending\n  order and in descending order and in ascending order and in descending\n  order and in ascending order and in descending order and in ascending\n  order and in descending order and in ascending order and in descending\n  order and in ascending order and in descending order and in ascending\n  order and in descending order and in ascending order and in descending\n  order and in ascending order and in descending order and in ascending\n  order and in descending order and in ascending order and in descending\n  order and in ascending order and in descending order and in ascending\n  order and in descending order and in ascending order and in descending\n  order and in ascending order and in descending order and in ascending\n  order and in descending order and in ascending order and in descending\n  order and in ascending order and in descending order and in asc", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/127", "prompt": "/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intErseCtion of these two \n  intervals is a prime number.\n  Example, the intErseCtion of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intErseCtion is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intErseCtion((1, 2), (2, 3)) ==> \"NO\"\n  intErseCtion((-1, 1), (0, 4)) ==> \"NO\"\n  intErseCtion((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intErseCtion = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intErseCtion", "gc": "<|endoftext|>/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intErseCtion of these two \n  intervals is a prime number.\n  Example, the intErseCtion of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intErseCtion is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intErseCtion((1, 2), (2, 3)) ==> \"NO\"\n  intErseCtion((-1, 1), (0, 4)) ==> \"NO\"\n  intErseCtion((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intErseCtion = (interval1, interval2) => {\n  let intErseCtion = interval1.length * interval2.length;\n  if (intErseCtion % 2!== 0) {\n    return \"NO\";\n  }\n  if (intErseCtion % 1!== 0) {\n    return \"NO\";\n  }\n  if (intErseCtion === 1) {\n    return \"YES\";\n  }\n  if (intErseCtion === 2) {\n    return \"YES\";\n  }\n  if (intErseCtion === 3) {\n    return \"YES\";\n  }\n  if (intErseCtion === 4) {\n    return \"YES\";\n  }\n  if (intErseCtion === 5) {\n    return \"YES\";\n  }\n  if (intErseCtion === 6) {\n    return \"YES\";\n  }\n  if (intErseCtion === 7) {\n    return \"YES\";\n  }\n  if (intErseCtion === 8) {\n    return \"YES\";\n  }\n  if (intErseCtion === 9) {\n    return \"YES\";\n  }\n  if (intErseCtion === 10) {\n    return \"YES\";\n  }\n  if (intErseCtion === 11) {\n    return \"YES\";\n  }\n  if (intErseCtion === 12) {\n    return \"YES\";\n  }\n  if (intErseCtion === 13) {\n    return \"YES\";\n  }\n  if (intErseCtion === 14) {\n    return \"YES\";\n  }\n  if (intErseCtion === 15) {\n    return \"YES\";\n  }\n  if (intErseCtion === 16) {\n    return \"YES\";\n  }\n  if (intErseCtion === 17) {\n    return \"YES\";\n  }\n  if (intErseCtion === 18) {\n    return \"YES\";\n  }\n  if (intErseCtion === 19) {\n    return \"YES\";\n  }\n  if (intErseCtion === 20) {\n    return \"YES\";\n  }\n  if (intErseCtion === 21) {\n    return \"YES\";\n  }\n  if (intErseCtion === 22) {\n    return \"YES\";\n  }\n  if (intErseCtion === 23) {\n    return \"YES\";\n  }\n  if (intErseCtion === 24) {\n    return \"YES\";\n  }\n  if (intErseCtion === 25) {\n    return \"YES\";\n  }\n  if (intErseCtion === 26) {\n    return \"YES\";\n  }\n  if (intErseCtion === 27) {\n    return \"YES\";\n  }\n  if (intErseCtion === 28) {\n    return \"YES\";\n  }\n  if (intErseCtion === 29) {\n    return \"YES\";\n  }\n  if (intErseCtion === 30) {\n    return \"YES\";\n  }\n  if (intErseCtion === 31) {\n    return \"YES\";\n  }\n  if (intErseCtion === 32) {\n    return \"YES\";\n  }\n  if (intErseCtion === 33) {\n    return \"YES\";\n  }\n  if (intErseCtion === 34) {\n    return \"YES\";\n  }\n  if (intErseCtion === 35) {\n    return \"YES\";\n  }\n  if (intErseCtion === 36) {\n    return \"YES\";\n  }\n  if (intErseCtion === 37) {\n    return \"YES\";\n  }\n  if (intErseCtion === 38) {\n    return \"YES\";\n  }\n  if (intErseCtion === 39) {\n    return \"YES\";\n  }\n  if (intErseCtion === 40) {\n    return \"YES\";\n  }\n  if (intErseCtion === 41) {\n    return \"YES\";\n  }\n  if (intErseCtion === 42) {\n    return \"YES\";\n  }\n  if (intErseCtion === 43) {\n    return \"YES\";\n  }\n  if (intErseCtion === 44) {\n    return \"YES\";\n  }\n  if (intErseCtion === 45) {\n    return \"YES\";\n  }\n  if (intErseCtion === 46) {\n    return \"YES\";\n  }\n  if (intErseCtion === 47) {\n    return \"YES\";\n  }\n  if (intErseCtion === 48) {\n    return \"YES\";\n  }\n  if (intErseCtion === 49) {\n    return \"YES\";\n  }\n  if (intErseCtion === 50) {\n    return \"YES\";\n  }\n  if (intErseCtion === 51) {\n    return \"YES\";\n  }\n  if (intErseCtion === 52) {\n    return \"YES\";\n  }\n  if (intErseCtion === 53) {\n    return \"YES\";\n  }\n  if (intErseCtion === 54) {\n    return \"YES\";\n  }\n  if (intErseCtion === 55) {\n    return \"YES\";\n  }\n  if (intErseCtion === 56) {\n    return \"YES\";\n  }\n  if (intErseCtion === 57) {\n    return \"YES\";\n  }\n  if (intErseCtion === 58) {\n    return \"YES\";\n  }\n  if (intErseCtion === 59) {\n    return \"YES\";\n  }\n  if (intErseCtion === 60) {\n    return \"YES\";\n  }\n  if (intErseCtion === 61) {\n    return \"YES\";\n  }\n  if (intErseCtion === 62) {\n    return \"YES\";\n  }\n  if (intErseCtion === 63) {\n    return \"YES\";\n  }\n  if (intErseCtion === 64) {\n    return \"YES\";\n  }\n  if (intErseCtion === 65) {\n    return \"YES\";\n  }\n  if (intErseCtion === 66) {\n    return \"YES\";\n  }\n  if (intErseCtion === 67) {\n    return \"YES\";\n  }\n  if (intErseCtion === 68) {\n    return \"YES\";\n  }\n  if (intErseCtion === 69) {\n    return \"YES\";\n  }\n  if (intErseCtion === 70) {\n    return \"YES\";\n  }\n  if (intErseCtion === 71) {\n    return \"YES\";\n  }\n  if (intErseCtion === 72) {\n    return \"YES\";\n  }\n  if (intErseCtion === 73) {\n    return \"YES\";\n  }\n  if (intErseCtion === 74) {\n    return \"YES\";\n  }\n  if (intErseCtion === 75) {\n    return \"YES\";\n  }\n  if (intErseCtion === 76) {\n    return \"YES\";\n  }\n  if (intErseCtion === 77) {\n    return \"YES\";\n  }\n  if (intErseCtion === 78) {\n    return \"YES\";\n  }\n  if (intErseCtion === 79) {\n    return \"YES\";\n  }\n  if (intErseC", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/128", "prompt": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> proDSigNs([1, 2, 2, -4]) == -9\n  >>> proDSigNs([0, 1]) == 0\n  >>> proDSigNs([]) == null\n  */\nconst proDSigNs = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "proDSigNs", "gc": "<|endoftext|>/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> proDSigNs([1, 2, 2, -4]) == -9\n  >>> proDSigNs([0, 1]) == 0\n  >>> proDSigNs([]) == null\n  */\nconst proDSigNs = (arr) => {\n  if (arr.length === 0) {\n    return null\n  }\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    let sign = arr[i] > 0? 1 : -1\n    sum += sign * Math.pow(Math.abs(arr[i]), 2)\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> proDSigNs([1, 2, 2, -4]) == -9\n  >>> proDSigNs([0, 1]) == 0\n  >>> proDSigNs([]) == null\n  */\nconst proDSigNs2 = (arr) => {\n  if (arr.length === 0) {\n    return null\n  }\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    let sign = arr[i] > 0? 1 : -1\n    sum += sign * Math.pow(Math.abs(arr[i]), 2)\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> proDSigNs([1, 2, 2, -4]) == -9\n  >>> proDSigNs([0, 1]) == 0\n  >>> proDSigNs([]) == null\n  */\nconst proDSigNs3 = (arr) => {\n  if (arr.length === 0) {\n    return null\n  }\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    let sign = arr[i] > 0? 1 : -1\n    sum += sign * Math.pow(Math.abs(arr[i]), 2)\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> proDSigNs([1, 2, 2, -4]) == -9\n  >>> proDSigNs([0, 1]) == 0\n  >>> proDSigNs([]) == null\n  */\nconst proDSigNs4 = (arr) => {\n  if (arr.length === 0) {\n    return null\n  }\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    let sign = arr[i] > 0? 1 : -1\n    sum += sign * Math.pow(Math.abs(arr[i]), 2)\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> proDSigNs([1, 2, 2, -4]) == -9\n  >>> proDSigNs([0, 1]) == 0\n  >>> proDSigNs([]) == null\n  */\nconst proDSigNs5 = (arr) => {\n  if (arr.length === 0) {\n    return null\n  }\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    let sign = arr[i] > 0? 1 : -1\n    sum += sign * Math.pow(Math.abs(arr[i]), 2)\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> proDSigNs([1, 2, 2, -4]) == -9\n  >>> proDSigNs([0, 1]) == 0\n  >>> proDSigNs([]) == null\n  */\nconst proDSigNs6 = (arr) => {\n  if (arr.length === 0) {\n    return null\n  }\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    let sign = arr[i] > 0? 1 : -1\n    sum += sign * Math.pow(Math.abs(arr[i]), 2)\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> proDSigNs([1, 2, 2, -4]) == -9\n  >>> proDSigNs([0, 1]) == 0\n  >>> proDSigNs([]) == null\n  */\nconst proDSigNs7 = (arr) => {\n  if (arr.length === 0) {\n    return null\n  }\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    let sign = arr[i] > 0? 1 : -1\n    sum += sign * Math.pow(Math.abs(arr[i]), 2)\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> proDSigNs([1, 2, 2, -4]) == -9\n  >>> proDSigNs([0, 1]) == 0\n  >>> proDSigNs([]) == null\n  */\nconst proDSigNs8 = (arr) => {\n  if (arr.length === 0) {\n    return null\n  }\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    let sign = arr[i] > 0? 1 : -1\n    sum += sign * Math.pow(Math.abs(arr[i]), 2)\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> proDSigNs([1, 2, 2, -4]) == -9\n  >>> proDSigNs([0, 1]) == 0\n  >>> proDSigNs([]) == null\n  */\nconst proDSigNs9 = (arr) => {\n  if (arr.length === 0) {\n    return null\n  }\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    let sign = arr[i] > 0? 1 : -1\n    sum += sign * Math.pow(Math.abs(arr[i]), 2)\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> proDSigNs([1, 2, 2, -4]) == -9\n  >>> proDSigNs([0, 1]) == 0\n  >>> proDSigNs([]) == null\n  */\nconst proDSigNs10 = (arr) => {\n  if (arr.length === 0) {\n    return null\n  }\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    let sign = arr[i] > 0? 1 : -1\n    sum += sign * Math.pow(Math.abs(arr[i]), 2)\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> proDSigNs([1, 2, 2, -4]) == -9\n  >>> proDSig", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minpath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minpath", "gc": "<|endoftext|>/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minpath = (grid, k) => {\n  const [rows, cols] = grid.length;\n  const [path] = [[0, cols - 1]];\n  let minPath = [];\n  let visited = new Set();\n  visited.add(0);\n  visited.add(cols - 1);\n  visited.add(rows - 1);\n  minPath.push(0);\n  while (path.length > 0) {\n    const [x, y] = path.pop();\n    const cell = grid[x][y];\n    if (visited.has(cell)) {\n      continue;\n    }\n    visited.add(cell);\n    if (cell === k) {\n      minPath.push(cell);\n    } else {\n      const neighbors = grid[x + 1][y] || [];\n      neighbors.forEach((n) => {\n        if (visited.has(n)) {\n          return;\n        }\n        visited.add(n);\n        if (n === k) {\n          minPath.push(n);\n        }\n      });\n    }\n  }\n  return minPath;\n};\n\nmodule.exports = minpath;\n\n},{}],3:[function(require,module,exports){\n/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minpath = (grid, k) => {\n  const [rows, cols] = grid.length;\n  const [path] = [[0, cols - 1]];\n  let minPath = [];\n  let visited = new Set();\n  visited.add(0);\n  visited.add(cols - 1);\n  visited.add(rows - 1);\n  minPath.push(0);\n  while (path.length > 0) {\n    const [x, y] = path.pop();\n    const cell = grid[x][y];\n    if (visited.has(cell)) {\n      continue;\n    }\n    visited.add(cell);\n    if (cell === k) {\n      minPath.push(cell);\n    } else {\n      const neighbors = grid[x + 1][y] || [];\n      neighbors.forEach((n) => {\n        if (visited.has(n)) {\n          return;\n        }\n        visited.add(n);\n        if (n === k) {\n          minPath.push(n);\n        }\n      });\n    }\n  }\n  return minPath;\n};\n\nmodule.exports = minpath;\n\n},{}],4:[function(require,module,exports){\n/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minpath = (grid, k) => {\n  const [rows, cols] = grid.length;\n  const [path] = [[0, cols - 1]];\n  let minPath = [];\n  let visited = new Set();\n  visited.add(0);\n  visited.add(cols - 1);\n  visited.add(rows - 1);\n  minPath.push(0);\n  while (path.length > 0) {\n    const [x, y] = path.pop();\n    const cell = grid[x][y];\n    if (visited.has(cell)) {\n      continue;\n    }\n    visited.add(cell);\n    if (cell === k) {\n      minPath.push(cell);\n    } else {\n      const neighbors = grid[x + 1][y] || [];\n      neighbors.forEach((n) => {\n        if (visited.has(n)) {\n          return;\n        }\n        visited.add(n);\n        if (n === k) {\n          minPath.push(n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/13", "prompt": "/* Return a greatest common divisor of two integers a and b\n  >>> greAtesTCommOnDIvisoR(3, 5)\n  1\n  >>> greAtesTCommOnDIvisoR(25, 15)\n  5\n  */\nconst greAtesTCommOnDIvisoR = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greAtesTCommOnDIvisoR", "gc": "<|endoftext|>/* Return a greatest common divisor of two integers a and b\n  >>> greAtesTCommOnDIvisoR(3, 5)\n  1\n  >>> greAtesTCommOnDIvisoR(25, 15)\n  5\n  */\nconst greAtesTCommOnDIvisoR = (a, b) => {\n  const aDiv = a % b;\n  const bDiv = b / a;\n  return aDiv === bDiv? a : bDiv;\n};\n\n/**\n * Return the greatest common divisor of two integers a and b\n * >>> greAtesTCommOnDIvisoR(25, 15)\n * 5\n */\nconst greAtesTCommOnDIvisoR2 = (a, b) => {\n  const aDiv = a % b;\n  const bDiv = b / a;\n  return aDiv === bDiv? a : bDiv;\n};\n\n/**\n * Return the greatest common divisor of two integers a and b\n * >>> greAtesTCommOnDIvisoR2(25, 15)\n * 5\n */\nconst greAtesTCommOnDIvisoR3 = (a, b) => {\n  const aDiv = a % b;\n  const bDiv = b / a;\n  return aDiv === bDiv? a : bDiv;\n};\n\n/**\n * Return the greatest common divisor of two integers a and b\n * >>> greAtesTCommOnDIvisoR3(25, 15)\n * 5\n */\nconst greAtesTCommOnDIvisoR4 = (a, b) => {\n  const aDiv = a % b;\n  const bDiv = b / a;\n  return aDiv === bDiv? a : bDiv;\n};\n\n/**\n * Return the greatest common divisor of two integers a and b\n * >>> greAtesTCommOnDIvisoR4(25, 15)\n * 5\n */\nconst greAtesTCommOnDIvisoR5 = (a, b) => {\n  const aDiv = a % b;\n  const bDiv = b / a;\n  return aDiv === bDiv? a : bDiv;\n};\n\n/**\n * Return the greatest common divisor of two integers a and b\n * >>> greAtesTCommOnDIvisoR5(25, 15)\n * 5\n */\nconst greAtesTCommOnDIvisoR6 = (a, b) => {\n  const aDiv = a % b;\n  const bDiv = b / a;\n  return aDiv === bDiv? a : bDiv;\n};\n\n/**\n * Return the greatest common divisor of two integers a and b\n * >>> greAtesTCommOnDIvisoR6(25, 15)\n * 5\n */\nconst greAtesTCommOnDIvisoR7 = (a, b) => {\n  const aDiv = a % b;\n  const bDiv = b / a;\n  return aDiv === bDiv? a : bDiv;\n};\n\n/**\n * Return the greatest common divisor of two integers a and b\n * >>> greAtesTCommOnDIvisoR7(25, 15)\n * 5\n */\nconst greAtesTCommOnDIvisoR8 = (a, b) => {\n  const aDiv = a % b;\n  const bDiv = b / a;\n  return aDiv === bDiv? a : bDiv;\n};\n\n/**\n * Return the greatest common divisor of two integers a and b\n * >>> greAtesTCommOnDIvisoR8(25, 15)\n * 5\n */\nconst greAtesTCommOnDIvisoR9 = (a, b) => {\n  const aDiv = a % b;\n  const bDiv = b / a;\n  return aDiv === bDiv? a : bDiv;\n};\n\n/**\n * Return the greatest common divisor of two integers a and b\n * >>> greAtesTCommOnDIvisoR9(25, 15)\n * 5\n */\nconst greAtesTCommOnDIvisoR10 = (a, b) => {\n  const aDiv = a % b;\n  const bDiv = b / a;\n  return aDiv === bDiv? a : bDiv;\n};\n\n/**\n * Return the greatest common divisor of two integers a and b\n * >>> greAtesTCommOnDIvisoR10(25, 15)\n * 5\n */\nconst greAtesTCommOnDIvisoR11 = (a, b) => {\n  const aDiv = a % b;\n  const bDiv = b / a;\n  return aDiv === bDiv? a : bDiv;\n};\n\n/**\n * Return the greatest common divisor of two integers a and b\n * >>> greAtesTCommOnDIvisoR11(25, 15)\n * 5\n */\nconst greAtesTCommOnDIvisoR12 = (a, b) => {\n  const aDiv = a % b;\n  const bDiv = b / a;\n  return aDiv === bDiv? a : bDiv;\n};\n\n/**\n * Return the greatest common divisor of two integers a and b\n * >>> greAtesTCommOnDIvisoR12(25, 15)\n * 5\n */\nconst greAtesTCommOnDIvisoR13 = (a, b) => {\n  const aDiv = a % b;\n  const bDiv = b / a;\n  return aDiv === bDiv? a : bDiv;\n};\n\n/**\n * Return the greatest common divisor of two integers a and b\n * >>> greAtesTCommOnDIvisoR13(25, 15)\n * 5\n */\nconst greAtesTCommOnDIvisoR14 = (a, b) => {\n  const aDiv = a % b;\n  const bDiv = b / a;\n  return aDiv === bDiv? a : bDiv;\n};\n\n/**\n * Return the greatest common divisor of two integers a and b\n * >>> greAtesTCommOnDIvisoR14(25, 15)\n * 5\n */\nconst greAtesTCommOnDIvisoR15 = (a, b) => {\n  const aDiv = a % b;\n  const bDiv = b / a;\n  return aDiv === bDiv? a : bDiv;\n};\n\n/**\n * Return the greatest common divisor of two integers a and b\n * >>> greAtesTCommOnDIvisoR15(25, 15)\n * 5\n */\nconst greAtesTCommOnDIvisoR16 = (a, b) => {\n  const aDiv = a % b;\n  const bDiv = b / a;\n  return aDiv === bDiv? a : bDiv;\n};\n\n/**\n * Return the greatest common divisor of two integers a and b\n * >>> greAtesTCommOnDIvisoR16(0, 15)\n * 0\n */\nconst greAtesTCommOnDIvisoR17 = (a, b) => {\n  const aDiv = a % b;\n  const bDiv = b / a;\n  return aDiv === bDiv? a : bDiv;\n};\n\n/**\n * Return the greatest common divisor of two integers a and b\n * >>> greAtesTCommOnDIvisoR17(0, 15)\n * 0\n */\nconst greAtesTCommOnDIvisoR18 = (a, b) => {\n  const aDiv = a % b;\n  const bDiv = b / a;\n  return aDiv === bDiv? ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "gc": "<|endoftext|>/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  if (n <= 1) return [];\n  return [\n    tri(n - 1) + tri(n - 2) + tri(n + 1),\n    tri(n - 1) + tri(n - 2) + tri(n),\n    tri(n - 1) + tri(n - 2),\n    tri(n),\n  ];\n};\n\n/*\n  Given a non-negative integer n, return the first n + 1 numbers of the Fibonacci sequence.\n  Examples:\n  fib(5) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(4) = [1, 1, 2, 3, 5, 8]\n  fib(3) = [1, 1, 2, 3, 5]\n  fib(2) = [1, 1, 2]\n  fib(1) =  1\n*/\nconst fib = (n) => {\n  if (n <= 1) return [];\n  return [\n    fib(n - 1) + fib(n - 2),\n    fib(n - 1) + fib(n - 3),\n    fib(n - 2),\n    fib(n - 3),\n  ];\n};\n\n/*\n  Given a non-negative integer n, return the first n + 1 numbers of the Fibonacci sequence.\n  Examples:\n  fib(5) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(4) = [1, 1, 2, 3, 5, 8]\n  fib(3) = [1, 1, 2, 3, 5]\n  fib(2) = [1, 1, 2]\n  fib(1) =  1\n*/\nconst fib2 = (n) => {\n  if (n <= 1) return [];\n  return [\n    fib(n - 1) + fib(n - 2),\n    fib(n - 1) + fib(n - 3),\n    fib(n - 2),\n    fib(n - 3),\n  ];\n};\n\n/*\n  Given a non-negative integer n, return the first n + 1 numbers of the Fibonacci sequence.\n  Examples:\n  fib(5) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(4) = [1, 1, 2, 3, 5, 8]\n  fib(3) = [1, 1, 2, 3, 5]\n  fib(2) = [1, 1, 2]\n  fib(1) =  1\n*/\nconst fib3 = (n) => {\n  if (n <= 1) return [];\n  return [\n    fib(n - 1) + fib(n - 2),\n    fib(n - 1) + fib(n - 3),\n    fib(n - 2),\n  ];\n};\n\n/*\n  Given a non-negative integer n, return the first n + 1 numbers of the Fibonacci sequence.\n  Examples:\n  fib(5) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(4) = [1, 1, 2, 3, 5, 8]\n  fib(3) = [1, 1, 2, 3, 5]\n  fib(2) = [1, 1, 2]\n  fib(1) =  1\n*/\nconst fib4 = (n) => {\n  if (n <= 1) return [];\n  return [\n    fib(n - 1) + fib(n - 2),\n    fib(n - 1) + fib(n - 3),\n  ];\n};\n\n/*\n  Given a non-negative integer n, return the first n + 1 numbers of the Fibonacci sequence.\n  Examples:\n  fib(5) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(4) = [1, 1, 2, 3, 5, 8]\n  fib(3) = [1, 1, 2, 3, 5]\n  fib(2) = [1, 1, 2]\n  fib(1) =  1\n*/\nconst fib5 = (n) => {\n  if (n <= 1) return [];\n  return [\n    fib(n - 1) + fib(n - 2),\n  ];\n};\n\n/*\n  Given a non-negative integer n, return the first n + 1 numbers of the Fibonacci sequence.\n  Examples:\n  fib(5) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(4) = [1, 1, 2, 3, 5, 8]\n  fib(3) = [1, 1, 2, 3, 5]\n  fib(2) = [1, 1, 2]\n  fib(1) =  1\n*/\nconst fib6 = (n) => {\n  if (n <= 1) return [];\n  return [\n    fib(n - 1) + fib(n - 2),\n  ];\n};\n\n/*\n  Given a non-negative integer n, return the first n + 1 numbers of the Fibonacci sequence.\n  Examples:\n  fib(5) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(4) = [1, 1, 2, 3, 5, 8]\n  fib(3) = [1, 1, 2, 3, 5]\n  fib(2) = [1, 1, 2]\n  fib(1) =  1\n*/\nconst fib7 = (n) => {\n  if (n <= 1) return [];\n  return [\n    fib(n - 1) + fib(n - 2),\n  ];\n};\n\n/*\n  Given a non-negative integer n, return the first n + 1 numbers of the Fibonacci sequence.\n  Examples:\n  fib(5) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(4) = [1, 1, 2, 3, 5, 8]\n  fib(3) = [1, 1, 2, 3, 5]\n  fib(2) = [1, 1, 2]\n  fib(1) =  1\n*/\nconst fib8 = (n) => {\n  if (n <= 1) return [];\n  return [\n    fib(n - 1) + fib(n - 2),\n  ];\n};\n\n/*\n  Given a non-negative integer n, return the first n + 1 numbers of the Fibonacci sequence.\n  Examples:\n  fib(5) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(4) = [1, 1, 2, 3, 5, 8]\n  fib(3) = [1, 1, 2, 3, 5]\n  fib(2) = [1, 1, 2]\n  fib(1) =  1\n*/\nconst fib9 = (n) => {\n  if (n <= 1) return [];\n  return [\n    fib(n - 1) + fib(n - 2),\n  ];\n};\n\n/*\n  Given a non-negative integer n, return the first n + 1 numbers of the Fibonacci sequence.\n  Examples:\n  fib(5) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(4) = [1, 1, 2, 3, 5, 8]\n  fib(3) = [1, 1, 2, 3, 5]\n  fib(2) = [1, 1, 2]\n  fib(1) =  1\n*/\nconst fib10 = (n) => {\n  if (n <= 1) return [];\n  return [\n    fib(n - 1) + fib(n - 2),\n  ];\n};\n\n/*\n  Given a non-negative integer n, return the first n + 1 numbers of the Fibonacci sequence.\n  Examples:\n  fib(5) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(4) = [1, 1, 2, 3, 5, 8]\n  fib(3) = [1, 1, 2, 3, 5]\n  fib(2) = [1, 1, 2]\n  fib(1) =  1\n*/\nconst fib11 = (n) => {\n  if (n <= 1) return [];\n  return [\n    fib(n - 1) + fib(n - 2),\n  ];\n};\n\n/*\n  Given a non-negative integer n, return the first n + 1 numbers of the Fibonacci sequence.\n  Examples:\n  fib(5) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(4) = [1, 1, 2, 3, 5, 8]\n  fib(3) = [1, 1, 2, 3, 5]\n  fib(2) = [1, 1, 2]\n  fib(1) ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integer n, return the product of the odd digIts.\n  Return 0 if all digIts are even.\n  For example:\n  digIts(1)  == 1\n  digIts(4)  == 0\n  digIts(235) == 15\n  */\nconst digIts = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digIts", "gc": "<|endoftext|>/*Given a positive integer n, return the product of the odd digIts.\n  Return 0 if all digIts are even.\n  For example:\n  digIts(1)  == 1\n  digIts(4)  == 0\n  digIts(235) == 15\n  */\nconst digIts = (n) => {\n  let res = 0\n  for (let i = 1; i < n; i++) {\n    res *= i\n  }\n  return res\n}\n\n/*Given a positive integer n, return the product of the even digIts.\n  Return 0 if all digIts are odd.\n  For example:\n  digIts(1)  == 1\n  digIts(4)  == 0\n  digIts(235) == 15\n  */\nconst evenDigIts = (n) => {\n  let res = 0\n  for (let i = 1; i < n; i++) {\n    res *= i\n  }\n  return res % 2\n}\n\n/*Given a positive integer n, return the product of the odd digIts.\n  Return 0 if all digIts are odd.\n  For example:\n  digIts(1)  == 1\n  digIts(4)  == 0\n  digIts(235) == 15\n  */\nconst oddDigIts = (n) => {\n  let res = 0\n  for (let i = 1; i < n; i++) {\n    res *= i\n  }\n  return res % 2\n}\n\n/*Given a positive integer n, return the product of the even digIts.\n  Return 0 if all digIts are even.\n  For example:\n  digIts(1)  == 1\n  digIts(4)  == 0\n  digIts(235) == 15\n  */\nconst evenDigitsOdd = (n) => {\n  let res = 0\n  for (let i = 1; i < n; i++) {\n    res *= i\n  }\n  return res % 2 === 0\n}\n\n/*Given a positive integer n, return the product of the odd digIts.\n  Return 0 if all digIts are even.\n  For example:\n  digIts(1)  == 1\n  digIts(4)  == 0\n  digIts(235) == 15\n  */\nconst oddDigitsOdd = (n) => {\n  let res = 0\n  for (let i = 1; i < n; i++) {\n    res *= i\n  }\n  return res % 2 === 0\n}\n\n/*Given a positive integer n, return the product of the even digIts.\n  Return 0 if all digIts are odd.\n  For example:\n  digIts(1)  == 1\n  digIts(4)  == 0\n  digIts(235) == 15\n  */\nconst evenDigitsEven = (n) => {\n  let res = 0\n  for (let i = 1; i < n; i++) {\n    res *= i\n  }\n  return res % 2 === 1\n}\n\n/*Given a positive integer n, return the product of the odd digIts.\n  Return 0 if all digIts are even.\n  For example:\n  digIts(1)  == 1\n  digIts(4)  == 0\n  digIts(235) == 15\n  */\nconst oddDigitsEven = (n) => {\n  let res = 0\n  for (let i = 1; i < n; i++) {\n    res *= i\n  }\n  return res % 2 === 1\n}\n\n/*Given a positive integer n, return the product of the even digIts.\n  Return 0 if all digIts are odd.\n  For example:\n  digIts(1)  == 1\n  digIts(4)  == 0\n  digIts(235) == 15\n  */\nconst evenDigitsOddEven = (n) => {\n  let res = 0\n  for (let i = 1; i < n; i++) {\n    res *= i\n  }\n  return res % 2 === 1 &&\n         res % 2 === 0\n}\n\n/*Given a positive integer n, return the product of the odd digIts.\n  Return 0 if all digIts are even.\n  For example:\n  digIts(1)  == 1\n  digIts(4)  == 0\n  digIts(235) == 15\n  */\nconst oddDigitsOddEven = (n) => {\n  let res = 0\n  for (let i = 1; i < n; i++) {\n    res *= i\n  }\n  return res % 2 === 1 &&\n         res % 2 === 0\n}\n\n/*Given a positive integer n, return the product of the even digIts.\n  Return 0 if all digIts are odd.\n  For example:\n  digIts(1)  == 1\n  digIts(4)  == 0\n  digIts(235) == 15\n  */\nconst evenDigitsEvenOddEven = (n) => {\n  let res = 0\n  for (let i = 1; i < n; i++) {\n    res *= i\n  }\n  return res % 2 === 1 &&\n         res % 2 === 0 &&\n         res % 2 === 1\n}\n\n/*Given a positive integer n, return the product of the odd digIts.\n  Return 0 if all digIts are even.\n  For example:\n  digIts(1)  == 1\n  digIts(4)  == 0\n  digIts(235) == 15\n  */\nconst oddDigitsEvenOddEven = (n) => {\n  let res = 0\n  for (let i = 1; i < n; i++) {\n    res *= i\n  }\n  return res % 2 === 1 &&\n         res % 2 === 0 &&\n         res % 2 === 0\n}\n\n/*Given a positive integer n, return the product of the even digIts.\n  Return 0 if all digIts are odd.\n  For example:\n  digIts(1)  == 1\n  digIts(4)  == 0\n  digIts(235) == 15\n  */\nconst evenDigitsOddOddEven = (n) => {\n  let res = 0\n  for (let i = 1; i < n; i++) {\n    res *= i\n  }\n  return res % 2 === 1 &&\n         res % 2 === 0 &&\n         res % 2 === 0\n}\n\n/*Given a positive integer n, return the product of the odd digIts.\n  Return 0 if all digIts are even.\n  For example:\n  digIts(1)  == 1\n  digIts(4)  == 0\n  digIts(235) == 15\n  */\nconst oddDigitsOddOddEven = (n) => {\n  let res = 0\n  for (let i = 1; i < n; i++) {\n    res *= i\n  }\n  return res % 2 === 1 &&\n         res % 2 === 0 &&\n         res % 2 === 0\n}\n\n/*Given a positive integer n, return the product of the even digIts.\n  Return 0 if all digIts are odd.\n  For example:\n  digIts(1)  == 1\n  digIts(4)  == 0\n  digIts(235) == 15\n  */\nconst evenDigitsEvenOddOdd = (n) => {\n  let res = 0\n  for (let i = 1; i < n; i++) {\n    res *= i\n  }\n  return res % 2 === 1 &&\n         res % 2 === 0 &&\n         res % 2 === 0\n}\n\n/*Given a positive integer n, return the product of the odd digIts.\n  Return 0 if all digIts are even.\n  For example:\n  digIts(1)  == 1\n  digIts(4)  == 0\n  digIts(235) == 15\n  */\nconst oddDigitsEvenOddOdd = (n) => {\n  let res = 0\n  for (let i = 1; i < n; i++) {\n    res *= i\n  }\n  return res % 2 === 1 &&\n         res % 2 === 0 &&\n         res % 2 === 0\n}\n\n/*Given a positive integer n, return the product of the even digIts.\n  Return 0 if all digIts are odd.\n  For example:\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 3}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNEsteD('[[]]') ➞ true\n  isNEsteD('[]]]]]]][[[[[]') ➞ false\n  isNEsteD('[][]') ➞ false\n  isNEsteD('[]') ➞ false\n  isNEsteD('[[][]]') ➞ true\n  isNEsteD('[[]][[') ➞ true\n  */\nconst isNEsteD = (string) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNEsteD", "gc": "<|endoftext|>/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNEsteD('[[]]') ➞ true\n  isNEsteD('[]]]]]]][[[[[]') ➞ false\n  isNEsteD('[][]') ➞ false\n  isNEsteD('[]') ➞ false\n  isNEsteD('[[][]]') ➞ true\n  isNEsteD('[[]][[') ➞ true\n  */\nconst isNEsteD = (string) => {\n  const nestingDepth = nestingDepthOf(string);\n  return nestingDepth > 0;\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNEsted('[[]]') ➞ true\n  isNEsted('[]]]]]]][[[[[]') ➞ false\n  isNEsted('[][]') ➞ false\n  isNEsted('[]') ➞ false\n  isNEsted('[[][]]') ➞ true\n  isNEsted('[[]][[') ➞ true\n  */\nconst isNEsted = (string) => {\n  const nestingDepth = nestingDepthOf(string);\n  return nestingDepth > 0;\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ false\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ true\n  */\nconst isNested = (string) => {\n  const nestingDepth = nestingDepthOf(string);\n  return nestingDepth > 0;\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ false\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ true\n  */\nconst isNested = (string) => {\n  const nestingDepth = nestingDepthOf(string);\n  return nestingDepth > 0;\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ false\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ true\n  */\nconst isNested = (string) => {\n  const nestingDepth = nestingDepthOf(string);\n  return nestingDepth > 0;\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ false\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ true\n  */\nconst isNested = (string) => {\n  const nestingDepth = nestingDepthOf(string);\n  return nestingDepth > 0;\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ false\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ true\n  */\nconst isNested = (string) => {\n  const nestingDepth = nestingDepthOf(string);\n  return nestingDepth > 0;\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ false\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ true\n  */\nconst isNested = (string) => {\n  const nestingDepth = nestingDepthOf(string);\n  return nestingDepth > 0;\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ false\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ true\n  */\nconst isNested = (string) => {\n  const nestingDepth = nestingDepthOf(string);\n  return nestingDepth > 0;\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ false\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ true\n  */\nconst isNested = (string) => {\n  const nestingDepth = nestingDepthOf(string);\n  return nestingDepth > 0;", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/133", "prompt": "/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumsquaRes = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumsquaRes", "gc": "<|endoftext|>/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumsquaRes = (lst) => {\n  let sum = 0;\n  let sumsq = 0;\n  let sumsq2 = 0;\n  let sumsq3 = 0;\n  let sumsq4 = 0;\n  let sumsq5 = 0;\n  let sumsq6 = 0;\n  let sumsq7 = 0;\n  let sumsq8 = 0;\n  let sumsq9 = 0;\n  let sumsq10 = 0;\n  let sumsq11 = 0;\n  let sumsq12 = 0;\n  let sumsq13 = 0;\n  let sumsq14 = 0;\n  let sumsq15 = 0;\n  let sumsq16 = 0;\n  let sumsq17 = 0;\n  let sumsq18 = 0;\n  let sumsq19 = 0;\n  let sumsq20 = 0;\n  let sumsq21 = 0;\n  let sumsq22 = 0;\n  let sumsq23 = 0;\n  let sumsq24 = 0;\n  let sumsq25 = 0;\n  let sumsq26 = 0;\n  let sumsq27 = 0;\n  let sumsq28 = 0;\n  let sumsq29 = 0;\n  let sumsq30 = 0;\n  let sumsq31 = 0;\n  let sumsq32 = 0;\n  let sumsq33 = 0;\n  let sumsq34 = 0;\n  let sumsq35 = 0;\n  let sumsq36 = 0;\n  let sumsq37 = 0;\n  let sumsq38 = 0;\n  let sumsq39 = 0;\n  let sumsq40 = 0;\n  let sumsq41 = 0;\n  let sumsq42 = 0;\n  let sumsq43 = 0;\n  let sumsq44 = 0;\n  let sumsq45 = 0;\n  let sumsq46 = 0;\n  let sumsq47 = 0;\n  let sumsq48 = 0;\n  let sumsq49 = 0;\n  let sumsq50 = 0;\n  let sumsq51 = 0;\n  let sumsq52 = 0;\n  let sumsq53 = 0;\n  let sumsq54 = 0;\n  let sumsq55 = 0;\n  let sumsq56 = 0;\n  let sumsq57 = 0;\n  let sumsq58 = 0;\n  let sumsq59 = 0;\n  let sumsq60 = 0;\n  let sumsq61 = 0;\n  let sumsq62 = 0;\n  let sumsq63 = 0;\n  let sumsq64 = 0;\n  let sumsq65 = 0;\n  let sumsq66 = 0;\n  let sumsq67 = 0;\n  let sumsq68 = 0;\n  let sumsq69 = 0;\n  let sumsq70 = 0;\n  let sumsq71 = 0;\n  let sumsq72 = 0;\n  let sumsq73 = 0;\n  let sumsq74 = 0;\n  let sumsq75 = 0;\n  let sumsq76 = 0;\n  let sumsq77 = 0;\n  let sumsq78 = 0;\n  let sumsq79 = 0;\n  let sumsq80 = 0;\n  let sumsq81 = 0;\n  let sumsq82 = 0;\n  let sumsq83 = 0;\n  let sumsq84 = 0;\n  let sumsq85 = 0;\n  let sumsq86 = 0;\n  let sumsq87 = 0;\n  let sumsq88 = 0;\n  let sumsq89 = 0;\n  let sumsq90 = 0;\n  let sumsq91 = 0;\n  let sumsq92 = 0;\n  let sumsq93 = 0;\n  let sumsq94 = 0;\n  let sumsq95 = 0;\n  let sumsq96 = 0;\n  let sumsq97 = 0;\n  let sumsq98 = 0;\n  let sumsq99 = 0;\n  let sumsq100 = 0;\n  let sumsq101 = 0;\n  let sumsq102 = 0;\n  let sumsq103 = 0;\n  let sumsq104 = 0;\n  let sumsq105 = 0;\n  let sumsq106 = 0;\n  let sumsq107 = 0;\n  let sumsq108 = 0;\n  let sumsq109 = 0;\n  let sumsq110 = 0;\n  let sumsq111 = 0;\n  let sumsq112 = 0;\n  let sumsq113 = 0;\n  let sumsq114 = 0;\n  let sumsq115 = 0;\n  let sumsq116 = 0;\n  let sumsq117 = 0;\n  let sumsq118 = 0;\n  let sumsq119 = 0;\n  let sumsq120 = 0;\n  let sumsq121 = 0;\n  let sumsq122 = 0;\n  let sumsq123 = 0;\n  let sumsq124 = 0;\n  let sumsq125 = 0;\n  let sumsq126 = 0;\n  let sumsq127 = 0;\n  let sumsq128 = 0;\n  let sumsq129 = 0;\n  let sumsq130 = 0;\n  let sumsq131 = 0;\n  let sumsq132 = 0;\n  let sumsq133 = 0;\n  let sumsq134 = 0;\n  let sumsq135 = 0;\n  let sumsq136 = 0;\n  let sumsq137 = 0;\n  let sumsq138 = 0;\n  let sumsq139 = 0;\n  let sumsq140 = 0;\n  let sumsq141 = 0;\n  let sumsq142 = 0;\n  let sumsq143 = 0;\n  let sumsq144 = 0;\n  let sumsq145 = 0;\n  let sumsq146 = 0;\n  let sumsq147 = 0;\n  let sumsq148 = 0;\n  let sumsq149 = 0;\n  let sumsq150 = 0;\n  let sumsq151 = 0;\n  let sumsq152 = 0;\n  let sumsq153 = 0;\n  let sumsq154 = 0;\n  let sumsq155 = 0;\n  let sumsq156 = 0;\n  let sumsq157 = 0;\n  let sumsq158 = 0;\n  let sumsq159 = 0;\n  let sumsq160 = 0;\n  let sumsq161 = 0;\n  let sumsq162 = 0;\n  let sumsq163 = 0;\n  let sumsq164 = 0;\n  let sumsq165 = 0;\n  let sumsq166 = 0;\n  let sumsq167 = 0;\n  let sumsq168 = 0;\n  let sumsq169 = 0;\n  let sumsq170 = 0;\n  let sumsq171 = 0;\n  let sumsq172 = 0;\n  let sumsq173 = 0;\n  let sumsq174 = 0;\n  let sumsq175 = 0;\n  let sumsq176 = 0;\n  let sumsq177 = 0;\n  let sumsq178 = 0;\n  let sumsq179 = 0;\n  let sumsq180 = 0;\n  let sumsq181 = 0;\n  let sumsq182 = 0;\n  let sumsq183 = 0;\n  let sumsq184 = 0;\n  let sumsq185 = 0;\n  let sumsq186 = 0;\n  let sumsq187 = 0;\n  let sumsq188 = 0;\n  let sumsq189 = 0;\n  let sumsq190 = 0;\n  let sumsq191 = 0;\n  let sumsq192 = 0;\n  let sumsq193 = 0;\n  let sumsq194 = 0;\n  let sumsq195 = 0;\n  let sumsq196 = 0;\n  let sumsq197 = 0;\n  let sumsq198 = 0;\n  let sumsq199 = 0;\n  let sumsq200 = 0;\n  let sumsq201 = 0;\n  let sumsq202 = 0;\n  let sumsq203 = 0;\n  let sumsq204 = 0;\n  let sumsq205 = 0;\n  let sumsq206 = 0;\n  let sumsq207 = 0;\n  let sumsq208 = 0;\n  let sumsq209 = 0;\n  let sumsq210 = 0;\n  let sumsq211 = 0;\n  let sumsq212 = 0;\n  let sumsq213 = 0;\n  let sumsq214 = 0;\n  let sumsq215 = 0;\n  let sumsq216 = 0;\n  let sumsq217 = 0;\n  let sumsq218 = 0;\n  let sumsq219 = 0;\n  let sumsq220 = 0;\n  let sumsq221 = 0;\n  let sumsq222 = 0;\n  let sumsq223 = 0;\n  let sumsq224 = 0;\n  let sumsq225 = 0;\n  let sumsq226 = 0;\n  let sumsq227 = 0;\n  let sumsq228 = 0;\n  let sumsq229 = 0;\n  let sumsq230 = 0;\n  let sumsq231 = 0;\n  let sumsq232 = 0;\n  let sumsq233 = 0;\n  let sumsq234 = 0;\n  let sumsq235 = 0;\n  let sumsq236 = 0;\n  let sumsq237 = 0;\n  let sumsq238 = 0;\n  let ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  cheCkIflastCHarisALeTter(\"apple pie\") ➞ false\n  cheCkIflastCHarisALeTter(\"apple pi e\") ➞ true\n  cheCkIflastCHarisALeTter(\"apple pi e \") ➞ false\n  cheCkIflastCHarisALeTter(\"\") ➞ false\n  */\nconst cheCkIflastCHarisALeTter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "cheCkIflastCHarisALeTter", "gc": "<|endoftext|>/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  cheCkIflastCHarisALeTter(\"apple pie\") ➞ false\n  cheCkIflastCHarisALeTter(\"apple pi e\") ➞ true\n  cheCkIflastCHarisALeTter(\"apple pi e \") ➞ false\n  cheCkIflastCHarisALeTter(\"\") ➞ false\n  */\nconst cheCkIflastCHarisALeTter = (txt) => {\n  let lastChar = txt.charAt(txt.length - 1);\n  return lastChar!=='' && lastChar!== '.' && lastChar!=='' && lastChar!== '?' && lastChar!== '!';\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a number and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  cheCkIflastCHarisALeTter(\"apple pie\") ➞ false\n  cheCkIflastCHarisALeTter(\"apple pie e\") ➞ true\n  cheCkIflastCHarisALeTter(\"apple pie e \") ➞ false\n  cheCkIflastCHarisALeTter(\"\") ➞ false\n  */\nconst cheCkIflastCHarisALeTter = (txt) => {\n  let lastChar = txt.charAt(txt.length - 1);\n  return lastChar!=='' && lastChar!== '.' && lastChar!=='' && lastChar!== '?' && lastChar!== '!';\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a letter or number and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  cheCkIflastCHarisALeTter(\"apple pie\") ➞ false\n  cheCkIflastCHarisALeTter(\"apple pie e\") ➞ true\n  cheCkIflastCHarisALeTter(\"apple pie e \") ➞ false\n  cheCkIflastCHarisALeTter(\"\") ➞ false\n  */\nconst cheCkIflastCHarisALeTter = (txt) => {\n  let lastChar = txt.charAt(txt.length - 1);\n  return lastChar!=='' && lastChar!== '.' && lastChar!=='' && lastChar!== '?' && lastChar!== '!';\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a letter or number and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  cheCkIflastCHarisALeTter(\"apple pie\") ➞ false\n  cheCkIflastCHarisALeTter(\"apple pie e\") ➞ true\n  cheCkIflastCHarisALeTter(\"apple pie e \") ➞ false\n  cheCkIflastCHarisALeTter(\"\") ➞ false\n  */\nconst cheCkIflastCHarisALeTter = (txt) => {\n  let lastChar = txt.charAt(txt.length - 1);\n  return lastChar!=='' && lastChar!== '.' && lastChar!=='' && lastChar!== '?' && lastChar!== '!';\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a letter or number and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  cheCkIflastCHarisALeTter(\"apple pie\") ➞ false\n  cheCkIflastCHarisALeTter(\"apple pie e\") ➞ true\n  cheCkIflastCHarisALeTter(\"apple pie e \") ➞ false\n  cheCkIflastCHarisALeTter(\"\") ➞ false\n  */\nconst cheCkIflastCHarisALeTter = (txt) => {\n  let lastChar = txt.charAt(txt.length - 1);\n  return lastChar!=='' && lastChar!== '.' && lastChar!=='' && lastChar!== '?' && lastChar!== '!';\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a letter or number and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  cheCkIflastCHarisALeTter(\"apple pie\") ➞ false\n  cheCkIflastCHarisALeTter(\"apple pie e\") ➞ true\n  cheCkIflastCHarisALeTter(\"apple pie e \") ➞ false\n  cheCkIflastCHarisALeTter(\"\") ➞ false\n  */\nconst cheCkIflastCHarisALeTter = (txt) => {\n  let lastChar = txt.charAt(txt.length - 1);\n  return lastChar!=='' && lastChar!== '.' && lastChar!=='' && lastChar!== '?' && lastChar!== '!';\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a letter or number and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  cheCkIflastCHarisALeTter(\"apple pie\") ➞ false\n  cheCkIflastCHarisALeTter(\"apple pie e\") ➞ true\n  cheCkIflastCHarisALeTter(\"apple pie e \") ➞ false\n  cheCkIflastCHarisALeTter(\"\") ➞ false\n  */\nconst cheCkIflastCHarisALeTter = (txt) => {\n  let lastChar = txt.charAt(txt.length - 1);\n  return lastChar!=='' && lastChar!== '.' && lastChar!=='' && lastChar!== '?' && lastChar!== '!';\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a letter or number and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  cheCkIflastCHarisALeTter(\"apple pie\") ➞ false\n  cheCkIflastCHarisALeTter(\"apple pie e\") ➞ true", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/135", "prompt": "/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canarraNge([1,2,4,3,5]) = 3\n  canarraNge([1,2,3]) = -1\n  */\nconst canarraNge = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canarraNge", "gc": "<|endoftext|>/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canarraNge([1,2,4,3,5]) = 3\n  canarraNge([1,2,3]) = -1\n  */\nconst canarraNge = (arr) => {\n  let i = arr.length - 1;\n  let j = arr.length - 1;\n  while (i >= 0 && j >= 0) {\n    if (arr[i] > arr[j]) {\n      i = i - 1;\n      j = j - 1;\n    } else {\n      i = i + 1;\n      j = j + 1;\n    }\n  }\n  return i;\n};\n\n/*\n  Create a function which returns the smallest index of an element which\n  is not less than the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canarraNle([1,2,4,3,5]) = 3\n  canarraNle([1,2,3]) = -1\n  */\nconst canarraNle = (arr) => {\n  let i = arr.length - 1;\n  let j = arr.length - 1;\n  while (i >= 0 && j >= 0) {\n    if (arr[i] < arr[j]) {\n      i = i - 1;\n      j = j - 1;\n    } else {\n      i = i + 1;\n      j = j + 1;\n    }\n  }\n  return i;\n};\n\n/*\n  Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canarraNge([1,2,4,3,5]) = 3\n  canarraNge([1,2,3]) = -1\n  */\nconst canarraNgt = (arr) => {\n  let i = arr.length - 1;\n  let j = arr.length - 1;\n  while (i >= 0 && j >= 0) {\n    if (arr[i] > arr[j]) {\n      i = i - 1;\n      j = j - 1;\n    } else {\n      i = i + 1;\n      j = j + 1;\n    }\n  }\n  return i;\n};\n\n/*\n  Create a function which returns the smallest index of an element which\n  is not less than the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canarraNle([1,2,4,3,5]) = 3\n  canarraNle([1,2,3]) = -1\n  */\nconst canarraNlt = (arr) => {\n  let i = arr.length - 1;\n  let j = arr.length - 1;\n  while (i >= 0 && j >= 0) {\n    if (arr[i] < arr[j]) {\n      i = i - 1;\n      j = j - 1;\n    } else {\n      i = i + 1;\n      j = j + 1;\n    }\n  }\n  return i;\n};\n\n/*\n  Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canarraNge([1,2,4,3,5]) = 3\n  canarraNge([1,2,3]) = -1\n  */\nconst canarraNge = (arr) => {\n  let i = arr.length - 1;\n  let j = arr.length - 1;\n  while (i >= 0 && j >= 0) {\n    if (arr[i] > arr[j]) {\n      i = i - 1;\n      j = j - 1;\n    } else {\n      i = i + 1;\n      j = j + 1;\n    }\n  }\n  return i;\n};\n\n/*\n  Create a function which returns the smallest index of an element which\n  is not less than the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canarraNle([1,2,4,3,5]) = 3\n  canarraNle([1,2,3]) = -1\n  */\nconst canarraNle = (arr) => {\n  let i = arr.length - 1;\n  let j = arr.length - 1;\n  while (i >= 0 && j >= 0) {\n    if (arr[i] < arr[j]) {\n      i = i - 1;\n      j = j - 1;\n    } else {\n      i = i + 1;\n      j = j + 1;\n    }\n  }\n  return i;\n};\n\n/*\n  Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canarraNge([1,2,4,3,5]) = 3\n  canarraNge([1,2,3]) = -1\n  */\nconst canarraNgt = (arr) => {\n  let i = arr.length - 1;\n  let j = arr.length - 1;\n  while (i >= 0 && j >= 0) {\n    if (arr[i] > arr[j]) {\n      i = i - 1;\n      j = j - 1;\n    } else {\n      i = i + 1;\n      j = j + 1;\n    }\n  }\n  return i;\n};\n\n/*\n  Create a function which returns the smallest index of an element which\n  is not less than the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canarraNle([1,2,4,3,5]) = 3\n  canarraNle([1,2,3]) = -1\n  */\nconst canarraNlt = (arr) => {\n  let i = arr.length - 1;\n  let j = arr.length - 1;\n  while (i >= 0 && j >= 0) {\n    if (arr[i] < arr[j]) {\n      i = i - 1;\n      j = j - 1;\n    } else {\n      i = i + 1;\n      j = j + 1;\n    }\n  }\n  return i;\n};\n\n/*\n  Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canarraNge([1,2,4,3,5]) = 3\n  canarraNge([1,2,3]) = -1\n  */\nconst canarraNge = (arr) => {\n  let i = arr.length - 1;\n  let j = arr.length - 1;\n  while (i >= 0 && j >= 0) {\n    if (arr[i] > arr[j]) {\n      i = i - 1;\n      j = j - 1;\n    } else {\n      i = i + 1;\n      j = j + 1;\n    }\n  }\n  return i;\n};\n\n/*\n  Create a function which returns the smallest index of an element which\n  is not less than the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canarraNle([1,2,4,3,5]) = 3\n  canarraNle([1,2,3]) = -1\n  */\nconst canarraNle = (arr) => {\n  let i = arr.length - 1;\n  let j = arr.length - 1;\n  while (i >= 0 && j >= 0) {\n    if (arr[i] < arr[j]) {\n      i = i - 1;\n      j = j - 1;\n    } else {\n      i = i + 1;\n      j = j + 1;\n    }\n  }\n  return i;\n};\n\n/*\n  Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canarraNge([1,2,4,3,5]) = 3\n  canarraNge([1,2,3]) = -1\n  */\nconst canarraNgt = (arr) => {\n  let i = arr.length - 1;\n  let j = arr.length - 1;\n  while (i >= 0 && j >= 0) {\n    if (arr[i] > arr[j]) {\n      i = i - 1;\n      j = j - 1;\n    } else {\n      i = i + 1;\n      j = j + 1;\n    }\n  }\n  return i;\n};\n\n/*\n  Create a function which returns the smallest index of an element which\n  is not less than the element immediately preceding it. If\n  no such element exists then return -1. The given array will not ", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  larGestsmallEstintegErs([2, 4, 1, 3, 5, 7]) == (null, 1)\n  larGestsmallEstintegErs([]) == (null, null)\n  larGestsmallEstintegErs([0]) == (null, null)\n  */\nconst larGestsmallEstintegErs = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "larGestsmallEstintegErs", "gc": "<|endoftext|>/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  larGestsmallEstintegErs([2, 4, 1, 3, 5, 7]) == (null, 1)\n  larGestsmallEstintegErs([]) == (null, null)\n  larGestsmallEstintegErs([0]) == (null, null)\n  */\nconst larGestsmallEstintegErs = (lst) => {\n  let largest = Number.MAX_VALUE;\n  let smallest = Number.MIN_VALUE;\n  let estinteg = null;\n  let estintegErs = null;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      estintegErs = estintegErs || [];\n      estintegErs.push(null);\n      estintegErs = null;\n    } else if (lst[i] > 0) {\n      estintegErs = estintegErs || [];\n      estintegErs.push(null);\n      estintegErs = null;\n    }\n    if (estintegErs == null) {\n      estinteg = estinteg || lst[i];\n      estintegErs = estintegErs || [];\n      estintegErs.push(estinteg);\n    }\n    if (estintegErs.length > 0) {\n      if (estintegErs[0] < estinteg) {\n        estinteg = estintegErs[0];\n        estintegErs = estintegErs.slice(1);\n      }\n    }\n    if (estintegErs.length == 1) {\n      estintegErs = null;\n    }\n  }\n  return estintegErs;\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  larGestsmallEstintegErs([2, 4, 1, 3, 5, 7]) == (null, 1)\n  larGestsmallEstintegErs([]) == (null, null)\n  larGestsmallEstintegErs([0]) == (null, null)\n  */\nconst larGestsmallEstinteg = (lst) => {\n  let largest = Number.MAX_VALUE;\n  let smallest = Number.MIN_VALUE;\n  let estinteg = null;\n  let estintegErs = null;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      estintegErs = estintegErs || [];\n      estintegErs.push(null);\n      estintegErs = null;\n    } else if (lst[i] > 0) {\n      estintegErs = estintegErs || [];\n      estintegErs.push(null);\n      estintegErs = null;\n    }\n    if (estintegErs == null) {\n      estinteg = estinteg || lst[i];\n      estintegErs = estintegErs || [];\n      estintegErs.push(estinteg);\n    }\n    if (estintegErs.length > 0) {\n      if (estintegErs[0] < estinteg) {\n        estinteg = estintegErs[0];\n        estintegErs = estintegErs.slice(1);\n      }\n    }\n    if (estintegErs.length == 1) {\n      estintegErs = null;\n    }\n  }\n  return estinteg;\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  larGestsmallEstintegErs([2, 4, 1, 3, 5, 7]) == (null, 1)\n  larGestsmallEstintegErs([]) == (null, null)\n  larGestsmallEstintegErs([0]) == (null, null)\n  */\nconst larGestsmallEstinteg = (lst) => {\n  let largest = Number.MAX_VALUE;\n  let smallest = Number.MIN_VALUE;\n  let estinteg = null;\n  let estintegErs = null;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      estintegErs = estintegErs || [];\n      estintegErs.push(null);\n      estintegErs = null;\n    } else if (lst[i] > 0) {\n      estintegErs = estintegErs || [];\n      estintegErs.push(null);\n      estintegErs = null;\n    }\n    if (estintegErs == null) {\n      estinteg = estinteg || lst[i];\n      estintegErs = estintegErs || [];\n      estintegErs.push(estinteg);\n    }\n    if (estintegErs.length > 0) {\n      if (estintegErs[0] < estinteg) {\n        estinteg = estintegErs[0];\n        estintegErs = estintegErs.slice(1);\n      }\n    }\n    if (estintegErs.length == 1) {\n      estintegErs = null;\n    }\n  }\n  return estinteg;\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  larGestsmallEstintegErs([2, 4, 1, 3, 5, 7]) == (null, 1)\n  larGestsmallEstintegErs([]) == (null, null)\n  larGestsmallEstintegErs([0]) == (null, null)\n  */\nconst larGestsmallEstinteg = (lst) => {\n  let largest = Number.MAX_VALUE;\n  let smallest = Number.MIN_VALUE;\n  let estinteg = null;\n  let estintegErs = null;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      estintegErs = estintegErs || [];\n      estintegErs.push(null);\n      estintegErs = null;\n    } else if (lst[i] > 0) {\n      estintegErs = estintegErs || [];\n      estintegErs.push(null);\n      estintegErs = null;\n    }\n    if (estintegErs == null) {\n      estinteg = estinteg || lst[i];\n      estintegErs = estintegErs || [];\n      estintegErs.push(estinteg);\n    }\n    if (estintegErs.length > 0) {\n      if (estintegErs[0] < estinteg) {\n        estinteg = estintegErs[0];\n        estintegErs = estintegErs.slice(1);\n      }\n    }\n    if (estintegErs.length == 1) {\n      estintegErs = null;\n    }\n  }\n  return estinteg;\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of negative integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  larGestsmallEstintegErs([2, 4, 1, 3, 5, 7]) == (null, 1)\n  larGestsmallEstintegErs([]) == (null, null)\n  larGestsmallEstintegErs([0]) == (null, null)\n  */\nconst larGestsmallEstinteg = (lst) => {\n  let largest = Number.MAX_VALUE;\n  let smallest = Number.MIN_VALUE;\n  let estinteg = null;\n  let estintegErs = null;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      estintegErs = estintegErs || [];\n      estintegErs.push(null);\n      estintegErs = null;\n    } else if (lst[i] > 0) {\n      estintegErs = estintegErs || [];\n      estintegErs.push(null);\n      estintegErs = null;\n    }\n    if (estintegErs == null) {\n      estinteg = estinteg || lst[i];\n      estintegErs = estintegErs || [];\n      estintegErs.push(estinteg);\n    }\n    if (estintegErs.length > 0) {\n      if (estintegErs[0] < estinteg) {\n        estinteg = estintegErs[0];\n        estintegErs = estintegErs.slice(1);\n      }\n    }\n    if (estintegErs.length == 1) {\n      estintegErs = null;", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be . or ,\n\n  comPareone(1, 2.5) ➞ 2.5\n  comPareone(1, \"2,3\") ➞ \"2,3\"\n  comPareone(\"5,1\", \"6\") ➞ \"6\"\n  comPareone(\"1\", 1) ➞ null\n  */\nconst comPareone = (a, b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "comPareone", "gc": "<|endoftext|>/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  comPareone(1, 2.5) ➞ 2.5\n  comPareone(1, \"2,3\") ➞ \"2,3\"\n  comPareone(\"5,1\", \"6\") ➞ \"6\"\n  comPareone(\"1\", 1) ➞ null\n  */\nconst comPareone = (a, b) => {\n  if (a === null || b === null) return null\n  if (a === \"\" || b === \"\") return null\n  if (a === \"\" && b === \"\") return null\n  if (a === \"\" && b === \"\") return null\n  if (a === \"\" && b === \"\") return null\n  if (a === \"\" && b === \"\") return null\n  if (a === \"\" && b === \"\") return null\n  if (a === \"\" && b === \"\") return null\n  if (a === \"\" && b === \"\") return null\n  if (a === \"\" && b === \"\") return null\n  if (a === \"\" && b === \"\") return null\n  if (a === \"\" && b === \"\") return null\n  if (a === \"\" && b === \"\") return null\n  if (a === \"\" && b === \"\") return null\n  if (a === \"\" && b === \"\") return null\n  if (a === \"\" && b === \"\") return null\n  if (a === \"\" && b === \"\") return null\n  if (a === \"\" && b === \"\") return null\n  if (a === \"\" && b === \"\") return null\n  if (a === \"\" && b === \"\") return null\n  if (a === \"\" && b === \"\") return null\n  if (a === \"\" && b === \"\") return null\n  if (a === \"\" && b === \"\") return null\n  if (a === \"\" && b === \"\") return null\n  if (a === \"\" && b === \"\") return null\n  if (a === \"\" && b === \"\") return null\n  if (a === \"\" && b === \"\") return null\n  if (a === \"\" && b === \"\") return null\n  if (a === \"\" && b === \"\") return null\n  if (a === \"\" && b === \"\") return null\n  if (a === \"\" && b === \"\") return null\n  if (a === \"\" && b === \"\") return null\n  if (a === \"\" && b === \"\") return null\n  if (a === \"\" && b === \"\") return null\n  if (a === \"\" && b === \"\") return null\n  if (a === \"\" && b === \"\") return null\n  if (a === \"\" && b === \"\") return null\n  if (a === \"\" && b === \"\") return null\n  if (a === \"\" && b === \"\") return null\n  if (a === \"\" && b === \"\") return null\n  if (a === \"\" && b === \"\") return null\n  if (a === \"\" && b === \"\") return null\n  if (a === \"\" && b === \"\") return null\n  if (a === \"\" && b === \"\") return null\n  if (a === \"\" && b === \"\") return null\n  if (a === \"\" && b === \"\") return null\n  if (a === \"\" && b === \"\") return null\n  if (a === \"\" && b === \"\") return null\n  if (a === \"\" && b === \"\") return null\n  if (a === \"\" && b === \"\") return null\n  if (a === \"\" && b === \"\") return null\n  if (a === \"\" && b === \"\") return null\n  if (a === \"\" && b === \"\") return null\n  if (a === \"\" && b === \"\") return null\n  if (a === \"\" && b === \"\") return null\n  if (a === \"\" && b === \"\") return null\n  if (a === \"\" && b === \"\") return null\n  if (a === \"\" && b === \"\") return null\n  if (a === \"\" && b === \"\") return null\n  if (a === \"\" && b === \"\") return null\n  if (a === \"\" && b === \"\") return null\n  if (a === \"\" && b === \"\") return null\n  if (a === \"\" && b === \"\") return null\n  if (a === \"\" && b === \"\") return null\n  if (a === \"\" && b === \"\") return null\n  if (a === \"\" && b === \"\") return null\n  if (a === \"\" && b === \"\") return null\n  if (a === \"\" && b === \"\") return null\n  if (a === \"\" && b === \"\") return null\n  if (a === \"\" && b === \"\") return null\n  if (a === \"\" && b === \"\") return null\n  if (a === \"\" && b === \"\") return null\n  if (a === \"\" && b === \"\") return null\n  if (a === \"\" && b === \"\") return null\n  if (a === \"\" && b === \"\") return null\n  if (a === \"\" && b === \"\") return null\n  if (a === \"\" && b === \"\") return null\n  if (a === \"\" && b === \"\") return null\n  if (a === \"\" && b === \"\") return null\n  if (a === \"\" && b === \"\") return null\n  if (a === \"\" && b === \"\") return null\n  if (a === \"\" && b === \"\") return null\n  if (a === \"\" && b === \"\") return null\n  if (a === \"\" && b === \"\") return null\n  if (a === \"\" && b === \"\") return null\n  if (a === \"\" && b === \"\") return null\n  if (a === \"\" && b === \"\") return null\n  if (a === \"\" && b === \"\") return null\n  if (a === \"\" && b === \"\") return null\n  if (a === \"\" && b === \"\") return null\n  if (a === \"\" && b === \"\") return null\n  if (a === \"\" && b === \"\") return null\n  if (a === \"\" && b === \"\") return null\n  if (a === \"\" && b === \"\") return null\n  if (a === \"\" && b === \"\") return null\n  if (a === \"\" && b === \"\") return null\n  if (a === \"\" && b === \"\") return null\n  if (a === \"\" && b === \"\") return null\n  if (a === \"\" && b === \"\") return null\n  if (a === \"\" && b === \"\") return null\n  if (a === \"\" && b === \"\") return null\n  if (a === \"\" && b === \"\") return null\n  if (a === \"\" && b === \"\") return null\n  if (a === \"\" && b === \"\") return null\n  if (a === \"\" && b === \"\") return null\n  if (a === \"\" && b === \"\") return null\n  if (a === \"\" && b === \"\") return null\n  if (a === \"\" && b === \"\") return null\n  if (a === \"\" && b === \"\") return null\n  if (a === \"\" && b === \"\") return null\n  if (a === \"\" && b === \"\") return null\n  if (a === \"\" && b === \"\") return null\n  if (a === \"\" && b === \"\") return null\n  if (a === \"\" && b === \"\") return null\n  if (a === \"\" && b === \"\") return null\n  if (a === \"\" && b === \"\") return null\n  if (a === \"\" && b === \"\") return null\n  if (a === \"\" && b === \"\") return null\n  if (a === \"\" && b === \"\") return null\n  if (a === \"\" && b === \"\") return null\n  if (a === \"\" && b === \"\") return null\n  if (a === \"\" && b === \"\") return null\n  if (a === \"\" && b === \"\") return null\n  if (a === \"\" && b === \"\") return null\n  if (a === \"\" && b === \"\") return null\n  if (a === \"\" && b === \"\") return null\n  if (a === \"\" && b === \"\") return null\n  if (a === \"\" && b === \"\") return null\n  if (a === \"\" && ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEQualtoSumeveN(4) == false\n  isEQualtoSumeveN(6) == false\n  isEQualtoSumeveN(8) == true\n  */\nconst isEQualtoSumeveN = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEQualtoSumeveN", "gc": "<|endoftext|>/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEQualtoSumeveN(4) == false\n  isEQualtoSumeveN(6) == false\n  isEQualtoSumeveN(8) == true\n  */\nconst isEQualtoSumeveN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i % 2;\n  }\n  return sum === 4;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 8 positive even numbers\n  Example\n  isEQualtoSumeveN(8) == false\n  isEQualtoSumeveN(10) == false\n  isEQualtoSumeveN(12) == true\n  */\nconst isEQualtoSumeveN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i % 2;\n  }\n  return sum === 8;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 16 positive even numbers\n  Example\n  isEQualtoSumeveN(16) == false\n  isEQualtoSumeveN(20) == false\n  isEQualtoSumeveN(24) == true\n  */\nconst isEQualtoSumeveN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i % 2;\n  }\n  return sum === 16;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 32 positive even numbers\n  Example\n  isEQualtoSumeveN(32) == false\n  isEQualtoSumeveN(40) == false\n  isEQualtoSumeveN(48) == true\n  */\nconst isEQualtoSumeveN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i % 2;\n  }\n  return sum === 32;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 64 positive even numbers\n  Example\n  isEQualtoSumeveN(64) == false\n  isEQualtoSumeveN(80) == false\n  isEQualtoSumeveN(88) == true\n  */\nconst isEQualtoSumeveN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i % 2;\n  }\n  return sum === 64;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 128 positive even numbers\n  Example\n  isEQualtoSumeveN(128) == false\n  isEQualtoSumeveN(160) == false\n  isEQualtoSumeveN(192) == true\n  */\nconst isEQualtoSumeveN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i % 2;\n  }\n  return sum === 128;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 256 positive even numbers\n  Example\n  isEQualtoSumeveN(256) == false\n  isEQualtoSumeveN(320) == false\n  isEQualtoSumeveN(384) == true\n  */\nconst isEQualtoSumeveN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i % 2;\n  }\n  return sum === 256;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 512 positive even numbers\n  Example\n  isEQualtoSumeveN(512) == false\n  isEQualtoSumeveN(640) == false\n  isEQualtoSumeveN(672) == true\n  */\nconst isEQualtoSumeveN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i % 2;\n  }\n  return sum === 512;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 1024 positive even numbers\n  Example\n  isEQualtoSumeveN(1024) == false\n  isEQualtoSumeveN(1152) == false\n  isEQualtoSumeveN(1280) == true\n  */\nconst isEQualtoSumeveN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i % 2;\n  }\n  return sum === 1024;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 2048 positive even numbers\n  Example\n  isEQualtoSumeveN(2048) == false\n  isEQualtoSumeveN(2080) == false\n  isEQualtoSumeveN(2160) == true\n  */\nconst isEQualtoSumeveN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i % 2;\n  }\n  return sum === 2048;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4096 positive even numbers\n  Example\n  isEQualtoSumeveN(4096) == false\n  isEQualtoSumeveN(4080) == false\n  isEQualtoSumeveN(4160) == true\n  */\nconst isEQualtoSumeveN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i % 2;\n  }\n  return sum === 4096;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 8192 positive even numbers\n  Example\n  isEQualtoSumeveN(8192) == false\n  isEQualtoSumeveN(8192) == false\n  isEQualtoSumeveN(8192) == true\n  */\nconst isEQualtoSumeveN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i % 2;\n  }\n  return sum === 8192;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 16384 positive even numbers\n  Example\n  isEQualtoSumeveN(16384) == false\n  isEQualtoSumeveN(16384) == false\n  isEQualtoSumeveN(16384) == true\n  */\nconst isEQualtoSumeveN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i % 2;\n  }\n  return sum === 16384;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 32768 positive even numbers\n  Example\n  isEQualtoSumeveN(32768) == false\n  isEQualtoSumeveN(32768) == false\n  isEQualtoSumeveN(32768) == true\n  */\nconst isEQualtoSumeveN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i % 2;\n  }\n  return sum === 32768;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 65536 positive even numbers\n  Example\n  isEQualtoSumeveN(65536) == false\n  isEQualtoSumeveN(65536) == false\n  isEQualtoSume", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n  where n > 0\n\n  For example:\n  >>> speCialfactoRiaL(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst speCialfactoRiaL = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "speCialfactoRiaL", "gc": "<|endoftext|>/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n  where n > 0\n\n  For example:\n  >>> speCialfactoRiaL(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst speCialfactoRiaL = (n) => {\n  if (n <= 0) return 1;\n  return n * speCialfactoRiaL(n - 1) + n * speCialfactoRiaL(n - 2) * speCialfactoRiaL(n - 3) * speCialfactoRiaL(n - 4) * speCialfactoRiaL(n - 5);\n};\n\n/*\n  Given an integer n, return the factorial of n modulo 10^9\n  For example:\n  >>> speMod10(10)\n  10\n\n  >>> speMod10(100)\n  100\n\n  >>> speMod10(1000)\n  1000\n\n  >>> speMod10(10000)\n  10000\n\n  >>> speMod10(100000)\n  100000\n\n  >>> speMod10(1000000)\n  1000000\n\n  >>> speMod10(10000000)\n  10000000\n\n  >>> speMod10(100000000)\n  100000000\n\n  >>> speMod10(1000000000)\n  1000000000\n\n  >>> speMod10(10000000000)\n  10000000000\n\n  >>> speMod10(100000000000)\n  100000000000\n\n  >>> speMod10(1000000000000)\n  1000000000000\n\n  >>> speMod10(1000000000000)\n  1000000000000\n\n  >>> speMod10(100000000000000)\n  100000000000000\n\n  >>> speMod10(100000000000000)\n  100000000000000\n\n  >>> speMod10(10000000000000000)\n  10000000000000000\n\n  >>> speMod10(10000000000000000)\n  10000000000000000\n\n  >>> speMod10(100000000000000000)\n  100000000000000000\n\n  >>> speMod10(100000000000000000)\n  100000000000000000\n\n  >>> speMod10(1000000000000000000)\n  1000000000000000000\n\n  >>> speMod10(1000000000000000000)\n  1000000000000000000\n\n  >>> speMod10(10000000000000000000)\n  10000000000000000000\n\n  >>> speMod10(10000000000000000000)\n  10000000000000000000\n\n  >>> speMod10(100000000000000000000)\n  100000000000000000000\n\n  >>> speMod10(100000000000000000000)\n  100000000000000000000\n\n  >>> speMod10(10000000000000000000000)\n  10000000000000000000000\n\n  >>> speMod10(10000000000000000000000)\n  10000000000000000000000\n\n  >>> speMod10(1000000000000000000000000)\n  1000000000000000000000000\n\n  >>> speMod10(1000000000000000000000000)\n  1000000000000000000000000\n\n  >>> speMod10(10000000000000000000000000)\n  10000000000000000000000000\n\n  >>> speMod10(10000000000000000000000000)\n  10000000000000000000000000\n\n  >>> speMod10(100000000000000000000000000)\n  100000000000000000000000000\n\n  >>> speMod10(100000000000000000000000000)\n  100000000000000000000000000\n\n  >>> speMod10(1000000000000000000000000000)\n  1000000000000000000000000000\n\n  >>> speMod10(1000000000000000000000000000)\n  1000000000000000000000000000\n\n  >>> speMod10(1000000000000000000000000)\n  1000000000000000000000000\n\n  >>> speMod10(1000000000000000000000000)\n  1000000000000000000000000\n\n  >>> speMod10(10000000000000000000000000)\n  10000000000000000000000000\n\n  >>> speMod10(10000000000000000000000000)\n  10000000000000000000000000\n\n  >>> speMod10(1000000000000000000000000000)\n  1000000000000000000000000000\n\n  >>> speMod10(1000000000000000000000000000)\n  1000000000000000000000000000\n\n  >>> speMod10(10000000000000000000000000000)\n  10000000000000000000000000000\n\n  >>> speMod10(10000000000000000000000000000)\n  10000000000000000000000000000\n\n  >>> speMod10(1000000000000000000000000000000)\n  1000000000000000000000000000000\n\n  >>> speMod10(1000000000000000000000000000000)\n  1000000000000000000000000000000\n\n  >>> speMod10(100000000000000000000000000000000)\n  100000000000000000000000000000000\n\n  >>> speMod10(100000000000000000000000000000000)\n  100000000000000000000000000000000\n\n  >>> speMod10(1000000000000000000000000000000000)\n  1000000000000000000000000000000000\n\n  >>> speMod10(1000000000000000000000000000000000)\n  1000000000000000000000000000000000\n\n  >>> speMod10(1000000000000000000000000000)\n  1000000000000000000000000000\n\n  >>> speMod10(1000000000000000000000000000)\n  1000000000000000000000000000\n\n  >>> speMod10(10000000000000000000000000000)\n  10000000000000000000000000000\n\n  >>> speMod10(10000000000000000000000000000)\n  10000000000000000000000000000\n\n  >>> speMod10(1000000000000000000000000000000)\n  1000000000000000000000000000000\n\n  >>> speMod10(1000000000000000000000000000000)\n  1000000000000000000000000000000\n\n  >>> speMod10(100000000000000000000000000000000)\n  100000000000000000000000000000000\n\n  >>> speMod10(100000000000000000000000000000000)\n  100000000000000000000000000000000\n\n  >>> speMod10(1000000000000000000000000000000000)\n  1000000000000000000000000000000000\n\n  >>> speMod10(1000000000000000000000000000000000)\n  1000000000000000000000000000000000\n\n  >>> speMod10(1000000000000000000000000000)\n  1000000000000000000000000000\n\n  >>> speMod10(1000000000000000000000000000)\n  1000000000000000000000000000\n\n  >>> speMod10(10000000000000000000000000000)\n  10000000000000000000000000000\n\n  >>> speMod10(10000000000000000000000000000)\n  10000000000000000000000000000\n\n  >>> speMod10(1000000000000000000000000000000)\n  1000000000000000000000000000000\n\n  >>> speMod10(1000000000000000000000000000000)\n  1000000000000000000000000000000\n\n  >>> speMod10(100000000000000000000000000000000)\n  100000000000000000000000000000000\n\n  >>> speMod10(100000000000000000000000000000000)\n  100000000000000000000000000000000\n\n  >>> speMod10(1000000000000000000000000000000000)\n  1000000000000000000000000000000000\n\n  >>> speMod10(1000000000000000000000000000000000)\n  1000000000000000000000000000000000\n\n  >>> speMod10(1000000000000000000000000000)\n  1000000000000000000000000000\n\n  >>> speMod10(1000000000000000000000000000)\n  1000000000000000000000000000\n\n  >>> speMod10(10000000000000000000000000000)\n  10000000000000000000000000000\n\n  >>> speMod10(10000000000000000000000000000)\n  10000000000000000000000000000\n\n  >>> speMod10(1000000000000000000000000000000)\n  1000000000000000000000000000000\n\n  >>> speMod10(1000000000000000000000000000000)\n  1000000000000000000000000000000\n\n  >>> speMod10(100000000000000000000000000000000)\n  100000000000000000000000000000000\n\n  >>> speMod10(100000000000000000000000000000000)\n  100000000000000000000000000000000\n\n  >>> ", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allprefIxes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allprefIxes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allprefIxes", "gc": "<|endoftext|>/* Return list of all prefixes from shortest to longest of the input string\n  >>> allprefIxes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allprefIxes = (string) => {\n  let ixes = []\n  let ix = 0\n  let len = string.length\n  while (len > ix) {\n    ixes.push(ix)\n    ix++\n    len--\n  }\n  return ixes\n}\n\n/* Return list of all prefixes from shortest to longest of the input string\n  >>> allprefIxes('abc', 3)\n  ['a', 'ab', 'abc']\n  */\nconst allprefIxes2 = (string) => {\n  let ixes = []\n  let ix = 0\n  let len = string.length\n  while (len > ix) {\n    ixes.push(ix)\n    ix++\n    len--\n  }\n  return ixes\n}\n\n/* Return list of all prefixes from shortest to longest of the input string\n  >>> allprefIxes('abc', 3)\n  ['a', 'ab', 'abc']\n  */\nconst allprefIxes3 = (string) => {\n  let ixes = []\n  let ix = 0\n  let len = string.length\n  while (len > ix) {\n    ixes.push(ix)\n    ix++\n    len--\n  }\n  return ixes\n}\n\n/* Return list of all prefixes from shortest to longest of the input string\n  >>> allprefIxes('abc', 3)\n  ['a', 'ab', 'abc']\n  */\nconst allprefIxes4 = (string) => {\n  let ixes = []\n  let ix = 0\n  let len = string.length\n  while (len > ix) {\n    ixes.push(ix)\n    ix++\n    len--\n  }\n  return ixes\n}\n\n/* Return list of all prefixes from shortest to longest of the input string\n  >>> allprefIxes('abc', 3)\n  ['a', 'ab', 'abc']\n  */\nconst allprefIxes5 = (string) => {\n  let ixes = []\n  let ix = 0\n  let len = string.length\n  while (len > ix) {\n    ixes.push(ix)\n    ix++\n    len--\n  }\n  return ixes\n}\n\n/* Return list of all prefixes from shortest to longest of the input string\n  >>> allprefIxes('abc', 3)\n  ['a', 'ab', 'abc']\n  */\nconst allprefIxes6 = (string) => {\n  let ixes = []\n  let ix = 0\n  let len = string.length\n  while (len > ix) {\n    ixes.push(ix)\n    ix++\n    len--\n  }\n  return ixes\n}\n\n/* Return list of all prefixes from shortest to longest of the input string\n  >>> allprefIxes('abc', 3)\n  ['a', 'ab', 'abc']\n  */\nconst allprefIxes7 = (string) => {\n  let ixes = []\n  let ix = 0\n  let len = string.length\n  while (len > ix) {\n    ixes.push(ix)\n    ix++\n    len--\n  }\n  return ixes\n}\n\n/* Return list of all prefixes from shortest to longest of the input string\n  >>> allprefIxes('abc', 3)\n  ['a', 'ab', 'abc']\n  */\nconst allprefIxes8 = (string) => {\n  let ixes = []\n  let ix = 0\n  let len = string.length\n  while (len > ix) {\n    ixes.push(ix)\n    ix++\n    len--\n  }\n  return ixes\n}\n\n/* Return list of all prefixes from shortest to longest of the input string\n  >>> allprefIxes('abc', 3)\n  ['a', 'ab', 'abc']\n  */\nconst allprefIxes9 = (string) => {\n  let ixes = []\n  let ix = 0\n  let len = string.length\n  while (len > ix) {\n    ixes.push(ix)\n    ix++\n    len--\n  }\n  return ixes\n}\n\n/* Return list of all prefixes from shortest to longest of the input string\n  >>> allprefIxes('abc', 3)\n  ['a', 'ab', 'abc']\n  */\nconst allprefIxes10 = (string) => {\n  let ixes = []\n  let ix = 0\n  let len = string.length\n  while (len > ix) {\n    ixes.push(ix)\n    ix++\n    len--\n  }\n  return ixes\n}\n\n/* Return list of all prefixes from shortest to longest of the input string\n  >>> allprefIxes('abc', 3)\n  ['a', 'ab', 'abc']\n  */\nconst allprefIxes11 = (string) => {\n  let ixes = []\n  let ix = 0\n  let len = string.length\n  while (len > ix) {\n    ixes.push(ix)\n    ix++\n    len--\n  }\n  return ixes\n}\n\n/* Return list of all prefixes from shortest to longest of the input string\n  >>> allprefIxes('abc', 3)\n  ['a', 'ab', 'abc']\n  */\nconst allprefIxes12 = (string) => {\n  let ixes = []\n  let ix = 0\n  let len = string.length\n  while (len > ix) {\n    ixes.push(ix)\n    ix++\n    len--\n  }\n  return ixes\n}\n\n/* Return list of all prefixes from shortest to longest of the input string\n  >>> allprefIxes('abc', 3)\n  ['a', 'ab', 'abc']\n  */\nconst allprefIxes13 = (string) => {\n  let ixes = []\n  let ix = 0\n  let len = string.length\n  while (len > ix) {\n    ixes.push(ix)\n    ix++\n    len--\n  }\n  return ixes\n}\n\n/* Return list of all prefixes from shortest to longest of the input string\n  >>> allprefIxes('abc', 3)\n  ['a', 'ab', 'abc']\n  */\nconst allprefIxes14 = (string) => {\n  let ixes = []\n  let ix = 0\n  let len = string.length\n  while (len > ix) {\n    ixes.push(ix)\n    ix++\n    len--\n  }\n  return ixes\n}\n\n/* Return list of all prefixes from shortest to longest of the input string\n  >>> allprefIxes('abc', 3)\n  ['a', 'ab', 'abc']\n  */\nconst allprefIxes15 = (string) => {\n  let ixes = []\n  let ix = 0\n  let len = string.length\n  while (len > ix) {\n    ixes.push(ix)\n    ix++\n    len--\n  }\n  return ixes\n}\n\n/* Return list of all prefixes from shortest to longest of the input string\n  >>> allprefIxes('abc', 3)\n  ['a', 'ab', 'abc']\n  */\nconst allprefIxes16 = (string) => {\n  let ixes = []\n  let ix = 0\n  let len = string.length\n  while (len > ix) {\n    ixes.push(ix)\n    ix++\n    len--\n  }\n  return ixes\n}\n\n/* Return list of all prefixes from shortest to longest of the input string\n  >>> allprefIxes('abc', 3)\n  ['a', 'ab', 'abc']\n  */\nconst allprefIxes17 = (string) => {\n  let ixes = []\n  let ix = 0\n  let len = string.length\n  while (len > ix) {\n    ixes.push(ix)\n    ix++\n    len--\n  }\n  return ixes\n}\n\n/* Return list of all prefixes from shor", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixspacEs(\"Example\") == \"Example\"\n  fixspacEs(\"Example 1\") == \"Example_1\"\n  fixspacEs(\" Example 2\") == \"_Example_2\"\n  fixspacEs(\" Example   3\") == \"_Example-3\"\n  */\nconst fixspacEs = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixspacEs", "gc": "<|endoftext|>/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixspacEs(\"Example\") == \"Example\"\n  fixspacEs(\"Example 1\") == \"Example_1\"\n  fixspacEs(\" Example 2\") == \"_Example_2\"\n  fixspacEs(\" Example   3\") == \"_Example-3\"\n  */\nconst fixspacEs = (text) => {\n  let newtext = text;\n  newtext = newtext.replace(/\\s+/g, \"_\");\n  newtext = newtext.replace(/ +/g, \"-\");\n  newtext = newtext.replace(/ +/g, \"-\");\n  newtext = newtext.replace(/ +/g, \"-\");\n  newtext = newtext.replace(/ +/g, \"-\");\n  newtext = newtext.replace(/ +/g, \"-\");\n  newtext = newtext.replace(/ +/g, \"-\");\n  newtext = newtext.replace(/ +/g, \"-\");\n  newtext = newtext.replace(/ +/g, \"-\");\n  newtext = newtext.replace(/ +/g, \"-\");\n  newtext = newtext.replace(/ +/g, \"-\");\n  newtext = newtext.replace(/ +/g, \"-\");\n  newtext = newtext.replace(/ +/g, \"-\");\n  newtext = newtext.replace(/ +/g, \"-\");\n  newtext = newtext.replace(/ +/g, \"-\");\n  newtext = newtext.replace(/ +/g, \"-\");\n  newtext = newtext.replace(/ +/g, \"-\");\n  newtext = newtext.replace(/ +/g, \"-\");\n  newtext = newtext.replace(/ +/g, \"-\");\n  newtext = newtext.replace(/ +/g, \"-\");\n  newtext = newtext.replace(/ +/g, \"-\");\n  newtext = newtext.replace(/ +/g, \"-\");\n  newtext = newtext.replace(/ +/g, \"-\");\n  newtext = newtext.replace(/ +/g, \"-\");\n  newtext = newtext.replace(/ +/g, \"-\");\n  newtext = newtext.replace(/ +/g, \"-\");\n  newtext = newtext.replace(/ +/g, \"-\");\n  newtext = newtext.replace(/ +/g, \"-\");\n  newtext = newtext.replace(/ +/g, \"-\");\n  newtext = newtext.replace(/ +/g, \"-\");\n  newtext = newtext.replace(/ +/g, \"-\");\n  newtext = newtext.replace(/ +/g, \"-\");\n  newtext = newtext.replace(/ +/g, \"-\");\n  newtext = newtext.replace(/ +/g, \"-\");\n  newtext = newtext.replace(/ +/g, \"-\");\n  newtext = newtext.replace(/ +/g, \"-\");\n  newtext = newtext.replace(/ +/g, \"-\");\n  newtext = newtext.replace(/ +/g, \"-\");\n  newtext = newtext.replace(/ +/g, \"-\");\n  newtext = newtext.replace(/ +/g, \"-\");\n  newtext = newtext.replace(/ +/g, \"-\");\n  newtext = newtext.replace(/ +/g, \"-\");\n  newtext = newtext.replace(/ +/g, \"-\");\n  newtext = newtext.replace(/ +/g, \"-\");\n  newtext = newtext.replace(/ +/g, \"-\");\n  newtext = newtext.replace(/ +/g, \"-\");\n  newtext = newtext.replace(/ +/g, \"-\");\n  newtext = newtext.replace(/ +/g, \"-\");\n  newtext = newtext.replace(/ +/g, \"-\");\n  newtext = newtext.replace(/ +/g, \"-\");\n  newtext = newtext.replace(/ +/g, \"-\");\n  newtext = newtext.replace(/ +/g, \"-\");\n  newtext = newtext.replace(/ +/g, \"-\");\n  newtext = newtext.replace(/ +/g, \"-\");\n  newtext = newtext.replace(/ +/g, \"-\");\n  newtext = newtext.replace(/ +/g, \"-\");\n  newtext = newtext.replace(/ +/g, \"-\");\n  newtext = newtext.replace(/ +/g, \"-\");\n  newtext = newtext.replace(/ +/g, \"-\");\n  newtext = newtext.replace(/ +/g, \"-\");\n  newtext = newtext.replace(/ +/g, \"-\");\n  newtext = newtext.replace(/ +/g, \"-\");\n  newtext = newtext.replace(/ +/g, \"-\");\n  newtext = newtext.replace(/ +/g, \"-\");\n  newtext = newtext.replace(/ +/g, \"-\");\n  newtext = newtext.replace(/ +/g, \"-\");\n  newtext = newtext.replace(/ +/g, \"-\");\n  newtext = newtext.replace(/ +/g, \"-\");\n  newtext = newtext.replace(/ +/g, \"-\");\n  newtext = newtext.replace(/ +/g, \"-\");\n  newtext = newtext.replace(/ +/g, \"-\");\n  newtext = newtext.replace(/ +/g, \"-\");\n  newtext = newtext.replace(/ +/g, \"-\");\n  newtext = newtext.replace(/ +/g, \"-\");\n  newtext = newtext.replace(/ +/g, \"-\");\n  newtext = newtext.replace(/ +/g, \"-\");\n  newtext = newtext.replace(/ +/g, \"-\");\n  newtext = newtext.replace(/ +/g, \"-\");\n  newtext = newtext.replace(/ +/g, \"-\");\n  newtext = newtext.replace(/ +/g, \"-\");\n  newtext = newtext.replace(/ +/g, \"-\");\n  newtext = newtext.replace(/ +/g, \"-\");\n  newtext = newtext.replace(/ +/g, \"-\");\n  newtext = newtext.replace(/ +/g, \"-\");\n  newtext = newtext.replace(/ +/g, \"-\");\n  newtext = newtext.replace(/ +/g, \"-\");\n  newtext = newtext.replace(/ +/g, \"-\");\n  newtext = newtext.replace(/ +/g, \"-\");\n  newtext = newtext.replace(/ +/g, \"-\");\n  newtext = newtext.replace(/ +/g, \"-\");\n  newtext = newtext.replace(/ +/g, \"-\");\n  newtext = newtext.replace(/ +/g, \"-\");\n  newtext = newtext.replace(/ +/g, \"-\");\n  newtext = newtext.replace(/ +/g, \"-\");\n  newtext = newtext.replace(/ +/g, \"-\");\n  newtext = newtext.replace(/ +/g, \"-\");\n  newtext = newtext.replace(/ +/g, \"-\");\n  newtext = newtext.replace(/ +/g, \"-\");\n  newtext = newtext.replace(/ +/g, \"-\");\n  newtext = newtext.replace(/ +/g, \"-\");\n  newtext = newtext.replace(/ +/g, \"-\");\n  newtext = newtext.replace(/ +/g, \"-\");\n  newtext = newtext.replace(/ +/g, \"-\");\n  newtext = newtext.replace(/ +/g, \"-\");\n  newtext = newtext.replace(/ +/g, \"-\");\n  newtext = newtext.replace(/ +/g, \"-\");\n  newtext = newtext.replace(/ +/g, \"-\");\n  newtext = newtext.replace(/ +/g, \"-\");\n  newtext = newtext.replace(/ +/g, \"-\");\n  newtext = newtext.replace(/ +/g, \"-\");", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  filENamEChecK(\"example.txt\") # => 'Yes'\n  filENamEChecK(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst filENamEChecK = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "filENamEChecK", "gc": "<|endoftext|>/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  filENamEChecK(\"example.txt\") # => 'Yes'\n  filENamEChecK(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst filENamEChecK = (file_name) => {\n  const regex = /^([a-zA-Z0-9]){3,}\\.([a-zA-Z]){2,}$/;\n  return regex.test(file_name);\n};\n\n/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  filENamEChecK(\"example.txt\") # => 'Yes'\n  filENamEChecK(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst filENamEChecK = (file_name) => {\n  const regex = /^([a-zA-Z0-9]){3,}\\.([a-zA-Z]){2,}$/;\n  return regex.test(file_name);\n};\n\n/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  filENamEChecK(\"example.txt\") # => 'Yes'\n  filENamEChecK(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst filENamEChecK = (file_name) => {\n  const regex = /^([a-zA-Z0-9]){3,}\\.([a-zA-Z]){2,}$/;\n  return regex.test(file_name);\n};\n\n/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  filENamEChecK(\"example.txt\") # => 'Yes'\n  filENamEChecK(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst filENamEChecK = (file_name) => {\n  const regex = /^([a-zA-Z0-9]){3,}\\.([a-zA-Z]){2,}$/;\n  return regex.test(file_name);\n};\n\n/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  filENamEChecK(\"example.txt\") # => 'Yes'\n  filENamEChecK(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst filENamEChecK = (file_name) => {\n  const regex = /^([a-zA-Z0-9]){3,}\\.([a-zA-Z]){2,}$/;\n  return regex.test(file_name);\n};\n\n/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  filENamEChecK(\"example.txt\") # => 'Yes'\n  filENamEChecK(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst filENamEChecK = (file_name) => {\n  const regex = /^([a-zA-Z0-9]){3,}\\.([a-zA-Z]){2,}$/;\n  return regex.test(file_name);\n};\n\n/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  filENamEChecK(\"example.txt\") # => 'Yes'\n  filENamEChecK(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst filENamEChecK = (file_name) => {\n  const regex = /^([a-zA-Z0-9]){3,}\\.([a-zA-Z]){2,", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumsquaRes = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumsquaRes", "gc": "<|endoftext|>/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumsquaRes = (lst) => {\n  let sum = 0;\n  \n  lst.forEach((item, index) => {\n    if (index % 3 === 0 && index % 4!== 0) {\n      sum += item * item;\n    } else if (index % 3!== 0) {\n      sum += item * item * item;\n    } else if (index % 4!== 0) {\n      sum += item * item * item * item;\n    }\n  });\n  \n  return sum;\n};\n\n/*\n  Given a list of integers, return a list of integers whose sum is equal to the sum of the squares of the integers. \n  \n  Examples:\n  For lst = [1,2,3] the output should be [6,12,24]\n  For lst = []  the output should be []\n  For lst = [-1,-5,2,-1,-5]  the output should be [-126,-240,-720,-720,-720]\n  */\nconst sumsquaresRes = (lst) => {\n  let sum = [];\n  \n  lst.forEach((item, index) => {\n    if (index % 3 === 0 && index % 4!== 0) {\n      sum.push(item * item);\n    } else if (index % 3!== 0) {\n      sum.push(item * item * item);\n    } else if (index % 4!== 0) {\n      sum.push(item * item * item * item);\n    }\n  });\n  \n  return sum;\n};\n\n/*\n  Given a list of integers, return a list of integers whose sum is equal to the sum of the squares of the integers. \n  \n  Examples:\n  For lst = [1,2,3] the output should be [6,12,24]\n  For lst = []  the output should be []\n  For lst = [-1,-5,2,-1,-5]  the output should be [-126,-240,-720,-720,-720]\n  */\nconst sumsquaresSquareRes = (lst) => {\n  let sum = [];\n  \n  lst.forEach((item, index) => {\n    if (index % 3 === 0 && index % 4!== 0) {\n      sum.push(item * item * item);\n    } else if (index % 3!== 0) {\n      sum.push(item * item * item * item);\n    } else if (index % 4!== 0) {\n      sum.push(item * item * item * item * item);\n    }\n  });\n  \n  return sum;\n};\n\n/*\n  Given a list of integers, return a list of integers whose sum is equal to the sum of the squares of the integers. \n  \n  Examples:\n  For lst = [1,2,3] the output should be [6,12,24]\n  For lst = []  the output should be []\n  For lst = [-1,-5,2,-1,-5]  the output should be [-126,-240,-720,-720,-720]\n  */\nconst sumsquaresSquareSquareRes = (lst) => {\n  let sum = [];\n  \n  lst.forEach((item, index) => {\n    if (index % 3 === 0 && index % 4!== 0) {\n      sum.push(item * item * item * item);\n    } else if (index % 3!== 0) {\n      sum.push(item * item * item * item * item);\n    } else if (index % 4!== 0) {\n      sum.push(item * item * item * item * item * item);\n    }\n  });\n  \n  return sum;\n};\n\n/*\n  Given a list of integers, return a list of integers whose sum is equal to the sum of the squares of the integers. \n  \n  Examples:\n  For lst = [1,2,3] the output should be [6,12,24]\n  For lst = []  the output should be []\n  For lst = [-1,-5,2,-1,-5]  the output should be [-126,-240,-720,-720,-720]\n  */\nconst sumsquaresSquareSquareSquareRes = (lst) => {\n  let sum = [];\n  \n  lst.forEach((item, index) => {\n    if (index % 3 === 0 && index % 4!== 0) {\n      sum.push(item * item * item * item * item);\n    } else if (index % 3!== 0) {\n      sum.push(item * item * item * item * item * item);\n    } else if (index % 4!== 0) {\n      sum.push(item * item * item * item * item * item * item);\n    }\n  });\n  \n  return sum;\n};\n\n/*\n  Given a list of integers, return a list of integers whose sum is equal to the sum of the squares of the integers. \n  \n  Examples:\n  For lst = [1,2,3] the output should be [6,12,24]\n  For lst = []  the output should be []\n  For lst = [-1,-5,2,-1,-5]  the output should be [-126,-240,-720,-720,-720]\n  */\nconst sumsquaresSquareSquareSquareSquareRes = (lst) => {\n  let sum = [];\n  \n  lst.forEach((item, index) => {\n    if (index % 3 === 0 && index % 4!== 0) {\n      sum.push(item * item * item * item * item * item);\n    } else if (index % 3!== 0) {\n      sum.push(item * item * item * item * item * item * item);\n    } else if (index % 4!== 0) {\n      sum.push(item * item * item * item * item * item * item * item);\n    }\n  });\n  \n  return sum;\n};\n\n/*\n  Given a list of integers, return a list of integers whose sum is equal to the sum of the squares of the integers. \n  \n  Examples:\n  For lst = [1,2,3] the output should be [6,12,24]\n  For lst = []  the output should be []\n  For lst = [-1,-5,2,-1,-5]  the output should be [-126,-240,-720,-720,-720]\n  */\nconst sumsquaresSquareSquareSquareSquareSquareSquareRes = (lst) => {\n  let sum = [];\n  \n  lst.forEach((item, index) => {\n    if (index % 3 === 0 && index % 4!== 0) {\n      sum.push(item * item * item * item * item * item * item);\n    } else if (index % 3!== 0) {\n      sum.push(item * item * item * item * item * item * item * item);\n    } else if (index % 4!== 0) {\n      sum.push(item * item * item * item * item * item * item * item * item);\n    }\n  });\n  \n  return sum;\n};\n\n/*\n  Given a list of integers, return a list of integers whose sum is equal to the sum of the squares of the integers. \n  \n  Examples:\n  For lst = [1,2,3] the output should be [6,12,24]\n  For lst = []  the output should be []\n  For lst = [-1,-5,2,-1,-5]  the output should be [-126,-240,-720,-720,-720]\n  */\nconst sumsquaresSquareSquareSquareSquareSquareSquareSquareSquareSquareSquareSquareSquareSquareSquareSquareSquareSquareSquareSquareSquareSquareSquareSquareSquareSquareSquareSquareSquareSquareSquareSquareSquareSquareSquareSquareSquareSquareSquareSquareSquareSquareSquareSquareSquareSquareSquareSquareSquareSquareSquareSquareSquareSquareSquareSquareSquareSquareSquareSquareSquareSquareSquareSquareSquareSquareSquareSquareSquareSquareSquareSquareSquareSquareSquareSquareSquareSquareSquareSquareSquareSquareSquareSquareSquareSquareSquareSquareSquareSquareSquareSquareSquareSquareSquareSquareSquareSquareSquareSquareSquareSquareSquareSquareSquareSquareSquareSquareSquareSquareSquareSquareSquare", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/143", "prompt": "/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst worDsInsenteNce = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "worDsInsenteNce", "gc": "<|endoftext|>/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst worDsInsenteNce = (sentence) => {\n  const words = sentence.split(\" \");\n  let newWords = [];\n  for (let i = 0; i < words.length; i++) {\n    if (words[i] === \"prime\") {\n      newWords.push(words[i]);\n    }\n  }\n  return newWords.join(\" \");\n};\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst worDsInsenteNce2 = (sentence) => {\n  const words = sentence.split(\" \");\n  let newWords = [];\n  for (let i = 0; i < words.length; i++) {\n    if (words[i] === \"prime\") {\n      newWords.push(words[i]);\n    }\n  }\n  return newWords.join(\" \");\n};\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst worDsInsenteNce3 = (sentence) => {\n  const words = sentence.split(\" \");\n  let newWords = [];\n  for (let i = 0; i < words.length; i++) {\n    if (words[i] === \"prime\") {\n      newWords.push(words[i]);\n    }\n  }\n  return newWords.join(\" \");\n};\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst worDsInsenteNce4 = (sentence) => {\n  const words = sentence.split(\" \");\n  let newWords = [];\n  for (let i = 0; i < words.length; i++) {\n    if (words[i] === \"prime\") {\n      newWords.push(words[i]);\n    }\n  }\n  return newWords.join(\" \");\n};\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst worDsInsenteNce5 = (sentence) => {\n  const words = sentence.split(\" \");\n  let newWords = [];\n  for (let i = 0; i < words.length; i++) {\n    if (words[i] === \"prime\") {\n      newWords.push(words[i]);\n    }\n  }\n  return newWords.join(\" \");\n};\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst worDsInsenteNce6 = (sentence) => {\n  const words = sentence.split(\" \");\n  let newWords = [];\n  for (let i = 0; i < words.length; i++) {\n    if (words[i] === \"prime\") {\n      newWords.push(words[i]);\n    }\n  }\n  return newWords.join(\" \");\n};\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst worDsInsenteNce7 = (sentence) => {\n  const words = sentence.split(\" \");\n  let newWords = [];\n  for (let i = 0; i < words.length; i++) {\n    if (words[i] === \"prime\") {\n      newWords.push(words[i]);\n    }\n  }\n  return newWords.join(\" \");\n};\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst worDsInsenteNce8 = (sentence) => {\n  const words = sentence.split(\" \");\n  let newWords = [];\n  for (let i = 0; i < words.length; i++) {\n    if (words[i] === \"prime\") {\n      newWords.push(words[i]);\n    }\n  }\n  return newWords.join(\" \");\n};\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/144", "prompt": "/*Your task is to implement a function that will simPlifY the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simPlifY(\"1/5\", \"5/1\") = true\n  simPlifY(\"1/6\", \"2/1\") = false\n  simPlifY(\"7/10\", \"10/2\") = false\n  */\nconst simPlifY = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simPlifY", "gc": "<|endoftext|>/*Your task is to implement a function that will simPlifY the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simPlifY(\"1/5\", \"5/1\") = true\n  simPlifY(\"1/6\", \"2/1\") = false\n  simPlifY(\"7/10\", \"10/2\") = false\n  */\nconst simPlifY = (x, n) => {\n  let isPlif = false;\n  let isPlifY = false;\n  let isPlifN = false;\n  let isPlifX = false;\n  let isPlifNX = false;\n  let isPlifXN = false;\n  let isPlifNXN = false;\n  let isPlifXNX = false;\n  let isPlifNXNX = false;\n  let isPlifXNXN = false;\n  let isPlifNXNXN = false;\n  let isPlifXNXNXN = false;\n  let isPlifNXNXNXN = false;\n  let isPlifXNXNXNXN = false;\n  let isPlifNXNXNXNXN = false;\n  let isPlifXNXNXNXNXN = false;\n  let isPlifNXNXNXNXNXN = false;\n  let isPlifXNXNXNXNXNXN = false;\n  let isPlifNXNXNXNXNXNXN = false;\n  let isPlifXNXNXNXNXNXNXN = false;\n  let isPlifNXNXNXNXNXNXNXN = false;\n  let isPlifXNXNXNXNXNXNXNXN = false;\n  let isPlifNXNXNXNXNXNXNXN = false;\n  let isPlifXNXNXNXNXNXNXNXN = false;\n  let isPlifNXNXNXNXNXNXNXN = false;\n  let isPlifXNXNXNXNXNXNXNXN = false;\n  let isPlifNXNXNXNXNXNXNXN = false;\n  let isPlifXNXNXNXNXNXNXNXN = false;\n  let isPlifNXNXNXNXNXNXNXN = false;\n  let isPlifXNXNXNXNXNXNXNXN = false;\n  let isPlifNXNXNXNXNXNXNXN = false;\n  let isPlifXNXNXNXNXNXNXNXN = false;\n  let isPlifNXNXNXNXNXNXNXN = false;\n  let isPlifXNXNXNXNXNXNXNXN = false;\n  let isPlifNXNXNXNXNXNXNXN = false;\n  let isPlifXNXNXNXNXNXNXNXN = false;\n  let isPlifNXNXNXNXNXNXNXN = false;\n  let isPlifXNXNXNXNXNXNXNXN = false;\n  let isPlifNXNXNXNXNXNXNXN = false;\n  let isPlifXNXNXNXNXNXNXN = false;\n  let isPlifNXNXNXNXNXNXNXN = false;\n  let isPlifXNXNXNXNXNXNXNXN = false;\n  let isPlifNXNXNXNXNXNXNXN = false;\n  let isPlifXNXNXNXNXNXNXNXN = false;\n  let isPlifNXNXNXNXNXNXNXN = false;\n  let isPlifXNXNXNXNXNXNXNXN = false;\n  let isPlifNXNXNXNXNXNXNXN = false;\n  let isPlifXNXNXNXNXNXNXNXN = false;\n  let isPlifNXNXNXNXNXNXNXN = false;\n  let isPlifXNXNXNXNXNXNXNXN = false;\n  let isPlifNXNXNXNXNXNXNXN = false;\n  let isPlifXNXNXNXNXNXNXNXN = false;\n  let isPlifNXNXNXNXNXNXNXN = false;\n  let isPlifXNXNXNXNXNXNXNXN = false;\n  let isPlifNXNXNXNXNXNXNXN = false;\n  let isPlifXNXNXNXNXNXNXNXN = false;\n  let isPlifNXNXNXNXNXNXNXN = false;\n  let isPlifXNXNXNXNXNXNXNXN = false;\n  let isPlifNXNXNXNXNXNXNXN = false;\n  let isPlifXNXNXNXNXNXNXNXN = false;\n  let isPlifNXNXNXNXNXNXNXN = false;\n  let isPlifXNXNXNXNXNXNXNXN = false;\n  let isPlifNXNXNXNXNXNXNXN = false;\n  let isPlifXNXNXNXNXNXNXNXN = false;\n  let isPlifNXNXNXNXNXNXNXN = false;\n  let isPlifXNXNXNXNXNXNXNXN = false;\n  let isPlifNXNXNXNXNXNXNXN = false;\n  let isPlifXNXNXNXNXNXNXNXN = false;\n  let isPlifNXNXNXNXNXNXNXN = false;\n  let isPlifXNXNXNXNXNXNXN = false;\n  let isPlifNXNXNXNXNXNXNXN = false;\n  let isP", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> ordErBypointS([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> ordErBypointS([]) == []\n  */\nconst ordErBypointS = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "ordErBypointS", "gc": "<|endoftext|>/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> ordErBypointS([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> ordErBypointS([]) == []\n  */\nconst ordErBypointS = (nums) => {\n  let sum = 0;\n  let index = 0;\n  let result = [];\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n    result.push(nums[i]);\n  }\n  for (let i = 0; i < result.length; i++) {\n    if (result[i] >= 10) {\n      result[i] = result[i] + sum % 10;\n      sum = Math.floor(sum / 10);\n    }\n    index++;\n  }\n  return result;\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in descending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> ordErBypointD([1, 11, -1, -11, -12]) == [11, -11, -11, -11, -12]\n  >>> ordErBypointD([]) == []\n  */\nconst ordErBypointD = (nums) => {\n  let sum = 0;\n  let index = 0;\n  let result = [];\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n    result.push(nums[i]);\n  }\n  for (let i = 0; i < result.length; i++) {\n    if (result[i] >= 10) {\n      result[i] = result[i] - sum % 10;\n      sum = Math.floor(sum / 10);\n    }\n    index++;\n  }\n  return result;\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> ordErBypointS([1, 11, -1, -11, -12]) == [-12, -11, -11, -11, 11]\n  >>> ordErBypointS([]) == []\n  */\nconst ordErBypoint = (nums) => {\n  let sum = 0;\n  let index = 0;\n  let result = [];\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n    result.push(nums[i]);\n  }\n  for (let i = 0; i < result.length; i++) {\n    if (result[i] >= 10) {\n      result[i] = result[i] + sum % 10;\n      sum = Math.floor(sum / 10);\n    }\n    index++;\n  }\n  return result;\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in descending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> ordErBypointD([1, 11, -1, -11, -12]) == [11, -11, -11, -11, -12]\n  >>> ordErBypointD([]) == []\n  */\nconst ordErBypointD = (nums) => {\n  let sum = 0;\n  let index = 0;\n  let result = [];\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n    result.push(nums[i]);\n  }\n  for (let i = 0; i < result.length; i++) {\n    if (result[i] >= 10) {\n      result[i] = result[i] - sum % 10;\n      sum = Math.floor(sum / 10);\n    }\n    index++;\n  }\n  return result;\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> ordErBypointS([1, 11, -1, -11, -12]) == [-12, -11, -11, -11, 11]\n  >>> ordErBypointS([]) == []\n  */\nconst ordErBypoint = (nums) => {\n  let sum = 0;\n  let index = 0;\n  let result = [];\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n    result.push(nums[i]);\n  }\n  for (let i = 0; i < result.length; i++) {\n    if (result[i] >= 10) {\n      result[i] = result[i] + sum % 10;\n      sum = Math.floor(sum / 10);\n    }\n    index++;\n  }\n  return result;\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in descending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> ordErBypointD([1, 11, -1, -11, -12]) == [11, -11, -11, -11, -12]\n  >>> ordErBypointD([]) == []\n  */\nconst ordErBypointD = (nums) => {\n  let sum = 0;\n  let index = 0;\n  let result = [];\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n    result.push(nums[i]);\n  }\n  for (let i = 0; i < result.length; i++) {\n    if (result[i] >= 10) {\n      result[i] = result[i] - sum % 10;\n      sum = Math.floor(sum / 10);\n    }\n    index++;\n  }\n  return result;\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> ordErBypointS([1, 11, -1, -11, -12]) == [-12, -11, -11, -11, 11]\n  >>> ordErBypointS([]) == []\n  */\nconst ordErBypoint = (nums) => {\n  let sum = 0;\n  let index = 0;\n  let result = [];\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n    result.push(nums[i]);\n  }\n  for (let i = 0; i < result.length; i++) {\n    if (result[i] >= 10) {\n      result[i] = result[i] + sum % 10;\n      sum = Math.floor(sum / 10);\n    }\n    index++;\n  }\n  return result;\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in descending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> ordErBypointD([1, 11, -1, -11, -12]) == [11, -11, -11, -11, -12]\n  >>> ordErBypointD([]) == []\n  */\nconst ordErBypointD = (nums) => {\n  let sum = 0;\n  let index = 0;\n  let result = [];\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n    result.push(nums[i]);\n  }\n  for (let i = 0; i < result.length; i++) {\n    if (result[i] >= 10) {\n      result[i] = result[i] - sum % 10;\n      sum = Math.floor(sum / 10);\n    }\n    index++;\n  }\n  return result;\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> ordErBypointS([1, 11, -1, -11, -12]) == [-12, -11, -11, -11, 11]\n  >>> ordErBypointS([]) == []\n  */\nconst ordErBypoint = (nums) => {\n  let sum = 0;\n  let index = 0;\n  let result = [];\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n    result.push(nums[i]);\n  }\n  for (let i = 0; i < result.length; i++) {\n    if (result[i] >= 10) {\n      result[i] = result[i] - sum % 10;\n      sum = Math.floor(sum / 10);\n    }\n    index++;\n  }\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/146", "prompt": "/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  speCialfilteR([15, -73, 14, -15]) => 1 \n  speCialfilteR([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst speCialfilteR = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "speCialfilteR", "gc": "<|endoftext|>/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  speCialfilteR([15, -73, 14, -15]) => 1 \n  speCialfilteR([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst speCialfilteR = (nums) => {\n  let count = 0;\n  nums.forEach((num) => {\n    if (num % 2 === 0 && num >= 10) {\n      count++;\n    }\n  });\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are even (1, 3, 5, 7, 9).\n  For example:\n  speCialfilteR([15, -73, 14, -15]) => 1 \n  speCialfilteR([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst speCialfilteC = (nums) => {\n  let count = 0;\n  nums.forEach((num) => {\n    if (num % 2 === 0 && num >= 10) {\n      count++;\n    }\n  });\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are divisible by 3.\n  For example:\n  speCialfilteR([15, -73, 14, -15]) => 1 \n  speCialfilteR([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst speCialfilteD = (nums) => {\n  let count = 0;\n  nums.forEach((num) => {\n    if (num % 2 === 0 && num >= 10) {\n      count++;\n    }\n  });\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are divisible by 5.\n  For example:\n  speCialfilteR([15, -73, 14, -15]) => 1 \n  speCialfilteR([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst speCialfilteE = (nums) => {\n  let count = 0;\n  nums.forEach((num) => {\n    if (num % 2 === 0 && num >= 10) {\n      count++;\n    }\n  });\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are divisible by 7.\n  For example:\n  speCialfilteR([15, -73, 14, -15]) => 1 \n  speCialfilteR([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst speCialfilteF = (nums) => {\n  let count = 0;\n  nums.forEach((num) => {\n    if (num % 2 === 0 && num >= 10) {\n      count++;\n    }\n  });\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are divisible by 9.\n  For example:\n  speCialfilteR([15, -73, 14, -15]) => 1 \n  speCialfilteR([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst speCialfilteG = (nums) => {\n  let count = 0;\n  nums.forEach((num) => {\n    if (num % 2 === 0 && num >= 10) {\n      count++;\n    }\n  });\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are divisible by 11.\n  For example:\n  speCialfilteR([15, -73, 14, -15]) => 1 \n  speCialfilteR([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst speCialfilteH = (nums) => {\n  let count = 0;\n  nums.forEach((num) => {\n    if (num % 2 === 0 && num >= 10) {\n      count++;\n    }\n  });\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are divisible by 13.\n  For example:\n  speCialfilteR([15, -73, 14, -15]) => 1 \n  speCialfilteR([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst speCialfilteI = (nums) => {\n  let count = 0;\n  nums.forEach((num) => {\n    if (num % 2 === 0 && num >= 10) {\n      count++;\n    }\n  });\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are divisible by 15.\n  For example:\n  speCialfilteR([15, -73, 14, -15]) => 1 \n  speCialfilteR([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst speCialfilteJ = (nums) => {\n  let count = 0;\n  nums.forEach((num) => {\n    if (num % 2 === 0 && num >= 10) {\n      count++;\n    }\n  });\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are divisible by 17.\n  For example:\n  speCialfilteR([15, -73, 14, -15]) => 1 \n  speCialfilteR([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst speCialfilteK = (nums) => {\n  let count = 0;\n  nums.forEach((num) => {\n    if (num % 2 === 0 && num >= 10) {\n      count++;\n    }\n  });\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are divisible by 19.\n  For example:\n  speCialfilteR([15, -73, 14, -15]) => 1 \n  speCialfilteR([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst speCialfilteL = (nums) => {\n  let count = 0;\n  nums.forEach((num) => {\n    if (num % 2 === 0 && num >= 10) {\n      count++;\n    }\n  });\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are divisible by 23.\n  For example:\n  speCialfilteR([15, -73, 14, -15]) => 1 \n  speCialfilteR([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst speCialfilteM = (nums) => {\n  let count = 0;\n  nums.forEach((num) => {\n    if (num % 2 === 0 && num >= 10) {\n      count++;\n    }\n  });\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are divisible by 29.\n  For example:\n  speCialfilteR([15, -73, 14, -15]) => 1 \n  speCialfilteR([33, -2, -3, 4", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/147", "prompt": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getmaxTRipleS = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getmaxTRipleS", "gc": "<|endoftext|>/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getmaxTRipleS = (n) => {\n  const a = [];\n  for (let i = 1; i <= n; i++) {\n    a.push(i * i - i + 1);\n  }\n  return a.filter(a => a % 3 === 0).length;\n};\n\n/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 3\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getmaxTRiplesN = (n) => {\n  const a = [];\n  for (let i = 1; i <= n; i++) {\n    a.push(i * i - i + 1);\n  }\n  return a.filter(a => a % 3 === 0).length;\n};\n\n/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 4\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getmaxTRiplesN2 = (n) => {\n  const a = [];\n  for (let i = 1; i <= n; i++) {\n    a.push(i * i - i + 1);\n  }\n  return a.filter(a => a % 3 === 0).length;\n};\n\n/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 5\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getmaxTRiplesN3 = (n) => {\n  const a = [];\n  for (let i = 1; i <= n; i++) {\n    a.push(i * i - i + 1);\n  }\n  return a.filter(a => a % 3 === 0).length;\n};\n\n/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 6\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getmaxTRiplesN4 = (n) => {\n  const a = [];\n  for (let i = 1; i <= n; i++) {\n    a.push(i * i - i + 1);\n  }\n  return a.filter(a => a % 3 === 0).length;\n};\n\n/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 7\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getmaxTRiplesN5 = (n) => {\n  const a = [];\n  for (let i = 1; i <= n; i++) {\n    a.push(i * i - i + 1);\n  }\n  return a.filter(a => a % 3 === 0).length;\n};\n\n/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 8\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getmaxTRiplesN6 = (n) => {\n  const a = [];\n  for (let i = 1; i <= n; i++) {\n    a.push(i * i - i + 1);\n  }\n  return a.filter(a => a % 3 === 0).length;\n};\n\n/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 9\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getmaxTRiplesN7 = (n) => {\n  const a = [];\n  for (let i = 1; i <= n; i++) {\n    a.push(i * i - i + 1);\n  }\n  return a.filter(a => a % 3 === 0).length;\n};\n\n/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 10\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getmaxTRiplesN8 = (n) => {\n  const a = [];\n  for (let i = 1; i <= n; i++) {\n    a.push(i * i - i + 1);\n  }\n  return a.filter(a => a % 3 === 0).length;\n};\n\n/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/148", "prompt": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "gc": "<|endoftext|>/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  const planet1Orbit = orbit(planet1);\n  const planet2Orbit = orbit(planet2);\n  const planet1OrbitDistance = planet1Orbit.distance;\n  const planet2OrbitDistance = planet2Orbit.distance;\n  const planet1OrbitOrbits = planet1Orbit.orbits;\n  const planet2OrbitOrbits = planet2Orbit.orbits;\n  const planet1OrbitOrbitPairs = planet1OrbitOrbits.map((orbit) => {\n    const planet1OrbitDistance = orbit.distance;\n    const planet2OrbitDistance = planet2OrbitDistance;\n    const planet1OrbitOrbits = orbit.orbits;\n    const planet2OrbitOrbits = planet2OrbitOrbits.map((orbit) => {\n      const planet2OrbitDistance = orbit.distance;\n      const planet1OrbitOrbitPair = planet1OrbitOrbits.find((orbit2) => {\n        const planet2OrbitDistance = orbit2.distance;\n        return planet2OrbitDistance <= planet1OrbitDistance;\n      });\n      const planet2OrbitOrbitPair = planet2OrbitOrbits.find((orbit2) => {\n        const planet1OrbitDistance = orbit2.distance;\n        return planet1OrbitDistance <= planet2OrbitDistance;\n      });\n      return planet1OrbitOrbitPair || planet2OrbitOrbitPair;\n    });\n    return planet1OrbitOrbitPair;\n  });\n  const planet2OrbitOrbitPairs = planet2OrbitOrbits.map((orbit) => {\n    const planet2OrbitDistance = orbit.distance;\n    const planet2OrbitOrbits = orbit.orbits;\n    const planet2OrbitOrbitPairs = planet2OrbitOrbits.map((orbit) => {\n      const planet2OrbitDistance = orbit.distance;\n      const planet2OrbitOrbitPair = planet2OrbitOrbits.find((orbit2) => {\n        const planet2OrbitDistance = orbit2.distance;\n        return planet2OrbitDistance <= planet2OrbitDistance;\n      });\n      return planet2OrbitOrbitPair || planet2OrbitOrbitPair;\n    });\n    return planet2OrbitOrbitPairs;\n  });\n  const planet1OrbitOrbitPairs = planet1OrbitOrbitPairs.map((pair) => {\n    const planet1OrbitDistance = pair[0].distance;\n    const planet1OrbitOrbitPair = pair[0].orbits;\n    const planet1OrbitOrbitPairs = planet1OrbitOrbitPair.map((orbit) => {\n      const planet1OrbitDistance = orbit.distance;\n      const planet1OrbitOrbitPairs = orbit.orbits;\n      const planet1OrbitOrbitPair = planet1OrbitOrbitPairs.find((orbit2) => {\n        const planet1OrbitDistance = orbit2.distance;\n        return planet1OrbitDistance <= planet1OrbitDistance;\n      });\n      return planet1OrbitOrbitPair || planet1OrbitOrbitPair;\n    });\n    return planet1OrbitOrbitPairs;\n  });\n  const planet2OrbitOrbitPairs = planet2OrbitOrbitPairs.map((pair) => {\n    const planet2OrbitDistance = pair[0].distance;\n    const planet2OrbitOrbitPairs = pair[0].orbits;\n    const planet2OrbitOrbitPairs = planet2OrbitOrbitPairs.map((orbit) => {\n      const planet2OrbitDistance = orbit.distance;\n      const planet2OrbitOrbitPairs = orbit.orbits;\n      const planet2OrbitOrbitPair = planet2OrbitOrbitPairs.find((orbit2) => {\n        const planet2OrbitDistance = orbit2.distance;\n        return planet2OrbitDistance <= planet2OrbitDistance;\n      });\n      return planet2OrbitOrbitPair || planet2OrbitOrbitPair;\n    });\n    return planet2OrbitOrbitPairs;\n  });\n  const planet1OrbitOrbitPairs = planet1OrbitOrbitPairs.map((pair) => {\n    const planet1OrbitDistance = pair[0].distance;\n    const planet1OrbitOrbitPairs = pair[0].orbits;\n    const planet1OrbitOrbitPairs = planet1OrbitOrbitPairs.map((orbit) => {\n      const planet1OrbitDistance = orbit.distance;\n      const planet1OrbitOrbitPairs = orbit.orbits;\n      const planet1OrbitOrbitPair = planet1OrbitOrbitPairs.find((orbit2) => {\n        const planet1OrbitDistance = orbit2.distance;\n        return planet1OrbitDistance <= planet1OrbitDistance;\n      });\n      return planet1OrbitOrbitPair || planet1OrbitOrbitPair;\n    });\n    return planet1OrbitOrbitPairs;\n  });\n  const planet2OrbitOrbitPairs = planet2OrbitOrbitPairs.map((pair) => {\n    const planet2OrbitDistance = pair[0].distance;\n    const planet2OrbitOrbitPairs = pair[0].orbits;\n    const planet2OrbitOrbitPairs = planet2OrbitOrbitPairs.map((orbit) => {\n      const planet2OrbitDistance = orbit.distance;\n      const planet2OrbitOrbitPairs = orbit.orbits;\n      const planet2OrbitOrbitPair = planet2OrbitOrbitPairs.find((orbit2) => {\n        const planet2OrbitDistance = orbit2.distance;\n        return planet2OrbitDistance <= planet2OrbitDistance;\n      });\n      return planet2OrbitOrbitPair || planet2OrbitOrbitPair;\n    });\n    return planet2OrbitOrbitPairs;\n  });\n  const planet1OrbitOrbitPairs = planet1OrbitOrbitPairs.", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sorTedLIstSuM = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sorTedLIstSuM", "gc": "<|endoftext|>/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sorTedLIstSuM = (lst) => {\n  let newLst = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 === 0) {\n      newLst.push(lst[i]);\n    }\n  }\n  return newLst.sort((a, b) => a.length - b.length);\n};\n\n/*Write a function that accepts a string as a parameter,\n  deletes the string that starts with the same letter,\n  and returns the resulted string with a sorted order,\n  The string is always a string.\n  The order of the string should be ascending by letter.\n  If two letters have the same letter, sort the string alphabetically.\n  The function should return a new string sorted by that rule.\n  You may assume that all letters will have the same letter.\n  For example:\n  assert sort_string(\"aaa\") => \"aa\"\n  assert sort_string(\"ab\") => \"ab\"\n  assert sort_string(\"aba\") => \"aba\"\n  */\nconst sorTedLIstSuM = (str) => {\n  let newStr = \"\";\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === str[0]) {\n      newStr += str[i];\n    }\n  }\n  return newStr.sort((a, b) => a.localeCompare(b));\n};\n\n/*Write a function that accepts a string as a parameter,\n  deletes the string that starts with the same letter,\n  and returns the resulted string with a sorted order,\n  The string is always a string.\n  The order of the string should be ascending by letter.\n  If two letters have the same letter, sort the string alphabetically.\n  The function should return a new string sorted by that rule.\n  You may assume that all letters will have the same letter.\n  For example:\n  assert sort_string(\"aaa\") => \"aa\"\n  assert sort_string(\"ab\") => \"ab\"\n  assert sort_string(\"aba\") => \"aba\"\n  */\nconst sorTedLIstSuM = (str) => {\n  let newStr = \"\";\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === str[0]) {\n      newStr += str[i];\n    }\n  }\n  return newStr.sort((a, b) => a.localeCompare(b));\n};\n\n/*Write a function that accepts a string as a parameter,\n  deletes the string that starts with the same letter,\n  and returns the resulted string with a sorted order,\n  The string is always a string.\n  The order of the string should be ascending by letter.\n  If two letters have the same letter, sort the string alphabetically.\n  The function should return a new string sorted by that rule.\n  You may assume that all letters will have the same letter.\n  For example:\n  assert sort_string(\"aaa\") => \"aa\"\n  assert sort_string(\"ab\") => \"ab\"\n  assert sort_string(\"aba\") => \"aba\"\n  */\nconst sorTedLIstSuM = (str) => {\n  let newStr = \"\";\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === str[0]) {\n      newStr += str[i];\n    }\n  }\n  return newStr.sort((a, b) => a.localeCompare(b));\n};\n\n/*Write a function that accepts a string as a parameter,\n  deletes the string that starts with the same letter,\n  and returns the resulted string with a sorted order,\n  The string is always a string.\n  The order of the string should be ascending by letter.\n  If two letters have the same letter, sort the string alphabetically.\n  The function should return a new string sorted by that rule.\n  You may assume that all letters will have the same letter.\n  For example:\n  assert sort_string(\"aaa\") => \"aa\"\n  assert sort_string(\"ab\") => \"ab\"\n  assert sort_string(\"aba\") => \"aba\"\n  */\nconst sorTedLIstSuM = (str) => {\n  let newStr = \"\";\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === str[0]) {\n      newStr += str[i];\n    }\n  }\n  return newStr.sort((a, b) => a.localeCompare(b));\n};\n\n/*Write a function that accepts a string as a parameter,\n  deletes the string that starts with the same letter,\n  and returns the resulted string with a sorted order,\n  The string is always a string.\n  The order of the string should be ascending by letter.\n  If two letters have the same letter, sort the string alphabetically.\n  The function should return a new string sorted by that rule.\n  You may assume that all letters will have the same letter.\n  For example:\n  assert sort_string(\"aaa\") => \"aa\"\n  assert sort_string(\"ab\") => \"ab\"\n  assert sort_string(\"aba\") => \"aba\"\n  */\nconst sorTedLIstSuM = (str) => {\n  let newStr = \"\";\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === str[0]) {\n      newStr += str[i];\n    }\n  }\n  return newStr.sort((a, b) => a.localeCompare(b));\n};\n\n/*Write a function that accepts a string as a parameter,\n  deletes the string that starts with the same letter,\n  and returns the resulted string with a sorted order,\n  The string is always a string.\n  The order of the string should be ascending by letter.\n  If two letters have the same letter, sort the string alphabetically.\n  The function should return a new string sorted by that rule.\n  You may assume that all letters will have the same letter.\n  For example:\n  assert sort_string(\"aaa\") => \"aa\"\n  assert sort_string(\"ab\") => \"ab\"\n  assert sort_string(\"aba\") => \"aba\"\n  */\nconst sorTedLIstSuM = (str) => {\n  let newStr = \"\";\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === str[0]) {\n      newStr += str[i];\n    }\n  }\n  return newStr.sort((a, b) => a.localeCompare(b));\n};\n\n/*Write a function that accepts a string as a parameter,\n  deletes the string that starts with the same letter,\n  and returns the resulted string with a sorted order,\n  The string is always a string.\n  The order of the string should be ascending by letter.\n  If two letters have the same letter, sort the string alphabetically.\n  The function should return a new string sorted by that rule.\n  You may assume that all letters will have the same letter.\n  For example:\n  assert sort_string(\"aaa\") => \"aa\"\n  assert sort_string(\"ab\") => \"ab\"\n  assert sort_string(\"aba\") => \"aba\"\n  */\nconst sorTedLIstSuM = (str) => {\n  let newStr = \"\";\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === str[0]) {\n      newStr += str[i];\n    }\n  }\n  return newStr.sort((a, b) => a.localeCompare(b));\n};\n\n/*Write a function that accepts a string as a parameter,\n  deletes the string that starts with the same letter,\n  and returns the resulted string with a sorted order,", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/15", "prompt": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strIngSEquenCe(0)\n  '0'\n  >>> strIngSEquenCe(5)\n  '0 1 2 3 4 5'\n  */\nconst strIngSEquenCe = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "strIngSEquenCe", "gc": "<|endoftext|>/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strIngSEquenCe(0)\n  '0'\n  >>> strIngSEquenCe(5)\n  '0 1 2 3 4 5'\n  */\nconst strIngSEquenCe = (n) => {\n  const strIngSEquence = Array.from({ length: n }, (_, i) => i).join(' ');\n  return strIngSEquence;\n};\n\n/**\n * Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n * If n is 0, return an empty string.\n * If n is less than 0, return '0'\n * If n is greater than the length of the string, return '0'\n */\nconst strIngSEquence = (n) => {\n  if (n <= 0) {\n    return '';\n  }\n  return strIngSEquenCe(n);\n};\n\n/**\n * Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n * If n is 0, return an empty string.\n * If n is less than 0, return '0'\n * If n is greater than the length of the string, return '0'\n */\nconst strIngSEquence = (n) => {\n  if (n <= 0) {\n    return '';\n  }\n  return strIngSEquence(n);\n};\n\n/**\n * Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n * If n is 0, return an empty string.\n * If n is less than 0, return '0'\n * If n is greater than the length of the string, return '0'\n */\nconst strIngSEquence = (n) => {\n  if (n <= 0) {\n    return '';\n  }\n  return strIngSEquence(n);\n};\n\n/**\n * Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n * If n is 0, return an empty string.\n * If n is less than 0, return '0'\n * If n is greater than the length of the string, return '0'\n */\nconst strIngSEquence = (n) => {\n  if (n <= 0) {\n    return '';\n  }\n  return strIngSEquence(n);\n};\n\n/**\n * Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n * If n is 0, return an empty string.\n * If n is less than 0, return '0'\n * If n is greater than the length of the string, return '0'\n */\nconst strIngSEquence = (n) => {\n  if (n <= 0) {\n    return '';\n  }\n  return strIngSEquence(n);\n};\n\n/**\n * Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n * If n is 0, return an empty string.\n * If n is less than 0, return '0'\n * If n is greater than the length of the string, return '0'\n */\nconst strIngSEquence = (n) => {\n  if (n <= 0) {\n    return '';\n  }\n  return strIngSEquence(n);\n};\n\n/**\n * Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n * If n is 0, return an empty string.\n * If n is less than 0, return '0'\n * If n is greater than the length of the string, return '0'\n */\nconst strIngSEquence = (n) => {\n  if (n <= 0) {\n    return '';\n  }\n  return strIngSEquence(n);\n};\n\n/**\n * Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n * If n is 0, return an empty string.\n * If n is less than 0, return '0'\n * If n is greater than the length of the string, return '0'\n */\nconst strIngSEquence = (n) => {\n  if (n <= 0) {\n    return '';\n  }\n  return strIngSEquence(n);\n};\n\n/**\n * Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n * If n is 0, return an empty string.\n * If n is less than 0, return '0'\n * If n is greater than the length of the string, return '0'\n */\nconst strIngSEquence = (n) => {\n  if (n <= 0) {\n    return '';\n  }\n  return strIngSEquence(n);\n};\n\n/**\n * Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n * If n is 0, return an empty string.\n * If n is less than 0, return '0'\n * If n is greater than the length of the string, return '0'\n */\nconst strIngSEquence = (n) => {\n  if (n <= 0) {\n    return '';\n  }\n  return strIngSEquence(n);\n};\n\n/**\n * Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n * If n is 0, return an empty string.\n * If n is less than 0, return '0'\n * If n is greater than the length of the string, return '0'\n */\nconst strIngSEquence = (n) => {\n  if (n <= 0) {\n    return '';\n  }\n  return strIngSEquence(n);\n};\n\n/**\n * Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n * If n is 0, return an empty string.\n * If n is less than 0, return '0'\n * If n is greater than the length of the string, return '0'\n */\nconst strIngSEquence = (n) => {\n  if (n <= 0) {\n    return '';\n  }\n  return strIngSEquence(n);\n};\n\n/**\n * Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n * If n is 0, return an empty string.\n * If n is less than 0, return '0'\n * If n is greater than the length of the string, return '0'\n */\nconst strIngSEquence = (n) => {\n  if (n <= 0) {\n    return '';\n  }\n  return strIngSEquence(n);\n};\n\n/**\n * Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n * If n is 0, return an empty string.\n * If n is less than 0, return '0'\n * If n is greater than the length of the string, return '0'\n */\nconst strIngSEquence = (n) => {\n  if (n <= 0) {\n    return '';\n  }\n  return strIngSEquence(n);\n};\n\n/**\n * Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n * If n is 0, return an empty string.\n * If n is less than 0, return '0'\n * If n is greater than the length of the string, return '0'\n */\nconst strIngSEquence = (n) => {\n  if (n <= 0) {\n    return '';\n  }\n  return strIngSEquence(n);\n};\n\n/**\n * Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n * If n is 0, return an empty string.\n * If n is less than 0, return '0'\n * If n is greater than the length of the string, return '0'\n */\nconst strIngSEquence = (n) => {\n  if (n <= 0) {\n    return '';\n  }\n  return strIngSEquence(n);\n};\n\n/**\n * Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n * If n is 0, return an empty string.\n * If n is less than 0, return '0'\n * If n is greater than the length of the string, return '0'\n */\nconst strIngSEquence = (n) => {\n  if (n <= 0) {\n    return '';\n  }\n  return ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 3}
{"task_id": "JavaScript/150", "prompt": "/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOry(7, 34, 12) == 34\n  for xOry(15, 8, 5) == 5\n  \n  */\nconst xOry = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOry", "gc": "<|endoftext|>/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOry(7, 34, 12) == 34\n  for xOry(15, 8, 5) == 5\n  \n  */\nconst xOry = (n, x, y) => {\n  if (n <= 0 || n >= y) {\n    return y;\n  }\n  \n  let isPrime = true;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  \n  return isPrime? x : y;\n};\n\n/*\n  A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOry(7, 34, 12) == 34\n  for xOry(15, 8, 5) == 5\n  \n  */\nconst xOry = (n, x, y) => {\n  if (n <= 0 || n >= y) {\n    return y;\n  }\n  \n  let isPrime = true;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  \n  return isPrime? x : y;\n};\n\n/*\n  A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOry(7, 34, 12) == 34\n  for xOry(15, 8, 5) == 5\n  \n  */\nconst xOry = (n, x, y) => {\n  if (n <= 0 || n >= y) {\n    return y;\n  }\n  \n  let isPrime = true;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  \n  return isPrime? x : y;\n};\n\n/*\n  A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOry(7, 34, 12) == 34\n  for xOry(15, 8, 5) == 5\n  \n  */\nconst xOry = (n, x, y) => {\n  if (n <= 0 || n >= y) {\n    return y;\n  }\n  \n  let isPrime = true;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  \n  return isPrime? x : y;\n};\n\n/*\n  A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOry(7, 34, 12) == 34\n  for xOry(15, 8, 5) == 5\n  \n  */\nconst xOry = (n, x, y) => {\n  if (n <= 0 || n >= y) {\n    return y;\n  }\n  \n  let isPrime = true;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  \n  return isPrime? x : y;\n};\n\n/*\n  A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOry(7, 34, 12) == 34\n  for xOry(15, 8, 5) == 5\n  \n  */\nconst xOry = (n, x, y) => {\n  if (n <= 0 || n >= y) {\n    return y;\n  }\n  \n  let isPrime = true;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  \n  return isPrime? x : y;\n};\n\n/*\n  A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOry(7, 34, 12) == 34\n  for xOry(15, 8, 5) == 5\n  \n  */\nconst xOry = (n, x, y) => {\n  if (n <= 0 || n >= y) {\n    return y;\n  }\n  \n  let isPrime = true;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  \n  return isPrime? x : y;\n};\n\n/*\n  A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOry(7, 34, 12) == 34\n  for xOry(15, 8, 5) == 5\n  \n  */\nconst xOry = (n, x, y) => {\n  if (n <= 0 || n >= y) {\n    return y;\n  }\n  \n  let isPrime = true;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  \n  return isPrime? x : y;\n};\n\n/*\n  A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOry(7, 34, 12) == 34\n  for xOry(15, 8, 5) == 5\n  \n  */\nconst xOry = (n, x, y) => {\n  if (n <= 0 || n >= y) {\n    return y;\n  }\n  \n  let isPrime = true;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  \n  return isPrime? x : y;\n};\n\n/*\n  A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOry(7, 34, 12) == 34\n  for xOry(15, 8, 5) == 5\n  \n  */\nconst xOry = (n, x, y) => {\n  if (n <= 0 || n >= y) {\n    return y;\n  }\n  \n  let isPrime = true;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  \n  return isPrime? x : y;\n};\n\n/*\n  A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOry(7, 34, 12) == 34\n  for xOry(15, 8, 5) == 5\n  \n  */\nconst xOry = (n, x, y) => {\n  if (n <= 0 || n >= y) {\n    return y;\n  }\n  \n  let isPrime = true;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  \n  return isPrime? x : y;\n};\n\n/*\n  A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOry(7, 34, 12) == 34\n  for xOry(15, 8, 5) == 5\n  \n  */\nconst xOry = (n, x, y) => {\n  if (n <= 0 || n >= y) {\n    return y;\n  }\n  \n  let isPrime = true;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  \n  return isPrime? x : y;\n};\n\n/*\n  A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOry(7, 34, 12) == 34\n  for xOry(15, 8, 5) == 5\n  \n  */\nconst xOry = (n, x, y) => {\n  if (n <= 0 || n >= y) {\n    return y;\n  }\n  \n  let isPrime = true;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  \n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  douBleTHeDifFerEnce([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  douBleTHeDifFerEnce([-1, -2, 0]) == 0\n  douBleTHeDifFerEnce([9, -2]) == 81\n  douBleTHeDifFerEnce([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst douBleTHeDifFerEnce = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "douBleTHeDifFerEnce", "gc": "<|endoftext|>/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  douBleTHeDifFerEnce([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  douBleTHeDifFerEnce([-1, -2, 0]) == 0\n  douBleTHeDifFerEnce([9, -2]) == 81\n  douBleTHeDifFerEnce([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst douBleTHeDifFerEnce = (lst) => {\n  if (!lst) return 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are even. Ignore numbers that are negative or not integers.\n  douBleTHeDifFerEnce([1, 3, 2, 0]) == 1 + 0 + 0 + 0 = 1\n  douBleTHeDifFerEnce([-1, -2, 0]) == -1\n  douBleTHeDifFerEnce([9, -2]) == 81\n  douBleTHeDifFerEnce([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst douBleTHeDifFerEnce = (lst) => {\n  if (!lst) return 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are divisible by 3. Ignore numbers that are negative or not integers.\n  douBleTHeDifFerEnce([1, 3, 2, 0]) == 1 + 0 + 0 + 0 = 1\n  douBleTHeDifFerEnce([-1, -2, 0]) == -1\n  douBleTHeDifFerEnce([9, -2]) == 81\n  douBleTHeDifFerEnce([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst douBleTHeDifFerEnce = (lst) => {\n  if (!lst) return 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are divisible by 3. Ignore numbers that are negative or not integers.\n  douBleTHeDifFerEnce([1, 3, 2, 0]) == 1 + 0 + 0 + 0 = 1\n  douBleTHeDifFerEnce([-1, -2, 0]) == -1\n  douBleTHeDifFerEnce([9, -2]) == 81\n  douBleTHeDifFerEnce([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst douBleTHeDifFerEnce = (lst) => {\n  if (!lst) return 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are divisible by 3. Ignore numbers that are negative or not integers.\n  douBleTHeDifFerEnce([1, 3, 2, 0]) == 1 + 0 + 0 + 0 = 1\n  douBleTHeDifFerEnce([-1, -2, 0]) == -1\n  douBleTHeDifFerEnce([9, -2]) == 81\n  douBleTHeDifFerEnce([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst douBleTHeDifFerEnce = (lst) => {\n  if (!lst) return 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are divisible by 3. Ignore numbers that are negative or not integers.\n  douBleTHeDifFerEnce([1, 3, 2, 0]) == 1 + 0 + 0 + 0 = 1\n  douBleTHeDifFerEnce([-1, -2, 0]) == -1\n  douBleTHeDifFerEnce([9, -2]) == 81\n  douBleTHeDifFerEnce([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst douBleTHeDifFerEnce = (lst) => {\n  if (!lst) return 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are divisible by 3. Ignore numbers that are negative or not integers.\n  douBleTHeDifFerEnce([1, 3, 2, 0]) == 1 + 0 + 0 + 0 = 1\n  douBleTHeDifFerEnce([-1, -2, 0]) == -1\n  douBleTHeDifFerEnce([9, -2]) == 81\n  douBleTHeDifFerEnce([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst douBleTHeDifFerEnce = (lst) => {\n  if (!lst) return 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are divisible by 3. Ignore numbers that are negative or not integers.\n  douBleTHeDifFerEnce([1, 3, 2, 0]) == 1 + 0 + 0 + 0 = 1\n  douBleTHeDifFerEnce([-1, -2, 0]) == -1\n  douBleTHeDifFerEnce([9, -2]) == 81\n  douBleTHeDifFerEnce([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst douBleTHeDifFerEnce = (lst) => {\n  if (!lst) return 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are divisible by 3. Ignore numbers that are negative or not integers.\n  douBleTHeDifFerEnce([1, 3, 2, 0]) == 1 + 0 + 0 + 0 = 1\n  douBleTHeDifFerEnce([-1, -2, 0]) == -1\n  douBleTHeDifFerEnce([9, -2]) == 81\n  douBleTHeDifFerEnce([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst douBleTHeDifFerEnce = (lst) => {\n  if (!lst) return 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0) {\n      sum += lst[i] * lst[i];\n    }", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  comPare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  comPare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst comPare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "comPare", "gc": "<|endoftext|>/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  comPare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  comPare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst comPare = (game, guess) => {\n  let scores = [];\n  let guesses = [];\n  \n  game = game.map(x => parseInt(x));\n  guess = guess.map(x => parseInt(x));\n  \n  scores.sort((a, b) => a - b);\n  guesses.sort((a, b) => a - b);\n  \n  scores.forEach((score, index) => {\n    if (guess[index] === score) {\n      guesses[index] = 0;\n    } else {\n      guesses[index] = Math.abs(score - guess[index]);\n    }\n  });\n  \n  guesses.forEach((guess, index) => {\n    if (guess === 0) {\n      guesses[index] = 0;\n    } else {\n      guesses[index] = Math.abs(guess - game[index]);\n    }\n  });\n  \n  return guesses;\n};\n\n/*\n  Given a game of tic-tac-toe, determine if two players correctly guess the results of their matches.\n  \n  \n  example:\n\n  comPare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  comPare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst comPareTwo = (game, guess) => {\n  let scores = [];\n  let guesses = [];\n  \n  game = game.map(x => parseInt(x));\n  guess = guess.map(x => parseInt(x));\n  \n  scores.sort((a, b) => a - b);\n  guesses.sort((a, b) => a - b);\n  \n  scores.forEach((score, index) => {\n    if (guess[index] === score) {\n      guesses[index] = 0;\n    } else {\n      guesses[index] = Math.abs(score - guess[index]);\n    }\n  });\n  \n  guesses.forEach((guess, index) => {\n    if (guess === 0) {\n      guesses[index] = 0;\n    } else {\n      guesses[index] = Math.abs(guess - game[index]);\n    }\n  });\n  \n  return guesses;\n};\n\n/*\n  Given a game of tic-tac-toe, determine if two players correctly guess the results of their matches.\n  \n  \n  example:\n\n  comPareTwo([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  comPareTwo([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst comPareThree = (game, guess) => {\n  let scores = [];\n  let guesses = [];\n  \n  game = game.map(x => parseInt(x));\n  guess = guess.map(x => parseInt(x));\n  \n  scores.sort((a, b) => a - b);\n  guesses.sort((a, b) => a - b);\n  \n  scores.forEach((score, index) => {\n    if (guess[index] === score) {\n      guesses[index] = 0;\n    } else {\n      guesses[index] = Math.abs(score - guess[index]);\n    }\n  });\n  \n  guesses.forEach((guess, index) => {\n    if (guess === 0) {\n      guesses[index] = 0;\n    } else {\n      guesses[index] = Math.abs(guess - game[index]);\n    }\n  });\n  \n  return guesses;\n};\n\n/*\n  Given a game of tic-tac-toe, determine if two players correctly guess the results of their matches.\n  \n  \n  example:\n\n  comPareThree([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  comPareThree([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst comPareFour = (game, guess) => {\n  let scores = [];\n  let guesses = [];\n  \n  game = game.map(x => parseInt(x));\n  guess = guess.map(x => parseInt(x));\n  \n  scores.sort((a, b) => a - b);\n  guesses.sort((a, b) => a - b);\n  \n  scores.forEach((score, index) => {\n    if (guess[index] === score) {\n      guesses[index] = 0;\n    } else {\n      guesses[index] = Math.abs(score - guess[index]);\n    }\n  });\n  \n  guesses.forEach((guess, index) => {\n    if (guess === 0) {\n      guesses[index] = 0;\n    } else {\n      guesses[index] = Math.abs(guess - game[index]);\n    }\n  });\n  \n  return guesses;\n};\n\n/*\n  Given a game of tic-tac-toe, determine if two players correctly guess the results of their matches.\n  \n  \n  example:\n\n  comPareFour([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  comPareFour([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst comPareFive = (game, guess) => {\n  let scores = [];\n  let guesses = [];\n  \n  game = game.map(x => parseInt(x));\n  guess = guess.map(x => parseInt(x));\n  \n  scores.sort((a, b) => a - b);\n  guesses.sort((a, b) => a - b);\n  \n  scores.forEach((score, index) => {\n    if (guess[index] === score) {\n      guesses[index] = 0;\n    } else {\n      guesses[index] = Math.abs(score - guess[index]);\n    }\n  });\n  \n  guesses.forEach((guess, index) => {\n    if (guess === 0) {\n      guesses[index] = 0;\n    } else {\n      guesses[index] = Math.abs(guess - game[index]);\n    }\n  });\n  \n  return guesses;\n};\n\n/*\n  Given a game of tic-tac-toe, determine if two players correctly guess the results of their matches.\n  \n  \n  example:\n\n  comPareFive([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  comPareFive([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst comPareSix = (game, guess) => {\n  let scores = [];\n  let guesses = [];\n  \n  game = game.map(x => parseInt(x));\n  guess = guess.map(x => parseInt(x));\n  \n  scores.sort((a, b) => a - b);\n  guesses.sort((a, b) => a - b);\n  \n  scores.forEach((score, index) => {\n    if (guess[index] === score) {\n      guesses[index] = 0;\n    } else {\n      guesses[index] = Math.abs(score - guess[index]);\n    }\n  });\n  \n  guesses.forEach((guess, index) => {\n    if (guess === 0) {\n      guesses[index] = 0;\n    } else {\n      guesses[index] = Math.abs(guess - game[index]);\n    }\n  });\n  \n  return guesses;\n};\n\n/*\n  Given a game of tic-ta", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/153", "prompt": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strOngeStExtEnsIon('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strOngeStExtEnsIon = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strOngeStExtEnsIon", "gc": "<|endoftext|>/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strOngeStExtEnsIon('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strOngeStExtEnsIon = (class_name, extensions) => {\n  const strOngeStExtEnsIonRegex = new RegExp(\n    `^${class_name}.${extensions.join('|')}$`\n  );\n  return strOngeStExtEnsIonRegex.test(class_name)\n   ? class_name\n    : null;\n};\n\n/*\n  Given a class name and a list of extensions, return the class name with an\n  extension that is strongest.\n  Example:\n  strOngeStExtEnsIon('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n*/\nconst strOngeStExtEnsIonWithStrength = (class_name, extensions) => {\n  const strOngeStExtEnsIonRegex = new RegExp(\n    `^${class_name}.${extensions.join('|')}$`\n  );\n  const strOngeStExtEnsIonStrengthRegex = new RegExp(\n    `^${class_name}.${extensions.join('|')}.*$`\n  );\n  const strOngeStExtEnsIonStrengthStrengthRegex = new RegExp(\n    `^${class_name}.${extensions.join('|')}.*(${extensions.join('|')})$`\n  );\n  const strOngeStExtEnsIonStrengthStrengthRegex = new RegExp(\n    `^${class_name}.${extensions.join('|')}.*(${extensions.join('|')})$`\n  );\n  const strOngeStExtEnsIonStrengthStrengthRegex = new RegExp(\n    `^${class_name}.${extensions.join('|')}.*(${extensions.join('|')})$`\n  );\n  const strOngeStExtEnsIonStrengthStrengthRegex = new RegExp(\n    `^${class_name}.${extensions.join('|')}.*(${extensions.join('|')})$`\n  );\n  const strOngeStExtEnsIonStrengthStrengthRegex = new RegExp(\n    `^${class_name}.${extensions.join('|')}.*(${extensions.join('|')})$`\n  );\n  const strOngeStExtEnsIonStrengthStrengthRegex = new RegExp(\n    `^${class_name}.${extensions.join('|')}.*(${extensions.join('|')})$`\n  );\n  const strOngeStExtEnsIonStrengthStrengthRegex = new RegExp(\n    `^${class_name}.${extensions.join('|')}.*(${extensions.join('|')})$`\n  );\n  const strOngeStExtEnsIonStrengthStrengthRegex = new RegExp(\n    `^${class_name}.${extensions.join('|')}.*(${extensions.join('|')})$`\n  );\n  const strOngeStExtEnsIonStrengthStrengthRegex = new RegExp(\n    `^${class_name}.${extensions.join('|')}.*(${extensions.join('|')})$`\n  );\n  const strOngeStExtEnsIonStrengthStrengthRegex = new RegExp(\n    `^${class_name}.${extensions.join('|')}.*(${extensions.join('|')})$`\n  );\n  const strOngeStExtEnsIonStrengthStrengthRegex = new RegExp(\n    `^${class_name}.${extensions.join('|')}.*(${extensions.join('|')})$`\n  );\n  const strOngeStExtEnsIonStrengthStrengthRegex = new RegExp(\n    `^${class_name}.${extensions.join('|')}.*(${extensions.join('|')})$`\n  );\n  const strOngeStExtEnsIonStrengthStrengthRegex = new RegExp(\n    `^${class_name}.${extensions.join('|')}.*(${extensions.join('|')})$`\n  );\n  const strOngeStExtEnsIonStrengthStrengthRegex = new RegExp(\n    `^${class_name}.${extensions.join('|')}.*(${extensions.join('|')})$`\n  );\n  const strOngeStExtEnsIonStrengthStrengthRegex = new RegExp(\n    `^${class_name}.${extensions.join('|')}.*(${extensions.join('|')})$`\n  );\n  const strOngeStExtEnsIonStrengthStrengthRegex = new RegExp(\n    `^${class_name}.${extensions.join('|')}.*(${extensions.join('|')})$`\n  );\n  const strOngeStExtEnsIonStrengthStrengthRegex = new RegExp(\n    `^${class_name}.${extensions.join('|')}.*(${extensions.join('|')})$`\n  );\n  const strOngeStExtEnsIonStrengthStrengthRegex = new RegExp(\n    `^${class_name}.${extensions.join('|')}.*(${extensions.join('|')})$`\n  );\n  const strOngeStExtEnsIonStrengthStrengthRegex = new RegExp(\n    `^${class_name}.${extensions.join('|')}.*(${extensions.join('|')})$`\n  );\n  const strOngeStExtEnsIonStrengthStrengthRegex = new RegExp(\n    `^${class_name}.${extensions.join('|')}.*(${extensions.join('|')})$`\n  );\n  const strOngeStExtEnsIonStrengthStrengthRegex = new RegExp(\n    `^${class_name}.${extensions.join('|')}.*(${extensions.join('|')})$`\n  );\n  const strOngeStExtEnsIonStrengthStrengthRegex = new RegExp(\n    `^${class_name}.${extensions.join('|')}.*(${extensions.join('|')})$`\n  );\n  const strOngeStExtEnsIonStrengthStrengthRegex = new RegExp(\n    `^${class_name}.${extensions.join('|')}.*(${extensions.join('|')})$`\n  );\n  const strOngeStExtEnsIonStrengthStrengthRegex = new RegExp(\n    `^${class_name}.${extensions.join('|')}.*(${extensions.join('|')})$`\n  );\n  const strOngeStExtEnsIonStrengthStrengthRegex = new RegExp(\n    `^${class_name}.${extensions.join('|')}.*(${extensions.join('|')})$`\n  );\n  const strOngeStExtEnsIonStrengthStrengthRegex = new RegExp(\n    `^${class_name}.${extensions.join('|')}.*(${extensions.join('|')})$`\n  );\n  const strOngeStExtEnsIonStrengthStrengthRegex = new RegExp(\n    `^${class_name}.${extensions.join('|')}.*(${extensions.join('|')})$`\n  );\n  const strOnge", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/154", "prompt": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycPattErnChEck(\"abcd\",\"abd\") => false\n  cycPattErnChEck(\"hello\",\"ell\") => true\n  cycPattErnChEck(\"whassup\",\"psus\") => false\n  cycPattErnChEck(\"abab\",\"baa\") => true\n  cycPattErnChEck(\"efef\",\"eeff\") => false\n  cycPattErnChEck(\"himenss\",\"simen\") => true\n  */\nconst cycPattErnChEck = (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycPattErnChEck", "gc": "<|endoftext|>/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycPattErnChEck(\"abcd\",\"abd\") => false\n  cycPattErnChEck(\"hello\",\"ell\") => true\n  cycPattErnChEck(\"whassup\",\"psus\") => false\n  cycPattErnChEck(\"abab\",\"baa\") => true\n  cycPattErnChEck(\"efef\",\"eeff\") => false\n  cycPattErnChEck(\"himenss\",\"simen\") => true\n  */\nconst cycPattErnChEck = (a, b) => {\n  let re = new RegExp(b.split('').reverse().join('').replace(/[^a-z]/g, ''), 'i');\n  return re.test(a);\n};\n\nmodule.exports = cycPattErnChEck;\n\n},{}],3:[function(require,module,exports){\nconst cycPattErnChEck = require('./cycPattErnChEck');\n\nconst cycPattErnChEck2 = (a, b) => {\n  let re = new RegExp(b.split('').reverse().join('').replace(/[^a-z]/g, ''), 'i');\n  return re.test(a);\n};\n\nmodule.exports = cycPattErnChEck2;\n\n},{\"./cycPattErnChEck\":2}],4:[function(require,module,exports){\nconst cycPattErnChEck = require('./cycPattErnChEck');\n\nconst cycPattErnChEck3 = (a, b) => {\n  let re = new RegExp(b.split('').reverse().join('').replace(/[^a-z]/g, ''), 'i');\n  return re.test(a);\n};\n\nmodule.exports = cycPattErnChEck3;\n\n},{\"./cycPattErnChEck\":3}],5:[function(require,module,exports){\nconst cycPattErnChEck = require('./cycPattErnChEck');\n\nconst cycPattErnChEck4 = (a, b) => {\n  let re = new RegExp(b.split('').reverse().join('').replace(/[^a-z]/g, ''), 'i');\n  return re.test(a);\n};\n\nmodule.exports = cycPattErnChEck4;\n\n},{\"./cycPattErnChEck\":4}],6:[function(require,module,exports){\nconst cycPattErnChEck = require('./cycPattErnChEck');\n\nconst cycPattErnChEck5 = (a, b) => {\n  let re = new RegExp(b.split('').reverse().join('').replace(/[^a-z]/g, ''), 'i');\n  return re.test(a);\n};\n\nmodule.exports = cycPattErnChEck5;\n\n},{\"./cycPattErnChEck\":5}],7:[function(require,module,exports){\nconst cycPattErnChEck = require('./cycPattErnChEck');\n\nconst cycPattErnChEck6 = (a, b) => {\n  let re = new RegExp(b.split('').reverse().join('').replace(/[^a-z]/g, ''), 'i');\n  return re.test(a);\n};\n\nmodule.exports = cycPattErnChEck6;\n\n},{\"./cycPattErnChEck\":6}],8:[function(require,module,exports){\nconst cycPattErnChEck = require('./cycPattErnChEck');\n\nconst cycPattErnChEck7 = (a, b) => {\n  let re = new RegExp(b.split('').reverse().join('').replace(/[^a-z]/g, ''), 'i');\n  return re.test(a);\n};\n\nmodule.exports = cycPattErnChEck7;\n\n},{\"./cycPattErnChEck\":7}],9:[function(require,module,exports){\nconst cycPattErnChEck = require('./cycPattErnChEck');\n\nconst cycPattErnChEck8 = (a, b) => {\n  let re = new RegExp(b.split('').reverse().join('').replace(/[^a-z]/g, ''), 'i');\n  return re.test(a);\n};\n\nmodule.exports = cycPattErnChEck8;\n\n},{\"./cycPattErnChEck\":8}],10:[function(require,module,exports){\nconst cycPattErnChEck = require('./cycPattErnChEck');\n\nconst cycPattErnChEck9 = (a, b) => {\n  let re = new RegExp(b.split('').reverse().join('').replace(/[^a-z]/g, ''), 'i');\n  return re.test(a);\n};\n\nmodule.exports = cycPattErnChEck9;\n\n},{\"./cycPattErnChEck\":9}],11:[function(require,module,exports){\nconst cycPattErnChEck = require('./cycPattErnChEck');\n\nconst cycPattErnChEck10 = (a, b) => {\n  let re = new RegExp(b.split('').reverse().join('').replace(/[^a-z]/g, ''), 'i');\n  return re.test(a);\n};\n\nmodule.exports = cycPattErnChEck10;\n\n},{\"./cycPattErnChEck\":10}],12:[function(require,module,exports){\nconst cycPattErnChEck = require('./cycPattErnChEck');\n\nconst cycPattErnChEck11 = (a, b) => {\n  let re = new RegExp(b.split('').reverse().join('').replace(/[^a-z]/g, ''), 'i');\n  return re.test(a);\n};\n\nmodule.exports = cycPattErnChEck11;\n\n},{\"./cycPattErnChEck\":11}],13:[function(require,module,exports){\nconst cycPattErnChEck = require('./cycPattErnChEck');\n\nconst cycPattErnChEck12 = (a, b) => {\n  let re = new RegExp(b.split('').reverse().join('').replace(/[^a-z]/g, ''), 'i');\n  return re.test(a);\n};\n\nmodule.exports = cycPattErnChEck12;\n\n},{\"./cycPattErnChEck\":12}],14:[function(require,module,exports){\nconst cycPattErnChEck = require('./cycPattErnChEck');\n\nconst cycPattErnChEck13 = (a, b) => {\n  let re = new RegExp(b.split('').reverse().join('').replace(/[^a-z]/g, ''), 'i');\n  return re.test(a);\n};\n\nmodule.exports = cycPattErnChEck13;\n\n},{\"./cycPattErnChEck\":13}],15:[function(require,module,exports){\nconst cycPattErnChEck = require('./cycPattErnChEck');\n\nconst cycPattErnChEck14 = (a, b) => {\n  let re = new RegExp(b.split('').reverse().join('').replace(/[^a-z]/g, ''), 'i');\n  return re.test(a);\n};\n\nmodule.exports = cycPattErnChEck14;\n\n},{\"./cycPattErnChEck\":14}],16:[function(require,module,exports){\nconst cycPattErnChE", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/155", "prompt": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      eveNOddcount(-12) ==> (1, 1)\n      eveNOddcount(123) ==> (1, 2)\n  */\nconst eveNOddcount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "eveNOddcount", "gc": "<|endoftext|>/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      eveNOddcount(-12) ==> (1, 1)\n      eveNOddcount(123) ==> (1, 2)\n  */\nconst eveNOddcount = (num) => {\n  let even = 0, odd = 0;\n  num = num.toString();\n  for (let i = 0; i < num.length; i++) {\n    if (num[i] % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n};\n\n/*Given a string. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      eveNOddcount(\"12\") ==> (1, 1)\n      eveNOddcount(\"123\") ==> (1, 2)\n  */\nconst eveNOddcount = (str) => {\n  let even = 0, odd = 0;\n  str = str.toString();\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n};\n\n/*Given a string. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      eveNOddcount(\"12\") ==> (1, 1)\n      eveNOddcount(\"123\") ==> (1, 2)\n  */\nconst eveNOddcount = (str) => {\n  let even = 0, odd = 0;\n  str = str.toString();\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n};\n\n/*Given a string. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      eveNOddcount(\"12\") ==> (1, 1)\n      eveNOddcount(\"123\") ==> (1, 2)\n  */\nconst eveNOddcount = (str) => {\n  let even = 0, odd = 0;\n  str = str.toString();\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n};\n\n/*Given a string. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      eveNOddcount(\"12\") ==> (1, 1)\n      eveNOddcount(\"123\") ==> (1, 2)\n  */\nconst eveNOddcount = (str) => {\n  let even = 0, odd = 0;\n  str = str.toString();\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n};\n\n/*Given a string. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      eveNOddcount(\"12\") ==> (1, 1)\n      eveNOddcount(\"123\") ==> (1, 2)\n  */\nconst eveNOddcount = (str) => {\n  let even = 0, odd = 0;\n  str = str.toString();\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n};\n\n/*Given a string. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      eveNOddcount(\"12\") ==> (1, 1)\n      eveNOddcount(\"123\") ==> (1, 2)\n  */\nconst eveNOddcount = (str) => {\n  let even = 0, odd = 0;\n  str = str.toString();\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n};\n\n/*Given a string. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      eveNOddcount(\"12\") ==> (1, 1)\n      eveNOddcount(\"123\") ==> (1, 2)\n  */\nconst eveNOddcount = (str) => {\n  let even = 0, odd = 0;\n  str = str.toString();\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n};\n\n/*Given a string. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      eveNOddcount(\"12\") ==> (1, 1)\n      eveNOddcount(\"123\") ==> (1, 2)\n  */\nconst eveNOddcount = (str) => {\n  let even = 0, odd = 0;\n  str = str.toString();\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n};\n\n/*Given a string. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      eveNOddcount(\"12\") ==> (1, 1)\n      eveNOddcount(\"123\") ==> (1, 2)\n  */\nconst eveNOddcount = (str) => {\n  let even = 0, odd = 0;\n  str = str.toString();\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n};\n\n/*Given a string. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      eveNOddcount(\"12\") ==> (1, 1)\n      eveNOddcount(\"123\") ==> (1, 2)\n  */\nconst eveNOddcount = (str) => {\n  let even = 0, odd = 0;\n  str = str.toString();\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n};\n\n/*Given a string. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      eveNOddcount(\"12\") ==> (1, 1)\n      eveNOddcount(\"123\") ==> (1, 2)\n  */\nconst eveNOddcount = (str) => {\n  let even = 0, odd = 0;\n  str = str.toString();\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n};\n\n/*Given a string. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      eveNOddcount(\"12\") ==> (1, 1)\n      eveNOddcount(\"123\") ==> (1, 2)\n  */\nconst eveNOddcount = (str) => {\n  let even = 0, odd = 0;\n  str = str.toString();\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n};\n\n/*Given a string. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      eveNOddcount(\"12\") ==> (1, 1)\n      eveNOddcount(\"123\") ==> (1, 2)\n  */\nconst eveNOddcount = (str) => {\n  let even = 0, odd = 0;\n  str = str.toString();\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n};\n\n/*Given a string. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      eveNOddcount(\"12\") ==> (1, 1)\n      eveNOddcount(\"123\") ==> (1, 2)\n  */\nconst eveNOddcount = (str) => {\n  let even = 0, odd = 0;\n  str = str.toString();\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> inttoMiNiRomAn(19) == 'xix'\n  >>> inttoMiNiRomAn(152) == 'clii'\n  >>> inttoMiNiRomAn(426) == 'cdxxvi'\n  */\nconst inttoMiNiRomAn = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "inttoMiNiRomAn", "gc": "<|endoftext|>/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> inttoMiNiRomAn(19) == 'xix'\n  >>> inttoMiNiRomAn(152) == 'clii'\n  >>> inttoMiNiRomAn(426) == 'cdxxvi'\n  */\nconst inttoMiNiRomAn = (number) => {\n  let str = number.toString();\n  str = str.replace(/\\D/g, '');\n  str = str.toLowerCase();\n  return str;\n};\n\n/*\n  Given a positive integer, obtain its hexadecimal equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> inttoHexaNiRomAn(19) == '0xxix'\n  >>> inttoHexaNiRomAn(152) == '0xclii'\n  >>> inttoHexaNiRomAn(426) == '0xcdxxvi'\n  */\nconst inttoHexaNiRomAn = (number) => {\n  let str = number.toString();\n  str = str.replace(/\\D/g, '');\n  str = str.toLowerCase();\n  return str;\n};\n\n/*\n  Given a positive integer, obtain its decimal equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> inttoDecNiRomAn(19) == '19'\n  >>> inttoDecNiRomAn(152) == '152'\n  >>> inttoDecNiRomAn(426) == '426'\n  */\nconst inttoDecNiRomAn = (number) => {\n  let str = number.toString();\n  str = str.replace(/\\D/g, '');\n  str = str.toLowerCase();\n  return str;\n};\n\n/*\n  Given a positive integer, obtain its hexadecimal equivalent as a string,\n  and return it in uppercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> inttoHexaDecNiRomAn(19) == '0x19'\n  >>> inttoHexaDecNiRomAn(152) == '0x152'\n  >>> inttoHexaDecNiRomAn(426) == '0x426'\n  */\nconst inttoHexaDecNiRomAn = (number) => {\n  let str = number.toString();\n  str = str.replace(/\\D/g, '');\n  str = str.toUpperCase();\n  return str;\n};\n\n/*\n  Given a positive integer, obtain its decimal equivalent as a string,\n  and return it in uppercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> inttoDecNiRomAn(19) == '19'\n  >>> inttoDecNiRomAn(152) == '152'\n  >>> inttoDecNiRomAn(426) == '426'\n  */\nconst inttoDecNiRomAn = (number) => {\n  let str = number.toString();\n  str = str.replace(/\\D/g, '');\n  str = str.toUpperCase();\n  return str;\n};\n\n/*\n  Given a positive integer, obtain its hexadecimal equivalent as a string,\n  and return it in uppercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> inttoHexaDecNiRomAn(19) == '0x19'\n  >>> inttoHexaDecNiRomAn(152) == '0x152'\n  >>> inttoHexaDecNiRomAn(426) == '0x426'\n  */\nconst inttoHexaDecNiRomAn = (number) => {\n  let str = number.toString();\n  str = str.replace(/\\D/g, '');\n  str = str.toUpperCase();\n  return str;\n};\n\n/*\n  Given a positive integer, obtain its hexadecimal equivalent as a string,\n  and return it in uppercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> inttoHexaDecNiRomAn(19) == '0x19'\n  >>> inttoHexaDecNiRomAn(152) == '0x152'\n  >>> inttoHexaDecNiRomAn(426) == '0x426'\n  */\nconst inttoHexaDecNiRomAn = (number) => {\n  let str = number.toString();\n  str = str.replace(/\\D/g, '');\n  str = str.toUpperCase();\n  return str;\n};\n\n/*\n  Given a positive integer, obtain its hexadecimal equivalent as a string,\n  and return it in uppercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> inttoHexaDecNiRomAn(19) == '0x19'\n  >>> inttoHexaDecNiRomAn(152) == '0x152'\n  >>> inttoHexaDecNiRomAn(426) == '0x426'\n  */\nconst inttoHexaDecNiRomAn = (number) => {\n  let str = number.toString();\n  str = str.replace(/\\D/g, '');\n  str = str.toUpperCase();\n  return str;\n};\n\n/*\n  Given a positive integer, obtain its hexadecimal equivalent as a string,\n  and return it in uppercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> inttoHexaDecNiRomAn(19) == '0x19'\n  >>> inttoHexaDecNiRomAn(152) == '0x152'\n  >>> inttoHexaDecNiRomAn(426) == '0x426'\n  */\nconst inttoHexaDecNiRomAn = (number) => {\n  let str = number.toString();\n  str = str.replace(/\\D/g, '');\n  str = str.toUpperCase();\n  return str;\n};\n\n/*\n  Given a positive integer, obtain its hexadecimal equivalent as a string,\n  and return it in uppercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> inttoHexaDecNiRomAn(19) == '0x19'\n  >>> inttoHexaDecNiRomAn(152) == '0x152'\n  >>> inttoHexaDecNiRomAn(426) == '0x426'\n  */\nconst inttoHexaDecNiRomAn = (number) => {\n  let str = number.toString();\n  str = str.replace(/\\D/g, '');\n  str = str.toUpperCase();\n  return str;\n};\n\n/*\n  Given a positive integer, obtain its hexadecimal equivalent as a string,\n  and return it in uppercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> inttoHexaDecNiRomAn(19) == '0x19'\n  >>> inttoHexaDecNiRomAn(152) == '0x152'\n  >>> inttoHexaDecNiRomAn(426) == '0x426'\n  */\nconst inttoHexaDecNiRomAn = (number) => {\n  let str = number.toString();\n  str = str.replace(/\\D/g, '');\n  str = str.toUpperCase();\n  return str;\n};\n\n/*\n  Given a positive integer, obtain its hexadecimal equivalent as a string,\n  and return it in uppercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> inttoHexaDecNiRomAn(19) == '0x19'\n  >>> inttoHexaDecNiRomAn(152) == '0x152'\n  >>> inttoHexaDecNiRomAn(426) == '0x426'\n  */\nconst inttoHexaDecNiRomAn = (number) => {\n  let str = number.toString();\n  str = str.replace(/\\D/g, '');\n  str = str.toUpperCase();\n  return str;\n};\n\n/*\n  Given a positive integer, obtain its hexadecimal equivalent as a string,\n  and return it in uppercase.\n  Restri", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rigHtAnGleTrIanGle(3, 4, 5) == true\n  rigHtAnGleTrIanGle(1, 2, 3) == false\n  */\nconst rigHtAnGleTrIanGle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rigHtAnGleTrIanGle", "gc": "<|endoftext|>/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rigHtAnGleTrIanGle(3, 4, 5) == true\n  rigHtAnGleTrIanGle(1, 2, 3) == false\n  */\nconst rigHtAnGleTrIanGle = (a, b, c) => {\n  const aLen = a.length;\n  const bLen = b.length;\n  const cLen = c.length;\n  if (aLen!== bLen || aLen!== cLen) {\n    return false;\n  }\n  const a1 = a.slice(0, aLen - 1);\n  const a2 = a.slice(aLen - 1, aLen - 2);\n  const a3 = a.slice(aLen - 2, aLen);\n  const b1 = b.slice(0, bLen - 1);\n  const b2 = b.slice(bLen - 1, bLen - 2);\n  const b3 = b.slice(bLen - 2, bLen);\n  const c1 = c.slice(0, cLen - 1);\n  const c2 = c.slice(cLen - 1, cLen - 2);\n  const c3 = c.slice(cLen - 2, cLen);\n  return a1.length === b1.length && b1.length === c1.length &&\n    a2.length === b2.length && b2.length === c2.length &&\n    a3.length === b3.length && b3.length === c3.length;\n};\n\n/*\n Given the lengths of the three sides of a rectangle. Return true if the three\n  sides form a right-angled rectangle, false otherwise.\n  A right-angled rectangle is a rectangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rigHtAnGleRectIanGle(3, 4, 5) == true\n  rigHtAnGleRectIanGle(1, 2, 3) == false\n  */\nconst rigHtAnGleRectIanGle = (a, b, c) => {\n  const aLen = a.length;\n  const bLen = b.length;\n  const cLen = c.length;\n  if (aLen!== bLen || aLen!== cLen) {\n    return false;\n  }\n  const a1 = a.slice(0, aLen - 1);\n  const a2 = a.slice(aLen - 1, aLen - 2);\n  const a3 = a.slice(aLen - 2, aLen);\n  const b1 = b.slice(0, bLen - 1);\n  const b2 = b.slice(bLen - 1, bLen - 2);\n  const b3 = b.slice(bLen - 2, bLen);\n  const c1 = c.slice(0, cLen - 1);\n  const c2 = c.slice(cLen - 1, cLen - 2);\n  const c3 = c.slice(cLen - 2, cLen);\n  return a1.length === b1.length && b1.length === c1.length &&\n    a2.length === b2.length && b2.length === c2.length &&\n    a3.length === b3.length && b3.length === c3.length;\n};\n\n/*\n Given the lengths of the three sides of a circle. Return true if the three\n  sides form a right-angled circle, false otherwise.\n  A right-angled circle is a circle in which one angle is right angle or\n  90 degree.\n  Example:\n  rigHtAnGleCirIanGle(3, 4, 5) == true\n  rigHtAnGleCirIanGle(1, 2, 3) == false\n  */\nconst rigHtAnGleCirIanGle = (a, b, c) => {\n  const aLen = a.length;\n  const bLen = b.length;\n  const cLen = c.length;\n  if (aLen!== bLen || aLen!== cLen) {\n    return false;\n  }\n  const a1 = a.slice(0, aLen - 1);\n  const a2 = a.slice(aLen - 1, aLen - 2);\n  const a3 = a.slice(aLen - 2, aLen);\n  const b1 = b.slice(0, bLen - 1);\n  const b2 = b.slice(bLen - 1, bLen - 2);\n  const b3 = b.slice(bLen - 2, bLen);\n  const c1 = c.slice(0, cLen - 1);\n  const c2 = c.slice(cLen - 1, cLen - 2);\n  const c3 = c.slice(cLen - 2, cLen);\n  return a1.length === b1.length && b1.length === c1.length &&\n    a2.length === b2.length && b2.length === c2.length &&\n    a3.length === b3.length && b3.length === c3.length;\n};\n\n/*\n Given the lengths of the three sides of a square. Return true if the three\n  sides form a right-angled square, false otherwise.\n  A right-angled square is a square in which one angle is right angle or\n  90 degree.\n  Example:\n  rigHtAnGleSqIanGle(3, 4, 5) == true\n  rigHtAnGleSqIanGle(1, 2, 3) == false\n  */\nconst rigHtAnGleSqIanGle = (a, b, c) => {\n  const aLen = a.length;\n  const bLen = b.length;\n  const cLen = c.length;\n  if (aLen!== bLen || aLen!== cLen) {\n    return false;\n  }\n  const a1 = a.slice(0, aLen - 1);\n  const a2 = a.slice(aLen - 1, aLen - 2);\n  const a3 = a.slice(aLen - 2, aLen);\n  const b1 = b.slice(0, bLen - 1);\n  const b2 = b.slice(bLen - 1, bLen - 2);\n  const b3 = b.slice(bLen - 2, bLen);\n  const c1 = c.slice(0, cLen - 1);\n  const c2 = c.slice(cLen - 1, cLen - 2);\n  const c3 = c.slice(cLen - 2, cLen);\n  return a1.length === b1.length && b1.length === c1.length &&\n    a2.length === b2.length && b2.length === c2.length &&\n    a3.length === b3.length && b3.length === c3.length;\n};\n\n/*\n Given the lengths of the three sides of a pentagon. Return true if the three\n  sides form a right-angled pentagon, false otherwise.\n  A right-angled pentagon is a pentagon in which one angle is right angle or\n  90 degree.\n  Example:\n  rigHtAnGlePentIanGle(3, 4, 5) == true\n  rigHtAnGlePentIanGle(1, 2, 3) == false\n  */\nconst rigHtAnGlePentIanGle = (a, b, c) => {\n  const aLen = a.length;\n  const bLen = b.length;\n  const cLen = c.length;\n  if (aLen!== bLen || aLen!== cLen) {\n    return false;\n  }\n  const a1 = a.slice(0, aLen - 1);\n  const a2 = a.slice(aLen - 1, aLen - 2);\n  const a3 = a.slice(aLen - 2, aLen);\n  const b1 = b.slice(0, bLen - 1);\n  const b2 = b.slice(bLen - 1, bLen - 2);\n  const b3 = b.slice(bLen - 2, bLen);\n  const c1 = c.slice(0, cLen - 1);\n  const c2 = c.slice(cLen - 1, cLen - 2);\n  const c3 = c.slice(cLen - 2, cLen);\n  return a1.length === b1.length && b1.length === c1.length &&\n    a2.length === b2.length && b2.length === c2.length &&\n    a3.length === b3.length && b3.length === c3.length;\n};\n\n/*\n Given the lengths of the three sides of a hexagon. ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  finDMax([\"name\", \"of\", \"string\"]) === \"string\"\n  finDMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  finDMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst finDMax = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "finDMax", "gc": "<|endoftext|>/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  finDMax([\"name\", \"of\", \"string\"]) === \"string\"\n  finDMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  finDMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst finDMax = (words) => {\n  let maxLength = 0;\n  let maxWord = \"\";\n  let maxChar = 0;\n  let maxUniqueChar = 0;\n  let maxUniqueWord = \"\";\n  let maxUniqueWordLength = 0;\n  let maxUniqueWordLengthLength = 0;\n  let maxUniqueWordLengthLengthLength = 0;\n  let maxUniqueWordLengthLengthLengthLength = 0;\n  let maxUniqueWordLengthLengthLengthLengthLength = 0;\n  let maxUniqueWordLengthLengthLengthLengthLengthLength = 0;\n  let maxUniqueWordLengthLengthLengthLengthLengthLengthLength = 0;\n  let maxUniqueWordLengthLengthLengthLengthLengthLengthLengthLengthLength = 0;\n  let maxUniqueWordLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = 0;\n  let maxUniqueWordLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "gc": "<|endoftext|>/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  const carrots = Math.ceil(number / need);\n  const remainingCarrots = Math.ceil(remaining / carrots);\n  const remainingCarrots = Math.ceil(remainingCarrots / carrots);\n  const remainingCarrots = Math.ceil(remainingCarrots / carrots);\n  const remainingCarrots = Math.ceil(remainingCarrots / carrots);\n  const remainingCarrots = Math.ceil(remainingCarrots / carrots);\n  const remainingCarrots = Math.ceil(remainingCarrots / carrots);\n  const remainingCarrots = Math.ceil(remainingCarrots / carrots);\n  const remainingCarrots = Math.ceil(remainingCarrots / carrots);\n  const remainingCarrots = Math.ceil(remainingCarrots / carrots);\n  const remainingCarrots = Math.ceil(remainingCarrots / carrots);\n  const remainingCarrots = Math.ceil(remainingCarrots / carrots);\n  const remainingCarrots = Math.ceil(remainingCarrots / carrots);\n  const remainingCarrots = Math.ceil(remainingCarrots / carrots);\n  const remainingCarrots = Math.ceil(remainingCarrots / carrots);\n  const remainingCarrots = Math.ceil(remainingCarrots / carrots);\n  const remainingCarrots = Math.ceil(remainingCarrots / carrots);\n  const remainingCarrots = Math.ceil(remainingCarrots / carrots);\n  const remainingCarrots = Math.ceil(remainingCarrots / carrots);\n  const remainingCarrots = Math.ceil(remainingCarrots / carrots);\n  const remainingCarrots = Math.ceil(remainingCarrots / carrots);\n  const remainingCarrots = Math.ceil(remainingCarrots / carrots);\n  const remainingCarrots = Math.ceil(remainingCarrots / carrots);\n  const remainingCarrots = Math.ceil(remainingCarrots / carrots);\n  const remainingCarrots = Math.ceil(remainingCarrots / carrots);\n  const remainingCarrots = Math.ceil(remainingCarrots / carrots);\n  const remainingCarrots = Math.ceil(remainingCarrots / carrots);\n  const remainingCarrots = Math.ceil(remainingCarrots / carrots);\n  const remainingCarrots = Math.ceil(remainingCarrots / carrots);\n  const remainingCarrots = Math.ceil(remainingCarrots / carrots);\n  const remainingCarrots = Math.ceil(remainingCarrots / carrots);\n  const remainingCarrots = Math.ceil(remainingCarrots / carrots);\n  const remainingCarrots = Math.ceil(remainingCarrots / carrots);\n  const remainingCarrots = Math.ceil(remainingCarrots / carrots);\n  const remainingCarrots = Math.ceil(remainingCarrots / carrots);\n  const remainingCarrots = Math.ceil(remainingCarrots / carrots);\n  const remainingCarrots = Math.ceil(remainingCarrots / carrots);\n  const remainingCarrots = Math.ceil(remainingCarrots / carrots);\n  const remainingCarrots = Math.ceil(remainingCarrots / carrots);\n  const remainingCarrots = Math.ceil(remainingCarrots / carrots);\n  const remainingCarrots = Math.ceil(remainingCarrots / carrots);\n  const remainingCarrots = Math.ceil(remainingCarrots / carrots);\n  const remainingCarrots = Math.ceil(remainingCarrots / carrots);\n  const remainingCarrots = Math.ceil(remainingCarrots / carrots);\n  const remainingCarrots = Math.ceil(remainingCarrots / carrots);\n  const remainingCarrots = Math.ceil(remainingCarrots / carrots);\n  const remainingCarrots = Math.ceil(remainingCarrots / carrots);\n  const remainingCarrots = Math.ceil(remainingCarrots / carrots);\n  const remainingCarrots = Math.ceil(remainingCarrots / carrots);\n  const remainingCarrots = Math.ceil(remainingCarrots / carrots);\n  const remainingCarrots = Math.ceil(remainingCarrots / carrots);\n  const remainingCarrots = Math.ceil(remainingCarrots / carrots);\n  const remainingCarrots = Math.ceil(remainingCarrots / carrots);\n  const remainingCarrots = Math.ceil(remainingCarrots / carrots);\n  const remainingCarrots = Math.ceil(remainingCarrots / carrots);\n  const remainingCarrots = Math.ceil(remainingCarrots / carrots);\n  const remainingCarrots = Math.ceil(remainingCarrots / carrots);\n  const remainingCarrots = Math.ceil(remainingCarrots / carrots);\n  const remainingCarrots = Math.ceil(remainingCarrots / carrots);\n  const remainingCarrots = Math.ceil(remainingCarrots / carrots);\n  const remainingCarrots = Math.ceil(remainingCarrots / carrots);\n  const remainingCarrots = Math.ceil(remainingCarrots / carrots);\n  const remainingCarrots = Math.ceil(remainingCarrots / carrots);\n  const remainingCarrots = Math.ceil(remainingCarrots / carrots);\n  const remainingCarrots = Math.ceil(remainingCarrots / carrots);\n  const remainingCarrots = Math.ceil(remainingCarrots / carrots);\n  const remainingCarrots = Math.ceil(remainingCarrots / carrots);\n  const remainingCarrots = Math.ceil(remainingCarrots / carrots);\n  const remainingCarrots = Math.ceil(remainingCarrots / carrots);\n  const remainingCarrots = Math.ceil(remainingCarrots / carrots);\n  const remainingCarrots = Math.ceil(remainingCarrots / carrots);\n  const remainingCarrots = Math.ceil(remainingCarrots / carrots);\n  const remainingCarrots = Math.ceil(remainingCarrots / ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> couNtDiStincTChAractErs('xyzXYZ')\n  3\n  >>> couNtDiStincTChAractErs('Jerry')\n  4\n  */\nconst couNtDiStincTChAractErs = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "couNtDiStincTChAractErs", "gc": "<|endoftext|>/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> couNtDiStincTChAractErs('xyzXYZ')\n  3\n  >>> couNtDiStincTChAractErs('Jerry')\n  4\n  */\nconst couNtDiStincTChAractErs = (string) => {\n  let count = 0;\n  let chars = string.split('');\n  for (let i = 0; i < chars.length; i++) {\n    if (chars[i].match(/[\\u0300-\\u036f]/)) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> couNtDiStincTChAractErs('xyzXYZ')\n  3\n  >>> couNtDiStincTChAractErs('Jerry')\n  4\n  */\nconst couNtDiStincTChAsciiErs = (string) => {\n  let count = 0;\n  let chars = string.split('');\n  for (let i = 0; i < chars.length; i++) {\n    if (chars[i].match(/[\\u00C0-\\u00FF]/)) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> couNtDiStincTChAsciiErs('xyzXYZ')\n  3\n  >>> couNtDiStincTChAsciiErs('Jerry')\n  4\n  */\nconst couNtDiStincTChHexadecimalErs = (string) => {\n  let count = 0;\n  let chars = string.split('');\n  for (let i = 0; i < chars.length; i++) {\n    if (chars[i].match(/[\\u00C0-\\u00FF]/)) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> couNtDiStincTChHexadecimalErs('xyzXYZ')\n  3\n  >>> couNtDiStincTChHexadecimalErs('Jerry')\n  4\n  */\nconst couNtDiStincTChDecimalErs = (string) => {\n  let count = 0;\n  let chars = string.split('');\n  for (let i = 0; i < chars.length; i++) {\n    if (chars[i].match(/[\\u00C0-\\u00FF]/)) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> couNtDiStincTChDecimalErs('xyzXYZ')\n  3\n  >>> couNtDiStincTChDecimalErs('Jerry')\n  4\n  */\nconst couNtDiStincTChHexadecimalErsDecimal = (string) => {\n  let count = 0;\n  let chars = string.split('');\n  for (let i = 0; i < chars.length; i++) {\n    if (chars[i].match(/[\\u00C0-\\u00FF]/)) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> couNtDiStincTChHexadecimalErsDecimal('xyzXYZ')\n  3\n  >>> couNtDiStincTChHexadecimalErsDecimal('Jerry')\n  4\n  */\nconst couNtDiStincTChHexadecimalErsDecimalDecimal = (string) => {\n  let count = 0;\n  let chars = string.split('');\n  for (let i = 0; i < chars.length; i++) {\n    if (chars[i].match(/[\\u00C0-\\u00FF]/)) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> couNtDiStincTChHexadecimalErsDecimalDecimal('xyzXYZ')\n  3\n  >>> couNtDiStincTChHexadecimalErsDecimalDecimal('Jerry')\n  4\n  */\nconst couNtDiStincTChHexadecimalErsDecimalHexadecimal = (string) => {\n  let count = 0;\n  let chars = string.split('');\n  for (let i = 0; i < chars.length; i++) {\n    if (chars[i].match(/[\\u00C0-\\u00FF]/)) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> couNtDiStincTChHexadecimalErsDecimalHexadecimal('xyzXYZ')\n  3\n  >>> couNtDiStincTChHexadecimalErsDecimalHexadecimal('Jerry')\n  4\n  */\nconst couNtDiStincTChHexadecimalErsDecimalHexadecimalDecimal = (string) => {\n  let count = 0;\n  let chars = string.split('');\n  for (let i = 0; i < chars.length; i++) {\n    if (chars[i].match(/[\\u00C0-\\u00FF]/)) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> couNtDiStincTChHexadecimalErsDecimalHexadecimalDecimal('xyzXYZ')\n  3\n  >>> couNtDiStincTChHexadecimalErsDecimalHexadecimalDecimal('Jerry')\n  4\n  */\nconst couNtDiStincTChHexadecimalErsDecimalHexadecimalHexadecimal = (string) => {\n  let count = 0;\n  let chars = string.split('');\n  for (let i = 0; i < chars.length; i++) {\n    if (chars[i].match(/[\\u00C0-\\u00FF]/)) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> couNtDiStincTChHexadecimalErsDecimalHexadecimalHexadecimal('xyzXYZ')\n  3\n  >>> couNtDiStincTChHexadecimalErsDecimalHexadecimalHexadecimal('Jerry')\n  4\n  */\nconst couNtDiStincTChHexadecimalErsDecimalHexadecimalHexadecimalDecimal = (string) => {\n  let count = 0;\n  let chars = string.split('');\n  for (let i = 0; i < chars.length; i++) {\n    if (chars[i].match(/[\\u00C0-\\u00FF]/)) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> couNtDiStincTChHexadecimalErsDecimalHexadecimalHexadecimalDecimal('xyzXYZ')\n  3\n  >>> couNtDiStincTChHexadecimalErsDecimalHexadecimalHexadecimalDecimal('Jerry')\n  4\n  */\nconst couNtDiStincTChHexadecimalErsDecimalHexadecimalHexadecimalHexadecimalDecimal = (string) => {\n  let count = 0;\n  let chars = string.split('');\n  for (let i = 0; i < chars.length; i++) {\n    if (chars[i].match(/[\\u00C0-\\u00FF]/)) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> couNt", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doALgebRa = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doALgebRa", "gc": "<|endoftext|>/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doALgebRa = (operator, operand) => {\n  let result = 0;\n  for (let i = 0; i < operator.length; i++) {\n    result = result + operator[i] * operand[i];\n  }\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doALgebRb = (operator, operand) => {\n  let result = 0;\n  for (let i = 0; i < operator.length; i++) {\n    result = result - operator[i] * operand[i];\n  }\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doALgebRc = (operator, operand) => {\n  let result = 0;\n  for (let i = 0; i < operator.length; i++) {\n    result = result * operand[i];\n  }\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doALgebRd = (operator, operand) => {\n  let result = 0;\n  for (let i = 0; i < operator.length; i++) {\n    result = result / operand[i];\n  }\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doALgebRe = (operator, operand) => {\n  let result = 0;\n  for (let i = 0; i < operator.length; i++) {\n    result = result % operand[i];\n  }\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doALgebRf = (operator, operand) => {\n  let result = 0;\n  for (let i = 0; i < operator.length; i++) {\n    result = result / operand[i];\n  }\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doALgebRg = (operator, operand) => {\n  let result = 0;\n  for (let i = 0; i < operator.length; i++) {\n    result = result % operand[i];\n  }\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/161", "prompt": "/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solVe(\"1234\") = \"4321\"\n  solVe(\"ab\") = \"AB\"\n  solVe(\"#a@C\") = \"#A@c\"\n  */\nconst solVe = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solVe", "gc": "<|endoftext|>/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solVe(\"1234\") = \"4321\"\n  solVe(\"ab\") = \"AB\"\n  solVe(\"#a@C\") = \"#A@c\"\n  */\nconst solVe = (s) => {\n  let newStr = \"\";\n  let len = s.length;\n  let i = 0;\n  let j = 0;\n  let temp;\n  let temp2;\n  let temp3;\n  let temp4;\n  let temp5;\n  let temp6;\n  let temp7;\n  let temp8;\n  let temp9;\n  let temp10;\n  let temp11;\n  let temp12;\n  let temp13;\n  let temp14;\n  let temp15;\n  let temp16;\n  let temp17;\n  let temp18;\n  let temp19;\n  let temp20;\n  let temp21;\n  let temp22;\n  let temp23;\n  let temp24;\n  let temp25;\n  let temp26;\n  let temp27;\n  let temp28;\n  let temp29;\n  let temp30;\n  let temp31;\n  let temp32;\n  let temp33;\n  let temp34;\n  let temp35;\n  let temp36;\n  let temp37;\n  let temp38;\n  let temp39;\n  let temp40;\n  let temp41;\n  let temp42;\n  let temp43;\n  let temp44;\n  let temp45;\n  let temp46;\n  let temp47;\n  let temp48;\n  let temp49;\n  let temp50;\n  let temp51;\n  let temp52;\n  let temp53;\n  let temp54;\n  let temp55;\n  let temp56;\n  let temp57;\n  let temp58;\n  let temp59;\n  let temp60;\n  let temp61;\n  let temp62;\n  let temp63;\n  let temp64;\n  let temp65;\n  let temp66;\n  let temp67;\n  let temp68;\n  let temp69;\n  let temp70;\n  let temp71;\n  let temp72;\n  let temp73;\n  let temp74;\n  let temp75;\n  let temp76;\n  let temp77;\n  let temp78;\n  let temp79;\n  let temp80;\n  let temp81;\n  let temp82;\n  let temp83;\n  let temp84;\n  let temp85;\n  let temp86;\n  let temp87;\n  let temp88;\n  let temp89;\n  let temp90;\n  let temp91;\n  let temp92;\n  let temp93;\n  let temp94;\n  let temp95;\n  let temp96;\n  let temp97;\n  let temp98;\n  let temp99;\n  let temp100;\n  let temp101;\n  let temp102;\n  let temp103;\n  let temp104;\n  let temp105;\n  let temp106;\n  let temp107;\n  let temp108;\n  let temp109;\n  let temp110;\n  let temp111;\n  let temp112;\n  let temp113;\n  let temp114;\n  let temp115;\n  let temp116;\n  let temp117;\n  let temp118;\n  let temp119;\n  let temp120;\n  let temp121;\n  let temp122;\n  let temp123;\n  let temp124;\n  let temp125;\n  let temp126;\n  let temp127;\n  let temp128;\n  let temp129;\n  let temp130;\n  let temp131;\n  let temp132;\n  let temp133;\n  let temp134;\n  let temp135;\n  let temp136;\n  let temp137;\n  let temp138;\n  let temp139;\n  let temp140;\n  let temp141;\n  let temp142;\n  let temp143;\n  let temp144;\n  let temp145;\n  let temp146;\n  let temp147;\n  let temp148;\n  let temp149;\n  let temp150;\n  let temp151;\n  let temp152;\n  let temp153;\n  let temp154;\n  let temp155;\n  let temp156;\n  let temp157;\n  let temp158;\n  let temp159;\n  let temp160;\n  let temp161;\n  let temp162;\n  let temp163;\n  let temp164;\n  let temp165;\n  let temp166;\n  let temp167;\n  let temp168;\n  let temp169;\n  let temp170;\n  let temp171;\n  let temp172;\n  let temp173;\n  let temp174;\n  let temp175;\n  let temp176;\n  let temp177;\n  let temp178;\n  let temp179;\n  let temp180;\n  let temp181;\n  let temp182;\n  let temp183;\n  let temp184;\n  let temp185;\n  let temp186;\n  let temp187;\n  let temp188;\n  let temp189;\n  let temp190;\n  let temp191;\n  let temp192;\n  let temp193;\n  let temp194;\n  let temp195;\n  let temp196;\n  let temp197;\n  let temp198;\n  let temp199;\n  let temp200;\n  let temp201;\n  let temp202;\n  let temp203;\n  let temp204;\n  let temp205;\n  let temp206;\n  let temp207;\n  let temp208;\n  let temp209;\n  let temp210;\n  let temp211;\n  let temp212;\n  let temp213;\n  let temp214;\n  let temp215;\n  let temp216;\n  let temp217;\n  let temp218;\n  let temp219;\n  let temp220;\n  let temp221;\n  let temp222;\n  let temp223;\n  let temp224;\n  let temp225;\n  let temp226;\n  let temp227;\n  let temp228;\n  let temp229;\n  let temp230;\n  let temp231;\n  let temp232;\n  let temp233;\n  let temp234;\n  let temp235;\n  let temp236;\n  let temp237;\n  let temp238;\n  let temp239;\n  let temp240;\n  let temp241;\n  let temp242;\n  let temp243;\n  let temp244;\n  let temp245;\n  let temp246;\n  let temp247;\n  let temp248;\n  let temp249;\n  let temp250;\n  let temp251;\n  let temp252;\n  let temp253;\n  let temp254;\n  let temp255;\n  let temp256;\n  let temp257;\n  let temp258;\n  let temp259;\n  let temp260;\n  let temp261;\n  let temp262;\n  let temp263;\n  let temp264;\n  let temp265;\n  let temp266;\n  let temp267;\n  let temp268;\n  let temp269;\n  let temp270;\n  let temp271;\n  let temp272;\n  let temp273;\n  let temp274;\n  let temp275;\n  let temp276;\n  let temp277;\n  let temp278;\n  let temp279;\n  let temp280;\n  let temp281;\n  let temp282;\n  let temp283;\n  let temp284;\n  let temp285;\n  let temp286;\n  let temp287;\n  let temp288;\n  let temp289", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> strIngTOMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst strIngTOMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "strIngTOMd5", "gc": "<|endoftext|>/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> strIngTOMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst strIngTOMd5 = (text) => {\n  if (!text) {\n    return null;\n  }\n  return crypto.createHash('md5').update(text, 'utf8').digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> strIngMD5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst strIngMD5 = (text) => {\n  if (!text) {\n    return null;\n  }\n  return crypto.createHash('md5').update(text, 'utf8').digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> strIngMD5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst strIngMD5 = (text) => {\n  if (!text) {\n    return null;\n  }\n  return crypto.createHash('md5').update(text, 'utf8').digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> strIngMD5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst strIngMD5 = (text) => {\n  if (!text) {\n    return null;\n  }\n  return crypto.createHash('md5').update(text, 'utf8').digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> strIngMD5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst strIngMD5 = (text) => {\n  if (!text) {\n    return null;\n  }\n  return crypto.createHash('md5').update(text, 'utf8').digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> strIngMD5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst strIngMD5 = (text) => {\n  if (!text) {\n    return null;\n  }\n  return crypto.createHash('md5').update(text, 'utf8').digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> strIngMD5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst strIngMD5 = (text) => {\n  if (!text) {\n    return null;\n  }\n  return crypto.createHash('md5').update(text, 'utf8').digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> strIngMD5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst strIngMD5 = (text) => {\n  if (!text) {\n    return null;\n  }\n  return crypto.createHash('md5').update(text, 'utf8').digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> strIngMD5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst strIngMD5 = (text) => {\n  if (!text) {\n    return null;\n  }\n  return crypto.createHash('md5').update(text, 'utf8').digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> strIngMD5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst strIngMD5 = (text) => {\n  if (!text) {\n    return null;\n  }\n  return crypto.createHash('md5').update(text, 'utf8').digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> strIngMD5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst strIngMD5 = (text) => {\n  if (!text) {\n    return null;\n  }\n  return crypto.createHash('md5').update(text, 'utf8').digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> strIngMD5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst strIngMD5 = (text) => {\n  if (!text) {\n    return null;\n  }\n  return crypto.createHash('md5').update(text, 'utf8').digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> strIngMD5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst strIngMD5 = (text) => {\n  if (!text) {\n    return null;\n  }\n  return crypto.createHash('md5').update(text, 'utf8').digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> strIngMD5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst strIngMD5 = (text) => {\n  if (!text) {\n    return null;\n  }\n  return crypto.createHash('md5').update(text, 'utf8').digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> strIngMD5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst strIngMD5 = (text) => {\n  if (!text) {\n    return null;\n  }\n  return crypto.createHash('md5').update(text, 'utf8').digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> strIngMD", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  genEratEInteGerS(2, 8) => [2, 4, 6, 8]\n  genEratEInteGerS(8, 2) => [2, 4, 6, 8]\n  genEratEInteGerS(10, 14) => []\n  */\nconst genEratEInteGerS = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "genEratEInteGerS", "gc": "<|endoftext|>/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  genEratEInteGerS(2, 8) => [2, 4, 6, 8]\n  genEratEInteGerS(8, 2) => [2, 4, 6, 8]\n  genEratEInteGerS(10, 14) => []\n  */\nconst genEratEInteGerS = (a, b) => {\n  const result = [];\n  let i = a;\n  let j = b;\n  while (i!== j) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n    i += 1;\n    j -= 1;\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, return the number of ways to divide n into two parts\n  such that each part is divisible by both parts. For example, for n = 8, the ways\n  to divide 8 into two parts are as follows:\n\n  8 / 2 = 2\n  8 / 3 = 1\n  8 / 4 = 2\n  8 / 5 = 4\n  8 / 6 = 1\n  8 / 7 = 2\n  8 / 8 = 3\n  8 / 9 = 1\n  8 / 10 = 2\n  8 / 11 = 4\n  8 / 12 = 1\n  8 / 13 = 2\n  8 / 14 = 4\n  8 / 15 = 1\n  8 / 16 = 2\n  8 / 17 = 4\n  8 / 18 = 1\n  8 / 19 = 2\n  8 / 20 = 4\n  8 / 21 = 1\n  8 / 22 = 2\n  8 / 23 = 4\n  8 / 24 = 1\n  8 / 25 = 2\n  8 / 26 = 4\n  8 / 27 = 1\n  8 / 28 = 2\n  8 / 29 = 4\n  8 / 30 = 1\n  8 / 31 = 2\n  8 / 32 = 4\n  8 / 33 = 1\n  8 / 34 = 2\n  8 / 35 = 4\n  8 / 36 = 1\n  8 / 37 = 2\n  8 / 38 = 4\n  8 / 39 = 1\n  8 / 40 = 2\n  8 / 41 = 4\n  8 / 42 = 1\n  8 / 43 = 2\n  8 / 44 = 4\n  8 / 45 = 1\n  8 / 46 = 2\n  8 / 47 = 4\n  8 / 48 = 1\n  8 / 49 = 2\n  8 / 50 = 4\n  8 / 51 = 1\n  8 / 52 = 2\n  8 / 53 = 4\n  8 / 54 = 1\n  8 / 55 = 2\n  8 / 56 = 4\n  8 / 57 = 1\n  8 / 58 = 2\n  8 / 59 = 4\n  8 / 60 = 1\n  8 / 61 = 2\n  8 / 62 = 4\n  8 / 63 = 1\n  8 / 64 = 2\n  8 / 65 = 4\n  8 / 66 = 1\n  8 / 67 = 2\n  8 / 68 = 4\n  8 / 69 = 1\n  8 / 70 = 2\n  8 / 71 = 4\n  8 / 72 = 1\n  8 / 73 = 2\n  8 / 74 = 4\n  8 / 75 = 1\n  8 / 76 = 2\n  8 / 77 = 4\n  8 / 78 = 1\n  8 / 79 = 2\n  8 / 80 = 4\n  8 / 81 = 1\n  8 / 82 = 2\n  8 / 83 = 4\n  8 / 84 = 1\n  8 / 85 = 2\n  8 / 86 = 4\n  8 / 87 = 1\n  8 / 88 = 2\n  8 / 89 = 4\n  8 / 90 = 1\n  8 / 91 = 2\n  8 / 92 = 4\n  8 / 93 = 1\n  8 / 94 = 2\n  8 / 95 = 4\n  8 / 96 = 1\n  8 / 97 = 2\n  8 / 98 = 4\n  8 / 99 = 1\n  8 / 100 = 2\n  8 / 101 = 4\n  8 / 102 = 1\n  8 / 103 = 2\n  8 / 104 = 4\n  8 / 105 = 1\n  8 / 106 = 2\n  8 / 107 = 4\n  8 / 108 = 1\n  8 / 109 = 2\n  8 / 110 = 4\n  8 / 111 = 1\n  8 / 112 = 2\n  8 / 113 = 4\n  8 / 114 = 1\n  8 / 115 = 2\n  8 / 116 = 4\n  8 / 117 = 1\n  8 / 118 = 2\n  8 / 119 = 4\n  8 / 120 = 1\n  8 / 121 = 2\n  8 / 122 = 4\n  8 / 123 = 1\n  8 / 124 = 2\n  8 / 125 = 4\n  8 / 126 = 1\n  8 / 127 = 2\n  8 / 128 = 4\n  8 / 129 = 1\n  8 / 130 = 2\n  8 / 131 = 4\n  8 / 132 = 1\n  8 / 133 = 2\n  8 / 134 = 4\n  8 / 135 = 1\n  8 / 136 = 2\n  8 / 137 = 4\n  8 / 138 = 1\n  8 / 139 = 2\n  8 / 140 = 4\n  8 / 141 = 1\n  8 / 142 = 2\n  8 / 143 = 4\n  8 / 144 = 1\n  8 / 145 = 2\n  8 / 146 = 4\n  8 / 147 = 1\n  8 / 148 = 2\n  8 / 149 = 4\n  8 / 150 = 1\n  8 / 151 = 2\n  8 / 152 = 4\n  8 / 153 = 1\n  8 / 154 = 2\n  8 / 155 = 4\n  8 / 156 = 1\n  8 / 157 = 2\n  8 / 158 = 4\n  8 / 159 = 1\n  8 / 160 = 2\n  8 / 161 = 4\n  8 / 162 = 1\n  8 / 163 = 2\n  8 / 164 = 4\n  8 / 165 = 1\n  8 / 166 = 2\n  8 / 167 = 4\n  8 / 168 = 1\n  8 / 169 = 2\n  8 / 170 = 4\n  8 / 171 = 1\n  8 / 172 = 2\n  8 / 173 = 4\n  8 / 174 = 1\n  8 / 175 = 2\n  8 / 176 = 4\n  8 / 177 = 1\n  8 / 178 = 2\n  8 / 179 = 4\n  8 / 180 = 1\n  8 / 181 = 2\n  8 / 182 = 4\n  8 / 183 = 1\n  8 / 184 = 2\n  8 / 185 = 4\n  8 / 186 = 1\n  8 / 187 = 2\n  8 / 188 = 4\n  8 / 189 = 1\n  8 / 190 = 2\n  8 / 191 = 4\n  8 / 192 = 1\n  8 / 193 = 2\n  8 / 194 = 4\n  8 / 195 = 1\n  8 / 196 = 2\n  8 / 197 = 4\n  8 / 198 = 1\n  8 / 199 = 2\n  8 / 200 = 4\n  8 / 201 = 1\n  8 / 202 = 2\n  8 / 203 = 4\n  8 / 204 = 1\n  8 / 205 = 2\n  8 / 206 = 4\n  8 / 207 = 1\n  8 / 208 = 2\n  8 / 209 = 4\n  8 / 210 = 1\n  8 / 211 = 2\n  8 / 212 = 4\n  8 / 213 = 1\n  8 / 214 = 2", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/17", "prompt": "/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parSeMuSic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parSeMuSic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parSeMuSic", "gc": "<|endoftext|>/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parSeMuSic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parSeMuSic = (music_string) => {\n  const notes_string = music_string.split('|');\n  const notes_array = [];\n  for (let i = 0; i < notes_string.length; i++) {\n    const note = notes_string[i].split(' ');\n    const notes_array[i] = note[0];\n  }\n  return notes_array;\n};\n\n/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parSeMuSic('o o|.| o| o|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parSeMuSic2 = (music_string) => {\n  const notes_string = music_string.split('|');\n  const notes_array = [];\n  for (let i = 0; i < notes_string.length; i++) {\n    const note = notes_string[i].split(' ');\n    const notes_array[i] = note[0];\n  }\n  return notes_array;\n};\n\n/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parSeMuSic('o o|.| o| o|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parSeMuSic3 = (music_string) => {\n  const notes_string = music_string.split('|');\n  const notes_array = [];\n  for (let i = 0; i < notes_string.length; i++) {\n    const note = notes_string[i].split(' ');\n    const notes_array[i] = note[0];\n  }\n  return notes_array;\n};\n\n/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parSeMuSic('o o|.| o| o|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parSeMuSic4 = (music_string) => {\n  const notes_string = music_string.split('|');\n  const notes_array = [];\n  for (let i = 0; i < notes_string.length; i++) {\n    const note = notes_string[i].split(' ');\n    const notes_array[i] = note[0];\n  }\n  return notes_array;\n};\n\n/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parSeMuSic('o o|.| o| o|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parSeMuSic5 = (music_string) => {\n  const notes_string = music_string.split('|');\n  const notes_array = [];\n  for (let i = 0; i < notes_string.length; i++) {\n    const note = notes_string[i].split(' ');\n    const notes_array[i] = note[0];\n  }\n  return notes_array;\n};\n\n/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parSeMuSic('o o|.| o| o|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parSeMuSic6 = (music_string) => {\n  const notes_string = music_string.split('|');\n  const notes_array = [];\n  for (let i = 0; i < notes_string.length; i++) {\n    const note = notes_string[i].split(' ');\n    const notes_array[i] = note[0];\n  }\n  return notes_array;\n};\n\n/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parSeMuSic('o o|.| o| o|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parSeMuSic7 = (music_string) => {\n  const notes_string = music_string.split('|');\n  const notes_array = [];\n  for (let i = 0; i < notes_string.length; i++) {\n    const note = notes_string[i].split(' ');\n    const notes_array[i] = note[0];\n  }\n  return notes_array;\n};\n\n/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parSeMuSic('o o|.| o| o|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parSeMuSic8 = (music_string) => {\n  const notes_string = music_string.split('|');\n  const notes_array = [];\n  for (let i = 0; i < notes_string.length; i++) {\n    const note = notes_string[i].split(' ');\n    const notes_array[i] = note[0];\n  }\n  return notes_array;\n};\n\n/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/18", "prompt": "/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howmanytimes('', 'a')\n  0\n  >>> howmanytimes('aaa', 'a')\n  3\n  >>> howmanytimes('aaaa', 'aa')\n  3\n  */\nconst howmanytimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howmanytimes", "gc": "<|endoftext|>/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howmanytimes('', 'a')\n  0\n  >>> howmanytimes('aaa', 'a')\n  3\n  >>> howmanytimes('aaaa', 'aa')\n  3\n  */\nconst howmanytimes = (string, substring) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = string.length;\n  let m = substring? substring : string.length;\n  while (i < l && j < m) {\n    if (string.charAt(i) === substring.charAt(j)) {\n      count++;\n      i++;\n      j++;\n    } else if (string.charAt(i)!== substring.charAt(j)) {\n      count++;\n      i++;\n      j++;\n    } else if (string.charAt(i) === substring.charAt(j)) {\n      count++;\n      i++;\n      j++;\n    } else if (string.charAt(i)!== substring.charAt(j)) {\n      count++;\n      i++;\n      j++;\n    } else if (string.charAt(i) === substring.charAt(j)) {\n      count++;\n      i++;\n      j++;\n    } else if (string.charAt(i)!== substring.charAt(j)) {\n      count++;\n      i++;\n      j++;\n    } else if (string.charAt(i) === substring.charAt(j)) {\n      count++;\n      i++;\n      j++;\n    } else if (string.charAt(i)!== substring.charAt(j)) {\n      count++;\n      i++;\n      j++;\n    } else if (string.charAt(i) === substring.charAt(j)) {\n      count++;\n      i++;\n      j++;\n    } else if (string.charAt(i)!== substring.charAt(j)) {\n      count++;\n      i++;\n      j++;\n    } else if (string.charAt(i) === substring.charAt(j)) {\n      count++;\n      i++;\n      j++;\n    } else if (string.charAt(i)!== substring.charAt(j)) {\n      count++;\n      i++;\n      j++;\n    } else if (string.charAt(i) === substring.charAt(j)) {\n      count++;\n      i++;\n      j++;\n    } else if (string.charAt(i)!== substring.charAt(j)) {\n      count++;\n      i++;\n      j++;\n    } else if (string.charAt(i) === substring.charAt(j)) {\n      count++;\n      i++;\n      j++;\n    } else if (string.charAt(i)!== substring.charAt(j)) {\n      count++;\n      i++;\n      j++;\n    } else if (string.charAt(i) === substring.charAt(j)) {\n      count++;\n      i++;\n      j++;\n    } else if (string.charAt(i)!== substring.charAt(j)) {\n      count++;\n      i++;\n      j++;\n    } else if (string.charAt(i) === substring.charAt(j)) {\n      count++;\n      i++;\n      j++;\n    } else if (string.charAt(i)!== substring.charAt(j)) {\n      count++;\n      i++;\n      j++;\n    } else if (string.charAt(i) === substring.charAt(j)) {\n      count++;\n      i++;\n      j++;\n    } else if (string.charAt(i)!== substring.charAt(j)) {\n      count++;\n      i++;\n      j++;\n    } else if (string.charAt(i) === substring.charAt(j)) {\n      count++;\n      i++;\n      j++;\n    } else if (string.charAt(i)!== substring.charAt(j)) {\n      count++;\n      i++;\n      j++;\n    } else if (string.charAt(i) === substring.charAt(j)) {\n      count++;\n      i++;\n      j++;\n    } else if (string.charAt(i)!== substring.charAt(j)) {\n      count++;\n      i++;\n      j++;\n    } else if (string.charAt(i) === substring.charAt(j)) {\n      count++;\n      i++;\n      j++;\n    } else if (string.charAt(i)!== substring.charAt(j)) {\n      count++;\n      i++;\n      j++;\n    } else if (string.charAt(i) === substring.charAt(j)) {\n      count++;\n      i++;\n      j++;\n    } else if (string.charAt(i)!== substring.charAt(j)) {\n      count++;\n      i++;\n      j++;\n    } else if (string.charAt(i) === substring.charAt(j)) {\n      count++;\n      i++;\n      j++;\n    } else if (string.charAt(i)!== substring.charAt(j)) {\n      count++;\n      i++;\n      j++;\n    } else if (string.charAt(i) === substring.charAt(j)) {\n      count++;\n      i++;\n      j++;\n    } else if (string.charAt(i)!== substring.charAt(j)) {\n      count++;\n      i++;\n      j++;\n    } else if (string.charAt(i) === substring.charAt(j)) {\n      count++;\n      i++;\n      j++;\n    } else if (string.charAt(i)!== substring.charAt(j)) {\n      count++;\n      i++;\n      j++;\n    } else if (string.charAt(i) === substring.charAt(j)) {\n      count++;\n      i++;\n      j++;\n    } else if (string.charAt(i)!== substring.charAt(j)) {\n      count++;\n      i++;\n      j++;\n    } else if (string.charAt(i) === substring.charAt(j)) {\n      count++;\n      i++;\n      j++;\n    } else if (string.charAt(i)!== substring.charAt(j)) {\n      count++;\n      i++;\n      j++;\n    } else if (string.charAt(i) === substring.charAt(j)) {\n      count++;\n      i++;\n      j++;\n    } else if (string.charAt(i)!== substring.charAt(j)) {\n      count++;\n      i++;\n      j++;\n    } else if (string.charAt(i) === substring.charAt(j)) {\n      count++;\n      i++;\n      j++;\n    } else if (string.charAt(i)!== substring.charAt(j)) {\n      count++;\n      i++;\n      j++;\n    } else if (string.charAt(i) === substring.charAt(j)) {\n      count++;\n      i++;\n      j++;\n    } else if (string.charAt(i)!== substring.charAt(j)) {\n      count++;\n      i++;\n      j++;\n    } else if (string.charAt(i) === substring.charAt(j)) {\n      count++;\n      i++;\n      j++;\n    } else if (string.charAt(i)!== substring.charAt(j)) {\n      count++;\n      i++;\n      j++;\n    } else if (string.charAt(i) === substring.charAt(j)) {\n      count++;\n      i++;\n      j++;\n    } else if (string.charAt(i)!== substring.charAt(j)) {\n      count++;\n      i++;\n      j++;\n    } else if (string.charAt(i) === substring.charAt(j)) {\n      count++;\n      i++;\n      j++;\n    } else if (string.charAt(i)!== substring.charAt(j)) {\n      count++;\n      i++;\n      j++;\n    } else if (string.charAt(i) === substring.charAt(j)) {\n      count++;\n      i++;\n      j++;\n    } else if (string.charAt(i)!== substring.charAt(j)) {\n      count++;\n      i++;\n      j++;\n    } else if (string.charAt(i) === substring.charAt(j)) {\n      count++;\n      i++;\n      j++;\n    } else if (string.charAt(i)!== substring.charAt(j)) {\n      count++;\n      i++;\n      j++;\n    } else if (string.charAt(i) === substring.charAt(j)) {\n      count++;\n      i++;\n      j++;\n    } else if (string.charAt(i)!== substring.charAt(j)) {\n      count++;\n      i++;\n      j++;\n    } else if (string.charAt(i) === substring.charAt(j)) {\n      count++;\n      i++;\n      j++;\n    } else if (string.charAt(i)!== substring.charAt(j)) {\n      count++;\n      i++;\n      j++;\n    } else if (string.charAt(i) === substring.charAt(j)) {\n      count++;\n      i++;\n      j++;\n    } else if (string.charAt(i)!== substring.charAt(j)) {\n      count++;\n      i++;\n      j++;\n    } else if (string.charAt(i) === ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/19", "prompt": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sorTNumBers('three one five')\n  'one three five'\n  */\nconst sorTNumBers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sorTNumBers", "gc": "<|endoftext|>/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sorTNumBers('three one five')\n  'one three five'\n  */\nconst sorTNumBers = (numbers) => {\n  let nums = numbers.split(' ');\n  let sortedNums = [];\n  let num;\n  let i;\n  let j;\n  let numStr;\n  let numStr2;\n  let numStr3;\n  let numStr4;\n  let numStr5;\n  let numStr6;\n  let numStr7;\n  let numStr8;\n  let numStr9;\n  let numStr10;\n  let numStr11;\n  let numStr12;\n  let numStr13;\n  let numStr14;\n  let numStr15;\n  let numStr16;\n  let numStr17;\n  let numStr18;\n  let numStr19;\n  let numStr20;\n  let numStr21;\n  let numStr22;\n  let numStr23;\n  let numStr24;\n  let numStr25;\n  let numStr26;\n  let numStr27;\n  let numStr28;\n  let numStr29;\n  let numStr30;\n  let numStr31;\n  let numStr32;\n  let numStr33;\n  let numStr34;\n  let numStr35;\n  let numStr36;\n  let numStr37;\n  let numStr38;\n  let numStr39;\n  let numStr40;\n  let numStr41;\n  let numStr42;\n  let numStr43;\n  let numStr44;\n  let numStr45;\n  let numStr46;\n  let numStr47;\n  let numStr48;\n  let numStr49;\n  let numStr50;\n  let numStr51;\n  let numStr52;\n  let numStr53;\n  let numStr54;\n  let numStr55;\n  let numStr56;\n  let numStr57;\n  let numStr58;\n  let numStr59;\n  let numStr60;\n  let numStr61;\n  let numStr62;\n  let numStr63;\n  let numStr64;\n  let numStr65;\n  let numStr66;\n  let numStr67;\n  let numStr68;\n  let numStr69;\n  let numStr70;\n  let numStr71;\n  let numStr72;\n  let numStr73;\n  let numStr74;\n  let numStr75;\n  let numStr76;\n  let numStr77;\n  let numStr78;\n  let numStr79;\n  let numStr80;\n  let numStr81;\n  let numStr82;\n  let numStr83;\n  let numStr84;\n  let numStr85;\n  let numStr86;\n  let numStr87;\n  let numStr88;\n  let numStr89;\n  let numStr90;\n  let numStr91;\n  let numStr92;\n  let numStr93;\n  let numStr94;\n  let numStr95;\n  let numStr96;\n  let numStr97;\n  let numStr98;\n  let numStr99;\n  let numStr100;\n  let numStr101;\n  let numStr102;\n  let numStr103;\n  let numStr104;\n  let numStr105;\n  let numStr106;\n  let numStr107;\n  let numStr108;\n  let numStr109;\n  let numStr110;\n  let numStr111;\n  let numStr112;\n  let numStr113;\n  let numStr114;\n  let numStr115;\n  let numStr116;\n  let numStr117;\n  let numStr118;\n  let numStr119;\n  let numStr120;\n  let numStr121;\n  let numStr122;\n  let numStr123;\n  let numStr124;\n  let numStr125;\n  let numStr126;\n  let numStr127;\n  let numStr128;\n  let numStr129;\n  let numStr130;\n  let numStr131;\n  let numStr132;\n  let numStr133;\n  let numStr134;\n  let numStr135;\n  let numStr136;\n  let numStr137;\n  let numStr138;\n  let numStr139;\n  let numStr140;\n  let numStr141;\n  let numStr142;\n  let numStr143;\n  let numStr144;\n  let numStr145;\n  let numStr146;\n  let numStr147;\n  let numStr148;\n  let numStr149;\n  let numStr150;\n  let numStr151;\n  let numStr152;\n  let numStr153;\n  let numStr154;\n  let numStr155;\n  let numStr156;\n  let numStr157;\n  let numStr158;\n  let numStr159;\n  let numStr160;\n  let numStr161;\n  let numStr162;\n  let numStr163;\n  let numStr164;\n  let numStr165;\n  let numStr166;\n  let numStr167;\n  let numStr168;\n  let numStr169;\n  let numStr170;\n  let numStr171;\n  let numStr172;\n  let numStr173;\n  let numStr174;\n  let numStr175;\n  let numStr176;\n  let numStr177;\n  let numStr178;\n  let numStr179;\n  let numStr180;\n  let numStr181;\n  let numStr182;\n  let numStr183;\n  let numStr184;\n  let numStr185;\n  let numStr186;\n  let numStr187;\n  let numStr188;\n  let numStr189;\n  let numStr190;\n  let numStr191;\n  let numStr192;\n  let numStr193;\n  let numStr194;\n  let numStr195;\n  let numStr196;\n  let numStr197;\n  let numStr198;\n  let numStr199;\n  let numStr200;\n  let numStr201;\n  let numStr202;\n  let numStr203;\n  let numStr204;\n  let numStr205;\n  let numStr206;\n  let numStr207;\n  let numStr208;\n  let numStr209;\n  let numStr210;\n  let numStr211;\n  let numStr212;\n  let numStr213;\n  let numStr214;\n  let numStr215;\n  let numStr216;\n  let numStr217;\n  let numStr218;\n  let numStr219;\n  let numStr220;\n  let numStr221;\n  let numStr222;\n  let numStr223;\n  let numStr224;\n  let numStr225;\n  let numStr226;\n  let numStr227;\n  let numStr228;\n  let numStr229;\n  let numStr230;\n  let numStr231;\n  let numStr232;\n  let numStr233;\n  let numStr234;\n  let numStr235;\n  let numStr236;\n  let numStr237;\n  let numStr238;\n  let numStr239;\n  let numStr240;\n  let num", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/2", "prompt": "/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truNcatENumbEr(3.5)\n  0.5\n  */\nconst truNcatENumbEr = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truNcatENumbEr", "gc": "<|endoftext|>/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truNcatENumbEr(3.5)\n  0.5\n  */\nconst truNcatENumbEr = (number) => {\n  let decimals = Math.floor(Math.log10(number));\n  let remainder = number % 1;\n  let integerPart = number / 1;\n  let decimalPart = remainder * Math.pow(10, decimals);\n  return decimalPart + integerPart;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truNcatENumbEr(3.5)\n  3\n  */\nconst truNcatENumbI = (number) => {\n  let integerPart = Math.floor(number / 1);\n  let remainder = number % 1;\n  let decimalPart = remainder * Math.pow(10, decimals);\n  return integerPart + decimalPart;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truNcatENumbEr(3.5)\n  0.5\n  */\nconst truNcatENumbD = (number) => {\n  let decimals = Math.floor(Math.log10(number));\n  let remainder = number % 1;\n  let integerPart = number / 1;\n  let decimalPart = remainder * Math.pow(10, decimals);\n  return decimalPart + integerPart;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truNcatENumbEr(3.5)\n  3\n  */\nconst truNcatENumbI = (number) => {\n  let integerPart = Math.floor(number / 1);\n  let remainder = number % 1;\n  let decimalPart = remainder * Math.pow(10, decimals);\n  return integerPart + decimalPart;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truNcatENumbEr(3.5)\n  0.5\n  */\nconst truNcatENumbD = (number) => {\n  let decimals = Math.floor(Math.log10(number));\n  let remainder = number % 1;\n  let integerPart = number / 1;\n  let decimalPart = remainder * Math.pow(10, decimals);\n  return decimalPart + integerPart;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truNcatENumbEr(3.5)\n  3\n  */\nconst truNcatENumbI = (number) => {\n  let integerPart = Math.floor(number / 1);\n  let remainder = number % 1;\n  let decimalPart = remainder * Math.pow(10, decimals);\n  return integerPart + decimalPart;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truNcatENumbEr(3.5)\n  0.5\n  */\nconst truNcatENumbD = (number) => {\n  let decimals = Math.floor(Math.log10(number));\n  let remainder = number % 1;\n  let integerPart = number / 1;\n  let decimalPart = remainder * Math.pow(10, decimals);\n  return decimalPart + integerPart;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truNcatENumbEr(3.5)\n  3\n  */\nconst truNcatENumbI = (number) => {\n  let integerPart = Math.floor(number / 1);\n  let remainder = number % 1;\n  let decimalPart = remainder * Math.pow(10, decimals);\n  return integerPart + decimalPart;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truNcatENumbEr(3.5)\n  0.5\n  */\nconst truNcatENumbD = (number) => {\n  let decimals = Math.floor(Math.log10(number));\n  let remainder = number % 1;\n  let integerPart = number / 1;\n  let decimalPart = remainder * Math.pow(10, decimals);\n  return decimalPart + integerPart;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truNcatENumbEr(3.5)\n  3\n  */\nconst truNcatENumbI = (number) => {\n  let integerPart = Math.floor(number / 1);\n  let remainder = number % 1;\n  let decimalPart = remainder * Math.pow(10, decimals);\n  return integerPart + decimalPart;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truNcatENumbEr(3.5)\n  0.5\n  */\nconst truNcatENumbD = (number) => {\n  let decimals = Math.floor(Math.log10(number));\n  let remainder = number % 1;\n  let integerPart = number / 1;\n  let decimalPart = remainder * Math.pow(10, decimals);\n  return decimalPart + integerPart;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truNcatENumbEr(3.5)\n  3\n  */\nconst truNcatENumbI = (number) => {\n  let integerPart = Math.floor(number / 1);\n  let remainder = number % 1;\n  let decimalPart = remainder * Math.pow(10, decimals);\n  return integerPart + decimalPart;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truNcatENumbEr(3.5)\n  0.5\n  */\nconst truNcatENumbD = (number) => {\n  let decimals = Math.floor(Math.log10(number));\n  let remainder = number % 1;\n  let integerPart = number / 1;\n  let decimalPart = remainder * Math.pow(10, decimals);\n  return decimalPart + integerPart;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truNcatENumbEr(3.5)\n  3\n  */\nconst truNcatENumbI = (number) => {", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/20", "prompt": "/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> finDCloSestELemEnts([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> finDCloSestELemEnts([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst finDCloSestELemEnts = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "finDCloSestELemEnts", "gc": "<|endoftext|>/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> finDCloSestELemEnts([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> finDCloSestELemEnts([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst finDCloSestELemEnts = (numbers) => {\n  const [min1, max1] = findClosestElmEnts(numbers);\n  const [min2, max2] = findClosestElmEnts(numbers);\n  return [min1, max1]\n   .concat(findClosestElmEnts(numbers))\n   .concat([max2, min2]);\n};\n\n/**\n  Given a list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> finDCloSestELemEnts([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> finDCloSestELemEnts([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElmEnts = (numbers) => {\n  const [min1, max1] = findClosestElmEnts(numbers);\n  const [min2, max2] = findClosestElmEnts(numbers);\n  return [min1, max1]\n   .concat(findClosestElmEnts(numbers))\n   .concat([max2, min2]);\n};\n\n/**\n  Given a list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> findClosestElmEnts([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElmEnts([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElmEnts = (numbers) => {\n  const [min1, max1] = findClosestElmEnts(numbers);\n  const [min2, max2] = findClosestElmEnts(numbers);\n  return [min1, max1]\n   .concat(findClosestElmEnts(numbers))\n   .concat([max2, min2]);\n};\n\n/**\n  Given a list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> findClosestElmEnts([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElmEnts([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElmEnts = (numbers) => {\n  const [min1, max1] = findClosestElmEnts(numbers);\n  const [min2, max2] = findClosestElmEnts(numbers);\n  return [min1, max1]\n   .concat(findClosestElmEnts(numbers))\n   .concat([max2, min2]);\n};\n\n/**\n  Given a list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> findClosestElmEnts([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElmEnts([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElmEnts = (numbers) => {\n  const [min1, max1] = findClosestElmEnts(numbers);\n  const [min2, max2] = findClosestElmEnts(numbers);\n  return [min1, max1]\n   .concat(findClosestElmEnts(numbers))\n   .concat([max2, min2]);\n};\n\n/**\n  Given a list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> findClosestElmEnts([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElmEnts([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElmEnts = (numbers) => {\n  const [min1, max1] = findClosestElmEnts(numbers);\n  const [min2, max2] = findClosestElmEnts(numbers);\n  return [min1, max1]\n   .concat(findClosestElmEnts(numbers))\n   .concat([max2, min2]);\n};\n\n/**\n  Given a list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> findClosestElmEnts([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElmEnts([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElmEnts = (numbers) => {\n  const [min1, max1] = findClosestElmEnts(numbers);\n  const [min2, max2] = findClosestElmEnts(numbers);\n  return [min1, max1]\n   .concat(findClosestElmEnts(numbers))\n   .concat([max2, min2]);\n};\n\n/**\n  Given a list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> findClosestElmEnts([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElmEnts([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElmEnts = (numbers) => {\n  const [min1, max1] = findClosestElmEnts(numbers);\n  const [min2, max2] = findClosestElmEnts(numbers);\n  return [min1, max1]\n   .concat(findClosestElmEnts(numbers))\n   .concat([max2, min2]);\n};\n\n/**\n  Given a list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> findClosestElmEnts([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElmEnts([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElmEnts = (numbers) => {\n  const [min1, max1] = findClosestElmEnts(numbers);\n  const [min2, max2] = findClosestElmEnts(numbers);\n  return [min1, max1]\n   .concat(findClosestElmEnts(numbers))\n   .concat([max2, min2]);\n};\n\n/**\n  Given a list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> findClosestElmEnts([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElmEnts([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElmEnts = (numbers) => {\n  const [min1, max1] = findClosestElmEnts(numbers);\n  const [min2, max2] = findClosestElmEnts(numbers);\n  return [min1, max1]\n   .concat(findClosestElm", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> resCaletoUniT([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst resCaletoUniT = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "resCaletoUniT", "gc": "<|endoftext|>/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> resCaletoUniT([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst resCaletoUniT = (numbers) => {\n  let min = 0;\n  let max = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    min = Math.min(min, numbers[i]);\n    max = Math.max(max, numbers[i]);\n  }\n  return [min, max];\n};\n\n/**\n * Given a list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> resCaletoUniT([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst resCaletoUniT = (numbers) => {\n  let min = 0;\n  let max = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    min = Math.min(min, numbers[i]);\n    max = Math.max(max, numbers[i]);\n  }\n  return [min, max];\n};\n\n/**\n * Given a list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> resCaletoUniT([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst resCaletoUniT = (numbers) => {\n  let min = 0;\n  let max = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    min = Math.min(min, numbers[i]);\n    max = Math.max(max, numbers[i]);\n  }\n  return [min, max];\n};\n\n/**\n * Given a list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> resCaletoUniT([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst resCaletoUniT = (numbers) => {\n  let min = 0;\n  let max = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    min = Math.min(min, numbers[i]);\n    max = Math.max(max, numbers[i]);\n  }\n  return [min, max];\n};\n\n/**\n * Given a list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> resCaletoUniT([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst resCaletoUniT = (numbers) => {\n  let min = 0;\n  let max = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    min = Math.min(min, numbers[i]);\n    max = Math.max(max, numbers[i]);\n  }\n  return [min, max];\n};\n\n/**\n * Given a list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> resCaletoUniT([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst resCaletoUniT = (numbers) => {\n  let min = 0;\n  let max = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    min = Math.min(min, numbers[i]);\n    max = Math.max(max, numbers[i]);\n  }\n  return [min, max];\n};\n\n/**\n * Given a list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> resCaletoUniT([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst resCaletoUniT = (numbers) => {\n  let min = 0;\n  let max = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    min = Math.min(min, numbers[i]);\n    max = Math.max(max, numbers[i]);\n  }\n  return [min, max];\n};\n\n/**\n * Given a list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> resCaletoUniT([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst resCaletoUniT = (numbers) => {\n  let min = 0;\n  let max = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    min = Math.min(min, numbers[i]);\n    max = Math.max(max, numbers[i]);\n  }\n  return [min, max];\n};\n\n/**\n * Given a list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> resCaletoUniT([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst resCaletoUniT = (numbers) => {\n  let min = 0;\n  let max = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    min = Math.min(min, numbers[i]);\n    max = Math.max(max, numbers[i]);\n  }\n  return [min, max];\n};\n\n/**\n * Given a list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> resCaletoUniT([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst resCaletoUniT = (numbers) => {\n  let min = 0;\n  let max = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    min = Math.min(min, numbers[i]);\n    max = Math.max(max, numbers[i]);\n  }\n  return [min, max];\n};\n\n/**\n * Given a list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> resCaletoUniT([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst resCaletoUniT = (numbers) => {\n  let min = 0;\n  let max = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    min = Math.min(min, numbers[i]);\n    max = Math.max(max, numbers[i]);\n  }\n  return [min, max];\n};\n\n/**\n * Given a list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> resCaletoUniT([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst resCaletoUniT = (numbers) => {\n  let min = 0;\n  let max = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    min = Math.min(min, numbers[i]);\n    max = Math.max(max, numbers[i]);\n  }\n  return [min, max];\n};\n\n/**\n * Given a list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> resCaletoUniT([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst resCaletoUniT = (numbers) => {\n  let min = 0;\n  let max = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    min = Math.min(min, numbers[i]);\n    max = Math.max(max, numbers[i]);\n  }\n  return [min, max];\n};\n\n/**\n * Given a list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> resCaletoUniT", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/22", "prompt": "/* Filter given list of any python values only for integers\n  >>> filTerINtegeRs(['a', 3.14, 5])\n  [5]\n  >>> filTerINtegeRs([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filTerINtegeRs = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filTerINtegeRs", "gc": "<|endoftext|>/* Filter given list of any python values only for integers\n  >>> filTerINtegeRs(['a', 3.14, 5])\n  [5]\n  >>> filTerINtegeRs([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filTerINtegeRs = (values) => {\n  const filter = (value) => {\n    if (typeof value === 'number') {\n      return value % 1 === 0;\n    }\n    return Array.isArray(value) && value.every(filTerINtegeRs);\n  };\n  return values.filter(filter);\n};\n\n/**\n * Filter given list of any python values only for integers\n * and floats\n * >>> filTerINtegeRsFloats(['a', 3.14, 5])\n * [5]\n * >>> filTerINtegeRsFloats([1, 2, 3, 'abc', {}, []])\n * [1, 2, 3]\n */\nconst filTerINtegeRsFloats = (values) => {\n  const filter = (value) => {\n    if (typeof value === 'number') {\n      return value % 1 === 0;\n    }\n    if (typeof value ==='string') {\n      return parseFloat(value) === value;\n    }\n    return Array.isArray(value) && value.every(filTerINtegeRsFloats);\n  };\n  return values.filter(filter);\n};\n\n/**\n * Filter given list of any python values only for integers\n * and floats\n * >>> filTerINtegeRsFloats(['a', 3.14, 5])\n * [5]\n * >>> filTerINtegeRsFloats([1, 2, 3, 'abc', {}, []])\n * [1, 2, 3]\n */\nconst filTerINtegeRsFloatsFloats = (values) => {\n  const filter = (value) => {\n    if (typeof value === 'number') {\n      return value % 1 === 0;\n    }\n    if (typeof value ==='string') {\n      return parseFloat(value) === value;\n    }\n    return Array.isArray(value) && value.every(filTerINtegeRsFloatsFloats);\n  };\n  return values.filter(filter);\n};\n\n/**\n * Filter given list of any python values only for integers\n * and floats\n * >>> filTerINtegeRsFloats(['a', 3.14, 5])\n * [5]\n * >>> filTerINtegeRsFloats([1, 2, 3, 'abc', {}, []])\n * [1, 2, 3]\n */\nconst filTerINtegeRsFloatsFloatsFloats = (values) => {\n  const filter = (value) => {\n    if (typeof value === 'number') {\n      return value % 1 === 0;\n    }\n    if (typeof value ==='string') {\n      return parseFloat(value) === value;\n    }\n    return Array.isArray(value) && value.every(filTerINtegeRsFloatsFloatsFloats);\n  };\n  return values.filter(filter);\n};\n\n/**\n * Filter given list of any python values only for integers\n * and floats\n * >>> filTerINtegeRsFloats(['a', 3.14, 5])\n * [5]\n * >>> filTerINtegeRsFloats([1, 2, 3, 'abc', {}, []])\n * [1, 2, 3]\n */\nconst filTerINtegeRsFloatsFloatsFloatsFloats = (values) => {\n  const filter = (value) => {\n    if (typeof value === 'number') {\n      return value % 1 === 0;\n    }\n    if (typeof value ==='string') {\n      return parseFloat(value) === value;\n    }\n    return Array.isArray(value) && value.every(filTerINtegeRsFloatsFloatsFloatsFloats);\n  };\n  return values.filter(filter);\n};\n\n/**\n * Filter given list of any python values only for integers\n * and floats\n * >>> filTerINtegeRsFloats(['a', 3.14, 5])\n * [5]\n * >>> filTerINtegeRsFloats([1, 2, 3, 'abc', {}, []])\n * [1, 2, 3]\n */\nconst filTerINtegeRsFloatsFloatsFloatsFloatsFloats = (values) => {\n  const filter = (value) => {\n    if (typeof value === 'number') {\n      return value % 1 === 0;\n    }\n    if (typeof value ==='string') {\n      return parseFloat(value) === value;\n    }\n    return Array.isArray(value) && value.every(filTerINtegeRsFloatsFloatsFloatsFloats);\n  };\n  return values.filter(filter);\n};\n\n/**\n * Filter given list of any python values only for integers\n * and floats\n * >>> filTerINtegeRsFloats(['a', 3.14, 5])\n * [5]\n * >>> filTerINtegeRsFloats([1, 2, 3, 'abc', {}, []])\n * [1, 2, 3]\n */\nconst filTerINtegeRsFloatsFloatsFloatsFloatsFloatsFloats = (values) => {\n  const filter = (value) => {\n    if (typeof value === 'number') {\n      return value % 1 === 0;\n    }\n    if (typeof value ==='string') {\n      return parseFloat(value) === value;\n    }\n    return Array.isArray(value) && value.every(filTerINtegeRsFloatsFloatsFloatsFloatsFloats);\n  };\n  return values.filter(filter);\n};\n\n/**\n * Filter given list of any python values only for integers\n * and floats\n * >>> filTerINtegeRsFloats(['a', 3.14, 5])\n * [5]\n * >>> filTerINtegeRsFloats([1, 2, 3, 'abc', {}, []])\n * [1, 2, 3]\n */\nconst filTerINtegeRsFloatsFloatsFloatsFloatsFloatsFloatsFloats = (values) => {\n  const filter = (value) => {\n    if (typeof value === 'number') {\n      return value % 1 === 0;\n    }\n    if (typeof value ==='string') {\n      return parseFloat(value) === value;\n    }\n    return Array.isArray(value) && value.every(filTerINtegeRsFloatsFloatsFloatsFloatsFloatsFloats);\n  };\n  return values.filter(filter);\n};\n\n/**\n * Filter given list of any python values only for integers\n * and floats\n * >>> filTerINtegeRsFloats(['a', 3.14, 5])\n * [5]\n * >>> filTerINtegeRsFloats([1, 2, 3, 'abc', {}, []])\n * [1, 2, 3]\n */\nconst filTerINtegeRsFloatsFloatsFloatsFloatsFloatsFloatsFloatsFloatsFloats = (values) => {\n  const filter = (value) => {\n    if (typeof value === 'number') {\n      return value % 1 === 0;\n    }\n    if (typeof value ==='string') {\n      return parseFloat(value) === value;\n    }\n    return Array.isArray(value) && value.every(filTerINtegeRsFloatsFloatsFloatsFloatsFloatsFloatsFloats);\n  };\n  return values.filter(filter);\n};\n\n/**\n * Filter given list of any python values only for integers\n * and floats\n * >>> filTerINtegeRsFloats(['a', 3.14, 5])\n * [5]\n * >>> filTerINtegeRsFloats([1, 2, 3, 'abc', {}, []])\n * [1, 2, 3]\n */\nconst filTerINtegeRsFloatsFloatsFloatsFloatsFloatsFloatsFloatsFloatsFloatsFloats = (values) => {\n  const filter = (value) => {\n    if (typeof value === 'number') {\n      return value % 1 === 0;\n    }\n    if (typeof value ==='string') {\n      return parseFloat(value) === value;\n    }\n    return Array.isArray(value) && value.every(filTerINtegeRsFloatsFloatsFloatsFloatsFloatsFloatsFloatsFloats);\n  };\n  return values.filter(filter);\n};\n\n/**\n * Filter given list of any python values only for integers\n * and floats\n * >>> filTerINtegeRsFloats(['a', 3.14, 5])\n * ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/23", "prompt": "/* Return length of given string\n  >>> strLen('')\n  0\n  >>> strLen('abc')\n  3\n  */\nconst strLen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strLen", "gc": "<|endoftext|>/* Return length of given string\n  >>> strLen('')\n  0\n  >>> strLen('abc')\n  3\n  */\nconst strLen = (string) => {\n  return string.length\n}\n\n/**\n * Return true if given string starts with given prefix\n * >>> startsWith('abc', 'a')\n  true\n  >>> startsWith('abc', 'b')\n  false\n  */\nconst startsWith = (string, prefix) => {\n  return string.indexOf(prefix) === 0\n}\n\n/**\n * Return true if given string ends with given suffix\n * >>> endsWith('abc', 'b')\n  true\n  >>> endsWith('abc', 'a')\n  false\n  */\nconst endsWith = (string, suffix) => {\n  return string.indexOf(suffix, string.length - suffix.length)!== -1\n}\n\n/**\n * Return true if given string contains given substring\n * >>> contains('abc', 'b')\n  true\n  >>> contains('abc', 'a')\n  false\n  */\nconst contains = (string, substring) => {\n  return string.indexOf(substring)!== -1\n}\n\n/**\n * Return true if given string starts with given substring\n * >>> startsWith('abc', 'b')\n  true\n  >>> startsWith('abc', 'a')\n  false\n  */\nconst startsWith = (string, substring) => {\n  return string.indexOf(substring) === 0\n}\n\n/**\n * Return true if given string ends with given substring\n * >>> endsWith('abc', 'b')\n  true\n  >>> endsWith('abc', 'a')\n  false\n  */\nconst endsWith = (string, substring) => {\n  return string.indexOf(substring, string.length - substring.length)!== -1\n}\n\n/**\n * Return true if given string contains given substring\n * >>> contains('abc', 'b')\n  true\n  >>> contains('abc', 'a')\n  false\n  */\nconst contains = (string, substring) => {\n  return string.indexOf(substring)!== -1\n}\n\n/**\n * Return true if given string starts with given substring\n * >>> startsWith('abc', 'b')\n  true\n  >>> startsWith('abc', 'a')\n  false\n  */\nconst startsWith = (string, substring) => {\n  return string.indexOf(substring) === 0\n}\n\n/**\n * Return true if given string ends with given substring\n * >>> endsWith('abc', 'b')\n  true\n  >>> endsWith('abc', 'a')\n  false\n  */\nconst endsWith = (string, substring) => {\n  return string.indexOf(substring, string.length - substring.length)!== -1\n}\n\n/**\n * Return true if given string contains given substring\n * >>> contains('abc', 'b')\n  true\n  >>> contains('abc', 'a')\n  false\n  */\nconst contains = (string, substring) => {\n  return string.indexOf(substring)!== -1\n}\n\n/**\n * Return true if given string starts with given substring\n * >>> startsWith('abc', 'b')\n  true\n  >>> startsWith('abc', 'a')\n  false\n  */\nconst startsWith = (string, substring) => {\n  return string.indexOf(substring) === 0\n}\n\n/**\n * Return true if given string ends with given substring\n * >>> endsWith('abc', 'b')\n  true\n  >>> endsWith('abc', 'a')\n  false\n  */\nconst endsWith = (string, substring) => {\n  return string.indexOf(substring, string.length - substring.length)!== -1\n}\n\n/**\n * Return true if given string contains given substring\n * >>> contains('abc', 'b')\n  true\n  >>> contains('abc', 'a')\n  false\n  */\nconst contains = (string, substring) => {\n  return string.indexOf(substring)!== -1\n}\n\n/**\n * Return true if given string starts with given substring\n * >>> startsWith('abc', 'b')\n  true\n  >>> startsWith('abc', 'a')\n  false\n  */\nconst startsWith = (string, substring) => {\n  return string.indexOf(substring) === 0\n}\n\n/**\n * Return true if given string ends with given substring\n * >>> endsWith('abc', 'b')\n  true\n  >>> endsWith('abc', 'a')\n  false\n  */\nconst endsWith = (string, substring) => {\n  return string.indexOf(substring, string.length - substring.length)!== -1\n}\n\n/**\n * Return true if given string contains given substring\n * >>> contains('abc', 'b')\n  true\n  >>> contains('abc', 'a')\n  false\n  */\nconst contains = (string, substring) => {\n  return string.indexOf(substring)!== -1\n}\n\n/**\n * Return true if given string starts with given substring\n * >>> startsWith('abc', 'b')\n  true\n  >>> startsWith('abc', 'a')\n  false\n  */\nconst startsWith = (string, substring) => {\n  return string.indexOf(substring) === 0\n}\n\n/**\n * Return true if given string ends with given substring\n * >>> endsWith('abc', 'b')\n  true\n  >>> endsWith('abc', 'a')\n  false\n  */\nconst endsWith = (string, substring) => {\n  return string.indexOf(substring, string.length - substring.length)!== -1\n}\n\n/**\n * Return true if given string contains given substring\n * >>> contains('abc', 'b')\n  true\n  >>> contains('abc', 'a')\n  false\n  */\nconst contains = (string, substring) => {\n  return string.indexOf(substring)!== -1\n}\n\n/**\n * Return true if given string starts with given substring\n * >>> startsWith('abc', 'b')\n  true\n  >>> startsWith('abc', 'a')\n  false\n  */\nconst startsWith = (string, substring) => {\n  return string.indexOf(substring) === 0\n}\n\n/**\n * Return true if given string ends with given substring\n * >>> endsWith('abc', 'b')\n  true\n  >>> endsWith('abc', 'a')\n  false\n  */\nconst endsWith = (string, substring) => {\n  return string.indexOf(substring, string.length - substring.length)!== -1\n}\n\n/**\n * Return true if given string contains given substring\n * >>> contains('abc', 'b')\n  true\n  >>> contains('abc', 'a')\n  false\n  */\nconst contains = (string, substring) => {\n  return string.indexOf(substring)!== -1\n}\n\n/**\n * Return true if given string starts with given substring\n * >>> startsWith('abc', 'b')\n  true\n  >>> startsWith('abc', 'a')\n  false\n  */\nconst startsWith = (string, substring) => {\n  return string.indexOf(substring) === 0\n}\n\n/**\n * Return true if given string ends with given substring\n * >>> endsWith('abc', 'b')\n  true\n  >>> endsWith('abc', 'a')\n  false\n  */\nconst endsWith = (string, substring) => {\n  return string.indexOf(substring, string.length - substring.length)!== -1\n}\n\n/**\n * Return true if given string contains given substring\n * >>> contains('abc', 'b')\n  true\n  >>> contains('abc', 'a')\n  false\n  */\nconst contains = (string, substring) => {\n  return string.indexOf(substring)!== -1\n}\n\n/**\n * Return true if given string starts with given substring\n * >>> startsWith('abc', 'b')\n  true\n  >>> startsWith('abc', 'a')\n  false\n  */\nconst startsWith = (string, substring) => {\n  return string.indexOf(substring) === 0\n}\n\n/**\n * Return true if given string ends with given substring\n * >>> endsWith('abc', 'b')\n  true\n  >>> endsWith('abc', 'a')\n  false\n  */\nconst endsWith = (string, substring) => {\n  return string.indexOf(substring, string.length - substring.length)!== -1\n}\n\n/**\n * Return true if given string contains given substring\n * >>> contains('abc', 'b')\n  true\n  >>> contains('abc', 'a')\n  false\n  */\nconst contains = (string, substring) => {\n  return string.indexOf(substring)!== -1\n}\n\n", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/24", "prompt": "/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> larGestdivisOr(15)\n  5\n  */\nconst larGestdivisOr = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "larGestdivisOr", "gc": "<|endoftext|>/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> larGestdivisOr(15)\n  5\n  */\nconst larGestdivisOr = (n) => {\n  let largest = n;\n  let largestDividedByTen = 0;\n  let largestDividedByTenDividedByTen = 0;\n  let largestDividedByTenDividedByTenDividedByTen = 0;\n  let largestDividedByTenDividedByTenDividedByTenDividedByTen = 0;\n  let largestDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedByTenDividedBy", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> facToriZe(8)\n  [2, 2, 2]\n  >>> facToriZe(25)\n  [5, 5]\n  >>> facToriZe(70)\n  [2, 5, 7]\n  */\nconst facToriZe = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "facToriZe", "gc": "<|endoftext|>/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> facToriZe(8)\n  [2, 2, 2]\n  >>> facToriZe(25)\n  [5, 5]\n  >>> facToriZe(70)\n  [2, 5, 7]\n  */\nconst facToriZe = (n) => {\n  const factors = [];\n  let factor = 1;\n  let factorCount = 0;\n  while (factor <= n) {\n    factorCount++;\n    factor *= factor;\n    if (n % factor === 0) {\n      factors.push(factor);\n    }\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> facToriZe(8)\n  [2, 2, 2]\n  >>> facToriZe(25)\n  [5, 5]\n  >>> facToriZe(70)\n  [2, 5, 7]\n  */\nconst facToriZ = (n) => {\n  const factors = [];\n  let factor = 1;\n  let factorCount = 0;\n  while (factor <= n) {\n    factorCount++;\n    factor *= factor;\n    if (n % factor === 0) {\n      factors.push(factor);\n    }\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> facToriZe(8)\n  [2, 2, 2]\n  >>> facToriZe(25)\n  [5, 5]\n  >>> facToriZe(70)\n  [2, 5, 7]\n  */\nconst facTori = (n) => {\n  const factors = [];\n  let factor = 1;\n  let factorCount = 0;\n  while (factor <= n) {\n    factorCount++;\n    factor *= factor;\n    if (n % factor === 0) {\n      factors.push(factor);\n    }\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> facTori(8)\n  [2, 2, 2]\n  >>> facTori(25)\n  [5, 5]\n  >>> facTori(70)\n  [2, 5, 7]\n  */\nconst fac = (n) => {\n  const factors = [];\n  let factor = 1;\n  let factorCount = 0;\n  while (factor <= n) {\n    factorCount++;\n    factor *= factor;\n    if (n % factor === 0) {\n      factors.push(factor);\n    }\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> facTori(8)\n  [2, 2, 2]\n  >>> facTori(25)\n  [5, 5]\n  >>> facTori(70)\n  [2, 5, 7]\n  */\nconst facToriZ = (n) => {\n  const factors = [];\n  let factor = 1;\n  let factorCount = 0;\n  while (factor <= n) {\n    factorCount++;\n    factor *= factor;\n    if (n % factor === 0) {\n      factors.push(factor);\n    }\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> facTori(8)\n  [2, 2, 2]\n  >>> facTori(25)\n  [5, 5]\n  >>> facTori(70)\n  [2, 5, 7]\n  */\nconst facToriZe = (n) => {\n  const factors = [];\n  let factor = 1;\n  let factorCount = 0;\n  while (factor <= n) {\n    factorCount++;\n    factor *= factor;\n    if (n % factor === 0) {\n      factors.push(factor);\n    }\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> facTori(8)\n  [2, 2, 2]\n  >>> facTori(25)\n  [5, 5]\n  >>> facTori(70)\n  [2, 5, 7]\n  */\nconst facToriZ = (n) => {\n  const factors = [];\n  let factor = 1;\n  let factorCount = 0;\n  while (factor <= n) {\n    factorCount++;\n    factor *= factor;\n    if (n % factor === 0) {\n      factors.push(factor);\n    }\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> facTori(8)\n  [2, 2, 2]\n  >>> facTori(25)\n  [5, 5]\n  >>> facTori(70)\n  [2, 5, 7]\n  */\nconst facTori = (n) => {\n  const factors = [];\n  let factor = 1;\n  let factorCount = 0;\n  while (factor <= n) {\n    factorCount++;\n    factor *= factor;\n    if (n % factor === 0) {\n      factors.push(factor);\n    }\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> facTori(8)\n  [2, 2, 2]\n  >>> facTori(25)\n  [5, 5]\n  >>> facTori(70)\n  [2, 5, 7]\n  */\nconst fac = (n) => {\n  const factors = [];\n  let factor = 1;\n  let factorCount = 0;\n  while (factor <= n) {\n    factorCount++;\n    factor *= factor;\n    if (n % factor === 0) {\n      factors.push(factor);\n    }\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> facTori(8)\n  [2, 2, 2]\n  >>> facTori(25)\n  [5, 5]\n  >>> facTori(70)\n  [2, 5, 7]\n  */\nconst facToriZ = (n) => {\n  const factors = [];\n  let factor = 1;\n  let factorCount = 0;\n  while (factor <= n) {\n    factorCount++;\n    factor *= factor;\n    if (n % factor === 0) {\n      factors.push(factor);\n    }\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> facTori(8)\n  [2, 2, 2]\n  >>> facTori(25)\n  [5, 5]\n  >>> facTori(70)\n  [2, 5, 7]\n  */\nconst facToriZe = (n) => {\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> remOveDUplicAteS([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst remOveDUplicAteS = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "remOveDUplicAteS", "gc": "<|endoftext|>/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> remOveDUplicAteS([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst remOveDUplicAteS = (numbers) => {\n  let seen = {};\n  let result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    let number = numbers[i];\n    if (seen[number]) {\n      continue;\n    }\n    seen[number] = true;\n    result.push(number);\n  }\n  return result;\n};\n\n// ### removeOddNumbers\n// Remove all odd numbers from a list of integers.\n// >>> removeOddNumbers([1, 2, 3, 4, 5, 6])\n// [1, 2, 3, 4, 5, 6]\n// >>> removeOddNumbers([1, 2, 3, 4, 5, 6])\n// [1, 2, 3, 4, 5, 6]\n// >>> removeOddNumbers([1, 2, 3, 4, 5, 6])\n// [1, 2, 3, 4, 5, 6]\n// >>> removeOddNumbers([1, 2, 3, 4, 5, 6])\n// [1, 2, 3, 4, 5, 6]\n// >>> removeOddNumbers([1, 2, 3, 4, 5, 6])\n// [1, 2, 3, 4, 5, 6]\n// >>> removeOddNumbers([1, 2, 3, 4, 5, 6])\n// [1, 2, 3, 4, 5, 6]\n// >>> removeOddNumbers([1, 2, 3, 4, 5, 6])\n// [1, 2, 3, 4, 5, 6]\n// >>> removeOddNumbers([1, 2, 3, 4, 5, 6])\n// [1, 2, 3, 4, 5, 6]\n// >>> removeOddNumbers([1, 2, 3, 4, 5, 6])\n// [1, 2, 3, 4, 5, 6]\n// >>> removeOddNumbers([1, 2, 3, 4, 5, 6])\n// [1, 2, 3, 4, 5, 6]\n// >>> removeOddNumbers([1, 2, 3, 4, 5, 6])\n// [1, 2, 3, 4, 5, 6]\n// >>> removeOddNumbers([1, 2, 3, 4, 5, 6])\n// [1, 2, 3, 4, 5, 6]\n// >>> removeOddNumbers([1, 2, 3, 4, 5, 6])\n// [1, 2, 3, 4, 5, 6]\n// >>> removeOddNumbers([1, 2, 3, 4, 5, 6])\n// [1, 2, 3, 4, 5, 6]\n// >>> removeOddNumbers([1, 2, 3, 4, 5, 6])\n// [1, 2, 3, 4, 5, 6]\n// >>> removeOddNumbers([1, 2, 3, 4, 5, 6])\n// [1, 2, 3, 4, 5, 6]\n// >>> removeOddNumbers([1, 2, 3, 4, 5, 6])\n// [1, 2, 3, 4, 5, 6]\n// >>> removeOddNumbers([1, 2, 3, 4, 5, 6])\n// [1, 2, 3, 4, 5, 6]\n// >>> removeOddNumbers([1, 2, 3, 4, 5, 6])\n// [1, 2, 3, 4, 5, 6]\n// >>> removeOddNumbers([1, 2, 3, 4, 5, 6])\n// [1, 2, 3, 4, 5, 6]\n// >>> removeOddNumbers([1, 2, 3, 4, 5, 6])\n// [1, 2, 3, 4, 5, 6]\n// >>> removeOddNumbers([1, 2, 3, 4, 5, 6])\n// [1, 2, 3, 4, 5, 6]\n// >>> removeOddNumbers([1, 2, 3, 4, 5, 6])\n// [1, 2, 3, 4, 5, 6]\n// >>> removeOddNumbers([1, 2, 3, 4, 5, 6])\n// [1, 2, 3, 4, 5, 6]\n// >>> removeOddNumbers([1, 2, 3, 4, 5, 6])\n// [1, 2, 3, 4, 5, 6]\n// >>> removeOddNumbers([1, 2, 3, 4, 5, 6])\n// [1, 2, 3, 4, 5, 6]\n// >>> removeOddNumbers([1, 2, 3, 4, 5, 6])\n// [1, 2, 3, 4, 5, 6]\n// >>> removeOddNumbers([1, 2, 3, 4, 5, 6])\n// [1, 2, 3, 4, 5, 6]\n// >>> removeOddNumbers([1, 2, 3, 4, 5, 6])\n// [1, 2, 3, 4, 5, 6]\n// >>> removeOddNumbers([1, 2, 3, 4, 5, 6])\n// [1, 2, 3, 4, 5, 6]\n// >>> removeOddNumbers([1, 2, 3, 4, 5, 6])\n// [1, 2, 3, 4, 5, 6]\n// >>> removeOddNumbers([1, 2, 3, 4, 5, 6])\n// [1, 2, 3, 4, 5, 6]\n// >>> removeOddNumbers([1, 2, 3, 4, 5, 6])\n// [1, 2, 3, 4, 5, 6]\n// >>> removeOddNumbers([1, 2, 3, 4, 5, 6])\n// [1, 2, 3, 4, 5, 6]\n// >>> removeOddNumbers([1, 2, 3, 4, 5, 6])\n// [1, 2, 3, 4, 5, 6]\n// >>> removeOddNumbers([1, 2, 3, 4, 5, 6])\n// [1, 2, 3, 4, 5, 6]\n// >>> removeOddNumbers([1, 2, 3, 4, 5, 6])\n// [1, 2, 3, 4, 5, 6]\n// >>> removeOddNumbers([1, 2, 3, 4, 5, 6])\n// [1, 2, 3, 4, 5, 6]\n// >>> removeOddNumbers([1, 2, 3, 4, 5, 6])\n// [1, 2, 3, 4, 5, 6]\n// >>> removeOddNumbers([1, 2, 3, 4, 5, 6])\n// [1, 2, 3, 4, 5, 6]\n// >>> removeOddNumbers([1, 2, 3, 4, 5, 6])\n// [1, 2, 3, 4, 5, 6]\n// >>> removeOddNumbers([1, 2, 3, 4, 5, 6])\n// [1, 2, 3, 4, 5, 6]\n// >>> removeOddNumbers([1, 2, 3, 4, 5, 6])\n// [1, 2, 3, 4, 5, 6]\n// >>> removeOddNumbers([1, 2, 3, 4, 5, 6])\n// [1, 2, 3, 4, 5, 6]\n// >>> removeOddNumbers([1, 2, 3, 4, 5, 6])\n// [1, 2, 3, 4, 5, 6]\n// >>> removeOddNumbers([1, 2, 3, 4, 5, 6])\n// [1, 2, 3, 4, 5, 6]\n// >>> removeOddNumbers([1, 2, 3, 4, 5, 6])\n// [1, 2, 3, 4, 5, 6]\n// >>> removeOddNumbers([1, 2, 3, 4, 5, 6])\n// [1, 2, 3, 4, 5, 6]\n// >>> removeOddNumbers([1, 2, 3, 4, 5, 6])\n// [1, 2, 3, 4, 5, 6]\n// >>> removeOddNumbers([1, 2, 3, 4, 5, 6])\n// [1, 2, 3, 4, 5, 6]\n// >>> removeOddNumbers([1, 2, 3, 4, 5, 6])\n// [1, 2, 3, 4, 5, 6]\n// >>> removeOddNumbers([1, 2, 3, 4, 5, 6])\n// [1, 2, 3, 4, 5, 6]\n// >>> removeOddNumbers([1, 2, 3, 4, 5, 6])\n// [1, 2, 3, 4, 5, 6]\n// >>> removeOddNumbers([1, 2, 3, 4, 5, 6])\n// [1, 2, 3, 4, 5, 6]\n// >>> removeOddNumbers([1, 2, 3, 4, 5, 6])\n// [1, 2, 3, 4, 5, 6]\n// >>> removeOddNumbers([1, 2, 3, 4, 5, 6])\n// [1, 2, 3, 4, 5, 6]\n// >>> removeOddNumbers([1, 2, 3, 4, 5, 6])\n// [1, 2, 3, 4, 5, 6]\n// >>> removeOddNumbers([1, 2, 3, 4, 5, 6])\n// [1, 2, 3, 4, 5, 6]\n// >>> removeOddNumbers([1, 2, 3, 4, 5, 6])\n// [1, 2, 3, 4, 5, 6]\n// >>> removeOddNumbers([1, 2, 3, 4, 5, 6])\n// [1, 2, 3, 4, 5, 6]\n// >>> removeOddNumbers([1, 2, 3, 4, 5, 6])\n// [1, 2, 3, 4, 5, 6]\n// >>> removeOddNumbers([1, 2, 3, 4, 5, 6])\n// [1, 2, 3, 4, 5, 6]\n// >>> removeOddNumbers([1, 2, 3, 4, 5, 6])\n// [1, 2, 3, 4, 5, 6]\n// >>> removeOddNumbers([1, 2, 3, 4, 5, 6])\n// [1, 2, 3, 4, 5, 6]\n// >>> removeOddNumbers([1, 2, 3, 4, 5, 6])\n// [1, 2, 3, 4, 5, 6]\n// >>> removeOddNumbers([1, 2, 3, 4, 5, 6])\n// [1, 2, 3, 4, 5, 6]\n// >>> removeOddNumbers([1, 2, 3, 4, 5, 6])\n// [1, 2, 3, 4, 5, 6]\n// >>> removeOddNumbers([1, 2, 3, 4, 5, 6])\n// [1, 2, 3, 4, 5, 6]\n// >>> removeOddNumbers([1, 2, 3, 4, 5, 6])\n// [1, 2, 3, 4, 5, 6]\n// >>> removeOddNumbers([1, 2, 3, 4, 5, 6])\n// [1, 2, 3, 4, 5, 6]\n// >>> removeOddNumbers([1, 2, 3, 4, 5, 6])\n// [1, 2, 3, 4, 5, 6]\n// >>> removeOddNumbers([1, 2, 3, 4, 5, 6])\n// [1, 2, 3, 4, 5, 6]\n// >>> removeOddNumbers([1, 2, 3, 4, 5, 6])\n// [1, 2, 3, 4, 5, 6]\n// >>> removeOddNumbers([1, 2, 3, 4, 5, 6])\n// [1, 2, 3, 4, 5, 6]\n// >>> removeOddNumbers([1, 2, 3, 4, 5, 6])\n// [1, 2, 3, 4, 5, 6]\n// >>> removeOddNumbers([1, 2, 3, 4, 5, 6])\n// [1, 2, 3, 4, 5, 6]\n// >>> removeOddNumbers([1, 2, 3, 4, 5, 6])\n// [1, 2, 3, 4, 5, 6]\n// >>> removeOddNumbers([1, 2, 3, 4, 5, 6])\n// [1, 2, 3, 4, 5, 6]\n// >>> removeOddNumbers([1, 2, 3, 4, 5, 6])\n// [1, 2, 3, 4, 5, 6]\n// >>> removeOddNumbers([1, 2, 3, 4, 5, 6])\n// [1, 2, 3, 4, 5, 6]\n// >>> removeOddNumbers([1, 2, 3, 4, 5, 6])\n// [1, 2, 3, 4, 5, 6]\n// >>> removeOddNumbers([1, 2, 3, 4, 5, 6])\n// [1, 2, 3, 4, 5, 6]\n// >>> removeOddNumbers([1, 2, 3, 4, 5, 6])\n// [1, 2, 3, 4, 5, 6]\n// >>> removeOddNumbers([1, 2, 3, 4, 5, 6])\n// [1, 2, 3, 4, 5, 6]\n// >>> removeOddNumbers([1, 2, 3, 4, 5, 6])\n// [1, 2, 3, 4, 5, 6]\n// >>> removeOddNumbers([1, 2, 3, 4, 5, 6])\n// [1, 2, 3, 4, 5, 6]\n// >>> removeOddNumbers([1, 2, 3, 4, 5, 6])\n// [1, 2, 3, 4, 5, 6]\n// >>> removeOddNumbers([1, 2, 3, 4, 5, 6])\n// [1, 2, 3, 4, 5, 6]\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/27", "prompt": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> fliPCasE('Hello')\n  'hELLO'\n  */\nconst fliPCasE = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "fliPCasE", "gc": "<|endoftext|>/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> fliPCasE('Hello')\n  'hELLO'\n  */\nconst fliPCasE = (string) => {\n  let newString = string.toLowerCase()\n  for (let i = 0; i < newString.length; i++) {\n    if (newString.charAt(i) === newString.charAt(i).toUpperCase()) {\n      newString = newString.slice(0, i) + newString.slice(i).toUpperCase()\n    }\n  }\n  return newString\n}\n\n/* For a given string, flip uppercase characters to lowercase and lowercase to uppercase.\n  >>> fliPCasW('Hello')\n  'HELLO'\n  */\nconst fliPCasW = (string) => {\n  let newString = string.toUpperCase()\n  for (let i = 0; i < newString.length; i++) {\n    if (newString.charAt(i) === newString.charAt(i).toLowerCase()) {\n      newString = newString.slice(0, i) + newString.slice(i).toLowerCase()\n    }\n  }\n  return newString\n}\n\n/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> fliPCase('Hello')\n  'hello'\n  */\nconst fliPCase = (string) => {\n  let newString = string.toLowerCase()\n  for (let i = 0; i < newString.length; i++) {\n    if (newString.charAt(i) === newString.charAt(i).toUpperCase()) {\n      newString = newString.slice(0, i) + newString.slice(i).toUpperCase()\n    }\n  }\n  return newString\n}\n\n/* For a given string, flip uppercase characters to lowercase and lowercase to uppercase.\n  >>> fliPCaseW('Hello')\n  'HELLO'\n  */\nconst fliPCaseW = (string) => {\n  let newString = string.toUpperCase()\n  for (let i = 0; i < newString.length; i++) {\n    if (newString.charAt(i) === newString.charAt(i).toLowerCase()) {\n      newString = newString.slice(0, i) + newString.slice(i).toLowerCase()\n    }\n  }\n  return newString\n}\n\n/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> fliPCaseE('Hello')\n  'hELLO'\n  */\nconst fliPCaseE = (string) => {\n  let newString = string.toLowerCase()\n  for (let i = 0; i < newString.length; i++) {\n    if (newString.charAt(i) === newString.charAt(i).toUpperCase()) {\n      newString = newString.slice(0, i) + newString.slice(i).toUpperCase()\n    }\n  }\n  return newString\n}\n\n/* For a given string, flip uppercase characters to lowercase and lowercase to uppercase.\n  >>> fliPCaseW('Hello')\n  'HELLO'\n  */\nconst fliPCaseW = (string) => {\n  let newString = string.toUpperCase()\n  for (let i = 0; i < newString.length; i++) {\n    if (newString.charAt(i) === newString.charAt(i).toLowerCase()) {\n      newString = newString.slice(0, i) + newString.slice(i).toLowerCase()\n    }\n  }\n  return newString\n}\n\n/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> fliPCaseE('Hello')\n  'hELLO'\n  */\nconst fliPCaseE = (string) => {\n  let newString = string.toLowerCase()\n  for (let i = 0; i < newString.length; i++) {\n    if (newString.charAt(i) === newString.charAt(i).toUpperCase()) {\n      newString = newString.slice(0, i) + newString.slice(i).toUpperCase()\n    }\n  }\n  return newString\n}\n\n/* For a given string, flip uppercase characters to lowercase and lowercase to uppercase.\n  >>> fliPCaseW('Hello')\n  'HELLO'\n  */\nconst fliPCaseW = (string) => {\n  let newString = string.toUpperCase()\n  for (let i = 0; i < newString.length; i++) {\n    if (newString.charAt(i) === newString.charAt(i).toLowerCase()) {\n      newString = newString.slice(0, i) + newString.slice(i).toLowerCase()\n    }\n  }\n  return newString\n}\n\n/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> fliPCaseE('Hello')\n  'hELLO'\n  */\nconst fliPCaseE = (string) => {\n  let newString = string.toLowerCase()\n  for (let i = 0; i < newString.length; i++) {\n    if (newString.charAt(i) === newString.charAt(i).toUpperCase()) {\n      newString = newString.slice(0, i) + newString.slice(i).toUpperCase()\n    }\n  }\n  return newString\n}\n\n/* For a given string, flip uppercase characters to lowercase and lowercase to uppercase.\n  >>> fliPCaseW('Hello')\n  'HELLO'\n  */\nconst fliPCaseW = (string) => {\n  let newString = string.toUpperCase()\n  for (let i = 0; i < newString.length; i++) {\n    if (newString.charAt(i) === newString.charAt(i).toLowerCase()) {\n      newString = newString.slice(0, i) + newString.slice(i).toLowerCase()\n    }\n  }\n  return newString\n}\n\n/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> fliPCaseE('Hello')\n  'hELLO'\n  */\nconst fliPCaseE = (string) => {\n  let newString = string.toLowerCase()\n  for (let i = 0; i < newString.length; i++) {\n    if (newString.charAt(i) === newString.charAt(i).toUpperCase()) {\n      newString = newString.slice(0, i) + newString.slice(i).toUpperCase()\n    }\n  }\n  return newString\n}\n\n/* For a given string, flip uppercase characters to lowercase and lowercase to uppercase.\n  >>> fliPCaseW('Hello')\n  'HELLO'\n  */\nconst fliPCaseW = (string) => {\n  let newString = string.toUpperCase()\n  for (let i = 0; i < newString.length; i++) {\n    if (newString.charAt(i) === newString.charAt(i).toLowerCase()) {\n      newString = newString.slice(0, i) + newString.slice(i).toLowerCase()\n    }\n  }\n  return newString\n}\n\n/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> fliPCaseE('Hello')\n  'hELLO'\n  */\nconst fliPCaseE = (string) => {\n  let newString = string.toLowerCase()\n  for (let i = 0; i < newString.length; i++) {\n    if (newString.charAt(i) === newString.charAt(i).toUpperCase()) {\n      newString = newString.slice(0, i) + newString.slice(i).toUpperCase()\n    }\n  }\n  return newString\n}\n\n/* For a given string, flip uppercase characters to lowercase and lowercase to uppercase.\n  >>> fliPCaseW('Hello')\n  'HELLO'\n  */\nconst fliPCaseW = (string) => {\n  let newString = string.toUpperCase()\n  for (let i = 0; i < newString.length; i++) {\n    if (newString.charAt(i) === newString.charAt(i).toLowerCase()) {\n      newString = newString.slice(0, i) + newString.slice(i).toLowerCase()\n    }\n  }\n  return newString\n}\n\n/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> fliPCaseE('Hello')\n  'hELLO'\n  */\nconst fliPCaseE = (string) => {\n  let newString = string.toLowerCase()\n  for (let i = 0; i < newString.length; i++) {\n    if (newString.charAt(i) === newString.charAt(i).toUpperCase()) {\n      newString = newString.slice(0, i) + newString.slice(i).toUpperCase()\n    }\n  }\n  return newString\n}\n\n/* For a given string, flip uppercase characters to lowercase and lowercase to uppercase.\n  >>> fliPCaseW('Hello')\n  'HELLO'\n  */\nconst fliPCaseW = (string) => {\n  let newString = string.toUpperCase()\n  for (let i = 0; i < newString.length; i++) {\n    if (newString.", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single string\n  >>> conCateNate([])\n  ''\n  >>> conCateNate(['a', 'b', 'c'])\n  'abc'\n  */\nconst conCateNate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "conCateNate", "gc": "<|endoftext|>/* Concatenate list of strings into a single string\n  >>> conCateNate([])\n  ''\n  >>> conCateNate(['a', 'b', 'c'])\n  'abc'\n  */\nconst conCateNate = (strings) => {\n  return strings.reduce((acc, cur) => acc + cur, \"\");\n};\n\n/* Convert string to number\n  >>> convertToNum('1')\n  1\n  >>> convertToNum('1.2')\n  1.2\n  >>> convertToNum('1.23')\n  1.23\n  >>> convertToNum('1.234')\n  1.234\n  >>> convertToNum('1.2345')\n  1.2345\n  >>> convertToNum('1.23456789')\n  1.23456789\n  >>> convertToNum('1.2345678901')\n  1.2345678901\n  >>> convertToNum('1.23456789012')\n  1.23456789012\n  >>> convertToNum('1.234567890123')\n  1.234567890123\n  >>> convertToNum('1.2345678901234')\n  1.2345678901234\n  >>> convertToNum('1.23456789012345')\n  1.23456789012345\n  >>> convertToNum('1.234567890123456')\n  1.234567890123456\n  >>> convertToNum('1.2345678901234567')\n  1.2345678901234567\n  >>> convertToNum('1.23456789012345678')\n  1.23456789012345678\n  >>> convertToNum('1.23456789012345679')\n  1.23456789012345679\n  >>> convertToNum('1.23456789012345680')\n  1.23456789012345680\n  >>> convertToNum('1.23456789012345681')\n  1.23456789012345681\n  >>> convertToNum('1.23456789012345682')\n  1.23456789012345682\n  >>> convertToNum('1.23456789012345683')\n  1.23456789012345683\n  >>> convertToNum('1.23456789012345684')\n  1.23456789012345684\n  >>> convertToNum('1.23456789012345685')\n  1.23456789012345685\n  >>> convertToNum('1.23456789012345686')\n  1.23456789012345686\n  >>> convertToNum('1.23456789012345687')\n  1.23456789012345687\n  >>> convertToNum('1.23456789012345688')\n  1.23456789012345688\n  >>> convertToNum('1.23456789012345689')\n  1.23456789012345689\n  >>> convertToNum('1.23456789012345690')\n  1.23456789012345690\n  >>> convertToNum('1.23456789012345691')\n  1.23456789012345691\n  >>> convertToNum('1.23456789012345692')\n  1.23456789012345692\n  >>> convertToNum('1.23456789012345693')\n  1.23456789012345693\n  >>> convertToNum('1.23456789012345694')\n  1.23456789012345694\n  >>> convertToNum('1.23456789012345695')\n  1.23456789012345695\n  >>> convertToNum('1.23456789012345696')\n  1.23456789012345696\n  >>> convertToNum('1.23456789012345697')\n  1.23456789012345697\n  >>> convertToNum('1.23456789012345698')\n  1.23456789012345698\n  >>> convertToNum('1.23456789012345699')\n  1.23456789012345699\n  >>> convertToNum('1.23456789012345700')\n  1.23456789012345700\n  >>> convertToNum('1.23456789012345701')\n  1.23456789012345701\n  >>> convertToNum('1.23456789012345702')\n  1.23456789012345702\n  >>> convertToNum('1.23456789012345703')\n  1.23456789012345703\n  >>> convertToNum('1.23456789012345704')\n  1.23456789012345704\n  >>> convertToNum('1.23456789012345705')\n  1.23456789012345705\n  >>> convertToNum('1.23456789012345706')\n  1.23456789012345706\n  >>> convertToNum('1.23456789012345707')\n  1.23456789012345707\n  >>> convertToNum('1.23456789012345708')\n  1.23456789012345708\n  >>> convertToNum('1.23456789012345709')\n  1.23456789012345709\n  >>> convertToNum('1.23456789012345710')\n  1.23456789012345710\n  >>> convertToNum('1.23456789012345711')\n  1.23456789012345711\n  >>> convertToNum('1.23456789012345712')\n  1.23456789012345712\n  >>> convertToNum('1.23456789012345713')\n  1.23456789012345713\n  >>> convertToNum('1.23456789012345714')\n  1.23456789012345714\n  >>> convertToNum('1.23456789012345715')\n  1.23456789012345715\n  >>> convertToNum('1.23456789012345716')\n  1.23456789012345716\n  >>> convertToNum('1.23456789012345717')\n  1.23456789012345717\n  >>> convertToNum('1.23456789012345718')\n  1.23456789012345718\n  >>> convertToNum('1.23456789012345719')\n  1.23456789012345719\n  >>> convertToNum('1.23456789012345720')\n  1.23456789012345720\n  >>> convertToNum('1.23456789012345721')\n  1.23456789012345721\n  >>> convertToNum('1.23456789012345722')\n  1.23456789012345722\n  >>> convertToNum('1.23456789012345723')\n  1.23456789012345723\n  >>> convertToNum('1.23456789012345724')\n  1.23456789012345724\n  >>> convertToNum('1.23456789012345725')\n  1.23456789012345725\n  >>> convertToNum('1.23456789012345726')\n  1.23456789012345", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filTerBYPrefIx([], 'a')\n  []\n  >>> filTerBYPrefIx(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filTerBYPrefIx = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filTerBYPrefIx", "gc": "<|endoftext|>/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filTerBYPrefIx([], 'a')\n  []\n  >>> filTerBYPrefIx(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filTerBYPrefIx = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix))\n}\n\n/* Filter an input list of strings only for ones that end with a given suffix.\n  >>> filTerBYPrefIx([], 'a')\n  []\n  >>> filTerBYPrefIx(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filTerBYPrefIxEnd = (strings, suffix) => {\n  return strings.filter(s => s.endsWith(suffix))\n}\n\n/* Filter an input list of strings only for ones that do not start with a given prefix.\n  >>> filTerBYPrefIxEnd([], 'a')\n  []\n  >>> filTerBYPrefIxEnd(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'cde', 'array']\n  */\nconst filTerBYPrefIxEnd = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix))\n}\n\n/* Filter an input list of strings only for ones that do not end with a given suffix.\n  >>> filTerBYPrefIxEnd([], 'a')\n  []\n  >>> filTerBYPrefIxEnd(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'cde']\n  */\nconst filTerBYPrefIxEnd = (strings, suffix) => {\n  return strings.filter(s => s.endsWith(suffix))\n}\n\n/* Filter an input list of strings only for ones that do not start with a given prefix and do not end with a given suffix.\n  >>> filTerBYPrefIxEnd([], 'a')\n  []\n  >>> filTerBYPrefIxEnd(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'cde']\n  */\nconst filTerBYPrefIxEnd = (strings, prefix, suffix) => {\n  return strings.filter(s => s.startsWith(prefix) &&!s.endsWith(suffix))\n}\n\n/* Filter an input list of strings only for ones that do not start with a given prefix and end with a given suffix.\n  >>> filTerBYPrefIxEnd([], 'a')\n  []\n  >>> filTerBYPrefIxEnd(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'cde']\n  */\nconst filTerBYPrefIxEnd = (strings, prefix, suffix) => {\n  return strings.filter(s => s.startsWith(prefix) && s.endsWith(suffix))\n}\n\n/* Filter an input list of strings only for ones that start with a given prefix and end with a given suffix.\n  >>> filTerBYPrefIxEnd([], 'a')\n  []\n  >>> filTerBYPrefIxEnd(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'cde']\n  */\nconst filTerBYPrefIxEnd = (strings, prefix, suffix) => {\n  return strings.filter(s => s.startsWith(prefix) && s.endsWith(suffix))\n}\n\n/* Filter an input list of strings only for ones that start with a given prefix and do not end with a given suffix.\n  >>> filTerBYPrefIxEnd([], 'a')\n  []\n  >>> filTerBYPrefIxEnd(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'cde']\n  */\nconst filTerBYPrefIxEnd = (strings, prefix, suffix) => {\n  return strings.filter(s => s.startsWith(prefix) &&!s.endsWith(suffix))\n}\n\n/* Filter an input list of strings only for ones that start with a given prefix and do not end with a given suffix.\n  >>> filTerBYPrefIxEnd([], 'a')\n  []\n  >>> filTerBYPrefIxEnd(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'cde']\n  */\nconst filTerBYPrefIxEnd = (strings, prefix, suffix) => {\n  return strings.filter(s => s.startsWith(prefix) &&!s.endsWith(suffix))\n}\n\n/* Filter an input list of strings only for ones that start with a given prefix and do not end with a given suffix.\n  >>> filTerBYPrefIxEnd([], 'a')\n  []\n  >>> filTerBYPrefIxEnd(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'cde']\n  */\nconst filTerBYPrefIxEnd = (strings, prefix, suffix) => {\n  return strings.filter(s => s.startsWith(prefix) && s.endsWith(suffix))\n}\n\n/* Filter an input list of strings only for ones that start with a given prefix and do not end with a given suffix.\n  >>> filTerBYPrefIxEnd([], 'a')\n  []\n  >>> filTerBYPrefIxEnd(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'cde']\n  */\nconst filTerBYPrefIxEnd = (strings, prefix, suffix) => {\n  return strings.filter(s => s.startsWith(prefix) && s.endsWith(suffix))\n}\n\n/* Filter an input list of strings only for ones that start with a given prefix and do not end with a given suffix.\n  >>> filTerBYPrefIxEnd([], 'a')\n  []\n  >>> filTerBYPrefIxEnd(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'cde']\n  */\nconst filTerBYPrefIxEnd = (strings, prefix, suffix) => {\n  return strings.filter(s => s.startsWith(prefix) &&!s.endsWith(suffix))\n}\n\n/* Filter an input list of strings only for ones that start with a given prefix and do not end with a given suffix.\n  >>> filTerBYPrefIxEnd([], 'a')\n  []\n  >>> filTerBYPrefIxEnd(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'cde']\n  */\nconst filTerBYPrefIxEnd = (strings, prefix, suffix) => {\n  return strings.filter(s => s.startsWith(prefix) && s.endsWith(suffix))\n}\n\n/* Filter an input list of strings only for ones that start with a given prefix and do not end with a given suffix.\n  >>> filTerBYPrefIxEnd([], 'a')\n  []\n  >>> filTerBYPrefIxEnd(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'cde']\n  */\nconst filTerBYPrefIxEnd = (strings, prefix, suffix) => {\n  return strings.filter(s => s.startsWith(prefix) &&!s.endsWith(suffix))\n}\n\n/* Filter an input list of strings only for ones that start with a given prefix and do not end with a given suffix.\n  >>> filTerBYPrefIxEnd([], 'a')\n  []\n  >>> filTerBYPrefIxEnd(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'cde']\n  */\nconst filTerBYPrefIxEnd = (strings, prefix, suffix) => {\n  return strings.filter(s => s.startsWith(prefix) && s.endsWith(suffix))\n}\n\n/* Filter an input list of strings only for ones that start with a given prefix and do not end with a given suffix.\n  >>> filTerBYPrefIxEnd([], 'a')\n  []\n  >>> filTerBYP", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/3", "prompt": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belOwZeRo([1, 2, 3])\n  false\n  >>> belOwZeRo([1, 2, -4, 5])\n  true\n  */\nconst belOwZeRo = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belOwZeRo", "gc": "<|endoftext|>/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belOwZeRo([1, 2, 3])\n  false\n  >>> belOwZeRo([1, 2, -4, 5])\n  true\n  */\nconst belOwZeRo = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] === '-') {\n      balance -= operations[i + 1];\n    } else {\n      balance += operations[i];\n    }\n  }\n  return balance <= 0;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belOwZeRo([-4, -5, -6, 7])\n  false\n  >>> belOwZeRo([-4, -5, -6, 7])\n  true\n  */\nconst belOwZeRo = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] === '-') {\n      balance -= operations[i + 1];\n    } else {\n      balance += operations[i];\n    }\n  }\n  return balance >= 0;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belOwZeRo([-4, -5, -6, 7])\n  false\n  >>> belOwZeRo([-4, -5, -6, 7])\n  true\n  */\nconst belOwZeRo = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] === '-') {\n      balance -= operations[i + 1];\n    } else {\n      balance += operations[i];\n    }\n  }\n  return balance >= 0;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belOwZeRo([-4, -5, -6, 7])\n  false\n  >>> belOwZeRo([-4, -5, -6, 7])\n  true\n  */\nconst belOwZeRo = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] === '-') {\n      balance -= operations[i + 1];\n    } else {\n      balance += operations[i];\n    }\n  }\n  return balance <= 0;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belOwZeRo([-4, -5, -6, 7])\n  false\n  >>> belOwZeRo([-4, -5, -6, 7])\n  true\n  */\nconst belOwZeRo = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] === '-') {\n      balance -= operations[i + 1];\n    } else {\n      balance += operations[i];\n    }\n  }\n  return balance >= 0;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belOwZeRo([-4, -5, -6, 7])\n  false\n  >>> belOwZeRo([-4, -5, -6, 7])\n  true\n  */\nconst belOwZeRo = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] === '-') {\n      balance -= operations[i + 1];\n    } else {\n      balance += operations[i];\n    }\n  }\n  return balance <= 0;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belOwZeRo([-4, -5, -6, 7])\n  false\n  >>> belOwZeRo([-4, -5, -6, 7])\n  true\n  */\nconst belOwZeRo = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] === '-') {\n      balance -= operations[i + 1];\n    } else {\n      balance += operations[i];\n    }\n  }\n  return balance >= 0;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belOwZeRo([-4, -5, -6, 7])\n  false\n  >>> belOwZeRo([-4, -5, -6, 7])\n  true\n  */\nconst belOwZeRo = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] === '-') {\n      balance -= operations[i + 1];\n    } else {\n      balance += operations[i];\n    }\n  }\n  return balance <= 0;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belOwZeRo([-4, -5, -6, 7])\n  false\n  >>> belOwZeRo([-4, -5, -6, 7])\n  true\n  */\nconst belOwZeRo = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] === '-') {\n      balance -= operations[i + 1];\n    } else {\n      balance += operations[i];\n    }\n  }\n  return balance >= 0;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belOwZeRo([-4, -5, -6, 7])\n  false\n  >>> belOwZeRo([-4, -5, -6, 7])\n  true\n  */\nconst belOwZeRo = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] === '-') {\n      balance -= operations[i + 1];\n    } else {\n      balance += operations[i];\n    }\n  }\n  return balance <= 0;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belOwZeRo([-4, ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive numbers in the list.\n  >>> getposiTive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getposiTive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getposiTive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getposiTive", "gc": "<|endoftext|>/*Return only positive numbers in the list.\n  >>> getposiTive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getposiTive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getposiTive = (l) => {\n  let positivos = [];\n  let positivosTipos = [];\n  let positivosTiposTipos = [];\n  let positivosTiposTiposTipos = [];\n  let positivosTiposTiposTiposTipos = [];\n  let positivosTiposTiposTiposTiposTipos = [];\n  let positivosTiposTiposTiposTiposTiposTipos = [];\n  let positivosTiposTiposTiposTiposTiposTipos = [];\n  let positivosTiposTiposTiposTiposTiposTipos = [];\n  let positivosTiposTiposTiposTiposTiposTiposTipos = [];\n  let positivosTiposTiposTiposTiposTiposTiposTipos = [];\n  let positivosTiposTiposTiposTiposTiposTiposTipos = [];\n  let positivosTiposTiposTiposTiposTiposTiposTipos = [];\n  let positivosTiposTiposTiposTiposTiposTiposTipos = [];\n  let positivosTiposTiposTiposTiposTiposTiposTiposTipos = [];\n  let positivosTiposTiposTiposTiposTiposTiposTiposTipos = [];\n  let positivosTiposTiposTiposTiposTiposTiposTipos = [];\n  let positivosTiposTiposTiposTiposTiposTiposTiposTipos = [];\n  let positivosTiposTiposTiposTiposTiposTiposTiposTipos = [];\n  let positivosTiposTiposTiposTiposTiposTiposTiposTipos = [];\n  let positivosTiposTiposTiposTiposTiposTiposTiposTipos = [];\n  let positivosTiposTiposTiposTiposTiposTiposTiposTiposTipos = [];\n  let positivosTiposTiposTiposTiposTiposTiposTiposTipos = [];\n  let positivosTiposTiposTiposTiposTiposTiposTiposTipos = [];\n  let positivosTiposTiposTiposTiposTiposTiposTiposTipos = [];\n  let positivosTiposTiposTiposTiposTiposTiposTiposTipos = [];\n  let positivosTiposTiposTiposTiposTiposTiposTiposTipos = [];\n  let positivosTiposTiposTiposTiposTiposTiposTiposTipos = [];\n  let positivosTiposTiposTiposTiposTiposTiposTiposTipos = [];\n  let positivosTiposTiposTiposTiposTiposTiposTiposTipos = [];\n  let positivosTiposTiposTiposTiposTiposTiposTiposTipos = [];\n  let positivosTiposTiposTiposTiposTiposTiposTiposTiposTipos = [];\n  let positivosTiposTiposTiposTiposTiposTiposTiposTiposTipos = [];\n  let positivosTiposTiposTiposTiposTiposTiposTiposTiposTipos = [];\n  let positivosTiposTiposTiposTiposTiposTiposTiposTiposTipos = [];\n  let positivosTiposTiposTiposTiposTiposTiposTiposTiposTipos = [];\n  let positivosTiposTiposTiposTiposTiposTiposTiposTiposTipos = [];\n  let positivosTiposTiposTiposTiposTiposTiposTiposTiposTiposTipos = [];\n  let positivosTiposTiposTiposTiposTiposTiposTiposTiposTiposTipos = [];\n  let positivosTiposTiposTiposTiposTiposTiposTiposTiposTipos = [];\n  let positivosTiposTiposTiposTiposTiposTiposTiposTiposTipos = [];\n  let positivosTiposTiposTiposTiposTiposTiposTiposTiposTipos = [];\n  let positivosTiposTiposTiposTiposTiposTiposTiposTiposTipos = [];\n  let positivosTiposTiposTiposTiposTiposTiposTiposTiposTiposTipos = [];\n  let positivosTiposTiposTiposTiposTiposTiposTiposTiposTipos = [];\n  let positivosTiposTiposTiposTiposTiposTiposTiposTiposTipos = [];\n  let positivosTiposTiposTiposTiposTiposTiposTiposTiposTipos = [];\n  let positivosTiposTiposTiposTiposTiposTiposTiposTiposTipos = [];\n  let positivosTiposTiposTiposTiposTiposTiposTiposTiposTipos = [];\n  let positivosTiposTiposTiposTiposTiposTiposTiposTiposTipos = [];\n  let positivosTiposTiposTiposTiposTiposTiposTiposTiposTipos = [];\n  let positivosTiposTiposTiposTiposTiposTiposTiposTiposTipos = [];\n  let positivosTiposTiposTiposTiposTiposTiposTiposTiposTipos = [];\n  let positivosTiposTiposTiposTiposTiposTiposTiposTiposTipos = [];\n  let positivosTiposTiposTiposTiposTiposTiposTiposTiposTiposTipos = [];\n  let positivosTiposTiposTiposTiposTiposTiposTiposTiposTiposTipos = [];\n  let positivosTiposTiposTiposTiposTiposTiposTiposTiposTiposTipos = [];\n  let positivosTiposTiposTiposTiposTiposTiposTiposTiposTiposTipos = [];\n  let positivosTiposTiposTiposTiposTiposTiposTiposTiposTiposTipos = [];\n  let positivosTiposTiposTiposTiposTiposTiposTiposTiposTiposTipos = [];\n  let positivosTiposTiposTiposTiposTiposTiposTiposTiposTiposTiposTipos = [];\n  let positivosTiposTiposTiposTiposTiposTiposTiposTiposTiposTipos = [];\n  let positivosTiposTiposTiposTiposTiposTiposTiposTiposTiposTipos = [];\n  let positivosTiposTiposTiposTiposTiposTiposTi", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a given number is prime, and false otherwise.\n  >>> isPRime(6)\n  false\n  >>> isPRime(101)\n  true\n  >>> isPRime(11)\n  true\n  >>> isPRime(13441)\n  true\n  >>> isPRime(61)\n  true\n  >>> isPRime(4)\n  false\n  >>> isPRime(1)\n  false\n  */\nconst isPRime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPRime", "gc": "<|endoftext|>/*Return true if a given number is prime, and false otherwise.\n  >>> isPRime(6)\n  false\n  >>> isPRime(101)\n  true\n  >>> isPRime(11)\n  true\n  >>> isPRime(13441)\n  true\n  >>> isPRime(61)\n  true\n  >>> isPRime(4)\n  false\n  >>> isPRime(1)\n  false\n  */\nconst isPRime = (n) => {\n  if (n < 2) return false;\n  if (n % 2 === 0) return false;\n  if (n % 3 === 0) return false;\n  if (n % 5 === 0) return false;\n  if (n % 7 === 0) return false;\n  return true;\n};\n\n/*\n  Return true if a given number is prime, and false otherwise.\n  >>> isPrime(6)\n  true\n  >>> isPrime(101)\n  false\n  >>> isPrime(11)\n  false\n  >>> isPrime(13441)\n  false\n  >>> isPrime(61)\n  false\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) return false;\n  if (n % 2 === 0) return false;\n  if (n % 3 === 0) return false;\n  if (n % 5 === 0) return false;\n  if (n % 7 === 0) return false;\n  return true;\n};\n\n/*\n  Return true if a given number is prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) return false;\n  if (n % 2 === 0) return false;\n  if (n % 3 === 0) return false;\n  if (n % 5 === 0) return false;\n  if (n % 7 === 0) return false;\n  return true;\n};\n\n/*\n  Return true if a given number is prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) return false;\n  if (n % 2 === 0) return false;\n  if (n % 3 === 0) return false;\n  if (n % 5 === 0) return false;\n  if (n % 7 === 0) return false;\n  return true;\n};\n\n/*\n  Return true if a given number is prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) return false;\n  if (n % 2 === 0) return false;\n  if (n % 3 === 0) return false;\n  if (n % 5 === 0) return false;\n  if (n % 7 === 0) return false;\n  return true;\n};\n\n/*\n  Return true if a given number is prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) return false;\n  if (n % 2 === 0) return false;\n  if (n % 3 === 0) return false;\n  if (n % 5 === 0) return false;\n  if (n % 7 === 0) return false;\n  return true;\n};\n\n/*\n  Return true if a given number is prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) return false;\n  if (n % 2 === 0) return false;\n  if (n % 3 === 0) return false;\n  if (n % 5 === 0) return false;\n  if (n % 7 === 0) return false;\n  return true;\n};\n\n/*\n  Return true if a given number is prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) return false;\n  if (n % 2 === 0) return false;\n  if (n % 3 === 0) return false;\n  if (n % 5 === 0) return false;\n  if (n % 7 === 0) return false;\n  return true;\n};\n\n/*\n  Return true if a given number is prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) return false;\n  if (n % 2 === 0) return false;\n  if (n % 3 === 0) return false;\n  if (n % 5 === 0) return false;\n  if (n % 7 === 0) return false;\n  return true;\n};\n\n/*\n  Return true if a given number is prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) return false;\n  if (n % 2 === 0) return false;\n  if (n % 3 === 0) return false;\n  if (n % 5 === 0) return false;\n  if (n % 7 === 0) return false;\n  return true;\n};\n\n/*\n  Return true if a given number is prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polYnomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\nconst polY = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polYnomial.\n  findZero find x such that polY(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "polY", "gc": "<|endoftext|>/*\n  Evaluates polYnomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst polY = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polYnomial.\n  findZero find x such that polY(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  const zero = findZeroZero(xs);\n  return zero? zero : findZeroNonZero(xs);\n}\n\n/*\n  xs are coefficients of a polYnomial.\n  findZeroZero find x such that polY(x) = 0.\n  findZeroZero returns only zero point, even if there are many.\n  Moreover, findZeroZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZeroZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZeroZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZeroZero = (xs) => {\n  const zero = findZeroZeroZero(xs);\n  return zero? zero : findZeroZeroNonZero(xs);\n}\n\n/*\n  xs are coefficients of a polYnomial.\n  findZeroZeroZero find x such that polY(x) = 0.\n  findZeroZeroZero returns only zero point, even if there are many.\n  Moreover, findZeroZeroZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZeroZeroNonZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZeroZeroNonZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZeroZeroNonZero = (xs) => {\n  const zero = findZeroZeroZero(xs);\n  return zero? zero : findZeroZeroNonZero(xs);\n}\n\n/*\n  xs are coefficients of a polYnomial.\n  findZeroNonZero find x such that polY(x) = 0.\n  findZeroNonZero returns only zero point, even if there are many.\n  Moreover, findZeroNonZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZeroNonZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZeroNonZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZeroNonZero = (xs) => {\n  const zero = findZeroZero(xs);\n  return zero? zero : findZeroNonZero(xs);\n}\n\n/*\n  xs are coefficients of a polYnomial.\n  findZeroNonZero find x such that polY(x) = 0.\n  findZeroNonZero returns only zero point, even if there are many.\n  Moreover, findZeroNonZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZeroNonZeroNonZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZeroNonZeroNonZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZeroNonZeroNonZero = (xs) => {\n  const zero = findZeroZero(xs);\n  return zero? zero : findZeroNonZeroNonZero(xs);\n}\n\n/*\n  xs are coefficients of a polYnomial.\n  findZeroNonZero find x such that polY(x) = 0.\n  findZeroNonZero returns only zero point, even if there are many.\n  Moreover, findZeroNonZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZeroNonZeroNonZeroNonZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZeroNonZeroNonZeroNonZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZeroNonZeroNonZeroNonZero = (xs) => {\n  const zero = findZeroZero(xs);\n  return zero? zero : findZeroNonZeroNonZero(xs);\n}\n\n/*\n  xs are coefficients of a polYnomial.\n  findZeroNonZero find x such that polY(x) = 0.\n  findZeroNonZero returns only zero point, even if there are many.\n  Moreover, findZeroNonZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZeroNonZeroNonZeroNonZeroNonZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZeroNonZeroNonZeroNonZeroNonZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZeroNonZeroNonZeroNonZeroNonZero = (xs) => {\n  const zero = findZeroZero(xs);\n  return zero? zero : findZeroNonZeroNonZeroNonZero(xs);\n}\n\n/*\n  xs are coefficients of a polYnomial.\n  findZeroNonZero find x such that polY(x) = 0.\n  findZeroNonZero returns only zero point, even if there are many.\n  Moreover, findZeroNonZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZeroNonZeroNonZeroNonZeroNonZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZeroNonZeroNonZeroNonZeroNonZeroNonZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZeroNonZeroNonZeroNonZeroNonZero = (xs) => {\n  const zero = findZeroZero(xs);\n  return zero? zero : findZeroNonZeroNonZeroNonZero(xs);\n}\n\n/*", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/33", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sorTThiRd([1, 2, 3])\n  [1, 2, 3]\n  >>> sorTThiRd([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sorTThiRd = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sorTThiRd", "gc": "<|endoftext|>/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sorTThiRd([1, 2, 3])\n  [1, 2, 3]\n  >>> sorTThiRd([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sorTThiRd = (l) => {\n  const l2 = l.slice();\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = l2;\n  while (i < l.length) {\n    if (l[i] % 3 === 0) {\n      l2.splice(j, 1);\n      j++;\n    }\n    if (l[i] % 3 === 1) {\n      l2.splice(k, 1);\n      k++;\n    }\n    i++;\n  }\n  return l2;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sorTThiRd([1, 2, 3])\n  [1, 2, 3]\n  >>> sorTThiRd([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sorTThiRdR = (l) => {\n  const l2 = l.slice();\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = l2;\n  while (i < l.length) {\n    if (l[i] % 3 === 0) {\n      l2.splice(j, 1);\n      j++;\n    }\n    if (l[i] % 3 === 1) {\n      l2.splice(k, 1);\n      k++;\n    }\n    i++;\n  }\n  return l2;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sorTThiRdR([1, 2, 3])\n  [1, 2, 3]\n  >>> sorTThiRdR([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sorTThiRdRd = (l) => {\n  const l2 = l.slice();\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = l2;\n  while (i < l.length) {\n    if (l[i] % 3 === 0) {\n      l2.splice(j, 1);\n      j++;\n    }\n    if (l[i] % 3 === 1) {\n      l2.splice(k, 1);\n      k++;\n    }\n    i++;\n  }\n  return l2;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sorTThiRdRdR([1, 2, 3])\n  [1, 2, 3]\n  >>> sorTThiRdRdR([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sorTThiRdRdRd = (l) => {\n  const l2 = l.slice();\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = l2;\n  while (i < l.length) {\n    if (l[i] % 3 === 0) {\n      l2.splice(j, 1);\n      j++;\n    }\n    if (l[i] % 3 === 1) {\n      l2.splice(k, 1);\n      k++;\n    }\n    i++;\n  }\n  return l2;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sorTThiRdRdRdR([1, 2, 3])\n  [1, 2, 3]\n  >>> sorTThiRdRdRdR([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sorTThiRdRdRdR = (l) => {\n  const l2 = l.slice();\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = l2;\n  while (i < l.length) {\n    if (l[i] % 3 === 0) {\n      l2.splice(j, 1);\n      j++;\n    }\n    if (l[i] % 3 === 1) {\n      l2.splice(k, 1);\n      k++;\n    }\n    i++;\n  }\n  return l2;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sorTThiRdRdRdRdR([1, 2, 3])\n  [1, 2, 3]\n  >>> sorTThiRdRdRdRdR([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sorTThiRdRdRdRd = (l) => {\n  const l2 = l.slice();\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = l2;\n  while (i < l.length) {\n    if (l[i] % 3 === 0) {\n      l2.splice(j, 1);\n      j++;\n    }\n    if (l[i] % 3 === 1) {\n      l2.splice(k, 1);\n      k++;\n    }\n    i++;\n  }\n  return l2;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sorTThiRdRdRdRdRdR([1, 2, 3])\n  [1, 2, 3]\n  >>> sorTThiRdRdRdRdRdR([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sorTThiRdRdRdRdRdR = (l) => {\n  const l2 = l.slice();\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = l2;\n  while (i < l.length) {\n    if (l[i] % 3 === 0) {\n      l2.splice(j, 1);\n      j++;\n    }\n    if (l[i] % 3 === 1) {\n      l2.splice(k, 1);\n      k++;\n    }\n    i++;\n  }\n  return l2;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sorTThiRdRdRdRdRdRdR([1, 2, 3])\n  [1, 2, 3]\n  >>> sorTThiRdRdRdRdRdRdR([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sorTThiRdRdRdRdRdRdR = (l) => {\n  const l2 = l.slice();", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted uniQue elements in a list\n  >>> uniQue([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniQue = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "uniQue", "gc": "<|endoftext|>/*Return sorted uniQue elements in a list\n  >>> uniQue([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniQue = (l) => {\n  let res = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  while (i < l.length) {\n    if (l[i] === l[j]) {\n      res.push(l[i]);\n      i++;\n      j++;\n    } else {\n      if (l[j] <= l[i]) {\n        res.push(l[i]);\n        i++;\n      } else {\n        res.push(l[j]);\n        j++;\n      }\n    }\n  }\n  return res;\n};\n\n/*Return sorted unique elements in a list\n  >>> uniQue([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 3, 3, 9, 0, 123]\n  */\nconst uniQ = (l) => {\n  let res = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  while (i < l.length) {\n    if (l[i] === l[j]) {\n      res.push(l[i]);\n      i++;\n      j++;\n    } else {\n      if (l[j] <= l[i]) {\n        res.push(l[i]);\n        i++;\n      } else {\n        res.push(l[j]);\n        j++;\n      }\n    }\n  }\n  return res.sort();\n};\n\n/*Return sorted unique elements in a list\n  >>> uniQ([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 3, 3, 9, 0, 123]\n  */\nconst uniQ = (l) => {\n  let res = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  while (i < l.length) {\n    if (l[i] === l[j]) {\n      res.push(l[i]);\n      i++;\n      j++;\n    } else {\n      if (l[j] <= l[i]) {\n        res.push(l[i]);\n        i++;\n      } else {\n        res.push(l[j]);\n        j++;\n      }\n    }\n  }\n  return res.sort();\n};\n\n/*Return sorted unique elements in a list\n  >>> uniQ([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 3, 3, 9, 0, 123]\n  */\nconst uniQ = (l) => {\n  let res = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  while (i < l.length) {\n    if (l[i] === l[j]) {\n      res.push(l[i]);\n      i++;\n      j++;\n    } else {\n      if (l[j] <= l[i]) {\n        res.push(l[i]);\n        i++;\n      } else {\n        res.push(l[j]);\n        j++;\n      }\n    }\n  }\n  return res.sort();\n};\n\n/*Return sorted unique elements in a list\n  >>> uniQ([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 3, 3, 9, 0, 123]\n  */\nconst uniQ = (l) => {\n  let res = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  while (i < l.length) {\n    if (l[i] === l[j]) {\n      res.push(l[i]);\n      i++;\n      j++;\n    } else {\n      if (l[j] <= l[i]) {\n        res.push(l[i]);\n        i++;\n      } else {\n        res.push(l[j]);\n        j++;\n      }\n    }\n  }\n  return res.sort();\n};\n\n/*Return sorted unique elements in a list\n  >>> uniQ([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 3, 3, 9, 0, 123]\n  */\nconst uniQ = (l) => {\n  let res = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  while (i < l.length) {\n    if (l[i] === l[j]) {\n      res.push(l[i]);\n      i++;\n      j++;\n    } else {\n      if (l[j] <= l[i]) {\n        res.push(l[i]);\n        i++;\n      } else {\n        res.push(l[j]);\n        j++;\n      }\n    }\n  }\n  return res.sort();\n};\n\n/*Return sorted unique elements in a list\n  >>> uniQ([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 3, 3, 9, 0, 123]\n  */\nconst uniQ = (l) => {\n  let res = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  while (i < l.length) {\n    if (l[i] === l[j]) {\n      res.push(l[i]);\n      i++;\n      j++;\n    } else {\n      if (l[j] <= l[i]) {\n        res.push(l[i]);\n        i++;\n      } else {\n        res.push(l[j]);\n        j++;\n      }\n    }\n  }\n  return res.sort();\n};\n\n/*Return sorted unique elements in a list\n  >>> uniQ([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 3, 3, 9, 0, 123]\n  */\nconst uniQ = (l) => {\n  let res = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  while (i < l.length) {\n    if (l[i] === l[j]) {\n      res.push(l[i]);\n      i++;\n      j++;\n    } else {\n      if (l[j] <= l[i]) {\n        res.push(l[i]);\n        i++;\n      } else {\n        res.push(l[j]);\n        j++;\n      }\n    }\n  }\n  return res.sort();\n};\n\n/*Return sorted unique elements in a list\n  >>> uniQ([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 3, 3, 9, 0, 123]\n  */\nconst uniQ = (l) => {\n  let res = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  while (i < l.length) {\n    if (l[i] === l[j]) {\n      res.push(l[i]);\n      i++;\n      j++;\n    } else {\n      if (l[j] <= l[i]) {\n        res.push(l[i]);\n        i++;\n      } else {\n        res.push(l[j]);\n        j++;\n      }\n    }\n  }\n  return res.sort();\n};\n\n/*Return sorted unique elements in a list\n  >>> uniQ([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 3, 3, 9, 0, 123]\n  */\nconst uniQ = (l) => {\n  let res = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  while (i < l.length) {\n    if (l[i] === l[j]) {\n      res.push(l[i]);\n      i++;\n      j++;\n    } else {\n      if (l[j] <= l[i]) {\n        res.push(l[i]);\n        i++;\n      } else {\n        res.push(l[j]);\n        j++;\n      }\n    }\n  }\n  return res.sort();\n};\n\n/*Return sorted unique elements in a list\n  >>> uniQ([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 3, 3, 9, 0, 123]\n  */\nconst uniQ = (l) => {\n  let res = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  while (i < l.length) {\n    if (l[i] === l[j]) {\n      res.push(l[i]);\n      i++;\n      j++;\n    } else {\n      if (l[j] <= l[i]) {\n        res.push(l[i]);\n        i++;\n      } else {\n        res.push(l[j]);\n        j++;\n      }\n    }\n  }\n  return res.sort();\n};\n\n/*Return sorted unique elements in a list\n  >>> uniQ([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 3, 3, 9, 0, 123]\n  */\nconst uniQ = (l) => {\n  let res = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  while (i < l.length) {\n    if (l[i] === l[j]) {\n      res.push(l[i]);\n      i++;\n      j++;\n    } else {\n      if (l[j] <= l[i]) {\n        res.push(l[i]);\n        i++;\n      } else {\n        res.push(l[j]);\n        j++;\n      }\n    }\n  }\n  return res.sort();\n};\n\n/*Return sorted unique elements in a list\n  >>> uniQ([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum element in the list.\n  >>> maxelemEnt([1, 2, 3])\n  3\n  >>> maxelemEnt([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxelemEnt = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxelemEnt", "gc": "<|endoftext|>/*Return maximum element in the list.\n  >>> maxelemEnt([1, 2, 3])\n  3\n  >>> maxelemEnt([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxelemEnt = (l) => {\n  let max = 0;\n  let maxElem = null;\n  l.forEach((elem) => {\n    if (elem > max) {\n      max = elem;\n      maxElem = elem;\n    }\n  });\n  return maxElem;\n};\n\n/*Return minimum element in the list.\n  >>> minelemEnt([1, 2, 3])\n  1\n  >>> minelemEnt([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -5\n  */\nconst minelemEnt = (l) => {\n  let min = 0;\n  let minElem = null;\n  l.forEach((elem) => {\n    if (elem < min) {\n      min = elem;\n      minElem = elem;\n    }\n  });\n  return minElem;\n};\n\n/*Return sum of elements in the list.\n  >>> sumElems([1, 2, 3])\n  6\n  >>> sumElems([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -45\n  */\nconst sumElems = (l) => {\n  let sum = 0;\n  l.forEach((elem) => {\n    sum += elem;\n  });\n  return sum;\n};\n\n/*Return average of elements in the list.\n  >>> avgElems([1, 2, 3])\n  1.5\n  >>> avgElems([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  2.666666666666667\n  */\nconst avgElems = (l) => {\n  let sum = 0;\n  let avg = 0;\n  l.forEach((elem) => {\n    sum += elem;\n    avg = sum / l.length;\n  });\n  return avg;\n};\n\n/*Return median of elements in the list.\n  >>> medianElems([1, 2, 3])\n  3\n  >>> medianElems([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  12\n  */\nconst medianElems = (l) => {\n  let median = 0;\n  let medianElem = null;\n  l.forEach((elem) => {\n    if (elem > median) {\n      median = elem;\n      medianElem = elem;\n    }\n  });\n  return medianElem;\n};\n\n/*Return mode of elements in the list.\n  >>> modeElems([1, 2, 3])\n  3\n  >>> modeElems([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  3\n  */\nconst modeElems = (l) => {\n  let mode = 0;\n  let modeElem = null;\n  l.forEach((elem) => {\n    if (elem > mode) {\n      mode = elem;\n      modeElem = elem;\n    }\n  });\n  return modeElem;\n};\n\n/*Return mode of elements in the list.\n  >>> modeElems([1, 2, 3])\n  3\n  >>> modeElems([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  3\n  */\nconst modeElems = (l) => {\n  let mode = 0;\n  let modeElem = null;\n  l.forEach((elem) => {\n    if (elem > mode) {\n      mode = elem;\n      modeElem = elem;\n    }\n  });\n  return modeElem;\n};\n\n/*Return mode of elements in the list.\n  >>> modeElems([1, 2, 3])\n  3\n  >>> modeElems([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  3\n  */\nconst modeElems = (l) => {\n  let mode = 0;\n  let modeElem = null;\n  l.forEach((elem) => {\n    if (elem > mode) {\n      mode = elem;\n      modeElem = elem;\n    }\n  });\n  return modeElem;\n};\n\n/*Return mode of elements in the list.\n  >>> modeElems([1, 2, 3])\n  3\n  >>> modeElems([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  3\n  */\nconst modeElems = (l) => {\n  let mode = 0;\n  let modeElem = null;\n  l.forEach((elem) => {\n    if (elem > mode) {\n      mode = elem;\n      modeElem = elem;\n    }\n  });\n  return modeElem;\n};\n\n/*Return mode of elements in the list.\n  >>> modeElems([1, 2, 3])\n  3\n  >>> modeElems([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  3\n  */\nconst modeElems = (l) => {\n  let mode = 0;\n  let modeElem = null;\n  l.forEach((elem) => {\n    if (elem > mode) {\n      mode = elem;\n      modeElem = elem;\n    }\n  });\n  return modeElem;\n};\n\n/*Return mode of elements in the list.\n  >>> modeElems([1, 2, 3])\n  3\n  >>> modeElems([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  3\n  */\nconst modeElems = (l) => {\n  let mode = 0;\n  let modeElem = null;\n  l.forEach((elem) => {\n    if (elem > mode) {\n      mode = elem;\n      modeElem = elem;\n    }\n  });\n  return modeElem;\n};\n\n/*Return mode of elements in the list.\n  >>> modeElems([1, 2, 3])\n  3\n  >>> modeElems([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  3\n  */\nconst modeElems = (l) => {\n  let mode = 0;\n  let modeElem = null;\n  l.forEach((elem) => {\n    if (elem > mode) {\n      mode = elem;\n      modeElem = elem;\n    }\n  });\n  return modeElem;\n};\n\n/*Return mode of elements in the list.\n  >>> modeElems([1, 2, 3])\n  3\n  >>> modeElems([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  3\n  */\nconst modeElems = (l) => {\n  let mode = 0;\n  let modeElem = null;\n  l.forEach((elem) => {\n    if (elem > mode) {\n      mode = elem;\n      modeElem = elem;\n    }\n  });\n  return modeElem;\n};\n\n/*Return mode of elements in the list.\n  >>> modeElems([1, 2, 3])\n  3\n  >>> modeElems([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  3\n  */\nconst modeElems = (l) => {\n  let mode = 0;\n  let modeElem = null;\n  l.forEach((elem) => {\n    if (elem > mode) {\n      mode = elem;\n      modeElem = elem;\n    }\n  });\n  return modeElem;\n};\n\n/*Return mode of elements in the list.\n  >>> modeElems([1, 2, 3])\n  3\n  >>> modeElems([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  3\n  */\nconst modeElems = (l) => {\n  let mode = 0;\n  let modeElem = null;\n  l.forEach((elem) => {\n    if (elem > mode) {\n      mode = elem;\n      modeElem = elem;\n    }\n  });\n  return modeElem;\n};\n\n/*Return mode of elements in the list.\n  >>> modeElems([1, 2, 3])\n  3\n  >>> modeElems([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  3\n  */\nconst modeElems = (l) => {\n  let mode = 0;\n  let modeElem = null;\n  l.forEach((elem) => {\n    if (elem > mode) {\n      mode = elem;\n      modeElem = elem;\n    }\n  });\n  return modeElem;\n};\n\n/*Return mode of elements in the list.\n  >>> modeElems([1, 2, 3])\n  3\n  >>> ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizZBuzZ(50)\n  0\n  >>> fizZBuzZ(78)\n  2\n  >>> fizZBuzZ(79)\n  3\n  */\nconst fizZBuzZ = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizZBuzZ", "gc": "<|endoftext|>/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizZBuzZ(50)\n  0\n  >>> fizZBuzZ(78)\n  2\n  >>> fizZBuzZ(79)\n  3\n  */\nconst fizZBuzZ = (n) => {\n  let count = 0;\n  let digit = 0;\n  let digits = 0;\n  let digitSum = 0;\n  let digitSum2 = 0;\n  let digitSum3 = 0;\n  let digitSum4 = 0;\n  let digitSum5 = 0;\n  let digitSum6 = 0;\n  let digitSum7 = 0;\n  let digitSum8 = 0;\n  let digitSum9 = 0;\n  let digitSum10 = 0;\n  let digitSum11 = 0;\n  let digitSum12 = 0;\n  let digitSum13 = 0;\n  let digitSum14 = 0;\n  let digitSum15 = 0;\n  let digitSum16 = 0;\n  let digitSum17 = 0;\n  let digitSum18 = 0;\n  let digitSum19 = 0;\n  let digitSum20 = 0;\n  let digitSum21 = 0;\n  let digitSum22 = 0;\n  let digitSum23 = 0;\n  let digitSum24 = 0;\n  let digitSum25 = 0;\n  let digitSum26 = 0;\n  let digitSum27 = 0;\n  let digitSum28 = 0;\n  let digitSum29 = 0;\n  let digitSum30 = 0;\n  let digitSum31 = 0;\n  let digitSum32 = 0;\n  let digitSum33 = 0;\n  let digitSum34 = 0;\n  let digitSum35 = 0;\n  let digitSum36 = 0;\n  let digitSum37 = 0;\n  let digitSum38 = 0;\n  let digitSum39 = 0;\n  let digitSum40 = 0;\n  let digitSum41 = 0;\n  let digitSum42 = 0;\n  let digitSum43 = 0;\n  let digitSum44 = 0;\n  let digitSum45 = 0;\n  let digitSum46 = 0;\n  let digitSum47 = 0;\n  let digitSum48 = 0;\n  let digitSum49 = 0;\n  let digitSum50 = 0;\n  let digitSum51 = 0;\n  let digitSum52 = 0;\n  let digitSum53 = 0;\n  let digitSum54 = 0;\n  let digitSum55 = 0;\n  let digitSum56 = 0;\n  let digitSum57 = 0;\n  let digitSum58 = 0;\n  let digitSum59 = 0;\n  let digitSum60 = 0;\n  let digitSum61 = 0;\n  let digitSum62 = 0;\n  let digitSum63 = 0;\n  let digitSum64 = 0;\n  let digitSum65 = 0;\n  let digitSum66 = 0;\n  let digitSum67 = 0;\n  let digitSum68 = 0;\n  let digitSum69 = 0;\n  let digitSum70 = 0;\n  let digitSum71 = 0;\n  let digitSum72 = 0;\n  let digitSum73 = 0;\n  let digitSum74 = 0;\n  let digitSum75 = 0;\n  let digitSum76 = 0;\n  let digitSum77 = 0;\n  let digitSum78 = 0;\n  let digitSum79 = 0;\n  let digitSum80 = 0;\n  let digitSum81 = 0;\n  let digitSum82 = 0;\n  let digitSum83 = 0;\n  let digitSum84 = 0;\n  let digitSum85 = 0;\n  let digitSum86 = 0;\n  let digitSum87 = 0;\n  let digitSum88 = 0;\n  let digitSum89 = 0;\n  let digitSum90 = 0;\n  let digitSum91 = 0;\n  let digitSum92 = 0;\n  let digitSum93 = 0;\n  let digitSum94 = 0;\n  let digitSum95 = 0;\n  let digitSum96 = 0;\n  let digitSum97 = 0;\n  let digitSum98 = 0;\n  let digitSum99 = 0;\n  let digitSum100 = 0;\n  let digitSum101 = 0;\n  let digitSum102 = 0;\n  let digitSum103 = 0;\n  let digitSum104 = 0;\n  let digitSum105 = 0;\n  let digitSum106 = 0;\n  let digitSum107 = 0;\n  let digitSum108 = 0;\n  let digitSum109 = 0;\n  let digitSum110 = 0;\n  let digitSum111 = 0;\n  let digitSum112 = 0;\n  let digitSum113 = 0;\n  let digitSum114 = 0;\n  let digitSum115 = 0;\n  let digitSum116 = 0;\n  let digitSum117 = 0;\n  let digitSum118 = 0;\n  let digitSum119 = 0;\n  let digitSum120 = 0;\n  let digitSum121 = 0;\n  let digitSum122 = 0;\n  let digitSum123 = 0;\n  let digitSum124 = 0;\n  let digitSum125 = 0;\n  let digitSum126 = 0;\n  let digitSum127 = 0;\n  let digitSum128 = 0;\n  let digitSum129 = 0;\n  let digitSum130 = 0;\n  let digitSum131 = 0;\n  let digitSum132 = 0;\n  let digitSum133 = 0;\n  let digitSum134 = 0;\n  let digitSum135 = 0;\n  let digitSum136 = 0;\n  let digitSum137 = 0;\n  let digitSum138 = 0;\n  let digitSum139 = 0;\n  let digitSum140 = 0;\n  let digitSum141 = 0;\n  let digitSum142 = 0;\n  let digitSum143 = 0;\n  let digitSum144 = 0;\n  let digitSum145 = 0;\n  let digitSum146 = 0;\n  let digitSum147 = 0;\n  let digitSum148 = 0;\n  let digitSum149 = 0;\n  let digitSum150 = 0;\n  let digitSum151 = 0;\n  let digitSum152 = 0;\n  let digitSum153 = 0;\n  let digitSum154 = 0;\n  let digitSum155 = 0;\n  let digitSum156 = 0;\n  let digitSum157 = 0;\n  let digitSum158 = 0;\n  let digitSum159 = 0;\n  let digitSum160 = 0;\n  let digitSum161 = 0;\n  let digitSum162 = 0;\n  let digitSum163 = 0;\n  let digitSum164 = 0;\n  let digitSum165 = 0;\n  let digitSum166 = 0;\n  let digitSum167 = 0;\n  let digitSum168 = 0;\n  let digitSum169 = 0;\n  let digitSum170 = 0;\n  let digitSum171 = 0;\n  let digitSum172 = 0;\n  let digitSum173 = 0;\n  let digitSum174 = 0;\n  let digitSum175 = 0;\n  let digitSum176 = 0;\n  let digitSum177 = 0;\n  let digitSum178 = 0;\n  let digitSum179 = 0;\n  let digitSum180 = 0;\n  let digitSum181 = 0;\n  let digitSum182 = 0;\n  let digitSum183 = 0;\n  let digitSum184 = 0;\n  let digitSum185 = 0;\n  let digitSum186 = 0;\n  let digitSum187 = 0;\n  let digitSum188 = 0;\n  let digitSum189 = 0;\n  let digitSum190 = 0;\n  let digitSum191 = 0;\n  let digitSum192 = 0;\n  let digitSum193 = 0;\n  let digitSum194 = 0;\n  let digitSum195 = 0;\n  let digitSum196 = 0;\n  let digitSum197 = 0;\n  let digitSum198 = 0;\n  let digitSum199 = 0;\n  let digitSum200 = 0;\n  let digitSum201 = 0;\n  let digitSum202 = 0;\n  let digitSum203 = 0;\n  let digitSum204 = 0;\n  let digitSum205 = 0;\n  let digitSum206 = 0;\n  let digitSum207 = 0;\n  let digitSum208 = 0;\n  let digitSum209 = 0;\n  let digitSum210 = 0;\n  let digitSum211 = 0;\n  let digitSum212 = 0;\n  let digitSum213 = 0;\n  let digitSum214 = 0;\n  let digitSum215 = 0;\n  let digitSum216 = 0;\n  let digitSum217 = 0;\n  let digitSum218 = 0;\n  let digitSum219 = 0;\n  let digitSum220 = 0;\n  let digitSum221 = 0;\n  let digitSum222 = 0;\n  let digitSum223 = 0;\n  let digitSum224 = 0;\n  let digitSum225 = 0;\n  let digitSum226 = 0;\n  let digitSum227 = 0;\n  let digitSum228 = 0;\n  let digitSum229 = 0;\n  let digitSum230 = 0;\n  let digitSum231 = 0;\n  let digitSum232 = 0;\n  let digitSum233 = 0;\n  let digitSum234 = 0;\n  let digitSum235 = 0;\n  let digitSum236 = 0;\n  let digitSum237 = 0;\n  let digitSum238 = 0;\n  let digitSum239 = 0;\n  let digitSum240 = 0;\n  let digitSum241 = 0;\n  let digitSum242 = 0;", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/37", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sorTEveN([1, 2, 3])\n  [1, 2, 3]\n  >>> sorTEveN([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sorTEveN = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sorTEveN", "gc": "<|endoftext|>/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sorTEveN([1, 2, 3])\n  [1, 2, 3]\n  >>> sorTEveN([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sorTEveN = (l) => {\n  const l2 = l.slice();\n  const l3 = l2.sort((a, b) => a - b);\n  return l3;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the odd indicies are equal\n  to the values of the odd indicies of l, but sorted.\n  >>> sorTEveOdd([1, 2, 3])\n  [3, 2, 1]\n  >>> sorTEveOdd([5, 6, 3, 4])\n  [4, 3, 2, 1]\n  */\nconst sorTEveOdd = (l) => {\n  const l2 = l.slice();\n  const l3 = l2.sort((a, b) => b - a);\n  return l3;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sorTEveEven([1, 2, 3])\n  [1, 2, 3, 5]\n  >>> sorTEveEven([5, 6, 3, 4])\n  [5, 4, 3, 1]\n  */\nconst sorTEveEven = (l) => {\n  const l2 = l.slice();\n  const l3 = l2.sort((a, b) => a - b);\n  return l3;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the odd indicies are equal\n  to the values of the odd indicies of l, but sorted.\n  >>> sorTEveOddEven([1, 2, 3])\n  [1, 2, 3, 5, 6]\n  >>> sorTEveOddEven([5, 6, 3, 4])\n  [5, 4, 3, 2, 1]\n  */\nconst sorTEveOddEven = (l) => {\n  const l2 = l.slice();\n  const l3 = l2.sort((a, b) => b - a);\n  return l3;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sorTEveEvenEven([1, 2, 3])\n  [1, 2, 3, 5, 6]\n  >>> sorTEveEvenEven([5, 6, 3, 4])\n  [5, 4, 3, 2, 1]\n  */\nconst sorTEveEvenEven = (l) => {\n  const l2 = l.slice();\n  const l3 = l2.sort((a, b) => a - b);\n  return l3;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sorTEveOddEvenEven([1, 2, 3])\n  [1, 2, 3, 5, 6]\n  >>> sorTEveOddEvenEven([5, 6, 3, 4])\n  [5, 4, 3, 2, 1]\n  */\nconst sorTEveOddEvenEven = (l) => {\n  const l2 = l.slice();\n  const l3 = l2.sort((a, b) => b - a);\n  return l3;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sorTEveEvenEvenEven([1, 2, 3])\n  [1, 2, 3, 5, 6]\n  >>> sorTEveEvenEvenEven([5, 6, 3, 4])\n  [5, 4, 3, 2, 1]\n  */\nconst sorTEveEvenEvenEven = (l) => {\n  const l2 = l.slice();\n  const l3 = l2.sort((a, b) => a - b);\n  return l3;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sorTEveOddEvenEvenEven([1, 2, 3])\n  [1, 2, 3, 5, 6]\n  >>> sorTEveOddEvenEvenEven([5, 6, 3, 4])\n  [5, 4, 3, 2, 1]\n  */\nconst sorTEveOddEvenEvenEven = (l) => {\n  const l2 = l.slice();\n  const l3 = l2.sort((a, b) => b - a);\n  return l3;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sorTEveEvenEvenEvenEven([1, 2, 3])\n  [1, 2, 3, 5, 6]\n  >>> sorTEveEvenEvenEvenEven([5, 6, 3, 4])\n  [5, 4, 3, 2, 1]\n  */\nconst sorTEveEvenEvenEvenEven = (l) => {\n  const l2 = l.slice();\n  const l3 = l2.sort((a, b) => a - b);\n  return l3;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sorTEveEvenEvenEvenEvenEven([1, 2, 3])\n  [1, 2, 3, 5, 6]\n  >>> sorTEveEvenEvenEvenEven([5, 6, 3, 4])\n  [5, 4, 3, 2, 1]\n  */\nconst sorTEveEvenEvenEvenEven = (l) => {\n  const l2 = l.slice();\n  const l3 = l2.sort((a, b) => b - a);\n  return l3;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sorTEveEvenEvenEvenEvenEven([1, 2, 3])\n  [1, 2, 3, 5, 6]\n  >>> sorTEveEvenEvenEvenEvenEven([5, 6, 3, 4])\n  [5, 4, 3, 2, 1]\n  */\nconst sorTEveEvenEvenEvenEvenEven = (l) => {\n  const l2 = l.slice();\n  const l3 = l2.sort((a, b) => a - b);\n  return l3;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sorTEveEvenEvenEvenEvenEvenEven([1, 2, 3])\n  [1, 2, 3, 5, 6]\n  >>> sorTEveEvenEvenEvenEvenEven([5, 6, 3, 4])\n  [5, 4, 3, 2, 1]\n  */\nconst sorTEveEvenEvenEvenEvenEven = (l) => {\n  const l2 = l.slice();\n  const l3 = l2.sort((a, b) => b - a);\n  return l3;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sorTEveEvenEvenEvenEvenEvenEven([1, 2, 3])\n  [1, 2, 3, 5, 6]", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encOdeCYclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encOdeCYclic", "gc": "<|endoftext|>/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encOdeCYclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group[0] + group.slice(1));\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic2 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group[0] + group.slice(1));\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic3 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group[0] + group.slice(1));\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic4 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group[0] + group.slice(1));\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic5 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group[0] + group.slice(1));\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic6 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group[0] + group.slice(1));\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic7 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group[0] + group.slice(1));\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic8 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group[0] + group.slice(1));\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic9 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group[0] + group.slice(1));\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic10 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group[0] + group.slice(1));\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic11 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group[0] + group.slice(1));\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic12 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group[0] + group.slice(1));\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic13 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group[0] + group.slice(1));\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encode", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/39", "prompt": "/*\n  priMeFiB returns n-th number that is a Fibonacci number and it's also prime.\n  >>> priMeFiB(1)\n  2\n  >>> priMeFiB(2)\n  3\n  >>> priMeFiB(3)\n  5\n  >>> priMeFiB(4)\n  13\n  >>> priMeFiB(5)\n  89\n  */\nconst priMeFiB = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "priMeFiB", "gc": "<|endoftext|>/*\n  priMeFiB returns n-th number that is a Fibonacci number and it's also prime.\n  >>> priMeFiB(1)\n  2\n  >>> priMeFiB(2)\n  3\n  >>> priMeFiB(3)\n  5\n  >>> priMeFiB(4)\n  13\n  >>> priMeFiB(5)\n  89\n  */\nconst priMeFiB = (n) => {\n  const fibonacci = n <= 1? 1 : fibonacciHelper(n, 1);\n  return fibonacciHelper(n - 1, fibonacci);\n};\n\n/*\n  priMeFiB returns n-th number that is a Fibonacci number and it's also prime.\n  >>> priMeFiB(10)\n  4\n  >>> priMeFiB(20)\n  13\n  >>> priMeFiB(30)\n  21\n  >>> priMeFiB(50)\n  73\n  */\nconst priMeFiBPrime = (n) => {\n  const fibonacci = n <= 1? 1 : fibonacciHelper(n, 1);\n  return fibonacciHelper(n - 1, fibonacci);\n};\n\n/*\n  priMeFiB returns n-th number that is a Fibonacci number and it's also prime.\n  >>> priMeFiBPrime(1)\n  2\n  >>> priMeFiBPrime(2)\n  3\n  >>> priMeFiBPrime(3)\n  5\n  >>> priMeFiBPrime(4)\n  13\n  >>> priMeFiBPrime(5)\n  89\n  */\nconst priMeFiBPrime = (n) => {\n  const fibonacci = n <= 1? 1 : fibonacciHelper(n, 1);\n  return fibonacciHelper(n - 1, fibonacci);\n};\n\n/*\n  priMeFiB returns n-th number that is a Fibonacci number and it's also prime.\n  >>> priMeFiBPrime(10)\n  4\n  >>> priMeFiBPrime(20)\n  13\n  >>> priMeFiBPrime(30)\n  21\n  >>> priMeFiBPrime(50)\n  73\n  */\nconst priMeFiBPrimePrime = (n) => {\n  const fibonacci = n <= 1? 1 : fibonacciHelper(n, 1);\n  return fibonacciHelper(n - 1, fibonacci);\n};\n\n/*\n  priMeFiB returns n-th number that is a Fibonacci number and it's also prime.\n  >>> priMeFiBPrimePrime(1)\n  2\n  >>> priMeFiBPrimePrime(2)\n  3\n  >>> priMeFiBPrimePrime(3)\n  5\n  >>> priMeFiBPrimePrime(4)\n  13\n  >>> priMeFiBPrimePrime(5)\n  89\n  */\nconst priMeFiBPrimePrime = (n) => {\n  const fibonacci = n <= 1? 1 : fibonacciHelper(n, 1);\n  return fibonacciHelper(n - 1, fibonacci);\n};\n\n/*\n  priMeFiB returns n-th number that is a Fibonacci number and it's also prime.\n  >>> priMeFiBPrimePrime(10)\n  4\n  >>> priMeFiBPrimePrime(20)\n  13\n  >>> priMeFiBPrimePrime(30)\n  21\n  >>> priMeFiBPrimePrime(50)\n  73\n  */\nconst priMeFiBPrimePrimePrime = (n) => {\n  const fibonacci = n <= 1? 1 : fibonacciHelper(n, 1);\n  return fibonacciHelper(n - 1, fibonacci);\n};\n\n/*\n  priMeFiB returns n-th number that is a Fibonacci number and it's also prime.\n  >>> priMeFiBPrimePrimePrime(1)\n  2\n  >>> priMeFiBPrimePrimePrime(2)\n  3\n  >>> priMeFiBPrimePrimePrime(3)\n  5\n  >>> priMeFiBPrimePrimePrime(4)\n  13\n  >>> priMeFiBPrimePrimePrime(5)\n  89\n  */\nconst priMeFiBPrimePrimePrime = (n) => {\n  const fibonacci = n <= 1? 1 : fibonacciHelper(n, 1);\n  return fibonacciHelper(n - 1, fibonacci);\n};\n\n/*\n  priMeFiB returns n-th number that is a Fibonacci number and it's also prime.\n  >>> priMeFiBPrimePrimePrime(10)\n  4\n  >>> priMeFiBPrimePrimePrimePrime(20)\n  13\n  >>> priMeFiBPrimePrimePrimePrime(30)\n  21\n  >>> priMeFiBPrimePrimePrimePrime(50)\n  73\n  */\nconst priMeFiBPrimePrimePrimePrime = (n) => {\n  const fibonacci = n <= 1? 1 : fibonacciHelper(n, 1);\n  return fibonacciHelper(n - 1, fibonacci);\n};\n\n/*\n  priMeFiB returns n-th number that is a Fibonacci number and it's also prime.\n  >>> priMeFiBPrimePrimePrimePrime(1)\n  2\n  >>> priMeFiBPrimePrimePrimePrime(2)\n  3\n  >>> priMeFiBPrimePrimePrimePrime(3)\n  5\n  >>> priMeFiBPrimePrimePrimePrime(4)\n  13\n  >>> priMeFiBPrimePrimePrimePrime(5)\n  89\n  */\nconst priMeFiBPrimePrimePrimePrime = (n) => {\n  const fibonacci = n <= 1? 1 : fibonacciHelper(n, 1);\n  return fibonacciHelper(n - 1, fibonacci);\n};\n\n/*\n  priMeFiB returns n-th number that is a Fibonacci number and it's also prime.\n  >>> priMeFiBPrimePrimePrimePrime(1)\n  2\n  >>> priMeFiBPrimePrimePrimePrime(2)\n  3\n  >>> priMeFiBPrimePrimePrimePrime(3)\n  5\n  >>> priMeFiBPrimePrimePrimePrime(4)\n  13\n  >>> priMeFiBPrimePrimePrimePrimePrime(5)\n  89\n  */\nconst priMeFiBPrimePrimePrimePrimePrime = (n) => {\n  const fibonacci = n <= 1? 1 : fibonacciHelper(n, 1);\n  return fibonacciHelper(n - 1, fibonacci);\n};\n\n/*\n  priMeFiB returns n-th number that is a Fibonacci number and it's also prime.\n  >>> priMeFiBPrimePrimePrimePrimePrime(1)\n  2\n  >>> priMeFiBPrimePrimePrimePrimePrime(2)\n  3\n  ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/4", "prompt": "/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meaNAbsOlutedevIatioN([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meaNAbsOlutedevIatioN = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meaNAbsOlutedevIatioN", "gc": "<|endoftext|>/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meaNAbsOlutedevIatioN([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meaNAbsOlutedevIatioN = (numbers) => {\n  const n = numbers.length;\n  const means = numbers.map((n) => Math.round(n * 100) / 100);\n  const meansI = numbers.map((n) => Math.round(n * 100) / 100 - means[0]);\n  const meansII = numbers.map((n) => Math.round(n * 100) / 100 - means[1]);\n  const meansII = numbers.map((n) => Math.round(n * 100) / 100 - means[2]);\n  const meansIII = numbers.map((n) => Math.round(n * 100) / 100 - means[3]);\n  const meansIV = numbers.map((n) => Math.round(n * 100) / 100 - means[4]);\n  const meansV = numbers.map((n) => Math.round(n * 100) / 100 - means[5]);\n  const meansVI = numbers.map((n) => Math.round(n * 100) / 100 - means[6]);\n  const meansVII = numbers.map((n) => Math.round(n * 100) / 100 - means[7]);\n  const meansVIII = numbers.map((n) => Math.round(n * 100) / 100 - means[8]);\n  const meansVIV = numbers.map((n) => Math.round(n * 100) / 100 - means[9]);\n  const meansVV = numbers.map((n) => Math.round(n * 100) / 100 - means[10]);\n  const meansVVI = numbers.map((n) => Math.round(n * 100) / 100 - means[11]);\n  const meansVVII = numbers.map((n) => Math.round(n * 100) / 100 - means[12]);\n  const meansVVIII = numbers.map((n) => Math.round(n * 100) / 100 - means[13]);\n  const meansVVIV = numbers.map((n) => Math.round(n * 100) / 100 - means[14]);\n  const meansVVV = numbers.map((n) => Math.round(n * 100) / 100 - means[15]);\n  const meansVVVI = numbers.map((n) => Math.round(n * 100) / 100 - means[16]);\n  const meansVVVII = numbers.map((n) => Math.round(n * 100) / 100 - means[17]);\n  const meansVVVIII = numbers.map((n) => Math.round(n * 100) / 100 - means[18]);\n  const meansVVVIV = numbers.map((n) => Math.round(n * 100) / 100 - means[19]);\n  const meansVVVV = numbers.map((n) => Math.round(n * 100) / 100 - means[20]);\n  const meansVVVVI = numbers.map((n) => Math.round(n * 100) / 100 - means[21]);\n  const meansVVVVII = numbers.map((n) => Math.round(n * 100) / 100 - means[22]);\n  const meansVVVVIII = numbers.map((n) => Math.round(n * 100) / 100 - means[23]);\n  const meansVVVVIV = numbers.map((n) => Math.round(n * 100) / 100 - means[24]);\n  const meansVVVVV = numbers.map((n) => Math.round(n * 100) / 100 - means[25]);\n  const meansVVVVVI = numbers.map((n) => Math.round(n * 100) / 100 - means[26]);\n  const meansVVVVVII = numbers.map((n) => Math.round(n * 100) / 100 - means[27]);\n  const meansVVVVVIII = numbers.map((n) => Math.round(n * 100) / 100 - means[28]);\n  const meansVVVVVIV = numbers.map((n) => Math.round(n * 100) / 100 - means[29]);\n  const meansVVVVVV = numbers.map((n) => Math.round(n * 100) / 100 - means[30]);\n  const meansVVVVVVI = numbers.map((n) => Math.round(n * 100) / 100 - means[31]);\n  const meansVVVVVII = numbers.map((n) => Math.round(n * 100) / 100 - means[32]);\n  const meansVVVVVIII = numbers.map((n) => Math.round(n * 100) / 100 - means[33]);\n  const meansVVVVVIV = numbers.map((n) => Math.round(n * 100) / 100 - means[34]);\n  const meansVVVVVV = numbers.map((n) => Math.round(n * 100) / 100 - means[35]);\n  const meansVVVVVI = numbers.map((n) => Math.round(n * 100) / 100 - means[36]);\n  const meansVVVVVII = numbers.map((n) => Math.round(n * 100) / 100 - means[37]);\n  const meansVVVVVIII = numbers.map((n) => Math.round(n * 100) / 100 - means[38]);\n  const meansVVVVVIV = numbers.map((n) => Math.round(n * 100) / 100 - means[39]);\n  const meansVVVVVV = numbers.map((n) => Math.round(n * 100) / 100 - means[40]);\n  const meansVVVVVVI = numbers.map((n) => Math.round(n * 100) / 100 - means[41]);\n  const meansVVVVVVII = numbers.map((n) => Math.round(n * 100) / 100 - means[42]);\n  const meansVVVVVVIII = numbers.map((n) => Math.round(n * 100) / 100 - means[43]);\n  const meansVVVVVVIV = numbers.map((n) => Math.round(n * 100) / 100 - means[44]);\n  const meansVVVVVVV = numbers.map((n) => Math.round(n * 100) / 100 - means[45]);\n  const meansVVVVVVVI = numbers.map((n) => Math.round(n * 100) / 100 - means[46]);\n  const meansVVVVVVII = numbers.map((n) => Math.round(n * 100) / 100 - means[47]);\n  const meansVVVVVVIII = numbers.map((n) => Math.round(n * 100) / 100 - means[48]);\n  const meansVVVVVVIV = numbers.map((n) => Math.round(n * 100) / 100 - means[49]);\n  const meansVVVVVVV = numbers.map((n) => Math.round(n * 100) / 100 - means[50]);\n  const meansVVVVVVVI = numbers.map((n) => Math.round(n * 100) / 100 - means[51]);\n  const meansVVVVVVVII = numbers.map", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/40", "prompt": "/*\n  triPlessumTozerO takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triPlessumTozerO([1, 3, 5, 0])\n  false\n  >>> triPlessumTozerO([1, 3, -2, 1])\n  true\n  >>> triPlessumTozerO([1, 2, 3, 7])\n  false\n  >>> triPlessumTozerO([2, 4, -5, 3, 9, 7])\n  true\n  >>> triPlessumTozerO([1])\n  false\n  */\nconst triPlessumTozerO = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triPlessumTozerO", "gc": "<|endoftext|>/*\n  triPlessumTozerO takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triPlessumTozerO([1, 3, 5, 0])\n  false\n  >>> triPlessumTozerO([1, 3, -2, 1])\n  true\n  >>> triPlessumTozerO([1, 2, 3, 7])\n  false\n  >>> triPlessumTozerO([2, 4, -5, 3, 9, 7])\n  true\n  >>> triPlessumTozerO([1])\n  false\n  */\nconst triPlessumTozerO = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  triPlessumTozerO takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triPlessumTozerO([1, 3, 5, 0])\n  false\n  >>> triPlessumTozerO([1, 3, -2, 1])\n  true\n  >>> triPlessumTozerO([1, 2, 3, 7])\n  false\n  >>> triPlessumTozerO([2, 4, -5, 3, 9, 7])\n  true\n  >>> triPlessumTozerO([1])\n  false\n  */\nconst triPlessumTozerO = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  triPlessumTozerO takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triPlessumTozerO([1, 3, 5, 0])\n  false\n  >>> triPlessumTozerO([1, 3, -2, 1])\n  true\n  >>> triPlessumTozerO([1, 2, 3, 7])\n  false\n  >>> triPlessumTozerO([2, 4, -5, 3, 9, 7])\n  true\n  >>> triPlessumTozerO([1])\n  false\n  */\nconst triPlessumTozerO = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  triPlessumTozerO takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triPlessumTozerO([1, 3, 5, 0])\n  false\n  >>> triPlessumTozerO([1, 3, -2, 1])\n  true\n  >>> triPlessumTozerO([1, 2, 3, 7])\n  false\n  >>> triPlessumTozerO([2, 4, -5, 3, 9, 7])\n  true\n  >>> triPlessumTozerO([1])\n  false\n  */\nconst triPlessumTozerO = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  triPlessumTozerO takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triPlessumTozerO([1, 3, 5, 0])\n  false\n  >>> triPlessumTozerO([1, 3, -2, 1])\n  true\n  >>> triPlessumTozerO([1, 2, 3, 7])\n  false\n  >>> triPlessumTozerO([2, 4, -5, 3, 9, 7])\n  true\n  >>> triPlessumTozerO([1])\n  false\n  */\nconst triPlessumTozerO = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  triPlessumTozerO takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triPlessumTozerO([1, 3, 5, 0])\n  false\n  >>> triPlessumTozerO([1, 3, -2, 1])\n  true\n  >>> triPlessumTozerO([1, 2, 3, 7])\n  false\n  >>> triPlessumTozerO([2, 4, -5, 3, 9, 7])\n  true\n  >>> triPlessumTozerO([1])\n  false\n  */\nconst triPlessumTozerO = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  triPlessumTozerO takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triPlessumTozerO([1, 3, 5, 0])\n  false\n  >>> triPlessumTozerO([1, 3, -2, 1])\n  true\n  >>> triPlessumTozerO([1, 2, 3, 7])\n  false\n  >>> triPlessumTozerO([2, 4, -5, 3, 9, 7])\n  true\n  >>> triPlessumTozerO([1])\n  false\n  */\nconst triPlessumTozerO = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  triPlessumTozerO takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triPlessumTozerO([1, 3, 5, 0])\n  false\n  >>> triPlessumTozerO([1, 3, -2, 1])\n  true\n  >>> triPlessumTozerO([1, 2, 3, 7])\n  false\n  >>> triPlessumTozerO([2, 4, -5, 3, 9, 7])\n  true\n  >>> triPlessumTozerO([1])\n  false\n  */\nconst triPlessumTozerO = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  triPlessumTozerO takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triPlessumTozerO([1, 3, 5, 0])\n  false\n  >>> triPlessumTozerO([1, 3, -2, 1])\n  true\n  >>> triPlessumTozerO([1, 2, 3, 7])\n  false\n  >>> triPlessumTozerO([2, 4, -5, 3, 9, 7])\n  true\n  >>> triPlessumTozerO([1])\n  false\n  */\nconst triPlessumTozerO = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  triPlessumTozerO takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triPlessumTozerO([1, 3, 5, 0])\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carracecolliSioN = (n) => {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carracecolliSioN", "gc": "<|endoftext|>/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carracecolliSioN = (n) => {\n  const carsN = [...Array(n - 1).keys()].map(i => new Car(i));\n  const collisions = carsN.map(i => carsN[i].collide(carsN[i - 1], i));\n  return collisions.length;\n};\n\n/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carracecolliSioN2 = (n) => {\n  const carsN = [...Array(n - 1).keys()].map(i => new Car(i));\n  const collisions = carsN.map(i => carsN[i].collide(carsN[i - 1], i));\n  return collisions.length;\n};\n\n/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carracecolliSioN3 = (n) => {\n  const carsN = [...Array(n - 1).keys()].map(i => new Car(i));\n  const collisions = carsN.map(i => carsN[i].collide(carsN[i - 1], i));\n  return collisions.length;\n};\n\n/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carracecolliSioN4 = (n) => {\n  const carsN = [...Array(n - 1).keys()].map(i => new Car(i));\n  const collisions = carsN.map(i => carsN[i].collide(carsN[i - 1], i));\n  return collisions.length;\n};\n\n/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carracecolliSioN5 = (n) => {\n  const carsN = [...Array(n - 1).keys()].map(i => new Car(i));\n  const collisions = carsN.map(i => carsN[i].collide(carsN[i - 1], i));\n  return collisions.length;\n};\n\n/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carracecolliSioN6 = (n) => {\n  const carsN = [...Array(n - 1).keys()].map(i => new Car(i));\n  const collisions = carsN.map(i => carsN[i].collide(carsN[i - 1], i));\n  return collisions.length;\n};\n\n/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carracecolliSioN7 = (n) => {\n  const carsN = [...Array(n - 1).keys()].map(i => new Car(i));\n  const collisions = carsN.map(i => carsN[i].collide(carsN[i - 1], i));\n  return collisions.length;\n};\n\n/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements incremented by 1.\n  >>> incRLisT([1, 2, 3])\n  [2, 3, 4]\n  >>> incRLisT([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incRLisT = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incRLisT", "gc": "<|endoftext|>/*Return list with elements incremented by 1.\n  >>> incRLisT([1, 2, 3])\n  [2, 3, 4]\n  >>> incRLisT([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incRLisT = (l) => {\n  let res = [];\n  let i = 0;\n  while (i < l.length) {\n    res.push(l[i]);\n    i++;\n  }\n  return res;\n};\n\n/*\n  >>> incRLisT([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  >>> incRLisT([5, 3, 5, 2, 3, 3, 9, 0, 123], 1)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124, 5]\n  >>> incRLisT([5, 3, 5, 2, 3, 3, 9, 0, 123], 2)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124, 6, 5]\n  >>> incRLisT([5, 3, 5, 2, 3, 3, 9, 0, 123], 3)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124, 6, 5, 3]\n  >>> incRLisT([5, 3, 5, 2, 3, 3, 9, 0, 123], 4)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124, 6, 5, 3, 2]\n  >>> incRLisT([5, 3, 5, 2, 3, 3, 9, 0, 123], 5)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124, 6, 5, 3, 2, 1]\n  >>> incRLisT([5, 3, 5, 2, 3, 3, 9, 0, 123], 6)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124, 6, 5, 3, 2, 1, 2, 1]\n  >>> incRLisT([5, 3, 5, 2, 3, 3, 9, 0, 123], 7)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124, 6, 5, 3, 2, 1, 2, 1, 1]\n  >>> incRLisT([5, 3, 5, 2, 3, 3, 9, 0, 123], 8)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124, 6, 5, 3, 2, 1, 2, 1, 1, 1]\n  >>> incRLisT([5, 3, 5, 2, 3, 3, 9, 0, 123], 9)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124, 6, 5, 3, 2, 1, 2, 1, 1, 1, 2, 1]\n  >>> incRLisT([5, 3, 5, 2, 3, 3, 9, 0, 123], 10)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124, 6, 5, 3, 2, 1, 2, 1, 1, 1, 2, 1, 2, 1]\n  >>> incRLisT([5, 3, 5, 2, 3, 3, 9, 0, 123], 11)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124, 6, 5, 3, 2, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1]\n  >>> incRLisT([5, 3, 5, 2, 3, 3, 9, 0, 123], 12)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124, 6, 5, 3, 2, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1]\n  >>> incRLisT([5, 3, 5, 2, 3, 3, 9, 0, 123], 13)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124, 6, 5, 3, 2, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1]\n  >>> incRLisT([5, 3, 5, 2, 3, 3, 9, 0, 123], 14)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124, 6, 5, 3, 2, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1]\n  >>> incRLisT([5, 3, 5, 2, 3, 3, 9, 0, 123], 15)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124, 6, 5, 3, 2, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1]\n  >>> incRLisT([5, 3, 5, 2, 3, 3, 9, 0, 123], 16)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124, 6, 5, 3, 2, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1]\n  >>> incRLisT([5, 3, 5, 2, 3, 3, 9, 0, 123], 17)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124, 6, 5, 3, 2, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1]\n  >>> incRLisT([5, 3, 5, 2, 3, 3, 9, 0, 123], 18)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124, 6, 5, 3, 2, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1]\n  >>> incRLisT([5, 3, 5, 2, 3, 3, 9, 0, 123], 19)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124, 6, 5, 3, 2, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1]\n  >>> incRLisT([5, 3, 5, 2, 3, 3, 9, 0, 123], 20)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124, 6, 5, 3, 2, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1]\n  >>> incRLisT([5, 3, 5, 2, 3, 3, 9, 0, 123], 21)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124, 6, 5, 3, 2, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1]\n  >>> incRLisT([5, 3, 5, 2, 3, 3, 9, 0, 123], 22)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124, 6, 5, 3, 2, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1]\n  >>> incRLisT([5, 3, 5, 2, 3, 3, 9, 0, 123], 23)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124, 6, 5, 3, 2, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1]\n  >>> incRLisT([5, 3, 5, 2, 3, 3, 9, 0, 123], 24)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124, 6, 5, 3, 2, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1]\n  >>> incRLisT([5, 3, 5, 2, 3, 3, 9, 0, 123], 25)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124, 6, 5, 3, 2, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1]\n  >>> incRLisT([5, 3, 5, 2, 3, 3, 9, 0, 123], 26)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124, 6, 5, 3, 2, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1]\n  >>> incRLisT([5, 3, 5, 2, 3, 3, 9, 0, 123], 27)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124, 6, 5, 3, 2, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1]\n  >>> incRLisT([5, 3, 5, 2, 3, 3, 9, 0, 123], 28)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124, 6, 5, 3, 2, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1]\n  >>> incRLisT([5, 3, 5, 2, 3, 3, 9, 0, 123], 29)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124, 6, 5, 3, 2, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1]\n  >>> incRLisT([5, 3, 5, 2, 3, 3, 9, 0, 123], 30)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124, 6, 5, 3, 2, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1]\n  >>> incRLisT([5, 3, 5, 2, 3, 3, 9, 0, 123], 31)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124, 6, 5, 3, 2, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/43", "prompt": "/*\n  paiRsSuMToZeRo takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> paiRsSuMToZeRo([1, 3, 5, 0])\n  false\n  >>> paiRsSuMToZeRo([1, 3, -2, 1])\n  false\n  >>> paiRsSuMToZeRo([1, 2, 3, 7])\n  false\n  >>> paiRsSuMToZeRo([2, 4, -5, 3, 5, 7])\n  true\n  >>> paiRsSuMToZeRo([1])\n  false\n  */\nconst paiRsSuMToZeRo = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "paiRsSuMToZeRo", "gc": "<|endoftext|>/*\n  paiRsSuMToZeRo takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> paiRsSuMToZeRo([1, 3, 5, 0])\n  false\n  >>> paiRsSuMToZeRo([1, 3, -2, 1])\n  false\n  >>> paiRsSuMToZeRo([1, 2, 3, 7])\n  false\n  >>> paiRsSuMToZeRo([2, 4, -5, 3, 5, 7])\n  true\n  >>> paiRsSuMToZeRo([1])\n  false\n  */\nconst paiRsSuMToZeRo = (l) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      count++;\n    }\n  }\n  return count === 2;\n};\n\n/**\n  paiRsSuMToZe takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to one, and false otherwise.\n  >>> paiRsSuMToZe([1, 3, 5, 0])\n  false\n  >>> paiRsSuMToZe([1, 3, -2, 1])\n  false\n  >>> paiRsSuMToZe([1, 2, 3, 7])\n  false\n  >>> paiRsSuMToZe([2, 4, -5, 3, 5, 7])\n  true\n  >>> paiRsSuMToZe([1])\n  false\n  */\nconst paiRsSuMToZe = (l) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 1) {\n      count++;\n    }\n  }\n  return count === 2;\n};\n\n/**\n  paiRsSuMToZe takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> paiRsSuMToZe([1, 3, 5, 0])\n  false\n  >>> paiRsSuMToZe([1, 3, -2, 1])\n  false\n  >>> paiRsSuMToZe([1, 2, 3, 7])\n  false\n  >>> paiRsSuMToZe([2, 4, -5, 3, 5, 7])\n  true\n  >>> paiRsSuMToZe([1])\n  false\n  */\nconst paiRsSuMToZ = (l) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      count++;\n    }\n  }\n  return count === 2;\n};\n\n/**\n  paiRsSuMToZe takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to one, and false otherwise.\n  >>> paiRsSuMToZe([1, 3, 5, 0])\n  false\n  >>> paiRsSuMToZe([1, 3, -2, 1])\n  false\n  >>> paiRsSuMToZe([1, 2, 3, 7])\n  false\n  >>> paiRsSuMToZe([2, 4, -5, 3, 5, 7])\n  true\n  >>> paiRsSuMToZe([1])\n  false\n  */\nconst paiRsSuMToZe = (l) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 1) {\n      count++;\n    }\n  }\n  return count === 2;\n};\n\n/**\n  paiRsSuMToZe takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> paiRsSuMToZe([1, 3, 5, 0])\n  false\n  >>> paiRsSuMToZe([1, 3, -2, 1])\n  false\n  >>> paiRsSuMToZe([1, 2, 3, 7])\n  false\n  >>> paiRsSuMToZe([2, 4, -5, 3, 5, 7])\n  true\n  >>> paiRsSuMToZe([1])\n  false\n  */\nconst paiRsSuMToZ = (l) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      count++;\n    }\n  }\n  return count === 2;\n};\n\n/**\n  paiRsSuMToZe takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to one, and false otherwise.\n  >>> paiRsSuMToZe([1, 3, 5, 0])\n  false\n  >>> paiRsSuMToZe([1, 3, -2, 1])\n  false\n  >>> paiRsSuMToZe([1, 2, 3, 7])\n  false\n  >>> paiRsSuMToZe([2, 4, -5, 3, 5, 7])\n  true\n  >>> paiRsSuMToZe([1])\n  false\n  */\nconst paiRsSuMToZe = (l) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 1) {\n      count++;\n    }\n  }\n  return count === 2;\n};\n\n/**\n  paiRsSuMToZe takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> paiRsSuMToZe([1, 3, 5, 0])\n  false\n  >>> paiRsSuMToZe([1, 3, -2, 1])\n  false\n  >>> paiRsSuMToZe([1, 2, 3, 7])\n  false\n  >>> paiRsSuMToZe([2, 4, -5, 3, 5, 7])\n  true\n  >>> paiRsSuMToZe([1])\n  false\n  */\nconst paiRsSuMToZ = (l) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      count++;\n    }\n  }\n  return count === 2;\n};\n\n/**\n  paiRsSuMToZe takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to one, and false otherwise.\n  >>> paiRsSuMToZe([1, 3, 5, 0])\n  false\n  >>> paiRsSuMToZe([1, 3, -2, 1])\n  false\n  >>> paiRsSuMToZe([1, 2, 3, 7])\n  false\n  >>> paiRsSuMToZe([2, 4, -5, 3, 5, 7])\n  true\n  >>> paiRsSuMToZe([1])\n  false\n  */\nconst paiRsSuMToZ = (l) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 1) {\n      count++;\n    }\n  }\n  return count === 2;\n};\n\n/**\n  paiRsSuMToZe takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> paiRsSuMToZe([1, 3, 5, 0])\n  false\n  >>> ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> chaNgeBAse(8, 3)\n  '22'\n  >>> chaNgeBAse(8, 2)\n  '1000'\n  >>> chaNgeBAse(7, 2)\n  '111'\n  */\nconst chaNgeBAse = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "chaNgeBAse", "gc": "<|endoftext|>/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> chaNgeBAse(8, 3)\n  '22'\n  >>> chaNgeBAse(8, 2)\n  '1000'\n  >>> chaNgeBAse(7, 2)\n  '111'\n  */\nconst chaNgeBAse = (x, base) => {\n  let str = x.toString(base);\n  while (str.length < base) str = '0' + str;\n  return str;\n};\n\n/**\n * Convert a string to hexadecimal.\n *\n * @param {String} str\n * @return {String}\n */\nconst chaNgeHex = (str) => {\n  let hex = str.replace(/[a-f0-9]{2}/g, function(str) {\n    return String.fromCharCode(parseInt(str, 16));\n  });\n  return hex;\n};\n\n/**\n * Convert a string to hexadecimal.\n *\n * @param {String} str\n * @return {String}\n */\nconst chaNgeHexB = (str) => {\n  let hex = str.replace(/[a-f0-9]{2}/g, function(str) {\n    return String.fromCharCode(parseInt(str, 16));\n  });\n  return hex;\n};\n\n/**\n * Convert a string to hexadecimal.\n *\n * @param {String} str\n * @return {String}\n */\nconst chaNgeHexBs = (str) => {\n  let hex = str.replace(/[a-f0-9]{2}/g, function(str) {\n    return String.fromCharCode(parseInt(str, 16));\n  });\n  return hex;\n};\n\n/**\n * Convert a string to hexadecimal.\n *\n * @param {String} str\n * @return {String}\n */\nconst chaNgeHexBse = (str) => {\n  let hex = str.replace(/[a-f0-9]{2}/g, function(str) {\n    return String.fromCharCode(parseInt(str, 16));\n  });\n  return hex;\n};\n\n/**\n * Convert a string to hexadecimal.\n *\n * @param {String} str\n * @return {String}\n */\nconst chaNgeHexBseB = (str) => {\n  let hex = str.replace(/[a-f0-9]{2}/g, function(str) {\n    return String.fromCharCode(parseInt(str, 16));\n  });\n  return hex;\n};\n\n/**\n * Convert a string to hexadecimal.\n *\n * @param {String} str\n * @return {String}\n */\nconst chaNgeHexBseBs = (str) => {\n  let hex = str.replace(/[a-f0-9]{2}/g, function(str) {\n    return String.fromCharCode(parseInt(str, 16));\n  });\n  return hex;\n};\n\n/**\n * Convert a string to hexadecimal.\n *\n * @param {String} str\n * @return {String}\n */\nconst chaNgeHexBseBse = (str) => {\n  let hex = str.replace(/[a-f0-9]{2}/g, function(str) {\n    return String.fromCharCode(parseInt(str, 16));\n  });\n  return hex;\n};\n\n/**\n * Convert a string to hexadecimal.\n *\n * @param {String} str\n * @return {String}\n */\nconst chaNgeHexBseBseB = (str) => {\n  let hex = str.replace(/[a-f0-9]{2}/g, function(str) {\n    return String.fromCharCode(parseInt(str, 16));\n  });\n  return hex;\n};\n\n/**\n * Convert a string to hexadecimal.\n *\n * @param {String} str\n * @return {String}\n */\nconst chaNgeHexBseBseBs = (str) => {\n  let hex = str.replace(/[a-f0-9]{2}/g, function(str) {\n    return String.fromCharCode(parseInt(str, 16));\n  });\n  return hex;\n};\n\n/**\n * Convert a string to hexadecimal.\n *\n * @param {String} str\n * @return {String}\n */\nconst chaNgeHexBseBseBse = (str) => {\n  let hex = str.replace(/[a-f0-9]{2}/g, function(str) {\n    return String.fromCharCode(parseInt(str, 16));\n  });\n  return hex;\n};\n\n/**\n * Convert a string to hexadecimal.\n *\n * @param {String} str\n * @return {String}\n */\nconst chaNgeHexBseBseBseB = (str) => {\n  let hex = str.replace(/[a-f0-9]{2}/g, function(str) {\n    return String.fromCharCode(parseInt(str, 16));\n  });\n  return hex;\n};\n\n/**\n * Convert a string to hexadecimal.\n *\n * @param {String} str\n * @return {String}\n */\nconst chaNgeHexBseBseBseBs = (str) => {\n  let hex = str.replace(/[a-f0-9]{2}/g, function(str) {\n    return String.fromCharCode(parseInt(str, 16));\n  });\n  return hex;\n};\n\n/**\n * Convert a string to hexadecimal.\n *\n * @param {String} str\n * @return {String}\n */\nconst chaNgeHexBseBseBseBse = (str) => {\n  let hex = str.replace(/[a-f0-9]{2}/g, function(str) {\n    return String.fromCharCode(parseInt(str, 16));\n  });\n  return hex;\n};\n\n/**\n * Convert a string to hexadecimal.\n *\n * @param {String} str\n * @return {String}\n */\nconst chaNgeHexBseBseBseBseB = (str) => {\n  let hex = str.replace(/[a-f0-9]{2}/g, function(str) {\n    return String.fromCharCode(parseInt(str, 16));\n  });\n  return hex;\n};\n\n/**\n * Convert a string to hexadecimal.\n *\n * @param {String} str\n * @return {String}\n */\nconst chaNgeHexBseBseBseBseBse = (str) => {\n  let hex = str.replace(/[a-f0-9]{2}/g, function(str) {\n    return String.fromCharCode(parseInt(str, 16));\n  });\n  return hex;\n};\n\n/**\n * Convert a string to hexadecimal.\n *\n * @param {String} str\n * @return {String}\n */\nconst chaNgeHexBseBseBseBseBseBse = (str) => {\n  let hex = str.replace(/[a-f0-9]{2}/g, function(str) {\n    return String.fromCharCode(parseInt(str, 16));\n  });\n  return hex;\n};\n\n/**\n * Convert a string to hexadecimal.\n *\n * @param {String} str\n * @return {String}\n */\nconst chaNgeHexBseBseBseBseBseBseBseB = (str) => {\n  let hex = str.replace(/[a-f0-9]{2}/g, function(str) {\n    return String.fromCharCode(parseInt(str, 16));\n  });\n  return hex;\n};\n\n/**\n * Convert a string to hexadecimal.\n *\n * @param {String} str\n * @return {String}\n */\nconst chaNgeHexBseBseBseBseBseBseBseBseB = (str) => {\n  let hex = str.replace(/[a-f0-9]{2}/g, function(str) {\n    return String.fromCharCode(parseInt(str, 16));\n  });\n  return hex;\n};\n\n/**\n * Convert a string to hexadecimal.\n *\n * @param {String} str\n * @return {String}\n */\nconst chaNgeHexBseBseBseBseBseBseBseBseBseBseB = (str) => {\n  let hex = str.replace(/[a-f0-9]{2}/g, function(str) {\n    return String.fromCharCode(parseInt(str, 16));\n  });\n  return hex;\n};\n\n/**\n * Convert a string to hexadecimal.\n *\n * @param {String} str\n * @return {String}\n */\nconst chaNgeHexBseBseBseBseBseBseBseBseBseBseBseBseBseBseBseBseB", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(5, 3)\n  7.5\n  */\nconst triAnglEArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triAnglEArea", "gc": "<|endoftext|>/*Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(5, 3)\n  7.5\n  */\nconst triAnglEArea = (a, h) => {\n  return Math.sqrt(a * a + h * h);\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(5, 3)\n  7.5\n  */\nconst triAnglEArea = (a, h) => {\n  return Math.sqrt(a * a + h * h);\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(5, 3)\n  7.5\n  */\nconst triAnglEArea = (a, h) => {\n  return Math.sqrt(a * a + h * h);\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(5, 3)\n  7.5\n  */\nconst triAnglEArea = (a, h) => {\n  return Math.sqrt(a * a + h * h);\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(5, 3)\n  7.5\n  */\nconst triAnglEArea = (a, h) => {\n  return Math.sqrt(a * a + h * h);\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(5, 3)\n  7.5\n  */\nconst triAnglEArea = (a, h) => {\n  return Math.sqrt(a * a + h * h);\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(5, 3)\n  7.5\n  */\nconst triAnglEArea = (a, h) => {\n  return Math.sqrt(a * a + h * h);\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(5, 3)\n  7.5\n  */\nconst triAnglEArea = (a, h) => {\n  return Math.sqrt(a * a + h * h);\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(5, 3)\n  7.5\n  */\nconst triAnglEArea = (a, h) => {\n  return Math.sqrt(a * a + h * h);\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(5, 3)\n  7.5\n  */\nconst triAnglEArea = (a, h) => {\n  return Math.sqrt(a * a + h * h);\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(5, 3)\n  7.5\n  */\nconst triAnglEArea = (a, h) => {\n  return Math.sqrt(a * a + h * h);\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(5, 3)\n  7.5\n  */\nconst triAnglEArea = (a, h) => {\n  return Math.sqrt(a * a + h * h);\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(5, 3)\n  7.5\n  */\nconst triAnglEArea = (a, h) => {\n  return Math.sqrt(a * a + h * h);\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(5, 3)\n  7.5\n  */\nconst triAnglEArea = (a, h) => {\n  return Math.sqrt(a * a + h * h);\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(5, 3)\n  7.5\n  */\nconst triAnglEArea = (a, h) => {\n  return Math.sqrt(a * a + h * h);\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(5, 3)\n  7.5\n  */\nconst triAnglEArea = (a, h) => {\n  return Math.sqrt(a * a + h * h);\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(5, 3)\n  7.5\n  */\nconst triAnglEArea = (a, h) => {\n  return Math.sqrt(a * a + h * h);\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(5, 3)\n  7.5\n  */\nconst triAnglEArea = (a, h) => {\n  return Math.sqrt(a * a + h * h);\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(5, 3)\n  7.5\n  */\nconst triAnglEArea = (a, h) => {\n  return Math.sqrt(a * a + h * h);\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(5, 3)\n  7.5\n  */\nconst triAnglEArea = (a, h) => {\n  return Math.sqrt(a * a + h * h);\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(5, 3)\n  7.5\n  */\nconst triAnglEArea = (a, h) => {\n  return Math.sqrt(a * a + h * h);\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(5, 3)\n  7.5\n  */\nconst triAnglEArea = (a, h) => {\n  return Math.sqrt(a * a + h * h);\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(5, 3)\n  7.5\n  */\nconst triAnglEArea = (a, h) => {\n  return Math.sqrt(a * a + h * h);\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(5, 3)\n  7.5\n  */\nconst triAnglEArea = (a, h) => {\n  return Math.sqrt(a * a + h * h);\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(5, 3)\n  7.5\n  */\nconst triAnglEArea = (a, h) => {\n  return Math.sqrt(a * a + h * h);\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(5, 3)\n  7.5\n  */\nconst triAnglEArea = (a, h) => {\n  return Math.sqrt(a * a + h * h);\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(5, 3)\n  7.5\n  */\nconst triAnglEArea = (a, h) => {\n  return Math.sqrt(a * a + h * h);\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(5, 3)\n  7.5\n  */\nconst triAnglEArea = (a, h) => {\n  return Math.sqrt(a * a + h * h);\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(5, 3)\n  7.5\n  */\nconst triAnglEArea = (a, h) => {\n  return Math.sqrt(a * a + h * h);\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(5, 3)\n  7.5\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "gc": "<|endoftext|>/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n < 1) {\n    return 0;\n  }\n  return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4);\n};\n\n/*\n  Write a function to efficiently compute the n-th element of the Fibonacci sequence whose first element is fib(n) and whose last element is fib(n+1).\n  >>> fib(n) = fib(n-1) + fib(n-2) + fib(n-3) + fib(n-4) + fib(n-5) + fib(n-6) + fib(n-7) + fib(n-8) + fib(n-9) + fib(n-10) + fib(n-11) + fib(n-12) + fib(n-13) + fib(n-14) + fib(n-15) + fib(n-16) + fib(n-17) + fib(n-18) + fib(n-19) + fib(n-20) + fib(n-21) + fib(n-22) + fib(n-23) + fib(n-24) + fib(n-25) + fib(n-26) + fib(n-27) + fib(n-28) + fib(n-29) + fib(n-30) + fib(n-31) + fib(n-32) + fib(n-33) + fib(n-34) + fib(n-35) + fib(n-36) + fib(n-37) + fib(n-38) + fib(n-39) + fib(n-40) + fib(n-41) + fib(n-42) + fib(n-43) + fib(n-44) + fib(n-45) + fib(n-46) + fib(n-47) + fib(n-48) + fib(n-49) + fib(n-50) + fib(n-51) + fib(n-52) + fib(n-53) + fib(n-54) + fib(n-55) + fib(n-56) + fib(n-57) + fib(n-58) + fib(n-59) + fib(n-60) + fib(n-61) + fib(n-62) + fib(n-63) + fib(n-64) + fib(n-65) + fib(n-66) + fib(n-67) + fib(n-68) + fib(n-69) + fib(n-70) + fib(n-71) + fib(n-72) + fib(n-73) + fib(n-74) + fib(n-75) + fib(n-76) + fib(n-77) + fib(n-78) + fib(n-79) + fib(n-80) + fib(n-81) + fib(n-82) + fib(n-83) + fib(n-84) + fib(n-85) + fib(n-86) + fib(n-87) + fib(n-88) + fib(n-89) + fib(n-90) + fib(n-91) + fib(n-92) + fib(n-93) + fib(n-94) + fib(n-95) + fib(n-96) + fib(n-97) + fib(n-98) + fib(n-99) + fib(n-100) + fib(n-101) + fib(n-102) + fib(n-103) + fib(n-104) + fib(n-105) + fib(n-106) + fib(n-107) + fib(n-108) + fib(n-109) + fib(n-110) + fib(n-111) + fib(n-112) + fib(n-113) + fib(n-114) + fib(n-115) + fib(n-116) + fib(n-117) + fib(n-118) + fib(n-119) + fib(n-120) + fib(n-121) + fib(n-122) + fib(n-123) + fib(n-124) + fib(n-125) + fib(n-126) + fib(n-127) + fib(n-128) + fib(n-129) + fib(n-130) + fib(n-131) + fib(n-132) + fib(n-133) + fib(n-134)\n  >>> fib(n) = fib(n-1) + fib(n-2) + fib(n-3) + fib(n-4) + fib(n-5) + fib(n-6) + fib(n-7) + fib(n-8) + fib(n-9) + fib(n-10) + fib(n-11) + fib(n-12) + fib(n-13) + fib(n-14) + fib(n-15) + fib(n-16) + fib(n-17) + fib(n-18) + fib(n-19) + fib(n-20) + fib(n-21) + fib(n-22) + fib(n-23) + fib(n-24) + fib(n-25) + fib(n-26) + fib(n-27) + fib(n-28) + fib(n-29) + fib(n-30) + fib(n-31) + fib(n-32) + fib(n-33) + fib(n-34) + fib(n-35) + fib(n-36) + fib(n-37) + fib(n-38) + fib(n-39) + fib(n-40) + fib(n-41) + fib(n-42) + fib(n-43) + fib(n-44) + fib(n-45) + fib(n-46) + fib(n-47) + fib(n-48) + fib(n-49) + fib(n-50) + fib(n-51) + fib(n-52) + fib(n-53) + fib(n-54) + fib(n-55) + fib(n-56) + fib(n-57) + fib(n-58) + fib(n-59) + fib(n-60) + fib(n-61) + fib(n-62) + fib(n-63) + fib(n-64) + fib(n-65) + fib(n-66) + fib(n-67) + fib(n-68) + fib(n-69) + fib(n-70) + fib(n-71) + fib(n-72) + fib(n-73) + fib(n-74) + fib(n-75) + fib(n-76) + fib(n-77) + fib(n-78) + fib(n-79) + fib(n-80) + fib(n-81) + fib(n-82) + fib(n-83) + fib(n-84) + fib(n-85) + fib(n-86) + fib(n-87) + fib(n-88) + fib(n-89) + fib(n-90) + fib(n-91) + fib(n-92) + fib(n-93) + fib(n-94) + fib(n-95) + fib(n-96) + fib(n-97) + fib(n-98) + fib(n-99) + fib(n-100) + fib(n-101) + fib(n-102) + fib(n-103) + fib(n-104) + fib(n-105) + fib(n-106) + fib(n-107) + fib(n-108) + fib(n-109) + fib(n-110) + fib(n-111) + fib(n-112) + fib(n-113) + fib(n-114) + fib(n-115) + fib(n-116) + fib(n-117) + fib(n-118) + fib(n-119) + fib(n-120) + fib(n-121) + fib(n-122) + fib(n-123) + fib(n-124) + fib(n-125) + fib(n-126) + fib(n-127) + fib(n-128) + fib(n-129) + fib(n-130) + fib(n-131) + fib(n-132) + fib(n-133) + fib(n-134)\n  >>> fib(n) = fib(n-1) + fib(n-2) + fib(n-3) + fib(n-4) + fib(n-5) + fib(n-6) + fib(n-7) + fib(n-8) + fib(n-9) + fib(n-10) + fib(n-11) + fib(n-12) + fib(n-13) + fib(n-14) + fib(n-15) + ", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3}
{"task_id": "JavaScript/47", "prompt": "/*Return medIan of elements in the list l.\n  >>> medIan([3, 1, 2, 4, 5])\n  3\n  >>> medIan([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medIan = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "medIan", "gc": "<|endoftext|>/*Return medIan of elements in the list l.\n  >>> medIan([3, 1, 2, 4, 5])\n  3\n  >>> medIan([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medIan = (l) => {\n  let sum = 0;\n  let count = 0;\n  let max = 0;\n  let min = 0;\n  let maxIan = 0;\n  let minIan = 0;\n  let maxIanI = 0;\n  let minIanI = 0;\n  let maxIanI = 0;\n  let minIanI = 0;\n  let maxIanI = 0;\n  let minIanI = 0;\n  let maxIanI = 0;\n  let minIanI = 0;\n  let maxIanI = 0;\n  let minIanI = 0;\n  let maxIanI = 0;\n  let minIanI = 0;\n  let maxIanI = 0;\n  let minIanI = 0;\n  let maxIanI = 0;\n  let minIanI = 0;\n  let maxIanI = 0;\n  let minIanI = 0;\n  let maxIanI = 0;\n  let minIanI = 0;\n  let maxIanI = 0;\n  let minIanI = 0;\n  let maxIanI = 0;\n  let minIanI = 0;\n  let maxIanI = 0;\n  let minIanI = 0;\n  let maxIanI = 0;\n  let minIanI = 0;\n  let maxIanI = 0;\n  let minIanI = 0;\n  let maxIanI = 0;\n  let minIanI = 0;\n  let maxIanI = 0;\n  let minIanI = 0;\n  let maxIanI = 0;\n  let minIanI = 0;\n  let maxIanI = 0;\n  let minIanI = 0;\n  let maxIanI = 0;\n  let minIanI = 0;\n  let maxIanI = 0;\n  let minIanI = 0;\n  let maxIanI = 0;\n  let minIanI = 0;\n  let maxIanI = 0;\n  let minIanI = 0;\n  let maxIanI = 0;\n  let minIanI = 0;\n  let maxIanI = 0;\n  let minIanI = 0;\n  let maxIanI = 0;\n  let minIanI = 0;\n  let maxIanI = 0;\n  let minIanI = 0;\n  let maxIanI = 0;\n  let minIanI = 0;\n  let maxIanI = 0;\n  let minIanI = 0;\n  let maxIanI = 0;\n  let minIanI = 0;\n  let maxIanI = 0;\n  let minIanI = 0;\n  let maxIanI = 0;\n  let minIanI = 0;\n  let maxIanI = 0;\n  let minIanI = 0;\n  let maxIanI = 0;\n  let minIanI = 0;\n  let maxIanI = 0;\n  let minIanI = 0;\n  let maxIanI = 0;\n  let minIanI = 0;\n  let maxIanI = 0;\n  let minIanI = 0;\n  let maxIanI = 0;\n  let minIanI = 0;\n  let maxIanI = 0;\n  let minIanI = 0;\n  let maxIanI = 0;\n  let minIanI = 0;\n  let maxIanI = 0;\n  let minIanI = 0;\n  let maxIanI = 0;\n  let minIanI = 0;\n  let maxIanI = 0;\n  let minIanI = 0;\n  let maxIanI = 0;\n  let minIanI = 0;\n  let maxIanI = 0;\n  let minIanI = 0;\n  let maxIanI = 0;\n  let minIanI = 0;\n  let maxIanI = 0;\n  let minIanI = 0;\n  let maxIanI = 0;\n  let minIanI = 0;\n  let maxIanI = 0;\n  let minIanI = 0;\n  let maxIanI = 0;\n  let minIanI = 0;\n  let maxIanI = 0;\n  let minIanI = 0;\n  let maxIanI = 0;\n  let minIanI = 0;\n  let maxIanI = 0;\n  let minIanI = 0;\n  let maxIanI = 0;\n  let minIanI = 0;\n  let maxIanI = 0;\n  let minIanI = 0;\n  let maxIanI = 0;\n  let minIanI = 0;\n  let maxIanI = 0;\n  let minIanI = 0;\n  let maxIanI = 0;\n  let minIanI = 0;\n  let maxIanI = 0;\n  let minIanI = 0;\n  let maxIanI = 0;\n  let minIanI = 0;\n  let maxIanI = 0;\n  let minIanI = 0;\n  let maxIanI = 0;\n  let minIanI = 0;\n  let maxIanI = 0;\n  let minIanI = 0;\n  let maxIanI = 0;\n  let minIanI = 0;\n  let maxIanI = 0;\n  let minIanI = 0;\n  let maxIanI = 0;\n  let minIanI = 0;\n  let maxIanI = 0;\n  let minIanI = 0;\n  let maxIanI = 0;\n  let minIanI = 0;\n  let maxIanI = 0;\n  let minIanI = 0;\n  let maxIanI = 0;\n  let minIanI = 0;\n  let maxIanI = 0;\n  let minIanI = 0;\n  let maxIanI = 0;\n  let minIanI = 0;\n  let maxIanI = 0;\n  let minIanI = 0;\n  let maxIanI = 0;\n  let minIanI = 0;\n  let maxIanI = 0;\n  let minIanI = 0;\n  let maxIanI = 0;\n  let minIanI = 0;\n  let maxIanI = 0;\n  let minIanI = 0;\n  let maxIanI = 0;\n  let minIanI = 0;\n  let maxIanI = 0;\n  let minIanI = 0;\n  let maxIanI = 0;\n  let minIanI = 0;\n  let maxIanI = 0;\n  let minIanI = 0;\n  let maxIanI = 0;\n  let minIanI = 0;\n  let maxIanI = 0;\n  let minIanI = 0;\n  let maxIanI = 0;\n  let minIanI = 0;\n  let maxIanI = 0;\n  let minIanI = 0;\n  let maxIanI = 0;\n  let minIanI = 0;\n  let maxIanI = 0;\n  let minIanI = 0;\n  let maxIanI = 0;\n  let minIanI = 0;\n  let maxIanI = 0;\n  let minIanI = 0;\n  let maxIanI = 0;\n  let minIanI = 0;\n  let maxIanI = 0;\n  let minIanI = 0;\n  let maxIanI = 0;\n  let minIanI = 0;\n  let maxIanI = 0;\n  let minIanI = 0;\n  let maxIanI = 0;\n  let minIanI = 0;\n  let maxIanI = 0;\n  let minIanI = 0;\n  let maxIanI = 0;\n  let minIanI = 0;\n  let maxIanI = 0;\n  let minIanI = 0;\n  let maxIanI = 0;\n  let minIanI = 0;\n  let maxIanI = 0;\n  let minIanI = 0;\n  let maxIanI = 0;\n  let minIanI = 0;\n  let maxIanI = 0;\n  let minIanI = 0;\n  let maxIanI = 0;\n  let minIanI = 0;\n  let maxIanI = 0;\n  let minIanI = 0;\n  let maxIanI = 0;\n  let minIanI = 0;", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if given string is a palindrome\n  >>> isPAlinDrome('')\n  true\n  >>> isPAlinDrome('aba')\n  true\n  >>> isPAlinDrome('aaaaa')\n  true\n  >>> isPAlinDrome('zbcd')\n  false\n  */\nconst isPAlinDrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPAlinDrome", "gc": "<|endoftext|>/*\n  Checks if given string is a palindrome\n  >>> isPAlinDrome('')\n  true\n  >>> isPAlinDrome('aba')\n  true\n  >>> isPAlinDrome('aaaaa')\n  true\n  >>> isPAlinDrome('zbcd')\n  false\n  */\nconst isPAlinDrome = (text) => {\n  let reversedText = text;\n  let reversedTextLength = reversedText.length;\n  let reversedTextReversed = reversedText.split('').reverse().join('');\n  let reversedTextReversedLength = reversedTextReversed.length;\n  let reversedTextReversedReversed = reversedTextReversed.split('').reverse().join('');\n  let reversedTextReversedReversedLength = reversedTextReversedReversed.length;\n  let reversedTextReversedReversedReversed = reversedTextReversedReversed.split('').reverse().join('');\n  let reversedTextReversedReversedReversedLength = reversedTextReversedReversedReversed.length;\n  let reversedTextReversedReversedReversedReversedLength = reversedTextReversedReversedReversedReversed.length;\n  let reversedTextReversedReversedReversedReversedReversedLength = reversedTextReversedReversedReversedReversedReversed.length;\n  let reversedTextReversedReversedReversedReversedReversedReversedLength = reversedTextReversedReversedReversedReversedReversedReversedReversed.length;\n  let reversedTextReversedReversedReversedReversedReversedReversedReversedReversedLength = reversedTextReversedReversedReversedReversedReversedReversedReversedReversedReversedLength;\n  let reversedTextReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modP(3, 5)\n  3\n  >>> modP(1101, 101)\n  2\n  >>> modP(0, 101)\n  1\n  >>> modP(3, 11)\n  8\n  >>> modP(100, 101)\n  1\n  */\nconst modP = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modP", "gc": "<|endoftext|>/*Return 2^n modulo p (be aware of numerics).\n  >>> modP(3, 5)\n  3\n  >>> modP(1101, 101)\n  2\n  >>> modP(0, 101)\n  1\n  >>> modP(3, 11)\n  8\n  >>> modP(100, 101)\n  1\n  */\nconst modP = (n, p) => {\n  if (n < 0 || p < 1) return 0;\n  if (n == 0) return 1;\n  if (n == 1) return p;\n  if (p < 1) return 0;\n  if (p > n) return 0;\n  return ((n % p) + p) % p;\n};\n\n/*\n  >>> modP(7, 2)\n  1\n  >>> modP(7, 3)\n  2\n  >>> modP(7, 4)\n  3\n  >>> modP(7, 5)\n  4\n  >>> modP(7, 6)\n  5\n  >>> modP(7, 7)\n  6\n  >>> modP(7, 8)\n  7\n  >>> modP(7, 9)\n  8\n  >>> modP(7, 10)\n  9\n  >>> modP(7, 11)\n  10\n  >>> modP(7, 12)\n  11\n  >>> modP(7, 13)\n  12\n  >>> modP(7, 14)\n  13\n  >>> modP(7, 15)\n  14\n  >>> modP(7, 16)\n  15\n  >>> modP(7, 17)\n  16\n  >>> modP(7, 18)\n  17\n  >>> modP(7, 19)\n  18\n  >>> modP(7, 20)\n  19\n  >>> modP(7, 21)\n  20\n  >>> modP(7, 22)\n  21\n  >>> modP(7, 23)\n  22\n  >>> modP(7, 24)\n  23\n  >>> modP(7, 25)\n  24\n  >>> modP(7, 26)\n  25\n  >>> modP(7, 27)\n  26\n  >>> modP(7, 28)\n  27\n  >>> modP(7, 29)\n  28\n  >>> modP(7, 30)\n  29\n  >>> modP(7, 31)\n  30\n  >>> modP(7, 32)\n  31\n  >>> modP(7, 33)\n  32\n  >>> modP(7, 34)\n  33\n  >>> modP(7, 35)\n  34\n  >>> modP(7, 36)\n  35\n  >>> modP(7, 37)\n  36\n  >>> modP(7, 38)\n  37\n  >>> modP(7, 39)\n  38\n  >>> modP(7, 40)\n  39\n  >>> modP(7, 41)\n  40\n  >>> modP(7, 42)\n  41\n  >>> modP(7, 43)\n  42\n  >>> modP(7, 44)\n  43\n  >>> modP(7, 45)\n  44\n  >>> modP(7, 46)\n  45\n  >>> modP(7, 47)\n  46\n  >>> modP(7, 48)\n  47\n  >>> modP(7, 49)\n  48\n  >>> modP(7, 50)\n  49\n  >>> modP(7, 51)\n  50\n  >>> modP(7, 52)\n  51\n  >>> modP(7, 53)\n  52\n  >>> modP(7, 54)\n  53\n  >>> modP(7, 55)\n  54\n  >>> modP(7, 56)\n  55\n  >>> modP(7, 57)\n  56\n  >>> modP(7, 58)\n  57\n  >>> modP(7, 59)\n  58\n  >>> modP(7, 60)\n  59\n  >>> modP(7, 61)\n  60\n  >>> modP(7, 62)\n  61\n  >>> modP(7, 63)\n  62\n  >>> modP(7, 64)\n  63\n  >>> modP(7, 65)\n  64\n  >>> modP(7, 66)\n  65\n  >>> modP(7, 67)\n  66\n  >>> modP(7, 68)\n  67\n  >>> modP(7, 69)\n  68\n  >>> modP(7, 70)\n  69\n  >>> modP(7, 71)\n  70\n  >>> modP(7, 72)\n  71\n  >>> modP(7, 73)\n  72\n  >>> modP(7, 74)\n  73\n  >>> modP(7, 75)\n  74\n  >>> modP(7, 76)\n  75\n  >>> modP(7, 77)\n  76\n  >>> modP(7, 78)\n  77\n  >>> modP(7, 79)\n  78\n  >>> modP(7, 80)\n  79\n  >>> modP(7, 81)\n  80\n  >>> modP(7, 82)\n  81\n  >>> modP(7, 83)\n  82\n  >>> modP(7, 84)\n  83\n  >>> modP(7, 85)\n  84\n  >>> modP(7, 86)\n  85\n  >>> modP(7, 87)\n  86\n  >>> modP(7, 88)\n  87\n  >>> modP(7, 89)\n  88\n  >>> modP(7, 90)\n  89\n  >>> modP(7, 91)\n  90\n  >>> modP(7, 92)\n  91\n  >>> modP(7, 93)\n  92\n  >>> modP(7, 94)\n  93\n  >>> modP(7, 95)\n  94\n  >>> modP(7, 96)\n  95\n  >>> modP(7, 97)\n  96\n  >>> modP(7, 98)\n  97\n  >>> modP(7, 99)\n  98\n  >>> modP(7, 100)\n  99\n  >>> modP(7, 101)\n  100\n  >>> modP(7, 102)\n  101\n  >>> modP(7, 103)\n  102\n  >>> modP(7, 104)\n  103\n  >>> modP(7, 105)\n  104\n  >>> modP(7, 106)\n  105\n  >>> modP(7, 107)\n  106\n  >>> modP(7, 108)\n  107\n  >>> modP(7, 109)\n  108\n  >>> modP(7, 110)\n  109\n  >>> modP(7, 111)\n  110\n  >>> modP(7, 112)\n  111\n  >>> modP(7, 113)\n  112\n  >>> modP(7, 114)\n  113\n  >>> modP(7, 115)\n  114\n  >>> modP(7, 116)\n  115\n  >>> modP(7, 117)\n  116\n  >>> modP(7, 118)\n  117\n  >>> modP(7, 119)\n  118\n  >>> modP(7, 120)\n  119\n  >>> modP(7, 121)\n  120\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intErspErse([], 4)\n  []\n  >>> intErspErse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intErspErse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intErspErse", "gc": "<|endoftext|>/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intErspErse([], 4)\n  []\n  >>> intErspErse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intErspErse = (numbers, delimeter) => {\n  const result = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let n = numbers.length\n  while (i < n) {\n    if (numbers[i] < delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 1) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 2) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 3) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 4) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 5) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 6) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 7) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 8) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 9) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 10) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 11) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 12) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 13) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 14) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 15) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 16) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 17) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 18) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 19) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 20) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 21) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 22) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 23) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 24) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 25) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 26) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 27) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 28) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 29) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 30) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 31) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 32) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 33) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 34) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 35) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 36) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 37) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 38) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 39) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 40) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 41) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 42) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 43) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 44) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 45) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 46) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 47) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 48) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 49) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 50) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 51) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 52) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 53) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 54) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 55) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 56) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 57) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 58) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 59) {\n      result.push(number", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encOdeSHift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encOdeSHift", "gc": "<|endoftext|>/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encOdeSHift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encOdeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encOdeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encOdeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encOdeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encOdeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encOdeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encOdeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encOdeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encOdeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encOdeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encOdeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/51", "prompt": "/*\n  remOveVOwels is a function that takes string and returns string without vowels.\n  >>> remOveVOwels('')\n  ''\n  >>> remOveVOwels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> remOveVOwels('abcdef')\n  'bcdf'\n  >>> remOveVOwels('aaaaa')\n  ''\n  >>> remOveVOwels('aaBAA')\n  'B'\n  >>> remOveVOwels('zbcd')\n  'zbcd'\n  */\nconst remOveVOwels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "remOveVOwels", "gc": "<|endoftext|>/*\n  remOveVOwels is a function that takes string and returns string without vowels.\n  >>> remOveVOwels('')\n  ''\n  >>> remOveVOwels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> remOveVOwels('abcdef')\n  'bcdf'\n  >>> remOveVOwels('aaaaa')\n  ''\n  >>> remOveVOwels('aaBAA')\n  'B'\n  >>> remOveVOwels('zbcd')\n  'zbcd'\n  */\nconst remOveVOwels = (text) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let vowelsLength = vowels.length;\n  let vowelsIndex = 0;\n  let vowelsLengthIndex = -1;\n  let vowelsIndex2 = -1;\n  let vowelsLengthIndex2 = -1;\n  let vowelsIndex3 = -1;\n  let vowelsLengthIndex3 = -1;\n  let vowelsIndex4 = -1;\n  let vowelsLengthIndex4 = -1;\n  let vowelsIndex5 = -1;\n  let vowelsLengthIndex5 = -1;\n  let vowelsIndex6 = -1;\n  let vowelsLengthIndex6 = -1;\n  let vowelsIndex7 = -1;\n  let vowelsLengthIndex7 = -1;\n  let vowelsIndex8 = -1;\n  let vowelsLengthIndex8 = -1;\n  let vowelsIndex9 = -1;\n  let vowelsLengthIndex9 = -1;\n  let vowelsIndex10 = -1;\n  let vowelsLengthIndex10 = -1;\n  let vowelsIndex11 = -1;\n  let vowelsLengthIndex11 = -1;\n  let vowelsIndex12 = -1;\n  let vowelsLengthIndex12 = -1;\n  let vowelsIndex13 = -1;\n  let vowelsLengthIndex13 = -1;\n  let vowelsIndex14 = -1;\n  let vowelsLengthIndex14 = -1;\n  let vowelsIndex15 = -1;\n  let vowelsLengthIndex15 = -1;\n  let vowelsIndex16 = -1;\n  let vowelsLengthIndex16 = -1;\n  let vowelsIndex17 = -1;\n  let vowelsLengthIndex17 = -1;\n  let vowelsIndex18 = -1;\n  let vowelsLengthIndex18 = -1;\n  let vowelsIndex19 = -1;\n  let vowelsLengthIndex19 = -1;\n  let vowelsIndex20 = -1;\n  let vowelsLengthIndex20 = -1;\n  let vowelsIndex21 = -1;\n  let vowelsLengthIndex21 = -1;\n  let vowelsIndex22 = -1;\n  let vowelsLengthIndex22 = -1;\n  let vowelsIndex23 = -1;\n  let vowelsLengthIndex23 = -1;\n  let vowelsIndex24 = -1;\n  let vowelsLengthIndex24 = -1;\n  let vowelsIndex25 = -1;\n  let vowelsLengthIndex25 = -1;\n  let vowelsIndex26 = -1;\n  let vowelsLengthIndex26 = -1;\n  let vowelsIndex27 = -1;\n  let vowelsLengthIndex27 = -1;\n  let vowelsIndex28 = -1;\n  let vowelsLengthIndex28 = -1;\n  let vowelsIndex29 = -1;\n  let vowelsLengthIndex29 = -1;\n  let vowelsIndex30 = -1;\n  let vowelsLengthIndex30 = -1;\n  let vowelsIndex31 = -1;\n  let vowelsLengthIndex31 = -1;\n  let vowelsIndex32 = -1;\n  let vowelsLengthIndex32 = -1;\n  let vowelsIndex33 = -1;\n  let vowelsLengthIndex33 = -1;\n  let vowelsIndex34 = -1;\n  let vowelsLengthIndex34 = -1;\n  let vowelsIndex35 = -1;\n  let vowelsLengthIndex35 = -1;\n  let vowelsIndex36 = -1;\n  let vowelsLengthIndex36 = -1;\n  let vowelsIndex37 = -1;\n  let vowelsLengthIndex37 = -1;\n  let vowelsIndex38 = -1;\n  let vowelsLengthIndex38 = -1;\n  let vowelsIndex39 = -1;\n  let vowelsLengthIndex39 = -1;\n  let vowelsIndex40 = -1;\n  let vowelsLengthIndex40 = -1;\n  let vowelsIndex41 = -1;\n  let vowelsLengthIndex41 = -1;\n  let vowelsIndex42 = -1;\n  let vowelsLengthIndex42 = -1;\n  let vowelsIndex43 = -1;\n  let vowelsLengthIndex43 = -1;\n  let vowelsIndex44 = -1;\n  let vowelsLengthIndex44 = -1;\n  let vowelsIndex45 = -1;\n  let vowelsLengthIndex45 = -1;\n  let vowelsIndex46 = -1;\n  let vowelsLengthIndex46 = -1;\n  let vowelsIndex47 = -1;\n  let vowelsLengthIndex47 = -1;\n  let vowelsIndex48 = -1;\n  let vowelsLengthIndex48 = -1;\n  let vowelsIndex49 = -1;\n  let vowelsLengthIndex49 = -1;\n  let vowelsIndex50 = -1;\n  let vowelsLengthIndex50 = -1;\n  let vowelsIndex51 = -1;\n  let vowelsLengthIndex51 = -1;\n  let vowelsIndex52 = -1;\n  let vowelsLengthIndex52 = -1;\n  let vowelsIndex53 = -1;\n  let vowelsLengthIndex53 = -1;\n  let vowelsIndex54 = -1;\n  let vowelsLengthIndex54 = -1;\n  let vowelsIndex55 = -1;\n  let vowelsLengthIndex55 = -1;\n  let vowelsIndex56 = -1;\n  let vowelsLengthIndex56 = -1;\n  let vowelsIndex57 = -1;\n  let vowelsLengthIndex57 = -1;\n  let vowelsIndex58 = -1;\n  let vowelsLengthIndex58 = -1;\n  let vowelsIndex59 = -1;\n  let vowelsLengthIndex59 = -1;\n  let vowelsIndex60 = -1;\n  let vowelsLengthIndex60 = -1;\n  let vowelsIndex61 = -1;\n  let vowelsLengthIndex61 = -1;\n  let vowelsIndex62 = -1;\n  let vowelsLengthIndex62 = -1;\n  let vowelsIndex63 = -1;\n  let vowelsLengthIndex63 = -1;\n  let vowelsIndex64 = -1;\n  let vowelsLengthIndex64 = -1;\n  let vowelsIndex65 = -1;\n  let vowelsLengthIndex65 = -1;\n  let vowelsIndex66 = -1;\n  let vowelsLengthIndex66 = -1;\n  let vowelsIndex67 = -1;\n  let vowelsLengthIndex67 = -1;\n  let vowelsIndex68 = -1;\n  let vowelsLengthIndex68 = -1;\n  let vowelsIndex69 = -1;\n  let vowelsLengthIndex69 = -1;\n  let vowelsIndex70 = -1;\n  let vowelsLengthIndex70 = -1;\n  let vowelsIndex71 = -1;\n  let vowelsLengthIndex71 = -1;\n  let vowelsIndex72 = -1;\n  let vowelsLengthIndex72 = -1;\n  let vowelsIndex73 = -1;\n  let vowelsLengthIndex73 = -1;\n  let vowelsIndex74 = -1;\n  let vowelsLengthIndex74 = -1;\n  let vowelsIndex75 = -1;\n  let vowelsLengthIndex75 = -1;\n  let vowelsIndex76 = -1;\n  let vowelsLengthIndex76 = -1;\n  let vowelsIndex77 = -1;\n  let vowelsLengthIndex77 = -1;\n  let vowelsIndex78 = -1;\n  let vowelsLengthIndex78 = -1;\n  let vowelsIndex79 = -1;\n  let vowelsLengthIndex79 = -1;\n  let vowelsIndex80 = -1;\n  let vowelsLengthIndex80 = -1;\n  let vowelsIndex81 = -1;\n  let vowelsLengthIndex81 = -1;\n  let vowelsIndex82 = -1;\n  let vowelsLengthIndex82 = -1;\n  let vowelsIndex83 = -1;\n  let vowelsLengthIndex83 = ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers in the list l are below threshold t.\n  >>> belOwThReshoLd([1, 2, 4, 10], 100)\n  true\n  >>> belOwThReshoLd([1, 20, 4, 10], 5)\n  false\n  */\nconst belOwThReshoLd = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belOwThReshoLd", "gc": "<|endoftext|>/*Return true if all numbers in the list l are below threshold t.\n  >>> belOwThReshoLd([1, 2, 4, 10], 100)\n  true\n  >>> belOwThReshoLd([1, 20, 4, 10], 5)\n  false\n  */\nconst belOwThReshoLd = (l, t) => {\n  return l.every((n) => n < t);\n};\n\n/*\n  >>> belOwThReshoLd([1, 2, 4, 10], 5)\n  true\n  >>> belOwThReshoLd([1, 20, 4, 10], 5)\n  false\n  */\nconst belOwThReshoLg = (l, t) => {\n  return l.every((n) => n > t);\n};\n\n/*\n  >>> belOwThReshoLg([1, 2, 4, 10], 5)\n  true\n  >>> belOwThReshoLg([1, 20, 4, 10], 5)\n  false\n  */\nconst belOwThReshoLt = (l, t) => {\n  return l.every((n) => n > t);\n};\n\n/*\n  >>> belOwThReshoLt([1, 2, 4, 10], 5)\n  true\n  >>> belOwThReshoLt([1, 20, 4, 10], 5)\n  false\n  */\nconst belOwThReshoGt = (l, t) => {\n  return l.every((n) => n < t);\n};\n\n/*\n  >>> belOwThReshoGt([1, 2, 4, 10], 5)\n  true\n  >>> belOwThReshoGt([1, 20, 4, 10], 5)\n  false\n  */\nconst belOwThReshoGg = (l, t) => {\n  return l.every((n) => n > t);\n};\n\n/*\n  >>> belOwThReshoGg([1, 2, 4, 10], 5)\n  true\n  >>> belOwThReshoGg([1, 20, 4, 10], 5)\n  false\n  */\nconst belOwThReshoLt = (l, t) => {\n  return l.every((n) => n > t);\n};\n\n/*\n  >>> belOwThReshoLt([1, 2, 4, 10], 5)\n  true\n  >>> belOwThReshoLt([1, 20, 4, 10], 5)\n  false\n  */\nconst belOwThReshoGt = (l, t) => {\n  return l.every((n) => n < t);\n};\n\n/*\n  >>> belOwThReshoGg([1, 2, 4, 10], 5)\n  true\n  >>> belOwThReshoGg([1, 20, 4, 10], 5)\n  false\n  */\nconst belOwThReshoGg = (l, t) => {\n  return l.every((n) => n > t);\n};\n\n/*\n  >>> belOwThReshoLt([1, 2, 4, 10], 5)\n  true\n  >>> belOwThReshoLt([1, 20, 4, 10], 5)\n  false\n  */\nconst belOwThReshoLt = (l, t) => {\n  return l.every((n) => n < t);\n};\n\n/*\n  >>> belOwThReshoGt([1, 2, 4, 10], 5)\n  true\n  >>> belOwThReshoGt([1, 20, 4, 10], 5)\n  false\n  */\nconst belOwThReshoGg = (l, t) => {\n  return l.every((n) => n > t);\n};\n\n/*\n  >>> belOwThReshoLt([1, 2, 4, 10], 5)\n  true\n  >>> belOwThReshoLt([1, 20, 4, 10], 5)\n  false\n  */\nconst belOwThReshoLt = (l, t) => {\n  return l.every((n) => n < t);\n};\n\n/*\n  >>> belOwThReshoGt([1, 2, 4, 10], 5)\n  true\n  >>> belOwThReshoGt([1, 20, 4, 10], 5)\n  false\n  */\nconst belOwThReshoGg = (l, t) => {\n  return l.every((n) => n > t);\n};\n\n/*\n  >>> belOwThReshoLt([1, 2, 4, 10], 5)\n  true\n  >>> belOwThReshoLt([1, 20, 4, 10], 5)\n  false\n  */\nconst belOwThReshoLt = (l, t) => {\n  return l.every((n) => n < t);\n};\n\n/*\n  >>> belOwThReshoGt([1, 2, 4, 10], 5)\n  true\n  >>> belOwThReshoGt([1, 20, 4, 10], 5)\n  false\n  */\nconst belOwThReshoGg = (l, t) => {\n  return l.every((n) => n > t);\n};\n\n/*\n  >>> belOwThReshoLt([1, 2, 4, 10], 5)\n  true\n  >>> belOwThReshoLt([1, 20, 4, 10], 5)\n  false\n  */\nconst belOwThReshoLt = (l, t) => {\n  return l.every((n) => n < t);\n};\n\n/*\n  >>> belOwThReshoGt([1, 2, 4, 10], 5)\n  true\n  >>> belOwThReshoGt([1, 20, 4, 10], 5)\n  false\n  */\nconst belOwThReshoGg = (l, t) => {\n  return l.every((n) => n > t);\n};\n\n/*\n  >>> belOwThReshoLt([1, 2, 4, 10], 5)\n  true\n  >>> belOwThReshoLt([1, 20, 4, 10], 5)\n  false\n  */\nconst belOwThReshoLt = (l, t) => {\n  return l.every((n) => n < t);\n};\n\n/*\n  >>> belOwThReshoGt([1, 2, 4, 10], 5)\n  true\n  >>> belOwThReshoGt([1, 20, 4, 10], 5)\n  false\n  */\nconst belOwThReshoGg = (l, t) => {\n  return l.every((n) => n > t);\n};\n\n/*\n  >>> belOwThReshoLt([1, 2, 4, 10], 5)\n  true\n  >>> belOwThReshoLt([1, 20, 4, 10], 5)\n  false\n  */\nconst belOwThReshoLt = (l, t) => {\n  return l.every((n) => n < t);\n};\n\n/*\n  >>> belOwThReshoGt([1, 2, 4, 10], 5)\n  true\n  >>> belOwThReshoGt([1, 20, 4, 10], 5)\n  false\n  */\nconst belOwThReshoGg = (l, t) => {\n  return l.every((n) => n > t);\n};\n\n/*\n  >>> belOwThReshoLt([1, 2, 4, 10], 5)\n  true\n  >>> belOwThReshoLt([1, 20, 4, 10], 5)\n  false\n  */\nconst belOwThReshoLt = (l, t) => {\n  return l.every((n) => n < t);\n};\n\n/*\n  >>> belOwThReshoGt([1, 2, 4, 10], 5)\n  true\n  >>> belOwThReshoGt([1, 20, 4, 10], 5)\n  false\n  */\nconst belOwThReshoGg = (l, t) => {\n  return l.every((n) => n > t);\n};\n\n/*\n  >>> belOwThReshoLt([1, 2, 4, 10], 5)\n  true\n  >>> belOwThReshoLt([1, 20, 4, 10], 5)\n  false\n  */\nconst belOwThReshoLt = (l, t) => {\n  return l.every((n) => n < t);\n};\n\n/*\n  >>> belOwThReshoGt([1, 2, 4, 10], ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "gc": "<|endoftext|>/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> subtract(2, 3)\n  1\n  >>> subtract(5, 7)\n  -1\n  */\nconst subtract = (x, y) => {\n  return x - y;\n};\n\n/*\n  >>> multiply(2, 3)\n  2\n  >>> multiply(5, 7)\n  10\n  */\nconst multiply = (a, b) => {\n  return a * b;\n};\n\n/*\n  >>> divide(2, 3)\n  2\n  >>> divide(5, 7)\n  0\n  */\nconst divide = (x, y) => {\n  return x / y;\n};\n\n/*\n  >>> modulo(2, 3)\n  2\n  >>> modulo(5, 7)\n  1\n  */\nconst modulo = (x, y) => {\n  return x % y;\n};\n\n/*\n  >>> power(2, 3)\n  2\n  >>> power(5, 7)\n  8\n  */\nconst power = (a, b) => {\n  return a ** b;\n};\n\n/*\n  >>> sqrt(2)\n  2\n  >>> sqrt(5)\n  4\n  */\nconst sqrt = (a) => {\n  return Math.sqrt(a);\n};\n\n/*\n  >>> pow(2, 3)\n  2\n  >>> pow(2, 5)\n  8\n  */\nconst pow = (a, b) => {\n  return a ** b;\n};\n\n/*\n  >>> log2(2)\n  2\n  >>> log2(5)\n  8\n  */\nconst log2 = (a) => {\n  return Math.log2(a);\n};\n\n/*\n  >>> log2(2)\n  2\n  >>> log2(5)\n  8\n  */\nconst log2mod = (a) => {\n  return Math.log2(a) % 1;\n};\n\n/*\n  >>> log2(2)\n  2\n  >>> log2(5)\n  8\n  */\nconst log2pow = (a) => {\n  return Math.log2(a) % 2;\n};\n\n/*\n  >>> log2(2)\n  2\n  >>> log2(5)\n  8\n  */\nconst log2mod = (a) => {\n  return Math.log2(a) % 4;\n};\n\n/*\n  >>> log2(2)\n  2\n  >>> log2(5)\n  8\n  */\nconst log2pow = (a) => {\n  return Math.log2(a) % 8;\n};\n\n/*\n  >>> log2(2)\n  2\n  >>> log2(5)\n  8\n  */\nconst log2mod = (a) => {\n  return Math.log2(a) % 16;\n};\n\n/*\n  >>> log2(2)\n  2\n  >>> log2(5)\n  8\n  */\nconst log2pow = (a) => {\n  return Math.log2(a) % 32;\n};\n\n/*\n  >>> log2(2)\n  2\n  >>> log2(5)\n  8\n  */\nconst log2mod = (a) => {\n  return Math.log2(a) % 64;\n};\n\n/*\n  >>> log2(2)\n  2\n  >>> log2(5)\n  8\n  */\nconst log2pow = (a) => {\n  return Math.log2(a) % 128;\n};\n\n/*\n  >>> log2(2)\n  2\n  >>> log2(5)\n  8\n  */\nconst log2mod = (a) => {\n  return Math.log2(a) % 256;\n};\n\n/*\n  >>> log2(2)\n  2\n  >>> log2(5)\n  8\n  */\nconst log2pow = (a) => {\n  return Math.log2(a) % 512;\n};\n\n/*\n  >>> log2(2)\n  2\n  >>> log2(5)\n  8\n  */\nconst log2mod = (a) => {\n  return Math.log2(a) % 1024;\n};\n\n/*\n  >>> log2(2)\n  2\n  >>> log2(5)\n  8\n  */\nconst log2pow = (a) => {\n  return Math.log2(a) % 2048;\n};\n\n/*\n  >>> log2(2)\n  2\n  >>> log2(5)\n  8\n  */\nconst log2mod = (a) => {\n  return Math.log2(a) % 4096;\n};\n\n/*\n  >>> log2(2)\n  2\n  >>> log2(5)\n  8\n  */\nconst log2pow = (a) => {\n  return Math.log2(a) % 8192;\n};\n\n/*\n  >>> log2(2)\n  2\n  >>> log2(5)\n  8\n  */\nconst log2mod = (a) => {\n  return Math.log2(a) % 16384;\n};\n\n/*\n  >>> log2(2)\n  2\n  >>> log2(5)\n  8\n  */\nconst log2pow = (a) => {\n  return Math.log2(a) % 32768;\n};\n\n/*\n  >>> log2(2)\n  2\n  >>> log2(5)\n  8\n  */\nconst log2mod = (a) => {\n  return Math.log2(a) % 65536;\n};\n\n/*\n  >>> log2(2)\n  2\n  >>> log2(5)\n  8\n  */\nconst log2pow = (a) => {\n  return Math.log2(a) % 131072;\n};\n\n/*\n  >>> log2(2)\n  2\n  >>> log2(5)\n  8\n  */\nconst log2mod = (a) => {\n  return Math.log2(a) % 262144;\n};\n\n/*\n  >>> log2(2)\n  2\n  >>> log2(5)\n  8\n  */\nconst log2pow = (a) => {\n  return Math.log2(a) % 524288;\n};\n\n/*\n  >>> log2(2)\n  2\n  >>> log2(5)\n  8\n  */\nconst log2mod = (a) => {\n  return Math.log2(a) % 1048576;\n};\n\n/*\n  >>> log2(2)\n  2\n  >>> log2(5)\n  8\n  */\nconst log2pow = (a) => {\n  return Math.log2(a) % 2097152;\n};\n\n/*\n  >>> log2(2)\n  2\n  >>> log2(5)\n  8\n  */\nconst log2mod = (a) => {\n  return Math.log2(a) % 4194304;\n};\n\n/*\n  >>> log2(2)\n  2\n  >>> log2(5)\n  8\n  */\nconst log2pow = (a) => {\n  return Math.log2(a) % 8388608;\n};\n\n/*\n  >>> log2(2)\n  2\n  >>> log2(5)\n  8\n  */\nconst log2mod = (a) => {\n  return Math.log2(a) % 16777216;\n};\n\n/*\n  >>> log2(2)\n  2\n  >>> log2(5)\n  8\n  */\nconst log2pow = (a) => {\n  return Math.log2(a) % 33554432;\n};\n\n/*\n  >>> log2(2)\n  2\n  >>> log2(5)\n  8\n  */\nconst log2mod = (a) => {\n  return Math.log2(a) % 67108864;\n};\n\n/*\n  >>> log2(2)\n  2\n  >>> log2(5)\n  8\n  */\nconst log2pow = (a) => {\n  return Math.log2(a) % 134217728;\n};\n\n/*\n  >>> log2(2)\n  2\n  >>> log2(5)\n  8\n  */\nconst log2mod = (a) => {\n  return Math.log2(a) % 268435456;\n};\n\n/*\n  >>> log2(2)\n  2\n  >>> log2(5)\n  8\n  */\nconst log2pow = (a) => {\n  return Math.log2(a", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two words have the same characters.\n  >>> samEChaRs('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> samEChaRs('abcd', 'dddddddabc')\n  true\n  >>> samEChaRs('dddddddabc', 'abcd')\n  true\n  >>> samEChaRs('eabcd', 'dddddddabc')\n  false\n  >>> samEChaRs('abcd', 'dddddddabce')\n  false\n  >>> samEChaRs('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst samEChaRs = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "samEChaRs", "gc": "<|endoftext|>/*\n  Check if two words have the same characters.\n  >>> samEChaRs('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> samEChaRs('abcd', 'dddddddabc')\n  true\n  >>> samEChaRs('dddddddabc', 'abcd')\n  true\n  >>> samEChaRs('eabcd', 'dddddddabc')\n  false\n  >>> samEChaRs('abcd', 'dddddddabce')\n  false\n  >>> samEChaRs('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst samEChaRs = (s0, s1) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let len0 = s0.length;\n  let len1 = s1.length;\n  let len2 = len0 - len1;\n  let len3 = len2 - len1;\n  let len4 = len3 - len1;\n  let len5 = len4 - len1;\n  let len6 = len5 - len1;\n  let len7 = len6 - len1;\n  let len8 = len7 - len1;\n  let len9 = len8 - len1;\n  let len10 = len9 - len1;\n  let len11 = len10 - len1;\n  let len12 = len11 - len1;\n  let len13 = len12 - len1;\n  let len14 = len13 - len1;\n  let len15 = len14 - len1;\n  let len16 = len15 - len1;\n  let len17 = len16 - len1;\n  let len18 = len17 - len1;\n  let len19 = len18 - len1;\n  let len20 = len19 - len1;\n  let len21 = len20 - len1;\n  let len22 = len21 - len1;\n  let len23 = len22 - len1;\n  let len24 = len23 - len1;\n  let len25 = len24 - len1;\n  let len26 = len25 - len1;\n  let len27 = len26 - len1;\n  let len28 = len27 - len1;\n  let len29 = len28 - len1;\n  let len30 = len29 - len1;\n  let len31 = len30 - len1;\n  let len32 = len31 - len1;\n  let len33 = len32 - len1;\n  let len34 = len33 - len1;\n  let len35 = len34 - len1;\n  let len36 = len35 - len1;\n  let len37 = len36 - len1;\n  let len38 = len37 - len1;\n  let len39 = len38 - len1;\n  let len40 = len39 - len1;\n  let len41 = len40 - len1;\n  let len42 = len41 - len1;\n  let len43 = len42 - len1;\n  let len44 = len43 - len1;\n  let len45 = len44 - len1;\n  let len46 = len45 - len1;\n  let len47 = len46 - len1;\n  let len48 = len47 - len1;\n  let len49 = len48 - len1;\n  let len50 = len49 - len1;\n  let len51 = len50 - len1;\n  let len52 = len51 - len1;\n  let len53 = len52 - len1;\n  let len54 = len53 - len1;\n  let len55 = len54 - len1;\n  let len56 = len55 - len1;\n  let len57 = len56 - len1;\n  let len58 = len57 - len1;\n  let len59 = len58 - len1;\n  let len60 = len59 - len1;\n  let len61 = len60 - len1;\n  let len62 = len61 - len1;\n  let len63 = len62 - len1;\n  let len64 = len63 - len1;\n  let len65 = len64 - len1;\n  let len66 = len65 - len1;\n  let len67 = len66 - len1;\n  let len68 = len67 - len1;\n  let len69 = len68 - len1;\n  let len70 = len69 - len1;\n  let len71 = len70 - len1;\n  let len72 = len71 - len1;\n  let len73 = len72 - len1;\n  let len74 = len73 - len1;\n  let len75 = len74 - len1;\n  let len76 = len75 - len1;\n  let len77 = len76 - len1;\n  let len78 = len77 - len1;\n  let len79 = len78 - len1;\n  let len80 = len79 - len1;\n  let len81 = len80 - len1;\n  let len82 = len81 - len1;\n  let len83 = len82 - len1;\n  let len84 = len83 - len1;\n  let len85 = len84 - len1;\n  let len86 = len85 - len1;\n  let len87 = len86 - len1;\n  let len88 = len87 - len1;\n  let len89 = len88 - len1;\n  let len90 = len89 - len1;\n  let len91 = len90 - len1;\n  let len92 = len91 - len1;\n  let len93 = len92 - len1;\n  let len94 = len93 - len1;\n  let len95 = len94 - len1;\n  let len96 = len95 - len1;\n  let len97 = len96 - len1;\n  let len98 = len97 - len1;\n  let len99 = len98 - len1;\n  let len100 = len99 - len1;\n  let len101 = len100 - len1;\n  let len102 = len101 - len1;\n  let len103 = len102 - len1;\n  let len104 = len103 - len1;\n  let len105 = len104 - len1;\n  let len106 = len105 - len1;\n  let len107 = len106 - len1;\n  let len108 = len107 - len1;\n  let len109 = len108 - len1;\n  let len110 = len109 - len1;\n  let len111 = len110 - len1;\n  let len112 = len111 - len1;\n  let len113 = len112 - len1;\n  let len114 = len113 - len1;\n  let len115 = len114 - len1;\n  let len116 = len115 - len1;\n  let len117 = len116 - len1;\n  let len118 = len117 - len1;\n  let len119 = len118 - len1;\n  let len120 = len119 - len1;\n  let len121 = len120 - len1;\n  let len122 = len121 - len1;\n  let len123 = len122 - len1;\n  let len124 = len123 - len1;\n  let len125 = len124 - len1;\n  let len126 = len125 - len1;\n  let len127 = len126 - len1;\n  let len128 = len127 - len1;\n  let len129 = len128 - len1;\n  let len130 = len129 - len1;\n  let len131 = len130 - len1;\n  let len132 = len131 - len1;\n  let len133 = len132 - len1;\n  let len134 = len133 - len1;\n  let len135 = len134 - len1;\n  let len136 = len135 - len1;\n  let len137 = len136 - len1;\n  let len138 = len137 - len1;\n  let len139 = len138", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "gc": "<|endoftext|>/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n <= 1) return 1;\n  return fib(n-1) + fib(n-2);\n};\n\n/*\n  >>> fib(8)\n  21\n  >>> fib(9)\n  34\n  >>> fib(10)\n  55\n  >>> fib(11)\n  89\n  >>> fib(12)\n  144\n  >>> fib(13)\n  233\n  >>> fib(14)\n  377\n  >>> fib(15)\n  610\n*/\nconst fib2 = (n) => {\n  if (n <= 1) return 1;\n  return fib(n-1) + fib(n-2) + fib(n-3) + fib(n-4) + fib(n-5) + fib(n-6) + fib(n-7) + fib(n-8);\n};\n\n/*\n  >>> fib(14)\n  377\n  >>> fib(15)\n  610\n*/\nconst fib3 = (n) => {\n  if (n <= 1) return 1;\n  return fib(n-1) + fib(n-2) + fib(n-3) + fib(n-4) + fib(n-5) + fib(n-6) + fib(n-7) + fib(n-8) + fib(n-9) + fib(n-10) + fib(n-11) + fib(n-12) + fib(n-13) + fib(n-14) + fib(n-15);\n};\n\n/*\n  >>> fib(15)\n  610\n  >>> fib(16)\n  987\n  >>> fib(17)\n  1597\n  >>> fib(18)\n  2584\n  >>> fib(19)\n  4181\n  >>> fib(20)\n  6765\n  >>> fib(21)\n  10946\n  >>> fib(22)\n  17711\n  >>> fib(23)\n  28657\n  >>> fib(24)\n  46368\n  >>> fib(25)\n  75025\n  >>> fib(26)\n  121393\n  >>> fib(27)\n  196418\n  >>> fib(28)\n  317811\n  >>> fib(29)\n  514229\n  >>> fib(30)\n  832040\n  >>> fib(31)\n  1346269\n*/\nconst fib4 = (n) => {\n  if (n <= 1) return 1;\n  return fib(n-1) + fib(n-2) + fib(n-3) + fib(n-4) + fib(n-5) + fib(n-6) + fib(n-7) + fib(n-8) + fib(n-9) + fib(n-10) + fib(n-11) + fib(n-12) + fib(n-13) + fib(n-14) + fib(n-15) + fib(n-16) + fib(n-17) + fib(n-18) + fib(n-19) + fib(n-20) + fib(n-21) + fib(n-22) + fib(n-23) + fib(n-24) + fib(n-25) + fib(n-26) + fib(n-27) + fib(n-28) + fib(n-29) + fib(n-30) + fib(n-31) + fib(n-32);\n};\n\n/*\n  >>> fib(32)\n  1346269\n  >>> fib(33)\n  2934093\n  >>> fib(34)\n  4292749\n  >>> fib(35)\n  6403644\n  >>> fib(36)\n  9461170\n  >>> fib(37)\n  15928643\n  >>> fib(38)\n  2584192\n  >>> fib(39)\n  4188039\n  >>> fib(40)\n  6765839\n  >>> fib(41)\n  10946391\n  >>> fib(42)\n  17711894\n  >>> fib(43)\n  28657393\n  >>> fib(44)\n  46368393\n  >>> fib(45)\n  75025393\n  >>> fib(46)\n  121393894\n  >>> fib(47)\n  19641893\n  >>> fib(48)\n  31781193\n  >>> fib(49)\n  514229393\n  >>> fib(50)\n  832040393\n  >>> fib(51)\n  1346269393\n  >>> fib(52)\n  293409393\n  >>> fib(53)\n  4292749393\n  >>> fib(54)\n  6403644393\n  >>> fib(55)\n  9461170393\n  >>> fib(56)\n  1592864393\n  >>> fib(57)\n  2584192393\n  >>> fib(58)\n  4188039393\n  >>> fib(59)\n  6765839393\n  >>> fib(60)\n  1094639393\n  >>> fib(61)\n  1771189393\n  >>> fib(62)\n  2865739393\n  >>> fib(63)\n  4636839393\n  >>> fib(64)\n  7502539393\n  >>> fib(65)\n  12139389393\n  >>> fib(66)\n  1964189393\n  >>> fib(67)\n  3178119393\n  >>> fib(68)\n  51422939393\n  >>> fib(69)\n  83204039393\n  >>> fib(70)\n  134626939393\n  >>> fib(71)\n  29340939393\n  >>> fib(72)\n  4292749393\n  >>> fib(73)\n  6403644393\n  >>> fib(74)\n  9461170393\n  >>> fib(75)\n  159286439393\n  >>> fib(76)\n  2584192393\n  >>> fib(77)\n  4188039393\n  >>> fib(78)\n  6765839393\n  >>> fib(79)\n  1094639393\n  >>> fib(80)\n  1771189393\n  >>> fib(81)\n  2865739393\n  >>> fib(82)\n  4636839393\n  >>> fib(83)\n  7502539393\n  >>> fib(84)\n  12139389393\n  >>> fib(85)\n  1964189393\n  >>> fib(86)\n  3178119393\n  >>> fib(87)\n  51422939393\n  >>> fib(88)\n  83204039393\n  >>> fib(89)\n  134626939393\n  >>> fib(90)\n  29340939393\n  >>> fib(91)\n  4292749393\n  >>> fib(92)\n  6403644393\n  >>> fib(93)\n  9461170393\n  >>> fib(94)\n  159286439393\n  >>> fib(95)\n  2584192393\n  >>> fib(96)\n  4188039393", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 3}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> corRectbrackEtiNg(\"<\")\n  false\n  >>> corRectbrackEtiNg(\"<>\")\n  false\n  >>> corRectbrackEtiNg(\"<<><>>\")\n  false\n  >>> corRectbrackEtiNg(\"><<>\")\n  false\n  */\nconst corRectbrackEtiNg = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "corRectbrackEtiNg", "gc": "<|endoftext|>/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> corRectbrackEtiNg(\"<\")\n  false\n  >>> corRectbrackEtiNg(\"<>\")\n  false\n  >>> corRectbrackEtiNg(\"<<><>>\")\n  false\n  >>> corRectbrackEtiNg(\"><<>\")\n  false\n  */\nconst corRectbrackEtiNg = (brackets) => {\n  const openingBrackets = brackets.split(\"<\");\n  const closingBrackets = brackets.split(\">\");\n  return openingBrackets.every((openingBracket) => {\n    return closingBrackets.every((closingBracket) => {\n      return openingBracket === closingBracket;\n    });\n  });\n};\n\n/**\n  Returns true if the given string is a valid rectangular bracket.\n\n  >>> isRectangular(\"<<>\")\n  true\n  >>> isRectangular(\"<<<\")\n  true\n  >>> isRectangular(\"<<<>>\")\n  true\n  >>> isRectangular(\"<<<>>>\")\n  true\n  >>> isRectangular(\"<<<>><<>\")\n  true\n  >>> isRectangular(\"<<<>><<<>>\")\n  true\n  >>> isRectangular(\"<<<>><<<>><<<>>\")\n  true\n  >>> isRectangular(\"<<<>><<<>><<<>><<<>>\")\n  true\n  >>> isRectangular(\"<<<>><<<>><<<>><<<>><<<>><<<>>\")\n  true\n  >>> isRectangular(\"<<<>><<<>><<<>><<<>><<<>><<<>><<<>><<<>>\")\n  true\n  >>> isRectangular(\"<<<>><<<>><<<>><<<>><<<>><<<>><<<>><<<>><<<>><<<>><<<>>\")\n  true\n  >>> isRectangular(\"<<<>><<<>><<<>><<<>><<<>><<<>><<<>><<<>><<<>><<<>><<<>><<<>><<<>>\")\n  true\n  >>> isRectangular(\"<<<>><<<>><<<>><<<>><<<>><<<>><<<>><<<>><<<>><<<>><<<>><<<>><<<>><<<>><<<>>\")\n  true\n  >>> isRectangularpassed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/57", "prompt": "/*Return true is list elements are monOtonIcally increasing or decreasing.\n  >>> monOtonIc([1, 2, 4, 20])\n  true\n  >>> monOtonIc([1, 20, 4, 10])\n  false\n  >>> monOtonIc([4, 1, 0, -10])\n  true\n  */\nconst monOtonIc = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monOtonIc", "gc": "<|endoftext|>/*Return true is list elements are monOtonIcally increasing or decreasing.\n  >>> monOtonIc([1, 2, 4, 20])\n  true\n  >>> monOtonIc([1, 20, 4, 10])\n  false\n  >>> monOtonIc([4, 1, 0, -10])\n  true\n  */\nconst monOtonIc = (l) => {\n  let i = l.length - 1;\n  let j = 0;\n  let k = 0;\n  let l = l.reverse();\n  while (l[j] < l[i]) {\n    j++;\n  }\n  while (l[j] > l[i]) {\n    j--;\n  }\n  while (l[k] < l[j]) {\n    k++;\n  }\n  while (l[k] > l[j]) {\n    k--;\n  }\n  return k - j - i - 1;\n};\n\n/**\n * Returns true if the list contains only unique elements.\n * If list contains duplicate elements, return false.\n * If list contains no elements, return true.\n * If list contains empty list, return false.\n *\n * Examples:\n * monOtonIc([1, 1, 1])\n * monOtonIc([1, 1, 1])\n * monOtonIc([1, 1, 1])\n * monOtonIc([1, 1, 1])\n * monOtonIc([1, 1, 1])\n * monOtonIc([1, 1, 1])\n * monOtonIc([1, 1, 1])\n * monOtonIc([1, 1, 1])\n * monOtonIc([1, 1, 1])\n * monOtonIc([1, 1, 1])\n * monOtonIc([1, 1, 1])\n * monOtonIc([1, 1, 1])\n * monOtonIc([1, 1, 1])\n * monOtonIc([1, 1, 1])\n * monOtonIc([1, 1, 1])\n * monOtonIc([1, 1, 1])\n * monOtonIc([1, 1, 1])\n * monOtonIc([1, 1, 1])\n * monOtonIc([1, 1, 1])\n * monOtonIc([1, 1, 1])\n * monOtonIc([1, 1, 1])\n * monOtonIc([1, 1, 1])\n * monOtonIc([1, 1, 1])\n * monOtonIc([1, 1, 1])\n * monOtonIc([1, 1, 1])\n * monOtonIc([1, 1, 1])\n * monOtonIc([1, 1, 1])\n * monOtonIc([1, 1, 1])\n * monOtonIc([1, 1, 1])\n * monOtonIc([1, 1, 1])\n * monOtonIc([1, 1, 1])\n * monOtonIc([1, 1, 1])\n * monOtonIc([1, 1, 1])\n * monOtonIc([1, 1, 1])\n * monOtonIc([1, 1, 1])\n * monOtonIc([1, 1, 1])\n * monOtonIc([1, 1, 1])\n * monOtonIc([1, 1, 1])\n * monOtonIc([1, 1, 1])\n * monOtonIc([1, 1, 1])\n * monOtonIc([1, 1, 1])\n * monOtonIc([1, 1, 1])\n * monOtonIc([1, 1, 1])\n * monOtonIc([1, 1, 1])\n * monOtonIc([1, 1, 1])\n * monOtonIc([1, 1, 1])\n * monOtonIc([1, 1, 1])\n * monOtonIc([1, 1, 1])\n * monOtonIc([1, 1, 1])\n * monOtonIc([1, 1, 1])\n * monOtonIc([1, 1, 1])\n * monOtonIc([1, 1, 1])\n * monOtonIc([1, 1, 1])\n * monOtonIc([1, 1, 1])\n * monOtonIc([1, 1, 1])\n * monOtonIc([1, 1, 1])\n * monOtonIc([1, 1, 1])\n * monOtonIc([1, 1, 1])\n * monOtonIc([1, 1, 1])\n * monOtonIc([1, 1, 1])\n * monOtonIc([1, 1, 1])\n * monOtonIc([1, 1, 1])\n * monOtonIc([1, 1, 1])\n * monOtonIc([1, 1, 1])\n * monOtonIc([1, 1, 1])\n * monOtonIc([1, 1, 1])\n * monOtonIc([1, 1, 1])\n * monOtonIc([1, 1, 1])\n * monOtonIc([1, 1, 1])\n * monOtonIc([1, 1, 1])\n * monOtonIc([1, 1, 1])\n * monOtonIc([1, 1, 1])\n * monOtonIc([1, 1, 1])\n * monOtonIc([1, 1, 1])\n * monOtonIc([1, 1, 1])\n * monOtonIc([1, 1, 1])\n * monOtonIc([1, 1, 1])\n * monOtonIc([1, 1, 1])\n * monOtonIc([1, 1, 1])\n * monOtonIc([1, 1, 1])\n * monOtonIc([1, 1, 1])\n * monOtonIc([1, 1, 1])\n * monOtonIc([1, 1, 1])\n * monOtonIc([1, 1, 1])\n * monOtonIc([1, 1, 1])\n * monOtonIc([1, 1, 1])\n * monOtonIc([1, 1, 1])\n * monOtonIc([1, 1, 1])\n * monOtonIc([1, 1, 1])\n * monOtonIc([1, 1, 1])\n * monOtonIc([1, 1, 1])\n * monOtonIc([1, 1, 1])\n * monOtonIc([1, 1, 1])\n * monOtonIc([1, 1, 1])\n * monOtonIc([1, 1, 1])\n * monOtonIc([1, 1, 1])\n * monOtonIc([1, 1, 1])\n * monOtonIc([1, 1, 1])\n * monOtonIc([1, 1, 1])\n * monOtonIc([1, 1, 1])\n * monOtonIc([1, 1, 1])\n * monOtonIc([1, 1, 1])\n * monOtonIc([1, 1, 1])\n * monOtonIc([1, 1, 1])\n * monOtonIc([1, 1, 1])\n * monOtonIc([1, 1, 1])\n * monOtonIc([1, 1, 1])\n * monOtonIc([1, 1, 1])\n * monOtonIc([1, 1, 1])\n * monOtonIc([1, 1, 1])\n * monOtonIc([1, 1, 1])\n * monOtonIc([1, 1, 1])\n * monOtonIc([1, 1, 1])\n * monOtonIc([1, 1, 1])\n * monOtonIc([1, 1, 1])\n * monOtonIc([1, 1, 1])\n * monOtonIc([1, 1, 1])\n * monOtonIc([1, 1, 1])\n * monOtonIc([1, 1, 1])\n * monOtonIc([1, 1, 1])\n * monOtonIc([1, 1, 1])\n * monOtonIc([1, 1, 1])\n * monOtonIc([1, 1, 1])\n * monOtonIc([1, 1, 1])\n * monOtonIc([1, 1, 1])\n * monOtonIc([1, 1, 1])\n * monOtonIc([1, 1, 1])\n * monOtonIc([1, 1, 1])\n * monOtonIc([1, 1, 1])\n * monOtonIc([1, 1, 1])\n * monOtonIc([1, 1, 1])\n * monOtonIc([1, 1, 1])\n * monOtonIc([1, 1, 1])\n * monO", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/58", "prompt": "/*Return sorted unique comMon elements for two lists.\n  >>> comMon([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> comMon([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst comMon = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "comMon", "gc": "<|endoftext|>/*Return sorted unique comMon elements for two lists.\n  >>> comMon([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> comMon([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst comMon = (l1, l2) => {\n  const set = new Set();\n  const result = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  while (i < l1.length && j < l2.length) {\n    if (l1[i] < l2[j]) {\n      set.add(l1[i]);\n      i++;\n    } else {\n      set.add(l2[j]);\n      j++;\n    }\n  }\n  while (i < l1.length) {\n    set.add(l1[i]);\n    i++;\n  }\n  while (j < l2.length) {\n    set.add(l2[j]);\n    j++;\n  }\n  for (let k of set) {\n    result.push(k);\n  }\n  return result;\n};\n\n/*Return sorted unique comMon elements for two lists.\n  >>> comMon([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst comMon = (l1, l2) => {\n  const set = new Set();\n  const result = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  while (i < l1.length && j < l2.length) {\n    if (l1[i] < l2[j]) {\n      set.add(l1[i]);\n      i++;\n    } else {\n      set.add(l2[j]);\n      j++;\n    }\n  }\n  while (i < l1.length) {\n    set.add(l1[i]);\n    i++;\n  }\n  while (j < l2.length) {\n    set.add(l2[j]);\n    j++;\n  }\n  for (let k of set) {\n    result.push(k);\n  }\n  return result;\n};\n\n/*Return sorted unique comMon elements for two lists.\n  >>> comMon([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst comMon = (l1, l2) => {\n  const set = new Set();\n  const result = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  while (i < l1.length && j < l2.length) {\n    if (l1[i] < l2[j]) {\n      set.add(l1[i]);\n      i++;\n    } else {\n      set.add(l2[j]);\n      j++;\n    }\n  }\n  while (i < l1.length) {\n    set.add(l1[i]);\n    i++;\n  }\n  while (j < l2.length) {\n    set.add(l2[j]);\n    j++;\n  }\n  for (let k of set) {\n    result.push(k);\n  }\n  return result;\n};\n\n/*Return sorted unique comMon elements for two lists.\n  >>> comMon([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst comMon = (l1, l2) => {\n  const set = new Set();\n  const result = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  while (i < l1.length && j < l2.length) {\n    if (l1[i] < l2[j]) {\n      set.add(l1[i]);\n      i++;\n    } else {\n      set.add(l2[j]);\n      j++;\n    }\n  }\n  while (i < l1.length) {\n    set.add(l1[i]);\n    i++;\n  }\n  while (j < l2.length) {\n    set.add(l2[j]);\n    j++;\n  }\n  for (let k of set) {\n    result.push(k);\n  }\n  return result;\n};\n\n/*Return sorted unique comMon elements for two lists.\n  >>> comMon([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst comMon = (l1, l2) => {\n  const set = new Set();\n  const result = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  while (i < l1.length && j < l2.length) {\n    if (l1[i] < l2[j]) {\n      set.add(l1[i]);\n      i++;\n    } else {\n      set.add(l2[j]);\n      j++;\n    }\n  }\n  while (i < l1.length) {\n    set.add(l1[i]);\n    i++;\n  }\n  while (j < l2.length) {\n    set.add(l2[j]);\n    j++;\n  }\n  for (let k of set) {\n    result.push(k);\n  }\n  return result;\n};\n\n/*Return sorted unique comMon elements for two lists.\n  >>> comMon([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst comMon = (l1, l2) => {\n  const set = new Set();\n  const result = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  while (i < l1.length && j < l2.length) {\n    if (l1[i] < l2[j]) {\n      set.add(l1[i]);\n      i++;\n    } else {\n      set.add(l2[j]);\n      j++;\n    }\n  }\n  while (i < l1.length) {\n    set.add(l1[i]);\n    i++;\n  }\n  while (j < l2.length) {\n    set.add(l2[j]);\n    j++;\n  }\n  for (let k of set) {\n    result.push(k);\n  }\n  return result;\n};\n\n/*Return sorted unique comMon elements for two lists.\n  >>> comMon([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst comMon = (l1, l2) => {\n  const set = new Set();\n  const result = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  while (i < l1.length && j < l2.length) {\n    if (l1[i] < l2[j]) {\n      set.add(l1[i]);\n      i++;\n    } else {\n      set.add(l2[j]);\n      j++;\n    }\n  }\n  while (i < l1.length) {\n    set.add(l1[i]);\n    i++;\n  }\n  while (j < l2.length) {\n    set.add(l2[j]);\n    j++;\n  }\n  for (let k of set) {\n    result.push(k);\n  }\n  return result;\n};\n\n/*Return sorted unique comMon elements for two lists.\n  >>> comMon([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst comMon = (l1, l2) => {\n  const set = new Set();\n  const result = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  while (i < l1.length && j < l2.length) {\n    if (l1[i] < l2[j]) {\n      set.add(l1[i]);\n      i++;\n    } else {\n      set.add(l2[j]);\n      j++;\n    }\n  }\n  while (i < l1.length) {\n    set.add(l1[i]);\n    i++;\n  }\n  while (j < l2.length) {\n    set.add(l2[j]);\n    j++;\n  }\n  for (let k of set) {\n    result.push(k);\n  }\n  return result;\n};\n\n/*Return sorted unique comMon elements for two lists.\n  >>> comMon([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst comMon = (l1, l2) => {\n  const set = new Set();\n  const result = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  while (i < l1.length && j < l2.length) {\n    if (l1[i] < l2[j]) {\n      set.add(l1[i]);\n      i++;\n    } else {\n      set.add(l2[j]);\n      j++;\n    }\n  }\n  while (i < l1.length) {\n    set.add(l1[i]);\n    i++;\n  }\n  while (j < l2.length) {\n    set.add(l2[j]);\n    j++;\n  }\n  for (let k of set) {\n    result.push(k);\n  }\n  return result;\n};\n\n/*Return sorted unique comMon elements for two lists.\n  >>> comMon([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> larGestprimefacTor(13195)\n  29\n  >>> larGestprimefacTor(2048)\n  2\n  */\nconst larGestprimefacTor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "larGestprimefacTor", "gc": "<|endoftext|>/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> larGestprimefacTor(13195)\n  29\n  >>> larGestprimefacTor(2048)\n  2\n  */\nconst larGestprimefacTor = (n) => {\n  let i = 1;\n  let j = 1;\n  let k = 1;\n  let l = n;\n  let m = 1;\n  let n = n;\n  let p = 1;\n  let q = n;\n  let r = n;\n  let s = 1;\n  let t = n;\n  let u = 1;\n  let v = n;\n  let w = 1;\n  let x = n;\n  let y = n;\n  let z = n;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i1 = 0;\n  let i2 = 0;\n  let j1 = 0;\n  let j2 = 0;\n  let k1 = 0;\n  let k2 = 0;\n  let k3 = 0;\n  let k4 = 0;\n  let k5 = 0;\n  let k6 = 0;\n  let k7 = 0;\n  let k8 = 0;\n  let k9 = 0;\n  let k10 = 0;\n  let k11 = 0;\n  let k12 = 0;\n  let k13 = 0;\n  let k14 = 0;\n  let k15 = 0;\n  let k16 = 0;\n  let k17 = 0;\n  let k18 = 0;\n  let k19 = 0;\n  let k20 = 0;\n  let k21 = 0;\n  let k22 = 0;\n  let k23 = 0;\n  let k24 = 0;\n  let k25 = 0;\n  let k26 = 0;\n  let k27 = 0;\n  let k28 = 0;\n  let k29 = 0;\n  let k30 = 0;\n  let k31 = 0;\n  let k32 = 0;\n  let k33 = 0;\n  let k34 = 0;\n  let k35 = 0;\n  let k36 = 0;\n  let k37 = 0;\n  let k38 = 0;\n  let k39 = 0;\n  let k40 = 0;\n  let k41 = 0;\n  let k42 = 0;\n  let k43 = 0;\n  let k44 = 0;\n  let k45 = 0;\n  let k46 = 0;\n  let k47 = 0;\n  let k48 = 0;\n  let k49 = 0;\n  let k50 = 0;\n  let k51 = 0;\n  let k52 = 0;\n  let k53 = 0;\n  let k54 = 0;\n  let k55 = 0;\n  let k56 = 0;\n  let k57 = 0;\n  let k58 = 0;\n  let k59 = 0;\n  let k60 = 0;\n  let k61 = 0;\n  let k62 = 0;\n  let k63 = 0;\n  let k64 = 0;\n  let k65 = 0;\n  let k66 = 0;\n  let k67 = 0;\n  let k68 = 0;\n  let k69 = 0;\n  let k70 = 0;\n  let k71 = 0;\n  let k72 = 0;\n  let k73 = 0;\n  let k74 = 0;\n  let k75 = 0;\n  let k76 = 0;\n  let k77 = 0;\n  let k78 = 0;\n  let k79 = 0;\n  let k80 = 0;\n  let k81 = 0;\n  let k82 = 0;\n  let k83 = 0;\n  let k84 = 0;\n  let k85 = 0;\n  let k86 = 0;\n  let k87 = 0;\n  let k88 = 0;\n  let k89 = 0;\n  let k90 = 0;\n  let k91 = 0;\n  let k92 = 0;\n  let k93 = 0;\n  let k94 = 0;\n  let k95 = 0;\n  let k96 = 0;\n  let k97 = 0;\n  let k98 = 0;\n  let k99 = 0;\n  let k100 = 0;\n  let k101 = 0;\n  let k102 = 0;\n  let k103 = 0;\n  let k104 = 0;\n  let k105 = 0;\n  let k106 = 0;\n  let k107 = 0;\n  let k108 = 0;\n  let k109 = 0;\n  let k110 = 0;\n  let k111 = 0;\n  let k112 = 0;\n  let k113 = 0;\n  let k114 = 0;\n  let k115 = 0;\n  let k116 = 0;\n  let k117 = 0;\n  let k118 = 0;\n  let k119 = 0;\n  let k120 = 0;\n  let k121 = 0;\n  let k122 = 0;\n  let k123 = 0;\n  let k124 = 0;\n  let k125 = 0;\n  let k126 = 0;\n  let k127 = 0;\n  let k128 = 0;\n  let k129 = 0;\n  let k130 = 0;\n  let k131 = 0;\n  let k132 = 0;\n  let k133 = 0;\n  let k134 = 0;\n  let k135 = 0;\n  let k136 = 0;\n  let k137 = 0;\n  let k138 = 0;\n  let k139 = 0;\n  let k140 = 0;\n  let k141 = 0;\n  let k142 = 0;\n  let k143 = 0;\n  let k144 = 0;\n  let k145 = 0;\n  let k146 = 0;\n  let k147 = 0;\n  let k148 = 0;\n  let k149 = 0;\n  let k150 = 0;\n  let k151 = 0;\n  let k152 = 0;\n  let k153 = 0;\n  let k154 = 0;\n  let k155 = 0;\n  let k156 = 0;\n  let k157 = 0;\n  let k158 = 0;\n  let k159 = 0;\n  let k160 = 0;\n  let k161 = 0;\n  let k162 = 0;\n  let k163 = 0;\n  let k164 = 0;\n  let k165 = 0;\n  let k166 = 0;\n  let k167 = 0;\n  let k168 = 0;\n  let k169 = 0;\n  let k170 = 0;\n  let k171 = 0;\n  let k172 = 0;\n  let k173 = 0;\n  let k174 = 0;\n  let k175 = 0;\n  let k176 = 0;\n  let k177 = 0;\n  let k178 = 0;\n  let k179 = 0;\n  let k180 = 0;\n  let k181 = 0;\n  let k182 = 0;\n  let k183 = 0;\n  let k184 = 0;\n  let k185 = 0;\n  let k186 = 0;\n  let k187 = 0;\n  let k188 = 0;\n  let k189 = 0;\n  let k190 = 0;\n  let k191 = 0;\n  let k192 = 0;\n  let k193 = 0;\n  let k194 = 0;\n  let k195 = 0;\n  let k196 = 0;\n  let k197 = 0;\n  let k198 = 0;\n  let k199 = 0;\n  let k200 = 0;\n  let k201 = 0;\n  let k202 = 0;\n  let k203 = 0;\n  let k204 = 0;\n  let k205 = 0;\n  let k206 = 0;\n  let k207 = 0;\n  let k208 = 0;\n  let k209 = 0;\n  let k210 = 0;\n  let k211 = 0;\n  let k212 = 0;\n  let k213 = 0;\n  let k214 = 0;\n  let k215 = 0;\n  let k216 = 0;\n  let k217 = 0;\n  let k218 = 0;\n  let k219 = 0;\n  let k220 = 0;\n  let k221 = 0;\n  let k222 = 0;\n  let k223 = 0;\n  let k224 = 0;\n  let k225 = 0;\n  let k226 = 0;\n  let k227 = 0;\n  let k228 = 0;\n  let k229 = 0;\n  let k230 = 0;\n  let k231 = 0;\n  let k232 = 0;\n  let k233 = 0;\n  let k234 = 0;\n  let k235 = 0;\n  let k236 = 0;\n  let k237 = 0;\n  let k238 = 0;\n  let k239 = 0;\n  let k240 = 0;\n  let k241 = 0;\n  let k242 = 0;\n  let k243 = 0;\n  let k244 = 0;\n  let k245 = 0;\n  let k246 = 0;\n  let k247 = 0;\n  let k248 = 0;\n  let k249 = 0;\n  let k250 = 0;\n  let k251 = 0;\n  let k252 = 0;\n  let k253 = 0;\n  let k254 = 0;\n  let k255 = 0;\n  let k256 = 0;\n  let k257 = 0;\n  let k258 = 0;\n  let k259 = 0;\n  let k260 = 0;\n  let k261 = 0;\n  let k262 = 0;\n  let k263 = 0;\n  let k264 = 0;\n  let k265 = 0;\n  let k266 = 0;\n  let k267 = 0;\n  let k268 = 0;\n  let k269 = 0;\n  let k270 = 0;\n  let k271 = 0;\n  let k272 = 0;\n  let k273 = 0;\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parSeNeStedPAreNs('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parSeNeStedPAreNs = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parSeNeStedPAreNs", "gc": "<|endoftext|>/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parSeNeStedPAreNs('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parSeNeStedPAreNs = (paren_string) => {\n  const paren_groups = paren_string.match(/\\(([^)]+)\\)/g);\n  const result = [];\n  let current_level = 0;\n  let current_level_count = 0;\n  for (let i = 0; i < paren_groups.length; i++) {\n    const group = paren_groups[i];\n    const group_parens = group.match(/\\(([^)]+)\\)/g);\n    if (group_parens.length === 0) {\n      result.push(current_level);\n      current_level_count++;\n      current_level = 0;\n    } else {\n      for (let j = 0; j < group_parens.length; j++) {\n        const group_paren = group_parens[j];\n        const group_paren_parens = group_paren.match(/\\(([^)]+)\\)/g);\n        if (group_paren_parens.length === 0) {\n          result.push(current_level);\n          current_level_count++;\n          current_level = 0;\n        } else {\n          for (let k = 0; k < group_paren_parens.length; k++) {\n            const group_paren_paren = group_paren_parens[k];\n            const group_paren_parens = group_paren_paren.match(/\\(([^)]+)\\)/g);\n            if (group_paren_parens.length === 0) {\n              result.push(current_level);\n              current_level_count++;\n              current_level = 0;\n            } else {\n              for (let l = 0; l < group_paren_parens.length; l++) {\n                const group_paren_paren = group_paren_parens[l];\n                const group_paren_parens = group_paren_paren.match(/\\(([^)]+)\\)/g);\n                if (group_paren_parens.length === 0) {\n                  result.push(current_level);\n                  current_level_count++;\n                  current_level = 0;\n                } else {\n                  for (let m = 0; m < group_paren_parens.length; m++) {\n                    const group_paren_paren = group_paren_parens[m];\n                    const group_paren_parens = group_paren_paren.match(/\\(([^)]+)\\)/g);\n                    if (group_paren_parens.length === 0) {\n                      result.push(current_level);\n                      current_level_count++;\n                      current_level = 0;\n                    } else {\n                      for (let n = 0; n < group_paren_parens.length; n++) {\n                        const group_paren_paren = group_paren_parens[n];\n                        const group_paren_parens = group_paren_paren.match(/\\(([^)]+)\\)/g);\n                        if (group_paren_parens.length === 0) {\n                          result.push(current_level);\n                          current_level_count++;\n                          current_level = 0;\n                        } else {\n                          for (let o = 0; o < group_paren_parens.length; o++) {\n                            const group_paren_paren = group_paren_parens[o];\n                            const group_paren_parens = group_paren_paren.match(/\\(([^)]+)\\)/g);\n                            if (group_paren_parens.length === 0) {\n                              result.push(current_level);\n                              current_level_count++;\n                              current_level = 0;\n                            } else {\n                              for (let p = 0; p < group_paren_parens.length; p++) {\n                                const group_paren_paren = group_paren_parens[p];\n                                const group_paren_parens = group_paren_paren.match(/\\(([^)]+)\\)/g);\n                                if (group_paren_parens.length === 0) {\n                                  result.push(current_level);\n                                  current_level_count++;\n                                  current_level = 0;\n                                } else {\n                                  for (let q = 0; q < group_paren_parens.length; q++) {\n                                    const group_paren_paren = group_paren_parens[q];\n                                    const group_paren_parens = group_paren_paren.match(/\\(([^)]+)\\)/g);\n                                    if (group_paren_parens.length === 0) {\n                                      result.push(current_level);\n                                      current_level_count++;\n                                      current_level = 0;\n                                    } else {\n                                      for (let r = 0; r < group_paren_parens.length; r++) {\n                                        const group_paren_paren = group_paren_parens[r];\n                                        const group_paren_parens = group_paren_paren.match(/\\(([^)]+)\\)/g);\n                                        if (group_paren_parens.length === 0) {\n                                          result.push(current_level);\n                                          current_level_count++;\n                                          current_level = 0;\n                                        } else {\n                                          for (let s = 0; s < group_paren_parens.length; s++) {\n                                            const group_paren_paren = group_paren_parens[s];\n                                            const group_paren_parens = group_paren_paren.match(/\\(([^)]+)\\)/g);\n                                            if (group_paren_parens.length === 0) {\n                                              result.push(current_level);\n                                              current_level_count++;\n                                              current_level = 0;\n                                            } else {\n                                              for (let t = 0; t < group_paren_parens.length; t++) {\n                                                const group_paren_paren = group_paren_parens[t];\n                                                const group_paren_parens = group_paren_paren.match(/\\(([^)]+)\\)/g);\n                                                if (group_paren_parens.length === 0) {\n                                                  result.push(current_level);\n                                                  current_level_count++;\n                                                  current_level = 0;\n                                                } else {\n                                                  for (let u = 0; u < group_paren_parens.length; u++) {\n                                                    const group_paren_paren = group_paren_parens[u];\n                                                    const group_paren_parens = group_paren_paren.match(/\\(([^)]+)\\)/g);\n                                                    if (group_paren_parens.length === 0) {\n                                                      result.push(current_level);\n                                                      current_level_count++;\n                                                      current_level = 0;\n                                                    } else {\n                                                      for (let v = 0; v < group_paren_parens.length; v++) {\n                                                        const group_paren_paren = group_paren_parens[v];\n                                                        const group_paren_parens = group_paren_paren.match(/\\(([^)]+)\\)/g);\n                                                        if (group_paren_parens.length === 0) {\n                                                          result.push(current_level);\n                                                          current_level_count++;\n                                                          current_level = 0;\n                                                        } else {\n                                                          for (let w = 0; w < group_paren_parens.length; w++) {\n                                                            const group_paren_paren = group_paren_parens[w];\n                                                            const group_paren_parens = group_paren_paren.match(/\\(([^)]+)\\)/g);\n                                                            if (group_paren_parens.length === 0) {\n                                                              result.push(current_level);\n                                                              current_level_count++;\n                                                              current_level = 0;\n                                                            } else {\n                                                              for (let x = 0; x < group_paren_parens.length; x++) {\n                                                                const group_paren_paren = group_paren_parens[x];\n                                                                const group_paren_parens = group_paren_paren.match(/\\(([^)]+)\\)/g);\n                                                                if (group_paren_parens.length === 0) {\n                                                                    result.push(current_level);\n                                                                    current_level_count++;\n                                                                    current_level = 0;\n                                                                  } else {\n                                                                    for (let y = 0; y < group_paren_parens.length; y++) {\n                                                                      const group_paren_paren = group_paren_parens[y];\n                                                                      const group_paren_parens = group_paren_paren.match(/\\(([^)]+)\\)/g);\n                                                                      if (group_paren_parens.length === 0) {\n                                                                        result.push(current_level);\n                                                                        current_level_count++;\n                                                                        current_level = 0;\n                                                                      } else {\n                                                                        for (let z = 0; z < group_paren_parens.length; z++) {\n                                                                          const group_paren_paren = group_paren_paren", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/60", "prompt": "/*sumtoN is a function that sums numbers from 1 to n.\n  >>> sumtoN(30)\n  465\n  >>> sumtoN(100)\n  5050\n  >>> sumtoN(5)\n  15\n  >>> sumtoN(10)\n  55\n  >>> sumtoN(1)\n  1\n  */\nconst sumtoN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumtoN", "gc": "<|endoftext|>/*sumtoN is a function that sums numbers from 1 to n.\n  >>> sumtoN(30)\n  465\n  >>> sumtoN(100)\n  5050\n  >>> sumtoN(5)\n  15\n  >>> sumtoN(10)\n  55\n  >>> sumtoN(1)\n  1\n  */\nconst sumtoN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  A function that takes an array and returns the sum of the elements.\n  >>> sumElements([1,2,3,4,5])\n  15\n  >>> sumElements([1,2,3,4,5,6])\n  15\n  >>> sumElements([1,2,3,4,5,6,7])\n  15\n  >>> sumElements([1,2,3,4,5,6,7,8])\n  15\n  >>> sumElements([1,2,3,4,5,6,7,8,9])\n  15\n  >>> sumElements([1,2,3,4,5,6,7,8,9,10])\n  15\n  >>> sumElements([1,2,3,4,5,6,7,8,9,10,11])\n  15\n  >>> sumElements([1,2,3,4,5,6,7,8,9,10,11,12])\n  15\n  >>> sumElements([1,2,3,4,5,6,7,8,9,10,11,12,13])\n  15\n  >>> sumElements([1,2,3,4,5,6,7,8,9,10,11,12,13,14])\n  15\n  >>> sumElements([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15])\n  15\n  >>> sumElements([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16])\n  15\n  >>> sumElements([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17])\n  15\n  >>> sumElements([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18])\n  15\n  >>> sumElements([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19])\n  15\n  >>> sumElements([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n  15\n  >>> sumElements([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21])\n  15\n  >>> sumElements([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22])\n  15\n  >>> sumElements([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23])\n  15\n  >>> sumElements([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24])\n  15\n  >>> sumElements([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25])\n  15\n  >>> sumElements([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26])\n  15\n  >>> sumElements([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27])\n  15\n  >>> sumElements([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28])\n  15\n  >>> sumElements([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29])\n  15\n  >>> sumElements([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30])\n  15\n  >>> sumElements([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31])\n  15\n  >>> sumElements([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32])\n  15\n  >>> sumElements([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33])\n  15\n  >>> sumElements([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34])\n  15\n  >>> sumElements([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35])\n  15\n  >>> sumElements([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36])\n  15\n  >>> sumElements([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37])\n  15\n  >>> sumElements([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38])\n  15\n  >>> sumElements([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39])\n  15\n  >>> sumElements([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40])\n  15\n  >>> sumElements([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41])\n  15\n  >>> sumElements([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42])\n  15\n  >>> sumElements([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43])\n  15\n  >>> sumElements([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44])\n  15\n  >>> sumElements([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45])\n  15\n  >>> sumElements([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,4", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> corRectbrackEtiNg(\"(\")\n  false\n  >>> corRectbrackEtiNg(\"()\")\n  true\n  >>> corRectbrackEtiNg(\"(()())\")\n  true\n  >>> corRectbrackEtiNg(\")(()\")\n  false\n  */\nconst corRectbrackEtiNg = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "corRectbrackEtiNg", "gc": "<|endoftext|>/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> corRectbrackEtiNg(\"(\")\n  false\n  >>> corRectbrackEtiNg(\"()\")\n  true\n  >>> corRectbrackEtiNg(\"(()())\")\n  true\n  >>> corRectbrackEtiNg(\")(()\")\n  false\n  */\nconst corRectbrackEtiNg = (brackets) => {\n  const openingBrackets = brackets.split(\"(\").map(x => x.trim());\n  const closingBrackets = brackets.split(\")\").map(x => x.trim());\n\n  return openingBrackets.every(x => closingBrackets.includes(x));\n};\n\n/**\n * Returns true if the given string is a valid rectangular bracket.\n *\n * Valid rectangular brackets are \"(\" and \")\".\n *\n * >>> isRectangularBracket(\"(\")\n * true\n * >>> isRectangularBracket(\"()\")\n * false\n * >>> isRectangularBracket(\"(()())\")\n * true\n * >>> isRectangularBracket(\")(()\")\n * false\n */\nconst isRectangularBracket = (brackets) => {\n  const openingBrackets = brackets.split(\"(\").map(x => x.trim());\n  const closingBrackets = brackets.split(\")\").map(x => x.trim());\n\n  return openingBrackets.every(x => closingBrackets.includes(x));\n};\n\n/**\n * Returns true if the given string is a valid rectangular bracket.\n *\n * Valid rectangular brackets are \"(\" and \")\".\n *\n * >>> isRectangularBracket(\"(()\")\n * true\n * >>> isRectangularBracket(\"(()())\")\n * true\n * >>> isRectangularBracket(\"(()())\")\n * false\n */\nconst isRectangularBracketNg = (brackets) => {\n  const openingBrackets = brackets.split(\"(\").map(x => x.trim());\n  const closingBrackets = brackets.split(\")\").map(x => x.trim());\n\n  return openingBrackets.every(x => closingBrackets.includes(x));\n};\n\n/**\n * Returns true if the given string is a valid rectangular bracket.\n *\n * Valid rectangular brackets are \"(\" and \")\".\n *\n * >>> isRectangularBracketNg(\"(()\")\n * true\n * >>> isRectangularBracketNg(\"(()())\")\n * true\n * >>> isRectangularBracketNg(\"(()())\")\n * false\n */\nconst isRectangularBracketNgEtiNg = (brackets) => {\n  const openingBrackets = brackets.split(\"(\").map(x => x.trim());\n  const closingBrackets = brackets.split(\")\").map(x => x.trim());\n\n  return openingBrackets.every(x => closingBrackets.includes(x));\n};\n\n/**\n * Returns true if the given string is a valid rectangular bracket.\n *\n * Valid rectangular brackets are \"(\" and \")\".\n *\n * >>> isRectangularBracketNgEtiNg(\"(()\")\n * true\n * >>> isRectangularBracketNgEtiNg(\"(()())\")\n * true\n * >>> isRectangularBracketNgEtiNg(\"(()())\")\n * false\n */\nconst isRectangularBracketNgEtiNg = (brackets) => {\n  const openingBrackets = brackets.split(\"(\").map(x => x.trim());\n  const closingBrackets = brackets.split(\")\").map(x => x.trim());\n\n  return openingBrackets.every(x => closingBrackets.includes(x));\n};\n\n/**\n * Returns true if the given string is a valid rectangular bracket.\n *\n * Valid rectangular brackets are \"(\" and \")\".\n *\n * >>> isRectangularBracketNgEtiNg(\"(()\")\n * true\n * >>> isRectangularBracketNgEtiNg(\"(()())\")\n * true\n * >>> isRectangularBracketNgEtiNg(\"(()())\")\n * false\n */\nconst isRectangularBracketNgEtiNgEtiNg = (brackets) => {\n  const openingBrackets = brackets.split(\"(\").map(x => x.trim());\n  const closingBrackets = brackets.split(\")\").map(x => x.trim());\n\n  return openingBrackets.every(x => closingBrackets.includes(x));\n};\n\n/**\n * Returns true if the given string is a valid rectangular bracket.\n *\n * Valid rectangular brackets are \"(\" and \")\".\n *\n * >>> isRectangularBracketNgEtiNgEtiNg(\"(()\")\n * true\n * >>> isRectangularBracketNgEtiNgEtiNg(\"(()())\")\n * true\n * >>> isRectangularBracketNgEtiNgEtiNg(\"(()())\")\n * false\n */\nconst isRectangularBracketNgEtiNgEtiNg = (brackets) => {\n  const openingBrackets = brackets.split(\"(\").map(x => x.trim());\n  const closingBrackets = brackets.split(\")\").map(x => x.trim());\n\n  return openingBrackets.every(x => closingBrackets.includes(x));\n};\n\n/**\n * Returns true if the given string is a valid rectangular bracket.\n *\n * Valid rectangular brackets are \"(\" and \")\".\n *\n * >>> isRectangularBracketNgEtiNgEtiNg(\"(()\")\n * true\n * >>> isRectangularBracketNgEtiNgEtiNg(\"(()())\")\n * true\n * >>> isRectangularBracketNgEtiNgEtiNg(\"(()())\")\n * false\n */\nconst isRectangularBracketNgEtiNgEtiNgEtiNg = (brackets) => {\n  const openingBrackets = brackets.split(\"(\").map(x => x.trim());\n  const closingBrackets = brackets.split(\")\").map(x => x.trim());\n\n  return openingBrackets.every(x => closingBrackets.includes(x));\n};\n\n/**\n * Returns true if the given string is a valid rectangular bracket.\n *\n * Valid rectangular brackets are \"(\" and \")\".\n *\n * >>> isRectangularBracketNgEtiNgEtiNgEtiNg(\"(()\")\n * true\n * >>> isRectangularBracketNgEtiNgEtiNgEtiNg(\"(()())\")\n * true\n * >>> isRectangularBracketNgEtiNgEtiNgEtiNg(\"(()())\")\n * false\n */\nconst isRectangularBracketNgEtiNgEtiNgEtiNgEtiNg = (brackets) => {\n  const openingBrackets = brackets.split(\"(\").map(x => x.trim());\n  const closingBrackets = brackets.split(\")", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   Return derIvatIve of this polynomial in the same form.\n  >>> derIvatIve([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derIvatIve([1, 2, 3])\n  [2, 6]\n  */\nconst derIvatIve = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derIvatIve", "gc": "<|endoftext|>/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return derIvatIve of this polynomial in the same form.\n  >>> derIvatIve([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derIvatIve([1, 2, 3])\n  [2, 6]\n  */\nconst derIvatIve = (xs) => {\n  let derIvatIve = [1, 0];\n  for (let i = 0; i < xs.length; i++) {\n    derIvatIve = derIvatIve.concat(\n      xs[i] * derIvatIve.slice(0, i).concat(derIvatIve.slice(i + 1))\n    );\n  }\n  return derIvatIve;\n};\n\n/**\n * Compute the inverse of a polynomial\n * x^-1 * x^-2 * x^-3 * x^-4 * x^-5 * x^-6 * x^-7 * x^-8\n * Return invIve of this polynomial in the same form.\n * >>> invIve([3, 1, 2, 4, 5])\n * [1, 4, 12, 20]\n * >>> invIve([1, 2, 3])\n * [2, -3]\n */\nconst invIve = (xs) => {\n  let invIve = [1, 0];\n  for (let i = 0; i < xs.length; i++) {\n    invIve = invIve.concat(\n      xs[i] * invIve.slice(0, i).concat(invIve.slice(i + 1))\n    );\n  }\n  return invIve;\n};\n\n/**\n * Compute the inverse of a polynomial\n * x^-1 * x^-2 * x^-3 * x^-4 * x^-5 * x^-6 * x^-7 * x^-8\n * Return invIve of this polynomial in the same form.\n * >>> invIve([3, 1, 2, 4, 5])\n * [1, 4, 12, 20]\n * >>> invIve([1, 2, 3])\n * [2, -3]\n */\nconst invIve = (xs) => {\n  let invIve = [1, 0];\n  for (let i = 0; i < xs.length; i++) {\n    invIve = invIve.concat(\n      xs[i] * invIve.slice(0, i).concat(invIve.slice(i + 1))\n    );\n  }\n  return invIve;\n};\n\n/**\n * Compute the inverse of a polynomial\n * x^-1 * x^-2 * x^-3 * x^-4 * x^-5 * x^-6 * x^-7 * x^-8\n * Return invIve of this polynomial in the same form.\n * >>> invIve([3, 1, 2, 4, 5])\n * [1, 4, 12, 20]\n * >>> invIve([1, 2, 3])\n * [2, -3]\n */\nconst invIve = (xs) => {\n  let invIve = [1, 0];\n  for (let i = 0; i < xs.length; i++) {\n    invIve = invIve.concat(\n      xs[i] * invIve.slice(0, i).concat(invIve.slice(i + 1))\n    );\n  }\n  return invIve;\n};\n\n/**\n * Compute the inverse of a polynomial\n * x^-1 * x^-2 * x^-3 * x^-4 * x^-5 * x^-6 * x^-7 * x^-8\n * Return invIve of this polynomial in the same form.\n * >>> invIve([3, 1, 2, 4, 5])\n * [1, 4, 12, 20]\n * >>> invIve([1, 2, 3])\n * [2, -3]\n */\nconst invIve = (xs) => {\n  let invIve = [1, 0];\n  for (let i = 0; i < xs.length; i++) {\n    invIve = invIve.concat(\n      xs[i] * invIve.slice(0, i).concat(invIve.slice(i + 1))\n    );\n  }\n  return invIve;\n};\n\n/**\n * Compute the inverse of a polynomial\n * x^-1 * x^-2 * x^-3 * x^-4 * x^-5 * x^-6 * x^-7 * x^-8\n * Return invIve of this polynomial in the same form.\n * >>> invIve([3, 1, 2, 4, 5])\n * [1, 4, 12, 20]\n * >>> invIve([1, 2, 3])\n * [2, -3]\n */\nconst invIve = (xs) => {\n  let invIve = [1, 0];\n  for (let i = 0; i < xs.length; i++) {\n    invIve = invIve.concat(\n      xs[i] * invIve.slice(0, i).concat(invIve.slice(i + 1))\n    );\n  }\n  return invIve;\n};\n\n/**\n * Compute the inverse of a polynomial\n * x^-1 * x^-2 * x^-3 * x^-4 * x^-5 * x^-6 * x^-7 * x^-8\n * Return invIve of this polynomial in the same form.\n * >>> invIve([3, 1, 2, 4, 5])\n * [1, 4, 12, 20]\n * >>> invIve([1, 2, 3])\n * [2, -3]\n */\nconst invIve = (xs) => {\n  let invIve = [1, 0];\n  for (let i = 0; i < xs.length; i++) {\n    invIve = invIve.concat(\n      xs[i] * invIve.slice(0, i).concat(invIve.slice(i + 1))\n    );\n  }\n  return invIve;\n};\n\n/**\n * Compute the inverse of a polynomial\n * x^-1 * x^-2 * x^-3 * x^-4 * x^-5 * x^-6 * x^-7 * x^-8\n * Return invIve of this polynomial in the same form.\n * >>> invIve([3, 1, 2, 4, 5])\n * [1, 4, 12, 20]\n * >>> invIve([1, 2, 3])\n * [2, -3]\n */\nconst invIve = (xs) => {\n  let invIve = [1, 0];\n  for (let i = 0; i < xs.length; i++) {\n    invIve = invIve.concat(\n      xs[i] * invIve.slice(0, i).concat(invIve.slice(i + 1))\n    );\n  }\n  return invIve;\n};\n\n/**\n * Compute the inverse of a polynomial\n * x^-1 * x^-2 * x^-3 * x^-4 * x^-5 * x^-6 * x^-7 * x^-8\n * Return invIve of this polynomial in the same form.\n * >>> invIve([3, 1, 2, 4, 5])\n * [1, 4, 12, 20]\n * >>> invIve([1, 2, 3])\n * [2, -3]\n */\nconst invIve = (xs) => {\n  let invIve = [1, 0];\n  for (let i = 0; i < xs.length; i++) {\n    invIve = invIve.concat(\n      xs[i] * invIve.slice(0, i).concat(invIve.slice(i + 1))\n    );\n  }\n  return invIve;\n};\n\n/**\n * Compute the inverse of a polynomial\n * x^-1 * x^-2 * x^-3 * x^-4 * x^-5 * x^-6 * x^-7 * x^-8\n * Return invIve of this polynomial in the same form.\n * >>> invIve([3, 1, 2, 4, 5])\n * [1, 4, 12, 20]\n * >>> invIve([1, 2, 3])\n * [2, -3]\n */\nconst invIve = (xs) => {\n  let invIve = [1, 0];\n  for (let i = 0; i < xs.length; i++) {\n    invIve = invIve.concat(\n      xs[i] * invIve.slice(0, i).concat(invIve.", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibFib(0) == 0\n  fibFib(1) == 0\n  fibFib(2) == 1\n  fibFib(n) == fibFib(n-1) + fibFib(n-2) + fibFib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibFib number sequence.\n  >>> fibFib(1)\n  0\n  >>> fibFib(5)\n  4\n  >>> fibFib(8)\n  24\n  */\nconst fibFib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibFib", "gc": "<|endoftext|>/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibFib(0) == 0\n  fibFib(1) == 0\n  fibFib(2) == 1\n  fibFib(n) == fibFib(n-1) + fibFib(n-2) + fibFib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibFib number sequence.\n  >>> fibFib(1)\n  0\n  >>> fibFib(5)\n  4\n  >>> fibFib(8)\n  24\n  */\nconst fibFib = (n) => {\n  let fibFib = 0;\n  fibFib += fibFib * fibFib * fibFib * fibFib * fibFib * fibFib * fibFib * fibFib * fibFib * fibFib * fibFib * fibFib * fibFib * fibFib * fibFib * fibFib * fibFib * fibFib * fibFib * fibFib * fibFib * fibFib * fibFib * fibFib * fibFib * fibFib * fibFib * fibFib * fibFib * fibFib * fibFib * fibFib * fibFib * fibFib * fibFib * fibFib * fibFib * fibFib * fibFib * fibFib * fibFib * fibFib * fibFib * fibFib * fibFib * fibFib * fibFib * fibFib * fibFib * fibFib * fibFib * fibFib * fibFib * fibFib * fibFib * fibFib * fibFib * fibFib * fibFib * fibFib * fibFib * fibFib * fibFib * fibFib * fibFib * fibFib * fibFib * fibFib * fibFib * fibFib * fibFib * fibFib * fibFib * fibFib * fibFib * fibFib * fibFib * fibFib * fibFib * fibFib * fibFib * fibFib * fibFib * fibFib * fibFib * fib * Fib * fib * Fib * fib * fib * Fib * fib * fib * Fib * fib * fib * fib * Fib * fib * fib * Fib * fib * fib * Fib * fib * fib * Fib * fib * fib * Fib * fib * fib * Fib * fib * fib * Fib * fib * fib * Fib * fib * fib * Fib * fib * fib * Fib * fib * fib * Fib * fib * fib * fib * Fib * fib * fib * Fib * fib * fib * fib * Fib * fib * fib * fib * Fib * fib * fib * fib * fib * fib * Fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * fib * ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/64", "prompt": "/*Write a function vowElsCOunt which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowElsCOunt(\"abcde\")\n  2\n  >>> vowElsCOunt(\"ACEDY\")\n  3\n  */\nconst vowElsCOunt = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowElsCOunt", "gc": "<|endoftext|>/*Write a function vowElsCOunt which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowElsCOunt(\"abcde\")\n  2\n  >>> vowElsCOunt(\"ACEDY\")\n  3\n  */\nconst vowElsCOunt = (s) => {\n  let count = 0;\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let vowelsEnd = vowels.indexOf(s.charAt(s.length - 1));\n  let vowelsStart = vowels.indexOf(s.charAt(0));\n  let vowelsEnd = vowelsStart + 1;\n  let vowelsStart = vowelsEnd - 1;\n  let vowelsEnd = vowelsStart + 1;\n  let vowelsStart = vowelsEnd - 1;\n  let vowelsEnd = vowelsStart + 1;\n  let vowelsStart = vowelsEnd - 1;\n  let vowelsEnd = vowelsStart + 1;\n  let vowelsStart = vowelsEnd - 1;\n  let vowelsEnd = vowelsStart + 1;\n  let vowelsStart = vowelsEnd - 1;\n  let vowelsEnd = vowelsStart + 1;\n  let vowelsStart = vowelsEnd - 1;\n  let vowelsEnd = vowelsStart + 1;\n  let vowelsStart = vowelsEnd - 1;\n  let vowelsEnd = vowelsStart + 1;\n  let vowelsStart = vowelsEnd - 1;\n  let vowelsEnd = vowelsStart + 1;\n  let vowelsStart = vowelsEnd - 1;\n  let vowelsEnd = vowelsStart + 1;\n  let vowelsStart = vowelsEnd - 1;\n  let vowelsEnd = vowelsStart + 1;\n  let vowelsStart = vowelsEnd - 1;\n  let vowelsEnd = vowelsStart + 1;\n  let vowelsStart = vowelsEnd - 1;\n  let vowelsEnd = vowelsStart + 1;\n  let vowelsStart = vowelsEnd - 1;\n  let vowelsEnd = vowelsStart + 1;\n  let vowelsStart = vowelsEnd - 1;\n  let vowelsEnd = vowelsStart + 1;\n  let vowelsStart = vowelsEnd - 1;\n  let vowelsEnd = vowelsStart + 1;\n  let vowelsStart = vowelsEnd - 1;\n  let vowelsEnd = vowelsStart + 1;\n  let vowelsStart = vowelsEnd - 1;\n  let vowelsEnd = vowelsStart + 1;\n  let vowelsStart = vowelsEnd - 1;\n  let vowelsEnd = vowelsStart + 1;\n  let vowelsStart = vowelsEnd - 1;\n  let vowelsEnd = vowelsStart + 1;\n  let vowelsStart = vowelsEnd - 1;\n  let vowelsEnd = vowelsStart + 1;\n  let vowelsStart = vowelsEnd - 1;\n  let vowelsEnd = vowelsStart + 1;\n  let vowelsStart = vowelsEnd - 1;\n  let vowelsEnd = vowelsStart + 1;\n  let vowelsStart = vowelsEnd - 1;\n  let vowelsEnd = vowelsStart + 1;\n  let vowelsStart = vowelsEnd - 1;\n  let vowelsEnd = vowelsStart + 1;\n  let vowelsStart = vowelsEnd - 1;\n  let vowelsEnd = vowelsStart + 1;\n  let vowelsStart = vowelsEnd - 1;\n  let vowelsEnd = vowelsStart + 1;\n  let vowelsStart = vowelsEnd - 1;\n  let vowelsEnd = vowelsStart + 1;\n  let vowelsStart = vowelsEnd - 1;\n  let vowelsEnd = vowelsStart + 1;\n  let vowelsStart = vowelsEnd - 1;\n  let vowelsEnd = vowelsStart + 1;\n  let vowelsStart = vowelsEnd - 1;\n  let vowelsEnd = vowelsStart + 1;\n  let vowelsStart = vowelsEnd - 1;\n  let vowelsEnd = vowelsStart + 1;\n  let vowelsStart = vowelsEnd - 1;\n  let vowelsEnd = vowelsStart + 1;\n  let vowelsStart = vowelsEnd - 1;\n  let vowelsEnd = vowelsStart + 1;\n  let vowelsStart = vowelsEnd - 1;\n  let vowelsEnd = vowelsStart + 1;\n  let vowelsStart = vowelsEnd - 1;\n  let vowelsEnd = vowelsStart + 1;\n  let vowelsStart = vowelsEnd - 1;\n  let vowelsEnd = vowelsStart + 1;\n  let vowelsStart = vowelsEnd - 1;\n  let vowelsEnd = vowelsStart + 1;\n  let vowelsStart = vowelsEnd - 1;\n  let vowelsEnd = vowelsStart + 1;\n  let vowelsStart = vowelsEnd - 1;\n  let vowelsEnd = vowelsStart + 1;\n  let vowelsStart = vowelsEnd - 1;\n  let vowelsEnd = vowelsStart + 1;\n  let vowelsStart = vowelsEnd - 1;\n  let vowelsEnd = vowelsStart + 1;\n  let vowelsStart = vowelsEnd - 1;\n  let vowelsEnd = vowelsStart + 1;\n  let vowelsStart = vowelsEnd - 1;\n  let vowelsEnd = vowelsStart + 1;\n  let vowelsStart = vowelsEnd - 1;\n  let vowelsEnd = vowelsStart + 1;\n  let vowelsStart = vowelsEnd - 1;\n  let vowelsEnd = vowelsStart + 1;\n  let vowelsStart = vowelsEnd - 1;\n  let vowelsEnd = vowelsStart + 1;\n  let vowelsStart = vowelsEnd - 1;\n  let vowelsEnd = vowelsStart + 1;\n  let vowelsStart = vowelsEnd - 1;\n  let vowelsEnd = vowelsStart + 1;\n  let vowelsStart = vowelsEnd - 1;\n  let vowelsEnd = vowelsStart + 1;\n  let vowelsStart = vowelsEnd - 1;\n  let vowelsEnd = vowelsStart + 1;\n  let vowelsStart = vowelsEnd - 1;\n  let vowelsEnd = vowelsStart + 1;\n  let vowelsStart = vowelsEnd - 1;\n  let vowelsEnd = vowelsStart + 1;\n  let vowelsStart = vowelsEnd - 1;\n  let vowelsEnd = vowelsStart + 1;\n  let vowelsStart = vowelsEnd - 1;\n  let vowelsEnd = vowelsStart + 1;\n  let vowelsStart = vowelsEnd - 1;\n  let vowelsEnd = vowelsStart + 1;\n  let vowelsStart = vowelsEnd - 1;\n  let vowelsEnd = vowelsStart + 1;\n  let vowelsStart = vowelsEnd - 1;\n  let vowelsEnd = vowelsStart + 1;\n  let vowelsStart = vowelsEnd - 1;\n  let vowelsEnd = vowelsStart + 1;\n  let vowelsStart = vowelsEnd - 1;\n  let vowelsEnd = vowelsStart + 1;\n  let vowelsStart = vowelsEnd - 1;\n  let vowelsEnd = vowelsStart + 1;\n  let vowelsStart = vowelsEnd - 1;\n  let vowelsEnd = vowelsStart + 1;\n  let vowelsStart = vowelsEnd - 1;\n  let vowelsEnd = vowelsStart + 1;\n  let vowelsStart = vowelsEnd - 1;\n  let vowelsEnd = vowelsStart + 1;\n  let vowelsStart = vowelsEnd - 1;\n  let vowelsEnd = vowelsStart + 1;\n  let vowelsStart = vowelsEnd - 1;\n  let vowelsEnd = vowelsStart + 1;\n  let vowelsStart = vowelsEnd - 1;\n  let vowelsEnd = vowelsStart + 1;\n  let vowelsStart = vowelsEnd - 1;\n  let vowelsEnd = vowelsStart + 1;\n  let vowelsStart = vowelsEnd - 1;\n  let vowelsEnd = vowelsStart + 1;\n  let vowelsStart = vowelsEnd - 1;\n  let vowelsEnd = vowelsStart ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> cirCulaRShifT(12, 1)\n  \"21\"\n  >>> cirCulaRShifT(12, 2)\n  \"12\"\n  */\nconst cirCulaRShifT = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "cirCulaRShifT", "gc": "<|endoftext|>/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> cirCulaRShifT(12, 1)\n  \"21\"\n  >>> cirCulaRShifT(12, 2)\n  \"12\"\n  */\nconst cirCulaRShifT = (x, shift) => {\n  let digits = x.toString(2).split('').reverse().join('')\n  let reversed = digits.slice(0).reverse().join('')\n  return reversed.slice(shift, digits.length - shift)\n}\n\n/*\n  Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> cirCulaRShifT(12, 2)\n  \"12\"\n  >>> cirCulaRShifT(12, 1)\n  \"21\"\n  */\nconst cirCulaRShiftR = (x, shift) => {\n  let digits = x.toString(2).split('').reverse().join('')\n  let reversed = digits.slice(0).reverse().join('')\n  return reversed.slice(digits.length - shift, shift)\n}\n\n/*\n  Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> cirCulaRShifT(12, 1)\n  \"21\"\n  >>> cirCulaRShifT(12, 2)\n  \"12\"\n  */\nconst cirCulaRShiftL = (x, shift) => {\n  let digits = x.toString(2).split('').reverse().join('')\n  let reversed = digits.slice(0).reverse().join('')\n  return reversed.slice(digits.length - shift, shift)\n}\n\n/*\n  Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> cirCulaRShifT(12, 1)\n  \"21\"\n  >>> cirCulaRShifT(12, 2)\n  \"12\"\n  */\nconst cirCulaRShiftRL = (x, shift) => {\n  let digits = x.toString(2).split('').reverse().join('')\n  let reversed = digits.slice(0).reverse().join('')\n  return reversed.slice(digits.length - shift, shift)\n}\n\n/*\n  Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> cirCulaRShifT(12, 1)\n  \"21\"\n  >>> cirCulaRShifT(12, 2)\n  \"12\"\n  */\nconst cirCulaRShiftRR = (x, shift) => {\n  let digits = x.toString(2).split('').reverse().join('')\n  let reversed = digits.slice(0).reverse().join('')\n  return reversed.slice(digits.length - shift, shift)\n}\n\n/*\n  Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> cirCulaRShifT(12, 1)\n  \"21\"\n  >>> cirCulaRShifT(12, 2)\n  \"12\"\n  */\nconst cirCulaRShiftLL = (x, shift) => {\n  let digits = x.toString(2).split('').reverse().join('')\n  let reversed = digits.slice(0).reverse().join('')\n  return reversed.slice(digits.length - shift, shift)\n}\n\n/*\n  Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> cirCulaRShifT(12, 1)\n  \"21\"\n  >>> cirCulaRShifT(12, 2)\n  \"12\"\n  */\nconst cirCulaRShiftRR = (x, shift) => {\n  let digits = x.toString(2).split('').reverse().join('')\n  let reversed = digits.slice(0).reverse().join('')\n  return reversed.slice(digits.length - shift, shift)\n}\n\n/*\n  Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> cirCulaRShifT(12, 1)\n  \"21\"\n  >>> cirCulaRShifT(12, 2)\n  \"12\"\n  */\nconst cirCulaRShiftRL = (x, shift) => {\n  let digits = x.toString(2).split('').reverse().join('')\n  let reversed = digits.slice(0).reverse().join('')\n  return reversed.slice(digits.length - shift, shift)\n}\n\n/*\n  Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> cirCulaRShifT(12, 1)\n  \"21\"\n  >>> cirCulaRShifT(12, 2)\n  \"12\"\n  */\nconst cirCulaRShiftRLL = (x, shift) => {\n  let digits = x.toString(2).split('').reverse().join('')\n  let reversed = digits.slice(0).reverse().join('')\n  return reversed.slice(digits.length - shift, shift)\n}\n\n/*\n  Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> cirCulaRShifT(12, 1)\n  \"21\"\n  >>> cirCulaRShifT(12, 2)\n  \"12\"\n  */\nconst cirCulaRShiftRRR = (x, shift) => {\n  let digits = x.toString(2).split('').reverse().join('')\n  let reversed = digits.slice(0).reverse().join('')\n  return reversed.slice(digits.length - shift, shift)\n}\n\n/*\n  Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> cirCulaRShifT(12, 1)\n  \"21\"\n  >>> cirCulaRShifT(12, 2)\n  \"12\"\n  */\nconst cirCulaRShiftRLRL = (x, shift) => {\n  let digits = x.toString(2).split('').reverse().join('')\n  let reversed = digits.slice(0).reverse().join('')\n  return reversed.slice(digits.length - shift, shift)\n}\n\n/*\n  Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> cirCulaRShifT(12, 1)\n  \"21\"\n  >>> cirCulaRShifT(12, 2)\n  \"12\"\n  */\nconst cirCulaRShiftRLLR = (x, shift) => {\n  let digits = x.toString(2).split('').reverse().join('')\n  let reversed = digits.slice(0).reverse().join('')\n  return reversed.slice(digits.length - shift, shift)\n}\n\n/*\n  Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> cirCulaRShifT(12, 1)\n  \"21\"\n  >>> cirCulaRShifT(12, 2)\n  \"12\"\n  */\nconst cirCulaRShiftRRRL = (x, shift) => {\n  let digits = x.toString(2).split('').reverse().join('')\n  let reversed = digits.slice(0).reverse().join('')\n  return reversed.slice(digits.length - shift, shift)\n}\n\n/*\n  Circular shift the digits ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/66", "prompt": "/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digItSuM(\"\") => 0\n      digItSuM(\"abAB\") => 131\n      digItSuM(\"abcCd\") => 67\n      digItSuM(\"helloE\") => 69\n      digItSuM(\"woArBld\") => 131\n      digItSuM(\"aAaaaXa\") => 153\n  */\nconst digItSuM = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digItSuM", "gc": "<|endoftext|>/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digItSuM(\"\") => 0\n      digItSuM(\"abAB\") => 131\n      digItSuM(\"abcCd\") => 67\n      digItSuM(\"helloE\") => 69\n      digItSuM(\"woArBld\") => 131\n      digItSuM(\"aAaaaXa\") => 153\n  */\nconst digItSuM = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    sum += s.charCodeAt(i) - 64;\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the lower characters only'\n  ASCII codes.\n\n  Examples:\n      digItSuL(\"\") => 0\n      digItSuL(\"abAB\") => 131\n      digItSuL(\"abcCd\") => 67\n      digItSuL(\"helloE\") => 69\n      digItSuL(\"woArBld\") => 131\n      digItSuL(\"aAaaaXa\") => 153\n  */\nconst digItSuL = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    sum += s.charCodeAt(i) - 32;\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the digits only'\n  ASCII codes.\n\n  Examples:\n      digItDt(\"\") => 0\n      digItDt(\"abAB\") => 131\n      digItDt(\"abcCd\") => 67\n      digItDt(\"helloE\") => 69\n      digItDt(\"woArBld\") => 131\n      digItDt(\"aAaaaXa\") => 153\n  */\nconst digItDt = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    sum += s.charCodeAt(i) - 48;\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the uppercase characters\n  only'\n  ASCII codes.\n\n  Examples:\n      digItSuU(\"\") => 0\n      digItSuU(\"abAB\") => 131\n      digItSuU(\"abcCd\") => 67\n      digItSuU(\"helloE\") => 69\n      digItSuU(\"woArBld\") => 131\n      digItSuU(\"aAaaaXa\") => 153\n  */\nconst digItSuU = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    sum += s.charCodeAt(i) - 96;\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the lowercase characters\n  only'\n  ASCII codes.\n\n  Examples:\n      digItSuL(\"\") => 0\n      digItSuL(\"abAB\") => 131\n      digItSuL(\"abcCd\") => 67\n      digItSuL(\"helloE\") => 69\n      digItSuL(\"woArBld\") => 131\n      digItSuL(\"aAaaaXa\") => 153\n  */\nconst digItSuL = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    sum += s.charCodeAt(i) - 95;\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the digits only'\n  ASCII codes.\n\n  Examples:\n      digItDt(\"\") => 0\n      digItDt(\"abAB\") => 131\n      digItDt(\"abcCd\") => 67\n      digItDt(\"helloE\") => 69\n      digItDt(\"woArBld\") => 131\n      digItDt(\"aAaaaXa\") => 153\n  */\nconst digItDt = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    sum += s.charCodeAt(i) - 47;\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the uppercase characters\n  only'\n  ASCII codes.\n\n  Examples:\n      digItSuU(\"\") => 0\n      digItSuU(\"abAB\") => 131\n      digItSuU(\"abcCd\") => 67\n      digItSuU(\"helloE\") => 69\n      digItSuU(\"woArBld\") => 131\n      digItSuU(\"aAaaaXa\") => 153\n  */\nconst digItSuU = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    sum += s.charCodeAt(i) - 97;\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the lowercase characters\n  only'\n  ASCII codes.\n\n  Examples:\n      digItSuL(\"\") => 0\n      digItSuL(\"abAB\") => 131\n      digItSuL(\"abcCd\") => 67\n      digItSuL(\"helloE\") => 69\n      digItSuL(\"woArBld\") => 131\n      digItSuL(\"aAaaaXa\") => 153\n  */\nconst digItSuL = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    sum += s.charCodeAt(i) - 95;\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the digits only'\n  ASCII codes.\n\n  Examples:\n      digItDt(\"\") => 0\n      digItDt(\"abAB\") => 131\n      digItDt(\"abcCd\") => 67\n      digItDt(\"helloE\") => 69\n      digItDt(\"woArBld\") => 131\n      digItDt(\"aAaaaXa\") => 153\n  */\nconst digItDt = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    sum += s.charCodeAt(i) - 46;\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the uppercase characters\n  only'\n  ASCII codes.\n\n  Examples:\n      digItSuU(\"\") => 0\n      digItSuU(\"abAB\") => 131\n      digItSuU(\"abcCd\") => 67\n      digItSuU(\"helloE\") => 69\n      digItSuU(\"woArBld\") => 131\n      digItSuU(\"aAaaaXa\") => 153\n  */\nconst digItSuU = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    sum += s.charCodeAt(i) - 97;\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the lowercase characters\n  only'\n  ASCII codes.\n\n  Examples:\n      digItSuL(\"\") => 0\n      digItSuL(\"abAB\") => 131\n      digItSuL(\"abcCd\") => 67\n      digItSuL(\"helloE\") => 69\n      dig", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruItDiStribUtiOn(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruItDiStribUtiOn(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruItDiStribUtiOn(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruItDiStribUtiOn(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruItDiStribUtiOn = (s, n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruItDiStribUtiOn", "gc": "<|endoftext|>/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruItDiStribUtiOn(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruItDiStribUtiOn(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruItDiStribUtiOn(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruItDiStribUtiOn(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruItDiStribUtiOn = (s, n) => {\n  let total = 0;\n  let fruits = n.split(' ');\n  fruits.forEach((fruit) => {\n    total += parseInt(fruit);\n  });\n  return total - fruits.length;\n};\n\n/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruItDiStribUtiOn(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruItDiStribUtiOn(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruItDiStribUtiOn(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruItDiStribUtiOn(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruItDiStribUtiOn = (s, n) => {\n  let total = 0;\n  let fruits = n.split(' ');\n  fruits.forEach((fruit) => {\n    total += parseInt(fruit);\n  });\n  return total - fruits.length;\n};\n\n/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruItDiStribUtiOn(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruItDiStribUtiOn(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruItDiStribUtiOn(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruItDiStribUtiOn(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruItDiStribUtiOn = (s, n) => {\n  let total = 0;\n  let fruits = n.split(' ');\n  fruits.forEach((fruit) => {\n    total += parseInt(fruit);\n  });\n  return total - fruits.length;\n};\n\n/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruItDiStribUtiOn(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruItDiStribUtiOn(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruItDiStribUtiOn(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruItDiStribUtiOn(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruItDiStribUtiOn = (s, n) => {\n  let total = 0;\n  let fruits = n.split(' ');\n  fruits.forEach((fruit) => {\n    total += parseInt(fruit);\n  });\n  return total - fruits.length;\n};\n\n/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruItDiStribUtiOn(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruItDiStribUtiOn(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruItDiStribUtiOn(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruItDiStribUtiOn(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruItDiStribUtiOn = (s, n) => {\n  let total = 0;\n  let fruits = n.split(' ');\n  fruits.forEach((fruit) => {\n    total += parseInt(fruit);\n  });\n  return total - fruits.length;\n};\n\n/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruItDiStribUtiOn(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruItDiStribUtiOn(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruItDiStribUtiOn(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruItDiStribUtiOn(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruItDiStribUtiOn = (s, n) => {\n  let total = 0;\n  let fruits = n.split(' ');\n  fruits.forEach((fruit) => {\n    total += parseInt(fruit);\n  });\n  return total - fruits.length;\n};\n\n/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruItDiStribUtiOn(\"5 apples and 6 oranges\", 19) ->", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluCk one of the nodes and return it.\n  The pluCked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The pluCked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluCk = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluCk", "gc": "<|endoftext|>/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluCk one of the nodes and return it.\n  The pluCked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The pluCked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluCk = (arr) => {\n  const len = arr.length;\n  let min = 0;\n  let max = 0;\n  let index = 0;\n  let result = [];\n  for (let i = 0; i < len; i++) {\n    if (arr[i] % 2 === 0) {\n      min = Math.min(min, arr[i]);\n      max = Math.max(max, arr[i]);\n      index = i;\n    }\n  }\n  if (min === max) {\n    return [arr[index], index];\n  }\n  const middle = Math.floor((max + min) / 2);\n  const left = pluCk(arr.slice(0, middle));\n  const right = pluCk(arr.slice(middle, arr.length));\n  return [\n    arr[middle],\n    arr[middle] + left[0] + right[0],\n  ];\n};\n\n// Given an array representing a tree with non-negative integer nodes,\n// your task is to return the smallest non-negative integer node in the tree.\n// The smallest non-negative integer node in the tree is the node with the smallest value.\n// If there are multiple nodes with the same smallest value, return the node that has smallest index.\n// If there are no nodes with the same smallest value, return null.\n// If there are multiple nodes with the same smallest value, return the node that has smallest index.\n// If there are no even values, return null.\n\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n// Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 3:\n// Input: []\n// Output: []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so we will choose the first zero, which has the smallest index.\n// Example 5:\n// Input: [-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n// Output: [0, 9]\n// Explanation: 9 is the smallest value, but there are two zeros,\n// so we will choose the first zero, which has the smallest index.\n\n// Constraints:\n// 1 <= nodes.length <= 10000\n// 1 <= node.value <= 10^9\n// nodes.length ≤ node.left.length + node.right.length\n// nodes.length ≤ 100\n// nodes.length ≤ 10^9\n// node.value ≤ 10^9\n// node.value ≤ 10^9\n// node.value ≤ 10^9\n// node.value ≤ 10^9\n// node.value ≤ 10^9\n// node.value ≤ 10^9\n// node.value ≤ 10^9\n// node.value ≤ 10^9\n// node.value ≤ 10^9\n// node.value ≤ 10^9\n// node.value ≤ 10^9\n// node.value ≤ 10^9\n// node.value ≤ 10^9\n// node.value ≤ 10^9\n// node.value ≤ 10^9\n// node.value ≤ 10^9\n// node.value ≤ 10^9\n// node.value ≤ 10^9\n// node.value ≤ 10^9\n// node.value ≤ 10^9\n// node.value ≤ 10^9\n// node.value ≤ 10^9\n// node.value ≤ 10^9\n// node.value ≤ 10^9\n// node.value ≤ 10^9\n// node.value ≤ 10^9\n// node.value ≤ 10^9\n// node.value ≤ 10^9\n// node.value ≤ 10^9\n// node.value ≤ 10^9\n// node.value ≤ 10^9\n// node.value ≤ 10^9\n// node.value ≤ 10^9\n// node.value ≤ 10^9\n// node.value ≤ 10^9\n// node.value ≤ 10^9\n// node.value ≤ 10^9\n// node.value ≤ 10^9\n// node.value ≤ 10^9\n// node.value ≤ 10^9\n// node.value ≤ 10^9\n// node.value ≤ 10^9\n// node.value ≤ 10^9\n// node.value ≤ 10^9\n// node.value ≤ 10^9\n// node.value ≤ 10^9\n// node.value ≤ 10^9\n// node.value ≤ 10^9\n// node.value ≤ 10^9\n// node.value ≤ 10^9\n// node.value ≤ 10^9\n// node.value ≤ 10^9\n// node.value ≤ 10^9\n// node.value ≤ 10^9\n// node.value ≤ 10^9\n// node.value ≤ 10^9\n// node.value ≤ 10^9\n// node.value ≤ 10^9\n// node.value ≤ 10^9\n// node.value ≤ 10^9\n// node.value ≤ 10^9\n// node.value ≤ 10^9\n// node.value ≤ 10^9\n// node.value ≤ 10^9\n// node.value ≤ 10^9\n// node.value ≤ 10^9\n// node.value ≤ 10^9\n// node.value ≤ 10^9\n// node.value ≤ 10^9\n// node.value ≤ 10^9\n// node.value ≤ 10^9\n// node.value ≤ 10^9\n// node.value ≤ 10^9\n// node.value ≤ 10^9\n// node.value ≤ 10^9\n// node.value ≤ 10^9\n// node.value �", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/69", "prompt": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      seaRch([4, 1, 2, 2, 3, 1])) == 2\n      seaRch([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      seaRch([5, 5, 4, 4, 4])) == -1\n  */\nconst seaRch = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "seaRch", "gc": "<|endoftext|>/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      seaRch([4, 1, 2, 2, 3, 1])) == 2\n      seaRch([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      seaRch([5, 5, 4, 4, 4])) == -1\n  */\nconst seaRch = (lst) => {\n  let max = 0;\n  let freq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n      freq = i;\n    }\n  }\n  return max;\n};\n\n/*\n  You are given a non-empty list of positive integers. Return the sum of the elements in the list.\n  If the list contains no elements, return 0.\n  Examples:\n      seaSum([4, 1, 2, 2, 3, 1])\n      seaSum([1, 2, 2, 3, 3, 3, 4, 4, 4])\n      seaSum([5, 5, 4, 4, 4])\n  */\nconst seaSum = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*\n  You are given a non-empty list of positive integers. Return the difference between the sum of the elements in the list and the sum of the elements in the list.\n  If the list contains no elements, return 0.\n  Examples:\n      seaDiff([4, 1, 2, 2, 3, 1])\n      seaDiff([1, 2, 2, 3, 3, 3, 4, 4, 4])\n      seaDiff([5, 5, 4, 4, 4])\n  */\nconst seaDiff = (lst) => {\n  let diff = 0;\n  for (let i = 0; i < lst.length; i++) {\n    diff += lst[i] - seaSum(lst);\n  }\n  return diff;\n};\n\n/*\n  You are given a non-empty list of positive integers. Return the product of the elements in the list.\n  If the list contains no elements, return 0.\n  Examples:\n      seaProd([4, 1, 2, 2, 3, 1])\n      seaProd([1, 2, 2, 3, 3, 3, 4, 4, 4])\n      seaProd([5, 5, 4, 4, 4])\n  */\nconst seaProd = (lst) => {\n  let prod = 1;\n  for (let i = 0; i < lst.length; i++) {\n    prod *= lst[i];\n  }\n  return prod;\n};\n\n/*\n  You are given a non-empty list of positive integers. Return the product of the elements in the list and the sum of the elements in the list.\n  If the list contains no elements, return 0.\n  Examples:\n      seaProdAndSum([4, 1, 2, 2, 3, 1])\n      seaProdAndSum([1, 2, 2, 3, 3, 3, 4, 4, 4])\n      seaProdAndSum([5, 5, 4, 4, 4])\n  */\nconst seaProdAndSum = (lst) => {\n  let prod = 1;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n    prod *= lst[i];\n  }\n  return prod * sum;\n};\n\n/*\n  You are given a non-empty list of positive integers. Return the product of the elements in the list and the difference between the sum of the elements in the list and the sum of the elements in the list.\n  If the list contains no elements, return 0.\n  Examples:\n      seaProdAndDiff([4, 1, 2, 2, 3, 1])\n      seaProdAndDiff([1, 2, 2, 3, 3, 3, 4, 4, 4])\n      seaProdAndDiff([5, 5, 4, 4, 4])\n  */\nconst seaProdAndDiff = (lst) => {\n  let prod = 1;\n  let diff = 0;\n  for (let i = 0; i < lst.length; i++) {\n    diff += lst[i] - seaSum(lst);\n    prod *= lst[i];\n  }\n  return prod * diff;\n};\n\n/*\n  You are given a non-empty list of positive integers. Return the product of the elements in the list and the difference between the sum of the elements in the list and the difference between the sum of the elements in the list.\n  If the list contains no elements, return 0.\n  Examples:\n      seaProdAndDiffAndSum([4, 1, 2, 2, 3, 1])\n      seaProdAndDiffAndSum([1, 2, 2, 3, 3, 3, 4, 4, 4])\n      seaProdAndDiffAndSum([5, 5, 4, 4, 4])\n  */\nconst seaProdAndDiffAndSum = (lst) => {\n  let prod = 1;\n  let diff = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n    diff += lst[i] - seaSum(lst);\n    prod *= lst[i];\n  }\n  return prod * diff * sum;\n};\n\n/*\n  You are given a non-empty list of positive integers. Return the product of the elements in the list and the product of the elements in the list.\n  If the list contains no elements, return 0.\n  Examples:\n      seaProdAndProdAndSum([4, 1, 2, 2, 3, 1])\n      seaProdAndProdAndSum([1, 2, 2, 3, 3, 3, 4, 4, 4])\n      seaProdAndProdAndSum([5, 5, 4, 4, 4])\n  */\nconst seaProdAndProdAndSum = (lst) => {\n  let prod = 1;\n  let prod2 = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n    prod2 += lst[i] * lst[i];\n    prod *= lst[i];\n  }\n  return prod * prod2;\n};\n\n/*\n  You are given a non-empty list of positive integers. Return the product of the elements in the list and the difference between the product of the elements in the list and the sum of the elements in the list.\n  If the list contains no elements, return 0.\n  Examples:\n      seaProdAndProdAndDiff([4, 1, 2, 2, 3, 1])\n      seaProdAndProdAndDiff([1, 2, 2, 3, 3, 3, 4, 4, 4])\n      seaProdAndProdAndDiff([5, 5, 4, 4, 4])\n  */\nconst seaProdAndProdAndDiff = (lst) => {\n  let prod = 1;\n  let diff = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    diff += lst[i] * lst[i];\n    prod *= lst[i];\n  }\n  return prod * diff * sum;\n};\n\n/*\n  You are given a non-empty list of positive integers. Return the product of the elements in the list and the product of the elements in the list and the difference between the product of the elements in the list and the sum of the elements in the list.\n  If the list contains no elements, return 0.\n  Examples:\n      seaProdAndProdAndDiffAndSum([4, 1, 2, 2, 3, 1])\n      seaProdAndProdAndDiffAndSum([1, 2, 2, 3, 3, 3, 4, 4, 4])\n      seaProdAndProdAndDiffAndSum([5, 5, 4, 4, 4])\n  */\nconst seaProdAndProdAndDiffAndSum = (lst) => {\n  let prod = 1;\n  let prod2 = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    prod2 += lst[i] * lst[i];\n    diff += lst[i] * lst[i];\n    prod *= lst[i];\n  }\n  return prod * diff * prod2;\n};\n\n/*\n  You are given a non-empty list of positive integers. Return the product of the elements in the list and the product of the elements in the list and the difference between the product of the elements in the list and the difference between the product of the elements in the list and the sum of the elements in the list.\n  If the list contains no elements, return 0.\n  Examples:\n      seaProdAndProdAndDiffAndSumAndSum([4, 1, 2, 2, 3, 1])\n      seaProdAndProdAndDiffAndSumAndSum([1, 2, 2, 3, 3, 3, 4, 4, 4])\n      seaProdAndProdAndDiffAndSumAndSum([5, 5, 4, 4, 4])\n  */\nconst seaProdAndProdAndDiffAndSumAndSum = (lst) => {\n  let prod = 1;\n  let prod2 = 0;\n  let sum = 0;\n  let diff = 0;\n  let prodSum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    prodSum += ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filTerBYSubsTriNg([], 'a')\n  []\n  >>> filTerBYSubsTriNg(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filTerBYSubsTriNg = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filTerBYSubsTriNg", "gc": "<|endoftext|>/* Filter an input list of strings only for ones that contain given substring\n  >>> filTerBYSubsTriNg([], 'a')\n  []\n  >>> filTerBYSubsTriNg(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filTerBYSubsTriNg = (strings, substring) => {\n  const filteredStrings = strings.filter(str => str.includes(substring));\n  return filteredStrings;\n};\n\n/**\n * Filter an input list of strings only for ones that contain given substring\n * and ignore case\n * >>> filTerBYSubsTriNg([], 'a', true)\n * []\n * >>> filTerBYSubsTriNg(['abc', 'bacd', 'cde', 'array'], 'a', true)\n * ['abc', 'bacd', 'array']\n */\nconst filTerBYSubsTriNgIgnoreCase = (strings, substring) => {\n  const filteredStrings = strings.filter(str => str.includes(substring, true));\n  return filteredStrings;\n};\n\n/**\n * Filter an input list of strings only for ones that contain given substring\n * and ignore case\n * >>> filTerBYSubsTriNgIgnoreCase([], 'a', true)\n * []\n * >>> filTerBYSubsTriNgIgnoreCase(['abc', 'bacd', 'cde', 'array'], 'a', true)\n * ['abc', 'bacd', 'array']\n */\nconst filTerBYSubsTriNgIgnoreCaseIgnoreCase = (strings, substring) => {\n  const filteredStrings = strings.filter(str => str.includes(substring, true));\n  return filteredStrings;\n};\n\n/**\n * Filter an input list of strings only for ones that contain given substring\n * and ignore case\n * >>> filTerBYSubsTriNgIgnoreCaseIgnoreCase([], 'a', true)\n * []\n * >>> filTerBYSubsTriNgIgnoreCaseIgnoreCase(['abc', 'bacd', 'cde', 'array'], 'a', true)\n * ['abc', 'bacd', 'array']\n */\nconst filTerBYSubsTriNgIgnoreCaseIgnoreCaseIgnoreCase = (strings, substring) => {\n  const filteredStrings = strings.filter(str => str.includes(substring, true));\n  return filteredStrings;\n};\n\n/**\n * Filter an input list of strings only for ones that contain given substring\n * and ignore case\n * >>> filTerBYSubsTriNgIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCase([], 'a', true)\n * []\n * >>> filTerBYSubsTriNgIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCase(['abc', 'bacd', 'cde', 'array'], 'a', true)\n * ['abc', 'bacd', 'array']\n */\nconst filTerBYSubsTriNgIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCase = (strings, substring) => {\n  const filteredStrings = strings.filter(str => str.includes(substring, true));\n  return filteredStrings;\n};\n\n/**\n * Filter an input list of strings only for ones that contain given substring\n * and ignore case\n * >>> filTerBYSubsTriNgIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCase([], 'a', true)\n * []\n * >>> filTerBYSubsTriNgIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCase(['abc', 'bacd', 'cde', 'array'], 'a', true)\n * ['abc', 'bacd', 'array']\n */\nconst filTerBYSubsTriNgIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCase = (strings, substring) => {\n  const filteredStrings = strings.filter(str => str.includes(substring, true));\n  return filteredStrings;\n};\n\n/**\n * Filter an input list of strings only for ones that contain given substring\n * and ignore case\n * >>> filTerBYSubsTriNgIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCase([], 'a', true)\n * []\n * >>> filTerBYSubsTriNgIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCase(['abc', 'bacd', 'cde', 'array'], 'a', true)\n * ['abc', 'bacd', 'array']\n */\nconst filTerBYSubsTriNgIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCase = (strings, substring) => {\n  const filteredStrings = strings.filter(str => str.includes(substring, true));\n  return filteredStrings;\n};\n\n/**\n * Filter an input list of strings only for ones that contain given substring\n * and ignore case\n * >>> filTerBYSubsTriNgIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCase([], 'a', true)\n * []\n * >>> filTerBYSubsTriNgIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCase(['abc', 'bacd', 'cde', 'array'], 'a', true)\n * ['abc', 'bacd', 'array']\n */\nconst filTerBYSubsTriNgIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCase = (strings, substring) => {\n  const filteredStrings = strings.filter(str => str.includes(substring, true));\n  return filteredStrings;\n};\n\n/**\n * Filter an input list of strings only for ones that contain given substring\n * and ignore case\n * >>> filTerBYSubsTriNgIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCase([], 'a', true)\n * []\n * >>> filTerBYSubsTriNgIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCase(['abc', 'bacd', 'cde', 'array'], 'a', true)\n * ['abc', 'bacd', 'array']\n */\nconst filTerBYSubsTriNgIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCase = (strings, substring) => {\n  const filteredStrings = strings.filter(str => str.includes(substring, true));\n  return filteredStrings;\n};\n\n/**\n * Filter an input list of strings only for ones that contain given substring\n * and ignore case\n * >>> filTerBYSubsTriNgIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnore", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strAngesortLIst([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strAngesortLIst([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strAngesortLIst([]) == []\n  */\nconst strAngesortLIst = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strAngesortLIst", "gc": "<|endoftext|>/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strAngesortLIst([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strAngesortLIst([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strAngesortLIst([]) == []\n  */\nconst strAngesortLIst = (lst) => {\n  let min;\n  let max;\n  let minIndex;\n  let maxIndex;\n  let swapIndex;\n  let swapValue;\n\n  // Sort by ascending order\n  lst.sort((a, b) => a - b);\n\n  // Find min and max values\n  min = lst[0];\n  max = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n\n  // Find min and max indexes\n  minIndex = 0;\n  maxIndex = 0;\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      minIndex = i;\n    }\n    if (lst[i] > max) {\n      maxIndex = i;\n    }\n  }\n\n  // Swap min and max values\n  swapValue = lst[minIndex];\n  lst[minIndex] = lst[maxIndex];\n  lst[maxIndex] = swapValue;\n\n  // Swap min and max indexes\n  swapIndex = minIndex;\n  swapValue = lst[minIndex];\n  lst[minIndex] = lst[maxIndex];\n  lst[maxIndex] = swapValue;\n\n  // Return sorted list\n  return lst;\n};\n\n/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strAngesortLLast([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strAngesortLLast([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strAngesortLLast([]) == []\n  */\nconst strAngesortLLast = (lst) => {\n  let min;\n  let max;\n  let minIndex;\n  let maxIndex;\n  let swapIndex;\n  let swapValue;\n\n  // Sort by ascending order\n  lst.sort((a, b) => a - b);\n\n  // Find min and max values\n  min = lst[0];\n  max = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n\n  // Find min and max indexes\n  minIndex = 0;\n  maxIndex = 0;\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      minIndex = i;\n    }\n    if (lst[i] > max) {\n      maxIndex = i;\n    }\n  }\n\n  // Swap min and max values\n  swapValue = lst[minIndex];\n  lst[minIndex] = lst[maxIndex];\n  lst[maxIndex] = swapValue;\n\n  // Swap min and max indexes\n  swapIndex = minIndex;\n  swapValue = lst[minIndex];\n  lst[minIndex] = lst[maxIndex];\n  lst[maxIndex] = swapValue;\n\n  // Return sorted list\n  return lst;\n};\n\n/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strAngesortLLastLast([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strAngesortLLastLast([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strAngesortLLastLast([]) == []\n  */\nconst strAngesortLLastLast = (lst) => {\n  let min;\n  let max;\n  let minIndex;\n  let maxIndex;\n  let swapIndex;\n  let swapValue;\n\n  // Sort by ascending order\n  lst.sort((a, b) => a - b);\n\n  // Find min and max values\n  min = lst[0];\n  max = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n\n  // Find min and max indexes\n  minIndex = 0;\n  maxIndex = 0;\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      minIndex = i;\n    }\n    if (lst[i] > max) {\n      maxIndex = i;\n    }\n  }\n\n  // Swap min and max values\n  swapValue = lst[minIndex];\n  lst[minIndex] = lst[maxIndex];\n  lst[maxIndex] = swapValue;\n\n  // Swap min and max indexes\n  swapIndex = minIndex;\n  swapValue = lst[minIndex];\n  lst[minIndex] = lst[maxIndex];\n  lst[maxIndex] = swapValue;\n\n  // Return sorted list\n  return lst;\n};\n\n/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strAngesortLLastFirst([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strAngesortLLastFirst([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strAngesortLLastFirst([]) == []\n  */\nconst strAngesortLLastFirst = (lst) => {\n  let min;\n  let max;\n  let minIndex;\n  let maxIndex;\n  let swapIndex;\n  let swapValue;\n\n  // Sort by ascending order\n  lst.sort((a, b) => a - b);\n\n  // Find min and max values\n  min = lst[0];\n  max = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n\n  // Find min and max indexes\n  minIndex = 0;\n  maxIndex = 0;\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      minIndex = i;\n    }\n    if (lst[i] > max) {\n      maxIndex = i;\n    }\n  }\n\n  // Swap min and max values\n  swapValue = lst[minIndex];\n  lst[minIndex] = lst[maxIndex];\n  lst[maxIndex] = swapValue;\n\n  // Swap min and max indexes\n  swapIndex = minIndex;\n  swapValue = lst[minIndex];\n  lst[minIndex] = lst[maxIndex];\n  lst[maxIndex] = swapValue;\n\n  // Return sorted list\n  return lst;\n};\n\n/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strAngesortLLastLastFirst([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strAngesortLLastLastFirst([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strAngesortLLastLastFirst([]) == []\n  */\nconst strAngesortLLastLastFirst = (lst) => {\n  let min;\n  let max;\n  let minIndex;\n  let maxIndex;\n  let swapIndex;\n  let swapValue;\n\n  // Sort by ascending order\n  lst.sort((a, b) => a - b);\n\n  // Find min ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triAnglEArea(3, 4, 5) == 6.00\n  triAnglEArea(1, 2, 10) == -1\n  */\nconst triAnglEArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triAnglEArea", "gc": "<|endoftext|>/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triAnglEArea(3, 4, 5) == 6.00\n  triAnglEArea(1, 2, 10) == -1\n  */\nconst triAnglEArea = (a, b, c) => {\n  const aArea = Math.pow(a, 2);\n  const bArea = Math.pow(b, 2);\n  const cArea = Math.pow(c, 2);\n  return (aArea + bArea + cArea) / 3;\n};\n\n/*\n  Given the lengths of the three sides of a rectangle. Return the area of\n  the rectangle rounded to 2 decimal points if the three sides form a valid rectangle.\n  Otherwise return -1\n  Three sides make a valid rectangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  rectAnglEArea(3, 4, 5) == 6.00\n  rectAnglEArea(1, 2, 10) == -1\n  */\nconst rectAnglEArea = (a, b, c) => {\n  const aArea = Math.pow(a, 2);\n  const bArea = Math.pow(b, 2);\n  const cArea = Math.pow(c, 2);\n  return (aArea + bArea + cArea) / 3;\n};\n\n/*\n  Given the lengths of the three sides of a circle. Return the area of\n  the circle rounded to 2 decimal points if the three sides form a valid circle.\n  Otherwise return -1\n  Three sides make a valid circle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  circleAnglEArea(3, 4, 5) == 6.00\n  circleAnglEArea(1, 2, 10) == -1\n  */\nconst circleAnglEArea = (a, b, c) => {\n  const aArea = Math.pow(a, 2);\n  const bArea = Math.pow(b, 2);\n  const cArea = Math.pow(c, 2);\n  return (aArea + bArea + cArea) / 3;\n};\n\n/*\n  Given the lengths of the three sides of a square. Return the area of\n  the square rounded to 2 decimal points if the three sides form a valid square.\n  Otherwise return -1\n  Three sides make a valid square when the sum of any two sides is greater\n  than the third side.\n  Example:\n  squareAnglEArea(3, 4, 5) == 6.00\n  squareAnglEArea(1, 2, 10) == -1\n  */\nconst squareAnglEArea = (a, b, c) => {\n  const aArea = Math.pow(a, 2);\n  const bArea = Math.pow(b, 2);\n  const cArea = Math.pow(c, 2);\n  return (aArea + bArea + cArea) / 3;\n};\n\n/*\n  Given the lengths of the three sides of a pentagon. Return the area of\n  the pentagon rounded to 2 decimal points if the three sides form a valid pentagon.\n  Otherwise return -1\n  Three sides make a valid pentagon when the sum of any two sides is greater\n  than the third side.\n  Example:\n  pentagonAnglEArea(3, 4, 5) == 6.00\n  pentagonAnglEArea(1, 2, 10) == -1\n  */\nconst pentagonAnglEArea = (a, b, c) => {\n  const aArea = Math.pow(a, 2);\n  const bArea = Math.pow(b, 2);\n  const cArea = Math.pow(c, 2);\n  return (aArea + bArea + cArea) / 3;\n};\n\n/*\n  Given the lengths of the three sides of a hexagon. Return the area of\n  the hexagon rounded to 2 decimal points if the three sides form a valid hexagon.\n  Otherwise return -1\n  Three sides make a valid hexagon when the sum of any two sides is greater\n  than the third side.\n  Example:\n  hexagonAnglEArea(3, 4, 5) == 6.00\n  hexagonAnglEArea(1, 2, 10) == -1\n  */\nconst hexagonAnglEArea = (a, b, c) => {\n  const aArea = Math.pow(a, 2);\n  const bArea = Math.pow(b, 2);\n  const cArea = Math.pow(c, 2);\n  return (aArea + bArea + cArea) / 3;\n};\n\n/*\n  Given the lengths of the three sides of a heptagon. Return the area of\n  the heptagon rounded to 2 decimal points if the three sides form a valid heptagon.\n  Otherwise return -1\n  Three sides make a valid heptagon when the sum of any two sides is greater\n  than the third side.\n  Example:\n  heptagonAnglEArea(3, 4, 5) == 6.00\n  heptagonAnglEArea(1, 2, 10) == -1\n  */\nconst heptagonAnglEArea = (a, b, c) => {\n  const aArea = Math.pow(a, 2);\n  const bArea = Math.pow(b, 2);\n  const cArea = Math.pow(c, 2);\n  return (aArea + bArea + cArea) / 3;\n};\n\n/*\n  Given the lengths of the three sides of a decagon. Return the area of\n  the decagon rounded to 2 decimal points if the three sides form a valid decagon.\n  Otherwise return -1\n  Three sides make a valid decagon when the sum of any two sides is greater\n  than the third side.\n  Example:\n  decagonAnglEArea(3, 4, 5) == 6.00\n  decagonAnglEArea(1, 2, 10) == -1\n  */\nconst decagonAnglEArea = (a, b, c) => {\n  const aArea = Math.pow(a, 2);\n  const bArea = Math.pow(b, 2);\n  const cArea = Math.pow(c, 2);\n  return (aArea + bArea + cArea) / 3;\n};\n\n/*\n  Given the lengths of the three sides of a dodecagon. Return the area of\n  the dodecagon rounded to 2 decimal points if the three sides form a valid dodecagon.\n  Otherwise return -1\n  Three sides make a valid dodecagon when the sum of any two sides is greater\n  than the third side.\n  Example:\n  dodecagonAnglEArea(3, 4, 5) == 6.00\n  dodecagonAnglEArea(1, 2, 10) == -1\n  */\nconst dodecagonAnglEArea = (a, b, c) => {\n  const aArea = Math.pow(a, 2);\n  const bArea = Math.pow(b, 2);\n  const cArea = Math.pow(c, 2);\n  return (aArea + bArea + cArea) / 3;\n};\n\n/*\n  Given the lengths of the three sides of a quagnon. Return the area of\n  the quagnon rounded to 2 decimal points if the three sides form a valid quagnon.\n  Otherwise return -1\n  Three sides make a valid quagnon when the sum of any two sides is greater\n  than the third side.\n  Example:\n  quagnonAnglEArea(3, 4, 5) == 6.00\n  quagnonAnglEArea(1, 2, 10) == -1\n  */\nconst quagnonAnglEArea = (a, b, c) => {\n  const aArea = Math.pow(a, 2);\n  const bArea = Math.pow(b, 2);\n  const cArea = Math.pow(c, 2);\n  return (aArea + bArea + cArea) / 3;\n};\n\n/*\n  Given the lengths of the three sides of a hexadecagon. Return the area of\n  the hexadecagon rounded to 2 decimal points if the three sides form a valid hex", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  wilLItFLy([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  wilLItFLy([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  wilLItFLy([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  wilLItFLy([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst wilLItFLy = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "wilLItFLy", "gc": "<|endoftext|>/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  wilLItFLy([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  wilLItFLy([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  wilLItFLy([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  wilLItFLy([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst wilLItFLy = (q, w) => {\n  const [l, r] = q;\n  if (l <= w) {\n    return wilLItFLy(r, w - l);\n  }\n  if (r >= w) {\n    return false;\n  }\n  return true;\n};\n\n/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  wilLItFLy([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  wilLItFLy([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  wilLItFLy([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  wilLItFLy([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst wilLItFLy = (q, w) => {\n  const [l, r] = q;\n  if (l <= w) {\n    return wilLItFLy(r, w - l);\n  }\n  if (r >= w) {\n    return false;\n  }\n  return true;\n};\n\n/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  wilLItFLy([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  wilLItFLy([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  wilLItFLy([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  wilLItFLy([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst wilLItFLy = (q, w) => {\n  const [l, r] = q;\n  if (l <= w) {\n    return wilLItFLy(r, w - l);\n  }\n  if (r >= w) {\n    return false;\n  }\n  return true;\n};\n\n/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  wilLItFLy([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  wilLItFLy([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  wilLItFLy([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  wilLItFLy([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst wilLItFLy = (q, w) => {\n  const [l, r] = q;\n  if (l <= w) {\n    return wilLItFLy(r, w - l);\n  }\n  if (r >= w) {\n    return false;\n  }\n  return true;\n};\n\n/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  wilLItFLy([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  wilLItFLy([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  wilLItFLy([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  wilLItFLy([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst wilLItFLy = (q, w) => {\n  const [l, r] = q;\n  if (l <= w) {\n    return wilLItFLy(r, w - l);\n  }\n  if (r >= w) {\n    return false;\n  }\n  return true;\n};\n\n/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  wilLItFLy([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  wilLItFLy([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  wilLItFLy([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  wilLItFLy([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst wilLItFLy = (q, w) => {\n  const [l, r] = q;\n  if (l <= w) {\n    return wilLItFLy(r, w - l);\n  }\n  if (r >= w) {\n    return false;\n  }\n  return true;\n};\n\n/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  wilLItFLy([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  wilLItFLy([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  wilLItFLy([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  w", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smaLlesTChanGe([1,2,3,5,4,7,9,6]) == 4\n  smaLlesTChanGe([1, 2, 3, 4, 3, 2, 2]) == 1\n  smaLlesTChanGe([1, 2, 3, 2, 1]) == 0\n  */\nconst smaLlesTChanGe = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smaLlesTChanGe", "gc": "<|endoftext|>/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smaLlesTChanGe([1,2,3,5,4,7,9,6]) == 4\n  smaLlesTChanGe([1, 2, 3, 4, 3, 2, 2]) == 1\n  smaLlesTChanGe([1, 2, 3, 2, 1]) == 0\n  */\nconst smaLlesTChanGe = (arr) => {\n  let len = arr.length;\n  let min = len / 2;\n  let max = 0;\n  let count = 0;\n  let reversedArr = [];\n  for (let i = 0; i < len; i++) {\n    if (arr[i] > arr[min]) {\n      min = i;\n    } else if (arr[i] < arr[max]) {\n      max = i;\n    }\n  }\n  for (let i = min; i < max; i++) {\n    if (arr[i] === arr[min]) {\n      count++;\n    } else {\n      reversedArr.push(arr[i]);\n    }\n  }\n  return count;\n};\n\n/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smaLlesTChanGe([1,2,3,5,4,7,9,6]) == 4\n  smaLlesTChanGe([1, 2, 3, 4, 3, 2, 2]) == 1\n  smaLlesTChanGe([1, 2, 3, 2, 1]) == 0\n  */\nconst smaLlesTChanGeReversed = (arr) => {\n  let len = arr.length;\n  let min = len / 2;\n  let max = 0;\n  let count = 0;\n  let reversedArr = [];\n  for (let i = 0; i < len; i++) {\n    if (arr[i] > arr[min]) {\n      min = i;\n    } else if (arr[i] < arr[max]) {\n      max = i;\n    }\n  }\n  for (let i = min; i < max; i++) {\n    if (arr[i] === arr[min]) {\n      count++;\n    } else {\n      reversedArr.push(arr[i]);\n    }\n  }\n  return count;\n};\n\n/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smaLlesTChanGe([1,2,3,5,4,7,9,6]) == 4\n  smaLlesTChanGe([1, 2, 3, 4, 3, 2, 2]) == 1\n  smaLlesTChanGe([1, 2, 3, 2, 1]) == 0\n  */\nconst smaLlesTChanGeReversedReversed = (arr) => {\n  let len = arr.length;\n  let min = len / 2;\n  let max = 0;\n  let count = 0;\n  let reversedArr = [];\n  for (let i = 0; i < len; i++) {\n    if (arr[i] > arr[min]) {\n      min = i;\n    } else if (arr[i] < arr[max]) {\n      max = i;\n    }\n  }\n  for (let i = min; i < max; i++) {\n    if (arr[i] === arr[min]) {\n      count++;\n    } else {\n      reversedArr.push(arr[i]);\n    }\n  }\n  return count;\n};\n\n/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smaLlesTChanGe([1,2,3,5,4,7,9,6]) == 4\n  smaLlesTChanGe([1, 2, 3, 4, 3, 2, 2]) == 1\n  smaLlesTChanGe([1, 2, 3, 2, 1]) == 0\n  */\nconst smaLlesTChanGeReversedReversedReversed = (arr) => {\n  let len = arr.length;\n  let min = len / 2;\n  let max = 0;\n  let count = 0;\n  let reversedArr = [];\n  for (let i = 0; i < len; i++) {\n    if (arr[i] > arr[min]) {\n      min = i;\n    } else if (arr[i] < arr[max]) {\n      max = i;\n    }\n  }\n  for (let i = min; i < max; i++) {\n    if (arr[i] === arr[min]) {\n      count++;\n    } else {\n      reversedArr.push(arr[i]);\n    }\n  }\n  return count;\n};\n\n/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smaLlesTChanGe([1,2,3,5,4,7,9,6]) == 4\n  smaLlesTChanGe([1, 2, 3, 4, 3, 2, 2]) == 1\n  smaLlesTChanGe([1, 2, 3, 2, 1]) == 0\n  */\nconst smaLlesTChanGeReversedReversedReversedReversed = (arr) => {\n  let len = arr.length;\n  let min = len / 2;\n  let max = 0;\n  let count = 0;\n  let reversedArr = [];\n  for (let i = 0; i < len; i++) {\n    if (arr[i] > arr[min]) {\n      min = i;\n    } else if (arr[i] < arr[max]) {\n      max = i;\n    }\n  }\n  for (let i = min; i < max; i++) {\n    if (arr[i] === arr[min]) {\n      count++;\n    } else {\n      reversedArr.push(arr[i]);\n    }\n  }\n  return count;\n};\n\n/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smaLlesTChanGe([1,2,3,5,4,7,9,6]) == 4\n  smaLlesTChanGe([1, 2, 3, 4, 3, 2, 2]) == 1\n  smaLlesTChanGe([1, 2, 3, 2, 1]) == 0\n  */\nconst smaLlesTChanGeReversedReversedReversedReversedReversedReversed = (arr) => {\n  let len = arr.length;\n  let min = len / 2;\n  let max = 0;\n  let count = 0;\n  let reversedArr = [];\n  for (let i = 0; i < len; i++) {\n    if (arr[i] > arr[min]) {\n      min = i;\n    } else if (arr[i] < arr[max]) {\n      max = i;\n    }\n  }\n  for (let i = min; i < max; i++) {\n    if (arr[i] === arr[min]) {\n      count++;\n    } else {\n      reversedArr.push(arr[i]);\n    }\n  }\n  return count;\n};\n\n/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smaLlesTChanGe([1,2,3,5,4,7,9,6]) == 4\n  smaLlesTChanGe([1, 2, 3, 4, 3, 2, 2]) == 1\n  smaLlesTChanGe([1, 2, 3, 2, 1]) == 0\n  */\nconst smaLlesTChanGeReversedReversedReversedReversedReversedReversedReversed = (arr) => {\n  let len = arr.length;\n  let min = len / 2;\n  let max = 0;\n  let count = 0;\n  let reversedArr = [];\n  for (let i = 0; i < len; i++) {\n    if (arr[i] > arr[min]) {\n      min = i;\n    } else if (arr[i] < arr[max]) {\n      max = i;\n    }\n  }\n  for (let i = min; i < max; i++) {\n    if (arr[i] === arr[min]) {\n      count++;\n    } else {\n      reversedArr.push(arr[i]);\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totAlMaTch([], []) ➞ []\n  totAlMaTch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totAlMaTch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totAlMaTch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totAlMaTch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totAlMaTch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totAlMaTch", "gc": "<|endoftext|>/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totAlMaTch([], []) ➞ []\n  totAlMaTch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totAlMaTch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totAlMaTch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totAlMaTch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totAlMaTch = (lst1, lst2) => {\n  let total = 0;\n  lst1.forEach((str) => {\n    total += str.length;\n  });\n  lst2.forEach((str) => {\n    total += str.length;\n  });\n  return lst1.filter((str) => total < str.length);\n};\n\n/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list greater than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totAlMaTch([], []) ➞ []\n  totAlMaTch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totAlMaTch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totAlMaTch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totAlMaTch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totAlMaTch = (lst1, lst2) => {\n  let total = 0;\n  lst1.forEach((str) => {\n    total += str.length;\n  });\n  lst2.forEach((str) => {\n    total += str.length;\n  });\n  return lst1.filter((str) => total > str.length);\n};\n\n/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list equal the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totAlMaTch([], []) ➞ []\n  totAlMaTch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totAlMaTch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totAlMaTch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totAlMaTch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totAlMaTch = (lst1, lst2) => {\n  let total = 0;\n  lst1.forEach((str) => {\n    total += str.length;\n  });\n  lst2.forEach((str) => {\n    total += str.length;\n  });\n  return lst1.filter((str) => total === str.length);\n};\n\n/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list not equal the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totAlMaTch([], []) ➞ []\n  totAlMaTch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totAlMaTch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totAlMaTch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totAlMaTch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totAlMaTch = (lst1, lst2) => {\n  let total = 0;\n  lst1.forEach((str) => {\n    total += str.length;\n  });\n  lst2.forEach((str) => {\n    total += str.length;\n  });\n  return lst1.filter((str) => total!== str.length);\n};\n\n/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list between the\n  two lists.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totAlMaTch([], []) ➞ []\n  totAlMaTch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totAlMaTch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totAlMaTch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totAlMaTch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totAlMaTch = (lst1, lst2) => {\n  let total = 0;\n  lst1.forEach((str) => {\n    total += str.length;\n  });\n  lst2.forEach((str) => {\n    total += str.length;\n  });\n  return lst1.filter((str) => total >= str.length && total <= str.length);\n};\n\n/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list between the\n  two lists.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totAlMaTch([], []) ➞ []\n  totAlMaTch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totAlMaTch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totAlMaTch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totAlMaTch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totAlMaTch = (lst1, lst2) => {\n  let total = 0;\n  lst1.forEach((str) => {\n    total += str.length;\n  });\n  lst2.forEach((str) => {\n    total += str.length;\n  });\n  return lst1.filter((str) => total >= str.length && total <= str.length && total!== str.length);\n};\n\n/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list between the\n  two lists.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totAlMaTch([], []) ➞ []\n  totAlMaTch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totAlMaTch(['hi", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/75", "prompt": "/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMUltiPlyPrIme(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMUltiPlyPrIme = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMUltiPlyPrIme", "gc": "<|endoftext|>/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMUltiPlyPrIme(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMUltiPlyPrIme = (a) => {\n  if (a < 100) {\n    return a % 3 === 0\n  }\n  return false\n}\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMUltiPlyPrIme(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMUltiPlyPrIme = (a) => {\n  if (a < 100) {\n    return a % 3 === 0\n  }\n  return false\n}\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMUltiPlyPrIme(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMUltiPlyPrIme = (a) => {\n  if (a < 100) {\n    return a % 3 === 0\n  }\n  return false\n}\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMUltiPlyPrIme(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMUltiPlyPrIme = (a) => {\n  if (a < 100) {\n    return a % 3 === 0\n  }\n  return false\n}\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMUltiPlyPrIme(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMUltiPlyPrIme = (a) => {\n  if (a < 100) {\n    return a % 3 === 0\n  }\n  return false\n}\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMUltiPlyPrIme(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMUltiPlyPrIme = (a) => {\n  if (a < 100) {\n    return a % 3 === 0\n  }\n  return false\n}\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMUltiPlyPrIme(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMUltiPlyPrIme = (a) => {\n  if (a < 100) {\n    return a % 3 === 0\n  }\n  return false\n}\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMUltiPlyPrIme(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMUltiPlyPrIme = (a) => {\n  if (a < 100) {\n    return a % 3 === 0\n  }\n  return false\n}\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMUltiPlyPrIme(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMUltiPlyPrIme = (a) => {\n  if (a < 100) {\n    return a % 3 === 0\n  }\n  return false\n}\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMUltiPlyPrIme(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMUltiPlyPrIme = (a) => {\n  if (a < 100) {\n    return a % 3 === 0\n  }\n  return false\n}\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMUltiPlyPrIme(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMUltiPlyPrIme = (a) => {\n  if (a < 100) {\n    return a % 3 === 0\n  }\n  return false\n}\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMUltiPlyPrIme(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMUltiPlyPrIme = (a) => {\n  if (a < 100) {\n    return a % 3 === 0\n  }\n  return false\n}\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMUltiPlyPrIme(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMUltiPlyPrIme = (a) => {\n  if (a < 100) {\n    return a % 3 === 0\n  }\n  return false\n}\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMUltiPlyPrIme(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMUltiPlyPrIme = (a) => {\n  if (a < 100) {\n    return a % 3 === 0\n  }\n  return false\n}\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMUltiPlyPrIme(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMUltiPlyPrIme = (a) => {\n  if (a < 100) {\n    return a % 3 === 0\n  }\n  return false\n}\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMUltiPlyPrIme(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMUltiPlyPrIme = (a) => {\n  if (a < 100) {\n    return a % 3 === 0\n  }\n  return false\n}\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMUltiPlyPrIme(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMUl", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/76", "prompt": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSImplEPoweR(1, 4) => true\n  isSImplEPoweR(2, 2) => true\n  isSImplEPoweR(8, 2) => true\n  isSImplEPoweR(3, 2) => false\n  isSImplEPoweR(3, 1) => false\n  isSImplEPoweR(5, 3) => false\n  */\nconst isSImplEPoweR = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSImplEPoweR", "gc": "<|endoftext|>/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSImplEPoweR(1, 4) => true\n  isSImplEPoweR(2, 2) => true\n  isSImplEPoweR(8, 2) => true\n  isSImplEPoweR(3, 2) => false\n  isSImplEPoweR(3, 1) => false\n  isSImplEPoweR(5, 3) => false\n  */\nconst isSImplEPoweR = (x, n) => {\n  let isSimplEPoweR = true;\n  if (x === 1) return true;\n  if (x === 2) return true;\n  if (x === 3) return true;\n  if (x === 5) return true;\n  if (x === 8) return true;\n  if (x === 16) return true;\n  if (x === 32) return true;\n  if (x === 64) return true;\n  if (x === 128) return true;\n  if (x === 256) return true;\n  if (x === 512) return true;\n  if (x === 1024) return true;\n  if (x === 2048) return true;\n  if (x === 4096) return true;\n  if (x === 8192) return true;\n  if (x === 16384) return true;\n  if (x === 32768) return true;\n  if (x === 65536) return true;\n  if (x === 131072) return true;\n  if (x === 262144) return true;\n  if (x === 524288) return true;\n  if (x === 1048576) return true;\n  if (x === 2097152) { return true; }\n  if (x === 4194304) { return true; }\n  if (x === 8388608) { return true; }\n  if (x === 16777216) { return true; }\n  if (x === 33554432) { return true; }\n  if (x === 67108864) { return true; }\n  if (x === 134217728) { return true; }\n  if (x === 268435456) { return true; }\n  if (x === 536870912) { return true; }\n  if (x === 1073741824) { return true; }\n  if (x === 2147483648) { return true; }\n  if (x === Number.POSITIVE_INFINITY) { return true; }\n  if (x === Number.NEGATIVE_INFINITY) { return true; }\n  if (x === Number.NaN) { return true; }\n  if (x === Number.POSITIVE_INFINITY) return true;\n  if (x === Number.NEGATIVE_INFINITY) return true;\n  if (x === Number.NaN) return true;\n  if (x === Number.POSITIVE_INFINITY) return true;\n  if (x === Number.NEGATIVE_INFINITY) return true;\n  if (x === Number.NaN) return true;\n  if (x === Number.POSITIVE_INFINITY) return true;\n  if (x === Number.NEGATIVE_INFINITY) return true;\n  if (x === Number.NaN) return true;\n  if (x === Number.POSITIVE_INFINITY) return true;\n  if (x === Number.NEGATIVE_INFINITY) return true;\n  if (x === Number.NaN) return true;\n  if (x === Number.POSITIVE_INFINITY) return true;\n  if (x === Number.NEGATIVE_INFINITY) return true;\n  if (x === Number.NaN) return true;\n  if (x === Number.POSITIVE_INFINITY) return true;\n  if (x === Number.NEGATIVE_INFINITY) return true;\n  if (x === Number.NaN) return true;\n  if (x === Number.POSITIVE_INFINITY) return true;\n  if (x === Number.NEGATIVE_INFINITY) return true;\n  if (x === Number.NaN) return true;\n  if (x === Number.POSITIVE_INFINITY) return true;\n  if (x === Number.NEGATIVE_INFINITY) return true;\n  if (x === Number.NaN) return true;\n  if (x === Number.POSITIVE_INFINITY) return true;\n  if (x === Number.NEGATIVE_INFINITY) return true;\n  if (x === Number.NaN) return true;\n  if (x === Number.POSITIVE_INFINITY) return true;\n  if (x === Number.NEGATIVE_INFINITY) return true;\n  if (x === Number.NaN) return true;\n  if (x === Number.POSITIVE_INFINITY) return true;\n  if (x === Number.NEGATIVE_INFINITY) return true;\n  if (x === Number.NaN) return true;\n  if (x === Number.POSITIVE_INFINITY) return true;\n  if (x === Number.NEGATIVE_INFINITY) return true;\n  if (x === Number.NaN) return true;\n  if (x === Number.POSITIVE_INFINITY) return true;\n  if (x === Number.NEGATIVE_INFINITY) return true;\n  if (x === Number.NaN) return true;\n  if (x === Number.POSITIVE_INFINITY) return true;\n  if (x === Number.NEGATIVE_INFINITY) return true;\n  if (x === Number.NaN) return true;\n  if (x === Number.POSITIVE_INFINITY) return true;\n  if (x === Number.NEGATIVE_INFINITY) return true;\n  if (x === Number.NaN) return true;\n  if (x === Number.POSITIVE_INFINITY) return true;\n  if (x === Number.NEGATIVE_INFINITY) return true;\n  if (x === Number.NaN) return true;\n  if (x === Number.POSITIVE_INFINITY) return true;\n  if (x === Number.NEGATIVE_INFINITY) return true;\n  if (x === Number.NaN) return true;\n  if (x === Number.POSITIVE_INFINITY) return true;\n  if (x === Number.NEGATIVE_INFINITY) return true;\n  if (x === Number.NaN) return true;\n  if (x === Number.POSITIVE_INFINITY) return true;\n  if (x === Number.NEGATIVE_INFINITY) return true;\n  if (x === Number.NaN) return true;\n  if (x === Number.POSITIVE_INFINITY) return true;\n  if (x === Number.NEGATIVE_INFINITY) return true;\n  if (x === Number.NaN) return true;\n  if (x === Number.POSITIVE_INFINITY) return true;\n  if (x === Number.NEGATIVE_INFINITY) return true;\n  if (x === Number.NaN) return true;\n  if (x === Number.POSITIVE_INFINITY) return true;\n  if (x === Number.NEGATIVE_INFINITY) return true;\n  if (x === Number.NaN) return true;\n  if (x === Number.POSITIVE_INFINITY) return true;\n  if (x === Number.NEGATIVE_INFINITY) return true;\n  if (x === Number.NaN) return true;\n  if (x === Number.POSITIVE_INFINITY) return true;\n  if (x === Number.NEGATIVE_INFINITY) return true;\n  if (x === Number.NaN) return true;\n  if (x === Number.POSITIVE_INFINITY) return true;\n  if (x === Number.NEGATIVE_INFINITY) return true;\n  if (x === Number.NaN) return true;\n  if (x === Number.POSITIVE_INFINITY) return true;\n  if (x === Number.NEGATIVE_INFINITY) return true;\n  if (x === Number.NaN) return true;\n  if (x === Number.POSITIVE_INFINITY) return true;\n  if (x === Number.NEGATIVE_INFINITY) return true;\n  if (x === Number.NaN) return true;\n  if (x === Number.POSITIVE_INFINITY) return true;\n  if (x === Number.NEGATIVE_INFINITY) return true;\n  if (x === Number.NaN) return true;\n  if (x === Number.POSITIVE_INFINITY) return true;\n  if (x === Number.NEGATIVE_INFINITY) return true;\n  if (x === Number.NaN) return true;\n  if (x === Number.POSITIVE_INFINITY) return true;\n  if (x === Number.NEGATIVE_INFINITY) return true;\n  if (x === Number.NaN) return true;\n  if (x === Number.POSITIVE_INFINITY) return true;\n  if (x === Number.NEGATIVE_INFINITY) return true;\n  if (x === Number.NaN) return true;\n  if (x === Number.POSITIVE_INFINITY) return true;\n  if (x === Number.NEGATIVE_INFIN", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscUbe(1) ==> true\n  iscUbe(2) ==> false\n  iscUbe(-1) ==> true\n  iscUbe(64) ==> true\n  iscUbe(0) ==> true\n  iscUbe(180) ==> false\n  */\nconst iscUbe = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscUbe", "gc": "<|endoftext|>/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscUbe(1) ==> true\n  iscUbe(2) ==> false\n  iscUbe(-1) ==> true\n  iscUbe(64) ==> true\n  iscUbe(0) ==> true\n  iscUbe(180) ==> false\n  */\nconst iscUbe = (a) => {\n  let iscUbe = true;\n  let n = a;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/78", "prompt": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexkey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexkey", "gc": "<|endoftext|>/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexkey = (num) => {\n  let count = 0;\n  let hexnum = \"\";\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 1;\n  let n = 1;\n  let o = 1;\n  let p = 1;\n  let q = 1;\n  let r = 1;\n  let s = 0;\n  let t = 1;\n  let u = 1;\n  let v = 1;\n  let w = 1;\n  let x = 1;\n  let y = 1;\n  let z = 1;\n  let A = 1;\n  let B = 1;\n  let C = 1;\n  let D = 1;\n  let E = 1;\n  let F = 1;\n  let prime = 1;\n  let primenum = 1;\n  let primenum2 = 1;\n  let primenum3 = 1;\n  let primenum4 = 1;\n  let primenum5 = 1;\n  let primenum6 = 1;\n  let primenum7 = 1;\n  let primenum8 = 1;\n  let primenum9 = 1;\n  let primenum10 = 1;\n  let primenum11 = 1;\n  let primenum12 = 1;\n  let primenum13 = 1;\n  let primenum14 = 1;\n  let primenum15 = 1;\n  let primenum16 = 1;\n  let primenum17 = 1;\n  let primenum18 = 1;\n  let primenum19 = 1;\n  let primenum20 = 1;\n  let primenum21 = 1;\n  let primenum22 = 1;\n  let primenum23 = 1;\n  let primenum24 = 1;\n  let primenum25 = 1;\n  let primenum26 = 1;\n  let primenum27 = 1;\n  let primenum28 = 1;\n  let primenum29 = 1;\n  let primenum30 = 1;\n  let primenum31 = 1;\n  let primenum32 = 1;\n  let primenum33 = 1;\n  let primenum34 = 1;\n  let primenum35 = 1;\n  let primenum36 = 1;\n  let primenum37 = 1;\n  let primenum38 = 1;\n  let primenum39 = 1;\n  let primenum40 = 1;\n  let primenum41 = 1;\n  let primenum42 = 1;\n  let primenum43 = 1;\n  let primenum44 = 1;\n  let primenum45 = 1;\n  let primenum46 = 1;\n  let primenum47 = 1;\n  let primenum48 = 1;\n  let primenum49 = 1;\n  let primenum50 = 1;\n  let primenum51 = 1;\n  let primenum52 = 1;\n  let primenum53 = 1;\n  let primenum54 = 1;\n  let primenum55 = 1;\n  let primenum56 = 1;\n  let primenum57 = 1;\n  let primenum58 = 1;\n  let primenum59 = 1;\n  let primenum60 = 1;\n  let primenum61 = 1;\n  let primenum62 = 1;\n  let primenum63 = 1;\n  let primenum64 = 1;\n  let primenum65 = 1;\n  let primenum66 = 1;\n  let primenum67 = 1;\n  let primenum68 = 1;\n  let primenum69 = 1;\n  let primenum70 = 1;\n  let primenum71 = 1;\n  let primenum72 = 1;\n  let primenum73 = 1;\n  let primenum74 = 1;\n  let primenum75 = 1;\n  let primenum76 = 1;\n  let primenum77 = 1;\n  let primenum78 = 1;\n  let primenum79 = 1;\n  let primenum80 = 1;\n  let primenum81 = 1;\n  let primenum82 = 1;\n  let primenum83 = 1;\n  let primenum84 = 1;\n  let primenum85 = 1;\n  let primenum86 = 1;\n  let primenum87 = 1;\n  let primenum88 = 1;\n  let primenum89 = 1;\n  let primenum91 = 1;\n  let primenum92 = 1;\n  let primenum93 = 1;\n  let primenum94 = 1;\n  let primenum95 = 1;\n  let primenum96 = 1;\n  let primenum97 = 1;\n  let primenum98 = 1;\n  let primenum99 = 1;\n  let primenum100 = 1;\n  let primenum101 = 1;\n  let primenum102 = 1;\n  let primenum103 = 1;\n  let primenum104 = 1;\n  let primenum105 = 1;\n  let primenum106 = 1;\n  let primenum107 = 1;\n  let primenum108 = 1;\n  let primenum109 = 1;\n  let primenum110 = 1;\n  let primenum111 = 1;\n  let primenum112 = 1;\n  let primenum113 = 1;\n  let primenum114 = 1;\n  let primenum115 = 1;\n  let primenum116 = 1;\n  let primenum117 = 1;\n  let primenum118 = 1;\n  let primenum119 = 1;\n  let primenum120 = 1;\n  let primenum121 = 1;\n  let primenum122 = 1;\n  let primenum123 = 1;\n  let primenum124 = 1;\n  let primenum125 = 1;\n  let primenum126 = 1;\n  let primenum127 = 1;\n  let primenum128 = 1;\n  let primenum129 = 1;\n  let primenum131 = 1;\n  let primenum132 = 1;\n  let primenum133 = 1;\n  let primenum134 = 1;\n  let primenum135 = 1;\n  let primenum136 = 1;\n  let primenum137 = 1;\n  let primenum138 = 1;\n  let primenum139 = 1;\n  let primenum140 = 1;\n  let primenum141 = 1;\n  let primenum142 = 1;\n  let primenum143 = 1;\n  let primenum144 = 1;\n  let primenum145 = 1;\n  let primenum146 = 1;\n  let primenum147 = 1;\n  let primenum148 = 1;\n  let primenum149 = 1;\n  let primenum150 = 1;\n  let primenum151 = 1;\n  let primenum152 = 1;\n  let primenum153 = 1;\n  let primenum154 = 1;\n  let primenum155 = 1;\n  let primenum156 = 1;\n  let primenum157 = 1;\n  let primenum158 = 1;\n  let primenum159 = 1;\n  let primenum160 = 1;\n  let primenum161 = 1;\n  let primenum162 = 1;\n  let primenum163 = 1;\n  let primenum164 = 1;\n  let primenum165 = 1;\n  let primenum166 = 1;\n  let primenum167 = 1;\n  let primenum168 = 1;\n  let primenum169 = 1;\n  let primenum170 = 1;\n  let primenum171 = 1;\n  let primenum172 = 1;\n  let primenum173 = 1;\n  let primenum174 = 1;\n  let primenum175 = 1;\n  let primenum176 = 1;\n  let primenum177 = 1;\n  let primenum178 = 1;\n  let primenum179 = 1;\n  let primenum180 = 1;\n  let primenum181 = 1;\n  let primenum182 = 1;\n  let primenum183 = 1;\n  let primenum184 = 1;\n  let primenum185 = 1;\n  let primenum186 = 1;\n  let primenum187 = 1;\n  let primenum188 = 1;\n  let primenum189 = 1;\n  let primenum190 = 1;\n  let primenum191 = 1;\n  let primenum192 = 1;\n  let primenum193 = 1;\n  let primenum194 = 1;\n  let prime", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/79", "prompt": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decImaltoBinAry(15)   # returns \"db1111db\"\n  decImaltoBinAry(32)   # returns \"db100000db\"\n  */\nconst decImaltoBinAry = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decImaltoBinAry", "gc": "<|endoftext|>/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decImaltoBinAry(15)   # returns \"db1111db\"\n  decImaltoBinAry(32)   # returns \"db100000db\"\n  */\nconst decImaltoBinAry = (decimal) => {\n  let binary = '';\n  let decimalString = decimal.toString();\n  let decimalLength = decimalString.length;\n  let decimalNumber = 0;\n  let decimalNumberString = '';\n  let decimalNumberStringLength = 0;\n  let decimalNumberStringLength2 = 0;\n  let decimalNumberStringLength3 = 0;\n  let decimalNumberStringLength4 = 0;\n  let decimalNumberStringLength5 = 0;\n  let decimalNumberStringLength6 = 0;\n  let decimalNumberStringLength7 = 0;\n  let decimalNumberStringLength8 = 0;\n  let decimalNumberStringLength9 = 0;\n  let decimalNumberStringLength10 = 0;\n  let decimalNumberStringLength11 = 0;\n  let decimalNumberStringLength12 = 0;\n  let decimalNumberStringLength13 = 0;\n  let decimalNumberStringLength14 = 0;\n  let decimalNumberStringLength15 = 0;\n  let decimalNumberStringLength16 = 0;\n  let decimalNumberStringLength17 = 0;\n  let decimalNumberStringLength18 = 0;\n  let decimalNumberStringLength19 = 0;\n  let decimalNumberStringLength20 = 0;\n  let decimalNumberStringLength21 = 0;\n  let decimalNumberStringLength22 = 0;\n  let decimalNumberStringLength23 = 0;\n  let decimalNumberStringLength24 = 0;\n  let decimalNumberStringLength25 = 0;\n  let decimalNumberStringLength26 = 0;\n  let decimalNumberStringLength27 = 0;\n  let decimalNumberStringLength28 = 0;\n  let decimalNumberStringLength29 = 0;\n  let decimalNumberStringLength30 = 0;\n  let decimalNumberStringLength31 = 0;\n  let decimalNumberStringLength32 = 0;\n  let decimalNumberStringLength33 = 0;\n  let decimalNumberStringLength34 = 0;\n  let decimalNumberStringLength35 = 0;\n  let decimalNumberStringLength36 = 0;\n  let decimalNumberStringLength37 = 0;\n  let decimalNumberStringLength38 = 0;\n  let decimalNumberStringLength39 = 0;\n  let decimalNumberStringLength40 = 0;\n  let decimalNumberStringLength41 = 0;\n  let decimalNumberStringLength42 = 0;\n  let decimalNumberStringLength43 = 0;\n  let decimalNumberStringLength44 = 0;\n  let decimalNumberStringLength45 = 0;\n  let decimalNumberStringLength46 = 0;\n  let decimalNumberStringLength47 = 0;\n  let decimalNumberStringLength48 = 0;\n  let decimalNumberStringLength49 = 0;\n  let decimalNumberStringLength50 = 0;\n  let decimalNumberStringLength51 = 0;\n  let decimalNumberStringLength52 = 0;\n  let decimalNumberStringLength53 = 0;\n  let decimalNumberStringLength54 = 0;\n  let decimalNumberStringLength55 = 0;\n  let decimalNumberStringLength56 = 0;\n  let decimalNumberStringLength57 = 0;\n  let decimalNumberStringLength58 = 0;\n  let decimalNumberStringLength59 = 0;\n  let decimalNumberStringLength60 = 0;\n  let decimalNumberStringLength61 = 0;\n  let decimalNumberStringLength62 = 0;\n  let decimalNumberStringLength63 = 0;\n  let decimalNumberStringLength64 = 0;\n  let decimalNumberStringLength65 = 0;\n  let decimalNumberStringLength66 = 0;\n  let decimalNumberStringLength67 = 0;\n  let decimalNumberStringLength68 = 0;\n  let decimalNumberStringLength69 = 0;\n  let decimalNumberStringLength70 = 0;\n  let decimalNumberStringLength71 = 0;\n  let decimalNumberStringLength72 = 0;\n  let decimalNumberStringLength73 = 0;\n  let decimalNumberStringLength74 = 0;\n  let decimalNumberStringLength75 = 0;\n  let decimalNumberStringLength76 = 0;\n  let decimalNumberStringLength77 = 0;\n  let decimalNumberStringLength78 = 0;\n  let decimalNumberStringLength79 = 0;\n  let decimalNumberStringLength80 = 0;\n  let decimalNumberStringLength81 = 0;\n  let decimalNumberStringLength82 = 0;\n  let decimalNumberStringLength83 = 0;\n  let decimalNumberStringLength84 = 0;\n  let decimalNumberStringLength85 = 0;\n  let decimalNumberStringLength86 = 0;\n  let decimalNumberStringLength87 = 0;\n  let decimalNumberStringLength88 = 0;\n  let decimalNumberStringLength89 = 0;\n  let decimalNumberStringLength90 = 0;\n  let decimalNumberStringLength91 = 0;\n  let decimalNumberStringLength92 = 0;\n  let decimalNumberStringLength93 = 0;\n  let decimalNumberStringLength94 = 0;\n  let decimalNumberStringLength95 = 0;\n  let decimalNumberStringLength96 = 0;\n  let decimalNumberStringLength97 = 0;\n  let decimalNumberStringLength98 = 0;\n  let decimalNumberStringLength99 = 0;\n  let decimalNumberStringLength100 = 0;\n  let decimalNumberStringLength101 = 0;\n  let decimalNumberStringLength102 = 0;\n  let decimalNumberStringLength103 = 0;\n  let decimalNumberStringLength104 = 0;\n  let decimalNumberStringLength105 = 0;\n  let decimalNumberStringLength106 = 0;\n  let decimalNumberStringLength107 = 0;\n  let decimalNumberStringLength108 = 0;\n  let decimalNumberStringLength109 = 0;\n  let decimalNumberStringLength110 = 0;\n  let decimalNumberStringLength111 = 0;\n  let decimalNumberStringLength112 = 0;\n  let decimalNumberStringLength113 = 0;\n  let decimalNumberStringLength114 = 0;\n  let decimalNumberStringLength115 = 0;\n  let decimalNumberStringLength116 = 0;\n  let decimalNumberStringLength117 = 0;\n  let decimalNumberStringLength118 = 0;\n  let decimalNumberStringLength119 = 0;\n  let decimalNumberStringLength120 = 0;\n  let decimalNumberStringLength121 = 0;\n  let decimalNumberStringLength122 = 0;\n  let decimalNumberStringLength123 = 0;\n  let decimalNumberStringLength124 = 0;\n  let decimalNumberStringLength125 = 0;\n  let decimalNumberStringLength126 = 0;\n  let decimalNumberStringLength127 = 0;\n  let decimalNumberStringLength128 = 0;\n  let decimalNumberStringLength129 = 0;\n  let decimalNumberStringLength130 = 0;\n  let decimalNumberStringLength131 = 0;\n  let decimalNumberStringLength132 = 0;\n  let decimalNumberStringLength133 = 0;\n  let decimalNumberStringLength134 = 0;\n  let decimalNumberStringLength135 = 0;\n  let decimalNumberStringLength136 = 0;\n  let decimalNumberStringLength137 = 0;\n  let decimalNumberStringLength138 = 0;\n  let decimalNumberStringLength139 = 0;\n  let decimalNumberStringLength140 = 0;\n  let decimalNumberStringLength141 = 0;\n  let decimalNumberStringLength142 = 0;\n  let decimalNumberStringLength143 = 0;\n  let decimalNumberStringLength144 = 0;\n  let decimalNumberStringLength145 = 0;\n  let decimalNumberStringLength146 = 0;\n  let decimalNumberStringLength147 = 0;\n  let decimalNumberStringLength148 = 0;\n  let decimalNumberStringLength149 = 0;\n  let decimalNumberStringLength150 = 0;\n  let decimalNumberStringLength151 = 0;\n  let decimalNumberStringLength152 = 0;\n  let decimalNumberStringLength153 = 0;\n  let decimalNumberStringLength154 = 0;\n  let decimalNumberStringLength155 = 0;\n  let decimalNumberStringLength156 = 0;\n  let decimalNumberStringLength157 = 0;\n  let decimalNumberStringLength158 = 0;\n  let decimalNumberStringLength159 = 0;\n  let decimalNumberStringLength160 = 0;\n  let decimalNumberStringLength161 = 0;\n  let decimalNumberStringLength162 = 0;\n  let decimalNumberStringLength163 = 0;\n  let decimalNumberStringLength164 = 0;\n  let decimalNumberStringLength165 = 0;\n  let decimalNumberStringLength166 = 0;\n  let decimalNumberStringLength167 = 0;\n  let decimalNumberStringLength168 = 0;\n  let decimalNumberStringLength169 = 0;\n  let decimalNumberStringLength170 = 0;\n  let decimalNumberStringLength171 = 0;\n  let decimalNumberStringLength172 = 0;\n  let decimalNumberStringLength173 = 0;\n  let decimalNumberStringLength174", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/8", "prompt": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumprodUct([])\n  (0, 1)\n  >>> sumprodUct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumprodUct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumprodUct", "gc": "<|endoftext|>/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumprodUct([])\n  (0, 1)\n  >>> sumprodUct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumprodUct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n};\n\n/* Given a list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumprodUctUct([])\n  (0, 1)\n  >>> sumprodUctUct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumprodUctUct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n};\n\n/* Given a list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumprodUctUctUctUct([])\n  (0, 1)\n  >>> sumprodUctUctUctUctUct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumprodUctUctUctUct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n};\n\n/* Given a list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumprodUctUctUctUctUctUct([])\n  (0, 1)\n  >>> sumprodUctUctUctUctUctUctUct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumprodUctUctUctUctUct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n};\n\n/* Given a list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumprodUctUctUctUctUctUctUctUct([])\n  (0, 1)\n  >>> sumprodUctUctUctUctUctUctUctUctUct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumprodUctUctUctUctUctUctUct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n};\n\n/* Given a list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumprodUctUctUctUctUctUctUctUctUctUct([])\n  (0, 1)\n  >>> sumprodUctUctUctUctUctUctUctUctUctUctUct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumprodUctUctUctUctUctUctUctUctUct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n};\n\n/* Given a list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumprodUctUctUctUctUctUctUctUctUctUctUctUctUct([])\n  (0, 1)\n  >>> sumprodUctUctUctUctUctUctUctUctUctUctUctUctUctUct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumprodUctUctUctUctUctUctUctUctUctUctUctUct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n};\n\n/* Given a list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumprodUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUctUct", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/80", "prompt": "/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHAppy(a) => false\n  isHAppy(aa) => false\n  isHAppy(abcd) => true\n  isHAppy(aabb) => false\n  isHAppy(adb) => true\n  isHAppy(xyy) => false\n  */\nconst isHAppy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHAppy", "gc": "<|endoftext|>/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHAppy(a) => false\n  isHAppy(aa) => false\n  isHAppy(abcd) => true\n  isHAppy(aabb) => false\n  isHAppy(adb) => true\n  isHAppy(xyy) => false\n  */\nconst isHAppy = (s) => {\n  let isHappy = true;\n  let count = 0;\n  let letter;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let A;\n  let B;\n  let C;\n  let D;\n  let E;\n  let F;\n  let G;\n  let H;\n  let I;\n  let J;\n  let K;\n  let L;\n  let M;\n  let N;\n  let O;\n  let P;\n  let Q;\n  let R;\n  let S;\n  let T;\n  let U;\n  let V;\n  let W;\n  let X;\n  let Y;\n  let Z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let A;\n  let B;\n  let C;\n  let D;\n  let E;\n  let F;\n  let G;\n  let H;\n  let I;\n  let J;\n  let K;\n  let L;\n  let M;\n  let N;\n  let O;\n  let P;\n  let Q;\n  let R;\n  let S;\n  let T;\n  let U;\n  let V;\n  let W;\n  let X;\n  let Y;\n  let Z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let A;\n  let B;\n  let C;\n  let D;\n  let E;\n  let F;\n  let G;\n  let H;\n  let I;\n  let J;\n  let K;\n  let L;\n  let M;\n  let N;\n  let O;\n  let P;\n  let Q;\n  let R;\n  let S;\n  let T;\n  let U;\n  let V;\n  let W;\n  let X;\n  let Y;\n  let Z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let A;\n  let B;\n  let C;\n  let D;\n  let E;\n  let F;\n  let G;\n  let H;\n  let I;\n  let J;\n  let K;\n  let L;\n  let M;\n  let N;\n  let O;\n  let P;\n  let Q;\n  let R;\n  let S;\n  let T;\n  let U;\n  let V;\n  let W;\n  let X;\n  let Y;\n  let Z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let A;\n  let B;\n  let C;\n  let D;\n  let E;\n  let F;\n  let G;\n  let H;\n  let I;\n  let J;\n  let K;\n  let L;\n  let M;\n  let N;\n  let O;\n  let P;\n  let Q;\n  let R;\n  let S;\n  let T;\n  let U;\n  let V;\n  let W;\n  let X;\n  let Y;\n  let Z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let A;\n  let B;\n  let C;\n  let D;\n  let E;\n  let F;\n  let G;\n  let H;\n  let I;\n  let J;\n  let K;\n  let L;\n  let M;\n  let N;\n  let O;\n  let P;\n  let Q;\n  let R;\n  let S;\n  let T;\n  let U;\n  let V;\n  let W;\n  let X;\n  let Y;\n  let Z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let A;\n  let B;\n  let C;\n  let D;\n  let E;\n  let F;\n  let G;\n  let H;\n  let I;\n  let J;\n  let K;\n  let L;\n  let M;\n  let N;\n  let O;\n  let P;\n  let Q;\n  let R;\n  let S;\n  let T;\n  let U;\n  let V;\n  let W;\n  let X;\n  let Y;\n  let Z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let A;\n  let B;\n  let C;\n  let D;\n  let E;\n  let F;\n  let G;\n  let H;\n  let I;\n  let J;\n  let K;\n  let L;\n  let M;\n  let N;\n  let O;\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/81", "prompt": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numEricAlLetTergrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numEricAlLetTergrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numEricAlLetTergrade", "gc": "<|endoftext|>/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numEricAlLetTergrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numEricAlLetTergrade = (grades) => {\n  const letterGrades = ['A', 'B', 'C', 'D', 'E'];\n  const letterGradeArray = grades.map((grade) => {\n    return letterGrades[grade];\n  });\n  const letterGradeArrayLength = letterGradeArray.length;\n  let letterGrade = '';\n  let letterGradeIndex = 0;\n  while (letterGradeIndex < letterGradeArrayLength) {\n    if (letterGradeArray[letterGradeIndex] === 0) {\n      letterGrade += letterGradeArray[letterGradeIndex];\n      letterGradeIndex++;\n    } else {\n      letterGrade += letterGradeArray[letterGradeIndex];\n    }\n  }\n  return letterGrade;\n};\n\n/*\n  Write a function that takes an array of grades and returns the letter grade\n  that has the highest GPA. For example, numEricAlLetTergrade([4.0, 3, 1.7, 2, 3.5]) ==> 'B'\n  */\nconst numEricAlLetTergradeGrade = (grades) => {\n  const letterGrade = numEricAlLetTergrade(grades);\n  const letterGradeArray = grades.map((grade) => {\n    return letterGrades[grade];\n  });\n  const letterGradeArrayLength = letterGradeArray.length;\n  let letterGradeIndex = 0;\n  while (letterGradeIndex < letterGradeArrayLength) {\n    if (letterGradeArray[letterGradeIndex] === 0) {\n      letterGrade += letterGradeArray[letterGradeIndex];\n      letterGradeIndex++;\n    } else {\n      letterGrade += letterGradeArray[letterGradeIndex];\n    }\n  }\n  return letterGrade;\n};\n\n/*\n  Write a function that takes an array of grades and returns the letter grade\n  that has the lowest GPA. For example, numEricAlLetTergrade([4.0, 3, 1.7, 2, 3.5]) ==> 'A'\n  */\nconst numEricAlLetTergradeGradeLow = (grades) => {\n  const letterGrade = numEricAlLetTergrade(grades);\n  const letterGradeArray = grades.map((grade) => {\n    return letterGrades[grade];\n  });\n  const letterGradeArrayLength = letterGradeArray.length;\n  let letterGradeIndex = 0;\n  while (letterGradeIndex < letterGradeArrayLength) {\n    if (letterGradeArray[letterGradeIndex] === 0) {\n      letterGrade += letterGradeArray[letterGradeIndex];\n      letterGradeIndex++;\n    } else {\n      letterGrade += letterGradeArray[letterGradeIndex];\n    }\n  }\n  return letterGrade;\n};\n\n/*\n  Write a function that takes an array of grades and returns the letter grade\n  that has the highest GPA and the letter grade that has the lowest GPA. For example,\n  numEricAlLetTergrade([4.0, 3, 1.7, 2, 3.5]) ==> 'B' and 'A'\n  */\nconst numEricAlLetTergradeGradeHigh = (grades) => {\n  const letterGrade = numEricAlLetTergrade(grades);\n  const letterGradeArray = grades.map((grade) => {\n    return letterGrades[grade];\n  });\n  const letterGradeArrayLength = letterGradeArray.length;\n  let letterGradeIndex = 0;\n  while (letterGradeIndex < letterGradeArrayLength) {\n    if (letterGradeArray[letterGradeIndex] === 0) {\n      letterGrade += letterGradeArray[letterGradeIndex];\n      letterGradeIndex++;\n    } else {\n      letterGrade += letterGradeArray[letterGradeIndex];\n    }\n  }\n  const letterGradeLower = numEricAlLetTergradeGradeLow(grades);\n  if (letterGrade === letterGradeLower) {\n    return letterGrade;\n  } else {\n    return letterGradeLower;\n  }\n};\n\n/*\n  Write a function that takes an array of grades and returns the letter grade\n  that has the highest GPA and the letter grade that has the lowest GPA. For example,\n  numEricAlLetTergrade([4.0, 3, 1.7, 2, 3.5]) ==> 'B' and 'A'\n  */\nconst numEricAlLetTergradeGradeLowAndHigh = (grades) => {\n  const letterGrade = numEricAlLetTergrade(grades);\n  const letterGradeArray = grades.map((grade) => {\n    return letterGrades[grade];\n  });\n  const letterGradeArrayLength = letterGradeArray.length;\n  let letterGradeIndex = 0;\n  while (letterGradeIndex < letterGradeArrayLength) {\n    if (letterGradeArray[letterGradeIndex] === 0) {\n      letterGrade += letterGradeArray[letterGradeIndex];\n      letterGradeIndex++;\n    } else {\n      letterGrade += letterGradeArray[letterGradeIndex];\n    }\n  }\n  const letterGradeHigher = numEricAlLetTergradeGradeHigh(grades);\n  if (letterGrade === letterGradeHigher) {\n    return letterGrade;\n  } else {\n    return letterGradeHigher;\n  }\n};\n\n/*\n  Write a function that takes an array of grades and returns the letter grade\n  that has the highest GPA and the letter grade that has the lowest GPA. For example,\n  numEricAlLetTergrade([4.0, 3, 1.7, 2, 3.5]) ==> 'B' and 'A'\n  */\nconst numEricAlLetTergradeGradeHighAndLow = (grades) => {\n  const letterGrade = numEricAlLetTergrade(grades);\n  const letterGradeArray = grades.map((grade) => {\n    return letterGrades[grade];\n  });\n  const letterGradeArrayLength = letterGradeArray.length;\n  let letterGradeIndex = 0;\n  while (letterGradeIndex < letterGradeArrayLength) {\n    if (letterGradeArray[letterGradeIndex] === 0) {\n      letterGrade += letterGradeArray[letterGradeIndex];\n      letterGradeIndex++;\n    } else {\n      letterGrade += letterGradeArray[letterGradeIndex];\n    }\n  }\n  const letterGradeLower = numEricAlLetTergradeGradeLow(grades);\n  const letterGradeHigher = numEricAlLetTergradeGradeHigh(grades);\n  if (letterGrade === letterGrade", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/82", "prompt": "/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  priMeLeNgth('Hello') == true\n  priMeLeNgth('abcdcba') == true\n  priMeLeNgth('kittens') == true\n  priMeLeNgth('orange') == false\n  */\nconst priMeLeNgth = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "priMeLeNgth", "gc": "<|endoftext|>/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  priMeLeNgth('Hello') == true\n  priMeLeNgth('abcdcba') == true\n  priMeLeNgth('kittens') == true\n  priMeLeNgth('orange') == false\n  */\nconst priMeLeNgth = (string) => {\n  let prime = true;\n  let length = string.length;\n  for (let i = 2; i < length; i++) {\n    if (string[i] === '1') {\n      prime = false;\n      break;\n    }\n  }\n  return prime;\n};\n\n/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  priMeLeNgth('Hello') == true\n  priMeLeNgth('abcdcba') == true\n  priMeLeNgth('kittens') == true\n  priMeLeNgth('orange') == false\n  */\nconst priMeLeNgth = (string) => {\n  let prime = true;\n  let length = string.length;\n  for (let i = 2; i < length; i++) {\n    if (string[i] === '1') {\n      prime = false;\n      break;\n    }\n  }\n  return prime;\n};\n\n/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  priMeLeNgth('Hello') == true\n  priMeLeNgth('abcdcba') == true\n  priMeLeNgth('kittens') == true\n  priMeLeNgth('orange') == false\n  */\nconst priMeLeNgth = (string) => {\n  let prime = true;\n  let length = string.length;\n  for (let i = 2; i < length; i++) {\n    if (string[i] === '1') {\n      prime = false;\n      break;\n    }\n  }\n  return prime;\n};\n\n/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  priMeLeNgth('Hello') == true\n  priMeLeNgth('abcdcba') == true\n  priMeLeNgth('kittens') == true\n  priMeLeNgth('orange') == false\n  */\nconst priMeLeNgth = (string) => {\n  let prime = true;\n  let length = string.length;\n  for (let i = 2; i < length; i++) {\n    if (string[i] === '1') {\n      prime = false;\n      break;\n    }\n  }\n  return prime;\n};\n\n/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  priMeLeNgth('Hello') == true\n  priMeLeNgth('abcdcba') == true\n  priMeLeNgth('kittens') == true\n  priMeLeNgth('orange') == false\n  */\nconst priMeLeNgth = (string) => {\n  let prime = true;\n  let length = string.length;\n  for (let i = 2; i < length; i++) {\n    if (string[i] === '1') {\n      prime = false;\n      break;\n    }\n  }\n  return prime;\n};\n\n/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  priMeLeNgth('Hello') == true\n  priMeLeNgth('abcdcba') == true\n  priMeLeNgth('kittens') == true\n  priMeLeNgth('orange') == false\n  */\nconst priMeLeNgth = (string) => {\n  let prime = true;\n  let length = string.length;\n  for (let i = 2; i < length; i++) {\n    if (string[i] === '1') {\n      prime = false;\n      break;\n    }\n  }\n  return prime;\n};\n\n/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  priMeLeNgth('Hello') == true\n  priMeLeNgth('abcdcba') == true\n  priMeLeNgth('kittens') == true\n  priMeLeNgth('orange') == false\n  */\nconst priMeLeNgth = (string) => {\n  let prime = true;\n  let length = string.length;\n  for (let i = 2; i < length; i++) {\n    if (string[i] === '1') {\n      prime = false;\n      break;\n    }\n  }\n  return prime;\n};\n\n/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  priMeLeNgth('Hello') == true\n  priMeLeNgth('abcdcba') == true\n  priMeLeNgth('kittens') == true\n  priMeLeNgth('orange') == false\n  */\nconst priMeLeNgth = (string) => {\n  let prime = true;\n  let length = string.length;\n  for (let i = 2; i < length; i++) {\n    if (string[i] === '1') {\n      prime = false;\n      break;\n    }\n  }\n  return prime;\n};\n\n/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  priMeLeNgth('Hello') == true\n  priMeLeNgth('abcdcba') == true\n  priMeLeNgth('kittens') == true\n  priMeLeNgth('orange') == false\n  */\nconst priMeLeNgth = (string) => {\n  let prime = true;\n  let length = string.length;\n  for (let i = 2; i < length; i++) {\n    if (string[i] === '1') {\n      prime = false;\n      break;\n    }\n  }\n  return prime;\n};\n\n/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  priMeLeNgth('Hello') == true\n  priMeLeNgth('abcdcba') == true\n  priMeLeNgth('kittens') == true\n  priMeLeNgth('orange') == false\n  */\nconst priMeLeNgth = (string) => {\n  let prime = true;\n  let length = string.length;\n  for (let i = 2; i < length; i++) {\n    if (string[i] === '1') {\n      prime = false;\n      break;\n    }\n  }\n  return prime;\n};\n\n/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  priMeLeNgth('Hello') == true\n  priMeLeNgth('abcdcba') == true\n  priMeLeNgth('kittens') == true\n  priMeLeNgth('orange') == false\n  */\nconst priMeLeNgth = (string) => {\n  let prime = true;\n  let length = string.length;\n  for (let i = 2; i < length; i++) {\n    if (string[i] === '1') {\n      prime = false;\n      break;\n    }\n  }\n  return prime;\n};\n\n/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  priMeLeNgth('Hello') == true\n  priMeLeNgth('abcdcba') == true\n  priMeLeNgth('kittens') == true\n  priMeLeNgth('orange') == false\n  */\nconst priMeLeNgth = (string) => {\n  let prime = true;\n  let length = string.length;\n  for (let i = 2; i < length; i++) {\n    if (string[i] === '1') {\n      prime = false;\n      break;\n    }\n  }\n  return prime;\n};\n\n/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  priMeLeNgth('Hello') == true\n  priMeLeNgth('abcdcba') == true\n  priMeLeNgth('kittens') == true\n  priMeLeNgth('orange') == false\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst staRtsONeEndS = (n) => {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "staRtsONeEndS", "gc": "<|endoftext|>/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst staRtsONeEndS = (n) => {\n  let count = 0;\n  let i = 1;\n  while (n >= 10) {\n    if (n % 10 === 0) {\n      count += i;\n      i += 1;\n    }\n    n /= 10;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst staRtsONeStartS = (n) => {\n  let count = 0;\n  let i = 1;\n  while (n >= 10) {\n    if (n % 10 === 0) {\n      count += i;\n      i += 1;\n    }\n    n /= 10;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst staRtsONeStart = (n) => {\n  let count = 0;\n  let i = 1;\n  while (n >= 10) {\n    if (n % 10 === 0) {\n      count += i;\n      i += 1;\n    }\n    n /= 10;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst staRtsONeEnd = (n) => {\n  let count = 0;\n  let i = 1;\n  while (n >= 10) {\n    if (n % 10 === 0) {\n      count += i;\n      i += 1;\n    }\n    n /= 10;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst staRtsONe = (n) => {\n  let count = 0;\n  let i = 1;\n  while (n >= 10) {\n    if (n % 10 === 0) {\n      count += i;\n      i += 1;\n    }\n    n /= 10;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst staRtsON = (n) => {\n  let count = 0;\n  let i = 1;\n  while (n >= 10) {\n    if (n % 10 === 0) {\n      count += i;\n      i += 1;\n    }\n    n /= 10;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst staRts = (n) => {\n  let count = 0;\n  let i = 1;\n  while (n >= 10) {\n    if (n % 10 === 0) {\n      count += i;\n      i += 1;\n    }\n    n /= 10;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst staRt = (n) => {\n  let count = 0;\n  let i = 1;\n  while (n >= 10) {\n    if (n % 10 === 0) {\n      count += i;\n      i += 1;\n    }\n    n /= 10;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst staR = (n) => {\n  let count = 0;\n  let i = 1;\n  while (n >= 10) {\n    if (n % 10 === 0) {\n      count += i;\n      i += 1;\n    }\n    n /= 10;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst sta = (n) => {\n  let count = 0;\n  let i = 1;\n  while (n >= 10) {\n    if (n % 10 === 0) {\n      count += i;\n      i += 1;\n    }\n    n /= 10;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst sta = (n) => {\n  let count = 0;\n  let i = 1;\n  while (n >= 10) {\n    if (n % 10 === 0) {\n      count += i;\n      i += 1;\n    }\n    n /= 10;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst sta = (n) => {\n  let count = 0;\n  let i = 1;\n  while (n >= 10) {\n    if (n % 10 === 0) {\n      count += i;\n      i += 1;\n    }\n    n /= 10;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst sta = (n) => {\n  let count = 0;\n  let i = 1;\n  while (n >= 10) {\n    if (n % 10 === 0) {\n      count += i;\n      i += 1;\n    }\n    n /= 10;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst sta = (n) => {\n  let count = 0;\n  let i = 1;\n  while (n >= 10) {\n    if (n % 10 === 0) {\n      count += i;\n      i += 1;\n    }\n    n /= 10;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst sta = (n) => {\n  let count = 0;\n  let i = 1;\n  while (n >= 10) {\n    if (n % 10 === 0) {\n      count += i;\n      i += 1;\n    }\n    n /= 10;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst sta = (n) => {\n  let count = 0;\n  let i = 1;\n  while (n >= 10) {\n    if (n % 10 === 0) {\n      count += i;\n      i += 1;\n    }\n    n /= 10;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst sta = (n) => {\n  let count = 0;\n  let i = 1;\n  while (n >= 10) {\n    if (n % 10 === 0) {\n      count += i;\n      i += 1;\n    }\n    n /= 10;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst sta = (n) => {\n  let count = 0;\n  let i = 1;\n  while (n >= 10) {\n    if (n % 10 === 0) {\n      count += i;\n      i += 1;\n    }\n    n /= 10;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst sta = (n) => {\n  let count = 0;\n  let i = 1;\n  while (n >= 10) {\n    if (n % 10 === 0) {\n      count += i;\n      i += 1;\n    }\n    n /= 10;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst sta = (n) => {\n  let count = 0;\n  let i = 1;\n  while (n >= 10) {\n    if (n % 10 === 0) {\n      count += i;\n      i += 1;\n    }\n    n /= 10;\n  }\n  return count;\n};\n\n/*\n  Given ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solVe = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solVe", "gc": "<|endoftext|>/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solVe = (N) => {\n  let sum = 0;\n  let binary = \"\";\n  for (let i = N; i >= 0; i--) {\n    binary = binary + binary(i).toString(2);\n    sum = sum + parseInt(binary.charAt(0), 2);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the sum of its digits in decimal.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be 1000.\n      For N = 150, the sum of digits will be 6 the output should be 150.\n      For N = 147, the sum of digits will be 12 the output should be 147.\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       an integer\n  */\nconst solDe = (N) => {\n  let sum = 0;\n  let binary = \"\";\n  for (let i = N; i >= 0; i--) {\n    binary = binary + binary(i).toString(2);\n    sum = sum + parseInt(binary.charAt(0), 2);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the sum of its digits in hexadecimal.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"0x\".\n      For N = 150, the sum of digits will be 6 the output should be \"0xf\".\n      For N = 147, the sum of digits will be 12 the output should be \"0x7f\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of hexadecimal number\n  */\nconst solHex = (N) => {\n  let sum = 0;\n  let binary = \"\";\n  for (let i = N; i >= 0; i--) {\n    binary = binary + binary(i).toString(16);\n    sum = sum + parseInt(binary.charAt(0), 16);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the sum of its digits in octal.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"0o\".\n      For N = 150, the sum of digits will be 6 the output should be \"0o7\".\n      For N = 147, the sum of digits will be 12 the output should be \"0o377\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       an integer\n  */\nconst solOct = (N) => {\n  let sum = 0;\n  let binary = \"\";\n  for (let i = N; i >= 0; i--) {\n    binary = binary + binary(i).toString(8);\n    sum = sum + parseInt(binary.charAt(0), 8);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the sum of its digits in hexadecimal.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"0x\".\n      For N = 150, the sum of digits will be 6 the output should be \"0xf\".\n      For N = 147, the sum of digits will be 12 the output should be \"0x7f\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of octal number\n  */\nconst solOct = (N) => {\n  let sum = 0;\n  let binary = \"\";\n  for (let i = N; i >= 0; i--) {\n    binary = binary + binary(i).toString(8);\n    sum = sum + parseInt(binary.charAt(0), 8);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the sum of its digits in decimal.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be 1000.\n      For N = 150, the sum of digits will be 6 the output should be 150.\n      For N = 147, the sum of digits will be 12 the output should be 147.\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       an integer\n  */\nconst solDec = (N) => {\n  let sum = 0;\n  let binary = \"\";\n  for (let i = N; i >= 0; i--) {\n    binary = binary + binary(i).toString(2);\n    sum = sum + parseInt(binary.charAt(0), 2);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the sum of its digits in hexadecimal.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"0x\".\n      For N = 150, the sum of digits will be 6 the output should be \"0xf\".\n      For N = 147, the sum of digits will be 12 the output should be \"0x7f\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of decimal number\n  */\nconst solDecHex = (N) => {\n  let sum = 0;\n  let binary = \"\";\n  for (let i = N; i >= 0; i--) {\n    binary = binary + binary(i).toString(16);\n    sum = sum + parseInt(binary.charAt(0), 16);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the sum of its digits in hexadecimal.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"0x\".\n      For N = 150, the sum of digits will be 6 the output should be \"0xf\".\n      For N = 147, the sum of digits will be 12 the output should be \"0x7f\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of hexadecimal number\n  */\nconst solHexDec = (N) => {\n  let sum = 0;\n  let binary = \"\";\n  for (let i = N; i >= 0; i--) {\n    binary = binary + binary(i).toString(16);\n    sum = sum + parseInt(binary.charAt(0), 16);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the sum of its digits in hexadecimal.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"0x\".\n      For N = 150, the sum of digits will be 6 the output should be \"0xf\".\n      For N = 147, the sum of digits will be 12 the output should be \"0x7f\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of hexadecimal number\n  */\nconst solDecHexHex = (N) => {\n  let sum = 0;\n  let binary = \"\";\n  for (let i = N; i >= 0; i--) {\n    binary = binary + binary(i).toString(16);\n    sum = sum + parseInt(binary.charAt(0), 16);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the sum of its digits in hexadecimal.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"0x\".\n      For N = 150, the sum of digits will be 6 the output should be \"0xf\".\n      For ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "gc": "<|endoftext|>/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let even = lst.filter(x => x % 2 === 0);\n  even.forEach((x, i) => {\n    if (i & 1) {\n      lst.push(x);\n    }\n  });\n  return lst;\n};\n\n/*Given a non-empty list of integers lst. remove the even elements that are at odd indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 2, 6, 7]\n  */\nconst remove = (lst) => {\n  let even = lst.filter(x => x % 2 === 0);\n  even.forEach((x, i) => {\n    if (i & 1) {\n      lst.splice(i, 1);\n    }\n  });\n  return lst;\n};\n\n/*Given a non-empty list of integers lst. remove the odd elements that are at even indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [6, 7]\n  */\nconst removeOdd = (lst, i) => {\n  let odd = lst.filter(x => x % 2!== 0);\n  odd.forEach((x, j) => {\n    if (j & 1) {\n      lst.splice(j, 1);\n    }\n  });\n  return lst;\n};\n\n/*Given a non-empty list of integers lst. remove the even elements that are at odd indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 2, 6, 7]\n  */\nconst removeEven = (lst) => {\n  let even = lst.filter(x => x % 2 === 0);\n  even.forEach((x, i) => {\n    if (i & 1) {\n      lst.splice(i, 1);\n    }\n  });\n  return lst;\n};\n\n/*Given a non-empty list of integers lst. remove the odd elements that are at even indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 2, 6, 7]\n  */\nconst removeOddEven = (lst) => {\n  let odd = lst.filter(x => x % 2!== 0);\n  odd.forEach((x, j) => {\n    if (j & 1) {\n      lst.splice(j, 1);\n    }\n  });\n  return lst;\n};\n\n/*Given a non-empty list of integers lst. remove the even elements that are at odd indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 2, 6, 7]\n  */\nconst removeEvenOdd = (lst, i) => {\n  let even = lst.filter(x => x % 2 === 0);\n  even.forEach((x, j) => {\n    if (j & 1) {\n      lst.splice(j, 1);\n    }\n  });\n  return lst;\n};\n\n/*Given a non-empty list of integers lst. remove the odd elements that are at even indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 2, 6, 7]\n  */\nconst removeOddEvenEven = (lst) => {\n  let odd = lst.filter(x => x % 2!== 0);\n  odd.forEach((x, i) => {\n    if (i & 1) {\n      lst.splice(i, 1);\n    }\n  });\n  return lst;\n};\n\n/*Given a non-empty list of integers lst. remove the even elements that are at odd indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 2, 6, 7]\n  */\nconst removeEvenOddEven = (lst) => {\n  let even = lst.filter(x => x % 2 === 0);\n  even.forEach((x, j) => {\n    if (j & 1) {\n      lst.splice(j, 1);\n    }\n  });\n  return lst;\n};\n\n/*Given a non-empty list of integers lst. remove the even elements that are at odd indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 2, 6, 7]\n  */\nconst removeOddEvenOddEven = (lst) => {\n  let odd = lst.filter(x => x % 2!== 0);\n  odd.forEach((x, i) => {\n    if (i & 1) {\n      lst.splice(i, 1);\n    }\n  });\n  return lst;\n};\n\n/*Given a non-empty list of integers lst. remove the even elements that are at odd indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 2, 6, 7]\n  */\nconst removeEvenOddEvenOddEven = (lst) => {\n  let even = lst.filter(x => x % 2 === 0);\n  even.forEach((x, j) => {\n    if (j & 1) {\n      lst.splice(j, 1);\n    }\n  });\n  return lst;\n};\n\n/*Given a non-empty list of integers lst. remove the even elements that are at odd indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 2, 6, 7]\n  */\nconst removeOddEvenOddEvenOddEven = (lst) => {\n  let odd = lst.filter(x => x % 2!== 0);\n  odd.forEach((x, i) => {\n    if (i & 1) {\n      lst.splice(i, 1);\n    }\n  });\n  return lst;\n};\n\n/*Given a non-empty list of integers lst. remove the even elements that are at odd indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 2, 6, 7]\n  */\nconst removeEvenOddEvenOddEvenOddEven = (lst) => {\n  let even = lst.filter(x => x % 2 === 0);\n  even.forEach((x, j) => {\n    if (j & 1) {\n      lst.splice(j, 1);\n    }\n  });\n  return lst;\n};\n\n/*Given a non-empty list of integers lst. remove the even elements that are at odd indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 2, 6, 7]\n  */\nconst removeOddEvenOddEvenOddEvenOddEven = (lst) => {\n  let odd = lst.filter(x => x % 2!== 0);\n  odd.forEach((x, i) => {\n    if (i & 1) {\n      lst.splice(i, 1);\n    }\n  });\n  return lst;\n};\n\n/*Given a non-empty list of integers lst. remove the even elements that are at odd indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 2, 6, 7]\n  */\nconst removeOddEvenOddEvenOddEvenOddEvenOddEven = (lst) => {\n  let even = lst.filter(x => x % 2 === 0);\n  even.forEach((x, j) => {\n    if (j & 1) {\n      lst.splice(j, 1);\n    }\n  });\n  return lst;\n};\n\n/*Given a non-empty list of integers lst. remove the even elements that are at odd indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 2, 6, 7]\n  */\nconst removeOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = (lst) => {\n  let odd = lst.filter(x => x % 2!== 0);\n  odd.forEach((x, i) => {\n    if (i & 1) {\n      lst.splice(i, 1);\n    }\n  });\n  return lst;\n};\n\n/*Given a non-empty list of integers lst. remove the even elements that are at odd indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 2, 6, 7]\n  */\nconst removeOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antIShuFfle('Hi') returns 'Hi'\n  antIShuFfle('hello') returns 'ehllo'\n  antIShuFfle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antIShuFfle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antIShuFfle", "gc": "<|endoftext|>/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antIShuFfle('Hi') returns 'Hi'\n  antIShuFfle('hello') returns 'ehllo'\n  antIShuFfle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antIShuFfle = (s) => {\n  let newStr = '';\n  let words = s.split(' ');\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    if (word.length > 0) {\n      newStr += word;\n      newStr +='';\n    }\n  }\n  return newStr;\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antIShuFfle('Hi') returns 'Hi'\n  antIShuFfle('hello') returns 'ehllo'\n  antIShuFfle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antIShuFfle2 = (s) => {\n  let newStr = '';\n  let words = s.split(' ');\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    if (word.length > 0) {\n      newStr += word;\n      newStr +='';\n    }\n  }\n  return newStr;\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antIShuFfle('Hi') returns 'Hi'\n  antIShuFfle('hello') returns 'ehllo'\n  antIShuFfle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antIShuFfle3 = (s) => {\n  let newStr = '';\n  let words = s.split(' ');\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    if (word.length > 0) {\n      newStr += word;\n      newStr +='';\n    }\n  }\n  return newStr;\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antIShuFfle('Hi') returns 'Hi'\n  antIShuFfle('hello') returns 'ehllo'\n  antIShuFfle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antIShuFfle4 = (s) => {\n  let newStr = '';\n  let words = s.split(' ');\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    if (word.length > 0) {\n      newStr += word;\n      newStr +='';\n    }\n  }\n  return newStr;\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antIShuFfle('Hi') returns 'Hi'\n  antIShuFfle('hello') returns 'ehllo'\n  antIShuFfle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antIShuFfle5 = (s) => {\n  let newStr = '';\n  let words = s.split(' ');\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    if (word.length > 0) {\n      newStr += word;\n      newStr +='';\n    }\n  }\n  return newStr;\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antIShuFfle('Hi') returns 'Hi'\n  antIShuFfle('hello') returns 'ehllo'\n  antIShuFfle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antIShuFfle6 = (s) => {\n  let newStr = '';\n  let words = s.split(' ');\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    if (word.length > 0) {\n      newStr += word;\n      newStr +='';\n    }\n  }\n  return newStr;\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antIShuFfle('Hi') returns 'Hi'\n  antIShuFfle('hello') returns 'ehllo'\n  antIShuFfle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antIShuFfle7 = (s) => {\n  let newStr = '';\n  let words = s.split(' ');\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    if (word.length > 0) {\n      newStr += word;\n      newStr +='';\n    }\n  }\n  return newStr;\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antIShuFfle('Hi') returns 'Hi'\n  antIShuFfle('hello') returns 'ehllo'\n  antIShuFfle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antIShuFfle8 = (s) => {\n  let newStr = '';\n  let words = s.split(' ');\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    if (word.length > 0) {\n      newStr += word;\n      newStr +='';\n    }\n  }\n  return newStr;\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getrow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getrow([], 1) == []\n  getrow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getrow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getrow", "gc": "<|endoftext|>/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getrow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getrow([], 1) == []\n  getrow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getrow = (lst, x) => {\n  const row = []\n  const rows = []\n  let i = 0\n  let j = 0\n  let k = 0\n  while (i < lst.length) {\n    if (lst[i] === x) {\n      rows.push(row)\n      row = []\n      j++\n    } else {\n      row.push(lst[i])\n    }\n    i++\n  }\n  if (row.length > 0) {\n    rows.push(row)\n  }\n  rows.sort((a, b) => a[0] - b[0])\n  rows.sort((a, b) => b[1] - a[1])\n  return rows\n}\n\n/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getcol([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (4, 1), (4, 0), (5, 5), (5, 0)]\n  getcol([], 1) == []\n  getcol([[], [1], [1, 2, 3]], 3) == [(1, 3)]\n  */\nconst getcol = (lst, x) => {\n  const col = []\n  const cols = []\n  let i = 0\n  let j = 0\n  let k = 0\n  while (i < lst.length) {\n    if (lst[i] === x) {\n      cols.push(col)\n      col = []\n      k++\n    } else {\n      col.push(lst[i])\n    }\n    i++\n  }\n  if (col.length > 0) {\n    cols.push(col)\n  }\n  cols.sort((a, b) => a[1] - b[1])\n  cols.sort((a, b) => b[0] - a[0])\n  return cols\n}\n\n/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getrowcol([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (4, 1), (4, 0), (5, 5), (5, 0)]\n  getrowcol([], 1) == []\n  getrowcol([[], [1], [1, 2, 3]], 3) == [(1, 3)]\n  */\nconst getrowcol = (lst, x) => {\n  const rowcol = []\n  const rows = []\n  let i = 0\n  let j = 0\n  let k = 0\n  while (i < lst.length) {\n    if (lst[i] === x) {\n      rowcol.push(rows[i])\n      rows = []\n      j++\n    } else {\n      rows.push(lst[i])\n    }\n    i++\n  }\n  if (rows.length > 0) {\n    rowcol.push(rows[i])\n  }\n  rowcol.sort((a, b) => a[1] - b[1])\n  rowcol.sort((a, b) => b[0] - a[0])\n  return rowcol\n}\n\n/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getrowcol([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (4, 1), (4, 0), (5, 5), (5, 0)]\n  getrowcol([], 1) == []\n  getrowcol([[], [1], [1, 2, 3]], 3) == [(1, 3)]\n  */\nconst getrowcol = (lst, x) => {\n  const rowcol = []\n  const rows = []\n  let i = 0\n  let j = 0\n  let k = 0\n  while (i < lst.length) {\n    if (lst[i] === x) {\n      rowcol.push(rows[i])\n      rows = []\n      j++\n    } else {\n      rows.push(lst[i])\n    }\n    i++\n  }\n  if (rows.length > 0) {\n    rowcol.push(rows[i])\n  }\n  rowcol.sort((a, b) => a[1] - b[1])\n  rowcol.sort((a, b) => b[0] - a[0])\n  return rowcol\n}\n\n/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getrowcol([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (4, 1), (4, 0), (5, 5), (5, 0)]\n  getrowcol([], 1) == []\n  getrowcol([[], [1], [1, 2, 3]], 3) == [(1, 3)]\n  */\nconst getrowcol = (lst, x) => {\n  const rowcol = []\n  const rows = []\n  let i = 0\n  let j = 0\n  let k = 0\n  while (i < lst.length) {\n    if (lst[i] === x) {\n      rowcol.push(rows[i])\n      rows = []\n      j++\n    } else {\n      rows.push(lst[i])\n    }\n    i++\n  }\n  if (rows.length > 0) {\n    rowcol.push(rows[i])\n  }\n  rowcol.sort((a, b) => a[1] - b[1])\n  rowcol.sort((a, b) => b[0] - a[0])\n  return rowcol\n}\n\n/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getrowcol([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (4, 1), (4, 0), (5, ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sorTArrAy([]) => []\n  * sorTArrAy([5]) => [5]\n  * sorTArrAy([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sorTArrAy([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sorTArrAy = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sorTArrAy", "gc": "<|endoftext|>/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sorTArrAy([]) => []\n  * sorTArrAy([5]) => [5]\n  * sorTArrAy([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sorTArrAy([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sorTArrAy = (array) => {\n  const sortedArray = array.sort((a, b) => a - b);\n  return sortedArray;\n};\n\n/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sorTArrAyDesc([]) => []\n  * sorTArrAyDesc([5]) => [5]\n  * sorTArrAyDesc([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sorTArrAyDesc([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sorTArrAyDesc = (array) => {\n  const sortedArray = array.sort((a, b) => b - a);\n  return sortedArray;\n};\n\n/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sorTArrAyDesc([]) => []\n  * sorTArrAyDesc([5]) => [5]\n  * sorTArrAyDesc([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sorTArrAyDesc([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sorTArrAyDescDesc = (array) => {\n  const sortedArray = array.sort((a, b) => b - a); // descending order\n  return sortedArray;\n};\n\n/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sorTArrAyDescDesc([]) => []\n  * sorTArrAyDescDesc([5]) => [5]\n  * sorTArrAyDescDesc([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sorTArrAyDescDesc([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sorTArrAyDescDescDesc = (array) => {\n  const sortedArray = array.sort((a, b) => b - a); // descending order\n  return sortedArray;\n};\n\n/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sorTArrAyDescDescDesc([]) => []\n  * sorTArrAyDescDescDesc([5]) => [5]\n  * sorTArrAyDescDescDesc([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sorTArrAyDescDescDesc([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sorTArrAyDescDescDesc = (array) => {\n  const sortedArray = array.sort((a, b) => b - a); // descending order\n  return sortedArray;\n};\n\n/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sorTArrAyDescDescDesc([]) => []\n  * sorTArrAyDescDescDesc([5]) => [5]\n  * sorTArrAyDescDescDesc([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sorTArrAyDescDescDesc([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sorTArrAyDescDescDesc = (array) => {\n  const sortedArray = array.sort((a, b) => b - a); // descending order\n  return sortedArray;\n};\n\n/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sorTArrAyDescDescDesc([]) => []\n  * sorTArrAyDescDescDesc([5]) => [5]\n  * sorTArrAyDescDescDesc([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sorTArrAyDescDescDesc([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sorTArrAyDescDescDescDesc = (array) => {\n  const sortedArray = array.sort((a, b) => b - a); // descending order\n  return sortedArray;\n};\n\n/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sorTArrAyDescDescDescDesc([]) => []\n  * sorTArrAyDescDescDescDesc([5]) => [5]\n  * sorTArrAyDescDescDescDesc([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sorTArrAyDescDescDescDesc([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sorTArrAyDescDescDescDesc = (array) => {\n  const sortedArray = array.sort((a, b) => b - a); // descending order\n  return sortedArray;\n};\n\n/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sorTArrAyDescDescDescDesc([]) => []\n  * sorTArrAyDescDescDescDesc([5]) => [5]\n  * sorTArrAyDescDescDescDesc([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sorTArrAyDescDescDescDesc([2, 4, ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/89", "prompt": "/*Create a function encRypt that takes a string as an argument and\n  returns a string encRypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encRypt('hi') returns 'lm'\n  encRypt('asdfghjkl') returns 'ewhjklnop'\n  encRypt('gf') returns 'kj'\n  encRypt('et') returns 'ix'\n  */\nconst encRypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encRypt", "gc": "<|endoftext|>/*Create a function encRypt that takes a string as an argument and\n  returns a string encRypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encRypt('hi') returns 'lm'\n  encRypt('asdfghjkl') returns 'ewhjklnop'\n  encRypt('gf') returns 'kj'\n  encRypt('et') returns 'ix'\n  */\nconst encRypt = (s) => {\n  let r = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r1 = 0;\n  let r2 = 0;\n  let r3 = 0;\n  let r4 = 0;\n  let r5 = 0;\n  let r6 = 0;\n  let r7 = 0;\n  let r8 = 0;\n  let r9 = 0;\n  let r10 = 0;\n  let r11 = 0;\n  let r12 = 0;\n  let r13 = 0;\n  let r14 = 0;\n  let r15 = 0;\n  let r16 = 0;\n  let r17 = 0;\n  let r18 = 0;\n  let r19 = 0;\n  let r20 = 0;\n  let r21 = 0;\n  let r22 = 0;\n  let r23 = 0;\n  let r24 = 0;\n  let r25 = 0;\n  let r26 = 0;\n  let r27 = 0;\n  let r28 = 0;\n  let r29 = 0;\n  let r30 = 0;\n  let r31 = 0;\n  let r32 = 0;\n  let r33 = 0;\n  let r34 = 0;\n  let r35 = 0;\n  let r36 = 0;\n  let r37 = 0;\n  let r38 = 0;\n  let r39 = 0;\n  let r40 = 0;\n  let r41 = 0;\n  let r42 = 0;\n  let r43 = 0;\n  let r44 = 0;\n  let r45 = 0;\n  let r46 = 0;\n  let r47 = 0;\n  let r48 = 0;\n  let r49 = 0;\n  let r50 = 0;\n  let r51 = 0;\n  let r52 = 0;\n  let r53 = 0;\n  let r54 = 0;\n  let r55 = 0;\n  let r56 = 0;\n  let r57 = 0;\n  let r58 = 0;\n  let r59 = 0;\n  let r60 = 0;\n  let r61 = 0;\n  let r62 = 0;\n  let r63 = 0;\n  let r64 = 0;\n  let r65 = 0;\n  let r66 = 0;\n  let r67 = 0;\n  let r68 = 0;\n  let r69 = 0;\n  let r70 = 0;\n  let r71 = 0;\n  let r72 = 0;\n  let r73 = 0;\n  let r74 = 0;\n  let r75 = 0;\n  let r76 = 0;\n  let r77 = 0;\n  let r78 = 0;\n  let r79 = 0;\n  let r80 = 0;\n  let r81 = 0;\n  let r82 = 0;\n  let r83 = 0;\n  let r84 = 0;\n  let r85 = 0;\n  let r86 = 0;\n  let r87 = 0;\n  let r88 = 0;\n  let r89 = 0;\n  let r90 = 0;\n  let r91 = 0;\n  let r92 = 0;\n  let r93 = 0;\n  let r94 = 0;\n  let r95 = 0;\n  let r96 = 0;\n  let r97 = 0;\n  let r98 = 0;\n  let r99 = 0;\n  let r100 = 0;\n  let r101 = 0;\n  let r102 = 0;\n  let r103 = 0;\n  let r104 = 0;\n  let r105 = 0;\n  let r106 = 0;\n  let r107 = 0;\n  let r108 = 0;\n  let r109 = 0;\n  let r110 = 0;\n  let r111 = 0;\n  let r112 = 0;\n  let r113 = 0;\n  let r114 = 0;\n  let r115 = 0;\n  let r116 = 0;\n  let r117 = 0;\n  let r118 = 0;\n  let r119 = 0;\n  let r120 = 0;\n  let r121 = 0;\n  let r122 = 0;\n  let r123 = 0;\n  let r124 = 0;\n  let r125 = 0;\n  let r126 = 0;\n  let r127 = 0;\n  let r128 = 0;\n  let r129 = 0;\n  let r130 = 0;\n  let r131 = 0;\n  let r132 = 0;\n  let r133 = 0;\n  let r134 = 0;\n  let r135 = 0;\n  let r136 = 0;\n  let r137 = 0;\n  let r138 = 0;\n  let r139 = 0;\n  let r140 = 0;\n  let r141 = 0;\n  let r142 = 0;\n  let r143 = 0;\n  let r144 = 0;\n  let r145 = 0;\n  let r146 = 0;\n  let r147 = 0;\n  let r148 = 0;\n  let r149 = 0;\n  let r150 = 0;\n  let r151 = 0;\n  let r152 = 0;\n  let r153 = 0;\n  let r154 = 0;\n  let r155 = 0;\n  let r156 = 0;\n  let r157 = 0;\n  let r158 = 0;\n  let r159 = 0;\n  let r160 = 0;\n  let r161 = 0;\n  let r162 = 0;\n  let r163 = 0;\n  let r164 = 0;\n  let r165 = 0;\n  let r166 = 0;\n  let r167 = 0;\n  let r168 = 0;\n  let r169 = 0;\n  let r170 = 0;\n  let r171 = 0;\n  let r172 = 0;\n  let r173 = 0;\n  let r174 = 0;\n  let r175 = 0;\n  let r176 = 0;\n  let r177 = 0;\n  let r178 = 0;\n  let r179 = 0;\n  let r180 = 0;\n  let r181 = 0;\n  let r182 = 0;\n  let r183 = 0;\n  let r184 = 0;\n  let r185 = 0;\n  let r186 = 0;\n  let r187 = 0;\n  let r188 = 0;\n  let r189 = 0;\n  let r190 = 0;\n  let r191 = 0;\n  let r192 = 0;\n  let r193 = 0;\n  let r194 = 0;\n  let r195 = 0;\n  let r196 = 0;\n  let r197 = 0;\n  let r198 = 0;\n  let r199 = 0;\n  let r200 = 0;\n  let r201 = 0;\n  let r202 = 0;\n  let r203 = 0;\n  let r204 = 0;\n  let r205 = 0;\n  let r206 = 0;\n  let r207 = 0;\n  let r208 = 0;\n  let r209 = 0;\n  let r210 = 0;\n  let r211 = 0;\n  let r212 = 0;\n  let r213 = 0;\n  let r214 = 0;\n  let r215 = 0;\n  let r216 = 0;\n  let r217 = 0;\n  let r218 = 0;\n  let r219 = 0;\n  let r220 = 0;\n  let r221 = 0;\n  let r222 = 0;\n  let r223 = 0;\n  let r224 = 0;\n  let r225 = 0;\n  let r226 = 0;\n  let r227 = 0;\n  let r228 = 0;\n  let r229 = 0;\n  let r230 = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r1 = 0;\n  let r2 = 0;\n  let r3 = 0;\n  let r4 = 0;\n  let r5 = 0;\n  let r6 = 0;\n  let r7 = 0;\n  let r8 = 0;\n  let r9 = 0;\n  let r10 = 0;\n  let r11 = 0;\n  let r12 = 0;\n  let r13 = 0;\n  let r14 = 0;\n  let r15 = 0;\n  let r16 = 0;\n  let r17 = 0;\n  let r18 = 0;\n  let r19 = 0;\n  let r20 = 0;\n  let r21 = 0;\n  let r22 = 0;\n  let r23 = 0;\n  let r24 = 0;\n  let r25 = 0;\n  let r26 = 0;\n  let r27 = 0;\n  let r28 = 0;\n  let r29 = 0;\n  let r30 = 0;\n  let r31 = 0;\n  let r32 = 0;\n  let r33 = 0;\n  let r34 = 0;\n  let r35", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/9", "prompt": "/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rolLingmax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rolLingmax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rolLingmax", "gc": "<|endoftext|>/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rolLingmax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rolLingmax = (numbers) => {\n  const maxes = numbers.reduce((acc, curr) => {\n    if (curr > acc) {\n      return curr;\n    }\n    return acc;\n  }, 0);\n  return numbers.map(number => {\n    return number > maxes? number : maxes;\n  });\n};\n\n/* From a given list of integers, generate a list of rolling minimum element found until given moment\n  in the sequence.\n  >>> rolLingmin([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 4, 2, 1, 2, 3]\n  */\nconst rolLingmin = (numbers) => {\n  const mins = numbers.reduce((acc, curr) => {\n    if (curr < acc) {\n      return curr;\n    }\n    return acc;\n  }, 0);\n  return numbers.map(number => {\n    return number < mins? number : mins;\n  });\n};\n\n/* From a given list of integers, generate a list of rolling mean element found until given moment\n  in the sequence.\n  >>> rolLingmean([1, 2, 3, 2, 3, 4, 2])\n  [1.666666666666667, 2.666666666666667, 3.666666666666667, 4.666666666666667, 5.666666666666667, 6.666666666666667, 7.666666666666667, 8.666666666666667, 9.666666666666667]\n  */\nconst rolLingmean = (numbers) => {\n  const means = numbers.reduce((acc, curr) => {\n    if (curr < acc) {\n      return curr;\n    }\n    return acc;\n  }, 0);\n  return numbers.map(number => {\n    return number > means? number : means;\n  });\n};\n\n/* From a given list of integers, generate a list of rolling standard deviation element found until given moment\n  in the sequence.\n  >>> rolLingstd([1, 2, 3, 2, 3, 4, 2])\n  [1.666666666666667, 2.666666666666667, 3.666666666666667, 4.666666666666667, 5.666666666666667, 6.666666666666667, 7.666666666666667, 8.666666666666667, 9.666666666666667]\n  */\nconst rolLingstd = (numbers) => {\n  const stds = numbers.reduce((acc, curr) => {\n    if (curr < acc) {\n      return curr;\n    }\n    return acc;\n  }, 0);\n  return numbers.map(number => {\n    return number > stds? number : stds;\n  });\n};\n\n/* From a given list of integers, generate a list of rolling variance element found until given moment\n  in the sequence.\n  >>> rolLingvar([1, 2, 3, 2, 3, 4, 2])\n  [1.666666666666667, 2.666666666666667, 3.666666666666667, 4.666666666666667, 5.666666666666667, 6.666666666666667, 7.666666666666667, 8.666666666666667, 9.666666666666667]\n  */\nconst rolLingvar = (numbers) => {\n  const vars = numbers.reduce((acc, curr) => {\n    if (curr < acc) {\n      return curr;\n    }\n    return acc;\n  }, 0);\n  return numbers.map(number => {\n    return number > vars? number : vars;\n  });\n};\n\n/* From a given list of integers, generate a list of rolling skewness element found until given moment\n  in the sequence.\n  >>> rolLingskew([1, 2, 3, 2, 3, 4, 2])\n  [1.666666666666667, 2.666666666666667, 3.666666666666667, 4.666666666666667, 5.666666666666667, 6.666666666666667, 7.666666666666667, 8.666666666666667, 9.666666666666667]\n  */\nconst rolLingskew = (numbers) => {\n  const skews = numbers.reduce((acc, curr) => {\n    if (curr < acc) {\n      return curr;\n    }\n    return acc;\n  }, 0);\n  return numbers.map(number => {\n    return number > skews? number : skews;\n  });\n};\n\n/* From a given list of integers, generate a list of rolling kurtosis element found until given moment\n  in the sequence.\n  >>> rolLingkurtosis([1, 2, 3, 2, 3, 4, 2])\n  [1.666666666666667, 2.666666666666667, 3.666666666666667, 4.666666666666667, 5.666666666666667, 6.666666666666667, 7.666666666666667, 8.666666666666667, 9.666666666666667]\n  */\nconst rolLingkurtosis = (numbers) => {\n  const kurtosis = numbers.reduce((acc, curr) => {\n    if (curr < acc) {\n      return curr;\n    }\n    return acc;\n  }, 0);\n  return numbers.map(number => {\n    return number > kurtosis? number : kurtosis;\n  });\n};\n\n/* From a given list of integers, generate a list of rolling skewness element found until given moment\n  in the sequence.\n  >>> rolLingskewness([1, 2, 3, 2, 3, 4, 2])\n  [1.666666666666667, 2.666666666666667, 3.666666666666667, 4.666666666666667, 5.666666666666667, 6.666666666666667, 7.666666666666667, 8.666666666666667, 9.666666666666667]\n  */\nconst rolLingskewness = (numbers) => {\n  const skewness = numbers.reduce((acc, curr) => {\n    if (curr < acc) {\n      return curr;\n    }\n    return acc;\n  }, 0);\n  return numbers.map(number => {\n    return number > skewness? number : skewness;\n  });\n};\n\n/* From a given list of integers, generate a list of rolling kurtosis element found until given moment\n  in the sequence.\n  >>> rolLingkurtosis([1, 2, 3, 2, 3, 4, 2])\n  [1.666666666666667, 2.666666666666667, 3.666666666666667, 4.666666666666667, 5.666666666666667, 6.666666666666667, 7.666666666666667, 8.666666666666667, 9.666666666666667]\n  */\nconst rolLingkurtosis = (numbers) => {\n  const kurtosis = numbers.reduce((acc, curr) => {\n    if (curr < acc) {\n      return curr;\n    }\n    return acc;\n  }, 0);\n  return numbers.map(number => {\n    return number > kurtosis? number : kurtosis;\n  });\n};\n\n/* From a given list of integers, generate a list of rolling skewness element found until given moment\n  in the sequence.\n  >>> rolLingskewness([1, 2, 3, 2, 3, 4, 2])\n  [1.666666666666667, 2.666666666666667, 3.666666666666667, 4.666666666666667, 5.666666666666667, 6.666666666666667, 7.666666666666667, 8.666666666666667, 9.666666666666667]\n  */\nconst rolLingskewness = (numbers) => {\n  const skewness = numbers.reduce((acc, curr) => {\n    if (curr < acc) {\n      return curr;\n    }\n    return acc;\n  }, 0);\n  return numbers.map(number => {\n    return number > skewness? number : skewness;\n  });\n};\n\n/* From a given list of integers, generate a list of rolling kurtosis element found until given moment\n  in the sequence.\n  >>> rolLingkurtosis([1, 2, 3, 2, 3, 4, 2])\n  [1.666666666666667, 2.666666666666667, 3.666666666666667, 4.666666666666667, 5.666666666666667, 6.666666666666667, 7.666666666666667, 8.666666666666667, 9.666666666666667]\n  */\nconst rolLingkurtosis = (numbers) => {\n  const kurtosis = numbers.reduce((acc, curr) => {\n    if (curr < acc) {\n      return curr;\n    }\n    return acc;\n  }, 0);\n  return numbers.map(number => {\n    return number > kurtosis? number : kurtosis;\n  });\n};\n\n/* From a given list of integers, ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/90", "prompt": "/*\n  You are given a list of integers.\n  Write a function nexTSmaLlest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nexTSmaLlest([1, 2, 3, 4, 5]) == 2\n  nexTSmaLlest([5, 1, 4, 3, 2]) == 2\n  nexTSmaLlest([]) == null\n  nexTSmaLlest([1, 1]) == null\n  */\nconst nexTSmaLlest = (lst) => {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nexTSmaLlest", "gc": "<|endoftext|>/*\n  You are given a list of integers.\n  Write a function nexTSmaLlest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nexTSmaLlest([1, 2, 3, 4, 5]) == 2\n  nexTSmaLlest([5, 1, 4, 3, 2]) == 2\n  nexTSmaLlest([]) == null\n  nexTSmaLlest([1, 1]) == null\n  */\nconst nexTSmaLlest = (lst) => {\n  let minVal = lst[0];\n  let minIndex = -1;\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < minVal) {\n      minVal = lst[i];\n      minIndex = i;\n    }\n  }\n  return minIndex;\n};\n\n/*\n  You are given a list of integers.\n  Write a function nextSmallest() that returns the 1st smallest element of the list.\n  Return null if there is no such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 1\n  nextSmallest([5, 1, 4, 3, 2]) == 1\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nconst nextSmallest = (lst) => {\n  let minVal = lst[0];\n  let minIndex = -1;\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < minVal) {\n      minVal = lst[i];\n      minIndex = i;\n    }\n  }\n  return minIndex;\n};\n\n/*\n  You are given a list of integers.\n  Write a function nextSmallest() that returns the 1st smallest element of the list.\n  Return null if there is no such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 1\n  nextSmallest([5, 1, 4, 3, 2]) == 1\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nconst nextSmallest = (lst) => {\n  let minVal = lst[0];\n  let minIndex = -1;\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < minVal) {\n      minVal = lst[i];\n      minIndex = i;\n    }\n  }\n  return minIndex;\n};\n\n/*\n  You are given a list of integers.\n  Write a function nextSmallest() that returns the 1st smallest element of the list.\n  Return null if there is no such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 1\n  nextSmallest([5, 1, 4, 3, 2]) == 1\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nconst nextSmallest = (lst) => {\n  let minVal = lst[0];\n  let minIndex = -1;\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < minVal) {\n      minVal = lst[i];\n      minIndex = i;\n    }\n  }\n  return minIndex;\n};\n\n/*\n  You are given a list of integers.\n  Write a function nextSmallest() that returns the 1st smallest element of the list.\n  Return null if there is no such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 1\n  nextSmallest([5, 1, 4, 3, 2]) == 1\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nconst nextSmallest = (lst) => {\n  let minVal = lst[0];\n  let minIndex = -1;\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < minVal) {\n      minVal = lst[i];\n      minIndex = i;\n    }\n  }\n  return minIndex;\n};\n\n/*\n  You are given a list of integers.\n  Write a function nextSmallest() that returns the 1st smallest element of the list.\n  Return null if there is no such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 1\n  nextSmallest([5, 1, 4, 3, 2]) == 1\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nconst nextSmallest = (lst) => {\n  let minVal = lst[0];\n  let minIndex = -1;\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < minVal) {\n      minVal = lst[i];\n      minIndex = i;\n    }\n  }\n  return minIndex;\n};\n\n/*\n  You are given a list of integers.\n  Write a function nextSmallest() that returns the 1st smallest element of the list.\n  Return null if there is no such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 1\n  nextSmallest([5, 1, 4, 3, 2]) == 1\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nconst nextSmallest = (lst) => {\n  let minVal = lst[0];\n  let minIndex = -1;\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < minVal) {\n      minVal = lst[i];\n      minIndex = i;\n    }\n  }\n  return minIndex;\n};\n\n/*\n  You are given a list of integers.\n  Write a function nextSmallest() that returns the 1st smallest element of the list.\n  Return null if there is no such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 1\n  nextSmallest([5, 1, 4, 3, 2]) == 1\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nconst nextSmallest = (lst) => {\n  let minVal = lst[0];\n  let minIndex = -1;\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < minVal) {\n      minVal = lst[i];\n      minIndex = i;\n    }\n  }\n  return minIndex;\n};\n\n/*\n  You are given a list of integers.\n  Write a function nextSmallest() that returns the 1st smallest element of the list.\n  Return null if there is no such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 1\n  nextSmallest([5, 1, 4, 3, 2]) == 1\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nconst nextSmallest = (lst) => {\n  let minVal = lst[0];\n  let minIndex = -1;\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < minVal) {\n      minVal = lst[i];\n      minIndex = i;\n    }\n  }\n  return minIndex;\n};\n\n/*\n  You are given a list of integers.\n  Write a function nextSmallest() that returns the 1st smallest element of the list.\n  Return null if there is no such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 1\n  nextSmallest([5, 1, 4, 3, 2]) == 1\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nconst nextSmallest = (lst) => {\n  let minVal = lst[0];\n  let minIndex = -1;\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < minVal) {\n      minVal = lst[i];\n      minIndex = i;\n    }\n  }\n  return minIndex;\n};\n\n/*\n  You are given a list of integers.\n  Write a function nextSmallest() that returns the 1st smallest element of the list.\n  Return null if there is no such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 1\n  nextSmallest([5, 1, 4, 3, 2]) == 1\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nconst nextSmallest = (lst) => {\n  let minVal = lst[0];\n  let minIndex = -1;\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < minVal) {\n      minVal = lst[i];\n      minIndex = i;\n    }\n  }\n  return minIndex;\n};\n\n/*\n  You are given ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBOred(\"Hello world\")\n  0\n  >>> isBOred(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBOred = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBOred", "gc": "<|endoftext|>/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBOred(\"Hello world\")\n  0\n  >>> isBOred(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBOred = (S) => {\n  let bored = 0;\n  S.split('.').forEach((word) => {\n    if (word === 'I') {\n      bored++;\n    }\n  });\n  return bored;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of common words. A common word is a word that occurs at least once in\n  the sentence.\n \n  For example:\n  >>> commonWords(\"Hello world\")\n  2\n  >>> commonWords(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst commonWords = (S) => {\n  let commonWords = 0;\n  S.split(' ').forEach((word) => {\n    if (S.includes(word)) {\n      commonWords++;\n    }\n  });\n  return commonWords;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of common words. A common word is a word that occurs at least once in\n  the sentence.\n \n  For example:\n  >>> commonWords(\"Hello world\")\n  2\n  >>> commonWords(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst commonWords2 = (S) => {\n  let commonWords = 0;\n  S.split(' ').forEach((word) => {\n    if (S.includes(word)) {\n      commonWords++;\n    }\n  });\n  return commonWords;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of common words. A common word is a word that occurs at least once in\n  the sentence.\n \n  For example:\n  >>> commonWords(\"Hello world\")\n  2\n  >>> commonWords(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst commonWords3 = (S) => {\n  let commonWords = 0;\n  S.split(' ').forEach((word) => {\n    if (S.includes(word)) {\n      commonWords++;\n    }\n  });\n  return commonWords;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of common words. A common word is a word that occurs at least once in\n  the sentence.\n \n  For example:\n  >>> commonWords(\"Hello world\")\n  2\n  >>> commonWords(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst commonWords4 = (S) => {\n  let commonWords = 0;\n  S.split(' ').forEach((word) => {\n    if (S.includes(word)) {\n      commonWords++;\n    }\n  });\n  return commonWords;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of common words. A common word is a word that occurs at least once in\n  the sentence.\n \n  For example:\n  >>> commonWords(\"Hello world\")\n  2\n  >>> commonWords(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst commonWords5 = (S) => {\n  let commonWords = 0;\n  S.split(' ').forEach((word) => {\n    if (S.includes(word)) {\n      commonWords++;\n    }\n  });\n  return commonWords;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of common words. A common word is a word that occurs at least once in\n  the sentence.\n \n  For example:\n  >>> commonWords(\"Hello world\")\n  2\n  >>> commonWords(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst commonWords6 = (S) => {\n  let commonWords = 0;\n  S.split(' ').forEach((word) => {\n    if (S.includes(word)) {\n      commonWords++;\n    }\n  });\n  return commonWords;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of common words. A common word is a word that occurs at least once in\n  the sentence.\n \n  For example:\n  >>> commonWords(\"Hello world\")\n  2\n  >>> commonWords(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst commonWords7 = (S) => {\n  let commonWords = 0;\n  S.split(' ').forEach((word) => {\n    if (S.includes(word)) {\n      commonWords++;\n    }\n  });\n  return commonWords;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of common words. A common word is a word that occurs at least once in\n  the sentence.\n \n  For example:\n  >>> commonWords(\"Hello world\")\n  2\n  >>> commonWords(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst commonWords8 = (S) => {\n  let commonWords = 0;\n  S.split(' ').forEach((word) => {\n    if (S.includes(word)) {\n      commonWords++;\n    }\n  });\n  return commonWords;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of common words. A common word is a word that occurs at least once in\n  the sentence.\n \n  For example:\n  >>> commonWords(\"Hello world\")\n  2\n  >>> commonWords(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst commonWords9 = (S) => {\n  let commonWords = 0;\n  S.split(' ').forEach((word) => {\n    if (S.includes(word)) {\n      commonWords++;\n    }\n  });\n  return commonWords;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of common words. A common word is a word that occurs at least once in\n  the sentence.\n \n  For example:\n  >>> commonWords(\"Hello world\")\n  2\n  >>> commonWords(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst commonWords10 = (S) => {\n  let commonWords = 0;\n  S.split(' ').forEach((word) => {\n    if (S.includes(word)) {\n      commonWords++;\n    }\n  });\n  return commonWords;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of common words. A common word is a word that occurs at least once in\n  the sentence.\n \n  For example:\n  >>> commonWords(\"Hello world\")\n  2\n  >>> commonWords(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst commonWords11 = (S) => {\n  let commonWords = 0;\n  S.split(' ').forEach((word) => {\n    if (S.includes(word", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/92", "prompt": "/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyint(5, 2, 7) ➞ true\n  anyint(3, 2, 2) ➞ false\n  anyint(3, -2, 1) ➞ true\n  anyint(3.6, -2.2, 2) ➞ false\n  */\nconst anyint = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyint", "gc": "<|endoftext|>/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyint(5, 2, 7) ➞ true\n  anyint(3, 2, 2) ➞ false\n  anyint(3, -2, 1) ➞ true\n  anyint(3.6, -2.2, 2) ➞ false\n  */\nconst anyint = (x, y, z) => {\n  if (x === y && x === z) {\n    return true\n  }\n  return false\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if all numbers are equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  allint(5, 2, 7) ➞ true\n  allint(3, 2, 2) ➞ false\n  allint(3, -2, 1) ➞ true\n  allint(3.6, -2.2, 2) ➞ false\n  */\nconst allint = (x, y, z) => {\n  if (x === y && x === z) {\n    return true\n  }\n  if (x === 0 || y === 0 || z === 0) {\n    return false\n  }\n  return true\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if all numbers are equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  allint2(5, 2, 7) ➞ true\n  allint2(3, 2, 2) ➞ false\n  allint2(3, -2, 1) ➞ true\n  allint2(3.6, -2.2, 2) ➞ false\n  */\nconst allint2 = (x, y, z) => {\n  if (x === y && x === z) {\n    return true\n  }\n  if (x === 0 || y === 0 || z === 0) {\n    return false\n  }\n  return true\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if all numbers are equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  allint3(5, 2, 7) ➞ true\n  allint3(3, 2, 2) ➞ false\n  allint3(3, -2, 1) ➞ true\n  allint3(3.6, -2.2, 2) ➞ false\n  */\nconst allint3 = (x, y, z) => {\n  if (x === y && x === z) {\n    return true\n  }\n  if (x === 0 || y === 0 || z === 0) {\n    return false\n  }\n  return true\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if all numbers are equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  allint4(5, 2, 7) ➞ true\n  allint4(3, -2, 1) ➞ true\n  allint4(3.6, -2.2, 2) ➞ false\n  */\nconst allint4 = (x, y, z) => {\n  if (x === y && x === z) {\n    return true\n  }\n  if (x === 0 || y === 0 || z === 0) {\n    return false\n  }\n  return true\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if all numbers are equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  allint5(5.5, 2, 7) ➞ true\n  allint5(3, -2, 1) ➞ true\n  allint5(3.6, -2.2, 2) ➞ false\n  */\nconst allint5 = (x, y, z) => {\n  if (x === y && x === z) {\n    return true\n  }\n  if (x === 0 || y === 0 || z === 0) {\n    return false\n  }\n  return true\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if all numbers are equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  allint6(5.5, 2, 7) ➞ true\n  allint6(3, -2, 1) ➞ true\n  allint6(3.6, -2.2, 2) ➞ false\n  */\nconst allint6 = (x, y, z) => {\n  if (x === y && x === z) {\n    return true\n  }\n  if (x === 0 || y === 0 || z === 0) {\n    return false\n  }\n  return true\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if all numbers are equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  allint7(5.5, 2, 7) ➞ true\n  allint7(3, -2, 1) ➞ true\n  allint7(3.6, -2.2, 2) ➞ false\n  */\nconst allint7 = (x, y, z) => {\n  if (x === y && x === z) {\n    return true\n  }\n  if (x === 0 || y === 0 || z === 0) {\n    return false\n  }\n  return true\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if all numbers are equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  allint8(5.5, 2, 7) ➞ true\n  allint8(3, -2, 1) ➞ true\n  allint8(3.6, -2.2, 2) ➞ false\n  */\nconst allint8 = (x, y, z) => {\n  if (x === y && x === z) {\n    return true\n  }\n  if (x === 0 || y === 0 || z === 0) {\n    return false\n  }\n  return true\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if all numbers are equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  allint9(5.5, 2, 7) ➞ true\n  allint9(3, -2, 1) ➞ true\n  allint9(3.6, -2.2, 2) ➞ false\n  */\nconst allint9 = (x, y, z) => {\n  if (x === y && x === z) {\n    return true\n  }\n  if (x === 0 || y === 0 || z === 0) {\n    return false\n  }\n  return true\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if all numbers are equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  allint10(5.5, 2, 7) ➞ true\n  allint10(3, -2, 1) ➞ true\n  allint10(3.6, -2.2, 2) ➞ false\n  */\nconst allint10 = (x, y, z) => {\n  if (x === y && x === z) {\n    return true\n  }\n  if (x === 0 || y === 0 || z === 0) {\n    return false\n  }\n  return true\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if all numbers are equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  allint11(5.5, 2, 7) ➞ true\n  allint11(3, -2, 1) ➞ true\n  allint11(3.6, -2.2, 2) ➞ false\n  */\nconst allint11 = (x, y, z) => {\n  if (x === y && x === z) {\n    return true\n  }\n  if (x === 0 || y === 0 || z === 0) {\n    return false\n  }\n  return true\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if all numbers are equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  allint12(5.5, 2, 7) ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that takes a message, and encOdes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encOde('test')\n  'TGST'\n  >>> encOde('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encOde = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encOde", "gc": "<|endoftext|>/*\n  Write a function that takes a message, and encOdes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encOde('test')\n  'TGST'\n  >>> encOde('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encOde = (message) => {\n  let newMessage = '';\n  let vowels = 'aeiouAEIOU';\n  let vowelsLength = vowels.length;\n  let messageLength = message.length;\n  let i;\n  let j;\n  let k;\n  let temp;\n  let temp2;\n  let temp3;\n  let temp4;\n  let temp5;\n  let temp6;\n  let temp7;\n  let temp8;\n  let temp9;\n  let temp10;\n  let temp11;\n  let temp12;\n  let temp13;\n  let temp14;\n  let temp15;\n  let temp16;\n  let temp17;\n  let temp18;\n  let temp19;\n  let temp20;\n  let temp21;\n  let temp22;\n  let temp23;\n  let temp24;\n  let temp25;\n  let temp26;\n  let temp27;\n  let temp28;\n  let temp29;\n  let temp30;\n  let temp31;\n  let temp32;\n  let temp33;\n  let temp34;\n  let temp35;\n  let temp36;\n  let temp37;\n  let temp38;\n  let temp39;\n  let temp40;\n  let temp41;\n  let temp42;\n  let temp43;\n  let temp44;\n  let temp45;\n  let temp46;\n  let temp47;\n  let temp48;\n  let temp49;\n  let temp50;\n  let temp51;\n  let temp52;\n  let temp53;\n  let temp54;\n  let temp55;\n  let temp56;\n  let temp57;\n  let temp58;\n  let temp59;\n  let temp60;\n  let temp61;\n  let temp62;\n  let temp63;\n  let temp64;\n  let temp65;\n  let temp66;\n  let temp67;\n  let temp68;\n  let temp69;\n  let temp70;\n  let temp71;\n  let temp72;\n  let temp73;\n  let temp74;\n  let temp75;\n  let temp76;\n  let temp77;\n  let temp78;\n  let temp79;\n  let temp80;\n  let temp81;\n  let temp82;\n  let temp83;\n  let temp84;\n  let temp85;\n  let temp86;\n  let temp87;\n  let temp88;\n  let temp89;\n  let temp90;\n  let temp91;\n  let temp92;\n  let temp93;\n  let temp94;\n  let temp95;\n  let temp96;\n  let temp97;\n  let temp98;\n  let temp99;\n  let temp100;\n  let temp101;\n  let temp102;\n  let temp103;\n  let temp104;\n  let temp105;\n  let temp106;\n  let temp107;\n  let temp108;\n  let temp109;\n  let temp110;\n  let temp111;\n  let temp112;\n  let temp113;\n  let temp114;\n  let temp115;\n  let temp116;\n  let temp117;\n  let temp118;\n  let temp119;\n  let temp120;\n  let temp121;\n  let temp122;\n  let temp123;\n  let temp124;\n  let temp125;\n  let temp126;\n  let temp127;\n  let temp128;\n  let temp129;\n  let temp130;\n  let temp131;\n  let temp132;\n  let temp133;\n  let temp134;\n  let temp135;\n  let temp136;\n  let temp137;\n  let temp138;\n  let temp139;\n  let temp140;\n  let temp141;\n  let temp142;\n  let temp143;\n  let temp144;\n  let temp145;\n  let temp146;\n  let temp147;\n  let temp148;\n  let temp149;\n  let temp150;\n  let temp151;\n  let temp152;\n  let temp153;\n  let temp154;\n  let temp155;\n  let temp156;\n  let temp157;\n  let temp158;\n  let temp159;\n  let temp160;\n  let temp161;\n  let temp162;\n  let temp163;\n  let temp164;\n  let temp165;\n  let temp166;\n  let temp167;\n  let temp168;\n  let temp169;\n  let temp170;\n  let temp171;\n  let temp172;\n  let temp173;\n  let temp174;\n  let temp175;\n  let temp176;\n  let temp177;\n  let temp178;\n  let temp179;\n  let temp180;\n  let temp181;\n  let temp182;\n  let temp183;\n  let temp184;\n  let temp185;\n  let temp186;\n  let temp187;\n  let temp188;\n  let temp189;\n  let temp190;\n  let temp191;\n  let temp192;\n  let temp193;\n  let temp194;\n  let temp195;\n  let temp196;\n  let temp197;\n  let temp198;\n  let temp199;\n  let temp200;\n  let temp201;\n  let temp202;\n  let temp203;\n  let temp204;\n  let temp205;\n  let temp206;\n  let temp207;\n  let temp208;\n  let temp209;\n  let temp210;\n  let temp211;\n  let temp212;\n  let temp213;\n  let temp214;\n  let temp215;\n  let temp216;\n  let temp217;\n  let temp218;\n  let temp219;\n  let temp220;\n  let temp221;\n  let temp222;\n  let temp223;\n  let temp224;\n  let temp225;\n  let temp226;\n  let temp227;\n  let temp228;\n  let temp229;\n  let temp230;\n  let temp231;\n  let temp232;\n  let temp233;\n  let temp234;\n  let temp235;\n  let temp236;\n  let temp237;\n  let temp238;\n  let temp239;\n  let temp240;\n  let temp241;\n  let temp242;\n  let temp243;\n  let temp244;\n  let temp245;\n  let temp246;\n  let temp247;\n  let temp248;\n  let temp249;\n  let temp250;\n  let temp251;\n  let temp252;\n  let temp253;\n  let temp254;\n  let temp255;\n  let temp256;\n  let temp257;\n  let temp258;\n  let temp259;\n  let temp260;\n  let temp261;\n  let temp262;\n  let temp263;\n  let temp264;\n  let temp265;\n  let temp266;\n  let temp267;\n  let temp268;\n  let temp269;\n  let temp270;\n  let temp271;\n  let temp272;\n  let temp273;\n  let temp274;\n  let temp275;\n  let temp276;\n  let temp277;\n  let temp278;\n  let temp279;\n  let temp280;\n  let temp281;\n  let temp282;\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/94", "prompt": "/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjKasdKd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjKasdKd", "gc": "<|endoftext|>/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjKasdKd = (lst) => {\n  let max = 0;\n  let sum = 0;\n  let isPrime = true;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  if (isPrime) {\n    for (let i = 0; i < lst.length; i++) {\n      if (lst[i] % 2 === 0) {\n        continue;\n      }\n      if (lst[i] > max) {\n        max = lst[i];\n      }\n    }\n    for (let i = 0; i < lst.length; i++) {\n      if (lst[i] % 2 === 0) {\n        continue;\n      }\n      if (lst[i] > max) {\n        max = lst[i];\n      }\n    }\n    for (let i = 0; i < lst.length; i++) {\n      if (lst[i] % 2 === 0) {\n        continue;\n      }\n      if (lst[i] > max) {\n        max = lst[i];\n      }\n    }\n    for (let i = 0; i < lst.length; i++) {\n      if (lst[i] % 2 === 0) {\n        continue;\n      }\n      if (lst[i] > max) {\n        max = lst[i];\n      }\n    }\n    for (let i = 0; i < lst.length; i++) {\n      if (lst[i] % 2 === 0) {\n        continue;\n      }\n      if (lst[i] > max) {\n        max = lst[i];\n      }\n    }\n    for (let i = 0; i < lst.length; i++) {\n      if (lst[i] % 2 === 0) {\n        continue;\n      }\n      if (lst[i] > max) {\n        max = lst[i];\n      }\n    }\n    for (let i = 0; i < lst.length; i++) {\n      if (lst[i] % 2 === 0) {\n        continue;\n      }\n      if (lst[i] > max) {\n        max = lst[i];\n      }\n    }\n    for (let i = 0; i < lst.length; i++) {\n      if (lst[i] % 2 === 0) {\n        continue;\n      }\n      if (lst[i] > max) {\n        max = lst[i];\n      }\n    }\n    for (let i = 0; i < lst.length; i++) {\n      if (lst[i] % 2 === 0) {\n        continue;\n      }\n      if (lst[i] > max) {\n        max = lst[i];\n      }\n    }\n    for (let i = 0; i < lst.length; i++) {\n      if (lst[i] % 2 === 0) {\n        continue;\n      }\n      if (lst[i] > max) {\n        max = lst[i];\n      }\n    }\n    for (let i = 0; i < lst.length; i++) {\n      if (lst[i] % 2 === 0) {\n        continue;\n      }\n      if (lst[i] > max) {\n        max = lst[i];\n      }\n    }\n    for (let i = 0; i < lst.length; i++) {\n      if (lst[i] % 2 === 0) {\n        continue;\n      }\n      if (lst[i] > max) {\n        max = lst[i];\n      }\n    }\n    for (let i = 0; i < lst.length; i++) {\n      if (lst[i] % 2 === 0) {\n        continue;\n      }\n      if (lst[i] > max) {\n        max = lst[i];\n      }\n    }\n    for (let i = 0; i < lst.length; i++) {\n      if (lst[i] % 2 === 0) {\n        continue;\n      }\n      if (lst[i] > max) {\n        max = lst[i];\n      }\n    }\n    for (let i = 0; i < lst.length; i++) {\n      if (lst[i] % 2 === 0) {\n        continue;\n      }\n      if (lst[i] > max) {\n        max = lst[i];\n      }\n    }\n    for (let i = 0; i < lst.length; i++) {\n      if (lst[i] % 2 === 0) {\n        continue;\n      }\n      if (lst[i] > max) {\n        max = lst[i];\n      }\n    }\n    for (let i = 0; i < lst.length; i++) {\n      if (lst[i] % 2 === 0) {\n        continue;\n      }\n      if (lst[i] > max) {\n        max = lst[i];\n      }\n    }\n    for (let i = 0; i < lst.length; i++) {\n      if (lst[i] % 2 === 0) {\n        continue;\n      }\n      if (lst[i] > max) {\n        max = lst[i];\n      }\n    }\n    for (let i = 0; i < lst.length; i++) {\n      if (lst[i] % 2 === 0) {\n        continue;\n      }\n      if (lst[i] > max) {\n        max = lst[i];\n      }\n    }\n    for (let i = 0; i < lst.length; i++) {\n      if (lst[i] % 2 === 0) {\n        continue;\n      }\n      if (lst[i] > max) {\n        max = lst[i];\n      }\n    }\n    for (let i = 0; i < lst.length; i++) {\n      if (lst[i] % 2 === 0) {\n        continue;\n      }\n      if (lst[i] > max) {\n        max = lst[i];\n      }\n    }\n    for (let i = 0; i < lst.length; i++) {\n      if (lst[i] % 2 === 0) {\n        continue;\n      }\n      if (lst[i] > max) {\n        max = lst[i];\n      }\n    }\n    for (let i = 0; i < lst.length; i++) {\n      if (lst[i] % 2 === 0) {\n        continue;\n      }\n      if (lst[i] > max) {\n        max = lst[i];\n      }\n    }\n    for (let i = 0; i < lst.length; i++) {\n      if (lst[i] % 2 === 0) {\n        continue;\n      }\n      if (lst[i] > max) {\n        max = lst[i];\n      }\n    }\n    for (let i = 0; i < lst.length; i++) {\n      if (lst[i] % 2 === 0) {\n        continue;\n      }\n      if (lst[i] > max) {\n        max = lst[i];\n      }\n    }\n    for (let i = 0; i < lst.length; i++) {\n      if (lst[i] % 2 === 0) {\n        continue;\n      }\n      if (lst[i] > max) {\n        max = lst[i];\n      }\n    }\n    for (let i = 0; i < lst.length; i++) {\n      if (lst[i] % 2 === 0) {\n        continue;\n      }\n      if (lst[i] > max) {\n        max = lst[i];\n      }\n    }\n    for (let i = 0; i < lst.length; i++) {\n      if (lst[i] % 2 === 0) {\n        continue;\n      }\n      if (lst[i] > max) {\n        max = lst[i];\n      }\n    }\n    for (let i = 0; i < lst.length; i++) {\n      if (lst[i] % 2 === 0) {\n        continue;\n      }\n      if (lst[i] > max) {\n        max = lst[i];\n      }\n    }\n    for (let i = 0; i < lst.length; i++) {\n      if (lst[i] % 2 === 0) {\n        continue;\n      }\n      if (lst[i] > max) {\n        max = lst[i];\n      }\n    }\n    for (let i = 0; i < lst.length; i++) {\n      if (lst[i] % 2 === 0) {\n        continue;\n      }\n      if (lst[i] > max) {\n        max = lst[i];\n      }\n    }\n    for (let i = 0; i < lst.length; i++) {\n      if (lst[i] % 2 === 0) {\n        continue;\n      }\n      if (lst[i] > max) {\n        max = lst[i];\n      }\n    }\n    for (let i = 0; i < lst.length; i++) {\n      if (lst[i] % 2 === 0) {\n        continue;\n      }\n      if (lst[i] > max) {\n        max = lst[i];\n      }\n    }\n    for (let i = 0; i < lst.length; i++) {\n      if (lst[i] % 2 === 0) {\n        continue;\n      }\n      if (lst[i] > max) {\n        max = lst[i];\n      }\n    }\n    for (let i = 0; i < lst.length; i++) {\n      if (lst[i] % 2 === 0) {\n        continue;\n      }\n      if (lst[i] > max) {\n        max = lst[i];\n      }\n    }\n    for (let i = 0; i < lst.length; i++) {\n      if (lst[i] % 2 === 0) {\n        continue;\n      }\n      if (lst[i] > max) {\n        max = lst[i];\n      }\n    }\n    for (let i = 0; i < lst.length; i++) {\n      if (lst[i] % 2 === 0) {\n        continue;\n      }\n      if (lst[i] > max) {\n        max = lst[i];\n      }\n    }\n    for (let i = 0; i < lst.length; i++) {\n      if (lst[i] % 2 === 0) {\n        continue;\n      }\n      if (lst[i] > max) {\n        max = lst[i];\n      }\n    }\n    for (let i = 0; i < lst.length; i++) {\n      if (lst[i] % 2 === 0) {\n        continue;\n      }\n      if (lst[i] > max", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  cheCkDiCtCasE({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  cheCkDiCtCasE({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  cheCkDiCtCasE({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  cheCkDiCtCasE({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  cheCkDiCtCasE({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst cheCkDiCtCasE = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "cheCkDiCtCasE", "gc": "<|endoftext|>/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  cheCkDiCtCasE({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  cheCkDiCtCasE({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  cheCkDiCtCasE({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  cheCkDiCtCasE({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  cheCkDiCtCasE({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst cheCkDiCtCasE = (dict) => {\n  const keys = Object.keys(dict);\n  let allKeysAreStrings = false;\n  keys.forEach((key) => {\n    if (dict[key] instanceof String) {\n      allKeysAreStrings = true;\n    }\n  });\n  return allKeysAreStrings;\n};\n\n/*\n  Given a dictionary, return true if all keys are numbers in lower \n  case or all keys are numbers in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  cheCkDiCtCasE({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  cheCkDiCtCasE({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  cheCkDiCtCasE({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  cheCkDiCtCasE({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  cheCkDiCtCasE({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst cheCkDiCtCasE = (dict) => {\n  const keys = Object.keys(dict);\n  let allKeysAreNumbers = false;\n  keys.forEach((key) => {\n    if (dict[key] instanceof Number) {\n      allKeysAreNumbers = true;\n    }\n  });\n  return allKeysAreNumbers;\n};\n\n/*\n  Given a dictionary, return true if all keys are booleans in lower \n  case or all keys are booleans in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  cheCkDiCtCasE({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  cheCkDiCtCasE({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  cheCkDiCtCasE({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  cheCkDiCtCasE({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  cheCkDiCtCasE({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst cheCkDiCtCasE = (dict) => {\n  const keys = Object.keys(dict);\n  let allKeysAreBooleans = false;\n  keys.forEach((key) => {\n    if (dict[key] instanceof Boolean) {\n      allKeysAreBooleans = true;\n    }\n  });\n  return allKeysAreBooleans;\n};\n\n/*\n  Given a dictionary, return true if all keys are arrays in lower \n  case or all keys are arrays in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  cheCkDiCtCasE({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  cheCkDiCtCasE({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  cheCkDiCtCasE({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  cheCkDiCtCasE({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  cheCkDiCtCasE({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst cheCkDiCtCasE = (dict) => {\n  const keys = Object.keys(dict);\n  let allKeysAreArrays = false;\n  keys.forEach((key) => {\n    if (dict[key] instanceof Array) {\n      allKeysAreArrays = true;\n    }\n  });\n  return allKeysAreArrays;\n};\n\n/*\n  Given a dictionary, return true if all keys are objects in lower \n  case or all keys are objects in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  cheCkDiCtCasE({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  cheCkDiCtCasE({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  cheCkDiCtCasE({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  cheCkDiCtCasE({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  cheCkDiCtCasE({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst cheCkDiCtCasE = (dict) => {\n  const keys = Object.keys(dict);\n  let allKeysAreObjects = false;\n  keys.forEach((key) => {\n    if (dict[key] instanceof Object) {\n      allKeysAreObjects = true;\n    }\n  });\n  return allKeysAreObjects;\n};\n\n/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  cheCkDiCtCasE({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  cheCkDiCtCasE({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  cheCkDiCtCasE({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  cheCkDiCtCasE({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  cheCkDiCtCasE({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst cheCkDiCtCasE = (dict) => {\n  const keys = Object.keys(dict);\n  let allKeysAreStrings = false;\n  keys.forEach((key) => {\n    if (dict[key] instanceof String) {\n      allKeysAreStrings = true;\n    }\n  });\n  return allKeysAreStrings;\n};\n\n/*\n  Given a dictionary, return true if all keys are numbers in lower \n  case or all keys are numbers in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  cheCkDiCtCasE({\"a\":\"apple\", \"b\":\"banana\"}) ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  couNtUpto(5) => [2,3]\n  couNtUpto(11) => [2,3,5,7]\n  couNtUpto(0) => []\n  couNtUpto(20) => [2,3,5,7,11,13,17,19]\n  couNtUpto(1) => []\n  couNtUpto(18) => [2,3,5,7,11,13,17]\n  */\nconst couNtUpto = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "couNtUpto", "gc": "<|endoftext|>/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  couNtUpto(5) => [2,3]\n  couNtUpto(11) => [2,3,5,7]\n  couNtUpto(0) => []\n  couNtUpto(20) => [2,3,5,7,11,13,17,19]\n  couNtUpto(1) => []\n  couNtUpto(18) => [2,3,5,7,11,13,17]\n  */\nconst couNtUpto = (n) => {\n  let primes = [];\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      primes.push(i);\n      i++;\n    }\n  }\n  return primes;\n};\n\n/*Implement a function that takes an integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  couNtDownto(5) => [2,3]\n  couNtDownto(11) => [2,3,5,7]\n  couNtDownto(0) => []\n  couNtDownto(20) => [2,3,5,7,11,13,17,19]\n  couNtDownto(1) => []\n  couNtDownto(18) => [2,3,5,7,11,13,17]\n  */\nconst couNtDownto = (n) => {\n  let primes = [];\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      primes.push(i);\n      i++;\n    }\n  }\n  return primes;\n};\n\n/*Implement a function that takes an integer and returns an array of the first n\n  integers that are prime numbers and greater than n.\n  for example:\n  couNtUpto(5) => [2,3]\n  couNtUpto(11) => [2,3,5,7]\n  couNtUpto(0) => []\n  couNtUpto(20) => [2,3,5,7,11,13,17,19]\n  couNtUpto(1) => []\n  couNtUpto(18) => [2,3,5,7,11,13,17]\n  */\nconst couNtUpto = (n) => {\n  let primes = [];\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      primes.push(i);\n      i++;\n    }\n  }\n  return primes;\n};\n\n/*Implement a function that takes an integer and returns an array of the first n\n  integers that are prime numbers and greater than n.\n  for example:\n  couNtDownto(5) => [2,3]\n  couNtDownto(11) => [2,3,5,7]\n  couNtDownto(0) => []\n  couNtDownto(20) => [2,3,5,7,11,13,17,19]\n  couNtDownto(1) => []\n  couNtDownto(18) => [2,3,5,7,11,13,17]\n  */\nconst couNtDownto = (n) => {\n  let primes = [];\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      primes.push(i);\n      i++;\n    }\n  }\n  return primes;\n};\n\n/*Implement a function that takes an integer and returns an array of the first n\n  integers that are prime numbers and greater than n.\n  for example:\n  couNtUpto(5) => [2,3]\n  couNtUpto(11) => [2,3,5,7]\n  couNtUpto(0) => []\n  couNtUpto(20) => [2,3,5,7,11,13,17,19]\n  couNtUpto(1) => []\n  couNtUpto(18) => [2,3,5,7,11,13,17]\n  */\nconst couNtUpto = (n) => {\n  let primes = [];\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      primes.push(i);\n      i++;\n    }\n  }\n  return primes;\n};\n\n/*Implement a function that takes an integer and returns an array of the first n\n  integers that are prime numbers and greater than n.\n  for example:\n  couNtDownto(5) => [2,3]\n  couNtDownto(11) => [2,3,5,7]\n  couNtDownto(0) => []\n  couNtDownto(20) => [2,3,5,7,11,13,17,19]\n  couNtDownto(1) => []\n  couNtDownto(18) => [2,3,5,7,11,13,17]\n  */\nconst couNtDownto = (n) => {\n  let primes = [];\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      primes.push(i);\n      i++;\n    }\n  }\n  return primes;\n};\n\n/*Implement a function that takes an integer and returns an array of the first n\n  integers that are prime numbers and greater than n.\n  for example:\n  couNtUpto(5) => [2,3]\n  couNtUpto(11) => [2,3,5,7]\n  couNtUpto(0) => []\n  couNtUpto(20) => [2,3,5,7,11,13,17,19]\n  couNtUpto(1) => []\n  couNtUpto(18) => [2,3,5,7,11,13,17]\n  */\nconst couNtUpto = (n) => {\n  let primes = [];\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      primes.push(i);\n      i++;\n    }\n  }\n  return primes;\n};\n\n/*Implement a function that takes an integer and returns an array of the first n\n  integers that are prime numbers and greater than n.\n  for example:\n  couNtDownto(5) => [2,3]\n  couNtDownto(11) => [2,3,5,7]\n  couNtDownto(0) => []\n  couNtDownto(20) => [2,3,5,7,11,13,17,19]\n  couNtDownto(1) => []\n  couNtDownto(18) => [2,3,5,7,11,13,17]\n  */\nconst couNtDownto = (n) => {\n  let primes = [];\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      primes.push(i);\n      i++;\n    }\n  }\n  return primes;\n};\n\n/*Implement a function that takes an integer and returns an array of the first n\n  integers that are prime numbers and greater than n.\n  for example:\n  couNtUpto(5) => [2,3]\n  couNtUpto(11) => [2,3,5,7]\n  couNtUpto(0) => []\n  couNtUpto(20) => [2,3,5,7,11,13,17,19]\n  couNtUpto(1) => []\n  couNtUpto(18) => [2,3,5,7,11,13,17]\n  */\nconst couNtUpto = (n) => {\n  let primes = [];\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      primes.push(i);\n      i++;\n    }\n  }\n  return primes;\n};\n\n/*Implement a function that takes an integer and returns an array of the first n\n  integers that are prime numbers and greater than n.\n  for example:\n  couNtDownto(5) => [2,3]\n  couNtDownto(11) => [2,3,5,7]\n  couNtDownto(0) => []\n  cou", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  mulTiplY(148, 412) should return 16.\n  mulTiplY(19, 28) should return 72.\n  mulTiplY(2020, 1851) should return 0.\n  mulTiplY(14,-15) should return 20.\n  */\nconst mulTiplY = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "mulTiplY", "gc": "<|endoftext|>/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  mulTiplY(148, 412) should return 16.\n  mulTiplY(19, 28) should return 72.\n  mulTiplY(2020, 1851) should return 0.\n  mulTiplY(14,-15) should return 20.\n  */\nconst mulTiplY = (a, b) => {\n  let result = 0;\n  \n  for(let i = a; i >= 0; i--) {\n    result = result * 10 + b;\n  }\n  \n  return result;\n}\n\n/*Complete the function that takes two integers and returns \n  the product of their binary digits.\n  Assume the input is always valid.\n  Examples:\n  mulBinary(148, 412) should return 16.\n  mulBinary(19, 28) should return 72.\n  mulBinary(2020, 1851) should return 0.\n  mulBinary(14,-15) should return 20.\n  */\nconst mulBinary = (a, b) => {\n  let result = 0;\n  \n  for(let i = a; i >= 0; i--) {\n    result = result * 2 + b;\n  }\n  \n  return result;\n}\n\n/*Complete the function that takes two integers and returns \n  the sum of their decimal digits.\n  Assume the input is always valid.\n  Examples:\n  addDecimal(148, 412) should return 16.\n  addDecimal(19, 28) should return 72.\n  addDecimal(2020, 1851) should return 0.\n  addDecimal(14,-15) should return 20.\n  */\nconst addDecimal = (a, b) => {\n  let result = 0;\n  \n  for(let i = a; i >= 0; i--) {\n    result = result + Number(b);\n  }\n  \n  return result;\n}\n\n/*Complete the function that takes two integers and returns \n  the sum of their binary digits.\n  Assume the input is always valid.\n  Examples:\n  addBinary(148, 412) should return 16.\n  addBinary(19, 28) should return 72.\n  addBinary(2020, 1851) should return 0.\n  addBinary(14,-15) should return 20.\n  */\nconst addBinary = (a, b) => {\n  let result = 0;\n  \n  for(let i = a; i >= 0; i--) {\n    result = result + Number(b);\n  }\n  \n  return result;\n}\n\n/*Complete the function that takes two integers and returns \n  the sum of their decimal digits.\n  Assume the input is always valid.\n  Examples:\n  addDecimal(148, 412) should return 16.\n  addDecimal(19, 28) should return 72.\n  addDecimal(2020, 1851) should return 0.\n  addDecimal(14,-15) should return 20.\n  */\nconst addDecimal = (a, b) => {\n  let result = 0;\n  \n  for(let i = a; i >= 0; i--) {\n    result = result + Number(b);\n  }\n  \n  return result;\n}\n\n/*Complete the function that takes two integers and returns \n  the sum of their binary digits.\n  Assume the input is always valid.\n  Examples:\n  addBinary(148, 412) should return 16.\n  addBinary(19, 28) should return 72.\n  addBinary(2020, 1851) should return 0.\n  addBinary(14,-15) should return 20.\n  */\nconst addBinary = (a, b) => {\n  let result = 0;\n  \n  for(let i = a; i >= 0; i--) {\n    result = result + Number(b);\n  }\n  \n  return result;\n}\n\n/*Complete the function that takes two integers and returns \n  the sum of their decimal digits.\n  Assume the input is always valid.\n  Examples:\n  addDecimal(148, 412) should return 16.\n  addDecimal(19, 28) should return 72.\n  addDecimal(2020, 1851) should return 0.\n  addDecimal(14,-15) should return 20.\n  */\nconst addDecimal = (a, b) => {\n  let result = 0;\n  \n  for(let i = a; i >= 0; i--) {\n    result = result + Number(b);\n  }\n  \n  return result;\n}\n\n/*Complete the function that takes two integers and returns \n  the sum of their binary digits.\n  Assume the input is always valid.\n  Examples:\n  addBinary(148, 412) should return 16.\n  addBinary(19, 28) should return 72.\n  addBinary(2020, 1851) should return 0.\n  addBinary(14,-15) should return 20.\n  */\nconst addBinary = (a, b) => {\n  let result = 0;\n  \n  for(let i = a; i >= 0; i--) {\n    result = result + Number(b);\n  }\n  \n  return result;\n}\n\n/*Complete the function that takes two integers and returns \n  the sum of their decimal digits.\n  Assume the input is always valid.\n  Examples:\n  addDecimal(148, 412) should return 16.\n  addDecimal(19, 28) should return 72.\n  addDecimal(2020, 1851) should return 0.\n  addDecimal(14,-15) should return 20.\n  */\nconst addDecimal = (a, b) => {\n  let result = 0;\n  \n  for(let i = a; i >= 0; i--) {\n    result = result + Number(b);\n  }\n  \n  return result;\n}\n\n/*Complete the function that takes two integers and returns \n  the sum of their binary digits.\n  Assume the input is always valid.\n  Examples:\n  addBinary(148, 412) should return 16.\n  addBinary(19, 28) should return 72.\n  addBinary(2020, 1851) should return 0.\n  addBinary(14,-15) should return 20.\n  */\nconst addBinary = (a, b) => {\n  let result = 0;\n  \n  for(let i = a; i >= 0; i--) {\n    result = result + Number(b);\n  }\n  \n  return result;\n}\n\n/*Complete the function that takes two integers and returns \n  the sum of their decimal digits.\n  Assume the input is always valid.\n  Examples:\n  addDecimal(148, 412) should return 16.\n  addDecimal(19, 28) should return 72.\n  addDecimal(2020, 1851) should return 0.\n  addDecimal(14,-15) should return 20.\n  */\nconst addDecimal = (a, b) => {\n  let result = 0;\n  \n  for(let i = a; i >= 0; i--) {\n    result = result + Number(b);\n  }\n  \n  return result;\n}\n\n/*Complete the function that takes two integers and returns \n  the sum of their binary digits.\n  Assume the input is always valid.\n  Examples:\n  addBinary(148, 412) should return 16.\n  addBinary(19, 28) should return 72.\n  addBinary(2020, 1851) should return 0.\n  addBinary(14,-15) should return 20.\n  */\nconst addBinary = (a, b) => {\n  let result = 0;\n  \n  for(let i = a; i >= 0; i--) {\n    result = result + Number(b);\n  }\n  \n  return result;\n}\n\n/*Complete the function that takes two integers and returns \n  the sum of their decimal digits.\n  Assume the input is always valid.\n  Examples:\n  addDecimal(148, 412) should return 16.\n  addDecimal(19, 28) should return 72.\n  addDecimal(2020, 1851) should return 0.\n  addDecimal(14,-15) should return 20.\n  */\nconst addDecimal = (a, b) => {\n  let result = 0;\n  \n  for(let i = a; i >= 0; i--) {\n    result = result + Number(b);\n  }\n  \n  return result;\n}\n\n/*Complete the function that ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 3}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  couNtUpPer('aBCdEf') returns 1\n  couNtUpPer('abcdefg') returns 0\n  couNtUpPer('dBBE') returns 0\n  */\nconst couNtUpPer = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "couNtUpPer", "gc": "<|endoftext|>/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  couNtUpPer('aBCdEf') returns 1\n  couNtUpPer('abcdefg') returns 0\n  couNtUpPer('dBBE') returns 0\n  */\nconst couNtUpPer = (s) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = s.split('');\n  for (let i = 0; i < m.length; i++) {\n    if (m[i] === 'a' || m[i] === 'e' || m[i] === 'i' || m[i] === 'o' || m[i] === 'u') {\n      count++;\n    }\n  }\n  for (let j = 0; j < m.length; j++) {\n    if (m[j] === 'A' || m[j] === 'E' || m[j] === 'I' || m[j] === 'O' || m[j] === 'U') {\n      count++;\n    }\n  }\n  for (let k = 0; k < m.length; k++) {\n    if (m[k] === 'a' || m[k] === 'e' || m[k] === 'i' || m[k] === 'o' || m[k] === 'u') {\n      count++;\n    }\n  }\n  for (let l = 0; l < m.length; l++) {\n    if (m[l] === 'A' || m[l] === 'E' || m[l] === 'I' || m[l] === 'O' || m[l] === 'U') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of lowercase vowels in even indices.\n  \n  For example:\n  couNtLowPer('aBCdEf') returns 1\n  couNtLowPer('abcdefg') returns 0\n  couNtLowPer('dBBE') returns 0\n  */\nconst couNtLowPer = (s) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = s.split('');\n  for (let i = 0; i < m.length; i++) {\n    if (m[i] === 'a' || m[i] === 'e' || m[i] === 'i' || m[i] === 'o' || m[i] === 'u') {\n      count++;\n    }\n  }\n  for (let j = 0; j < m.length; j++) {\n    if (m[j] === 'A' || m[j] === 'E' || m[j] === 'I' || m[j] === 'O' || m[j] === 'U') {\n      count++;\n    }\n  }\n  for (let k = 0; k < m.length; k++) {\n    if (m[k] === 'a' || m[k] === 'e' || m[k] === 'i' || m[k] === 'o' || m[k] === 'u') {\n      count++;\n    }\n  }\n  for (let l = 0; l < m.length; l++) {\n    if (m[l] === 'A' || m[l] === 'E' || m[l] === 'I' || m[l] === 'O' || m[l] === 'U') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of uppercase vowels in odd indices.\n  \n  For example:\n  couNtUpOdd('aBCdEf') returns 1\n  couNtUpOdd('abcdefg') returns 0\n  couNtUpOdd('dBBE') returns 0\n  */\nconst couNtUpOdd = (s) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = s.split('');\n  for (let i = 0; i < m.length; i++) {\n    if (m[i] === 'a' || m[i] === 'e' || m[i] === 'i' || m[i] === 'o' || m[i] === 'u') {\n      count++;\n    }\n  }\n  for (let j = 0; j < m.length; j++) {\n    if (m[j] === 'A' || m[j] === 'E' || m[j] === 'I' || m[j] === 'O' || m[j] === 'U') {\n      count++;\n    }\n  }\n  for (let k = 0; k < m.length; k++) {\n    if (m[k] === 'a' || m[k] === 'e' || m[k] === 'i' || m[k] === 'o' || m[k] === 'u') {\n      count++;\n    }\n  }\n  for (let l = 0; l < m.length; l++) {\n    if (m[l] === 'A' || m[l] === 'E' || m[l] === 'I' || m[l] === 'O' || m[l] === 'U') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of lowercase vowels in odd indices.\n  \n  For example:\n  couNtLowOdd('aBCdEf') returns 1\n  couNtLowOdd('abcdefg') returns 0\n  couNtLowOdd('dBBE') returns 0\n  */\nconst couNtLowOdd = (s) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = s.split('');\n  for (let i = 0; i < m.length; i++) {\n    if (m[i] === 'a' || m[i] === 'e' || m[i] === 'i' || m[i] === 'o' || m[i] === 'u') {\n      count++;\n    }\n  }\n  for (let j = 0; j < m.length; j++) {\n    if (m[j] === 'A' || m[j] === 'E' || m[j] === 'I' || m[j] === 'O' || m[j] === 'U') {\n      count++;\n    }\n  }\n  for (let k = 0; k < m.length; k++) {\n    if (m[k] === 'a' || m[k] === 'e' || m[k] === 'i' || m[k] === 'o' || m[k] === 'u') {\n      count++;\n    }\n  }\n  for (let l = 0; l < m.length; l++) {\n    if (m[l] === 'A' || m[l] === 'E' || m[l] === 'I' || m[l] === 'O' || m[l] === 'U') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  couNtUpOdd('aBCdEf') returns 1\n  couNtUpOdd('abcdefg') returns 0\n  couNtUpOdd('dBBE') returns 0\n  */\nconst couNtUpOddEven = (s) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = s.split('');\n  for (let i = 0; i < m.length; i++) {\n    if (m[i] === 'a' || m[i] === 'e' || m[i] === 'i' || m[i] === 'o' || m[i] === 'u') {\n      count++;\n    }\n  }\n  for (let j = 0; j < m.length; j++) {\n    if (m[j] === 'A' || m[j] === 'E' || m[j] === 'I' || m[j] === 'O' || m[j] === 'U') {\n      count++;\n    }\n  }\n  for (let k = 0; k < m.length; k++) {\n    if (m[k] === 'a' || m[k] === 'e' || m[k] === 'i' || m[k] === 'o' || m[k] === 'u') {\n      count++;\n    }\n  }\n  for (let l = 0; l < m.length; l++) {\n    if (m[l] === 'A' || m[l] === 'E' || m[l] === 'I' || m[l] === 'O' || m[l] === 'U') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of lowercase vowels in even indices.\n  \n  For example:\n  couNtLowOdd('aBCdEf') returns 1\n  couNt", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/99", "prompt": "/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> cloSestintegEr(\"10\")\n  10\n  >>> cloSestintegEr(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example cloSestintegEr(\"14.5\") should\n  return 15 and cloSestintegEr(\"-14.5\") should return -15.\n  */\nconst cloSestintegEr = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "cloSestintegEr", "gc": "<|endoftext|>/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> cloSestintegEr(\"10\")\n  10\n  >>> cloSestintegEr(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example cloSestintegEr(\"14.5\") should\n  return 15 and cloSestintegEr(\"-14.5\") should return -15.\n  */\nconst cloSestintegEr = (value) => {\n  let num;\n  let num2;\n  let num3;\n  let num4;\n  let num5;\n  let num6;\n  let num7;\n  let num8;\n  let num9;\n  let num10;\n  let num11;\n  let num12;\n  let num13;\n  let num14;\n  let num15;\n  let num16;\n  let num17;\n  let num18;\n  let num19;\n  let num20;\n  let num21;\n  let num22;\n  let num23;\n  let num24;\n  let num25;\n  let num26;\n  let num27;\n  let num28;\n  let num29;\n  let num30;\n  let num31;\n  let num32;\n  let num33;\n  let num34;\n  let num35;\n  let num36;\n  let num37;\n  let num38;\n  let num39;\n  let num40;\n  let num41;\n  let num42;\n  let num43;\n  let num44;\n  let num45;\n  let num46;\n  let num47;\n  let num48;\n  let num49;\n  let num50;\n  let num51;\n  let num52;\n  let num53;\n  let num54;\n  let num55;\n  let num56;\n  let num57;\n  let num58;\n  let num59;\n  let num60;\n  let num61;\n  let num62;\n  let num63;\n  let num64;\n  let num65;\n  let num66;\n  let num67;\n  let num68;\n  let num69;\n  let num70;\n  let num71;\n  let num72;\n  let num73;\n  let num74;\n  let num75;\n  let num76;\n  let num77;\n  let num78;\n  let num79;\n  let num80;\n  let num81;\n  let num82;\n  let num83;\n  let num84;\n  let num85;\n  let num86;\n  let num87;\n  let num88;\n  let num89;\n  let num90;\n  let num91;\n  let num92;\n  let num93;\n  let num94;\n  let num95;\n  let num96;\n  let num97;\n  let num98;\n  let num99;\n  let num100;\n  let num101;\n  let num102;\n  let num103;\n  let num104;\n  let num105;\n  let num106;\n  let num107;\n  let num108;\n  let num109;\n  let num110;\n  let num111;\n  let num112;\n  let num113;\n  let num114;\n  let num115;\n  let num116;\n  let num117;\n  let num118;\n  let num119;\n  let num120;\n  let num121;\n  let num122;\n  let num123;\n  let num124;\n  let num125;\n  let num126;\n  let num127;\n  let num128;\n  let num129;\n  let num130;\n  let num131;\n  let num132;\n  let num133;\n  let num134;\n  let num135;\n  let num136;\n  let num137;\n  let num138;\n  let num139;\n  let num140;\n  let num141;\n  let num142;\n  let num143;\n  let num144;\n  let num145;\n  let num146;\n  let num147;\n  let num148;\n  let num149;\n  let num150;\n  let num151;\n  let num152;\n  let num153;\n  let num154;\n  let num155;\n  let num156;\n  let num157;\n  let num158;\n  let num159;\n  let num160;\n  let num161;\n  let num162;\n  let num163;\n  let num164;\n  let num165;\n  let num166;\n  let num167;\n  let num168;\n  let num169;\n  let num170;\n  let num171;\n  let num172;\n  let num173;\n  let num174;\n  let num175;\n  let num176;\n  let num177;\n  let num178;\n  let num179;\n  let num180;\n  let num181;\n  let num182;\n  let num183;\n  let num184;\n  let num185;\n  let num186;\n  let num187;\n  let num188;\n  let num189;\n  let num190;\n  let num191;\n  let num192;\n  let num193;\n  let num194;\n  let num195;\n  let num196;\n  let num197;\n  let num198;\n  let num199;\n  let num200;\n  let num201;\n  let num202;\n  let num203;\n  let num204;\n  let num205;\n  let num206;\n  let num207;\n  let num208;\n  let num209;\n  let num210;\n  let num211;\n  let num212;\n  let num213;\n  let num214;\n  let num215;\n  let num216;\n  let num217;\n  let num218;\n  let num219;\n  let num220;\n  let num221;\n  let num222;\n  let num223;\n  let num224;\n  let num225;\n  let num226;\n  let num227;\n  let num228;\n  let num229;\n  let num230;\n  let num231;\n  let num232;\n  let num233;\n  let num234;\n  let num235;\n  let num236;\n  let num237;\n  let num238;\n  let num239;\n  let num240;\n  let num241;\n  let num242;\n  let num243;\n  let num244;\n  let num245;\n  let num246;\n  let num247;\n  let num248;\n  let num249;\n  let num250;\n  let num251;\n  let num252;\n  let num253;\n  let num254;\n  let num255;\n  let num256;\n  let num257;\n  let num258;\n  let num259;\n  let num260;\n  let num261;\n  let num262;\n  let num263;\n  let num264;\n  let num265;\n  let num266;\n  let num267;\n  let num268;\n  let num269;\n  let num270;\n  let num271;\n  let num272;\n  let num273;\n  let num274;\n  let num275;\n  let num276;\n  let num277;\n  let num278;\n  let num279;\n  let num280;\n  let num281;\n  let num282;\n  let ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
