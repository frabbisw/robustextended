{"task_id": "JavaScript/0", "prompt": "/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hasCloselEements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloselEements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloselEements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloselEements", "gc": "<|endoftext|>/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hasCloselEements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloselEements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloselEements = (numbers, threshold) => {\n  return numbers.some((number) => Math.abs(number - threshold) < Number.EPSILON);\n};\n\n/**\n * Check if given number is in given list of numbers.\n * If given number is in list of numbers, return true.\n * If given number is not in list of numbers, return false.\n * If given number is in list of numbers, but not in list of numbers, return false.\n * If given number is in list of numbers, but not in list of numbers, return true.\n * If given number is in list of numbers, but not in list of numbers, return false.\n * If given number is in list of numbers, but not in list of numbers, return false.\n * If given number is in list of numbers, but not in list of numbers, return false.\n * If given number is in list of numbers, but not in list of numbers, return false.\n * If given number is in list of numbers, but not in list of numbers, return false.\n * If given number is in list of numbers, but not in list of numbers, return false.\n * If given number is in list of numbers, but not in list of numbers, return false.\n * If given number is in list of numbers, but not in list of numbers, return false.\n * If given number is in list of numbers, but not in list of numbers, return false.\n * If given number is in list of numbers, but not in list of numbers, return false.\n * If given number is in list of numbers, but not in list of numbers, return false.\n * If given number is in list of numbers, but not in list of numbers, return false.\n * If given number is in list of numbers, but not in list of numbers, return false.\n * If given number is in list of numbers, but not in list of numbers, return false.\n * If given number is in list of numbers, but not in list of numbers, return false.\n * If given number is in list of numbers, but not in list of numbers, return false.\n * If given number is in list of numbers, but not in list of numbers, return false.\n * If given number is in list of numbers, but not in list of numbers, return false.\n * If given number is in list of numbers, but not in list of numbers, return false.\n * If given number is in list of numbers, but not in list of numbers, return false.\n * If given number is in list of numbers, but not in list of numbers, return false.\n * If given number is in list of numbers, but not in list of numbers, return false.\n * If given number is in list of numbers, but not in list of numbers, return false.\n * If given number is in list of numbers, but not in list of numbers, return false.\n * If given number is in list of numbers, but not in list of numbers, return false.\n * If given number is in list of numbers, but not in list of numbers, return false.\n * If given number is in list of numbers, but not in list of numbers, return false.\n * If given number is in list of numbers, but not in list of numbers, return false.\n * If given number is in list of numbers, but not in list of numbers, return false.\n * If given number is in list of numbers, but not in list of numbers, return false.\n * If given number is in list of numbers, but not in list of numbers, return false.\n * If given number is in list of numbers, but not in list of numbers, return false.\n * If given number is in list of numbers, but not in list of numbers, return false.\n * If given number is in list of numbers, but not in list of numbers, return false.\n * If given number is in list of numbers, but not in list of numbers, return false.\n * If given number is in list of numbers, but not in list of numbers, return false.\n * If given number is in list of numbers, but not in list of numbers, return false.\n * If given number is in list of numbers, but not in list of numbers, return false.\n * If given number is in list of numbers, but not in list of numbers, return false.\n * If given number is in list of numbers, but not in list of numbers, return false.\n * If given number is in list of numbers, but not in list of numbers, return false.\n * If given number is in list of numbers, but not in list of numbers, return false.\n * If given number is in list of numbers, but not in list of numbers, return false.\n * If given number is in list of numbers, but not in list of numbers, return false.\n * If given number is in list of numbers, but not in list of numbers, return false.\n * If given number is in list of numbers, but not in list of numbers, return false.\n * If given number is in list of numbers, but not in list of numbers, return false.\n * If given number is in list of numbers, but not in list of numbers, return false.\n * If given number is in list of numbers, but not in list of numbers, return false.\n * If given number is in list of numbers, but not in list of numbers, return false.\n * If given number is in list of numbers, but not in list of numbers, return false.\n * If given number is in list of numbers, but not in list of numbers, return false.\n * If given number is in list of numbers, but not in list of numbers, return false.\n * If given number is in list of numbers, but not in list of numbers, return false.\n * If given number is in list of numbers, but not in list of numbers, return false.\n * If given number is in list of numbers, but not in list of numbers, return false.\n * If given number is in list of numbers, but not in list of numbers, return false.\n * If given number is in list of numbers, but not in list of numbers, return false.\n * If given number is in list of numbers, but not in list of numbers, return false.\n * If given number is in list of numbers, but not in list of numbers, return false.\n * If given number is in list of numbers, but not in list of numbers, return false.\n * If given number is in list of numbers, but not in list of numbers, return false.\n * If given number is in list of numbers, but not in list of numbers, return false.\n * If given number is in list of numbers, but not in list of numbers, return false.\n * If given number is in list of numbers, but not in list of numbers, return false.\n * If given number is in list of numbers, but not in list of numbers, return false.\n * If given number is in list of numbers, but not in list of numbers, return false.\n * If given number is in list of numbers, but not in list of numbers, return false.\n * If given number is in list of numbers, but not in list of numbers, return false.\n * If given number is in list of numbers, but not in list of numbers, return false.\n * If given number is in list of numbers, but not in list of numbers, return false.\n * If given number is in list of numbers, but not in list of numbers, return false.\n * If given number is in list of numbers, but not in list of numbers, return false.\n * If given number is in list of numbers, but not in list of numbers, return false.\n * If given number is in list of numbers, but not in list of numbers, return false.\n * If given number is in list of numbers, but not in list of numbers, return false.\n * If given number is in list of numbers, but not in list of numbers, return false.\n * If given number is in list of numbers, but not in list of numbers, return false.\n * If given number is in list of numbers, but not in list of numbers, return false.\n * If given number is in list of numbers, but not in list of numbers, return false.\n * If given number is in list of numbers, but not in list of numbers, return false.\n * If given number is in list of numbers, but not in list of numbers, return false.\n * If given number is in list of numbers, but not in list of numbers, return false.\n * If given number is in list of numbers, but not in list of numbers, return false.\n * If given number is in list of numbers, but not in list of numbers, return false.\n * If given number is in list of numbers, but not in list of numbers, return false.\n * If given number is in list of numbers, but not in list of numbers, return false.\n * If given number is in list of numbers, but not in list of numbers, return false.\n * If given number is in list of numbers, but not in list of numbers, return false.\n * If given number is in list of numbers, but not in list of numbers, return false.\n * If given number is in list of numbers, but not in list of numbers, return false.\n * If given number is in list of numbers, but ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separateParenGrousp('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGrousp = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGrousp", "gc": "<|endoftext|>/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separateParenGrousp('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGrousp = (paren_string) => {\n  const paren_groups = paren_string.match(/\\(([^)]+)\\)/).map((group) => group.trim());\n  const paren_group_strings = paren_groups.map((group) => group.substring(1, group.length - 1));\n  return paren_group_strings;\n};\n\n/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separateParenGrousp('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGrousp2 = (paren_string) => {\n  const paren_groups = paren_string.match(/\\(([^)]+)\\)/).map((group) => group.trim());\n  const paren_group_strings = paren_groups.map((group) => group.substring(1, group.length - 1));\n  return paren_group_strings;\n};\n\n/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separateParenGrousp('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGrousp3 = (paren_string) => {\n  const paren_groups = paren_string.match(/\\(([^)]+)\\)/).map((group) => group.trim());\n  const paren_group_strings = paren_groups.map((group) => group.substring(1, group.length - 1));\n  return paren_group_strings;\n};\n\n/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separateParenGrousp('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGrousp4 = (paren_string) => {\n  const paren_groups = paren_string.match(/\\(([^)]+)\\)/).map((group) => group.trim());\n  const paren_group_strings = paren_groups.map((group) => group.substring(1, group.length - 1));\n  return paren_group_strings;\n};\n\n/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separateParenGrousp('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGrousp5 = (paren_string) => {\n  const paren_groups = paren_string.match(/\\(([^)]+)\\)/).map((group) => group.trim());\n  const paren_group_strings = paren_groups.map((group) => group.substring(1, group.length - 1));\n  return paren_group_strings;\n};\n\n/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separateParenGrousp('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGrousp6 = (paren_string) => {\n  const paren_groups = paren_string.match(/\\(([^)]+)\\)/).map((group) => group.trim());\n  const paren_group_strings = paren_groups.map((group) => group.substring(1, group.length - 1));\n  return paren_group_strings;\n};\n\n/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separateParenGrousp('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGrousp7 = (paren_string) => {\n  const paren_groups = paren_string.match(/\\(([^)]+)\\)/).map((group) => group.trim());\n  const paren_group_strings = paren_groups.map((group) => group.substring(1, group.length - 1));\n  return paren_group_strings;\n};\n\n/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separateParenGrousp('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGrousp8 = (paren_string) => {\n  const paren_groups = paren_string.match(/\\(([^)]+)\\)/).map((group) => group.trim());\n  const paren_group_strings = paren_groups.map((group) => group.substring(1, group.length - 1));\n  return paren_group_strings;\n};\n\n/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separateParenGrousp('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGrousp9 = (paren_string) => {\n  const paren_groups = paren_string.match(/\\(([^)]+)\\)/).map((group) => group.trim());\n  const paren_group_strings = paren_groups.map((group) => group.substring(1, group.length - 1));\n  return paren_group_strings;\n};\n\n/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separateParenGrousp('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGrousp10 = (paren_string) => {\n  const paren_groups = paren_string.match(/\\(([^)]+)\\)/).map((group) => group.", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "gc": "<|endoftext|>/* Test if gniven strig is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let longestPalindrome = '';\n  let longestPrefix = '';\n  let longestSuffix = '';\n  let longestPostfix = '';\n  let reversedString = '';\n  let prefix = '';\n  let suffix = '';\n  let postfix = string;\n\n  /* Find longest palindrome that begins with a supplied string */\n  while (postfix.length > 0) {\n    /* Find longest prefix of supplied string that is a palindrome */\n    if (isPalindrome(postfix)) {\n      longestPrefix = postfix;\n      longestPostfix = postfix;\n      longestSuffix = postfix;\n      longestPrefix = longestPrefix.split('').reverse().join('');\n      longestSuffix = longestSuffix.split('').reverse().join('');\n    }\n\n    /* Find longest suffix of supplied string that is a palindrome */\n    if (isPalindrome(longestPrefix)) {\n      longestSuffix = longestPrefix;\n      longestPrefix = longestPrefix.split('').reverse().join('');\n      longestSuffix = longestSuffix.split('').reverse().join('');\n    }\n\n    /* Find longest prefix of supplied string that is a palindrome */\n    if (isPalindrome(longestSuffix)) {\n      longestPrefix = longestSuffix;\n      longestSuffix = longestSuffix.split('').reverse().join('');\n      longestPrefix = longestPrefix.split('').reverse().join('');\n    }\n\n    /* Find longest suffix of supplied string that is a palindrome */\n    if (isPalindrome(longestPrefix)) {\n      longestSuffix = longestPrefix;\n      longestPrefix = longestPrefix.split('').reverse().join('');\n      longestSuffix = longestSuffix.split('').reverse().join('');\n    }\n\n    /* Find longest prefix of supplied string that is a palindrome */\n    if (isPalindrome(longestSuffix)) {\n      longestPrefix = longestSuffix;\n      longestSuffix = longestSuffix.split('').reverse().join('');\n      longestPrefix = longestPrefix.split('').reverse().join('');\n    }\n\n    /* Find longest suffix of supplied string that is a palindrome */\n    if (isPalindrome(longestPrefix)) {\n      longestSuffix = longestPrefix;\n      longestPrefix = longestPrefix.split('').reverse().join('');\n      longestSuffix = longestSuffix.split('').reverse().join('');\n    }\n\n    /* Find longest prefix of supplied string that is a palindrome */\n    if (isPalindrome(longestSuffix)) {\n      longestPrefix = longestSuffix;\n      longestSuffix = longestSuffix.split('').reverse().join('');\n      longestPrefix = longestPrefix.split('').reverse().join('');\n    }\n\n    /* Find longest suffix of supplied string that is a palindrome */\n    if (isPalindrome(longestPrefix)) {\n      longestSuffix = longestPrefix;\n      longestPrefix = longestPrefix.split('').reverse().join('');\n      longestSuffix = longestSuffix.split('').reverse().join('');\n    }\n\n    /* Find longest prefix of supplied string that is a palindrome */\n    if (isPalindrome(longestSuffix)) {\n      longestPrefix = longestSuffix;\n      longestSuffix = longestSuffix.split('').reverse().join('');\n      longestPrefix = longestPrefix.split('').reverse().join('');\n    }\n\n    /* Find longest suffix of supplied string that is a palindrome */\n    if (isPalindrome(longestPrefix)) {\n      longestSuffix = longestPrefix;\n      longestPrefix = longestPrefix.split('').reverse().join('');\n      longestSuffix = longestSuffix.split('').reverse().join('');\n    }\n\n    /* Find longest prefix of supplied string that is a palindrome */\n    if (isPalindrome(longestSuffix)) {\n      longestPrefix = longestSuffix;\n      longestSuffix = longestSuffix.split('').reverse().join('');\n      longestPrefix = longestPrefix.split('').reverse().join('');\n    }\n\n    /* Find longest suffix of supplied string that is a palindrome */\n    if (isPalindrome(longestPrefix)) {\n      longestSuffix = longestPrefix;\n      longestPrefix = longestPrefix.split('').reverse().join('');\n      longestSuffix = longestSuffix.split('').reverse().join('');\n    }\n\n    /* Find longest prefix of supplied string that is a palindrome */\n    if (isPalindrome(longestSuffix)) {\n      longestPrefix = longestSuffix;\n      longestSuffix = longestSuffix.split('').reverse().join('');\n      longestPrefix = longestPrefix.split('').reverse().join('');\n    }\n\n    /* Find longest suffix of supplied string that is a palindrome */\n    if (isPalindrome(longestPrefix)) {\n      longestSuffix = longestPrefix;\n      longestPrefix = longestPrefix.split('').reverse().join('');\n      longestSuffix = longestSuffix.split('').reverse().join('');\n    }\n\n    /* Find longest prefix of supplied string that is a palindrome */\n    if (isPalindrome(longestSuffix)) {\n      longestPrefix = longestSuffix;\n      longestSuffix = longestSuffix.split('').reverse().join('');\n      longestPrefix = longestPrefix.split('').reverse().join('');\n    }\n\n    /* Find longest suffix of supplied string that is a palindrome */\n    if (isPalindrome(longestPrefix)) {\n      longestSuffix = longestPrefix;\n      longestPrefix = longestPrefix.split('').reverse().join('');\n      longestSuffix = longestSuffix.split('').reverse().join('');\n    }\n\n    /* Find longest prefix of supplied string that is a palindrome */\n    if (isPalindrome(longestSuffix)) {\n      longestPrefix = longestSuffix;\n      longestSuffix = longestSuffix.split('').reverse().join('');\n      longestPrefix = longestPrefix.split('').reverse().join('');\n    }\n\n    /* Find longest suffix of supplied string that is a palindrome */\n    if (isPalindrome(longestPrefix)) {\n      longestSuffix = longestPrefix;\n      longestPrefix = longestPrefix.split('').reverse().join('');\n      longestSuffix = longestSuffix.split('').reverse().join('');\n    }\n\n    /* Find longest prefix of supplied string that is a palindrome */\n    if (isPalindrome(longestSuffix)) {\n      longestPrefix = longestSuffix;\n      longestSuffix = longestSuffix.split('').reverse().join('');\n      longestPrefix = longestPrefix.split('').reverse().join('');\n    }\n\n    /* Find longest suffix of supplied string that is a palindrome */\n    if (isPalindrome(longestPrefix)) {\n      longestSuffix = longestPrefix;\n      longestPrefix = longestPrefix.split('').reverse().join('');\n      longestSuffix = longestSuffix.split('').reverse().join('');\n    }\n\n    /* Find ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "gc": "<|endoftext|>/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const levels = [\n    [n, 0, 0],\n    [n, 0, 0],\n    [n, 0, 0],\n  ];\n  for (let i = 1; i < n; i++) {\n    const level = levels[i - 1];\n    level[0] += level[1];\n    level[1] += level[2];\n    level[2] += level[3];\n  }\n  return levels;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const levels = [\n    [n, 0, 0],\n    [n, 0, 0],\n    [n, 0, 0],\n  ];\n  for (let i = 1; i < n; i++) {\n    const level = levels[i - 1];\n    level[0] += level[1];\n    level[1] += level[2];\n    level[2] += level[3];\n  }\n  return levels;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const levels = [\n    [n, 0, 0],\n    [n, 0, 0],\n    [n, 0, 0],\n  ];\n  for (let i = 1; i < n; i++) {\n    const level = levels[i - 1];\n    level[0] += level[1];\n    level[1] += level[2];\n    level[2] += level[3];\n  }\n  return levels;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const levels = [\n    [n, 0, 0],\n    [n, 0, 0],\n    [n, 0, 0],\n  ];\n  for (let i = 1; i < n; i++) {\n    const level = levels[i - 1];\n    level[0] += level[1];\n    level[1] += level[2];\n    level[2] += level[3];\n  }\n  return levels;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const levels = [\n    [n, 0, 0],\n    [n, 0, 0],\n    [n, 0, 0],\n  ];\n  for (let i = 1; i < n; i++) {\n    const level = levels[i - 1];\n    level[0] += level[1];\n    level[1] += level[2];\n    level[2] += level[3];\n  }\n  return levels;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const levels = [\n    [n, 0, 0],\n    [n, 0, 0],\n    [n, 0, 0],\n  ];\n  for (let i = 1; i < n; i++) {\n    const level = levels[i - 1];\n    level[0] += level[1];\n    level[1] += level[2];\n    level[2] += level[3];\n  }\n  return levels;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const levels = [\n    [n, 0, 0],\n    [n, 0, 0],\n    [n, 0, 0],\n  ];\n  for (let i = 1; i < n; i++) {\n    const level = levels[i - 1];\n    level[0] += level[1];\n    level[1] += level[2];\n    level[2] += level[3];\n  }\n  return levels;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const levels = [\n    [n, 0, 0],\n    [n, 0, 0],\n    [n, 0, 0],\n  ];\n  for (let i = 1; i < n; i++) {\n    const level = levels[i - 1];\n    level[0] += level[1];\n    level[1] += level[2];\n    level[2] += level[3];\n  }\n  return levels;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const levels = [\n    [n, 0, 0],\n    [n, 0, 0],\n    [n, 0, 0],\n  ];\n  for (let i = 1; i < n; i++) {\n    const level = levels[i - 1];\n    level[0] += level[1];\n    level[1] += level[2];\n    level[2] += level[3];\n  }\n  return levels;\n};\n\n/*\n  Given a ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "gc": "<|endoftext|>/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(',').map(w => w.trim());\n  return words;\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(',').map(w => w.trim());\n  return words;\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(',').map(w => w.trim());\n  return words;\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(',').map(w => w.trim());\n  return words;\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(',').map(w => w.trim());\n  return words;\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(',').map(w => w.trim());\n  return words;\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(',').map(w => w.trim());\n  return words;\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(',').map(w => w.trim());\n  return words;\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(',').map(w => w.trim());\n  return words;\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(',').map(w => w.trim());\n  return words;\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(',').map(w => w.trim());\n  return words;\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(',').map(w => w.trim());\n  return words;\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(',').map(w => w.trim());\n  return words;\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/102", "prompt": "/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "gc": "<|endoftext|>/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x === 0 || y === 0) {\n    return -1;\n  }\n  let num;\n  if (x % 2 === 0) {\n    num = Math.floor(x / 2);\n  } else {\n    num = Math.floor(y / 2);\n  }\n  return num;\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest odd integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x === 0 || y === 0) {\n    return -1;\n  }\n  let num;\n  if (x % 2 === 0) {\n    num = Math.floor(x / 2);\n  } else {\n    num = Math.floor(y / 2);\n  }\n  return num;\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x === 0 || y === 0) {\n    return -1;\n  }\n  let num;\n  if (x % 2 === 0) {\n    num = Math.floor(x / 2);\n  } else {\n    num = Math.floor(y / 2);\n  }\n  return num;\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x === 0 || y === 0) {\n    return -1;\n  }\n  let num;\n  if (x % 2 === 0) {\n    num = Math.floor(x / 2);\n  } else {\n    num = Math.floor(y / 2);\n  }\n  return num;\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x === 0 || y === 0) {\n    return -1;\n  }\n  let num;\n  if (x % 2 === 0) {\n    num = Math.floor(x / 2);\n  } else {\n    num = Math.floor(y / 2);\n  }\n  return num;\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x === 0 || y === 0) {\n    return -1;\n  }\n  let num;\n  if (x % 2 === 0) {\n    num = Math.floor(x / 2);\n  } else {\n    num = Math.floor(y / 2);\n  }\n  return num;\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x === 0 || y === 0) {\n    return -1;\n  }\n  let num;\n  if (x % 2 === 0) {\n    num = Math.floor(x / 2);\n  } else {\n    num = Math.floor(y / 2);\n  }\n  return num;\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x === 0 || y === 0) {\n    return -1;\n  }\n  let num;\n  if (x % 2 === 0) {\n    num = Math.floor(x / 2);\n  } else {\n    num = Math.floor(y / 2);\n  }\n  return num;\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x === 0 || y === 0) {\n    return -1;\n  }\n  let num;\n  if (x % 2 === 0) {\n    num = Math.floor(x / 2);\n  } else {\n    num = Math.floor(y / 2);\n  }\n  return num;\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x === 0 || y === 0) {\n    return -1;\n  }\n  let num;\n  if (x % 2 === 0) {\n    num = Math.floor(x / 2);\n  } else {\n    num = Math.floor(y / 2);\n  }\n  return num;\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x === 0 || y === 0) {\n    return -1;\n  }\n  let num;\n  if (x % 2 === 0) {\n    num = Math.floor(x / 2);\n  } else {\n    num = Math.floor(y / 2);\n  }\n  return num;\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x === 0 || y === 0) {\n    return -1;\n  }\n  let num;\n  if (x % 2 === 0) {\n    num = Math.floor(x / 2);\n  } else {\n    num = Math.floor(y / 2);\n  }\n  return num;\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x === 0 || y === 0) {\n    return -1;\n  }\n  let num;\n  if (x % 2 === 0) {\n    num = Math.floor(x / 2);\n  } else {\n    num = Math.floor(y / 2);\n  }\n  return num;\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x === 0 || y === 0) {\n    return -1;\n  }\n  let num;\n  if (x % 2 === 0) {\n    num = Math.floor(x / 2);\n  } else {\n    num = Math.floor(y / 2);\n  }", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/103", "prompt": "/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "gc": "<|endoftext|>/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  let sum = 0;\n  let count = 0;\n  let binary = \"\";\n  let temp = 0;\n  let temp2 = 0;\n  let temp3 = 0;\n  let temp4 = 0;\n  let temp5 = 0;\n  let temp6 = 0;\n  let temp7 = 0;\n  let temp8 = 0;\n  let temp9 = 0;\n  let temp10 = 0;\n  let temp11 = 0;\n  let temp12 = 0;\n  let temp13 = 0;\n  let temp14 = 0;\n  let temp15 = 0;\n  let temp16 = 0;\n  let temp17 = 0;\n  let temp18 = 0;\n  let temp19 = 0;\n  let temp20 = 0;\n  let temp21 = 0;\n  let temp22 = 0;\n  let temp23 = 0;\n  let temp24 = 0;\n  let temp25 = 0;\n  let temp26 = 0;\n  let temp27 = 0;\n  let temp28 = 0;\n  let temp29 = 0;\n  let temp30 = 0;\n  let temp31 = 0;\n  let temp32 = 0;\n  let temp33 = 0;\n  let temp34 = 0;\n  let temp35 = 0;\n  let temp36 = 0;\n  let temp37 = 0;\n  let temp38 = 0;\n  let temp39 = 0;\n  let temp40 = 0;\n  let temp41 = 0;\n  let temp42 = 0;\n  let temp43 = 0;\n  let temp44 = 0;\n  let temp45 = 0;\n  let temp46 = 0;\n  let temp47 = 0;\n  let temp48 = 0;\n  let temp49 = 0;\n  let temp50 = 0;\n  let temp51 = 0;\n  let temp52 = 0;\n  let temp53 = 0;\n  let temp54 = 0;\n  let temp55 = 0;\n  let temp56 = 0;\n  let temp57 = 0;\n  let temp58 = 0;\n  let temp59 = 0;\n  let temp60 = 0;\n  let temp61 = 0;\n  let temp62 = 0;\n  let temp63 = 0;\n  let temp64 = 0;\n  let temp65 = 0;\n  let temp66 = 0;\n  let temp67 = 0;\n  let temp68 = 0;\n  let temp69 = 0;\n  let temp70 = 0;\n  let temp71 = 0;\n  let temp72 = 0;\n  let temp73 = 0;\n  let temp74 = 0;\n  let temp75 = 0;\n  let temp76 = 0;\n  let temp77 = 0;\n  let temp78 = 0;\n  let temp79 = 0;\n  let temp80 = 0;\n  let temp81 = 0;\n  let temp82 = 0;\n  let temp83 = 0;\n  let temp84 = 0;\n  let temp85 = 0;\n  let temp86 = 0;\n  let temp87 = 0;\n  let temp88 = 0;\n  let temp89 = 0;\n  let temp90 = 0;\n  let temp91 = 0;\n  let temp92 = 0;\n  let temp93 = 0;\n  let temp94 = 0;\n  let temp95 = 0;\n  let temp96 = 0;\n  let temp97 = 0;\n  let temp98 = 0;\n  let temp99 = 0;\n  let temp100 = 0;\n  let temp101 = 0;\n  let temp102 = 0;\n  let temp103 = 0;\n  let temp104 = 0;\n  let temp105 = 0;\n  let temp106 = 0;\n  let temp107 = 0;\n  let temp108 = 0;\n  let temp109 = 0;\n  let temp110 = 0;\n  let temp111 = 0;\n  let temp112 = 0;\n  let temp113 = 0;\n  let temp114 = 0;\n  let temp115 = 0;\n  let temp116 = 0;\n  let temp117 = 0;\n  let temp118 = 0;\n  let temp119 = 0;\n  let temp120 = 0;\n  let temp121 = 0;\n  let temp122 = 0;\n  let temp123 = 0;\n  let temp124 = 0;\n  let temp125 = 0;\n  let temp126 = 0;\n  let temp127 = 0;\n  let temp128 = 0;\n  let temp129 = 0;\n  let temp130 = 0;\n  let temp131 = 0;\n  let temp132 = 0;\n  let temp133 = 0;\n  let temp134 = 0;\n  let temp135 = 0;\n  let temp136 = 0;\n  let temp137 = 0;\n  let temp138 = 0;\n  let temp139 = 0;\n  let temp140 = 0;\n  let temp141 = 0;\n  let temp142 = 0;\n  let temp143 = 0;\n  let temp144 = 0;\n  let temp145 = 0;\n  let temp146 = 0;\n  let temp147 = 0;\n  let temp148 = 0;\n  let temp149 = 0;\n  let temp150 = 0;\n  let temp151 = 0;\n  let temp152 = 0;\n  let temp153 = 0;\n  let temp154 = 0;\n  let temp155 = 0;\n  let temp156 = 0;\n  let temp157 = 0;\n  let temp158 = 0;\n  let temp159 = 0;\n  let temp160 = 0;\n  let temp161 = 0;\n  let temp162 = 0;\n  let temp163 = 0;\n  let temp164 = 0;\n  let temp165 = 0;\n  let temp166 = 0;\n  let temp167 = 0;\n  let temp168 = 0;\n  let temp169 = 0;\n  let temp170 = 0;\n  let temp171 = 0;\n  let temp172 = 0;\n  let temp173 = 0;\n  let temp174 = 0;\n  let temp175 = 0;\n  let temp176 = 0;\n  let temp177 = 0;\n  let temp178 = 0;\n  let temp179 = 0;\n  let temp180 = 0;\n  let temp181 = 0;\n  let temp182 = 0;\n  let temp183 = 0;\n  let temp184 = 0;\n  let temp185 = 0;\n  let temp186 = 0;\n  let temp187 = 0;\n  let temp188 = 0;\n  let temp189 = 0;\n  let temp190 = 0;\n  let temp191 = 0;\n  let temp192 = 0;\n  let temp193 = 0;\n  let temp194 = 0;\n  let temp195 = 0;\n  let temp196 = 0;\n  let temp197 = 0;\n  let temp198 = 0;\n  let temp199 = 0;\n  let temp200 = 0;\n  let temp201 = 0;\n  let temp202 = 0;\n  let temp203 = 0;\n  let temp204 = 0;\n  let temp205 = 0;\n  let temp206 = 0;\n  let temp207 = 0;\n  let temp208 = 0;\n  let temp209 = 0;\n  let temp210 = 0;\n  let temp211 = 0;\n  let temp212 = 0;\n  let temp213 = 0;\n  let temp214 = 0;\n  let temp215 = 0;\n  let temp216 = 0;\n  let temp217 = 0;\n  let temp218 = 0;\n  let temp219 = 0;\n  let temp220 = 0;\n  let temp221 = 0;\n  let temp222 = 0;\n  let temp223 = 0;\n  let temp224 = 0;\n  let temp225 = 0;\n  let temp226 = 0;\n  let temp227 = 0;\n  let temp228 = 0;\n  let temp229 = 0;\n  let temp230 = 0;\n  let temp231 = 0;\n  let temp232 = 0;\n  let temp233 = 0;\n  let temp234 = 0;\n  let temp235 = 0;\n  let temp236 = 0;\n  let temp237 = 0;\n  let temp238 = 0;\n  let temp239 = 0;\n  let temp240 = 0;\n  let temp241 = 0;\n  let temp242 = 0;\n  let temp243 = 0;\n  let temp244 = 0;\n  let temp245 = 0;\n  let temp246 = 0;\n  let temp247 = 0;\n  let temp248 = 0;\n  let temp249 = 0;\n  let temp250 = 0;\n  let temp251 = 0;\n  let temp252 = 0;\n  let temp253 = 0;\n  let temp254 = 0;\n  let temp255 = 0;\n  let temp256 = 0;\n  let temp257 = 0;\n  let temp258 = 0;\n  let temp259 = 0;\n  let temp260 = 0;\n  let temp261 = 0;\n  let temp262 = 0;\n  let temp263 = 0;\n  let temp264 = 0;\n  let temp265 = 0;\n  let temp266 = 0;\n  let temp267 = 0;\n  let temp268 = 0;\n  let temp269 = 0;\n  let temp270 = 0;\n  let temp271 = 0;\n  let temp272 = 0;\n  let temp273 = 0;\n  let temp274 = 0;\n  let temp275 = 0;\n  let temp276 = 0;\n  let temp277 = 0;\n  let temp278 = 0;\n  let temp279 = 0;\n  let temp280 = 0;\n  let temp281 = 0;\n  let temp28", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueDigtis([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigtis([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigtis = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigtis", "gc": "<|endoftext|>/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueDigtis([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigtis([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigtis = (x) => {\n  let result = [];\n  let digits = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  \n  while (i + 1 < x.length) {\n    if (x[i] % 2 === 0) {\n      digits.push(x[i]);\n      i++;\n    } else {\n      j++;\n    }\n  }\n  \n  while (j < x.length) {\n    if (digits[j] % 2 === 0) {\n      result.push(digits[j]);\n      j++;\n    } else {\n      k++;\n    }\n  }\n  \n  return result;\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that has any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueDigtis([15, 33, 1422, 1])\n  [15]\n  >>> uniqueDigtis([152, 323, 1422, 10])\n  [152, 323]\n  */\nconst uniqueEvenDigtis = (x) => {\n  let result = [];\n  let digits = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  \n  while (i + 1 < x.length) {\n    if (x[i] % 2 === 0) {\n      digits.push(x[i]);\n      i++;\n    } else {\n      j++;\n    }\n  }\n  \n  while (j < x.length) {\n    if (digits[j] % 2 === 0) {\n      result.push(digits[j]);\n      j++;\n    } else {\n      k++;\n    }\n  }\n  \n  return result;\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that has any odd digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueEvenDigtis([15, 33, 1422, 1])\n  [33, 1422]\n  >>> uniqueEvenDigtis([152, 323, 1422, 10])\n  [152, 323]\n  */\nconst uniqueOddDigtis = (x) => {\n  let result = [];\n  let digits = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  \n  while (i + 1 < x.length) {\n    if (x[i] % 2 === 0) {\n      digits.push(x[i]);\n      i++;\n    } else {\n      j++;\n    }\n  }\n  \n  while (j < x.length) {\n    if (digits[j] % 2 === 0) {\n      result.push(digits[j]);\n      j++;\n    } else {\n      k++;\n    }\n  }\n  \n  return result;\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that has any even or odd digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueEvenOddDigtis([15, 33, 1422, 1])\n  [33, 1422, 15]\n  >>> uniqueEvenOddDigtis([152, 323, 1422, 10])\n  [152, 323, 15]\n  */\nconst uniqueEvenOddDigtis = (x) => {\n  let result = [];\n  let digits = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  \n  while (i + 1 < x.length) {\n    if (x[i] % 2 === 0) {\n      digits.push(x[i]);\n      i++;\n    } else {\n      j++;\n    }\n  }\n  \n  while (j < x.length) {\n    if (digits[j] % 2 === 0) {\n      result.push(digits[j]);\n      j++;\n    } else {\n      k++;\n    }\n  }\n  \n  return result;\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that has any odd or even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueEvenOddDigtis([15, 33, 1422, 1])\n  [33, 1422, 15]\n  >>> uniqueEvenOddDigtis([152, 323, 1422, 10])\n  [152, 323, 15]\n  */\nconst uniqueOddEvenDigtis = (x) => {\n  let result = [];\n  let digits = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  \n  while (i + 1 < x.length) {\n    if (x[i] % 2 === 0) {\n      digits.push(x[i]);\n      i++;\n    } else {\n      j++;\n    }\n  }\n  \n  while (j < x.length) {\n    if (digits[j] % 2 === 0) {\n      result.push(digits[j]);\n      j++;\n    } else {\n      k++;\n    }\n  }\n  \n  return result;\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that has any even or odd digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueEvenOddEvenDigtis([15, 33, 1422, 1])\n  [33, 1422, 15]\n  >>> uniqueEvenOddEvenDigtis([152, 323, 1422, 10])\n  [152, 323, 15]\n  */\nconst uniqueEvenOddEvenDigtis = (x) => {\n  let result = [];\n  let digits = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  \n  while (i + 1 < x.length) {\n    if (x[i] % 2 === 0) {\n      digits.push(x[i]);\n      i++;\n    } else {\n      j++;\n    }\n  }\n  \n  while (j < x.length) {\n    if (digits[j] % 2 === 0) {\n      result.push(digits[j]);\n      j++;\n    } else {\n      k++;\n    }\n  }\n  \n  return result;\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that has any even or odd digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueEvenOddEvenDigtis([15, 33, 1422, 1])\n  [33, 1422, 15]\n  >>> uniqueEvenOddEvenDigtis([152, 323, 1422, 10])\n  [152, 323, 15]\n  */\nconst uniqueEvenOddOddDigtis = (x) => {\n  let result = [];\n  let digits = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  \n  while (i + 1 < x.length) {\n    if (x[i] % 2 === 0) {\n      digits.push(x[i]);\n      i++;\n    } else {\n      j++;\n    }\n  }\n  \n  while (j < x.length) {\n    if (digits[j] % 2 === 0) {\n      result.push(digits[j]);\n      j++;\n    } else {\n      k++;\n    }\n  }\n  \n  return result;\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that has any even or odd digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueEvenOddOddEvenDigtis([15, 33, 1422, 1])\n  [33, 1422, 15]\n  >>> uniqueEvenOddOddEvenDigtis([152, 323, 1422, 10])\n  [152, 323, 15]\n  */\nconst uniqueEvenOddOddEvenDigtis = (x) => {\n  let result = [];\n  let digits = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  \n  while (i + 1 < x.length) {\n    if (x[i] % 2 === 0) {\n      digits.push(x[i]);\n      i++;\n    } else {\n      j++;\n    }\n  }\n  \n  while (j < ", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst ybLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "ybLength", "gc": "<|endoftext|>/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst ybLength = (arr) => {\n  let res = []\n  let len = arr.length\n  let i = 0\n  while (i < len) {\n    if (arr[i] > 9) {\n      res.push(arr[i])\n      i++\n    } else {\n      res.push(arr[i])\n      i++\n    }\n  }\n  return res\n}\n\n/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst ybName = (arr) => {\n  let res = []\n  let len = arr.length\n  let i = 0\n  while (i < len) {\n    if (arr[i] > 9) {\n      res.push(\"One\")\n      i++\n    } else {\n      res.push(\"Two\")\n      i++\n    }\n  }\n  return res\n}\n\n/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst ybNameReverse = (arr) => {\n  let res = []\n  let len = arr.length\n  let i = 0\n  while (i < len) {\n    if (arr[i] > 9) {\n      res.push(\"Two\")\n      i++\n    } else {\n      res.push(\"One\")\n      i++\n    }\n  }\n  return res\n}\n\n/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst ybNameReverseReverse = (arr) => {\n  let res = []\n  let len = arr.length\n  let i = 0\n  while (i < len) {\n    if (arr[i] > 9) {\n      res.push(\"Three\")\n      i++\n    } else {\n      res.push(\"Two\")\n      i++\n    }\n  }\n  return res\n}\n\n/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst ybNameReverseReverseReverse = (arr) => {\n  let res = []\n  let len = arr.length\n  let i = 0\n  while (i < len) {\n    if (arr[i] > 9) {\n      res.push(\"Four\")\n      i++\n    } else {\n      res.push(\"Three\")\n      i++\n    }\n  }\n  return res\n}\n\n/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst ybNameReverseReverseReverseReverse = (arr) => {\n  let res = []\n  let len = arr.length\n  let i = 0\n  while (i < len) {\n    if (arr[i] > 9) {\n      res.push(\"Five\")\n      i++\n    } else {\n      res.push(\"Four\")\n      i++\n    }\n  }\n  return res\n}\n\n/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/106", "prompt": "/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "gc": "<|endoftext|>/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/* Implement the function g that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the greatest common divisor of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the greatest common divisor of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  g(5) == [1, 2, 6, 24, 15]\n  */\nconst g = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/* Implement the function h that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the greatest common divisor of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the greatest common divisor of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  h(5) == [1, 2, 6, 24, 15]\n  */\nconst h = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/* Implement the function i that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the greatest common divisor of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the greatest common divisor of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  i(5) == [1, 2, 6, 24, 15]\n  */\nconst i = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/* Implement the function j that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the greatest common divisor of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the greatest common divisor of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  j(5) == [1, 2, 6, 24, 15]\n  */\nconst j = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/* Implement the function k that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the greatest common divisor of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the greatest common divisor of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  k(5) == [1, 2, 6, 24, 15]\n  */\nconst k = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/* Implement the function l that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the greatest common divisor of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the greatest common divisor of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  l(5) == [1, 2, 6, 24, 15]\n  */\nconst l = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/* Implement the function m that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the greatest common divisor of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the greatest common divisor of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  m(5) == [1, 2, 6, 24, 15]\n  */\nconst m = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/* Implement the function n that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the greatest common divisor of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the greatest common divisor of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  n(5) == [1, 2, 6, 24, 15]\n  */\nconst n = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/* Implement the function o that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the greatest common divisor of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the greatest common divisor of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  o(5) == [1, 2, 6, 24, 15]\n  */\nconst o = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/* Implement the function p that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the greatest common divisor of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the greatest common divisor of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  p(5) == [1, 2, 6, 24, 15]\n  */\nconst p = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/* Implement the function q that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the greatest common divisor of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the greatest common divisor of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  q(5) == [1, 2, 6, 24, 15]\n  */\nconst q = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "gc": "<|endoftext|>/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  const evenPalindromes = [];\n  const oddPalindromes = [];\n  let count = 0;\n  let even = 0;\n  let odd = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      evenPalindromes.push(even);\n      even = 0;\n    } else {\n      oddPalindromes.push(odd);\n      odd = 0;\n    }\n  }\n  evenPalindromes.push(even);\n  oddPalindromes.push(odd);\n  return [evenPalindromes, oddPalindromes];\n};\n\n/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that do not fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (2, 1)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddNoPalindrome = (n) => {\n  const evenPalindromes = [];\n  const oddPalindromes = [];\n  let count = 0;\n  let even = 0;\n  let odd = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      evenPalindromes.push(even);\n      even = 0;\n    } else {\n      oddPalindromes.push(odd);\n      odd = 0;\n    }\n  }\n  evenPalindromes.push(even);\n  oddPalindromes.push(odd);\n  return [evenPalindromes, oddPalindromes];\n};\n\n/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that do not fall within the range(2, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (2, 1)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddNoPalindrome2 = (n) => {\n  const evenPalindromes = [];\n  const oddPalindromes = [];\n  let count = 0;\n  let even = 0;\n  let odd = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      evenPalindromes.push(even);\n      even = 0;\n    } else {\n      oddPalindromes.push(odd);\n      odd = 0;\n    }\n  }\n  evenPalindromes.push(even);\n  oddPalindromes.push(odd);\n  return [evenPalindromes, oddPalindromes];\n};\n\n/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that do not fall within the range(3, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (2, 1)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddNoPalindrome3 = (n) => {\n  const evenPalindromes = [];\n  const oddPalindromes = [];\n  let count = 0;\n  let even = 0;\n  let odd = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      evenPalindromes.push(even);\n      even = 0;\n    } else {\n      oddPalindromes.push(odd);\n      odd = 0;\n    }\n  }\n  evenPalindromes.push(even);\n  oddPalindromes.push(odd);\n  return [evenPalindromes, oddPalindromes];\n};\n\n/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that do not fall within the range(4, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (2, 1)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddNoPalindrome4 = (n) => {\n  const evenPalindromes = [];\n  const oddPalindromes = [];\n  let count = 0;\n  let even = 0;\n  let odd = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      evenPalindromes.push(even);\n      even = 0;\n    } else {\n      oddPalindromes.push(odd);\n      odd = 0;\n    }\n  }\n  evenPalindromes.push(even);\n  oddPalindromes.push(odd);\n  return [evenPalindromes, oddPalindromes];\n};\n\n/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that do not fall within the range(5, n), inclusive.", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function countNmus which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNmus([]) == 0\n  >>> countNmus([-1, 11, -11]) == 1\n  >>> countNmus([1, 1, 2]) == 3\n  */\nconst countNmus = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNmus", "gc": "<|endoftext|>/*\n  Write a function countNmus which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNmus([]) == 0\n  >>> countNmus([-1, 11, -11]) == 1\n  >>> countNmus([1, 1, 2]) == 3\n  */\nconst countNmus = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= 0) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countNmus which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNmus([]) == 0\n  >>> countNmus([-1, 11, -11]) == 1\n  >>> countNmus([1, 1, 2]) == 3\n  */\nconst countNmus = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= 0) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countNmus which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNmus([]) == 0\n  >>> countNmus([-1, 11, -11]) == 1\n  >>> countNmus([1, 1, 2]) == 3\n  */\nconst countNmus = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= 0) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countNmus which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNmus([]) == 0\n  >>> countNmus([-1, 11, -11]) == 1\n  >>> countNmus([1, 1, 2]) == 3\n  */\nconst countNmus = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= 0) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countNmus which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNmus([]) == 0\n  >>> countNmus([-1, 11, -11]) == 1\n  >>> countNmus([1, 1, 2]) == 3\n  */\nconst countNmus = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= 0) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countNmus which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNmus([]) == 0\n  >>> countNmus([-1, 11, -11]) == 1\n  >>> countNmus([1, 1, 2]) == 3\n  */\nconst countNmus = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= 0) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countNmus which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNmus([]) == 0\n  >>> countNmus([-1, 11, -11]) == 1\n  >>> countNmus([1, 1, 2]) == 3\n  */\nconst countNmus = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= 0) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countNmus which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNmus([]) == 0\n  >>> countNmus([-1, 11, -11]) == 1\n  >>> countNmus([1, 1, 2]) == 3\n  */\nconst countNmus = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= 0) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countNmus which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNmus([]) == 0\n  >>> countNmus([-1, 11, -11]) == 1\n  >>> countNmus([1, 1, 2]) == 3\n  */\nconst countNmus = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= 0) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countNmus which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNmus([]) == 0\n  >>> countNmus([-1, 11, -11]) == 1\n  >>> countNmus([1, 1, 2]) == 3\n  */\nconst countNmus = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= 0) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countNmus which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNmus([]) == 0\n  >>> countNmus([-1, 11, -11]) == 1\n  >>> countNmus([1, 1, 2]) == 3\n  */\nconst countNmus = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= 0) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countNmus which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNmus([]) == 0\n  >>> countNmus([-1, 11, -11]) == 1\n  >>> countNmus([1, 1, 2]) == 3\n  */\nconst countNmus = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= 0) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countNmus which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNmus([]) == 0\n  >>> countNmus([-1, 11, -11]) == 1", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/109", "prompt": "/*We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "gc": "<|endoftext|>/*We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  let moveOneBallArr = [];\n  let moveOneBallArrIndex = 0;\n  let moveOneBallArrLength = 0;\n  let moveOneBallArrIndexLength = 0;\n  let moveOneBallArrIndexLengthLength = 0;\n  let moveOneBallArrIndexLengthLength = 0;\n  let moveOneBallArrIndexLengthLength = 0;\n  let moveOneBallArrIndexLengthLength = 0;\n  let moveOneBallArrIndexLengthLength = 0;\n  let moveOneBallArrIndexLengthLength = 0;\n  let moveOneBallArrIndexLengthLength = 0;\n  let moveOneBallArrIndexLengthLength = 0;\n  let moveOneBallArrIndexLengthLength = 0;\n  let moveOneBallArrIndexLengthLength = 0;\n  let moveOneBallArrIndexLengthLength = 0;\n  let moveOneBallArrIndexLengthLength = 0;\n  let moveOneBallArrIndexLengthLength = 0;\n  let moveOneBallArrIndexLengthLength = 0;\n  let moveOneBallArrIndexLengthLength = 0;\n  let moveOneBallArrIndexLengthLength = 0;\n  let moveOneBallArrIndexLengthLength = 0;\n  let moveOneBallArrIndexLengthLength = 0;\n  let moveOneBallArrIndexLengthLength = 0;\n  let moveOneBallArrIndexLengthLength = 0;\n  let moveOneBallArrIndexLengthLength = 0;\n  let moveOneBallArrIndexLengthLength = 0;\n  let moveOneBallArrIndexLengthLength = 0;\n  let moveOneBallArrIndexLengthLength = 0;\n  let moveOneBallArrIndexLengthLength = 0;\n  let moveOneBallArrIndexLengthLength = 0;\n  let moveOneBallArrIndexLengthLength = 0;\n  let moveOneBallArrIndexLengthLength = 0;\n  let moveOneBallArrIndexLengthLength = 0;\n  let moveOneBallArrIndexLengthLength = 0;\n  let moveOneBallArrIndexLengthLength = 0;\n  let moveOneBallArrIndexLengthLength = 0;\n  let moveOneBallArrIndexLengthLength = 0;\n  let moveOneBallArrIndexLengthLength = 0;\n  let moveOneBallArrIndexLengthLength = 0;\n  let moveOneBallArrIndexLengthLength = 0;\n  let moveOneBallArrIndexLengthLength = 0;\n  let moveOneBallArrIndexLengthLength = 0;\n  let moveOneBallArrIndexLengthLength = 0;\n  let moveOneBallArrIndexLengthLength = 0;\n  let moveOneBallArrIndexLengthLength = 0;\n  let moveOneBallArrIndexLengthLength = 0;\n  let moveOneBallArrIndexLengthLength = 0;\n  let moveOneBallArrIndexLengthLength = 0;\n  let moveOneBallArrIndexLengthLength = 0;\n  let moveOneBallArrIndexLengthLength = 0;\n  let moveOneBallArrIndexLengthLength = 0;\n  let moveOneBallArrIndexLengthLength = 0;\n  let moveOneBallArrIndexLengthLength = 0;\n  let moveOneBallArrIndexLengthLength = 0;\n  let moveOneBallArrIndexLengthLength = 0;\n  let moveOneBallArrIndexLengthLength = 0;\n  let moveOneBallArrIndexLengthLength = 0;\n  let moveOneBallArrIndexLengthLength = 0;\n  let moveOneBallArrIndexLengthLength = 0;\n  let moveOneBallArrIndexLengthLength = 0;\n  let moveOneBallArrIndexLengthLength = 0;\n  let moveOneBallArrIndexLengthLength = 0;\n  let moveOneBallArrIndexLengthLength = 0;\n  let moveOneBallArrIndexLengthLength = 0;\n  let moveOneBallArrIndexLengthLength = 0;\n  let moveOneBallArrIndexLengthLength = 0;\n  let moveOneBallArrIndexLengthLength = 0;\n  let moveOneBallArrIndexLengthLength = 0;\n  let moveOneBallArrIndexLengthLength = 0;\n  let moveOneBallArrIndexLengthLength = 0;\n  let moveOneBallArrIndexLengthLength = 0;\n  let moveOneBallArrIndexLengthLength = 0;\n  let moveOneBallArrIndexLengthLength = 0;\n  let moveOneBallArrIndexLengthLength = 0;\n  let moveOneBallArrIndexLengthLength = 0;\n  let moveOneBallArrIndexLengthLength = 0;\n  let moveOneBallArrIndexLengthLength = 0;\n  let moveOneBallArrIndexLengthLength = 0;\n  let moveOneBallArrIndexLengthLength = 0;\n  let moveOneBallArrIndexLengthLength = 0;\n  let moveOneBallArrIndexLengthLength = 0;\n  let moveOneBallArrIndexLengthLength = 0;\n  let moveOneBallArrIndexLengthLength = 0;\n  let moveOneBallArrIndexLengthLength = 0;\n  let moveOneBallArrIndexLengthLength = 0;\n  let moveOneBallArrIndexLengthLength = 0;\n  let moveOneBallArrIndexLengthLength = 0;\n  let moveOneBallArrIndexLengthLength = 0;\n  let moveOneBallArrIndexLengthLength = 0;\n  let moveOneBallArrIndexLengthLength = 0;\n  let moveOneBallArrIndexLengthLength = 0;\n  let moveOneBallArrIndexLengthLength = 0;\n  let moveOneBallArrIndexLengthLength = 0;\n  let moveOneBallArrIndexLengthLength = 0;\n  let moveOneBallArrIndexLengthLength = 0;\n  let moveOneBallArrIndexLengthLength = 0;\n  let moveOneBallArrIndexLengthLength = 0;\n  let moveOneBallArrIndexLengthLength = 0;\n  let moveOneBallArrIndexLengthLength = 0;\n  let moveOneBallArrIndexLengthLength = 0;\n  let moveOneBallArrIndexLengthLength = 0;\n  let moveOneBallArrIndexLengthLength = 0;\n  let moveOneBallArrIndexLengthLength = 0;\n  let moveOneBallArrIndexLengthLength = 0;\n  let moveOneBallArrIndexLengthLength = 0;\n  let moveOneBallArrIndexLengthLength = 0;\n  let moveOneBallArrIndexLengthLength = 0;\n  let moveOneBallArrIndexLengthLength = 0;\n  let moveOneBallArrIndexLengthLength = 0;\n  let moveOneBallArrIndexLengthLength = 0;\n  let moveOneBallArrIndexLengthLength = 0;\n  let moveOneBallArrIndexLengthLength = 0;\n  let moveOneBallArrIndexLengthLength = 0;\n  let moveOneBallArrIndexLengthLength = 0;\n  let moveOneBallArrIndexLengthLength = 0;\n  let moveOneBallArrIndexLengthLength = 0;\n  let moveOneBallArrIndexLengthLength = 0;\n  let moveOneBallArrIndexLengthLength = 0;\n  let moveOneBallArrIndexLengthLength = 0;\n  let moveOneBallArrIndexLengthLength = 0;\n  let moveOneBallArrIndexLengthLength = 0;\n  let moveOneBallArrIndexLengthLength = 0;\n  let moveOneBallArrIndexLengthLength = 0;\n  let moveOneBallArrIndexLengthLength = 0;\n  let moveOneBallArrIndexLengthLength = 0;\n  let moveOneBallArrIndexLengthLength = 0;\n  let moveOneBallArrIndexLengthLength = 0;\n  let moveOneBallArrIndexLengthLength = 0;\n  let moveOneBallArrIndexLengthLength = 0;\n  let moveOneBallArr", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/11", "prompt": "/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> strinXgor('010', '110')\n  '100'\n  */\nconst strinXgor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "strinXgor", "gc": "<|endoftext|>/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> strinXgor('010', '110')\n  '100'\n  */\nconst strinXgor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    let bit = a.charCodeAt(i) - 48;\n    result += (b[bit] ^ b[bit + 1]) >>> 0;\n  }\n  return result;\n};\n\n/**\n  Perform binary XOR on two strings a and b.\n  >>> strinXor('010', '110')\n  '100'\n  */\nconst strinXor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    let bit = a.charCodeAt(i) - 48;\n    result += (b[bit] ^ b[bit + 1]) >>> 0;\n  }\n  return result;\n};\n\n/**\n  Perform binary AND on two strings a and b.\n  >>> strinAnd('010', '110')\n  '100'\n  */\nconst strinAnd = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    let bit = a.charCodeAt(i) - 48;\n    result += (b[bit] & b[bit + 1]) >>> 0;\n  }\n  return result;\n};\n\n/**\n  Perform binary AND on two strings a and b.\n  >>> strinAnd('010', '110')\n  '100'\n  */\nconst strinAnd = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    let bit = a.charCodeAt(i) - 48;\n    result += (b[bit] & b[bit + 1]) >>> 0;\n  }\n  return result;\n};\n\n/**\n  Perform binary OR on two strings a and b.\n  >>> strinOr('010', '110')\n  '100'\n  */\nconst strinOr = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    let bit = a.charCodeAt(i) - 48;\n    result += (b[bit] | b[bit + 1]) >>> 0;\n  }\n  return result;\n};\n\n/**\n  Perform binary OR on two strings a and b.\n  >>> strinOr('010', '110')\n  '100'\n  */\nconst strinOr = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    let bit = a.charCodeAt(i) - 48;\n    result += (b[bit] | b[bit + 1]) >>> 0;\n  }\n  return result;\n};\n\n/**\n  Perform binary XOR on two strings a and b.\n  >>> strinXor('010', '110')\n  '100'\n  */\nconst strinXor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    let bit = a.charCodeAt(i) - 48;\n    result += (b[bit] ^ b[bit + 1]) >>> 0;\n  }\n  return result;\n};\n\n/**\n  Perform binary XOR on two strings a and b.\n  >>> strinXor('010', '110')\n  '100'\n  */\nconst strinXor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    let bit = a.charCodeAt(i) - 48;\n    result += (b[bit] ^ b[bit + 1]) >>> 0;\n  }\n  return result;\n};\n\n/**\n  Perform binary AND on two strings a and b.\n  >>> strinAnd('010', '110')\n  '100'\n  */\nconst strinAnd = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    let bit = a.charCodeAt(i) - 48;\n    result += (b[bit] & b[bit + 1]) >>> 0;\n  }\n  return result;\n};\n\n/**\n  Perform binary AND on two strings a and b.\n  >>> strinAnd('010', '110')\n  '100'\n  */\nconst strinAnd = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    let bit = a.charCodeAt(i) - 48;\n    result += (b[bit] & b[bit + 1]) >>> 0;\n  }\n  return result;\n};\n\n/**\n  Perform binary OR on two strings a and b.\n  >>> strinOr('010', '110')\n  '100'\n  */\nconst strinOr = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    let bit = a.charCodeAt(i) - 48;\n    result += (b[bit] | b[bit + 1]) >>> 0;\n  }\n  return result;\n};\n\n/**\n  Perform binary OR on two strings a and b.\n  >>> strinOr('010', '110')\n  '100'\n  */\nconst strinOr = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    let bit = a.charCodeAt(i) - 48;\n    result += (b[bit] | b[bit + 1]) >>> 0;\n  }\n  return result;\n};\n\n/**\n  Perform binary XOR on two strings a and b.\n  >>> strinXor('010', '110')\n  '100'\n  */\nconst strinXor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    let bit = a.charCodeAt(i) - 48;\n    result += (b[bit] ^ b[bit + 1]) >>> 0;\n  }\n  return result;\n};\n\n/**\n  Perform binary XOR on two strings a and b.\n  >>> strinXor('010', '110')\n  '100'\n  */\nconst strinXor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    let bit = a.charCodeAt(i) - 48;\n    result += (b[bit] ^ b[bit + 1]) >>> 0;\n  }\n  return result;\n};\n\n/**\n  Perform binary AND on two strings a and b.\n  >>> strinAnd('010', '110')\n  '100'\n  */\nconst strinAnd = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    let bit = a.charCodeAt(i) - 48;\n    result += (b[bit] & b[bit + 1]) >>> 0;\n  }\n  return result;\n};\n\n/**\n  Perform binary AND on two strings a and b.\n  >>> strinAnd('010', '110')\n  '100'\n  */\nconst strinAnd = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    let bit = a.charCodeAt(i) - 48;\n    result += (b[bit] & b[bit + 1]) >>> 0;\n  }\n  return result;\n};\n\n/**\n  Perform binary OR on two strings a and b.\n  >>> strinOr('010', '110')\n  '100'\n  */\nconst strinOr = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    let bit = a.charCodeAt(i) - 48;\n    result += (b[bit] | b[bit + 1]) >>> 0;\n  }\n  return result;\n};\n\n/**\n  Perform binary OR on two strings a and b.\n  >>> strinOr('010', '110')\n  '100'\n  */\nconst strinOr = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    let bit = a.charCodeAt(i) - 48;\n    result += (b[bit] | b[bit + 1]) >>> 0;\n  }\n  return result;\n};\n\n/**\n  Perform binary XOR on two strings a and b.\n  >>> strinXor('010", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an xechange of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of xechanged elements between lst1 and lst2.\n  If it is possible to xechange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  xechange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  xechange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst xechange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "xechange", "gc": "<|endoftext|>/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an xechange of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of xechanged elements between lst1 and lst2.\n  If it is possible to xechange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  xechange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  xechange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst xechange = (lst1, lst2) => {\n  let result = \"NO\";\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let temp = [];\n  let temp2 = [];\n  let temp3 = [];\n  let temp4 = [];\n  let temp5 = [];\n  let temp6 = [];\n  let temp7 = [];\n  let temp8 = [];\n  let temp9 = [];\n  let temp10 = [];\n  let temp11 = [];\n  let temp12 = [];\n  let temp13 = [];\n  let temp14 = [];\n  let temp15 = [];\n  let temp16 = [];\n  let temp17 = [];\n  let temp18 = [];\n  let temp19 = [];\n  let temp20 = [];\n  let temp21 = [];\n  let temp22 = [];\n  let temp23 = [];\n  let temp24 = [];\n  let temp25 = [];\n  let temp26 = [];\n  let temp27 = [];\n  let temp28 = [];\n  let temp29 = [];\n  let temp30 = [];\n  let temp31 = [];\n  let temp32 = [];\n  let temp33 = [];\n  let temp34 = [];\n  let temp35 = [];\n  let temp36 = [];\n  let temp37 = [];\n  let temp38 = [];\n  let temp39 = [];\n  let temp40 = [];\n  let temp41 = [];\n  let temp42 = [];\n  let temp43 = [];\n  let temp44 = [];\n  let temp45 = [];\n  let temp46 = [];\n  let temp47 = [];\n  let temp48 = [];\n  let temp49 = [];\n  let temp50 = [];\n  let temp51 = [];\n  let temp52 = [];\n  let temp53 = [];\n  let temp54 = [];\n  let temp55 = [];\n  let temp56 = [];\n  let temp57 = [];\n  let temp58 = [];\n  let temp59 = [];\n  let temp60 = [];\n  let temp61 = [];\n  let temp62 = [];\n  let temp63 = [];\n  let temp64 = [];\n  let temp65 = [];\n  let temp66 = [];\n  let temp67 = [];\n  let temp68 = [];\n  let temp69 = [];\n  let temp70 = [];\n  let temp71 = [];\n  let temp72 = [];\n  let temp73 = [];\n  let temp74 = [];\n  let temp75 = [];\n  let temp76 = [];\n  let temp77 = [];\n  let temp78 = [];\n  let temp79 = [];\n  let temp80 = [];\n  let temp81 = [];\n  let temp82 = [];\n  let temp83 = [];\n  let temp84 = [];\n  let temp85 = [];\n  let temp86 = [];\n  let temp87 = [];\n  let temp88 = [];\n  let temp89 = [];\n  let temp90 = [];\n  let temp91 = [];\n  let temp92 = [];\n  let temp93 = [];\n  let temp94 = [];\n  let temp95 = [];\n  let temp96 = [];\n  let temp97 = [];\n  let temp98 = [];\n  let temp99 = [];\n  let temp100 = [];\n  let temp101 = [];\n  let temp102 = [];\n  let temp103 = [];\n  let temp104 = [];\n  let temp105 = [];\n  let temp106 = [];\n  let temp107 = [];\n  let temp108 = [];\n  let temp109 = [];\n  let temp110 = [];\n  let temp111 = [];\n  let temp112 = [];\n  let temp113 = [];\n  let temp114 = [];\n  let temp115 = [];\n  let temp116 = [];\n  let temp117 = [];\n  let temp118 = [];\n  let temp119 = [];\n  let temp120 = [];\n  let temp121 = [];\n  let temp122 = [];\n  let temp123 = [];\n  let temp124 = [];\n  let temp125 = [];\n  let temp126 = [];\n  let temp127 = [];\n  let temp128 = [];\n  let temp129 = [];\n  let temp130 = [];\n  let temp131 = [];\n  let temp132 = [];\n  let temp133 = [];\n  let temp134 = [];\n  let temp135 = [];\n  let temp136 = [];\n  let temp137 = [];\n  let temp138 = [];\n  let temp139 = [];\n  let temp140 = [];\n  let temp141 = [];\n  let temp142 = [];\n  let temp143 = [];\n  let temp144 = [];\n  let temp145 = [];\n  let temp146 = [];\n  let temp147 = [];\n  let temp148 = [];\n  let temp149 = [];\n  let temp150 = [];\n  let temp151 = [];\n  let temp152 = [];\n  let temp153 = [];\n  let temp154 = [];\n  let temp155 = [];\n  let temp156 = [];\n  let temp157 = [];\n  let temp158 = [];\n  let temp159 = [];\n  let temp160 = [];\n  let temp161 = [];\n  let temp162 = [];\n  let temp163 = [];\n  let temp164 = [];\n  let temp165 = [];\n  let temp166 = [];\n  let temp167 = [];\n  let temp168 = [];\n  let temp169 = [];\n  let temp170 = [];\n  let temp171 = [];\n  let temp172 = [];\n  let temp173 = [];\n  let temp174 = [];\n  let temp175 = [];\n  let temp176 = [];\n  let temp177 = [];\n  let temp178 = [];\n  let temp179 = [];\n  let temp180 = [];\n  let temp181 = [];\n  let temp182 = [];\n  let temp183 = [];\n  let temp184 = [];\n  let temp185 = [];\n  let temp186 = [];\n  let temp187 = [];\n  let temp188 = [];\n  let temp189 = [];\n  let temp190 = [];\n  let temp191 = [];\n  let temp192 = [];\n  let temp193 = [];\n  let temp194 = [];\n  let temp195 = [];\n  let temp196 = [];\n  let temp197 = [];\n  let temp198 = [];\n  let temp199 = [];\n  let temp200 = [];\n  let temp201 = [];\n  let temp202 = [];\n  let temp203 = [];\n  let temp204 = [];\n  let temp205 = [];\n  let temp206 = [];\n  let temp207 = [];\n  let temp208 = [];\n  let temp209 = [];\n  let temp210 = [];\n  let temp211 = [];\n  let temp212 = [];\n  let temp213 = [];\n  let temp214 = [];\n  let temp215 = [];\n  let temp216 = [];\n  let temp217 = [];\n  let temp218 = [];\n  let temp219 = [];\n  let temp220 = [];\n  let temp221 = [];\n  let temp222 = [];\n  let temp223 = [];\n  let temp224 = [];\n  let temp225 = [];\n  let temp226 = [];\n  let temp227 = [];\n  let temp228 = [];\n  let temp229 = [];\n  let temp230 = [];\n  let temp231 = [];\n  let temp232 = [];\n  let temp233 = [];\n  let temp234 = [];\n  let temp235 = [];\n  let temp236 = [];\n  let temp237 = [];\n  let temp238 = [];\n  let temp239 = [];\n  let temp240 = [];\n  let temp241 = [];\n  let temp242 = [];\n  let temp243 = [];\n  let temp244 = [];\n  let temp245 = [];\n  let temp246 = [];\n  let temp247 = [];\n  let temp248 = [];\n  let temp249 = [];\n  let temp250 = [];\n  let temp251 = [];\n  let temp252 = [];\n  let temp253 = [];\n  let temp254 = [];\n  let temp255 = [];\n  let temp256 = [];\n  let temp257 = [];\n  let temp258 = [];\n  let temp259", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/111", "prompt": "/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "gc": "<|endoftext|>/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let histogram = {}\n  let letters = test.toLowerCase().split(' ')\n  letters.forEach((letter) => {\n    histogram[letter] = histogram[letter] || 0\n    histogram[letter]++\n  })\n  return histogram\n}\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst count = (test) => {\n  let histogram = {}\n  let letters = test.toLowerCase().split(' ')\n  letters.forEach((letter) => {\n    histogram[letter] = histogram[letter] || 0\n  })\n  return histogram\n}\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst countOccurrences = (test) => {\n  let histogram = {}\n  let letters = test.toLowerCase().split(' ')\n  letters.forEach((letter) => {\n    histogram[letter] = histogram[letter] || 0\n  })\n  return histogram\n}\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst countOccurrencesWithLetters = (test) => {\n  let histogram = {}\n  let letters = test.toLowerCase().split(' ')\n  letters.forEach((letter) => {\n    histogram[letter] = histogram[letter] || 0\n  })\n  return histogram\n}\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst countOccurrencesWithLettersAndLetter = (test) => {\n  let histogram = {}\n  let letters = test.toLowerCase().split(' ')\n  letters.forEach((letter) => {\n    histogram[letter] = histogram[letter] || 0\n  })\n  return histogram\n}\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst countOccurrencesWithLettersAndLetterAndLetter = (test) => {\n  let histogram = {}\n  let letters = test.toLowerCase().split(' ')\n  letters.forEach((letter) => {\n    histogram[letter] = histogram[letter] || 0\n  })\n  return histogram\n}\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst countOccurrencesWithLettersAndLetterAndLetterAndLetter = (test) => {\n  let histogram = {}\n  let letters = test.toLowerCase().split(' ')\n  letters.forEach((letter) => {\n    histogram[letter] = histogram[letter] || 0\n  })\n  return histogram\n}\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst countOccurrencesWithLettersAndLetterAndLetterAndLetter = (test) => {\n  let histogram = {}\n  let letters = test.toLowerCase().split(' ')\n  letters.forEach((letter) => {\n    histogram[letter] = histogram[letter] || 0\n  })\n  return histogram\n}\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst countOccurrencesWithLettersAndLetterAndLetterAndLetterAndLetter = (test) => {\n  let histogram = {}\n  let letters = test.toLowerCase().split(' ')\n  letters.forEach((letter) => {\n    histogram[letter] = histogram[letter] || 0\n  })\n  return histogram\n}\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/112", "prompt": "/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reveresDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reveresDelete", "gc": "<|endoftext|>/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reveresDelete = (s, c) => {\n  let result = \"\";\n  let flag = true;\n  for (let i = 0; i < s.length - 1; i++) {\n    if (s.charAt(i) === c.charAt(i)) {\n      result += s.charAt(i);\n      flag = false;\n    }\n  }\n  if (flag) {\n    result += s.charAt(s.length - 1);\n  }\n  return [result, flag];\n};\n\n/*Task\n  Given a string s and an integer n, return true if and only if the string is a palindrome.\n  A palindrome is a string that is read the same backward as forward.\n  Example\n  For s = \"abcde\", n = 2, the result should be true\n  For s = \"abcdef\", n = 5, the result should be false\n  For s = \"abcdedcba\", n = 7, the result should be false\n  For s = \"abcde\", n = 0, the result should be false\n  For s = \"abcde\", n = 1, the result should be true\n  For s = \"abcde\", n = 2, the result should be false\n  For s = \"abcde\", n = 3, the result should be false\n  For s = \"abcde\", n = 4, the result should be false\n  For s = \"abcde\", n = 5, the result should be true\n*/\nconst isPalindrome = (s, n) => {\n  let result = \"\";\n  let flag = true;\n  for (let i = 0; i < s.length - 1; i++) {\n    if (s.charAt(i) === s.charAt(s.length - i - 1)) {\n      result += s.charAt(i);\n      flag = false;\n    }\n  }\n  if (flag) {\n    result += s.charAt(s.length - 1);\n  }\n  return result === s.reverse().toString();\n};\n\n/*Task\n  Given a string s and an integer n, return true if and only if the string is a palindrome.\n  A palindrome is a string that is read the same backward as forward.\n  Example\n  For s = \"abcde\", n = 2, the result should be true\n  For s = \"abcdef\", n = 5, the result should be false\n  For s = \"abcdedcba\", n = 7, the result should be false\n  For s = \"abcde\", n = 0, the result should be false\n  For s = \"abcde\", n = 1, the result should be true\n  For s = \"abcde\", n = 2, the result should be false\n  For s = \"abcde\", n = 3, the result should be false\n  For s = \"abcde\", n = 4, the result should be false\n  For s = \"abcde\", n = 5, the result should be true\n*/\nconst isPalindromeReverse = (s, n) => {\n  let result = \"\";\n  let flag = true;\n  for (let i = 0; i < s.length - 1; i++) {\n    if (s.charAt(i) === s.charAt(s.length - i - 1)) {\n      result += s.charAt(i);\n      flag = false;\n    }\n  }\n  if (flag) {\n    result += s.charAt(s.length - 1);\n  }\n  return result === s.reverse().toString();\n};\n\n/*Task\n  Given a string s and an integer n, return true if and only if the string is a palindrome.\n  A palindrome is a string that is read the same backward as forward.\n  Example\n  For s = \"abcde\", n = 2, the result should be true\n  For s = \"abcdef\", n = 5, the result should be false\n  For s = \"abcdedcba\", n = 7, the result should be false\n  For s = \"abcde\", n = 0, the result should be false\n  For s = \"abcde\", n = 1, the result should be true\n  For s = \"abcde\", n = 2, the result should be false\n  For s = \"abcde\", n = 3, the result should be false\n  For s = \"abcde\", n = 4, the result should be false\n  For s = \"abcde\", n = 5, the result should be true\n*/\nconst isPalindromeReverseReverse = (s, n) => {\n  let result = \"\";\n  let flag = true;\n  for (let i = 0; i < s.length - 1; i++) {\n    if (s.charAt(i) === s.charAt(s.length - i - 1)) {\n      result += s.charAt(i);\n      flag = false;\n    }\n  }\n  if (flag) {\n    result += s.charAt(s.length - 1);\n  }\n  return result === s.reverse().toString();\n};\n\n/*Task\n  Given a string s and an integer n, return true if and only if the string is a palindrome.\n  A palindrome is a string that is read the same backward as forward.\n  Example\n  For s = \"abcde\", n = 2, the result should be true\n  For s = \"abcdef\", n = 5, the result should be false\n  For s = \"abcdedcba\", n = 7, the result should be false\n  For s = \"abcde\", n = 0, the result should be false\n  For s = \"abcde\", n = 1, the result should be true\n  For s = \"abcde\", n = 2, the result should be false\n  For s = \"abcde\", n = 3, the result should be false\n  For s = \"abcde\", n = 4, the result should be false\n  For s = \"abcde\", n = 5, the result should be true\n*/\nconst isPalindromeReverseReverse = (s, n) => {\n  let result = \"\";\n  let flag = true;\n  for (let i = 0; i < s.length - 1; i++) {\n    if (s.charAt(i) === s.charAt(s.length - i - 1)) {\n      result += s.charAt(i);\n      flag = false;\n    }\n  }\n  if (flag) {\n    result += s.charAt(s.length - 1);\n  }\n  return result === s.reverse().toString();\n};\n\n/*Task\n  Given a string s and an integer n, return true if and only if the string is a palindrome.\n  A palindrome is a string that is read the same backward as forward.\n  Example\n  For s = \"abcde\", n = 2, the result should be true\n  For s = \"abcdef\", n = 5, the result should be false\n  For s = \"abcdedcba\", n = 7, the result should be false\n  For s = \"abcde\", n = 0, the result should be false\n  For s = \"abcde\", n = 1, the result should be true\n  For s = \"abcde\", n = 2, the result should be false\n  For s = \"abcde\", n = 3, the result should be false\n  For s = \"abcde\", n = 4, the result should be false\n  For s = \"abcde\", n = 5, the result should be true\n*/\nconst isPalindromeReverseReverseReverse = (s, n) => {\n  let result = \"\";\n  let flag = true;\n  for (let i = 0; i < s.length - 1; i++) {\n    if (s.charAt(i) === s.charAt(s.length - i - 1)) {\n      result += s.charAt(i);\n      flag = false;\n    }\n  }\n  if (flag) {\n    result += s.charAt(s.length - 1);\n  }\n  return result === s.reverse().toString();\n};\n\n/*Task\n  Given a string s and an integer n, return true if and only if the string is a palindrome.\n  A palindrome is a string that is read the same backward as forward.\n  Example\n  For s = \"abcde\", n = 2, the result should be true\n  For s = \"abcdef\", n = 5, the result should be false\n  For s = \"abcdedcba\", n = 7, the result should be false\n  For s = \"abcde\", n = 0, the result should be false\n  For s = \"abcde\", n = 1, the result should be true\n  For s = \"abcde\", n = 2, the result should be false\n  For s = \"abcde\", n = 3, the result should be false\n  For s = \"abcde\", n = 4, the result should be false\n  For s = \"abcde\", n = 5, the result should be true\n*/\nconst isPalindromeReverseReverseReverseReverse = (s, n) => {\n  let result = \"\";\n  let flag = true;\n  for (let i = 0; i < s.length - 1; i++) {\n    if (s.charAt(i) === s.charAt(s.length - i - 1)) {\n      result += s.charAt(", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "gc": "<|endoftext|>/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  let result = [];\n  lst.forEach((str) => {\n    let oddCount = 0;\n    str.split('').forEach((digit) => {\n      if (digit === '1') {\n        oddCount++;\n      }\n    });\n    result.push(oddCount);\n  });\n  return result;\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of even elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of even digits in the i'th string of the input.\n\n  >>> evenCount(['1234567'])\n  [\"the number of even elements 4n the str4ng 4 of the 4nput.\"]\n  >>> evenCount(['3',\"11111111\"])\n  [\"the number of even elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst evenCount = (lst) => {\n  let result = [];\n  lst.forEach((str) => {\n    let evenCount = 0;\n    str.split('').forEach((digit) => {\n      if (digit === '1') {\n        evenCount++;\n      }\n    });\n    result.push(evenCount);\n  });\n  return result;\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of pairs of digits in\n  the string i of the input.\" where all the i's should be replaced by the number\n  of pairs of digits in the i'th string of the input.\n\n  >>> pairCount(['1234567'])\n  [\"the number of pairs of digits 4n the str4ng 4 of the 4nput.\"]\n  >>> pairCount(['3',\"11111111\"])\n  [\"the number of pairs of digits 1n the str1ng 1 of the 1nput.\",\n   \"the number of pairs of digits 8n the str8ng 8 of the 8nput.\"]\n  */\nconst pairCount = (lst) => {\n  let result = [];\n  lst.forEach((str) => {\n    let pairCount = 0;\n    str.split('').forEach((digit) => {\n      if (digit === '1') {\n        pairCount++;\n      }\n    });\n    result.push(pairCount);\n  });\n  return result;\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of triples in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of triples in the i'th string of the input.\n\n  >>> tripleCount(['1234567'])\n  [\"the number of triples 4n the str4ng 4 of the 4nput.\"]\n  >>> tripleCount(['3',\"11111111\"])\n  [\"the number of triples 1n the str1ng 1 of the 1nput.\",\n   \"the number of triples 8n the str8ng 8 of the 8nput.\"]\n  */\nconst tripleCount = (lst) => {\n  let result = [];\n  lst.forEach((str) => {\n    let tripleCount = 0;\n    str.split('').forEach((digit) => {\n      if (digit === '1') {\n        tripleCount++;\n      }\n    });\n    result.push(tripleCount);\n  });\n  return result;\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of fours in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of fours in the i'th string of the input.\n\n  >>> fourCount(['1234567'])\n  [\"the number of fours 4n the str4ng 4 of the 4nput.\"]\n  >>> fourCount(['3',\"11111111\"])\n  [\"the number of fours 1n the str1ng 1 of the 1nput.\",\n   \"the number of fours 8n the str8ng 8 of the 8nput.\"]\n  */\nconst fourCount = (lst) => {\n  let result = [];\n  lst.forEach((str) => {\n    let fourCount = 0;\n    str.split('').forEach((digit) => {\n      if (digit === '1') {\n        fourCount++;\n      }\n    });\n    result.push(fourCount);\n  });\n  return result;\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of fives in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of fives in the i'th string of the input.\n\n  >>> fiveCount(['1234567'])\n  [\"the number of fives 4n the str4ng 4 of the 4nput.\"]\n  >>> fiveCount(['3',\"11111111\"])\n  [\"the number of fives 1n the str1ng 1 of the 1nput.\",\n   \"the number of fives 8n the str8ng 8 of the 8nput.\"]\n  */\nconst fiveCount = (lst) => {\n  let result = [];\n  lst.forEach((str) => {\n    let fiveCount = 0;\n    str.split('').forEach((digit) => {\n      if (digit === '1') {\n        fiveCount++;\n      }\n    });\n    result.push(fiveCount);\n  });\n  return result;\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of six in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of six in the i'th string of the input.\n\n  >>> sixCount(['1234567'])\n  [\"the number of six 4n the str4ng 4 of the 4nput.\"]\n  >>> sixCount(['3',\"11111111\"])\n  [\"the number of six 1n the str1ng 1 of the 1nput.\",\n   \"the number of six 8n the str8ng 8 of the 8nput.\"]\n  */\nconst sixCount = (lst) => {\n  let result = [];\n  lst.forEach((str) => {\n    let sixCount = 0;\n    str.split('').forEach((digit) => {\n      if (digit === '1') {\n        sixCount++;\n      }\n    });\n    result.push(sixCount);\n  });\n  return result;\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of sevens in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of sevens in the i'th string of the input.\n\n  >>> sevenCount(['1234567'])\n  [\"the number of sevens 4n the str4ng 4 of the 4nput.\"]\n  >>> sevenCount(['3',\"11111111\"])\n  [\"the number of sevens 1n the str1ng 1 of the 1nput.\",\n   \"the number of sevens 8n the str8ng 8 of the 8nput.\"]\n  */\nconst sevenCount = (lst) => {\n  let result = [];\n  lst.forEach((", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "gc": "<|endoftext|>/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  const numsArr = nums.slice();\n  let minSum = numsArr.reduce((acc, curr) => {\n    if (acc < curr) {\n      return acc;\n    }\n    return curr;\n  }, 0);\n  for (let i = 0; i < numsArr.length; i++) {\n    minSum = Math.min(minSum, numsArr[i]);\n  }\n  return minSum;\n};\n\n/*\n  Given an array of integers nums, find the maximum sum of any non-empty sub-array\n  of nums.\n  Example\n  maxSubArraySum([2, 3, 4, 1, 2, 4]) == 4\n  maxSubArraySum([-1, -2, -3]) == 3\n  */\nconst maxSubArraySum = (nums) => {\n  const numsArr = nums.slice();\n  let maxSum = numsArr.reduce((acc, curr) => {\n    if (acc > curr) {\n      return acc;\n    }\n    return curr;\n  }, 0);\n  for (let i = 0; i < numsArr.length; i++) {\n    maxSum = Math.max(maxSum, numsArr[i]);\n  }\n  return maxSum;\n};\n\n/*\n  Given an array of integers nums, find the maximum sum of any non-empty sub-array\n  of nums.\n  Example\n  maxSubArraySum([2, 3, 4, 1, 2, 4]) == 4\n  maxSubArraySum([-1, -2, -3]) == 3\n  */\nconst minSubArraySum = (nums) => {\n  const numsArr = nums.slice();\n  let minSum = numsArr.reduce((acc, curr) => {\n    if (acc > curr) {\n      return acc;\n    }\n    return curr;\n  }, 0);\n  for (let i = 0; i < numsArr.length; i++) {\n    minSum = Math.min(minSum, numsArr[i]);\n  }\n  return minSum;\n};\n\n/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst maxSubArraySum = (nums) => {\n  const numsArr = nums.slice();\n  let maxSum = numsArr.reduce((acc, curr) => {\n    if (acc < curr) {\n      return acc;\n    }\n    return curr;\n  }, 0);\n  for (let i = 0; i < numsArr.length; i++) {\n    maxSum = Math.max(maxSum, numsArr[i]);\n  }\n  return maxSum;\n};\n\n/*\n  Given an array of integers nums, find the maximum sum of any non-empty sub-array\n  of nums.\n  Example\n  maxSubArraySum([2, 3, 4, 1, 2, 4]) == 4\n  maxSubArraySum([-1, -2, -3]) == 3\n  */\nconst minSubArraySum = (nums) => {\n  const numsArr = nums.slice();\n  let minSum = numsArr.reduce((acc, curr) => {\n    if (acc > curr) {\n      return acc;\n    }\n    return curr;\n  }, 0);\n  for (let i = 0; i < numsArr.length; i++) {\n    minSum = Math.min(minSum, numsArr[i]);\n  }\n  return minSum;\n};\n\n/*\n  Given an array of integers nums, find the maximum sum of any non-empty sub-array\n  of nums.\n  Example\n  maxSubArraySum([2, 3, 4, 1, 2, 4]) == 4\n  maxSubArraySum([-1, -2, -3]) == 3\n  */\nconst maxSubArraySum = (nums) => {\n  const numsArr = nums.slice();\n  let maxSum = numsArr.reduce((acc, curr) => {\n    if (acc < curr) {\n      return acc;\n    }\n    return curr;\n  }, 0);\n  for (let i = 0; i < numsArr.length; i++) {\n    maxSum = Math.max(maxSum, numsArr[i]);\n  }\n  return maxSum;\n};\n\n/*\n  Given an array of integers nums, find the maximum sum of any non-empty sub-array\n  of nums.\n  Example\n  maxSubArraySum([2, 3, 4, 1, 2, 4]) == 4\n  maxSubArraySum([-1, -2, -3]) == 3\n  */\nconst minSubArraySum = (nums) => {\n  const numsArr = nums.slice();\n  let minSum = numsArr.reduce((acc, curr) => {\n    if (acc > curr) {\n      return acc;\n    }\n    return curr;\n  }, 0);\n  for (let i = 0; i < numsArr.length; i++) {\n    minSum = Math.min(minSum, numsArr[i]);\n  }\n  return minSum;\n};\n\n/*\n  Given an array of integers nums, find the maximum sum of any non-empty sub-array\n  of nums.\n  Example\n  maxSubArraySum([2, 3, 4, 1, 2, 4]) == 4\n  maxSubArraySum([-1, -2, -3]) == 3\n  */\nconst maxSubArraySum = (nums) => {\n  const numsArr = nums.slice();\n  let maxSum = numsArr.reduce((acc, curr) => {\n    if (acc < curr) {\n      return acc;\n    }\n    return curr;\n  }, 0);\n  for (let i = 0; i < numsArr.length; i++) {\n    maxSum = Math.max(maxSum, numsArr[i]);\n  }\n  return maxSum;\n};\n\n/*\n  Given an array of integers nums, find the maximum sum of any non-empty sub-array\n  of nums.\n  Example\n  maxSubArraySum([2, 3, 4, 1, 2, 4]) == 4\n  maxSubArraySum([-1, -2, -3]) == 3\n  */\nconst minSubArraySum = (nums) => {\n  const numsArr = nums.slice();\n  let minSum = numsArr.reduce((acc, curr) => {\n    if (acc > curr) {\n      return acc;\n    }\n    return curr;\n  }, 0);\n  for (let i = 0; i < numsArr.length; i++) {\n    minSum = Math.min(minSum, numsArr[i]);\n  }\n  return minSum;\n};\n\n/*\n  Given an array of integers nums, find the maximum sum of any non-empty sub-array\n  of nums.\n  Example\n  maxSubArraySum([2, 3, 4, 1, 2, 4]) == 4\n  maxSubArraySum([-1, -2, -3]) == 3\n  */\nconst maxSubArraySum = (nums) => {\n  const numsArr = nums.slice();\n  let maxSum = numsArr.reduce((acc, curr) => {\n    if (acc < curr) {\n      return acc;\n    }\n    return curr;\n  }, 0);\n  for (let i = 0; i < numsArr.length; i++) {\n    maxSum = Math.max(maxSum, numsArr[i]);\n  }\n  return maxSum;\n};\n\n/*\n  Given an array of integers nums, find the maximum sum of any non-empty sub-array\n  of nums.\n  Example\n  maxSubArraySum([2, 3, 4, 1, 2, 4]) == 4\n  maxSubArraySum([-1, -2, -3]) == 3\n  */\nconst minSubArraySum = (nums) => {\n  const numsArr = nums.slice();\n  let minSum = numsArr.reduce((acc, curr) => {\n    if (acc > curr) {\n      return acc;\n    }\n    return curr;\n  }, 0);\n  for (let i = 0; i < numsArr.length; i++) {\n    minSum = Math.min(minSum, numsArr[i]);\n  }\n  return minSum;\n};\n\n/*\n  Given an array of integers nums, find the maximum sum of any non-empty sub-array\n  of nums.\n  Example\n  maxSubArraySum", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "gc": "<|endoftext|>/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n  const n = grid.length;\n  let count = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < n; j++) {\n      if (grid[i][j] === 1) {\n        count += 1;\n      }\n    }\n  }\n  return count > capacity? count : maxFill(grid, capacity - count);\n};\n\n/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n  const n = grid.length;\n  let count = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < n; j++) {\n      if (grid[i][j] === 1) {\n        count += 1;\n      }\n    }\n  }\n  return count > capacity? count : maxFill(grid, capacity - count);\n};\n\n/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n  const n = grid.length;\n  let count = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < n; j++) {\n      if (grid[i][j] === 1) {\n        count += 1;\n      }\n    }\n  }\n  return count > capacity? count : maxFill(grid, capacity - count);\n};\n\n/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n  const n = grid.length;\n  let count = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < n; j++) {\n      if (grid[i][j] === 1) {\n        count += 1;\n      }\n    }\n  }\n  return count > capacity? count : maxFill(grid, capacity - count);\n};\n\n/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n  const n = grid.length;\n  let count = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < n; j++) {\n      if (grid[i][j] === 1) {\n        count += 1;\n      }\n    }\n  }\n  return count > capacity? count : maxFill(grid, capacity - count);\n};\n\n/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "gc": "<|endoftext|>/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  const ones = arr.filter(x => x === 1);\n  const onesCount = ones.length;\n  const onesArray = ones.map(x => x.toString(2));\n  const onesArrayLength = onesArray.length;\n  const onesArraySort = onesArray.sort((a, b) => a - b);\n  const onesArraySortLength = onesArraySort.length;\n  const onesArraySortArray = onesArraySort.map(x => parseInt(x, 2));\n  const onesArraySortArrayLength = onesArraySortArray.length;\n  const onesArraySortArraySort = onesArraySortArray.sort((a, b) => a - b);\n  const onesArraySortArraySortLength = onesArraySortArraySort.length;\n  const onesArraySortArraySortArray = onesArraySortArraySort.map(x => parseInt(x, 2));\n  const onesArraySortArraySortArrayLength = onesArraySortArraySortArray.length;\n  const onesArraySortArraySortArraySort = onesArraySortArraySortArray.sort((a, b) => a - b);\n  const onesArraySortArraySortArraySortLength = onesArraySortArraySortArraySort.length;\n  const onesArraySortArraySortArraySortArray = onesArraySortArraySortArraySort.map(x => parseInt(x, 2));\n  const onesArraySortArraySortArraySortArrayLength = onesArraySortArraySortArraySortArray.length;\n  const onesArraySortArraySortArraySortArraySort = onesArraySortArraySortArraySortArray.sort((a, b) => a - b);\n  const onesArraySortArraySortArraySortArrayLength = onesArraySortArraySortArraySortArraySort.length;\n  const onesArraySortArraySortArraySortArraySortArray = onesArraySortArraySortArraySortArraySort.map(x => parseInt(x, 2));\n  const onesArraySortArraySortArraySortArraySortArrayLength = onesArraySortArraySortArraySortArraySortArray.length;\n  const onesArraySortArraySortArraySortArraySortArraySort = onesArraySortArraySortArraySortArraySortArray.sort((a, b) => a - b);\n  const onesArraySortArraySortArraySortArraySortArrayLength = onesArraySortArraySortArraySortArraySortArray.length;\n  const onesArraySortArraySortArraySortArraySortArraySort = onesArraySortArraySortArraySortArraySortArraySort.map(x => parseInt(x, 2));\n  const onesArraySortArraySortArraySortArraySortArrayLength = onesArraySortArraySortArraySortArraySortArray.length;\n  const onesArraySortArraySortArraySortArraySortArraySortArray = onesArraySortArraySortArraySortArraySortArraySort.map(x => parseInt(x, 2));\n  const onesArraySortArraySortArraySortArraySortArraySortArrayLength = onesArraySortArraySortArraySortArraySortArraySortArray.length;\n  const onesArraySortArraySortArraySortArraySortArraySortArraySortArray = onesArraySortArraySortArraySortArraySortArraySortArraySort.map(x => parseInt(x, 2));\n  const onesArraySortArraySortArraySortArraySortArraySortArrayLength = onesArraySortArraySortArraySortArraySortArraySortArray.length;\n  const onesArraySortArraySortArraySortArraySortArraySortArraySortArray = onesArraySortArraySortArraySortArraySortArraySortArraySort.map(x => parseInt(x, 2));\n  const onesArraySortArraySortArraySortArraySortArraySortArraySortArrayLength = onesArraySortArraySortArraySortArraySortArraySortArraySortArray.length;\n  const onesArraySortArraySortArraySortArraySortArraySortArraySortArraySortArray = onesArraySortArraySortArraySortArraySortArraySortArraySortArraySort.map(x => parseInt(x, 2));\n  const onesArraySortArraySortArraySortArraySortArraySortArraySortArraySortArrayLength = onesArraySortArraySortArraySortArraySortArraySortArraySortArray.length;\n  const onesArraySortArraySortArraySortArraySortArraySortArraySortArraySortArray = onesArraySortArraySortArraySortArraySortArraySortArraySortArraySort.map(x => parseInt(x, 2));\n  const onesArraySortArraySortArraySortArraySortArraySortArraySortArraySortArrayLength = onesArraySortArraySortArraySortArraySortArraySortArraySortArray.length;\n  const onesArraySortArraySortArraySortArraySortArraySortArraySortArraySortArray = onesArraySortArraySortArraySortArraySortArraySortArraySortArraySort.map(x => parseInt(x, 2));\n  const onesArraySortArraySortArraySortArraySortArraySortArraySortArraySortArrayLength = onesArraySortArraySortArraySortArraySortArraySortArraySortArray.length;\n  const onesArraySortArraySortArraySortArraySortArraySortArraySortArraySortArray = onesArraySortArraySortArraySortArraySortArraySortArraySortArraySort.map(x => parseInt(x, 2));\n  const onesArraySortArraySortArraySortArraySortArraySortArraySortArraySortArrayLength = onesArraySortArraySortArraySortArraySortArraySortArraySortArray.length;\n  const onesArraySortArraySortArraySortArraySortArraySortArraySortArraySortArray = onesArraySortArraySortArraySortArraySortArraySortArraySortArraySort.map(x => parseInt(x, 2));\n  const onesArraySortArraySortArraySortArraySortArraySortArraySortArraySortArrayLength = onesArraySortArraySortArraySortArraySortArraySortArraySortArray.length;\n  const onesArraySortArraySortArraySortArraySortArraySortArraySortArraySortArray = onesArraySortArraySortArraySortArraySortArraySortArraySortArraySort.map(x => parseInt(x, 2));\n  const onesArraySortArraySortArraySortArraySortArraySortArraySortArraySortArrayLength = onesArraySortArraySortArraySortArraySortArraySortArraySortArray.length;\n  const onesArraySortArraySortArraySortArraySortArraySortArraySortArraySortArray = onesArraySortArraySortArraySortArraySortArraySortArraySortArraySort.map(x => parseInt(x, 2));\n  const onesArraySortArraySortArraySortArraySortArraySortArraySortArraySortArrayLength = onesArraySortArraySortArraySortArraySortArraySortArraySortArray.length;\n  const onesArraySortArraySortArraySortArraySortArraySortArraySortArraySortArray = onesArraySortArraySortArraySortArraySortArraySortArraySort.map(x => parseInt(x, 2));\n  const onesArraySortArraySortArraySortArraySortArraySortArraySortArraySortArrayLength = onesArraySortArraySortArraySortArraySortArraySortArraySortArray.length;\n  const onesArraySortArraySortArraySortArraySortArraySortArraySortArraySortArray = onesArraySortArraySortArraySortArraySortArraySortArraySort.map(x => parseInt(x, 2));\n  const onesArraySortArraySortArraySortArraySortArraySortArraySortArraySortArrayLength = onesArraySortArraySortArraySortArraySortArraySortArraySortArray.length;\n  const onesArraySortArraySortArraySortArraySortArraySortArraySort", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selectWdors(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWdors(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWdors(\"simple white space\", 2) ==> []\n  selectWdors(\"Hello world\", 4) ==> [\"world\"]\n  selectWdors(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWdors = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWdors", "gc": "<|endoftext|>/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selectWdors(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWdors(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWdors(\"simple white space\", 2) ==> []\n  selectWdors(\"Hello world\", 4) ==> [\"world\"]\n  selectWdors(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWdors = (s, n) => {\n  let words = [];\n  let words = s.split(\" \");\n  let word;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let s;\n  let temp;\n  let temp2;\n  let temp3;\n  let temp4;\n  let temp5;\n  let temp6;\n  let temp7;\n  let temp8;\n  let temp9;\n  let temp10;\n  let temp11;\n  let temp12;\n  let temp13;\n  let temp14;\n  let temp15;\n  let temp16;\n  let temp17;\n  let temp18;\n  let temp19;\n  let temp20;\n  let temp21;\n  let temp22;\n  let temp23;\n  let temp24;\n  let temp25;\n  let temp26;\n  let temp27;\n  let temp28;\n  let temp29;\n  let temp30;\n  let temp31;\n  let temp32;\n  let temp33;\n  let temp34;\n  let temp35;\n  let temp36;\n  let temp37;\n  let temp38;\n  let temp39;\n  let temp40;\n  let temp41;\n  let temp42;\n  let temp43;\n  let temp44;\n  let temp45;\n  let temp46;\n  let temp47;\n  let temp48;\n  let temp49;\n  let temp50;\n  let temp51;\n  let temp52;\n  let temp53;\n  let temp54;\n  let temp55;\n  let temp56;\n  let temp57;\n  let temp58;\n  let temp59;\n  let temp60;\n  let temp61;\n  let temp62;\n  let temp63;\n  let temp64;\n  let temp65;\n  let temp66;\n  let temp67;\n  let temp68;\n  let temp69;\n  let temp70;\n  let temp71;\n  let temp72;\n  let temp73;\n  let temp74;\n  let temp75;\n  let temp76;\n  let temp77;\n  let temp78;\n  let temp79;\n  let temp80;\n  let temp81;\n  let temp82;\n  let temp83;\n  let temp84;\n  let temp85;\n  let temp86;\n  let temp87;\n  let temp88;\n  let temp89;\n  let temp90;\n  let temp91;\n  let temp92;\n  let temp93;\n  let temp94;\n  let temp95;\n  let temp96;\n  let temp97;\n  let temp98;\n  let temp99;\n  let temp100;\n  let temp101;\n  let temp102;\n  let temp103;\n  let temp104;\n  let temp105;\n  let temp106;\n  let temp107;\n  let temp108;\n  let temp109;\n  let temp110;\n  let temp111;\n  let temp112;\n  let temp113;\n  let temp114;\n  let temp115;\n  let temp116;\n  let temp117;\n  let temp118;\n  let temp119;\n  let temp120;\n  let temp121;\n  let temp122;\n  let temp123;\n  let temp124;\n  let temp125;\n  let temp126;\n  let temp127;\n  let temp128;\n  let temp129;\n  let temp130;\n  let temp131;\n  let temp132;\n  let temp133;\n  let temp134;\n  let temp135;\n  let temp136;\n  let temp137;\n  let temp138;\n  let temp139;\n  let temp140;\n  let temp141;\n  let temp142;\n  let temp143;\n  let temp144;\n  let temp145;\n  let temp146;\n  let temp147;\n  let temp148;\n  let temp149;\n  let temp150;\n  let temp151;\n  let temp152;\n  let temp153;\n  let temp154;\n  let temp155;\n  let temp156;\n  let temp157;\n  let temp158;\n  let temp159;\n  let temp160;\n  let temp161;\n  let temp162;\n  let temp163;\n  let temp164;\n  let temp165;\n  let temp166;\n  let temp167;\n  let temp168;\n  let temp169;\n  let temp170;\n  let temp171;\n  let temp172;\n  let temp173;\n  let temp174;\n  let temp175;\n  let temp176;\n  let temp177;\n  let temp178;\n  let temp179;\n  let temp180;\n  let temp181;\n  let temp182;\n  let temp183;\n  let temp184;\n  let temp185;\n  let temp186;\n  let temp187;\n  let temp188;\n  let temp189;\n  let temp190;\n  let temp191;\n  let temp192;\n  let temp193;\n  let temp194;\n  let temp195;\n  let temp196;\n  let temp197;\n  let temp198;\n  let temp199;\n  let temp200;\n  let temp201;\n  let temp202;\n  let temp203;\n  let temp204;\n  let temp205;\n  let temp206;\n  let temp207;\n  let temp208;\n  let temp209;\n  let temp210;\n  let temp211;\n  let temp212;\n  let temp213;\n  let temp214;\n  let temp215;\n  let temp216;\n  let temp217;\n  let temp218;\n  let temp219;\n  let temp220;\n  let temp221;\n  let temp222;\n  let temp223;\n  let temp224;\n  let temp225;\n  let temp226;\n  let temp227;\n  let temp228;\n  let temp229;\n  let temp230;\n  let temp231;\n  let temp232;\n  let temp233;\n  let temp234;\n  let temp235;\n  let temp236;\n  let temp237;\n  let temp238;\n  let temp239;\n  let temp240;\n  let temp241;\n  let temp242;\n  let temp243;\n  let temp244;\n  let temp245;\n  let temp246;\n  let temp247;\n  let temp248;\n  let temp249;\n  let temp250;\n  let temp251;\n  let temp252;\n  let temp253;\n  let temp254;\n  let temp255;\n  let temp256;\n  let temp257;\n  let temp258;\n  let temp259;\n  let temp260;\n  let temp261;\n  let temp262;\n  let temp263;\n  let temp264;\n  let temp265;\n  let temp266;\n  let temp267;\n  let temp268;\n  let temp269;\n  let temp270;\n  let temp27", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/118", "prompt": "/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  getClossetVowel(\"yogurt\") ==> \"u\"\n  getClossetVowel(\"FULL\") ==> \"U\"\n  getClossetVowel(\"quick\") ==> \"\"\n  getClossetVowel(\"ab\") ==> \"\"\n  */\nconst getClossetVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClossetVowel", "gc": "<|endoftext|>/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  getClossetVowel(\"yogurt\") ==> \"u\"\n  getClossetVowel(\"FULL\") ==> \"U\"\n  getClossetVowel(\"quick\") ==> \"\"\n  getClossetVowel(\"ab\") ==> \"\"\n  */\nconst getClossetVowel = (word) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let vowelsArray = vowels.map(v => v.toLowerCase());\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLengthIndex = 0;\n  let vowelsArrayIndex2 = 0;\n  let vowelsArrayLengthIndex2 = 0;\n  let vowelsArrayIndex3 = 0;\n  let vowelsArrayLengthIndex3 = 0;\n  let vowelsArrayIndex4 = 0;\n  let vowelsArrayLengthIndex4 = 0;\n  let vowelsArrayIndex5 = 0;\n  let vowelsArrayLengthIndex5 = 0;\n  let vowelsArrayIndex6 = 0;\n  let vowelsArrayLengthIndex6 = 0;\n  let vowelsArrayIndex7 = 0;\n  let vowelsArrayLengthIndex7 = 0;\n  let vowelsArrayIndex8 = 0;\n  let vowelsArrayLengthIndex8 = 0;\n  let vowelsArrayIndex9 = 0;\n  let vowelsArrayLengthIndex9 = 0;\n  let vowelsArrayIndex10 = 0;\n  let vowelsArrayLengthIndex10 = 0;\n  let vowelsArrayIndex11 = 0;\n  let vowelsArrayLengthIndex11 = 0;\n  let vowelsArrayIndex12 = 0;\n  let vowelsArrayLengthIndex12 = 0;\n  let vowelsArrayIndex13 = 0;\n  let vowelsArrayLengthIndex13 = 0;\n  let vowelsArrayIndex14 = 0;\n  let vowelsArrayLengthIndex14 = 0;\n  let vowelsArrayIndex15 = 0;\n  let vowelsArrayLengthIndex15 = 0;\n  let vowelsArrayIndex16 = 0;\n  let vowelsArrayLengthIndex16 = 0;\n  let vowelsArrayIndex17 = 0;\n  let vowelsArrayLengthIndex17 = 0;\n  let vowelsArrayIndex18 = 0;\n  let vowelsArrayLengthIndex18 = 0;\n  let vowelsArrayIndex19 = 0;\n  let vowelsArrayLengthIndex19 = 0;\n  let vowelsArrayIndex20 = 0;\n  let vowelsArrayLengthIndex20 = 0;\n  let vowelsArrayIndex21 = 0;\n  let vowelsArrayLengthIndex21 = 0;\n  let vowelsArrayIndex22 = 0;\n  let vowelsArrayLengthIndex22 = 0;\n  let vowelsArrayIndex23 = 0;\n  let vowelsArrayLengthIndex23 = 0;\n  let vowelsArrayIndex24 = 0;\n  let vowelsArrayLengthIndex24 = 0;\n  let vowelsArrayIndex25 = 0;\n  let vowelsArrayLengthIndex25 = 0;\n  let vowelsArrayIndex26 = 0;\n  let vowelsArrayLengthIndex26 = 0;\n  let vowelsArrayIndex27 = 0;\n  let vowelsArrayLengthIndex27 = 0;\n  let vowelsArrayIndex28 = 0;\n  let vowelsArrayLengthIndex28 = 0;\n  let vowelsArrayIndex29 = 0;\n  let vowelsArrayLengthIndex29 = 0;\n  let vowelsArrayIndex30 = 0;\n  let vowelsArrayLengthIndex30 = 0;\n  let vowelsArrayIndex31 = 0;\n  let vowelsArrayLengthIndex31 = 0;\n  let vowelsArrayIndex32 = 0;\n  let vowelsArrayLengthIndex32 = 0;\n  let vowelsArrayIndex33 = 0;\n  let vowelsArrayLengthIndex33 = 0;\n  let vowelsArrayIndex34 = 0;\n  let vowelsArrayLengthIndex34 = 0;\n  let vowelsArrayIndex35 = 0;\n  let vowelsArrayLengthIndex35 = 0;\n  let vowelsArrayIndex36 = 0;\n  let vowelsArrayLengthIndex36 = 0;\n  let vowelsArrayIndex37 = 0;\n  let vowelsArrayLengthIndex37 = 0;\n  let vowelsArrayIndex38 = 0;\n  let vowelsArrayLengthIndex38 = 0;\n  let vowelsArrayIndex39 = 0;\n  let vowelsArrayLengthIndex39 = 0;\n  let vowelsArrayIndex40 = 0;\n  let vowelsArrayLengthIndex40 = 0;\n  let vowelsArrayIndex41 = 0;\n  let vowelsArrayLengthIndex41 = 0;\n  let vowelsArrayIndex42 = 0;\n  let vowelsArrayLengthIndex42 = 0;\n  let vowelsArrayIndex43 = 0;\n  let vowelsArrayLengthIndex43 = 0;\n  let vowelsArrayIndex44 = 0;\n  let vowelsArrayLengthIndex44 = 0;\n  let vowelsArrayIndex45 = 0;\n  let vowelsArrayLengthIndex45 = 0;\n  let vowelsArrayIndex46 = 0;\n  let vowelsArrayLengthIndex46 = 0;\n  let vowelsArrayIndex47 = 0;\n  let vowelsArrayLengthIndex47 = 0;\n  let vowelsArrayIndex48 = 0;\n  let vowelsArrayLengthIndex48 = 0;\n  let vowelsArrayIndex49 = 0;\n  let vowelsArrayLengthIndex49 = 0;\n  let vowelsArrayIndex50 = 0;\n  let vowelsArrayLengthIndex50 = 0;\n  let vowelsArrayIndex51 = 0;\n  let vowelsArrayLengthIndex51 = 0;\n  let vowelsArrayIndex52 = 0;\n  let vowelsArrayLengthIndex52 = 0;\n  let vowelsArrayIndex53 = 0;\n  let vowelsArrayLengthIndex53 = 0;\n  let vowelsArrayIndex54 = 0;\n  let vowelsArrayLengthIndex54 = 0;\n  let vowelsArrayIndex55 = 0;\n  let vowelsArrayLengthIndex55 = 0;\n  let vowelsArrayIndex56 = 0;\n  let vowelsArrayLengthIndex56 = 0;\n  let vowelsArrayIndex57 = 0;\n  let vowelsArrayLengthIndex57 = 0;\n  let vowelsArrayIndex58 = 0;\n  let vowelsArrayLengthIndex58 = 0;\n  let vowelsArrayIndex59 = 0;\n  let vowelsArrayLengthIndex59 = 0;\n  let vowelsArrayIndex60 = 0;\n  let vowelsArrayLengthIndex60 = 0;\n  let vowelsArrayIndex61 = 0;\n  let vowelsArrayLengthIndex61 = 0;\n  let vowelsArrayIndex62 = 0;\n  let vowelsArrayLengthIndex62 = 0;\n  let vowelsArrayIndex63 = 0;\n  let vowelsArrayLengthIndex63 = 0;\n  let vowelsArrayIndex64 = 0;\n  let vowelsArrayLengthIndex64 = 0;\n  let vowelsArrayIndex65 = 0;\n  let vowelsArrayLengthIndex65 = 0;\n  let vowelsArrayIndex66 = 0;\n  let vowelsArrayLengthIndex66 = 0;\n  let vowelsArrayIndex67 = 0;\n  let vowelsArrayLengthIndex67 = 0;\n  let vowelsArrayIndex68 = 0;\n  let vowelsArrayLengthIndex68 = 0;\n  let vowelsArrayIndex69 = 0;\n  let vowelsArrayLengthIndex69 = 0;\n  let vowelsArrayIndex70 = 0;\n  let vowelsArrayLengthIndex70 = 0;\n  let vowelsArrayIndex71 = 0;\n  let vowelsArrayLengthIndex71 = 0;\n  let vowelsArrayIndex72 = 0;\n  let vowelsArrayLengthIndex72 = 0;\n  let vowelsArrayIndex73 = 0;\n  let vowelsArrayLengthIndex73 = 0;\n  let vowelsArrayIndex74 = 0;\n  let vowelsArrayLengthIndex74 = 0;\n  let vowelsArrayIndex75 = 0;\n  let vowelsArrayLengthIndex75 = 0;\n  let vowelsArrayIndex76 = 0;\n  let vowelsArrayLengthIndex76 = 0;\n  let vowelsArrayIndex77 = 0;\n  let vowelsArrayLengthIndex77 = 0;\n  let vowelsArrayIndex78 = 0;\n  let vowelsArrayLengthIndex78 = 0;\n  let vowelsArrayIndex79 = 0;\n  let vowelsArrayLengthIndex79 = 0;\n  let vowelsArrayIndex80 = 0;\n  let vowelsArrayLengthIndex80", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/119", "prompt": "/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "gc": "<|endoftext|>/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  const stack = [lst[0]];\n  while (stack.length > 0) {\n    const str = stack.pop();\n    if (str[0] === '(') {\n      stack.push(str);\n    } else if (str[str.length - 1] === ')') {\n      stack.push(str.slice(1));\n    } else {\n      return 'No';\n    }\n  }\n  return 'Yes';\n};\n\n/* You are given a string S. Return the number of ways to concatenate S into a\n  new string such that no two substrings contain the same characters in the\n  new string. For example, the string '(())()' has three ways to concatenate it:\n  ('(', ')', '(', ')'). Return the number of ways to concatenate this string.\n  Examples:\n  countConcatenation('(())()') == 3\n  countConcatenation('(())') == 3\n  countConcatenation('()()()') == 3\n  */\nconst countConcatenation = (str) => {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === '(') {\n      count++;\n    } else if (str[i] === ')') {\n      count--;\n    }\n  }\n  return count;\n};\n\n/* You are given a string S. Return the number of ways to concatenate S into a\n  new string such that no two substrings contain the same characters in the\n  new string. For example, the string '(())()' has three ways to concatenate it:\n  ('(', ')', '(', ')'). Return the number of ways to concatenate this string.\n  Examples:\n  countConcatenation('(())()') == 3\n  countConcatenation('(())') == 3\n  countConcatenation('()()()') == 3\n  */\nconst countConcatenation2 = (str, str2) => {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === '(') {\n      count++;\n    } else if (str[i] === ')') {\n      count--;\n    }\n  }\n  for (let i = 0; i < str2.length; i++) {\n    if (str2[i] === '(') {\n      count++;\n    } else if (str2[i] === ')') {\n      count--;\n    }\n  }\n  return count;\n};\n\n/* You are given a string S. Return the number of ways to concatenate S into a\n  new string such that no two substrings contain the same characters in the\n  new string. For example, the string '(())()' has three ways to concatenate it:\n  ('(', ')', '(', ')'). Return the number of ways to concatenate this string.\n  Examples:\n  countConcatenation('(())()') == 3\n  countConcatenation('(())') == 3\n  countConcatenation('()()()') == 3\n  */\nconst countConcatenation3 = (str, str2, str3) => {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === '(') {\n      count++;\n    } else if (str[i] === ')') {\n      count--;\n    }\n  }\n  for (let i = 0; i < str2.length; i++) {\n    if (str2[i] === '(') {\n      count++;\n    } else if (str2[i] === ')') {\n      count--;\n    }\n  }\n  for (let i = 0; i < str3.length; i++) {\n    if (str3[i] === '(') {\n      count++;\n    } else if (str3[i] === ')') {\n      count--;\n    }\n  }\n  return count;\n};\n\n/* You are given a string S. Return the number of ways to concatenate S into a\n  new string such that no two substrings contain the same characters in the\n  new string. For example, the string '(())()' has three ways to concatenate it:\n  ('(', ')', '(', ')'). Return the number of ways to concatenate this string.\n  Examples:\n  countConcatenation('(())()') == 3\n  countConcatenation('(())') == 3\n  countConcatenation('()()()') == 3\n  */\nconst countConcatenation4 = (str, str2, str3, str4) => {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === '(') {\n      count++;\n    } else if (str[i] === ')') {\n      count--;\n    }\n  }\n  for (let i = 0; i < str2.length; i++) {\n    if (str2[i] === '(') {\n      count++;\n    } else if (str2[i] === ')') {\n      count--;\n    }\n  }\n  for (let i = 0; i < str3.length; i++) {\n    if (str3[i] === '(') {\n      count++;\n    } else if (str3[i] === ')') {\n      count--;\n    }\n  }\n  for (let i = 0; i < str4.length; i++) {\n    if (str4[i] === '(') {\n      count++;\n    } else if (str4[i] === ')') {\n      count--;\n    }\n  }\n  return count;\n};\n\n/* You are given a string S. Return the number of ways to concatenate S into a\n  new string such that no two substrings contain the same characters in the\n  new string. For example, the string '(())()' has three ways to concatenate it:\n  ('(', ')', '(', ')'). Return the number of ways to concatenate this string.\n  Examples:\n  countConcatenation('(())()') == 3\n  countConcatenation('(())') == 3\n  countConcatenation('()()()') == 3\n  */\nconst countConcatenation5 = (str, str2, str3, str4, str5) => {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === '(') {\n      count++;\n    } else if (str[i] === ')') {\n      count--;\n    }\n  }\n  for (let i = 0; i < str2.length; i++) {\n    if (str2[i] === '(') {\n      count++;\n    } else if (str2[i] === ')') {\n      count--;\n    }\n  }\n  for (let i = 0; i < str3.length; i++) {\n    if (str3[i] === '(') {\n      count++;\n    } else if (str3[i] === ')') {\n      count--;\n    }\n  }\n  for (let i = 0; i < str4.length; i++) {\n    if (str4[i] === '(') {\n      count++;\n    } else if (str4[i] === ')') {\n      count--;\n    }\n  }\n  for (let i = 0; i < str5.length; i++) {\n    if (str5[i] === '(') {\n      count++;\n    } else if (str5[i] === ')') {\n      count--;\n    }\n  }\n  return count;\n};\n\n/* You are given a string S. Return the number of ways to concatenate S into a\n  new string such that no two substrings contain the same characters in the\n  new string. For example, the string '(())()' has three ways to concatenate it:\n  ('(', ')', '(', ')'). Return the number of ways to concatenate this string.\n  Examples:\n  countConcatenation('(())()') == 3\n  countConcatenation('(())') == 3\n  countConcatenation('()()()') == 3\n  */\nconst countConcatenation6 = (str, str2, str3, str4, str5, str6) => {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === '(') {\n      count++;\n    } else if (str[i] === ')') {\n      count--;\n    }\n  }\n  for (let i = 0; i < str2.length; i++) {\n    if (str2[i] === '(') {\n      count++;\n    } else if (str2[i] === ')') {\n      count--;\n    }", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the longest one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "gc": "<|endoftext|>/* Out of list of strings, return the longest one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (strings.length === 0) {\n    return null\n  }\n  let longestLength = 0\n  let longestString = ''\n  for (let i = 0; i < strings.length; i++) {\n    const string = strings[i]\n    if (string.length > longestLength) {\n      longestString = string\n      longestLength = string.length\n    }\n  }\n  return longestString\n}\n\n/* Given a string, return its reverse (ASCII) representation. Return the empty string if\n  the string is empty.\n  >>> reverse(\"\")\n  ''\n  >>> reverse(\"a\")\n  'a'\n  >>> reverse(\"ab\")\n  'ba'\n  >>> reverse(\"abc\")\n  'cba'\n  */\nconst reverse = (string) => {\n  if (string === '') {\n    return ''\n  }\n  return string.split('').reverse().join('')\n}\n\n/* Given a string, return its lowercase representation. Return the empty string if\n  the string is empty.\n  >>> lower(\"\")\n  ''\n  >>> lower(\"a\")\n  'a'\n  >>> lower(\"ab\")\n  'ab'\n  >>> lower(\"abc\")\n  'abc'\n  */\nconst lower = (string) => {\n  if (string === '') {\n    return ''\n  }\n  return string.split('').map(char => char.toLowerCase()).join('')\n}\n\n/* Given a string, return its uppercase representation. Return the empty string if\n  the string is empty.\n  >>> upper(\"\")\n  ''\n  >>> upper(\"a\")\n  'A'\n  >>> upper(\"ab\")\n  'AB'\n  >>> upper(\"abc\")\n  'ABC'\n  */\nconst upper = (string) => {\n  if (string === '') {\n    return ''\n  }\n  return string.split('').map(char => char.toUpperCase()).join('')\n}\n\n/* Given a string, return its trim representation. Return the empty string if\n  the string is empty.\n  >>> trim(\"\")\n  ''\n  >>> trim(\"a\")\n  'a'\n  >>> trim(\"ab\")\n  'ab'\n  >>> trim(\"abc\")\n  'abc'\n  */\nconst trim = (string) => {\n  if (string === '') {\n    return ''\n  }\n  return string.trim()\n}\n\n/* Given a string, return its trim representation. Return the empty string if\n  the string is empty.\n  >>> trimLeft(\"\")\n  ''\n  >>> trimLeft(\"a\")\n  'a'\n  >>> trimLeft(\"ab\")\n  'ab'\n  >>> trimLeft(\"abc\")\n  'abc'\n  */\nconst trimLeft = (string) => {\n  if (string === '') {\n    return ''\n  }\n  return string.trimLeft()\n}\n\n/* Given a string, return its trim representation. Return the empty string if\n  the string is empty.\n  >>> trimRight(\"\")\n  ''\n  >>> trimRight(\"a\")\n  'a'\n  >>> trimRight(\"ab\")\n  'ab'\n  >>> trimRight(\"abc\")\n  'abc'\n  */\nconst trimRight = (string) => {\n  if (string === '') {\n    return ''\n  }\n  return string.trimRight()\n}\n\n/* Given a string, return its trim representation. Return the empty string if\n  the string is empty.\n  >>> trimBoth(\"\")\n  ''\n  >>> trimBoth(\"a\")\n  'a'\n  >>> trimBoth(\"ab\")\n  'ab'\n  >>> trimBoth(\"abc\")\n  'abc'\n  */\nconst trimBoth = (string) => {\n  if (string === '') {\n    return ''\n  }\n  return string.trim().trim()\n}\n\n/* Given a string, return its reverse (ASCII) representation. Return the empty string if\n  the string is empty.\n  >>> trimBoth(\"\")\n  ''\n  >>> trimBoth(\"a\")\n  'a'\n  >>> trimBoth(\"ab\")\n  'ab'\n  >>> trimBoth(\"abc\")\n  'abc'\n  */\nconst trimBothReverse = (string) => {\n  if (string === '') {\n    return ''\n  }\n  return string.trim().split('').reverse().join('')\n}\n\n/* Given a string, return its lowercase representation. Return the empty string if\n  the string is empty.\n  >>> trimBoth(\"\")\n  ''\n  >>> trimBoth(\"a\")\n  'a'\n  >>> trimBoth(\"ab\")\n  'ab'\n  >>> trimBoth(\"abc\")\n  'abc'\n  */\nconst trimBothLower = (string) => {\n  if (string === '') {\n    return ''\n  }\n  return string.trim().split('').map(char => char.toLowerCase()).join('')\n}\n\n/* Given a string, return its uppercase representation. Return the empty string if\n  the string is empty.\n  >>> trimBoth(\"\")\n  ''\n  >>> trimBoth(\"a\")\n  'a'\n  >>> trimBoth(\"ab\")\n  'AB'\n  >>> trimBoth(\"abc\")\n  'ABC'\n  */\nconst trimBothUpper = (string) => {\n  if (string === '') {\n    return ''\n  }\n  return string.trim().split('').map(char => char.toUpperCase()).join('')\n}\n\n/* Given a string, return its trim representation. Return the empty string if\n  the string is empty.\n  >>> trimBoth(\"\")\n  ''\n  >>> trimBoth(\"a\")\n  'a'\n  >>> trimBoth(\"ab\")\n  'ab'\n  >>> trimBoth(\"abc\")\n  'abc'\n  */\nconst trimBothTrim = (string) => {\n  if (string === '') {\n    return ''\n  }\n  return string.trim().trim()\n}\n\n/* Given a string, return its trim representation. Return the empty string if\n  the string is empty.\n  >>> trimBoth(\"\")\n  ''\n  >>> trimBoth(\"a\")\n  'a'\n  >>> trimBoth(\"ab\")\n  'ab'\n  >>> trimBoth(\"abc\")\n  'abc'\n  */\nconst trimBothTrimLeft = (string) => {\n  if (string === '') {\n    return ''\n  }\n  return string.trim().trimLeft()\n}\n\n/* Given a string, return its trim representation. Return the empty string if\n  the string is empty.\n  >>> trimBoth(\"\")\n  ''\n  >>> trimBoth(\"a\")\n  'a'\n  >>> trimBoth(\"ab\")\n  'ab'\n  >>> trimBoth(\"abc\")\n  'abc'\n  */\nconst trimBothTrimRight = (string) => {\n  if (string === '') {\n    return ''\n  }\n  return string.trim().trimRight()\n}\n\n/* Given a string, return its trim representation. Return the empty string if\n  the string is empty.\n  >>> trimBoth(\"\")\n  ''\n  >>> trimBoth(\"a\")\n  'a'\n  >>> trimBoth(\"ab\")\n  'ab'\n  >>> trimBoth(\"abc\")\n  'abc'\n  */\nconst trimBothTrimBoth = (string) => {\n  if (string === '') {\n    return ''\n  }\n  return string.trim().trim().trim()\n}\n\n/* Given a string, return its trim representation. Return the empty string if\n  the string is empty.\n  >>> trimBoth(\"\")\n  ''\n  >>> trimBoth(\"a\")\n  'a'\n  >>> trimBoth(\"ab\")\n  'ab'\n  >>> trimBoth(\"abc\")\n  'abc'\n  */\nconst trimBoth", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maxmium k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maxmium = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maxmium", "gc": "<|endoftext|>/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maxmium k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maxmium = (arr, k) => {\n  const maxmiumArr = [];\n  let maxmiumIndex = 0;\n  let maxmiumValue = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > maxmiumValue) {\n      maxmiumValue = arr[i];\n      maxmiumIndex = i;\n    }\n  }\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > maxmiumValue) {\n      maxmiumArr.push(maxmiumValue);\n      maxmiumValue = arr[i];\n      maxmiumIndex = i;\n    }\n  }\n  return maxmiumArr.slice(0, k);\n};\n\n// https://leetcode.com/problems/find-the-maximum-subarray-sum-from-an-array/\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @param {number} k\n * @return {number[]}\n */\nvar findMaxSubArraySum = function (head, k) {\n  let maxSum = 0;\n  let maxIndex = 0;\n  let curSum = 0;\n  let curIndex = 0;\n  let curNode = head;\n  while (curNode!== null) {\n    curSum = curSum + curNode.val;\n    curIndex = curIndex + 1;\n    curNode = curNode.next;\n  }\n  for (let i = 0; i < k; i++) {\n    if (curSum > maxSum) {\n      maxSum = curSum;\n      maxIndex = curIndex;\n    }\n  }\n  return maxSum.slice(maxIndex + 1);\n};\n\n// https://leetcode.com/problems/find-the-maximum-subarray-sum-from-an-array/\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @param {number} k\n * @return {number[]}\n */\nvar findMaxSubArraySum = function (head, k) {\n  let maxSum = 0;\n  let maxIndex = 0;\n  let curSum = 0;\n  let curIndex = 0;\n  let curNode = head;\n  while (curNode!== null) {\n    curSum = curSum + curNode.val;\n    curIndex = curIndex + 1;\n    curNode = curNode.next;\n  }\n  for (let i = 0; i < k; i++) {\n    if (curSum > maxSum) {\n      maxSum = curSum;\n      maxIndex = curIndex;\n    }\n  }\n  return maxSum.slice(maxIndex + 1);\n};\n\n// https://leetcode.com/problems/find-the-maximum-subarray-sum-from-an-array/\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @param {number} k\n * @return {number[]}\n */\nvar findMaxSubArraySum = function (head, k) {\n  let maxSum = 0;\n  let maxIndex = 0;\n  let curSum = 0;\n  let curIndex = 0;\n  let curNode = head;\n  while (curNode!== null) {\n    curSum = curSum + curNode.val;\n    curIndex = curIndex + 1;\n    curNode = curNode.next;\n  }\n  for (let i = 0; i < k; i++) {\n    if (curSum > maxSum) {\n      maxSum = curSum;\n      maxIndex = curIndex;\n    }\n  }\n  return maxSum.slice(maxIndex + 1);\n};\n\n// https://leetcode.com/problems/find-the-maximum-subarray-sum-from-an-array/\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @param {number} k\n * @return {number[]}\n */\nvar findMaxSubArraySum = function (head, k) {\n  let maxSum = 0;\n  let maxIndex = 0;\n  let curSum = 0;\n  let curIndex = 0;\n  let curNode = head;\n  while (curNode!== null) {\n    curSum = curSum + curNode.val;\n    curIndex = curIndex + 1;\n    curNode = curNode.next;\n  }\n  for (let i = 0; i < k; i++) {\n    if (curSum > maxSum) {\n      maxSum = curSum;\n      maxIndex = curIndex;\n    }\n  }\n  return maxSum.slice(maxIndex + 1);\n};\n\n// https://leetcode.com/problems/find-the-maximum-subarray-sum-from-an-array/\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @param {number} k\n * @return {number[]}\n */\nvar findMaxSubArraySum = function (head, k) {\n  let maxSum = 0;\n  let maxIndex = 0;\n  let curSum = 0;\n  let curIndex = 0;\n  let curNode = head;\n  while (curNode!== null) {\n    curSum = curSum + curNode.val;\n    curIndex = curIndex + 1;\n    curNode = curNode.next;\n  }\n  for (let i = 0; i < k; i++) {\n    if (curSum > maxSum) {\n      maxSum = curSum;\n      maxIndex = curIndex;\n    }\n  }\n  return maxSum.slice(maxIndex + 1);\n};\n\n// https://leetcode.com/problems/find-the-maximum-subarray-sum-from-an-array/\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @param {number} k\n * @return {number[]}\n */\nvar findMaxSubArraySum = function (head, k) {\n  let maxSum = 0;\n  let maxIndex = 0;\n  let curSum = 0;\n  let curIndex = 0;\n  let curNode = head;\n  while (curNode!== null) {\n    curSum = curSum + curNode.val;\n    curIndex = curIndex + 1;\n    curNode = curNode.next;\n  }\n  for (let i = 0; i < k; i++) {\n    if (curSum > maxSum) {\n      maxSum = curSum;\n      maxIndex = curIndex;\n    }\n  }\n  return maxSum.slice(maxIndex + 1);\n};\n\n// https://leetcode.com/problems/find-the-maximum-subarray-sum-from-an-array/\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @param {number} k\n * @return {number[]}\n */\nvar findMaxSubArraySum = function (head, k) {\n  let maxSum = 0;\n  let maxIndex = 0;\n  let curSum = 0;\n  let curIndex = 0;\n  let curNode = head;\n  while (curNode!== null) {\n    curSum = curSum + curNode.val;\n    curIndex = curIndex + 1;\n    curNode = curNode.next;\n  }\n  for (let i = 0; i < k; i++) {\n    if (curSum > maxSum) {\n      maxSum = curSum;\n      maxIndex = curIndex;\n    }\n  }\n  return maxSum.slice(", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/121", "prompt": "/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "gc": "<|endoftext|>/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 1) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nmodule.exports = {\n  solution,\n};\n\n},{}],3:[function(require,module,exports){\n/*\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "gc": "<|endoftext|>/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    let digit = arr[i].toString();\n    if (digit.length === 1) {\n      sum += parseInt(digit, 10);\n    } else {\n      sum += parseInt(digit.substring(0, digit.length - 1), 10);\n    }\n  }\n  return sum + addElements(arr.slice(k), k);\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most three digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 3\n      Output: 24 # sum of 31 + 4\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    let digit = arr[i].toString();\n    if (digit.length === 1) {\n      sum += parseInt(digit, 10);\n    } else {\n      sum += parseInt(digit.substring(0, digit.length - 1), 10);\n    }\n  }\n  return sum + addElements(arr.slice(k), k);\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most four digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 41 + 5\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    let digit = arr[i].toString();\n    if (digit.length === 1) {\n      sum += parseInt(digit, 10);\n    } else {\n      sum += parseInt(digit.substring(0, digit.length - 1), 10);\n    }\n  }\n  return sum + addElements(arr.slice(k), k);\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most five digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 5\n      Output: 24 # sum of 51 + 6\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    let digit = arr[i].toString();\n    if (digit.length === 1) {\n      sum += parseInt(digit, 10);\n    } else {\n      sum += parseInt(digit.substring(0, digit.length - 1), 10);\n    }\n  }\n  return sum + addElements(arr.slice(k), k);\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most six digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 6\n      Output: 24 # sum of 61 + 7\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    let digit = arr[i].toString();\n    if (digit.length === 1) {\n      sum += parseInt(digit, 10);\n    } else {\n      sum += parseInt(digit.substring(0, digit.length - 1), 10);\n    }\n  }\n  return sum + addElements(arr.slice(k), k);\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most seven digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 7\n      Output: 24 # sum of 71 + 8\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    let digit = arr[i].toString();\n    if (digit.length === 1) {\n      sum += parseInt(digit, 10);\n    } else {\n      sum += parseInt(digit.substring(0, digit.length - 1), 10);\n    }\n  }\n  return sum + addElements(arr.slice(k), k);\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most eight digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 8\n      Output: 24 # sum of 81 + 9\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    let digit = arr[i].toString();\n    if (digit.length === 1) {\n      sum += parseInt(digit, 10);\n    } else {\n      sum += parseInt(digit.substring(0, digit.length - 1), 10);\n    }\n  }\n  return sum + addElements(arr.slice(k), k);\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most nine digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 9\n      Output: 24 # sum of 91 + 10\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    let digit = arr[i].toString();\n    if (digit.length === 1) {\n      sum += parseInt(digit, 10);\n    } else {\n      sum += parseInt(digit.substring(0, digit.length - 1), 10);\n    }\n  }\n  return sum + addElements(arr.slice(k), k);\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most ten digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 10\n      Output: 24 # sum of 101 + 11\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    let digit = arr[i].toString();\n    if (digit.length === 1) {\n      sum += parseInt(digit, 10);\n    } else {\n      sum += parseInt(digit.substring(0, digit.length - 1), 10);\n    }\n  }\n  return sum + addElements(arr.slice(k), k);\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most eleven digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 11\n      Output: 24 # sum of 111 + 12\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    let digit = arr[i].toString();\n    if (digit.length === 1) {\n      sum += parseInt(digit, 10);\n    } else {\n      sum += parseInt(digit.substring(0, digit.length - 1), 10);\n    }\n  }\n  return sum + ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "gc": "<|endoftext|>/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  const collatz = [1, 1];\n  let i = 1;\n  while (collatz[i] <= n) {\n    collatz[i] += collatz[i - 1];\n    i++;\n  }\n  return collatz;\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the even numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getEvenCollatz(5) returns [1, 5, 3] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the even numbers are only 1, 5, and 3.\n  */\nconst getEvenCollatz = (n) => {\n  const collatz = [1, 1];\n  let i = 1;\n  while (collatz[i] <= n) {\n    collatz[i] += collatz[i - 1];\n    i++;\n  }\n  return collatz;\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the prime factors of n.\n\n  The prime factors of n is defined as the set of all prime factors of n. For example, \n  the prime factors of 13195 are 5, 7, 13 and 29.\n\n  Note: \n      1. the prime factors of 13195 are 5, 7, 13, 29.\n      2. the prime factors of 13195 are 5, 7, 13, 29, 11, 13, 17, 3, 7, 13, 29.\n\n  For example:\n  getPrimeFactors(5) returns [5, 7, 13, 29] # The prime factors of 13195 is [5, 7, 13, 29, 11, 13, 17, 3, 7, 13, 29].\n  */\nconst getPrimeFactors = (n) => {\n  const primeFactors = [];\n  let i = 1;\n  while (primeFactors[i] === n) {\n    primeFactors[i] += i;\n    i++;\n  }\n  return primeFactors;\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the prime factors of n that are less than n.\n\n  The prime factors of n is defined as the set of all prime factors of n. For example, \n  the prime factors of 13195 are 5, 7, 13 and 29.\n\n  Note: \n      1. the prime factors of 13195 are 5, 7, 13, 29.\n      2. the prime factors of 13195 are 5, 7, 13, 29, 11, 13, 17, 3, 7, 13, 29.\n\n  For example:\n  getPrimeFactorsLessThan(5) returns [5, 7, 13, 29] # The prime factors of 13195 is [5, 7, 13, 29, 11, 13, 17, 3, 7, 13, 29].\n  */\nconst getPrimeFactorsLessThan = (n) => {\n  const primeFactors = [];\n  let i = 1;\n  while (primeFactors[i] === n) {\n    primeFactors[i] += i;\n    i++;\n  }\n  return primeFactors;\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the prime factors of n that are greater than n.\n\n  The prime factors of n is defined as the set of all prime factors of n. For example, \n  the prime factors of 13195 are 5, 7, 13 and 29.\n\n  Note: \n      1. the prime factors of 13195 are 5, 7, 13, 29.\n      2. the prime factors of 13195 are 5, 7, 13, 29, 11, 13, 17, 3, 7, 13, 29.\n\n  For example:\n  getPrimeFactorsGreaterThan(5) returns [5, 7, 13, 29] # The prime factors of 13195 is [5, 7, 13, 29, 11, 13, 17, 3, 7, 13, 29].\n  */\nconst getPrimeFactorsGreaterThan = (n) => {\n  const primeFactors = [];\n  let i = 1;\n  while (primeFactors[i] === n) {\n    primeFactors[i] += i;\n    i++;\n  }\n  return primeFactors;\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the prime factors of n that are divisible by n.\n\n  The prime factors of n is defined as the set of all prime factors of n. For example, \n  the prime factors of 13195 are 5, 7, 13 and 29.\n\n  Note: \n      1. the prime factors of 13195 are 5, 7, 13, 29.\n      2. the prime factors of 13195 are 5, 7, 13, 29, 11, 13, 17, 3, 7, 13, 29.\n\n  For example:\n  getPrimeFactorsDivisibleBy(5) returns [5, 7, 13, 29] # The prime factors of 13195 is [5, 7, 13, 29, 11, 13, 17, 3, 7, 13, 29].\n  */\nconst getPrimeFactorsDivisibleBy = (n) => {\n  const primeFactors = [];\n  let i = 1;\n  while (primeFactors[i] === n) {\n    primeFactors[i] += i;\n    i++;\n  }\n  return primeFactors;\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the prime factors of n that are less than or equal to n.\n\n  The prime factors of n is defined as the set of all prime factors of n. For example, \n  the prime factors of 13195 are 5, 7, 13 and 29.\n\n  Note: \n      1. the prime factors of 13195 are 5, 7, 13, 29.\n      2. the prime factors of 13195 are 5, 7, 13, 29, 11, 13, 17, 3, 7, 13, 29.\n\n  For example:\n  getPrimeFactorsLessThanOrEqual(5) returns [5, 7, 13, 29] # The prime factors of 13195 is [5, 7, 13, 29, 11, 13, 17, 3, 7, 13, 29].\n  */\nconst getPrimeFactorsLessThanOrEqual = (n) => {\n  const primeFactors = [];\n  let i = 1;\n  while (primeFactors[i] === n) {\n    primeFactors[i] += i;\n    i++;\n  }\n  return primeFactors;\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the prime factors of n that are greater than or equal to n.\n\n  The prime factors of n is defined as the set of all prime factors of n. For example, \n  the prime factors of 13195 are 5, 7, 13 and 29.\n\n  Note: \n      1. the prime factors of 13195 are 5, 7, 13, 29.\n      2. the prime factors of 13195 are 5, 7, 13, 29, 11, 13, 17, 3, 7, 13, 29.\n\n  For example:\n  getPrimeFactorsGreaterThanOrEqual(5) returns [5, 7, 13, 29] # The prime factors of 13195 is [5, 7, 13, 29, 11, 13, 17, 3, 7, 13, 29].\n  */\nconst getPrimeFactorsGreaterThanOrEqual = (n) => {\n  const primeFactors = [];\n  let i = 1;\n  while (primeFactors[i] === n) {", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/124", "prompt": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "gc": "<|endoftext|>/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  const [month, day, year] = date.split('-');\n  const isValid = month >= 1 && month <= 12 && day >= 1 && day <= 31 && year >= 1900 && year <= 2099;\n  return isValid;\n};\n\n/*\n  Given a date string and a date object returns the date object in ISO format\n  if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  date('03-11-2000') => { month: '03', day: '11', year: '2000' }\n\n  date('15-01-2012') => { month: '15', day: '01', year: '2012' }\n\n  date('04-0-2040') => { month: '04', day: '0', year: '2040' }\n\n  date('06-04-2020') => { month: '06', day: '04', year: '2020' }\n\n  date('06/04/2020') => { month: '06', day: '04', year: '2020' }\n  */\nconst date = (date) => {\n  const [month, day, year] = date.split('-');\n  const isValid = month >= 1 && month <= 12 && day >= 1 && day <= 31 && year >= 1900 && year <= 2099;\n  return { month, day, year };\n};\n\n/*\n  Given a date string and a date object returns the date object in ISO format\n  if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  date('03-11-2000') => { month: '03', day: '11', year: '2000' }\n\n  date('15-01-2012') => { month: '15', day: '01', year: '2012' }\n\n  date('04-0-2040') => { month: '04', day: '0', year: '2040' }\n\n  date('06-04-2020') => { month: '06', day: '04', year: '2020' }\n\n  date('06/04/2020') => { month: '06', day: '04', year: '2020' }\n  */\nconst dateISO = (date) => {\n  const [month, day, year] = date.split('-');\n  const isValid = month >= 1 && month <= 12 && day >= 1 && day <= 31 && year >= 1900 && year <= 2099;\n  return { month, day, year };\n};\n\n/*\n  Given a date string and a date object returns the date object in ISO format\n  if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  date('03-11-2000') => { month: '03', day: '11', year: '2000' }\n\n  date('15-01-2012') => { month: '15', day: '01', year: '2012' }\n\n  date('04-0-2040') => { month: '04', day: '0', year: '2040' }\n\n  date('06-04-2020') => { month: '06', day: '04', year: '2020' }\n\n  date('06/04/2020') => { month: '06', day: '04', year: '2020' }\n  */\nconst dateISOWithYear = (date) => {\n  const [month, day, year] = date.split('-');\n  const isValid = month >= 1 && month <= 12 && day >= 1 && day <= 31 && year >= 1900 && year <= 2099;\n  return { month, day, year };\n};\n\n/*\n  Given a date string and a date object returns the date object in ISO format\n  if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  date('03-11-2000') => { month: '03', day: '11', year: '2000' }\n\n  date('15-01-2012') => { month: '15', day: '01', year: '2012' }\n\n  date('04-0-2040') => { month: '04', day: '0', year: '2040' }\n\n  date('06-04-2020') => { month: '06', day: '04', year: '2020' }\n\n  date('06/04/2020') => { month: '06', day: '04', year: '2020' }\n  */\nconst dateISOWithYearAndMonth = (date) => {\n  const [month, day, year] = date.split('-');\n  const isValid = month >= 1 && month <= 12 && day >= 1 && day <= 31 && year >= 1900 && year <= 2099;\n  return { month, day, year };\n};\n\n/*\n  Given a date string and a date object returns the date object in ISO format\n  if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or high", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/125", "prompt": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "gc": "<|endoftext|>/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.split(' ');\n  let result = [];\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  while (i < words.length) {\n    if (words[i].length > 0) {\n      if (words[i].length > 1 && words[i].charAt(0).toLowerCase() === 'a') {\n        count += 1;\n      }\n      if (words[i].length > 1 && words[i].charAt(0).toLowerCase() === 'b') {\n        count += 1;\n      }\n      if (words[i].length > 1 && words[i].charAt(0).toLowerCase() === 'c') {\n        count += 1;\n      }\n      if (words[i].length > 1 && words[i].charAt(0).toLowerCase() === 'd') {\n        count += 1;\n      }\n      if (words[i].length > 1 && words[i].charAt(0).toLowerCase() === 'e') {\n        count += 1;\n      }\n      if (words[i].length > 1 && words[i].charAt(0).toLowerCase() === 'f') {\n        count += 1;\n      }\n      if (words[i].length > 1 && words[i].charAt(0).toLowerCase() === 'g') {\n        count += 1;\n      }\n      if (words[i].length > 1 && words[i].charAt(0).toLowerCase() === 'h') {\n        count += 1;\n      }\n      if (words[i].length > 1 && words[i].charAt(0).toLowerCase() === 'i') {\n        count += 1;\n      }\n      if (words[i].length > 1 && words[i].charAt(0).toLowerCase() === 'j') {\n        count += 1;\n      }\n      if (words[i].length > 1 && words[i].charAt(0).toLowerCase() === 'k') {\n        count += 1;\n      }\n      if (words[i].length > 1 && words[i].charAt(0).toLowerCase() === 'l') {\n        count += 1;\n      }\n      if (words[i].length > 1 && words[i].charAt(0).toLowerCase() ==='m') {\n        count += 1;\n      }\n      if (words[i].length > 1 && words[i].charAt(0).toLowerCase() === 'n') {\n        count += 1;\n      }\n      if (words[i].length > 1 && words[i].charAt(0).toLowerCase() === 'o') {\n        count += 1;\n      }\n      if (words[i].length > 1 && words[i].charAt(0).toLowerCase() === 'p') {\n        count += 1;\n      }\n      if (words[i].length > 1 && words[i].charAt(0).toLowerCase() === 'q') {\n        count += 1;\n      }\n      if (words[i].length > 1 && words[i].charAt(0).toLowerCase() === 'r') {\n        count += 1;\n      }\n      if (words[i].length > 1 && words[i].charAt(0).toLowerCase() ==='s') {\n        count += 1;\n      }\n      if (words[i].length > 1 && words[i].charAt(0).toLowerCase() === 't') {\n        count += 1;\n      }\n      if (words[i].length > 1 && words[i].charAt(0).toLowerCase() === 'u') {\n        count += 1;\n      }\n      if (words[i].length > 1 && words[i].charAt(0).toLowerCase() === 'v') {\n        count += 1;\n      }\n      if (words[i].length > 1 && words[i].charAt(0).toLowerCase() === 'w') {\n        count += 1;\n      }\n      if (words[i].length > 1 && words[i].charAt(0).toLowerCase() === 'x') {\n        count += 1;\n      }\n      if (words[i].length > 1 && words[i].charAt(0).toLowerCase() === 'y') {\n        count += 1;\n      }\n      if (words[i].length > 1 && words[i].charAt(0).toLowerCase() === 'z') {\n        count += 1;\n      }\n      if (words[i].length > 1 && words[i].charAt(0).toLowerCase() === '{') {\n        count += 1;\n      }\n      if (words[i].length > 1 && words[i].charAt(0).toLowerCase() === '}') {\n        count += 1;\n      }\n      if (words[i].length > 1 && words[i].charAt(0).toLowerCase() === '[') {\n        count += 1;\n      }\n      if (words[i].length > 1 && words[i].charAt(0).toLowerCase() === ']') {\n        count += 1;\n      }\n      if (words[i].length > 1 && words[i].charAt(0).toLowerCase() === '(') {\n        count += 1;\n      }\n      if (words[i].length > 1 && words[i].charAt(0).toLowerCase() === '[') {\n        count += 1;\n      }\n      if (words[i].length > 1 && words[i].charAt(0).toLowerCase() === '(') {\n        count += 1;\n      }\n      if (words[i].length > 1 && words[i].charAt(0).toLowerCase() === '{') {\n        count += 1;\n      }\n      if (words[i].length > 1 && words[i].charAt(0).toLowerCase() === '}') {\n        count += 1;\n      }\n      if (words[i].length > 1 && words[i].charAt(0).toLowerCase() === '[') {\n        count += 1;\n      }\n      if (words[i].length > 1 && words[i].charAt(0).toLowerCase() === ']') {\n        count += 1;\n      }\n      if (words[i].length > 1 && words[i].charAt(0).toLowerCase() === '(') {\n        count += 1;\n      }\n      if (words[i].length > 1 && words[i].charAt(0).toLowerCase() === '[') {\n        count += 1;\n      }\n      if (words[i].length > 1 && words[i].charAt(0).toLowerCase() === '(') {\n        count += 1;\n      }\n      if (words[i].length > 1 && words[i].charAt(0).toLowerCase() === '{') {\n        count += 1;\n      }\n      if (words[i].length > 1 && words[i].charAt(0).toLowerCase() === '}') {\n        count += 1;\n      }\n      if (words[i].length > 1 && words[i].charAt(0).toLowerCase() === '[') {\n        count += 1;\n      }\n      if (words[i].length > 1 && words[i].charAt(0).toLowerCase() === ']') {\n        count += 1;\n      }\n      if (words[i].length > 1 && words[i].charAt(0).toLowerCase() === '(') {\n        count += 1;\n      }\n      if (words[i].length > 1 && words[i].charAt(0).toLowerCase() === '[') {\n        count += 1;\n      }\n      if (words[i].length > 1 && words[i].charAt(0).toLowerCase() === '(') {\n        count += 1;\n      }\n      if (words[i].length > 1 && words[i].charAt(0).toLowerCase() === '{') {\n        count += 1;\n      }\n      if (words[i].length > 1 && words[i].charAt(0).toLowerCase() === '}') {\n        count += 1;\n      }\n      if (words[i].length > 1 && words[i].charAt(0).toLowerCase() === '[') {\n        count += 1;\n      }\n      if (words[i].length > 1 && words[i].charAt(0).toLowerCase() === ']') {\n        count += 1;\n      }\n      if (words[i].length > 1 && words[i].charAt(0).toLowerCase() === '(') {\n        count += 1;\n      }\n      if (words[i].length > 1 && words[i].charAt(0).toLowerCase() === '[') {\n        count += 1;\n      }\n      if (words[i].length > 1 && words[i].charAt(0).toLowerCase() === '(') {\n        count += 1;\n      }\n      if (words[i].length > 1 && words[i].charAt(0).toLowerCase() === '{') {\n        count += 1;\n      }\n      if (words[i].length > 1 && words[i].charAt(0).toLowerCase() === '}') {\n        count += 1;\n      }\n      if (words[i].length > 1 && words[i].charAt(0).toLowerCase() === '[') {\n        count += 1;\n      }\n      if (words[i].length > 1 && words[i].charAt(0).toLowerCase() === ']') {\n        count += 1;\n      }\n      if (words[i].length > 1 && words[i].charAt(0).toLowerCase() === '(') {\n        count += 1;\n      }\n      if (words[i].length > 1 && words[i].charAt(0).toLowerCase() === '[') {\n        count += 1;\n      }\n      if (word", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "gc": "<|endoftext|>/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  const sorted = new Set()\n  for (let i = 0; i < lst.length; i++) {\n    if (sorted.has(lst[i])) {\n      return false\n    }\n    sorted.add(lst[i])\n  }\n  return true\n}\n\n// Given a list of numbers, return whether or not they are sorted\n// descending order. If list has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// isSorted([5, 6, 7]) ➞ false\n// isSorted([6, 5, 7]) ➞ true\n// isSorted([6, 5, 7, 4]) ➞ true\n// isSorted([6, 5, 7, 4, 3]) ➞ false\n// isSorted([6, 5, 7, 4, 3, 2]) ➞ true\n// isSorted([6, 5, 7, 4, 3, 2, 1]) ➞ false\n// isSorted([6, 5, 7, 4, 3, 2, 1]) ➞ false\n// isSorted([6, 5, 7, 4, 3, 2, 1]) ➞ false\n// isSorted([6, 5, 7, 4, 3, 2, 1]) ➞ false\n// isSorted([6, 5, 7, 4, 3, 2, 1]) ➞ false\n// isSorted([6, 5, 7, 4, 3, 2, 1]) ➞ false\n// isSorted([6, 5, 7, 4, 3, 2, 1]) ➞ false\n// isSorted([6, 5, 7, 4, 3, 2, 1]) ➞ false\n// isSorted([6, 5, 7, 4, 3, 2, 1]) ➞ false\n// isSorted([6, 5, 7, 4, 3, 2, 1]) ➞ false\n// isSorted([6, 5, 7, 4, 3, 2, 1]) ➞ false\n// isSorted([6, 5, 7, 4, 3, 2, 1]) ➞ false\n// isSorted([6, 5, 7, 4, 3, 2, 1]) ➞ false\n// isSorted([6, 5, 7, 4, 3, 2, 1]) ➞ false\n// isSorted([6, 5, 7, 4, 3, 2, 1]) ➞ false\n// isSorted([6, 5, 7, 4, 3, 2, 1]) ➞ false\n// isSorted([6, 5, 7, 4, 3, 2, 1]) ➞ false\n// isSorted([6, 5, 7, 4, 3, 2, 1]) ➞ false\n// isSorted([6, 5, 7, 4, 3, 2, 1]) ➞ false\n// isSorted([6, 5, 7, 4, 3, 2, 1]) ➞ false\n// isSorted([6, 5, 7, 4, 3, 2, 1]) ➞ false\n// isSorted([6, 5, 7, 4, 3, 2, 1]) ➞ false\n// isSorted([6, 5, 7, 4, 3, 2, 1]) ➞ false\n// isSorted([6, 5, 7, 4, 3, 2, 1]) ➞ false\n// isSorted([6, 5, 7, 4, 3, 2, 1]) ➞ false\n// isSorted([6, 5, 7, 4, 3, 2, 1]) ➞ false\n// isSorted([6, 5, 7, 4, 3, 2, 1]) ➞ false\n// isSorted([6, 5, 7, 4, 3, 2, 1]) ➞ false\n// isSorted([6, 5, 7, 4, 3, 2, 1]) ➞ false\n// isSorted([6, 5, 7, 4, 3, 2, 1]) ➞ false\n// isSorted([6, 5, 7, 4, 3, 2, 1]) ➞ false\n// isSorted([6, 5, 7, 4, 3, 2, 1]) ➞ false\n// isSorted([6, 5, 7, 4, 3, 2, 1]) ➞ false\n// isSorted([6, 5, 7, 4, 3, 2, 1]) ➞ false\n// isSorted([6, 5, 7, 4, 3, 2, 1]) ➞ false\n// isSorted([6, 5, 7, 4, 3, 2, 1]) ➞ false\n// isSorted([6, 5, 7, 4, 3, 2, 1]) ➞ false\n// isSorted([6, 5, 7, 4, 3, 2, 1]) ➞ false\n// isSorted([6, 5, 7, 4, 3, 2, 1]) ➞ false\n// isSorted([6, 5, 7, 4, 3, 2, 1]) ➞ false\n// isSorted([6, 5, 7, 4, 3, 2, 1]) ➞ false\n// isSorted([6, 5, 7, 4, 3, 2, 1]) ➞ false\n// isSorted([6, 5, 7, 4, 3, 2, 1]) ➞ false\n// isSorted([6, 5, 7, 4, 3, 2, 1]) ➞ false\n// isSorted([6, 5, 7, 4, 3, 2, 1]) ➞ false\n// isSorted([6, 5, 7, 4, 3, 2, 1]) ➞ false\n// isSorted([6, 5, 7, 4, 3, 2, 1]) ➞ false\n// isSorted([6, 5, 7, 4, 3, 2, 1]) ➞ false\n// isSorted([6, 5, 7, 4, 3, 2, 1]) ➞ false\n// isSorted([6, 5, 7, 4, 3, 2, 1]) ➞ false\n// isSorted([6, 5, 7, 4, 3, 2, 1]) ➞ false\n// isSorted([6, 5, 7, 4, 3, 2, 1]) ➞ false\n// isSorted([6, 5, 7, 4, 3, 2, 1]) ➞ false\n// isSorted([6, 5, 7, 4, 3, 2, 1]) ➞ false\n// isSorted([6, 5, 7, 4, 3, 2, 1]) ➞ false\n// isSorted([6, 5, 7, 4, 3, 2, 1]) ➞ false\n// isSorted([6, 5, 7, 4, 3, 2, 1]) ➞ false\n// isSorted([6, 5, 7, 4, 3, 2, 1]) ➞ false\n// isSorted([6, 5, 7, 4, 3, 2, 1]) ➞ false\n// isSorted([6, 5, 7, 4, 3, 2, 1]) ➞ false\n// isSorted([6, 5, 7, 4, 3, 2, 1]) ➞ false\n// isSorted([6, 5, 7, 4, 3, 2, 1]) ➞ false\n// isSorted([6, 5, 7, 4, 3, 2, 1]) ➞ false\n// isSorted([6, 5, 7, 4, 3, 2, 1]) ➞ false\n// isSorted([6, 5, 7, 4, 3, 2, 1]) ➞ false\n// isSorted([6, 5, 7, 4, 3, 2, 1]) ➞ false\n// isSorted([6, 5, 7, 4, 3, 2, 1]) ➞ false\n// isSorted([6, 5, 7, 4, 3, 2, 1]", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/127", "prompt": "/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "gc": "<|endoftext|>/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  const [start1, end1] = interval1;\n  const [start2, end2] = interval2;\n  if (start1 < start2) {\n    return intersection(interval2, interval1);\n  }\n  if (end1 < end2) {\n    return intersection(interval1, interval2);\n  }\n  if (start1 > end2) {\n    return intersection(interval2, interval1);\n  }\n  if (end1 > start2) {\n    return intersection(interval1, interval2);\n  }\n  return false;\n};\n\n/*\n  [input] intervals: an array of intervals\n  [output] the length of intersection of intervals\n  \n  Example:\n  intervals = [[1, 2], [2, 3], [3, 5], [4, 6], [5, 7], [6, 8], [7, 9]]\n  \n  Output: 3\n  \n  Explanation: \n  intervals = [[1, 2], [2, 3], [3, 5], [4, 6], [5, 7], [6, 8], [7, 9]]\n  \n  intervals = [[1, 2], [2, 3], [3, 5], [4, 6], [5, 7], [6, 8], [7, 9]]\n  \n  Output: 3\n  \n  Explanation: \n  intervals = [[1, 2], [2, 3], [3, 5], [4, 6], [5, 7], [6, 8], [7, 9]]\n  \n  Output: NO\n  \n  Explanation: \n  intervals = [[1, 2], [2, 3], [3, 5], [4, 6], [5, 7], [6, 8], [7, 9]]\n  \n  Output: NO\n  \n  Explanation: \n  intervals = [[1, 2], [2, 3], [3, 5], [4, 6], [5, 7], [6, 8], [7, 9]]\n  \n  Output: NO\n  \n  Explanation: \n  intervals = [[1, 2], [2, 3], [3, 5], [4, 6], [5, 7], [6, 8], [7, 9]]\n  \n  Output: NO\n  \n  Explanation: \n  intervals = [[1, 2], [2, 3], [3, 5], [4, 6], [5, 7], [6, 8], [7, 9]]\n  \n  Output: NO\n  \n  Explanation: \n  intervals = [[1, 2], [2, 3], [3, 5], [4, 6], [5, 7], [6, 8], [7, 9]]\n  \n  Output: NO\n  \n  Explanation: \n  intervals = [[1, 2], [2, 3], [3, 5], [4, 6], [5, 7], [6, 8], [7, 9]]\n  \n  Output: NO\n  \n  Explanation: \n  intervals = [[1, 2], [2, 3], [3, 5], [4, 6], [5, 7], [6, 8], [7, 9]]\n  \n  Output: NO\n  \n  Explanation: \n  intervals = [[1, 2], [2, 3], [3, 5], [4, 6], [5, 7], [6, 8], [7, 9]]\n  \n  Output: NO\n  \n  Explanation: \n  intervals = [[1, 2], [2, 3], [3, 5], [4, 6], [5, 7], [6, 8], [7, 9]]\n  \n  Output: NO\n  \n  Explanation: \n  intervals = [[1, 2], [2, 3], [3, 5], [4, 6], [5, 7], [6, 8], [7, 9]]\n  \n  Output: NO\n  \n  Explanation: \n  intervals = [[1, 2], [2, 3], [3, 5], [4, 6], [5, 7], [6, 8], [7, 9]]\n  \n  Output: NO\n  \n  Explanation: \n  intervals = [[1, 2], [2, 3], [3, 5], [4, 6], [5, 7], [6, 8], [7, 9]]\n  \n  Output: NO\n  \n  Explanation: \n  intervals = [[1, 2], [2, 3], [3, 5], [4, 6], [5, 7], [6, 8], [7, 9]]\n  \n  Output: NO\n  \n  Explanation: \n  intervals = [[1, 2], [2, 3], [3, 5], [4, 6], [5, 7], [6, 8], [7, 9]]\n  \n  Output: NO\n  \n  Explanation: \n  intervals = [[1, 2], [2, 3], [3, 5], [4, 6], [5, 7], [6, 8], [7, 9]]\n  \n  Output: NO\n  \n  Explanation: \n  intervals = [[1, 2], [2, 3], [3, 5], [4, 6], [5, 7], [6, 8], [7, 9]]\n  \n  Output: NO\n  \n  Explanation: \n  intervals = [[1, 2], [2, 3], [3, 5], [4, 6], [5, 7], [6, 8], [7, 9]]\n  \n  Output: NO\n  \n  Explanation: \n  intervals = [[1, 2], [2, 3], [3, 5], [4, 6], [5, 7], [6, 8], [7, 9]]\n  \n  Output: NO\n  \n  Explanation: \n  intervals = [[1, 2], [2, 3], [3, 5], [4, 6], [5, 7], [6, 8], [7, 9]]\n  \n  Output: NO\n  \n  Explanation: \n  intervals = [[1, 2], [2, 3], [3, 5], [4, 6], [5, 7], [6, 8], [7, 9]]\n  \n  Output: NO\n  \n  Explanation: \n  intervals = [[1, 2], [2, 3], [3, 5], [4, 6], [5, 7], [6, 8], [7, 9]]\n  \n  Output: NO\n  \n  Explanation: \n  intervals = [[1, 2], [2, 3], [3, 5], [4, 6], [5, 7], [6, 8], [7, 9]]\n  \n  Output: NO\n  \n  Explanation: \n  intervals = [[1, 2], [2, 3], [3, 5], [4, 6], [5, 7], [6, 8], [7, 9]]\n  \n  Output: NO\n  \n  Explanation: \n  intervals = [[1, 2], [2, 3], [3, 5], [4, 6], [5, 7], [6, 8], [7, 9]]\n  \n  Output: NO\n  \n  Explanation: \n  intervals = [[1, 2], [2, 3], [3, 5], [4, 6], [5, 7], [6, 8], [7, 9]]\n  \n  Output: NO\n  \n  Explanation: \n  intervals = [[1, 2], [2, 3], [3, 5], [4, 6], [5, 7], [6, 8], [7, 9]]\n  \n  Output: NO\n  \n  Explanation: \n  intervals = [[1, 2], [2, 3], [3, 5], [4, 6], [5, 7], [6, 8], [7, 9]]\n  \n  Output: NO\n  \n  Explanation: \n  intervals = [[1, 2], [2, 3], [3, 5], [4, 6], [5, 7], [6, 8], [7, 9]]\n  \n  Output: NO\n  \n  Explanation: \n  intervals = [[1, 2], [2, 3], [3, 5], [4, 6], [5, 7], [6, 8], [7, 9", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/128", "prompt": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodSigsn([1, 2, 2, -4]) == -9\n  >>> prodSigsn([0, 1]) == 0\n  >>> prodSigsn([]) == null\n  */\nconst prodSigsn = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigsn", "gc": "<|endoftext|>/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodSigsn([1, 2, 2, -4]) == -9\n  >>> prodSigsn([0, 1]) == 0\n  >>> prodSigsn([]) == null\n  */\nconst prodSigsn = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.sign(arr[i]);\n  }\n  return sum;\n};\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of absolute values of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> absSigsn([1, 2, 2, -4]) == 9\n  >>> absSigsn([0, 1]) == -1\n  >>> absSigsn([]) == null\n  */\nconst absSigsn = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += Math.abs(arr[i]);\n  }\n  return sum;\n};\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of squares of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> sqSigsn([1, 2, 2, -4]) == 16\n  >>> sqSigsn([0, 1]) == 4\n  >>> sqSigsn([]) == null\n  */\nconst sqSigsn = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * arr[i];\n  }\n  return sum;\n};\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of cubes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> cubeSigsn([1, 2, 2, -4]) == 64\n  >>> cubeSigsn([0, 1]) == 9\n  >>> cubeSigsn([]) == null\n  */\nconst cubeSigsn = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.pow(arr[i], 3);\n  }\n  return sum;\n};\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of squares of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> sqSigsn([1, 2, 2, -4]) == 16\n  >>> sqSigsn([0, 1]) == 4\n  >>> sqSigsn([]) == null\n  */\nconst sqSigsn = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * arr[i];\n  }\n  return sum;\n};\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of cubes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> cubeSigsn([1, 2, 2, -4]) == 64\n  >>> cubeSigsn([0, 1]) == 9\n  >>> cubeSigsn([]) == null\n  */\nconst cubeSigsn = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.pow(arr[i], 3);\n  }\n  return sum;\n};\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of squares of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> sqSigsn([1, 2, 2, -4]) == 16\n  >>> sqSigsn([0, 1]) == 4\n  >>> sqSigsn([]) == null\n  */\nconst sqSigsn = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * arr[i];\n  }\n  return sum;\n};\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of cubes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> cubeSigsn([1, 2, 2, -4]) == 64\n  >>> cubeSigsn([0, 1]) == 9\n  >>> cubeSigsn([]) == null\n  */\nconst cubeSigsn = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.pow(arr[i], 3);\n  }\n  return sum;\n};\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of squares of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> sqSigsn([1, 2, 2, -4]) == 16\n  >>> sqSigsn([0, 1]) == 4\n  >>> sqSigsn([]) == null\n  */\nconst sqSigsn = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * arr[i];\n  }\n  return sum;\n};\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of squares of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> sqSigsn([1, 2, 2, -4]) == 16\n  >>> sqSigsn([0, 1]) == 4\n  >>> sqSigsn([]) == null\n  */\nconst sqSigsn = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * arr[i];\n  }\n  return sum;\n};\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of squares of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> sqSigsn([1, 2, 2, -4]) == 16\n  >>> sqSigsn([0, 1]) == 4\n  >>> sqSigsn([]) == null\n  */\nconst sqSigsn = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * arr[i];\n  }\n  return sum;\n};\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of squares of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> sqSigsn([1, 2, 2, -4]) == 16\n  >>> sqSigsn([0, 1]) == 4\n  >>> sqSigsn([]) == null\n  */\nconst sqSigsn = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * arr[i];\n  }\n  return sum;\n};\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of squares of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> sqSigsn([1, 2, 2, -4]) == 16\n  >>> sqSigsn([0, 1]) == 4\n  >>> sqSigsn([]) == null\n  */\nconst sqSigsn = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * arr[i];\n  }", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "gc": "<|endoftext|>/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  const lst_A = new Array(grid.length).fill(0);\n  const lst_B = new Array(grid.length).fill(0);\n  lst_A[0] = 1;\n  lst_B[0] = 1;\n  for (let i = 1; i < grid.length; i++) {\n    const lst_A_i = lst_A[i];\n    const lst_B_i = lst_B[i];\n    for (let j = 0; j < grid[i].length; j++) {\n      const lst_A_j = lst_A[j];\n      const lst_B_j = lst_B[j];\n      if (lst_A_i < lst_B_j || lst_A_i > lst_B_i || lst_A_j < lst_B_i || lst_A_j > lst_B_j) {\n        lst_A[j] = lst_B[j];\n        lst_B[j] = lst_A[j];\n      } else {\n        lst_A[j] = lst_B[j];\n        lst_B[j] = lst_A[j];\n      }\n    }\n  }\n  const lst_A_sorted = lst_A.sort((a, b) => a - b);\n  const lst_B_sorted = lst_B.sort((a, b) => a - b);\n  const lst_A_unique = lst_A_sorted.filter(\n    v => lst_A_unique.indexOf(v) === -1\n  );\n  const lst_B_unique = lst_B_sorted.filter(\n    v => lst_B_unique.indexOf(v) === -1\n  );\n  return lst_A_unique.concat(lst_B_unique);\n};\n\n/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath_2 = grid => {\n  const lst_A = new Array(grid.length).fill(0);\n  const lst_B = new Array(grid.length).fill(0);\n  lst_A[0] = 1;\n  lst_B[0] = 1;\n  for (let i = 1; i < grid.length; i++) {\n    const lst_A_i = lst_A[i];\n    const lst_B_i = lst_B[i];\n    for (let j = 0; j < grid[i].length; j++) {\n      const lst_A_j = lst_A[j];\n      const lst_B_j = lst_B[j];\n      if (lst_A_i < lst_B_j || lst_A_i > lst_B_i || lst_A_j < lst_B_i || lst_A_j > lst_B_j) {\n        lst_A[j] = lst_B[j];\n        lst_B[j] = lst_A[j];\n      } else {\n        lst_A[j] = lst_B[j];\n        lst_B[j] = lst_A[j];\n      }\n    }\n  }\n  const lst_A_sorted = lst_A.sort((a, b) => a - b);\n  const lst_B_sorted = lst_B.sort((a, b) => a - b);\n  const lst_A_unique = lst_A_sorted.filter(\n    v => lst_A_unique.indexOf(v) === -1\n  );\n  const lst_B_unique = lst_B_sorted.filter(\n    v => lst_B_unique.indexOf(v) === -1\n  );\n  return lst_A_unique.concat(lst_B_unique);\n};\n\n/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/13", "prompt": "/* Return a greatest common divisor of two integers a and b\n  >>> rgeatestCommonDivisor(3, 5)\n  1\n  >>> rgeatestCommonDivisor(25, 15)\n  5\n  */\nconst rgeatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "rgeatestCommonDivisor", "gc": "<|endoftext|>/* Return a greatest common divisor of two integers a and b\n  >>> rgeatestCommonDivisor(3, 5)\n  1\n  >>> rgeatestCommonDivisor(25, 15)\n  5\n  */\nconst rgeatestCommonDivisor = (a, b) => {\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tir(1) = 3\n  tir(n) = 1 + n / 2, if n is even.\n  tir(n) =  tir(n - 1) + tir(n - 2) + tir(n + 1), if n is odd.\n  For example:\n  tir(2) = 1 + (2 / 2) = 2\n  tir(4) = 3\n  tir(3) = tir(2) + tir(1) + tir(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tir(3) = [1, 3, 2, 8]\n  */\nconst tir = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tir", "gc": "<|endoftext|>/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tir(1) = 3\n  tir(n) = 1 + n / 2, if n is even.\n  tir(n) =  tir(n - 1) + tir(n - 2) + tir(n + 1), if n is odd.\n  For example:\n  tir(2) = 1 + (2 / 2) = 2\n  tir(4) = 3\n  tir(3) = tir(2) + tir(1) + tir(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tir(3) = [1, 3, 2, 8]\n  */\nconst tir = (n) => {\n  if (n <= 1) return [];\n  if (n <= 2) return [1];\n  if (n <= 3) return [1, 1, 1];\n  return [tir(n - 1) + tir(n - 2) + tir(n + 1)];\n};\n\n/*\n  Given a non-negative integer n, return the sum of the first n numbers of the \n  Fibonacci sequence.\n  Examples:\n  fib(5) = 1 + 2 + 3 + 5 + 7 = 28\n  fib(3) = 1 + 2 + 3 + 5 + 7 = 28\n  fib(4) = 1 + 2 + 3 + 5 + 7 = 28\n  fib(6) = 1 + 2 + 3 + 5 + 7 = 28\n  fib(7) = 1 + 2 + 3 + 5 + 7 = 28\n  fib(8) = 1 + 2 + 3 + 5 + 7 = 28\n  fib(9) = 1 + 2 + 3 + 5 + 7 = 28\n  fib(10) = 1 + 2 + 3 + 5 + 7 = 28\n  fib(11) = 1 + 2 + 3 + 5 + 7 = 28\n  fib(12) = 1 + 2 + 3 + 5 + 7 = 28\n  fib(13) = 1 + 2 + 3 + 5 + 7 = 28\n  fib(14) = 1 + 2 + 3 + 5 + 7 = 28\n  fib(15) = 1 + 2 + 3 + 5 + 7 = 28\n  fib(16) = 1 + 2 + 3 + 5 + 7 = 28\n  fib(17) = 1 + 2 + 3 + 5 + 7 = 28\n  fib(18) = 1 + 2 + 3 + 5 + 7 = 28\n  fib(19) = 1 + 2 + 3 + 5 + 7 = 28\n  fib(20) = 1 + 2 + 3 + 5 + 7 = 28\n  fib(21) = 1 + 2 + 3 + 5 + 7 = 28\n  fib(22) = 1 + 2 + 3 + 5 + 7 = 28\n  fib(23) = 1 + 2 + 3 + 5 + 7 = 28\n  fib(24) = 1 + 2 + 3 + 5 + 7 = 28\n  fib(25) = 1 + 2 + 3 + 5 + 7 = 28\n  fib(26) = 1 + 2 + 3 + 5 + 7 = 28\n  fib(27) = 1 + 2 + 3 + 5 + 7 = 28\n  fib(28) = 1 + 2 + 3 + 5 + 7 = 28\n  fib(29) = 1 + 2 + 3 + 5 + 7 = 28\n  fib(30) = 1 + 2 + 3 + 5 + 7 = 28\n  fib(31) = 1 + 2 + 3 + 5 + 7 = 28\n  fib(32) = 1 + 2 + 3 + 5 + 7 = 28\n  fib(33) = 1 + 2 + 3 + 5 + 7 = 28\n  fib(34) = 1 + 2 + 3 + 5 + 7 = 28\n  fib(35) = 1 + 2 + 3 + 5 + 7 = 28\n  fib(36) = 1 + 2 + 3 + 5 + 7 = 28\n  fib(37) = 1 + 2 + 3 + 5 + 7 = 28\n  fib(38) = 1 + 2 + 3 + 5 + 7 = 28\n  fib(39) = 1 + 2 + 3 + 5 + 7 = 28\n  fib(40) = 1 + 2 + 3 + 5 + 7 = 28\n  fib(41) = 1 + 2 + 3 + 5 + 7 = 28\n  fib(42) = 1 + 2 + 3 + 5 + 7 = 28\n  fib(43) = 1 + 2 + 3 + 5 + 7 = 28\n  fib(44) = 1 + 2 + 3 + 5 + 7 = 28\n  fib(45) = 1 + 2 + 3 + 5 + 7 = 28\n  fib(46) = 1 + 2 + 3 + 5 + 7 = 28\n  fib(47) = 1 + 2 + 3 + 5 + 7 = 28\n  fib(48) = 1 + 2 + 3 + 5 + 7 = 28\n  fib(49) = 1 + 2 + 3 + 5 + 7 = 28\n  fib(50) = 1 + 2 + 3 + 5 + 7 = 28\n  fib(51) = 1 + 2 + 3 + 5 + 7 = 28\n  fib(52) = 1 + 2 + 3 + 5 + 7 = 28\n  fib(53) = 1 + 2 + 3 + 5 + 7 = 28\n  fib(54) = 1 + 2 + 3 + 5 + 7 = 28\n  fib(55) = 1 + 2 + 3 + 5 + 7 = 28\n  fib(56) = 1 + 2 + 3 + 5 + 7 = 28\n  fib(57) = 1 + 2 + 3 + 5 + 7 = 28\n  fib(58) = 1 + 2 + 3 + 5 + 7 = 28\n  fib(59) = 1 + 2 + 3 + 5 + 7 = 28\n  fib(60) = 1 + 2 + 3 + 5 + 7 = 28\n  fib(61) = 1 + 2 + 3 + 5 + 7 = 28\n  fib(62) = 1 + 2 + 3 + 5 + 7 = 28\n  fib(63) = 1 + 2 + 3 + 5 + 7 = 28\n  fib(64) = 1 + 2 + 3 + 5 + 7 = 28\n  fib(65) = 1 + 2 + 3 + 5 + 7 = 28\n  fib(66) = 1 + 2 + 3 + 5 + 7 = 28\n  fib(67) = 1 + 2 + 3 + 5 + 7 = 28\n  fib(68) = 1 + 2 + 3 + 5 + 7 = 28\n  fib(69) = 1 + 2 + 3 + 5 + 7 = 28\n  fib(70) = 1 + 2 + 3 + 5 + 7 = 28\n  fib(71) = 1 + 2 + 3 + 5 + 7 = 28\n  fib(72) = 1 + 2 + 3 + 5 + 7 = 28\n  fib(73) = 1 + 2 + 3 + 5 + 7 = 28\n  fib(74) = 1 + 2 + 3 + 5 + 7 = 28\n  fib(75) = 1 + 2 + 3 + 5 + 7 = 28\n  fib(76) = 1 + 2 + 3 + 5 + 7 = 28\n  fib(77) = 1 + 2 + 3 + 5 + 7 = 28\n  fib(78) = 1 + 2 + 3 + 5 + 7 = 28\n  fib(79) = 1 + 2 + 3 + 5 + 7 = 28\n  fib(80) = 1 + 2 + 3 + 5 + 7 = 28\n  fib(81) = 1 + 2 + 3 + 5 + 7 = 28\n  fib(82) = 1 + 2 + 3 + 5 + 7 = 28\n  fib(83) = 1 + 2 + 3 + 5 + 7 = 28\n  fib(84) = 1 + 2 + 3 + 5 + 7 = 28\n  fib(85) = 1 + 2 + 3 + 5 + 7 = 28\n  fib(86) = 1 + 2 + 3 + 5 + 7 = 28\n  fib(87) = 1 + 2 + 3 + 5 + 7 = 28\n  fib(88) = 1 + 2 + 3 + 5 + 7 = 28\n  fib(89) = 1 + 2 + 3 + 5 + 7 = 28\n  fib(90) = 1 + 2 + 3 + 5 + 7 = 28\n  fib(91) = 1 + 2 + 3 + 5 + 7 = 28\n  fib(92) = 1 + 2 + 3 + 5 + 7 = 28\n  fib(93) = 1 + 2 + 3 + 5 + 7 = 28\n  fib(94) = 1 + 2 + 3 + 5 + 7 = 28\n  fib(95) = 1 + 2 + 3 + 5 + 7 = 28\n  fib(96) = 1 + 2 + 3 + 5 + 7 = 28\n  fib(97) = 1 + 2 + 3 + 5 + 7 = 28\n  fib(98) = 1 + 2 + 3 + 5 + 7 = 28\n  fib(99) = 1 + 2 + 3 + ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integer n, return the product of the odd digits.\n  Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "gc": "<|endoftext|>/*Given a positive integer n, return the product of the odd digits.\n  Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let result = 0;\n  for (let i = 1; i < n; i++) {\n    result *= i;\n  }\n  return result;\n};\n\n/*Given a positive integer n, return the product of the even digits.\n  Return 0 if all digits are odd.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits2 = (n) => {\n  let result = 0;\n  for (let i = 1; i < n; i++) {\n    result *= i;\n  }\n  return result;\n};\n\n/*Given a positive integer n, return the sum of its digits, modulo 10.\n  Return 0 if n is 0.\n  For example:\n  digits(0)  == 0\n  digits(1)  == 1\n  digits(4)  == 4\n  digits(235) == 235\n  */\nconst digits3 = (n) => {\n  let result = 0;\n  for (let i = 1; i < n; i++) {\n    result += digits(i);\n  }\n  return result;\n};\n\n/*Given a positive integer n, return the sum of its digits, modulo 10.\n  Return 0 if n is 0.\n  For example:\n  digits(0)  == 0\n  digits(1)  == 1\n  digits(4)  == 4\n  digits(235) == 235\n  */\nconst digits4 = (n) => {\n  let result = 0;\n  for (let i = 1; i < n; i++) {\n    result += digits2(i);\n  }\n  return result;\n};\n\n/*Given a positive integer n, return the sum of its digits, modulo 10.\n  Return 0 if n is 0.\n  For example:\n  digits(0)  == 0\n  digits(1)  == 1\n  digits(4)  == 4\n  digits(235) == 235\n  */\nconst digits5 = (n) => {\n  let result = 0;\n  for (let i = 1; i < n; i++) {\n    result += digits3(i);\n  }\n  return result;\n};\n\n/*Given a positive integer n, return the sum of its digits, modulo 10.\n  Return 0 if n is 0.\n  For example:\n  digits(0)  == 0\n  digits(1)  == 1\n  digits(4)  == 4\n  digits(235) == 235\n  */\nconst digits6 = (n) => {\n  let result = 0;\n  for (let i = 1; i < n; i++) {\n    result += digits4(i);\n  }\n  return result;\n};\n\n/*Given a positive integer n, return the sum of its digits, modulo 10.\n  Return 0 if n is 0.\n  For example:\n  digits(0)  == 0\n  digits(1)  == 1\n  digits(4)  == 4\n  digits(235) == 235\n  */\nconst digits7 = (n) => {\n  let result = 0;\n  for (let i = 1; i < n; i++) {\n    result += digits5(i);\n  }\n  return result;\n};\n\n/*Given a positive integer n, return the sum of its digits, modulo 10.\n  Return 0 if n is 0.\n  For example:\n  digits(0)  == 0\n  digits(1)  == 1\n  digits(4)  == 4\n  digits(235) == 235\n  */\nconst digits8 = (n) => {\n  let result = 0;\n  for (let i = 1; i < n; i++) {\n    result += digits6(i);\n  }\n  return result;\n};\n\n/*Given a positive integer n, return the sum of its digits, modulo 10.\n  Return 0 if n is 0.\n  For example:\n  digits(0)  == 0\n  digits(1)  == 1\n  digits(4)  == 4\n  digits(235) == 235\n  */\nconst digits9 = (n) => {\n  let result = 0;\n  for (let i = 1; i < n; i++) {\n    result += digits7(i);\n  }\n  return result;\n};\n\n/*Given a positive integer n, return the sum of its digits, modulo 10.\n  Return 0 if n is 0.\n  For example:\n  digits(0)  == 0\n  digits(1)  == 1\n  digits(4)  == 4\n  digits(235) == 235\n  */\nconst digits10 = (n) => {\n  let result = 0;\n  for (let i = 1; i < n; i++) {\n    result += digits8(i);\n  }\n  return result;\n};\n\n/*Given a positive integer n, return the sum of its digits, modulo 10.\n  Return 0 if n is 0.\n  For example:\n  digits(0)  == 0\n  digits(1)  == 1\n  digits(4)  == 4\n  digits(235) == 235\n  */\nconst digits11 = (n) => {\n  let result = 0;\n  for (let i = 1; i < n; i++) {\n    result += digits9(i);\n  }\n  return result;\n};\n\n/*Given a positive integer n, return the sum of its digits, modulo 10.\n  Return 0 if n is 0.\n  For example:\n  digits(0)  == 0\n  digits(1)  == 1\n  digits(4)  == 4\n  digits(235) == 235\n  */\nconst digits12 = (n) => {\n  let result = 0;\n  for (let i = 1; i < n; i++) {\n    result += digits10(i);\n  }\n  return result;\n};\n\n/*Given a positive integer n, return the sum of its digits, modulo 10.\n  Return 0 if n is 0.\n  For example:\n  digits(0)  == 0\n  digits(1)  == 1\n  digits(4)  == 4\n  digits(235) == 235\n  */\nconst digits13 = (n) => {\n  let result = 0;\n  for (let i = 1; i < n; i++) {\n    result += digits11(i);\n  }\n  return result;\n};\n\n/*Given a positive integer n, return the sum of its digits, modulo 10.\n  Return 0 if n is 0.\n  For example:\n  digits(0)  == 0\n  digits(1)  == 1\n  digits(4)  == 4\n  digits(235) == 235\n  */\nconst digits14 = (n) => {\n  let result = 0;\n  for (let i = 1; i < n; i++) {\n    result += digits12(i);\n  }\n  return result;\n};\n\n/*Given a positive integer n, return the sum of its digits, modulo 10.\n  Return 0 if n is 0.\n  For example:\n  digits(0)  == 0\n  digits(1)  == 1\n  digits(4)  == 4\n  digits(235) == 235\n  */\nconst digits15 = (n) => {\n  let result = 0;\n  for (let i = 1; i < n; i++) {\n    result += digits13(i);\n  }\n  return result;\n};\n\n/*Given a positive integer n, return the sum of its digits, modulo 10.\n  Return 0 if n is 0.\n  For example:\n  digits(0)  == 0\n  digits(1)  == 1\n  digits(4)  == 4\n  digits(235) == 235\n  */\nconst digits16 = (n) => {\n  let result = 0;\n  for (let i = 1; i < n; i++) {\n    result += digits14(i);\n  }\n  return result;\n};\n\n/*Given a positive integer n, return the sum of its digits, modulo 10.\n  Return 0 if n is 0.\n  For example:\n  digits(0)  == 0\n  digits(1)  == 1\n  digits(4)  == 4\n  digits(235) == 235\n  */\nconst digits17 = (n) => {\n  let result = 0;\n  for (let i = 1; i < n; i++) {\n    result += digits15(i);\n  }\n  return result;\n};\n\n/*Given a positive integer n, return the sum of its digits, modulo 10.\n  Return 0 if n is 0.\n  For example:\n  digit", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 3}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ false\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ true\n  */\nconst isNested = (string) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "gc": "<|endoftext|>/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ false\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ true\n  */\nconst isNested = (string) => {\n  const stack = []\n  let current\n  let currentCount = 0\n  let currentCountMax = 0\n  let currentCountMin = 0\n  let currentCountMaxMin = 0\n  let currentCountMaxMax = 0\n  let currentCountMinMax = 0\n  let currentCountMaxMinMax = 0\n  let currentCountMaxMaxMinMax = 0\n  let currentCountMinMaxMax = 0\n  let currentCountMaxMinMaxMax = 0\n  let currentCountMinMaxMaxMin = 0\n  let currentCountMaxMinMaxMaxMin = 0\n  let currentCountMinMaxMaxMinMax = 0\n  let currentCountMaxMinMaxMaxMin = 0\n  let currentCountMinMaxMaxMinMax = 0\n  let currentCountMaxMinMaxMaxMin = 0\n  let currentCountMinMaxMaxMinMax = 0\n  let currentCountMaxMinMaxMaxMin = 0\n  let currentCountMinMaxMaxMinMax = 0\n  let currentCountMaxMinMaxMaxMin = 0\n  let currentCountMinMaxMaxMinMax = 0\n  let currentCountMaxMinMaxMaxMin = 0\n  let currentCountMinMaxMaxMinMax = 0\n  let currentCountMaxMinMaxMaxMin = 0\n  let currentCountMinMaxMaxMinMax = 0\n  let currentCountMaxMinMaxMaxMin = 0\n  let currentCountMinMaxMaxMinMax = 0\n  let currentCountMaxMinMaxMaxMin = 0\n  let currentCountMinMaxMaxMinMax = 0\n  let currentCountMaxMinMaxMaxMin = 0\n  let currentCountMinMaxMaxMinMax = 0\n  let currentCountMaxMinMaxMaxMin = 0\n  let currentCountMinMaxMaxMinMax = 0\n  let currentCountMaxMinMaxMaxMin = 0\n  let currentCountMinMaxMaxMinMax = 0\n  let currentCountMaxMinMaxMaxMin = 0\n  let currentCountMinMaxMaxMinMax = 0\n  let currentCountMaxMinMaxMaxMin = 0\n  let currentCountMinMaxMaxMinMax = 0\n  let currentCountMaxMinMaxMaxMin = 0\n  let currentCountMinMaxMaxMinMax = 0\n  let currentCountMaxMinMaxMaxMin = 0\n  let currentCountMinMaxMaxMinMax = 0\n  let currentCountMaxMinMaxMaxMin = 0\n  let currentCountMinMaxMaxMinMax = 0\n  let currentCountMaxMinMaxMaxMin = 0\n  let currentCountMinMaxMaxMinMax = 0\n  let currentCountMaxMinMaxMaxMin = 0\n  let currentCountMinMaxMaxMinMax = 0\n  let currentCountMaxMinMaxMaxMin = 0\n  let currentCountMinMaxMaxMinMax = 0\n  let currentCountMaxMinMaxMaxMin = 0\n  let currentCountMinMaxMaxMinMax = 0\n  let currentCountMaxMinMaxMaxMin = 0\n  let currentCountMinMaxMaxMinMax = 0\n  let currentCountMaxMinMaxMaxMin = 0\n  let currentCountMinMaxMaxMinMax = 0\n  let currentCountMaxMinMaxMaxMin = 0\n  let currentCountMinMaxMaxMinMax = 0\n  let currentCountMaxMinMaxMaxMin = 0\n  let currentCountMinMaxMaxMinMax = 0\n  let currentCountMaxMinMaxMaxMin = 0\n  let currentCountMinMaxMaxMinMax = 0\n  let currentCountMaxMinMaxMaxMin = 0\n  let currentCountMinMaxMaxMinMax = 0\n  let currentCountMaxMinMaxMaxMin = 0\n  let currentCountMinMaxMaxMinMax = 0\n  let currentCountMaxMinMaxMaxMin = 0\n  let currentCountMinMaxMaxMinMax = 0\n  let currentCountMaxMinMaxMaxMin = 0\n  let currentCountMinMaxMaxMinMax = 0\n  let currentCountMaxMinMaxMaxMin = 0\n  let currentCountMinMaxMaxMinMax = 0\n  let currentCountMaxMinMaxMaxMin = 0\n  let currentCountMinMaxMaxMinMax = 0\n  let currentCountMaxMinMaxMaxMin = 0\n  let currentCountMinMaxMaxMinMax = 0\n  let currentCountMaxMinMaxMaxMin = 0\n  let currentCountMinMaxMaxMinMax = 0\n  let currentCountMaxMinMaxMaxMin = 0\n  let currentCountMinMaxMaxMinMax = 0\n  let currentCountMaxMinMaxMaxMin = 0\n  let currentCountMinMaxMaxMinMax = 0\n  let currentCountMaxMinMaxMaxMin = 0\n  let currentCountMinMaxMaxMinMax = 0\n  let currentCountMaxMinMaxMaxMin = 0\n  let currentCountMinMaxMaxMinMax = 0\n  let currentCountMaxMinMaxMaxMin = 0\n  let currentCountMinMaxMaxMinMax = 0\n  let currentCountMaxMinMaxMaxMin = 0\n  let currentCountMinMaxMaxMinMax = 0\n  let currentCountMaxMinMaxMaxMin = 0\n  let currentCountMinMaxMaxMinMax = 0\n  let currentCountMaxMinMaxMaxMin = 0\n  let currentCountMinMaxMaxMinMax = 0\n  let currentCountMaxMinMaxMaxMin = 0\n  let currentCountMinMaxMaxMinMax = 0\n  let currentCountMaxMinMaxMaxMin = 0\n  let currentCountMinMaxMaxMinMax = 0\n  let currentCountMaxMinMaxMaxMin = 0\n  let currentCountMinMaxMaxMinMax = 0\n  let currentCountMaxMinMaxMaxMin = 0\n  let currentCountMinMaxMaxMinMax = 0\n  let currentCountMaxMinMaxMaxMin = 0\n  let currentCountMinMaxMaxMinMax = 0\n  let currentCountMaxMinMaxMaxMin = 0\n  let currentCountMinMaxMaxMinMax = 0\n  let currentCountMaxMinMaxMaxMin = 0\n  let currentCountMinMaxMaxMinMax = 0\n  let currentCountMaxMinMaxMaxMin = 0\n  let currentCountMinMaxMaxMinMax = 0\n  let currentCountMaxMinMaxMaxMin = 0\n  let currentCountMinMaxMaxMinMax = 0\n  let currentCountMaxMinMaxMaxMin = 0\n  let currentCountMinMaxMaxMinMax = 0\n  let currentCountMaxMinMaxMaxMin = 0\n  let currentCountMinMaxMaxMinMax = 0\n  let currentCountMaxMinMaxMaxMin = 0\n  let currentCountMinMaxMaxMinMax = 0\n  let currentCountMaxMinMaxMaxMin = 0\n  let currentCountMinMaxMaxMinMax = 0\n  let currentCountMaxMinMaxMaxMin = 0\n  let currentCountMinMaxMaxMinMax = 0\n  let currentCountMaxMinMaxMaxMin = 0\n  let currentCountMinMaxMaxMinMax = 0\n  let currentCountMaxMinMaxMaxMin = 0\n  let currentCountMinMaxMaxMinMax = 0\n  let currentCountMaxMinMaxMaxMin = 0\n  let currentCountMinMaxMaxMinMax = 0\n  let currentCountMaxMinMaxMaxMin = 0\n  let currentCountMinMaxMaxMinMax = 0\n  let currentCountMaxMinMaxMaxMin = 0\n  let currentCountMinMaxMaxMinMax = 0\n  let currentCountMaxMinMaxMaxMin = 0\n  let currentCountMinMaxMaxMinMax = 0\n  let currentCountMaxMinMaxMaxMin = 0\n  let currentCountMinMaxMaxMinMax = 0\n  let currentCountMaxMinMaxMaxMin = 0\n  let currentCountMinMaxMaxMinMax = 0\n  let currentCountMaxMinMaxMaxMin = 0\n  let currentCountMinMaxMaxMinMax = 0\n  let currentCountMaxMinMaxMaxMin = 0\n  let currentCountMinMaxMaxMin", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/133", "prompt": "/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "gc": "<|endoftext|>/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.ceil(sum);\n};\n\n/*\n  You are given a list of numbers.\n  You need to return the sum of cubed numbers in the given list,\n  round each element in the list to the lower int(Floor) first.\n  Examples:\n  For lst = [1,2,3] the output should be 9\n  For lst = [1,4,9] the output should be 27\n  For lst = [1,3,5,7] the output should be 49\n  For lst = [1.4,4.2,0] the output should be 24\n  For lst = [-2.4,1,1] the output should be 1\n  */\nconst sumCubes = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 3);\n  }\n  return Math.floor(sum);\n};\n\n/*\n  You are given a list of numbers.\n  You need to return the sum of cubed numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 9\n  For lst = [1,4,9] the output should be 27\n  For lst = [1,3,5,7] the output should be 49\n  For lst = [1.4,4.2,0] the output should be 24\n  For lst = [-2.4,1,1] the output should be 1\n  */\nconst sumCubesUp = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 3);\n  }\n  return Math.ceil(sum);\n};\n\n/*\n  You are given a list of numbers.\n  You need to return the sum of cubed numbers in the given list,\n  round each element in the list to the lower int(Floor) first.\n  Examples:\n  For lst = [1,2,3] the output should be 9\n  For lst = [1,4,9] the output should be 27\n  For lst = [1,3,5,7] the output should be 49\n  For lst = [1.4,4.2,0] the output should be 24\n  For lst = [-2.4,1,1] the output should be 1\n  */\nconst sumCubesDown = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 3);\n  }\n  return Math.floor(sum);\n};\n\n/*\n  You are given a list of numbers.\n  You need to return the sum of cubed numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 9\n  For lst = [1,4,9] the output should be 27\n  For lst = [1,3,5,7] the output should be 49\n  For lst = [1.4,4.2,0] the output should be 24\n  For lst = [-2.4,1,1] the output should be 1\n  */\nconst sumCubesUpDown = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 3);\n  }\n  return Math.ceil(sum);\n};\n\n/*\n  You are given a list of numbers.\n  You need to return the sum of cubed numbers in the given list,\n  round each element in the list to the lower int(Floor) first.\n  Examples:\n  For lst = [1,2,3] the output should be 9\n  For lst = [1,4,9] the output should be 27\n  For lst = [1,3,5,7] the output should be 49\n  For lst = [1.4,4.2,0] the output should be 24\n  For lst = [-2.4,1,1] the output should be 1\n  */\nconst sumCubesUpDownFloor = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 3);\n  }\n  return Math.floor(sum);\n};\n\n/*\n  You are given a list of numbers.\n  You need to return the sum of cubed numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 9\n  For lst = [1,4,9] the output should be 27\n  For lst = [1,3,5,7] the output should be 49\n  For lst = [1.4,4.2,0] the output should be 24\n  For lst = [-2.4,1,1] the output should be 1\n  */\nconst sumCubesUpDownCeil = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 3);\n  }\n  return Math.ceil(sum);\n};\n\n/*\n  You are given a list of numbers.\n  You need to return the sum of cubed numbers in the given list,\n  round each element in the list to the lower int(Floor) first.\n  Examples:\n  For lst = [1,2,3] the output should be 9\n  For lst = [1,4,9] the output should be 27\n  For lst = [1,3,5,7] the output should be 49\n  For lst = [1.4,4.2,0] the output should be 24\n  For lst = [-2.4,1,1] the output should be 1\n  */\nconst sumCubesUpDownFloorCeil = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 3);\n  }\n  return Math.floor(sum);\n};\n\n/*\n  You are given a list of numbers.\n  You need to return the sum of cubed numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 9\n  For lst = [1,4,9] the output should be 27\n  For lst = [1,3,5,7] the output should be 49\n  For lst = [1.4,4.2,0] the output should be 24\n  For lst = [-2.4,1,1] the output should be 1\n  */\nconst sumCubesUpDownCeiling = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 3);\n  }\n  return Math.ceil(sum);\n};\n\n/*\n  You are given a list of numbers.\n  You need to return the sum of cubed numbers in the given list,\n  round each element in the list to the lower int(Floor) first.\n  Examples:\n  For lst = [1,2,3] the output should be 9\n  For lst = [1,4,9] the output should be 27\n  For lst = [1,3,5,7] the output should be 49\n  For lst = [1.4,4.2,0] the output should be 24\n  For lst = [-2.4,1,1] the output should be 1\n  */\nconst sumCubesUpDownFloorCeiling = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 3);\n  }\n  return Math.floor(sum);\n};\n\n/*\n  You are given a list of numbers.\n  You need to return the sum of cubed numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 9\n  For lst = [1,4,9] the output should be 27\n  For lst = [1,3,5,7] the output should be 49\n  For lst = [1.4,4.2,0] the output should be 24\n  For lst = [-2.4,1,1] the output should be 1\n  */\nconst sumCubesUpDownCeiling = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 3);\n  }\n  return Math.ceil(sum);\n};\n\n/*\n  You are given a list of numbers.\n  You need to return the sum of cubed numbers in the given list,\n  round each element in the list to the ", "passed": 1, "run_status": 0, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "gc": "<|endoftext|>/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt[txt.length - 1];\n  return lastChar && lastChar!== '.' && lastChar!=='';\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a number and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt[txt.length - 1];\n  return lastChar && lastChar!== '.' && lastChar!=='' && lastChar!== '-';\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a number and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt[txt.length - 1];\n  return lastChar && lastChar!== '.' && lastChar!=='' && lastChar!== '-' && lastChar!== '.' && lastChar!=='';\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a number and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt[txt.length - 1];\n  return lastChar && lastChar!== '.' && lastChar!=='' && lastChar!== '-' && lastChar!== '.' && lastChar!=='' && lastChar!== '-' && lastChar!== '.' && lastChar!=='';\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a number and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt[txt.length - 1];\n  return lastChar && lastChar!== '.' && lastChar!=='' && lastChar!== '-' && lastChar!== '.' && lastChar!=='' && lastChar!== '-' && lastChar!== '.' && lastChar!=='';\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a number and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt[txt.length - 1];\n  return lastChar && lastChar!== '.' && lastChar!=='' && lastChar!== '-' && lastChar!== '.' && lastChar!=='' && lastChar!== '-' && lastChar!== '.' && lastChar!=='';\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a number and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt[txt.length - 1];\n  return lastChar && lastChar!== '.' && lastChar!=='' && lastChar!== '-' && lastChar!== '.' && lastChar!=='' && lastChar!== '-' && lastChar!== '.' && lastChar!=='';\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a number and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt[txt.length - 1];\n  return lastChar && lastChar!== '.' && lastChar!=='' && lastChar!== '-' && last", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/135", "prompt": "/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "gc": "<|endoftext|>/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let left = 0;\n  let right = arr.length - 1;\n  while (left <= right) {\n    if (arr[left] > arr[right]) {\n      left = right + 1;\n    } else {\n      right = left - 1;\n    }\n  }\n  return left;\n};\n\n/**\n  Given an array of integers, return the largest possible subarray which can\n  be formed by removing all elements which are less than the given number.\n\n  Examples:\n  largestSubArray([1,2,3,4,5]) = [1,2]\n  largestSubArray([1,2,3,4,5,6]) = [1,2]\n  largestSubArray([1,2,3,4,5,6,7]) = [1,2]\n  largestSubArray([1,2,3,4,5,6,7,8]) = [1,2]\n  largestSubArray([1,2,3,4,5,6,7,8,9]) = [1,2]\n  largestSubArray([1,2,3,4,5,6,7,8,9,10]) = [1,2]\n  largestSubArray([1,2,3,4,5,6,7,8,9,10,11]) = [1,2]\n  largestSubArray([1,2,3,4,5,6,7,8,9,10,11,12]) = [1,2]\n  largestSubArray([1,2,3,4,5,6,7,8,9,10,11,12,13]) = [1,2]\n  largestSubArray([1,2,3,4,5,6,7,8,9,10,11,12,13,14]) = [1,2]\n  largestSubArray([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]) = [1,2]\n  largestSubArray([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]) = [1,2]\n  largestSubArray([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17]) = [1,2]\n  largestSubArray([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18]) = [1,2]\n  largestSubArray([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]) = [1,2]\n  largestSubArray([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]) = [1,2]\n  largestSubArray([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21]) = [1,2]\n  largestSubArray([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22]) = [1,2]\n  largestSubArray([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23]) = [1,2]\n  largestSubArray([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24]) = [1,2]\n  largestSubArray([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]) = [1,2]\n  largestSubArray([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]) = [1,2]\n  largestSubArray([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27]) = [1,2]\n  largestSubArray([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28]) = [1,2]\n  largestSubArray([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29]) = [1,2]\n  largestSubArray([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]) = [1,2]\n  largestSubArray([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31]) = [1,2]\n  largestSubArray([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32]) = [1,2]\n  largestSubArray([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33]) = [1,2]\n  largestSubArray([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34]) = [1,2]\n  largestSubArray([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35]) = [1,2]\n  largestSubArray([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36]) = [1,2]\n  largestSubArray([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37]) = [1,2]\n  largestSubArray([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38]) = [1,2]\n  largestSubArray([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39]) = [1,2]\n  largestSubArray([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40]) = [1,2]\n  largestSubArray([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41]) = [1,2]\n  largestSubArray([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42]) = [1,2]\n  largestSubArray([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43]) = [1,2]\n  largestSubArray([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44]) = [1,2]\n  largestSubArray([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  lagrestSmallestIntgeers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  lagrestSmallestIntgeers([]) == (null, null)\n  lagrestSmallestIntgeers([0]) == (null, null)\n  */\nconst lagrestSmallestIntgeers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "lagrestSmallestIntgeers", "gc": "<|endoftext|>/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  lagrestSmallestIntgeers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  lagrestSmallestIntgeers([]) == (null, null)\n  lagrestSmallestIntgeers([0]) == (null, null)\n  */\nconst lagrestSmallestIntgeers = (lst) => {\n  let maxIntgeer = 0;\n  let minIntgeer = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < minIntgeer) {\n      minIntgeer = lst[i];\n    }\n    if (lst[i] > maxIntgeer) {\n      maxIntgeer = lst[i];\n    }\n  }\n  return [maxIntgeer, minIntgeer];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  lagrestSmallestIntgeers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  lagrestSmallestIntgeers([]) == (null, null)\n  lagrestSmallestIntgeers([0]) == (null, null)\n  */\nconst lagrestSmallestIntgeersWithNull = (lst) => {\n  let maxIntgeer = 0;\n  let minIntgeer = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < minIntgeer) {\n      minIntgeer = lst[i];\n    }\n    if (lst[i] > maxIntgeer) {\n      maxIntgeer = lst[i];\n    }\n  }\n  return [null, minIntgeer];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  lagrestSmallestIntgeers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  lagrestSmallestIntgeers([]) == (null, null)\n  lagrestSmallestIntgeers([0]) == (null, null)\n  */\nconst lagrestSmallestIntgeersWithNullAndNull = (lst) => {\n  let maxIntgeer = 0;\n  let minIntgeer = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < minIntgeer) {\n      minIntgeer = lst[i];\n    }\n    if (lst[i] > maxIntgeer) {\n      maxIntgeer = lst[i];\n    }\n  }\n  return [null, null, minIntgeer];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  lagrestSmallestIntgeers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  lagrestSmallestIntgeers([]) == (null, null)\n  lagrestSmallestIntgeers([0]) == (null, null)\n  */\nconst lagrestSmallestIntgeersWithNullAndNullAndNull = (lst) => {\n  let maxIntgeer = 0;\n  let minIntgeer = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < minIntgeer) {\n      minIntgeer = lst[i];\n    }\n    if (lst[i] > maxIntgeer) {\n      maxIntgeer = lst[i];\n    }\n  }\n  return [null, null, null, minIntgeer];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  lagrestSmallestIntgeers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  lagrestSmallestIntgeers([]) == (null, null)\n  lagrestSmallestIntgeers([0]) == (null, null)\n  */\nconst lagrestSmallestIntgeersWithNullAndNullAndNullAndNull = (lst) => {\n  let maxIntgeer = 0;\n  let minIntgeer = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < minIntgeer) {\n      minIntgeer = lst[i];\n    }\n    if (lst[i] > maxIntgeer) {\n      maxIntgeer = lst[i];\n    }\n  }\n  return [null, null, null, null, minIntgeer];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  lagrestSmallestIntgeers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  lagrestSmallestIntgeers([]) == (null, null)\n  lagrestSmallestIntgeers([0]) == (null, null)\n  */\nconst lagrestSmallestIntgeersWithNullAndNullAndNullAndNullAndNull = (lst) => {\n  let maxIntgeer = 0;\n  let minIntgeer = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < minIntgeer) {\n      minIntgeer = lst[i];\n    }\n    if (lst[i] > maxIntgeer) {\n      maxIntgeer = lst[i];\n    }\n  }\n  return [null, null, null, null, null, null, minIntgeer];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  lagrestSmallestIntgeers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  lagrestSmallestIntgeers([]) == (null, null)\n  lagrestSmallestIntgeers([0]) == (null, null)\n  */\nconst lagrestSmallestIntgeersWithNullAndNullAndNullAndNullAndNullAndNull = (lst) => {\n  let maxIntgeer = 0;\n  let minIntgeer = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < minIntgeer) {\n      minIntgeer = lst[i];\n    }\n    if (lst[i] > maxIntgeer) {\n      maxIntgeer = lst[i];\n    }\n  }\n  return [null, null, null, null, null, null, null, null, null, minIntgeer];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  lagrestSmallestIntgeers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  lagrestSmallestIntgeers([]) == (null, null)\n  lagrestSmallestIntgeers([0]) == (null, null)\n  */\nconst lagrestSmallestIntgeersWithNullAndNullAndNullAndNullAndNullAndNull = (lst) => {\n  let maxIntgeer = 0;\n  let minIntgeer = lst[0];\n  for (let i = 1; i < lst", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be . or ,\n\n  compaerOne(1, 2.5) ➞ 2.5\n  compaerOne(1, \"2,3\") ➞ \"2,3\"\n  compaerOne(\"5,1\", \"6\") ➞ \"6\"\n  compaerOne(\"1\", 1) ➞ null\n  */\nconst compaerOne = (a, b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compaerOne", "gc": "<|endoftext|>/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  compaerOne(1, 2.5) ➞ 2.5\n  compaerOne(1, \"2,3\") ➞ \"2,3\"\n  compaerOne(\"5,1\", \"6\") ➞ \"6\"\n  compaerOne(\"1\", 1) ➞ null\n  */\nconst compaerOne = (a, b) => {\n  if (a === null || b === null) {\n    return null\n  }\n  if (typeof a === \"string\") {\n    a = parseFloat(a)\n  }\n  if (typeof b === \"string\") {\n    b = parseFloat(b)\n  }\n  if (isNaN(a) && isNaN(b)) {\n    return null\n  }\n  if (a === b) {\n    return null\n  }\n  if (a < b) {\n    return -1\n  }\n  if (a > b) {\n    return 1\n  }\n  return 0\n}\n\n/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the smaller variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  compaerOne(1, 2.5) ➞ 2.5\n  compaerOne(1, \"2,3\") ➞ \"2,3\"\n  compaerOne(\"5,1\", \"6\") ➞ \"6\"\n  compaerOne(\"1\", 1) ➞ null\n  */\nconst compaerTwo = (a, b) => {\n  if (a === null || b === null) {\n    return null\n  }\n  if (typeof a === \"string\") {\n    a = parseFloat(a)\n  }\n  if (typeof b === \"string\") {\n    b = parseFloat(b)\n  }\n  if (isNaN(a) && isNaN(b)) {\n    return null\n  }\n  if (a === b) {\n    return null\n  }\n  if (a > b) {\n    return 1\n  }\n  if (a < b) {\n    return -1\n  }\n  return 0\n}\n\n/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  compaerOne(1, 2.5) ➞ 2.5\n  compaerOne(1, \"2,3\") ➞ \"2,3\"\n  compaerOne(\"5,1\", \"6\") ➞ \"6\"\n  compaerOne(\"1\", 1) ➞ null\n  */\nconst compaerThree = (a, b) => {\n  if (a === null || b === null) {\n    return null\n  }\n  if (typeof a === \"string\") {\n    a = parseFloat(a)\n  }\n  if (typeof b === \"string\") {\n    b = parseFloat(b)\n  }\n  if (isNaN(a) && isNaN(b)) {\n    return null\n  }\n  if (a === b) {\n    return null\n  }\n  if (a > b) {\n    return 1\n  }\n  if (a < b) {\n    return -1\n  }\n  return 0\n}\n\n/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  compaerOne(1, 2.5) ➞ 2.5\n  compaerOne(1, \"2,3\") ➞ \"2,3\"\n  compaerOne(\"5,1\", \"6\") ➞ \"6\"\n  compaerOne(\"1\", 1) ➞ null\n  */\nconst compaerFour = (a, b) => {\n  if (a === null || b === null) {\n    return null\n  }\n  if (typeof a === \"string\") {\n    a = parseFloat(a)\n  }\n  if (typeof b === \"string\") {\n    b = parseFloat(b)\n  }\n  if (isNaN(a) && isNaN(b)) {\n    return null\n  }\n  if (a === b) {\n    return null\n  }\n  if (a > b) {\n    return 1\n  }\n  if (a < b) {\n    return -1\n  }\n  return 0\n}\n\n/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  compaerOne(1, 2.5) ➞ 2.5\n  compaerOne(1, \"2,3\") ➞ \"2,3\"\n  compaerOne(\"5,1\", \"6\") ➞ \"6\"\n  compaerOne(\"1\", 1) ➞ null\n  */\nconst compaerFive = (a, b) => {\n  if (a === null || b === null) {\n    return null\n  }\n  if (typeof a === \"string\") {\n    a = parseFloat(a)\n  }\n  if (typeof b === \"string\") {\n    b = parseFloat(b)\n  }\n  if (isNaN(a) && isNaN(b)) {\n    return null\n  }\n  if (a === b) {\n    return null\n  }\n  if (a > b) {\n    return 1\n  }\n  if (a < b) {\n    return -1\n  }\n  return 0\n}\n\n/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  compaerOne(1, 2.5) ➞ 2.5\n  compaerOne(1, \"2,3\") ➞ \"2,3\"\n  compaerOne(\"5,1\", \"6\") ➞ \"6\"\n  compaerOne(\"1\", 1) ➞ null\n  */\nconst compaerSix = (a, b) => {\n  if (a === null || b === null) {\n    return null\n  }\n  if (typeof a === \"string\") {\n    a = parseFloat(a)\n  }\n  if (typeof b === \"string\") {\n    b = parseFloat(b)\n  }\n  if (isNaN(a) && isNaN(b)) {\n    return null\n  }\n  if (a === b) {\n    return null\n  }\n  if (a > b) {\n    return 1\n  }\n  if (a < b) {\n    return -1\n  }\n  return 0\n}\n\n/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  compaerOne(1, 2.5) ➞ 2.5\n  compaerOne(1, \"2,3\") ➞ \"2,3\"\n  compaerOne(\"5,1\", \"6\") ➞ \"6\"\n  compaerOne(\"1\", 1) ➞ null\n  */\nconst compaerSeven = (a, b) => {\n  if (a === null || b === null) {\n    return null\n  }\n  if (typeof a === \"string\") {\n    a = parseFloat(a)\n  }\n  if (typeof b === \"string\") {\n    b = parseFloat(b)\n  }\n  if (isNaN(a) && isNaN(b)) {\n    return null\n  }\n  if (a === b) {\n    return null\n  }\n  if (a > b) {\n    return 1\n  }\n  if (a < b) {\n    return -1\n  }\n  return 0\n}\n\n/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  compaerOne(1, 2.5) ➞ 2.5\n  compaerOne(1, \"2,3\") �", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "gc": "<|endoftext|>/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  if (n <= 0) return false;\n  if (n % 2 === 0) return n!== 0;\n  if (n % 2 === 1) return n!== 1;\n  if (n % 4 === 0) return n!== 0;\n  if (n % 4 === 1) return n!== 1;\n  return true;\n};\n\n/*\n  Evaluate whether the given number n can be written as the sum of exactly 8 positive odd numbers\n  Example\n  isEqualToSumOdd(4) == false\n  isEqualToSumOdd(6) == false\n  isEqualToSumOdd(8) == true\n  */\nconst isEqualToSumOdd = (n) => {\n  if (n <= 0) return false;\n  if (n % 2 === 0) return n!== 0;\n  if (n % 2 === 1) return n!== 1;\n  if (n % 4 === 0) return n!== 0;\n  if (n % 4 === 1) return n!== 1;\n  if (n % 8 === 0) return n!== 0;\n  if (n % 8 === 1) return n!== 1;\n  return true;\n};\n\n/*\n  Evaluate whether the given number n can be written as the sum of exactly 16 positive odd numbers\n  Example\n  isEqualToSumOdd16(4) == false\n  isEqualToSumOdd16(6) == false\n  isEqualToSumOdd16(8) == true\n  */\nconst isEqualToSumOdd16 = (n) => {\n  if (n <= 0) return false;\n  if (n % 2 === 0) return n!== 0;\n  if (n % 2 === 1) return n!== 1;\n  if (n % 4 === 0) return n!== 0;\n  if (n % 4 === 1) return n!== 1;\n  if (n % 8 === 0) return n!== 0;\n  if (n % 8 === 1) return n!== 1;\n  if (n % 16 === 0) return n!== 0;\n  if (n % 16 === 1) return n!== 1;\n  return true;\n};\n\n/*\n  Evaluate whether the given number n can be written as the sum of exactly 32 positive odd numbers\n  Example\n  isEqualToSumOdd32(4) == false\n  isEqualToSumOdd32(6) == false\n  isEqualToSumOdd32(8) == true\n  */\nconst isEqualToSumOdd32 = (n) => {\n  if (n <= 0) return false;\n  if (n % 2 === 0) return n!== 0;\n  if (n % 2 === 1) return n!== 1;\n  if (n % 4 === 0) return n!== 0;\n  if (n % 4 === 1) return n!== 1;\n  if (n % 8 === 0) return n!== 0;\n  if (n % 8 === 1) return n!== 1;\n  if (n % 16 === 0) return n!== 0;\n  if (n % 16 === 1) return n!== 1;\n  if (n % 32 === 0) return n!== 0;\n  if (n % 32 === 1) return n!== 1;\n  return true;\n};\n\n/*\n  Evaluate whether the given number n can be written as the sum of exactly 64 positive odd numbers\n  Example\n  isEqualToSumOdd64(4) == false\n  isEqualToSumOdd64(6) == false\n  isEqualToSumOdd64(8) == true\n  */\nconst isEqualToSumOdd64 = (n) => {\n  if (n <= 0) return false;\n  if (n % 2 === 0) return n!== 0;\n  if (n % 2 === 1) return n!== 1;\n  if (n % 4 === 0) return n!== 0;\n  if (n % 4 === 1) return n!== 1;\n  if (n % 8 === 0) return n!== 0;\n  if (n % 8 === 1) return n!== 1;\n  if (n % 16 === 0) return n!== 0;\n  if (n % 16 === 1) return n!== 1;\n  if (n % 32 === 0) return n!== 0;\n  if (n % 32 === 1) return n!== 1;\n  if (n % 64 === 0) return n!== 0;\n  if (n % 64 === 1) return n!== 1;\n  return true;\n};\n\n/*\n  Evaluate whether the given number n can be written as the sum of exactly 128 positive odd numbers\n  Example\n  isEqualToSumOdd128(4) == false\n  isEqualToSumOdd128(6) == false\n  isEqualToSumOdd128(8) == true\n  */\nconst isEqualToSumOdd128 = (n) => {\n  if (n <= 0) return false;\n  if (n % 2 === 0) return n!== 0;\n  if (n % 2 === 1) return n!== 1;\n  if (n % 4 === 0) return n!== 0;\n  if (n % 4 === 1) return n!== 1;\n  if (n % 8 === 0) return n!== 0;\n  if (n % 8 === 1) return n!== 1;\n  if (n % 16 === 0) return n!== 0;\n  if (n % 16 === 1) return n!== 1;\n  if (n % 32 === 0) return n!== 0;\n  if (n % 32 === 1) return n!== 1;\n  if (n % 64 === 0) return n!== 0;\n  if (n % 64 === 1) return n!== 1;\n  if (n % 128 === 0) return n!== 0;\n  if (n % 128 === 1) return n!== 1;\n  return true;\n};\n\n/*\n  Evaluate whether the given number n can be written as the sum of exactly 256 positive odd numbers\n  Example\n  isEqualToSumOdd256(4) == false\n  isEqualToSumOdd256(6) == false\n  isEqualToSumOdd256(8) == true\n  */\nconst isEqualToSumOdd256 = (n) => {\n  if (n <= 0) return false;\n  if (n % 2 === 0) return n!== 0;\n  if (n % 2 === 1) return n!== 1;\n  if (n % 4 === 0) return n!== 0;\n  if (n % 4 === 1) return n!== 1;\n  if (n % 8 === 0) return n!== 0;\n  if (n % 8 === 1) return n!== 1;\n  if (n % 16 === 0) return n!== 0;\n  if (n % 16 === 1) return n!== 1;\n  if (n % 32 === 0) return n!== 0;\n  if (n % 32 === 1) return n!== 1;\n  if (n % 64 === 0) return n!== 0;\n  if (n % 64 === 1) return n!== 1;\n  if (n % 128 === 0) return n!== 0;\n  if (n % 128 === 1) return n!== 1;\n  if (n % 256 === 0) return n!== 0;\n  if (n % 256 === 1) return n!== 1;\n  return true;\n};\n\n/*\n  Evaluate whether the given number n can be written as the sum of exactly 512 positive odd numbers\n  Example\n  isEqualToSumOdd512(4) == false\n  isEqualToSumOdd512(6) == false\n  isEqualToSumOdd512(8) == true\n  */\nconst isEqualToSumOdd512 = (n) => {\n  if (n <= 0) return false;\n  if (n % 2 === 0) return n!== 0;\n  if (n % 2 === 1) return n!== 1;\n  if (n % 4 === 0) return n!== 0;\n  if (n % 4 === 1) return n!== 1;\n  if (n % 8 === 0) return n!== 0;\n  if (n % 8 === 1) return n!== 1;\n  if (n % 16 === 0) return n!== 0;\n  if (n % 16 === 1) return n!== 1;\n  if (n % 32 === 0) return n!== 0;\n  if (n % 32 === 1) return n!== 1;\n  if (n % 64 === 0) return n!== 0;\n  if (n % 64 === 1) return n!== 1;\n  if (n % 128 === 0) return n!== 0;\n  if (n % 128 === 1) return n!== 1;\n  if (n % 256 === 0) return n!== 0;\n  if (n % 256 === 1) return n!== 1;\n  if (n % 512 === 0) return n!== 0;\n  if (n % 512 === 1) return n!== 1;\n  return true;\n};\n\n/*\n  Evaluate whether the given number n ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n  where n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "gc": "<|endoftext|>/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n  where n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  if (n <= 1) {\n    return 1;\n  }\n  return n * specialFactorial(n - 1);\n};\n\n/*\n  Returns the factorial of n using binary exponentiation.\n  Binary exponentiation is defined as:\n  binary_exponentiation(n) = n! * (n-1)! * n-2 *... * 1\n  where n > 0\n\n  For example:\n  >>> binary_exponentiation(4)\n  24\n\n  The function will receive an integer as input and should return the binary\n  exponentiation of this integer.\n  */\nconst binary_exponentiation = (n) => {\n  if (n <= 1) {\n    return 1;\n  }\n  return n * binary_exponentiation(n - 1);\n};\n\n/*\n  Returns the inverse of a number using inverse trigonometric function\n  Inverse trigonometric function is defined as:\n  inverse_trigonometric(n) = 1/n * n!\n  where n > 0\n\n  For example:\n  >>> inverse_trigonometric(4)\n  1/4\n\n  The function will receive an integer as input and should return the inverse\n  trigonometric function of this integer.\n  */\nconst inverse_trigonometric = (n) => {\n  if (n <= 1) {\n    return 1;\n  }\n  return 1 / n * n * Math.pow(2, -n);\n};\n\n/*\n  Returns the hyperbolic sine of a number using hyperbolic sine function\n  Hyperbolic sine function is defined as:\n  hyperbolic_sin(n) = sinh(n)/cosh(n)\n  where n > 0\n\n  For example:\n  >>> hyperbolic_sin(4)\n  1.4142135623730950488016887242096980785696718753769480731766797379907324784621070388503875\n  >>> hyperbolic_sin(4)\n  1.4142135623730950488016887242096980785696718753769480731766797379907324784621070388503875\n\n  The function will receive an integer as input and should return the hyperbolic\n  sine of this integer.\n  */\nconst hyperbolic_sin = (n) => {\n  if (n <= 1) {\n    return 1;\n  }\n  return Math.sinh(n) / Math.cosh(n);\n};\n\n/*\n  Returns the hyperbolic cosine of a number using hyperbolic cosine function\n  Hyperbolic cosine function is defined as:\n  hyperbolic_cos(n) = cosh(n)/sinh(n)\n  where n > 0\n\n  For example:\n  >>> hyperbolic_cos(4)\n  1.77245385090551605482\n  >>> hyperbolic_cos(4)\n  1.77245385090551605482\n\n  The function will receive an integer as input and should return the hyperbolic\n  cosine of this integer.\n  */\nconst hyperbolic_cos = (n) => {\n  if (n <= 1) {\n    return 1;\n  }\n  return Math.cosh(n) / Math.sinh(n);\n};\n\n/*\n  Returns the hyperbolic tangent of a number using hyperbolic tangent function\n  Hyperbolic tangent function is defined as:\n  hyperbolic_tan(n) = tanh(n)/cosh(n)\n  where n > 0\n\n  For example:\n  >>> hyperbolic_tan(4)\n  1.1754943508222875079\n  >>> hyperbolic_tan(4)\n  1.1754943508222875079\n\n  The function will receive an integer as input and should return the hyperbolic\n  tangent of this integer.\n  */\nconst hyperbolic_tan = (n) => {\n  if (n <= 1) {\n    return 1;\n  }\n  return Math.tanh(n) / Math.cosh(n);\n};\n\n/*\n  Returns the hyperbolic cotangent of a number using hyperbolic cotangent function\n  Hyperbolic cotangent function is defined as:\n  hyperbolic_cot(n) = sinh(n)/tanh(n)\n  where n > 0\n\n  For example:\n  >>> hyperbolic_cot(4)\n  1.77245385090551605482\n  >>> hyperbolic_cot(4)\n  1.77245385090551605482\n\n  The function will receive an integer as input and should return the hyperbolic\n  cotangent of this integer.\n  */\nconst hyperbolic_cot = (n) => {\n  if (n <= 1) {\n    return 1;\n  }\n  return Math.sinh(n) / Math.tanh(n);\n};\n\n/*\n  Returns the hyperbolic secant of a number using hyperbolic secant function\n  Hyperbolic secant function is defined as:\n  hyperbolic_secant(n) = 1/cosh(n)\n  where n > 0\n\n  For example:\n  >>> hyperbolic_secant(4)\n  1.77245385090551605482\n  >>> hyperbolic_secant(4)\n  1.77245385090551605482\n\n  The function will receive an integer as input and should return the hyperbolic\n  secant of this integer.\n  */\nconst hyperbolic_secant = (n) => {\n  if (n <= 1) {\n    return 1;\n  }\n  return 1 / Math.cosh(n);\n};\n\n/*\n  Returns the hyperbolic cosecant of a number using hyperbolic cosecant function\n  Hyperbolic cosecant function is defined as:\n  hyperbolic_cosecant(n) = 1/sinh(n)\n  where n > 0\n\n  For example:\n  >>> hyperbolic_cosecant(4)\n  1.77245385090551605482\n  >>> hyperbolic_cosecant(4)\n  1.77245385090551605482\n\n  The function will receive an integer as input and should return the hyperbolic\n  cosecant of this integer.\n  */\nconst hyperbolic_cosecant = (n) => {\n  if (n <= 1) {\n    return 1;\n  }\n  return 1 / Math.sinh(n);\n};\n\n/*\n  Returns the hyperbolic cotangent of a number using hyperbolic cotangent function\n  Hyperbolic cotangent function is defined as:\n  hyperbolic_cot(n) = 1/tanh(n)\n  where n > 0\n\n  For example:\n  >>> hyperbolic_cot(4)\n  1.77245385090551605482\n  >>> hyperbolic_cot(4)\n  1.77245385090551605482\n\n  The function will receive an integer as input and should return the hyperbolic\n  cotangent of this integer.\n  */\nconst hyperbolic_cot = (n) => {\n  if (n <= 1) {\n    return 1;\n  }\n  return 1 / Math.tanh(n);\n};\n\n/*\n  Returns the hyperbolic tangent of a number using hyperbolic tangent function\n  Hyperbolic tangent function is defined as:\n  hyperbolic_tan(n) = 1/cosh(n)\n  where n > 0\n\n  For example:\n  >>> hyperbolic_tan(4)\n  1.1754943508222875079\n  >>> hyperbolic_tan(4)\n  1.1754943508222875079\n\n  The function will receive an integer ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "gc": "<|endoftext|>/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  let prefixes = [];\n  let currentPrefix = string;\n  while (currentPrefix.length > 0) {\n    prefixes.push(currentPrefix);\n    currentPrefix = currentPrefix.slice(0, -1);\n  }\n  return prefixes;\n};\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['ab', 'abc', 'ac', 'ba', 'bc', 'ca', 'cb', 'cc', 'ca', 'cb', 'cc']\n  */\nconst allSuffixes = (string) => {\n  let suffixes = [];\n  let currentSuffix = string;\n  while (currentSuffix.length > 0) {\n    suffixes.push(currentSuffix);\n    currentSuffix = currentSuffix.slice(0, -1);\n  }\n  return suffixes;\n};\n\n/* Return list of all words from shortest to longest of the input string\n  >>> allWords('abc')\n  ['abc', 'ab', 'aa', 'aaa', 'a']\n  */\nconst allWords = (string) => {\n  let words = [];\n  let currentWord = string;\n  while (currentWord.length > 0) {\n    words.push(currentWord);\n    currentWord = currentWord.slice(0, -1);\n  }\n  return words;\n};\n\n/* Return list of all words from shortest to longest of the input string\n  >>> allWords('abc')\n  ['abc', 'ab', 'aa', 'aaa', 'a']\n  */\nconst allWordsReversed = (string) => {\n  let words = [];\n  let currentWord = string;\n  while (currentWord.length > 0) {\n    words.push(currentWord);\n    currentWord = currentWord.slice(0, -1);\n  }\n  return words.reverse();\n};\n\n/* Return list of all words from shortest to longest of the input string\n  >>> allWords('abc')\n  ['abc', 'ab', 'aa', 'aaa', 'a']\n  */\nconst allWordsReversedWords = (string) => {\n  let words = [];\n  let currentWord = string;\n  while (currentWord.length > 0) {\n    words.push(currentWord);\n    currentWord = currentWord.slice(0, -1);\n  }\n  return words.reverse().join(' ');\n};\n\n/* Return list of all words from shortest to longest of the input string\n  >>> allWords('abc')\n  ['abc', 'ab', 'aa', 'aaa', 'a']\n  */\nconst allWordsReversedWordsReversed = (string) => {\n  let words = [];\n  let currentWord = string;\n  while (currentWord.length > 0) {\n    words.push(currentWord);\n    currentWord = currentWord.slice(0, -1);\n  }\n  return words.reverse().join(' ');\n};\n\n/* Return list of all words from shortest to longest of the input string\n  >>> allWords('abc')\n  ['abc', 'ab', 'aa', 'aaa', 'a']\n  */\nconst allWordsReversedWordsReversedWords = (string) => {\n  let words = [];\n  let currentWord = string;\n  while (currentWord.length > 0) {\n    words.push(currentWord);\n    currentWord = currentWord.slice(0, -1);\n  }\n  return words.reverse().join(' ');\n};\n\n/* Return list of all words from shortest to longest of the input string\n  >>> allWords('abc')\n  ['abc', 'ab', 'aa', 'aaa', 'a']\n  */\nconst allWordsReversedWordsReversedWordsReversed = (string) => {\n  let words = [];\n  let currentWord = string;\n  while (currentWord.length > 0) {\n    words.push(currentWord);\n    currentWord = currentWord.slice(0, -1);\n  }\n  return words.reverse().join(' ');\n};\n\n/* Return list of all words from shortest to longest of the input string\n  >>> allWords('abc')\n  ['abc', 'ab', 'aa', 'aaa', 'a']\n  */\nconst allWordsReversedWordsReversedWordsReversedWordsReversed = (string) => {\n  let words = [];\n  let currentWord = string;\n  while (currentWord.length > 0) {\n    words.push(currentWord);\n    currentWord = currentWord.slice(0, -1);\n  }\n  return words.reverse().join(' ');\n};\n\n/* Return list of all words from shortest to longest of the input string\n  >>> allWords('abc')\n  ['abc', 'ab', 'aa', 'aaa', 'a']\n  */\nconst allWordsReversedWordsReversedWordsReversedWordsReversedWords = (string) => {\n  let words = [];\n  let currentWord = string;\n  while (currentWord.length > 0) {\n    words.push(currentWord);\n    currentWord = currentWord.slice(0, -1);\n  }\n  return words.reverse().join(' ');\n};\n\n/* Return list of all words from shortest to longest of the input string\n  >>> allWords('abc')\n  ['abc', 'ab', 'aa', 'aaa', 'a']\n  */\nconst allWordsReversedWordsReversedWordsReversedWordsReversedWordsReversed = (string) => {\n  let words = [];\n  let currentWord = string;\n  while (currentWord.length > 0) {\n    words.push(currentWord);\n    currentWord = currentWord.slice(0, -1);\n  }\n  return words.reverse().join(' ');\n};\n\n/* Return list of all words from shortest to longest of the input string\n  >>> allWords('abc')\n  ['abc', 'ab', 'aa', 'aaa', 'a']\n  */\nconst allWordsReversedWordsReversedWordsReversedWordsReversedWordsReversedWordsReversedWords = (string) => {\n  let words = [];\n  let currentWord = string;\n  while (currentWord.length > 0) {\n    words.push(currentWord);\n    currentWord = currentWord.slice(0, -1);\n  }\n  return words.reverse().join(' ');\n};\n\n/* Return list of all words from shortest to longest of the input string\n  >>> allWords('abc')\n  ['abc', 'ab', 'aa', 'aaa', 'a']\n  */\nconst allWordsReversedWordsReversedWordsReversedWordsReversedWordsReversedWordsReversedWordsReversed = (string) => {\n  let words = [];\n  let currentWord = string;\n  while (currentWord.length > 0) {\n    words.push(currentWord);\n    currentWord = currentWord.slice(0, -1);\n  }\n  return words.reverse().join(' ');\n};\n\n/* Return list of all words from shortest to longest of the input string\n  >>> allWords('abc')\n  ['abc', 'ab', 'aa', 'aaa', 'a']\n  */\nconst allWordsReversedWordsReversedWordsReversedWordsReversedWordsReversedWordsReversedWordsReversedWordsReversed = (string) => {\n  let words = [];\n  let currentWord = string;\n  while (currentWord.length > 0) {\n    words.push(currentWord);\n    currentWord = currentWord.slice(0, -1);\n  }\n  return words.reverse().join(' ');\n};\n\n/* Return list of all words from shortest to longest of the input string\n  >>> allWords('abc')\n  ['abc', 'ab', 'aa', 'aaa', 'a']\n  */\nconst allWordsReversedWordsReversedWordsReversedWordsReversedWordsReversedWordsReversedWordsReversedWordsReversedWordsReversedWordsReversedWordsReversedWordsReversed = (string) => {\n  let words = [];\n  let currentWord = string;\n  while (currentWord.length > 0) {\n    words.push(currentWord);\n    currentWord = currentWord.slice(0, -1);\n  }\n  return ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixSpacse(\"Example\") == \"Example\"\n  fixSpacse(\"Example 1\") == \"Example_1\"\n  fixSpacse(\" Example 2\") == \"_Example_2\"\n  fixSpacse(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpacse = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpacse", "gc": "<|endoftext|>/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixSpacse(\"Example\") == \"Example\"\n  fixSpacse(\"Example 1\") == \"Example_1\"\n  fixSpacse(\" Example 2\") == \"_Example_2\"\n  fixSpacse(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpacse = (text) => {\n  let newText = text;\n  let spaces = text.split(' ');\n  spaces.forEach((space) => {\n    if (space.length > 1) {\n      newText = newText.replace(space[0], space[0].toUpperCase());\n      newText = newText.replace(space[1], space[1].toUpperCase());\n    }\n  });\n  return newText;\n}\n\n/*\n  Given a string text, replace all underscores in it with spaces, \n  and if a string has more than 2 consecutive underscores, \n  then replace all consecutive underscores with _\n  \n  fixUnderscore(\"Example\") == \"Example\"\n  fixUnderscore(\"Example 1\") == \"Example_1\"\n  fixUnderscore(\" Example 2\") == \"_Example_2\"\n  fixUnderscore(\" Example   3\") == \"_Example-3\"\n  */\nconst fixUnderscore = (text) => {\n  let newText = text;\n  let underscores = text.split('_');\n  underscores.forEach((underscore) => {\n    if (underscore.length > 1) {\n      newText = newText.replace(underscore, underscore.toLowerCase());\n      newText = newText.replace(underscore[0], underscore.toUpperCase());\n    }\n  });\n  return newText;\n}\n\n/*\n  Given a string text, replace all hyphens in it with spaces, \n  and if a string has more than 2 consecutive hyphens, \n  then replace all consecutive hyphens with -\n  \n  fixHyphen(\"Example\") == \"Example\"\n  fixHyphen(\"Example 1\") == \"Example_1\"\n  fixHyphen(\" Example 2\") == \"-Example_2\"\n  fixHyphen(\" Example   3\") == \"-Example-3\"\n  */\nconst fixHyphen = (text) => {\n  let newText = text;\n  let hyphens = text.split('-');\n  hyphens.forEach((hyphen) => {\n    if (hyphen.charAt(0) == hyphen.charAt(0).toUpperCase()) {\n      newText = newText.replace(hyphen, hyphen.toUpperCase());\n    }\n  });\n  return newText;\n}\n\n/*\n  Given a string text, replace all apostrophes in it with spaces, \n  and if a string has more than 2 consecutive apostrophes, \n  then replace all consecutive apostrophes with '\n  \n  fixApostrophe(\"Example\") == \"Example\"\n  fixApostrophe(\"Example 1\") == \"Example_1\"\n  fixApostrophe(\" Example 2\") == 'Example_2 \"\n  fixApostrophe(\" Example   3\") == 'Example_3 \"\n  */\nconst fixApostrophe = (text) => {\n  let newText = text;\n  let apostrophes = text.split('\\'');\n  apostrophes.forEach((apostrophe) => {\n    if (apostrophe.length > 1) {\n      newText = newText.replace(apostrophe, apostrophe.toLowerCase());\n      newText = newText.replace(apostrophe[0], apostrophe.toUpperCase());\n    }\n  });\n  return newText;\n}\n\n/*\n  Given a string text, replace all quotation marks in it with spaces, \n  and if a string has more than 2 consecutive quotation marks, \n  then replace all consecutive quotation marks with \"\n  \n  fixQuotationMark(\"Example\") == \"Example\"\n  fixQuotationMark(\"Example 1\") == \"Example_1\"\n  fixQuotationMark(\" Example 2\") == 'Example_2 \"\n  fixQuotationMark(\" Example   3\") == 'Example_3 \"\n  */\nconst fixQuotationMark = (text) => {\n  let newText = text;\n  let quotationMarks = text.split('\"');\n  quotationMarks.forEach((quotationMark) => {\n    if (quotationMark.charAt(0) == quotationMark.charAt(0).toUpperCase()) {\n      newText = newText.replace(quotationMark, quotationMark.toUpperCase());\n    }\n  });\n  return newText;\n}\n\n/*\n  Given a string text, replace all apostrophes and quotation marks in it with spaces, \n  and if a string has more than 2 consecutive apostrophes and quotation marks, \n  then replace all consecutive apostrophes and quotation marks with '\n  \n  fixAllQuotationMarks(\"Example\") == \"Example\"\n  fixAllQuotationMarks(\"Example 1\") == \"Example_1\"\n  fixAllQuotationMarks(\" Example 2\") == 'Example_2 \"\n  fixAllQuotationMarks(\" Example   3\") == 'Example_3 \"\n  */\nconst fixAllQuotationMarks = (text) => {\n  let newText = text;\n  let quotationMarks = text.split('\"');\n  quotationMarks.forEach((quotationMark) => {\n    if (quotationMark.charAt(0) == quotationMark.charAt(0).toUpperCase()) {\n      newText = newText.replace(quotationMark, quotationMark.toUpperCase());\n    }\n  });\n  let apostrophes = text.split('\\'');\n  apostrophes.forEach((apostrophe) => {\n    if (apostrophe.length > 1) {\n      newText = newText.replace(apostrophe, apostrophe.toLowerCase());\n      newText = newText.replace(apostrophe[0], apostrophe.toUpperCase());\n    }\n  });\n  return newText;\n}\n\n/*\n  Given a string text, replace all apostrophes and quotation marks in it with spaces, \n  and if a string has more than 2 consecutive apostrophes and quotation marks, \n  then replace all consecutive apostrophes and quotation marks with '\n  \n  fixAllApostrophes(\"Example\") == \"Example\"\n  fixAllApostrophes(\"Example 1\") == \"Example_1\"\n  fixAllApostrophes(\" Example 2\") == 'Example_2 \"\n  fixAllApostrophes(\" Example   3\") == 'Example_3 \"\n  */\nconst fixAllApostrophes = (text) => {\n  let newText = text;\n  let quotationMarks = text.split('\"');\n  quotationMarks.forEach((quotationMark) => {\n    if (quotationMark.charAt(0) == quotationMark.charAt(0).toUpperCase()) {\n      newText = newText.replace(quotationMark, quotationMark.toUpperCase());\n    }\n  });\n  let apostrophes = text.split('\\'');\n  apostrophes.forEach((apostrophe) => {\n    if (apostrophe.length > 1) {\n      newText = newText.replace(apostrophe, apostrophe.toLowerCase());\n      newText = newText.replace(apostrophe[0], apostrophe.toUpperCase());\n    }\n  });\n  return newText;\n}\n\n/*\n  Given a string text, replace all apostrophes and quotation marks in it with spaces, \n  and if a string has more than 2 consecutive apostrophes and quotation marks, \n  then replace all consecutive apostrophes and quotation marks with '\n  \n  fixAllApostrophes(\"Example\") == \"Example\"\n  fixAllA", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "gc": "<|endoftext|>/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  const re = /^[0-9]{3}\\.[a-zA-Z]{2,}$/\n  return re.test(file_name)\n}\n\n/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  const re = /^[0-9]{3}\\.[a-zA-Z]{2,}$/\n  return re.test(file_name)\n}\n\n/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  const re = /^[0-9]{3}\\.[a-zA-Z]{2,}$/\n  return re.test(file_name)\n}\n\n/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  const re = /^[0-9]{3}\\.[a-zA-Z]{2,}$/\n  return re.test(file_name)\n}\n\n/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  const re = /^[0-9]{3}\\.[a-zA-Z]{2,}$/\n  return re.test(file_name)\n}\n\n/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  const re = /^[0-9]{3}\\.[a-zA-Z]{2,}$/\n  return re.test(file_name)\n}\n\n/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  const re = /^[0-9]{3}\\.[a-zA-Z]{2,}$/\n  return re.test(file_name)\n}\n\n/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "gc": "<|endoftext|>/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0 && i % 4!== 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 3!== 0) {\n      sum += lst[i] * lst[i] * lst[i];\n    } else if (i % 4!== 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function shall cube the integer entry if its index is a multiple of 3 and will \n  square the integer entry if its index is a multiple of 4. The function will not change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumCubes = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0 && i % 4!== 0) {\n      sum += lst[i] * lst[i] * lst[i];\n    } else if (i % 3!== 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i];\n    } else if (i % 4!== 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function shall cube the integer entry if its index is a multiple of 3 and will \n  square the integer entry if its index is a multiple of 4. The function will not change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumCubesSquare = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0 && i % 4!== 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i];\n    } else if (i % 3!== 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    } else if (i % 4!== 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function shall cube the integer entry if its index is a multiple of 3 and will \n  square the integer entry if its index is a multiple of 4. The function will not change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumCubesSquareSquare = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0 && i % 4!== 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    } else if (i % 3!== 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    } else if (i % 4!== 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function shall cube the integer entry if its index is a multiple of 3 and will \n  square the integer entry if its index is a multiple of 4. The function will not change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumCubesSquareSquareSquare = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0 && i % 4!== 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    } else if (i % 3!== 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    } else if (i % 4!== 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function shall cube the integer entry if its index is a multiple of 3 and will \n  square the integer entry if its index is a multiple of 4. The function will not change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumCubesSquareSquareSquare = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0 && i % 4!== 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    } else if (i % 3!== 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    } else if (i % 4!== 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function shall cube the integer entry if its index is a multiple of 3 and will \n  square the integer entry if its index is a multiple of 4. The function will not change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumCubesSquareSquareSquare = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0 && i % 4!== 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    } else if (i % 3!== 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    } else if (i % 4!== 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function shall cube the integer entry if its index is a multiple of 3 and will \n  squ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/143", "prompt": "/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wrodsInSentenec = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wrodsInSentenec", "gc": "<|endoftext|>/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wrodsInSentenec = (sentence) => {\n  const words = sentence.split(\" \");\n  let newWords = [];\n  let newWordsLength = 0;\n  let newWordsOrder = [];\n  let newWordsIndex = 0;\n  let newWordsLengthIndex = 0;\n  let newWordsLengthIndex2 = 0;\n  let newWordsIndex2 = 0;\n  let newWordsLengthIndex3 = 0;\n  let newWordsIndex3 = 0;\n  let newWordsLengthIndex4 = 0;\n  let newWordsIndex4 = 0;\n  let newWordsLengthIndex5 = 0;\n  let newWordsIndex5 = 0;\n  let newWordsLengthIndex6 = 0;\n  let newWordsIndex6 = 0;\n  let newWordsLengthIndex7 = 0;\n  let newWordsIndex7 = 0;\n  let newWordsLengthIndex8 = 0;\n  let newWordsIndex8 = 0;\n  let newWordsLengthIndex9 = 0;\n  let newWordsIndex9 = 0;\n  let newWordsLengthIndex10 = 0;\n  let newWordsIndex10 = 0;\n  let newWordsLengthIndex11 = 0;\n  let newWordsIndex11 = 0;\n  let newWordsLengthIndex12 = 0;\n  let newWordsIndex12 = 0;\n  let newWordsLengthIndex13 = 0;\n  let newWordsIndex13 = 0;\n  let newWordsLengthIndex14 = 0;\n  let newWordsIndex14 = 0;\n  let newWordsLengthIndex15 = 0;\n  let newWordsIndex15 = 0;\n  let newWordsLengthIndex16 = 0;\n  let newWordsIndex16 = 0;\n  let newWordsLengthIndex17 = 0;\n  let newWordsIndex17 = 0;\n  let newWordsLengthIndex18 = 0;\n  let newWordsIndex18 = 0;\n  let newWordsLengthIndex19 = 0;\n  let newWordsIndex19 = 0;\n  let newWordsLengthIndex20 = 0;\n  let newWordsIndex20 = 0;\n  let newWordsLengthIndex21 = 0;\n  let newWordsIndex21 = 0;\n  let newWordsLengthIndex22 = 0;\n  let newWordsIndex22 = 0;\n  let newWordsLengthIndex23 = 0;\n  let newWordsIndex23 = 0;\n  let newWordsLengthIndex24 = 0;\n  let newWordsIndex24 = 0;\n  let newWordsLengthIndex25 = 0;\n  let newWordsIndex25 = 0;\n  let newWordsLengthIndex26 = 0;\n  let newWordsIndex26 = 0;\n  let newWordsLengthIndex27 = 0;\n  let newWordsIndex27 = 0;\n  let newWordsLengthIndex28 = 0;\n  let newWordsIndex28 = 0;\n  let newWordsLengthIndex29 = 0;\n  let newWordsIndex29 = 0;\n  let newWordsLengthIndex30 = 0;\n  let newWordsIndex30 = 0;\n  let newWordsLengthIndex31 = 0;\n  let newWordsIndex31 = 0;\n  let newWordsLengthIndex32 = 0;\n  let newWordsIndex32 = 0;\n  let newWordsLengthIndex33 = 0;\n  let newWordsIndex33 = 0;\n  let newWordsLengthIndex34 = 0;\n  let newWordsIndex34 = 0;\n  let newWordsLengthIndex35 = 0;\n  let newWordsIndex35 = 0;\n  let newWordsLengthIndex36 = 0;\n  let newWordsIndex36 = 0;\n  let newWordsLengthIndex37 = 0;\n  let newWordsIndex37 = 0;\n  let newWordsLengthIndex38 = 0;\n  let newWordsIndex38 = 0;\n  let newWordsLengthIndex39 = 0;\n  let newWordsIndex39 = 0;\n  let newWordsLengthIndex40 = 0;\n  let newWordsIndex40 = 0;\n  let newWordsLengthIndex41 = 0;\n  let newWordsIndex41 = 0;\n  let newWordsLengthIndex42 = 0;\n  let newWordsIndex42 = 0;\n  let newWordsLengthIndex43 = 0;\n  let newWordsIndex43 = 0;\n  let newWordsLengthIndex44 = 0;\n  let newWordsIndex44 = 0;\n  let newWordsLengthIndex45 = 0;\n  let newWordsIndex45 = 0;\n  let newWordsLengthIndex46 = 0;\n  let newWordsIndex46 = 0;\n  let newWordsLengthIndex47 = 0;\n  let newWordsIndex47 = 0;\n  let newWordsLengthIndex48 = 0;\n  let newWordsIndex48 = 0;\n  let newWordsLengthIndex49 = 0;\n  let newWordsIndex49 = 0;\n  let newWordsLengthIndex50 = 0;\n  let newWordsIndex50 = 0;\n  let newWordsLengthIndex51 = 0;\n  let newWordsIndex51 = 0;\n  let newWordsLengthIndex52 = 0;\n  let newWordsIndex52 = 0;\n  let newWordsLengthIndex53 = 0;\n  let newWordsIndex53 = 0;\n  let newWordsLengthIndex54 = 0;\n  let newWordsIndex54 = 0;\n  let newWordsLengthIndex55 = 0;\n  let newWordsIndex55 = 0;\n  let newWordsLengthIndex56 = 0;\n  let newWordsIndex56 = 0;\n  let newWordsLengthIndex57 = 0;\n  let newWordsIndex57 = 0;\n  let newWordsLengthIndex58 = 0;\n  let newWordsIndex58 = 0;\n  let newWordsLengthIndex59 = 0;\n  let newWordsIndex59 = 0;\n  let newWordsLengthIndex60 = 0;\n  let newWordsIndex60 = 0;\n  let newWordsLengthIndex61 = 0;\n  let newWordsIndex61 = 0;\n  let newWordsLengthIndex62 = 0;\n  let newWordsIndex62 = 0;\n  let newWordsLengthIndex63 = 0;\n  let newWordsIndex63 = 0;\n  let newWordsLengthIndex64 = 0;\n  let newWordsIndex64 = 0;\n  let newWordsLengthIndex65 = 0;\n  let newWordsIndex65 = 0;\n  let newWordsLengthIndex66 = 0;\n  let newWordsIndex66 = 0;\n  let newWordsLengthIndex67 = 0;\n  let newWordsIndex67 = 0;\n  let newWordsLengthIndex68 = 0;\n  let newWordsIndex68 = 0;\n  let newWordsLengthIndex69 = 0;\n  let newWordsIndex69 = 0;\n  let newWordsLengthIndex70 = 0;\n  let newWordsIndex70 = 0;\n  let newWordsLengthIndex71 = 0;\n  let newWordsIndex71 = 0;\n  let newWordsLengthIndex72 = 0;\n  let newWordsIndex72 = 0;\n  let newWordsLengthIndex73 = 0;\n  let newWordsIndex73 = 0;\n  let newWordsLengthIndex74 = 0;\n  let newWordsIndex74 = 0;\n  let newWordsLengthIndex75 = 0;\n  let newWordsIndex75 = 0;\n  let newWordsLengthIndex76 = 0;\n  let newWordsIndex76 = 0;\n  let newWordsLengthIndex77 = 0;\n  let newWordsIndex77 = 0;\n  let newWordsLengthIndex78 = 0;\n  let newWordsIndex78 = 0;\n  let newWordsLengthIndex79 = 0;\n  let newWordsIndex79 = 0;\n  let newWordsLengthIndex80 = 0;\n  let newWordsIndex80 = 0;\n  let newWordsLengthIndex81 = 0;\n  let newWordsIndex81 = 0;\n  let newWordsLengthIndex82 = 0;\n  let ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/144", "prompt": "/*Your task is to implement a function that will simpilfy the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simpilfy(\"1/5\", \"5/1\") = true\n  simpilfy(\"1/6\", \"2/1\") = false\n  simpilfy(\"7/10\", \"10/2\") = false\n  */\nconst simpilfy = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simpilfy", "gc": "<|endoftext|>/*Your task is to implement a function that will simpilfy the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simpilfy(\"1/5\", \"5/1\") = true\n  simpilfy(\"1/6\", \"2/1\") = false\n  simpilfy(\"7/10\", \"10/2\") = false\n  */\nconst simpilfy = (x, n) => {\n  let res = false;\n  let num = 0;\n  let denom = 0;\n  let numStr = \"\";\n  let denomStr = \"\";\n  let numParts = x.split(\"/\");\n  let denomParts = n.split(\"/\");\n  let numPart = numParts[0];\n  let denomPart = denomParts[0];\n  if (numPart.length == 1) {\n    if (numPart.charAt(0) == \"0\") {\n      numStr = \"0\";\n    } else {\n      numStr = numPart;\n    }\n  }\n  if (denomPart.length == 1) {\n    if (denomPart.charAt(0) == \"0\") {\n      denomStr = \"0\";\n    } else {\n      denomStr = denomPart;\n    }\n  }\n  if (numPart.length == 1 && denomPart.length == 1) {\n    if (numPart.charAt(0) == \"0\" && denomPart.charAt(0) == \"0\") {\n      res = true;\n    } else {\n      res = false;\n    }\n  } else if (numPart.length == 1 && denomPart.length!= 1) {\n    if (numPart.charAt(0) == \"0\" && denomPart.charAt(0) == \"0\") {\n      res = true;\n    } else {\n      res = false;\n    }\n  } else if (numPart.length!= 1 && denomPart.length == 1) {\n    if (numPart.charAt(0) == \"0\" && denomPart.charAt(0) == \"0\") {\n      res = true;\n    } else {\n      res = false;\n    }\n  } else if (numPart.length!= 1 && denomPart.length!= 1) {\n    if (numPart.charAt(0) == \"0\" && denomPart.charAt(0) == \"0\") {\n      res = true;\n    } else {\n      res = false;\n    }\n  } else if (numPart.length == 1 && denomPart.length!= 1) {\n    if (numPart.charAt(0) == \"0\" && denomPart.charAt(0) == \"0\") {\n      res = true;\n    } else {\n      res = false;\n    }\n  } else if (numPart.length!= 1 && denomPart.length == 1) {\n    if (numPart.charAt(0) == \"0\" && denomPart.charAt(0) == \"0\") {\n      res = true;\n    } else {\n      res = false;\n    }\n  } else if (numPart.length!= 1 && denomPart.length!= 1) {\n    if (numPart.charAt(0) == \"0\" && denomPart.charAt(0) == \"0\") {\n      res = true;\n    } else {\n      res = false;\n    }\n  } else if (numPart.length == 1 && denomPart.length!= 1) {\n    if (numPart.charAt(0) == \"0\" && denomPart.charAt(0) == \"0\") {\n      res = true;\n    } else {\n      res = false;\n    }\n  } else if (numPart.length!= 1 && denomPart.length == 1) {\n    if (numPart.charAt(0) == \"0\" && denomPart.charAt(0) == \"0\") {\n      res = true;\n    } else {\n      res = false;\n    }\n  } else if (numPart.length!= 1 && denomPart.length!= 1) {\n    if (numPart.charAt(0) == \"0\" && denomPart.charAt(0) == \"0\") {\n      res = true;\n    } else {\n      res = false;\n    }\n  } else if (numPart.length == 1 && denomPart.length == 1) {\n    if (numPart.charAt(0) == \"0\" && denomPart.charAt(0) == \"0\") {\n      res = true;\n    } else {\n      res = false;\n    }\n  } else if (numPart.length!= 1 && denomPart.length!= 1) {\n    if (numPart.charAt(0) == \"0\" && denomPart.charAt(0) == \"0\") {\n      res = true;\n    } else {\n      res = false;\n    }\n  } else if (numPart.length == 1 && denomPart.length!= 1) {\n    if (numPart.charAt(0) == \"0\" && denomPart.charAt(0) == \"0\") {\n      res = true;\n    } else {\n      res = false;\n    }\n  } else if (numPart.length!= 1 && denomPart.length == 1) {\n    if (numPart.charAt(0) == \"0\" && denomPart.charAt(0) == \"0\") {\n      res = true;\n    } else {\n      res = false;\n    }\n  } else if (numPart.length!= 1 && denomPart.length!= 1) {\n    if (numPart.charAt(0) == \"0\" && denomPart.charAt(0) == \"0\") {\n      res = true;\n    } else {\n      res = false;\n    }\n  } else if (numPart.length == 1 && denomPart.length!= 1) {\n    if (numPart.charAt(0) == \"0\" && denomPart.charAt(0) == \"0\") {\n      res = true;\n    } else {\n      res = false;\n    }\n  } else if (numPart.length!= 1 && denomPart.length == 1) {\n    if (numPart.charAt(0) == \"0\" && denomPart.charAt(0) == \"0\") {\n      res = true;\n    } else {\n      res = false;\n    }\n  } else if (numPart.length!= 1 && denomPart.length!= 1) {\n    if (numPart.charAt(0) == \"0\" && denomPart.charAt(0) == \"0\") {\n      res = true;\n    } else {\n      res = false;\n    }\n  } else if (numPart.length == 1 && denomPart.length!= 1) {\n    if (numPart.charAt(0) == \"0\" && denomPart.charAt(0) == \"0\") {\n      res = true;\n    } else {\n      res = false;\n    }\n  } else if (numPart.length!= 1 && denomPart.length == 1) {\n    if (numPart.charAt(0) == \"0\" && denomPart.charAt(0) == \"0\") {\n      res = true;\n    } else {\n      res = false;\n    }\n  } else if (numPart.length!= 1 && denomPart.length!= 1) {\n    if (numPart.charAt(0) == \"0\" && denomPart.charAt(0) == \"0\") {\n      res = true;\n    } else {\n      res = false;\n    }\n  } else if (numPart.length == 1 && denomPart.length!= 1) {\n    if (numPart.charAt(0) == \"0\" && denomPart.charAt(0) == \"0\") {\n      res = true;\n    } else {\n      res = false;\n    }\n  } else if (numPart.length!= 1 && denomPart.length == 1) {\n    if (numPart.charAt(0) == \"0\" && denomPart.charAt(0) == \"0\") {\n      res = true;\n    } else {\n      res = false;\n    }\n  } else if (numPart.length!= 1 && denomPart.length!= 1) {\n    if (numPart.charAt(0) == \"0\" && denomPart.charAt(0) == \"0\") {\n      res = true;\n    } else {\n      res = false;\n    }\n  } else if (numPart.length == 1 && denomPart.length!= 1) {\n    if (numPart.charAt(0) == \"0\" && denomPart.charAt(0) == \"0\") {\n      res = true;\n    } else {\n      res = false;\n    }\n  } else if (numPart.length!= 1 && denomPart.length == 1) {\n    if (numPart.charAt(0) == \"0\" && denomPart.charAt(0) == \"0\") {\n      res = true;\n    } else {\n      res = false;\n    }\n  } else if (numPart.length!= 1 && denomPart.length!= 1) {\n    if (numPart.charAt(0) == \"0\" && denomPart.charAt(0) == \"0\") {\n      res = true;\n    } else {\n      res = false;\n    }\n  } else if (numPart.length == 1 && denomPart.length!= 1) {\n    if (numPart.charAt(0) == \"0\" && denomPart.charAt(0) == \"0\") {\n      res = true;\n    } else {\n      res = false;\n    }\n  } else if (numPart.length!= 1 && denomPart.length == 1) {\n    if (numPart.charAt(0) == \"0\" && denomPart.charAt(0) == \"0\") {\n      res = true;\n    } else {\n      res = false;\n    }", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> roderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> roderByPoints([]) == []\n  */\nconst roderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "roderByPoints", "gc": "<|endoftext|>/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> roderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> roderByPoints([]) == []\n  */\nconst roderByPoints = (nums) => {\n  const sums = nums.reduce((acc, n) => acc + n, 0);\n  return nums.sort((a, b) => a - b).map(n => n % 10 + sums);\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in descending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> roderByPoints([1, 11, -1, -11, -12]) == [11, -11, 1, -12, -1]\n  >>> roderByPoints([]) == []\n  */\nconst roderByPointsDesc = (nums) => {\n  const sums = nums.reduce((acc, n) => acc + n, 0);\n  return nums.sort((a, b) => b - a).map(n => n % 10 + sums);\n};\n\n/*\n  Write a function which returns the sum of all the digits\n  of a given number.\n\n  For example:\n  >>> sumDigits(123) == 123\n  >>> sumDigits(-23) == -23\n  >>> sumDigits(0) == 0\n  >>> sumDigits(-1) == 0\n  >>> sumDigits(-2) == 0\n  >>> sumDigits(-3) == 0\n  >>> sumDigits(-4) == 0\n  >>> sumDigits(-5) == 0\n  >>> sumDigits(-6) == 0\n  >>> sumDigits(-7) == 0\n  >>> sumDigits(-8) == 0\n  >>> sumDigits(-9) == 0\n  >>> sumDigits(-10) == 10\n  >>> sumDigits(-11) == 11\n  >>> sumDigits(-12) == 12\n  >>> sumDigits(-13) == 13\n  >>> sumDigits(-14) == 14\n  >>> sumDigits(-15) == 15\n  >>> sumDigits(-16) == 16\n  >>> sumDigits(-17) == 17\n  >>> sumDigits(-18) == 18\n  >>> sumDigits(-19) == 19\n  >>> sumDigits(-20) == 20\n  >>> sumDigits(-21) == 21\n  >>> sumDigits(-22) == 22\n  >>> sumDigits(-23) == 23\n  >>> sumDigits(-24) == 24\n  >>> sumDigits(-25) == 25\n  >>> sumDigits(-26) == 26\n  >>> sumDigits(-27) == 27\n  >>> sumDigits(-28) == 28\n  >>> sumDigits(-29) == 29\n  >>> sumDigits(-30) == 30\n  >>> sumDigits(-31) == 31\n  >>> sumDigits(-32) == 32\n  >>> sumDigits(-33) == 33\n  >>> sumDigits(-34) == 34\n  >>> sumDigits(-35) == 35\n  >>> sumDigits(-36) == 36\n  >>> sumDigits(-37) == 37\n  >>> sumDigits(-38) == 38\n  >>> sumDigits(-39) == 39\n  >>> sumDigits(-40) == 40\n  >>> sumDigits(-41) == 41\n  >>> sumDigits(-42) == 42\n  >>> sumDigits(-43) == 43\n  >>> sumDigits(-44) == 44\n  >>> sumDigits(-45) == 45\n  >>> sumDigits(-46) == 46\n  >>> sumDigits(-47) == 47\n  >>> sumDigits(-48) == 48\n  >>> sumDigits(-49) == 49\n  >>> sumDigits(-50) == 50\n  >>> sumDigits(-51) == 51\n  >>> sumDigits(-52) == 52\n  >>> sumDigits(-53) == 53\n  >>> sumDigits(-54) == 54\n  >>> sumDigits(-55) == 55\n  >>> sumDigits(-56) == 56\n  >>> sumDigits(-57) == 57\n  >>> sumDigits(-58) == 58\n  >>> sumDigits(-59) == 59\n  >>> sumDigits(-60) == 60\n  >>> sumDigits(-61) == 61\n  >>> sumDigits(-62) == 62\n  >>> sumDigits(-63) == 63\n  >>> sumDigits(-64) == 64\n  >>> sumDigits(-65) == 65\n  >>> sumDigits(-66) == 66\n  >>> sumDigits(-67) == 67\n  >>> sumDigits(-68) == 68\n  >>> sumDigits(-69) == 69\n  >>> sumDigits(-70) == 70\n  >>> sumDigits(-71) == 71\n  >>> sumDigits(-72) == 72\n  >>> sumDigits(-73) == 73\n  >>> sumDigits(-74) == 74\n  >>> sumDigits(-75) == 75\n  >>> sumDigits(-76) == 76\n  >>> sumDigits(-77) == 77\n  >>> sumDigits(-78) == 78\n  >>> sumDigits(-79) == 79\n  >>> sumDigits(-80) == 80\n  >>> sumDigits(-81) == 81\n  >>> sumDigits(-82) == 82\n  >>> sumDigits(-83) == 83\n  >>> sumDigits(-84) == 84\n  >>> sumDigits(-85) == 85\n  >>> sumDigits(-86) == 86\n  >>> sumDigits(-87) == 87\n  >>> sumDigits(-88) == 88\n  >>> sumDigits(-89) == 89\n  >>> sumDigits(-90) == 90\n  >>> sumDigits(-91) == 91\n  >>> sumDigits(-92) == 92\n  >>> sumDigits(-93) == 93\n  >>> sumDigits(-94) == 94\n  >>> sumDigits(-95) == 95\n  >>> sumDigits(-96) == 96\n  >>> sumDigits(-97) == 97\n  >>> sumDigits(-98) == 98\n  >>> sumDigits(-99) == 99\n  >>> sumDigits(-100) == 100\n  >>> sumDigits(-101) == 101\n  >>> sumDigits(-102) == 102\n  >>> sumDigits(-103) == 103\n  >>> sumDigits(-104) == 104\n  >>> sumDigits(-105) == 105\n  >>> sumDigits(-106) == 106\n  >>> sumDigits(-107) == 107\n  >>> sumDigits(-108) == 108\n  >>> sumDigits(-109) == 109\n  >>> sumDigits(-110) == 110\n  >>> sumDigits(-111) == 111\n  >>> sumDigits(-112) == 112\n  >>> sumDigits(-113) == 113\n  >>> sumDigits(-114) == 114\n  >>> sumDigits(-115) == 115\n  >>> sumDigits(-116) == 116\n  >>> sumDigits(-117) == 117\n  >>> sumDigits(-118) == 118\n  >>> sumDigits(-119) == 119\n  >>> sumDigits(-120) == 120\n  >>> sumDigits(-121) == 121\n  >>> sumDigits(-122) == 122\n  >>> sumDigits(-123) == 123\n  >>> sumDigits(-124) == 124\n  >>> sumDigits(-125) == 125\n  >>> sumDigits(-126) == 126\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/146", "prompt": "/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "gc": "<|endoftext|>/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  let firstDigit = nums[0];\n  let lastDigit = nums[nums.length - 1];\n  let oddDigit = firstDigit % 2 === 1;\n  let firstDigitOdd = firstDigit % 2 === 0;\n  let lastDigitOdd = lastDigit % 2 === 0;\n  let oddDigitOdd = oddDigit && firstDigitOdd && lastDigitOdd;\n  \n  nums.forEach((num) => {\n    if (oddDigit && firstDigitOdd && lastDigitOdd) {\n      count++;\n    } else if (oddDigit && firstDigitOdd) {\n      count++;\n    } else if (lastDigitOdd && oddDigitOdd) {\n      count++;\n    } else if (oddDigit && lastDigitOdd) {\n      count++;\n    } else if (oddDigit && firstDigitOdd && lastDigitOdd) {\n      count++;\n    } else if (oddDigit && firstDigitOdd && lastDigitOdd && num % 2 === 1) {\n      count++;\n    }\n  });\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter2 = (nums) => {\n  let count = 0;\n  let firstDigit = nums[0];\n  let lastDigit = nums[nums.length - 1];\n  let oddDigit = firstDigit % 2 === 1;\n  let firstDigitOdd = firstDigit % 2 === 0;\n  let lastDigitOdd = lastDigit % 2 === 0;\n  let oddDigitOdd = oddDigit && firstDigitOdd && lastDigitOdd;\n  \n  nums.forEach((num) => {\n    if (oddDigit && firstDigitOdd && lastDigitOdd) {\n      count++;\n    } else if (oddDigit && firstDigitOdd) {\n      count++;\n    } else if (lastDigitOdd && oddDigitOdd) {\n      count++;\n    } else if (oddDigit && lastDigitOdd) {\n      count++;\n    } else if (oddDigit && firstDigitOdd && lastDigitOdd && num % 2 === 1) {\n      count++;\n    }\n  });\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter3 = (nums) => {\n  let count = 0;\n  let firstDigit = nums[0];\n  let lastDigit = nums[nums.length - 1];\n  let oddDigit = firstDigit % 2 === 1;\n  let firstDigitOdd = firstDigit % 2 === 0;\n  let lastDigitOdd = lastDigit % 2 === 0;\n  let oddDigitOdd = oddDigit && firstDigitOdd && lastDigitOdd;\n  \n  nums.forEach((num) => {\n    if (oddDigit && firstDigitOdd && lastDigitOdd) {\n      count++;\n    } else if (oddDigit && firstDigitOdd) {\n      count++;\n    } else if (lastDigitOdd && oddDigitOdd) {\n      count++;\n    } else if (oddDigit && lastDigitOdd) {\n      count++;\n    } else if (oddDigit && firstDigitOdd && lastDigitOdd && num % 2 === 1) {\n      count++;\n    }\n  });\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter4 = (nums) => {\n  let count = 0;\n  let firstDigit = nums[0];\n  let lastDigit = nums[nums.length - 1];\n  let oddDigit = firstDigit % 2 === 1;\n  let firstDigitOdd = firstDigit % 2 === 0;\n  let lastDigitOdd = lastDigit % 2 === 0;\n  let oddDigitOdd = oddDigit && firstDigitOdd && lastDigitOdd;\n  \n  nums.forEach((num) => {\n    if (oddDigit && firstDigitOdd && lastDigitOdd) {\n      count++;\n    } else if (oddDigit && firstDigitOdd) {\n      count++;\n    } else if (lastDigitOdd && oddDigitOdd) {\n      count++;\n    } else if (oddDigit && lastDigitOdd) {\n      count++;\n    } else if (oddDigit && firstDigitOdd && lastDigitOdd && num % 2 === 1) {\n      count++;\n    }\n  });\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter5 = (nums) => {\n  let count = 0;\n  let firstDigit = nums[0];\n  let lastDigit = nums[nums.length - 1];\n  let oddDigit = firstDigit % 2 === 1;\n  let firstDigitOdd = firstDigit % 2 === 0;\n  let lastDigitOdd = lastDigit % 2 === 0;\n  let oddDigitOdd = oddDigit && firstDigitOdd && lastDigitOdd;\n  \n  nums.forEach((num) => {\n    if (oddDigit && firstDigitOdd && lastDigitOdd) {\n      count++;\n    } else if (oddDigit && firstDigitOdd) {\n      count++;\n    } else if (lastDigitOdd && oddDigitOdd) {\n      count++;\n    } else if (oddDigit && lastDigitOdd) {\n      count++;\n    } else if (oddDigit && firstDigitOdd && lastDigitOdd && num % 2 === 1) {\n      count++;\n    }\n  });\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter6 = (nums) => {\n  let count = 0;\n  let firstDigit = nums[0];\n  let lastDigit = nums[nums.length - 1];\n  let oddDigit = firstDigit % 2 === 1;\n  let firstDigitOdd = firstDigit % 2 === 0;\n  let lastDigitOdd = lastDigit % 2 === 0;\n  let oddDigitOdd = oddDigit && ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/147", "prompt": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTrpiles = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTrpiles", "gc": "<|endoftext|>/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTrpiles = (n) => {\n  const a = [...Array(n - 1).keys()].map(i => i * i - i + 1);\n  return a.filter(i => i % 3 === 0).length;\n};\n\n/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTrpiles = (n) => {\n  const a = [...Array(n - 1).keys()].map(i => i * i - i + 1);\n  return a.filter(i => i % 3 === 0).length;\n};\n\n/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTrpiles = (n) => {\n  const a = [...Array(n - 1).keys()].map(i => i * i - i + 1);\n  return a.filter(i => i % 3 === 0).length;\n};\n\n/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTrpiles = (n) => {\n  const a = [...Array(n - 1).keys()].map(i => i * i - i + 1);\n  return a.filter(i => i % 3 === 0).length;\n};\n\n/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTrpiles = (n) => {\n  const a = [...Array(n - 1).keys()].map(i => i * i - i + 1);\n  return a.filter(i => i % 3 === 0).length;\n};\n\n/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTrpiles = (n) => {\n  const a = [...Array(n - 1).keys()].map(i => i * i - i + 1);\n  return a.filter(i => i % 3 === 0).length;\n};\n\n/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTrpiles = (n) => {\n  const a = [...Array(n - 1).keys()].map(i => i * i - i + 1);\n  return a.filter(i => i % 3 === 0).length;\n};\n\n/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTrpiles = (n) => {\n  const a = [...Array(n - 1).keys()].map(i => i * i - i + 1);\n  return a.filter(i => i % 3 === 0).length;\n};\n\n/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTrpiles = (n) => {\n  const a = [...Array(n - 1).keys()].map(i => i * i - i + 1);\n  return a.filter(i => i % 3 === 0).length;\n};\n\n/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTrpiles = (n) => {\n  const a = [...Array(", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/148", "prompt": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "gc": "<|endoftext|>/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  let orbit1 = orbit(planet1);\n  let orbit2 = orbit(planet2);\n  let planetsBetweenOrbits = planetsBetweenOrbits(orbit1, orbit2);\n  let sortedPlanets = planetsBetweenOrbits.sort((a, b) => a.proximity - b.proximity);\n  return sortedPlanets;\n};\n\n/* Given two planets, return the distance between them in kilometers.\n  Examples\n  distance(\"Mercury\", \"Venus\") ==> 6371\n  distance(\"Mercury\", \"Earth\") ==> 6371\n  distance(\"Earth\", \"Mercury\") ==> 6371\n  distance(\"Mercury\", \"Earth\") ==> 6371\n  */\nconst distance = (planet1, planet2) => {\n  let distanceInKm = distance(planet1, planet2) * 1000;\n  return distanceInKm;\n};\n\n/* Given two planets, return the distance between them in kilometers.\n  Examples\n  distance(\"Mercury\", \"Venus\") ==> 6371\n  distance(\"Mercury\", \"Earth\") ==> 6371\n  distance(\"Earth\", \"Mercury\") ==> 6371\n  distance(\"Mercury\", \"Earth\") ==> 6371\n  */\nconst distance = (planet1, planet2) => {\n  let distanceInKm = distance(planet1, planet2) * 1000;\n  return distanceInKm;\n};\n\n/* Given two planets, return the distance between them in kilometers.\n  Examples\n  distance(\"Mercury\", \"Venus\") ==> 6371\n  distance(\"Mercury\", \"Earth\") ==> 6371\n  distance(\"Earth\", \"Mercury\") ==> 6371\n  distance(\"Mercury\", \"Earth\") ==> 6371\n  */\nconst distance = (planet1, planet2) => {\n  let distanceInKm = distance(planet1, planet2) * 1000;\n  return distanceInKm;\n};\n\n/* Given two planets, return the distance between them in kilometers.\n  Examples\n  distance(\"Mercury\", \"Venus\") ==> 6371\n  distance(\"Mercury\", \"Earth\") ==> 6371\n  distance(\"Earth\", \"Mercury\") ==> 6371\n  distance(\"Mercury\", \"Earth\") ==> 6371\n  */\nconst distance = (planet1, planet2) => {\n  let distanceInKm = distance(planet1, planet2) * 1000;\n  return distanceInKm;\n};\n\n/* Given two planets, return the distance between them in kilometers.\n  Examples\n  distance(\"Mercury\", \"Venus\") ==> 6371\n  distance(\"Mercury\", \"Earth\") ==> 6371\n  distance(\"Earth\", \"Mercury\") ==> 6371\n  distance(\"Mercury\", \"Earth\") ==> 6371\n  */\nconst distance = (planet1, planet2) => {\n  let distanceInKm = distance(planet1, planet2) * 1000;\n  return distanceInKm;\n};\n\n/* Given two planets, return the distance between them in kilometers.\n  Examples\n  distance(\"Mercury\", \"Venus\") ==> 6371\n  distance(\"Mercury\", \"Earth\") ==> 6371\n  distance(\"Earth\", \"Mercury\") ==> 6371\n  distance(\"Mercury\", \"Earth\") ==> 6371\n  */\nconst distance = (planet1, planet2) => {\n  let distanceInKm = distance(planet1, planet2) * 1000;\n  return distanceInKm;\n};\n\n/* Given two planets, return the distance between them in kilometers.\n  Examples\n  distance(\"Mercury\", \"Venus\") ==> 6371\n  distance(\"Mercury\", \"Earth\") ==> 6371\n  distance(\"Earth\", \"Mercury\") ==> 6371\n  distance(\"Mercury\", \"Earth\") ==> 6371\n  */\nconst distance = (planet1, planet2) => {\n  let distanceInKm = distance(planet1, planet2) * 1000;\n  return distanceInKm;\n};\n\n/* Given two planets, return the distance between them in kilometers.\n  Examples\n  distance(\"Mercury\", \"Venus\") ==> 6371\n  distance(\"Mercury\", \"Earth\") ==> 6371\n  distance(\"Earth\", \"Mercury\") ==> 6371\n  distance(\"Mercury\", \"Earth\") ==> 6371\n  */\nconst distance = (planet1, planet2) => {\n  let distanceInKm = distance(planet1, planet2) * 1000;\n  return distanceInKm;\n};\n\n/* Given two planets, return the distance between them in kilometers.\n  Examples\n  distance(\"Mercury\", \"Venus\") ==> 6371\n  distance(\"Mercury\", \"Earth\") ==> 6371\n  distance(\"Earth\", \"Mercury\") ==> 6371\n  distance(\"Mercury\", \"Earth\") ==> 6371\n  */\nconst distance = (planet1, planet2) => {\n  let distanceInKm = distance(planet1, planet2) * 1000;\n  return distanceInKm;\n};\n\n/* Given two planets, return the distance between them in kilometers.\n  Examples\n  distance(\"Mercury\", \"Venus\") ==> 6371\n  distance(\"Mercury\", \"Earth\") ==> 6371\n  distance(\"Earth\", \"Mercury\") ==> 6371\n  distance(\"Mercury\", \"Earth\") ==> 6371\n  */\nconst distance = (planet1, planet2) => {\n  let distanceInKm = distance(planet1, planet2) * 1000;\n  return distanceInKm;\n};\n\n/* Given two planets, return the distance between them in kilometers.\n  Examples\n  distance(\"Mercury\", \"Venus\") ==> 6371\n  distance(\"Mercury\", \"Earth\") ==> 6371\n  distance(\"Earth\", \"Mercury\") ==> 6371\n  distance(\"Mercury\", \"Earth\") ==> 6371\n  */\nconst distance = (planet1, planet2) => {\n  let distanceInKm = distance(planet1, planet2) * 1000;\n  return distanceInKm;\n};\n\n/* Given two planets, return the distance between ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "gc": "<|endoftext|>/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 1) {\n      sum += lst[i];\n    }\n  }\n  return [...new Set(lst)].sort((a, b) => a - b);\n};\n\n/*\n  Write a function that accepts a string as a parameter,\n  and returns the number of characters in the string.\n  The function should return an integer value.\n  You may assume that the string will contain only lowercase letters.\n  For example:\n  assert string_length(\"abc\") == 2\n  assert string_length(\"ab\") == 1\n  assert string_length(\"a\") == 0\n  */\nconst string_length = (str) => {\n  return str.length;\n};\n\n/*\n  Write a function that accepts a string as a parameter,\n  and returns the number of uppercase letters in the string.\n  The function should return an integer value.\n  You may assume that the string will contain only uppercase letters.\n  For example:\n  assert string_uppercase(\"abc\") == 2\n  assert string_uppercase(\"AB\") == 1\n  assert string_uppercase(\"a\") == 0\n  */\nconst string_uppercase = (str) => {\n  return str.toUpperCase().length;\n};\n\n/*\n  Write a function that accepts a string as a parameter,\n  and returns the number of lowercase letters in the string.\n  The function should return an integer value.\n  You may assume that the string will contain only lowercase letters.\n  For example:\n  assert string_lowercase(\"abc\") == 2\n  assert string_lowercase(\"ab\") == 1\n  assert string_lowercase(\"a\") == 0\n  */\nconst string_lowercase = (str) => {\n  return str.toLowerCase();\n};\n\n/*\n  Write a function that accepts a string as a parameter,\n  and returns the number of digits in a string.\n  The function should return an integer value.\n  You may assume that the string will contain only digits and no letters.\n  For example:\n  assert string_digits(\"abc\") == 2\n  assert string_digits(\"ab\") == 1\n  assert string_digits(\"a\") == 0\n  */\nconst string_digits = (str) => {\n  return str.replace(/[^0-9]/g, '').length;\n};\n\n/*\n  Write a function that accepts a string as a parameter,\n  and returns the number of spaces in a string.\n  The function should return an integer value.\n  You may assume that the string will contain only spaces.\n  For example:\n  assert string_spaces(\"abc\") == 2\n  assert string_spaces(\"ab\") == 1\n  assert string_spaces(\"a\") == 0\n  */\nconst string_spaces = (str) => {\n  return str.replace(/\\s+/g, '').length;\n};\n\n/*\n  Write a function that accepts a string as a parameter,\n  and returns the number of words in a string.\n  The function should return an integer value.\n  You may assume that the string will contain only letters and no spaces.\n  For example:\n  assert string_words(\"abc\") == 2\n  assert string_words(\"ab\") == 1\n  assert string_words(\"a\") == 0\n  */\nconst string_words = (str) => {\n  return str.replace(/[^a-zA-Z0-9 ]/g, '').length;\n};\n\n/*\n  Write a function that accepts a string as a parameter,\n  and returns the number of uppercase letters and lowercase letters in a string.\n  The function should return an integer value.\n  You may assume that the string will contain only uppercase letters and lowercase letters.\n  For example:\n  assert string_uppercase_and_lowercase(\"abc\") == 2\n  assert string_uppercase_and_lowercase(\"ab\") == 1\n  assert string_uppercase_and_lowercase(\"a\") == 0\n  */\nconst string_uppercase_and_lowercase = (str) => {\n  return str.toUpperCase().length + str.toLowerCase();\n};\n\n/*\n  Write a function that accepts a string as a parameter,\n  and returns the number of digits and spaces in a string.\n  The function should return an integer value.\n  You may assume that the string will contain only digits and spaces.\n  For example:\n  assert string_digits_and_spaces(\"abc\") == 2\n  assert string_digits_and_spaces(\"ab\") == 1\n  assert string_digits_and_spaces(\"a\") == 0\n  */\nconst string_digits_and_spaces = (str) => {\n  return str.replace(/[^0-9 ]/g, '').length + str.replace(/\\s+/g, '').length;\n};\n\n/*\n  Write a function that accepts a string as a parameter,\n  and returns the number of uppercase letters and lowercase letters in a string.\n  The function should return an integer value.\n  You may assume that the string will contain only uppercase letters and lowercase letters.\n  For example:\n  assert string_uppercase_and_lowercase_and_digits(\"abc\") == 2\n  assert string_uppercase_and_lowercase_and_digits(\"ab\") == 1\n  assert string_uppercase_and_lowercase_and_digits(\"a\") == 0\n  */\nconst string_uppercase_and_lowercase_and_digits = (str) => {\n  return str.toUpperCase().length + str.toLowerCase().length + str.replace(/[^a-zA-Z0-9 ]/g, '').length;\n};\n\n/*\n  Write a function that accepts a string as a parameter,\n  and returns the number of uppercase letters and lowercase letters in a string.\n  The function should return an integer value.\n  You may assume that the string will contain only uppercase letters and lowercase letters.\n  For example:\n  assert string_uppercase_and_lowercase_and_digits_and_spaces(\"abc\") == 2\n  assert string_uppercase_and_lowercase_and_digits_and_spaces(\"ab\") == 1\n  assert string_uppercase_and_lowercase_and_digits_and_spaces(\"a\") == 0\n  */\nconst string_uppercase_and_lowercase_and_digits_and_spaces = (str) => {\n  return str.toUpperCase().length + str.toLowerCase().length + str.replace(/[^a-zA-Z0-9 ]/g, '').length;\n};\n\n/*\n  Write a function that accepts a string as a parameter,\n  and returns the number of uppercase letters and lowercase letters in a string.\n  The function should return an integer value.\n  You may assume that the string will contain only uppercase letters and lowercase letters.\n  For example:\n  assert string_uppercase_and_lowercase_and_digits_and_spaces_and_words(\"abc\") == 2\n  assert string_uppercase_and_lowercase_and_digits_and_spaces_and_words(\"ab\") == 1\n  assert string_uppercase_and_lowercase_and_digits_and_spaces_and_words(\"a\") == 0\n  */\nconst string_uppercase_and_lowercase_and_digits_and_spaces_and_words = (str) => {\n  return str.toUpperCase().length + str.toLowerCase().length + str.replace(/[^a-zA-Z0-9 ]/g, '').length;\n};\n\n/*\n  Write a function that accepts a string as a parameter,\n  and returns the number of uppercase letters and lowercase letters in a string.\n  The function should return an integer value.\n  You may assume that the string will contain only uppercase letters and lowercase letters.\n  For example:\n  assert string_uppercase_and_lowercase_and_digits_and_spaces_and_words_and_spaces(\"abc\") == 2\n  assert string_uppercase_and_lowercase_and_digits_and_spaces_and_words_and_spaces(\"ab\") == 1\n  assert string_uppercase_and_lowercase_and_digits_and_spaces_and_words_and_spaces(\"a\") == 0\n  */\nconst string_uppercase_and_lowercase_and_digits_and_spaces_and_words_and_spaces = (str) => {\n  return str.toUpperCase().length + str.toLowerCase().length + str.replace(/[^a-zA-Z0-9 ]/g, '').length;\n};\n\n/*\n  Write a function that accepts a string as a parameter,\n  and returns the number of uppercase letter", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/15", "prompt": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "gc": "<|endoftext|>/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += '0';\n  }\n  return s;\n};\n\n/**\n * Return a string containing space-delimited numbers starting from n inclusive.\n * If n is 0, return an empty string.\n * If n is greater than the number of digits in number, return an empty string.\n */\nconst stringifyNumber = (number, n) => {\n  if (n < 0 || number < 0 || number > 9) {\n    return '';\n  }\n  return stringSequence(n) +'' + number;\n};\n\n/**\n * Return a string containing space-delimited numbers starting from n inclusive.\n * If n is 0, return an empty string.\n * If n is greater than the number of digits in number, return an empty string.\n */\nconst stringifyNumberWithDecimals = (number, n) => {\n  if (n < 0 || number < 0 || number > 9) {\n    return '';\n  }\n  return stringSequence(n) +'' + numberWithDecimals(number);\n};\n\n/**\n * Return a string containing space-delimited numbers starting from n inclusive.\n * If n is 0, return an empty string.\n * If n is greater than the number of digits in number, return an empty string.\n */\nconst stringifyNumberWithDecimalsNoDecimals = (number, n) => {\n  if (n < 0 || number < 0 || number > 9) {\n    return '';\n  }\n  return stringSequence(n) +'' + numberWithDecimals(number, true);\n};\n\n/**\n * Return a string containing space-delimited numbers starting from n inclusive.\n * If n is 0, return an empty string.\n * If n is greater than the number of digits in number, return an empty string.\n */\nconst stringifyNumberWithDecimalsNoDecimalsNoDecimals = (number, n) => {\n  if (n < 0 || number < 0 || number > 9) {\n    return '';\n  }\n  return stringSequence(n) +'' + numberWithDecimals(number, true, true);\n};\n\n/**\n * Return a string containing space-delimited numbers starting from n inclusive.\n * If n is 0, return an empty string.\n * If n is greater than the number of digits in number, return an empty string.\n */\nconst stringifyNumberWithDecimalsNoDecimalsNoDecimalsNoDecimals = (number, n) => {\n  if (n < 0 || number < 0 || number > 9) {\n    return '';\n  }\n  return stringSequence(n) +'' + numberWithDecimals(number, true, true, true);\n};\n\n/**\n * Return a string containing space-delimited numbers starting from n inclusive.\n * If n is 0, return an empty string.\n * If n is greater than the number of digits in number, return an empty string.\n */\nconst stringifyNumberWithDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimals = (number, n) => {\n  if (n < 0 || number < 0 || number > 9) {\n    return '';\n  }\n  return stringSequence(n) +'' + numberWithDecimals(number, true, true, true, true);\n};\n\n/**\n * Return a string containing space-delimited numbers starting from n inclusive.\n * If n is 0, return an empty string.\n * If n is greater than the number of digits in number, return an empty string.\n */\nconst stringifyNumberWithDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimals = (number, n) => {\n  if (n < 0 || number < 0 || number > 9) {\n    return '';\n  }\n  return stringSequence(n) +'' + numberWithDecimals(number, true, true, true, true, true, true);\n};\n\n/**\n * Return a string containing space-delimited numbers starting from n inclusive.\n * If n is 0, return an empty string.\n * If n is greater than the number of digits in number, return an empty string.\n */\nconst stringifyNumberWithDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimals = (number, n) => {\n  if (n < 0 || number < 0 || number > 9) {\n    return '';\n  }\n  return stringSequence(n) +'' + numberWithDecimals(number, true, true, true, true, true, true, true, true, true);\n};\n\n/**\n * Return a string containing space-delimited numbers starting from n inclusive.\n * If n is 0, return an empty string.\n * If n is greater than the number of digits in number, return an empty string.\n */\nconst stringifyNumberWithDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimals", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/150", "prompt": "/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "gc": "<|endoftext|>/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n < 1 || n > 100) {\n    return y;\n  }\n  if (n % 2 === 0) {\n    return x;\n  }\n  return y;\n};\n\n/*\n  A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n < 1 || n > 100) {\n    return y;\n  }\n  if (n % 2 === 0) {\n    return x;\n  }\n  return y;\n};\n\n/*\n  A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n < 1 || n > 100) {\n    return y;\n  }\n  if (n % 2 === 0) {\n    return x;\n  }\n  return y;\n};\n\n/*\n  A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n < 1 || n > 100) {\n    return y;\n  }\n  if (n % 2 === 0) {\n    return x;\n  }\n  return y;\n};\n\n/*\n  A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n < 1 || n > 100) {\n    return y;\n  }\n  if (n % 2 === 0) {\n    return x;\n  }\n  return y;\n};\n\n/*\n  A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n < 1 || n > 100) {\n    return y;\n  }\n  if (n % 2 === 0) {\n    return x;\n  }\n  return y;\n};\n\n/*\n  A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n < 1 || n > 100) {\n    return y;\n  }\n  if (n % 2 === 0) {\n    return x;\n  }\n  return y;\n};\n\n/*\n  A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n < 1 || n > 100) {\n    return y;\n  }\n  if (n % 2 === 0) {\n    return x;\n  }\n  return y;\n};\n\n/*\n  A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n < 1 || n > 100) {\n    return y;\n  }\n  if (n % 2 === 0) {\n    return x;\n  }\n  return y;\n};\n\n/*\n  A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n < 1 || n > 100) {\n    return y;\n  }\n  if (n % 2 === 0) {\n    return x;\n  }\n  return y;\n};\n\n/*\n  A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n < 1 || n > 100) {\n    return y;\n  }\n  if (n % 2 === 0) {\n    return x;\n  }\n  return y;\n};\n\n/*\n  A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n < 1 || n > 100) {\n    return y;\n  }\n  if (n % 2 === 0) {\n    return x;\n  }\n  return y;\n};\n\n/*\n  A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n < 1 || n > 100) {\n    return y;\n  }\n  if (n % 2 === 0) {\n    return x;\n  }\n  return y;\n};\n\n/*\n  A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n < 1 || n > 100) {\n    return y;\n  }\n  if (n % 2 === 0) {\n    return x;\n  }\n  return y;\n};\n\n/*\n  A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n < 1 || n > 100) {\n    return y;\n  }\n  if (n % 2 === 0) {\n    return x;\n  }\n  return y;\n};\n\n/*\n  A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n < 1 || n > 100) {\n    return y;\n  }\n  if (n % 2 === 0) {\n    return x;\n  }\n  return y;\n};\n\n/*\n  A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n < 1 || n > 100) {\n    return y;\n  }\n  if (n % 2 === 0) {\n    return x;\n  }\n  return y;\n};\n\n/*\n  A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOr", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doublehTeDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doublehTeDifference([-1, -2, 0]) == 0\n  doublehTeDifference([9, -2]) == 81\n  doublehTeDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doublehTeDifference = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doublehTeDifference", "gc": "<|endoftext|>/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doublehTeDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doublehTeDifference([-1, -2, 0]) == 0\n  doublehTeDifference([9, -2]) == 81\n  doublehTeDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doublehTeDifference = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are even. Ignore numbers that are negative or not integers.\n  doublehTeDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doublehTeDifference([-1, -2, 0]) == -1\n  doublehTeDifference([9, -2]) == 81\n  doublehTeDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doublehTeDifferenceEven = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are even. Ignore numbers that are negative or not integers.\n  doublehTeDifferenceEven([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doublehTeDifferenceEven([-1, -2, 0]) == -1\n  doublehTeDifferenceEven([9, -2]) == 81\n  doublehTeDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doublehTeDifferenceEvenEven = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are even. Ignore numbers that are negative or not integers.\n  doublehTeDifferenceEvenEven([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doublehTeDifferenceEvenEven([-1, -2, 0]) == -1\n  doublehTeDifferenceEvenEven([9, -2]) == 81\n  doublehTeDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doublehTeDifferenceEvenEvenEven = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are even. Ignore numbers that are negative or not integers.\n  doublehTeDifferenceEvenEvenEven([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doublehTeDifferenceEvenEvenEven([-1, -2, 0]) == -1\n  doublehTeDifferenceEvenEvenEven([9, -2]) == 81\n  doublehTeDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doublehTeDifferenceEvenEvenEvenEven = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are even. Ignore numbers that are negative or not integers.\n  doublehTeDifferenceEvenEvenEvenEven([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doublehTeDifferenceEvenEvenEvenEven([-1, -2, 0]) == -1\n  doublehTeDifferenceEvenEvenEvenEven([9, -2]) == 81\n  doublehTeDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doublehTeDifferenceEvenEvenEvenEvenEven = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are even. Ignore numbers that are negative or not integers.\n  doublehTeDifferenceEvenEvenEvenEven([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doublehTeDifferenceEvenEvenEvenEven([-1, -2, 0]) == -1\n  doublehTeDifferenceEvenEvenEvenEven([9, -2]) == 81\n  doublehTeDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doublehTeDifferenceEvenEvenEvenEvenEvenEven = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are even. Ignore numbers that are negative or not integers.\n  doublehTeDifferenceEvenEvenEvenEvenEven([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doublehTeDifferenceEvenEvenEvenEvenEven([-1, -2, 0]) == -1\n  doublehTeDifferenceEvenEvenEvenEvenEven([9, -2]) == 81\n  doublehTeDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doublehTeDifferenceEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEven", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "gc": "<|endoftext|>/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  const scores = [...game];\n  const guesses = [...guess];\n  const scoreCount = scores.length;\n  const guesseCount = guesses.length;\n  const scoreSum = scores.reduce((acc, score) => acc + score);\n  const guesseSum = guesses.reduce((acc, score) => acc + score);\n  const scoreDiff = scoreSum - guesseSum;\n  const guesseDiff = scoreSum - guesseCount;\n  const scoreDiffAbs = Math.abs(scoreDiff);\n  const guesseDiffAbs = Math.abs(guesseDiff);\n  const scoreDiffAbsDiff = scoreDiffAbs - guesseDiffAbs;\n  const guesseDiffAbsDiff = guesseDiffAbs - guesseCount;\n  const scoreDiffAbsDiffAbs = Math.abs(scoreDiffAbsDiff);\n  const guesseDiffAbsDiffAbs = Math.abs(guesseDiffAbsDiff);\n  const scoreDiffAbsDiffAbsDiff = scoreDiffAbsDiffAbs - guesseDiffAbsDiffAbs;\n  const guesseDiffAbsDiffAbsDiff = guesseDiffAbsDiffAbs - guesseCount;\n  const scoreDiffAbsDiffAbsDiffAbs = Math.abs(scoreDiffAbsDiffAbsDiff);\n  const guesseDiffAbsDiffAbsDiffAbs = Math.abs(guesseDiffAbsDiffAbsDiff);\n  const scoreDiffAbsDiffAbsDiffAbsDiff = scoreDiffAbsDiffAbsDiffAbs - guesseDiffAbsDiffAbsDiffAbs;\n  const guesseDiffAbsDiffAbsDiffAbsDiff = guesseDiffAbsDiffAbsDiffAbs - guesseCount;\n  const scoreDiffAbsDiffAbsDiffAbsDiffAbs = Math.abs(scoreDiffAbsDiffAbsDiffAbsDiff);\n  const guesseDiffAbsDiffAbsDiffAbsDiffAbs = Math.abs(guesseDiffAbsDiffAbsDiffAbsDiff);\n  const scoreDiffAbsDiffAbsDiffAbsDiffAbsDiff = scoreDiffAbsDiffAbsDiffAbsDiffAbs - guesseDiffAbsDiffAbsDiffAbsDiff;\n  const guesseDiffAbsDiffAbsDiffAbsDiffAbsDiff = guesseDiffAbsDiffAbsDiffAbsDiffAbs - guesseCount;\n  const scoreDiffAbsDiffAbsDiffAbsDiffAbsDiffAbs = Math.abs(scoreDiffAbsDiffAbsDiffAbsDiffAbsDiff);\n  const guesseDiffAbsDiffAbsDiffAbsDiffAbsDiffAbs = Math.abs(guesseDiffAbsDiffAbsDiffAbsDiffAbsDiff);\n  const scoreDiffAbsDiffAbsDiffAbsDiffAbsDiffAbsDiff = scoreDiffAbsDiffAbsDiffAbsDiffAbsDiffAbs - guesseDiffAbsDiffAbsDiffAbsDiffAbsDiff;\n  const guesseDiffAbsDiffAbsDiffAbsDiffAbsDiffAbsDiff = guesseDiffAbsDiffAbsDiffAbsDiffAbsDiffAbs - guesseCount;\n  const scoreDiffAbsDiffAbsDiffAbsDiffAbsDiffAbsDiff = scoreDiffAbsDiffAbsDiffAbsDiffAbsDiffAbs - guesseDiffAbsDiffAbsDiffAbsDiffAbsDiff;\n  const guesseDiffAbsDiffAbsDiffAbsDiffAbsDiffAbsDiff = guesseDiffAbsDiffAbsDiffAbsDiffAbsDiffAbs - guesseCount;\n  const scoreDiffAbsDiffAbsDiffAbsDiffAbsDiffAbsDiffAbs = Math.abs(scoreDiffAbsDiffAbsDiffAbsDiffAbsDiffAbsDiff);\n  const guesseDiffAbsDiffAbsDiffAbsDiffAbsDiffAbsDiff = guesseDiffAbsDiffAbsDiffAbsDiffAbsDiffAbsDiffAbs - guesseCount;\n  const scoreDiffAbsDiffAbsDiffAbsDiffAbsDiffAbsDiffAbsDiff = scoreDiffAbsDiffAbsDiffAbsDiffAbsDiffAbsDiffAbs - guesseDiffAbsDiffAbsDiffAbsDiffAbsDiffAbsDiff;\n  const guesseDiffAbsDiffAbsDiffAbsDiffAbsDiffAbsDiffAbsDiff = guesseDiffAbsDiffAbsDiffAbsDiffAbsDiffAbsDiffAbs - guesseCount;\n  const scoreDiffAbsDiffAbsDiffAbsDiffAbsDiffAbsDiffAbsDiffAbsDiff = scoreDiffAbsDiffAbsDiffAbsDiffAbsDiffAbsDiffAbsDiffAbs - guesseDiffAbsDiffAbsDiffAbsDiffAbsDiffAbsDiff;\n  const guesseDiffAbsDiffAbsDiffAbsDiffAbsDiffAbsDiffAbsDiff = guesseDiffAbsDiffAbsDiffAbsDiffAbsDiffAbsDiffAbsDiffAbs - guesseCount;\n  const scoreDiffAbsDiffAbsDiffAbsDiffAbsDiffAbsDiffAbsDiffAbsDiff = scoreDiffAbsDiffAbsDiffAbsDiffAbsDiffAbsDiffAbsDiffAbsDiffAbs - guesseDiffAbsDiffAbsDiffAbsDiffAbsDiffAbsDiff;\n  const guesseDiffAbsDiffAbsDiffAbsDiffAbsDiffAbsDiffAbsDiffAbsDiff = guesseDiffAbsDiffAbsDiffAbsDiffAbsDiffAbsDiffAbsDiffAbs - guesseCount;\n  const scoreDiffAbsDiffAbsDiffAbsDiffAbsDiffAbsDiffAbsDiffAbsDiffAbs = Math.abs(scoreDiffAbsDiffAbsDiffAbsDiffAbsDiffAbsDiffAbsDiffAbsDiff);\n  const guesseDiffAbsDiffAbsDiffAbsDiffAbsDiffAbsDiffAbsDiffAbs = Math.abs(guesseDiffAbsDiffAbsDiffAbsDiffAbsDiffAbsDiffAbsDiffAbsDiff);\n  const scoreDiffAbsDiffAbsDiffAbsDiffAbsDiffAbsDiffAbsDiffAbsDiffAbs = Math.abs(scoreDiffAbsDiffAbsDiffAbsDiffAbsDiffAbsDiffAbsDiffAbsDiff);\n  const guesseDiffAbsDiffAbsDiffAbsDiffAbsDiffAbsDiffAbsDiffAbsDiffAbs = Math.abs(guesse", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/153", "prompt": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "gc": "<|endoftext|>/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  let strongestExtension = '';\n  let strongestExtensionName = '';\n  let strongestExtensionIndex = 0;\n  let strongestExtensionNameIndex = 0;\n  let strongestExtensionIndex2 = 0;\n  let strongestExtensionNameIndex2 = 0;\n  let strongestExtensionIndex3 = 0;\n  let strongestExtensionNameIndex3 = 0;\n  let strongestExtensionIndex4 = 0;\n  let strongestExtensionNameIndex4 = 0;\n  let strongestExtensionIndex5 = 0;\n  let strongestExtensionNameIndex5 = 0;\n  let strongestExtensionIndex6 = 0;\n  let strongestExtensionNameIndex6 = 0;\n  let strongestExtensionIndex7 = 0;\n  let strongestExtensionNameIndex7 = 0;\n  let strongestExtensionIndex8 = 0;\n  let strongestExtensionNameIndex8 = 0;\n  let strongestExtensionIndex9 = 0;\n  let strongestExtensionNameIndex9 = 0;\n  let strongestExtensionIndex10 = 0;\n  let strongestExtensionNameIndex10 = 0;\n  let strongestExtensionIndex11 = 0;\n  let strongestExtensionNameIndex11 = 0;\n  let strongestExtensionIndex12 = 0;\n  let strongestExtensionNameIndex12 = 0;\n  let strongestExtensionIndex13 = 0;\n  let strongestExtensionNameIndex13 = 0;\n  let strongestExtensionIndex14 = 0;\n  let strongestExtensionNameIndex14 = 0;\n  let strongestExtensionIndex15 = 0;\n  let strongestExtensionNameIndex15 = 0;\n  let strongestExtensionIndex16 = 0;\n  let strongestExtensionNameIndex16 = 0;\n  let strongestExtensionIndex17 = 0;\n  let strongestExtensionNameIndex17 = 0;\n  let strongestExtensionIndex18 = 0;\n  let strongestExtensionNameIndex18 = 0;\n  let strongestExtensionIndex19 = 0;\n  let strongestExtensionNameIndex19 = 0;\n  let strongestExtensionIndex20 = 0;\n  let strongestExtensionNameIndex20 = 0;\n  let strongestExtensionIndex21 = 0;\n  let strongestExtensionNameIndex21 = 0;\n  let strongestExtensionIndex22 = 0;\n  let strongestExtensionNameIndex22 = 0;\n  let strongestExtensionIndex23 = 0;\n  let strongestExtensionNameIndex23 = 0;\n  let strongestExtensionIndex24 = 0;\n  let strongestExtensionNameIndex24 = 0;\n  let strongestExtensionIndex25 = 0;\n  let strongestExtensionNameIndex25 = 0;\n  let strongestExtensionIndex26 = 0;\n  let strongestExtensionNameIndex26 = 0;\n  let strongestExtensionIndex27 = 0;\n  let strongestExtensionNameIndex27 = 0;\n  let strongestExtensionIndex28 = 0;\n  let strongestExtensionNameIndex28 = 0;\n  let strongestExtensionIndex29 = 0;\n  let strongestExtensionNameIndex29 = 0;\n  let strongestExtensionIndex30 = 0;\n  let strongestExtensionNameIndex30 = 0;\n  let strongestExtensionIndex31 = 0;\n  let strongestExtensionNameIndex31 = 0;\n  let strongestExtensionIndex32 = 0;\n  let strongestExtensionNameIndex32 = 0;\n  let strongestExtensionIndex33 = 0;\n  let strongestExtensionNameIndex33 = 0;\n  let strongestExtensionIndex34 = 0;\n  let strongestExtensionNameIndex34 = 0;\n  let strongestExtensionIndex35 = 0;\n  let strongestExtensionNameIndex35 = 0;\n  let strongestExtensionIndex36 = 0;\n  let strongestExtensionNameIndex36 = 0;\n  let strongestExtensionIndex37 = 0;\n  let strongestExtensionNameIndex37 = 0;\n  let strongestExtensionIndex38 = 0;\n  let strongestExtensionNameIndex38 = 0;\n  let strongestExtensionIndex39 = 0;\n  let strongestExtensionNameIndex39 = 0;\n  let strongestExtensionIndex40 = 0;\n  let strongestExtensionNameIndex40 = 0;\n  let strongestExtensionIndex41 = 0;\n  let strongestExtensionNameIndex41 = 0;\n  let strongestExtensionIndex42 = 0;\n  let strongestExtensionNameIndex42 = 0;\n  let strongestExtensionIndex43 = 0;\n  let strongestExtensionNameIndex43 = 0;\n  let strongestExtensionIndex44 = 0;\n  let strongestExtensionNameIndex44 = 0;\n  let strongestExtensionIndex45 = 0;\n  let strongestExtensionNameIndex45 = 0;\n  let strongestExtensionIndex46 = 0;\n  let strongestExtensionNameIndex46 = 0;\n  let strongestExtensionIndex47 = 0;\n  let strongestExtensionNameIndex47 = 0;\n  let strongestExtensionIndex48 = 0;\n  let strongestExtensionNameIndex48 = 0;\n  let strongestExtensionIndex49 = 0;\n  let strongestExtensionNameIndex49 = 0;\n  let strongestExtensionIndex50 = 0;\n  let strongestExtensionNameIndex50 = 0;\n  let strongestExtensionIndex51 = 0;\n  let strongestExtensionNameIndex51 = 0;\n  let strongestExtensionIndex52 = 0;\n  let strongestExtensionNameIndex52 = 0;\n  let strongestExtensionIndex53 = 0;\n  let strongestExtensionNameIndex53 = 0;\n  let strongestExtensionIndex54 = 0;\n  let strongestExtensionNameIndex54 = 0;\n  let strongestExtensionIndex55 = 0;\n  let strongestExtensionNameIndex55 = 0;\n  let strongestExtensionIndex56 = 0;\n  let strongestExtensionNameIndex56 = 0;\n  let strongestExtensionIndex57 = 0;\n  let strongestExtensionNameIndex57 = 0;\n  let strongestExtensionIndex58 = 0;\n  let strongestExtensionNameIndex58 = 0;\n  let strongestExtensionIndex59 = 0;\n  let strongestExtensionNameIndex59 = 0;\n  let strongestExtensionIndex60 = 0;\n  let strongestExtensionNameIndex60 = 0;\n  let strongestExtensionIndex61 = 0;\n  let strongestExtensionNameIndex61 = 0;\n  let strongestExtensionIndex62 = 0;\n  let strongestExtensionNameIndex62 = 0;\n  let strongestExtensionIndex63 = 0;\n  let strongestExtensionNameIndex63 = 0;\n  let strongestExtensionIndex64 = 0;\n  let strongestExtensionNameIndex64 = 0;\n  let strongestExtensionIndex65 = 0;\n  let strongestExtensionNameIndex65 = 0;\n  let strongestExtensionIndex66 = 0;\n  let strongestExtensionNameIndex66 = 0;\n  let strongestExtensionIndex67 = 0;\n  let strongestExtensionNameIndex67 = 0;\n  let strongestExtensionIndex68 = 0;\n  let strongestExtensionNameIndex68 = 0;\n  let strongestExtensionIndex69 = 0;\n  let str", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/154", "prompt": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  ccypatternChekc(\"abcd\",\"abd\") => false\n  ccypatternChekc(\"hello\",\"ell\") => true\n  ccypatternChekc(\"whassup\",\"psus\") => false\n  ccypatternChekc(\"abab\",\"baa\") => true\n  ccypatternChekc(\"efef\",\"eeff\") => false\n  ccypatternChekc(\"himenss\",\"simen\") => true\n  */\nconst ccypatternChekc = (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "ccypatternChekc", "gc": "<|endoftext|>/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  ccypatternChekc(\"abcd\",\"abd\") => false\n  ccypatternChekc(\"hello\",\"ell\") => true\n  ccypatternChekc(\"whassup\",\"psus\") => false\n  ccypatternChekc(\"abab\",\"baa\") => true\n  ccypatternChekc(\"efef\",\"eeff\") => false\n  ccypatternChekc(\"himenss\",\"simen\") => true\n  */\nconst ccypatternChekc = (a, b) => {\n  let a1 = a.split('')\n  let b1 = b.split('')\n  let a2 = a1.map((v, i) => v + i)\n  let b2 = b1.map((v, i) => v + i)\n  let a3 = a2.filter((v, i) => a2.indexOf(v) === i)\n  let b3 = b2.filter((v, i) => b2.indexOf(v) === i)\n  let a4 = a3.map((v, i) => v + i)\n  let b4 = b3.map((v, i) => v + i)\n  let a5 = a4.filter((v, i) => a4.indexOf(v) === i)\n  let b5 = b4.filter((v, i) => b4.indexOf(v) === i)\n  let a6 = a5.map((v, i) => v + i)\n  let b6 = b5.map((v, i) => v + i)\n  let a7 = a6.filter((v, i) => a6.indexOf(v) === i)\n  let b7 = b6.filter((v, i) => b6.indexOf(v) === i)\n  let a8 = a7.map((v, i) => v + i)\n  let b8 = b7.map((v, i) => v + i)\n  let a9 = a8.filter((v, i) => a8.indexOf(v) === i)\n  let b9 = b8.filter((v, i) => b8.indexOf(v) === i)\n  let a10 = a9.map((v, i) => v + i)\n  let b10 = b9.map((v, i) => v + i)\n  let a11 = a10.filter((v, i) => a10.indexOf(v) === i)\n  let b11 = b10.filter((v, i) => b10.indexOf(v) === i)\n  let a12 = a11.map((v, i) => v + i)\n  let b12 = b11.map((v, i) => v + i)\n  let a13 = a12.filter((v, i) => a12.indexOf(v) === i)\n  let b13 = b12.filter((v, i) => b12.indexOf(v) === i)\n  let a14 = a13.map((v, i) => v + i)\n  let b14 = b13.map((v, i) => v + i)\n  let a15 = a14.filter((v, i) => a14.indexOf(v) === i)\n  let b15 = b14.filter((v, i) => b14.indexOf(v) === i)\n  let a16 = a15.map((v, i) => v + i)\n  let b16 = b15.map((v, i) => v + i)\n  let a17 = a16.filter((v, i) => a16.indexOf(v) === i)\n  let b17 = b16.filter((v, i) => b16.indexOf(v) === i)\n  let a18 = a17.map((v, i) => v + i)\n  let b18 = b17.map((v, i) => v + i)\n  let a19 = a18.filter((v, i) => a18.indexOf(v) === i)\n  let b19 = b18.filter((v, i) => b18.indexOf(v) === i)\n  let a20 = a19.map((v, i) => v + i)\n  let b20 = b19.map((v, i) => v + i)\n  let a21 = a20.filter((v, i) => a20.indexOf(v) === i)\n  let b22 = b20.filter((v, i) => b20.indexOf(v) === i)\n  let a23 = a21.map((v, i) => v + i)\n  let b23 = b21.map((v, i) => v + i)\n  let a24 = a23.filter((v, i) => a23.indexOf(v) === i)\n  let b24 = b23.filter((v, i) => b23.indexOf(v) === i)\n  let a25 = a24.map((v, i) => v + i)\n  let b25 = b24.map((v, i) => v + i)\n  let a26 = a25.filter((v, i) => a25.indexOf(v) === i)\n  let b26 = b25.filter((v, i) => b25.indexOf(v) === i)\n  let a27 = a26.map((v, i) => v + i)\n  let b27 = b26.map((v, i) => v + i)\n  let a28 = a27.filter((v, i) => a27.indexOf(v) === i)\n  let b28 = b27.filter((v, i) => b27.indexOf(v) === i)\n  let a29 = a28.map((v, i) => v + i)\n  let b29 = b28.map((v, i) => v + i)\n  let a30 = a29.filter((v, i) => a29.indexOf(v) === i)\n  let b30 = b29.filter((v, i) => b29.indexOf(v) === i)\n  let a31 = a30.map((v, i) => v + i)\n  let b31 = b30.map((v, i) => v + i)\n  let a32 = a31.filter((v, i) => a31.indexOf(v) === i)\n  let b32 = b31.filter((v, i) => b31.indexOf(v) === i)\n  let a33 = a32.map((v, i) => v + i)\n  let b33 = b32.map((v, i) => v + i)\n  let a34 = a33.filter((v, i) => a33.indexOf(v) === i)\n  let b34 = b33.filter((v, i) => b33.indexOf(v) === i)\n  let a35 = a34.map((v, i) => v + i)\n  let b35 = b34.map((v, i) => v + i)\n  let a36 = a35.filter((v, i) => a35.indexOf(v) === i)\n  let b36 = b35.filter((v, i) => b35.indexOf(v) === i)\n  let a37 = a36.map((v, i) => v + i)\n  let b37 = b36.map((v, i) => v + i)\n  let a38 = a37.filter((v, i) => a37.indexOf(v) === i)\n  let b38 = b37.filter((v, i) => b37.indexOf(v) === i)\n  let a39 = a38.map((v, i) => v + i)\n  let b39 = b38.map((v, i) => v + i)\n  let a40 = a39.filter((v, i) => a39.indexOf(v) === i)\n  let b40 = b39.filter((v, i) => b39.indexOf(v) === i)\n  let a41 = a40.map((v, i) => v + i)\n  let b41 = b40.map((v, i) => v + i)\n  let a42 = a41.filter((v, i) => a41.indexOf(v) === i)\n  let b42 = b41.filter((v, i) => b41.indexOf(v) === i)\n  let a43 = a42.map((v, i) => v + i)\n  let b43 = b42.map((v, i) => v + i)\n  let a44 = a43.filter((v, i) => a43.indexOf(v) === i)\n  let b44 = b43.filter((v, i) => b43.indexOf(v) === i)\n  let a45 = a44.map((v, i) => v + i)\n  let b46 = b40.map((v, i) => v + i)\n  let a47 = a45.filter((v, i) => a45.indexOf(v) === i)\n  let b47 = b46.filter((v, i) => b46.indexOf(v) === i)\n  let a48 = a47.map((v, i) => v + i)\n  let b48", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/155", "prompt": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "gc": "<|endoftext|>/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  for(let i = num; i >= 0; i--) {\n    if(i % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given a string, return an array that has all the characters in that string converted to lowercase.\n\n   Example:\n      lowerCase('hello') ==> ['h', 'e', 'l', 'l', 'o']\n  */\nconst lowerCase = (str) => {\n  let newStr = '';\n  for(let i = 0; i < str.length; i++) {\n    newStr += str[i].toLowerCase();\n  }\n  return newStr;\n};\n\n/*Given a string, return an array that has all the characters in that string converted to uppercase.\n\n   Example:\n      upperCase('hello') ==> ['HELLO', 'HELLO', 'HELLO', 'HELLO', 'HELLO']\n  */\nconst upperCase = (str) => {\n  let newStr = '';\n  for(let i = 0; i < str.length; i++) {\n    newStr += str[i].toUpperCase();\n  }\n  return newStr;\n};\n\n/*Given a string, return an array that has all the characters in that string converted to uppercase.\n\n   Example:\n      upperCase('hello') ==> ['HELLO', 'HELLO', 'HELLO', 'HELLO', 'HELLO']\n  */\nconst capitalize = (str) => {\n  let newStr = '';\n  for(let i = 0; i < str.length; i++) {\n    newStr += str[i].charAt(0).toUpperCase() + str[i].slice(1);\n  }\n  return newStr;\n};\n\n/*Given a string, return an array that has all the characters in that string converted to uppercase.\n\n   Example:\n      capitalize('hello') ==> ['HELLO', 'HELLO', 'HELLO', 'HELLO', 'HELLO']\n  */\nconst capitalizeAll = (str) => {\n  let newStr = '';\n  for(let i = 0; i < str.length; i++) {\n    newStr += str[i].charAt(0).toUpperCase() + str[i].slice(1);\n  }\n  return newStr;\n};\n\n/*Given a string, return an array that has all the characters in that string converted to uppercase.\n\n   Example:\n      capitalizeAll('hello') ==> ['HELLO', 'HELLO', 'HELLO', 'HELLO', 'HELLO']\n  */\nconst capitalizeAllLower = (str) => {\n  let newStr = '';\n  for(let i = 0; i < str.length; i++) {\n    newStr += str[i].charAt(0).toUpperCase() + str[i].slice(1);\n  }\n  return newStr.toLowerCase();\n};\n\n/*Given a string, return an array that has all the characters in that string converted to uppercase.\n\n   Example:\n      capitalizeAllLower('hello') ==> ['HELLO', 'HELLO', 'HELLO', 'HELLO', 'HELLO']\n  */\nconst capitalizeAllUpper = (str) => {\n  let newStr = '';\n  for(let i = 0; i < str.length; i++) {\n    newStr += str[i].charAt(0).toUpperCase() + str[i].slice(1);\n  }\n  return newStr.toUpperCase();\n};\n\n/*Given a string, return an array that has all the characters in that string converted to uppercase.\n\n   Example:\n      capitalizeAllUpper('hello') ==> ['HELLO', 'HELLO', 'HELLO', 'HELLO', 'HELLO']\n  */\nconst capitalizeAllCapitalize = (str) => {\n  let newStr = '';\n  for(let i = 0; i < str.length; i++) {\n    newStr += str[i].charAt(0).toUpperCase() + str[i].slice(1);\n  }\n  return newStr.charAt(0).toUpperCase() + newStr.slice(1);\n};\n\n/*Given a string, return an array that has all the characters in that string converted to uppercase.\n\n   Example:\n      capitalizeAllCapitalize('hello') ==> ['HELLO', 'HELLO', 'HELLO', 'HELLO', 'HELLO']\n  */\nconst capitalizeAllCapitalizeLower = (str) => {\n  let newStr = '';\n  for(let i = 0; i < str.length; i++) {\n    newStr += str[i].charAt(0).toUpperCase() + str[i].slice(1);\n  }\n  return newStr.charAt(0).toUpperCase() + newStr.slice(1);\n};\n\n/*Given a string, return an array that has all the characters in that string converted to uppercase.\n\n   Example:\n      capitalizeAllCapitalizeLower('hello') ==> ['HELLO', 'HELLO', 'HELLO', 'HELLO', 'HELLO']\n  */\nconst capitalizeAllCapitalizeUpper = (str) => {\n  let newStr = '';\n  for(let i = 0; i < str.length; i++) {\n    newStr += str[i].charAt(0).toUpperCase() + str[i].slice(1);\n  }\n  return newStr.charAt(0).toLowerCase() + newStr.slice(1);\n};\n\n/*Given a string, return an array that has all the characters in that string converted to uppercase.\n\n   Example:\n      capitalizeAllCapitalizeUpper('hello') ==> ['HELLO', 'HELLO', 'HELLO', 'HELLO', 'HELLO']\n  */\nconst capitalizeAllCapitalizeAll = (str) => {\n  let newStr = '';\n  for(let i = 0; i < str.length; i++) {\n    newStr += str[i].charAt(0).toUpperCase() + str[i].slice(1);\n  }\n  return newStr.charAt(0).toUpperCase() + newStr.slice(1);\n};\n\n/*Given a string, return an array that has all the characters in that string converted to uppercase.\n\n   Example:\n      capitalizeAllCapitalizeAll('hello') ==> ['HELLO', 'HELLO', 'HELLO', 'HELLO', 'HELLO']\n  */\nconst capitalizeAllCapitalizeAllLower = (str) => {\n  let newStr = '';\n  for(let i = 0; i < str.length; i++) {\n    newStr += str[i].charAt(0).toUpperCase() + str[i].slice(1);\n  }\n  return newStr.charAt(0).toLowerCase() + newStr.slice(1);\n};\n\n/*Given a string, return an array that has all the characters in that string converted to uppercase.\n\n   Example:\n      capitalizeAllCapitalizeAllLower('hello') ==> ['HELLO', 'HELLO', 'HELLO', 'HELLO', 'HELLO']\n  */\nconst capitalizeAllCapitalizeAllUpper = (str) => {\n  let newStr = '';\n  for(let i = 0; i < str.length; i++) {\n    newStr += str[i].charAt(0).toUpperCase() + str[i].slice(1);\n  }\n  return newStr.charAt(0).toUpperCase() + newStr.slice(1);\n};\n\n/*Given a string, return an array that has all the characters in that string converted to uppercase.\n\n   Example:\n      capitalizeAllCapitalizeAllUpper('hello') ==> ['HELLO', 'HELLO', 'HELLO', 'HELLO', 'HELLO']\n  */\nconst capitalizeAllCapitalizeAllCapitalize = (str) => {\n  let newStr = '';\n  for(let i = 0; i < str.length; i++) {\n    newStr += str[i].charAt(0).toUpperCase() + str[i].slice(1);\n  }\n  return newStr.charAt(0).toUpperCase() + newStr.slice(1);\n};\n\n/*Given a string, return an array that has all the characters in that string converted to uppercase.\n\n   Example:\n      capitalizeAllCapitalizeAllCapitalize('hello') ==> ['HELLO', 'HELLO', 'HELLO', 'HELLO', 'HELLO']\n  */\nconst capitalizeAllCapitalizeAllCapitalizeLower = (str) => {\n  let newStr = '';\n  for(let i = 0; i < str.length; i++) {\n    newStr += str[i].charAt(0).toUpperCase() + str[i].slice(1);\n  }\n  return newStr.charAt(0).toLowerCase() + newStr.slice(1);\n};\n\n/*Given a string, return an array that has all the characters in that string converted to uppercase.\n\n   Example:\n      capitalizeAllCapitalizeAllCapitalizeLower('hello') ==> ['HELLO', 'HELLO', 'HELLO', 'HELLO', 'HELLO']\n  */\nconst capitalizeAllCapitalizeAllCapitalizeUpper = (str) => {\n  let newStr = '';\n  for(let i = 0; i < str.length; i++) {\n    newStr += str[i].charAt(0).toUpperCase() + ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMinRioman(19) == 'xix'\n  >>> intToMinRioman(152) == 'clii'\n  >>> intToMinRioman(426) == 'cdxxvi'\n  */\nconst intToMinRioman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMinRioman", "gc": "<|endoftext|>/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMinRioman(19) == 'xix'\n  >>> intToMinRioman(152) == 'clii'\n  >>> intToMinRioman(426) == 'cdxxvi'\n  */\nconst intToMinRioman = (number) => {\n  const bases = [\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rightAngelTriangle(3, 4, 5) == true\n  rightAngelTriangle(1, 2, 3) == false\n  */\nconst rightAngelTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngelTriangle", "gc": "<|endoftext|>/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rightAngelTriangle(3, 4, 5) == true\n  rightAngelTriangle(1, 2, 3) == false\n  */\nconst rightAngelTriangle = (a, b, c) => {\n  let side1 = Math.sqrt(a * a + b * b);\n  let side2 = Math.sqrt(a * a + c * c);\n  let side3 = Math.sqrt(b * b - c * c);\n  return side1 > side2 && side2 > side3;\n};\n\n/*\n Given the lengths of the three sides of a rectangle. Return true if the three\n  sides form a right-angled rectangle, false otherwise.\n  A right-angled rectangle is a rectangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rightAngelRectangle(3, 4, 5) == true\n  rightAngelRectangle(1, 2, 3) == false\n  */\nconst rightAngelRectangle = (a, b, c) => {\n  let side1 = Math.sqrt(a * a + b * b);\n  let side2 = Math.sqrt(a * a + c * c);\n  let side3 = Math.sqrt(b * b - c * c);\n  return side1 > side2 && side2 > side3;\n};\n\n/*\n Given the lengths of the three sides of a circle. Return true if the three\n  sides form a right-angled circle, false otherwise.\n  A right-angled circle is a circle in which one angle is right angle or\n  90 degree.\n  Example:\n  rightAngelCircle(3, 4, 5) == true\n  rightAngelCircle(1, 2, 3) == false\n  */\nconst rightAngelCircle = (a, b, c) => {\n  let side1 = Math.sqrt(a * a + b * b);\n  let side2 = Math.sqrt(a * a + c * c);\n  let side3 = Math.sqrt(b * b - c * c);\n  return side1 > side2 && side2 > side3;\n};\n\n/*\n Given the lengths of the three sides of a square. Return true if the three\n  sides form a right-angled square, false otherwise.\n  A right-angled square is a square in which one angle is right angle or\n  90 degree.\n  Example:\n  rightAngelSquare(3, 4, 5) == true\n  rightAngelSquare(1, 2, 3) == false\n  */\nconst rightAngelSquare = (a, b, c) => {\n  let side1 = Math.sqrt(a * a + b * b);\n  let side2 = Math.sqrt(a * a + c * c);\n  let side3 = Math.sqrt(b * b - c * c);\n  return side1 > side2 && side2 > side3;\n};\n\n/*\n Given the lengths of the three sides of a pentagon. Return true if the three\n  sides form a right-angled pentagon, false otherwise.\n  A right-angled pentagon is a pentagon in which one angle is right angle or\n  90 degree.\n  Example:\n  rightAngelPentagon(3, 4, 5) == true\n  rightAngelPentagon(1, 2, 3) == false\n  */\nconst rightAngelPentagon = (a, b, c) => {\n  let side1 = Math.sqrt(a * a + b * b);\n  let side2 = Math.sqrt(a * a + c * c);\n  let side3 = Math.sqrt(b * b - c * c);\n  return side1 > side2 && side2 > side3;\n};\n\n/*\n Given the lengths of the three sides of a hexagon. Return true if the three\n  sides form a right-angled hexagon, false otherwise.\n  A right-angled hexagon is a hexagon in which one angle is right angle or\n  90 degree.\n  Example:\n  rightAngelHexagon(3, 4, 5) == true\n  rightAngelHexagon(1, 2, 3) == false\n  */\nconst rightAngelHexagon = (a, b, c) => {\n  let side1 = Math.sqrt(a * a + b * b);\n  let side2 = Math.sqrt(a * a + c * c);\n  let side3 = Math.sqrt(b * b - c * c);\n  return side1 > side2 && side2 > side3;\n};\n\n/*\n Given the lengths of the three sides of a heptagon. Return true if the three\n  sides form a right-angled heptagon, false otherwise.\n  A right-angled heptagon is a heptagon in which one angle is right angle or\n  90 degree.\n  Example:\n  rightAngelHeptagon(3, 4, 5) == true\n  rightAngelHeptagon(1, 2, 3) == false\n  */\nconst rightAngelHeptagon = (a, b, c) => {\n  let side1 = Math.sqrt(a * a + b * b);\n  let side2 = Math.sqrt(a * a + c * c);\n  let side3 = Math.sqrt(b * b - c * c);\n  return side1 > side2 && side2 > side3;\n};\n\n/*\n Given the lengths of the three sides of a decagon. Return true if the three\n  sides form a right-angled decagon, false otherwise.\n  A right-angled decagon is a decagon in which one angle is right angle or\n  90 degree.\n  Example:\n  rightAngelDecagon(3, 4, 5) == true\n  rightAngelDecagon(1, 2, 3) == false\n  */\nconst rightAngelDecagon = (a, b, c) => {\n  let side1 = Math.sqrt(a * a + b * b);\n  let side2 = Math.sqrt(a * a + c * c);\n  let side3 = Math.sqrt(b * b - c * c);\n  return side1 > side2 && side2 > side3;\n};\n\n/*\n Given the lengths of the three sides of a helix. Return true if the three\n  sides form a right-angled helix, false otherwise.\n  A right-angled helix is a helix in which one angle is right angle or\n  90 degree.\n  Example:\n  rightAngelHelix(3, 4, 5) == true\n  rightAngelHelix(1, 2, 3) == false\n  */\nconst rightAngelHelix = (a, b, c) => {\n  let side1 = Math.sqrt(a * a + b * b);\n  let side2 = Math.sqrt(a * a + c * c);\n  let side3 = Math.sqrt(b * b - c * c);\n  return side1 > side2 && side2 > side3;\n};\n\n/*\n Given the lengths of the three sides of a octagon. Return true if the three\n  sides form a right-angled octagon, false otherwise.\n  A right-angled octagon is a octagon in which one angle is right angle or\n  90 degree.\n  Example:\n  rightAngelOctagon(3, 4, 5) == true\n  rightAngelOctagon(1, 2, 3) == false\n  */\nconst rightAngelOctagon = (a, b, c) => {\n  let side1 = Math.sqrt(a * a + b * b);\n  let side2 = Math.sqrt(a * a + c * c);\n  let side3 = Math.sqrt(b * b - c * c);\n  return side1 > side2 && side2 > side3;\n};\n\n/*\n Given the lengths of the three sides of a decagon. Return true if the three\n  sides form a right-angled decagon, false otherwise.\n  A right-angled decagon is a decagon in which one angle is right angle or\n  90 degree.\n  Example:\n  rightAngelDecagon(3, 4, 5) == true\n  rightAngelDecagon(1, 2, 3) == false\n  */\nconst rightAngelDecagon = (a", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"string\"\n  findMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst findMax = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "gc": "<|endoftext|>/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"string\"\n  findMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  findMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst findMax = (words) => {\n  let maxLength = 0;\n  let maxWord = \"\";\n  let maxChar = 0;\n  let maxCharCount = 0;\n  let maxWordCount = 0;\n  let maxWordIndex = 0;\n  let maxWordIndex2 = 0;\n  let maxCharIndex = 0;\n  let maxCharIndex2 = 0;\n  let maxCharCount2 = 0;\n  let maxWordIndex2 = 0;\n  let maxWordIndex3 = 0;\n  let maxCharIndex3 = 0;\n  let maxCharCount3 = 0;\n  let maxWordIndex3 = 0;\n  let maxCharIndex4 = 0;\n  let maxCharIndex5 = 0;\n  let maxCharCount4 = 0;\n  let maxWordIndex4 = 0;\n  let maxWordIndex5 = 0;\n  let maxCharIndex5 = 0;\n  let maxCharCount5 = 0;\n  let maxWordIndex5 = 0;\n  let maxCharIndex6 = 0;\n  let maxCharIndex7 = 0;\n  let maxCharCount6 = 0;\n  let maxWordIndex6 = 0;\n  let maxWordIndex7 = 0;\n  let maxCharIndex8 = 0;\n  let maxCharIndex9 = 0;\n  let maxCharCount8 = 0;\n  let maxWordIndex8 = 0;\n  let maxWordIndex9 = 0;\n  let maxCharIndex10 = 0;\n  let maxCharCount10 = 0;\n  let maxWordIndex10 = 0;\n  let maxCharIndex11 = 0;\n  let maxCharCount11 = 0;\n  let maxWordIndex11 = 0;\n  let maxCharIndex12 = 0;\n  let maxCharCount12 = 0;\n  let maxWordIndex12 = 0;\n  let maxCharIndex13 = 0;\n  let maxCharCount13 = 0;\n  let maxWordIndex13 = 0;\n  let maxCharIndex14 = 0;\n  let maxCharCount14 = 0;\n  let maxWordIndex14 = 0;\n  let maxCharIndex15 = 0;\n  let maxCharCount15 = 0;\n  let maxWordIndex15 = 0;\n  let maxCharIndex16 = 0;\n  let maxCharCount16 = 0;\n  let maxWordIndex16 = 0;\n  let maxCharIndex17 = 0;\n  let maxCharCount17 = 0;\n  let maxWordIndex17 = 0;\n  let maxCharIndex18 = 0;\n  let maxCharCount18 = 0;\n  let maxWordIndex18 = 0;\n  let maxCharIndex19 = 0;\n  let maxCharCount19 = 0;\n  let maxWordIndex19 = 0;\n  let maxCharIndex20 = 0;\n  let maxCharCount20 = 0;\n  let maxWordIndex20 = 0;\n  let maxCharIndex21 = 0;\n  let maxCharCount21 = 0;\n  let maxWordIndex21 = 0;\n  let maxCharIndex22 = 0;\n  let maxCharCount22 = 0;\n  let maxWordIndex22 = 0;\n  let maxCharIndex23 = 0;\n  let maxCharCount23 = 0;\n  let maxWordIndex23 = 0;\n  let maxCharIndex24 = 0;\n  let maxCharCount24 = 0;\n  let maxWordIndex24 = 0;\n  let maxCharIndex25 = 0;\n  let maxCharCount25 = 0;\n  let maxWordIndex25 = 0;\n  let maxCharIndex26 = 0;\n  let maxCharCount26 = 0;\n  let maxWordIndex26 = 0;\n  let maxCharIndex27 = 0;\n  let maxCharCount27 = 0;\n  let maxWordIndex27 = 0;\n  let maxCharIndex28 = 0;\n  let maxCharCount28 = 0;\n  let maxWordIndex28 = 0;\n  let maxCharIndex29 = 0;\n  let maxCharCount29 = 0;\n  let maxWordIndex29 = 0;\n  let maxCharIndex30 = 0;\n  let maxCharCount30 = 0;\n  let maxWordIndex30 = 0;\n  let maxCharIndex31 = 0;\n  let maxCharCount31 = 0;\n  let maxWordIndex31 = 0;\n  let maxCharIndex32 = 0;\n  let maxCharCount32 = 0;\n  let maxWordIndex32 = 0;\n  let maxCharIndex33 = 0;\n  let maxCharCount33 = 0;\n  let maxWordIndex33 = 0;\n  let maxCharIndex34 = 0;\n  let maxCharCount34 = 0;\n  let maxWordIndex34 = 0;\n  let maxCharIndex35 = 0;\n  let maxCharCount35 = 0;\n  let maxWordIndex35 = 0;\n  let maxCharIndex36 = 0;\n  let maxCharCount36 = 0;\n  let maxWordIndex36 = 0;\n  let maxCharIndex37 = 0;\n  let maxCharCount37 = 0;\n  let maxWordIndex37 = 0;\n  let maxCharIndex38 = 0;\n  let maxCharCount38 = 0;\n  let maxWordIndex38 = 0;\n  let maxCharIndex39 = 0;\n  let maxCharCount39 = 0;\n  let maxWordIndex39 = 0;\n  let maxCharIndex40 = 0;\n  let maxCharCount40 = 0;\n  let maxWordIndex40 = 0;\n  let maxCharIndex41 = 0;\n  let maxCharCount41 = 0;\n  let maxWordIndex41 = 0;\n  let maxCharIndex42 = 0;\n  let maxCharCount42 = 0;\n  let maxWordIndex42 = 0;\n  let maxCharIndex43 = 0;\n  let maxCharCount43 = 0;\n  let maxWordIndex43 = 0;\n  let maxCharIndex44 = 0;\n  let maxCharCount44 = 0;\n  let maxWordIndex44 = 0;\n  let maxCharIndex45 = 0;\n  let maxCharCount45 = 0;\n  let maxWordIndex45 = 0;\n  let maxCharIndex46 = 0;\n  let maxCharCount46 = 0;\n  let maxWordIndex46 = 0;\n  let maxCharIndex47 = 0;\n  let maxCharCount47 = 0;\n  let maxWordIndex47 = 0;\n  let maxCharIndex48 = 0;\n  let maxCharCount48 = 0;\n  let maxWordIndex48 = 0;\n  let maxCharIndex49 = 0;\n  let maxCharCount49 = 0;\n  let maxWordIndex49 = 0;\n  let maxCharIndex50 = 0;\n  let maxCharCount50 = 0;\n  let maxWordIndex50 = 0;\n  let maxCharIndex51 = 0;\n  let maxCharCount51 = 0;\n  let maxWordIndex51 = 0;\n  let maxCharIndex52 = 0;\n  let maxCharCount52 = 0;\n  let maxWordIndex52 = 0;\n  let maxCharIndex53 = 0;\n  let maxCharCount53 = 0;\n  let maxWordIndex53 = 0;\n  let maxCharIndex54 = 0;\n  let maxCharCount54 = 0;\n  let maxWordIndex54 = 0;\n  let maxCharIndex55 = 0;\n  let maxCharCount55 = 0;\n  let maxWordIndex55 = 0;\n  let maxCharIndex56 = 0;\n  let maxCharCount56 = 0;\n  let maxWordIndex56 = 0;\n  let maxCharIndex57 = 0;\n  let maxCharCount57 = 0;\n  let maxWordIndex57 = 0;\n  let maxCharIndex58 = 0;\n  let maxCharCount58 = 0;\n  let maxWordIndex58 = 0;\n  let maxCharIndex59 = 0;\n  let maxCharCount59 = 0;\n  let maxWordIndex59 = 0;\n  let maxCharIndex60 = 0;\n  let maxCharCount60 = 0;\n  let maxWordIndex60 = 0;\n  let maxCharIndex61 = 0;\n  let maxCharCount61 = 0;\n  let maxWordIndex61 = 0;\n  let maxCharIndex62 = 0;\n  let maxCharCount62 = 0;\n  let maxWordIndex62 = 0;\n  let maxCharIndex63 = 0;\n  let maxCharCount63 = 0;\n  let maxWordIndex63 = 0;\n  let maxCharIndex64 = 0;\n  let maxCharCount64 = 0;\n  let maxWordIndex64 = 0;\n  let maxCharIndex65 = 0;\n  let maxCharCount65 = 0;\n  let maxWordIndex65 = 0;\n  let maxCharIndex66 = 0;\n  let maxCharCount66 = 0;\n  let maxWordIndex66 = 0;\n  let maxCharIndex67 = 0;\n  let maxCharCount67 = 0;\n  let maxWordIndex67 = 0;\n  let maxCharIndex68 = 0;\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "gc": "<|endoftext|>/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  let total = 0;\n  let left = 0;\n  \n  while(left < number) {\n    total += need;\n    left += remaining;\n    \n    if(left >= number) {\n      left -= number;\n      \n      if(left === 0) {\n        left = 1;\n        \n        need--;\n        \n        remaining--;\n        \n        if(need === 0) {\n          total++;\n          \n          return [total, left];\n        }\n      }\n    }\n  }\n  \n  return [total, left];\n};\n\n/*\n  You are a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  let total = 0;\n  let left = 0;\n  \n  while(left < number) {\n    total += need;\n    left += remaining;\n    \n    if(left >= number) {\n      left -= number;\n      \n      if(left === 0) {\n        left = 1;\n        \n        need--;\n        \n        remaining--;\n        \n        if(need === 0) {\n          total++;\n          \n          return [total, left];\n        }\n      }\n    }\n  }\n  \n  return [total, left];\n};\n\n/*\n  You are a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  let total = 0;\n  let left = 0;\n  \n  while(left < number) {\n    total += need;\n    left += remaining;\n    \n    if(left >= number) {\n      left -= number;\n      \n      if(left === 0) {\n        left = 1;\n        \n        need--;\n        \n        remaining--;\n        \n        if(need === 0) {\n          total++;\n          \n          return [total, left];\n        }\n      }\n    }\n  }\n  \n  return [total, left];\n};\n\n/*\n  You are a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  let total = 0;\n  let left = 0;\n  \n  while(left < number) {\n    total += need;\n    left += remaining;\n    \n    if(left >= number) {\n      left -= number;\n      \n      if(left === 0) {\n        left = 1;\n        \n        need--;\n        \n        remaining--;\n        \n        if(need === 0) {\n          total++;\n          \n          return [total, left];\n        }\n      }\n    }\n  }\n  \n  return [total, left];\n};\n\n/*\n  You are a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrot", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "gc": "<|endoftext|>/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char ==='') {\n      count++;\n    } else if (char === 'a' || char === 'e' || char === 'i' || char === 'o' || char === 'u') {\n      count += 1;\n    } else if (char === 'A' || char === 'E' || char === 'I' || char === 'O' || char === 'U') {\n      count += 2;\n    }\n  }\n  return count;\n};\n\n/**\n * Given a string, find out how many distinct words does it consist of\n * >>> countDistinctWords('The quick brown fox jumps over the lazy dog')\n * 3\n * >>> countDistinctWords('The quick brown fox jumps over the lazy dog.')\n * 3\n * >>> countDistinctWords('The quick brown fox jumps over the lazy dog.')\n * 3\n */\nconst countDistinctWords = (string) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char ==='') {\n      count++;\n    } else if (char === 'a' || char === 'e' || char === 'i' || char === 'o' || char === 'u') {\n      count += 1;\n    } else if (char === 'A' || char === 'E' || char === 'I' || char === 'O' || char === 'U') {\n      count += 2;\n    } else if (char === 'q' || char === 'w' || char === 'e' || char === 'r' || char === 't' || char === 'y' || char === 'u') {\n      count += 3;\n    } else if (char === 'Q' || char === 'W' || char === 'E' || char === 'R' || char === 'T' || char === 'Y' || char === 'U') {\n      count += 4;\n    }\n  }\n  return count;\n};\n\n/**\n * Given a string, find out how many distinct characters there are in it\n * >>> countCharacters('The quick brown fox jumps over the lazy dog')\n * 3\n * >>> countCharacters('The quick brown fox jumps over the lazy dog.')\n * 3\n * >>> countCharacters('The quick brown fox jumps over the lazy dog.')\n * 3\n */\nconst countCharacters = (string) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char ==='') {\n      count++;\n    } else if (char === 'a' || char === 'e' || char === 'i' || char === 'o' || char === 'u') {\n      count += 1;\n    } else if (char === 'A' || char === 'E' || char === 'I' || char === 'O' || char === 'U') {\n      count += 2;\n    } else if (char === 'q' || char === 'w' || char === 'e' || char === 'r' || char === 't' || char === 'y' || char === 'u') {\n      count += 3;\n    } else if (char === 'Q' || char === 'W' || char === 'E' || char === 'R' || char === 'T' || char === 'Y' || char === 'U') {\n      count += 4;\n    }\n  }\n  return count;\n};\n\n/**\n * Given a string, find out how many distinct words there are in it\n * >>> countWords('The quick brown fox jumps over the lazy dog')\n * 3\n * >>> countWords('The quick brown fox jumps over the lazy dog.')\n * 3\n * >>> countWords('The quick brown fox jumps over the lazy dog.')\n * 3\n */\nconst countWords = (string) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char ==='') {\n      count++;\n    } else if (char === 'a' || char === 'e' || char === 'i' || char === 'o' || char === 'u') {\n      count += 1;\n    } else if (char === 'A' || char === 'E' || char === 'I' || char === 'O' || char === 'U') {\n      count += 2;\n    } else if (char === 'q' || char === 'w' || char === 'e' || char === 'r' || char === 't' || char === 'y' || char === 'u') {\n      count += 3;\n    } else if (char === 'Q' || char === 'W' || char === 'E' || char === 'R' || char === 'T' || char === 'Y' || char === 'U') {\n      count += 4;\n    }\n  }\n  return count;\n};\n\n/**\n * Given a string, find out how many distinct characters there are in it\n * >>> countCharacters('The quick brown fox jumps over the lazy dog')\n * 3\n * >>> countCharacters('The quick brown fox jumps over the lazy dog.')\n * 3\n * >>> countCharacters('The quick brown fox jumps over the lazy dog.')\n * 3\n */\nconst countCharacters = (string) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char ==='') {\n      count++;\n    } else if (char === 'a' || char === 'e' || char === 'i' || char === 'o' || char === 'u') {\n      count += 1;\n    } else if (char === 'A' || char === 'E' || char === 'I' || char === 'O' || char === 'U') {\n      count += 2;\n    } else if (char === 'q' || char === 'w' || char === 'e' || char === 'r' || char === 't' || char === 'y' || char === 'u') {\n      count += 3;\n    } else if (char === 'Q' || char === 'W' || char === 'E' || char === 'R' || char === 'T' || char === 'Y' || char === 'U') {\n      count += 4;\n    }\n  }\n  return count;\n};\n\n/**\n * Given a string, find out how many distinct words there are in it\n * >>> countWords('The quick brown fox jumps over the lazy dog')\n * 3\n * >>> countWords('The quick brown fox jumps over the lazy dog.')\n * 3\n * >>> countWords('The quick brown fox jumps over the lazy dog.')\n * 3\n */\nconst countWords = (string) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char ==='') {\n      count++;\n    } else if (char === 'a' || char === 'e' || char === 'i' || char === 'o' || char === 'u') {\n      count += 1;\n    } else if (char === 'A' || char === 'E' || char === 'I' || char === 'O' || char === 'U') {\n      count += 2;\n    } else if (char === 'q' || char === 'w' || char === 'e' || char === 'r' || char === 't' || char === 'y' || char === 'u') {\n      count += 3;\n    } else if (char === 'Q' || char === 'W' || char === 'E' || char === 'R' || char === 'T' || char === 'Y' || char === 'U') {\n      count += 4;\n    }\n  }\n  return count;\n};\n\n/**\n * Given a string, find out how many distinct characters there are in it\n * >>> countCharacters('The quick brown fox jumps over the lazy dog')\n * 3\n * >>> countCharacters('The quick brown fox jumps over the lazy dog.')\n * 3\n * >>> countCharacters('The quick brown fox jumps over the lazy dog.')\n * 3\n */\nconst countCharacters = (string) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char ==='') {\n      count++;\n    } else if (char === 'a' || char === 'e' || char === 'i' || char === 'o' || char === 'u') {\n      count += 1;\n    } else if (char", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "gc": "<|endoftext|>/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  let operatorLength = operator.length;\n  let operandLength = operand.length;\n  let operatorIndex = 0;\n  while (operatorIndex < operatorLength) {\n    let operator = operator[operatorIndex];\n    let operandIndex = operatorIndex + 1;\n    while (operandIndex < operandLength) {\n      let operand = operand[operandIndex];\n      result += operand;\n      operandIndex++;\n    }\n    operatorIndex++;\n  }\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  let operatorLength = operator.length;\n  let operandLength = operand.length;\n  let operatorIndex = 0;\n  while (operatorIndex < operatorLength) {\n    let operator = operator[operatorIndex];\n    let operandIndex = operatorIndex + 1;\n    while (operandIndex < operandLength) {\n      let operand = operand[operandIndex];\n      result += operand;\n      operandIndex++;\n    }\n    operatorIndex++;\n  }\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  let operatorLength = operator.length;\n  let operandLength = operand.length;\n  let operatorIndex = 0;\n  while (operatorIndex < operatorLength) {\n    let operator = operator[operatorIndex];\n    let operandIndex = operatorIndex + 1;\n    while (operandIndex < operandLength) {\n      let operand = operand[operandIndex];\n      result += operand;\n      operandIndex++;\n    }\n    operatorIndex++;\n  }\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  let operatorLength = operator.length;\n  let operandLength = operand.length;\n  let operatorIndex = 0;\n  while (operatorIndex < operatorLength) {\n    let operator = operator[operatorIndex];\n    let operandIndex = operatorIndex + 1;\n    while (operandIndex < operandLength) {\n      let operand = operand[operandIndex];\n      result += operand;\n      operandIndex++;\n    }\n    operatorIndex++;\n  }\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  let operatorLength = operator.length;\n  let operandLength = operand.length;\n  let operatorIndex = 0;\n  while (operatorIndex < operatorLength) {\n    let operator = operator[operatorIndex];\n    let operandIndex = operatorIndex + 1;\n    while (operandIndex < operandLength) {\n      let operand = operand[operandIndex];\n      result += operand;\n      operandIndex++;\n    }\n    operatorIndex++;\n  }\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  let operatorLength = operator.length;\n  let operandLength = operand.length;\n  let operatorIndex = 0;\n  while (operatorIndex < operatorLength) {\n    let operator = operator[operatorIndex];\n    let operandIndex = operatorIndex + 1;\n    while (operandIndex < operandLength) {\n      let operand = operand[operandIndex];\n      result += operand;\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/161", "prompt": "/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "gc": "<|endoftext|>/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let result = '';\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) === '') {\n      result += s.charAt(i).toUpperCase();\n    } else {\n      result += s.charAt(i);\n    }\n  }\n  return result;\n};\n\n/*\n  Given a string s, return true if it is a palindrome.\n  A palindrome is a string that reads the same backward as forward.\n  A palindrome is a string that reads the same forward as backward.\n  A palindrome is a string that reads the same backward as forward.\n  A palindrome is a string that reads the same forward as backward.\n  A palindrome is a string that reads the same backward as forward.\n  A palindrome is a string that reads the same forward as backward.\n  A palindrome is a string that reads the same backward as forward.\n  A palindrome is a string that reads the same forward as backward.\n  A palindrome is a string that reads the same backward as forward.\n  A palindrome is a string that reads the same forward as backward.\n  A palindrome is a string that reads the same backward as forward.\n  A palindrome is a string that reads the same forward as backward.\n  A palindrome is a string that reads the same backward as forward.\n  A palindrome is a string that reads the same forward as backward.\n  A palindrome is a string that reads the same backward as forward.\n  A palindrome is a string that reads the same forward as backward.\n  A palindrome is a string that reads the same backward as forward.\n  A palindrome is a string that reads the same forward as backward.\n  A palindrome is a string that reads the same backward as forward.\n  A palindrome is a string that reads the same forward as backward.\n  A palindrome is a string that reads the same backward as forward.\n  A palindrome is a string that reads the same forward as backward.\n  A palindrome is a string that reads the same backward as forward.\n  A palindrome is a string that reads the same forward as backward.\n  A palindrome is a string that reads the same backward as forward.\n  A palindrome is a string that reads the same forward as backward.\n  A palindrome is a string that reads the same backward as forward.\n  A palindrome is a string that reads the same forward as backward.\n  A palindrome is a string that reads the same backward as forward.\n  A palindrome is a string that reads the same forward as backward.\n  A palindrome is a string that reads the same backward as forward.\n  A palindrome is a string that reads the same forward as backward.\n  A palindrome is a string that reads the same backward as forward.\n  A palindrome is a string that reads the same forward as backward.\n  A palindrome is a string that reads the same backward as forward.\n  A palindrome is a string that reads the same forward as backward.\n  A palindrome is a string that reads the same backward as forward.\n  A palindrome is a string that reads the same forward as backward.\n  A palindrome is a string that reads the same backward as forward.\n  A palindrome is a string that reads the same forward as backward.\n  A palindrome is a string that reads the same backward as forward.\n  A palindrome is a string that reads the same forward as backward.\n  A palindrome is a string that reads the same backward as forward.\n  A palindrome is a string that reads the same forward as backward.\n  A palindrome is a string that reads the same backward as forward.\n  A palindrome is a string that reads the same forward as backward.\n  A palindrome is a string that reads the same backward as forward.\n  A palindrome is a string that reads the same forward as backward.\n  A palindrome is a string that reads the same backward as forward.\n  A palindrome is a string that reads the same forward as backward.\n  A palindrome is a string that reads the same backward as forward.\n  A palindrome is a string that reads the same forward as backward.\n  A palindrome is a string that reads the same backward as forward.\n  A palindrome is a string that reads the same forward as backward.\n  A palindrome is a string that reads the same backward as forward.\n  A palindrome is a string that reads the same forward as backward.\n  A palindrome is a string that reads the same backward as forward.\n  A palindrome is a string that reads the same forward as backward.\n  A palindrome is a string that reads the same backward as forward.\n  A palindrome is a string that reads the same forward as backward.\n  A palindrome is a string that reads the same backward as forward.\n  A palindrome is a string that reads the same forward as backward.\n  A palindrome is a string that reads the same backward as forward.\n  A palindrome is a string that reads the same forward as backward.\n  A palindrome is a string that reads the same backward as forward.\n  A palindrome is a string that reads the same forward as backward.\n  A palindrome is a string that reads the same backward as forward.\n  A palindrome is a string that reads the same forward as backward.\n  A palindrome is a string that reads the same backward as forward.\n  A palindrome is a string that reads the same forward as backward.\n  A palindrome is a string that reads the same backward as forward.\n  A palindrome is a string that reads the same forward as backward.\n  A palindrome is a string that reads the same backward as forward.\n  A palindrome is a string that reads the same forward as backward.\n  A palindrome is a string that reads the same backward as forward.\n  A palindrome is a string that reads the same forward as backward.\n  A palindrome is a string that reads the same backward as forward.\n  A palindrome is a string that reads the same forward as backward.\n  A palindrome is a string that reads the same backward as forward.\n  A palindrome is a string that reads the same forward as backward.\n  A palindrome is a string that reads the same backward as forward.\n  A palindrome is a string that reads the same forward as backward.\n  A palindrome is a string that reads the same backward as forward.\n  A palindrome is a string that reads the same forward as backward.\n  A palindrome is a string that reads the same backward as forward.\n  A palindrome is a string that reads the same forward as backward.\n  A palindrome is a string that ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "gc": "<|endoftext|>/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (!text) {\n    return null;\n  }\n\n  const md5Hash = crypto.createHash('md5');\n  md5Hash.update(text);\n  return md5Hash.digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5Hex = (text) => {\n  if (!text) {\n    return null;\n  }\n\n  const md5Hash = crypto.createHash('md5');\n  md5Hash.update(text);\n  return md5Hash.digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5B64 = (text) => {\n  if (!text) {\n    return null;\n  }\n\n  const md5Hash = crypto.createHash('md5');\n  md5Hash.update(text);\n  return md5Hash.digest('base64');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5B64Hex = (text) => {\n  if (!text) {\n    return null;\n  }\n\n  const md5Hash = crypto.createHash('md5');\n  md5Hash.update(text);\n  return md5Hash.digest('base64');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5B64B64 = (text) => {\n  if (!text) {\n    return null;\n  }\n\n  const md5Hash = crypto.createHash('md5');\n  md5Hash.update(text);\n  return md5Hash.digest('base64');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5B64B64Hex = (text) => {\n  if (!text) {\n    return null;\n  }\n\n  const md5Hash = crypto.createHash('md5');\n  md5Hash.update(text);\n  return md5Hash.digest('base64');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5B64B64B64 = (text) => {\n  if (!text) {\n    return null;\n  }\n\n  const md5Hash = crypto.createHash('md5');\n  md5Hash.update(text);\n  return md5Hash.digest('base64');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5B64B64B64Hex = (text) => {\n  if (!text) {\n    return null;\n  }\n\n  const md5Hash = crypto.createHash('md5');\n  md5Hash.update(text);\n  return md5Hash.digest('base64');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5B64B64B64B64 = (text) => {\n  if (!text) {\n    return null;\n  }\n\n  const md5Hash = crypto.createHash('md5');\n  md5Hash.update(text);\n  return md5Hash.digest('base64');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5B64B64B64B64Hex = (text) => {\n  if (!text) {\n    return null;\n  }\n\n  const md5Hash = crypto.createHash('md5');\n  md5Hash.update(text);\n  return md5Hash.digest('base64');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5B64B64B64B64B64B64 = (text) => {\n  if (!text) {\n    return null;\n  }\n\n  const md5Hash = crypto.createHash('md5');\n  md5Hash.update(text);\n  return md5Hash.digest('base64');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5B64B64B64B64B64B64B64 = (text) => {\n  if (!text) {\n    return null;\n  }\n\n  const md5Hash = crypto.createHash('md5');\n  md5Hash.update(text);\n  return md5Hash.digest('base64');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5B64B64B64B64B64B64B64B64B64 = (text) => {\n  if (!text) {\n    return null;\n  }\n\n  const md5Hash = crypto.createHash('md5');\n  md5Hash.update(text);\n  return md5Hash.digest('base64');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "gc": "<|endoftext|>/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  let result = [];\n  let digit;\n  let i;\n  let j;\n\n  if (a < b) {\n    i = a;\n    a = b;\n    b = i;\n  }\n\n  for (i = a; i <= b; i++) {\n    digit = i % 10;\n    j = Math.floor(i / 10);\n\n    if (digit === j) result.push(digit);\n  }\n\n  return result;\n};\n\n/**\n * Given a string, return the first letter of the string.\n *\n * Examples:\n * firstLetter('hello') => 'H'\n * firstLetter('hello123') => 'h'\n * firstLetter('hello12') => 'e'\n * firstLetter('hello') => 'H'\n */\nconst firstLetter = string => {\n  return string.charAt(0).toLowerCase();\n};\n\n/**\n * Given a string, return the first letter of the string with spaces removed.\n *\n * Examples:\n * firstLetterWithSpaces('hello') => 'H'\n * firstLetterWithSpaces('hello123') => 'h'\n * firstLetterWithSpaces('hello12') => 'e'\n * firstLetterWithSpaces('hello') => 'H'\n */\nconst firstLetterWithSpaces = string => {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n};\n\n/**\n * Given a string, return the first letter of the string with spaces removed.\n *\n * Examples:\n * firstLetterWithSpaces('hello') => 'H'\n * firstLetterWithSpaces('hello123') => 'h'\n * firstLetterWithSpaces('hello12') => 'e'\n * firstLetterWithSpaces('hello') => 'H'\n */\nconst firstLetterWithSpaces = string => {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n};\n\n/**\n * Given a string, return the first letter of the string with spaces removed.\n *\n * Examples:\n * firstLetterWithSpaces('hello') => 'H'\n * firstLetterWithSpaces('hello123') => 'h'\n * firstLetterWithSpaces('hello12') => 'e'\n * firstLetterWithSpaces('hello') => 'H'\n */\nconst firstLetterWithSpaces = string => {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n};\n\n/**\n * Given a string, return the first letter of the string with spaces removed.\n *\n * Examples:\n * firstLetterWithSpaces('hello') => 'H'\n * firstLetterWithSpaces('hello123') => 'h'\n * firstLetterWithSpaces('hello12') => 'e'\n * firstLetterWithSpaces('hello') => 'H'\n */\nconst firstLetterWithSpaces = string => {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n};\n\n/**\n * Given a string, return the first letter of the string with spaces removed.\n *\n * Examples:\n * firstLetterWithSpaces('hello') => 'H'\n * firstLetterWithSpaces('hello123') => 'h'\n * firstLetterWithSpaces('hello12') => 'e'\n * firstLetterWithSpaces('hello') => 'H'\n */\nconst firstLetterWithSpaces = string => {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n};\n\n/**\n * Given a string, return the first letter of the string with spaces removed.\n *\n * Examples:\n * firstLetterWithSpaces('hello') => 'H'\n * firstLetterWithSpaces('hello123') => 'h'\n * firstLetterWithSpaces('hello12') => 'e'\n * firstLetterWithSpaces('hello') => 'H'\n */\nconst firstLetterWithSpaces = string => {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n};\n\n/**\n * Given a string, return the first letter of the string with spaces removed.\n *\n * Examples:\n * firstLetterWithSpaces('hello') => 'H'\n * firstLetterWithSpaces('hello123') => 'h'\n * firstLetterWithSpaces('hello12') => 'e'\n * firstLetterWithSpaces('hello') => 'H'\n */\nconst firstLetterWithSpaces = string => {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n};\n\n/**\n * Given a string, return the first letter of the string with spaces removed.\n *\n * Examples:\n * firstLetterWithSpaces('hello') => 'H'\n * firstLetterWithSpaces('hello123') => 'h'\n * firstLetterWithSpaces('hello12') => 'e'\n * firstLetterWithSpaces('hello') => 'H'\n */\nconst firstLetterWithSpaces = string => {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n};\n\n/**\n * Given a string, return the first letter of the string with spaces removed.\n *\n * Examples:\n * firstLetterWithSpaces('hello') => 'H'\n * firstLetterWithSpaces('hello123') => 'h'\n * firstLetterWithSpaces('hello12') => 'e'\n * firstLetterWithSpaces('hello') => 'H'\n */\nconst firstLetterWithSpaces = string => {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n};\n\n/**\n * Given a string, return the first letter of the string with spaces removed.\n *\n * Examples:\n * firstLetterWithSpaces('hello') => 'H'\n * firstLetterWithSpaces('hello123') => 'h'\n * firstLetterWithSpaces('hello12') => 'e'\n * firstLetterWithSpaces('hello') => 'H'\n */\nconst firstLetterWithSpaces = string => {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n};\n\n/**\n * Given a string, return the first letter of the string with spaces removed.\n *\n * Examples:\n * firstLetterWithSpaces('hello') => 'H'\n * firstLetterWithSpaces('hello123') => 'h'\n * firstLetterWithSpaces('hello12') => 'e'\n * firstLetterWithSpaces('hello') => 'H'\n */\nconst firstLetterWithSpaces = string => {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n};\n\n/**\n * Given a string, return the first letter of the string with spaces removed.\n *\n * Examples:\n * firstLetterWithSpaces('hello') => 'H'\n * firstLetterWithSpaces('hello123') => 'h'\n * firstLetterWithSpaces('hello12') => 'e'\n * firstLetterWithSpaces('hello') => 'H'\n */\nconst firstLetterWithSpaces = string => {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n};\n\n/**\n * Given a string, return the first letter of the string with spaces removed.\n *\n * Examples:\n * firstLetterWithSpaces('hello') => 'H'\n * firstLetterWithSpaces('hello123') => 'h'\n * firstLetterWithSpaces('hello12') => 'e'\n * firstLetterWithSpaces('hello') => 'H'\n */\nconst firstLetterWithSpaces = string => {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n};\n\n/**\n * Given a string, return the first letter of the string with spaces removed.\n *\n * Examples:\n * firstLetterWithSpaces('hello') => 'H'\n * firstLetterWithSpaces('hello123') => 'h'\n * firstLetterWithSpaces('hello12') => 'e'\n * firstLetterWithSpaces('hello') ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/17", "prompt": "/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "gc": "<|endoftext|>/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const notes_array = music_string.split('|');\n  const notes_array2 = [];\n  let notes_array3 = [];\n  let notes_array4 = [];\n  let notes_array5 = [];\n  let notes_array6 = [];\n  let notes_array7 = [];\n  let notes_array8 = [];\n  let notes_array9 = [];\n  let notes_array10 = [];\n  let notes_array11 = [];\n  let notes_array12 = [];\n  let notes_array13 = [];\n  let notes_array14 = [];\n  let notes_array15 = [];\n  let notes_array16 = [];\n  let notes_array17 = [];\n  let notes_array18 = [];\n  let notes_array19 = [];\n  let notes_array20 = [];\n  let notes_array21 = [];\n  let notes_array22 = [];\n  let notes_array23 = [];\n  let notes_array24 = [];\n  let notes_array25 = [];\n  let notes_array26 = [];\n  let notes_array27 = [];\n  let notes_array28 = [];\n  let notes_array29 = [];\n  let notes_array30 = [];\n  let notes_array31 = [];\n  let notes_array32 = [];\n  let notes_array33 = [];\n  let notes_array34 = [];\n  let notes_array35 = [];\n  let notes_array36 = [];\n  let notes_array37 = [];\n  let notes_array38 = [];\n  let notes_array39 = [];\n  let notes_array40 = [];\n  let notes_array41 = [];\n  let notes_array42 = [];\n  let notes_array43 = [];\n  let notes_array44 = [];\n  let notes_array45 = [];\n  let notes_array46 = [];\n  let notes_array47 = [];\n  let notes_array48 = [];\n  let notes_array49 = [];\n  let notes_array50 = [];\n  let notes_array51 = [];\n  let notes_array52 = [];\n  let notes_array53 = [];\n  let notes_array54 = [];\n  let notes_array55 = [];\n  let notes_array56 = [];\n  let notes_array57 = [];\n  let notes_array58 = [];\n  let notes_array59 = [];\n  let notes_array60 = [];\n  let notes_array61 = [];\n  let notes_array62 = [];\n  let notes_array63 = [];\n  let notes_array64 = [];\n  let notes_array65 = [];\n  let notes_array66 = [];\n  let notes_array67 = [];\n  let notes_array68 = [];\n  let notes_array69 = [];\n  let notes_array70 = [];\n  let notes_array71 = [];\n  let notes_array72 = [];\n  let notes_array73 = [];\n  let notes_array74 = [];\n  let notes_array75 = [];\n  let notes_array76 = [];\n  let notes_array77 = [];\n  let notes_array78 = [];\n  let notes_array79 = [];\n  let notes_array80 = [];\n  let notes_array81 = [];\n  let notes_array82 = [];\n  let notes_array83 = [];\n  let notes_array84 = [];\n  let notes_array85 = [];\n  let notes_array86 = [];\n  let notes_array87 = [];\n  let notes_array88 = [];\n  let notes_array89 = [];\n  let notes_array90 = [];\n  let notes_array91 = [];\n  let notes_array92 = [];\n  let notes_array93 = [];\n  let notes_array94 = [];\n  let notes_array95 = [];\n  let notes_array96 = [];\n  let notes_array97 = [];\n  let notes_array98 = [];\n  let notes_array99 = [];\n  let notes_array100 = [];\n  let notes_array101 = [];\n  let notes_array102 = [];\n  let notes_array103 = [];\n  let notes_array104 = [];\n  let notes_array105 = [];\n  let notes_array106 = [];\n  let notes_array107 = [];\n  let notes_array108 = [];\n  let notes_array109 = [];\n  let notes_array110 = [];\n  let notes_array111 = [];\n  let notes_array112 = [];\n  let notes_array113 = [];\n  let notes_array114 = [];\n  let notes_array115 = [];\n  let notes_array116 = [];\n  let notes_array117 = [];\n  let notes_array118 = [];\n  let notes_array119 = [];\n  let notes_array120 = [];\n  let notes_array121 = [];\n  let notes_array122 = [];\n  let notes_array123 = [];\n  let notes_array124 = [];\n  let notes_array125 = [];\n  let notes_array126 = [];\n  let notes_array127 = [];\n  let notes_array128 = [];\n  let notes_array129 = [];\n  let notes_array130 = [];\n  let notes_array131 = [];\n  let notes_array132 = [];\n  let notes_array133 = [];\n  let notes_array134 = [];\n  let notes_array135 = [];\n  let notes_array136 = [];\n  let notes_array137 = [];\n  let notes_array138 = [];\n  let notes_array139 = [];\n  let notes_array140 = [];\n  let notes_array141 = [];\n  let notes_array142 = [];\n  let notes_array143 = [];\n  let notes_array144 = [];\n  let notes_array145 = [];\n  let notes_array146 = [];\n  let notes_array147 = [];\n  let notes_array148 = [];\n  let notes_array149 = [];\n  let notes_array150 = [];\n  let notes_array151 = [];\n  let notes_array152 = [];\n  let notes_array153 = [];\n  let notes_array154 = [];\n  let notes_array155 = [];\n  let notes_array156 = [];\n  let notes_array157 = [];\n  let notes_array158 = [];\n  let notes_array159 = [];\n  let notes_array160 = [];\n  let notes_array161 = [];\n  let notes_array162 = [];\n  let notes_array163 = [];\n  let notes_array164 = [];\n  let notes_array165 = [];\n  let notes_array166 = [];\n  let notes_array167 = [];\n  let notes_array168 = [];\n  let notes_array169 = [];\n  let notes_array170 = [];\n  let notes_array171 = [];\n  let notes_array172 = [];\n  let notes_array173 = [];\n  let notes_array174 = [];\n  let notes_array175 = [];\n  let notes_array176 = [];\n  let notes_array177 = [];\n  let notes_array178 = [];\n  let notes_array179 = [];\n  let notes_array180 = [];\n  let notes_array181 = [];\n  let notes_array182 = [];\n  let notes_array183 = [];\n  let notes_array184 = [];\n  let notes_array185 = [];\n  let notes_array186 = [];\n  let notes_array187 = [];\n  let notes_array188 = [];\n  let notes_array189 = [];\n  let notes_array190 = [];\n  let notes_array191 = [];\n  let notes_array192 = [];\n  let ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/18", "prompt": "/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "gc": "<|endoftext|>/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  let index = string.indexOf(substring);\n  while (index > -1) {\n    count++;\n    index = string.indexOf(substring, index + substring.length);\n  }\n  return count;\n};\n\n// Given a string, return all possible permutations of the string\n// >>> permutations(['', ''])\n// [[]]\n// >>> permutations(['aaa', 'aa'])\n// [[['aaa'], ['aa']],\n//  [['aa'], ['aaa']],\n//  [['aa'], ['aa']],\n//  [['aa'], ['aaa']],\n//  [['aaa'], ['aa']],\n//  [['aaa'], ['aaa']],\n//  [['aa'], ['aaa']],\n//  [['aaa'], ['aaa']],\n//  [['aa'], ['aaa']],\n//  [['aaa'], ['aaa']],\n//  [['aa'], ['aaa']],\n//  [['aaa'], ['aaa']],\n//  [['aa'], ['aaa']],\n//  [['aaa'], ['aaa']],\n//  [['aa'], ['aaa']],\n//  [['aaa'], ['aaa']],\n//  [['aa'], ['aaa']],\n//  [['aa'], ['aaa']],\n//  [['aaa'], ['aaa']],\n//  [['aa'], ['aaa']],\n//  [['aa'], ['aaa']],\n//  [['aa'], ['aaa']],\n//  [['aa'], ['aaa']],\n//  [['aa'], ['aaa']],\n//  [['aa'], ['aaa']],\n//  [['aa'], ['aaa']],\n//  [['aa'], ['aaa']],\n//  [['aa'], ['aaa']],\n//  [['aa'], ['aaa']],\n//  [['aa'], ['aaa']],\n//  [['aa'], ['aaa']],\n//  [['aa'], ['aaa']],\n//  [['aa'], ['aaa']],\n//  [['aa'], ['aaa']],\n//  [['aa'], ['aaa']],\n//  [['aa'], ['aaa']],\n//  [['aa'], ['aaa']],\n//  [['aa'], ['aaa']],\n//  [['aa'], ['aaa']],\n//  [['aa'], ['aaa']],\n//  [['aa'], ['aaa']],\n//  [['aa'], ['aaa']],\n//  [['aa'], ['aaa']],\n//  [['aa'], ['aaa']],\n//  [['aa'], ['aaa']],\n//  [['aa'], ['aaa']],\n//  [['aa'], ['aaa']],\n//  [['aa'], ['aaa']],\n//  [['aa'], ['aaa']],\n//  [['aa'], ['aaa']],\n//  [['aa'], ['aaa']],\n//  [['aa'], ['aaa']],\n//  [['aa'], ['aaa']],\n//  [['aa'], ['aaa']],\n//  [['aa'], ['aaa']],\n//  [['aa'], ['aaa']],\n//  [['aa'], ['aaa']],\n//  [['aa'], ['aaa']],\n//  [['aa'], ['aaa']],\n//  [['aa'], ['aaa']],\n//  [['aa'], ['aaa']],\n//  [['aa'], ['aaa']],\n//  [['aa'], ['aaa']],\n//  [['aa'], ['aaa']],\n//  [['aa'], ['aaa']],\n//  [['aa'], ['aaa']],\n//  [['aa'], ['aaa']],\n//  [['aa'], ['aaa']],\n//  [['aa'], ['aaa']],\n//  [['aa'], ['aaa']],\n//  [['aa'], ['aaa']],\n//  [['aa'], ['aaa']],\n//  [['aa'], ['aaa']],\n//  [['aa'], ['aaa']],\n//  [['aa'], ['aaa']],\n//  [['aa'], ['aaa']],\n//  [['aa'], ['aaa']],\n//  [['aa'], ['aaa']],\n//  [['aa'], ['aaa']],\n//  [['aa'], ['aaa']],\n//  [['aa'], ['aaa']],\n//  [['aa'], ['aaa']],\n//  [['aa'], ['aaa']],\n//  [['aa'], ['aaa']],\n//  [['aa'], ['aaa']],\n//  [['aa'], ['aaa']],\n//  [['aa'], ['aaa']],\n//  [['aa'], ['aaa']],\n//  [['aa'], ['aaa']],\n//  [['aa'], ['aaa']],\n//  [['aa'], ['aaa']],\n//  [['aa'], ['aaa']],\n//  [['aa'], ['aaa']],\n//  [['aa'], ['aaa']],\n//  [['aa'], ['aaa']],\n//  [['aa'], ['aaa']],\n//  [['aa'], ['aaa']],\n//  [['aa'], ['aaa']],\n//  [['aa'], ['aaa']],\n//  [['aa'], ['aaa']],\n//  [['aa'], ['aaa']],\n//  [['aa'], ['aaa']],\n//  [['aa'], ['aaa']],\n//  [['aa'], ['aaa']],\n//  [['aa'], ['aaa']],\n//  [['aa'], ['aaa']],\n//  [['aa'], ['aaa']],\n//  [['aa'], ['aaa']],\n//  [['aa'], ['aaa']],\n//  [['aa'], ['aaa']],\n//  [['aa'], ['aaa']],\n//  [['aa'], ['aaa']],\n//  [['aa'], ['aaa']],\n//  [['aa'], ['aaa']],\n//  [['aa'], ['aaa']],\n//  [['aa'], ['aaa']],\n//  [['aa'], ['aaa']],\n//  [['aa'], ['aaa']],\n//  [['aa'], ['aaa']],\n//  [['aa'], ['aaa']],\n//  [['aa'], ['aaa']],\n//  [['aa'], ['aaa']],\n//  [['aa'], ['aaa']],\n//  [['aa'], ['aaa']],\n//  [['aa'], ['aaa']],\n//  [['aa'], ['aaa']],\n//  [['aa'], ['aaa']],\n//  [['aa'], ['aaa']],\n//  [['aa'], ['aaa']],\n//  [['aa'], ['aaa']],\n//  [['aa'], ['aaa']],\n//  [['aa'], ['aaa']],\n//  [['aa'], ['aaa']],\n//  [['aa'], ['aaa']],\n//  [['aa'], ['aaa']],\n//  [['aa'], ['aaa']],\n//  [['aa'], ['aaa']],\n//  [['aa'], ['aaa']],\n//  [['aa'], ['aaa']],\n//  [['aa'], ['aaa']],\n//  [['aa'], ['aaa']],\n//  [['aa'], ['aaa']],\n//  [['aa'], ['aaa']],\n//  [['aa'], ['aaa']],\n//  [['aa'], ['aaa']],\n//  [['aa'], ['aaa']],\n//  [['aa'], ['aaa']],\n//  [['aa'], ['aaa']],\n//  [['aa'], ['aaa']],\n//  [['aa'], ['aaa']],\n//  [['aa'], ['aaa']],\n//  [['aa'], ['aaa']],\n//  [['aa'], ['aaa']],\n//  [['aa'], ['aaa']],\n//  [['aa'], ['aaa']],\n//  [['aa'], ['aaa']],\n//  [['aa'], ['aaa']],\n//  [['aa'], ['aaa']],\n//  [['aa'], ['aaa']],\n//  [['aa'], ['aaa']],\n//  [['aa'], ['aaa']],\n//  [['aa'], ['aaa']],\n//  [['aa'], ['aaa']],\n//  [['aa'], ['aaa']],\n//  [['aa'], ['aaa']],\n//  [['aa'], ['aaa']],\n//  [['aa'], ['aaa']],\n//  [['aa'], ['aaa']],\n//  [['aa'], ['aaa']],\n//  [['aa'], ['aaa']],\n//  [['aa'], ['aaa']],\n//  [['aa'], ['aaa']],\n//  [['aa'], ['aaa']],\n//  [['aa'], ['aa", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/19", "prompt": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "gc": "<|endoftext|>/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  let sortedNumbers = numbers.split(' ');\n  sortedNumbers = sortedNumbers.sort((a, b) => a - b);\n  return sortedNumbers.join(' ');\n};\n\n/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  let sortedNumbers = numbers.split(' ');\n  sortedNumbers = sortedNumbers.sort((a, b) => a - b);\n  return sortedNumbers.join(' ');\n};\n\n/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  let sortedNumbers = numbers.split(' ');\n  sortedNumbers = sortedNumbers.sort((a, b) => a - b);\n  return sortedNumbers.join(' ');\n};\n\n/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  let sortedNumbers = numbers.split(' ');\n  sortedNumbers = sortedNumbers.sort((a, b) => a - b);\n  return sortedNumbers.join(' ');\n};\n\n/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  let sortedNumbers = numbers.split(' ');\n  sortedNumbers = sortedNumbers.sort((a, b) => a - b);\n  return sortedNumbers.join(' ');\n};\n\n/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  let sortedNumbers = numbers.split(' ');\n  sortedNumbers = sortedNumbers.sort((a, b) => a - b);\n  return sortedNumbers.join(' ');\n};\n\n/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  let sortedNumbers = numbers.split(' ');\n  sortedNumbers = sortedNumbers.sort((a, b) => a - b);\n  return sortedNumbers.join(' ');\n};\n\n/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  let sortedNumbers = numbers.split(' ');\n  sortedNumbers = sortedNumbers.sort((a, b) => a - b);\n  return sortedNumbers.join(' ');\n};\n\n/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  let sortedNumbers = numbers.split(' ');\n  sortedNumbers = sortedNumbers.sort((a, b) => a - b);\n  return sortedNumbers.join(' ');\n};\n\n/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  let sortedNumbers = numbers.split(' ');\n  sortedNumbers = sortedNumbers.sort((a, b) => a - b);\n  return sortedNumbers.join(' ');\n};\n\n/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  let sortedNumbers = numbers.split(' ');\n  sortedNumbers = sortedNumbers.sort((a, b) => a - b);\n  return sortedNumbers.join(' ');\n};\n\n/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  let sortedNumbers = numbers.split(' ');\n  sortedNumbers = sortedNumbers.sort((a, b) => a - b);\n  return sortedNumbers.join(' ');\n};\n\n/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  let sortedNumbers = numbers.split(' ');", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/2", "prompt": "/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncateNubmer(3.5)\n  0.5\n  */\nconst truncateNubmer = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNubmer", "gc": "<|endoftext|>/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncateNubmer(3.5)\n  0.5\n  */\nconst truncateNubmer = (number) => {\n  const [integer, decimals] = number.toString().split('.');\n  return integer < 0? integer : integer * Math.pow(10, decimals);\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNubmer(3.5)\n  3\n  */\nconst truncateNubmerInt = (number) => {\n  const [integer, decimals] = number.toString().split('.');\n  return integer < 0? integer : integer;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part and the decimal part of the number.\n  >>> truncateNubmer(3.5)\n  (3,2)\n  */\nconst truncateNubmerIntAndDecimals = (number) => {\n  const [integer, decimals] = number.toString().split('.');\n  return integer < 0? integer : integer * Math.pow(10, decimals);\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part and the decimal part of the number.\n  >>> truncateNubmer(3.5)\n  (3,2)\n  */\nconst truncateNubmerIntAndDecimalsInt = (number) => {\n  const [integer, decimals] = number.toString().split('.');\n  return integer < 0? integer : integer;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part and the decimal part of the number.\n  >>> truncateNubmer(3.5)\n  (3,2)\n  */\nconst truncateNubmerIntAndDecimalsIntAndDecimals = (number) => {\n  const [integer, decimals] = number.toString().split('.');\n  return integer < 0? integer : integer * Math.pow(10, decimals);\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part and the decimal part of the number.\n  >>> truncateNubmer(3.5)\n  (3,2)\n  */\nconst truncateNubmerIntAndDecimalsIntAndDecimalsInt = (number) => {\n  const [integer, decimals] = number.toString().split('.');\n  return integer < 0? integer : integer;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part and the decimal part of the number.\n  >>> truncateNubmer(3.5)\n  (3,2)\n  */\nconst truncateNubmerIntAndDecimalsIntAndDecimalsIntAndDecimals = (number) => {\n  const [integer, decimals] = number.toString().split('.');\n  return integer < 0? integer : integer * Math.pow(10, decimals);\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part and the decimal part of the number.\n  >>> truncateNubmer(3.5)\n  (3,2)\n  */\nconst truncateNubmerIntAndDecimalsIntAndDecimalsIntAndDecimalsInt = (number) => {\n  const [integer, decimals] = number.toString().split('.');\n  return integer < 0? integer : integer;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part and the decimal part of the number.\n  >>> truncateNubmer(3.5)\n  (3,2)\n  */\nconst truncateNubmerIntAndDecimalsIntAndDecimalsIntAndDecimalsIntAndDecimals = (number) => {\n  const [integer, decimals] = number.toString().split('.');\n  return integer < 0? integer : integer * Math.pow(10, decimals);\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part and the decimal part of the number.\n  >>> truncateNubmer(3.5)\n  (3,2)\n  */\nconst truncateNubmerIntAndDecimalsIntAndDecimalsIntAndDecimalsIntAndDecimalsInt = (number) => {\n  const [integer, decimals] = number.toString().split('.');\n  return integer < 0? integer : integer;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part and the decimal part of the number.\n  >>> truncateNubmer(3.5)\n  (3,2)\n  */\nconst truncateNubmerIntAndDecimalsIntAndDecimalsIntAndDecimalsIntAndDecimalsIntAndDecimals = (number) => {\n  const [integer, decimals] = number.toString().split('.');\n  return integer < 0? integer : integer * Math.pow(10, decimals);\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part and the decimal part of the number.\n  >>> truncateNubmer(3.5)\n  (3,2)\n  */\nconst truncateNubmerIntAndDecimalsIntAndDecimalsIntAndDecimalsIntAndDecimalsIntAndDecimalsInt = (number) => {\n  const [integer, decimals] = number.toString().split('.');\n  return integer < 0? integer : integer;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part and the decimal part of the number.\n  >>> truncateNubmer(3.5)\n  (3,2)\n  */\nconst truncateNubmerIntAndDecimalsIntAndDecimalsIntAndDecimalsIntAndDecimalsIntAndDecimalsInt = (number) => {\n  const [integer, decimals] = number.toString().split('.');\n  return integer < 0? integer : integer * Math.pow(10, decimals);\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part and the decimal part of the number.\n  >>> truncateNubmer(3.5)\n  (3,2)\n  */\nconst truncateNubmerIntAndDecimalsIntAndDecimalsIntAndDecimalsIntAndDecimalsIntAndDecimalsInt = (number) => {\n  const [integer, decimals] = number.toString().split('.');\n  return integer < 0? integer : integer * Math.pow(10, decimals);\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part and the decimal part of the number.\n  >>> truncateNubmer(", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/20", "prompt": "/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "gc": "<|endoftext|>/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  const [minDistance, closest] = numbers.sort((a, b) => a - b)\n  return [minDistance, closest]\n}\n\n/**\n  Given a number and a list containing numbers, return the number that is the closest to each number in the list.\n  >>> findClosestNumbers([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6])\n  6\n  >>> findClosestNumbers([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6])\n  1\n  >>> findClosestNumbers([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6])\n  1\n  >>> findClosestNumbers([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6])\n  1\n  >>> findClosestNumbers([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6])\n  1\n  >>> findClosestNumbers([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6])\n  1\n  >>> findClosestNumbers([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6])\n  1\n  >>> findClosestNumbers([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6])\n  1\n  >>> findClosestNumbers([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6])\n  1\n  >>> findClosestNumbers([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6])\n  1\n  >>> findClosestNumbers([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6])\n  1\n  >>> findClosestNumbers([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6])\n  1\n  >>> findClosestNumbers([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6])\n  1\n  >>> findClosestNumbers([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6])\n  1\n  >>> findClosestNumbers([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6])\n  1\n  >>> findClosestNumbers([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6])\n  1\n  >>> findClosestNumbers([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6])\n  1\n  >>> findClosestNumbers([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6])\n  1\n  >>> findClosestNumbers([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6])\n  1\n  >>> findClosestNumbers([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6])\n  1\n  >>> findClosestNumbers([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6])\n  1\n  >>> findClosestNumbers([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6])\n  1\n  >>> findClosestNumbers([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6])\n  1\n  >>> findClosestNumbers([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6])\n  1\n  >>> findClosestNumbers([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6])\n  1\n  >>> findClosestNumbers([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6])\n  1\n  >>> findClosestNumbers([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6])\n  1\n  >>> findClosestNumbers([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6])\n  1\n  >>> findClosestNumbers([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6])\n  1\n  >>> findClosestNumbers([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6])\n  1\n  >>> findClosestNumbers([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6])\n  1\n  >>> findClosestNumbers([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6])\n  1\n  >>> findClosestNumbers([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6])\n  1\n  >>> findClosestNumbers([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6])\n  1\n  >>> findClosestNumbers([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6])\n  1\n  >>> findClosestNumbers([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6])\n  1\n  >>> findClosestNumbers([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6])\n  1\n  >>> findClosestNumbers([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6])\n  1\n  >>> findClosestNumbers([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6])\n  1\n  >>> findClosestNumbers([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6])\n  1\n  >>> findClosestNumbers([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6])\n  1\n  >>> findClosestNumbers([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6])\n  1\n  >>> findClosestNumbers([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6])\n  1\n  >>> findClosestNumbers([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6])\n  1\n  >>> findClosestNumbers([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6])\n  1\n  >>> findClosestNumbers([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6])\n  1\n  >>> findClosestNumbers([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6])\n  1\n  >>> findClosestNumbers([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6])\n  1\n  >>> findClosestNumbers([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6])\n  1\n  >>> findClosestNumbers([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6])\n  1\n  >>> findClosestNumbers([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6])\n  1\n  >>> findClosestNumbers([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6])\n  1\n  >>> findClosestNumbers([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6])\n  1\n  >>> findClosestNumbers([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6])\n  1\n  >>> findClosestNumbers([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6])\n  1\n  >>> findClosestNumbers([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6])\n  1\n  >>> findClosestNumbers([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6])\n  1\n  >>> findClosestNumbers([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6])\n  1\n  >>> findClosestNumbers([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6])\n  1\n  >>> findClosestNumbers([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6])\n  1\n  >>> findClosestNumbers([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6])\n  1\n  >>> findClosestNumbers([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6])\n  1\n  >>> findClosestNumbers([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6])\n  1\n  >>> findClosestNumbers([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6])\n  1\n  >>> findClosestNumbers([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6])\n  1\n  >>> findClosestNumbers([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6])\n  1\n  >>> findClosestNumbers([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6])\n  1\n  >>> findClosestNumbers([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6])\n  1\n  >>> findClosestNumbers([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6])\n  1\n  >>> findClosestNumbers([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6])\n  1\n  >>> findClosestNumbers([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6])\n  1\n  >>> findClosestNumbers([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6])\n  1\n  >>> findClosestNumbers([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6])\n  1\n  >>> findClosestNumbers([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6])\n  1\n  >>> findClosestNumbers([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6])\n  1\n  >>> findClosestNumbers([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6])\n  1\n  >>> findClosestNumbers([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6])\n  1\n  >>> findClosestNumbers([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6])\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleTonUit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleTonUit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleTonUit", "gc": "<|endoftext|>/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleTonUit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleTonUit = (numbers) => {\n  const minNum = numbers[0];\n  const maxNum = numbers[1];\n  const minNumScaled = minNum * 0.5;\n  const maxNumScaled = maxNum * 0.5;\n  return [minNumScaled, maxNumScaled];\n};\n\n// Given a list of numbers (of at least two elements), apply a linear transform to that list,\n// such that the smallest number will become 0 and the largest will become 1\n// >>> rescaleTonUit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n// >>> rescaleTonUit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n// >>> rescaleTonUit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n// >>> rescaleTonUit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n// >>> rescaleTonUit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n// >>> rescaleTonUit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n// >>> rescaleTonUit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n// >>> rescaleTonUit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n// >>> rescaleTonUit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n// >>> rescaleTonUit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n// >>> rescaleTonUit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n// >>> rescaleTonUit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n// >>> rescaleTonUit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n// >>> rescaleTonUit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n// >>> rescaleTonUit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n// >>> rescaleTonUit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n// >>> rescaleTonUit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n// >>> rescaleTonUit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n// >>> rescaleTonUit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n// >>> rescaleTonUit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n// >>> rescaleTonUit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n// >>> rescaleTonUit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n// >>> rescaleTonUit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n// >>> rescaleTonUit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n// >>> rescaleTonUit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n// >>> rescaleTonUit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n// >>> rescaleTonUit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n// >>> rescaleTonUit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n// >>> rescaleTonUit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n// >>> rescaleTonUit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n// >>> rescaleTonUit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n// >>> rescaleTonUit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n// >>> rescaleTonUit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n// >>> rescaleTonUit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n// >>> rescaleTonUit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n// >>> rescaleTonUit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n// >>> rescaleTonUit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n// >>> rescaleTonUit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n// >>> rescaleTonUit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n// >>> rescaleTonUit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n// >>> rescaleTonUit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n// >>> rescaleTonUit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n// >>> rescaleTonUit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n// >>> rescaleTonUit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n// >>> rescaleTonUit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n// >>> rescaleTonUit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n// >>> rescaleTonUit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n// >>> rescaleTonUit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n// >>> rescaleTonUit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n// >>> rescaleTonUit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n// >>> rescaleTonUit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n// >>> rescaleTonUit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n// >>> rescaleTonUit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n// >>> rescal", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/22", "prompt": "/* Filter given list of any python values only for integers\n  >>> filetrItnegers(['a', 3.14, 5])\n  [5]\n  >>> filetrItnegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filetrItnegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filetrItnegers", "gc": "<|endoftext|>/* Filter given list of any python values only for integers\n  >>> filetrItnegers(['a', 3.14, 5])\n  [5]\n  >>> filetrItnegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filetrItnegers = (values) => {\n  return values.filter(value => typeof value === 'number' && value!== Infinity);\n};\n\n/* Filter given list of any python values only for floats\n  >>> filetrItnegers(['a', 3.14, 5])\n  [5]\n  >>> filetrItnegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filetrItnegersFloats = (values) => {\n  return values.filter(value => typeof value === 'number' && value!== -Infinity);\n};\n\n/* Filter given list of any python values only for strings\n  >>> filetrItnegers(['a', 3.14, 5])\n  [5]\n  >>> filetrItnegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filetrItnegersStrings = (values) => {\n  return values.filter(value => typeof value ==='string');\n};\n\n/* Filter given list of any python values only for booleans\n  >>> filetrItnegers(['a', 3.14, 5])\n  [5]\n  >>> filetrItnegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filetrItnegersBools = (values) => {\n  return values.filter(value => typeof value === 'boolean');\n};\n\n/* Filter given list of any python values only for None\n  >>> filetrItnegers(['a', 3.14, 5])\n  [5]\n  >>> filetrItnegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filetrItnegersNones = (values) => {\n  return values.filter(value => value === null);\n};\n\n/* Filter given list of any python values only for empty lists\n  >>> filetrItnegers(['a', 3.14, 5])\n  [5]\n  >>> filetrItnegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filetrItnegersEmptyLists = (values) => {\n  return values.filter(value => value === []);\n};\n\n/* Filter given list of any python values only for empty dictionaries\n  >>> filetrItnegers(['a', 3.14, 5])\n  [5]\n  >>> filetrItnegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filetrItnegersEmptyDicts = (values) => {\n  return values.filter(value => value === {});\n};\n\n/* Filter given list of any python values only for empty strings\n  >>> filetrItnegers(['a', 3.14, 5])\n  [5]\n  >>> filetrItnegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filetrItnegersEmptyStrings = (values) => {\n  return values.filter(value => value === '');\n};\n\n/* Filter given list of any python values only for empty booleans\n  >>> filetrItnegers(['a', 3.14, 5])\n  [5]\n  >>> filetrItnegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filetrItnegersEmptyBools = (values) => {\n  return values.filter(value => value === false);\n};\n\n/* Filter given list of any python values only for empty None\n  >>> filetrItnegers(['a', 3.14, 5])\n  [5]\n  >>> filetrItnegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filetrItnegersEmptyNones = (values) => {\n  return values.filter(value => value === null);\n};\n\n/* Filter given list of any python values only for empty lists\n  >>> filetrItnegers(['a', 3.14, 5])\n  [5]\n  >>> filetrItnegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filetrItnegersEmptyListsNones = (values) => {\n  return values.filter(value => value === []);\n};\n\n/* Filter given list of any python values only for empty dictionaries\n  >>> filetrItnegers(['a', 3.14, 5])\n  [5]\n  >>> filetrItnegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filetrItnegersEmptyDictsNones = (values) => {\n  return values.filter(value => value === {});\n};\n\n/* Filter given list of any python values only for empty strings\n  >>> filetrItnegers(['a', 3.14, 5])\n  [5]\n  >>> filetrItnegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filetrItnegersEmptyStringsNones = (values) => {\n  return values.filter(value => value === '');\n};\n\n/* Filter given list of any python values only for empty booleans\n  >>> filetrItnegers(['a', 3.14, 5])\n  [5]\n  >>> filetrItnegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filetrItnegersEmptyBoolsNones = (values) => {\n  return values.filter(value => value === false);\n};\n\n/* Filter given list of any python values only for empty None\n  >>> filetrItnegers(['a', 3.14, 5])\n  [5]\n  >>> filetrItnegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filetrItnegersEmptyNonesNones = (values) => {\n  return values.filter(value => value === null);\n};\n\n/* Filter given list of any python values only for empty lists\n  >>> filetrItnegers(['a', 3.14, 5])\n  [5]\n  >>> filetrItnegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filetrItnegersEmptyListsEmptyNones = (values) => {\n  return values.filter(value => value === []);\n};\n\n/* Filter given list of any python values only for empty dictionaries\n  >>> filetrItnegers(['a', 3.14, 5])\n  [5]\n  >>> filetrItnegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filetrItnegersEmptyDictsEmptyNones = (values) => {\n  return values.filter(value => value === {});\n};\n\n/* Filter given list of any python values only for empty strings\n  >>> filetrItnegers(['a', 3.14, 5])\n  [5]\n  >>> filetrItnegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filetrItnegersEmptyStringsEmptyNones = (values) => {\n  return values.filter(value => value === '');\n};\n\n/* Filter given list of any python values only for empty booleans\n  >>> filetrItnegers(['a', 3.14, 5])\n  [5]\n  >>> filetrItnegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filetrItnegersEmptyBoolsEmptyNones = (values) => {\n  return values.filter(value => value === false);\n};\n\n/* Filter given list of any python values only for empty None\n  >>> filetrItnegers(['a', 3.14, 5])\n  [5]\n  >>> filetrItnegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filetrItnegersEmptyNonesEmptyNones = (values) => {\n  return values.filter(value => value === null);\n};\n\n/* Filter given list of any python values only for empty lists\n  >>> filetrItnegers(['a', 3.14, 5])\n  [5]\n  >>> filetrItnegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/23", "prompt": "/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "gc": "<|endoftext|>/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length\n}\n\n/**\n * Return true if given string starts with given prefix\n * >>> startsWith('abc', 'ab')\n  true\n  >>> startsWith('abc', 'abc')\n  false\n  */\nconst startsWith = (string, prefix) => {\n  return string.startsWith(prefix)\n}\n\n/**\n * Return true if given string ends with given suffix\n * >>> endsWith('abc', 'ab')\n  true\n  >>> endsWith('abc', 'abc')\n  false\n  */\nconst endsWith = (string, suffix) => {\n  return string.endsWith(suffix)\n}\n\n/**\n * Return true if given string contains given substring\n * >>> contains('abc', 'ab')\n  true\n  >>> contains('abc', 'abc')\n  false\n  */\nconst contains = (string, substring) => {\n  return string.includes(substring)\n}\n\n/**\n * Return true if given string starts with given substring\n * >>> startsWith('abc', 'ab')\n  true\n  >>> startsWith('abc', 'abc')\n  false\n  */\nconst startsWith = (string, substring) => {\n  return string.startsWith(substring)\n}\n\n/**\n * Return true if given string ends with given substring\n * >>> endsWith('abc', 'ab')\n  true\n  >>> endsWith('abc', 'abc')\n  false\n  */\nconst endsWith = (string, substring) => {\n  return string.endsWith(substring)\n}\n\n/**\n * Return true if given string contains given substring\n * >>> contains('abc', 'ab')\n  true\n  >>> contains('abc', 'abc')\n  false\n  */\nconst contains = (string, substring) => {\n  return string.includes(substring)\n}\n\n/**\n * Return true if given string starts with given substring\n * >>> startsWith('abc', 'ab')\n  true\n  >>> startsWith('abc', 'abc')\n  false\n  */\nconst startsWith = (string, substring) => {\n  return string.startsWith(substring)\n}\n\n/**\n * Return true if given string ends with given substring\n * >>> endsWith('abc', 'ab')\n  true\n  >>> endsWith('abc', 'abc')\n  false\n  */\nconst endsWith = (string, substring) => {\n  return string.endsWith(substring)\n}\n\n/**\n * Return true if given string contains given substring\n * >>> contains('abc', 'ab')\n  true\n  >>> contains('abc', 'abc')\n  false\n  */\nconst contains = (string, substring) => {\n  return string.includes(substring)\n}\n\n/**\n * Return true if given string starts with given substring\n * >>> startsWith('abc', 'ab')\n  true\n  >>> startsWith('abc', 'abc')\n  false\n  */\nconst startsWith = (string, substring) => {\n  return string.startsWith(substring)\n}\n\n/**\n * Return true if given string ends with given substring\n * >>> endsWith('abc', 'ab')\n  true\n  >>> endsWith('abc', 'abc')\n  false\n  */\nconst endsWith = (string, substring) => {\n  return string.endsWith(substring)\n}\n\n/**\n * Return true if given string contains given substring\n * >>> contains('abc', 'ab')\n  true\n  >>> contains('abc', 'abc')\n  false\n  */\nconst contains = (string, substring) => {\n  return string.includes(substring)\n}\n\n/**\n * Return true if given string starts with given substring\n * >>> startsWith('abc', 'ab')\n  true\n  >>> startsWith('abc', 'abc')\n  false\n  */\nconst startsWith = (string, substring) => {\n  return string.startsWith(substring)\n}\n\n/**\n * Return true if given string ends with given substring\n * >>> endsWith('abc', 'ab')\n  true\n  >>> endsWith('abc', 'abc')\n  false\n  */\nconst endsWith = (string, substring) => {\n  return string.endsWith(substring)\n}\n\n/**\n * Return true if given string contains given substring\n * >>> contains('abc', 'ab')\n  true\n  >>> contains('abc', 'abc')\n  false\n  */\nconst contains = (string, substring) => {\n  return string.includes(substring)\n}\n\n/**\n * Return true if given string starts with given substring\n * >>> startsWith('abc', 'ab')\n  true\n  >>> startsWith('abc', 'abc')\n  false\n  */\nconst startsWith = (string, substring) => {\n  return string.startsWith(substring)\n}\n\n/**\n * Return true if given string ends with given substring\n * >>> endsWith('abc', 'ab')\n  true\n  >>> endsWith('abc', 'abc')\n  false\n  */\nconst endsWith = (string, substring) => {\n  return string.endsWith(substring)\n}\n\n/**\n * Return true if given string contains given substring\n * >>> contains('abc', 'ab')\n  true\n  >>> contains('abc', 'abc')\n  false\n  */\nconst contains = (string, substring) => {\n  return string.includes(substring)\n}\n\n/**\n * Return true if given string starts with given substring\n * >>> startsWith('abc', 'ab')\n  true\n  >>> startsWith('abc', 'abc')\n  false\n  */\nconst startsWith = (string, substring) => {\n  return string.startsWith(substring)\n}\n\n/**\n * Return true if given string ends with given substring\n * >>> endsWith('abc', 'ab')\n  true\n  >>> endsWith('abc', 'abc')\n  false\n  */\nconst endsWith = (string, substring) => {\n  return string.endsWith(substring)\n}\n\n/**\n * Return true if given string contains given substring\n * >>> contains('abc', 'ab')\n  true\n  >>> contains('abc', 'abc')\n  false\n  */\nconst contains = (string, substring) => {\n  return string.includes(substring)\n}\n\n/**\n * Return true if given string starts with given substring\n * >>> startsWith('abc', 'ab')\n  true\n  >>> startsWith('abc', 'abc')\n  false\n  */\nconst startsWith = (string, substring) => {\n  return string.startsWith(substring)\n}\n\n/**\n * Return true if given string ends with given substring\n * >>> endsWith('abc', 'ab')\n  true\n  >>> endsWith('abc', 'abc')\n  false\n  */\nconst endsWith = (string, substring) => {\n  return string.endsWith(substring)\n}\n\n/**\n * Return true if given string contains given substring\n * >>> contains('abc', 'ab')\n  true\n  >>> contains('abc', 'abc')\n  false\n  */\nconst contains = (string, substring) => {\n  return string.includes(substring)\n}\n\n/**\n * Return true if given string starts with given substring\n * >>> startsWith('abc', 'ab')\n  true\n  >>> startsWith('abc', 'abc')\n  false\n  */\nconst startsWith = (string, substring) => {\n  return string.startsWith(substring)\n}\n\n/**\n * Return true if given string ends with given substring\n * >>> endsWith('abc', 'ab')\n  true\n  >>> endsWith('abc', 'abc')\n  false\n  */\nconst endsWith = (string, substring) => {\n  return string.endsWith(substring)\n}\n\n/**\n * Return true if given string contains given substring\n * >>> contains('abc', 'ab')\n  true\n  >>> contains('", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/24", "prompt": "/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "gc": "<|endoftext|>/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let divisor = 1;\n  while (n % divisor!== 0) {\n    divisor *= 10;\n  }\n  return divisor;\n};\n\n/**\n * Given a number n, find the largest number that divides n evenly, larger than n\n * >>> smallestDivisor(15)\n  1\n  */\nconst smallestDivisor = (n) => {\n  let divisor = 1;\n  while (n % divisor!== 0) {\n    divisor *= 10;\n  }\n  return divisor;\n};\n\n/**\n * Given a number n, find the largest number that divides n evenly, smaller than n\n * >>> largestDivisor(15)\n  1\n  */\nconst smallestDivisor = (n) => {\n  let divisor = 1;\n  while (n % divisor!== 0) {\n    divisor *= 10;\n  }\n  return divisor;\n};\n\n/**\n * Given a number n, find the largest number that divides n evenly, larger than n\n * >>> smallestDivisor(15)\n  1\n  */\nconst largestDivisor = (n) => {\n  let divisor = 1;\n  while (n % divisor!== 0) {\n    divisor *= 10;\n  }\n  return divisor;\n};\n\n/**\n * Given a number n, find the largest number that divides n evenly, smaller than n\n * >>> largestDivisor(15)\n  1\n  */\nconst smallestDivisor = (n) => {\n  let divisor = 1;\n  while (n % divisor!== 0) {\n    divisor *= 10;\n  }\n  return divisor;\n};\n\n/**\n * Given a number n, find the largest number that divides n evenly, larger than n\n * >>> smallestDivisor(15)\n  1\n  */\nconst largestDivisor = (n) => {\n  let divisor = 1;\n  while (n % divisor!== 0) {\n    divisor *= 10;\n  }\n  return divisor;\n};\n\n/**\n * Given a number n, find the largest number that divides n evenly, smaller than n\n * >>> largestDivisor(15)\n  1\n  */\nconst smallestDivisor = (n) => {\n  let divisor = 1;\n  while (n % divisor!== 0) {\n    divisor *= 10;\n  }\n  return divisor;\n};\n\n/**\n * Given a number n, find the largest number that divides n evenly, larger than n\n * >>> smallestDivisor(15)\n  1\n  */\nconst largestDivisor = (n) => {\n  let divisor = 1;\n  while (n % divisor!== 0) {\n    divisor *= 10;\n  }\n  return divisor;\n};\n\n/**\n * Given a number n, find the largest number that divides n evenly, smaller than n\n * >>> largestDivisor(15)\n  1\n  */\nconst smallestDivisor = (n) => {\n  let divisor = 1;\n  while (n % divisor!== 0) {\n    divisor *= 10;\n  }\n  return divisor;\n};\n\n/**\n * Given a number n, find the largest number that divides n evenly, larger than n\n * >>> smallestDivisor(15)\n  1\n  */\nconst largestDivisor = (n) => {\n  let divisor = 1;\n  while (n % divisor!== 0) {\n    divisor *= 10;\n  }\n  return divisor;\n};\n\n/**\n * Given a number n, find the largest number that divides n evenly, smaller than n\n * >>> largestDivisor(15)\n  1\n  */\nconst smallestDivisor = (n) => {\n  let divisor = 1;\n  while (n % divisor!== 0) {\n    divisor *= 10;\n  }\n  return divisor;\n};\n\n/**\n * Given a number n, find the largest number that divides n evenly, larger than n\n * >>> smallestDivisor(15)\n  1\n  */\nconst largestDivisor = (n) => {\n  let divisor = 1;\n  while (n % divisor!== 0) {\n    divisor *= 10;\n  }\n  return divisor;\n};\n\n/**\n * Given a number n, find the largest number that divides n evenly, smaller than n\n * >>> largestDivisor(15)\n  1\n  */\nconst smallestDivisor = (n) => {\n  let divisor = 1;\n  while (n % divisor!== 0) {\n    divisor *= 10;\n  }\n  return divisor;\n};\n\n/**\n * Given a number n, find the largest number that divides n evenly, larger than n\n * >>> smallestDivisor(15)\n  1\n  */\nconst largestDivisor = (n) => {\n  let divisor = 1;\n  while (n % divisor!== 0) {\n    divisor *= 10;\n  }\n  return divisor;\n};\n\n/**\n * Given a number n, find the largest number that divides n evenly, smaller than n\n * >>> largestDivisor(15)\n  1\n  */\nconst smallestDivisor = (n) => {\n  let divisor = 1;\n  while (n % divisor!== 0) {\n    divisor *= 10;\n  }\n  return divisor;\n};\n\n/**\n * Given a number n, find the largest number that divides n evenly, larger than n\n * >>> smallestDivisor(15)\n  1\n  */\nconst largestDivisor = (n) => {\n  let divisor = 1;\n  while (n % divisor!== 0) {\n    divisor *= 10;\n  }\n  return divisor;\n};\n\n/**\n * Given a number n, find the largest number that divides n evenly, smaller than n\n * >>> largestDivisor(15)\n  1\n  */\nconst smallestDivisor = (n) => {\n  let divisor = 1;\n  while (n % divisor!== 0) {\n    divisor *= 10;\n  }\n  return divisor;\n};\n\n/**\n * Given a number n, find the largest number that divides n evenly, larger than n\n * >>> smallestDivisor(15)\n  1\n  */\nconst largestDivisor = (n) => {\n  let divisor = 1;\n  while (n % divisor!== 0) {\n    divisor *= 10;\n  }\n  return divisor;\n};\n\n/**\n * Given a number n, find the largest number that divides n evenly, smaller than n\n * >>> largestDivisor(15)\n  1\n  */\nconst smallestDivisor = (n) => {\n  let divisor = 1;\n  while (n % divisor!== 0) {\n    divisor *= 10;\n  }\n  return divisor;\n};\n\n/**\n * Given a number n, find the largest number that divides n evenly, larger than n\n * >>> smallestDivisor(15)\n  1\n  */\nconst largestDivisor = (n) => {\n  let divisor = 1;\n  while (n % divisor!== 0) {\n    divisor *= 10;\n  }\n  return divisor;\n};\n\n/**\n * Given a number n, find the largest number that divides n evenly, smaller than n\n * >>> largestDivisor(15)\n  1\n  */\nconst smallestDivisor = (n) => {\n  let divisor = 1;\n  while (n % divisor!== 0) {\n    divisor *= 10;\n  }\n  return divisor;\n};\n\n/**\n * Given a number n, find the largest number that divides n evenly, larger than n\n * >>> smallestDivisor(15)\n  1\n  */\nconst largestDivisor = (n) => {\n  let divisor = 1;\n  while (n % divisor!== 0) {\n    divisor *= 10;\n  }\n  return divisor;\n};\n\n/**\n * Given a number n, find the largest number that divides n evenly, smaller than n\n * >>> largestDivisor(15)\n  1\n  */\nconst smallestDivisor = (n) => {\n  let divisor = 1;\n  while (n % divisor!== 0) {\n    divisor *= 10;\n  }\n  return divisor;\n};\n\n/**\n * Given a number n, find the largest number that divides n evenly, larger than n\n * >>> smallestDivisor(15)\n  1\n  */\nconst largestDivisor = (n) => {\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "gc": "<|endoftext|>/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  const factors = [];\n  let i = 1;\n  let j = 1;\n  let k = 1;\n  while (i <= n) {\n    j = i;\n    while (j <= n) {\n      if (n % j === 0) {\n        factors.push(j);\n      }\n      j++;\n    }\n    i++;\n  }\n  return factors;\n};\n\n/* Given a number return its prime factorization\n  >>> primeFactorization(2)\n  [2, 1]\n  >>> primeFactorization(3)\n  [2, 3, 1]\n  >>> primeFactorization(5)\n  [5, 1, 2]\n  >>> primeFactorization(7)\n  [7, 5, 1]\n  >>> primeFactorization(11)\n  [11, 5, 1, 2]\n  >>> primeFactorization(13)\n  [13, 5, 1, 2]\n  >>> primeFactorization(17)\n  [17, 5, 1, 2]\n  >>> primeFactorization(19)\n  [19, 5, 1, 2]\n  >>> primeFactorization(21)\n  [21, 5, 1, 2]\n  >>> primeFactorization(23)\n  [23, 5, 1, 2]\n  >>> primeFactorization(31)\n  [31, 5, 1, 2]\n  >>> primeFactorization(37)\n  [37, 5, 1, 2]\n  >>> primeFactorization(41)\n  [41, 5, 1, 2]\n  >>> primeFactorization(43)\n  [43, 5, 1, 2]\n  >>> primeFactorization(47)\n  [47, 5, 1, 2]\n  >>> primeFactorization(51)\n  [51, 5, 1, 2]\n  >>> primeFactorization(57)\n  [57, 5, 1, 2]\n  >>> primeFactorization(61)\n  [61, 5, 1, 2]\n  >>> primeFactorization(67)\n  [67, 5, 1, 2]\n  >>> primeFactorization(71)\n  [71, 5, 1, 2]\n  >>> primeFactorization(73)\n  [73, 5, 1, 2]\n  >>> primeFactorization(79)\n  [79, 5, 1, 2]\n  >>> primeFactorization(83)\n  [83, 5, 1, 2]\n  >>> primeFactorization(89)\n  [89, 5, 1, 2]\n  >>> primeFactorization(97)\n  [97, 5, 1, 2]\n  >>> primeFactorization(101)\n  [101, 5, 1, 2]\n  >>> primeFactorization(103)\n  [103, 5, 1, 2]\n  >>> primeFactorization(107)\n  [107, 5, 1, 2]\n  >>> primeFactorization(111)\n  [111, 5, 1, 2]\n  >>> primeFactorization(127)\n  [127, 5, 1, 2]\n  >>> primeFactorization(131)\n  [131, 5, 1, 2]\n  >>> primeFactorization(137)\n  [137, 5, 1, 2]\n  >>> primeFactorization(141)\n  [141, 5, 1, 2]\n  >>> primeFactorization(143)\n  [143, 5, 1, 2]\n  >>> primeFactorization(147)\n  [147, 5, 1, 2]\n  >>> primeFactorization(151)\n  [151, 5, 1, 2]\n  >>> primeFactorization(157)\n  [157, 5, 1, 2]\n  >>> primeFactorization(161)\n  [161, 5, 1, 2]\n  >>> primeFactorization(167)\n  [167, 5, 1, 2]\n  >>> primeFactorization(171)\n  [171, 5, 1, 2]\n  >>> primeFactorization(175)\n  [175, 5, 1, 2]\n  >>> primeFactorization(181)\n  [181, 5, 1, 2]\n  >>> primeFactorization(191)\n  [191, 5, 1, 2]\n  >>> primeFactorization(193)\n  [193, 5, 1, 2]\n  >>> primeFactorization(197)\n  [197, 5, 1, 2]\n  >>> primeFactorization(201)\n  [201, 5, 1, 2]\n  >>> primeFactorization(203)\n  [203, 5, 1, 2]\n  >>> primeFactorization(207)\n  [207, 5, 1, 2]\n  >>> primeFactorization(211)\n  [211, 5, 1, 2]\n  >>> primeFactorization(217)\n  [217, 5, 1, 2]\n  >>> primeFactorization(221)\n  [221, 5, 1, 2]\n  >>> primeFactorization(223)\n  [223, 5, 1, 2]\n  >>> primeFactorization(227)\n  [227, 5, 1, 2]\n  >>> primeFactorization(229)\n  [229, 5, 1, 2]\n  >>> primeFactorization(233)\n  [233, 5, 1, 2]\n  >>> primeFactorization(239)\n  [239, 5, 1, 2]\n  >>> primeFactorization(241)\n  [241, 5, 1, 2]\n  >>> primeFactorization(243)\n  [243, 5, 1, 2]\n  >>> primeFactorization(247)\n  [247, 5, 1, 2]\n  >>> primeFactorization(251)\n  [251, 5, 1, 2]\n  >>> primeFactorization(255)\n  [255, 5, 1, 2]\n  >>> primeFactorization(261)\n  [261, 5, 1, 2]\n  >>> primeFactorization(267)\n  [267, 5, 1, 2]\n  >>> primeFactorization(271)\n  [271, 5, 1, 2]\n  >>> primeFactorization(275)\n  [275, 5, 1, 2]\n  >>> primeFactorization(281)\n  [281, 5, 1, 2]\n  >>> primeFactorization(285)\n  [285, 5, 1, 2]\n  >>> primeFactorization(291)\n  [291, 5, 1, 2]\n  >>> primeFactorization(295)\n  [295, 5, 1, 2]\n  >>> primeFactorization(301)\n  [301, 5, 1, 2]\n  >>> primeFactorization(307)\n  [307, 5, 1, 2]\n  >>> primeFactorization(311)\n  [311, 5, 1, 2]\n  >>> primeFactorization(317)\n  [317, 5, 1, 2]\n  >>> primeFactorization(331)\n  [331, 5, 1, 2]\n  >>> primeFactorization(337)\n  [337, 5, 1, 2]\n  >>> primeFactorization(341)\n  [341, 5, 1, 2]\n  >>> primeFactorization(347)\n  [347, 5, 1, 2]\n  >>> primeFactorization(351)\n  [351, 5, 1, 2]\n  >>> primeFactorization(357)\n  [357, 5, 1, 2]\n  >>> primeFactorization(361)\n  [361, 5, 1, 2]\n  >>> primeFactorization(367)\n  [367, 5, 1, 2]\n  >>> primeFactorization(371)\n  [371, 5, 1, 2]\n  >>> primeFactorization(377)\n  [377, 5, 1, 2]\n  >>> primeFactorization(381)\n  [381, 5, 1, 2]\n  >>> primeFactorization(387)\n  [387, 5, 1, 2]\n  >>> primeFactorization(391)\n  [391, 5, 1, 2]\n  >>> primeFactorization(397)\n  [397, 5, 1, 2]\n  >>> primeFactorization(401)\n  [401, 5, 1, 2]\n  >>> primeFactoriz", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "gc": "<|endoftext|>/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const seen = new Set();\n  return numbers.reduce((acc, curr) => {\n    if (seen.has(curr)) {\n      acc.push(curr);\n    } else {\n      seen.add(curr);\n    }\n    return acc;\n  }, []);\n};\n\n/**\n * Given a string, return a new string where all characters are lowercase.\n * >>> lowerCase('hello')\n  'hello'\n  */\nconst lowerCase = (str) => {\n  return str.toLowerCase().replace(/[^a-z]+/g, '');\n};\n\n/**\n * Given a string, return a new string where all characters are uppercase.\n * >>> upperCase('hello')\n  'HELLO'\n  */\nconst upperCase = (str) => {\n  return str.toUpperCase().replace(/[^A-Z]+/g, '');\n};\n\n/**\n * Given a string, return a new string where all characters are capitalized.\n * >>> capitalize('hello')\n  'Hello'\n  */\nconst capitalize = (str) => {\n  return str[0].toUpperCase() + str.slice(1);\n};\n\n/**\n * Given a string, return a new string where all characters are converted to lowercase.\n * >>> toLower('hello')\n  'hello'\n  */\nconst toLower = (str) => {\n  return str.toLowerCase();\n};\n\n/**\n * Given a string, return a new string where all characters are converted to uppercase.\n * >>> toUpper('hello')\n  'HELLO'\n  */\nconst toUpper = (str) => {\n  return str.toUpperCase();\n};\n\n/**\n * Given a string, return a new string where all characters are converted to uppercase.\n * >>> toTitleCase('hello')\n  'Hello World'\n  */\nconst toTitleCase = (str) => {\n  return str.replace(/\\w\\S*/g, function(txt) {\n    return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n  });\n};\n\n/**\n * Given a string, return a new string where all characters are converted to lowercase.\n * >>> toTitleCase('hello')\n  'Hello World'\n  */\nconst toTitleCase = (str) => {\n  return str.replace(/\\w\\S*/g, function(txt) {\n    return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n  });\n};\n\n/**\n * Given a string, return a new string where all characters are converted to lowercase.\n * >>> toTitleCase('hello')\n  'Hello World'\n  */\nconst toTitleCase = (str) => {\n  return str.replace(/\\w\\S*/g, function(txt) {\n    return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n  });\n};\n\n/**\n * Given a string, return a new string where all characters are converted to uppercase.\n * >>> toTitleCase('hello')\n  'Hello World'\n  */\nconst toTitleCase = (str) => {\n  return str.replace(/\\w\\S*/g, function(txt) {\n    return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n  });\n};\n\n/**\n * Given a string, return a new string where all characters are converted to uppercase.\n * >>> toTitleCase('hello')\n  'Hello World'\n  */\nconst toTitleCase = (str) => {\n  return str.replace(/\\w\\S*/g, function(txt) {\n    return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n  });\n};\n\n/**\n * Given a string, return a new string where all characters are converted to lowercase.\n * >>> toTitleCase('hello')\n  'Hello World'\n  */\nconst toTitleCase = (str) => {\n  return str.replace(/\\w\\S*/g, function(txt) {\n    return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n  });\n};\n\n/**\n * Given a string, return a new string where all characters are converted to lowercase.\n * >>> toTitleCase('hello')\n  'Hello World'\n  */\nconst toTitleCase = (str) => {\n  return str.replace(/\\w\\S*/g, function(txt) {\n    return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n  });\n};\n\n/**\n * Given a string, return a new string where all characters are converted to uppercase.\n * >>> toTitleCase('hello')\n  'Hello World'\n  */\nconst toTitleCase = (str) => {\n  return str.replace(/\\w\\S*/g, function(txt) {\n    return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n  });\n};\n\n/**\n * Given a string, return a new string where all characters are converted to uppercase.\n * >>> toTitleCase('hello')\n  'Hello World'\n  */\nconst toTitleCase = (str) => {\n  return str.replace(/\\w\\S*/g, function(txt) {\n    return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n  });\n};\n\n/**\n * Given a string, return a new string where all characters are converted to lowercase.\n * >>> toTitleCase('hello')\n  'Hello World'\n  */\nconst toTitleCase = (str) => {\n  return str.replace(/\\w\\S*/g, function(txt) {\n    return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n  });\n};\n\n/**\n * Given a string, return a new string where all characters are converted to uppercase.\n * >>> toTitleCase('hello')\n  'Hello World'\n  */\nconst toTitleCase = (str) => {\n  return str.replace(/\\w\\S*/g, function(txt) {\n    return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n  });\n};\n\n/**\n * Given a string, return a new string where all characters are converted to uppercase.\n * >>> toTitleCase('hello')\n  'Hello World'\n  */\nconst toTitleCase = (str) => {\n  return str.replace(/\\w\\S*/g, function(txt) {\n    return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n  });\n};\n\n/**\n * Given a string, return a new string where all characters are converted to lowercase.\n * >>> toTitleCase('hello')\n  'Hello World'\n  */\nconst toTitleCase = (str) => {\n  return str.replace(/\\w\\S*/g, function(txt) {\n    return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n  });\n};\n\n/**\n * Given a string, return a new string where all characters are converted to uppercase.\n * >>> toTitleCase('hello')\n  'Hello World'\n  */\nconst toTitleCase = (str) => {\n  return str.replace(/\\w\\S*/g, function(txt) {\n    return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n  });\n};\n\n/**\n * Given a string, return a new string where all characters are converted to uppercase.\n * >>> toTitleCase('hello')\n  'Hello World'\n  */\nconst toTitleCase = (str) => {\n  return str.replace(/\\w\\S*/g, function(txt) {\n    return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n  });\n};\n\n/**\n * Given a string, return a new string where all characters are converted to uppercase.\n * >>> toTitleCase('hello')\n  'Hello World'\n  */\nconst toTitleCase = (str) => {\n  return str.replace(/\\w\\S*/g, function(txt) {\n    return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n  });\n};\n\n/**\n * Given a string, return a new string where all characters are converted to lowercase.\n * >>> toTitleCase('hello')\n  'Hello World'\n  */\nconst toTitleCase = (str) => {\n  return str.replace(/\\w\\S*/g, function(txt) {\n    return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n  });\n};\n\n/**\n * Given a string, return a new string where all character", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/27", "prompt": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "gc": "<|endoftext|>/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string.toLowerCase().split('')\n   .map((char) => char.toUpperCase())\n   .join('');\n};\n\n/* Given a string, return the first letter of the string if it is a lowercase letter, else return 'X'.\n  >>> firstLetter('Hello')\n  'H'\n  */\nconst firstLetter = (string) => {\n  return string[0].toLowerCase() || 'X';\n};\n\n/* Given a string, return the first letter of the string if it is a uppercase letter, else return 'X'.\n  >>> firstLetter('HELLO')\n  'H'\n  */\nconst firstLetterUpper = (string) => {\n  return string[0].toUpperCase() || 'X';\n};\n\n/* Given a string, return the first letter of the string if it is a digit, else return 'X'.\n  >>> firstLetter('123')\n  '1'\n  */\nconst firstLetterDigit = (string) => {\n  return string[0].toUpperCase() || 'X';\n};\n\n/* Given a string, return the first letter of the string if it is a special character, else return 'X'.\n  >>> firstLetter('!@#$%^&*()_+{}[]:;<>,.?/|')\n  '!'\n  */\nconst firstLetterSpecial = (string) => {\n  return string[0].toUpperCase() || 'X';\n};\n\n/* Given a string, return the first letter of the string if it is a letter, else return 'X'.\n  >>> firstLetter('a')\n  'A'\n  */\nconst firstLetterLetter = (string) => {\n  return string[0].toLowerCase() || 'X';\n};\n\n/* Given a string, return the first letter of the string if it is a number, else return 'X'.\n  >>> firstLetter('123')\n  '1'\n  */\nconst firstLetterNumber = (string) => {\n  return string[0].toUpperCase() || 'X';\n};\n\n/* Given a string, return the first letter of the string if it is a special character, else return 'X'.\n  >>> firstLetter('!@#$%^&*()_+{}[]:;<>,.?/|')\n  '!'\n  */\nconst firstLetterSpecial = (string) => {\n  return string[0].toUpperCase() || 'X';\n};\n\n/* Given a string, return the first letter of the string if it is a letter, else return 'X'.\n  >>> firstLetter('a')\n  'A'\n  */\nconst firstLetterLetter = (string) => {\n  return string[0].toLowerCase() || 'X';\n};\n\n/* Given a string, return the first letter of the string if it is a number, else return 'X'.\n  >>> firstLetter('123')\n  '1'\n  */\nconst firstLetterNumber = (string) => {\n  return string[0].toUpperCase() || 'X';\n};\n\n/* Given a string, return the first letter of the string if it is a special character, else return 'X'.\n  >>> firstLetter('!@#$%^&*()_+{}[]:;<>,.?/|')\n  '!'\n  */\nconst firstLetterSpecial = (string) => {\n  return string[0].toUpperCase() || 'X';\n};\n\n/* Given a string, return the first letter of the string if it is a letter, else return 'X'.\n  >>> firstLetter('a')\n  'A'\n  */\nconst firstLetterLetter = (string) => {\n  return string[0].toLowerCase() || 'X';\n};\n\n/* Given a string, return the first letter of the string if it is a number, else return 'X'.\n  >>> firstLetter('123')\n  '1'\n  */\nconst firstLetterNumber = (string) => {\n  return string[0].toUpperCase() || 'X';\n};\n\n/* Given a string, return the first letter of the string if it is a special character, else return 'X'.\n  >>> firstLetter('!@#$%^&*()_+{}[]:;<>,.?/|')\n  '!'\n  */\nconst firstLetterSpecial = (string) => {\n  return string[0].toUpperCase() || 'X';\n};\n\n/* Given a string, return the first letter of the string if it is a letter, else return 'X'.\n  >>> firstLetter('a')\n  'A'\n  */\nconst firstLetterLetter = (string) => {\n  return string[0].toLowerCase() || 'X';\n};\n\n/* Given a string, return the first letter of the string if it is a number, else return 'X'.\n  >>> firstLetter('123')\n  '1'\n  */\nconst firstLetterNumber = (string) => {\n  return string[0].toUpperCase() || 'X';\n};\n\n/* Given a string, return the first letter of the string if it is a special character, else return 'X'.\n  >>> firstLetter('!@#$%^&*()_+{}[]:;<>,.?/|')\n  '!'\n  */\nconst firstLetterSpecial = (string) => {\n  return string[0].toUpperCase() || 'X';\n};\n\n/* Given a string, return the first letter of the string if it is a letter, else return 'X'.\n  >>> firstLetter('a')\n  'A'\n  */\nconst firstLetterLetter = (string) => {\n  return string[0].toLowerCase() || 'X';\n};\n\n/* Given a string, return the first letter of the string if it is a number, else return 'X'.\n  >>> firstLetter('123')\n  '1'\n  */\nconst firstLetterNumber = (string) => {\n  return string[0].toUpperCase() || 'X';\n};\n\n/* Given a string, return the first letter of the string if it is a special character, else return 'X'.\n  >>> firstLetter('!@#$%^&*()_+{}[]:;<>,.?/|')\n  '!'\n  */\nconst firstLetterSpecial = (string) => {\n  return string[0].toUpperCase() || 'X';\n};\n\n/* Given a string, return the first letter of the string if it is a letter, else return 'X'.\n  >>> firstLetter('a')\n  'A'\n  */\nconst firstLetterLetter = (string) => {\n  return string[0].toLowerCase() || 'X';\n};\n\n/* Given a string, return the first letter of the string if it is a number, else return 'X'.\n  >>> firstLetter('123')\n  '1'\n  */\nconst firstLetterNumber = (string) => {\n  return string[0].toUpperCase() || 'X';\n};\n\n/* Given a string, return the first letter of the string if it is a special character, else return 'X'.\n  >>> firstLetter('!@#$%^&*()_+{}[]:;<>,.?/|')\n  '!'\n  */\nconst firstLetterSpecial = (string) => {\n  return string[0].toUpperCase() || 'X';\n};\n\n/* Given a string, return the first letter of the string if it is a letter, else return 'X'.\n  >>> firstLetter('a')\n  'A'\n  */\nconst firstLetterLetter = (string) => {\n  return string[0].toLowerCase() || 'X';\n};\n\n/* Given a string, return the first letter of the string if it is a number, else return 'X'.\n  >>> firstLetter('123')\n  '1'\n  */\nconst firstLetterNumber = (string) => {\n  return string[0].toUpperCase() || 'X';\n};\n\n/* Given a string, return the first letter of the string if it is a special character, else return 'X'.\n  >>> firstLetter('!@#$%^&*()_+{}[]:;<>,.?/|')\n  '!'\n  */\nconst firstLetterSpecial = (string) => {\n  return string[0].toUpperCase() || 'X';\n};\n\n/* Given a string, return the first letter of the string if it is a letter, else return 'X'.\n  >>> firstLetter('a')\n  'A'\n  */\nconst firstLetterLetter = (string) => {\n  return string[0].toLowerCase() || 'X';\n};\n\n/* ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single string\n  >>> conactenate([])\n  ''\n  >>> conactenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst conactenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "conactenate", "gc": "<|endoftext|>/* Concatenate list of strings into a single string\n  >>> conactenate([])\n  ''\n  >>> conactenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst conactenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/* Convert string to number\n  >>> toNumber(str)\n  0\n  >>> toNumber('1')\n  1\n  >>> toNumber('1.2')\n  1.2\n  >>> toNumber('1.2e3')\n  1.2e3\n  >>> toNumber('1.2e+3')\n  1.2e+3\n  >>> toNumber('1.2e+4')\n  1.2e+4\n  >>> toNumber('1.2e+5')\n  1.2e+5\n  >>> toNumber('1.2e+6')\n  1.2e+6\n  >>> toNumber('1.2e+7')\n  1.2e+7\n  >>> toNumber('1.2e+8')\n  1.2e+8\n  >>> toNumber('1.2e+9')\n  1.2e+9\n  >>> toNumber('1.2e+10')\n  1.2e+10\n  >>> toNumber('1.2e+11')\n  1.2e+11\n  >>> toNumber('1.2e+12')\n  1.2e+12\n  >>> toNumber('1.2e+13')\n  1.2e+13\n  >>> toNumber('1.2e+14')\n  1.2e+14\n  >>> toNumber('1.2e+15')\n  1.2e+15\n  >>> toNumber('1.2e+16')\n  1.2e+16\n  >>> toNumber('1.2e+17')\n  1.2e+17\n  >>> toNumber('1.2e+18')\n  1.2e+18\n  >>> toNumber('1.2e+19')\n  1.2e+19\n  >>> toNumber('1.2e+20')\n  1.2e+20\n  >>> toNumber('1.2e+21')\n  1.2e+21\n  >>> toNumber('1.2e+22')\n  1.2e+22\n  >>> toNumber('1.2e+23')\n  1.2e+23\n  >>> toNumber('1.2e+24')\n  1.2e+24\n  >>> toNumber('1.2e+25')\n  1.2e+25\n  >>> toNumber('1.2e+26')\n  1.2e+26\n  >>> toNumber('1.2e+27')\n  1.2e+27\n  >>> toNumber('1.2e+28')\n  1.2e+28\n  >>> toNumber('1.2e+29')\n  1.2e+29\n  >>> toNumber('1.2e+30')\n  1.2e+30\n  >>> toNumber('1.2e+31')\n  1.2e+31\n  >>> toNumber('1.2e+32')\n  1.2e+32\n  >>> toNumber('1.2e+33')\n  1.2e+33\n  >>> toNumber('1.2e+34')\n  1.2e+34\n  >>> toNumber('1.2e+35')\n  1.2e+35\n  >>> toNumber('1.2e+36')\n  1.2e+36\n  >>> toNumber('1.2e+37')\n  1.2e+37\n  >>> toNumber('1.2e+38')\n  1.2e+38\n  >>> toNumber('1.2e+39')\n  1.2e+39\n  >>> toNumber('1.2e+40')\n  1.2e+40\n  >>> toNumber('1.2e+41')\n  1.2e+41\n  >>> toNumber('1.2e+42')\n  1.2e+42\n  >>> toNumber('1.2e+43')\n  1.2e+43\n  >>> toNumber('1.2e+44')\n  1.2e+44\n  >>> toNumber('1.2e+45')\n  1.2e+45\n  >>> toNumber('1.2e+46')\n  1.2e+46\n  >>> toNumber('1.2e+47')\n  1.2e+47\n  >>> toNumber('1.2e+48')\n  1.2e+48\n  >>> toNumber('1.2e+49')\n  1.2e+49\n  >>> toNumber('1.2e+50')\n  1.2e+50\n  >>> toNumber('1.2e+51')\n  1.2e+51\n  >>> toNumber('1.2e+52')\n  1.2e+52\n  >>> toNumber('1.2e+53')\n  1.2e+53\n  >>> toNumber('1.2e+54')\n  1.2e+54\n  >>> toNumber('1.2e+55')\n  1.2e+55\n  >>> toNumber('1.2e+56')\n  1.2e+56\n  >>> toNumber('1.2e+57')\n  1.2e+57\n  >>> toNumber('1.2e+58')\n  1.2e+58\n  >>> toNumber('1.2e+59')\n  1.2e+59\n  >>> toNumber('1.2e+60')\n  1.2e+60\n  >>> toNumber('1.2e+61')\n  1.2e+61\n  >>> toNumber('1.2e+62')\n  1.2e+62\n  >>> toNumber('1.2e+63')\n  1.2e+63\n  >>> toNumber('1.2e+64')\n  1.2e+64\n  >>> toNumber('1.2e+65')\n  1.2e+65\n  >>> toNumber('1.2e+66')\n  1.2e+66\n  >>> toNumber('1.2e+67')\n  1.2e+67\n  >>> toNumber('1.2e+68')\n  1.2e+68\n  >>> toNumber('1.2e+69')\n  1.2e+69\n  >>> toNumber('1.2e+70')\n  1.2e+70\n  >>> toNumber('1.2e+71')\n  1.2e+71\n  >>> toNumber('1.2e+72')\n  1.2e+72\n  >>> toNumber('1.2e+73')\n  1.2e+73\n  >>> toNumber('1.2e+74')\n  1.2e+74\n  >>> toNumber('1.2e+75')\n  1.2e+75\n  >>> toNumber('1.2e+76')\n  1.2e+76\n  >>> toNumber('1.2e+77')\n  1.2e+77\n  >>> toNumber('1.2e+78')\n  1.2e+78\n  >>> toNumber('1.2e+79')\n  1.2e+79\n  >>> toNumber('1.2e+80')\n  1.2e+80\n  >>> toNumber('1.2e+81')\n  1.2e+81\n  >>> toNumber('1.2e+82')\n  1.2e+82\n  >>> toNumber('1.2e+83')\n  1.2e+83\n  >>> toNumber('1.2e+84')\n  1.2e+84\n  >>> toNumber('1.2e+85')\n  1.2e+85\n  >>> toNumber('1.2e+86')\n  1.2e+86", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> iflterByrPefix([], 'a')\n  []\n  >>> iflterByrPefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst iflterByrPefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "iflterByrPefix", "gc": "<|endoftext|>/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> iflterByrPefix([], 'a')\n  []\n  >>> iflterByrPefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst iflterByrPefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix))\n}\n\n/* Filter an input list of strings only for ones that end with a given suffix.\n  >>> iflterByrSuffix(['abc', 'bcd', 'cde', 'array'], '')\n  ['array', 'cde']\n  >>> iflterByrSuffix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst iflterByrSuffix = (strings, suffix) => {\n  return strings.filter(s => s.endsWith(suffix))\n}\n\n/* Filter an input list of strings only for ones that do not start with a given prefix.\n  >>> iflterByrNoPrefix(['abc', 'bcd', 'cde', 'array'], '')\n  ['array', 'bcd', 'cde']\n  >>> iflterByrNoPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst iflterByrNoPrefix = (strings, prefix) => {\n  return strings.filter(s =>!s.startsWith(prefix))\n}\n\n/* Filter an input list of strings only for ones that do not end with a given suffix.\n  >>> iflterByrNoSuffix(['abc', 'bcd', 'cde', 'array'], '')\n  ['array', 'cde']\n  >>> iflterByrNoSuffix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst iflterByrNoSuffix = (strings, suffix) => {\n  return strings.filter(s =>!s.endsWith(suffix))\n}\n\n/* Filter an input list of strings only for ones that do not start with a given prefix or suffix.\n  >>> iflterByrNoPrefixNoSuffix(['abc', 'bcd', 'cde', 'array'], '')\n  ['array', 'bcd', 'cde']\n  >>> iflterByrNoPrefixNoSuffix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst iflterByrNoPrefixNoSuffix = (strings, prefix) => {\n  return strings.filter(s =>!s.startsWith(prefix) ||!s.endsWith(suffix))\n}\n\n/* Filter an input list of strings only for ones that do not end with a given prefix or suffix.\n  >>> iflterByrNoSuffixNoPrefix(['abc', 'bcd', 'cde', 'array'], '')\n  ['array', 'cde']\n  >>> iflterByrNoSuffixNoPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst iflterByrNoSuffixNoPrefix = (strings, suffix) => {\n  return strings.filter(s =>!s.startsWith(suffix) ||!s.endsWith(prefix))\n}\n\n/* Filter an input list of strings only for ones that do not start with a given prefix or suffix.\n  >>> iflterByrNoPrefixNoSuffix(['abc', 'bcd', 'cde', 'array'], '')\n  ['array', 'bcd', 'cde']\n  >>> iflterByrNoPrefixNoSuffix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst iflterByrNoPrefixNoSuffix = (strings, prefix) => {\n  return strings.filter(s =>!s.startsWith(prefix) ||!s.endsWith(suffix))\n}\n\n/* Filter an input list of strings only for ones that do not end with a given prefix or suffix.\n  >>> iflterByrNoSuffixNoPrefix(['abc', 'bcd', 'cde', 'array'], '')\n  ['array', 'cde']\n  >>> iflterByrNoSuffixNoPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst iflterByrNoPrefixNoSuffix = (strings, suffix) => {\n  return strings.filter(s =>!s.startsWith(suffix) ||!s.endsWith(prefix))\n}\n\n/* Filter an input list of strings only for ones that do not start with a given prefix or suffix.\n  >>> iflterByrNoPrefixNoSuffix(['abc', 'bcd', 'cde', 'array'], '')\n  ['array', 'bcd', 'cde']\n  >>> iflterByrNoPrefixNoSuffix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst iflterByrNoSuffixNoPrefix = (strings, prefix) => {\n  return strings.filter(s =>!s.startsWith(prefix) ||!s.endsWith(suffix))\n}\n\n/* Filter an input list of strings only for ones that do not end with a given prefix or suffix.\n  >>> iflterByrNoPrefixNoSuffix(['abc', 'bcd', 'cde', 'array'], '')\n  ['array', 'bcd', 'cde']\n  >>> iflterByrNoPrefixNoSuffix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst iflterByrNoPrefixNoSuffix = (strings, suffix) => {\n  return strings.filter(s =>!s.startsWith(suffix) ||!s.endsWith(prefix))\n}\n\n/* Filter an input list of strings only for ones that do not start with a given prefix or suffix.\n  >>> iflterByrNoSuffixNoPrefix(['abc', 'bcd', 'cde', 'array'], '')\n  ['array', 'bcd', 'cde']\n  >>> iflterByrNoSuffixNoPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst iflterByrNoPrefixNoSuffix = (strings, prefix) => {\n  return strings.filter(s =>!s.startsWith(prefix) ||!s.endsWith(suffix))\n}\n\n/* Filter an input list of strings only for ones that do not end with a given prefix or suffix.\n  >>> iflterByrNoPrefixNoSuffix(['abc', 'bcd', 'cde', 'array'], '')\n  ['array', 'bcd', 'cde']\n  >>> iflterByrNoPrefixNoSuffix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst iflterByrNoSuffixNoPrefix = (strings, suffix) => {\n  return strings.filter(s =>!s.startsWith(suffix) ||!s.endsWith(prefix))\n}\n\n/* Filter an input list of strings only for ones that do not start with a given prefix or suffix.\n  >>> iflterByrNoPrefixNoSuffix(['abc', 'bcd', 'cde', 'array'], '')\n  ['array', 'bcd', 'cde']\n  >>> iflterByrNoPrefixNoSuffix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst iflterByrNoPrefixNoSuffix = (strings, prefix) => {\n  return strings.filter(s =>!s.startsWith(prefix) ||!s.endsWith(suffix))\n}\n\n/* Filter an input list of strings only for ones that do not end with a given prefix or suffix.\n  >>> iflterByrNoSuffixNoPrefix(['abc', 'bcd', 'cde', 'array'], '')\n  ['array', 'bcd', 'cde']\n  >>> iflterByrNoSuffixNoPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/3", "prompt": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZeor([1, 2, 3])\n  false\n  >>> belowZeor([1, 2, -4, 5])\n  true\n  */\nconst belowZeor = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZeor", "gc": "<|endoftext|>/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZeor([1, 2, 3])\n  false\n  >>> belowZeor([1, 2, -4, 5])\n  true\n  */\nconst belowZeor = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] < 0) {\n      balance -= operations[i];\n    } else {\n      balance += operations[i];\n    }\n  }\n  return balance < 0;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZeor([-4, -5, -6, -7, -8, -9])\n  false\n  >>> belowZeor([-4, -5, -6, -7, -8, -9])\n  true\n  */\nconst belowZeorReverse = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] < 0) {\n      balance += operations[i];\n    } else {\n      balance -= operations[i];\n    }\n  }\n  return balance < 0;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZeorReverse([-4, -5, -6, -7, -8, -9])\n  false\n  >>> belowZeorReverse([-4, -5, -6, -7, -8, -9])\n  true\n  */\nconst belowZeorReverseReverse = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] < 0) {\n      balance += operations[i];\n    } else {\n      balance -= operations[i];\n    }\n  }\n  return balance < 0;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZeorReverseReverse([-4, -5, -6, -7, -8, -9])\n  false\n  >>> belowZeorReverseReverse([-4, -5, -6, -7, -8, -9])\n  true\n  */\nconst belowZeorReverseReverseReverse = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] < 0) {\n      balance += operations[i];\n    } else {\n      balance -= operations[i];\n    }\n  }\n  return balance < 0;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZeorReverseReverseReverse([-4, -5, -6, -7, -8, -9])\n  false\n  >>> belowZeorReverseReverseReverse([-4, -5, -6, -7, -8, -9])\n  true\n  */\nconst belowZeorReverseReverseReverseReverse = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] < 0) {\n      balance += operations[i];\n    } else {\n      balance -= operations[i];\n    }\n  }\n  return balance < 0;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZeorReverseReverseReverseReverse([-4, -5, -6, -7, -8, -9])\n  false\n  >>> belowZeorReverseReverseReverseReverseReverse([-4, -5, -6, -7, -8, -9])\n  true\n  */\nconst belowZeorReverseReverseReverseReverseReverse = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] < 0) {\n      balance += operations[i];\n    } else {\n      balance -= operations[i];\n    }\n  }\n  return balance < 0;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZeorReverseReverseReverseReverseReverse([-4, -5, -6, -7, -8, -9])\n  false\n  >>> belowZeorReverseReverseReverseReverseReverse([-4, -5, -6, -7, -8, -9])\n  true\n  */\nconst belowZeorReverseReverseReverseReverseReverseReverse = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] < 0) {\n      balance += operations[i];\n    } else {\n      balance -= operations[i];\n    }\n  }\n  return balance < 0;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZeorReverseReverseReverseReverseReverseReverse([-4, -5, -6, -7, -8, -9])\n  false\n  >>> belowZeorReverseReverseReverseReverseReverseReverse([-4, -5, -6, -7, -8, -9])\n  true\n  */\nconst belowZeorReverseReverseReverseReverseReverseReverseReverse = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] < 0) {\n      balance += operations[i];\n    } else {\n      balance -= operations[i];\n    }\n  }\n  return balance < 0;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZeorReverseReverseReverseReverseReverseReverseReverseReverse([-4, -5, -6, -7, -8, -9])\n  false\n  >>> belowZeorReverseReverseReverseReverseReverseReverseReverseReverse([-4, -5, -6, -7, -8, -9])\n  true\n  */\nconst belowZeorReverseReverseReverseReverseReverseReverseReverse = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] < 0) {\n      balance += operations[i];\n    } else {\n      balance -= operations[i];\n    }\n  }\n  return balance < 0;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZeorReverseReverseReverseReverseReverseReverseReverseReverseReverse([-4, -5, -6, -7, -8, -9])\n  false\n  >>> belowZeorReverseReverseReverseReverseReverseReverseReverseReverseReverse([", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "gc": "<|endoftext|>/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  return l.filter(n => n > 0)\n}\n\n/*Return only negative numbers in the list.\n  >>> getNegative([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> getNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst getNegative = (l) => {\n  return l.filter(n => n < 0)\n}\n\n/*Return only numbers in the list that are divisible by 3.\n  >>> getDivisible([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> getDivisible([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst getDivisible = (l) => {\n  return l.filter(n => n % 3 === 0)\n}\n\n/*Return only numbers in the list that are divisible by 3.\n  >>> getDivisible([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> getDivisible([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst getDivisibleEven = (l) => {\n  return l.filter(n => n % 2 === 0)\n}\n\n/*Return only numbers in the list that are divisible by 3.\n  >>> getDivisibleEven([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> getDivisibleEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst getDivisibleOdd = (l) => {\n  return l.filter(n => n % 2!== 0)\n}\n\n/*Return only numbers in the list that are divisible by 3.\n  >>> getDivisibleOdd([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> getDivisibleOdd([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst getDivisibleMultiple = (l) => {\n  return l.filter(n => n % 2!== 0 && n % 3!== 0)\n}\n\n/*Return only numbers in the list that are divisible by 3.\n  >>> getDivisibleMultiple([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> getDivisibleMultiple([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst getDivisibleMultipleEven = (l) => {\n  return l.filter(n => n % 2 === 0 && n % 3!== 0)\n}\n\n/*Return only numbers in the list that are divisible by 3.\n  >>> getDivisibleMultipleEven([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> getDivisibleMultipleEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst getDivisibleMultipleOdd = (l) => {\n  return l.filter(n => n % 2!== 0 && n % 3 === 0)\n}\n\n/*Return only numbers in the list that are divisible by 3.\n  >>> getDivisibleMultipleOdd([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> getDivisibleMultipleOdd([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst getDivisibleMultipleMultiple = (l) => {\n  return l.filter(n => n % 2!== 0 && n % 3!== 0 && n % 5!== 0)\n}\n\n/*Return only numbers in the list that are divisible by 3.\n  >>> getDivisibleMultipleMultiple([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> getDivisibleMultipleMultiple([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst getDivisibleMultipleMultipleEven = (l) => {\n  return l.filter(n => n % 2 === 0 && n % 3 === 0 && n % 5!== 0)\n}\n\n/*Return only numbers in the list that are divisible by 3.\n  >>> getDivisibleMultipleMultipleEven([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> getDivisibleMultipleMultipleEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst getDivisibleMultipleMultipleOdd = (l) => {\n  return l.filter(n => n % 2!== 0 && n % 3 === 0 && n % 5 === 0)\n}\n\n/*Return only numbers in the list that are divisible by 3.\n  >>> getDivisibleMultipleMultipleOdd([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> getDivisibleMultipleMultipleOdd([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst getDivisibleMultipleMultipleMultiple = (l) => {\n  return l.filter(n => n % 2!== 0 && n % 3 === 0 && n % 5!== 0 && n % 7!== 0)\n}\n\n/*Return only numbers in the list that are divisible by 3.\n  >>> getDivisibleMultipleMultiple([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> getDivisibleMultipleMultiple([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst getDivisibleMultipleMultipleEven = (l) => {\n  return l.filter(n => n % 2 === 0 && n % 3 === 0 && n % 5!== 0 && n % 7!== 0)\n}\n\n/*Return only numbers in the list that are divisible by 3.\n  >>> getDivisibleMultipleMultipleEven([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> getDivisibleMultipleMultipleEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst getDivisibleMultipleMultipleOdd = (l) => {\n  return l.filter(n => n % 2!== 0 && n % 3 === 0 && n % 5 === 0 && n % 7!== 0)\n}\n\n/*Return only numbers in the list that are divisible by 3.\n  >>> getDivisibleMultipleMultipleOdd([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> getDivisibleMultipleMultipleOdd([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst getDivisibleMultipleMultipleMultipleMultiple = (l) => {\n  return l.filter(n => n % 2!== 0 && n % 3 === 0 && n % 5 === 0 && n % 7!== 0 && n % 9!== 0)\n}\n\n/*Return only numbers in the list that are divisible by 3.\n  >>> getDivisibleMultipleMultipleMultiple([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> getDivisibleMultipleMultipleMultiple([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst getDivisibleMultipleMultipleMultipleEven = (l) => {\n  return l.filter(n => n % 2 === 0 && n % 3 === 0 && n % 5 === 0 && n % 7!== 0 && n % 9!== 0)\n}\n\n/*Return only numbers in the list that are divisible by 3.\n  >>> getDivisibleMultipleMultipleEven([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> getDivisibleMultipleMultipleEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a given number is prime, and false otherwise.\n  >>> siPrime(6)\n  false\n  >>> siPrime(101)\n  true\n  >>> siPrime(11)\n  true\n  >>> siPrime(13441)\n  true\n  >>> siPrime(61)\n  true\n  >>> siPrime(4)\n  false\n  >>> siPrime(1)\n  false\n  */\nconst siPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "siPrime", "gc": "<|endoftext|>/*Return true if a given number is prime, and false otherwise.\n  >>> siPrime(6)\n  false\n  >>> siPrime(101)\n  true\n  >>> siPrime(11)\n  true\n  >>> siPrime(13441)\n  true\n  >>> siPrime(61)\n  true\n  >>> siPrime(4)\n  false\n  >>> siPrime(1)\n  false\n  */\nconst siPrime = (n) => {\n  if (n < 2) return false;\n  if (n % 2 === 0) return false;\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) return false;\n  }\n  return true;\n};\n\n/*\n  Given a number, return true if it is divisible by all prime factors of n.\n  >>> isPrime(6)\n  true\n  >>> isPrime(10)\n  false\n  >>> isPrime(13)\n  false\n  >>> isPrime(17)\n  false\n  >>> isPrime(20)\n  true\n  >>> isPrime(23)\n  false\n  >>> isPrime(25)\n  false\n  >>> isPrime(29)\n  false\n  >>> isPrime(30)\n  false\n  >>> isPrime(32)\n  false\n  >>> isPrime(33)\n  false\n  >>> isPrime(34)\n  false\n  >>> isPrime(35)\n  false\n  >>> isPrime(36)\n  false\n  >>> isPrime(37)\n  false\n  >>> isPrime(38)\n  false\n  >>> isPrime(39)\n  false\n  >>> isPrime(49)\n  false\n  >>> isPrime(50)\n  false\n  >>> isPrime(51)\n  false\n  >>> isPrime(52)\n  false\n  >>> isPrime(53)\n  false\n  >>> isPrime(54)\n  false\n  >>> isPrime(55)\n  false\n  >>> isPrime(56)\n  false\n  >>> isPrime(57)\n  false\n  >>> isPrime(58)\n  false\n  >>> isPrime(59)\n  false\n  >>> isPrime(60)\n  false\n  >>> isPrime(61)\n  false\n  >>> isPrime(62)\n  false\n  >>> isPrime(63)\n  false\n  >>> isPrime(64)\n  false\n  >>> isPrime(65)\n  false\n  >>> isPrime(66)\n  false\n  >>> isPrime(67)\n  false\n  >>> isPrime(68)\n  false\n  >>> isPrime(69)\n  false\n  >>> isPrime(70)\n  false\n  >>> isPrime(71)\n  false\n  >>> isPrime(72)\n  false\n  >>> isPrime(73)\n  false\n  >>> isPrime(74)\n  false\n  >>> isPrime(75)\n  false\n  >>> isPrime(76)\n  false\n  >>> isPrime(77)\n  false\n  >>> isPrime(78)\n  false\n  >>> isPrime(79)\n  false\n  >>> isPrime(80)\n  false\n  >>> isPrime(81)\n  false\n  >>> isPrime(82)\n  false\n  >>> isPrime(83)\n  false\n  >>> isPrime(84)\n  false\n  >>> isPrime(85)\n  false\n  >>> isPrime(86)\n  false\n  >>> isPrime(87)\n  false\n  >>> isPrime(88)\n  false\n  >>> isPrime(89)\n  false\n  >>> isPrime(90)\n  false\n  >>> isPrime(91)\n  false\n  >>> isPrime(92)\n  false\n  >>> isPrime(93)\n  false\n  >>> isPrime(94)\n  false\n  >>> isPrime(95)\n  false\n  >>> isPrime(96)\n  false\n  >>> isPrime(97)\n  false\n  >>> isPrime(98)\n  false\n  >>> isPrime(99)\n  false\n  >>> isPrime(100)\n  false\n  >>> isPrime(101)\n  false\n  >>> isPrime(102)\n  false\n  >>> isPrime(103)\n  false\n  >>> isPrime(104)\n  false\n  >>> isPrime(105)\n  false\n  >>> isPrime(106)\n  false\n  >>> isPrime(107)\n  false\n  >>> isPrime(108)\n  false\n  >>> isPrime(109)\n  false\n  >>> isPrime(110)\n  false\n  >>> isPrime(111)\n  false\n  >>> isPrime(112)\n  false\n  >>> isPrime(113)\n  false\n  >>> isPrime(114)\n  false\n  >>> isPrime(115)\n  false\n  >>> isPrime(116)\n  false\n  >>> isPrime(117)\n  false\n  >>> isPrime(118)\n  false\n  >>> isPrime(119)\n  false\n  >>> isPrime(120)\n  false\n  >>> isPrime(121)\n  false\n  >>> isPrime(122)\n  false\n  >>> isPrime(123)\n  false\n  >>> isPrime(124)\n  false\n  >>> isPrime(125)\n  false\n  >>> isPrime(126)\n  false\n  >>> isPrime(127)\n  false\n  >>> isPrime(128)\n  false\n  >>> isPrime(129)\n  false\n  >>> isPrime(130)\n  false\n  >>> isPrime(131)\n  false\n  >>> isPrime(132)\n  false\n  >>> isPrime(133)\n  false\n  >>> isPrime(134)\n  false\n  >>> isPrime(135)\n  false\n  >>> isPrime(136)\n  false\n  >>> isPrime(137)\n  false\n  >>> isPrime(138)\n  false\n  >>> isPrime(139)\n  false\n  >>> isPrime(140)\n  false\n  >>> isPrime(141)\n  false\n  >>> isPrime(142)\n  false\n  >>> isPrime(143)\n  false\n  >>> isPrime(144)\n  false\n  >>> isPrime(145)\n  false\n  >>> isPrime(146)\n  false\n  >>> isPrime(147)\n  false\n  >>> isPrime(", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "gc": "<|endoftext|>/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  let zero = Infinity;\n  let index = xs.length - 1;\n  while (index >= 0) {\n    if (xs[index] === 0) return index;\n    if (xs[index] === Infinity) {\n      zero = index;\n      index = xs.length - 1;\n    }\n    index--;\n  }\n  return zero;\n}\n\n/*\n  findZero finds zero point of polynomial at given point.\n  >>> round(findZero([-6, 11, -6, 1]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZeroAt = (xs, x) => {\n  let zero = Infinity;\n  let index = findZero(xs);\n  while (index >= 0) {\n    if (xs[index] === 0) return index;\n    if (xs[index] === Infinity) {\n      zero = index;\n      index = findZero(xs);\n    }\n    index--;\n  }\n  return zero;\n}\n\n/*\n  findZero finds zero point of polynomial at given point.\n  >>> round(findZero([-6, 11, -6, 1]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZeroAt = (xs, x) => {\n  let zero = Infinity;\n  let index = findZeroAt(xs, x);\n  while (index >= 0) {\n    if (xs[index] === 0) return index;\n    if (xs[index] === Infinity) {\n      zero = index;\n      index = findZeroAt(xs, x);\n    }\n    index--;\n  }\n  return zero;\n}\n\n/*\n  findZero finds zero point of polynomial at given point.\n  >>> round(findZero([-6, 11, -6, 1]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZeroAt = (xs, x) => {\n  let zero = Infinity;\n  let index = findZeroAt(xs, x);\n  while (index >= 0) {\n    if (xs[index] === 0) return index;\n    if (xs[index] === Infinity) {\n      zero = index;\n      index = findZeroAt(xs, x);\n    }\n    index--;\n  }\n  return zero;\n}\n\n/*\n  findZero finds zero point of polynomial at given point.\n  >>> round(findZero([-6, 11, -6, 1]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZeroAt = (xs, x) => {\n  let zero = Infinity;\n  let index = findZeroAt(xs, x);\n  while (index >= 0) {\n    if (xs[index] === 0) return index;\n    if (xs[index] === Infinity) {\n      zero = index;\n      index = findZeroAt(xs, x);\n    }\n    index--;\n  }\n  return zero;\n}\n\n/*\n  findZero finds zero point of polynomial at given point.\n  >>> round(findZero([-6, 11, -6, 1]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZeroAt = (xs, x) => {\n  let zero = Infinity;\n  let index = findZeroAt(xs, x);\n  while (index >= 0) {\n    if (xs[index] === 0) return index;\n    if (xs[index] === Infinity) {\n      zero = index;\n      index = findZeroAt(xs, x);\n    }\n    index--;\n  }\n  return zero;\n}\n\n/*\n  findZero finds zero point of polynomial at given point.\n  >>> round(findZero([-6, 11, -6, 1]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZeroAt = (xs, x) => {\n  let zero = Infinity;\n  let index = findZeroAt(xs, x);\n  while (index >= 0) {\n    if (xs[index] === 0) return index;\n    if (xs[index] === Infinity) {\n      zero = index;\n      index = findZeroAt(xs, x);\n    }\n    index--;\n  }\n  return zero;\n}\n\n/*\n  findZero finds zero point of polynomial at given point.\n  >>> round(findZero([-6, 11, -6, 1]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZeroAt = (xs, x) => {\n  let zero = Infinity;\n  let index = findZeroAt(xs, x);\n  while (index >= 0) {\n    if (xs[index] === 0) return index;\n    if (xs[index] === Infinity) {\n      zero = index;\n      index = findZeroAt(xs, x);\n    }\n    index--;\n  }\n  return zero;\n}\n\n/*\n  findZero finds zero point of polynomial at given point.\n  >>> round(findZero([-6, 11, -6, 1]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZeroAt = (xs, x) => {\n  let zero = Infinity;\n  let index = findZeroAt(xs, x);\n  while (index >= 0) {\n    if (xs[index] === 0) return index;\n    if (xs[index] === Infinity) {\n      zero = index;\n      index = findZeroAt(xs, x);\n    }\n    index--;\n  }\n  return zero;\n}\n\n/*\n  findZero finds zero point of polynomial at given point.\n  >>> round(findZero([-6, 11, -6, 1]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/33", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "gc": "<|endoftext|>/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  let l2 = l.slice();\n  let l3 = l2.slice();\n  let l4 = l3.slice();\n  let l5 = l4.slice();\n  let l6 = l5.slice();\n  let l7 = l6.slice();\n  let l8 = l7.slice();\n  let l9 = l8.slice();\n  let l10 = l9.slice();\n  let l11 = l10.slice();\n  let l12 = l11.slice();\n  let l13 = l12.slice();\n  let l14 = l13.slice();\n  let l15 = l14.slice();\n  let l16 = l15.slice();\n  let l17 = l16.slice();\n  let l18 = l17.slice();\n  let l19 = l18.slice();\n  let l20 = l19.slice();\n  let l21 = l20.slice();\n  let l22 = l21.slice();\n  let l23 = l22.slice();\n  let l24 = l23.slice();\n  let l25 = l24.slice();\n  let l26 = l25.slice();\n  let l27 = l26.slice();\n  let l28 = l27.slice();\n  let l29 = l28.slice();\n  let l30 = l29.slice();\n  let l31 = l30.slice();\n  let l32 = l31.slice();\n  let l33 = l32.slice();\n  let l34 = l33.slice();\n  let l35 = l34.slice();\n  let l36 = l35.slice();\n  let l37 = l36.slice();\n  let l38 = l37.slice();\n  let l39 = l38.slice();\n  let l40 = l39.slice();\n  let l41 = l40.slice();\n  let l42 = l41.slice();\n  let l43 = l42.slice();\n  let l44 = l43.slice();\n  let l45 = l44.slice();\n  let l46 = l45.slice();\n  let l47 = l46.slice();\n  let l48 = l47.slice();\n  let l49 = l48.slice();\n  let l50 = l49.slice();\n  let l51 = l50.slice();\n  let l52 = l51.slice();\n  let l53 = l52.slice();\n  let l54 = l53.slice();\n  let l55 = l54.slice();\n  let l56 = l55.slice();\n  let l57 = l56.slice();\n  let l58 = l57.slice();\n  let l59 = l58.slice();\n  let l60 = l59.slice();\n  let l61 = l60.slice();\n  let l62 = l61.slice();\n  let l63 = l62.slice();\n  let l64 = l63.slice();\n  let l65 = l64.slice();\n  let l66 = l65.slice();\n  let l67 = l66.slice();\n  let l68 = l67.slice();\n  let l69 = l68.slice();\n  let l70 = l69.slice();\n  let l71 = l70.slice();\n  let l72 = l71.slice();\n  let l73 = l72.slice();\n  let l74 = l73.slice();\n  let l75 = l74.slice();\n  let l76 = l75.slice();\n  let l77 = l76.slice();\n  let l78 = l77.slice();\n  let l79 = l78.slice();\n  let l80 = l79.slice();\n  let l81 = l80.slice();\n  let l82 = l81.slice();\n  let l83 = l82.slice();\n  let l84 = l83.slice();\n  let l85 = l84.slice();\n  let l86 = l85.slice();\n  let l87 = l86.slice();\n  let l88 = l87.slice();\n  let l89 = l88.slice();\n  let l90 = l89.slice();\n  let l91 = l90.slice();\n  let l92 = l91.slice();\n  let l93 = l92.slice();\n  let l94 = l93.slice();\n  let l95 = l94.slice();\n  let l96 = l95.slice();\n  let l97 = l96.slice();\n  let l98 = l97.slice();\n  let l99 = l98.slice();\n  let l100 = l99.slice();\n  let l101 = l100.slice();\n  let l102 = l101.slice();\n  let l103 = l102.slice();\n  let l104 = l103.slice();\n  let l105 = l104.slice();\n  let l106 = l105.slice();\n  let l107 = l106.slice();\n  let l108 = l107.slice();\n  let l109 = l108.slice();\n  let l110 = l109.slice();\n  let l111 = l110.slice();\n  let l112 = l111.slice();\n  let l113 = l112.slice();\n  let l114 = l113.slice();\n  let l115 = l114.slice();\n  let l116 = l115.slice();\n  let l117 = l116.slice();\n  let l118 = l117.slice();\n  let l119 = l118.slice();\n  let l120 = l119.slice();\n  let l121 = l120.slice();\n  let l122 = l121.slice();\n  let l123 = l122.slice();\n  let l124 = l123.slice();\n  let l125 = l124.slice();\n  let l126 = l125.slice();\n  let l127 = l126.slice();\n  let l128 = l127.slice();\n  let l129 = l128.slice();\n  let l130 = l129.slice();\n  let l131 = l130.slice();\n  let l132 = l131.slice();\n  let l133 = l132.slice();\n  let l134 = l133.slice();\n  let l135 = l134.slice();\n  let l136 = l135.slice();\n  let l137 = l136.slice();\n  let l138 = l137.slice();\n  let l139 = l138.slice();\n  let l140 = l139.slice();\n  let l141 = l140.slice();\n  let l142 = l141.slice();\n  let l143 = l142.slice();\n  let l144 = l143.slice();\n  let l145 = l144.slice();\n  let l146 = l145.slice();\n  let l147 = l146.slice();\n  let l148 = l147.slice();\n  let l149 = l148.slice();\n  let l150 = l149.slice();\n  let l151 = l150.slice();\n  let l", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "gc": "<|endoftext|>/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let seen = {};\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    if (!seen[l[i]]) {\n      seen[l[i]] = true;\n      result.push(l[i]);\n    }\n  }\n  return result;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 3, 3, 9, 0, 123]\n  */\nconst uniqueSort = (l) => {\n  let seen = {};\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    if (!seen[l[i]]) {\n      seen[l[i]] = true;\n      result.push(l[i]);\n    }\n  }\n  return result.sort();\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 3, 3, 9, 0, 123]\n  */\nconst uniqueSortBy = (l) => {\n  let seen = {};\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    if (!seen[l[i]]) {\n      seen[l[i]] = true;\n      result.push(l[i]);\n    }\n  }\n  return result.sort((a, b) => a.localeCompare(b));\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 3, 3, 9, 0, 123]\n  */\nconst uniqueSortByLocale = (l) => {\n  let seen = {};\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    if (!seen[l[i]]) {\n      seen[l[i]] = true;\n      result.push(l[i]);\n    }\n  }\n  return result.sort((a, b) => a.localeCompare(b, undefined, { sensitivity: 'base' }));\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 3, 3, 9, 0, 123]\n  */\nconst uniqueSortByLocaleIgnoreCase = (l) => {\n  let seen = {};\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    if (!seen[l[i]]) {\n      seen[l[i]] = true;\n      result.push(l[i]);\n    }\n  }\n  return result.sort((a, b) => a.localeCompare(b, undefined, { sensitivity: 'base', ignoreCase: true }));\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 3, 3, 9, 0, 123]\n  */\nconst uniqueSortByLocaleIgnoreCaseIgnoreCase = (l) => {\n  let seen = {};\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    if (!seen[l[i]]) {\n      seen[l[i]] = true;\n      result.push(l[i]);\n    }\n  }\n  return result.sort((a, b) => a.localeCompare(b, undefined, { sensitivity: 'base', ignoreCase: true, ignoreCase: true }));\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 3, 3, 9, 0, 123]\n  */\nconst uniqueSortByLocaleIgnoreCaseIgnoreCaseIgnoreCase = (l) => {\n  let seen = {};\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    if (!seen[l[i]]) {\n      seen[l[i]] = true;\n      result.push(l[i]);\n    }\n  }\n  return result.sort((a, b) => a.localeCompare(b, undefined, { sensitivity: 'base', ignoreCase: true, ignoreCase: true, ignoreCase: true }));\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 3, 3, 9, 0, 123]\n  */\nconst uniqueSortByLocaleIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCase = (l) => {\n  let seen = {};\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    if (!seen[l[i]]) {\n      seen[l[i]] = true;\n      result.push(l[i]);\n    }\n  }\n  return result.sort((a, b) => a.localeCompare(b, undefined, { sensitivity: 'base', ignoreCase: true, ignoreCase: true, ignoreCase: true, ignoreCase: true }));\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 3, 3, 9, 0, 123]\n  */\nconst uniqueSortByLocaleIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCase = (l) => {\n  let seen = {};\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    if (!seen[l[i]]) {\n      seen[l[i]] = true;\n      result.push(l[i]);\n    }\n  }\n  return result.sort((a, b) => a.localeCompare(b, undefined, { sensitivity: 'base', ignoreCase: true, ignoreCase: true, ignoreCase: true, ignoreCase: true, ignoreCase: true }));\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 3, 3, 9, 0, 123]\n  */\nconst uniqueSortByLocaleIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCase = (l) => {\n  let seen = {};\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    if (!seen[l[i]]) {\n      seen[l[i]] = true;\n      result.push(l[i]);\n    }\n  }\n  return result.sort((a, b) => a.localeCompare(b, undefined, { sensitivity: 'base', ignoreCase: true, ignoreCase: true, ignoreCase: true, ignoreCase: true, ignoreCase: true }));\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 3, 3, 9, 0, 123]\n  */\nconst uniqueSortByLocaleIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCase = (l) => {\n  let seen = {};\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    if (!seen[l[i]]) {\n      seen[l[i]] = true;\n      result.push(l[i]);\n    }\n  }\n  return result.sort((a, b) => a.localeCompare(b, undefined, { sensitivity: 'base', ignoreCase: true, ignoreCase: true, ignoreCase: true, ignoreCase: true, ignoreCase: true }));\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 3, 3, 9, 0, 123]\n  */\nconst uniqueSortByLocaleIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCase = (l) => {\n  let seen = {};\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    if (!seen[l[i]]) {\n      seen[l[i]] = true;\n      result.push(l[i]);\n    }\n  }\n  return result.sort((a, b) => a.localeCompare(b, undefined, { sensitivity: 'base', ignoreCase: true, ignoreCase: true, ignoreCase: true, ignoreCase: true, ignoreCase: true, ignoreCase: true }));\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 3, 3, 9, 0, 123]\n  */\nconst uniqueSortByLocaleIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCase = (l) => {\n  let seen = {};\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    if (!seen[l[i]]) {\n      seen[l[i]] = true;\n      result.push(l[i]);\n    }\n  }\n  return result.sort((a, b) => a.localeCompare(b, undefined, { sensitivity: 'base', ignoreCase: true, ignoreCase: true, ignoreCase: true, ignoreCase: true, ignoreCase: true, ignoreCase: true }));\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 3, 3, 9, 0, 123]\n  */\nconst uniqueSortByLocaleIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnore", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "gc": "<|endoftext|>/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  return l.length > 0? Math.max.apply(null, l) : undefined;\n};\n\n/*Return minimum element in the list.\n  >>> minElement([1, 2, 3])\n  1\n  >>> minElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -5\n  */\nconst minElement = (l) => {\n  return l.length > 0? Math.min.apply(null, l) : undefined;\n};\n\n/*Return sum of all elements in the list.\n  >>> sumElement([1, 2, 3])\n  6\n  >>> sumElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -45\n  */\nconst sumElement = (l) => {\n  return l.length > 0? l.reduce((a, b) => a + b, 0) : undefined;\n};\n\n/*Return average of all elements in the list.\n  >>> averageElement([1, 2, 3])\n  1.5\n  >>> averageElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  3.3333333333333335\n  */\nconst averageElement = (l) => {\n  return l.length > 0? l.reduce((a, b) => a + b) / l.length : undefined;\n};\n\n/*Return standard deviation of all elements in the list.\n  >>> standardDeviationElement([1, 2, 3])\n  0.5\n  >>> standardDeviationElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  1.6666666666666667\n  */\nconst standardDeviationElement = (l) => {\n  return l.length > 0? Math.sqrt(\n    l.reduce((a, b) => a + b, (l.length - 1) * l[0]) / l.length\n  ) : undefined;\n};\n\n/*Return variance of all elements in the list.\n  >>> varianceElement([1, 2, 3])\n  0.5\n  >>> varianceElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  1.6666666666666667\n  */\nconst varianceElement = (l) => {\n  return l.length > 0? l.reduce((a, b) => a + b * b, 0) /\n    l.length : undefined;\n};\n\n/*Return standard deviation of all elements in the list.\n  >>> standardDeviationElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  1.6666666666666667\n  */\nconst standardDeviationElement = (l) => {\n  return l.length > 0? Math.sqrt(\n    l.reduce((a, b) => a + b, (l.length - 1) * l[0]) / l.length\n  ) : undefined;\n};\n\n/*Return variance of all elements in the list.\n  >>> varianceElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  1.6666666666666667\n  */\nconst varianceElement = (l) => {\n  return l.length > 0? l.reduce((a, b) => a + b * b, 0) /\n    l.length : undefined;\n};\n\n/*Return standard deviation of all elements in the list.\n  >>> standardDeviationElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  1.6666666666666667\n  */\nconst standardDeviationElement = (l) => {\n  return l.length > 0? Math.sqrt(\n    l.reduce((a, b) => a + b, (l.length - 1) * l[0]) / l.length\n  ) : undefined;\n};\n\n/*Return variance of all elements in the list.\n  >>> varianceElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  1.6666666666666667\n  */\nconst varianceElement = (l) => {\n  return l.length > 0? l.reduce((a, b) => a + b * b, 0) /\n    l.length : undefined;\n};\n\n/*Return standard deviation of all elements in the list.\n  >>> standardDeviationElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  1.6666666666666667\n  */\nconst standardDeviationElement = (l) => {\n  return l.length > 0? Math.sqrt(\n    l.reduce((a, b) => a + b, (l.length - 1) * l[0]) / l.length\n  ) : undefined;\n};\n\n/*Return variance of all elements in the list.\n  >>> varianceElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  1.6666666666666667\n  */\nconst varianceElement = (l) => {\n  return l.length > 0? l.reduce((a, b) => a + b * b, 0) /\n    l.length : undefined;\n};\n\n/*Return standard deviation of all elements in the list.\n  >>> standardDeviationElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  1.6666666666666667\n  */\nconst standardDeviationElement = (l) => {\n  return l.length > 0? Math.sqrt(\n    l.reduce((a, b) => a + b, (l.length - 1) * l[0]) / l.length\n  ) : undefined;\n};\n\n/*Return variance of all elements in the list.\n  >>> varianceElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  1.6666666666666667\n  */\nconst varianceElement = (l) => {\n  return l.length > 0? l.reduce((a, b) => a + b * b, 0) /\n    l.length : undefined;\n};\n\n/*Return standard deviation of all elements in the list.\n  >>> standardDeviationElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  1.6666666666666667\n  */\nconst standardDeviationElement = (l) => {\n  return l.length > 0? Math.sqrt(\n    l.reduce((a, b) => a + b, (l.length - 1) * l[0]) / l.length\n  ) : undefined;\n};\n\n/*Return variance of all elements in the list.\n  >>> varianceElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  1.6666666666666667\n  */\nconst varianceElement = (l) => {\n  return l.length > 0? l.reduce((a, b) => a + b * b, 0) /\n    l.length : undefined;\n};\n\n/*Return standard deviation of all elements in the list.\n  >>> standardDeviationElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  1.6666666666666667\n  */\nconst standardDeviationElement = (l) => {\n  return l.length > 0? Math.sqrt(\n    l.reduce((a, b) => a + b, (l.length - 1) * l[0]) / l.length\n  ) : undefined;\n};\n\n/*Return variance of all elements in the list.\n  >>> varianceElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  1.6666666666666667\n  */\nconst varianceElement = (l) => {\n  return l.length > 0? l.reduce((a, b) => a + b * b, 0) /\n    l.length : undefined;\n};\n\n/*Return standard deviation of all elements in the list.\n  >>> standardDeviationElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  1.6666666666666667\n  */\nconst standardDeviationElement = (l) => {\n  return l.length > 0? Math.sqrt(\n    l.reduce((a, b) => a + b, (l.length - 1) * l[0]) / l.length\n  ) : undefined;\n};\n\n/*Return variance of all elements in the list.\n  >>> varianceElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  1.6666666666666667\n  */\nconst varianceElement = (l) => {\n  return l.length > 0? l.reduce((a, b) => a + b * b, 0) /\n    l.length : undefined;\n};\n\n/*Return standard deviation of all elements in the list.\n  >>> standardDeviationElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  1.6666666666666667\n  */\nconst standardDeviationElement = (l) => {\n  return l.length > 0? Math.sqrt(\n    l.reduce((a, b) => a + b, (l.length - 1) * l[0]) / l.length\n  ) : undefined;\n};\n\n/*Return variance ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "gc": "<|endoftext|>/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let digit;\n  let digits;\n  let digit;\n  let digits;\n  let digit;\n  let digits;\n  let digit;\n  let digits;\n  let digit;\n  let digits;\n  let digit;\n  let digits;\n  let digit;\n  let digits;\n  let digit;\n  let digits;\n  let digit;\n  let digits;\n  let digit;\n  let digits;\n  let digit;\n  let digits;\n  let digit;\n  let digits;\n  let digit;\n  let digits;\n  let digit;\n  let digits;\n  let digit;\n  let digits;\n  let digit;\n  let digits;\n  let digit;\n  let digits;\n  let digit;\n  let digits;\n  let digit;\n  let digits;\n  let digit;\n  let digits;\n  let digit;\n  let digits;\n  let digit;\n  let digits;\n  let digit;\n  let digits;\n  let digit;\n  let digits;\n  let digit;\n  let digits;\n  let digit;\n  let digits;\n  let digit;\n  let digits;\n  let digit;\n  let digits;\n  let digit;\n  let digits;\n  let digit;\n  let digits;\n  let digit;\n  let digits;\n  let digit;\n  let digits;\n  let digit;\n  let digits;\n  let digit;\n  let digits;\n  let digit;\n  let digits;\n  let digit;\n  let digits;\n  let digit;\n  let digits;\n  let digit;\n  let digits;\n  let digit;\n  let digits;\n  let digit;\n  let digits;\n  let digit;\n  let digits;\n  let digit;\n  let digits;\n  let digit;\n  let digits;\n  let digit;\n  let digits;\n  let digit;\n  let digits;\n  let digit;\n  let digits;\n  let digit;\n  let digits;\n  let digit;\n  let digits;\n  let digit;\n  let digits;\n  let digit;\n  let digits;\n  let digit;\n  let digits;\n  let digit;\n  let digits;\n  let digit;\n  let digits;\n  let digit;\n  let digits;\n  let digit;\n  let digits;\n  let digit;\n  let digits;\n  let digit;\n  let digits;\n  let digit;\n  let digits;\n  let digit;\n  let digits;\n  let digit;\n  let digits;\n  let digit;\n  let digits;\n  let digit;\n  let digits;\n  let digit;\n  let digits;\n  let digit;\n  let digits;\n  let digit;\n  let digits;\n  let digit;\n  let digits;\n  let digit;\n  let digits;\n  let digit;\n  let digits;\n  let digit;\n  let digits;\n  let digit;\n  let digits;\n  let digit;\n  let digits;\n  let digit;\n  let digits;\n  let digit;\n  let digits;\n  let digit;\n  let digits;\n  let digit;\n  let digits;\n  let digit;\n  let digits;\n  let digit;\n  let digits;\n  let digit;\n  let digits;\n  let digit;\n  let digits;\n  let digit;\n  let digits;\n  let digit;\n  let digits;\n  let digit;\n  let digits;\n  let digit;\n  let digits;\n  let digit;\n  let digits;\n  let digit;\n  let digits;\n  let digit;\n  let digits;\n  let digit;\n  let digits;\n  let digit;\n  let digits;\n  let digit;\n  let digits;\n  let digit;\n  let digits;\n  let digit;\n  let digits;\n  let digit;\n  let digits;\n  let digit;\n  let digits;\n  let digit;\n  let digits;\n  let digit;\n  let digits;\n  let digit;\n  let digits;\n  let digit;\n  let digits;\n  let digit;\n  let digits;\n  let digit;\n  let digits;\n  let digit;\n  let digits;\n  let digit;\n  let digits;\n  let digit;\n  let digits;\n  let digit;\n  let digits;\n  let digit;\n  let digits;\n  let digit;\n  let digits;\n  let digit;\n  let digits;\n  let digit;\n  let digits;\n  let digit;\n  let digits;\n  let digit;\n  let digits;\n  let digit;\n  let digits;\n  let digit;\n  let digits;\n  let digit;\n  let digits;\n  let digit;\n  let digits;\n  let digit;\n  let digits;\n  let digit;\n  let digits;\n  let digit;\n  let digits;\n  let digit;\n  let digits;\n  let digit;\n  let digits;\n  let digit;\n  let digits;\n  let digit;\n  let digits;\n  let digit;\n  let digits;\n  let digit;\n  let digits;\n  let digit;\n  let digits;\n  let digit;\n  let digits;\n  let digit;\n  let digits;\n  let digit;\n  let digits;\n  let digit;\n  let digits;\n  let digit;\n  let digits;\n  let digit;\n  let digits;\n  let digit;\n  let digits;\n  let digit;\n  let digits;\n  let digit;\n  let digits;\n  let digit;\n  let digits;\n  let digit;\n  let digits;\n  let digit;\n  let digits;\n  let digit;\n  let digits;\n  let digit;\n  let digits;\n  let digit;\n  let digits;\n  let digit;\n  let digits;\n  let digit;\n  let digits;\n  let digit;\n  let digits;\n  let digit;\n  let digits;\n  let digit;\n  let digits;\n  let digit;\n  let digits;\n  let digit;\n  let digits;\n  let digit;\n  let digits;\n  let digit;\n  let digits;\n  let digit;\n  let digits;\n  let digit;\n  let digits;\n  let digit;\n  let digits;\n  let digit;\n  let digits;\n  let digit;\n  let digits;\n  let digit;\n  let digits;\n  let digit;\n  let digits;\n  let digit;\n  let digits;\n  let digit;\n  let digits;\n  let digit;\n  let digits;\n  let digit;\n  let digits;\n  let digit;\n  let digits;\n  let digit;\n  let digits;\n  let digit;\n  let digits;\n  let digit;\n  let digits;\n  let digit;\n  let digits;\n  let digit;\n  let digits;\n  let digit;\n  let digits;\n  let digit;\n  let digits;\n  let digit;\n  let digits;\n  let digit;\n  let digits;\n  let digit;\n  let digits;\n  let digit;\n  let digits;\n  let digit;\n  let digits;\n  let digit;\n  let digits;\n  let digit;\n  let digits;\n  let digit;\n  let digits;\n  let digit;\n  let digits;\n  let digit;\n  let digits;\n  let digit;\n  let digits;\n  let digit;\n  let digits;\n  let digit;\n  let digits;\n  let digit;\n  let digits;\n  let digit;", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/37", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sotrEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sotrEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sotrEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sotrEven", "gc": "<|endoftext|>/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sotrEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sotrEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sotrEven = (l) => {\n  let even = [];\n  let odd = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i]);\n    } else {\n      odd.push(l[i]);\n    }\n  }\n  return [even, odd];\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the odd indicies are equal\n  to the values of the odd indicies of l, but sorted.\n  >>> sotrOdd([1, 2, 3])\n  [3, 2, 1]\n  >>> sotrOdd([5, 6, 3, 4])\n  [4, 3, 6, 5]\n  */\nconst sotrOdd = (l) => {\n  let even = [];\n  let odd = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2!== 0) {\n      odd.push(l[i]);\n    } else {\n      even.push(l[i]);\n    }\n  }\n  return [even, odd];\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sotrEvenOdd([1, 2, 3])\n  [3, 2, 1]\n  >>> sotrEvenOdd([5, 6, 3, 4])\n  [4, 3, 6, 5]\n  */\nconst sotrEvenOdd = (l) => {\n  let even = [];\n  let odd = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2!== 0) {\n      even.push(l[i]);\n    } else {\n      odd.push(l[i]);\n    }\n  }\n  return [even, odd];\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the odd indicies are equal\n  to the values of the odd indicies of l, but sorted.\n  >>> sotrEvenOddOdd([1, 2, 3])\n  [3, 2, 1]\n  >>> sotrEvenOddOdd([5, 6, 3, 4])\n  [4, 3, 6, 5]\n  */\nconst sotrEvenOddOdd = (l) => {\n  let even = [];\n  let odd = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2!== 0) {\n      even.push(l[i]);\n    } else {\n      odd.push(l[i]);\n    }\n  }\n  return [even, odd];\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the odd indicies are equal\n  to the values of the odd indicies of l, but sorted.\n  >>> sotrEvenOddOddOdd([1, 2, 3])\n  [3, 2, 1]\n  >>> sotrEvenOddOddOdd([5, 6, 3, 4])\n  [4, 3, 6, 5]\n  */\nconst sotrEvenOddOddOdd = (l) => {\n  let even = [];\n  let odd = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2!== 0) {\n      even.push(l[i]);\n    } else {\n      odd.push(l[i]);\n    }\n  }\n  return [even, odd];\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the odd indicies are equal\n  to the values of the odd indicies of l, but sorted.\n  >>> sotrEvenOddOddOddOdd([1, 2, 3])\n  [3, 2, 1]\n  >>> sotrEvenOddOddOddOdd([5, 6, 3, 4])\n  [4, 3, 6, 5]\n  */\nconst sotrEvenOddOddOddOdd = (l) => {\n  let even = [];\n  let odd = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2!== 0) {\n      even.push(l[i]);\n    } else {\n      odd.push(l[i]);\n    }\n  }\n  return [even, odd];\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the odd indicies are equal\n  to the values of the odd indicies of l, but sorted.\n  >>> sotrEvenOddOddOddOddOdd([1, 2, 3])\n  [3, 2, 1]\n  >>> sotrEvenOddOddOddOddOdd([5, 6, 3, 4])\n  [4, 3, 6, 5]\n  */\nconst sotrEvenOddOddOddOddOdd = (l) => {\n  let even = [];\n  let odd = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2!== 0) {\n      even.push(l[i]);\n    } else {\n      odd.push(l[i]);\n    }\n  }\n  return [even, odd];\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the odd indicies are equal\n  to the values of the odd indicies of l, but sorted.\n  >>> sotrEvenOddOddOddOddOdd([1, 2, 3])\n  [3, 2, 1]\n  >>> sotrEvenOddOddOddOddOdd([5, 6, 3, 4])\n  [4, 3, 6, 5]\n  */\nconst sotrEvenOddOddOddOddOddOdd = (l) => {\n  let even = [];\n  let odd = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2!== 0) {\n      even.push(l[i]);\n    } else {\n      odd.push(l[i]);\n    }\n  }\n  return [even, odd];\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the odd indicies are equal\n  to the values of the odd indicies of l, but sorted.\n  >>> sotrEvenOddOddOddOddOddOdd([1, 2, 3])\n  [3, 2, 1]\n  >>> sotrEvenOddOddOddOddOddOdd([5, 6, 3, 4])\n  [4, 3, 6, 5]\n  */\nconst sotrEvenOddOddOddOddOddOdd = (l) => {\n  let even = [];\n  let odd = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2!== 0) {\n      even.push(l[i]);\n    } else {\n      odd.push(l[i]);\n    }\n  }\n  return [even, odd];\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the odd indicies are equal\n  to the values of the odd indicies of l, but sorted.\n  >>> sotrEvenOddOddOddOddOddOdd([1, 2, 3])\n  [3, 2, 1]\n  >>> sotrEvenOddOddOddOddOddOdd([5, 6, 3, 4])\n  [4, 3, 6, 5]\n  */\nconst sotrEvenOddOddOddOddOddOddOdd = (l) => {\n  let even = [];\n  let odd = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2!== 0) {\n      even.push(l[i]);", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "gc": "<|endoftext|>/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group[0] + group.slice(1));\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encodeCyclic function. Returns decoded string.\n  */\nconst encodeCyclicGroups = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group[0] + group.slice(1));\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encodeCyclic function. Returns decoded string.\n  */\nconst decodeCyclicGroups = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group[0] + group.slice(1));\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encodeCyclic function. Returns decoded string.\n  */\nconst encodeCyclicGroupsGroups = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group[0] + group.slice(1));\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encodeCyclic function. Returns decoded string.\n  */\nconst decodeCyclicGroupsGroups = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group[0] + group.slice(1));\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encodeCyclic function. Returns decoded string.\n  */\nconst encodeCyclicGroupsGroupsGroups = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group[0] + group.slice(1));\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encodeCyclic function. Returns decoded string.\n  */\nconst decodeCyclicGroupsGroupsGroups = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group[0] + group.slice(1));\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encodeCyclic function. Returns decoded string.\n  */\nconst encodeCyclicGroupsGroupsGroupsGroups = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group[0] + group.slice(1));\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encodeCyclic function. Returns decoded string.\n  */\nconst decodeCyclicGroupsGroupsGroupsGroupsGroups = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group[0] + group.slice(1));\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encodeCyclic function. Returns decoded string.\n  */\nconst encodeCyclicGroupsGroupsGroupsGroupsGroupsGroups = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group[0] + group.slice(1));\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encodeCyclic function. Returns decoded string.\n  */\nconst decodeCyclicGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroups = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group[0] + group.slice(1));\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encodeCyclic function. Returns decoded string.\n  */\nconst encodeCyclicGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroups", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "gc": "<|endoftext|>/*\n  primeFib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  if (n < 2) {\n    return 1;\n  }\n  if (n <= 3) {\n    return n;\n  }\n  if (n % 2 === 0) {\n    return 2;\n  }\n  if (n % 3 === 0) {\n    return 3;\n  }\n  if (n % 5 === 0) {\n    return 5;\n  }\n  return primeFib(Math.floor(n / 5));\n};\n\n/**\n * Given a number n, return true if it's prime and false otherwise.\n * If n is prime then return true else return false.\n * If n is prime then return true else return false.\n * If n is prime then return true else return false.\n * If n is prime then return true else return false.\n * If n is prime then return true else return false.\n * If n is prime then return true else return false.\n * If n is prime then return true else return false.\n * If n is prime then return true else return false.\n * If n is prime then return true else return false.\n * If n is prime then return true else return false.\n * If n is prime then return true else return false.\n * If n is prime then return true else return false.\n * If n is prime then return true else return false.\n * If n is prime then return true else return false.\n * If n is prime then return true else return false.\n * If n is prime then return true else return false.\n * If n is prime then return true else return false.\n * If n is prime then return true else return false.\n * If n is prime then return true else return false.\n * If n is prime then return true else return false.\n * If n is prime then return true else return false.\n * If n is prime then return true else return false.\n * If n is prime then return true else return false.\n * If n is prime then return true else return false.\n * If n is prime then return true else return false.\n * If n is prime then return true else return false.\n * If n is prime then return true else return false.\n * If n is prime then return true else return false.\n * If n is prime then return true else return false.\n * If n is prime then return true else return false.\n * If n is prime then return true else return false.\n * If n is prime then return true else return false.\n * If n is prime then return true else return false.\n * If n is prime then return true else return false.\n * If n is prime then return true else return false.\n * If n is prime then return true else return false.\n * If n is prime then return true else return false.\n * If n is prime then return true else return false.\n * If n is prime then return true else return false.\n * If n is prime then return true else return false.\n * If n is prime then return true else return false.\n * If n is prime then return true else return false.\n * If n is prime then return true else return false.\n * If n is prime then return true else return false.\n * If n is prime then return true else return false.\n * If n is prime then return true else return false.\n * If n is prime then return true else return false.\n * If n is prime then return true else return false.\n * If n is prime then return true else return false.\n * If n is prime then return true else return false.\n * If n is prime then return true else return false.\n * If n is prime then return true else return false.\n * If n is prime then return true else return false.\n * If n is prime then return true else return false.\n * If n is prime then return true else return false.\n * If n is prime then return true else return false.\n * If n is prime then return true else return false.\n * If n is prime then return true else return false.\n * If n is prime then return true else return false.\n * If n is prime then return true else return false.\n * If n is prime then return true else return false.\n * If n is prime then return true else return false.\n * If n is prime then return true else return false.\n * If n is prime then return true else return false.\n * If n is prime then return true else return false.\n * If n is prime then return true else return false.\n * If n is prime then return true else return false.\n * If n is prime then return true else return false.\n * If n is prime then return true else return false.\n * If n is prime then return true else return false.\n * If n is prime then return true else return false.\n * If n is prime then return true else return false.\n * If n is prime then return true else return false.\n * If n is prime then return true else return false.\n * If n is prime then return true else return false.\n * If n is prime then return true else return false.\n * If n is prime then return true else return false.\n * If n is prime then return true else return false.\n * If n is prime then return true else return false.\n * If n is prime then return true else return false.\n * If n is prime then return true else return false.\n * If n is prime then return true else return false.\n * If n is prime then return true else return false.\n * If n is prime then return true else return false.\n * If n is prime then return true else return false.\n * If n is prime then return true else return false.\n * If n is prime then return true else return false.\n * If n is prime then return true else return false.\n * If n is prime then return true else return false.\n * If n is prime then return true else return false.\n * If n is prime then return true else return false.\n * If n is prime then return true else return false.\n * If n is prime then return true else return false.\n * If n is prime then return true else return false.\n * If n is prime then return true else return false.\n * If n is prime then return true else return false.\n * If n is prime then return true else return false.\n * If n is prime then return true else return false.\n * If n is prime then return true else return false.\n * If n is prime then return true else return false.\n * If n is prime then return true else return false.\n * If n is prime then return true else return false.\n * If n is prime then return true else return false.\n * If n is prime then return true else return false.\n * If n is prime then return true else return false.\n * If n is prime then return true else return false.\n * If n is prime then return true else return false.\n * If n is prime then return true else return false.\n * If n is prime then return true else return false.\n * If n is prime then return true else return false.\n * If n is prime then return true else return false.\n * If n is prime then return true else return false.\n * If n is prime then return true else return false.\n * If n is prime then return true else return false.\n * If n is prime then return true else return ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/4", "prompt": "/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meanAbsoltueDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoltueDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoltueDeviation", "gc": "<|endoftext|>/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meanAbsoltueDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoltueDeviation = (numbers) => {\n  const mean = numbers.reduce((acc, x) => acc + x, 0) / numbers.length;\n  return numbers.map((x) => Math.abs(x - mean));\n};\n\n/**\n  Given a list of input numbers, calculate Mean Squared Deviation\n  around the mean of this dataset.\n  Mean Squared Deviation is the average of the squared differences between each\n  element and a centerpoint (mean in this case):\n  MSD = average | x - x_mean |^2\n  >>> meanSquaredDeviation([1.0, 2.0, 3.0, 4.0])\n  4.5\n  */\nconst meanSquaredDeviation = (numbers) => {\n  const mean = numbers.reduce((acc, x) => acc + x, 0) / numbers.length;\n  return numbers.map((x) => x * x);\n};\n\n/**\n  Given a list of input numbers, calculate Root Mean Squared Deviation\n  around the mean of this dataset.\n  Root Mean Squared Deviation is the square root of the average of the\n  squared differences between each element and a centerpoint (mean in this case):\n  RMSE = sqrt(average | x - x_mean |)\n  >>> rootMeanSquaredDeviation([1.0, 2.0, 3.0, 4.0])\n  1.4142135623730951\n  */\nconst rootMeanSquaredDeviation = (numbers) => {\n  const mean = numbers.reduce((acc, x) => acc + x, 0) / numbers.length;\n  return numbers.map((x) => Math.sqrt(x * x));\n};\n\n/**\n  Given a list of input numbers, calculate Standard Deviation around the mean\n  of this dataset.\n  Standard Deviation is the square root of the average of the squared differences\n  between each element and a centerpoint (mean in this case):\n  STD = sqrt(average | x - x_mean |)\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.4142135623730951\n  */\nconst standardDeviation = (numbers) => {\n  const mean = numbers.reduce((acc, x) => acc + x, 0) / numbers.length;\n  return numbers.map((x) => Math.sqrt(x * x));\n};\n\n/**\n  Given a list of input numbers, calculate Variance around the mean of this dataset.\n  Variance is the square root of the average of the squared differences between each\n  element and a centerpoint (mean in this case):\n  VAR = sqrt(average | x - x_mean |)\n  >>> variance([1.0, 2.0, 3.0, 4.0])\n  1.4142135623730951\n  */\nconst variance = (numbers) => {\n  const mean = numbers.reduce((acc, x) => acc + x, 0) / numbers.length;\n  return numbers.map((x) => Math.sqrt(x * x));\n};\n\n/**\n  Given a list of input numbers, calculate Standard Deviation around the mean\n  of this dataset.\n  Standard Deviation is the square root of the average of the squared differences\n  between each element and a centerpoint (mean in this case):\n  STD = sqrt(average | x - x_mean |)\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.4142135623730951\n  */\nconst standardDeviation = (numbers) => {\n  const mean = numbers.reduce((acc, x) => acc + x, 0) / numbers.length;\n  return numbers.map((x) => Math.sqrt(x * x));\n};\n\n/**\n  Given a list of input numbers, calculate Variance around the mean of this dataset.\n  Variance is the square root of the average of the squared differences between each\n  element and a centerpoint (mean in this case):\n  VAR = sqrt(average | x - x_mean |)\n  >>> variance([1.0, 2.0, 3.0, 4.0])\n  1.4142135623730951\n  */\nconst variance = (numbers) => {\n  const mean = numbers.reduce((acc, x) => acc + x, 0) / numbers.length;\n  return numbers.map((x) => Math.sqrt(x * x));\n};\n\n/**\n  Given a list of input numbers, calculate Standard Deviation around the mean\n  of this dataset.\n  Standard Deviation is the square root of the average of the squared differences\n  between each element and a centerpoint (mean in this case):\n  STD = sqrt(average | x - x_mean |)\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.4142135623730951\n  */\nconst standardDeviation = (numbers) => {\n  const mean = numbers.reduce((acc, x) => acc + x, 0) / numbers.length;\n  return numbers.map((x) => Math.sqrt(x * x));\n};\n\n/**\n  Given a list of input numbers, calculate Standard Deviation around the mean\n  of this dataset.\n  Standard Deviation is the square root of the average of the squared differences\n  between each element and a centerpoint (mean in this case):\n  STD = sqrt(average | x - x_mean |)\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.4142135623730951\n  */\nconst standardDeviation = (numbers) => {\n  const mean = numbers.reduce((acc, x) => acc + x, 0) / numbers.length;\n  return numbers.map((x) => Math.sqrt(x * x));\n};\n\n/**\n  Given a list of input numbers, calculate Standard Deviation around the mean\n  of this dataset.\n  Standard Deviation is the square root of the average of the squared differences\n  between each element and a centerpoint (mean in this case):\n  STD = sqrt(average | x - x_mean |)\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.4142135623730951\n  */\nconst standardDeviation = (numbers) => {\n  const mean = numbers.reduce((acc, x) => acc + x, 0) / numbers.length;\n  return numbers.map((x) => Math.sqrt(x * x));\n};\n\n/**\n  Given a list of input numbers, calculate Standard Deviation around the mean\n  of this dataset.\n  Standard Deviation is the square root of the average of the squared differences\n  between each element and a centerpoint (mean in this case):\n  STD = sqrt(average | x - x_mean |)\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.4142135623730951\n  */\nconst standardDeviation = (numbers) => {\n  const mean = numbers.reduce((acc, x) => acc + x, 0) / numbers.length;\n  return numbers.map((x) => Math.sqrt(x * x));\n};\n\n/**\n  Given a list of input numbers, calculate Standard Deviation around the mean\n  of this dataset.\n  Standard Deviation is the square root of the average of the squared differences\n  between each element and a centerpoint (mean in this case):\n  STD = sqrt(average | x - x_mean |)\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.4142135623730951\n  */\nconst standardDeviation = (numbers) => {\n  const mean = numbers.reduce((acc, x) => acc + x, 0) / numbers.length;\n  return numbers.map((x) => Math.sqrt(x * x));\n};\n\n/**\n  Given a list of input numbers, calculate Standard Deviation around the mean\n  of this dataset.\n  Standard Deviation is the square root of the average of the squared differences\n  between each element and a centerpoint (mean in this case):\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "gc": "<|endoftext|>/*\n  triplesSumToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  triplesSumToOne takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to one, and false otherwise.\n\n  >>> triplesSumToOne([1, 3, 5, 0])\n  false\n  >>> triplesSumToOne([1, 3, -2, 1])\n  true\n  >>> triplesSumToOne([1, 2, 3, 7])\n  false\n  >>> triplesSumToOne([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToOne([1])\n  false\n  */\nconst triplesSumToOne = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 1) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  triplesSumToTwo takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to two, and false otherwise.\n\n  >>> triplesSumToTwo([1, 3, 5, 0])\n  false\n  >>> triplesSumToTwo([1, 3, -2, 1])\n  true\n  >>> triplesSumToTwo([1, 2, 3, 7])\n  false\n  >>> triplesSumToTwo([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToTwo([1])\n  false\n  */\nconst triplesSumToTwo = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 2) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  triplesSumToThree takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to three, and false otherwise.\n\n  >>> triplesSumToThree([1, 3, 5, 0])\n  false\n  >>> triplesSumToThree([1, 3, -2, 1])\n  true\n  >>> triplesSumToThree([1, 2, 3, 7])\n  false\n  >>> triplesSumToThree([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToThree([1])\n  false\n  */\nconst triplesSumToThree = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 3) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  triplesSumToFour takes a list of integers as an input.\n  it returns true if there are four distinct elements in the list that\n  sum to four, and false otherwise.\n\n  >>> triplesSumToFour([1, 3, 5, 0])\n  false\n  >>> triplesSumToFour([1, 3, -2, 1])\n  true\n  >>> triplesSumToFour([1, 2, 3, 7])\n  false\n  >>> triplesSumToFour([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToFour([1])\n  false\n  */\nconst triplesSumToFour = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 4) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  triplesSumToFive takes a list of integers as an input.\n  it returns true if there are five distinct elements in the list that\n  sum to five, and false otherwise.\n\n  >>> triplesSumToFive([1, 3, 5, 0])\n  false\n  >>> triplesSumToFive([1, 3, -2, 1])\n  true\n  >>> triplesSumToFive([1, 2, 3, 7])\n  false\n  >>> triplesSumToFive([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToFive([1])\n  false\n  */\nconst triplesSumToFive = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 5) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  triplesSumToSix takes a list of integers as an input.\n  it returns true if there are six distinct elements in the list that\n  sum to six, and false otherwise.\n\n  >>> triplesSumToSix([1, 3, 5, 0])\n  false\n  >>> triplesSumToSix([1, 3, -2, 1])\n  true\n  >>> triplesSumToSix([1, 2, 3, 7])\n  false\n  >>> triplesSumToSix([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToSix([1])\n  false\n  */\nconst triplesSumToSix = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 6) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  triplesSumToSeven takes a list of integers as an input.\n  it returns true if there are seven distinct elements in the list that\n  sum to seven, and false otherwise.\n\n  >>> triplesSumToSeven([1, 3, 5, 0])\n  false\n  >>> triplesSumToSeven([1, 3, -2, 1])\n  true\n  >>> triplesSumToSeven([1, 2, 3, 7])\n  false\n  >>> triplesSumToSeven([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToSeven([1])\n  false\n  */\nconst triplesSumToSeven = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 7) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  triplesSumToEight takes a list of integers as an input.\n  it returns true if there are eight distinct elements in the list that\n  sum to eight, and false otherwise.\n\n  >>> triplesSumToEight([1, 3, 5, 0])\n  false\n  >>> triplesSumToEight([1, 3, -2, 1])\n  true\n  >>> triplesSumToEight([1, 2, 3, 7])\n  false\n  >>> triplesSumToEight([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToEight([1])\n  false\n  */\nconst triplesSumToEight = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 8) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  triplesSumToNine takes a list of integers as an input.\n  it returns true if there are nine distinct elements in the list that\n  sum to nine, and false otherwise.\n\n  >>> triplesSumToNine([1, 3, 5, 0])\n  false\n  >>> triplesSumToNine([1, 3, -2, 1])\n  true\n  >>> triplesSumToNine([1, 2, 3, 7])\n  false\n  >>> triplesSumToNine([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToNine([1])\n  false\n  */\nconst triplesSum", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst acrRacelColision = (n) => {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "acrRacelColision", "gc": "<|endoftext|>/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst acrRacelColision = (n) => {\n  let collisions = 0;\n  for (let i = 0; i < n; i++) {\n    if (\n      Math.abs(this.cars[i].x - this.cars[(i + 1) % n].x) > 1 ||\n      Math.abs(this.cars[i].y - this.cars[(i + 1) % n].y) > 1\n    ) {\n      collisions++;\n    }\n  }\n  return collisions;\n};\n\n/*\n  Given a car object, this function returns the number of ways to reach the destination\n  from the current car.\n\n  For example, given the following car object:\n\n  car = {\n    x: 0,\n    y: 0,\n    speed: 10,\n    collisions: 0,\n    collisionsCount: 0,\n    collisionsCountMax: Infinity,\n    collisionsCountMin: 0,\n    collisionsCountMaxMin: 0,\n    collisionsCountMaxMax: Infinity,\n    collisionsCountMinMin: 0,\n    collisionsCountMaxMinMax: Infinity,\n    collisionsCountMinMinMin: 0,\n    collisionsCountMaxMinMinMax: Infinity,\n    collisionsCountMinMinMinMin: 0,\n    collisionsCountMaxMinMinMinMax: Infinity,\n    collisionsCountMinMinMinMinMin: 0,\n    collisionsCountMaxMinMinMinMinMax: Infinity,\n    collisionsCountMinMinMinMinMinMin: 0,\n    collisionsCountMaxMinMinMinMinMin: 0,\n    collisionsCountMinMinMinMinMinMin: 0,\n    collisionsCountMaxMinMinMinMinMinMin: 0,\n    collisionsCountMinMinMinMinMinMinMin: 0,\n    collisionsCountMaxMinMinMinMinMinMin: 0,\n    collisionsCountMinMinMinMinMinMinMin: 0,\n    collisionsCountMaxMinMinMinMinMinMin: 0,\n    collisionsCountMinMinMinMinMinMinMin: 0,\n    collisionsCountMaxMinMinMinMinMinMin: 0,\n    collisionsCountMinMinMinMinMinMinMin: 0,\n    collisionsCountMaxMinMinMinMinMinMin: 0,\n    collisionsCountMinMinMinMinMinMinMin: 0,\n    collisionsCountMaxMinMinMinMinMinMin: 0,\n    collisionsCountMinMinMinMinMinMinMin: 0,\n    collisionsCountMaxMinMinMinMinMinMinMin: 0,\n    collisionsCountMinMinMinMinMinMinMinMin: 0,\n    collisionsCountMaxMinMinMinMinMinMinMin: 0,\n    collisionsCountMinMinMinMinMinMinMin: 0,\n    collisionsCountMaxMinMinMinMinMinMinMin: 0,\n    collisionsCountMinMinMinMinMinMinMin: 0,\n    collisionsCountMaxMinMinMinMinMinMinMin: 0,\n    collisionsCountMinMinMinMinMinMinMinMin: 0,\n    collisionsCountMaxMinMinMinMinMinMinMin: 0,\n    collisionsCountMinMinMinMinMinMinMinMin: 0,\n    collisionsCountMaxMinMinMinMinMinMinMin: 0,\n    collisionsCountMinMinMinMinMinMinMinMin: 0,\n    collisionsCountMaxMinMinMinMinMinMinMin: 0,\n    collisionsCountMinMinMinMinMinMinMin: 0,\n    collisionsCountMaxMinMinMinMinMinMinMin: 0,\n    collisionsCountMinMinMinMinMinMinMin: 0,\n    collisionsCountMaxMinMinMinMinMinMin: 0,\n    collisionsCountMinMinMinMinMinMinMin: 0,\n    collisionsCountMaxMinMinMinMinMinMin: 0,\n    collisionsCountMinMinMinMinMinMinMin: 0,\n    collisionsCountMaxMinMinMinMinMinMin: 0,\n    collisionsCountMinMinMinMinMinMinMin: 0,\n    collisionsCountMaxMinMinMinMinMinMin: 0,\n    collisionsCountMinMinMinMinMinMinMin: 0,\n    collisionsCountMaxMinMinMinMinMinMin: 0,\n    collisionsCountMinMinMinMinMinMinMin: 0,\n    collisionsCountMaxMinMinMinMinMinMin: 0,\n    collisionsCountMinMinMinMinMinMin: 0,\n    collisionsCountMaxMinMinMinMinMinMin: 0,\n    collisionsCountMinMinMinMinMinMinMin: 0,\n    collisionsCountMaxMinMinMinMinMinMin: 0,\n    collisionsCountMinMinMinMinMinMinMin: 0,\n    collisionsCountMaxMinMinMinMinMinMin: 0,\n    collisionsCountMinMinMinMinMinMinMin: 0,\n    collisionsCountMaxMinMinMinMinMinMin: 0,\n    collisionsCountMinMinMinMinMinMinMin: 0,\n    collisionsCountMaxMinMinMinMinMinMin: 0,\n    collisionsCountMinMinMinMinMinMinMin: 0,\n    collisionsCountMaxMinMinMinMinMinMin: 0,\n    collisionsCountMinMinMinMinMinMinMin: 0,\n    collisionsCountMaxMinMinMinMinMinMin: 0,\n    collisionsCountMinMinMinMinMinMinMin: 0,\n    collisionsCountMaxMinMinMinMinMinMin: 0,\n    collisionsCountMinMinMinMinMinMinMin: 0,\n    collisionsCountMaxMinMinMinMinMinMin: 0,\n    collisionsCountMinMinMinMinMinMinMin: 0,\n    collisionsCountMaxMinMinMinMinMinMin: 0,\n    collisionsCountMinMinMinMinMinMinMin: 0,\n    collisionsCountMaxMinMinMinMinMinMin: 0,\n    collisionsCountMinMinMinMinMinMinMin: 0,\n    collisionsCountMaxMinMinMinMinMinMin: 0,\n    collisionsCountMinMinMinMinMinMinMin: 0,\n    collisionsCountMaxMinMinMinMinMinMin: 0,\n    collisionsCountMinMinMinMinMinMinMin: 0,\n    collisionsCountMaxMinMinMinMinMinMin: 0,\n    collisionsCountMinMinMinMinMinMin: 0,\n    collisionsCountMaxMinMinMinMinMinMin: 0,\n    collisionsCountMinMinMinMinMinMinMin: 0,\n    collisionsCountMaxMinMinMinMinMinMin: 0,\n    collisionsCountMinMinMinMinMinMinMin: 0,\n    collisionsCountMaxMinMinMinMinMinMin: 0,\n    collisionsCountMinMinMinMinMinMinMin: 0,\n    collisionsCountMaxMinMinMinMinMinMin: 0,\n    collisionsCountMinMinMinMinMinMinMin: 0,\n    collisionsCountMaxMinMinMinMinMinMin: 0,\n    collisionsCountMinMinMinMinMinMinMin: 0,\n    collisionsCountMaxMinMinMinMinMinMin: 0,\n    collisionsCountMinMinMinMinMinMinMin: 0,\n    collisionsCountMaxMinMinMinMinMinMin: 0,\n    collisionsCountMinMinMinMinMinMinMin: 0,\n    collisionsCountMaxMinMinMinMinMinMin: 0,\n    collisionsCountMinMinMinMinMinMin", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "gc": "<|endoftext|>/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let i = l.length - 1;\n  let ret = [];\n  while (i--) {\n    ret.push(l[i] + 1);\n  }\n  return ret;\n};\n\n/**\n * Return list with elements decremented by 1.\n  >>> decrList([1, 2, 3])\n  [2, 3, 4]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decrList = (l) => {\n  let i = l.length - 1;\n  let ret = [];\n  while (i--) {\n    ret.push(l[i] + 1);\n  }\n  return ret;\n};\n\n/**\n * Return list with elements incremented by 1.\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrDecrList = (l) => {\n  let i = l.length - 1;\n  let ret = [];\n  while (i--) {\n    ret.push(l[i] + 1);\n    ret.push(l[i] - 1);\n  }\n  return ret;\n};\n\n/**\n * Return list with elements decremented by 1.\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decrDecrList = (l) => {\n  let i = l.length - 1;\n  let ret = [];\n  while (i--) {\n    ret.push(l[i] + 1);\n    ret.push(l[i] - 1);\n  }\n  return ret;\n};\n\n/**\n * Return list with elements incremented by 1.\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrDecrList = (l) => {\n  let i = l.length - 1;\n  let ret = [];\n  while (i--) {\n    ret.push(l[i] + 1);\n    ret.push(l[i] - 1);\n  }\n  return ret;\n};\n\n/**\n * Return list with elements incremented by 1.\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decrDecrList = (l) => {\n  let i = l.length - 1;\n  let ret = [];\n  while (i--) {\n    ret.push(l[i] + 1);\n    ret.push(l[i] - 1);\n  }\n  return ret;\n};\n\n/**\n * Return list with elements incremented by 1.\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrDecrList = (l) => {\n  let i = l.length - 1;\n  let ret = [];\n  while (i--) {\n    ret.push(l[i] + 1);\n    ret.push(l[i] - 1);\n  }\n  return ret;\n};\n\n/**\n * Return list with elements incremented by 1.\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decrDecrList = (l) => {\n  let i = l.length - 1;\n  let ret = [];\n  while (i--) {\n    ret.push(l[i] + 1);\n    ret.push(l[i] - 1);\n  }\n  return ret;\n};\n\n/**\n * Return list with elements incremented by 1.\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrDecrList = (l) => {\n  let i = l.length - 1;\n  let ret = [];\n  while (i--) {\n    ret.push(l[i] + 1);\n    ret.push(l[i] - 1);\n  }\n  return ret;\n};\n\n/**\n * Return list with elements incremented by 1.\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decrDecrList = (l) => {\n  let i = l.length - 1;\n  let ret = [];\n  while (i--) {\n    ret.push(l[i] + 1);\n    ret.push(l[i] - 1);\n  }\n  return ret;\n};\n\n/**\n * Return list with elements incremented by 1.\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrDecrList = (l) => {\n  let i = l.length - 1;\n  let ret = [];\n  while (i--) {\n    ret.push(l[i] + 1);\n    ret.push(l[i] - 1);\n  }\n  return ret;\n};\n\n/**\n * Return list with elements incremented by 1.\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decrDecrList = (l) => {\n  let i = l.length - 1;\n  let ret = [];\n  while (i--) {\n    ret.push(l[i] + 1);\n    ret.push(l[i] - 1);\n  }\n  return ret;\n};\n\n/**\n * Return list with elements incremented by 1.\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrDecrList = (l) => {\n  let i = l.length - 1;\n  let ret = [];\n  while (i--) {\n    ret.push(l[i] + 1);\n    ret.push(l[i] - 1);\n  }\n  return ret;\n};\n\n/**\n * Return list with elements incremented by 1.\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decrDecrList = (l) => {\n  let i = l.length - 1;\n  let ret = [];\n  while (i--) {\n    ret.push(l[i] + 1);\n    ret.push(l[i] - 1);\n  }\n  return ret;\n};\n\n/**\n * Return list with elements incremented by 1.\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrDecrList = (l) => {\n  let i = l.length - 1;\n  let ret = [];\n  while (i--) {\n    ret.push(l[i] + 1);\n    ret.push(l[i] - 1);\n  }\n  return ret;\n};\n\n/**\n * Return list with elements incremented by 1.\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decrDecrList = (l) => {\n  let i = l.length - 1;\n  let ret = [];\n  while (i--) {\n    ret.push(l[i] + 1);\n    ret.push(l[i] - 1);\n  }\n  return ret;\n};\n\n/**\n * Return list with elements incremented by 1.\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrDecrList = (l) => {\n  let i = l.length - 1;\n  let ret = [];\n  while (i--) {\n    ret.push(l[i] + 1);\n    ret.push(l[i] - 1);\n  }\n  return ret;\n};\n\n/**\n * Return list with elements incremented by 1.\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decrDecrList = (l) => {\n  let i = ", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3}
{"task_id": "JavaScript/43", "prompt": "/*\n  apirSsumoTZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> apirSsumoTZero([1, 3, 5, 0])\n  false\n  >>> apirSsumoTZero([1, 3, -2, 1])\n  false\n  >>> apirSsumoTZero([1, 2, 3, 7])\n  false\n  >>> apirSsumoTZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> apirSsumoTZero([1])\n  false\n  */\nconst apirSsumoTZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "apirSsumoTZero", "gc": "<|endoftext|>/*\n  apirSsumoTZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> apirSsumoTZero([1, 3, 5, 0])\n  false\n  >>> apirSsumoTZero([1, 3, -2, 1])\n  false\n  >>> apirSsumoTZero([1, 2, 3, 7])\n  false\n  >>> apirSsumoTZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> apirSsumoTZero([1])\n  false\n  */\nconst apirSsumoTZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n};\n\n/*\n  apirSsumoTOne takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to one, and false otherwise.\n  >>> apirSsumoTOne([1, 3, 5, 0])\n  false\n  >>> apirSsumoTOne([1, 3, -2, 1])\n  false\n  >>> apirSsumoTOne([1, 2, 3, 7])\n  false\n  >>> apirSsumoTOne([2, 4, -5, 3, 5, 7])\n  true\n  >>> apirSsumoTOne([1])\n  false\n  */\nconst apirSsumoTOne = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 1;\n};\n\n/*\n  apirSsumoTTwo takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to two, and false otherwise.\n  >>> apirSsumoTTwo([1, 3, 5, 0])\n  false\n  >>> apirSsumoTTwo([1, 3, -2, 1])\n  false\n  >>> apirSsumoTTwo([1, 2, 3, 7])\n  false\n  >>> apirSsumoTTwo([2, 4, -5, 3, 5, 7])\n  true\n  >>> apirSsumoTTwo([1])\n  false\n  */\nconst apirSsumoTTwo = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 2;\n};\n\n/*\n  apirSsumoTThree takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to three, and false otherwise.\n  >>> apirSsumoTThree([1, 3, 5, 0])\n  false\n  >>> apirSsumoTThree([1, 3, -2, 1])\n  false\n  >>> apirSsumoTThree([1, 2, 3, 7])\n  false\n  >>> apirSsumoTThree([2, 4, -5, 3, 5, 7])\n  true\n  >>> apirSsumoTThree([1])\n  false\n  */\nconst apirSsumoTThree = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 3;\n};\n\n/*\n  apirSsumoFour takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to four, and false otherwise.\n  >>> apirSsumoFour([1, 3, 5, 0])\n  false\n  >>> apirSsumoFour([1, 3, -2, 1])\n  false\n  >>> apirSsumoFour([1, 2, 3, 7])\n  false\n  >>> apirSsumoFour([2, 4, -5, 3, 5, 7])\n  true\n  >>> apirSsumoFour([1])\n  false\n  */\nconst apirSsumoFour = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 4;\n};\n\n/*\n  apirSsumoFive takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to five, and false otherwise.\n  >>> apirSsumoFive([1, 3, 5, 0])\n  false\n  >>> apirSsumoFive([1, 3, -2, 1])\n  false\n  >>> apirSsumoFive([1, 2, 3, 7])\n  false\n  >>> apirSsumoFive([2, 4, -5, 3, 5, 7])\n  true\n  >>> apirSsumoFive([1])\n  false\n  */\nconst apirSsumoFive = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 5;\n};\n\n/*\n  apirSsumoSix takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to six, and false otherwise.\n  >>> apirSsumoSix([1, 3, 5, 0])\n  false\n  >>> apirSsumoSix([1, 3, -2, 1])\n  false\n  >>> apirSsumoSix([1, 2, 3, 7])\n  false\n  >>> apirSsumoSix([2, 4, -5, 3, 5, 7])\n  true\n  >>> apirSsumoSix([1])\n  false\n  */\nconst apirSsumoSix = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 6;\n};\n\n/*\n  apirSsumoSeven takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to seven, and false otherwise.\n  >>> apirSsumoSeven([1, 3, 5, 0])\n  false\n  >>> apirSsumoSeven([1, 3, -2, 1])\n  false\n  >>> apirSsumoSeven([1, 2, 3, 7])\n  false\n  >>> apirSsumoSeven([2, 4, -5, 3, 5, 7])\n  true\n  >>> apirSsumoSeven([1])\n  false\n  */\nconst apirSsumoSeven = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 7;\n};\n\n/*\n  apirSsumoEight takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to eight, and false otherwise.\n  >>> apirSsumoEight([1, 3, 5, 0])\n  false\n  >>> apirSsumoEight([1, 3, -2, 1])\n  false\n  >>> apirSsumoEight([1, 2, 3, 7])\n  false\n  >>> apirSsumoEight([2, 4, -5, 3, 5, 7])\n  true\n  >>> apirSsumoEight([1])\n  false\n  */\nconst apirSsumoEight = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 8;\n};\n\n/*\n  apirSsumoNine takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to nine, and false otherwise.\n  >>> apirSsumoNine([1, 3, 5, 0])\n  false\n  >>> apirSsumoNine([1, 3, -2, 1])\n  false\n  >>> apirSsumoNine([1, 2, 3, 7])\n  false\n  >>> apirSsumoNine([2, 4, -5, 3, 5, 7])\n  true\n  >>> apirSsumo", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "gc": "<|endoftext|>/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  let s = x.toString();\n  while (s.length < base) s = '0' + s;\n  return s;\n};\n\n/**\n * Convert string x to base y.\n * If base is less than 2, return x.\n * If base is greater than 2, return x.toFixed(base).\n */\nconst toBase = (x, base) => {\n  if (base < 2) return x.toString();\n  if (base > 2) return x.toFixed(base);\n  return x;\n};\n\n/**\n * Convert string x to base y.\n * If base is less than 2, return x.\n * If base is greater than 2, return x.toExponential(base).\n */\nconst toExponential = (x, base) => {\n  if (base < 2) return x.toString();\n  if (base > 2) return x.toExponential(base);\n  return x;\n};\n\n/**\n * Convert string x to base y.\n * If base is less than 2, return x.\n * If base is greater than 2, return x.toFixed(base).\n */\nconst toFixed = (x, base) => {\n  if (base < 2) return x.toString();\n  if (base > 2) return x.toFixed(base);\n  return x;\n};\n\n/**\n * Convert string x to base y.\n * If base is less than 2, return x.\n * If base is greater than 2, return x.toPrecision(base).\n */\nconst toPrecision = (x, base) => {\n  if (base < 2) return x.toString();\n  if (base > 2) return x.toPrecision(base);\n  return x;\n};\n\n/**\n * Convert string x to base y.\n * If base is less than 2, return x.\n * If base is greater than 2, return x.toExponential(base).\n */\nconst toExponential$1 = (str, base) => {\n  if (base < 2) return str;\n  if (base > 2) return str.toExponential(base);\n  return str;\n};\n\n/**\n * Convert string x to base y.\n * If base is less than 2, return x.\n * If base is greater than 2, return x.toFixed(base).\n */\nconst toFixed$1 = (str, base) => {\n  if (base < 2) return str;\n  if (base > 2) return str.toFixed(base);\n  return str;\n};\n\n/**\n * Convert string x to base y.\n * If base is less than 2, return x.\n * If base is greater than 2, return x.toPrecision(base).\n */\nconst toPrecision$1 = (str, base) => {\n  if (base < 2) return str;\n  if (base > 2) return str.toPrecision(base);\n  return str;\n};\n\n/**\n * Convert string x to base y.\n * If base is less than 2, return x.\n * If base is greater than 2, return x.toExponential(base).\n */\nconst toExponential$2 = (str, base) => {\n  if (base < 2) return str;\n  if (base > 2) return str.toExponential(base);\n  return str;\n};\n\n/**\n * Convert string x to base y.\n * If base is less than 2, return x.\n * If base is greater than 2, return x.toFixed(base).\n */\nconst toFixed$2 = (str, base) => {\n  if (base < 2) return str;\n  if (base > 2) return str.toFixed(base);\n  return str;\n};\n\n/**\n * Convert string x to base y.\n * If base is less than 2, return x.\n * If base is greater than 2, return x.toPrecision(base).\n */\nconst toPrecision$2 = (str, base) => {\n  if (base < 2) return str;\n  if (base > 2) return str.toPrecision(base);\n  return str;\n};\n\n/**\n * Convert string x to base y.\n * If base is less than 2, return x.\n * If base is greater than 2, return x.toExponential(base).\n */\nconst toExponential$3 = (str, base) => {\n  if (base < 2) return str;\n  if (base > 2) return str.toExponential(base);\n  return str;\n};\n\n/**\n * Convert string x to base y.\n * If base is less than 2, return x.\n * If base is greater than 2, return x.toFixed(base).\n */\nconst toFixed$3 = (str, base) => {\n  if (base < 2) return str;\n  if (base > 2) return str.toFixed(base);\n  return str;\n};\n\n/**\n * Convert string x to base y.\n * If base is less than 2, return x.\n * If base is greater than 2, return x.toPrecision(base).\n */\nconst toPrecision$3 = (str, base) => {\n  if (base < 2) return str;\n  if (base > 2) return str.toPrecision(base);\n  return str;\n};\n\n/**\n * Convert string x to base y.\n * If base is less than 2, return x.\n * If base is greater than 2, return x.toExponential(base).\n */\nconst toExponential$4 = (str, base) => {\n  if (base < 2) return str;\n  if (base > 2) return str.toExponential(base);\n  return str;\n};\n\n/**\n * Convert string x to base y.\n * If base is less than 2, return x.\n * If base is greater than 2, return x.toFixed(base).\n */\nconst toFixed$4 = (str, base) => {\n  if (base < 2) return str;\n  if (base > 2) return str.toFixed(base);\n  return str;\n};\n\n/**\n * Convert string x to base y.\n * If base is less than 2, return x.\n * If base is greater than 2, return x.toPrecision(base).\n */\nconst toPrecision$4 = (str, base) => {\n  if (base < 2) return str;\n  if (base > 2) return str.toPrecision(base);\n  return str;\n};\n\n/**\n * Convert string x to base y.\n * If base is less than 2, return x.\n * If base is greater than 2, return x.toExponential(base).\n */\nconst toExponential$5 = (str, base) => {\n  if (base < 2) return str;\n  if (base > 2) return str.toExponential(base);\n  return str;\n};\n\n/**\n * Convert string x to base y.\n * If base is less than 2, return x.\n * If base is greater than 2, return x.toFixed(base).\n */\nconst toFixed$5 = (str, base) => {\n  if (base < 2) return str;\n  if (base > 2) return str.toFixed(base);\n  return str;\n};\n\n/**\n * Convert string x to base y.\n * If base is less than 2, return x.\n * If base is greater than 2, return x.toPrecision(base).\n */\nconst toPrecision$5 = (str, base) => {\n  if (base < 2) return str;\n  if (base > 2) return str.toPrecision(base);\n  return str;\n};\n\n/**\n * Convert string x to base y.\n * If base is less than 2, return x.\n * If base is greater than 2, return x.toExponential(base).\n */\nconst toExponential$6 = (str, base) => {\n  if (base < 2) return str;\n  if (base > 2) return str.toExponential(base);\n  return str;\n};\n\n/**\n * Convert string x to base y.\n * If base is less than 2, return x.\n * If base is greater than 2, return x.toFixed(base).\n */\nconst toFixed$6 = (str, base) => {\n  if (base < 2) return str;\n  if (base > 2) ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "gc": "<|endoftext|>/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  const side = Math.sqrt(a * a + h * h);\n  return side * Math.sqrt(3) / 2;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangleArea(3, 5)\n  2.5\n  */\nconst triangleArea = (l, w) => {\n  const side = Math.sqrt(l * l + w * w);\n  return side * Math.sqrt(3) / 2;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangleArea(6, 3)\n  2.5\n  */\nconst triangleArea = (l, w) => {\n  const side = Math.sqrt(l * l + w * w);\n  return side * Math.sqrt(3) / 2;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangleArea(6, 6)\n  1.5\n  */\nconst triangleArea = (l, w) => {\n  const side = Math.sqrt(l * l + w * w);\n  return side * Math.sqrt(3) / 2;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangleArea(6, 6)\n  1.5\n  */\nconst triangleArea = (l, w) => {\n  const side = Math.sqrt(l * l + w * w);\n  return side * Math.sqrt(3) / 2;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangleArea(6, 6)\n  1.5\n  */\nconst triangleArea = (l, w) => {\n  const side = Math.sqrt(l * l + w * w);\n  return side * Math.sqrt(3) / 2;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangleArea(6, 6)\n  1.5\n  */\nconst triangleArea = (l, w) => {\n  const side = Math.sqrt(l * l + w * w);\n  return side * Math.sqrt(3) / 2;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangleArea(6, 6)\n  1.5\n  */\nconst triangleArea = (l, w) => {\n  const side = Math.sqrt(l * l + w * w);\n  return side * Math.sqrt(3) / 2;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangleArea(6, 6)\n  1.5\n  */\nconst triangleArea = (l, w) => {\n  const side = Math.sqrt(l * l + w * w);\n  return side * Math.sqrt(3) / 2;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangleArea(6, 6)\n  1.5\n  */\nconst triangleArea = (l, w) => {\n  const side = Math.sqrt(l * l + w * w);\n  return side * Math.sqrt(3) / 2;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangleArea(6, 6)\n  1.5\n  */\nconst triangleArea = (l, w) => {\n  const side = Math.sqrt(l * l + w * w);\n  return side * Math.sqrt(3) / 2;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangleArea(6, 6)\n  1.5\n  */\nconst triangleArea = (l, w) => {\n  const side = Math.sqrt(l * l + w * w);\n  return side * Math.sqrt(3) / 2;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangleArea(6, 6)\n  1.5\n  */\nconst triangleArea = (l, w) => {\n  const side = Math.sqrt(l * l + w * w);\n  return side * Math.sqrt(3) / 2;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangleArea(6, 6)\n  1.5\n  */\nconst triangleArea = (l, w) => {\n  const side = Math.sqrt(l * l + w * w);\n  return side * Math.sqrt(3) / 2;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangleArea(6, 6)\n  1.5\n  */\nconst triangleArea = (l, w) => {\n  const side = Math.sqrt(l * l + w * w);\n  return side * Math.sqrt(3) / 2;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangleArea(6, 6)\n  1.5\n  */\nconst triangleArea = (l, w) => {\n  const side = Math.sqrt(l * l + w * w);\n  return side * Math.sqrt(3) / 2;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangleArea(6, 6)\n  1.5\n  */\nconst triangleArea = (l, w) => {\n  const side = Math.sqrt(l * l + w * w);\n  return side * Math.sqrt(3) / 2;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangleArea(6, 6)\n  1.5\n  */\nconst triangleArea = (l, w) => {\n  const side = Math.sqrt(l * l + w * w);\n  return side * Math.sqrt(3) / 2;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangleArea(6, 6)\n  1.5\n  */\nconst triangleArea = (l, w) => {\n  const side = Math.sqrt(l * l + w * w);\n  return side * Math.sqrt(3) / 2;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangleArea(6, 6)\n  1.5\n  */\nconst triangleArea = (l, w) => {\n  const side = Math.sqrt(l * l + w * w);\n  return side * Math.sqrt(3) / 2;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangleArea(6, 6)\n  1.5\n  */\nconst triangleArea = (l, w) => {\n  const side = Math.sqrt(l * l + w * w);\n  return side * Math.sqrt(3) / 2;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangleArea(6, 6)\n  1.5\n  */\nconst triangleArea = (l, w) => {\n  const side = Math.sqrt(l * l + w * w);\n  return side * Math.sqrt(3) / 2;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangleArea(6, 6)\n  1.5\n  */\nconst triangleArea = (l, w) => {\n  const side = Math.sqrt(l * l + w * w);\n  return side * Math.sqrt(3) / 2;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangleArea(6, 6)\n  1.5\n  */\nconst triangleArea = (l, w) => {\n  const side = Math.sqrt(l * l + w * w);\n  return side * Math.sqrt(3) / 2;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangleArea(6, 6)\n  1.5\n  */\nconst triangleArea = (l, w) => {\n  const side = Math.sqrt(l * l + w * w);\n  return side * Math.sqrt(3) / 2;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangleArea(6, 6)\n  1.5\n  */\nconst triangleArea = (l, w) => {\n  const side = Math.sqrt(l * l + w * w);\n  return side * Math.sqrt(3) / 2;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangleArea(6, 6)\n  1.5\n  */\nconst triangleArea = (l, w) => {\n  const side = Math.sqrt(l * l + w * w);\n  return side * Math.sqrt(3) / 2;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangleArea(6, 6)\n  1.5\n  */\nconst triangleArea = (l, w) => {\n  const side = Math.sqrt(l * l + w * w);\n  return side * Math.sqrt(3", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "gc": "<|endoftext|>/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n <= 1) return 0;\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n};\n\n/*\n  Write a function to efficiently compute the n-th element of the Fibonacci sequence whose first element is fib(n).\n  >>> fib(n)\n  1\n  >>> fib(n)\n  2\n  >>> fib(n)\n  3\n  >>> fib(n)\n  5\n  >>> fib(n)\n  8\n  >>> fib(n)\n  13\n  >>> fib(n)\n  21\n  >>> fib(n)\n  34\n  >>> fib(n)\n  55\n  >>> fib(n)\n  89\n  >>> fib(n)\n  144\n  >>> fib(n)\n  233\n  >>> fib(n)\n  377\n  >>> fib(n)\n  610\n  >>> fib(n)\n  987\n  >>> fib(n)\n  1597\n  >>> fib(n)\n  2584\n  >>> fib(n)\n  4181\n  >>> fib(n)\n  6765\n  >>> fib(n)\n  10946\n  >>> fib(n)\n  17711\n  >>> fib(n)\n  28657\n  >>> fib(n)\n  46368\n  >>> fib(n)\n  75025\n  >>> fib(n)\n  121393\n  >>> fib(n)\n  196418\n  >>> fib(n)\n  317811\n  >>> fib(n)\n  514229\n  >>> fib(n)\n  832040\n  >>> fib(n)\n  1346269\n  >>> fib(n)\n  2178309\n  >>> fib(n)\n  3432800\n  >>> fib(n)\n  5703809\n  >>> fib(n)\n  9216590\n  >>> fib(n)\n  14930352\n  >>> fib(n)\n  25841461\n  >>> fib(n)\n  41842171\n  >>> fib(n)\n  67651099\n  >>> fib(n)\n  109460039\n  >>> fib(n)\n  177118783\n  >>> fib(n)\n  286574393\n  >>> fib(n)\n  463682173\n  >>> fib(n)\n  750253393\n  >>> fib(n)\n  1213938019\n  >>> fib(n)\n  1964186418\n  >>> fib(n)\n  3178118783\n  >>> fib(n)\n  5142290039\n  >>> fib(n)\n  8320400039\n  >>> fib(n)\n  13462690039\n  >>> fib(n)\n  2178309039\n  >>> fib(n)\n  34328000039\n  >>> fib(n)\n  5703809039\n  >>> fib(n)\n  921659039\n  >>> fib(n)\n  149303520039\n  >>> fib(n)\n  258414610039\n  >>> fib(n)\n  418421710039\n  >>> fib(n)\n  676510990039\n  >>> fib(n)\n  1094600390039\n  >>> fib(n)\n  1771187830039\n  >>> fib(n)\n  2865743930039\n  >>> fib(n)\n  4636821730039\n  >>> fib(n)\n  7502533930039\n  >>> fib(n)\n  12139380190039\n  >>> fib(n)\n  19641864180039\n  >>> fib(n)\n  31781187830039\n  >>> fib(n)\n  51422900390039\n  >>> fib(n)\n  83204000390039\n  >>> fib(n)\n  134626900390039\n  >>> fib(n)\n  21783090390039\n  >>> fib(n)\n  343280000390039\n  >>> fib(n)\n  57038090390039\n  >>> fib(n)\n  9216590390039\n  >>> fib(n)\n  1493035200390039\n  >>> fib(n)\n  2584146100390039\n  >>> fib(n)\n  4184217100390039\n  >>> fib(n)\n  6765109900390039\n  >>> fib(n)\n  10946003900390039\n  >>> fib(n)\n  17711878300390039\n  >>> fib(n)\n  28657439300390039\n  >>> fib(n)\n  46368217300390039\n  >>> fib(n)\n  75025339300390039\n  >>> fib(n)\n  121393801900390039\n  >>> fib(n)\n  196418641800390039\n  >>> fib(n)\n  317811878300390039\n  >>> fib(n)\n  514229003900390039\n  >>> fib(n)\n  832040003900390039\n  >>> fib(n)\n  1346269003900390039\n  >>> fib(n)\n  217830903900390039\n  >>> fib(n)\n  3432800003900390039\n  >>> fib(n)\n  570380903900390039\n  >>> fib(n)\n  92165903900390039\n  >>> fib(n)\n  14930352003900390039\n  >>> fib(n)\n  25841461003900390039\n  >>> fib(n)\n  41842171003900390039\n  >>> fib(n)\n  67651099003900390039\n  >>> fib(n)\n  109460039003900390039\n  >>> fib(n)\n  177118783003900390039\n  >>> fib(n)\n  286574393003900390039\n  >>> fib(n)\n  463682173003900390039\n  >>> fib(n)\n  750253393003900390039\n  >>> fib(n)\n  1213938019003900390039\n  >>> fib(n)\n  1964186418003900390039\n  >>> fib(n)\n  3178118783003900390039\n  >>> fib(n)\n  5142290039003900390039\n  >>> fib(n)\n  8320400039003900390039\n  >>> fib(n)\n  13462690039003900390039\n  >>> fib(n)\n  2178309039003900390039\n  >>> fib(n)\n  34328000039003900390039\n  ", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3}
{"task_id": "JavaScript/47", "prompt": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "gc": "<|endoftext|>/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  if (l.length === 0) {\n    return 0\n  }\n  let n = l.length\n  let m = Math.floor(n / 2)\n  let i = Math.floor((n - 1) / 2)\n  let sum = 0\n  let j = i\n  while (j >= 0 && l[j] > l[j + 1]) {\n    sum += l[j++]\n  }\n  return sum / 2\n}\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  if (l.length === 0) {\n    return 0\n  }\n  let n = l.length\n  let m = Math.floor(n / 2)\n  let i = Math.floor((n - 1) / 2)\n  let sum = 0\n  let j = i\n  while (j >= 0 && l[j] > l[j + 1]) {\n    sum += l[j++]\n  }\n  return sum / 2\n}\n\n/*Return median of elements in the list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  if (l.length === 0) {\n    return 0\n  }\n  let n = l.length\n  let m = Math.floor(n / 2)\n  let i = Math.floor((n - 1) / 2)\n  let sum = 0\n  let j = i\n  while (j >= 0 && l[j] > l[j + 1]) {\n    sum += l[j++]\n  }\n  return sum / 2\n}\n\n/*Return median of elements in the list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  if (l.length === 0) {\n    return 0\n  }\n  let n = l.length\n  let m = Math.floor(n / 2)\n  let i = Math.floor((n - 1) / 2)\n  let sum = 0\n  let j = i\n  while (j >= 0 && l[j] > l[j + 1]) {\n    sum += l[j++]\n  }\n  return sum / 2\n}\n\n/*Return median of elements in the list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  if (l.length === 0) {\n    return 0\n  }\n  let n = l.length\n  let m = Math.floor(n / 2)\n  let i = Math.floor((n - 1) / 2)\n  let sum = 0\n  let j = i\n  while (j >= 0 && l[j] > l[j + 1]) {\n    sum += l[j++]\n  }\n  return sum / 2\n}\n\n/*Return median of elements in the list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  if (l.length === 0) {\n    return 0\n  }\n  let n = l.length\n  let m = Math.floor(n / 2)\n  let i = Math.floor((n - 1) / 2)\n  let sum = 0\n  let j = i\n  while (j >= 0 && l[j] > l[j + 1]) {\n    sum += l[j++]\n  }\n  return sum / 2\n}\n\n/*Return median of elements in the list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  if (l.length === 0) {\n    return 0\n  }\n  let n = l.length\n  let m = Math.floor(n / 2)\n  let i = Math.floor((n - 1) / 2)\n  let sum = 0\n  let j = i\n  while (j >= 0 && l[j] > l[j + 1]) {\n    sum += l[j++]\n  }\n  return sum / 2\n}\n\n/*Return median of elements in the list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  if (l.length === 0) {\n    return 0\n  }\n  let n = l.length\n  let m = Math.floor(n / 2)\n  let i = Math.floor((n - 1) / 2)\n  let sum = 0\n  let j = i\n  while (j >= 0 && l[j] > l[j + 1]) {\n    sum += l[j++]\n  }\n  return sum / 2\n}\n\n/*Return median of elements in the list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  if (l.length === 0) {\n    return 0\n  }\n  let n = l.length\n  let m = Math.floor(n / 2)\n  let i = Math.floor((n - 1) / 2)\n  let sum = 0\n  let j = i\n  while (j >= 0 && l[j] > l[j + 1]) {\n    sum += l[j++]\n  }\n  return sum / 2\n}\n\n/*Return median of elements in the list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  if (l.length === 0) {\n    return 0\n  }\n  let n = l.length\n  let m = Math.floor(n / 2)\n  let i = Math.floor((n - 1) / 2)\n  let sum = 0\n  let j = i\n  while (j >= 0 && l[j] > l[j + 1]) {\n    sum += l[j++]\n  }\n  return sum / 2\n}\n\n/*Return median of elements in the list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  if (l.length === 0) {\n    return 0\n  }\n  let n = l.length\n  let m = Math.floor(n / 2)\n  let i = Math.floor((n - 1) / 2)\n  let sum = 0\n  let j = i\n  while (j >= 0 && l[j] > l[j + 1]) {\n    sum += l[j++]\n  }\n  return sum / 2\n}\n\n/*Return median of elements in the list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  if (l.length === 0) {\n    return 0\n  }\n  let n = l.length\n  let m = Math.floor(n / 2)\n  let i = Math.floor((n - 1) / 2)\n  let sum = 0\n  let j = i\n  while (j >= 0 && l[j] > l[j + 1]) {\n    sum += l[j++]\n  }\n  return sum / 2\n}\n\n/*Return median of elements in the list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  if (l.length === 0) {\n    return 0\n  }\n  let n = l.length\n  let m = Math.floor(n / 2)\n  let i = Math.floor((n - 1) / 2)\n  let sum = 0\n  let j = i\n  while (j >= 0 && l[j] > l[j + 1]) {\n    sum += l[j++]\n  }\n  return sum / 2\n}\n\n/*Return median of elements in the list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "gc": "<|endoftext|>/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let reversedText = text\n  reversedText = reversedText.split('').reverse().join('')\n  return reversedText === text\n}\n\n/*\n  Checks if given string is a palindrome (case insensitive)\n  >>> isPalindromeCaseInsensitive('')\n  true\n  >>> isPalindromeCaseInsensitive('aba')\n  true\n  >>> isPalindromeCaseInsensitive('aaaaa')\n  true\n  >>> isPalindromeCaseInsensitive('zbcd')\n  false\n  */\nconst isPalindromeCaseInsensitive = (text) => {\n  let reversedText = text\n  reversedText = reversedText.split('').reverse().join('')\n  return reversedText.toLowerCase() === text.toLowerCase()\n}\n\n/*\n  Checks if given string is a palindrome (case sensitive)\n  >>> isPalindromeCaseSensitive('')\n  true\n  >>> isPalindromeCaseSensitive('aba')\n  true\n  >>> isPalindromeCaseSensitive('aaaaa')\n  true\n  >>> isPalindromeCaseSensitive('zbcd')\n  false\n  */\nconst isPalindromeCaseSensitive = (text) => {\n  let reversedText = text\n  reversedText = reversedText.split('').reverse().join('')\n  return reversedText.toUpperCase() === text.toUpperCase()\n}\n\n/*\n  Checks if given string is a palindrome (case insensitive)\n  >>> isPalindromeCaseInsensitiveCaseSensitive('')\n  true\n  >>> isPalindromeCaseInsensitiveCaseSensitive('aba')\n  true\n  >>> isPalindromeCaseInsensitiveCaseSensitive('aaaaa')\n  true\n  >>> isPalindromeCaseInsensitiveCaseSensitive('zbcd')\n  false\n  */\nconst isPalindromeCaseInsensitiveCaseSensitive = (text) => {\n  let reversedText = text\n  reversedText = reversedText.split('').reverse().join('')\n  return reversedText.toUpperCase() === text.toUpperCase()\n}\n\n/*\n  Checks if given string is a palindrome (case sensitive)\n  >>> isPalindromeCaseSensitiveCaseSensitive('')\n  true\n  >>> isPalindromeCaseSensitiveCaseSensitive('aba')\n  true\n  >>> isPalindromeCaseSensitiveCaseSensitive('aaaaa')\n  true\n  >>> isPalindromeCaseSensitiveCaseSensitive('zbcd')\n  false\n  */\nconst isPalindromeCaseSensitiveCaseSensitive = (text) => {\n  let reversedText = text\n  reversedText = reversedText.split('').reverse().join('')\n  return reversedText.toUpperCase() === text.toUpperCase()\n}\n\n/*\n  Checks if given string is a palindrome (case insensitive)\n  >>> isPalindromeCaseInsensitiveCaseSensitiveCaseSensitive('')\n  true\n  >>> isPalindromeCaseInsensitiveCaseSensitiveCaseSensitive('aba')\n  true\n  >>> isPalindromeCaseInsensitiveCaseSensitiveCaseSensitive('aaaaa')\n  true\n  >>> isPalindromeCaseInsensitiveCaseSensitiveCaseSensitive('zbcd')\n  false\n  */\nconst isPalindromeCaseInsensitiveCaseSensitiveCaseSensitive = (text) => {\n  let reversedText = text\n  reversedText = reversedText.split('').reverse().join('')\n  return reversedText.toUpperCase() === text.toUpperCase()\n}\n\n/*\n  Checks if given string is a palindrome (case sensitive)\n  >>> isPalindromeCaseSensitiveCaseSensitiveCaseSensitive('')\n  true\n  >>> isPalindromeCaseSensitiveCaseSensitiveCaseSensitive('aba')\n  true\n  >>> isPalindromeCaseSensitiveCaseSensitiveCaseSensitive('aaaaa')\n  true\n  >>> isPalindromeCaseSensitiveCaseSensitiveCaseSensitive('zbcd')\n  false\n  */\nconst isPalindromeCaseSensitiveCaseSensitiveCaseSensitive = (text) => {\n  let reversedText = text\n  reversedText = reversedText.split('').reverse().join('')\n  return reversedText.toUpperCase() === text.toUpperCase()\n}\n\n/*\n  Checks if given string is a palindrome (case sensitive)\n  >>> isPalindromeCaseSensitiveCaseSensitiveCaseSensitiveCaseSensitive('')\n  true\n  >>> isPalindromeCaseSensitiveCaseSensitiveCaseSensitiveCaseSensitive('aba')\n  true\n  >>> isPalindromeCaseSensitiveCaseSensitiveCaseSensitiveCaseSensitive('aaaaa')\n  true\n  >>> isPalindromeCaseSensitiveCaseSensitiveCaseSensitiveCaseSensitive('zbcd')\n  false\n  */\nconst isPalindromeCaseSensitiveCaseSensitiveCaseSensitiveCaseSensitive = (text) => {\n  let reversedText = text\n  reversedText = reversedText.split('').reverse().join('')\n  return reversedText.toUpperCase() === text.toUpperCase()\n}\n\n/*\n  Checks if given string is a palindrome (case sensitive)\n  >>> isPalindromeCaseSensitiveCaseSensitiveCaseSensitiveCaseSensitiveCaseSensitive('')\n  true\n  >>> isPalindromeCaseSensitiveCaseSensitiveCaseSensitiveCaseSensitiveCaseSensitive('aba')\n  true\n  >>> isPalindromeCaseSensitiveCaseSensitiveCaseSensitiveCaseSensitiveCaseSensitive('aaaaa')\n  true\n  >>> isPalindromeCaseSensitiveCaseSensitiveCaseSensitiveCaseSensitiveCaseSensitive('zbcd')\n  false\n  */\nconst isPalindromeCaseSensitiveCaseSensitiveCaseSensitiveCaseSensitiveCaseSensitive = (text) => {\n  let reversedText = text\n  reversedText = reversedText.split('').reverse().join('')\n  return reversedText.toUpperCase() === text.toUpperCase()\n}\n\n/*\n  Checks if given string is a palindrome (case sensitive)\n  >>> isPalindromeCaseSensitiveCaseSensitiveCaseSensitiveCaseSensitiveCaseSensitiveCaseSensitive('')\n  true\n  >>> isPalindromeCaseSensitiveCaseSensitiveCaseSensitiveCaseSensitiveCaseSensitiveCaseSensitive('aba')\n  true\n  >>> ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "gc": "<|endoftext|>/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  let r = 1;\n  for (let i = n; i > 0; i--) {\n    r = r % p;\n  }\n  return r;\n};\n\n/*\n  >>> modp(0, 3)\n  0\n  >>> modp(3, 3)\n  1\n  >>> modp(3, 5)\n  2\n  >>> modp(3, 11)\n  3\n  >>> modp(3, 21)\n  4\n  >>> modp(3, 100)\n  5\n  >>> modp(3, 101)\n  6\n  >>> modp(3, 102)\n  7\n  >>> modp(3, 103)\n  8\n  >>> modp(3, 104)\n  9\n  >>> modp(3, 105)\n  10\n  >>> modp(3, 108)\n  11\n  >>> modp(3, 109)\n  12\n  >>> modp(3, 110)\n  13\n  >>> modp(3, 111)\n  14\n  >>> modp(3, 112)\n  15\n  >>> modp(3, 113)\n  16\n  >>> modp(3, 114)\n  17\n  >>> modp(3, 115)\n  18\n  >>> modp(3, 116)\n  19\n  >>> modp(3, 117)\n  20\n  >>> modp(3, 118)\n  21\n  >>> modp(3, 119)\n  22\n  >>> modp(3, 120)\n  23\n  >>> modp(3, 121)\n  24\n  >>> modp(3, 122)\n  25\n  >>> modp(3, 123)\n  26\n  >>> modp(3, 124)\n  27\n  >>> modp(3, 125)\n  28\n  >>> modp(3, 126)\n  29\n  >>> modp(3, 127)\n  30\n  >>> modp(3, 128)\n  31\n  >>> modp(3, 129)\n  32\n  >>> modp(3, 130)\n  33\n  >>> modp(3, 131)\n  34\n  >>> modp(3, 132)\n  35\n  >>> modp(3, 133)\n  36\n  >>> modp(3, 134)\n  37\n  >>> modp(3, 135)\n  38\n  >>> modp(3, 136)\n  39\n  >>> modp(3, 137)\n  40\n  >>> modp(3, 138)\n  41\n  >>> modp(3, 139)\n  42\n  >>> modp(3, 140)\n  43\n  >>> modp(3, 141)\n  44\n  >>> modp(3, 142)\n  45\n  >>> modp(3, 143)\n  46\n  >>> modp(3, 144)\n  47\n  >>> modp(3, 145)\n  48\n  >>> modp(3, 146)\n  49\n  >>> modp(3, 147)\n  50\n  >>> modp(3, 148)\n  51\n  >>> modp(3, 149)\n  52\n  >>> modp(3, 150)\n  53\n  >>> modp(3, 151)\n  54\n  >>> modp(3, 152)\n  55\n  >>> modp(3, 153)\n  56\n  >>> modp(3, 154)\n  57\n  >>> modp(3, 155)\n  58\n  >>> modp(3, 156)\n  59\n  >>> modp(3, 157)\n  60\n  >>> modp(3, 158)\n  61\n  >>> modp(3, 159)\n  62\n  >>> modp(3, 160)\n  63\n  >>> modp(3, 161)\n  64\n  >>> modp(3, 162)\n  65\n  >>> modp(3, 163)\n  66\n  >>> modp(3, 164)\n  67\n  >>> modp(3, 165)\n  68\n  >>> modp(3, 166)\n  69\n  >>> modp(3, 167)\n  70\n  >>> modp(3, 168)\n  71\n  >>> modp(3, 169)\n  72\n  >>> modp(3, 170)\n  73\n  >>> modp(3, 171)\n  74\n  >>> modp(3, 172)\n  75\n  >>> modp(3, 173)\n  76\n  >>> modp(3, 174)\n  77\n  >>> modp(3, 175)\n  78\n  >>> modp(3, 176)\n  79\n  >>> modp(3, 177)\n  80\n  >>> modp(3, 178)\n  81\n  >>> modp(3, 179)\n  82\n  >>> modp(3, 180)\n  83\n  >>> modp(3, 181)\n  84\n  >>> modp(3, 182)\n  85\n  >>> modp(3, 183)\n  86\n  >>> modp(3, 184)\n  87\n  >>> modp(3, 185)\n  88\n  >>> modp(3, 186)\n  89\n  >>> modp(3, 187)\n  90\n  >>> modp(3, 188)\n  91\n  >>> modp(3, 189)\n  92\n  >>> modp(3, 190)\n  93\n  >>> modp(3, 191)\n  94\n  >>> modp(3, 192)\n  95\n  >>> modp(3, 193)\n  96\n  >>> modp(3, 194)\n  97\n  >>> modp(3, 195)\n  98\n  >>> modp(3, 196)\n  99\n  >>> modp(3, 197)\n  100\n  >>> modp(3, 198)\n  101\n  >>> modp(3, 199)\n  102\n  >>> modp(3, 200)\n  103\n  >>> modp(3, 201)\n  104\n  >>> modp(3, 202)\n  105\n  >>> modp(3, 203)\n  106\n  >>> modp(3, 204)\n  107\n  >>> modp(3, 205)\n  108\n  >>> modp(3, 206)\n  109\n  >>> modp(3, 207)\n  110\n  >>> modp(3, 208)\n  111\n  >>> modp(3, 209)\n  112\n  >>> modp(3, 210)\n  113\n  >>> modp(3, 211)\n  114\n  >>> modp(3, 212)\n  115\n  >>> modp(3, 213)\n  116\n  >>> modp(3, 214)\n  117\n  >>> modp(3, 215)\n  118\n  >>> modp(3, 216)\n  119\n  >>> modp(3, 217)\n  120\n  >>> modp(3, 218)\n  121\n  >>> modp(3, 219)\n  122\n  >>> modp(3, 220)\n  123\n  >>> modp(3, 221)\n  124\n  >>> modp(3, 222)\n  125\n  >>> modp(3, 223)\n  126\n  >>> modp(3, 224)\n  127\n  >>> modp(3, 225)\n  128\n  >>> modp(3, 226)\n  129\n  >>> modp(3, ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> interpserse([], 4)\n  []\n  >>> interpserse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst interpserse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "interpserse", "gc": "<|endoftext|>/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> interpserse([], 4)\n  []\n  >>> interpserse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst interpserse = (numbers, delimeter) => {\n  const result = []\n  let i = 0\n  while (i < numbers.length) {\n    const number = numbers[i]\n    const nextNumber = numbers[i + 1]\n    if (number < delimeter) {\n      result.push(number)\n      i++\n    } else if (number > delimeter) {\n      result.push(delimeter)\n      i++\n    } else {\n      result.push(nextNumber)\n      i++\n    }\n  }\n  return result\n}\n\n// Given a number `num`, return its prime factorization\nconst primeFactorization = (num) => {\n  const result = []\n  let factor = 1\n  while (factor <= num) {\n    if (num % factor === 0) {\n      result.push(factor)\n      factor *= 2\n    } else {\n      break\n    }\n  }\n  return result\n}\n\n// Given a number `num`, return its prime factorization in reverse order\nconst primeFactorizationReverse = (num) => {\n  const result = []\n  let factor = 1\n  while (factor <= num) {\n    if (num % factor === 0) {\n      result.unshift(factor)\n      factor *= 2\n    } else {\n      break\n    }\n  }\n  return result\n}\n\n// Given a number `num`, return its prime factorization in reverse order in reverse order\nconst primeFactorizationReverseReverse = (num) => {\n  const result = []\n  let factor = 1\n  while (factor <= num) {\n    if (num % factor === 0) {\n      result.unshift(factor * 2)\n      factor *= 2\n    } else {\n      break\n    }\n  }\n  return result\n}\n\n// Given a number `num`, return its prime factorization in reverse order in reverse order\nconst primeFactorizationReverseReverseReverseReverse = (num) => {\n  const result = []\n  let factor = 1\n  while (factor <= num) {\n    if (num % factor === 0) {\n      result.unshift(factor * 2)\n      factor *= 2\n    } else {\n      break\n    }\n  }\n  return result\n}\n\n// Given a number `num`, return its prime factorization in reverse order in reverse order in reverse order\nconst primeFactorizationReverseReverseReverseReverseReverseReverse = (num) => {\n  const result = []\n  let factor = 1\n  while (factor <= num) {\n    if (num % factor === 0) {\n      result.unshift(factor * 2)\n      factor *= 2\n    } else {\n      break\n    }\n  }\n  return result\n}\n\n// Given a number `num`, return its prime factorization in reverse order in reverse order in reverse order in reverse order\nconst primeFactorizationReverseReverseReverseReverseReverseReverseReverseReverseReverse = (num) => {\n  const result = []\n  let factor = 1\n  while (factor <= num) {\n    if (num % factor === 0) {\n      result.unshift(factor * 2)\n      factor *= 2\n    } else {\n      break\n    }\n  }\n  return result\n}\n\n// Given a number `num`, return its prime factorization in reverse order in reverse order in reverse order in reverse order in reverse order\nconst primeFactorizationReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse = (num) => {\n  const result = []\n  let factor = 1\n  while (factor <= num) {\n    if (num % factor === 0) {\n      result.unshift(factor * 2)\n      factor *= 2\n    } else {\n      break\n    }\n  }\n  return result\n}\n\n// Given a number `num`, return its prime factorization in reverse order in reverse order in reverse order in reverse order in reverse order\nconst primeFactorizationReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse = (num) => {\n  const result = []\n  let factor = 1\n  while (factor <= num) {\n    if (num % factor === 0) {\n      result.unshift(factor * 2)\n      factor *= 2\n    } else {\n      break\n    }\n  }\n  return result\n}\n\n// Given a number `num`, return its prime factorization in reverse order in reverse order in reverse order in reverse order in reverse order in reverse order\nconst primeFactorizationReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse = (num) => {\n  const result = []\n  let factor = 1\n  while (factor <= num) {\n    if (num % factor === 0) {\n      result.unshift(factor * 2)\n      factor *= 2\n    } else {\n      break\n    }\n  }\n  return result\n}\n\n// Given a number `num`, return its prime factorization in reverse order in reverse order in reverse order in reverse order in reverse order in reverse order in reverse order\nconst primeFactorizationReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodSehift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodSehift", "gc": "<|endoftext|>/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodSehift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeSehift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 - 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeSehift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 - 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst encodeSehift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst encodeSehift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst encodeSehift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst encodeSehift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst encodeSehift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst encodeSehift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst encodeSehift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst encodeSehift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst encodeSehift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst encodeSehift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst encodeSehift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst encodeSehift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst encodeSehift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst encodeSehift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst encodeSehift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst encodeSehift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst encodeSehift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst encodeSehift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/51", "prompt": "/*\n  remoevVowels is a function that takes string and returns string without vowels.\n  >>> remoevVowels('')\n  ''\n  >>> remoevVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> remoevVowels('abcdef')\n  'bcdf'\n  >>> remoevVowels('aaaaa')\n  ''\n  >>> remoevVowels('aaBAA')\n  'B'\n  >>> remoevVowels('zbcd')\n  'zbcd'\n  */\nconst remoevVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "remoevVowels", "gc": "<|endoftext|>/*\n  remoevVowels is a function that takes string and returns string without vowels.\n  >>> remoevVowels('')\n  ''\n  >>> remoevVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> remoevVowels('abcdef')\n  'bcdf'\n  >>> remoevVowels('aaaaa')\n  ''\n  >>> remoevVowels('aaBAA')\n  'B'\n  >>> remoevVowels('zbcd')\n  'zbcd'\n  */\nconst remoevVowels = (text) => {\n  let vowels = 'aeiouAEIOU'\n  let vowelsLength = vowels.length\n  let vowelsIndex = 0\n  let vowelsText = ''\n  let vowelsLengthText = ''\n  let vowelsIndexText = ''\n  let vowelsTextLength = 0\n  let vowelsIndexTextLength = 0\n  let vowelsTextIndex = 0\n  let vowelsIndexTextIndex = 0\n  let vowelsTextIndexText = 0\n  let vowelsTextIndexTextLength = 0\n  let vowelsTextIndexTextIndex = 0\n  let vowelsTextIndexTextIndexLength = 0\n  let vowelsTextIndexTextIndexIndex = 0\n  let vowelsTextIndexTextIndexIndexLength = 0\n  let vowelsTextIndexTextIndexIndexIndex = 0\n  let vowelsTextIndexTextIndexIndexIndexLength = 0\n  let vowelsTextIndexTextIndexIndexIndexIndex = 0\n  let vowelsTextIndexTextIndexIndexIndexIndexLength = 0\n  let vowelsTextIndexTextIndexIndexIndexIndexIndex = 0\n  let vowelsTextIndexTextIndexIndexIndexIndexLength = 0\n  let vowelsTextIndexTextIndexIndexIndexIndexIndex = 0\n  let vowelsTextIndexTextIndexIndexIndexIndexLength = 0\n  let vowelsTextIndexTextIndexIndexIndexIndexIndex = 0\n  let vowelsTextIndexTextIndexIndexIndexIndexLength = 0\n  let vowelsTextIndexTextIndexIndexIndexIndexIndex = 0\n  let vowelsTextIndexTextIndexIndexIndexIndexIndexLength = 0\n  let vowelsTextIndexTextIndexIndexIndexIndexIndexIndex = 0\n  let vowelsTextIndexTextIndexIndexIndexIndexIndexLength = 0\n  let vowelsTextIndexTextIndexIndexIndexIndexIndexIndex = 0\n  let vowelsTextIndexTextIndexIndexIndexIndexIndexLength = 0\n  let vowelsTextIndexTextIndexIndexIndexIndexIndexIndex = 0\n  let vowelsTextIndexTextIndexIndexIndexIndexIndexLength = 0\n  let vowelsTextIndexTextIndexIndexIndexIndexIndexIndex = 0\n  let vowelsTextIndexTextIndexIndexIndexIndexIndexLength = 0\n  let vowelsTextIndexTextIndexIndexIndexIndexIndexIndex = 0\n  let vowelsTextIndexTextIndexIndexIndexIndexIndexIndexLength = 0\n  let vowelsTextIndexTextIndexIndexIndexIndexIndexIndexIndex = 0\n  let vowelsTextIndexTextIndexIndexIndexIndexIndexIndexLength = 0\n  let vowelsTextIndexTextIndexIndexIndexIndexIndexIndexIndex = 0\n  let vowelsTextIndexTextIndexIndexIndexIndexIndexIndexLength = 0\n  let vowelsTextIndexTextIndexIndexIndexIndexIndexIndexIndex = 0\n  let vowelsTextIndexTextIndexIndexIndexIndexIndexIndexLength = 0\n  let vowelsTextIndexTextIndexIndexIndexIndexIndexIndex = 0\n  let vowelsTextIndexTextIndexIndexIndexIndexIndexLength = 0\n  let vowelsTextIndexTextIndexIndexIndexIndexIndexIndex = 0\n  let vowelsTextIndexTextIndexIndexIndexIndexIndexIndexLength = 0\n  let vowelsTextIndexTextIndexIndexIndexIndexIndexIndex = 0\n  let vowelsTextIndexTextIndexIndexIndexIndexIndexLength = 0\n  let vowelsTextIndexTextIndexIndexIndexIndexIndexIndex = 0\n  let vowelsTextIndexTextIndexIndexIndexIndexIndexLength = 0\n  let vowelsTextIndexTextIndexIndexIndexIndexIndex = 0\n  let vowelsTextIndexTextIndexIndexIndexIndexIndexLength = 0\n  let vowelsTextIndexTextIndexIndexIndexIndexIndex = 0\n  let vowelsTextIndexTextIndexIndexIndexIndexIndexLength = 0\n  let vowelsTextIndexTextIndexIndexIndexIndexIndex = 0\n  let vowelsTextIndexTextIndexIndexIndexIndexIndexLength = 0\n  let vowelsTextIndexTextIndexIndexIndexIndexIndexIndex = 0\n  let vowelsTextIndexTextIndexIndexIndexIndexIndexLength = 0\n  let vowelsTextIndexTextIndexIndexIndexIndexIndex = 0\n  let vowelsTextIndexTextIndexIndexIndexIndexLength = 0\n  let vowelsTextIndexTextIndexIndexIndexIndexIndex = 0\n  let vowelsTextIndexTextIndexIndexIndexIndexLength = 0\n  let vowelsTextIndexTextIndexIndexIndexIndexIndex = 0\n  let vowelsTextIndexTextIndexIndexIndexIndexLength = 0\n  let vowelsTextIndexTextIndexIndexIndexIndex = 0\n  let vowelsTextIndexTextIndexIndexIndexIndexLength = 0\n  let vowelsTextIndexTextIndexIndexIndexIndex = 0\n  let vowelsTextIndexTextIndexIndexIndexIndexLength = 0\n  let vowelsTextIndexTextIndexIndexIndexIndex = 0\n  let vowelsTextIndexTextIndexIndexIndexLength = 0\n  let vowelsTextIndexTextIndexIndexIndex = 0\n  let vowelsTextIndexTextIndexIndexLength = 0\n  let vowelsTextIndexTextIndexIndex = 0\n  let vowelsTextIndexTextIndexLength = 0\n  let vowelsTextIndexTextIndex = 0\n  let vowelsTextIndexTextIndexLength = 0\n  let vowelsTextIndexTextIndex = 0\n  let vowelsTextIndexTextIndexLength = 0\n  let vowelsTextIndexTextIndex = 0\n  let vowelsTextIndexTextIndexLength = 0\n  let vowelsTextIndexTextIndex = 0\n  let vowelsTextIndexTextIndexLength = 0\n  let vowelsTextIndexTextIndex = 0\n  let vowelsTextIndexTextIndexLength = 0\n  let vowelsTextIndexTextIndex = 0\n  let vowelsTextIndexTextIndexLength = 0\n  let vowelsTextIndexTextIndex = 0\n  let vowelsTextIndexTextIndexLength = 0\n  let vowelsTextIndexTextIndex = 0\n  let vowelsTextIndexTextIndexLength = 0\n  let vowelsTextIndexTextIndex = 0\n  let vowelsTextIndexTextIndexLength = 0\n  let vowelsTextIndexTextIndex = 0\n  let vowelsTextIndexTextIndexLength = 0\n  let vowelsTextIndexTextIndex = 0\n  let vowelsTextIndexTextIndexLength = 0\n  let vowelsTextIndexTextIndex = 0\n  let vowelsTextIndexTextIndexLength = 0\n  let vowelsTextIndexTextIndex = 0\n  let vowelsTextIndexTextIndexLength = 0\n  let vowelsTextIndexTextIndex = 0\n  let vowelsTextIndexTextIndexLength = 0\n  let vowelsTextIndexTextIndex = 0\n  let vowelsTextIndexTextIndexLength = 0\n  let vowelsTextIndexTextIndex = 0\n  let vowelsTextIndexTextIndexLength = 0\n  let vowelsTextIndexTextIndex = 0\n  let vowelsTextIndexTextIndexLength = 0\n  let vowelsTextIndexTextIndex = 0\n  let vowelsTextIndexTextIndexLength = 0\n  let vowelsTextIndexTextIndex = 0\n  let vowelsTextIndexTextIndexLength = 0\n  let vowelsTextIndexTextIndex = 0\n  let vowelsTextIndexTextIndexLength = 0\n  let vowelsTextIndexTextIndex = 0\n  let vowelsTextIndexTextIndexLength = 0\n  let vowelsTextIndexTextIndex = 0\n  let vowelsTextIndexTextIndexLength = 0\n  let vowelsTextIndexTextIndex = 0\n  let vowelsTextIndexTextIndexLength = 0\n  let vowelsTextIndexTextIndex = 0\n  let vowelsTextIndexTextIndexLength = 0\n  let vowelsTextIndexTextIndex = 0\n  let vowelsTextIndexTextIndex", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers in the list l are below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "gc": "<|endoftext|>/*Return true if all numbers in the list l are below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  return l.every(n => n < t);\n};\n\n/**\n * Return true if all numbers in the list l are above threshold t.\n  >>> aboveThreshold([1, 2, 4, 10], 100)\n  true\n  >>> aboveThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst aboveThreshold = (l, t) => {\n  return l.every(n => n > t);\n};\n\n/**\n * Return true if all numbers in the list l are equal to t.\n  >>> equalTo([1, 2, 4, 10], 100)\n  true\n  >>> equalTo([1, 20, 4, 10], 5)\n  false\n  */\nconst equalTo = (l, t) => {\n  return l.every(n => n === t);\n};\n\n/**\n * Return true if all numbers in the list l are greater than t.\n  >>> greaterThan([1, 2, 4, 10], 100)\n  true\n  >>> greaterThan([1, 20, 4, 10], 5)\n  false\n  */\nconst greaterThan = (l, t) => {\n  return l.every(n => n > t);\n};\n\n/**\n * Return true if all numbers in the list l are less than t.\n  >>> lessThan([1, 2, 4, 10], 100)\n  true\n  >>> lessThan([1, 20, 4, 10], 5)\n  false\n  */\nconst lessThan = (l, t) => {\n  return l.every(n => n < t);\n};\n\n/**\n * Return true if all numbers in the list l are divisible by t.\n  >>> divisibleBy([1, 2, 4, 10], 100)\n  true\n  >>> divisibleBy([1, 20, 4, 10], 5)\n  false\n  */\nconst divisibleBy = (l, t) => {\n  return l.every(n => n % t === 0);\n};\n\n/**\n * Return true if all numbers in the list l are divisible by t.\n  >>> divisibleBy([1, 2, 4, 10], 5)\n  true\n  >>> divisibleBy([1, 20, 4, 10], 100)\n  false\n  */\nconst divisibleBy = (l, t) => {\n  return l.every(n => n % t === 0);\n};\n\n/**\n * Return true if all numbers in the list l are divisible by t.\n  >>> divisibleBy([1, 2, 4, 10], 5)\n  true\n  >>> divisibleBy([1, 20, 4, 10], 100)\n  false\n  */\nconst divisibleBy = (l, t) => {\n  return l.every(n => n % t === 0);\n};\n\n/**\n * Return true if all numbers in the list l are divisible by t.\n  >>> divisibleBy([1, 2, 4, 10], 5)\n  true\n  >>> divisibleBy([1, 20, 4, 10], 100)\n  false\n  */\nconst divisibleBy = (l, t) => {\n  return l.every(n => n % t === 0);\n};\n\n/**\n * Return true if all numbers in the list l are divisible by t.\n  >>> divisibleBy([1, 2, 4, 10], 5)\n  true\n  >>> divisibleBy([1, 20, 4, 10], 100)\n  false\n  */\nconst divisibleBy = (l, t) => {\n  return l.every(n => n % t === 0);\n};\n\n/**\n * Return true if all numbers in the list l are divisible by t.\n  >>> divisibleBy([1, 2, 4, 10], 5)\n  true\n  >>> divisibleBy([1, 20, 4, 10], 100)\n  false\n  */\nconst divisibleBy = (l, t) => {\n  return l.every(n => n % t === 0);\n};\n\n/**\n * Return true if all numbers in the list l are divisible by t.\n  >>> divisibleBy([1, 2, 4, 10], 5)\n  true\n  >>> divisibleBy([1, 20, 4, 10], 100)\n  false\n  */\nconst divisibleBy = (l, t) => {\n  return l.every(n => n % t === 0);\n};\n\n/**\n * Return true if all numbers in the list l are divisible by t.\n  >>> divisibleBy([1, 2, 4, 10], 5)\n  true\n  >>> divisibleBy([1, 20, 4, 10], 100)\n  false\n  */\nconst divisibleBy = (l, t) => {\n  return l.every(n => n % t === 0);\n};\n\n/**\n * Return true if all numbers in the list l are divisible by t.\n  >>> divisibleBy([1, 2, 4, 10], 5)\n  true\n  >>> divisibleBy([1, 20, 4, 10], 100)\n  false\n  */\nconst divisibleBy = (l, t) => {\n  return l.every(n => n % t === 0);\n};\n\n/**\n * Return true if all numbers in the list l are divisible by t.\n  >>> divisibleBy([1, 2, 4, 10], 5)\n  true\n  >>> divisibleBy([1, 20, 4, 10], 100)\n  false\n  */\nconst divisibleBy = (l, t) => {\n  return l.every(n => n % t === 0);\n};\n\n/**\n * Return true if all numbers in the list l are divisible by t.\n  >>> divisibleBy([1, 2, 4, 10], 5)\n  true\n  >>> divisibleBy([1, 20, 4, 10], 100)\n  false\n  */\nconst divisibleBy = (l, t) => {\n  return l.every(n => n % t === 0);\n};\n\n/**\n * Return true if all numbers in the list l are divisible by t.\n  >>> divisibleBy([1, 2, 4, 10], 5)\n  true\n  >>> divisibleBy([1, 20, 4, 10], 100)\n  false\n  */\nconst divisibleBy = (l, t) => {\n  return l.every(n => n % t === 0);\n};\n\n/**\n * Return true if all numbers in the list l are divisible by t.\n  >>> divisibleBy([1, 2, 4, 10], 5)\n  true\n  >>> divisibleBy([1, 20, 4, 10], 100)\n  false\n  */\nconst divisibleBy = (l, t) => {\n  return l.every(n => n % t === 0);\n};\n\n/**\n * Return true if all numbers in the list l are divisible by t.\n  >>> divisibleBy([1, 2, 4, 10], 5)\n  true\n  >>> divisibleBy([1, 20, 4, 10], 100)\n  false\n  */\nconst divisibleBy = (l, t) => {\n  return l.every(n => n % t === 0);\n};\n\n/**\n * Return true if all numbers in the list l are divisible by t.\n  >>> divisibleBy([1, 2, 4, 10], 5)\n  true\n  >>> divisibleBy([1, 20, 4, 10], 100)\n  false\n  */\nconst divisibleBy = (l, t) => {\n  return l.every(n => n % t === 0);\n};\n\n/**\n * Return true if all numbers in the list l are divisible by t.\n  >>> divisibleBy([1, 2, 4, 10], 5)\n  true\n  >>> divisibleBy([1, 20, 4, 10], 100)\n  false\n  */\nconst divisibleBy = (l, t) => {\n  return l.every(n => n % t === 0);\n};\n\n/**\n * Return true if all numbers in the list l are divisible by t.\n  >>> divisibleBy([1, 2, 4, 10], 5)\n  true\n  >>> divisibleBy([1, 20, 4, 10], 100)\n  false\n  */\nconst divisibleBy = (l, t) => {\n  return l.every(n => n % t === 0);\n};\n\n/**\n * Return true if all numbers in the list l are divisible by t.\n  >>> divisibleBy([1, 2, 4, 10], 5)\n  true\n  >>> divisibleBy([1, 20, 4, 10], 100)", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "gc": "<|endoftext|>/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> subtract(2, 3)\n  1\n  >>> subtract(5, 7)\n  -1\n  */\nconst subtract = (x, y) => {\n  return x - y;\n};\n\n/*\n  >>> multiply(2, 3)\n  2\n  >>> multiply(5, 7)\n  10\n  */\nconst multiply = (a, b) => {\n  return a * b;\n};\n\n/*\n  >>> divide(2, 3)\n  2\n  >>> divide(5, 7)\n  1\n  */\nconst divide = (x, y) => {\n  return x / y;\n};\n\n/*\n  >>> mod(2, 3)\n  2\n  >>> mod(5, 7)\n  1\n  */\nconst mod = (a, b) => {\n  return a % b;\n};\n\n/*\n  >>> power(2, 3)\n  2\n  >>> power(5, 7)\n  1\n  */\nconst power = (a, b) => {\n  return a ** b;\n};\n\n/*\n  >>> mod(2, 3)\n  2\n  >>> mod(5, 7)\n  1\n  */\nconst modPower = (a, b) => {\n  return a % b;\n};\n\n/*\n  >>> power(2, 3)\n  2\n  >>> power(5, 7)\n  1\n  */\nconst powMod = (a, b) => {\n  return a ** b;\n};\n\n/*\n  >>> power(2, 3)\n  2\n  >>> power(5, 7)\n  1\n  */\nconst powModPower = (a, b) => {\n  return a % b;\n};\n\n/*\n  >>> power(2, 3)\n  2\n  >>> power(5, 7)\n  1\n  */\nconst powModPowMod = (a, b) => {\n  return a ** b;\n};\n\n/*\n  >>> power(2, 3)\n  2\n  >>> power(5, 7)\n  1\n  */\nconst powModPowModPower = (a, b) => {\n  return a % b;\n};\n\n/*\n  >>> power(2, 3)\n  2\n  >>> power(5, 7)\n  1\n  */\nconst powModPowModPower = (a, b) => {\n  return a ** b;\n};\n\n/*\n  >>> power(2, 3)\n  2\n  >>> power(5, 7)\n  1\n  */\nconst powModPowModPowMod = (a, b) => {\n  return a ** b;\n};\n\n/*\n  >>> power(2, 3)\n  2\n  >>> power(5, 7)\n  1\n  */\nconst powModPowModPowModPower = (a, b) => {\n  return a % b;\n};\n\n/*\n  >>> power(2, 3)\n  2\n  >>> power(5, 7)\n  1\n  */\nconst powModPowModPowModPower = (a, b) => {\n  return a ** b;\n};\n\n/*\n  >>> power(2, 3)\n  2\n  >>> power(5, 7)\n  1\n  */\nconst powModPowModPowModPower = (a, b) => {\n  return a % b;\n};\n\n/*\n  >>> power(2, 3)\n  2\n  >>> power(5, 7)\n  1\n  */\nconst powModPowModPowModPower = (a, b) => {\n  return a ** b;\n};\n\n/*\n  >>> power(2, 3)\n  2\n  >>> power(5, 7)\n  1\n  */\nconst powModPowModPowModPower = (a, b) => {\n  return a % b;\n};\n\n/*\n  >>> power(2, 3)\n  2\n  >>> power(5, 7)\n  1\n  */\nconst powModPowModPowModPower = (a, b) => {\n  return a ** b;\n};\n\n/*\n  >>> power(2, 3)\n  2\n  >>> power(5, 7)\n  1\n  */\nconst powModPowModPowModPower = (a, b) => {\n  return a % b;\n};\n\n/*\n  >>> power(2, 3)\n  2\n  >>> power(5, 7)\n  1\n  */\nconst powModPowModPowModPower = (a, b) => {\n  return a ** b;\n};\n\n/*\n  >>> power(2, 3)\n  2\n  >>> power(5, 7)\n  1\n  */\nconst powModPowModPowModPower = (a, b) => {\n  return a % b;\n};\n\n/*\n  >>> power(2, 3)\n  2\n  >>> power(5, 7)\n  1\n  */\nconst powModPowModPowModPower = (a, b) => {\n  return a ** b;\n};\n\n/*\n  >>> power(2, 3)\n  2\n  >>> power(5, 7)\n  1\n  */\nconst powModPowModPowModPower = (a, b) => {\n  return a % b;\n};\n\n/*\n  >>> power(2, 3)\n  2\n  >>> power(5, 7)\n  1\n  */\nconst powModPowModPowModPower = (a, b) => {\n  return a ** b;\n};\n\n/*\n  >>> power(2, 3)\n  2\n  >>> power(5, 7)\n  1\n  */\nconst powModPowModPowModPower = (a, b) => {\n  return a % b;\n};\n\n/*\n  >>> power(2, 3)\n  2\n  >>> power(5, 7)\n  1\n  */\nconst powModPowModPowModPower = (a, b) => {\n  return a ** b;\n};\n\n/*\n  >>> power(2, 3)\n  2\n  >>> power(5, 7)\n  1\n  */\nconst powModPowModPowModPower = (a, b) => {\n  return a % b;\n};\n\n/*\n  >>> power(2, 3)\n  2\n  >>> power(5, 7)\n  1\n  */\nconst powModPowModPowModPower = (a, b) => {\n  return a ** b;\n};\n\n/*\n  >>> power(2, 3)\n  2\n  >>> power(5, 7)\n  1\n  */\nconst powModPowModPowModPower = (a, b) => {\n  return a % b;\n};\n\n/*\n  >>> power(2, 3)\n  2\n  >>> power(5, 7)\n  1\n  */\nconst powModPowModPowModPower = (a, b) => {\n  return a ** b;\n};\n\n/*\n  >>> power(2, 3)\n  2\n  >>> power(5, 7)\n  1\n  */\nconst powModPowModPowModPower = (a, b) => {\n  return a % b;\n};\n\n/*\n  >>> power(2, 3)\n  2\n  >>> power(5, 7)\n  1\n  */\nconst powModPowModPowModPower = (a, b) => {\n  return a ** b;\n};\n\n/*\n  >>> power(2, 3)\n  2\n  >>> power(5, 7)\n  1\n  */\nconst powModPowModPowModPower = (a, b) => {\n  return a % b;\n};\n\n/*\n  >>> power(2, 3)\n  2\n  >>> power(5, 7)\n  1\n  */\nconst powModPowModPowModPower = (a, b) => {\n  return a ** b;\n};\n\n/*\n  >>> power(2, 3)\n  2\n  >>> power(5, 7)\n  1\n  */\nconst powModPowModPowModPower = (a, b) => {\n  return a % b;\n};\n\n/*\n  >>> power(2, 3)\n  2\n  >>> power(5, 7)\n  1\n  */\nconst powModPowModPowModPower = (a, b) => {\n  return a ** b;\n};\n\n/*\n  >>> power(2, 3)\n  2\n  >>> power(5, 7)\n  1\n  */\nconst powModPowModPowModPower = (a, b) => {\n  return a % b;\n};\n\n/*\n  >>> power(2, 3)\n  2\n  >>> power(5, 7)\n  1\n  */\nconst powModPowModPowModPower = (a, b) => {", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two words have the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "gc": "<|endoftext|>/*\n  Check if two words have the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  return s0.length === s1.length && s0.every((c, i) => c === s1[i])\n}\n\n/*\n  Check if two words have the same words.\n  >>> sameWords('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameWords('abcd', 'dddddddabc')\n  true\n  >>> sameWords('dddddddabc', 'abcd')\n  true\n  >>> sameWords('eabcd', 'dddddddabc')\n  false\n  >>> sameWords('abcd', 'dddddddabce')\n  false\n  >>> sameWords('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameWords = (s0, s1) => {\n  return s0.length === s1.length && s0.every((c, i) => c.toLowerCase() === s1[i].toLowerCase())\n}\n\n/*\n  Check if two words have the same words.\n  >>> sameWords('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameWords('abcd', 'dddddddabc')\n  true\n  >>> sameWords('dddddddabc', 'abcd')\n  true\n  >>> sameWords('eabcd', 'dddddddabc')\n  false\n  >>> sameWords('abcd', 'dddddddabce')\n  false\n  >>> sameWords('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameWordsIgnoreCase = (s0, s1) => {\n  return s0.length === s1.length && s0.every((c, i) => c.toLowerCase() === s1[i].toLowerCase())\n}\n\n/*\n  Check if two words have the same words.\n  >>> sameWords('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameWords('abcd', 'dddddddabc')\n  true\n  >>> sameWords('dddddddabc', 'abcd')\n  true\n  >>> sameWords('eabcd', 'dddddddabc')\n  false\n  >>> sameWords('abcd', 'dddddddabce')\n  false\n  >>> sameWords('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameWordsIgnoreCaseIgnoreCase = (s0, s1) => {\n  return s0.length === s1.length && s0.every((c, i) => c.toLowerCase() === s1[i].toLowerCase())\n}\n\n/*\n  Check if two words have the same words.\n  >>> sameWords('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameWords('abcd', 'dddddddabc')\n  true\n  >>> sameWords('dddddddabc', 'abcd')\n  true\n  >>> sameWords('eabcd', 'dddddddabc')\n  false\n  >>> sameWords('abcd', 'dddddddabce')\n  false\n  >>> sameWords('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameWordsIgnoreCaseIgnoreCaseIgnoreCase = (s0, s1) => {\n  return s0.length === s1.length && s0.every((c, i) => c.toLowerCase() === s1[i].toLowerCase())\n}\n\n/*\n  Check if two words have the same words.\n  >>> sameWords('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameWords('abcd', 'dddddddabc')\n  true\n  >>> sameWords('dddddddabc', 'abcd')\n  true\n  >>> sameWords('eabcd', 'dddddddabc')\n  false\n  >>> sameWords('abcd', 'dddddddabce')\n  false\n  >>> sameWords('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameWordsIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCase = (s0, s1) => {\n  return s0.length === s1.length && s0.every((c, i) => c.toLowerCase() === s1[i].toLowerCase())\n}\n\n/*\n  Check if two words have the same words.\n  >>> sameWords('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameWords('abcd', 'dddddddabc')\n  true\n  >>> sameWords('dddddddabc', 'abcd')\n  true\n  >>> sameWords('eabcd', 'dddddddabc')\n  false\n  >>> sameWords('abcd', 'dddddddabce')\n  false\n  >>> sameWords('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameWordsIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCase = (s0, s1) => {\n  return s0.length === s1.length && s0.every((c, i) => c.toLowerCase() === s1[i].toLowerCase())\n}\n\n/*\n  Check if two words have the same words.\n  >>> sameWords('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameWords('abcd', 'dddddddabc')\n  true\n  >>> sameWords('dddddddabc', 'abcd')\n  true\n  >>> sameWords('eabcd', 'dddddddabc')\n  false\n  >>> sameWords('abcd', 'dddddddabce')\n  false\n  >>> sameWords('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameWordsIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCase = (s0, s1) => {\n  return s0.length === s1.length && s0.every((c, i) => c.toLowerCase() === s1[i].toLowerCase())\n}\n\n/*\n  Check if two words have the same words.\n  >>> sameWords('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameWords('abcd', 'dddddddabc')\n  true\n  >>> sameWords('dddddddabc', 'abcd')\n  true\n  >>> sameWords('eabcd', 'dddddddabc')\n  false\n  >>> sameWords('abcd', 'dddddddabce')\n  false\n  >>> sameWords('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameWordsIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCase = (s0, s1) => {\n  return s0.length === s1.length && s0.every((c, i) => c.toLowerCase() === s1[i].toLowerCase())\n}\n\n/*\n  Check if two words have the same words.\n  >>> sameWords('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameWords('abcd', 'dddddddabc')\n  true\n  >>> sameWords('dddddddabc', 'abcd')\n  true\n  >>> sameWords('eabcd', 'dddddddabc')\n  false\n  >>> sameWords('abcd', 'dddddddabce')\n  false\n  ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "gc": "<|endoftext|>/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n <= 1) return 1;\n  return fib(n-1) + fib(n-2);\n};\n\n/*\n  >>> fib(5)\n  55\n  >>> fib(4)\n  55\n  >>> fib(3)\n  55\n  >>> fib(2)\n  55\n  >>> fib(7)\n  55\n  >>> fib(6)\n  55\n  >>> fib(5)\n  55\n  >>> fib(4)\n  55\n  >>> fib(3)\n  55\n  >>> fib(2)\n  55\n  >>> fib(7)\n  55\n  >>> fib(6)\n  55\n  >>> fib(5)\n  55\n  >>> fib(4)\n  55\n  >>> fib(3)\n  55\n  >>> fib(2)\n  55\n  >>> fib(7)\n  55\n  >>> fib(6)\n  55\n  >>> fib(5)\n  55\n  >>> fib(4)\n  55\n  >>> fib(3)\n  55\n  >>> fib(2)\n  55\n  >>> fib(7)\n  55\n  >>> fib(6)\n  55\n  >>> fib(5)\n  55\n  >>> fib(4)\n  55\n  >>> fib(3)\n  55\n  >>> fib(2)\n  55\n  >>> fib(7)\n  55\n  >>> fib(6)\n  55\n  >>> fib(5)\n  55\n  >>> fib(4)\n  55\n  >>> fib(3)\n  55\n  >>> fib(2)\n  55\n  >>> fib(7)\n  55\n  >>> fib(6)\n  55\n  >>> fib(5)\n  55\n  >>> fib(4)\n  55\n  >>> fib(3)\n  55\n  >>> fib(2)\n  55\n  >>> fib(7)\n  55\n  >>> fib(6)\n  55\n  >>> fib(5)\n  55\n  >>> fib(4)\n  55\n  >>> fib(3)\n  55\n  >>> fib(2)\n  55\n  >>> fib(7)\n  55\n  >>> fib(6)\n  55\n  >>> fib(5)\n  55\n  >>> fib(4)\n  55\n  >>> fib(3)\n  55\n  >>> fib(2)\n  55\n  >>> fib(7)\n  55\n  >>> fib(6)\n  55\n  >>> fib(5)\n  55\n  >>> fib(4)\n  55\n  >>> fib(3)\n  55\n  >>> fib(2)\n  55\n  >>> fib(7)\n  55\n  >>> fib(6)\n  55\n  >>> fib(5)\n  55\n  >>> fib(4)\n  55\n  >>> fib(3)\n  55\n  >>> fib(2)\n  55\n  >>> fib(7)\n  55\n  >>> fib(6)\n  55\n  >>> fib(5)\n  55\n  >>> fib(4)\n  55\n  >>> fib(3)\n  55\n  >>> fib(2)\n  55\n  >>> fib(7)\n  55\n  >>> fib(6)\n  55\n  >>> fib(5)\n  55\n  >>> fib(4)\n  55\n  >>> fib(3)\n  55\n  >>> fib(2)\n  55\n  >>> fib(7)\n  55\n  >>> fib(6)\n  55\n  >>> fib(5)\n  55\n  >>> fib(4)\n  55\n  >>> fib(3)\n  55\n  >>> fib(2)\n  55\n  >>> fib(7)\n  55\n  >>> fib(6)\n  55\n  >>> fib(5)\n  55\n  >>> fib(4)\n  55\n  >>> fib(3)\n  55\n  >>> fib(2)\n  55\n  >>> fib(7)\n  55\n  >>> fib(6)\n  55\n  >>> fib(5)\n  55\n  >>> fib(4)\n  55\n  >>> fib(3)\n  55\n  >>> fib(2)\n  55\n  >>> fib(7)\n  55\n  >>> fib(6)\n  55\n  >>> fib(5)\n  55\n  >>> fib(4)\n  55\n  >>> fib(3)\n  55\n  >>> fib(2)\n  55\n  >>> fib(7)\n  55\n  >>> fib(6)\n  55\n  >>> fib(5)\n  55\n  >>> fib(4)\n  55\n  >>> fib(3)\n  55\n  >>> fib(2)\n  55\n  >>> fib(7)\n  55\n  >>> fib(6)\n  55\n  >>> fib(5)\n  55\n  >>> fib(4)\n  55\n  >>> fib(3)\n  55\n  >>> fib(2)\n  55\n  >>> fib(7)\n  55\n  >>> fib(6)\n  55\n  >>> fib(5)\n  55\n  >>> fib(4)\n  55\n  >>> fib(3)\n  55\n  >>> fib(2)\n  55\n  >>> fib(7)\n  55\n  >>> fib(6)\n  55\n  >>> fib(5)\n  55\n  >>> fib(4)\n  55\n  >>> fib(3)\n  55\n  >>> fib(2)\n  55\n  >>> fib(7)\n  55\n  >>> fib(6)\n  55\n  >>> fib(5)\n  55\n  >>> fib(4)\n  55\n  >>> fib(3)\n  55\n  >>> fib(2)\n  55\n  >>> fib(7)\n  55\n  >>> fib(6)\n  55\n  >>> fib(5)\n  55\n  >>> fib(4)\n  55\n  >>> fib(3)\n  55\n  >>> fib(2)\n  55\n  >>> fib(7)\n  55\n  >>> fib(6)\n  55\n  >>> fib(5)\n  55\n  >>> fib(4)\n  55\n  >>> fib(3)\n  55\n  >>> fib(2)\n  55\n  >>> fib(7)\n  55\n  >>> fib(6)\n  55\n  >>> fib(5)\n  55\n  >>> fib(4)\n  55\n  >>> fib(3)\n  55\n  >>> fib(2)\n  55\n  >>> fib(7)\n  55\n  >>> fib(6)\n  55\n  >>> fib(5)\n  55\n  >>> fib(4)\n  55\n  >>> fib(3)\n  55\n  >>> fib(2)\n  55\n  >>> fib(7)\n  55\n  >>> fib(6)\n  55\n  >>> fib(5)\n  55\n  >>> fib(4)\n  55\n  >>> fib(3)\n  55\n  >>> fib(2)\n  55\n  >>> fib(7)\n  55\n  >>> fib(6)\n  55\n  >>> fib(5)\n  55\n  >>> fi", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 3}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketnig(\"<\")\n  false\n  >>> correctBracketnig(\"<>\")\n  false\n  >>> correctBracketnig(\"<<><>>\")\n  false\n  >>> correctBracketnig(\"><<>\")\n  false\n  */\nconst correctBracketnig = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketnig", "gc": "<|endoftext|>/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketnig(\"<\")\n  false\n  >>> correctBracketnig(\"<>\")\n  false\n  >>> correctBracketnig(\"<<><>>\")\n  false\n  >>> correctBracketnig(\"><<>\")\n  false\n  */\nconst correctBracketnig = (brackets) => {\n  const openingBrackets = brackets.split(\">\");\n  const closingBrackets = brackets.split(\"<\");\n  return openingBrackets.every((openingBracket) => {\n    return closingBrackets.every((closingBracket) => {\n      return openingBracket === closingBracket;\n    });\n  });\n};\n\n/**\n * Returns true if the given string is a valid HTML tag.\n *\n * Valid HTML tags are those which are not \"self-closing\", i.e. they have no end tag.\n * Valid HTML tags are those which do not contain any unescaped \"<\" or \">\" characters.\n *\n * Valid HTML tags are those which do not contain any unescaped \"&\" characters.\n *\n * Valid HTML tags are those which do not contain any unescaped \"#\" characters.\n *\n * Valid HTML tags are those which do not contain any unescaped \"=\" characters.\n *\n * Valid HTML tags are those which do not contain any unescaped \"?\" characters.\n *\n * Valid HTML tags are those which do not contain any unescaped \"#\" characters.\n *\n * Valid HTML tags are those which do not contain any unescaped \"=\" characters.\n *\n * Valid HTML tags are those which do not contain any unescaped \"?\" characters.\n *\n * Valid HTML tags are those which do not contain any unescaped \"#\" characters.\n *\n * Valid HTML tags are those which do not contain any unescaped \"=\" characters.\n *\n * Valid HTML tags are those which do not contain any unescaped \"?\" characters.\n *\n * Valid HTML tags are those which do not contain any unescaped \"#\" characters.\n *\n * Valid HTML tags are those which do not contain any unescaped \"=\" characters.\n *\n * Valid HTML tags are those which do not contain any unescaped \"?\" characters.\n *\n * Valid HTML tags are those which do not contain any unescaped \"#\" characters.\n *\n * Valid HTML tags are those which do not contain any unescaped \"=\" characters.\n *\n * Valid HTML tags are those which do not contain any unescaped \"?\" characters.\n *\n * Valid HTML tags are those which do not contain any unescaped \"#\" characters.\n *\n * Valid HTML tags are those which do not contain any unescaped \"=\" characters.\n *\n * Valid HTML tags are those which do not contain any unescaped \"?\" characters.\n *\n * Valid HTML tags are those which do not contain any unescaped \"#\" characters.\n *\n * Valid HTML tags are those which do not contain any unescaped \"=\" characters.\n *\n * Valid HTML tags are those which do not contain any unescaped \"?\" characters.\n *\n * Valid HTML tags are those which do not contain any unescaped \"#\" characters.\n *\n * Valid HTML tags are those which do not contain any unescaped \"=\" characters.\n *\n * Valid HTML tags are those which do not contain any unescaped \"?\" characters.\n *\n * Valid HTML tags are those which do not contain any unescaped \"#\" characters.\n *\n * Valid HTML tags are those which do not contain any unescaped \"=\" characters.\n *\n * Valid HTML tags are those which do not contain any unescaped \"?\" characters.\n *\n * Valid HTML tags are those which do not contain any unescaped \"#\" characters.\n *\n * Valid HTML tags are those which do not contain any unescaped \"=\" characters.\n *\n * Valid HTML tags are those which do not contain any unescaped \"?\" characters.\n *\n * Valid HTML tags are those which do not contain any unescaped \"#\" characters.\n *\n * Valid HTML tags are those which do not contain any unescaped \"=\" characters.\n *\n * Valid HTML tags are those which do not contain any unescaped \"?\" characters.\n *\n * Valid HTML tags are those which do not contain any unescaped \"#\" characters.\n *\n * Valid HTML tags are those which do not contain any unescaped \"=\" characters.\n *\n * Valid HTML tags are those which do not contain any unescaped \"?\" characters.\n *\n * Valid HTML tags are those which do not contain any unescaped \"#\" characters.\n *\n * Valid HTML tags are those which do not contain any unescaped \"=\" characters.\n *\n * Valid HTML tags are those which do not contain any unescaped \"?\" characters.\n *\n * Valid HTML tags are those which do not contain any unescaped \"#\" characters.\n *\n * Valid HTML tags are those which do not contain any unescaped \"=\" characters.\n *\n * Valid HTML tags are those which do not contain any unescaped \"?\" characters.\n *\n * Valid HTML tags are those which do not contain any unescaped \"#\" characters.\n *\n * Valid HTML tags are those which do not contain any unescaped \"=\" characters.\n *\n * Valid HTML tags are those which do not contain any unescaped \"?\" characters.\n *\n * Valid HTML tags are those which do not contain any unescaped \"#\" characters.\n *\n * Valid HTML tags are those which do not contain any unescaped \"=\" characters.\n *\n * Valid HTML tags are those which do not contain any unescaped \"?\" characters.\n *\n * Valid HTML tags are those which do not contain any unescaped \"#\" characters.\n *\n * Valid HTML tags are those which do not contain any unescaped \"=\" characters.\n *\n * Valid HTML tags are those which do not contain any unescaped \"?\" characters.\n *\n * Valid HTML tags are those which do not contain any unescaped \"#\" characters.\n *\n * Valid HTML tags are those which do not contain any unescaped \"=\" characters.\n *\n * Valid HTML tags are those which do not contain any unescaped \"?\" characters.\n *\n * Valid HTML tags are those which do not contain any unescaped \"#\" characters.\n *\n * Valid HTML tags are those which do not contain any unescaped \"=\" characters.\n *\n * Valid HTML tags are those which do not contain any unescaped \"?\" characters.\n *\n * Valid HTML tags are those which do not contain any unescaped \"#\" characters.\n *\n * Valid HTML tags are those which do not contain any unescaped \"=\" characters.\n *\n * Valid HTML tags are those which do not contain any unescaped \"?\" characters.\n *\n * Valid HTML tags are those which do not contain any unescaped \"#\" characters.\n *\n * Valid HTML tags are those which do not contain any unescaped \"=\" characters.\n *\n * Valid HTML tags are those which do not contain any unescaped \"?\" characters.\n *\n * Valid HTML tags are those which do not contain any unescaped \"#\" characters.\n *\n * Valid HTML tags are those which do not contain any unescaped \"=\" characters.\n *\n * Valid HTML tags are those which do not contain any unescaped \"?\" characters.\n *\n * Valid HTML tags are those which do not contain any unescaped \"#\" characters.\n *\n * Valid HTML tags are those which do not contain any unescaped \"=\" characters.\n *\n * Valid HTML tags are those which do not contain any unescaped \"?\" characters.\n *\n * Valid HTML tags are those which do not contain any unescaped \"#\" ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/57", "prompt": "/*Return true is list elements are montoonically increasing or decreasing.\n  >>> montoonic([1, 2, 4, 20])\n  true\n  >>> montoonic([1, 20, 4, 10])\n  false\n  >>> montoonic([4, 1, 0, -10])\n  true\n  */\nconst montoonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "montoonic", "gc": "<|endoftext|>/*Return true is list elements are montoonically increasing or decreasing.\n  >>> montoonic([1, 2, 4, 20])\n  true\n  >>> montoonic([1, 20, 4, 10])\n  false\n  >>> montoonic([4, 1, 0, -10])\n  true\n  */\nconst montoonic = (l) => {\n  let n = l.length;\n  let m = 1;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let sum = 0;\n  let flag = true;\n  while (i < n) {\n    while (j < n) {\n      if (l[j] < l[j + 1]) {\n        sum += l[j];\n        j++;\n      } else {\n        sum += l[j + 1];\n        j++;\n      }\n    }\n    if (sum > m) {\n      m = sum;\n      flag = false;\n    }\n    i++;\n    j = 0;\n  }\n  return flag;\n};\n\n/*Return true if list elements are monotonically increasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  let n = l.length;\n  let m = 1;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let sum = 0;\n  let flag = true;\n  while (i < n) {\n    while (j < n) {\n      if (l[j] < l[j + 1]) {\n        sum += l[j];\n        j++;\n      } else {\n        sum += l[j + 1];\n        j++;\n      }\n    }\n    if (sum > m) {\n      m = sum;\n      flag = false;\n    }\n    i++;\n    j = 0;\n  }\n  return flag;\n};\n\n/*Return true if list elements are monotonically decreasing.\n  >>> monotonic([4, 1, 0, -10])\n  true\n  >>> monotonic([4, 1, -10, -10])\n  false\n  >>> monotonic([4, 1, -10, 10])\n  true\n  */\nconst monotonic_decreasing = (l) => {\n  let n = l.length;\n  let m = 1;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let sum = 0;\n  let flag = true;\n  while (i < n) {\n    while (j < n) {\n      if (l[j] > l[j + 1]) {\n        sum += l[j];\n        j++;\n      } else {\n        sum += l[j + 1];\n        j++;\n      }\n    }\n    if (sum < m) {\n      m = sum;\n      flag = false;\n    }\n    i++;\n    j = 0;\n  }\n  return flag;\n};\n\n/*Return true if list elements are monotonically increasing or decreasing.\n  >>> monotonic_decreasing([1, 2, 4, 20])\n  true\n  >>> monotonic_decreasing([1, 20, 4, 10])\n  false\n  >>> monotonic_decreasing([4, 1, 0, -10])\n  true\n  */\nconst monotonic_decreasing = (l) => {\n  let n = l.length;\n  let m = 1;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let sum = 0;\n  let flag = true;\n  while (i < n) {\n    while (j < n) {\n      if (l[j] > l[j + 1]) {\n        sum += l[j];\n        j++;\n      } else {\n        sum += l[j + 1];\n        j++;\n      }\n    }\n    if (sum < m) {\n      m = sum;\n      flag = false;\n    }\n    i++;\n    j = 0;\n  }\n  return flag;\n};\n\n/*Return true if list elements are monotonically increasing or decreasing.\n  >>> monotonic_decreasing([4, 1, 0, -10])\n  true\n  >>> monotonic_decreasing([4, 1, -10, -10])\n  false\n  >>> monotonic_decreasing([4, 1, -10, 10])\n  true\n  */\nconst monotonic_ascending = (l) => {\n  let n = l.length;\n  let m = 1;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let sum = 0;\n  let flag = true;\n  while (i < n) {\n    while (j < n) {\n      if (l[j] > l[j + 1]) {\n        sum += l[j];\n        j++;\n      } else {\n        sum += l[j + 1];\n        j++;\n      }\n    }\n    if (sum < m) {\n      m = sum;\n      flag = false;\n    }\n    i++;\n    j = 0;\n  }\n  return flag;\n};\n\n/*Return true if list elements are monotonically increasing or decreasing.\n  >>> monotonic_ascending([1, 2, 4, 20])\n  true\n  >>> monotonic_ascending([1, 20, 4, 10])\n  false\n  >>> monotonic_ascending([4, 1, 0, -10])\n  true\n  */\nconst monotonic_ascending = (l) => {\n  let n = l.length;\n  let m = 1;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let sum = 0;\n  let flag = true;\n  while (i < n) {\n    while (j < n) {\n      if (l[j] > l[j + 1]) {\n        sum += l[j];\n        j++;\n      } else {\n        sum += l[j + 1];\n        j++;\n      }\n    }\n    if (sum < m) {\n      m = sum;\n      flag = false;\n    }\n    i++;\n    j = 0;\n  }\n  return flag;\n};\n\n/*Return true if list elements are monotonically increasing or decreasing.\n  >>> monotonic_ascending([4, 1, 0, -10])\n  true\n  >>> monotonic_ascending([4, 1, -10, -10])\n  false\n  >>> monotonic_ascending([4, 1, -10, 10])\n  true\n  */\nconst monotonic_ascending_decreasing = (l) => {\n  let n = l.length;\n  let m = 1;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let sum = 0;\n  let flag = true;\n  while (i < n) {\n    while (j < n) {\n      if (l[j] < l[j + 1]) {\n        sum += l[j];\n        j++;\n      } else {\n        sum += l[j + 1];\n        j++;\n      }\n    }\n    if (sum > m) {\n      m = sum;\n      flag = false;\n    }\n    i++;\n    j = 0;\n  }\n  return flag;\n};\n\n/*Return true if list elements are monotonically increasing or decreasing.\n  >>> monotonic_ascending_decreasing([1, 2, 4, 20])\n  true\n  >>> monotonic_ascending_decreasing([1, 20, 4, 10])\n  false\n  >>> monotonic_ascending_decreasing([4, 1, 0, -10])\n  true\n  */\nconst monotonic_ascending_decreasing = (l) => {\n  let n = l.length;\n  let m = 1;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let sum = 0;\n  let flag = true;\n  while (i < n) {\n    while (j < n) {\n      if (l[j] < l[j + 1]) {\n        sum += l[j];\n        j++;\n      } else {\n        sum += l[j + 1];\n        j++;\n      }\n    }\n    if (sum > m) {\n      m = sum;\n      flag = false;\n    }\n    i++;\n    j = 0;\n  }\n  return flag;\n};\n\n/*Return true if list elements are monotonically increasing or decreasing.\n  >>> monotonic_ascending_decreasing([4, 1, 0, -10])\n  true\n  >>> monotonic_ascending_decreasing([4, 1, -10, -10])\n  false\n  >>> monotonic_ascending_decreasing([4, 1, -10, 10])\n  true\n  */\nconst monotonic_ascending_ascending = (l) => {\n  let n = l.length;\n  let m = 1;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let sum = 0;\n  let flag = true;\n  while (i < n) {\n    while (j < n) {\n      if (l[j] > l", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/58", "prompt": "/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "gc": "<|endoftext|>/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  let result = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let n = 0\n  let m = 0\n  let n1 = l1.length\n  let n2 = l2.length\n  let m1 = l1.length\n  let m2 = l2.length\n  let n3 = m1\n  let n4 = m2\n  let m3 = m1\n  let m4 = m2\n\n  while (i < n1 && j < n2) {\n    if (l1[i] === l2[j]) {\n      result.push(l1[i])\n      i++\n      j++\n    } else {\n      result.push(l2[j])\n      j++\n    }\n  }\n\n  while (i < n1) {\n    result.push(l1[i])\n    i++\n  }\n\n  while (j < n2) {\n    result.push(l2[j])\n    j++\n  }\n\n  while (i < n3) {\n    result.push(l1[i])\n    i++\n  }\n\n  while (j < n4) {\n    result.push(l2[j])\n    j++\n  }\n\n  while (i < n1 && j < n2) {\n    if (l1[i] === l2[j]) {\n      result.push(l1[i])\n      i++\n      j++\n    } else {\n      result.push(l2[j])\n      j++\n    }\n  }\n\n  while (i < n1) {\n    result.push(l1[i])\n    i++\n  }\n\n  while (j < n2) {\n    result.push(l2[j])\n    j++\n  }\n\n  while (i < n3) {\n    result.push(l1[i])\n    i++\n  }\n\n  while (j < n4) {\n    result.push(l2[j])\n    j++\n  }\n\n  return result\n}\n\n/*\n  Return sorted unique elements for two lists.\n  >>> unique([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [5, 9, 653, 121]\n  >>> unique([5, 3, 2, 8], [3, 2])\n  [3, 2]\n\n  */\nconst unique = (l1, l2) => {\n  let result = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let n = 0\n  let m = 0\n  let n1 = l1.length\n  let n2 = l2.length\n  let m1 = l1.length\n  let m2 = l2.length\n  let n3 = m1\n  let n4 = m2\n  let m3 = m1\n  let m4 = m2\n\n  while (i < n1 && j < n2) {\n    if (l1[i] === l2[j]) {\n      result.push(l1[i])\n      i++\n      j++\n    } else {\n      result.push(l2[j])\n      j++\n    }\n  }\n\n  while (i < n1) {\n    result.push(l1[i])\n    i++\n  }\n\n  while (j < n2) {\n    result.push(l2[j])\n    j++\n  }\n\n  while (i < n3) {\n    result.push(l1[i])\n    i++\n  }\n\n  while (j < n4) {\n    result.push(l2[j])\n    j++\n  }\n\n  while (i < n1 && j < n2) {\n    if (l1[i] === l2[j]) {\n      result.push(l1[i])\n      i++\n      j++\n    } else {\n      result.push(l2[j])\n      j++\n    }\n  }\n\n  while (i < n1) {\n    result.push(l1[i])\n    i++\n  }\n\n  while (j < n2) {\n    result.push(l2[j])\n    j++\n  }\n\n  while (i < n3) {\n    result.push(l1[i])\n    i++\n  }\n\n  while (j < n4) {\n    result.push(l2[j])\n    j++\n  }\n\n  return result\n}\n\n/*\n  Return sorted unique elements for two lists.\n  >>> unique([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [5, 9, 653, 121]\n  >>> unique([5, 3, 2, 8], [3, 2])\n  [3, 2]\n\n  */\nconst uniqueBy = (l1, l2) => {\n  let result = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let n = 0\n  let m = 0\n  let n1 = l1.length\n  let n2 = l2.length\n  let m1 = l1.length\n  let m2 = l2.length\n  let n3 = m1\n  let n4 = m2\n  let m3 = m1\n  let m4 = m2\n\n  while (i < n1 && j < n2) {\n    if (l1[i] === l2[j]) {\n      result.push(l1[i])\n      i++\n      j++\n    } else {\n      result.push(l2[j])\n      j++\n    }\n  }\n\n  while (i < n1) {\n    result.push(l1[i])\n    i++\n  }\n\n  while (j < n2) {\n    result.push(l2[j])\n    j++\n  }\n\n  while (i < n3) {\n    result.push(l1[i])\n    i++\n  }\n\n  while (j < n4) {\n    result.push(l2[j])\n    j++\n  }\n\n  while (i < n1 && j < n2) {\n    if (l1[i] === l2[j]) {\n      result.push(l1[i])\n      i++\n      j++\n    } else {\n      result.push(l2[j])\n      j++\n    }\n  }\n\n  while (i < n1) {\n    result.push(l1[i])\n    i++\n  }\n\n  while (j < n2) {\n    result.push(l2[j])\n    j++\n  }\n\n  while (i < n3) {\n    result.push(l1[i])\n    i++\n  }\n\n  while (j < n4) {\n    result.push(l2[j])\n    j++\n  }\n\n  return result\n}\n\n/*\n  Return sorted unique elements for two lists.\n  >>> uniqueBy([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [5, 9, 653, 121]\n  >>> uniqueBy([5, 3, 2, 8], [3, 2])\n  [3, 2]\n\n  */\nconst uniqueBy = (l1, l2) => {\n  let result = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let n = 0\n  let m = 0\n  let n1 = l1.length\n  let n2 = l2.length\n  let m1 = l1.length\n  let m2 = l2.length\n  let n3 = m1\n  let n4 = m2\n  let m3 = m1\n  let m4 = m2\n\n  while (i < n1 && j < n2) {\n    if (l1[i] === l2[j]) {\n      result.push(l1[i])\n      i++\n      j++\n    } else {\n      result.push(l2[j])\n      j++\n    }\n  }\n\n  while (i < n1) {\n    result.push(l1[i])\n    i++\n  }\n\n  while (j < n2) {\n    result.push(l2[j])\n    j++\n  }\n\n  while (i < n3) {\n    result.push(l1[i])\n    i++\n  }\n\n  while (j < n4) {\n    result.push(l2[j])\n    j++\n  }\n\n  while (i < n1 && j < n2) {\n    if (l1[i] === l2[j]) {\n      result.push(l1[i])\n      i++\n      j++\n    } else {\n      result.push(l2[j])\n      j++\n    }\n  }\n\n  while (i < n1) {\n    result.push(l1[i])\n    i++\n  }\n\n  while (j < n2) {\n    result.push(l2[j])\n    j++\n  }\n\n  while (i < n3) {\n    result.push(l1[i])\n    i++\n  }\n\n  while (j < n4) {\n    result.push(l2[j])\n    j++\n  }\n\n  return result\n}\n\n/*\n  Return sorted unique elements for two lists.\n  >>> uniqueBy([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [5, 9, 653, 121]\n  >>> uniqueBy([5, 3, 2, 8], [3, 2])\n  [3, 2]\n\n  */\nconst uniqueBy = (l1, ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largetsPrimeFactor(13195)\n  29\n  >>> largetsPrimeFactor(2048)\n  2\n  */\nconst largetsPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largetsPrimeFactor", "gc": "<|endoftext|>/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largetsPrimeFactor(13195)\n  29\n  >>> largetsPrimeFactor(2048)\n  2\n  */\nconst largetsPrimeFactor = (n) => {\n  let i = 1;\n  let max = 1;\n  while (n < max) {\n    if (n % i === 0) {\n      max = i;\n      i++;\n    }\n  }\n  return max;\n};\n\n/*\n  Given a number n, return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largetsPrimeFactor(13195)\n  29\n  >>> largetsPrimeFactor(2048)\n  2\n  */\nconst largetsPrimeFactor_2 = (n) => {\n  let i = 1;\n  let max = 1;\n  while (n < max) {\n    if (n % i === 0) {\n      max = i;\n      i++;\n    }\n  }\n  return max;\n};\n\n/*\n  Given a number n, return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largetsPrimeFactor_2(13195)\n  29\n  >>> largetsPrimeFactor_2(2048)\n  2\n  */\nconst largetsPrimeFactor_3 = (n) => {\n  let i = 1;\n  let max = 1;\n  while (n < max) {\n    if (n % i === 0) {\n      max = i;\n      i++;\n    }\n  }\n  return max;\n};\n\n/*\n  Given a number n, return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largetsPrimeFactor_3(13195)\n  29\n  >>> largetsPrimeFactor_3(2048)\n  2\n  */\nconst largetsPrimeFactor_4 = (n) => {\n  let i = 1;\n  let max = 1;\n  while (n < max) {\n    if (n % i === 0) {\n      max = i;\n      i++;\n    }\n  }\n  return max;\n};\n\n/*\n  Given a number n, return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largetsPrimeFactor_4(13195)\n  29\n  >>> largetsPrimeFactor_4(2048)\n  2\n  */\nconst largetsPrimeFactor_5 = (n) => {\n  let i = 1;\n  let max = 1;\n  while (n < max) {\n    if (n % i === 0) {\n      max = i;\n      i++;\n    }\n  }\n  return max;\n};\n\n/*\n  Given a number n, return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largetsPrimeFactor_5(13195)\n  29\n  >>> largetsPrimeFactor_5(2048)\n  2\n  */\nconst largetsPrimeFactor_6 = (n) => {\n  let i = 1;\n  let max = 1;\n  while (n < max) {\n    if (n % i === 0) {\n      max = i;\n      i++;\n    }\n  }\n  return max;\n};\n\n/*\n  Given a number n, return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largetsPrimeFactor_6(13195)\n  29\n  >>> largetsPrimeFactor_6(2048)\n  2\n  */\nconst largetsPrimeFactor_7 = (n) => {\n  let i = 1;\n  let max = 1;\n  while (n < max) {\n    if (n % i === 0) {\n      max = i;\n      i++;\n    }\n  }\n  return max;\n};\n\n/*\n  Given a number n, return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largetsPrimeFactor_7(13195)\n  29\n  >>> largetsPrimeFactor_7(2048)\n  2\n  */\nconst largetsPrimeFactor_8 = (n) => {\n  let i = 1;\n  let max = 1;\n  while (n < max) {\n    if (n % i === 0) {\n      max = i;\n      i++;\n    }\n  }\n  return max;\n};\n\n/*\n  Given a number n, return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largetsPrimeFactor_8(13195)\n  29\n  >>> largetsPrimeFactor_8(2048)\n  2\n  */\nconst largetsPrimeFactor_9 = (n) => {\n  let i = 1;\n  let max = 1;\n  while (n < max) {\n    if (n % i === 0) {\n      max = i;\n      i++;\n    }\n  }\n  return max;\n};\n\n/*\n  Given a number n, return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largetsPrimeFactor_9(13195)\n  29\n  >>> largetsPrimeFactor_9(2048)\n  2\n  */\nconst largetsPrimeFactor_10 = (n) => {\n  let i = 1;\n  let max = 1;\n  while (n < max) {\n    if (n % i === 0) {\n      max = i;\n      i++;\n    }\n  }\n  return max;\n};\n\n/*\n  Given a number n, return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largetsPrimeFactor_10(13195)\n  29\n  >>> largetsPrimeFactor_10(2048)\n  2\n  */\nconst largetsPrimeFactor_11 = (n) => {\n  let i = 1;\n  let max = 1;\n  while (n < max) {\n    if (n % i === 0) {\n      max = i;\n      i++;\n    }\n  }\n  return max;\n};\n\n/*\n  Given a number n, return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largetsPrimeFactor_11(13195)\n  29\n  >>> largetsPrimeFactor_11(2048)\n  2\n  */\nconst largetsPrimeFactor_12 = (n) => {\n  let i = 1;\n  let max = 1;\n  while (n < max) {\n    if (n % i === 0) {\n      max = i;\n      i++;\n    }\n  }\n  return max;\n};\n\n/*\n  Given a number n, return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largetsPrimeFactor_12(13195)\n  29\n  >>> largetsPrimeFactor_12(2048)\n  2\n  */\nconst largetsPrimeFactor_13 = (n) => {\n  let i = 1;\n  let max = 1;\n  while (n < max) {\n    if (n % i === 0) {\n      max = i;\n      i++;\n    }\n  }\n  return max;\n};\n\n/*\n  Given a number n, return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largetsPrimeFactor_13(13195)\n  29\n  >>> largetsPrimeFactor_13(2048)\n  2\n  */\nconst largetsPrimeFactor_14 = (n) => {\n  let i = 1;\n  let max = 1;\n  while (n < max) {\n    if (n % i === 0) {\n      max = i;\n      i++;\n    }\n  }\n  return max;\n};\n\n/*\n  Given a number n, return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largetsPrimeFactor_14(13195)\n  29\n  >>> largetsPrimeFactor_14(2048)\n  2\n  */\nconst largetsPrimeFactor_15 = (n) => {\n  let i = 1;\n  let max = 1;\n  while (n < max", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parseNetsedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNetsedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNetsedParens", "gc": "<|endoftext|>/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parseNetsedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNetsedParens = (paren_string) => {\n  const paren_groups = paren_string.split(' ').map(\n    (group) => group.split(')')\n  );\n  const max_nesting = 0;\n  const nesting_levels = [];\n  let current_nesting = 0;\n  let current_nesting_level = 0;\n  let current_nesting_level_index = 0;\n  let current_nesting_level_nesting = 0;\n  let current_nesting_level_nesting_level = 0;\n  let current_nesting_level_nesting_level_index = 0;\n  let current_nesting_level_nesting_level_nesting = 0;\n  let current_nesting_level_nesting_level_nesting_level_index = 0;\n  let current_nesting_level_nesting_level_nesting_level_nesting = 0;\n  let current_nesting_level_nesting_level_nesting_level_nesting_level_index = 0;\n  let current_nesting_level_nesting_level_nesting_level_nesting_level_nesting_level_index = 0;\n  let current_nesting_level_nesting_level_nesting_level_nesting_level_nesting_level_index = 0;\n  let current_nesting_level_nesting_level_nesting_level_nesting_level_nesting_level_index = 0;\n  let current_nesting_level_nesting_level_nesting_level_nesting_level_nesting_level_index = 0;\n  let current_nesting_level_nesting_level_nesting_level_nesting_level_nesting_level_index = 0;\n  let current_nesting_level_nesting_level_nesting_level_nesting_level_nesting_level_index = 0;\n  let current_nesting_level_nesting_level_nesting_level_nesting_level_nesting_level_index = 0;\n  let current_nesting_level_nesting_level_nesting_level_nesting_level_nesting_level_index = 0;\n  let current_nesting_level_nesting_level_nesting_level_nesting_level_nesting_level_index = 0;\n  let current_nesting_level_nesting_level_nesting_level_nesting_level_nesting_level_index = 0;\n  let current_nesting_level_nesting_level_nesting_level_nesting_level_nesting_level_index = 0;\n  let current_nesting_level_nesting_level_nesting_level_nesting_level_nesting_level_index = 0;\n  let current_nesting_level_nesting_level_nesting_level_nesting_level_nesting_level_index = 0;\n  let current_nesting_level_nesting_level_nesting_level_nesting_level_nesting_level_index = 0;\n  let current_nesting_level_nesting_level_nesting_level_nesting_level_nesting_level_index = 0;\n  let current_nesting_level_nesting_level_nesting_level_nesting_level_nesting_level_index = 0;\n  let current_nesting_level_nesting_level_nesting_level_nesting_level_nesting_level_index = 0;\n  let current_nesting_level_nesting_level_nesting_level_nesting_level_nesting_level_index = 0;\n  let current_nesting_level_nesting_level_nesting_level_nesting_level_nesting_level_index = 0;\n  let current_nesting_level_nesting_level_nesting_level_nesting_level_nesting_level_index = 0;\n  let current_nesting_level_nesting_level_nesting_level_nesting_level_nesting_level_index = 0;\n  let current_nesting_level_nesting_level_nesting_level_nesting_level_nesting_level_index = 0;\n  let current_nesting_level_nesting_level_nesting_level_nesting_level_nesting_level_index = 0;\n  let current_nesting_level_nesting_level_nesting_level_nesting_level_nesting_level_index = 0;\n  let current_nesting_level_nesting_level_nesting_level_nesting_level_nesting_level_index = 0;\n  let current_nesting_level_nesting_level_nesting_level_nesting_level_nesting_level_index = 0;\n  let current_nesting_level_nesting_level_nesting_level_nesting_level_nesting_level_index = 0;\n  let current_nesting_level_nesting_level_nesting_level_nesting_level_nesting_level_index = 0;\n  let current_nesting_level_nesting_level_nesting_level_nesting_level_nesting_level_index = 0;\n  let current_nesting_level_nesting_level_nesting_level_nesting_level_nesting_level_index = 0;\n  let current_nesting_level_nesting_level_nesting_level_nesting_level_nesting_level_index = 0;\n  let current_nesting_level_nesting_level_nesting_level_nesting_level_nesting_level_index = 0;\n  let current_nesting_level_nesting_level_nesting_level_nesting_level_nesting_level_index = 0;\n  let current_nesting_level_nesting_level_nesting_level_nesting_level_nesting_level_index = 0;\n  let current_nesting_level_nesting_level_nesting_level_nesting_level_nesting_level_index = 0;\n  let current_nesting_level_nesting_level_nesting_level_nesting_level_nesting_level_index = 0;\n  let current_nesting_level_nesting_level_nesting_level_nesting_level_nesting_level_index = 0;\n  let current_nesting_level_nesting_level_nesting_level_nesting_level_nesting_level_index = 0;\n  let current_nesting_level_nesting_level_nesting_level_nesting_level_nesting_level_index = 0;\n  let current_nesting_level_nesting_level_nesting_level_nesting_level_nesting_level_index = 0;\n  let current_nesting_level_nesting_level_nesting_level_nesting_level_nesting_level_index = 0;\n  let current_nesting_level_nesting_level_nesting_level_nesting_level_nesting_level_index = 0;\n  let current_nesting_level_nesting_level_nesting_level_nesting_level_nesting_level_index = 0;\n  let current_nesting_level_nesting_level_nesting_level_nesting_level_nesting_level_index = 0;\n  let current_nesting_level_nesting_level_nesting_level_nesting_level_nesting_level_index = 0;\n  let current_nesting_level_nesting_level_nesting_level_nesting_level_nesting_level_index = 0;\n  let current_nesting_level_nesting_level_nesting_level_nesting_level_nesting_level_index = 0;\n  let current_nesting_level_nesting_level_nesting_level_nesting_level_nesting_level_index = 0;\n  let current_nesting_level_nesting_level_nesting_level_nesting_level_nesting_level_index = 0;\n  let current_nesting_level_nesting_level_nesting_level_nesting_level_nesting_level_index = 0;\n  let current_nesting_level_nesting_level_nesting_level_nesting_level_nesting_level_index = 0;\n  let current_nesting_level_nesting_level_nesting_level_nesting_level_nesting_level_index = 0;\n  let current_nesting_level_nesting_level_nesting_level_nesting_level_nesting_level_index = 0;\n  let current_nesting_level_nesting_level_nesting_level_nesting_level_nesting_level_index = 0;\n  let current_nesting_level_nesting_level_nesting_level_nesting_level_nesting_level_index = 0;\n  let current_nesting_level_nesting_level_nesting_level_nesting_level_nesting_level_index = 0;\n  let current_nesting_level_nesting_level_nesting_level_nesting_level_nesting_level_index = 0;\n  let current_nesting_level_nesting_level_nesting_level_nesting_level_nesting_level_index = 0;\n  let current_nesting_level_nesting_level_nesting_level_nesting_level_nesting_level_index = 0;\n  let current_nesting_level_nesting_level_nesting_level_nesting_level_nesting_level_index = 0;\n  let current_nesting_level_nesting_level_nesting_level_nesting_level_nesting_level_index = 0;\n  let current_nesting_level_nesting_level_nesting_level_nesting_level_nesting_level_index = 0;\n  let current_nesting_level_nesting_level_nesting_level_nesting_level_nesting_level_index = 0;\n  let current_nesting_level_nesting_level_nesting_level_nesting_level_nesting_level_index = 0;\n  let current_nesting_level_nesting_level_nesting_level_nesting_level_nesting_level_index = 0;", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/60", "prompt": "/*sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "gc": "<|endoftext|>/*sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/**\n * A function that returns the sum of all numbers from 1 to n.\n * It works by iterating from 1 to n and adding the current number to the sum.\n * It returns the sum.\n * It works by using recursion.\n * It works by using an accumulator to keep track of the sum.\n * It works by using an iterator to iterate from 1 to n.\n * It works by using an iterator to iterate from 1 to n.\n * It works by using an iterator to iterate from 1 to n.\n * It works by using an iterator to iterate from 1 to n.\n * It works by using an iterator to iterate from 1 to n.\n * It works by using an iterator to iterate from 1 to n.\n * It works by using an iterator to iterate from 1 to n.\n * It works by using an iterator to iterate from 1 to n.\n * It works by using an iterator to iterate from 1 to n.\n * It works by using an iterator to iterate from 1 to n.\n * It works by using an iterator to iterate from 1 to n.\n * It works by using an iterator to iterate from 1 to n.\n * It works by using an iterator to iterate from 1 to n.\n * It works by using an iterator to iterate from 1 to n.\n * It works by using an iterator to iterate from 1 to n.\n * It works by using an iterator to iterate from 1 to n.\n * It works by using an iterator to iterate from 1 to n.\n * It works by using an iterator to iterate from 1 to n.\n * It works by using an iterator to iterate from 1 to n.\n * It works by using an iterator to iterate from 1 to n.\n * It works by using an iterator to iterate from 1 to n.\n * It works by using an iterator to iterate from 1 to n.\n * It works by using an iterator to iterate from 1 to n.\n * It works by using an iterator to iterate from 1 to n.\n * It works by using an iterator to iterate from 1 to n.\n * It works by using an iterator to iterate from 1 to n.\n * It works by using an iterator to iterate from 1 to n.\n * It works by using an iterator to iterate from 1 to n.\n * It works by using an iterator to iterate from 1 to n.\n * It works by using an iterator to iterate from 1 to n.\n * It works by using an iterator to iterate from 1 to n.\n * It works by using an iterator to iterate from 1 to n.\n * It works by using an iterator to iterate from 1 to n.\n * It works by using an iterator to iterate from 1 to n.\n * It works by using an iterator to iterate from 1 to n.\n * It works by using an iterator to iterate from 1 to n.\n * It works by using an iterator to iterate from 1 to n.\n * It works by using an iterator to iterate from 1 to n.\n * It works by using an iterator to iterate from 1 to n.\n * It works by using an iterator to iterate from 1 to n.\n * It works by using an iterator to iterate from 1 to n.\n * It works by using an iterator to iterate from 1 to n.\n * It works by using an iterator to iterate from 1 to n.\n * It works by using an iterator to iterate from 1 to n.\n * It works by using an iterator to iterate from 1 to n.\n * It works by using an iterator to iterate from 1 to n.\n * It works by using an iterator to iterate from 1 to n.\n * It works by using an iterator to iterate from 1 to n.\n * It works by using an iterator to iterate from 1 to n.\n * It works by using an iterator to iterate from 1 to n.\n * It works by using an iterator to iterate from 1 to n.\n * It works by using an iterator to iterate from 1 to n.\n * It works by using an iterator to iterate from 1 to n.\n * It works by using an iterator to iterate from 1 to n.\n * It works by using an iterator to iterate from 1 to n.\n * It works by using an iterator to iterate from 1 to n.\n * It works by using an iterator to iterate from 1 to n.\n * It works by using an iterator to iterate from 1 to n.\n * It works by using an iterator to iterate from 1 to n.\n * It works by using an iterator to iterate from 1 to n.\n * It works by using an iterator to iterate from 1 to n.\n * It works by using an iterator to iterate from 1 to n.\n * It works by using an iterator to iterate from 1 to n.\n * It works by using an iterator to iterate from 1 to n.\n * It works by using an iterator to iterate from 1 to n.\n * It works by using an iterator to iterate from 1 to n.\n * It works by using an iterator to iterate from 1 to n.\n * It works by using an iterator to iterate from 1 to n.\n * It works by using an iterator to iterate from 1 to n.\n * It works by using an iterator to iterate from 1 to n.\n * It works by using an iterator to iterate from 1 to n.\n * It works by using an iterator to iterate from 1 to n.\n * It works by using an iterator to iterate from 1 to n.\n * It works by using an iterator to iterate from 1 to n.\n * It works by using an iterator to iterate from 1 to n.\n * It works by using an iterator to iterate from 1 to n.\n * It works by using an iterator to iterate from 1 to n.\n * It works by using an iterator to iterate from 1 to n.\n * It works by using an iterator to iterate from 1 to n.\n * It works by using an iterator to iterate from 1 to n.\n * It works by using an iterator to iterate from 1 to n.\n * It works by using an iterator to iterate from 1 to n.\n * It works by using an iterator to iterate from 1 to n.\n * It works by using an iterator to iterate from 1 to n.\n * It works by using an iterator to iterate from 1 to n.\n * It works by using an iterator to iterate from 1 to n.\n * It works by using an iterator to iterate from 1 to n.\n * It works by using an iterator to iterate from 1 to n.\n * It works by using an iterator to iterate from 1 to n.\n * It works by using an iterator to iterate from 1 to n.\n * It works by using an iterator to iterate from 1 to n.\n * It works by using an iterator to iterate from 1 to n.\n * It works by using an iterator to iterate from 1 to n.\n * It works by using an iterator to iterate from 1 to n.\n * It works by using an iterator to iterate from 1 to n.\n * It works by using an iterator to iterate from 1 to n.\n * It works by using an iterator to iterate from 1 to n.\n * It works by using an iterator to iterate from 1 to n.\n * It works by using an iterator to iterate from 1 to n.\n * It works by using an iterator to iterate from 1 to n.\n * It works by using an iterator to iterate from 1 to n.\n * It works by using an iterator to iterate from 1 to n.\n * It works by using an iterator to iterate from 1 to n.\n * It works by using an iterator to iterate from 1 to n.\n * It works by using an iterator to iterate from 1 to n.\n * It works by using an iterator to iterate from ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketnig(\"(\")\n  false\n  >>> correctBracketnig(\"()\")\n  true\n  >>> correctBracketnig(\"(()())\")\n  true\n  >>> correctBracketnig(\")(()\")\n  false\n  */\nconst correctBracketnig = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketnig", "gc": "<|endoftext|>/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketnig(\"(\")\n  false\n  >>> correctBracketnig(\"()\")\n  true\n  >>> correctBracketnig(\"(()())\")\n  true\n  >>> correctBracketnig(\")(()\")\n  false\n  */\nconst correctBracketnig = (brackets) => {\n  const openingBrackets = brackets.split(\"(\").map((bracket) => bracket.trim());\n  const closingBrackets = brackets.split(\")\").map((bracket) => bracket.trim());\n  return openingBrackets.every(\n    (openingBracket) => closingBrackets.includes(openingBracket)\n  );\n};\n\n/**\n * Checks if a word is in a list of words.\n *\n * Returns true if the word is in the list of words. Returns false otherwise.\n *\n * word\n * words\n */\nconst isInWords = (word, words) => {\n  return words.includes(word);\n};\n\n/**\n * Checks if a word is in a list of words.\n *\n * Returns true if the word is in the list of words. Returns false otherwise.\n *\n * word\n * words\n */\nconst isInWord = (word, words) => {\n  return words.includes(word);\n};\n\n/**\n * Checks if a word is in a list of words.\n *\n * Returns true if the word is in the list of words. Returns false otherwise.\n *\n * word\n * words\n */\nconst isInWords = (words, word) => {\n  return words.includes(word);\n};\n\n/**\n * Checks if a word is in a list of words.\n *\n * Returns true if the word is in the list of words. Returns false otherwise.\n *\n * word\n * words\n */\nconst isInWord = (words, word) => {\n  return words.includes(word);\n};\n\n/**\n * Checks if a word is in a list of words.\n *\n * Returns true if the word is in the list of words. Returns false otherwise.\n *\n * word\n * words\n */\nconst isInWords = (words, word) => {\n  return words.includes(word);\n};\n\n/**\n * Checks if a word is in a list of words.\n *\n * Returns true if the word is in the list of words. Returns false otherwise.\n *\n * word\n * words\n */\nconst isInWord = (words, word) => {\n  return words.includes(word);\n};\n\n/**\n * Checks if a word is in a list of words.\n *\n * Returns true if the word is in the list of words. Returns false otherwise.\n *\n * word\n * words\n */\nconst isInWords = (words, word) => {\n  return words.includes(word);\n};\n\n/**\n * Checks if a word is in a list of words.\n *\n * Returns true if the word is in the list of words. Returns false otherwise.\n *\n * word\n * words\n */\nconst isInWord = (words, word) => {\n  return words.includes(word);\n};\n\n/**\n * Checks if a word is in a list of words.\n *\n * Returns true if the word is in the list of words. Returns false otherwise.\n *\n * word\n * words\n */\nconst isInWords = (words, word) => {\n  return words.includes(word);\n};\n\n/**\n * Checks if a word is in a list of words.\n *\n * Returns true if the word is in the list of words. Returns false otherwise.\n *\n * word\n * words\n */\nconst isInWord = (words, word) => {\n  return words.includes(word);\n};\n\n/**\n * Checks if a word is in a list of words.\n *\n * Returns true if the word is in the list of words. Returns false otherwise.\n *\n * word\n * words\n */\nconst isInWords = (words, word) => {\n  return words.includes(word);\n};\n\n/**\n * Checks if a word is in a list of words.\n *\n * Returns true if the word is in the list of words. Returns false otherwise.\n *\n * word\n * words\n */\nconst isInWord = (words, word) => {\n  return words.includes(word);\n};\n\n/**\n * Checks if a word is in a list of words.\n *\n * Returns true if the word is in the list of words. Returns false otherwise.\n *\n * word\n * words\n */\nconst isInWords = (words, word) => {\n  return words.includes(word);\n};\n\n/**\n * Checks if a word is in a list of words.\n *\n * Returns true if the word is in the list of words. Returns false otherwise.\n *\n * word\n * words\n */\nconst isInWord = (words, word) => {\n  return words.includes(word);\n};\n\n/**\n * Checks if a word is in a list of words.\n *\n * Returns true if the word is in the list of words. Returns false otherwise.\n *\n * word\n * words\n */\nconst isInWords = (words, word) => {\n  return words.includes(word);\n};\n\n/**\n * Checks if a word is in a list of words.\n *\n * Returns true if the word is in the list of words. Returns false otherwise.\n *\n * word\n * words\n */\nconst isInWord = (words, word) => {\n  return words.includes(word);\n};\n\n/**\n * Checks if a word is in a list of words.\n *\n * Returns true if the word is in the list of words. Returns false otherwise.\n *\n * word\n * words\n */\nconst isInWords = (words, word) => {\n  return words.includes(word);\n};\n\n/**\n * Checks if a word is in a list of words.\n *\n * Returns true if the word is in the list of words. Returns false otherwise.\n *\n * word\n * words\n */\nconst isInWord = (words, word) => {\n  return words.includes(word);\n};\n\n/**\n * Checks if a word is in a list of words.\n *\n * Returns true if the word is in the list of words. Returns false otherwise.\n *\n * word\n * words\n */\nconst isInWords = (words, word) => {\n  return words.includes(word);\n};\n\n/**\n * Checks if a word is in a list of words.\n *\n * Returns true if the word is in the list of words. Returns false otherwise.\n *\n * word\n * words\n */\nconst isInWord = (words, word) => {\n  return words.includes(word);\n};\n\n/**\n * Checks if a word is in a list of words.\n *\n * Returns true if the word is in the list of words. Returns false otherwise.\n *\n * word\n * words\n */\nconst isInWords = (words, word) => {\n  return words.includes(word);\n};\n\n/**\n * Checks if a word is in a list of words.\n *\n * Returns true if the word is in the list of words. Returns false otherwise.\n *\n * word\n * words\n */\nconst isInWord = (words, word) => {\n  return words.includes(word);\n};\n\n/**\n * Checks if a word is in a list of words.\n *\n * Returns true if the word is in the list of words. Returns false otherwise.\n *\n * word\n * words\n */\nconst isInWords = (words, word) => {\n  return words.includes(word);\n};\n\n/**\n * Checks if a word is in a list of words.\n *\n * Returns true if the word is in the list of words. Returns false otherwise.\n *\n * word\n * words\n */\nconst isInWord = (words, word) => {\n  return words.includes(word);\n};\n\n/**\n * Checks if a word is in a list of words.\n *\n * Returns true if the word is in the list of words. Returns false otherwise.\n *\n * word\n * words\n */\nconst isInWords = (words, word) => {\n  return words.includes(word);\n};\n\n/**\n * Checks if a word is in a list of words.\n *\n * Returns true if the word ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "gc": "<|endoftext|>/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const n = xs.length;\n  let x = 0;\n  let dx = 0;\n  for (let i = 1; i < n; i++) {\n    x += xs[i - 1] * xs[i];\n    dx += xs[i - 1] * xs[i];\n  }\n  return dx;\n};\n\n/**\n * Calculates the inverse of a polynomial\n * x^-1 * x^-2 * x^-3 * x^-4 * x^-5\n * x^-1 * x^-2 * x^-3 * x^-4 * x^-5\n * x^-1 * x^-2 * x^-3 * x^-4 * x^-5\n * x^-1 * x^-2 * x^-3 * x^-4 * x^-5\n * x^-1 * x^-2 * x^-3 * x^-4 * x^-5\n * x^-1 * x^-2 * x^-3 * x^-4 * x^-5\n * x^-1 * x^-2 * x^-3 * x^-4 * x^-5\n * x^-1 * x^-2 * x^-3 * x^-4 * x^-5\n * x^-1 * x^-2 * x^-3 * x^-4 * x^-5\n * x^-1 * x^-2 * x^-3 * x^-4 * x^-5\n * x^-1 * x^-2 * x^-3 * x^-4 * x^-5\n * x^-1 * x^-2 * x^-3 * x^-4 * x^-5\n * x^-1 * x^-2 * x^-3 * x^-4 * x^-5\n * x^-1 * x^-2 * x^-3 * x^-4 * x^-5\n * x^-1 * x^-2 * x^-3 * x^-4 * x^-5\n * x^-1 * x^-2 * x^-3 * x^-4 * x^-5\n * x^-1 * x^-2 * x^-3 * x^-4 * x^-5\n * x^-1 * x^-2 * x^-3 * x^-4 * x^-5\n * x^-1 * x^-2 * x^-3 * x^-4 * x^-5\n * x^-1 * x^-2 * x^-3 * x^-4 * x^-5\n * x^-1 * x^-2 * x^-3 * x^-4 * x^-5\n * x^-1 * x^-2 * x^-3 * x^-4 * x^-5\n * x^-1 * x^-2 * x^-3 * x^-4 * x^-5\n * x^-1 * x^-2 * x^-3 * x^-4 * x^-5\n * x^-1 * x^-2 * x^-3 * x^-4 * x^-5\n * x^-1 * x^-2 * x^-3 * x^-4 * x^-5\n * x^-1 * x^-2 * x^-3 * x^-4 * x^-5\n * x^-1 * x^-2 * x^-3 * x^-4 * x^-5\n * x^-1 * x^-2 * x^-3 * x^-4 * x^-5\n * x^-1 * x^-2 * x^-3 * x^-4 * x^-5\n * x^-1 * x^-2 * x^-3 * x^-4 * x^-5\n * x^-1 * x^-2 * x^-3 * x^-4 * x^-5\n * x^-1 * x^-2 * x^-3 * x^-4 * x^-5\n * x^-1 * x^-2 * x^-3 * x^-4 * x^-5\n * x^-1 * x^-2 * x^-3 * x^-4 * x^-5\n * x^-1 * x^-2 * x^-3 * x^-4 * x^-5\n * x^-1 * x^-2 * x^-3 * x^-4 * x^-5\n * x^-1 * x^-2 * x^-3 * x^-4 * x^-5\n * x^-1 * x^-2 * x^-3 * x^-4 * x^-5\n * x^-1 * x^-2 * x^-3 * x^-4 * x^-5\n * x^-1 * x^-2 * x^-3 * x^-4 * x^-5\n * x^-1 * x^-2 * x^-3 * x^-4 * x^-5\n * x^-1 * x^-2 * x^-3 * x^-4 * x^-5\n * x^-1 * x^-2 * x^-3 * x^-4 * x^-5\n * x^-1 * x^-2 * x^-3 * x^-4 * x^-5\n * x^-1 * x^-2 * x^-3 * x^-4 * x^-5\n * x^-1 * x^-2 * x^-3 * x^-4 * x^-5\n * x^-1 * x^-2 * x^-3 * x^-4 * x^-5\n * x^-1 * x^-2 * x^-3 * x^-4 * x^-5\n * x^-1 * x^-2 * x^-3 * x^-4 * x^-5\n * x^-1 * x^-2 * x^-3 * x^-4 * x^-5\n * x^-1 * x^-2 * x^-3 * x^-4 * x^-5\n * x^-1 * x^-2 * x^-3 * x^-4 * x^-5\n * x^-1 * x^-2 * x^-3 * x^-4 * x^-5\n * x^-1 * x^-2 * x^-3 * x^-4 * x^-5\n * x^-1 * x^-2 * x^-3 * x^-4 * x^-5\n * x^-1 * x^-2 * x^-3 * x^-4 * x^-5\n * x^-1 * x^-2 * x^-3 * x^-4 * x^-5\n * x^-1 * x^-2 * x^-3 * x^-4 * x^-5\n * x^-1 * x^-2 * x^-3 * x^-4 * x^-5\n * x^-1 * x^-2 * x^-3 * x^-4 * x^-5\n * x^-1 * x^-2 * x^-3 * x^-4 * x^-5\n * x^-1 * x^-2 * x^-3 * x^-4 * x^-5\n * x^-1 * x^-2 * x^-3 * x^-4 * x^-5\n * x^-1 * x^-2 * x^-3 * x^-4 * x^-5\n * x^-1 * x^-2 * x^-3 * x^-4 * x^-5\n * x^-1 * x^-2 * x^-3 * x^-4 * x^-5\n * x^", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "gc": "<|endoftext|>/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n <= 1) {\n    return n;\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  Write a function to compute the nth Fibonacci number in the Fibonacci sequence using recursion.\n  >>> fibfib(1)\n  1\n  >>> fibfib(5)\n  5\n  >>> fibfib(8)\n  13\n  */\nconst fibfibRecursive = (n) => {\n  if (n <= 1) {\n    return n;\n  }\n  return fibfibRecursive(n-1) + fibfibRecursive(n-2) + fibfibRecursive(n-3);\n};\n\n/*\n  Write a function to compute the nth Fibonacci number in the Fibonacci sequence using tail recursion.\n  >>> fibfib(1)\n  1\n  >>> fibfib(5)\n  5\n  >>> fibfib(8)\n  13\n  */\nconst fibfibTailRecursive = (n) => {\n  if (n <= 1) {\n    return n;\n  }\n  return fibfibTailRecursive(n-1) + fibfibTailRecursive(n-2) + fibfibTailRecursive(n-3);\n};\n\n/*\n  Write a function to compute the nth Fibonacci number in the Fibonacci sequence using tail recursion and memoization.\n  >>> fibfib(1)\n  1\n  >>> fibfib(5)\n  5\n  >>> fibfib(8)\n  13\n  */\nconst fibfibTailRecursiveMemoized = (n) => {\n  if (n <= 1) {\n    return n;\n  }\n  return fibfibTailRecursiveMemoized(n-1) + fibfibTailRecursiveMemoized(n-2) + fibfibTailRecursiveMemoized(n-3);\n};\n\n/*\n  Write a function to compute the nth Fibonacci number in the Fibonacci sequence using tail recursion and memoization and memoization.\n  >>> fibfib(1)\n  1\n  >>> fibfib(5)\n  5\n  >>> fibfib(8)\n  13\n  */\nconst fibfibTailRecursiveMemoizedRecursive = (n) => {\n  if (n <= 1) {\n    return n;\n  }\n  return fibfibTailRecursiveMemoizedRecursive(n-1) + fibfibTailRecursiveMemoizedRecursive(n-2) + fibfibTailRecursiveMemoizedRecursive(n-3);\n};\n\n/*\n  Write a function to compute the nth Fibonacci number in the Fibonacci sequence using tail recursion and memoization and memoization.\n  >>> fibfib(1)\n  1\n  >>> fibfib(5)\n  5\n  >>> fibfib(8)\n  13\n  */\nconst fibfibTailRecursiveMemoizedTailRecursive = (n) => {\n  if (n <= 1) {\n    return n;\n  }\n  return fibfibTailRecursiveMemoizedTailRecursive(n-1) + fibfibTailRecursiveMemoizedTailRecursive(n-2) + fibfibTailRecursiveMemoizedTailRecursive(n-3);\n};\n\n/*\n  Write a function to compute the nth Fibonacci number in the Fibonacci sequence using tail recursion and memoization and memoization.\n  >>> fibfib(1)\n  1\n  >>> fibfib(5)\n  5\n  >>> fibfib(8)\n  13\n  */\nconst fibfibTailRecursiveMemoizedTailRecursiveRecursiveMemoized = (n) => {\n  if (n <= 1) {\n    return n;\n  }\n  return fibfibTailRecursiveMemoizedTailRecursiveMemoized(n-1) + fibfibTailRecursiveMemoizedTailRecursiveMemoized(n-2) + fibfibTailRecursiveMemoizedTailRecursiveMemoized(n-3);\n};\n\n/*\n  Write a function to compute the nth Fibonacci number in the Fibonacci sequence using tail recursion and memoization and memoization.\n  >>> fibfib(1)\n  1\n  >>> fibfib(5)\n  5\n  >>> fibfib(8)\n  13\n  */\nconst fibfibTailRecursiveMemoizedTailRecursiveMemoizedRecursive = (n) => {\n  if (n <= 1) {\n    return n;\n  }\n  return fibfibTailRecursiveMemoizedTailRecursiveMemoizedRecursive(n-1) + fibfibTailRecursiveMemoizedTailRecursiveMemoizedRecursive(n-2) + fibfibTailRecursiveMemoizedTailRecursiveMemoizedRecursive(n-3);\n};\n\n/*\n  Write a function to compute the nth Fibonacci number in the Fibonacci sequence using tail recursion and memoization and memoization.\n  >>> fibfib(1)\n  1\n  >>> fibfib(5)\n  5\n  >>> fibfib(8)\n  13\n  */\nconst fibfibTailRecursiveMemoizedTailRecursiveMemoizedTailRecursiveMemoized = (n) => {\n  if (n <= 1) {\n    return n;\n  }\n  return fibfibTailRecursiveMemoizedTailRecursiveMemoizedTailRecursiveMemoized(n-1) + fibfibTailRecursiveMemoizedTailRecursiveMemoizedTailRecursiveMemoized(n-2) + fibfibTailRecursiveMemoizedTailRecursiveMemoizedTailRecursiveMemoized(n-3);\n};\n\n/*\n  Write a function to compute the nth Fibonacci number in the Fibonacci sequence using tail recursion and memoization and memoization.\n  >>> fibfib(1)\n  1\n  >>> fibfib(5)\n  5\n  >>> fibfib(8)\n  13\n  */\nconst fibfibTailRecursiveMemoizedTailRecursiveMemoizedTailRecursiveMemoizedTailRecursiveMemoized = (n) => {\n  if (n <= 1) {\n    return n;\n  }\n  return fibfibTailRecursiveMemoizedTailRecursiveMemoizedTailRecursiveMemoizedTailRecursiveMemoized(n-1) + fibfibTailRecursiveMemoizedTailRecursiveMemoizedTailRecursiveMemoizedTailRecursiveMemoized(n-2) + fibfibTailRecursiveMemoizedTailRecursiveMemoizedTailRecursiveMemoizedTailRecursiveMemoized(n-3);\n};\n\n/*\n  Write a function to compute the nth Fibonacci number in the Fibonacci sequence using tail recursion and memoization and memoization.\n  >>> fibfib(1)\n  1\n  >>> fibfib(5)\n  5\n  >>> fibfib(8)\n  13\n  */\nconst fibfibTailRecursiveMemoizedTailRecursiveMemoizedTailRecursiveMemoizedTailRecursiveMemoizedTailRecursiveMemoized = (n) => {\n  if (n <= 1) {\n    return n;\n  }\n  return fibfibTailRecursiveMemoizedTailRecursiveMemoizedTailRecursiveMemoizedTailRecursiveMemoizedTailRecursiveMemoized(n-1) + fibfibTailRecursiveMemoizedTailRecursiveMemoizedTailRecursiveMemoizedTailRecursiveMemoizedTailRecur", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 3}
{"task_id": "JavaScript/64", "prompt": "/*Write a function vowelsConut which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelsConut(\"abcde\")\n  2\n  >>> vowelsConut(\"ACEDY\")\n  3\n  */\nconst vowelsConut = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsConut", "gc": "<|endoftext|>/*Write a function vowelsConut which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelsConut(\"abcde\")\n  2\n  >>> vowelsConut(\"ACEDY\")\n  3\n  */\nconst vowelsConut = (s) => {\n  let vowels = 0;\n  let vowelsEnd = 0;\n  let vowelsStart = 0;\n  let vowelsEndStart = 0;\n  let vowelsStartEnd = 0;\n  let vowelsEndEnd = 0;\n  let vowelsEndEndEnd = 0;\n  let vowelsEndEndEndEnd = 0;\n  let vowelsEndEndEndEndEnd = 0;\n  let vowelsEndEndEndEndEndEnd = 0;\n  let vowelsEndEndEndEndEndEndEnd = 0;\n  let vowelsEndEndEndEndEndEndEndEnd = 0;\n  let vowelsEndEndEndEndEndEndEndEndEnd = 0;\n  let vowelsEndEndEndEndEndEndEndEndEndEndEnd = 0;\n  let vowelsEndEndEndEndEndEndEndEndEndEndEndEndEndEnd = 0;\n  let vowelsEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEnd = 0;\n  let vowelsEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEnd = 0;\n  let vowelsEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEnd = 0;\n  let vowelsEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEnd", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> circularSihft(12, 1)\n  \"21\"\n  >>> circularSihft(12, 2)\n  \"12\"\n  */\nconst circularSihft = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularSihft", "gc": "<|endoftext|>/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> circularSihft(12, 1)\n  \"21\"\n  >>> circularSihft(12, 2)\n  \"12\"\n  */\nconst circularSihft = (x, shift) => {\n  let digits = x.toString(2).split('');\n  let reversed = digits.reverse();\n  reversed.splice(reversed.length - shift, shift);\n  return reversed.join('');\n};\n\n/*\n  Return the number of trailing zeros in a number.\n  >>> trailingZeros(123)\n  3\n  >>> trailingZeros(-123)\n  -1\n  */\nconst trailingZeros = x => {\n  let digits = x.toString(2).split('');\n  let len = digits.length;\n  let count = 0;\n  for (let i = len - 1; i >= 0; i--) {\n    if (digits[i] === '0') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Return the number of leading zeros in a number.\n  >>> leadingZeros(123)\n  3\n  >>> leadingZeros(-123)\n  0\n  */\nconst leadingZeros = x => {\n  let digits = x.toString(2).split('');\n  let len = digits.length;\n  let count = 0;\n  for (let i = 0; i < len; i += 1) {\n    if (digits[i] === '0') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Return the number of trailing zeros in a number with leading zeros.\n  >>> trailingZeros(123)\n  3\n  >>> trailingZeros(-123)\n  0\n  */\nconst trailingZerosWithLeadingZeros = x => {\n  let digits = x.toString(2).split('');\n  let len = digits.length;\n  let count = 0;\n  for (let i = 0; i < len; i += 1) {\n    if (digits[i] === '0') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Return the number of leading zeros in a number with leading zeros.\n  >>> leadingZeros(123)\n  3\n  >>> leadingZeros(-123)\n  0\n  */\nconst leadingZerosWithLeadingZeros = x => {\n  let digits = x.toString(2).split('');\n  let len = digits.length;\n  let count = 0;\n  for (let i = 0; i < len; i += 1) {\n    if (digits[i] === '0') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Return the number of trailing zeros in a number with trailing zeros.\n  >>> trailingZeros(123)\n  3\n  >>> trailingZeros(-123)\n  0\n  */\nconst trailingZerosWithTrailingZeros = x => {\n  let digits = x.toString(2).split('');\n  let len = digits.length;\n  let count = 0;\n  for (let i = len - 1; i >= 0; i--) {\n    if (digits[i] === '0') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Return the number of leading zeros in a number with trailing zeros.\n  >>> leadingZeros(123)\n  3\n  >>> leadingZeros(-123)\n  0\n  */\nconst leadingZerosWithTrailingZeros = x => {\n  let digits = x.toString(2).split('');\n  let len = digits.length;\n  let count = 0;\n  for (let i = 0; i < len; i += 1) {\n    if (digits[i] === '0') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Return the number of trailing zeros in a number with leading zeros and trailing zeros.\n  >>> trailingZeros(123)\n  3\n  >>> trailingZeros(-123)\n  0\n  */\nconst trailingZerosWithTrailingZerosWithLeadingZeros = x => {\n  let digits = x.toString(2).split('');\n  let len = digits.length;\n  let count = 0;\n  for (let i = 0; i < len; i += 1) {\n    if (digits[i] === '0') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Return the number of leading zeros in a number with leading zeros and trailing zeros.\n  >>> leadingZeros(123)\n  3\n  >>> leadingZeros(-123)\n  0\n  */\nconst leadingZerosWithTrailingZerosWithLeadingZeros = x => {\n  let digits = x.toString(2).split('');\n  let len = digits.length;\n  let count = 0;\n  for (let i = 0; i < len; i += 1) {\n    if (digits[i] === '0') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Return the number of trailing zeros in a number with trailing zeros and leading zeros.\n  >>> trailingZeros(123)\n  3\n  >>> trailingZeros(-123)\n  0\n  */\nconst trailingZerosWithTrailingZerosWithTrailingZeros = x => {\n  let digits = x.toString(2).split('');\n  let len = digits.length;\n  let count = 0;\n  for (let i = len - 1; i >= 0; i--) {\n    if (digits[i] === '0') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Return the number of leading zeros in a number with trailing zeros and leading zeros.\n  >>> leadingZeros(123)\n  3\n  >>> leadingZeros(-123)\n  0\n  */\nconst leadingZerosWithTrailingZerosWithTrailingZeros = x => {\n  let digits = x.toString(2).split('');\n  let len = digits.length;\n  let count = 0;\n  for (let i = 0; i < len; i += 1) {\n    if (digits[i] === '0') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Return the number of trailing zeros in a number with leading zeros and trailing zeros.\n  >>> trailingZeros(123)\n  3\n  >>> trailingZeros(-123)\n  0\n  */\nconst trailingZerosWithLeadingZerosWithTrailingZeros = x => {\n  let digits = x.toString(2).split('');\n  let len = digits.length;\n  let count = 0;\n  for (let i = 0; i < len; i += 1) {\n    if (digits[i] === '0') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Return the number of leading zeros in a number with leading zeros and trailing zeros.\n  >>> leadingZeros(123)\n  3\n  >>> leadingZeros(-123)\n  0\n  */\nconst leadingZerosWithLeadingZerosWithLeadingZeros = x => {\n  let digits = x.toString(2).split('');\n  let len = digits.length;\n  let count = 0;\n  for (let i = 0; i < len; i += 1) {\n    if (digits[i] === '0') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Return the number of trailing zeros in a number with trailing zeros and leading zeros.\n  >>> trailingZeros(123)\n  3\n  >>> trailingZeros(-123)\n  0\n  */\nconst trailingZerosWithTrailingZerosWithLeadingZeros = x => {\n  let digits = x.toString(2).split('');\n  let len = digits.length;\n  let count = 0;\n  for (let i = len - 1; i >= 0; i--) {\n    if (digits[i] === '0') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Return the number of leading zeros in a number with leading zeros and trailing zeros.\n  >>> leadingZeros(123)\n  3\n  >>> leadingZeros(-123)\n  0\n  */\nconst leadingZerosWithTrailingZerosWithLeadingZeros = x => {\n  let digits = x.toString(2).split('');\n  let ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/66", "prompt": "/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "gc": "<|endoftext|>/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  let i = s.length;\n  while (i--) {\n    sum += s.charCodeAt(i) - 48;\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the lower characters only'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSumLower = (s) => {\n  let sum = 0;\n  let i = s.length;\n  while (i--) {\n    sum += s.charCodeAt(i) - 47;\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the upper and lower case letters'\n  ASCII codes.\n\n  Examples:\n      digitSumLower(\"\") => 0\n      digitSumLower(\"abAB\") => 131\n      digitSumLower(\"abcCd\") => 67\n      digitSumLower(\"helloE\") => 69\n      digitSumLower(\"woArBld\") => 131\n      digitSumLower(\"aAaaaXa\") => 153\n  */\nconst digitSumLower = (s) => {\n  let sum = 0;\n  let i = s.length;\n  while (i--) {\n    sum += s.charCodeAt(i) - 97;\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the upper and lower case letters'\n  ASCII codes ignoring case.\n\n  Examples:\n      digitSumLower(\"\") => 0\n      digitSumLower(\"abAB\") => 131\n      digitSumLower(\"abcCd\") => 67\n      digitSumLower(\"helloE\") => 69\n      digitSumLower(\"woArBld\") => 131\n      digitSumLower(\"aAaaaXa\") => 153\n  */\nconst digitSumLower = (s) => {\n  let sum = 0;\n  let i = s.length;\n  while (i--) {\n    sum += s.charCodeAt(i) - 96;\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the upper and lower case letters'\n  ASCII codes ignoring case and ignoring case.\n\n  Examples:\n      digitSumLower(\"\") => 0\n      digitSumLower(\"abAB\") => 131\n      digitSumLower(\"abcCd\") => 67\n      digitSumLower(\"helloE\") => 69\n      digitSumLower(\"woArBld\") => 131\n      digitSumLower(\"aAaaaXa\") => 153\n  */\nconst digitSumLower = (s) => {\n  let sum = 0;\n  let i = s.length;\n  while (i--) {\n    sum += s.charCodeAt(i) - 95;\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the upper and lower case letters'\n  ASCII codes ignoring case and ignoring case.\n\n  Examples:\n      digitSumLower(\"\") => 0\n      digitSumLower(\"abAB\") => 131\n      digitSumLower(\"abcCd\") => 67\n      digitSumLower(\"helloE\") => 69\n      digitSumLower(\"woArBld\") => 131\n      digitSumLower(\"aAaaaXa\") => 153\n  */\nconst digitSumLower = (s) => {\n  let sum = 0;\n  let i = s.length;\n  while (i--) {\n    sum += s.charCodeAt(i) - 94;\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the upper and lower case letters'\n  ASCII codes ignoring case and ignoring case.\n\n  Examples:\n      digitSumLower(\"\") => 0\n      digitSumLower(\"abAB\") => 131\n      digitSumLower(\"abcCd\") => 67\n      digitSumLower(\"helloE\") => 69\n      digitSumLower(\"woArBld\") => 131\n      digitSumLower(\"aAaaaXa\") => 153\n  */\nconst digitSumLower = (s) => {\n  let sum = 0;\n  let i = s.length;\n  while (i--) {\n    sum += s.charCodeAt(i) - 93;\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the upper and lower case letters'\n  ASCII codes ignoring case and ignoring case.\n\n  Examples:\n      digitSumLower(\"\") => 0\n      digitSumLower(\"abAB\") => 131\n      digitSumLower(\"abcCd\") => 67\n      digitSumLower(\"helloE\") => 69\n      digitSumLower(\"woArBld\") => 131\n      digitSumLower(\"aAaaaXa\") => 153\n  */\nconst digitSumLower = (s) => {\n  let sum = 0;\n  let i = s.length;\n  while (i--) {\n    sum += s.charCodeAt(i) - 92;\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the upper and lower case letters'\n  ASCII codes ignoring case and ignoring case.\n\n  Examples:\n      digitSumLower(\"\") => 0\n      digitSumLower(\"abAB\") => 131\n      digitSumLower(\"abcCd\") => 67\n      digitSumLower(\"helloE\") => 69\n      digitSumLower(\"woArBld\") => 131\n      digitSumLower(\"aAaaaXa\") => 153\n  */\nconst digitSumLower = (s) => {\n  let sum = 0;\n  let i = s.length;\n  while (i--) {\n    sum += s.charCodeAt(i) - 91;\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the upper and lower case letters'\n  ASCII codes ignoring case and ignoring case.\n\n  Examples:\n      digitSumLower(\"\") => 0\n      digitSumLower(\"abAB\") => 131\n      digitSumLower(\"abcCd\") => 67\n      digitSumLower(\"helloE\") => 69\n      digitSumLower(\"woArBld\") => 131\n      digitSumLower(\"aAaaaXa\") => 153\n  */\nconst digitSumLower = (s) => {\n  let sum = 0;\n  let i = s.length;\n  while (i--) {\n    sum += s.charCodeAt(i) - 90;\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the upper and lower case letters'\n  ASCII codes ignoring case and ignoring case.\n\n  Examples:\n      digitSumLower(\"\") => 0\n      digitSumLower(\"abAB\") => 131\n      digitSumLower(\"abcCd\") => 67\n      digitSumLower(\"helloE\") => 69", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "gc": "<|endoftext|>/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n  let totalApples = 0;\n  let totalOranges = 0;\n  let totalMango = 0;\n  let total = 0;\n\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'a') {\n      totalApples += 1;\n    } else if (s[i] === 'o') {\n      totalOranges += 1;\n    } else if (s[i] ==='m') {\n      totalMango += 1;\n    }\n  }\n\n  total = totalApples + totalOranges + totalMango;\n\n  return total;\n};\n\n/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n  let totalApples = 0;\n  let totalOranges = 0;\n  let totalMango = 0;\n  let total = 0;\n\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'a') {\n      totalApples += 1;\n    } else if (s[i] === 'o') {\n      totalOranges += 1;\n    } else if (s[i] ==='m') {\n      totalMango += 1;\n    }\n  }\n\n  total = totalApples + totalOranges + totalMango;\n\n  return total;\n};\n\n/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n  let totalApples = 0;\n  let totalOranges = 0;\n  let totalMango = 0;\n  let total = 0;\n\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'a') {\n      totalApples += 1;\n    } else if (s[i] === 'o') {\n      totalOranges += 1;\n    } else if (s[i] ==='m') {\n      totalMango += 1;\n    }\n  }\n\n  total = totalApples + totalOranges + totalMango;\n\n  return total;\n};\n\n/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n  let totalApples = 0;\n  let totalOranges = 0;\n  let totalMango = 0;\n  let total = 0;\n\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'a') {\n      totalApples += 1;\n    } else if (s[i] === 'o') {\n      totalOranges += 1;\n    } else if (s[i] ==='m') {\n      totalMango += 1;\n    }\n  }\n\n  total = totalApples + totalOranges + totalMango;\n\n  return total;\n};\n\n/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n  let totalApples = 0;\n  let totalOranges = 0;\n  let totalMango = 0;\n  let total = 0;\n\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'a') {\n      totalApples += 1;\n    } else if (s[i] === 'o') {\n      totalOranges += 1;\n    } else if (s[i] ==='m') {\n      totalMango += 1;\n    }\n  }\n\n  total = totalApples + totalOranges + totalMango;\n\n  return total;\n};\n\n/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n  let totalApples = 0;\n  let totalOranges = 0;\n  let totalMango = 0;\n  let total = 0;\n\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'a') {\n      totalApples += 1;\n    } else if (s[i] === 'o') {\n      totalOranges += 1;\n    } else if (s[i] ==='m') {\n      ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "gc": "<|endoftext|>/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  const len = arr.length;\n  let min = 0;\n  let max = len - 1;\n  let even = 0;\n  let index = -1;\n  while (min <= max) {\n    even = arr[min] % 2;\n    if (even === 0) {\n      min = min + 1;\n    } else {\n      max = max - 1;\n    }\n    index++;\n  }\n  return [arr[even], index];\n};\n\n// https://leetcode.com/problems/find-the-minimum-number-of-nodes-in-a-binary-tree/\n/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number}\n */\nvar findMinNode = function (root) {\n  if (!root) {\n    return -1;\n  }\n  const leftMin = findMinNode(root.left);\n  const rightMin = findMinNode(root.right);\n  return Math.min(leftMin, rightMin);\n};\n\n// https://leetcode.com/problems/find-the-minimum-number-of-nodes-in-a-binary-tree/\n/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number}\n */\nvar findMinNodes = function (root) {\n  if (!root) {\n    return -1;\n  }\n  const leftMin = findMinNodes(root.left);\n  const rightMin = findMinNodes(root.right);\n  return Math.min(leftMin, rightMin);\n};\n\n// https://leetcode.com/problems/find-the-minimum-number-of-nodes-in-a-binary-tree/\n/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number}\n */\nvar findMinNodesFast = function (root) {\n  if (!root) {\n    return -1;\n  }\n  const leftMin = findMinNodesFast(root.left);\n  const rightMin = findMinNodesFast(root.right);\n  return Math.min(leftMin, rightMin);\n};\n\n// https://leetcode.com/problems/find-the-minimum-number-of-nodes-in-a-binary-tree/\n/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number}\n */\nvar findMinNodesFast2 = function (root) {\n  if (!root) {\n    return -1;\n  }\n  const leftMin = findMinNodesFast2(root.left);\n  const rightMin = findMinNodesFast2(root.right);\n  return Math.min(leftMin, rightMin);\n};\n\n// https://leetcode.com/problems/find-the-minimum-number-of-nodes-in-a-binary-tree/\n/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number}\n */\nvar findMinNodesFast3 = function (root) {\n  if (!root) {\n    return -1;\n  }\n  const leftMin = findMinNodesFast3(root.left);\n  const rightMin = findMinNodesFast3(root.right);\n  return Math.min(leftMin, rightMin);\n};\n\n// https://leetcode.com/problems/find-the-minimum-number-of-nodes-in-a-binary-tree/\n/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number}\n */\nvar findMinNodesFast4 = function (root) {\n  if (!root) {\n    return -1;\n  }\n  const leftMin = findMinNodesFast4(root.left);\n  const rightMin = findMinNodesFast4(root.right);\n  return Math.min(leftMin, rightMin);\n};\n\n// https://leetcode.com/problems/find-the-minimum-number-of-nodes-in-a-binary-tree/\n/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number}\n */\nvar findMinNodesFast5 = function (root) {\n  if (!root) {\n    return -1;\n  }\n  const leftMin = findMinNodesFast5(root.left);\n  const rightMin = findMinNodesFast5(root.right);\n  return Math.min(leftMin, rightMin);\n};\n\n// https://leetcode.com/problems/find-the-minimum-number-of-nodes-in-a-binary-tree/\n/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number}\n */\nvar findMinNodesFast6 = function (root) {\n  if (!root) {\n    return -1;\n  }\n  const leftMin = findMinNodesFast6(root.left);\n  const rightMin = findMinNodesFast6(root.right);\n  return Math.min(leftMin, rightMin);\n};\n\n// https://leetcode.com/problems/find-the-minimum-number-of-nodes-in-a-binary-tree/\n/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number}\n */\nvar findMinNodesFast7 = function (root) {\n  if (!root) {\n    return -1;\n  }\n  const leftMin = findMinNodesFast7(root.left);\n  const rightMin = findMinNodesFast7(root.right);\n  return Math.min(leftMin, rightMin);\n};\n\n// https://leetcode.com/problems/find-the-minimum-number-of-nodes-in-a-binary-tree/\n/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number}\n */\nvar findMinNodesFast8 = function (root) {\n  if (!root) {\n    return -1;\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/69", "prompt": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "gc": "<|endoftext|>/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = 0;\n  let freq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n      freq = i;\n    }\n  }\n  return max;\n};\n\n/*\n  You are given a non-empty list of positive integers. Return the sum of the squares of the integers\n  in the list. You may assume that each of the numbers in the list is in the range [0, 100].\n  Examples:\n      sum([4, 1, 2, 2, 3, 1]) = 24\n      sum([5, 5, 4, 4, 4]) = 25\n      sum([5, 5, 4, 4, 4]) = 25\n      sum([5, 5, 4, 4, 4]) = 25\n      sum([5, 5, 4, 4, 4]) = 25\n      sum([5, 5, 4, 4, 4]) = 25\n      sum([5, 5, 4, 4, 4]) = 25\n      sum([5, 5, 4, 4, 4]) = 25\n      sum([5, 5, 4, 4, 4]) = 25\n      sum([5, 5, 4, 4, 4]) = 25\n      sum([5, 5, 4, 4, 4]) = 25\n      sum([5, 5, 4, 4, 4]) = 25\n      sum([5, 5, 4, 4, 4]) = 25\n      sum([5, 5, 4, 4, 4]) = 25\n      sum([5, 5, 4, 4, 4]) = 25\n      sum([5, 5, 4, 4, 4]) = 25\n      sum([5, 5, 4, 4, 4]) = 25\n      sum([5, 5, 4, 4, 4]) = 25\n      sum([5, 5, 4, 4, 4]) = 25\n      sum([5, 5, 4, 4, 4]) = 25\n      sum([5, 5, 4, 4, 4]) = 25\n      sum([5, 5, 4, 4, 4]) = 25\n      sum([5, 5, 4, 4, 4]) = 25\n      sum([5, 5, 4, 4, 4]) = 25\n      sum([5, 5, 4, 4, 4]) = 25\n      sum([5, 5, 4, 4, 4]) = 25\n      sum([5, 5, 4, 4, 4]) = 25\n      sum([5, 5, 4, 4, 4]) = 25\n      sum([5, 5, 4, 4, 4]) = 25\n      sum([5, 5, 4, 4, 4]) = 25\n      sum([5, 5, 4, 4, 4]) = 25\n      sum([5, 5, 4, 4, 4]) = 25\n      sum([5, 5, 4, 4, 4]) = 25\n      sum([5, 5, 4, 4, 4]) = 25\n      sum([5, 5, 4, 4, 4]) = 25\n      sum([5, 5, 4, 4, 4]) = 25\n      sum([5, 5, 4, 4, 4]) = 25\n      sum([5, 5, 4, 4, 4]) = 25\n      sum([5, 5, 4, 4, 4]) = 25\n      sum([5, 5, 4, 4, 4]) = 25\n      sum([5, 5, 4, 4, 4]) = 25\n      sum([5, 5, 4, 4, 4]) = 25\n      sum([5, 5, 4, 4, 4]) = 25\n      sum([5, 5, 4, 4, 4]) = 25\n      sum([5, 5, 4, 4, 4]) = 25\n      sum([5, 5, 4, 4, 4]) = 25\n      sum([5, 5, 4, 4, 4]) = 25\n      sum([5, 5, 4, 4, 4]) = 25\n      sum([5, 5, 4, 4, 4]) = 25\n      sum([5, 5, 4, 4, 4]) = 25\n      sum([5, 5, 4, 4, 4]) = 25\n      sum([5, 5, 4, 4, 4]) = 25\n      sum([5, 5, 4, 4, 4]) = 25\n      sum([5, 5, 4, 4, 4]) = 25\n      sum([5, 5, 4, 4, 4]) = 25\n      sum([5, 5, 4, 4, 4]) = 25\n      sum([5, 5, 4, 4, 4]) = 25\n      sum([5, 5, 4, 4, 4]) = 25\n      sum([5, 5, 4, 4, 4]) = 25\n      sum([5, 5, 4, 4, 4]) = 25\n      sum([5, 5, 4, 4, 4]) = 25\n      sum([5, 5, 4, 4, 4]) = 25\n      sum([5, 5, 4, 4, 4]) = 25\n      sum([5, 5, 4, 4, 4]) = 25\n      sum([5, 5, 4, 4, 4]) = 25\n      sum([5, 5, 4, 4, 4]) = 25\n      sum([5, 5, 4, 4, 4]) = 25\n      sum([5, 5, 4, 4, 4]) = 25\n      sum([5, 5, 4, 4, 4]) = 25\n      sum([5, 5, 4, 4, 4]) = 25\n      sum([5, 5, 4, 4, 4]) = 25\n      sum([5, 5, 4, 4, 4]) = 25\n      sum([5, 5, 4, 4, 4]) = 25\n      sum([5, 5, 4, 4, 4]) = 25\n      sum([5, 5, 4, 4, 4]) = 25\n      sum([5, 5, 4, 4, 4]) = 25\n      sum([5, 5, 4, 4, 4]) = 25\n      sum([5, 5, 4, 4, 4]) = 25\n      sum([5, 5, 4, 4, 4]) = 25\n      sum([5, 5, 4, 4, 4]) = 25\n      sum([5, 5, 4, 4, 4]) = 25\n      sum([5, 5, 4, 4, 4]) = 25\n      sum([5, 5, 4, 4, 4]) = 25\n      sum([5, 5, 4, 4, 4]) = 25\n      sum([5, 5, 4, 4, 4]) = 25\n      sum([5, 5, 4, 4, 4]) = 25\n      sum([5, 5, 4, 4, 4]) = 25\n      sum([5, 5, 4, 4, 4]) = 25\n      sum([5, 5, 4, 4, 4]) = 25\n      sum([5, 5, 4, 4, 4]) = 25\n      sum([5, 5, 4, 4, 4]) = 25\n      sum([5, 5, 4, 4, 4]) = 25\n      sum([5, 5, 4, 4, 4]) = 25\n      sum([5, 5, 4, 4, 4]) = 25\n      sum([5, 5, 4, 4, 4]) = 25\n      sum([5, 5, 4, 4, 4]) = 25\n      sum([5, 5, 4, 4, 4]) = 25\n      sum([5, 5, 4, 4, 4]) = 25\n      sum([5, 5, 4, 4, 4]) = 25\n      sum([5, 5, 4, 4, 4]) = 25\n      sum([5, 5, 4, 4, 4]) = 25\n      sum([5, 5, 4, 4, 4]) = 25\n      sum([5, 5, 4, 4, 4]) = 25\n      sum([5, 5, 4, 4, 4]) = 25\n      sum([5, 5, 4, 4, 4]) = 25\n      sum([5, 5, 4, 4, 4]) = 25\n      sum([5, 5, 4, 4, 4]) = 25\n      sum([5, 5, 4, 4, 4]) = 25\n      sum([5, 5, 4, 4, 4]) = 25\n      sum([5, 5, 4, 4, 4]) = 25\n      sum([5, 5, 4, 4, 4]) = 25\n      sum([5, 5, 4, 4, 4]) = 25\n      sum([5, 5, 4, 4, 4]) = 25\n      sum([5, 5, 4, 4, 4]) = 25\n      sum([5, 5, 4, 4, 4]) = 25\n      sum([5, 5, 4, 4, 4]) = 25\n      sum([5, 5, 4, 4, 4]) = 25\n      sum([5, 5, 4, 4, 4]) = 25\n      sum([5, 5, 4, 4, 4]) = 25\n      sum([5, 5, 4, 4, 4]) = 25\n      sum([5, 5, 4, 4, 4]) = 25\n      sum([5, 5, 4, 4, 4]) = 25\n      sum([5, 5, 4, 4, 4]) = 25\n      sum([5, 5, 4, 4, 4]) = 25\n      sum([5, 5, 4, 4, 4]) = 25\n      sum([5, 5, 4, 4, 4]) = 25\n      sum([5, 5, 4, 4, 4]) = 25\n      sum([5, 5, 4, 4, 4]) = 25\n      sum([5, 5, 4, 4, 4]) = 25\n      sum([5, 5, 4, 4, 4]) = 25\n      sum([5, 5, 4, 4, 4]) = 25\n      sum([5, 5, 4, 4, 4]) = 25\n      sum([5, 5, 4, 4, 4]) = 25\n      sum([5, 5, 4, 4, 4]) = 25\n      sum([5, 5, 4, 4, 4]) = 25\n      sum([5, 5, 4, 4, 4]) = 25\n      sum([5, 5, 4, 4, 4]) = 25\n      sum([5, 5, 4, 4, 4]) = 25\n      sum([5, 5, 4, 4, 4]) = 25\n      sum([5, 5, 4, 4, 4]) = 25\n      sum([5, 5, 4, 4, 4]) = 25\n      sum([5, 5, 4, 4, 4]) = 25\n      sum([5, 5, 4, 4, 4]) = 25\n      sum([5, 5, 4, 4, 4]) = 25\n      sum([5, 5, 4, 4, 4]) = 25\n      sum([5, 5, 4, 4, 4]) = 25\n      sum([5, 5, 4, 4, 4]) = 25\n      sum([5, 5, 4, 4, 4]) = 25\n      sum([5, 5, 4, 4, 4]) = 25\n      sum([5, 5, 4, 4, 4]) = 25\n      sum([5, 5, 4, 4, 4]) = 25\n      sum([5, ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filteBrySubstring([], 'a')\n  []\n  >>> filteBrySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filteBrySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filteBrySubstring", "gc": "<|endoftext|>/* Filter an input list of strings only for ones that contain given substring\n  >>> filteBrySubstring([], 'a')\n  []\n  >>> filteBrySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filteBrySubstring = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) === 0)\n}\n\n// Filter an input list of strings only for ones that do not contain given substring\nconst filteBryNoSubstring = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) === -1)\n}\n\n// Filter an input list of strings only for ones that do not contain given substring\nconst filteBryNoSubstringCaseInsensitive = (strings, substring) => {\n  return strings.filter(string => string.includes(substring))\n}\n\n// Filter an input list of strings only for ones that do not contain given substring\nconst filteBryNoSubstringCaseInsensitiveIgnoreCase = (strings, substring) => {\n  return strings.filter(string => string.includes(substring, { ignoreCase: true }))\n}\n\n// Filter an input list of strings only for ones that do not contain given substring\nconst filteBryNoSubstringCaseInsensitiveIgnoreCaseIgnoreCase = (strings, substring) => {\n  return strings.filter(string => string.includes(substring, { ignoreCase: true, ignoreCase: true }))\n}\n\n// Filter an input list of strings only for ones that do not contain given substring\nconst filteBryNoSubstringCaseInsensitiveIgnoreCaseIgnoreCaseIgnoreCase = (strings, substring) => {\n  return strings.filter(string => string.includes(substring, { ignoreCase: true, ignoreCase: true, ignoreCase: true }))\n}\n\n// Filter an input list of strings only for ones that do not contain given substring\nconst filteBryNoSubstringCaseInsensitiveIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCase = (strings, substring) => {\n  return strings.filter(string => string.includes(substring, { ignoreCase: true, ignoreCase: true, ignoreCase: true, ignoreCase: true }))\n}\n\n// Filter an input list of strings only for ones that do not contain given substring\nconst filteBryNoSubstringCaseInsensitiveIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCase = (strings, substring) => {\n  return strings.filter(string => string.includes(substring, { ignoreCase: true, ignoreCase: true, ignoreCase: true, ignoreCase: true, ignoreCase: true }))\n}\n\n// Filter an input list of strings only for ones that do not contain given substring\nconst filteBryNoSubstringCaseInsensitiveIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCase = (strings, substring) => {\n  return strings.filter(string => string.includes(substring, { ignoreCase: true, ignoreCase: true, ignoreCase: true, ignoreCase: true, ignoreCase: true, ignoreCase: true }))\n}\n\n// Filter an input list of strings only for ones that do not contain given substring\nconst filteBryNoSubstringCaseInsensitiveIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCase", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  stranegoSrtList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  stranegoSrtList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  stranegoSrtList([]) == []\n  */\nconst stranegoSrtList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "stranegoSrtList", "gc": "<|endoftext|>/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  stranegoSrtList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  stranegoSrtList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  stranegoSrtList([]) == []\n  */\nconst stranegoSrtList = (lst) => {\n  let min = lst[0];\n  let max = lst[0];\n  let min = lst[0];\n  let max = lst[0];\n  let min = lst[0];\n  let max = lst[0];\n  let min = lst[0];\n  let max = lst[0];\n  let min = lst[0];\n  let max = lst[0];\n  let min = lst[0];\n  let max = lst[0];\n  let min = lst[0];\n  let max = lst[0];\n  let min = lst[0];\n  let max = lst[0];\n  let min = lst[0];\n  let max = lst[0];\n  let min = lst[0];\n  let max = lst[0];\n  let min = lst[0];\n  let max = lst[0];\n  let min = lst[0];\n  let max = lst[0];\n  let min = lst[0];\n  let max = lst[0];\n  let min = lst[0];\n  let max = lst[0];\n  let min = lst[0];\n  let max = lst[0];\n  let min = lst[0];\n  let max = lst[0];\n  let min = lst[0];\n  let max = lst[0];\n  let min = lst[0];\n  let max = lst[0];\n  let min = lst[0];\n  let max = lst[0];\n  let min = lst[0];\n  let max = lst[0];\n  let min = lst[0];\n  let max = lst[0];\n  let min = lst[0];\n  let max = lst[0];\n  let min = lst[0];\n  let max = lst[0];\n  let min = lst[0];\n  let max = lst[0];\n  let min = lst[0];\n  let max = lst[0];\n  let min = lst[0];\n  let max = lst[0];\n  let min = lst[0];\n  let max = lst[0];\n  let min = lst[0];\n  let max = lst[0];\n  let min = lst[0];\n  let max = lst[0];\n  let min = lst[0];\n  let max = lst[0];\n  let min = lst[0];\n  let max = lst[0];\n  let min = lst[0];\n  let max = lst[0];\n  let min = lst[0];\n  let max = lst[0];\n  let min = lst[0];\n  let max = lst[0];\n  let min = lst[0];\n  let max = lst[0];\n  let min = lst[0];\n  let max = lst[0];\n  let min = lst[0];\n  let max = lst[0];\n  let min = lst[0];\n  let max = lst[0];\n  let min = lst[0];\n  let max = lst[0];\n  let min = lst[0];\n  let max = lst[0];\n  let min = lst[0];\n  let max = lst[0];\n  let min = lst[0];\n  let max = lst[0];\n  let min = lst[0];\n  let max = lst[0];\n  let min = lst[0];\n  let max = lst[0];\n  let min = lst[0];\n  let max = lst[0];\n  let min = lst[0];\n  let max = lst[0];\n  let min = lst[0];\n  let max = lst[0];\n  let min = lst[0];\n  let max = lst[0];\n  let min = lst[0];\n  let max = lst[0];\n  let min = lst[0];\n  let max = lst[0];\n  let min = lst[0];\n  let max = lst[0];\n  let min = lst[0];\n  let max = lst[0];\n  let min = lst[0];\n  let max = lst[0];\n  let min = lst[0];\n  let max = lst[0];\n  let min = lst[0];\n  let max = lst[0];\n  let min = lst[0];\n  let max = lst[0];\n  let min = lst[0];\n  let max = lst[0];\n  let min = lst[0];\n  let max = lst[0];\n  let min = lst[0];\n  let max = lst[0];\n  let min = lst[0];\n  let max = lst[0];\n  let min = lst[0];\n  let max = lst[0];\n  let min = lst[0];\n  let max = lst[0];\n  let min = lst[0];\n  let max = lst[0];\n  let min = lst[0];\n  let max = lst[0];\n  let min = lst[0];\n  let max = lst[0];\n  let min = lst[0];\n  let max = lst[0];\n  let min = lst[0];\n  let max = lst[0];\n  let min = lst[0];\n  let max = lst[0];\n  let min = lst[0];\n  let max = lst[0];\n  let min = lst[0];\n  let max = lst[0];\n  let min = lst[0];\n  let max = lst[0];\n  let min = lst[0];\n  let max = lst[0];\n  let min = lst[0];\n  let max = lst[0];\n  let min = lst[0];\n  let max = lst[0];\n  let min = lst[0];\n  let max = lst[0];\n  let min = lst[0];\n  let max = lst[0];\n  let min = lst[0];\n  let max = lst[0];\n  let min = lst[0];\n  let max = lst[0];\n  let min = lst[0];\n  let max = lst[0];\n  let min = lst[0];\n  let max = lst[0];\n  let min = lst[0];\n  let max = lst[0];\n  let min = lst[0];\n  let max = lst[0];\n  let min = lst[0];\n  let max = lst[0];\n  let min = lst[0];\n  let max = lst[0];\n  let min = lst[0];\n  let max = lst[0];\n  let min = lst[0];\n  let max = lst[0];\n  let min = lst[0];\n  let max = lst[0];\n  let min = lst[0];\n  let max = lst[0];\n  let min = lst[0];\n  let max = lst[0];\n  let min = lst[0];\n  let max = lst[0];\n  let min = lst[0];\n  let max = lst[0];\n  let min = lst[0];\n  let max = lst[0];\n  let min = lst[0];\n  let max = lst[0];\n  let min = lst[0];\n  let max = lst[0];\n  let min = lst[0];\n  let max = lst[0];\n  let min = lst[0];\n  let max = lst[0];\n  let min = lst[0];\n  let max = lst[0];\n  let min = lst[0];\n  let max = lst[0];\n  let min = lst[0];\n  let max = lst[0];\n  let min = lst[0];\n  let max = lst[0];\n  let min = lst[0];\n  let max = lst[0];\n  let min = lst[0];\n  let max = lst[0];\n  let min = lst[0];\n  let max = lst[0];\n  let min = lst[0];\n  let max = lst[0];\n  let min = lst[0];\n  let max = lst[0];\n  let min = lst[0];\n  let max = lst[0];\n  let min = lst[0];\n  let max = lst[0];\n  let min = lst[0];\n  let max = lst[0];\n  let min = lst[0];\n  let max = lst[0];\n  let min = lst[0];\n  let max = lst[0];\n  let min = lst[0];\n  let max = lst[0];\n  let min = lst[0];\n  let max = lst[0];\n  let min = lst[0];\n  let max = lst[0];\n  let min = lst[0];\n  let max = lst[0];\n  let min = lst[0];\n  let max = lst[0];\n  let min = lst[0];\n  let max = lst[0];\n  let min = lst[0];\n  let max = lst[0];\n  let min = lst[0];\n  let max = lst[0];\n  let min = lst[0];\n  let max = lst[0];\n  let min = lst[0];\n  let max = lst[0];\n  let min = lst[0];\n  let max = lst[0];\n  let min = lst[0];\n  let max = lst[0];\n  let min = lst[0];\n  let max = lst[0];\n  let min = lst[0];\n  let max = lst[0];\n  let min = lst[0];\n  let max = lst[0];\n  let min = lst[0];\n  let max = lst[0];\n  let min = lst[0];\n  let max = lst[0];\n  let min = lst[0];\n  let max = lst[0];\n  let min = lst[0];\n  let max = lst[0];\n  let min = lst[0];\n  let max = lst[0];\n  let min = lst[0];\n  let max = lst[0];\n  let min = lst[0];\n  let max = lst[0];\n  let min = lst[0];\n  let max = lst[0];\n  let min = lst[0];\n  let max = lst[0];\n  let min = lst[0];\n  let max = lst[0];\n  let min = lst[0];\n  let max = lst[0];\n  let min = lst[0];\n  let max = lst[0];\n  let min = lst[0];\n  let max = lst[0];\n  let min = lst[0];\n  let max = lst[0];\n  let min = lst[0];\n  let max = lst[0];\n  let min = lst[0];\n  let max = lst[0];\n  let min = lst[0];\n  let max = lst[0];\n  let min = lst[0];\n  let max = lst[0];\n  let min = lst[0];\n  let max = ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "gc": "<|endoftext|>/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  const area = (a + b + c) / 2;\n  return area > 0? area : -1;\n};\n\nconst getTriangleArea = (triangle) => {\n  const a = triangle[0];\n  const b = triangle[1];\n  const c = triangle[2];\n  const area = (a + b + c) / 2;\n  return area > 0? area : -1;\n};\n\nconst getTriangleAreaInside = (triangle) => {\n  const a = triangle[0];\n  const b = triangle[1];\n  const c = triangle[2];\n  const area = (a + b + c) / 2;\n  return area > 0? area : -1;\n};\n\nconst getTriangleAreaOutside = (triangle) => {\n  const a = triangle[0];\n  const b = triangle[1];\n  const c = triangle[2];\n  const area = (a + b + c) / 2;\n  return area > 0? area : -1;\n};\n\nconst getTriangleAreaInsideOutside = (triangle) => {\n  const a = triangle[0];\n  const b = triangle[1];\n  const c = triangle[2];\n  const area = (a + b + c) / 2;\n  return area > 0? area : -1;\n};\n\nconst getTriangleAreaInsideOutside = (triangle) => {\n  const a = triangle[0];\n  const b = triangle[1];\n  const c = triangle[2];\n  const area = (a + b + c) / 2;\n  return area > 0? area : -1;\n};\n\nconst getTriangleAreaInsideOutside = (triangle) => {\n  const a = triangle[0];\n  const b = triangle[1];\n  const c = triangle[2];\n  const area = (a + b + c) / 2;\n  return area > 0? area : -1;\n};\n\nconst getTriangleAreaInsideOutside = (triangle) => {\n  const a = triangle[0];\n  const b = triangle[1];\n  const c = triangle[2];\n  const area = (a + b + c) / 2;\n  return area > 0? area : -1;\n};\n\nconst getTriangleAreaInsideOutside = (triangle) => {\n  const a = triangle[0];\n  const b = triangle[1];\n  const c = triangle[2];\n  const area = (a + b + c) / 2;\n  return area > 0? area : -1;\n};\n\nconst getTriangleAreaInsideOutside = (triangle) => {\n  const a = triangle[0];\n  const b = triangle[1];\n  const c = triangle[2];\n  const area = (a + b + c) / 2;\n  return area > 0? area : -1;\n};\n\nconst getTriangleAreaInsideOutside = (triangle) => {\n  const a = triangle[0];\n  const b = triangle[1];\n  const c = triangle[2];\n  const area = (a + b + c) / 2;\n  return area > 0? area : -1;\n};\n\nconst getTriangleAreaInsideOutside = (triangle) => {\n  const a = triangle[0];\n  const b = triangle[1];\n  const c = triangle[2];\n  const area = (a + b + c) / 2;\n  return area > 0? area : -1;\n};\n\nconst getTriangleAreaInsideOutside = (triangle) => {\n  const a = triangle[0];\n  const b = triangle[1];\n  const c = triangle[2];\n  const area = (a + b + c) / 2;\n  return area > 0? area : -1;\n};\n\nconst getTriangleAreaInsideOutside = (triangle) => {\n  const a = triangle[0];\n  const b = triangle[1];\n  const c = triangle[2];\n  const area = (a + b + c) / 2;\n  return area > 0? area : -1;\n};\n\nconst getTriangleAreaInsideOutside = (triangle) => {\n  const a = triangle[0];\n  const b = triangle[1];\n  const c = triangle[2];\n  const area = (a + b + c) / 2;\n  return area > 0? area : -1;\n};\n\nconst getTriangleAreaInsideOutside = (triangle) => {\n  const a = triangle[0];\n  const b = triangle[1];\n  const c = triangle[2];\n  const area = (a + b + c) / 2;\n  return area > 0? area : -1;\n};\n\nconst getTriangleAreaInsideOutside = (triangle) => {\n  const a = triangle[0];\n  const b = triangle[1];\n  const c = triangle[2];\n  const area = (a + b + c) / 2;\n  return area > 0? area : -1;\n};\n\nconst getTriangleAreaInsideOutside = (triangle) => {\n  const a = triangle[0];\n  const b = triangle[1];\n  const c = triangle[2];\n  const area = (a + b + c) / 2;\n  return area > 0? area : -1;\n};\n\nconst getTriangleAreaInsideOutside = (triangle) => {\n  const a = triangle[0];\n  const b = triangle[1];\n  const c = triangle[2];\n  const area = (a + b + c) / 2;\n  return area > 0? area : -1;\n};\n\nconst getTriangleAreaInsideOutside = (triangle) => {\n  const a = triangle[0];\n  const b = triangle[1];\n  const c = triangle[2];\n  const area = (a + b + c) / 2;\n  return area > 0? area : -1;\n};\n\nconst getTriangleAreaInsideOutside = (triangle) => {\n  const a = triangle[0];\n  const b = triangle[1];\n  const c = triangle[2];\n  const area = (a + b + c) / 2;\n  return area > 0? area : -1;\n};\n\nconst getTriangleAreaInsideOutside = (triangle) => {\n  const a = triangle[0];\n  const b = triangle[1];\n  const c = triangle[2];\n  const area = (a + b + c) / 2;\n  return area > 0? area : -1;\n};\n\nconst getTriangleAreaInsideOutside = (triangle) => {\n  const a = triangle[0];\n  const b = triangle[1];\n  const c = triangle[2];\n  const area = (a + b + c) / 2;\n  return area > 0? area : -1;\n};\n\nconst getTriangleAreaInsideOutside = (triangle) => {\n  const a = triangle[0];\n  const b = triangle[1];\n  const c = triangle[2];\n  const area = (a + b + c) / 2;\n  return area > 0? area : -1;\n};\n\nconst getTriangleAreaInsideOutside = (triangle) => {\n  const a = triangle[0];\n  const b = triangle[1];\n  const c = triangle[2];\n  const area = (a + b + c) / 2;\n  return area > 0? area : -1;\n};\n\nconst getTriangleAreaInsideOutside = (triangle) => {\n  const a = triangle[0];\n  const b = triangle[1];\n  const c = triangle[2];\n  const area = (a + b + c) / 2;\n  return area > 0? area : -1;\n};\n\nconst getTriangleAreaInsideOutside = (triangle) => {\n  const a = triangle[0];\n  const b = triangle[1];\n  const c = triangle[2];\n  const area = (a + b + c) / 2;\n  return area > 0? area : -1;\n};\n\nconst getTriangleAreaInsideOutside = (triangle) => {\n  const a = triangle[0];\n  const b = triangle[1];\n  const c = triangle[2];\n  const area = (a + b + c) / 2;\n  return area > 0? area : -1;\n};\n\nconst getTriangleAreaInsideOutside = (triangle) => {\n  const a = triangle[0];\n  const b = triangle[1];\n  const c = triangle[2];\n  const area = (a + b + c) / 2;\n  return area > 0? area : -1;\n};\n\nconst getTriangleAreaInsideOutside = (triangle) => {\n  const a = triangle[0];\n  const b = triangle[1];\n  const c = triangle[2];\n  const area = (a + b + c) / 2;\n  return area > 0? area : -1;\n};\n\nconst getTriangleAreaInsideOutside = (triangle) => {\n  const a = triangle[0];\n  const b = triangle[1];\n  const c = triangle[2];\n  const area = (a + b + c) / 2;\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "gc": "<|endoftext|>/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  const [s, t] = q;\n  if (s === t) {\n    return true;\n  }\n  if (s === null || t === null) {\n    return false;\n  }\n  if (w <= 0) {\n    return false;\n  }\n  if (w > Number.MAX_SAFE_INTEGER) {\n    return false;\n  }\n  const maxWeight = Math.max(s, t);\n  return willItFly([...q, maxWeight], w - maxWeight);\n};\n\nmodule.exports = willItFly;\n\n},{}],4:[function(require,module,exports){\nconst { isBalanced } = require('./utils');\n\nconst willItFly = (q, w) => {\n  const [s, t] = q;\n  if (s === t) {\n    return true;\n  }\n  if (s === null || t === null) {\n    return false;\n  }\n  if (w <= 0) {\n    return false;\n  }\n  if (w > Number.MAX_SAFE_INTEGER) {\n    return false;\n  }\n  const maxWeight = Math.max(s, t);\n  return willItFly([...q, maxWeight], w - maxWeight);\n};\n\nmodule.exports = willItFly;\n\n},{\"./utils\":3}],5:[function(require,module,exports){\nconst { isBalanced } = require('./utils');\n\nconst willItFly = (q, w) => {\n  const [s, t] = q;\n  if (s === t) {\n    return true;\n  }\n  if (s === null || t === null) {\n    return false;\n  }\n  if (w <= 0) {\n    return false;\n  }\n  if (w > Number.MAX_SAFE_INTEGER) {\n    return false;\n  }\n  const maxWeight = Math.max(s, t);\n  return willItFly([...q, maxWeight], w - maxWeight);\n};\n\nmodule.exports = willItFly;\n\n},{\"./utils\":3}],6:[function(require,module,exports){\nconst { isBalanced } = require('./utils');\n\nconst willItFly = (q, w) => {\n  const [s, t] = q;\n  if (s === t) {\n    return true;\n  }\n  if (s === null || t === null) {\n    return false;\n  }\n  if (w <= 0) {\n    return false;\n  }\n  if (w > Number.MAX_SAFE_INTEGER) {\n    return false;\n  }\n  const maxWeight = Math.max(s, t);\n  return willItFly([...q, maxWeight], w - maxWeight);\n};\n\nmodule.exports = willItFly;\n\n},{\"./utils\":3}],7:[function(require,module,exports){\nconst { isBalanced } = require('./utils');\n\nconst willItFly = (q, w) => {\n  const [s, t] = q;\n  if (s === t) {\n    return true;\n  }\n  if (s === null || t === null) {\n    return false;\n  }\n  if (w <= 0) {\n    return false;\n  }\n  if (w > Number.MAX_SAFE_INTEGER) {\n    return false;\n  }\n  const maxWeight = Math.max(s, t);\n  return willItFly([...q, maxWeight], w - maxWeight);\n};\n\nmodule.exports = willItFly;\n\n},{\"./utils\":3}],8:[function(require,module,exports){\nconst { isBalanced } = require('./utils');\n\nconst willItFly = (q, w) => {\n  const [s, t] = q;\n  if (s === t) {\n    return true;\n  }\n  if (s === null || t === null) {\n    return false;\n  }\n  if (w <= 0) {\n    return false;\n  }\n  if (w > Number.MAX_SAFE_INTEGER) {\n    return false;\n  }\n  const maxWeight = Math.max(s, t);\n  return willItFly([...q, maxWeight], w - maxWeight);\n};\n\nmodule.exports = willItFly;\n\n},{\"./utils\":3}],9:[function(require,module,exports){\nconst { isBalanced } = require('./utils');\n\nconst willItFly = (q, w) => {\n  const [s, t] = q;\n  if (s === t) {\n    return true;\n  }\n  if (s === null || t === null) {\n    return false;\n  }\n  if (w <= 0) {\n    return false;\n  }\n  if (w > Number.MAX_SAFE_INTEGER) {\n    return false;\n  }\n  const maxWeight = Math.max(s, t);\n  return willItFly([...q, maxWeight], w - maxWeight);\n};\n\nmodule.exports = willItFly;\n\n},{\"./utils\":3}],10:[function(require,module,exports){\nconst { isBalanced } = require('./utils');\n\nconst willItFly = (q, w) => {\n  const [s, t] = q;\n  if (s === t) {\n    return true;\n  }\n  if (s === null || t === null) {\n    return false;\n  }\n  if (w <= 0) {\n    return false;\n  }\n  if (w > Number.MAX_SAFE_INTEGER) {\n    return false;\n  }\n  const maxWeight = Math.max(s, t);\n  return willItFly([...q, maxWeight], w - maxWeight);\n};\n\nmodule.exports = willItFly;\n\n},{\"./utils\":3}],11:[function(require,module,exports){\nconst { isBalanced } = require('./utils');\n\nconst willItFly = (q, w) => {\n  const [s, t] = q;\n  if (s === t) {\n    return true;\n  }\n  if (s === null || t === null) {\n    return false;\n  }\n  if (w <= 0) {\n    return false;\n  }\n  if (w > Number.MAX_SAFE_INTEGER) {\n    return false;\n  }\n  const maxWeight = Math.max(s, t);\n  return willItFly([...q, maxWeight], w - maxWeight);\n};\n\nmodule.exports = willItFly;\n\n},{\"./utils\":3}],12:[function(require,module,exports){\nconst { isBalanced } = require('./utils');\n\nconst willItFly = (q, w) => {\n  const [s, t] = q;\n  if (s === t) {\n    return true;\n  }\n  if (s === null || t === null) {\n    return false;\n  }\n  if (w <= 0) {\n    return false;\n  }\n  if (w > Number.MAX_SAFE_INTEGER) {\n    return false;\n  }\n  const maxWeight = Math.max(s, t);\n  return willItFly([...q, maxWeight], w - maxWeight);\n};\n\nmodule.exports = willItFly;\n\n},{\"./utils\":3}],13:[function(require,module,exports){\nconst { isBalanced } = require('./utils');\n\nconst willItFly = (q, w) => {\n  const [s, t] = q;\n  if (s === t) {\n    return true;\n  }\n  if (s === null || t === null) {\n    return false;\n  }\n  if (w <= 0) {\n    return false;\n  }\n  if (w > Number.MAX_SAFE_INTEGER) {\n    return false;\n  }\n  const maxWeight = Math.max(s, t);\n  return willItFly([...q, maxWeight], w - maxWeight);\n};\n\nmodule.exports = willItFly;\n\n},{\"./utils\":3}],14:[function(require,module,exports){\nconst { isBalanced } = require('./utils');\n\nconst willItFly = (q, w) => {\n  const [s, t] = q;\n  if (s === t) {\n    return true;\n  }\n  if (s === null || t === null) {\n    return false;\n  }\n  if (w <= 0) {\n    return false;\n  }\n  if (w > Number.MAX_SAFE_INTEGER) {\n    return false;\n  }\n  const maxWeight = Math.max(s, t);\n  return willItFl", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  msallestChange([1,2,3,5,4,7,9,6]) == 4\n  msallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  msallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst msallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "msallestChange", "gc": "<|endoftext|>/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  msallestChange([1,2,3,5,4,7,9,6]) == 4\n  msallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  msallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst msallestChange = (arr) => {\n  let change = 0;\n  let maxChange = 0;\n  let maxIndex = 0;\n  let maxValue = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > maxValue) {\n      maxValue = arr[i];\n      maxIndex = i;\n    }\n  }\n  for (let i = maxIndex + 1; i < arr.length; i++) {\n    if (arr[i] > maxValue) {\n      maxValue = arr[i];\n      maxIndex = i;\n    }\n  }\n  for (let i = maxIndex - 1; i >= 0; i--) {\n    if (arr[i] > maxValue) {\n      maxValue = arr[i];\n      maxIndex = i;\n    }\n  }\n  for (let i = maxIndex + 1; i < arr.length; i++) {\n    if (arr[i] > maxValue) {\n      maxValue = arr[i];\n      maxIndex = i;\n    }\n  }\n  for (let i = maxIndex - 1; i >= 0; i--) {\n    if (arr[i] > maxValue) {\n      maxValue = arr[i];\n      maxIndex = i;\n    }\n  }\n  for (let i = maxIndex + 1; i < arr.length; i++) {\n    if (arr[i] > maxValue) {\n      maxValue = arr[i];\n      maxIndex = i;\n    }\n  }\n  for (let i = maxIndex - 1; i >= 0; i--) {\n    if (arr[i] > maxValue) {\n      maxValue = arr[i];\n      maxIndex = i;\n    }\n  }\n  for (let i = maxIndex + 1; i < arr.length; i++) {\n    if (arr[i] > maxValue) {\n      maxValue = arr[i];\n      maxIndex = i;\n    }\n  }\n  for (let i = maxIndex - 1; i >= 0; i--) {\n    if (arr[i] > maxValue) {\n      maxValue = arr[i];\n      maxIndex = i;\n    }\n  }\n  for (let i = maxIndex + 1; i < arr.length; i++) {\n    if (arr[i] > maxValue) {\n      maxValue = arr[i];\n      maxIndex = i;\n    }\n  }\n  for (let i = maxIndex - 1; i >= 0; i--) {\n    if (arr[i] > maxValue) {\n      maxValue = arr[i];\n      maxIndex = i;\n    }\n  }\n  for (let i = maxIndex + 1; i < arr.length; i++) {\n    if (arr[i] > maxValue) {\n      maxValue = arr[i];\n      maxIndex = i;\n    }\n  }\n  for (let i = maxIndex - 1; i >= 0; i--) {\n    if (arr[i] > maxValue) {\n      maxValue = arr[i];\n      maxIndex = i;\n    }\n  }\n  for (let i = maxIndex + 1; i < arr.length; i++) {\n    if (arr[i] > maxValue) {\n      maxValue = arr[i];\n      maxIndex = i;\n    }\n  }\n  for (let i = maxIndex - 1; i >= 0; i--) {\n    if (arr[i] > maxValue) {\n      maxValue = arr[i];\n      maxIndex = i;\n    }\n  }\n  for (let i = maxIndex + 1; i < arr.length; i++) {\n    if (arr[i] > maxValue) {\n      maxValue = arr[i];\n      maxIndex = i;\n    }\n  }\n  for (let i = maxIndex - 1; i >= 0; i--) {\n    if (arr[i] > maxValue) {\n      maxValue = arr[i];\n      maxIndex = i;\n    }\n  }\n  for (let i = maxIndex + 1; i < arr.length; i++) {\n    if (arr[i] > maxValue) {\n      maxValue = arr[i];\n      maxIndex = i;\n    }\n  }\n  for (let i = maxIndex - 1; i >= 0; i--) {\n    if (arr[i] > maxValue) {\n      maxValue = arr[i];\n      maxIndex = i;\n    }\n  }\n  for (let i = maxIndex + 1; i < arr.length; i++) {\n    if (arr[i] > maxValue) {\n      maxValue = arr[i];\n      maxIndex = i;\n    }\n  }\n  for (let i = maxIndex - 1; i >= 0; i--) {\n    if (arr[i] > maxValue) {\n      maxValue = arr[i];\n      maxIndex = i;\n    }\n  }\n  for (let i = maxIndex + 1; i < arr.length; i++) {\n    if (arr[i] > maxValue) {\n      maxValue = arr[i];\n      maxIndex = i;\n    }\n  }\n  for (let i = maxIndex - 1; i >= 0; i--) {\n    if (arr[i] > maxValue) {\n      maxValue = arr[i];\n      maxIndex = i;\n    }\n  }\n  for (let i = maxIndex + 1; i < arr.length; i++) {\n    if (arr[i] > maxValue) {\n      maxValue = arr[i];\n      maxIndex = i;\n    }\n  }\n  for (let i = maxIndex - 1; i >= 0; i--) {\n    if (arr[i] > maxValue) {\n      maxValue = arr[i];\n      maxIndex = i;\n    }\n  }\n  for (let i = maxIndex + 1; i < arr.length; i++) {\n    if (arr[i] > maxValue) {\n      maxValue = arr[i];\n      maxIndex = i;\n    }\n  }\n  for (let i = maxIndex - 1; i >= 0; i--) {\n    if (arr[i] > maxValue) {\n      maxValue = arr[i];\n      maxIndex = i;\n    }\n  }\n  for (let i = maxIndex + 1; i < arr.length; i++) {\n    if (arr[i] > maxValue) {\n      maxValue = arr[i];\n      maxIndex = i;\n    }\n  }\n  for (let i = maxIndex - 1; i >= 0; i--) {\n    if (arr[i] > maxValue) {\n      maxValue = arr[i];\n      maxIndex = i;\n    }\n  }\n  for (let i = maxIndex + 1; i < arr.length; i++) {\n    if (arr[i] > maxValue) {\n      maxValue = arr[i];\n      maxIndex = i;\n    }\n  }\n  for (let i = maxIndex - 1; i >= 0; i--) {\n    if (arr[i] > maxValue) {\n      maxValue = arr[i];\n      maxIndex = i;\n    }\n  }\n  for (let i = maxIndex + 1; i < arr.length; i++) {\n    if (arr[i] > maxValue) {\n      maxValue = arr[i];\n      maxIndex = i;\n    }\n  }\n  for (let i = maxIndex - 1; i >= 0; i--) {\n    if (arr[i] > maxValue) {\n      maxValue = arr[i];\n      maxIndex = i;\n    }\n  }\n  for (let i = maxIndex + 1; i < arr.length; i++) {\n    if (arr[i] > maxValue) {\n      maxValue = arr[i];\n      maxIndex = i;\n    }\n  }\n  for (let i = maxIndex - 1; i >= 0; i--) {\n    if (arr[i] > maxValue) {\n      maxValue = arr[i];\n      maxIndex = i;\n    }\n  }\n  for (let i = maxIndex + 1; i < arr.length; i++) {\n    if (arr[i] > maxValue) {\n      maxValue = arr[i];\n      maxIndex = i;\n    }\n  }\n  for (let i = maxIndex - 1; i >= 0; i--) {\n    if (arr[i] > maxValue) {\n      maxValue = arr[i];\n      maxIndex = i;\n    }\n  }\n  for (let i = maxIndex + 1; i < arr.length; i++) {\n    if (arr[i] > maxValue) {\n      maxValue = arr[i];\n      maxIndex = i;\n    }\n  }\n  for (let i = maxIndex - 1; i >= 0; i--) {\n    if (arr[i] > maxValue) {\n      maxValue = arr[i];\n      maxIndex = i;\n    }\n  }\n  for (let i = maxIndex + 1; i < arr.length; i++) {\n    if (arr[i] > maxValue) {\n      maxValue = arr[i];\n      maxIndex = i;\n    }\n  }\n  for (let i = maxIndex - 1; i >= 0; i--) {\n    if (arr[i] > maxValue) {\n      maxValue = arr[i];\n      maxIndex = i;\n    }\n  }\n  for (let i = maxIndex + 1; i < arr.length; i++) {\n    if (arr[i] > maxValue) {\n      maxValue = arr[i];\n      maxIndex = i;\n    }\n  }\n  for (let i = maxIndex - 1; i >= 0; i--) {\n    if (arr[i] > maxValue) {\n      maxValue = arr[i];\n      maxIndex = i;\n    }", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  ottalMatch([], []) ➞ []\n  ottalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  ottalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  ottalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  ottalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst ottalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "ottalMatch", "gc": "<|endoftext|>/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  ottalMatch([], []) ➞ []\n  ottalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  ottalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  ottalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  ottalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst ottalMatch = (lst1, lst2) => {\n  let total = 0;\n  let result = [];\n  lst1.forEach((item, index) => {\n    if (lst2.includes(item)) {\n      total += 1;\n      result.push(item);\n    }\n  });\n  return result;\n};\n\n/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list greater than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  ottalMatch([], []) ➞ []\n  ottalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  ottalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  ottalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  ottalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst ottalMismatch = (lst1, lst2) => {\n  let total = 0;\n  let result = [];\n  lst1.forEach((item, index) => {\n    if (lst2.includes(item)) {\n      total += 1;\n      result.push(item);\n    }\n  });\n  return result;\n};\n\n/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list equal to or greater than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  ottalMatch([], []) ➞ []\n  ottalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  ottalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  ottalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  ottalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst ottalEqual = (lst1, lst2) => {\n  let total = 0;\n  let result = [];\n  lst1.forEach((item, index) => {\n    if (lst2.includes(item)) {\n      total += 1;\n      result.push(item);\n    }\n  });\n  return result;\n};\n\n/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list not equal to or greater than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  ottalMatch([], []) ➞ []\n  ottalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  ottalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  ottalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  ottalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst ottalNotEqual = (lst1, lst2) => {\n  let total = 0;\n  let result = [];\n  lst1.forEach((item, index) => {\n    if (lst2.includes(item)) {\n      total += 1;\n      result.push(item);\n    }\n  });\n  return result;\n};\n\n/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list not less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  ottalMatch([], []) ➞ []\n  ottalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  ottalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  ottalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  ottalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst ottalNotLessThan = (lst1, lst2) => {\n  let total = 0;\n  let result = [];\n  lst1.forEach((item, index) => {\n    if (lst2.includes(item)) {\n      total += 1;\n      result.push(item);\n    }\n  });\n  return result;\n};\n\n/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list not greater than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  ottalMatch([], []) ➞ []\n  ottalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  ottalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  ottalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  ottalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst ottalNotGreaterThan = (lst1, lst2) => {\n  let total = 0;\n  let result = [];\n  lst1.forEach((item, index) => {\n    if (lst2.includes(item)) {\n      total += 1;\n      result.push(item);\n    }\n  });\n  return result;\n};\n\n/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list not equal to or less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  ottalMatch([], []) ➞ []\n  ottalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  ottalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  ottalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  ottalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst ottalNotLessThanOrEqual = (lst1, lst2) => {\n  let total = 0;\n  let result = [];\n  lst1.forEach((item, index) => {\n    if (lst2.includes(item)) {\n      total += 1;\n      result.push(item);\n    }\n  });\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/75", "prompt": "/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPirme(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPirme = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPirme", "gc": "<|endoftext|>/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPirme(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPirme = (a) => {\n  if (a < 100) {\n    const isPrime = (n) => {\n      if (n % 2 === 0) return false;\n      if (n % 3 === 0) return false;\n      if (n % 5 === 0) return false;\n      return true;\n    };\n    const isMultipleOf3Primes = (n) => {\n      if (isPrime(n)) return true;\n      return false;\n    };\n    const isMultipleOf5Primes = (n) => {\n      if (isPrime(n)) return true;\n      return false;\n    };\n    const isMultipleOf15Primes = (n) => {\n      if (isPrime(n)) return true;\n      return false;\n    };\n    const isMultipleOf30Primes = (n) => {\n      if (isPrime(n)) return true;\n      return false;\n    };\n    const isMultipleOf100Primes = (n) => {\n      if (isPrime(n)) return true;\n      return false;\n    };\n    const isMultipleOf200Primes = (n) => {\n      if (isPrime(n)) return true;\n      return false;\n    };\n    const isMultipleOf500Primes = (n) => {\n      if (isPrime(n)) return true;\n      return false;\n    };\n    const isMultipleOf1000Primes = (n) => {\n      if (isPrime(n)) return true;\n      return false;\n    };\n    const isMultipleOf2000Primes = (n) => {\n      if (isPrime(n)) return true;\n      return false;\n    };\n    const isMultipleOf5000Primes = (n) => {\n      if (isPrime(n)) return true;\n      return false;\n    };\n    const isMultipleOf10000Primes = (n) => {\n      if (isPrime(n)) return true;\n      return false;\n    };\n    const isMultipleOf20000Primes = (n) => {\n      if (isPrime(n)) return true;\n      return false;\n    };\n    const isMultipleOf50000Primes = (n) => {\n      if (isPrime(n)) return true;\n      return false;\n    };\n    const isMultipleOf100000Primes = (n) => {\n      if (isPrime(n)) return true;\n      return false;\n    };\n    const isMultipleOf200000Primes = (n) => {\n      if (isPrime(n)) return true;\n      return false;\n    };\n    const isMultipleOf500000Primes = (n) => {\n      if (isPrime(n)) return true;\n      return false;\n    };\n    const isMultipleOf1000000Primes = (n) => {\n      if (isPrime(n)) return true;\n      return false;\n    };\n    const isMultipleOf2000000Primes = (n) => {\n      if (isPrime(n)) return true;\n      return false;\n    };\n    const isMultipleOf5000000Primes = (n) => {\n      if (isPrime(n)) return true;\n      return false;\n    };\n    const isMultipleOf100000000Primes = (n) => {\n      if (isPrime(n)) return true;\n      return false;\n    };\n    const isMultipleOf200000000Primes = (n) => {\n      if (isPrime(n)) return true;\n      return false;\n    };\n    const isMultipleOf500000000Primes = (n) => {\n      if (isPrime(n)) return true;\n      return false;\n    };\n    const isMultipleOf10000000000Primes = (n) => {\n      if (isPrime(n)) return true;\n      return false;\n    };\n    const isMultipleOf20000000000000Primes = (n) => {\n      if (isPrime(n)) return true;\n      return false;\n    };\n    const isMultipleOf50000000000000Primes = (n) => {\n      if (isPrime(n)) return true;\n      return false;\n    };\n    const isMultipleOf1000000000000000Primes = (n) => {\n      if (isPrime(n)) return true;\n      return false;\n    };\n    const isMultipleOf200000000000000Primes = (n) => {\n      if (isPrime(n)) return true;\n      return false;\n    };\n    const isMultipleOf500000000000000Primes = (n) => {\n      if (isPrime(n)) return true;\n      return false;\n    };\n    const isMultipleOf10000000000000000Primes = (n) => {\n      if (isPrime(n)) return true;\n      return false;\n    };\n    const isMultipleOf2000000000000000Primes = (n) => {\n      if (isPrime(n)) return true;\n      return false;\n    };\n    const isMultipleOf5000000000000000Primes = (n) => {\n      if (isPrime(n)) return true;\n      return false;\n    };\n    const isMultipleOf100000000000000000Primes = (n) => {\n      if (isPrime(n)) return true;\n      return false;\n    };\n    const isMultipleOf20000000000000000Primes = (n) => {\n      if (isPrime(n)) return true;\n      return false;\n    };\n    const isMultipleOf50000000000000000Primes = (n) => {\n      if (isPrime(n)) return true;\n      return false;\n    };\n    const isMultipleOf1000000000000000000Primes = (n) => {\n      if (isPrime(n)) return true;\n      return false;\n    };\n    const isMultipleOf2000000000000000000000Primes = (n) => {\n      if (isPrime(n)) return true;\n      return false;\n    };\n    const isMultipleOf5000000000000000000000Primes = (n) => {\n      if (isPrime(n)) return true;\n      return false;\n    };\n    const isMultipleOf100000000000000000000000Primes = (n) => {\n      if (isPrime(n)) return true;\n      return false;\n    };\n    const isMultipleOf20000000000000000000000Primes = (n) => {\n      if (isPrime(n)) return true;\n      return false;\n    };\n    const isMultipleOf50000000000000000000000Primes = (n) => {\n      if (isPrime(n)) return true;\n      return false;\n    };\n    const isMultipleOf1000000000000000000000000Primes = (n) => {\n      if (isPrime(n)) return true;\n      return false;\n    };\n    const isMultipleOf200000000000000000000000Primes = (n) => {\n      if (isPrime(n)) return true;\n      return false;\n    };\n    const isMultipleOf500000000000000000000000Primes = (n) => {\n      if (isPrime(n)) return true;\n      return false;\n    };\n    const isMultipleOf10000000000000000000000000Primes = (n) => {\n      if (isPrime(n)) return true;\n      return false;\n    };\n    const isMultipleOf2000000000000000000000000Primes = (n) => {\n      if (isPrime(n)) return true;\n      return false;\n    };\n    const isMultipleOf5000000000000000000000000Primes = (n) => {\n      if (isPrime(n)) return true;\n      return false;\n    };\n    const isMultipleOf100000000000000000000000000Primes = (n) => {\n      if (isPrime(n)) return true;\n      return false;\n    };\n    const isMultipleOf200000000000000000000000000000Primes = (n) => {\n      if (isPrime(n)) return true;\n      return false;\n    };\n    const isMultipleOf500000000000000000000000000000Primes = (n) => {\n      if (isPrime(n)) return true;\n      return false;\n    };\n    const isMultipleOf10000000000000000000000000000000Primes = (n) => {\n      if (isPrime(n)) return true;\n      return false;\n    };\n    const isMultipleOf2000000000000000000000000000000Primes = (n) => {\n      if (isPrime(n)) return true;\n      return false;\n    };\n    const isMultipleOf5000000000000000000000000000000Primes = (n) => {\n      if (isPrime(n)) return true;\n      return false;\n    };\n    const isMultipleOf100000000000000000000000000000000Primes = (n) => {\n      if (isPrime(n)) return true;\n      return false;\n    };\n    const isMultipleOf20000000000000000000000000000000Primes = (n) => {\n      if (isPrime(n)) return true;\n      return false;\n    };\n    const isMultipleOf50000000000000000000000000000000Primes = (n) => {\n      if (isPrime(n)) return true;\n      return false;\n    };\n    const isMultipleOf1000000000000000000000000000000000Primes = (n) => {\n      if (isPrime(n)) return true;\n      return false;\n    };\n    const isMultipleOf200000000000000000000000000000000Primes = (n) => {\n      if (isPrime(n)) return true;\n      return false;\n    };\n    const isMultipleOf500000000000000000000000000000000Primes = (n) => {\n      if (isPrime(n)) return true;\n      return false;\n    };\n    const isMultipleOf1000000000000000000", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/76", "prompt": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSimplePwoer(1, 4) => true\n  isSimplePwoer(2, 2) => true\n  isSimplePwoer(8, 2) => true\n  isSimplePwoer(3, 2) => false\n  isSimplePwoer(3, 1) => false\n  isSimplePwoer(5, 3) => false\n  */\nconst isSimplePwoer = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePwoer", "gc": "<|endoftext|>/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSimplePwoer(1, 4) => true\n  isSimplePwoer(2, 2) => true\n  isSimplePwoer(8, 2) => true\n  isSimplePwoer(3, 2) => false\n  isSimplePwoer(3, 1) => false\n  isSimplePwoer(5, 3) => false\n  */\nconst isSimplePwoer = (x, n) => {\n  if (x === 0) return true;\n  if (x === 1) return false;\n  if (n % x === 0) return false;\n  return isSimplePwoer(x, n / x);\n};\n\n/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSimplePwoer(1, 4) => true\n  isSimplePwoer(2, 2) => true\n  isSimplePwoer(8, 2) => true\n  isSimplePwoer(3, 2) => false\n  isSimplePwoer(3, 1) => false\n  isSimplePwoer(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (x === 0) return true;\n  if (x === 1) return false;\n  if (n % x === 0) return false;\n  return isSimplePower(x, n / x);\n};\n\n/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower2 = (x, n) => {\n  if (x === 0) return true;\n  if (x === 1) return false;\n  if (n % x === 0) return false;\n  return isSimplePower2(x, n / x);\n};\n\n/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSimplePower2(3, 2) => true\n  isSimplePower2(3, 1) => false\n  isSimplePower2(5, 3) => false\n  */\nconst isSimplePower3 = (x, n) => {\n  if (x === 0) return true;\n  if (x === 1) return false;\n  if (n % x === 0) return false;\n  return isSimplePower3(x, n / x);\n};\n\n/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSimplePower3(3, 2) => true\n  isSimplePower3(3, 1) => false\n  isSimplePower3(5, 3) => false\n  */\nconst isSimplePower4 = (x, n) => {\n  if (x === 0) return true;\n  if (x === 1) return false;\n  if (n % x === 0) return false;\n  return isSimplePower4(x, n / x);\n};\n\n/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSimplePower4(3, 2) => true\n  isSimplePower4(3, 1) => false\n  isSimplePower4(5, 3) => false\n  */\nconst isSimplePower5 = (x, n) => {\n  if (x === 0) return true;\n  if (x === 1) return false;\n  if (n % x === 0) return false;\n  return isSimplePower5(x, n / x);\n};\n\n/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSimplePower5(3, 2) => true\n  isSimplePower5(3, 1) => false\n  isSimplePower5(5, 3) => false\n  */\nconst isSimplePower6 = (x, n) => {\n  if (x === 0) return true;\n  if (x === 1) return false;\n  if (n % x === 0) return false;\n  return isSimplePower6(x, n / x);\n};\n\n/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSimplePower6(3, 2) => true\n  isSimplePower6(3, 1) => false\n  isSimplePower6(5, 3) => false\n  */\nconst isSimplePower7 = (x, n) => {\n  if (x === 0) return true;\n  if (x === 1) return false;\n  if (n % x === 0) return false;\n  return isSimplePower7(x, n / x);\n};\n\n/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSimplePower7(3, 2) => true\n  isSimplePower7(3, 1) => false\n  isSimplePower7(5, 3) => false\n  */\nconst isSimplePower8 = (x, n) => {\n  if (x === 0) return true;\n  if (x === 1) return false;\n  if (n % x === 0) return false;\n  return isSimplePower8(x, n / x);\n};\n\n/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSimplePower8(3, 2) => true\n  isSimplePower8(3, 1) => false\n  isSimplePower8(5, 3) => false\n  */\nconst isSimplePower9 = (x, n) => {\n  if (x === 0) return true;\n  if (x === 1) return false;\n  if (n % x === 0) return false;\n  return isSimplePower9(x, n / x);\n};\n\n/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSimplePower9(3, 2) => true\n  isSimplePower9(3, 1) => false\n  isSimplePower9(5, 3) => false\n  */\nconst isSimplePower10 = (x, n) => {\n  if (x === 0) return true;\n  if (x === 1) return false;\n  if (n % x === 0) return false;\n  return isSimplePower10(x, n / x);\n};\n\n/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSimplePower10(3, 2) => true\n  isSimplePower10(3, 1) => false\n  isSimplePower10(5, 3) => false\n  */\nconst isSimplePower11 = (x, n) => {\n  if (x === 0) return true;\n  if (x === 1) return false;\n  if (n % x === 0) return false;\n  return isSimplePower11(x, n / x);\n};\n\n/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSimplePower11(3, 2) => true\n  isSimplePower11(3, 1) => false\n  isSimplePower11(5, 3) => false\n  */\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "gc": "<|endoftext|>/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  if (a <= 0) return false;\n  if (a % 2 === 0) return false;\n  if (a % 3 === 0) return false;\n  if (a % 5 === 0) return false;\n  return true;\n};\n\n/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a pentagonal number of the given size.\n  Note: you may assume the input is always valid.\n  Examples:\n  ispentagon(3) ==> true\n  ispentagon(4) ==> false\n  ispentagon(5) ==> false\n  ispentagon(6) ==> false\n  ispentagon(7) ==> false\n  ispentagon(8) ==> false\n  ispentagon(9) ==> false\n  ispentagon(10) ==> false\n  ispentagon(11) ==> false\n  ispentagon(12) ==> false\n  ispentagon(13) ==> false\n  ispentagon(14) ==> false\n  ispentagon(15) ==> false\n  ispentagon(16) ==> false\n  ispentagon(17) ==> false\n  ispentagon(18) ==> false\n  ispentagon(19) ==> false\n  ispentagon(20) ==> false\n  ispentagon(21) ==> false\n  ispentagon(22) ==> false\n  ispentagon(23) ==> false\n  ispentagon(24) ==> false\n  ispentagon(25) ==> false\n  ispentagon(26) ==> false\n  ispentagon(27) ==> false\n  ispentagon(28) ==> false\n  ispentagon(29) ==> false\n  ispentagon(30) ==> false\n  ispentagon(31) ==> false\n  ispentagon(32) ==> false\n  ispentagon(33) ==> false\n  ispentagon(34) ==> false\n  ispentagon(35) ==> false\n  ispentagon(36) ==> false\n  ispentagon(37) ==> false\n  ispentagon(38) ==> false\n  ispentagon(39) ==> false\n  ispentagon(40) ==> false\n  ispentagon(41) ==> false\n  ispentagon(42) ==> false\n  ispentagon(43) ==> false\n  ispentagon(44) ==> false\n  ispentagon(45) ==> false\n  ispentagon(46) ==> false\n  ispentagon(47) ==> false\n  ispentagon(48) ==> false\n  ispentagon(49) ==> false\n  ispentagon(50) ==> false\n  ispentagon(51) ==> false\n  ispentagon(52) ==> false\n  ispentagon(53) ==> false\n  ispentagon(54) ==> false\n  ispentagon(55) ==> false\n  ispentagon(56) ==> false\n  ispentagon(57) ==> false\n  ispentagon(58) ==> false\n  ispentagon(59) ==> false\n  ispentagon(60) ==> false\n  ispentagon(61) ==> false\n  ispentagon(62) ==> false\n  ispentagon(63) ==> false\n  ispentagon(64) ==> false\n  ispentagon(65) ==> false\n  ispentagon(66) ==> false\n  ispentagon(67) ==> false\n  ispentagon(68) ==> false\n  ispentagon(69) ==> false\n  ispentagon(70) ==> false\n  ispentagon(71) ==> false\n  ispentagon(72) ==> false\n  ispentagon(73) ==> false\n  ispentagon(74) ==> false\n  ispentagon(75) ==> false\n  ispentagon(76) ==> false\n  ispentagon(77) ==> false\n  ispentagon(78) ==> false\n  ispentagon(79) ==> false\n  ispentagon(80) ==> false\n  ispentagon(81) ==> false\n  ispentagon(82) ==> false\n  ispentagon(83) ==> false\n  ispentagon(84) ==> false\n  ispentagon(85) ==> false\n  ispentagon(86) ==> false\n  ispentagon(87) ==> false\n  ispentagon(88) ==> false\n  ispentagon(89) ==> false\n  ispentagon(90) ==> false\n  ispentagon(91) ==> false\n  ispentagon(92) ==> false\n  ispentagon(93) ==> false\n  ispentagon(94) ==> false\n  ispentagon(95) ==> false\n  ispentagon(96) ==> false\n  ispentagon(97) ==> false\n  ispentagon(98) ==> false\n  ispentagon(99) ==> false\n  ispentagon(100) ==> false\n  ispentagon(101) ==> false\n  ispentagon(102) ==> false\n  ispentagon(103) ==> false\n  ispentagon(104) ==> false\n  ispentagon(105) ==> false\n  ispentagon(106) ==> false\n  ispentagon(107) ==> false\n  ispentagon(108) ==> false\n  ispentagon(109) ==> false\n  ispentagon(110) ==> false\n  ispentagon(111) ==> false\n  ispentagon(112) ==> false\n  ispentagon(113) ==> false\n  ispentagon(114) ==> false\n  ispentagon(115) ==> false\n  ispentagon(116) ==> false\n  ispentagon(117) ==> false\n  ispentagon(118) ==> false\n  ispentagon(119) ==> false\n  ispentagon(120) ==> false\n  ispentagon(121) ==> false\n  ispentagon(122) ==> false\n  ispentagon(123) ==> false\n  ispentagon(124) ==> false\n  ispentagon(125) ==> false\n  ispentagon(126) ==> false\n  ispent", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/78", "prompt": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "gc": "<|endoftext|>/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  let count = 0;\n  let numStr = num.toString();\n  let numStrArr = numStr.split('');\n  let numStrArrLen = numStrArr.length;\n  let numStrArrLen2 = numStrArrLen * numStrArrLen;\n  let numStrArrLen3 = numStrArrLen2 * numStrArrLen;\n  let numStrArrLen4 = numStrArrLen3 * numStrArrLen;\n  let numStrArrLen5 = numStrArrLen4 * numStrArrLen;\n  let numStrArrLen6 = numStrArrLen5 * numStrArrLen;\n  let numStrArrLen7 = numStrArrLen6 * numStrArrLen;\n  let numStrArrLen8 = numStrArrLen7 * numStrArrLen;\n  let numStrArrLen9 = numStrArrLen8 * numStrArrLen;\n  let numStrArrLen10 = numStrArrLen9 * numStrArrLen;\n  let numStrArrLen11 = numStrArrLen10 * numStrArrLen;\n  let numStrArrLen12 = numStrArrLen11 * numStrArrLen;\n  let numStrArrLen13 = numStrArrLen12 * numStrArrLen;\n  let numStrArrLen14 = numStrArrLen13 * numStrArrLen;\n  let numStrArrLen15 = numStrArrLen14 * numStrArrLen;\n  let numStrArrLen16 = numStrArrLen15 * numStrArrLen;\n  let numStrArrLen17 = numStrArrLen16 * numStrArrLen;\n  let numStrArrLen18 = numStrArrLen17 * numStrArrLen;\n  let numStrArrLen19 = numStrArrLen18 * numStrArrLen;\n  let numStrArrLen20 = numStrArrLen19 * numStrArrLen;\n  let numStrArrLen21 = numStrArrLen20 * numStrArrLen;\n  let numStrArrLen22 = numStrArrLen21 * numStrArrLen;\n  let numStrArrLen23 = numStrArrLen22 * numStrArrLen;\n  let numStrArrLen24 = numStrArrLen23 * numStrArrLen;\n  let numStrArrLen25 = numStrArrLen24 * numStrArrLen;\n  let numStrArrLen26 = numStrArrLen25 * numStrArrLen;\n  let numStrArrLen27 = numStrArrLen26 * numStrArrLen;\n  let numStrArrLen28 = numStrArrLen27 * numStrArrLen;\n  let numStrArrLen29 = numStrArrLen28 * numStrArrLen;\n  let numStrArrLen30 = numStrArrLen29 * numStrArrLen;\n  let numStrArrLen31 = numStrArrLen30 * numStrArrLen;\n  let numStrArrLen32 = numStrArrLen31 * numStrArrLen;\n  let numStrArrLen33 = numStrArrLen32 * numStrArrLen;\n  let numStrArrLen34 = numStrArrLen33 * numStrArrLen;\n  let numStrArrLen35 = numStrArrLen34 * numStrArrLen;\n  let numStrArrLen36 = numStrArrLen35 * numStrArrLen;\n  let numStrArrLen37 = numStrArrLen36 * numStrArrLen;\n  let numStrArrLen38 = numStrArrLen37 * numStrArrLen;\n  let numStrArrLen39 = numStrArrLen38 * numStrArrLen;\n  let numStrArrLen40 = numStrArrLen39 * numStrArrLen;\n  let numStrArrLen41 = numStrArrLen40 * numStrArrLen;\n  let numStrArrLen42 = numStrArrLen41 * numStrArrLen;\n  let numStrArrLen43 = numStrArrLen42 * numStrArrLen;\n  let numStrArrLen44 = numStrArrLen43 * numStrArrLen;\n  let numStrArrLen45 = numStrArrLen44 * numStrArrLen;\n  let numStrArrLen46 = numStrArrLen45 * numStrArrLen;\n  let numStrArrLen47 = numStrArrLen46 * numStrArrLen;\n  let numStrArrLen48 = numStrArrLen47 * numStrArrLen;\n  let numStrArrLen49 = numStrArrLen48 * numStrArrLen;\n  let numStrArrLen50 = numStrArrLen49 * numStrArrLen;\n  let numStrArrLen51 = numStrArrLen50 * numStrArrLen;\n  let numStrArrLen52 = numStrArrLen51 * numStrArrLen;\n  let numStrArrLen53 = numStrArrLen52 * numStrArrLen;\n  let numStrArrLen54 = numStrArrLen53 * numStrArrLen;\n  let numStrArrLen55 = numStrArrLen54 * numStrArrLen;\n  let numStrArrLen56 = numStrArrLen55 * numStrArrLen;\n  let numStrArrLen57 = numStrArrLen56 * numStrArrLen;\n  let numStrArrLen58 = numStrArrLen57 * numStrArrLen;\n  let numStrArrLen59 = numStrArrLen58 * numStrArrLen;\n  let numStrArrLen60 = numStrArrLen59 * numStrArrLen;\n  let numStrArrLen61 = numStrArrLen60 * numStrArrLen;\n  let numStrArrLen62 = numStrArrLen61 * numStrArrLen;\n  let numStrArrLen63 = numStrArrLen62 * numStrArrLen;\n  let numStrArrLen64 = numStrArrLen63 * numStrArrLen;\n  let numStrArrLen65 = numStrArrLen64 * numStrArrLen;\n  let numStrArrLen66 = numStrArrLen65 * numStrArrLen;\n  let numStrArrLen67 = numStrArrLen66 * numStrArrLen;\n  let numStrArrLen68 = numStrArrLen67 * numStrArrLen;\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/79", "prompt": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "gc": "<|endoftext|>/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  let binary = '';\n  let decimalString = decimal.toString();\n  for (let i = 0; i < decimalString.length; i++) {\n    let decimalChar = decimalString.charAt(i);\n    if (decimalChar === '0') {\n      binary += '0';\n    } else if (decimalChar === '1') {\n      binary += '1';\n    } else {\n      binary += 'db';\n    }\n  }\n  return binary;\n};\n\n/*\n  Given a string, convert it to a decimal number. Return the number in decimal form.\n\n  Examples:\n  decimalToDecimal('abc')   # returns 3\n  decimalToDecimal('123')   # returns 12\n  decimalToDecimal('123.456')   # returns 1235\n  */\nconst decimalToDecimal = (string) => {\n  let decimal = 0;\n  let decimalString = string.toString();\n  for (let i = 0; i < decimalString.length; i++) {\n    let decimalChar = decimalString.charAt(i);\n    if (decimalChar === '0') {\n      decimal = 0;\n    } else if (decimalChar === '1') {\n      decimal += 1;\n    } else {\n      decimal += 2;\n    }\n  }\n  return decimal;\n};\n\n/*\n  Given a string, convert it to a hexadecimal number. Return the number in hexadecimal form.\n\n  Examples:\n  hexadecimalToDecimal('abc')   # returns 3\n  hexadecimalToDecimal('123')   # returns '3f'\n  hexadecimalToDecimal('123.456')   # returns '3ff'\n  */\nconst hexadecimalToDecimal = (string) => {\n  let hexadecimal = 0;\n  let hexadecimalString = string.toString();\n  for (let i = 0; i < hexadecimalString.length; i++) {\n    let hexadecimalChar = hexadecimalString.charAt(i);\n    if (hexadecimalChar === '0') {\n      hexadecimal = 0;\n    } else if (hexadecimalChar === '1') {\n      hexadecimal += 16;\n    } else {\n      hexadecimal += 8;\n    }\n  }\n  return hexadecimal;\n};\n\n/*\n  Given a string, convert it to a binary number. Return the number in binary form.\n\n  Examples:\n  binaryToDecimal('abc')   # returns 3\n  binaryToDecimal('123')   # returns '11'\n  binaryToDecimal('123.456')   # returns '0b111'\n  */\nconst binaryToDecimal = (string) => {\n  let binary = 0;\n  let binaryString = string.toString();\n  for (let i = 0; i < binaryString.length; i++) {\n    let binaryChar = binaryString.charAt(i);\n    if (binaryChar === '0') {\n      binary = 0;\n    } else if (binaryChar === '1') {\n      binary += 2;\n    } else {\n      binary += 4;\n    }\n  }\n  return binary;\n};\n\n/*\n  Given a string, convert it to a octal number. Return the number in octal form.\n\n  Examples:\n  octalToDecimal('abc')   # returns 3\n  octalToDecimal('123')   # returns '3'\n  octalToDecimal('123.456')   # returns '0o123'\n  */\nconst octalToDecimal = (string) => {\n  let octal = 0;\n  let octalString = string.toString();\n  for (let i = 0; i < octalString.length; i++) {\n    let octalChar = octalString.charAt(i);\n    if (octalChar === '0') {\n      octal = 0;\n    } else if (octalChar === '1') {\n      octal += 8;\n    } else {\n      octal += 4;\n    }\n  }\n  return octal;\n};\n\n/*\n  Given a string, convert it to a hex number. Return the number in hex form.\n\n  Examples:\n  hexToDecimal('abc')   # returns 3\n  hexToDecimal('123')   # returns '3f'\n  hexToDecimal('123.456')   # returns '3ff'\n  */\nconst hexToDecimal = (string) => {\n  let hex = 0;\n  let hexString = string.toString();\n  for (let i = 0; i < hexString.length; i++) {\n    let hexChar = hexString.charAt(i);\n    if (hexChar === '0') {\n      hex = 0;\n    } else if (hexChar === '1') {\n      hex += 16;\n    } else {\n      hex += 8;\n    }\n  }\n  return hex;\n};\n\n/*\n  Given a string, convert it to a binary number. Return the number in binary form.\n\n  Examples:\n  binaryToHex('abc')   # returns '3f'\n  binaryToHex('123')   # returns '3f'\n  binaryToHex('123.456')   # returns '3ff'\n  */\nconst binaryToHex = (string) => {\n  let binary = 0;\n  let binaryString = string.toString();\n  for (let i = 0; i < binaryString.length; i++) {\n    let binaryChar = binaryString.charAt(i);\n    if (binaryChar === '0') {\n      binary = 0;\n    } else if (binaryChar === '1') {\n      binary += 2;\n    } else {\n      binary += 4;\n    }\n  }\n  return binary;\n};\n\n/*\n  Given a string, convert it to a octal number. Return the number in octal form.\n\n  Examples:\n  octalToHex('abc')   # returns '3f'\n  octalToHex('123')   # returns '3f'\n  octalToHex('123.456')   # returns '3ff'\n  */\nconst octalToHex = (string) => {\n  let octal = 0;\n  let octalString = string.toString();\n  for (let i = 0; i < octalString.length; i++) {\n    let octalChar = octalString.charAt(i);\n    if (octalChar === '0') {\n      octal = 0;\n    } else if (octalChar === '1') {\n      octal += 8;\n    } else {\n      octal += 4;\n    }\n  }\n  return octal;\n};\n\n/*\n  Given a string, convert it to a hex number. Return the number in hex form.\n\n  Examples:\n  hexToBinary('abc')   # returns '3f'\n  hexToBinary('123')   # returns '3f'\n  hexToBinary('123.456')   # returns '3ff'\n  */\nconst hexToBinary = (string) => {\n  let hex = 0;\n  let hexString = string.toString();\n  for (let i = 0; i < hexString.length; i++) {\n    let hexChar = hexString.charAt(i);\n    if (hexChar === '0') {\n      hex = 0;\n    } else if (hexChar === '1') {\n      hex += 16;\n    } else {\n      hex += 8;\n    }\n  }\n  return hex;\n};\n\n/*\n  Given a string, convert it to a binary number. Return the number in binary form.\n\n  Examples:\n  binaryToOctal('abc')   # returns '3f'\n  binaryToOctal('123')   # returns '3f'\n  binaryToOctal('123.456')   # returns '3ff'\n  */\nconst binaryToOctal = (string) => {\n  let binary = 0;\n  let binaryString = string.toString();\n  for (let i = 0; i < binaryString.length; i++) {\n    let binaryChar = binaryString.charAt(i);\n    if (binaryChar === '0') {\n      binary = 0;\n    } else if (binaryChar === '1') {\n      binary += 2;\n    } else {\n      binary += 4;\n    }\n  }\n  return binary;\n};\n\n/*\n  Given a string, convert it to a octal number. Return the number in octal form.\n\n  Examples:\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/8", "prompt": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "gc": "<|endoftext|>/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  if (numbers.length === 0) {\n    return (0, 1);\n  }\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n};\n\n/* Given a sorted list of integers, return the largest and smallest element in the list.\n  >>> largest([4, 3, 2, 1])\n  4\n  >>> smallest([4, 3, 2, 1])\n  1\n  */\nconst largest = (numbers, int) => {\n  if (numbers.length === 0) {\n    return null;\n  }\n  let largest = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > largest) {\n      largest = numbers[i];\n    }\n  }\n  return largest;\n};\n\n/* Given a sorted list of integers, return the sum of all the elements in the list.\n  >>> sum([4, 3, 2, 1])\n  10\n  */\nconst sum = (numbers, int) => {\n  if (numbers.length === 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n  }\n  return sum;\n};\n\n/* Given a sorted list of integers, return the product of the elements in the list.\n  >>> product([4, 3, 2, 1])\n  24\n  */\nconst product = (numbers, int) => {\n  if (numbers.length === 0) {\n    return 1;\n  }\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    product *= numbers[i];\n  }\n  return product;\n};\n\n/* Given a sorted list of integers, return the sum of all the elements in the list that are divisible by 3.\n  >>> sumDivisibleBy3([4, 3, 2, 1])\n  10\n  */\nconst sumDivisibleBy3 = (numbers, int) => {\n  if (numbers.length === 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] % 3 === 0) {\n      sum += numbers[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a sorted list of integers, return the product of the elements in the list that are divisible by 3.\n  >>> productDivisibleBy3([4, 3, 2, 1])\n  24\n  */\nconst productDivisibleBy3 = (numbers, int) => {\n  if (numbers.length === 0) {\n    return 1;\n  }\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] % 3 === 0) {\n      product *= numbers[i];\n    }\n  }\n  return product;\n};\n\n/* Given a sorted list of integers, return the sum of all the elements in the list that are divisible by 5.\n  >>> sumDivisibleBy5([4, 3, 2, 1])\n  10\n  */\nconst sumDivisibleBy5 = (numbers, int) => {\n  if (numbers.length === 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] % 5 === 0) {\n      sum += numbers[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a sorted list of integers, return the product of the elements in the list that are divisible by 5.\n  >>> productDivisibleBy5([4, 3, 2, 1])\n  24\n  */\nconst productDivisibleBy5 = (numbers, int) => {\n  if (numbers.length === 0) {\n    return 1;\n  }\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] % 5 === 0) {\n      product *= numbers[i];\n    }\n  }\n  return product;\n};\n\n/* Given a sorted list of integers, return the sum of all the elements in the list that are divisible by 7.\n  >>> sumDivisibleBy7([4, 3, 2, 1])\n  10\n  */\nconst sumDivisibleBy7 = (numbers, int) => {\n  if (numbers.length === 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] % 7 === 0) {\n      sum += numbers[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a sorted list of integers, return the product of the elements in the list that are divisible by 7.\n  >>> productDivisibleBy7([4, 3, 2, 1])\n  24\n  */\nconst productDivisibleBy7 = (numbers, int) => {\n  if (numbers.length === 0) {\n    return 1;\n  }\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] % 7 === 0) {\n      product *= numbers[i];\n    }\n  }\n  return product;\n};\n\n/* Given a sorted list of integers, return the sum of all the elements in the list that are divisible by 9.\n  >>> sumDivisibleBy9([4, 3, 2, 1])\n  10\n  */\nconst sumDivisibleBy9 = (numbers, int) => {\n  if (numbers.length === 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] % 9 === 0) {\n      sum += numbers[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a sorted list of integers, return the product of the elements in the list that are divisible by 9.\n  >>> productDivisibleBy9([4, 3, 2, 1])\n  24\n  */\nconst productDivisibleBy9 = (numbers, int) => {\n  if (numbers.length === 0) {\n    return 1;\n  }\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] % 9 === 0) {\n      product *= numbers[i];\n    }\n  }\n  return product;\n};\n\n/* Given a sorted list of integers, return the sum of all the elements in the list that are divisible by 11.\n  >>> sumDivisibleBy11([4, 3, 2, 1])\n  10\n  */\nconst sumDivisibleBy11 = (numbers, int) => {\n  if (numbers.length === 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] % 11 === 0) {\n      sum += numbers[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a sorted list of integers, return the product of the elements in the list that are divisible by 11.\n  >>> productDivisibleBy11([4, 3, 2, 1])\n  24\n  */\nconst productDivisibleBy11 = (numbers, int) => {\n  if (numbers.length === 0) {\n    return 1;\n  }\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] % 11 === 0) {\n      product *= numbers[i];\n    }\n  }\n  return product;\n};\n\n/* Given a sorted list of integers, return the sum of all the elements in the list that are divisible by 13.\n  >>> sumDivisibleBy13([4, 3, 2, 1])\n  10\n  */\nconst sumDivisibleBy13 = (numbers, int) => {\n  if (numbers.length === 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] % 13 === 0) {\n      sum += numbers[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a sorted list of integers, return the product of the elements in the list that are divisible by 13.\n  >>> productDivisibleBy13([4, 3, 2, 1])\n  24\n  */\nconst productDivisibleBy13 = (numbers, int) => {\n  if (numbers.length === 0) {\n    return 1;\n  }\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] % 13 === 0) {\n      product *= numbers[i];\n    }\n  }\n  return product;\n};\n\n/* Given a sorted list of integers, return the sum of all the elements in the list that are divisible by 15.\n  >>> sumDivisibleBy15([4, 3, 2, 1])\n  10\n  */\nconst sumDivisibleBy15 = (numbers, int) => {\n  if (numbers.length === 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] % 15 === 0) {\n      sum += numbers[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a sorted list of integers, return the product of the elements in the list that are divisible ", "passed": 1, "run_status": 0, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/80", "prompt": "/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "gc": "<|endoftext|>/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  let isHappy = true;\n  let count = 0;\n  let letters = [];\n  let letterCount = 0;\n  let letterCount2 = 0;\n  let letterCount3 = 0;\n  let letterCount4 = 0;\n  let letterCount5 = 0;\n  let letterCount6 = 0;\n  let letterCount7 = 0;\n  let letterCount8 = 0;\n  let letterCount9 = 0;\n  let letterCount10 = 0;\n  let letterCount11 = 0;\n  let letterCount12 = 0;\n  let letterCount13 = 0;\n  let letterCount14 = 0;\n  let letterCount15 = 0;\n  let letterCount16 = 0;\n  let letterCount17 = 0;\n  let letterCount18 = 0;\n  let letterCount19 = 0;\n  let letterCount20 = 0;\n  let letterCount21 = 0;\n  let letterCount22 = 0;\n  let letterCount23 = 0;\n  let letterCount24 = 0;\n  let letterCount25 = 0;\n  let letterCount26 = 0;\n  let letterCount27 = 0;\n  let letterCount28 = 0;\n  let letterCount29 = 0;\n  let letterCount30 = 0;\n  let letterCount31 = 0;\n  let letterCount32 = 0;\n  let letterCount33 = 0;\n  let letterCount34 = 0;\n  let letterCount35 = 0;\n  let letterCount36 = 0;\n  let letterCount37 = 0;\n  let letterCount38 = 0;\n  let letterCount39 = 0;\n  let letterCount40 = 0;\n  let letterCount41 = 0;\n  let letterCount42 = 0;\n  let letterCount43 = 0;\n  let letterCount44 = 0;\n  let letterCount45 = 0;\n  let letterCount46 = 0;\n  let letterCount47 = 0;\n  let letterCount48 = 0;\n  let letterCount49 = 0;\n  let letterCount50 = 0;\n  let letterCount51 = 0;\n  let letterCount52 = 0;\n  let letterCount53 = 0;\n  let letterCount54 = 0;\n  let letterCount55 = 0;\n  let letterCount56 = 0;\n  let letterCount57 = 0;\n  let letterCount58 = 0;\n  let letterCount59 = 0;\n  let letterCount60 = 0;\n  let letterCount61 = 0;\n  let letterCount62 = 0;\n  let letterCount63 = 0;\n  let letterCount64 = 0;\n  let letterCount65 = 0;\n  let letterCount66 = 0;\n  let letterCount67 = 0;\n  let letterCount68 = 0;\n  let letterCount69 = 0;\n  let letterCount70 = 0;\n  let letterCount71 = 0;\n  let letterCount72 = 0;\n  let letterCount73 = 0;\n  let letterCount74 = 0;\n  let letterCount75 = 0;\n  let letterCount76 = 0;\n  let letterCount77 = 0;\n  let letterCount78 = 0;\n  let letterCount79 = 0;\n  let letterCount80 = 0;\n  let letterCount81 = 0;\n  let letterCount82 = 0;\n  let letterCount83 = 0;\n  let letterCount84 = 0;\n  let letterCount85 = 0;\n  let letterCount86 = 0;\n  let letterCount87 = 0;\n  let letterCount88 = 0;\n  let letterCount89 = 0;\n  let letterCount90 = 0;\n  let letterCount91 = 0;\n  let letterCount92 = 0;\n  let letterCount93 = 0;\n  let letterCount94 = 0;\n  let letterCount95 = 0;\n  let letterCount96 = 0;\n  let letterCount97 = 0;\n  let letterCount98 = 0;\n  let letterCount99 = 0;\n  let letterCount100 = 0;\n  let letterCount101 = 0;\n  let letterCount102 = 0;\n  let letterCount103 = 0;\n  let letterCount104 = 0;\n  let letterCount105 = 0;\n  let letterCount106 = 0;\n  let letterCount107 = 0;\n  let letterCount108 = 0;\n  let letterCount109 = 0;\n  let letterCount110 = 0;\n  let letterCount111 = 0;\n  let letterCount112 = 0;\n  let letterCount113 = 0;\n  let letterCount114 = 0;\n  let letterCount115 = 0;\n  let letterCount116 = 0;\n  let letterCount117 = 0;\n  let letterCount118 = 0;\n  let letterCount119 = 0;\n  let letterCount120 = 0;\n  let letterCount121 = 0;\n  let letterCount122 = 0;\n  let letterCount123 = 0;\n  let letterCount124 = 0;\n  let letterCount125 = 0;\n  let letterCount126 = 0;\n  let letterCount127 = 0;\n  let letterCount128 = 0;\n  let letterCount129 = 0;\n  let letterCount130 = 0;\n  let letterCount131 = 0;\n  let letterCount132 = 0;\n  let letterCount133 = 0;\n  let letterCount134 = 0;\n  let letterCount135 = 0;\n  let letterCount136 = 0;\n  let letterCount137 = 0;\n  let letterCount138 = 0;\n  let letterCount139 = 0;\n  let letterCount140 = 0;\n  let letterCount141 = 0;\n  let letterCount142 = 0;\n  let letterCount143 = 0;\n  let letterCount144 = 0;\n  let letterCount145 = 0;\n  let letterCount146 = 0;\n  let letterCount147 = 0;\n  let letterCount148 = 0;\n  let letterCount149 = 0;\n  let letterCount150 = 0;\n  let letterCount151 = 0;\n  let letterCount152 = 0;\n  let letterCount153 = 0;\n  let letterCount154 = 0;\n  let letterCount155 = 0;\n  let letterCount156 = 0;\n  let letterCount157 = 0;\n  let letterCount158 = 0;\n  let letterCount159 = 0;\n  let letterCount160 = 0;\n  let letterCount161 = 0;\n  let letterCount162 = 0;\n  let letterCount163 = 0;\n  let letterCount164 = 0;\n  let letterCount165 = 0;\n  let letterCount166 = 0;\n  let letterCount167 = 0;\n  let letterCount168 = 0;\n  let letterCount169 = 0;\n  let letterCount170 = 0;\n  let letterCount171 = 0;\n  let letterCount172 = 0;\n  let letterCount173 = 0;\n  let letterCount174 = 0;\n  let letterCount175 = 0;\n  let letterCount176 = 0;\n  let letterCount177 = 0;\n  let letterCount178 = 0;\n  let letterCount179 = 0;\n  let letterCount180 = 0;\n  let letterCount181 = 0;\n  let letterCount182 = 0;\n  let letterCount183 = 0;\n  let letterCount184 = 0;\n  let letterCount185 = 0;\n  let letterCount186 = 0;\n  let letterCount187 = 0;\n  let letterCount188 = 0;\n  let letterCount189 = 0;\n  let letterCount190 = 0;\n  let letterCount191 = 0;\n  let letterCount192 = 0;\n  let letterCount193 = 0;\n  let letterCount194 = 0;\n  let letterCount195 = 0;\n  let letterCount196 = 0;\n  let letterCount197 = 0;\n  let letterCount198 = 0;\n  let letterCount199 = 0;\n  let letterCount200 = 0;\n  let letterCount201 = 0;\n  let letterCount202 = 0;\n  let letterCount203 = 0;\n  let letterCount204 = 0;\n  let letterCount205 = 0;\n  let letterCount206 = 0;\n  let letterCount207 = 0;\n  let letterCount208 = 0;\n  let letterCount209 = 0;\n  let letterCount210 = 0;\n  let letterCount211 = 0;\n  let letterCount212 = 0;\n  let letterCount213 = 0;\n  let letterCount214 = 0;\n  let letterCount215 = 0;\n  let letterCount216 = 0;\n  let letterCount217 = 0;\n  let letterCount218 = 0;\n  let letterCount219 = 0;\n  let letterCount220 = 0;\n  let letterCount221 = 0;\n  let letterCount222 = 0;\n  let letterCount223 = 0;\n  let letterCount224 = 0;\n  let letterCount225 = 0;\n  let letterCount226 = 0;\n  let letterCount227 = 0;\n  let letterCount228 = 0;\n  let letterCount229 = 0;\n  let letterCount230 = 0;\n  let letterCount231 = 0;\n  let letterCount232 = 0;\n  let letterCount233 = 0;\n  let letterCount234 = 0;\n  let letterCount235 = 0;\n  let letterCount236 = 0;\n  let letterCount237 = 0;\n  let ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/81", "prompt": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  nmueriaclLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst nmueriaclLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "nmueriaclLetterGrade", "gc": "<|endoftext|>/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  nmueriaclLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst nmueriaclLetterGrade = (grades) => {\n  const letterGrades = grades.map((grade) => {\n    const letterGrade = grade.toString().split('')\n    const letterGrades = letterGrade.map((letter) => {\n      return letter.toUpperCase()\n    })\n    return letterGrades\n  })\n  return letterGrades\n}\n\n/*\n  It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  nmueriaclLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst nmueriaclLetterGrade2 = (grades) => {\n  const letterGrades = grades.map((grade) => {\n    const letterGrade = grade.toString().split('')\n    const letterGrades = letterGrade.map((letter) => {\n      return letter.toUpperCase()\n    })\n    return letterGrades\n  })\n  return letterGrades\n}\n\n/*\n  It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  nmueriaclLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst nmueriaclLetterGrade3 = (grades) => {\n  const letterGrades = grades.map((grade) => {\n    const letterGrade = grade.toString().split('')\n    const letterGrades = letterGrade.map((letter) => {\n      return letter.toUpperCase()\n    })\n    return letterGrades\n  })\n  return letterGrades\n}\n\n/*\n  It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  nmueriaclLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst nmueriaclLetterGrade4 = (grades) => {\n  const letterGrades = grades.map((grade) => {\n    const letterGrade = grade.toString().split('')\n    const letterGrades = letterGrade.map((letter) => {\n      return letter.toUpperCase()\n    })\n    return letterGrades\n  })\n  return letterGrades\n}\n\n/*\n  It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  nmueriaclLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst nmueriaclLetterGrade5 = (grades) => {\n  const letterGrades = grades.map((grade) => {\n    const letterGrade = grade.toString().split('')\n    const letterGrades = letterGrade.map((letter) => {\n      return letter.toUpperCase()\n    })\n    return letterGrades\n  })\n  return letterGrades\n}\n\n/*\n  It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/82", "prompt": "/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "gc": "<|endoftext|>/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let prime = true;\n  let length = string.length;\n  let i;\n  for (i = 2; i < length; i++) {\n    if (string[i] % 2 === 0) {\n      prime = false;\n      break;\n    }\n  }\n  return prime;\n};\n\n/*Write a function that takes a string and returns true if the string\n  length is divisible by 3 or false otherwise\n  Examples\n  divisibleBy3('Hello') == true\n  divisibleBy3('abcdcba') == true\n  divisibleBy3('kittens') == false\n  divisibleBy3('orange') == false\n  */\nconst divisibleBy3 = (string) => {\n  let divisible = true;\n  let length = string.length;\n  let i;\n  for (i = 2; i < length; i++) {\n    if (string[i] % 3 === 0) {\n      divisible = false;\n      break;\n    }\n  }\n  return divisible;\n};\n\n/*Write a function that takes a string and returns true if the string\n  length is divisible by 5 or false otherwise\n  Examples\n  divisibleBy5('Hello') == true\n  divisibleBy5('abcdcba') == true\n  divisibleBy5('kittens') == false\n  divisibleBy5('orange') == false\n  */\nconst divisibleBy5 = (string) => {\n  let divisible = true;\n  let length = string.length;\n  let i;\n  for (i = 2; i < length; i++) {\n    if (string[i] % 5 === 0) {\n      divisible = false;\n      break;\n    }\n  }\n  return divisible;\n};\n\n/*Write a function that takes a string and returns true if the string\n  length is divisible by 7 or false otherwise\n  Examples\n  divisibleBy7('Hello') == true\n  divisibleBy7('abcdcba') == true\n  divisibleBy7('kittens') == false\n  divisibleBy7('orange') == false\n  */\nconst divisibleBy7 = (string) => {\n  let divisible = true;\n  let length = string.length;\n  let i;\n  for (i = 2; i < length; i++) {\n    if (string[i] % 7 === 0) {\n      divisible = false;\n      break;\n    }\n  }\n  return divisible;\n};\n\n/*Write a function that takes a string and returns true if the string\n  length is divisible by 9 or false otherwise\n  Examples\n  divisibleBy9('Hello') == true\n  divisibleBy9('abcdcba') == true\n  divisibleBy9('kittens') == false\n  divisibleBy9('orange') == false\n  */\nconst divisibleBy9 = (string) => {\n  let divisible = true;\n  let length = string.length;\n  let i;\n  for (i = 2; i < length; i++) {\n    if (string[i] % 9 === 0) {\n      divisible = false;\n      break;\n    }\n  }\n  return divisible;\n};\n\n/*Write a function that takes a string and returns true if the string\n  length is divisible by 11 or false otherwise\n  Examples\n  divisibleBy11('Hello') == true\n  divisibleBy11('abcdcba') == true\n  divisibleBy11('kittens') == false\n  divisibleBy11('orange') == false\n  */\nconst divisibleBy11 = (string) => {\n  let divisible = true;\n  let length = string.length;\n  let i;\n  for (i = 2; i < length; i++) {\n    if (string[i] % 11 === 0) {\n      divisible = false;\n      break;\n    }\n  }\n  return divisible;\n};\n\n/*Write a function that takes a string and returns true if the string\n  length is divisible by 13 or false otherwise\n  Examples\n  divisibleBy13('Hello') == true\n  divisibleBy13('abcdcba') == true\n  divisibleBy13('kittens') == false\n  divisibleBy13('orange') == false\n  */\nconst divisibleBy13 = (string) => {\n  let divisible = true;\n  let length = string.length;\n  let i;\n  for (i = 2; i < length; i++) {\n    if (string[i] % 13 === 0) {\n      divisible = false;\n      break;\n    }\n  }\n  return divisible;\n};\n\n/*Write a function that takes a string and returns true if the string\n  length is divisible by 15 or false otherwise\n  Examples\n  divisibleBy15('Hello') == true\n  divisibleBy15('abcdcba') == true\n  divisibleBy15('kittens') == false\n  divisibleBy15('orange') == false\n  */\nconst divisibleBy15 = (string) => {\n  let divisible = true;\n  let length = string.length;\n  let i;\n  for (i = 2; i < length; i++) {\n    if (string[i] % 15 === 0) {\n      divisible = false;\n      break;\n    }\n  }\n  return divisible;\n};\n\n/*Write a function that takes a string and returns true if the string\n  length is divisible by 17 or false otherwise\n  Examples\n  divisibleBy17('Hello') == true\n  divisibleBy17('abcdcba') == true\n  divisibleBy17('kittens') == false\n  divisibleBy17('orange') == false\n  */\nconst divisibleBy17 = (string) => {\n  let divisible = true;\n  let length = string.length;\n  let i;\n  for (i = 2; i < length; i++) {\n    if (string[i] % 17 === 0) {\n      divisible = false;\n      break;\n    }\n  }\n  return divisible;\n};\n\n/*Write a function that takes a string and returns true if the string\n  length is divisible by 19 or false otherwise\n  Examples\n  divisibleBy19('Hello') == true\n  divisibleBy19('abcdcba') == true\n  divisibleBy19('kittens') == false\n  divisibleBy19('orange') == false\n  */\nconst divisibleBy19 = (string) => {\n  let divisible = true;\n  let length = string.length;\n  let i;\n  for (i = 2; i < length; i++) {\n    if (string[i] % 19 === 0) {\n      divisible = false;\n      break;\n    }\n  }\n  return divisible;\n};\n\n/*Write a function that takes a string and returns true if the string\n  length is divisible by 21 or false otherwise\n  Examples\n  divisibleBy21('Hello') == true\n  divisibleBy21('abcdcba') == true\n  divisibleBy21('kittens') == false\n  divisibleBy21('orange') == false\n  */\nconst divisibleBy21 = (string) => {\n  let divisible = true;\n  let length = string.length;\n  let i;\n  for (i = 2; i < length; i++) {\n    if (string[i] % 21 === 0) {\n      divisible = false;\n      break;\n    }\n  }\n  return divisible;\n};\n\n/*Write a function that takes a string and returns true if the string\n  length is divisible by 23 or false otherwise\n  Examples\n  divisibleBy23('Hello') == true\n  divisibleBy23('abcdcba') == true\n  divisibleBy23('kittens') == false\n  divisibleBy23('orange') == false\n  */\nconst divisibleBy23 = (string) => {\n  let divisible = true;\n  let length = string.length;\n  let i;\n  for (i = 2; i < length; i++) {\n    if (string[i] % 23 === 0) {\n      divisible = false;\n      break;\n    }\n  }\n  return divisible;\n};\n\n/*Write a function that takes a string and returns true if the string\n  length is divisible by 25 or false otherwise\n  Examples\n  divisibleBy25('Hello') == true\n  divisibleBy25('abcdcba') == true\n  divisibleBy25('kittens') == false\n  divisibleBy25('orange') == false\n  */\nconst divisibleBy25 = (string) => {\n  let divisible = true;\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst startsOneEnds = (n) => {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "gc": "<|endoftext|>/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst startsOneEnds = (n) => {\n  let count = 0;\n  let i = 1;\n  while (i < n) {\n    if (n % 10 === 0) {\n      count += 1;\n    }\n    i += 1;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 2.\n  */\nconst startsTwoEnds = (n) => {\n  let count = 0;\n  let i = 1;\n  while (i < n) {\n    if (n % 10 === 1) {\n      count += 1;\n    }\n    i += 1;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 3.\n  */\nconst startsThreeEnds = (n) => {\n  let count = 0;\n  let i = 1;\n  while (i < n) {\n    if (n % 10 === 2) {\n      count += 1;\n    }\n    i += 1;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 4.\n  */\nconst startsFourEnds = (n) => {\n  let count = 0;\n  let i = 1;\n  while (i < n) {\n    if (n % 10 === 3) {\n      count += 1;\n    }\n    i += 1;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 5.\n  */\nconst startsFiveEnds = (n) => {\n  let count = 0;\n  let i = 1;\n  while (i < n) {\n    if (n % 10 === 4) {\n      count += 1;\n    }\n    i += 1;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 6.\n  */\nconst startsSixEnds = (n) => {\n  let count = 0;\n  let i = 1;\n  while (i < n) {\n    if (n % 10 === 5) {\n      count += 1;\n    }\n    i += 1;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 7.\n  */\nconst startsSevenEnds = (n) => {\n  let count = 0;\n  let i = 1;\n  while (i < n) {\n    if (n % 10 === 6) {\n      count += 1;\n    }\n    i += 1;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 8.\n  */\nconst startsEightEnds = (n) => {\n  let count = 0;\n  let i = 1;\n  while (i < n) {\n    if (n % 10 === 7) {\n      count += 1;\n    }\n    i += 1;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 9.\n  */\nconst startsNineEnds = (n) => {\n  let count = 0;\n  let i = 1;\n  while (i < n) {\n    if (n % 10 === 8) {\n      count += 1;\n    }\n    i += 1;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 10.\n  */\nconst startsTenEnds = (n) => {\n  let count = 0;\n  let i = 1;\n  while (i < n) {\n    if (n % 10 === 9) {\n      count += 1;\n    }\n    i += 1;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 11.\n  */\nconst startsElevenEnds = (n) => {\n  let count = 0;\n  let i = 1;\n  while (i < n) {\n    if (n % 10 === 10) {\n      count += 1;\n    }\n    i += 1;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 12.\n  */\nconst startsTwelveEnds = (n) => {\n  let count = 0;\n  let i = 1;\n  while (i < n) {\n    if (n % 10 === 11) {\n      count += 1;\n    }\n    i += 1;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 13.\n  */\nconst startsThirteenEnds = (n) => {\n  let count = 0;\n  let i = 1;\n  while (i < n) {\n    if (n % 10 === 12) {\n      count += 1;\n    }\n    i += 1;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 14.\n  */\nconst startsFourteenEnds = (n) => {\n  let count = 0;\n  let i = 1;\n  while (i < n) {\n    if (n % 10 === 13) {\n      count += 1;\n    }\n    i += 1;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 15.\n  */\nconst startsFifteenEnds = (n) => {\n  let count = 0;\n  let i = 1;\n  while (i < n) {\n    if (n % 10 === 14) {\n      count += 1;\n    }\n    i += 1;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 16.\n  */\nconst startsSixteenEnds = (n) => {\n  let count = 0;\n  let i = 1;\n  while (i < n) {\n    if (n % 10 === 15) {\n      count += 1;\n    }\n    i += 1;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 17.\n  */\nconst startsSeventeenEnds = (n) => {\n  let count = 0;\n  let i = 1;\n  while (i < n) {\n    if (n % 10 === 16) {\n      count += 1;\n    }\n    i += 1;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 18.\n  */\nconst startsEighteenEnds = (n) => {\n  let count = 0;\n  let i = 1;\n  while (i < n) {\n    if (n % 10 === 17) {\n      count += 1;\n    }\n    i += 1;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 19.\n  */\nconst startsNineteenEnds = (n) => {\n  let count = 0;\n  let i = 1;\n  while (i < n) {\n    if (n % 10 === 18) {\n      count += 1;\n    }\n    i += 1;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 20.\n  */\nconst startsTwentyEnds = (n) => {\n  let count = 0;\n  let i = 1;\n  while (i < n) {\n    if (n % 10 === 19) {\n      count += 1;\n    }\n    i += 1;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 21.\n  */\nconst startsTwentyThirtyEnds = (n) => {\n  let count = 0;\n  let i = 1;\n  while (i < n) {\n    if (n % 10 === 20) {\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "gc": "<|endoftext|>/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  const sum = 0;\n  let binary = \"\";\n  for (let i = 0; i <= N; i++) {\n    binary += binary(i);\n    sum += parseInt(binary, 2);\n  }\n  return binary;\n};\n\nmodule.exports = {\n  solve\n};\n\n},{}],3:[function(require,module,exports){\n/*\n  Given a positive integer N, return the sum of its digits in decimal.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of decimal number\n  */\nconst solve = (N) => {\n  const sum = 0;\n  let decimal = \"\";\n  for (let i = 0; i <= N; i++) {\n    decimal += decimal(i);\n    sum += parseInt(decimal, 10);\n  }\n  return decimal;\n};\n\nmodule.exports = {\n  solve\n};\n\n},{}],4:[function(require,module,exports){\n/*\n  Given a positive integer N, return the sum of its digits in hexadecimal.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of hexadecimal number\n  */\nconst solve = (N) => {\n  const sum = 0;\n  let hexadecimal = \"\";\n  for (let i = 0; i <= N; i++) {\n    hexadecimal += hexadecimal(i);\n    sum += parseInt(hexadecimal, 16);\n  }\n  return hexadecimal;\n};\n\nmodule.exports = {\n  solve\n};\n\n},{}],5:[function(require,module,exports){\n/*\n  Given a positive integer N, return the sum of its digits in octal.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of octal number\n  */\nconst solve = (N) => {\n  const sum = 0;\n  let octal = \"\";\n  for (let i = 0; i <= N; i++) {\n    octal += octal(i);\n    sum += parseInt(octal, 8);\n  }\n  return octal;\n};\n\nmodule.exports = {\n  solve\n};\n\n},{}],6:[function(require,module,exports){\n/*\n  Given a positive integer N, return the sum of its digits in hexadecimal.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of hexadecimal number\n  */\nconst solve = (N) => {\n  const sum = 0;\n  let hexadecimal = \"\";\n  for (let i = 0; i <= N; i++) {\n    hexadecimal += hexadecimal(i);\n    sum += parseInt(hexadecimal, 16);\n  }\n  return hexadecimal;\n};\n\nmodule.exports = {\n  solve\n};\n\n},{}],7:[function(require,module,exports){\n/*\n  Given a positive integer N, return the sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  const sum = 0;\n  let binary = \"\";\n  for (let i = 0; i <= N; i++) {\n    binary += binary(i);\n    sum += parseInt(binary, 2);\n  }\n  return binary;\n};\n\nmodule.exports = {\n  solve\n};\n\n},{}],8:[function(require,module,exports){\n/*\n  Given a positive integer N, return the sum of its digits in decimal.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of decimal number\n  */\nconst solve = (N) => {\n  const sum = 0;\n  let decimal = \"\";\n  for (let i = 0; i <= N; i++) {\n    decimal += decimal(i);\n    sum += parseInt(decimal, 10);\n  }\n  return decimal;\n};\n\nmodule.exports = {\n  solve\n};\n\n},{}],9:[function(require,module,exports){\n/*\n  Given a positive integer N, return the sum of its digits in hexadecimal.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of hexadecimal number\n  */\nconst solve = (N) => {\n  const sum = 0;\n  let hexadecimal = \"\";\n  for (let i = 0; i <= N; i++) {\n    hexadecimal += hexadecimal(i);\n    sum += parseInt(hexadecimal, 16);\n  }\n  return hexadecimal;\n};\n\nmodule.exports = {\n  solve\n};\n\n},{}],10:[function(require,module,exports){\n/*\n  Given a positive integer N, return the sum of its digits in octal.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of octal number\n  */\nconst solve = (N) => {\n  const sum = 0;\n  let octal = \"\";\n  for (let i = 0; i <= N; i++) {\n    oct", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "gc": "<|endoftext|>/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let even = 0;\n  let odd = lst.length;\n  \n  for(let i = 0; i < lst.length; i++){\n    if(lst[i] % 2 === 1){\n      even++;\n    }\n  }\n  \n  for(let i = 0; i < lst.length; i++){\n    if(lst[i] % 2!== 1){\n      odd--;\n    }\n  }\n  \n  return even + odd;\n};\n\n/*Given a non-empty list of integers lst. return the maximum element in the list.\n\n\n  Examples:\n      max([4, 2, 6, 7]) ==> 7\n  */\nconst max = (lst) => {\n  let max = lst[0];\n  \n  for(let i = 1; i < lst.length; i++){\n    if(lst[i] > max){\n      max = lst[i];\n    }\n  }\n  \n  return max;\n};\n\n/*Given a non-empty list of integers lst. return the minimum element in the list.\n\n\n  Examples:\n      min([4, 2, 6, 7]) ==> 4\n  */\nconst min = (lst) => {\n  let min = lst[0];\n  \n  for(let i = 1; i < lst.length; i++){\n    if(lst[i] < min){\n      min = lst[i];\n    }\n  }\n  \n  return min;\n};\n\n/*Given a non-empty list of integers lst. return the sum of all the elements in the list.\n\n\n  Examples:\n      sum([4, 2, 6, 7]) ==> 10\n  */\nconst sum = (lst) => {\n  let sum = 0;\n  \n  for(let i = 0; i < lst.length; i++){\n    sum += lst[i];\n  }\n  \n  return sum;\n};\n\n/*Given a non-empty list of integers lst. return the difference between the maximum element in the list and the minimum element in the list.\n\n\n  Examples:\n      diff([4, 2, 6, 7]) ==> 1\n  */\nconst diff = (lst) => {\n  let diff = lst[0];\n  \n  for(let i = 1; i < lst.length; i++){\n    if(lst[i] > diff){\n      diff = lst[i];\n    }\n  }\n  \n  return diff;\n};\n\n/*Given a non-empty list of integers lst. return the product of the elements in the list.\n\n\n  Examples:\n      prod([4, 2, 6, 7]) ==> 24\n  */\nconst prod = (lst) => {\n  let prod = 1;\n  \n  for(let i = 0; i < lst.length; i++){\n    prod *= lst[i];\n  }\n  \n  return prod;\n};\n\n/*Given a non-empty list of integers lst. return the product of the elements in the list except the maximum element.\n\n\n  Examples:\n      prodExceptMax([4, 2, 6, 7]) ==> 24\n  */\nconst prodExceptMax = (lst) => {\n  let prod = 1;\n  \n  for(let i = 0; i < lst.length; i++){\n    if(lst[i] > lst[lst.length - 1]){\n      prod *= lst[i];\n    }\n  }\n  \n  return prod;\n};\n\n/*Given a non-empty list of integers lst. return the product of the elements in the list except the minimum element.\n\n\n  Examples:\n      prodExceptMin([4, 2, 6, 7]) ==> 24\n  */\nconst prodExceptMin = (lst) => {\n  let prod = 1;\n  \n  for(let i = 0; i < lst.length; i++){\n    if(lst[i] < lst[0]){\n      prod *= lst[i];\n    }\n  }\n  \n  return prod;\n};\n\n/*Given a non-empty list of integers lst. return the product of the elements in the list except the maximum element and the minimum element.\n\n\n  Examples:\n      prodExceptMaxMin([4, 2, 6, 7]) ==> 24\n  */\nconst prodExceptMaxMin = (lst) => {\n  let prod = 1;\n  \n  for(let i = 0; i < lst.length; i++){\n    if(lst[i] > lst[0] && lst[i] < lst[lst.length - 1]){\n      prod *= lst[i];\n    }\n  }\n  \n  return prod;\n};\n\n/*Given a non-empty list of integers lst. return the product of the elements in the list except the maximum element and the minimum element and the maximum element and the minimum element and the maximum element and the minimum element and the minimum element and the maximum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum element and the minimum ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antSihuffle('Hi') returns 'Hi'\n  antSihuffle('hello') returns 'ehllo'\n  antSihuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antSihuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antSihuffle", "gc": "<|endoftext|>/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antSihuffle('Hi') returns 'Hi'\n  antSihuffle('hello') returns 'ehllo'\n  antSihuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antSihuffle = (s) => {\n  let newStr = '';\n  let newStrArr = [];\n  let newStrArr2 = [];\n  let newStrArr3 = [];\n  let newStrArr4 = [];\n  let newStrArr5 = [];\n  let newStrArr6 = [];\n  let newStrArr7 = [];\n  let newStrArr8 = [];\n  let newStrArr9 = [];\n  let newStrArr10 = [];\n  let newStrArr11 = [];\n  let newStrArr12 = [];\n  let newStrArr13 = [];\n  let newStrArr14 = [];\n  let newStrArr15 = [];\n  let newStrArr16 = [];\n  let newStrArr17 = [];\n  let newStrArr18 = [];\n  let newStrArr19 = [];\n  let newStrArr20 = [];\n  let newStrArr21 = [];\n  let newStrArr22 = [];\n  let newStrArr23 = [];\n  let newStrArr24 = [];\n  let newStrArr25 = [];\n  let newStrArr26 = [];\n  let newStrArr27 = [];\n  let newStrArr28 = [];\n  let newStrArr29 = [];\n  let newStrArr30 = [];\n  let newStrArr31 = [];\n  let newStrArr32 = [];\n  let newStrArr33 = [];\n  let newStrArr34 = [];\n  let newStrArr35 = [];\n  let newStrArr36 = [];\n  let newStrArr37 = [];\n  let newStrArr38 = [];\n  let newStrArr39 = [];\n  let newStrArr40 = [];\n  let newStrArr41 = [];\n  let newStrArr42 = [];\n  let newStrArr43 = [];\n  let newStrArr44 = [];\n  let newStrArr45 = [];\n  let newStrArr46 = [];\n  let newStrArr47 = [];\n  let newStrArr48 = [];\n  let newStrArr49 = [];\n  let newStrArr50 = [];\n  let newStrArr51 = [];\n  let newStrArr52 = [];\n  let newStrArr53 = [];\n  let newStrArr54 = [];\n  let newStrArr55 = [];\n  let newStrArr56 = [];\n  let newStrArr57 = [];\n  let newStrArr58 = [];\n  let newStrArr59 = [];\n  let newStrArr60 = [];\n  let newStrArr61 = [];\n  let newStrArr62 = [];\n  let newStrArr63 = [];\n  let newStrArr64 = [];\n  let newStrArr65 = [];\n  let newStrArr66 = [];\n  let newStrArr67 = [];\n  let newStrArr68 = [];\n  let newStrArr69 = [];\n  let newStrArr70 = [];\n  let newStrArr71 = [];\n  let newStrArr72 = [];\n  let newStrArr73 = [];\n  let newStrArr74 = [];\n  let newStrArr75 = [];\n  let newStrArr76 = [];\n  let newStrArr77 = [];\n  let newStrArr78 = [];\n  let newStrArr79 = [];\n  let newStrArr80 = [];\n  let newStrArr81 = [];\n  let newStrArr82 = [];\n  let newStrArr83 = [];\n  let newStrArr84 = [];\n  let newStrArr85 = [];\n  let newStrArr86 = [];\n  let newStrArr87 = [];\n  let newStrArr88 = [];\n  let newStrArr89 = [];\n  let newStrArr90 = [];\n  let newStrArr91 = [];\n  let newStrArr92 = [];\n  let newStrArr93 = [];\n  let newStrArr94 = [];\n  let newStrArr95 = [];\n  let newStrArr96 = [];\n  let newStrArr97 = [];\n  let newStrArr98 = [];\n  let newStrArr99 = [];\n  let newStrArr100 = [];\n  let newStrArr101 = [];\n  let newStrArr102 = [];\n  let newStrArr103 = [];\n  let newStrArr104 = [];\n  let newStrArr105 = [];\n  let newStrArr106 = [];\n  let newStrArr107 = [];\n  let newStrArr108 = [];\n  let newStrArr109 = [];\n  let newStrArr110 = [];\n  let newStrAr1111 = [];\n  let newStrArr112 = [];\n  let newStrArr113 = [];\n  let newStrArr114 = [];\n  let newStrArr115 = [];\n  let newStrArr116 = [];\n  let newStrArr117 = [];\n  let newStrArr118 = [];\n  let newStrArr119 = [];\n  let newStrArr120 = [];\n  let newStrAr121 = [];\n  let newStrAr122 = [];\n  let newStrAr123 = [];\n  let newStrArr124 = [];\n  let newStrArr125 = [];\n  let newStrArr126 = [];\n  let newStrArr127 = [];\n  let newStrArr128 = [];\n  let newStrArr129 = [];\n  let newStrArr130 = [];\n  let newStrArr131 = [];\n  let newStrArr132 = [];\n  let newStrArr133 = [];\n  let newStrArr134 = [];\n  let newStrArr135 = [];\n  let newStrArr136 = [];\n  let newStrArr137 = [];\n  let newStrArr138 = [];\n  let newStrArr139 = [];\n  let newStrArr140 = [];\n  let newStrArr141 = [];\n  let newStrArr142 = [];\n  let newStrArr143 = [];\n  let newStrArr144 = [];\n  let newStrArr145 = [];\n  let newStrArr146 = [];\n  let newStrArr147 = [];\n  let newStrArr148 = [];\n  let newStrArr149 = [];\n  let newStrArr150 = [];\n  let newStrArr151 = [];\n  let newStrArr152 = [];\n  let newStrArr153 = [];\n  let newStrArr154 = [];\n  let newStrArr155 = [];\n  let newStrArr156 = [];\n  let newStrArr157 = [];\n  let newStrArr158 = [];\n  let newStrArr159 = [];\n  let newStrArr160 = [];\n  let newStrArr161 = [];\n  let newStrArr162 = [];\n  let newStrArr163 = [];\n  let newStrArr164 = [];\n  let newStrArr165 = [];\n  let newStrArr166 = [];\n  let newStrArr167 = [];\n  let newStrArr168 = [];\n  let newStrArr169 = [];\n  let newStrArr170 = [];\n  let newStrArr171 = [];\n  let newStrArr172 = [];\n  let newStrArr173 = [];\n  let newStrArr174 = [];\n  let newStrArr175 = [];\n  let newStrArr176 = [];\n  let newStrArr177 = [];\n  let newStrArr178 = [];\n  let newStrArr179 = [];\n  let newStrArr180 = [];\n  let newStrArr181 = [];\n  let newStrArr182 = [];\n  let newStrArr183 = [];\n  let newStrArr184 = [];\n  let newStrArr185 = [];\n  let newStrArr186 = [];\n  let newStrArr187 = [];\n  let newStrArr188 = [];\n  let newStrArr189 = [];\n  let newStrArr190 = [];\n  let newStrArr191 = [];\n  let newStrArr192 = [];\n  let newStrArr193 = ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "gc": "<|endoftext|>/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  const row = []\n  for (let i = 0; i < lst.length; i++) {\n    const row = lst[i]\n    if (row[x] === undefined) {\n      row[x] = 0\n    }\n  }\n  row.sort((a, b) => b - a)\n  return row\n}\n\n/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getColumn = (lst, x) => {\n  const row = []\n  for (let i = 0; i < lst.length; i++) {\n    const row = lst[i]\n    if (row[x] === undefined) {\n      row[x] = 0\n    }\n  }\n  row.sort((a, b) => a - b)\n  return row\n}\n\n/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRowAndColumn = (lst, x) => {\n  const row = []\n  for (let i = 0; i < lst.length; i++) {\n    const row = lst[i]\n    if (row[x] === undefined) {\n      row[x] = 0\n    }\n  }\n  row.sort((a, b) => b - a)\n  return row\n}\n\n/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRowAndColumnAndRow = (lst, x) => {\n  const row = []\n  for (let i = 0; i < lst.length; i++) {\n    const row = lst[i]\n    if (row[x] === undefined) {\n      row[x] = 0\n    }\n  }\n  row.sort((a, b) => b - a)\n  return row\n}\n\n/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRowAndColumnAndRowAndRow = (lst, x) => {\n  const row = []\n  for (let i = 0; i < lst.length; i++) {\n    const row = lst[i]\n    if (row[x] === undefined) {\n      row[x] = 0\n    }\n  }\n  row.sort((a, b) => b - a)\n  return row\n}\n\n/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRowAndColumnAndRowAndRowAndRow = (lst, x) => {\n  const row = []\n  for (let i = 0; i < lst.length; i++) {\n    const row = lst[i]\n    if (row[x] === undefined) {\n      row[x] = 0\n    }\n  }\n  row.sort((a, b) => b - a)\n  return row\n}\n\n/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRowAndColumnAndRowAndRowAndRowAndRow = (lst, x) => {\n  const row = []\n  for (let i = 0; i < lst.length; i++) {\n    const ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "gc": "<|endoftext|>/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  const sortedArray = array.sort((a, b) => a - b);\n  return sortedArray;\n};\n\n/**\n * Given an array of non-negative integers, return the first index value that is greater than the given value.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * findGreaterThan([]) => -1\n  * findGreaterThan([5]) => 4\n  * findGreaterThan([2, 4, 3, 0, 1, 5]) => 1\n  * findGreaterThan([2, 4, 3, 0, 1, 5, 6]) => 6\n  */\nconst findGreaterThan = (array) => {\n  const sortedArray = sortArray(array);\n  const firstIndexValue = sortedArray[0];\n  const lastIndexValue = sortedArray[sortedArray.length - 1];\n  return firstIndexValue > lastIndexValue? firstIndexValue : lastIndexValue;\n};\n\n/**\n * Given an array of non-negative integers, return the first index value that is smaller than the given value.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * findLessThan([]) => -1\n  * findLessThan([5]) => 4\n  * findLessThan([2, 4, 3, 0, 1, 5]) => 0\n  * findLessThan([2, 4, 3, 0, 1, 5, 6]) => 5\n  */\nconst findLessThan = (array) => {\n  const sortedArray = sortArray(array);\n  const firstIndexValue = sortedArray[0];\n  const lastIndexValue = sortedArray[sortedArray.length - 1];\n  return firstIndexValue < lastIndexValue? firstIndexValue : lastIndexValue;\n};\n\n/**\n * Given an array of non-negative integers, return the first index value that is equal to the given value.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * findEqual([]) => -1\n  * findEqual([5]) => 4\n  * findEqual([2, 4, 3, 0, 1, 5]) => 1\n  * findEqual([2, 4, 3, 0, 1, 5, 6]) => 6\n  */\nconst findEqual = (array) => {\n  const sortedArray = sortArray(array);\n  const firstIndexValue = sortedArray[0];\n  const lastIndexValue = sortedArray[sortedArray.length - 1];\n  return firstIndexValue === lastIndexValue? firstIndexValue : lastIndexValue;\n};\n\n/**\n * Given an array of non-negative integers, return the first index value that is less than or equal to the given value.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * findLessOrEqual([]) => -1\n  * findLessOrEqual([5]) => 4\n  * findLessOrEqual([2, 4, 3, 0, 1, 5]) => 0\n  * findLessOrEqual([2, 4, 3, 0, 1, 5, 6]) => 5\n  */\nconst findLessOrEqual = (array) => {\n  const sortedArray = sortArray(array);\n  const firstIndexValue = sortedArray[0];\n  const lastIndexValue = sortedArray[sortedArray.length - 1];\n  return firstIndexValue <= lastIndexValue? firstIndexValue : lastIndexValue;\n};\n\n/**\n * Given an array of non-negative integers, return the first index value that is greater than or equal to the given value.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * findGreaterOrEqual([]) => -1\n  * findGreaterOrEqual([5]) => 4\n  * findGreaterOrEqual([2, 4, 3, 0, 1, 5]) => 1\n  * findGreaterOrEqual([2, 4, 3, 0, 1, 5, 6]) => 6\n  */\nconst findGreaterOrEqual = (array) => {\n  const sortedArray = sortArray(array);\n  const firstIndexValue = sortedArray[0];\n  const lastIndexValue = sortedArray[sortedArray.length - 1];\n  return firstIndexValue >= lastIndexValue? firstIndexValue : lastIndexValue;\n};\n\n/**\n * Given an array of non-negative integers, return the first index value that is equal to the given value.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * findEqual([]) => -1\n  * findEqual([5]) => 4\n  * findEqual([2, 4, 3, 0, 1, 5]) => 1\n  * findEqual([2, 4, 3, 0, 1, 5, 6]) => 6\n  */\nconst findEqualOrEqual = (array) => {\n  const sortedArray = sortArray(array);\n  const firstIndexValue = sortedArray[0];\n  const lastIndexValue = sortedArray[sortedArray.length - 1];\n  return firstIndexValue === lastIndexValue? firstIndexValue : lastIndexValue;\n};\n\n/**\n * Given an array of non-negative integers, return the first index value that is less than the given value.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * findLessThan([]) => -1\n  * findLessThan([5]) => 4\n  * findLessThan([2, 4, 3, 0, 1, 5]) => 0\n  * findLessThan([2, 4, 3, 0, 1, 5, 6]) => 5\n  */\nconst findLessThan = (array) => {\n  const sortedArray = sortArray(array);\n  const firstIndexValue = sortedArray[0];\n  const lastIndexValue = sortedArray[sortedArray.length - 1];\n  return firstIndexValue < lastIndexValue? firstIndexValue : lastIndexValue;\n};\n\n/**\n * Given an array of non-negative integers, return the first index value that is greater than or equal to the given value.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * findGreaterThan([]) => -1\n  * findGreaterThan([5]) => 4\n  * findGreaterThan([2, 4, 3, 0, 1, 5]) => 1\n  * findGreaterThan([2, 4, 3, 0, 1, 5, 6]) => 6\n  */\nconst findGreaterThanOrEqual = (array) => {\n  const sortedArray = sortArray(array);\n  const firstIndexValue = sortedArray[0];\n  const lastIndexValue = sortedArray[sortedArray.length - 1];\n  return firstIndexValue >= lastIndexValue? firstIndexValue : lastIndexValue;\n};\n\n/**\n * Given an array of non-negative integers, return the first index value that is equal to the given value.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * findEqual([]) => -1\n  * findEqual([5]) => 4\n  * findEqual([2, 4, 3, 0, 1, 5]) => 1\n  * findEqual([2, 4, 3, 0, 1, 5, 6]) => 6\n  */\nconst findEqualOrEqual = (array) => {\n  const sortedArray = sortArray(array);\n  const firstIndexValue = sortedArray[0];\n  const lastIndexValue = sortedArray[sortedArray.length - 1];\n  return firstIndexValue === lastIndexValue? firstIndexValue : lastIndexValue;\n};\n\n/**\n * Given an array of non-negative integers, return the first index value that is greater than the given value.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * findLessThan([]) => -1\n  * findLessThan([5]) => 4\n  * findLessThan([2, 4, 3, 0, 1, 5]) => 0\n  * findLessThan([2, 4, 3, 0, 1, 5, 6]) => 5\n  */\nconst findGreaterThan = (array) => {\n  const sortedArray = sortArray(array);\n  const firstIndexValue = sortedArray[0];\n  const lastIndexValue = sortedArray[sortedArray.length - 1];\n  return firstIndexValue > lastIndexValue? firstIndexValue : lastIndexValue;\n};\n\n/**\n * Given an array of non-negative integers, return the first index value that is smaller than the given value.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * findLessThan([]) => -1\n  * findLessThan([5]) => 4\n  * findLessThan", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/89", "prompt": "/*Create a function encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "gc": "<|endoftext|>/*Create a function encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let rotated = '';\n  let i;\n  let j;\n  let k;\n  let l;\n  let temp;\n  let temp2;\n  let temp3;\n  let temp4;\n  let temp5;\n  let temp6;\n  let temp7;\n  let temp8;\n  let temp9;\n  let temp10;\n  let temp11;\n  let temp12;\n  let temp13;\n  let temp14;\n  let temp15;\n  let temp16;\n  let temp17;\n  let temp18;\n  let temp19;\n  let temp20;\n  let temp21;\n  let temp22;\n  let temp23;\n  let temp24;\n  let temp25;\n  let temp26;\n  let temp27;\n  let temp28;\n  let temp29;\n  let temp30;\n  let temp31;\n  let temp32;\n  let temp33;\n  let temp34;\n  let temp35;\n  let temp36;\n  let temp37;\n  let temp38;\n  let temp39;\n  let temp40;\n  let temp41;\n  let temp42;\n  let temp43;\n  let temp44;\n  let temp45;\n  let temp46;\n  let temp47;\n  let temp48;\n  let temp49;\n  let temp50;\n  let temp51;\n  let temp52;\n  let temp53;\n  let temp54;\n  let temp55;\n  let temp56;\n  let temp57;\n  let temp58;\n  let temp59;\n  let temp60;\n  let temp61;\n  let temp62;\n  let temp63;\n  let temp64;\n  let temp65;\n  let temp66;\n  let temp67;\n  let temp68;\n  let temp69;\n  let temp70;\n  let temp71;\n  let temp72;\n  let temp73;\n  let temp74;\n  let temp75;\n  let temp76;\n  let temp77;\n  let temp78;\n  let temp79;\n  let temp80;\n  let temp81;\n  let temp82;\n  let temp83;\n  let temp84;\n  let temp85;\n  let temp86;\n  let temp87;\n  let temp88;\n  let temp89;\n  let temp90;\n  let temp91;\n  let temp92;\n  let temp93;\n  let temp94;\n  let temp95;\n  let temp96;\n  let temp97;\n  let temp98;\n  let temp99;\n  let temp100;\n  let temp101;\n  let temp102;\n  let temp103;\n  let temp104;\n  let temp105;\n  let temp106;\n  let temp107;\n  let temp108;\n  let temp109;\n  let temp110;\n  let temp111;\n  let temp112;\n  let temp113;\n  let temp114;\n  let temp115;\n  let temp116;\n  let temp117;\n  let temp118;\n  let temp119;\n  let temp120;\n  let temp121;\n  let temp122;\n  let temp123;\n  let temp124;\n  let temp125;\n  let temp126;\n  let temp127;\n  let temp128;\n  let temp129;\n  let temp130;\n  let temp131;\n  let temp132;\n  let temp133;\n  let temp134;\n  let temp135;\n  let temp136;\n  let temp137;\n  let temp138;\n  let temp139;\n  let temp140;\n  let temp141;\n  let temp142;\n  let temp143;\n  let temp144;\n  let temp145;\n  let temp146;\n  let temp147;\n  let temp148;\n  let temp149;\n  let temp150;\n  let temp151;\n  let temp152;\n  let temp153;\n  let temp154;\n  let temp155;\n  let temp156;\n  let temp157;\n  let temp158;\n  let temp159;\n  let temp160;\n  let temp161;\n  let temp162;\n  let temp163;\n  let temp164;\n  let temp165;\n  let temp166;\n  let temp167;\n  let temp168;\n  let temp169;\n  let temp170;\n  let temp171;\n  let temp172;\n  let temp173;\n  let temp174;\n  let temp175;\n  let temp176;\n  let temp177;\n  let temp178;\n  let temp179;\n  let temp180;\n  let temp181;\n  let temp182;\n  let temp183;\n  let temp184;\n  let temp185;\n  let temp186;\n  let temp187;\n  let temp188;\n  let temp189;\n  let temp190;\n  let temp191;\n  let temp192;\n  let temp193;\n  let temp194;\n  let temp195;\n  let temp196;\n  let temp197;\n  let temp198;\n  let temp199;\n  let temp200;\n  let temp201;\n  let temp202;\n  let temp203;\n  let temp204;\n  let temp205;\n  let temp206;\n  let temp207;\n  let temp208;\n  let temp209;\n  let temp210;\n  let temp211;\n  let temp212;\n  let temp213;\n  let temp214;\n  let temp215;\n  let temp216;\n  let temp217;\n  let temp218;\n  let temp219;\n  let temp220;\n  let temp221;\n  let temp222;\n  let temp223;\n  let temp224;\n  let temp225;\n  let temp226;\n  let temp227;\n  let temp228;\n  let temp229;\n  let temp230;\n  let temp231;\n  let temp232;\n  let temp233;\n  let temp234;\n  let temp235;\n  let temp236;\n  let temp237;\n  let temp238;\n  let temp239;\n  let temp240;\n  let temp241;\n  let temp242;\n  let temp243;\n  let temp244;\n  let temp245;\n  let temp246;\n  let temp247;\n  let temp248;\n  let temp249;\n  let temp250;\n  let temp251;\n  let temp252;\n  let temp253;\n  let temp254;\n  let temp255;\n  let temp256;\n  let temp257;\n  let temp258;\n  let temp259;\n  let temp260;\n  let temp261;\n  let temp262;\n  let temp263;\n  let temp264;\n  let temp265;\n  let temp266;\n  let temp267;\n  let temp268;\n  let temp269;\n  let temp270;\n  let temp271;\n  let temp272;\n  let temp273;\n  let temp274;\n  let temp275;\n  let temp276;\n  let temp277;\n  let temp278;\n  let temp279;\n  let temp280;\n  let temp281;\n  let temp282;\n  let temp283;", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/9", "prompt": "/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "gc": "<|endoftext|>/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  const result = [];\n  let max = 0;\n  let current = 0;\n  let index = 0;\n  while (index < numbers.length) {\n    current = numbers[index];\n    if (current > max) {\n      max = current;\n      result.push(current);\n    }\n    index++;\n  }\n  return result;\n};\n\nconst getRandom = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n\nconst getRandomInt = () => {\n  return getRandom(0, 99);\n};\n\nconst getRandomInt = () => {\n  return getRandom(0, 99);\n};\n\nconst getRandomInt = () => {\n  return getRandom(0, 99);\n};\n\nconst getRandomInt = () => {\n  return getRandom(0, 99);\n};\n\nconst getRandomInt = () => {\n  return getRandom(0, 99);\n};\n\nconst getRandomInt = () => {\n  return getRandom(0, 99);\n};\n\nconst getRandomInt = () => {\n  return getRandom(0, 99);\n};\n\nconst getRandomInt = () => {\n  return getRandom(0, 99);\n};\n\nconst getRandomInt = () => {\n  return getRandom(0, 99);\n};\n\nconst getRandomInt = () => {\n  return getRandom(0, 99);\n};\n\nconst getRandomInt = () => {\n  return getRandom(0, 99);\n};\n\nconst getRandomInt = () => {\n  return getRandom(0, 99);\n};\n\nconst getRandomInt = () => {\n  return getRandom(0, 99);\n};\n\nconst getRandomInt = () => {\n  return getRandom(0, 99);\n};\n\nconst getRandomInt = () => {\n  return getRandom(0, 99);\n};\n\nconst getRandomInt = () => {\n  return getRandom(0, 99);\n};\n\nconst getRandomInt = () => {\n  return getRandom(0, 99);\n};\n\nconst getRandomInt = () => {\n  return getRandom(0, 99);\n};\n\nconst getRandomInt = () => {\n  return getRandom(0, 99);\n};\n\nconst getRandomInt = () => {\n  return getRandom(0, 99);\n};\n\nconst getRandomInt = () => {\n  return getRandom(0, 99);\n};\n\nconst getRandomInt = () => {\n  return getRandom(0, 99);\n};\n\nconst getRandomInt = () => {\n  return getRandom(0, 99);\n};\n\nconst getRandomInt = () => {\n  return getRandom(0, 99);\n};\n\nconst getRandomInt = () => {\n  return getRandom(0, 99);\n};\n\nconst getRandomInt = () => {\n  return getRandom(0, 99);\n};\n\nconst getRandomInt = () => {\n  return getRandom(0, 99);\n};\n\nconst getRandomInt = () => {\n  return getRandom(0, 99);\n};\n\nconst getRandomInt = () => {\n  return getRandom(0, 99);\n};\n\nconst getRandomInt = () => {\n  return getRandom(0, 99);\n};\n\nconst getRandomInt = () => {\n  return getRandom(0, 99);\n};\n\nconst getRandomInt = () => {\n  return getRandom(0, 99);\n};\n\nconst getRandomInt = () => {\n  return getRandom(0, 99);\n};\n\nconst getRandomInt = () => {\n  return getRandom(0, 99);\n};\n\nconst getRandomInt = () => {\n  return getRandom(0, 99);\n};\n\nconst getRandomInt = () => {\n  return getRandom(0, 99);\n};\n\nconst getRandomInt = () => {\n  return getRandom(0, 99);\n};\n\nconst getRandomInt = () => {\n  return getRandom(0, 99);\n};\n\nconst getRandomInt = () => {\n  return getRandom(0, 99);\n};\n\nconst getRandomInt = () => {\n  return getRandom(0, 99);\n};\n\nconst getRandomInt = () => {\n  return getRandom(0, 99);\n};\n\nconst getRandomInt = () => {\n  return getRandom(0, 99);\n};\n\nconst getRandomInt = () => {\n  return getRandom(0, 99);\n};\n\nconst getRandomInt = () => {\n  return getRandom(0, 99);\n};\n\nconst getRandomInt = () => {\n  return getRandom(0, 99);\n};\n\nconst getRandomInt = () => {\n  return getRandom(0, 99);\n};\n\nconst getRandomInt = () => {\n  return getRandom(0, 99);\n};\n\nconst getRandomInt = () => {\n  return getRandom(0, 99);\n};\n\nconst getRandomInt = () => {\n  return getRandom(0, 99);\n};\n\nconst getRandomInt = () => {\n  return getRandom(0, 99);\n};\n\nconst getRandomInt = () => {\n  return getRandom(0, 99);\n};\n\nconst getRandomInt = () => {\n  return getRandom(0, 99);\n};\n\nconst getRandomInt = () => {\n  return getRandom(0, 99);\n};\n\nconst getRandomInt = () => {\n  return getRandom(0, 99);\n};\n\nconst getRandomInt = () => {\n  return getRandom(0, 99);\n};\n\nconst getRandomInt = () => {\n  return getRandom(0, 99);\n};\n\nconst getRandomInt = () => {\n  return getRandom(0, 99);\n};\n\nconst getRandomInt = () => {\n  return getRandom(0, 99);\n};\n\nconst getRandomInt = () => {\n  return getRandom(0, 99);\n};\n\nconst getRandomInt = () => {\n  return getRandom(0, 99);\n};\n\nconst getRandomInt = () => {\n  return getRandom(0, 99);\n};\n\nconst getRandomInt = () => {\n  return getRandom(0, 99);\n};\n\nconst getRandomInt = () => {\n  return getRandom(0, 99);\n};\n\nconst getRandomInt = () => {\n  return getRandom(0, 99);\n};\n\nconst getRandomInt = () => {\n  return getRandom(0, 99);\n};\n\nconst getRandomInt = () => {\n  return getRandom(0, 99);\n};\n\nconst getRandomInt = () => {\n  return getRandom(0, 99);\n};\n\nconst getRandomInt = () => {\n  return getRandom(0, 99);\n};\n\nconst getRandomInt = () => {\n  return getRandom(0, 99);\n};\n\nconst getRandomInt = () => {\n  return getRandom(0, 99);\n};\n\nconst getRandomInt = () => {\n  return getRandom(0, 99);\n};\n\nconst getRandomInt = () => {\n  return getRandom(0, 99);\n};\n\nconst getRandomInt = () => {\n  return getRandom(0, 99);\n};\n\nconst getRandomInt = () => {\n  return getRandom(0, 99);\n};\n\nconst getRandomInt = () => {\n  return getRandom(0, 99);\n};\n\nconst getRandomInt = () => {\n  return getRandom(0, 99);\n};\n\nconst getRandomInt = () => {\n  return getRandom(0, 99);\n};\n\nconst getRandomInt = () => {\n  return getRandom(0, 99);\n};\n\nconst getRandomInt = () => {\n  return getRandom(0, 99);\n};\n\nconst getRandomInt = () => {\n  return getRandom(0, 99);\n};\n\nconst getRandomInt = () => {\n  return getRandom(0, 99);\n};\n\nconst getRandomInt = () => {\n  return getRandom(0, 99);\n};\n\nconst getRandomInt = () => {\n  return getRandom(0, 99);\n};\n\nconst getRandomInt = () => {\n  return getRandom(0, 99);\n};\n\nconst getRandomInt = () => {\n  return getRandom(0, 99);\n};\n\nconst getRandomInt = () => {\n  return getRandom(0, 99);\n};\n\nconst getRandomInt = () => {\n  return getRandom(0, 99);\n};\n\nconst getRandomInt = () => {\n  return getRandom(0, 99);\n};\n\nconst ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/90", "prompt": "/*\n  You are given a list of integers.\n  Write a function nextSmallset() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nextSmallset([1, 2, 3, 4, 5]) == 2\n  nextSmallset([5, 1, 4, 3, 2]) == 2\n  nextSmallset([]) == null\n  nextSmallset([1, 1]) == null\n  */\nconst nextSmallset = (lst) => {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallset", "gc": "<|endoftext|>/*\n  You are given a list of integers.\n  Write a function nextSmallset() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nextSmallset([1, 2, 3, 4, 5]) == 2\n  nextSmallset([5, 1, 4, 3, 2]) == 2\n  nextSmallset([]) == null\n  nextSmallset([1, 1]) == null\n  */\nconst nextSmallset = (lst) => {\n  let min = null;\n  let minIndex = -1;\n  let minValue = Number.MAX_VALUE;\n  for (let i = 0; i < lst.length; i++) {\n    if (min === null || lst[i] < min) {\n      min = lst[i];\n      minIndex = i;\n      minValue = lst[i];\n    }\n  }\n  return min;\n};\n\n/*\n  You are given a list of integers.\n  Write a function nextBigset() that returns the 2nd biggest element of the list.\n  Return null if there is no such element.\n  \n  nextBigset([1, 2, 3, 4, 5]) == 3\n  nextBigset([5, 1, 4, 3, 2]) == 3\n  nextBigset([]) == null\n  nextBigset([1, 1]) == null\n  */\nconst nextBigset = (lst) => {\n  let max = null;\n  let maxIndex = -1;\n  let maxValue = Number.MIN_SAFE_INTEGER;\n  for (let i = 0; i < lst.length; i++) {\n    if (max === null || lst[i] > max) {\n      max = lst[i];\n      maxIndex = i;\n      maxValue = lst[i];\n    }\n  }\n  return max;\n};\n\n/*\n  You are given a list of integers.\n  Write a function nextSmallest() that returns the 1st smallest element of the list.\n  Return null if there is no such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 1\n  nextSmallest([5, 1, 4, 3, 2]) == 1\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nconst nextSmallest = (lst) => {\n  let min = null;\n  let minIndex = -1;\n  let minValue = Number.MAX_VALUE;\n  for (let i = 0; i < lst.length; i++) {\n    if (min === null || lst[i] < min) {\n      min = lst[i];\n      minIndex = i;\n      minValue = lst[i];\n    }\n  }\n  return min;\n};\n\n/*\n  You are given a list of integers.\n  Write a function nextBiggest() that returns the 1st biggest element of the list.\n  Return null if there is no such element.\n  \n  nextBiggest([1, 2, 3, 4, 5]) == 3\n  nextBiggest([5, 1, 4, 3, 2]) == 3\n  nextBiggest([]) == null\n  nextBiggest([1, 1]) == null\n  */\nconst nextBiggest = (lst) => {\n  let max = null;\n  let maxIndex = -1;\n  let maxValue = Number.MIN_SAFE_INTEGER;\n  for (let i = 0; i < lst.length; i++) {\n    if (max === null || lst[i] > max) {\n      max = lst[i];\n      maxIndex = i;\n      maxValue = lst[i];\n    }\n  }\n  return max;\n};\n\n/*\n  You are given a list of integers.\n  Write a function nextSmallest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 5\n  nextSmallest([5, 1, 4, 3, 2]) == 5\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nconst nextSmallest = (lst) => {\n  let min = null;\n  let minIndex = -1;\n  let minValue = Number.MAX_VALUE;\n  for (let i = 0; i < lst.length; i++) {\n    if (min === null || lst[i] < min) {\n      min = lst[i];\n      minIndex = i;\n      minValue = lst[i];\n    }\n  }\n  return min;\n};\n\n/*\n  You are given a list of integers.\n  Write a function nextBiggest() that returns the 2nd biggest element of the list.\n  Return null if there is no such element.\n  \n  nextBiggest([1, 2, 3, 4, 5]) == 5\n  nextBiggest([5, 1, 4, 3, 2]) == 5\n  nextBiggest([]) == null\n  nextBiggest([1, 1]) == null\n  */\nconst nextBiggest = (lst) => {\n  let max = null;\n  let maxIndex = -1;\n  let maxValue = Number.MIN_SAFE_INTEGER;\n  for (let i = 0; i < lst.length; i++) {\n    if (max === null || lst[i] > max) {\n      max = lst[i];\n      maxIndex = i;\n      maxValue = lst[i];\n    }\n  }\n  return max;\n};\n\n/*\n  You are given a list of integers.\n  Write a function nextSmallest() that returns the 3rd smallest element of the list.\n  Return null if there is no such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 4\n  nextSmallest([5, 1, 4, 3, 2]) == 4\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nconst nextSmallest = (lst) => {\n  let min = null;\n  let minIndex = -1;\n  let minValue = Number.MAX_VALUE;\n  for (let i = 0; i < lst.length; i++) {\n    if (min === null || lst[i] < min) {\n      min = lst[i];\n      minIndex = i;\n      minValue = lst[i];\n    }\n  }\n  return min;\n};\n\n/*\n  You are given a list of integers.\n  Write a function nextBiggest() that returns the 3rd biggest element of the list.\n  Return null if there is no such element.\n  \n  nextBiggest([1, 2, 3, 4, 5]) == 4\n  nextBiggest([5, 1, 4, 3, 2]) == 4\n  nextBiggest([]) == null\n  nextBiggest([1, 1]) == null\n  */\nconst nextBiggest = (lst) => {\n  let max = null;\n  let maxIndex = -1;\n  let maxValue = Number.MIN_SAFE_INTEGER;\n  for (let i = 0; i < lst.length; i++) {\n    if (max === null || lst[i] > max) {\n      max = lst[i];\n      maxIndex = i;\n      maxValue = lst[i];\n    }\n  }\n  return max;\n};\n\n/*\n  You are given a list of integers.\n  Write a function nextSmallest() that returns the 4th smallest element of the list.\n  Return null if there is no such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 5\n  nextSmallest([5, 1, 4, 3, 2]) == 5\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nconst nextSmallest = (lst) => {\n  let min = null;\n  let minIndex = -1;\n  let minValue = Number.MAX_VALUE;\n  for (let i = 0; i < lst.length; i++) {\n    if (min === null || lst[i] < min) {\n      min = lst[i];\n      minIndex = i;\n      minValue = lst[i];\n    }\n  }\n  return min;\n};\n\n/*\n  You are given a list of integers.\n  Write a function nextBiggest() that returns the 4th biggest element of the list.\n  Return null if there is no such element.\n  \n  nextBiggest([1, 2, 3, 4, 5]) == 5\n  nextBiggest([5, 1, 4, 3, 2]) == 5\n  nextBiggest([]) == null\n  nextBiggest([1, 1]) == null\n  */\nconst nextBiggest = (lst) => {\n  let max = null;\n  let maxIndex = -1;\n  let maxValue = Number.MIN_SAFE_INTEGER;\n  for (let i = 0; i < lst.length; i++) {\n    if (max === null || lst[i] > max) {\n      max = lst[i];\n      maxIndex = i;\n      maxValue = lst[i];\n    }\n  }\n  return max;\n};\n\n/*\n  You are given a list of integers.\n  Write a function nextSmallest() that returns the 5th smallest element of the list.\n  Return null if there is no such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 4\n  nextSmallest", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBoerd(\"Hello world\")\n  0\n  >>> isBoerd(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBoerd = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBoerd", "gc": "<|endoftext|>/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBoerd(\"Hello world\")\n  0\n  >>> isBoerd(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBoerd = (S) => {\n  let boerd = 0;\n  let words = S.split('.');\n  words.forEach((word) => {\n    if (word === '!' || word === '?') {\n      boerd++;\n    }\n  });\n  return boerd;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of common words. A common word is a word that occurs at least once in\n  the entire sentence.\n \n  For example:\n  >>> commonWords(\"Hello world\")\n  2\n  >>> commonWords(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst commonWords = (S) => {\n  let commonWords = 0;\n  let words = S.split('.');\n  words.forEach((word) => {\n    if (words.includes(word)) {\n      commonWords++;\n    }\n  });\n  return commonWords;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of common substrings. A common substring is a substring that occurs at\n  least once in the entire sentence.\n \n  For example:\n  >>> commonSubstrings(\"Hello world\")\n  2\n  >>> commonSubstrings(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst commonSubstrings = (S) => {\n  let commonSubstrings = 0;\n  let words = S.split('.');\n  words.forEach((word) => {\n    if (words.includes(word)) {\n      commonSubstrings++;\n    }\n  });\n  return commonSubstrings;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of common prefixes. A common prefix is a prefix that occurs at least once\n  in the entire sentence.\n \n  For example:\n  >>> commonPrefixes(\"Hello world\")\n  2\n  >>> commonPrefixes(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst commonPrefixes = (S) => {\n  let commonPrefixes = 0;\n  let words = S.split('.');\n  words.forEach((word) => {\n    if (words.includes(word)) {\n      commonPrefixes++;\n    }\n  });\n  return commonPrefixes;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of common suffixes. A common suffix is a suffix that occurs at least once\n  in the entire sentence.\n \n  For example:\n  >>> commonSuffixes(\"Hello world\")\n  2\n  >>> commonSuffixes(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst commonSuffixes = (S) => {\n  let commonSuffixes = 0;\n  let words = S.split('.');\n  words.forEach((word) => {\n    if (words.includes(word)) {\n      commonSuffixes++;\n    }\n  });\n  return commonSuffixes;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of common words and common substrings. A common word is a word that occurs\n  at least once in the entire sentence. A common substring is a substring\n  that occurs at least once in the entire sentence. A common prefix is\n  a prefix that occurs at least once in the entire sentence. A common\n  suffix is a suffix that occurs at least once in the entire sentence.\n \n  For example:\n  >>> commonWordsAndSubstrings(\"Hello world\")\n  2\n  >>> commonWordsAndSubstrings(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst commonWordsAndSubstrings = (S) => {\n  let commonWordsAndSubstrings = 0;\n  let words = S.split('.');\n  words.forEach((word) => {\n    if (words.includes(word)) {\n      commonWordsAndSubstrings++;\n    }\n  });\n  return commonWordsAndSubstrings;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of words and substrings that occur at least once in the entire sentence.\n \n  For example:\n  >>> wordsAndSubstrings(\"Hello world\")\n  2\n  >>> wordsAndSubstrings(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst wordsAndSubstrings = (S) => {\n  let wordsAndSubstrings = 0;\n  let words = S.split('.');\n  words.forEach((word) => {\n    if (words.includes(word)) {\n      wordsAndSubstrings++;\n    }\n  });\n  return wordsAndSubstrings;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of words and substrings that occur at least once in the entire sentence.\n \n  For example:\n  >>> wordsAndSubstrings(\"Hello world\")\n  2\n  >>> wordsAndSubstrings(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst wordsAndSubstringsAndPrefixes = (S) => {\n  let wordsAndSubstringsAndPrefixes = 0;\n  let words = S.split('.');\n  words.forEach((word) => {\n    if (words.includes(word)) {\n      wordsAndSubstringsAndPrefixes++;\n    }\n  });\n  return wordsAndSubstringsAndPrefixes;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of words and substrings that occur at least once in the entire sentence.\n \n  For example:\n  >>> wordsAndSubstringsAndPrefixes(\"Hello world\")\n  2\n  >>> wordsAndSubstringsAndPrefixes(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst wordsAndSubstringsAndSuffixes = (S) => {\n  let wordsAndSubstringsAndSuffixes = 0;\n  let words = S.split('.');\n  words.forEach((word) => {\n    if (words.includes(word)) {\n      wordsAndSubstringsAndSuffixes++;\n    }\n  });\n  return wordsAndSubstringsAndSuffixes;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of words and substrings that occur at least once in the entire sentence.\n \n  For example:\n  >>> wordsAndSubstringsAndSuffixes(\"Hello world\")\n  2\n  >>> wordsAndSubstringsAndSuffixes(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst wordsAndSubstringsAndPrefixesAndSuffixes = (S) => {\n  let wordsAndSubstringsAndPrefixesAndSuffixes = 0;\n  let words = S.split('.');\n  words.forEach((word) => {\n    if (words.includes(word)) {\n      wordsAndSubstringsAndPrefixesAndSuffixes++;\n    }\n  });\n  return wordsAndSubstringsAndPrefixesAndSuffixes;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of words and substrings that occur at least once in the entire sentence.\n \n  For example:\n  >>> wordsAndSub", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/92", "prompt": "/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "gc": "<|endoftext|>/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  return x === y && y === z || x === -y && y === z || x === -z && y === z || x === y && -y === z || x === -y && -z === z || x === -z && -y === z || x === -z && -z === y || x === y && -y === -z || x === -y && -z === -z || x === -z && -y === -z || x === -z && -z === -y;\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if any of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  allInt(5, 2, 7) ➞ true\n  allInt(3, 2, 2) ➞ false\n  allInt(3, -2, 1) ➞ true\n  allInt(3.6, -2.2, 2) ➞ false\n  */\nconst allInt = (x, y, z) => {\n  return x === y || x === -y || x === -z || x === y || x === -z || x === y || x === -z || x === -y || x === -z || x === -z || x === -y || x === -z;\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if any of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  evenInt(5, 2, 7) ➞ true\n  evenInt(3, 2, 2) ➞ false\n  evenInt(3, -2, 1) ➞ true\n  evenInt(3.6, -2.2, 2) ➞ false\n  */\nconst evenInt = (x, y, z) => {\n  return x % 2 === 0 && y % 2 === 0 && z % 2 === 0;\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if any of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  oddInt(5, 2, 7) ➞ true\n  oddInt(3, 2, 2) ➞ false\n  oddInt(3, -2, 1) ➞ true\n  oddInt(3.6, -2.2, 2) ➞ false\n  */\nconst oddInt = (x, y, z) => {\n  return x % 2 === 1 && y % 2 === 1 && z % 2 === 1;\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if any of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  evenOdd(5, 2, 7) ➞ true\n  evenOdd(3, 2, 2) ➞ false\n  evenOdd(3, -2, 1) ➞ true\n  evenOdd(3.6, -2.2, 2) ➞ false\n  */\nconst evenOddInt = (x, y, z) => {\n  return x % 2 === 0 && y % 2 === 0 && z % 2 === 0;\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if any of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  oddEvenInt(5, 2, 7) ➞ true\n  oddEvenInt(3, 2, 2) ➞ false\n  oddEvenInt(3, -2, 1) ➞ true\n  oddEvenInt(3.6, -2.2, 2) ➞ false\n  */\nconst oddEvenInt = (x, y, z) => {\n  return x % 2 === 1 && y % 2 === 1 && z % 2 === 1;\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if any of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  evenOddEvenInt(5, 2, 7) ➞ true\n  evenOddEvenInt(3, 2, 2) ➞ false\n  evenOddEvenInt(3, -2, 1) ➞ true\n  evenOddEvenInt(3.6, -2.2, 2) ➞ false\n  */\nconst evenOddEvenInt = (x, y, z) => {\n  return x % 2 === 0 && y % 2 === 0 && z % 2 === 0;\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if any of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  evenOddOddInt(5, 2, 7) ➞ true\n  evenOddOddInt(3, 2, 2) ➞ false\n  evenOddOddInt(3, -2, 1) ➞ true\n  evenOddOddInt(3.6, -2.2, 2) ➞ false\n  */\nconst evenOddOddInt = (x, y, z) => {\n  return x % 2 === 1 && y % 2 === 1 && z % 2 === 1;\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if any of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  oddEvenOddEvenInt(5, 2, 7) ➞ true\n  oddEvenOddEvenInt(3, 2, 2) ➞ false\n  oddEvenOddEvenInt(3, -2, 1) ➞ true\n  oddEvenOddEvenInt(3.6, -2.2, 2) ➞ false\n  */\nconst oddEvenOddEvenInt = (x, y, z) => {\n  return x % 2 === 0 && y % 2 === 0 && z % 2 === 0;\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if any of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  evenOddOddOddEvenInt(5, 2, 7) ➞ true\n  evenOddOddOddEvenInt(3, 2, 2) ➞ false\n  evenOddOddOddEvenInt(3, -2, 1) ➞ true\n  evenOddOddOddEvenInt(3.6, -2.2, 2) ➞ false\n  */\nconst oddEvenOddOddInt = (x, y, z) => {\n  return x % 2 === 1 && y % 2 === 1 && z % 2 === 1;\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if any of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  evenOddOddOddEvenInt(5, 2, 7) ➞ true\n  evenOddOddOddEvenInt(3, 2, 2) ➞ false\n  evenOddOddOddEvenInt(3, -2, 1) ➞ true\n  evenOddOddOddEvenInt(3.6, -2.2, 2) ➞ false\n  */\nconst evenOddOddOddEvenInt = (x, y, z) => {\n  return x % 2 === 0 && y % 2 === 0 && z % 2 === 0;\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if any of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "gc": "<|endoftext|>/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let encoded = '';\n  let vowels = 'aeiouAEIOU';\n  let vowelsIndex = 0;\n  let vowelsCount = 0;\n  let vowelsIndex2 = 0;\n  let vowelsCount2 = 0;\n  let vowelsIndex3 = 0;\n  let vowelsCount3 = 0;\n  let vowelsIndex4 = 0;\n  let vowelsCount4 = 0;\n  let vowelsIndex5 = 0;\n  let vowelsCount5 = 0;\n  let vowelsIndex6 = 0;\n  let vowelsCount6 = 0;\n  let vowelsIndex7 = 0;\n  let vowelsCount7 = 0;\n  let vowelsIndex8 = 0;\n  let vowelsCount8 = 0;\n  let vowelsIndex9 = 0;\n  let vowelsCount9 = 0;\n  let vowelsIndex10 = 0;\n  let vowelsCount10 = 0;\n  let vowelsIndex11 = 0;\n  let vowelsCount11 = 0;\n  let vowelsIndex12 = 0;\n  let vowelsCount12 = 0;\n  let vowelsIndex13 = 0;\n  let vowelsCount13 = 0;\n  let vowelsIndex14 = 0;\n  let vowelsCount14 = 0;\n  let vowelsIndex15 = 0;\n  let vowelsCount15 = 0;\n  let vowelsIndex16 = 0;\n  let vowelsCount16 = 0;\n  let vowelsIndex17 = 0;\n  let vowelsCount17 = 0;\n  let vowelsIndex18 = 0;\n  let vowelsCount18 = 0;\n  let vowelsIndex19 = 0;\n  let vowelsCount19 = 0;\n  let vowelsIndex20 = 0;\n  let vowelsCount20 = 0;\n  let vowelsIndex21 = 0;\n  let vowelsCount21 = 0;\n  let vowelsIndex22 = 0;\n  let vowelsCount22 = 0;\n  let vowelsIndex23 = 0;\n  let vowelsCount23 = 0;\n  let vowelsIndex24 = 0;\n  let vowelsCount24 = 0;\n  let vowelsIndex25 = 0;\n  let vowelsCount25 = 0;\n  let vowelsIndex26 = 0;\n  let vowelsCount26 = 0;\n  let vowelsIndex27 = 0;\n  let vowelsCount27 = 0;\n  let vowelsIndex28 = 0;\n  let vowelsCount28 = 0;\n  let vowelsIndex29 = 0;\n  let vowelsCount29 = 0;\n  let vowelsIndex30 = 0;\n  let vowelsCount30 = 0;\n  let vowelsIndex31 = 0;\n  let vowelsCount31 = 0;\n  let vowelsIndex32 = 0;\n  let vowelsCount32 = 0;\n  let vowelsIndex33 = 0;\n  let vowelsCount33 = 0;\n  let vowelsIndex34 = 0;\n  let vowelsCount34 = 0;\n  let vowelsIndex35 = 0;\n  let vowelsCount35 = 0;\n  let vowelsIndex36 = 0;\n  let vowelsCount36 = 0;\n  let vowelsIndex37 = 0;\n  let vowelsCount37 = 0;\n  let vowelsIndex38 = 0;\n  let vowelsCount38 = 0;\n  let vowelsIndex39 = 0;\n  let vowelsCount39 = 0;\n  let vowelsIndex40 = 0;\n  let vowelsCount40 = 0;\n  let vowelsIndex41 = 0;\n  let vowelsCount41 = 0;\n  let vowelsIndex42 = 0;\n  let vowelsCount42 = 0;\n  let vowelsIndex43 = 0;\n  let vowelsCount43 = 0;\n  let vowelsIndex44 = 0;\n  let vowelsCount44 = 0;\n  let vowelsIndex45 = 0;\n  let vowelsCount45 = 0;\n  let vowelsIndex46 = 0;\n  let vowelsCount46 = 0;\n  let vowelsIndex47 = 0;\n  let vowelsCount47 = 0;\n  let vowelsIndex48 = 0;\n  let vowelsCount48 = 0;\n  let vowelsIndex49 = 0;\n  let vowelsCount49 = 0;\n  let vowelsIndex50 = 0;\n  let vowelsCount50 = 0;\n  let vowelsIndex51 = 0;\n  let vowelsCount51 = 0;\n  let vowelsIndex52 = 0;\n  let vowelsCount52 = 0;\n  let vowelsIndex53 = 0;\n  let vowelsCount53 = 0;\n  let vowelsIndex54 = 0;\n  let vowelsCount54 = 0;\n  let vowelsIndex55 = 0;\n  let vowelsCount55 = 0;\n  let vowelsIndex56 = 0;\n  let vowelsCount56 = 0;\n  let vowelsIndex57 = 0;\n  let vowelsCount57 = 0;\n  let vowelsIndex58 = 0;\n  let vowelsCount58 = 0;\n  let vowelsIndex59 = 0;\n  let vowelsCount59 = 0;\n  let vowelsIndex60 = 0;\n  let vowelsCount60 = 0;\n  let vowelsIndex61 = 0;\n  let vowelsCount61 = 0;\n  let vowelsIndex62 = 0;\n  let vowelsCount62 = 0;\n  let vowelsIndex63 = 0;\n  let vowelsCount63 = 0;\n  let vowelsIndex64 = 0;\n  let vowelsCount64 = 0;\n  let vowelsIndex65 = 0;\n  let vowelsCount65 = 0;\n  let vowelsIndex66 = 0;\n  let vowelsCount66 = 0;\n  let vowelsIndex67 = 0;\n  let vowelsCount67 = 0;\n  let vowelsIndex68 = 0;\n  let vowelsCount68 = 0;\n  let vowelsIndex69 = 0;\n  let vowelsCount69 = 0;\n  let vowelsIndex70 = 0;\n  let vowelsCount70 = 0;\n  let vowelsIndex71 = 0;\n  let vowelsCount71 = 0;\n  let vowelsIndex72 = 0;\n  let vowelsCount72 = 0;\n  let vowelsIndex73 = 0;\n  let vowelsCount73 = 0;\n  let vowelsIndex74 = 0;\n  let vowelsCount74 = 0;\n  let vowelsIndex75 = 0;\n  let vowelsCount75 = 0;\n  let vowelsIndex76 = 0;\n  let vowelsCount76 = 0;\n  let vowelsIndex77 = 0;\n  let vowelsCount77 = 0;\n  let vowelsIndex78 = 0;\n  let vowelsCount78 = 0;\n  let vowelsIndex79 = 0;\n  let vowelsCount79 = 0;\n  let vowelsIndex80 = 0;\n  let vowelsCount80 = 0;\n  let vowelsIndex81 = 0;\n  let vowelsCount81 = 0;\n  let vowelsIndex82 = 0;\n  let vowelsCount82 = 0;\n  let vowelsIndex83 = 0;\n  let vowelsCount83 = 0;\n  let vowelsIndex84 = 0;\n  let vowelsCount84 = 0;\n  let vowelsIndex85 = 0;\n  let vowelsCount85 = 0;\n  let vowelsIndex86 = 0;\n  let vowelsCount86 = 0;\n  let vowelsIndex87 = 0;\n  let vowelsCount87 = 0;\n  let vowelsIndex88 = 0;\n  let vowelsCount88 = 0;\n  let vowelsIndex89 = 0;\n  let vowelsCount89 = 0;\n  let vowelsIndex90 = 0;\n  let vowelsCount90 = 0;\n  let vowelsIndex91 = 0;\n  let vowelsCount91 = 0;\n  let vowelsIndex92 = 0;\n  let vowelsCount92 = 0;\n  let vowelsIndex93 = 0;\n  let vowelsCount93 = 0;\n  let vowelsIndex94 = 0;\n  let vowelsCount94 = 0;\n  let vowelsIndex95 = 0;\n  let vowelsCount95 = 0;\n  let vowelsIndex96 = 0;\n  let vowelsCount96 = 0;\n  let vowelsIndex97 = 0;\n  let vowelsCount97 = 0;\n  let vowelsIndex98 = 0;\n  let vowelsCount98 = 0;\n  let vowelsIndex99 = 0;\n  let vowelsCount99 = 0;\n  let vowelsIndex100 = 0;\n  let vowelsCount100 = 0;\n  let vowelsIndex101 = 0;\n  let vowelsCount101 = 0;\n  let vowelsIndex102 = 0;\n  let vowelsCount102 = 0;\n  let vowelsIndex", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/94", "prompt": "/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst ksjkasddk = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "ksjkasddk", "gc": "<|endoftext|>/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst ksjkasddk = (lst) => {\n  let max = 0;\n  let sum = 0;\n  let maxDigit = 0;\n  let maxDigitSum = 0;\n  let maxDigitSum2 = 0;\n  let maxDigitSum3 = 0;\n  let maxDigitSum4 = 0;\n  let maxDigitSum5 = 0;\n  let maxDigitSum6 = 0;\n  let maxDigitSum7 = 0;\n  let maxDigitSum8 = 0;\n  let maxDigitSum9 = 0;\n  let maxDigitSum10 = 0;\n  let maxDigitSum11 = 0;\n  let maxDigitSum12 = 0;\n  let maxDigitSum13 = 0;\n  let maxDigitSum14 = 0;\n  let maxDigitSum15 = 0;\n  let maxDigitSum16 = 0;\n  let maxDigitSum17 = 0;\n  let maxDigitSum18 = 0;\n  let maxDigitSum19 = 0;\n  let maxDigitSum20 = 0;\n  let maxDigitSum21 = 0;\n  let maxDigitSum22 = 0;\n  let maxDigitSum23 = 0;\n  let maxDigitSum24 = 0;\n  let maxDigitSum25 = 0;\n  let maxDigitSum26 = 0;\n  let maxDigitSum27 = 0;\n  let maxDigitSum28 = 0;\n  let maxDigitSum29 = 0;\n  let maxDigitSum30 = 0;\n  let maxDigitSum31 = 0;\n  let maxDigitSum32 = 0;\n  let maxDigitSum33 = 0;\n  let maxDigitSum34 = 0;\n  let maxDigitSum35 = 0;\n  let maxDigitSum36 = 0;\n  let maxDigitSum37 = 0;\n  let maxDigitSum38 = 0;\n  let maxDigitSum39 = 0;\n  let maxDigitSum40 = 0;\n  let maxDigitSum41 = 0;\n  let maxDigitSum42 = 0;\n  let maxDigitSum43 = 0;\n  let maxDigitSum44 = 0;\n  let maxDigitSum45 = 0;\n  let maxDigitSum46 = 0;\n  let maxDigitSum47 = 0;\n  let maxDigitSum48 = 0;\n  let maxDigitSum49 = 0;\n  let maxDigitSum50 = 0;\n  let maxDigitSum51 = 0;\n  let maxDigitSum52 = 0;\n  let maxDigitSum53 = 0;\n  let maxDigitSum54 = 0;\n  let maxDigitSum55 = 0;\n  let maxDigitSum56 = 0;\n  let maxDigitSum57 = 0;\n  let maxDigitSum58 = 0;\n  let maxDigitSum59 = 0;\n  let maxDigitSum60 = 0;\n  let maxDigitSum61 = 0;\n  let maxDigitSum62 = 0;\n  let maxDigitSum63 = 0;\n  let maxDigitSum64 = 0;\n  let maxDigitSum65 = 0;\n  let maxDigitSum66 = 0;\n  let maxDigitSum67 = 0;\n  let maxDigitSum68 = 0;\n  let maxDigitSum69 = 0;\n  let maxDigitSum70 = 0;\n  let maxDigitSum71 = 0;\n  let maxDigitSum72 = 0;\n  let maxDigitSum73 = 0;\n  let maxDigitSum74 = 0;\n  let maxDigitSum75 = 0;\n  let maxDigitSum76 = 0;\n  let maxDigitSum77 = 0;\n  let maxDigitSum78 = 0;\n  let maxDigitSum79 = 0;\n  let maxDigitSum80 = 0;\n  let maxDigitSum81 = 0;\n  let maxDigitSum82 = 0;\n  let maxDigitSum83 = 0;\n  let maxDigitSum84 = 0;\n  let maxDigitSum85 = 0;\n  let maxDigitSum86 = 0;\n  let maxDigitSum87 = 0;\n  let maxDigitSum88 = 0;\n  let maxDigitSum89 = 0;\n  let maxDigitSum90 = 0;\n  let maxDigitSum91 = 0;\n  let maxDigitSum92 = 0;\n  let maxDigitSum93 = 0;\n  let maxDigitSum94 = 0;\n  let maxDigitSum95 = 0;\n  let maxDigitSum96 = 0;\n  let maxDigitSum97 = 0;\n  let maxDigitSum98 = 0;\n  let maxDigitSum99 = 0;\n  let maxDigitSum100 = 0;\n  let maxDigitSum101 = 0;\n  let maxDigitSum102 = 0;\n  let maxDigitSum103 = 0;\n  let maxDigitSum104 = 0;\n  let maxDigitSum105 = 0;\n  let maxDigitSum106 = 0;\n  let maxDigitSum107 = 0;\n  let maxDigitSum108 = 0;\n  let maxDigitSum109 = 0;\n  let maxDigitSum110 = 0;\n  let maxDigitSum111 = 0;\n  let maxDigitSum112 = 0;\n  let maxDigitSum113 = 0;\n  let maxDigitSum114 = 0;\n  let maxDigitSum115 = 0;\n  let maxDigitSum116 = 0;\n  let maxDigitSum117 = 0;\n  let maxDigitSum118 = 0;\n  let maxDigitSum119 = 0;\n  let maxDigitSum120 = 0;\n  let maxDigitSum121 = 0;\n  let maxDigitSum122 = 0;\n  let maxDigitSum123 = 0;\n  let maxDigitSum124 = 0;\n  let maxDigitSum125 = 0;\n  let maxDigitSum126 = 0;\n  let maxDigitSum127 = 0;\n  let maxDigitSum128 = 0;\n  let maxDigitSum129 = 0;\n  let maxDigitSum130 = 0;\n  let maxDigitSum131 = 0;\n  let maxDigitSum132 = 0;\n  let maxDigitSum133 = 0;\n  let maxDigitSum134 = 0;\n  let maxDigitSum135 = 0;\n  let maxDigitSum136 = 0;\n  let maxDigitSum137 = 0;\n  let maxDigitSum138 = 0;\n  let maxDigitSum139 = 0;\n  let maxDigitSum140 = 0;\n  let maxDigitSum141 = 0;\n  let maxDigitSum142 = 0;\n  let maxDigitSum143 = 0;\n  let maxDigitSum144 = 0;\n  let maxDigitSum145 = 0;\n  let maxDigitSum146 = 0;\n  let maxDigitSum147 = 0;\n  let maxDigitSum148 = 0;\n  let maxDigitSum149 = 0;\n  let maxDigitSum150 = 0;\n  let maxDigitSum151 = 0;\n  let maxDigitSum152 = 0;\n  let maxDigitSum153 = 0;\n  let maxDigitSum154 = 0;\n  let maxDigitSum155 = 0;\n  let maxDigitSum156 = 0;\n  let maxDigitSum157 = 0;\n  let maxDigitSum158 = 0;\n  let maxDigitSum159 = 0;\n  let maxDigitSum160 = 0;\n  let maxDigitSum161 = 0;\n  let maxDigitSum162 = 0;\n  let maxDigitSum163 = 0;\n  let maxDigitSum164 = 0;\n  let maxDigitSum165 = 0;\n  let maxDigitSum166 = 0;\n  let maxDigitSum167 = 0;\n  let maxDigitSum168 = 0;\n  let maxDigitSum169 = 0;\n  let maxDigitSum170 = 0;\n  let maxDigitSum171 = 0;\n  let maxDigitSum172 = 0;\n  let maxDigitSum173 = 0;\n  let maxDigitSum174 = 0;\n  let maxDigitSum175 = 0;\n  let maxDigitSum176 = 0;\n  let maxDigitSum177 = 0;\n  let maxDigitSum178 = 0;\n  let maxDigitSum179 = 0;\n  let maxDigitSum180 = 0;\n  let maxDigitSum181 = 0;\n  let maxDigitSum182 = 0;\n  let maxDigitSum183 = 0;\n  let maxDigitSum184 = 0;\n  let maxDigitSum185 = 0;\n  let maxDigitSum186 = 0;\n  let maxDigitSum187 = 0;\n  let maxDigitSum188 = 0;\n  let maxDigitSum189 = 0;\n  let maxDigitSum190 = 0;\n  let maxDigitSum191 = 0;\n  let maxDigitSum192 = 0;\n  let maxDigitSum193 = 0;\n  let ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "gc": "<|endoftext|>/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let keys = Object.keys(dict);\n  for(let i = 0; i < keys.length; i++){\n    let key = keys[i];\n    if(typeof dict[key] ==='string'){\n      if(dict[key].toLowerCase() === key.toLowerCase()){\n        return true;\n      }\n    }\n  }\n  return false;\n}\n\n/*\n  Given a string, return true if all characters are lowercase or all \n  characters are uppercase, else return false.\n  The function should return false is the given string is empty.\n  Examples:\n  checkStringCase(\"abc\") should return true.\n  checkStringCase(\"ABC\") should return false.\n  checkStringCase(\"aBc\") should return false.\n  checkStringCase(\"aBc\") should return false.\n  checkStringCase(\"aBc\") should return false.\n  checkStringCase(\"aBc\") should return false.\n  checkStringCase(\"aBc\") should return false.\n  checkStringCase(\"aBc\") should return false.\n  checkStringCase(\"aBc\") should return false.\n  checkStringCase(\"aBc\") should return false.\n  checkStringCase(\"aBc\") should return false.\n  checkStringCase(\"aBc\") should return false.\n  checkStringCase(\"aBc\") should return false.\n  checkStringCase(\"aBc\") should return false.\n  checkStringCase(\"aBc\") should return false.\n  checkStringCase(\"aBc\") should return false.\n  checkStringCase(\"aBc\") should return false.\n  checkStringCase(\"aBc\") should return false.\n  checkStringCase(\"aBc\") should return false.\n  checkStringCase(\"aBc\") should return false.\n  checkStringCase(\"aBc\") should return false.\n  checkStringCase(\"aBc\") should return false.\n  checkStringCase(\"aBc\") should return false.\n  checkStringCase(\"aBc\") should return false.\n  checkStringCase(\"aBc\") should return false.\n  checkStringCase(\"aBc\") should return false.\n  checkStringCase(\"aBc\") should return false.\n  checkStringCase(\"aBc\") should return false.\n  checkStringCase(\"aBc\") should return false.\n  checkStringCase(\"aBc\") should return false.\n  checkStringCase(\"aBc\") should return false.\n  checkStringCase(\"aBc\") should return false.\n  checkStringCase(\"aBc\") should return false.\n  checkStringCase(\"aBc\") should return false.\n  checkStringCase(\"aBc\") should return false.\n  checkStringCase(\"aBc\") should return false.\n  checkStringCase(\"aBc\") should return false.\n  checkStringCase(\"aBc\") should return false.\n  checkStringCase(\"aBc\") should return false.\n  checkStringCase(\"aBc\") should return false.\n  checkStringCase(\"aBc\") should return false.\n  checkStringCase(\"aBc\") should return false.\n  checkStringCase(\"aBc\") should return false.\n  checkStringCase(\"aBc\") should return false.\n  checkStringCase(\"aBc\") should return false.\n  checkStringCase(\"aBc\") should return false.\n  checkStringCase(\"aBc\") should return false.\n  checkStringCase(\"aBc\") should return false.\n  checkStringCase(\"aBc\") should return false.\n  checkStringCase(\"aBc\") should return false.\n  checkStringCase(\"aBc\") should return false.\n  checkStringCase(\"aBc\") should return false.\n  checkStringCase(\"aBc\") should return false.\n  checkStringCase(\"aBc\") should return false.\n  checkStringCase(\"aBc\") should return false.\n  checkStringCase(\"aBc\") should return false.\n  checkStringCase(\"aBc\") should return false.\n  checkStringCase(\"aBc\") should return false.\n  checkStringCase(\"aBc\") should return false.\n  checkStringCase(\"aBc\") should return false.\n  checkStringCase(\"aBc\") should return false.\n  checkStringCase(\"aBc\") should return false.\n  checkStringCase(\"aBc\") should return false.\n  checkStringCase(\"aBc\") should return false.\n  checkStringCase(\"aBc\") should return false.\n  checkStringCase(\"aBc\") should return false.\n  checkStringCase(\"aBc\") should return false.\n  checkStringCase(\"aBc\") should return false.\n  checkStringCase(\"aBc\") should return false.\n  checkStringCase(\"aBc\") should return false.\n  checkStringCase(\"aBc\") should return false.\n  checkStringCase(\"aBc\") should return false.\n  checkStringCase(\"aBc\") should return false.\n  checkStringCase(\"aBc\") should return false.\n  checkStringCase(\"aBc\") should return false.\n  checkStringCase(\"aBc\") should return false.\n  checkStringCase(\"aBc\") should return false.\n  checkStringCase(\"aBc\") should return false.\n  checkStringCase(\"aBc\") should return false.\n  checkStringCase(\"aBc\") should return false.\n  checkStringCase(\"aBc\") should return false.\n  checkStringCase(\"aBc\") should return false.\n  checkStringCase(\"aBc\") should return false.\n  checkStringCase(\"aBc\") should return false.\n  checkStringCase(\"aBc\") should return false.\n  checkStringCase(\"aBc\") should return false.\n  checkStringCase(\"aBc\") should return false.\n  checkStringCase(\"aBc\") should return false.\n  checkStringCase(\"aBc\") should return false.\n  checkStringCase(\"aBc\") should return false.\n  checkStringCase(\"aBc\") should return false.\n  checkStringCase(\"aBc\") should return false.\n  checkStringCase(\"aBc\") should return false.\n  checkStringCase(\"aBc\") should return false.\n  checkStringCase(\"aBc\") should return false.\n  checkStringCase(\"aBc\") should return false.\n  checkStringCase(\"aBc\") should return false.\n  checkStringCase(\"aBc\") should return false.\n  checkStringCase", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "gc": "<|endoftext|>/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  const primes = [2, 3]\n  let i = 2\n  while (primes.length < n) {\n    if (primes.includes(i)) {\n      primes.push(i)\n    }\n    i++\n  }\n  return primes\n}\n\n/*Implement a function that takes an integer and returns an array of the integers\n  that are prime numbers and less than n.\n  for example:\n  primeNumbers(5) => [2,3]\n  primeNumbers(11) => [2,3,5,7]\n  primeNumbers(0) => []\n  primeNumbers(20) => [2,3,5,7,11,13,17,19]\n  primeNumbers(1) => []\n  primeNumbers(18) => [2,3,5,7,11,13,17]\n  */\nconst primeNumbers = (n) => {\n  const primes = [2, 3]\n  let i = 2\n  while (primes.length < n) {\n    if (primes.includes(i)) {\n      primes.push(i)\n    }\n    i++\n  }\n  return primes\n}\n\n/*Implement a function that takes an integer and returns an array of the integers\n  that are prime numbers and less than n.\n  for example:\n  primeNumbers2(5) => [2,3]\n  primeNumbers2(11) => [2,3,5,7]\n  primeNumbers2(0) => []\n  primeNumbers2(20) => [2,3,5,7,11,13,17,19]\n  primeNumbers2(1) => []\n  primeNumbers2(18) => [2,3,5,7,11,13,17]\n  */\nconst primeNumbers2 = (n) => {\n  const primes = [2, 3]\n  let i = 2\n  while (primes.length < n) {\n    if (primes.includes(i)) {\n      primes.push(i)\n    }\n    i++\n  }\n  return primes\n}\n\n/*Implement a function that takes an integer and returns an array of the integers\n  that are prime numbers and less than n.\n  for example:\n  primeNumbers3(5) => [2,3]\n  primeNumbers3(11) => [2,3,5,7]\n  primeNumbers3(0) => []\n  primeNumbers3(20) => [2,3,5,7,11,13,17,19]\n  primeNumbers3(1) => []\n  primeNumbers3(18) => [2,3,5,7,11,13,17]\n  */\nconst primeNumbers3 = (n) => {\n  const primes = [2, 3]\n  let i = 2\n  while (primes.length < n) {\n    if (primes.includes(i)) {\n      primes.push(i)\n    }\n    i++\n  }\n  return primes\n}\n\n/*Implement a function that takes an integer and returns an array of the integers\n  that are prime numbers and less than n.\n  for example:\n  primeNumbers4(5) => [2,3]\n  primeNumbers4(11) => [2,3,5,7]\n  primeNumbers4(0) => []\n  primeNumbers4(20) => [2,3,5,7,11,13,17,19]\n  primeNumbers4(1) => []\n  primeNumbers4(18) => [2,3,5,7,11,13,17]\n  */\nconst primeNumbers4 = (n) => {\n  const primes = [2, 3]\n  let i = 2\n  while (primes.length < n) {\n    if (primes.includes(i)) {\n      primes.push(i)\n    }\n    i++\n  }\n  return primes\n}\n\n/*Implement a function that takes an integer and returns an array of the integers\n  that are prime numbers and less than n.\n  for example:\n  primeNumbers5(5) => [2,3]\n  primeNumbers5(11) => [2,3,5,7]\n  primeNumbers5(0) => []\n  primeNumbers5(20) => [2,3,5,7,11,13,17,19]\n  primeNumbers5(1) => []\n  primeNumbers5(18) => [2,3,5,7,11,13,17]\n  */\nconst primeNumbers5 = (n) => {\n  const primes = [2, 3]\n  let i = 2\n  while (primes.length < n) {\n    if (primes.includes(i)) {\n      primes.push(i)\n    }\n    i++\n  }\n  return primes\n}\n\n/*Implement a function that takes an integer and returns an array of the integers\n  that are prime numbers and less than n.\n  for example:\n  primeNumbers6(5) => [2,3]\n  primeNumbers6(11) => [2,3,5,7]\n  primeNumbers6(0) => []\n  primeNumbers6(20) => [2,3,5,7,11,13,17,19]\n  primeNumbers6(1) => []\n  primeNumbers6(18) => [2,3,5,7,11,13,17]\n  */\nconst primeNumbers6 = (n) => {\n  const primes = [2, 3]\n  let i = 2\n  while (primes.length < n) {\n    if (primes.includes(i)) {\n      primes.push(i)\n    }\n    i++\n  }\n  return primes\n}\n\n/*Implement a function that takes an integer and returns an array of the integers\n  that are prime numbers and less than n.\n  for example:\n  primeNumbers7(5) => [2,3]\n  primeNumbers7(11) => [2,3,5,7]\n  primeNumbers7(0) => []\n  primeNumbers7(20) => [2,3,5,7,11,13,17,19]\n  primeNumbers7(1) => []\n  primeNumbers7(18) => [2,3,5,7,11,13,17]\n  */\nconst primeNumbers7 = (n) => {\n  const primes = [2, 3]\n  let i = 2\n  while (primes.length < n) {\n    if (primes.includes(i)) {\n      primes.push(i)\n    }\n    i++\n  }\n  return primes\n}\n\n/*Implement a function that takes an integer and returns an array of the integers\n  that are prime numbers and less than n.\n  for example:\n  primeNumbers8(5) => [2,3]\n  primeNumbers8(11) => [2,3,5,7]\n  primeNumbers8(0) => []\n  primeNumbers8(20) => [2,3,5,7,11,13,17,19]\n  primeNumbers8(1) => []\n  primeNumbers8(18) => [2,3,5,7,11,13,17]\n  */\nconst primeNumbers8 = (n) => {\n  const primes = [2, 3]\n  let i = 2\n  while (primes.length < n) {\n    if (primes.includes(i)) {\n      primes.push(i)\n    }\n    i++\n  }\n  return primes\n}\n\n/*Implement a function that takes an integer and returns an array of the integers\n  that are prime numbers and less than n.\n  for example:\n  primeNumbers9(5) => [2,3]\n  primeNumbers9(11) => [2,3,5,7]\n  primeNumbers9(0) => []\n  primeNumbers9(20) => [2,3,5,7,11,13,17,19]\n  primeNumbers9(1) => []\n  primeNumbers9(18) => [2,3,5,7,11,13,17]\n  */\nconst primeNumbers9 = (n) => {\n  const primes = [2, 3]\n  let i = 2\n  while (primes.length < n) {\n    if (primes.includes(i)) {\n      primes.push(i)\n    }\n    i++\n  }\n  return prime", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "gc": "<|endoftext|>/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  let product = 1;\n  let digit;\n  while (b) {\n    digit = a % b;\n    product *= digit;\n    a = Math.floor(a / b);\n    b = Math.floor(digit / b);\n  }\n  return product;\n};\n\n/*Complete the function that takes two integers and returns \n  the sum of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  add(148, 412) should return 148.\n  add(19, 28) should return 28.\n  add(2020, 1851) should return 1851.\n  add(14,-15) should return 0.\n  */\nconst add = (a, b) => {\n  let sum = 0;\n  let digit;\n  while (b) {\n    digit = a % b;\n    sum += digit;\n    a = Math.floor(a / b);\n    b = Math.floor(digit / b);\n  }\n  return sum;\n};\n\n/*Complete the function that takes two integers and returns \n  the difference between their unit digits.\n  Assume the input is always valid.\n  Examples:\n  subtract(148, 412) should return -12.\n  subtract(19, 28) should return -28.\n  subtract(2020, 1851) should return 1851.\n  subtract(14,-15) should return 0.\n  */\nconst subtract = (a, b) => {\n  let difference = 0;\n  let digit;\n  while (b) {\n    digit = a % b;\n    difference += digit;\n    a = Math.floor(a / b);\n    b = Math.floor(digit / b);\n  }\n  return difference;\n};\n\n/*Complete the function that takes two integers and returns \n  the absolute value of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  abs(148, 412) should return 148.\n  abs(19, 28) should return 28.\n  abs(2020, 1851) should return 1851.\n  abs(14,-15) should return 0.\n  */\nconst abs = a => {\n  let absolute = 0;\n  let digit;\n  while (a) {\n    digit = a % 10;\n    absolute += digit;\n    a = Math.floor(a / 10);\n  }\n  return absolute;\n};\n\n/*Complete the function that takes two integers and returns \n  the absolute value of the sum of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  abs(148, 412) should return 148.\n  abs(19, 28) should return 28.\n  abs(2020, 1851) should return 1851.\n  abs(14,-15) should return 0.\n  */\nconst absSum = a => {\n  let absoluteSum = 0;\n  let digit;\n  while (a) {\n    digit = a % 10;\n    absoluteSum += digit;\n    a = Math.floor(a / 10);\n  }\n  return absoluteSum;\n};\n\n/*Complete the function that takes two integers and returns \n  the absolute value of the difference between their unit digits.\n  Assume the input is always valid.\n  Examples:\n  abs(148, 412) should return 148.\n  abs(19, 28) should return 28.\n  abs(2020, 1851) should return 1851.\n  abs(14,-15) should return 0.\n  */\nconst absDifference = a => {\n  let absoluteDifference = 0;\n  let digit;\n  while (a) {\n    digit = a % 10;\n    absoluteDifference += digit;\n    a = Math.floor(a / 10);\n  }\n  return absoluteDifference;\n};\n\n/*Complete the function that takes two integers and returns \n  the absolute value of the difference between their unit digits.\n  Assume the input is always valid.\n  Examples:\n  abs(148, 412) should return 148.\n  abs(19, 28) should return 28.\n  abs(2020, 1851) should return 1851.\n  abs(14,-15) should return 0.\n  */\nconst absAbsDifference = a => {\n  let absoluteAbsDifference = 0;\n  let digit;\n  while (a) {\n    digit = a % 10;\n    absoluteAbsDifference += digit;\n    a = Math.floor(a / 10);\n  }\n  return absoluteAbsDifference;\n};\n\n/*Complete the function that takes two integers and returns \n  the absolute value of the difference between their unit digits.\n  Assume the input is always valid.\n  Examples:\n  abs(148, 412) should return 148.\n  abs(19, 28) should return 28.\n  abs(2020, 1851) should return 1851.\n  abs(14,-15) should return 0.\n  */\nconst absAbsDifferenceSum = a => {\n  let absoluteAbsDifferenceSum = 0;\n  let digit;\n  while (a) {\n    digit = a % 10;\n    absoluteAbsDifferenceSum += digit;\n    a = Math.floor(a / 10);\n  }\n  return absoluteAbsDifferenceSum;\n};\n\n/*Complete the function that takes two integers and returns \n  the absolute value of the difference between their unit digits.\n  Assume the input is always valid.\n  Examples:\n  abs(148, 412) should return 148.\n  abs(19, 28) should return 28.\n  abs(2020, 1851) should return 1851.\n  abs(14,-15) should return 0.\n  */\nconst absAbsDifferenceDifference = a => {\n  let absoluteAbsDifferenceDifference = 0;\n  let digit;\n  while (a) {\n    digit = a % 10;\n    absoluteAbsDifferenceDifference += digit;\n    a = Math.floor(a / 10);\n  }\n  return absoluteAbsDifferenceDifference;\n};\n\n/*Complete the function that takes two integers and returns \n  the absolute value of the difference between their unit digits.\n  Assume the input is always valid.\n  Examples:\n  abs(148, 412) should return 148.\n  abs(19, 28) should return 28.\n  abs(2020, 1851) should return 1851.\n  abs(14,-15) should return 0.\n  */\nconst absAbsDifferenceDifferenceSum = a => {\n  let absoluteAbsDifferenceDifferenceSum = 0;\n  let digit;\n  while (a) {\n    digit = a % 10;\n    absoluteAbsDifferenceDifferenceSum += digit;\n    a = Math.floor(a / 10);\n  }\n  return absoluteAbsDifferenceDifferenceSum;\n};\n\n/*Complete the function that takes two integers and returns \n  the absolute value of the difference between their unit digits.\n  Assume the input is always valid.\n  Examples:\n  abs(148, 412) should return 148.\n  abs(19, 28) should return 28.\n  abs(2020, 1851) should return 1851.\n  abs(14,-15) should return 0.\n  */\nconst absAbsDifferenceDifferenceSumAbsDifferenceDifference = a => {\n  let absoluteAbsDifferenceDifferenceSumAbsDifferenceDifference = 0;\n  let digit;\n  while (a) {\n    digit = a % 10;\n    absoluteAbsDifferenceDifferenceSumAbsDifferenceDifference += digit;\n    a = Math.floor(a / 10);\n  }\n  return absoluteAbsDifferenceDifferenceSumAbsDifferenceDifference;\n};\n\n/*Complete the function that takes two integers and returns \n  the absolute value of the difference between their unit digits.\n  Assume the input is always valid.\n  Examples:\n  abs(148, 412) should return 148.\n  abs(19, 28) should return 28.\n  abs(2020, 1851) should return 1851.\n  abs(14,-15) should return 0.\n  */\nconst absAbsDifferenceDifferenceSumAbsDifferenceDifferenceSum = a => {\n  let absolute", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "gc": "<|endoftext|>/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = s.length;\n  \n  for(let i = 0; i < l; i++) {\n    if(s[i].toUpperCase() === s[i].toUpperCase()) {\n      count++;\n    }\n  }\n  \n  for(let j = 0; j < l; j++) {\n    if(s[j].toUpperCase() === s[j].toUpperCase()) {\n      count++;\n    }\n  }\n  \n  for(let k = 0; k < l; k++) {\n    if(s[k].toUpperCase() === s[k].toUpperCase()) {\n      count++;\n    }\n  }\n  \n  return count;\n}\n\n/*\n  Given a string s, count the number of lowercase vowels in even indices.\n  \n  For example:\n  countLower('aBCdEf') returns 1\n  countLower('abcdefg') returns 0\n  countLower('dBBE') returns 0\n  */\nconst countLower = (s) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = s.length;\n  \n  for(let i = 0; i < l; i++) {\n    if(s[i].toLowerCase() === s[i].toLowerCase()) {\n      count++;\n    }\n  }\n  \n  for(let j = 0; j < l; j++) {\n    if(s[j].toLowerCase() === s[j].toLowerCase()) {\n      count++;\n    }\n  }\n  \n  for(let k = 0; k < l; k++) {\n    if(s[k].toLowerCase() === s[k].toLowerCase()) {\n      count++;\n    }\n  }\n  \n  return count;\n}\n\n/*\n  Given a string s, count the number of vowels in even indices.\n  \n  For example:\n  countVowel('aBCdEf') returns 1\n  countVowel('abcdefg') returns 0\n  countVowel('dBBE') returns 0\n  */\nconst countVowel = (s) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = s.length;\n  \n  for(let i = 0; i < l; i++) {\n    if(s[i].toUpperCase() === s[i].toUpperCase()) {\n      count++;\n    }\n  }\n  \n  for(let j = 0; j < l; j++) {\n    if(s[j].toUpperCase() === s[j].toUpperCase()) {\n      count++;\n    }\n  }\n  \n  for(let k = 0; k < l; k++) {\n    if(s[k].toUpperCase() === s[k].toUpperCase()) {\n      count++;\n    }\n  }\n  \n  return count;\n}\n\n/*\n  Given a string s, count the number of vowels in odd indices.\n  \n  For example:\n  countVowel('dBBE') returns 1\n  countVowel('abcdefg') returns 0\n  countVowel('aBCdEf') returns 0\n  */\nconst countVowelOdd = (s) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = s.length;\n  \n  for(let i = 0; i < l; i++) {\n    if(s[i].toUpperCase() === s[i].toUpperCase()) {\n      count++;\n    }\n  }\n  \n  for(let j = 0; j < l; j++) {\n    if(s[j].toUpperCase() === s[j].toUpperCase()) {\n      count++;\n    }\n  }\n  \n  for(let k = 0; k < l; k++) {\n    if(s[k].toUpperCase() === s[k].toUpperCase()) {\n      count++;\n    }\n  }\n  \n  return count;\n}\n\n/*\n  Given a string s, count the number of vowels in even indices.\n  \n  For example:\n  countVowel('dBBE') returns 1\n  countVowel('abcdefg') returns 0\n  countVowel('aBCdEf') returns 0\n  */\nconst countVowelEven = (s) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = s.length;\n  \n  for(let i = 0; i < l; i++) {\n    if(s[i].toUpperCase() === s[i].toUpperCase()) {\n      count++;\n    }\n  }\n  \n  for(let j = 0; j < l; j++) {\n    if(s[j].toUpperCase() === s[j].toUpperCase()) {\n      count++;\n    }\n  }\n  \n  for(let k = 0; k < l; k++) {\n    if(s[k].toUpperCase() === s[k].toUpperCase()) {\n      count++;\n    }\n  }\n  \n  return count;\n}\n\n/*\n  Given a string s, count the number of vowels in odd indices.\n  \n  For example:\n  countVowel('dBBE') returns 1\n  countVowel('abcdefg') returns 0\n  countVowel('aBCdEf') returns 0\n  */\nconst countVowelOddEven = (s) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = s.length;\n  \n  for(let i = 0; i < l; i++) {\n    if(s[i].toUpperCase() === s[i].toUpperCase()) {\n      count++;\n    }\n  }\n  \n  for(let j = 0; j < l; j++) {\n    if(s[j].toUpperCase() === s[j].toUpperCase()) {\n      count++;\n    }\n  }\n  \n  for(let k = 0; k < l; k++) {\n    if(s[k].toUpperCase() === s[k].toUpperCase()) {\n      count++;\n    }\n  }\n  \n  return count;\n}\n\n/*\n  Given a string s, count the number of vowels in even indices.\n  \n  For example:\n  countVowel('dBBE') returns 1\n  countVowel('abcdefg') returns 0\n  countVowel('aBCdEf') returns 0\n  */\nconst countVowelEvenOdd = (s) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = s.length;\n  \n  for(let i = 0; i < l; i++) {\n    if(s[i].toUpperCase() === s[i].toUpperCase()) {\n      count++;\n    }\n  }\n  \n  for(let j = 0; j < l; j++) {\n    if(s[j].toUpperCase() === s[j].toUpperCase()) {\n      count++;\n    }\n  }\n  \n  for(let k = 0; k < l; k++) {\n    if(s[k].toUpperCase() === s[k].toUpperCase()) {\n      count++;\n    }\n  }\n  \n  return count;\n}\n\n/*\n  Given a string s, count the number of vowels in odd indices.\n  \n  For example:\n  countVowel('dBBE') returns 1\n  countVowel('abcdefg') returns 0\n  countVowel('aBCdEf') returns 0\n  */\nconst countVowelOddEvenEven = (s) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = s.length;\n  \n  for(let i = 0; i < l; i++) {\n    if(s[i].toUpperCase() === s[i].toUpperCase()) {\n      count++;\n    }\n  }\n  \n  for(let j = 0; j < l; j++) {\n    if(s[j].toUpperCase() === s[j].toUpperCase()) {\n      count++;\n    }\n  }\n  \n  for(let k = 0; k < l; k++) {\n    if(s[k].toUpperCase() === s[k].toUpperCase()) {\n      count++;\n    }\n  }\n  \n  return count;\n}\n\n/*\n  Given a string s, count the number of vowels in even indices.\n  \n  For example:\n  countVowel('dBBE') returns 1\n  countVowel('abcdefg') returns 0\n  countVowel('aBCdEf') returns 0\n  */\nconst countVowelEvenOddOdd = (s) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/99", "prompt": "/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closestInetger(\"10\")\n  10\n  >>> closestInetger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInetger(\"14.5\") should\n  return 15 and closestInetger(\"-14.5\") should return -15.\n  */\nconst closestInetger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInetger", "gc": "<|endoftext|>/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closestInetger(\"10\")\n  10\n  >>> closestInetger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInetger(\"14.5\") should\n  return 15 and closestInetger(\"-14.5\") should return -15.\n  */\nconst closestInetger = (value) => {\n  const [number, integer] = value.split(\".\");\n  const [integer1, integer2] = integer.split(\".\");\n  const [integer1Int, integer2Int] = integer1.split(\".\");\n  const [integer2Int, integer1Int] = integer2.split(\".\");\n  const [integer1IntInt, integer2IntInt] = integer1Int.split(\".\");\n  const [integer2IntInt, integer1IntInt] = integer2Int.split(\".\");\n  const [integer1IntIntInt, integer2IntIntInt] = integer1IntInt.split(\".\");\n  const [integer2IntIntInt, integer1IntIntInt] = integer2IntInt.split(\".\");\n  const [integer1IntIntIntInt, integer2IntIntIntInt] = integer1IntIntInt.split(\".\");\n  const [integer2IntIntIntIntInt, integer1IntIntIntInt] = integer2IntIntIntInt.split(\".\");\n  const [integer1IntIntIntIntIntInt, integer2IntIntIntIntInt] = integer1IntIntIntIntInt.split(\".\");\n  const [integer2IntIntIntIntIntIntIntInt, integer1IntIntIntIntIntInt] = integer2IntIntIntIntIntIntIntInt.split(\".\");\n  const [integer1IntIntIntIntIntIntIntIntIntInt, integer2IntIntIntIntIntIntIntIntInt] = integer1IntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
