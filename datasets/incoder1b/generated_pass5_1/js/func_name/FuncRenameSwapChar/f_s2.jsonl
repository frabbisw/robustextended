{"task_id": "JavaScript/0", "prompt": "/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hasCloselEements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloselEements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloselEements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloselEements", "gc": "<|endoftext|>/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hasCloselEements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloselEements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloselEements = (numbers, threshold) => {\n  const numbersToCompare = numbers.map((number) => Math.abs(number));\n  const numbersToCompareSorted = numbersToCompare.sort((a, b) => a - b);\n  const firstNumber = numbersToCompareSorted[0];\n  const secondNumber = numbersToCompareSorted[1];\n\n  return firstNumber < secondNumber && secondNumber < threshold;\n};\n\n/**\n * Check if given number is in given list of numbers.\n * If given number is in given list of numbers, return true.\n * If given number is not in given list of numbers, return false.\n * If given number is in given list of numbers, return true only if number is\n * closer to each other than given threshold.\n * If given number is not in given list of numbers, return false only if number is\n * closer to each other than given threshold.\n * If given number is in given list of numbers, return true only if number is\n * closer to each other than given threshold.\n * If given number is not in given list of numbers, return false only if number is\n * closer to each other than given threshold.\n * If given number is in given list of numbers, return true only if number is\n * closer to each other than given threshold.\n * If given number is not in given list of numbers, return false only if number is\n * closer to each other than given threshold.\n * If given number is in given list of numbers, return true only if number is\n * closer to each other than given threshold.\n * If given number is not in given list of numbers, return false only if number is\n * closer to each other than given threshold.\n * If given number is in given list of numbers, return true only if number is\n * closer to each other than given threshold.\n * If given number is not in given list of numbers, return false only if number is\n * closer to each other than given threshold.\n * If given number is in given list of numbers, return true only if number is\n * closer to each other than given threshold.\n * If given number is not in given list of numbers, return false only if number is\n * closer to each other than given threshold.\n * If given number is in given list of numbers, return true only if number is\n * closer to each other than given threshold.\n * If given number is not in given list of numbers, return false only if number is\n * closer to each other than given threshold.\n * If given number is in given list of numbers, return true only if number is\n * closer to each other than given threshold.\n * If given number is not in given list of numbers, return false only if number is\n * closer to each other than given threshold.\n * If given number is in given list of numbers, return true only if number is\n * closer to each other than given threshold.\n * If given number is not in given list of numbers, return false only if number is\n * closer to each other than given threshold.\n * If given number is in given list of numbers, return true only if number is\n * closer to each other than given threshold.\n * If given number is not in given list of numbers, return false only if number is\n * closer to each other than given threshold.\n * If given number is in given list of numbers, return true only if number is\n * closer to each other than given threshold.\n * If given number is not in given list of numbers, return false only if number is\n * closer to each other than given threshold.\n * If given number is in given list of numbers, return true only if number is\n * closer to each other than given threshold.\n * If given number is not in given list of numbers, return false only if number is\n * closer to each other than given threshold.\n * If given number is in given list of numbers, return true only if number is\n * closer to each other than given threshold.\n * If given number is not in given list of numbers, return false only if number is\n * closer to each other than given threshold.\n * If given number is in given list of numbers, return true only if number is\n * closer to each other than given threshold.\n * If given number is not in given list of numbers, return false only if number is\n * closer to each other than given threshold.\n * If given number is in given list of numbers, return true only if number is\n * closer to each other than given threshold.\n * If given number is not in given list of numbers, return false only if number is\n * closer to each other than given threshold.\n * If given number is in given list of numbers, return true only if number is\n * closer to each other than given threshold.\n * If given number is not in given list of numbers, return false only if number is\n * closer to each other than given threshold.\n * If given number is in given list of numbers, return true only if number is\n * closer to each other than given threshold.\n * If given number is not in given list of numbers, return false only if number is\n * closer to each other than given threshold.\n * If given number is in given list of numbers, return true only if number is\n * closer to each other than given threshold.\n * If given number is not in given list of numbers, return false only if number is\n * closer to each other than given threshold.\n * If given number is in given list of numbers, return true only if number is\n * closer to each other than given threshold.\n * If given number is not in given list of numbers, return false only if number is\n * closer to each other than given threshold.\n * If given number is in given list of numbers, return true only if number is\n * closer to each other than given threshold.\n * If given number is not in given list of numbers, return false only if number is\n * closer to each other than given threshold.\n * If given number is in given list of numbers, return true only if number is\n * closer to each other than given threshold.\n * If given number is not in given list of numbers, return false only if number is\n * closer to each other than given threshold.\n * If given number is in given list of numbers, return true only if number is\n * closer to each other than given threshold.\n * If given number is not in given list of numbers, return false only if number is\n * closer to each other than given threshold.\n * If given number is in given list of numbers, return true only if number is\n * closer to each other than given threshold.\n * If given number is not in given list of numbers, return false only if number is\n * closer to each other than given threshold.\n * If given number is in given list of numbers, return true only if number is\n * closer to each other than given threshold.\n * If given number is not in given list of numbers, return false only if number is\n * closer to each other than given threshold.\n * If given number is in given list of numbers, return true only if number is\n * closer to each other than given threshold.\n * If given number is not in given list of numbers, return false only if number is\n * closer to each other than given threshold.\n * If given number is in given list of numbers, return true only if number is\n * closer to each other than given threshold.\n * If given number is not in given list of numbers, return false only if number is\n * closer to each other than given threshold.\n * If given ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separateParenGrousp('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGrousp = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGrousp", "gc": "<|endoftext|>/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separateParenGrousp('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGrousp = (paren_string) => {\n  const paren_groups = paren_string.match(/\\(([^)]+)\\)/g);\n  const paren_group_strings = [];\n  for (let i = 0; i < paren_groups.length; i++) {\n    const paren_group = paren_groups[i];\n    const paren_group_string = '';\n    for (let j = 0; j < paren_group.length; j++) {\n      if (j === 0) paren_group_string += paren_group[j];\n      else paren_group_string += paren_group[j] +'';\n    }\n    paren_group_strings.push(paren_group_string);\n  }\n  return paren_group_strings;\n};\n\n/**\n  Given a string containing multiple groups of parentheses, return the string that is the concatenation of the strings within each group.\n  >>> concatenateParenGroups('( ) (( )) (( )( ))')\npassed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "gc": "<|endoftext|>/* Test if gniven strig is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let longestPalindrome = '';\n  let palindromeLength = 0;\n  let palindromePrefix = '';\n  let palindromeSuffix = '';\n  let palindromePrefixReverse = '';\n  let palindromeSuffixReverse = '';\n\n  /* Find longest palindrome that begins with a supplied string */\n  for (let i = 0; i < string.length; i++) {\n    if (isPalindrome(string[i])) {\n      palindromeLength++;\n    }\n  }\n\n  /* Find the longest palindrome that begins with a supplied string */\n  for (let i = 0; i < string.length; i++) {\n    if (string[i]!= string[string.length - i - 1]) {\n      palindromeLength++;\n    }\n  }\n\n  /* Find the longest palindrome that begins with a supplied string */\n  for (let i = 0; i < string.length; i++) {\n    if (string[i]!= string[string.length - i - 1]) {\n      palindromeLength++;\n    }\n  }\n\n  /* Find the longest palindrome that begins with a supplied string */\n  for (let i = 0; i < string.length; i++) {\n    if (string[i]!= string[string.length - i - 1]) {\n      palindromeLength++;\n    }\n  }\n\n  /* Find the longest palindrome that begins with a supplied string */\n  for (let i = 0; i < string.length; i++) {\n    if (string[i]!= string[string.length - i - 1]) {\n      palindromeLength++;\n    }\n  }\n\n  /* Find the longest palindrome that begins with a supplied string */\n  for (let i = 0; i < string.length; i++) {\n    if (string[i]!= string[string.length - i - 1]) {\n      palindromeLength++;\n    }\n  }\n\n  /* Find the longest palindrome that begins with a supplied string */\n  for (let i = 0; i < string.length; i++) {\n    if (string[i]!= string[string.length - i - 1]) {\n      palindromeLength++;\n    }\n  }\n\n  /* Find the longest palindrome that begins with a supplied string */\n  for (let i = 0; i < string.length; i++) {\n    if (string[i]!= string[string.length - i - 1]) {\n      palindromeLength++;\n    }\n  }\n\n  /* Find the longest palindrome that begins with a supplied string */\n  for (let i = 0; i < string.length; i++) {\n    if (string[i]!= string[string.length - i - 1]) {\n      palindromeLength++;\n    }\n  }\n\n  /* Find the longest palindrome that begins with a supplied string */\n  for (let i = 0; i < string.length; i++) {\n    if (string[i]!= string[string.length - i - 1]) {\n      palindromeLength++;\n    }\n  }\n\n  /* Find the longest palindrome that begins with a supplied string */\n  for (let i = 0; i < string.length; i++) {\n    if (string[i]!= string[string.length - i - 1]) {\n      palindromeLength++;\n    }\n  }\n\n  /* Find the longest palindrome that begins with a supplied string */\n  for (let i = 0; i < string.length; i++) {\n    if (string[i]!= string[string.length - i - 1]) {\n      palindromeLength++;\n    }\n  }\n\n  /* Find the longest palindrome that begins with a supplied string */\n  for (let i = 0; i < string.length; i++) {\n    if (string[i]!= string[string.length - i - 1]) {\n      palindromeLength++;\n    }\n  }\n\n  /* Find the longest palindrome that begins with a supplied string */\n  for (let i = 0; i < string.length; i++) {\n    if (string[i]!= string[string.length - i - 1]) {\n      palindromeLength++;\n    }\n  }\n\n  /* Find the longest palindrome that begins with a supplied string */\n  for (let i = 0; i < string.length; i++) {\n    if (string[i]!= string[string.length - i - 1]) {\n      palindromeLength++;\n    }\n  }\n\n  /* Find the longest palindrome that begins with a supplied string */\n  for (let i = 0; i < string.length; i++) {\n    if (string[i]!= string[string.length - i - 1]) {\n      palindromeLength++;\n    }\n  }\n\n  /* Find the longest palindrome that begins with a supplied string */\n  for (let i = 0; i < string.length; i++) {\n    if (string[i]!= string[string.length - i - 1]) {\n      palindromeLength++;\n    }\n  }\n\n  /* Find the longest palindrome that begins with a supplied string */\n  for (let i = 0; i < string.length; i++) {\n    if (string[i]!= string[string.length - i - 1]) {\n      palindromeLength++;\n    }\n  }\n\n  /* Find the longest palindrome that begins with a supplied string */\n  for (let i = 0; i < string.length; i++) {\n    if (string[i]!= string[string.length - i - 1]) {\n      palindromeLength++;\n    }\n  }\n\n  /* Find the longest palindrome that begins with a supplied string */\n  for (let i = 0; i < string.length; i++) {\n    if (string[i]!= string[string.length - i - 1]) {\n      palindromeLength++;\n    }\n  }\n\n  /* Find the longest palindrome that begins with a supplied string */\n  for (let i = 0; i < string.length; i++) {\n    if (string[i]!= string[string.length - i - 1]) {\n      palindromeLength++;\n    }\n  }\n\n  /* Find the longest palindrome that begins with a supplied string */\n  for (let i = 0; i < string.length; i++) {\n    if (string[i]!= string[string.length - i - 1]) {\n      palindromeLength++;\n    }\n  }\n\n  /* Find the longest palindrome that begins with a supplied string */\n  for (let i = 0; i < string.length; i++) {\n    if (string[i]!= string[string.length - i - 1]) {\n      palindromeLength++;\n    }\n  }\n\n  /* Find the longest palindrome that begins with a supplied string */\n  for (let i = 0; i < string.length; i++) {\n    if (string[i]!= string[string.length - i - 1]) {\n      palindromeLength++;\n    }\n  }\n\n  /* Find the longest palindrome that begins with a supplied string */\n  for (let i = 0; i < string.length; i++) {\n    if (string[i]!= string[string.length - i - 1]) {\n      palindromeLength++;\n    }\n  }\n\n  /* Find the longest palindrome that begins with a supplied string */\n  for (let i = 0; i < string.length; i++) {\n    if (string[i]!= string[string.length - i - 1]) {\n      palindromeLength++;\n    }\n  }\n\n  /* Find the longest palindrome that begins with a supplied string */\n  for (let i = 0; i < string.length; i++) {\n    if (string[i]!= string[string.length - i - 1]) {\n      palindromeLength++;\n    }\n  }\n\n  /* Find the longest palindrome that begins with a supplied string */\n  for (let i = 0; i < string.length; i++) {\n    if (string[i]!= string[string.length - i - 1]) {\n      palindromeLength++;\n    }\n  }\n\n  /* Find the longest palindrome that begins with a supplied string */\n  for (let i = 0; i < string.length; i++) {\n    if (string[i]!= string[string.length - i - 1]) {\n      palindromeLength++;\n    }\n  }\n\n  /* Find the longest palindrome that begins with a supplied string */\n  for (let i = 0; i < string.length; i++) {\n    if (string[i]!= string[string.length - i - 1]) {\n      palindromeLength++;\n    }\n  }\n\n  /* Find the longest palindrome that begins with a supplied ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "gc": "<|endoftext|>/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const levels = [[]];\n  let level = 0;\n  let levelCount = 0;\n  while (level < n) {\n    levelCount++;\n    levels.push([]);\n    level++;\n  }\n  return levels;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const levels = [[]];\n  let level = 0;\n  let levelCount = 0;\n  while (level < n) {\n    levelCount++;\n    levels.push([]);\n    level++;\n  }\n  return levels;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const levels = [[]];\n  let level = 0;\n  let levelCount = 0;\n  while (level < n) {\n    levelCount++;\n    levels.push([]);\n    level++;\n  }\n  return levels;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const levels = [[]];\n  let level = 0;\n  let levelCount = 0;\n  while (level < n) {\n    levelCount++;\n    levels.push([]);\n    level++;\n  }\n  return levels;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const levels = [[]];\n  let level = 0;\n  let levelCount = 0;\n  while (level < n) {\n    levelCount++;\n    levels.push([]);\n    level++;\n  }\n  return levels;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const levels = [[]];\n  let level = 0;\n  let levelCount = 0;\n  while (level < n) {\n    levelCount++;\n    levels.push([]);\n    level++;\n  }\n  return levels;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const levels = [[]];\n  let level = 0;\n  let levelCount = 0;\n  while (level < n) {\n    levelCount++;\n    levels.push([]);\n    level++;\n  }\n  return levels;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const levels = [[]];\n  let level = 0;\n  let levelCount = 0;\n  while (level < n) {\n    levelCount++;\n    levels.push([]);\n    level++;\n  }\n  return levels;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const levels = [[]];\n  let level = 0;\n  let levelCount = 0;\n  while (level < n) {\n    levelCount++;\n    levels.push([]);\n    level++;\n  }\n  return levels;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const levels = [[]];\n  let level = 0;\n  let levelCount = 0;\n  while (level < n) {\n    levelCount++;\n    levels.push([]);\n    level++;\n  }\n  return levels;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "gc": "<|endoftext|>/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/[\\s,]+/);\n  return words;\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task\n  is to split the string into words and return an array of the words. You should\n  not use any built-in functions or any other library functions. Your solution should\n  be fairly efficient.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/[\\s,]+/);\n  return words;\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task\n  is to split the string into words and return an array of the words. You should\n  not use any built-in functions or any other library functions. Your solution should\n  be fairly efficient.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/[\\s,]+/);\n  return words;\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task\n  is to split the string into words and return an array of the words. You should\n  not use any built-in functions or any other library functions. Your solution should\n  be fairly efficient.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/[\\s,]+/);\n  return words;\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task\n  is to split the string into words and return an array of the words. You should\n  not use any built-in functions or any other library functions. Your solution should\n  be fairly efficient.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/[\\s,]+/);\n  return words;\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task\n  is to split the string into words and return an array of the words. You should\n  not use any built-in functions or any other library functions. Your solution should\n  be fairly efficient.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/[\\s,]+/);\n  return words;\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task\n  is to split the string into words and return an array of the words. You should\n  not use any built-in functions or any other library functions. Your solution should\n  be fairly efficient.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/[\\s,]+/);\n  return words;\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task\n  is to split the string into words and return an array of the words. You should\n  not use any built-in functions or any other library functions. Your solution should\n  be fairly efficient.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/[\\s,]+/);\n  return words;\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task\n  is to split the string into words and return an array of the words. You should\n  not use any built-in functions or any other library functions. Your solution should\n  be fairly efficient.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/[\\s,]+/);\n  return words;\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task\n  is to split the string into words and return an array of the words. You should\n  not use any built-in functions or any other library functions. Your solution should\n  be fairly efficient.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/[\\s,]+/);\n  return words;\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task\n  is to split the string into words and return an array of the words. You should\n  not use any built-in functions or any other library functions. Your solution should\n  be fairly efficient.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/[\\s,]+/);\n  return words;\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task\n  is to split the string into words and return an array of the words. You should\n  not use any built-in functions or any other library functions. Your solution should\n  be fair", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/102", "prompt": "/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "gc": "<|endoftext|>/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  let result = 0;\n  let num = 0;\n  while(true) {\n    num = num * 2 + x;\n    if(num > y) {\n      break;\n    }\n    result = num % y;\n  }\n  return result;\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest odd integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  let result = 0;\n  let num = 0;\n  while(true) {\n    num = num * 2 + y;\n    if(num > x) {\n      break;\n    }\n    result = num % x;\n  }\n  return result;\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  let result = 0;\n  let num = 0;\n  while(true) {\n    num = num * 2 + y;\n    if(num > x) {\n      break;\n    }\n    result = num % x;\n  }\n  return result;\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  let result = 0;\n  let num = 0;\n  while(true) {\n    num = num * 2 + x;\n    if(num > y) {\n      break;\n    }\n    result = num % y;\n  }\n  return result;\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  let result = 0;\n  let num = 0;\n  while(true) {\n    num = num * 2 + y;\n    if(num > x) {\n      break;\n    }\n    result = num % x;\n  }\n  return result;\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  let result = 0;\n  let num = 0;\n  while(true) {\n    num = num * 2 + y;\n    if(num > x) {\n      break;\n    }\n    result = num % x;\n  }\n  return result;\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  let result = 0;\n  let num = 0;\n  while(true) {\n    num = num * 2 + y;\n    if(num > x) {\n      break;\n    }\n    result = num % x;\n  }\n  return result;\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  let result = 0;\n  let num = 0;\n  while(true) {\n    num = num * 2 + y;\n    if(num > x) {\n      break;\n    }\n    result = num % x;\n  }\n  return result;\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  let result = 0;\n  let num = 0;\n  while(true) {\n    num = num * 2 + y;\n    if(num > x) {\n      break;\n    }\n    result = num % x;\n  }\n  return result;\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  let result = 0;\n  let num = 0;\n  while(true) {\n    num = num * 2 + y;\n    if(num > x) {\n      break;\n    }\n    result = num % x;\n  }\n  return result;\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  let result = 0;\n  let num = 0;\n  while(true) {\n    num = num * 2 + y;\n    if(num > x) {\n      break;\n    }\n    result = num % x;\n  }\n  return result;\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  let result = 0;\n  let num = 0;\n  while(true) {\n    num = num * 2 + y;\n    if(num > x) {\n      break;\n    }\n    result = num % x;\n  }\n  return result;\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  let result = 0;\n  let num = 0;\n  while(true) {\n    num = num * 2 + y;\n    if(num > x) {\n      break;\n    }\n    result = num % x;\n  }\n  return result;\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  let result = 0;\n  let num = 0;\n  while(true) {\n    num = num * 2 + y;\n    if(num > x) {\n      break;\n    }\n    result = num % x;\n  }\n  return result;\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/103", "prompt": "/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "gc": "<|endoftext|>/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  let sum = 0;\n  let count = 0;\n  let binary = \"\";\n  let remainder = 0;\n  let remainder2 = n % 2;\n  let remainder3 = Math.floor(n / 2);\n  let remainder4 = n % 4;\n  let remainder5 = Math.floor(n / 4);\n  let remainder6 = n % 6;\n  let remainder7 = Math.floor(n / 6);\n  let remainder8 = n % 8;\n  let remainder9 = Math.floor(n / 8);\n  let remainder10 = n % 10;\n  let remainder11 = Math.floor(n / 10);\n  let remainder12 = n % 12;\n  let remainder13 = n % 13;\n  let remainder14 = n % 14;\n  let remainder15 = n % 15;\n  let remainder16 = n % 16;\n  let remainder17 = n % 17;\n  let remainder18 = n % 18;\n  let remainder19 = n % 19;\n  let remainder20 = n % 20;\n  let remainder21 = n % 21;\n  let remainder22 = n % 22;\n  let remainder23 = n % 23;\n  let remainder24 = n % 24;\n  let remainder25 = n % 25;\n  let remainder26 = n % 26;\n  let remainder27 = n % 27;\n  let remainder28 = n % 28;\n  let remainder29 = n % 29;\n  let remainder30 = n % 30;\n  let remainder31 = n % 31;\n  let remainder32 = n % 32;\n  let remainder33 = n % 33;\n  let remainder34 = n % 34;\n  let remainder35 = n % 35;\n  let remainder36 = n % 36;\n  let remainder37 = n % 37;\n  let remainder38 = n % 38;\n  let remainder39 = n % 39;\n  let remainder40 = n % 40;\n  let remainder41 = n % 41;\n  let remainder42 = n % 42;\n  let remainder43 = n % 43;\n  let remainder44 = n % 44;\n  let remainder45 = n % 45;\n  let remainder46 = n % 46;\n  let remainder47 = n % 47;\n  let remainder48 = n % 48;\n  let remainder49 = n % 49;\n  let remainder50 = n % 50;\n  let remainder51 = n % 51;\n  let remainder52 = n % 52;\n  let remainder53 = n % 53;\n  let remainder54 = n % 54;\n  let remainder55 = n % 55;\n  let remainder56 = n % 56;\n  let remainder57 = n % 57;\n  let remainder58 = n % 58;\n  let remainder59 = n % 59;\n  let remainder60 = n % 60;\n  let remainder61 = n % 61;\n  let remainder62 = n % 62;\n  let remainder63 = n % 63;\n  let remainder64 = n % 64;\n  let remainder65 = n % 65;\n  let remainder66 = n % 66;\n  let remainder67 = n % 67;\n  let remainder68 = n % 68;\n  let remainder69 = n % 69;\n  let remainder70 = n % 70;\n  let remainder71 = n % 71;\n  let remainder72 = n % 72;\n  let remainder73 = n % 73;\n  let remainder74 = n % 74;\n  let remainder75 = n % 75;\n  let remainder76 = n % 76;\n  let remainder77 = n % 77;\n  let remainder78 = n % 78;\n  let remainder79 = n % 79;\n  let remainder80 = n % 80;\n  let remainder81 = n % 81;\n  let remainder82 = n % 82;\n  let remainder83 = n % 83;\n  let remainder84 = n % 84;\n  let remainder85 = n % 85;\n  let remainder86 = n % 86;\n  let remainder87 = n % 87;\n  let remainder88 = n % 88;\n  let remainder89 = n % 89;\n  let remainder90 = n % 90;\n  let remainder91 = n % 91;\n  let remainder92 = n % 92;\n  let remainder93 = n % 93;\n  let remainder94 = n % 94;\n  let remainder95 = n % 95;\n  let remainder96 = n % 96;\n  let remainder97 = n % 97;\n  let remainder98 = n % 98;\n  let remainder99 = n % 99;\n  let remainder100 = n % 100;\n  let remainder101 = n % 101;\n  let remainder102 = n % 102;\n  let remainder103 = n % 103;\n  let remainder104 = n % 104;\n  let remainder105 = n % 105;\n  let remainder106 = n % 106;\n  let remainder107 = n % 107;\n  let remainder108 = n % 108;\n  let remainder109 = n % 109;\n  let remainder110 = n % 110;\n  let remainder111 = n % 111;\n  let remainder112 = n % 112;\n  let remainder113 = n % 113;\n  let remainder114 = n % 114;\n  let remainder115 = n % 115;\n  let remainder116 = n % 116;\n  let remainder117 = n % 117;\n  let remainder118 = n % 118;\n  let remainder119 = n % 119;\n  let remainder120 = n % 120;\n  let remainder121 = n % 121;\n  let remainder122 = n % 122;\n  let remainder123 = n % 123;\n  let remainder124 = n % 124;\n  let remainder125 = n % 125;\n  let remainder126 = n % 126;\n  let remainder127 = n % 127;\n  let remainder128 = n % 128;\n  let remainder129 = n % 129;\n  let remainder130 = n % 130;\n  let remainder131 = n % 131;\n  let remainder132 = n % 132;\n  let remainder133 = n % 133;\n  let remainder134 = n % 134;\n  let remainder135 = n % 135;\n  let remainder136 = n % 136;\n  let remainder137 = n % 137;\n  let remainder138 = n % 138;\n  let remainder139 = n % 139;\n  let remainder140 = n % 140;\n  let remainder141 = n % 141;\n  let remainder142 = n % 142;\n  let remainder143 = n % 143;\n  let remainder144 = n % 144;\n  let remainder145 = n % 145;\n  let remainder146 = n % 146;\n  let remainder147 = n % 147;\n  let remainder148 = n % 148;\n  let remainder149 = n % 149;\n  let remainder150 = n % 150;\n  let remainder151 = n % 151;\n  let remainder152 = n % 152;\n  let remainder153 = n % 153;\n  let remainder154 = n % 154;\n  let remainder155 = n % 155;\n  let remainder156 = n % 156;\n  let remainder157 = n % 157;\n  let remainder158 = n % 158;\n  let remainder159 = n % 159;\n  let remain", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueDigtis([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigtis([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigtis = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigtis", "gc": "<|endoftext|>/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueDigtis([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigtis([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigtis = (x) => {\n  let result = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let flag = 0;\n  let temp;\n  while ((j = i + 1) < x.length) {\n    temp = x[j];\n    if (temp % 2 === 0) {\n      result.push(temp);\n      i++;\n    } else {\n      flag = 1;\n    }\n  }\n  while ((k = j + 1) < x.length) {\n    temp = x[k];\n    if (temp % 2 === 0) {\n      result.push(temp);\n      j++;\n    } else {\n      flag = 1;\n    }\n  }\n  return result;\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that has any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueDigtis([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigtis([152, 323, 1422, 10])\n  []\n  */\nconst uniqueEvenDigtis = (x) => {\n  let result = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let flag = 0;\n  let temp;\n  while ((j = i + 1) < x.length) {\n    temp = x[j];\n    if (temp % 2 === 0) {\n      result.push(temp);\n      i++;\n    } else {\n      flag = 1;\n    }\n  }\n  while ((k = j + 1) < x.length) {\n    temp = x[k];\n    if (temp % 2 === 0) {\n      result.push(temp);\n      j++;\n    } else {\n      flag = 1;\n    }\n  }\n  return result;\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that has any odd digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueEvenDigtis([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueEvenDigtis([152, 323, 1422, 10])\n  []\n  */\nconst uniqueOddDigtis = (x) => {\n  let result = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let flag = 0;\n  let temp;\n  while ((j = i + 1) < x.length) {\n    temp = x[j];\n    if (temp % 2 === 0) {\n      result.push(temp);\n      i++;\n    } else {\n      flag = 1;\n    }\n  }\n  while ((k = j + 1) < x.length) {\n    temp = x[k];\n    if (temp % 2 === 0) {\n      result.push(temp);\n      j++;\n    } else {\n      flag = 1;\n    }\n  }\n  return result;\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that has any multiple of 2 digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueOddDigtis([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueOddDigtis([152, 323, 1422, 10])\n  []\n  */\nconst uniqueMultipleOf2Digtis = (x) => {\n  let result = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let flag = 0;\n  let temp;\n  while ((j = i + 1) < x.length) {\n    temp = x[j];\n    if (temp % 2 === 0) {\n      result.push(temp);\n      i++;\n    } else {\n      flag = 1;\n    }\n  }\n  while ((k = j + 1) < x.length) {\n    temp = x[k];\n    if (temp % 2 === 0) {\n      result.push(temp);\n      j++;\n    } else {\n      flag = 1;\n    }\n  }\n  return result;\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that has any multiple of 3 digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueMultipleOf3Digtis([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueMultipleOf3Digtis([152, 323, 1422, 10])\n  []\n  */\nconst uniqueMultipleOf3Digtis = (x) => {\n  let result = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let flag = 0;\n  let temp;\n  while ((j = i + 1) < x.length) {\n    temp = x[j];\n    if (temp % 3 === 0) {\n      result.push(temp);\n      i++;\n    } else {\n      flag = 1;\n    }\n  }\n  while ((k = j + 1) < x.length) {\n    temp = x[k];\n    if (temp % 3 === 0) {\n      result.push(temp);\n      j++;\n    } else {\n      flag = 1;\n    }\n  }\n  return result;\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that has any multiple of 5 digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueMultipleOf5Digtis([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueMultipleOf5Digtis([152, 323, 1422, 10])\n  []\n  */\nconst uniqueMultipleOf5Digtis = (x) => {\n  let result = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let flag = 0;\n  let temp;\n  while ((j = i + 1) < x.length) {\n    temp = x[j];\n    if (temp % 5 === 0) {\n      result.push(temp);\n      i++;\n    } else {\n      flag = 1;\n    }\n  }\n  while ((k = j + 1) < x.length) {\n    temp = x[k];\n    if (temp % 5 === 0) {\n      result.push(temp);\n      j++;\n    } else {\n      flag = 1;\n    }\n  }\n  return result;\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that has any multiple of 7 digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueMultipleOf7Digtis([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueMultipleOf7Digtis([152, 323, 1422, 10])\n  []\n  */\nconst uniqueMultipleOf7Digtis = (x) => {\n  let result = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let flag = 0;\n  let temp;\n  while ((j = i + 1) < x.length) {\n    temp = x[j];\n    if (temp % 7 === 0) {\n      result.push(temp);\n      i++;\n    } else {\n      flag = 1;\n    }\n  }\n  while ((k = j + 1) < x.length) {\n    temp = x[k];\n    if (temp % 7 === 0) {\n      result.push(temp);\n      j++;\n    } else {\n      flag = 1;\n    }\n  }\n  return result;\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that has any multiple of 11 digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueMultipleOf11Digtis([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueMultipleOf11Digtis([152, 323, 1422, 10])\n  []\n  */\nconst uniqueMultipleOf11Digtis = (x) => {\n  let result = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let flag = 0;\n", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst ybLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "ybLength", "gc": "<|endoftext|>/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst ybLength = (arr) => {\n  let len = arr.length;\n  if (len === 0) {\n    return [];\n  }\n  let reversed = arr.slice().reverse();\n  let result = [];\n  for (let i = 0; i < len; i++) {\n    let num = reversed[i];\n    let name = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"][num];\n    result.push(name);\n  }\n  return result;\n};\n\n/**\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst ybSort = (arr) => {\n  let len = arr.length;\n  if (len === 0) {\n    return [];\n  }\n  let reversed = arr.slice().reverse();\n  let result = [];\n  for (let i = 0; i < len; i++) {\n    let num = reversed[i];\n    let name = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"][num];\n    result.push(name);\n  }\n  return result;\n};\n\n/**\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst ybReverse = (arr) => {\n  let len = arr.length;\n  if (len === 0) {\n    return [];\n  }\n  let reversed = arr.slice().reverse();\n  let result = [];\n  for (let i = 0; i < len; i++) {\n    let num = reversed[i];\n    let name = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"][num];\n    result.push(name);\n  }\n  return result;\n};\n\n/**\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst ybReverseSort = (arr) => {\n  let len = arr.length;\n  if (len === 0) {\n    return [];\n  }\n  let reversed = arr.slice().reverse();\n  let result = [];\n  for (let i = 0; i < len; i++) {\n    let num = reversed[i];\n    let name = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"][num];\n    result.push(name);\n  }\n  return result;\n};\n\n/**\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst ybReverseSortReverse = (arr) => {\n  let len = arr.length;\n  if (len === 0) {\n    return [];\n  }\n  let reversed = arr.slice().reverse();\n  let result = [];\n  for (let i = 0; i < len; i++) {\n    let num = reversed[i];\n    let name = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"][num];\n    result.push(name);\n  }\n  return result;\n};\n\n/**\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst ybReverseSortReverseReverse = (arr) => {\n  let len = arr.length;\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/106", "prompt": "/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "gc": "<|endoftext|>/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  let arr = [1, 1];\n  for (let i = 1; i <= n; i++) {\n    arr[i] = arr[i] * i;\n  }\n  return arr;\n};\n\n/* Implement the function g that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the greatest common divisor of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the greatest common divisor of i is the product of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  g(5) == [1, 1, 2, 6, 24]\n  */\nconst g = (n) => {\n  let arr = [1, 1];\n  for (let i = 1; i <= n; i++) {\n    arr[i] = arr[i] * i;\n  }\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += arr[i];\n  }\n  return arr.reduce((acc, val) => {\n    if (val % 2 === 0) {\n      return acc + val;\n    }\n    return acc;\n  }, sum);\n};\n\n/* Implement the function h that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the greatest common divisor of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the greatest common divisor of i is the product of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  h(5) == [1, 1, 2, 6, 24]\n  */\nconst h = (n) => {\n  let arr = [1, 1];\n  for (let i = 1; i <= n; i++) {\n    arr[i] = arr[i] * i;\n  }\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += arr[i];\n  }\n  return arr.reduce((acc, val) => {\n    if (val % 2 === 0) {\n      return acc + val;\n    }\n    return acc;\n  }, sum);\n};\n\n/* Implement the function i that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the greatest common divisor of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the greatest common divisor of i is the product of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  i(5) == [1, 1, 2, 6, 24]\n  */\nconst i = (n) => {\n  let arr = [1, 1];\n  for (let i = 1; i <= n; i++) {\n    arr[i] = arr[i] * i;\n  }\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += arr[i];\n  }\n  return arr.reduce((acc, val) => {\n    if (val % 2 === 0) {\n      return acc + val;\n    }\n    return acc;\n  }, sum);\n};\n\n/* Implement the function j that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the greatest common divisor of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the greatest common divisor of i is the product of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  j(5) == [1, 1, 2, 6, 24]\n  */\nconst j = (n) => {\n  let arr = [1, 1];\n  for (let i = 1; i <= n; i++) {\n    arr[i] = arr[i] * i;\n  }\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += arr[i];\n  }\n  return arr.reduce((acc, val) => {\n    if (val % 2 === 0) {\n      return acc + val;\n    }\n    return acc;\n  }, sum);\n};\n\n/* Implement the function k that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the greatest common divisor of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the greatest common divisor of i is the product of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  k(5) == [1, 1, 2, 6, 24]\n  */\nconst k = (n) => {\n  let arr = [1, 1];\n  for (let i = 1; i <= n; i++) {\n    arr[i] = arr[i] * i;\n  }\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += arr[i];\n  }\n  return arr.reduce((acc, val) => {\n    if (val % 2 === 0) {\n      return acc + val;\n    }\n    return acc;\n  }, sum);\n};\n\n/* Implement the function l that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the greatest common divisor of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the greatest common divisor of i is the product of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  l(5) == [1, 1, 2, 6, 24]\n  */\nconst l = (n) => {\n  let arr = [1, 1];\n  for (let i = 1; i <= n; i++) {\n    arr[i] = arr[i] * i;\n  }\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += arr[i];\n  }\n  return arr.reduce((acc, val) => {\n    if (val % 2 === 0) {\n      return acc + val;\n    }\n    return acc;\n  }, sum);\n};\n\n/* Implement the function m that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the greatest common divisor of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the greatest common divisor of i is the product of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  m(5) == [1, 1, 2, 6, 24]\n  */\nconst m = (n) => {\n  let arr = [1, 1];\n  for (let i = 1; i <= n; i++) {\n    arr[i] = arr[i] * i;\n  }\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += arr[i];\n  }\n  return arr.reduce((acc, val) => {\n    if (val % 2 === 0) {\n      return acc + val;\n    }\n    return acc;\n  }, sum);\n};\n\n/* Implement the function n that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the greatest common divisor of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the greatest common divisor of i is the product of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  n(5) == [1, 1, 2, 6, 24]\n  */\nconst n = (n) => {\n  let arr = [1, 1];\n  for (let i = 1; i <= n; i++) {\n    arr[i] = arr[i] * i;\n  }\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += arr[i];\n  }\n  return arr.reduce((acc, val) => {\n    if (val % 2 === 0) {\n      return acc + val;\n    }\n    return acc;\n  }, sum);\n};\n\n/* Implement the function o that takes n as a parameter,\n  and returns a list of size n, such that the value of the ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "gc": "<|endoftext|>/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  const evenPalindromes = Array.from({ length: n }, (_, i) => i);\n  const oddPalindromes = Array.from({ length: n }, (_, i) => i + 1);\n  const evenPalindromesSet = new Set(evenPalindromes);\n  const oddPalindromesSet = new Set(oddPalindromes);\n  const oddPalindromePairs = oddPalindromesSet.intersection(evenPalindromesSet);\n  const evenPalindromePairs = evenPalindromesSet.intersection(oddPalindromesSet);\n  return [...oddPalindromePairs,...evenPalindromePairs];\n};\n\n/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that do not fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst oddEvenPalindrome = (n) => {\n  const evenPalindromes = Array.from({ length: n }, (_, i) => i);\n  const oddPalindromes = Array.from({ length: n }, (_, i) => i + 1);\n  const evenPalindromesSet = new Set(evenPalindromes);\n  const oddPalindromesSet = new Set(oddPalindromes);\n  const evenPalindromePairs = evenPalindromesSet.symmetric_difference(oddPalindromesSet);\n  const oddPalindromePairs = oddPalindromesSet.symmetric_difference(evenPalindromesSet);\n  return [...evenPalindromePairs,...oddPalindromePairs];\n};\n\n/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that do not fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst oddEvenPalindromeNoDuplicate = (n) => {\n  const evenPalindromes = Array.from({ length: n }, (_, i) => i);\n  const oddPalindromes = Array.from({ length: n }, (_, i) => i + 1);\n  const evenPalindromesSet = new Set(evenPalindromes);\n  const oddPalindromesSet = new Set(oddPalindromes);\n  const evenPalindromePairs = evenPalindromesSet.symmetric_difference(oddPalindromesSet);\n  const oddPalindromePairs = oddPalindromesSet.symmetric_difference(evenPalindromesSet);\n  return [...evenPalindromePairs,...oddPalindromePairs];\n};\n\n/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that do not fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst oddEvenPalindromeNoDuplicateNoDuplicate = (n) => {\n  const evenPalindromes = Array.from({ length: n }, (_, i) => i);\n  const oddPalindromes = Array.from({ length: n }, (_, i) => i + 1);\n  const evenPalindromesSet = new Set(evenPalindromes);\n  const oddPalindromesSet = new Set(oddPalindromes);\n  const evenPalindromePairs = evenPalindromesSet.symmetric_difference(oddPalindromesSet);\n  const oddPalindromePairs = oddPalindromesSet.symmetric_difference(evenPalindromesSet);\n  return [...evenPalindromePairs,...oddPalindromePairs];\n};\n\n/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that do not fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst oddEvenPalindromeNoDuplicateNoDuplicateNoDuplicate = (n) => {\n  const evenPalindromes = Array.from({ length: n }, (_, i) => i);\n  const oddPalindromes = Array.from({ length: n }, (_, i) => i + 1);\n  const evenPalindromesSet = new Set(evenPalindromes);\n  const oddPalindromesSet = new Set(oddPalindromes);\n  const evenPalindromePairs = evenPalindromesSet.symmetric_difference(oddPalindromesSet);\n  const oddPalindromePairs = oddPalindromesSet.symmetric_difference(evenPalindromesSet);\n  return [...evenPalindromePairs,...oddPalindromePairs];\n};\n\n/*\n  Given a positive integer n, return a tuple ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function countNmus which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNmus([]) == 0\n  >>> countNmus([-1, 11, -11]) == 1\n  >>> countNmus([1, 1, 2]) == 3\n  */\nconst countNmus = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNmus", "gc": "<|endoftext|>/*\n  Write a function countNmus which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNmus([]) == 0\n  >>> countNmus([-1, 11, -11]) == 1\n  >>> countNmus([1, 1, 2]) == 3\n  */\nconst countNmus = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countNmus which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNmus([]) == 0\n  >>> countNmus([-1, 11, -11]) == 1\n  >>> countNmus([1, 1, 2]) == 3\n  */\nconst countNmus = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countNmus which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNmus([]) == 0\n  >>> countNmus([-1, 11, -11]) == 1\n  >>> countNmus([1, 1, 2]) == 3\n  */\nconst countNmus = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countNmus which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNmus([]) == 0\n  >>> countNmus([-1, 11, -11]) == 1\n  >>> countNmus([1, 1, 2]) == 3\n  */\nconst countNmus = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countNmus which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNmus([]) == 0\n  >>> countNmus([-1, 11, -11]) == 1\n  >>> countNmus([1, 1, 2]) == 3\n  */\nconst countNmus = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countNmus which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNmus([]) == 0\n  >>> countNmus([-1, 11, -11]) == 1\n  >>> countNmus([1, 1, 2]) == 3\n  */\nconst countNmus = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countNmus which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNmus([]) == 0\n  >>> countNmus([-1, 11, -11]) == 1\n  >>> countNmus([1, 1, 2]) == 3\n  */\nconst countNmus = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countNmus which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNmus([]) == 0\n  >>> countNmus([-1, 11, -11]) == 1\n  >>> countNmus([1, 1, 2]) == 3\n  */\nconst countNmus = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countNmus which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNmus([]) == 0\n  >>> countNmus([-1, 11, -11]) == 1\n  >>> countNmus([1, 1, 2]) == 3\n  */\nconst countNmus = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countNmus which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNmus([]) == 0\n  >>> countNmus([-1, 11, -11]) == 1\n  >>> countNmus([1, 1, 2]) == 3\n  */\nconst countNmus = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countNmus which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNmus([]) == 0\n  >>> countNmus([-1, 11, -11]) == 1\n  >>> countNmus([1, 1, 2]) == 3\n  */\nconst countNmus = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countNmus which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNmus([]) == 0\n  >>> countNmus([-1, 11, -11]) == 1\n  >>> countNmus([1, 1, 2]) == 3\n  */\nconst countNmus = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countNmus which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNmus([]) == 0\n  >>> countNmus([-1, 11, -11]) == 1\n  >>> countNmus([1, 1, 2]) == 3\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/109", "prompt": "/*We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "gc": "<|endoftext|>/*We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  let arrLength = arr.length;\n  let arrCopy = arr.slice();\n  let arrCopyLength = arrCopy.length;\n  let arrCopyCopy = arrCopy.slice();\n  let arrCopyCopyLength = arrCopyCopy.length;\n  let arrCopyCopyCopy = arrCopyCopy.slice();\n  let arrCopyCopyCopyLength = arrCopyCopyCopy.length;\n  let arrCopyCopyCopyCopy = arrCopyCopyCopy.slice();\n  let arrCopyCopyCopyCopyLength = arrCopyCopyCopyCopy.length;\n  let arrCopyCopyCopyCopyCopy = arrCopyCopyCopyCopy.slice();\n  let arrCopyCopyCopyCopyLength = arrCopyCopyCopyCopy.length;\n  let arrCopyCopyCopyCopyCopyLength = arrCopyCopyCopyCopyCopy.length;\n  let arrCopyCopyCopyCopyCopyCopyLength = arrCopyCopyCopyCopyCopy.length;\n  let arrCopyCopyCopyCopyCopyCopyLength = arrCopyCopyCopyCopyCopyCopy.length;\n  let arrCopyCopyCopyCopyCopyCopyCopyLength = arrCopyCopyCopyCopyCopyCopy.length;\n  let arrCopyCopyCopyCopyCopyCopyCopyLength = arrCopyCopyCopyCopyCopyCopy.length;\n  let arrCopyCopyCopyCopyCopyCopyCopyLength = arrCopyCopyCopyCopyCopyCopy.length;\n  let arrCopyCopyCopyCopyCopyCopyCopyLength = arrCopyCopyCopyCopyCopyCopy.length;\n  let arrCopyCopyCopyCopyCopyCopyCopyCopyLength = arrCopyCopyCopyCopyCopyCopyCopy.length;\n  let arrCopyCopyCopyCopyCopyCopyCopyLength = arrCopyCopyCopyCopyCopyCopyCopy.length;\n  let arrCopyCopyCopyCopyCopyCopyCopyLength = arrCopyCopyCopyCopyCopyCopyCopy.length;\n  let arrCopyCopyCopyCopyCopyCopyCopyCopyLength = arrCopyCopyCopyCopyCopyCopyCopy.length;\n  let arrCopyCopyCopyCopyCopyCopyCopyLength = arrCopyCopyCopyCopyCopyCopyCopy.length;\n  let arrCopyCopyCopyCopyCopyCopyCopyLength = arrCopyCopyCopyCopyCopyCopy.length;\n  let arrCopyCopyCopyCopyCopyCopyLength = arrCopyCopyCopyCopyCopyCopy.length;\n  let arrCopyCopyCopyCopyCopyCopyCopyLength = arrCopyCopyCopyCopyCopyCopy.length;\n  let arrCopyCopyCopyCopyCopyCopyCopyLength = arrCopyCopyCopyCopyCopyCopy.length;\n  let arrCopyCopyCopyCopyCopyCopyLength = arrCopyCopyCopyCopyCopy.length;\n  let arrCopyCopyCopyCopyCopyLength = arrCopyCopyCopyCopyCopy.length;\n  let arrCopyCopyCopyCopyCopyLength = arrCopyCopyCopyCopyCopy.length;\n  let arrCopyCopyCopyCopyCopyLength = arrCopyCopyCopyCopyCopy.length;\n  let arrCopyCopyCopyCopyLength = arrCopyCopyCopyCopy.length;\n  let arrCopyCopyCopyCopyLength = arrCopyCopyCopyCopy.length;\n  let arrCopyCopyCopyLength = arrCopyCopyCopy.length;\n  let arrCopyCopyCopyLength = arrCopyCopyCopy.length;\n  let arrCopyCopyCopyLength = arrCopyCopyCopy.length;\n  let arrCopyCopyCopyLength = arrCopyCopyCopy.length;\n  let arrCopyCopyCopyLength = arrCopyCopyCopy.length;\n  let arrCopyCopyLength = arrCopyCopy.length;\n  let arrCopyCopyLength = arrCopyCopy.length;\n  let arrCopyCopyLength = arrCopyCopy.length;\n  let arrCopyCopyLength = arrCopyCopy.length;\n  let arrCopyCopyLength = arrCopyCopy.length;\n  let arrCopyCopyLength = arrCopyCopy.length;\n  let arrCopyCopyLength = arrCopyCopy.length;\n  let arrCopyCopyLength = arrCopyCopy.length;\n  let arrCopyCopyLength = arrCopyCopy.length;\n  let arrCopyCopyLength = arrCopyCopy.length;\n  let arrCopyCopyLength = arrCopyCopy.length;\n  let arrCopyCopyLength = arrCopyCopy.length;\n  let arrCopyCopyLength = arrCopyCopy.length;\n  let arrCopyCopyLength = arrCopyCopy.length;\n  let arrCopyCopyLength = arrCopyCopy.length;\n  let arrCopyCopyLength = arrCopyCopy.length;\n  let arrCopyCopyLength = arrCopyCopy.length;\n  let arrCopyCopyLength = arrCopyCopy.length;\n  let arrCopyCopyLength = arrCopyCopy.length;\n  let arrCopyCopyLength = arrCopyCopy.length;\n  let arrCopyCopyLength = arrCopyCopy.length;\n  let arrCopyCopyLength = arrCopyCopy.length;\n  let arrCopyCopyLength = arrCopyCopy.length;\n  let arrCopyCopyLength = arrCopyCopy.length;\n  let arrCopyCopyLength = arrCopyCopy.length;\n  let arrCopyCopyLength = arrCopyCopy.length;\n  let arrCopyCopyLength = arrCopyCopy.length;\n  let arrCopyCopyLength = arrCopyCopy.length;\n  let arrCopyCopyLength = arrCopyCopy.length;\n  let arrCopyCopyLength = arrCopyCopy.length;\n  let arrCopyCopyLength = arrCopyCopy.length;\n  let arrCopyCopyLength = arrCopyCopy.length;\n  let arrCopyCopyLength = arrCopyCopy.length;\n  let arrCopyCopyLength = arrCopyCopy.length;\n  let arrCopyCopyLength = arrCopyCopy.length;\n  let arrCopyCopyLength = arrCopyCopy.length;\n  let arrCopyCopyLength = arrCopyCopy.length;\n  let arrCopyCopyLength = arrCopyCopy.length;\n  let arrCopyCopyLength = arrCopyCopy.length;\n  let arrCopyCopyLength = arrCopyCopy.length;\n  let arrCopyCopyLength = arrCopyCopy.length;\n  let arrCopyCopyLength = arrCopyCopy.length;\n  let arrCopyCopyLength = arrCopyCopy.length;\n  let arrCopyCopyLength = arrCopyCopy.length;\n  let arrCopyCopyLength = arrCopyCopy.length;\n  let arrCopyCopyLength = arrCopyCopy.length;\n  let arrCopyCopyLength = arrCopyCopy.length;\n  let arrCopyCopyLength = arrCopyCopy.length;\n  let arrCopyCopyLength = arrCopyCopy.length;\n  let arrCopyCopyLength = arrCopyCopy.length;\n  let arrCopyCopyLength = arrCopyCopy.length;\n  let arrCopyCopyLength = arrCopyCopy.length;\n  let arrCopyCopyLength = arrCopyCopy.length;\n  let arrCopyCopyLength = arrCopyCopy.length;\n  let arrCopyCopyLength = arrCopyCopy.length;\n  let arrCopyCopyLength = arrCopyCopy.length;\n  let arrCopyCopyLength = arrCopyCopy.length;\n  let arrCopyCopyLength = arrCopyCopy.length;\n  let arrCopyCopyLength = arrCopyCopy.length;\n  let arrCopyCopyLength = arrCopyCopy.length;\n  let arrCopyCopyLength = arrCopyCopy.length;\n  let arrCopyCopyLength = arrCopyCopy.length;\n  let arrCopyCopyLength = arrCopyCopy.length;\n  let arrCopyCopyLength = arrCopyCopy.length;\n  let arrCopyCopyLength = arrCopyCopy.length;\n  let arrCopyCopyLength = arrCopyCopy.length;\n  let arrCopyCopyLength = arrCopyCopy.length;\n  let arrCopyCopyLength = arrCopyCopy.length;\n  let arrCopyCopyLength = arrCopyCopy.length;\n  let arrCopyCopyLength = arrCopyCopy.length;\n  let arr", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/11", "prompt": "/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> strinXgor('010', '110')\n  '100'\n  */\nconst strinXgor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "strinXgor", "gc": "<|endoftext|>/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> strinXgor('010', '110')\n  '100'\n  */\nconst strinXgor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] ^ b[i];\n  }\n  return result;\n};\n\n/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary AND on these inputs and return result also as a string.\n  >>> strinXor('010', '110')\n  '100'\n  */\nconst strinXor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] & b[i];\n  }\n  return result;\n};\n\n/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary OR on these inputs and return result also as a string.\n  >>> strinXor('010', '110')\n  '100'\n  */\nconst strinXor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] | b[i];\n  }\n  return result;\n};\n\n/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary NOT on these inputs and return result also as a string.\n  >>> strinXor('010', '110')\n  '100'\n  */\nconst strinXor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += ~a[i] ^ b[i];\n  }\n  return result;\n};\n\n/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> strinXor('010', '110')\n  '100'\n  */\nconst strinXor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] ^ b[i];\n  }\n  return result;\n};\n\n/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary AND on these inputs and return result also as a string.\n  >>> strinXor('010', '110')\n  '100'\n  */\nconst strinXor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] & b[i];\n  }\n  return result;\n};\n\n/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary OR on these inputs and return result also as a string.\n  >>> strinXor('010', '110')\n  '100'\n  */\nconst strinXor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] | b[i];\n  }\n  return result;\n};\n\n/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary NOT on these inputs and return result also as a string.\n  >>> strinXor('010', '110')\n  '100'\n  */\nconst strinXor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += ~a[i] ^ b[i];\n  }\n  return result;\n};\n\n/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> strinXor('010', '110')\n  '100'\n  */\nconst strinXor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] ^ b[i];\n  }\n  return result;\n};\n\n/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary AND on these inputs and return result also as a string.\n  >>> strinXor('010', '110')\n  '100'\n  */\nconst strinXor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] & b[i];\n  }\n  return result;\n};\n\n/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary OR on these inputs and return result also as a string.\n  >>> strinXor('010', '110')\n  '100'\n  */\nconst strinXor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] | b[i];\n  }\n  return result;\n};\n\n/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary NOT on these inputs and return result also as a string.\n  >>> strinXor('010', '110')\n  '100'\n  */\nconst strinXor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += ~a[i] ^ b[i];\n  }\n  return result;\n};\n\n/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> strinXor('010', '110')\n  '100'\n  */\nconst strinXor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] ^ b[i];\n  }\n  return result;\n};\n\n/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary AND on these inputs and return result also as a string.\n  >>> strinXor('010', '110')\n  '100'\n  */\nconst strinXor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] & b[i];\n  }\n  return result;\n};\n\n/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary OR on these inputs and return result also as a string.\n  >>> strinXor('010', '110')\n  '100'\n  */\nconst strinXor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] | b[i];\n  }\n  return result;\n};\n\n/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary NOT on these inputs and return result also as a string.\n  >>> strinXor('010', '110')\n  '100'\n  */\nconst strinXor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += ~a[i] ^ b[i];\n  }\n  return result;\n};\n\n/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> strinXor('010', '110')\n  '100'\n  */\nconst strinXor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] ^ b[i];\n  }\n  return result;\n};\n\n/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary AND on these inputs and return result also as a string.\n  >>> strinXor('010', '110')\n  '100'\n  */\nconst strinXor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] & b[i];\n  }\n  return result;\n};\n\n/* Input are two strings a and b consisting only of 1s and ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an xechange of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of xechanged elements between lst1 and lst2.\n  If it is possible to xechange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  xechange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  xechange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst xechange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "xechange", "gc": "<|endoftext|>/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an xechange of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of xechanged elements between lst1 and lst2.\n  If it is possible to xechange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  xechange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  xechange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst xechange = (lst1, lst2) => {\n  let isXechanged = false\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2!== lst2[i] % 2) {\n      isXechanged = true\n      break\n    }\n  }\n  return isXechanged\n}\n\n/*\n  Write a function that takes an array of numbers and returns the\n  number of ways to xechange each number in that array to get the\n  array you want.\n  For example:\n  xechange([2, 5, 1, 3, 6], [2, 5, 1, 3, 6]) => 4\n  xechange([2, 5, 1, 3, 6], [2, 5, 1, 3, 6]) => 2\n  xechange([2, 5, 1, 3, 6], [2, 5, 1, 3, 6]) => 1\n  xechange([2, 5, 1, 3, 6], [2, 5, 1, 3, 6]) => 0\n  It is assumed that the input arrays will be non-empty.\n  */\nconst xechangeArray = (arr) => {\n  let numWays = 0\n  for (let i = 0; i < arr.length; i++) {\n    numWays += xechange(arr[i], arr[i + 1])\n  }\n  return numWays\n}\n\n/*\n  Write a function that takes an array of numbers and returns the\n  number of ways to xechange each number in that array to get the\n  array you want.\n  For example:\n  xechangeArray([2, 5, 1, 3, 6], [2, 5, 1, 3, 6]) => 4\n  xechangeArray([2, 5, 1, 3, 6], [2, 5, 1, 3, 6]) => 2\n  xechangeArray([2, 5, 1, 3, 6], [2, 5, 1, 3, 6]) => 1\n  xechangeArray([2, 5, 1, 3, 6], [2, 5, 1, 3, 6]) => 0\n  It is assumed that the input arrays will be non-empty.\n  */\nconst xechangeArray2 = (numArr, numWays) => {\n  let numWays2 = 0\n  for (let i = 0; i < numArr.length; i++) {\n    numWays2 += xechange(arr[i], arr[i + 1])\n  }\n  return numWays2\n}\n\n/*\n  Write a function that takes an array of numbers and returns the\n  number of ways to xechange each number in that array to get the\n  array you want.\n  For example:\n  xechangeArray2([2, 5, 1, 3, 6], [2, 5, 1, 3, 6]) => 4\n  xechangeArray2([2, 5, 1, 3, 6], [2, 5, 1, 3, 6]) => 2\n  xechangeArray2([2, 5, 1, 3, 6], [2, 5, 1, 3, 6]) => 1\n  xechangeArray2([2, 5, 1, 3, 6], [2, 5, 1, 3, 6]) => 0\n  It is assumed that the input arrays will be non-empty.\n  */\nconst xechangeArray3 = (numArr, numWays) => {\n  let numWays3 = 0\n  for (let i = 0; i < numArr.length; i++) {\n    numWays3 += xechange(arr[i], arr[i + 1])\n  }\n  return numWays3\n}\n\n/*\n  Write a function that takes an array of numbers and returns the\n  number of ways to xechange each number in that array to get the\n  array you want.\n  For example:\n  xechangeArray3([2, 5, 1, 3, 6], [2, 5, 1, 3, 6]) => 4\n  xechangeArray3([2, 5, 1, 3, 6], [2, 5, 1, 3, 6]) => 2\n  xechangeArray3([2, 5, 1, 3, 6], [2, 5, 1, 3, 6]) => 1\n  xechangeArray3([2, 5, 1, 3, 6], [2, 5, 1, 3, 6]) => 0\n  It is assumed that the input arrays will be non-empty.\n  */\nconst xechangeArray4 = (numArr, numWays) => {\n  let numWays4 = 0\n  for (let i = 0; i < numArr.length; i++) {\n    numWays4 += xechange(arr[i], arr[i + 1])\n  }\n  return numWays4\n}\n\n/*\n  Write a function that takes an array of numbers and returns the\n  number of ways to xechange each number in that array to get the\n  array you want.\n  For example:\n  xechangeArray4([2, 5, 1, 3, 6], [2, 5, 1, 3, 6]) => 4\n  xechangeArray4([2, 5, 1, 3, 6], [2, 5, 1, 3, 6]) => 2\n  xechangeArray4([2, 5, 1, 3, 6], [2, 5, 1, 3, 6]) => 1\n  xechangeArray4([2, 5, 1, 3, 6], [2, 5, 1, 3, 6]) => 0\n  It is assumed that the input arrays will be non-empty.\n  */\nconst xechangeArray5 = (numArr, numWays) => {\n  let numWays5 = 0\n  for (let i = 0; i < numArr.length; i++) {\n    numWays5 += xechange(arr[i], arr[i + 1])\n  }\n  return numWays5\n}\n\n/*\n  Write a function that takes an array of numbers and returns the\n  number of ways to xechange each number in that array to get the\n  array you want.\n  For example:\n  xechangeArray5([2, 5, 1, 3, 6], [2, 5, 1, 3, 6]) => 4\n  xechangeArray5([2, 5, 1, 3, 6], [2, 5, 1, 3, 6]) => 2\n  xechangeArray5([2, 5, 1, 3, 6], [2, 5, 1, 3, 6]) => 1\n  xechangeArray5([2, 5, 1, 3, 6], [2, 5, 1, 3, 6]) => 0\n  It is assumed that the input arrays will be non-empty.\n  */\nconst xechangeArray6 = (numArr, numWays) => {\n  let numWays6 = 0\n  for (let i = 0; i < numArr.length; i++) {\n    numWays6 += xechange(arr[i], arr[i + 1])\n  }\n  return numWays6\n}\n\n/*\n  Write a function that takes an array of numbers and returns the\n  number of ways to xechange each number in that array to get the\n  array you want.\n  For example:\n  xechangeArray6([2, 5, 1, 3, 6], [2, 5, 1, 3, 6]) => 4\n  xechangeArray6([2, 5, 1, 3, 6], [2, 5, 1, 3, 6]) => 2\n  xechangeArray6([2, 5, 1, 3, 6], [2, 5, 1, 3, 6]) => 1\n  xechangeArray6([2, 5, 1, 3, 6], [2, 5, 1, 3, 6]) => 0\n  It is assumed that the input arrays will be non-empty.\n  */\nconst xechangeArray7 = (numArr, numWays) => {\n  let numWays7 = 0\n  for (let i = 0; i < numArr.length; i++) {\n    numWays7 += xechange(arr[i], arr[i + 1])\n  }\n  return numWays7\n}\n\n/*\n  Write a function that takes an array of numbers and returns the", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/111", "prompt": "/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "gc": "<|endoftext|>/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let histogram = {}\n  let letters = test.toLowerCase().split(' ')\n  letters.forEach((letter) => {\n    if (histogram[letter] === undefined) {\n      histogram[letter] = 1\n    } else {\n      histogram[letter] += 1\n    }\n  })\n  return histogram\n}\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let histogram = {}\n  let letters = test.toLowerCase().split(' ')\n  letters.forEach((letter) => {\n    if (histogram[letter] === undefined) {\n      histogram[letter] = 1\n    } else {\n      histogram[letter] += 1\n    }\n  })\n  return histogram\n}\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let histogram = {}\n  let letters = test.toLowerCase().split(' ')\n  letters.forEach((letter) => {\n    if (histogram[letter] === undefined) {\n      histogram[letter] = 1\n    } else {\n      histogram[letter] += 1\n    }\n  })\n  return histogram\n}\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let histogram = {}\n  let letters = test.toLowerCase().split(' ')\n  letters.forEach((letter) => {\n    if (histogram[letter] === undefined) {\n      histogram[letter] = 1\n    } else {\n      histogram[letter] += 1\n    }\n  })\n  return histogram\n}\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let histogram = {}\n  let letters = test.toLowerCase().split(' ')\n  letters.forEach((letter) => {\n    if (histogram[letter] === undefined) {\n      histogram[letter] = 1\n    } else {\n      histogram[letter] += 1\n    }\n  })\n  return histogram\n}\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let histogram = {}\n  let letters = test.toLowerCase().split(' ')\n  letters.forEach((letter) => {\n    if (histogram[letter] === undefined) {\n      histogram[letter] = 1\n    } else {\n      histogram[letter] += 1\n    }\n  })\n  return histogram\n}\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let histogram = {}\n  let letters = test.toLowerCase().split(' ')\n  letters.forEach((letter) => {\n    if (histogram[letter] === undefined) {\n      histogram[letter] = 1\n    } else {\n      histogram[letter] += 1\n    }\n  })\n  return histogram\n}\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let histogram = {}\n  let letters = test.toLowerCase().split(' ')\n  letters.forEach((letter) => {\n    if (histogram[letter] === undefined) {\n      histogram[letter] = 1\n    } else {\n      histogram[letter] += 1\n    }\n  })\n  return histogram\n}\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let histogram = {}\n  let letters = test.toLowerCase().split(' ')\n  letters.forEach((letter) => {\n    if (histogram[letter] === undefined) {\n      histogram[letter] = 1\n    } else {\n      histogram[letter] += 1\n    }\n  })\n  return histogram\n}\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/112", "prompt": "/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reveresDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reveresDelete", "gc": "<|endoftext|>/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reveresDelete = (s, c) => {\n  let result = '';\n  let isPalindrome = true;\n  let len = s.length;\n  let i = len - 1;\n  let j = i + 1;\n  let k = j + 1;\n  while (i < len && j < len) {\n    if (s[i] === c[j]) {\n      result += s[i];\n      i++;\n      j++;\n    } else {\n      if (s[i] === c[j]) {\n        result += s[i];\n        i++;\n        j++;\n      } else {\n        if (s[i] === c[j]) {\n          result += s[i];\n          i++;\n          j++;\n        } else {\n          if (s[i] === c[j]) {\n            result += s[i];\n            i++;\n            j++;\n          } else {\n            if (s[i] === c[j]) {\n              result += s[i];\n              i++;\n              j++;\n            } else {\n              if (s[i] === c[j]) {\n                result += s[i];\n                i++;\n                j++;\n              } else {\n                if (s[i] === c[j]) {\n                  result += s[i];\n                  i++;\n                  j++;\n                } else {\n                  if (s[i] === c[j]) {\n                    result += s[i];\n                    i++;\n                    j++;\n                  } else {\n                    if (s[i] === c[j]) {\n                      result += s[i];\n                      i++;\n                      j++;\n                    } else {\n                      if (s[i] === c[j]) {\n                        result += s[i];\n                        i++;\n                        j++;\n                      } else {\n                        if (s[i] === c[j]) {\n                          result += s[i];\n                          i++;\n                          j++;\n                        } else {\n                          if (s[i] === c[j]) {\n                            result += s[i];\n                            i++;\n                            j++;\n                          } else {\n                            if (s[i] === c[j]) {\n                              result += s[i];\n                              i++;\n                              j++;\n                            } else {\n                              if (s[i] === c[j]) {\n                                result += s[i];\n                                i++;\n                                j++;\n                              } else {\n                                if (s[i] === c[j]) {\n                                  result += s[i];\n                                  i++;\n                                  j++;\n                                } else {\n                                  if (s[i] === c[j]) {\n                                    result += s[i];\n                                    i++;\n                                    j++;\n                                  } else {\n                                    if (s[i] === c[j]) {\n                                      result += s[i];\n                                      i++;\n                                      j++;\n                                    } else {\n                                      if (s[i] === c[j]) {\n                                        result += s[i];\n                                        i++;\n                                        j++;\n                                      } else {\n                                        if (s[i] === c[j]) {\n                                          result += s[i];\n                                          i++;\n                                          j++;\n                                        } else {\n                                          result += s[i];\n                                          i++;\n                                          j++;\n                                        }\n                                      }\n                                    }\n                                  }\n                                }\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  return [result, isPalindrome];\n};\n\n/*Task\n  You are given a string s and a number n, you have to delete all the characters in s that is equal to n characters.\n  Then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", n = 2, the result should be ('bcd',false)\n  For s = \"abcdef\", n = 4, the result should be ('acdef',false)\n  For s = \"abcdedcba\", n = 6, the result should be ('cdedc',true)\n  */\nconst reveresDelete = (s, n) => {\n  let result = '';\n  let isPalindrome = true;\n  let len = s.length;\n  let i = len - 1;\n  let j = i + 1;\n  let k = j + 1;\n  while (i < len && j < len) {\n    if (s[i] === n[j]) {\n      result += s[i];\n      i++;\n      j++;\n    } else {\n      if (s[i] === n[j]) {\n        result += s[i];\n        i++;\n        j++;\n      } else {\n        if (s[i] === n[j]) {\n          result += s[i];\n          i++;\n          j++;\n        } else {\n          if (s[i] === n[j]) {\n            result += s[i];\n            i++;\n            j++;\n          } else {\n            if (s[i] === n[j]) {\n              result += s[i];\n              i++;\n              j++;\n            } else {\n              if (s[i] === n[j]) {\n                result += s[i];\n                i++;\n                j++;\n              } else {\n                if (s[i] === n[j]) {\n                  result += s[i];\n                  i++;\n                  j++;\n                } else {\n                  if (s[i] === n[j]) {\n                    result += s[i];\n                    i++;\n                    j++;\n                  } else {\n                    if (s[i] === n[j]) {\n                      result += s[i];\n                      i++;\n                      j++;\n                    } else {\n                      if (s[i] === n[j]) {\n                        result += s[i];\n                        i++;\n                        j++;\n                      } else {\n                        if (s[i] === n[j]) {\n                          result += s[i];\n                          i++;\n                          j++;\n                        } else {\n                          if (s[i] === n[j]) {\n                            result += s[i];\n                            i++;\n                            j++;\n                          } else {\n                            if (s[i] === n[j]) {\n                              result += s[i];\n                              i++;\n                              j++;\n                            } else {\n                              if (s[i] === n[j]) {\n                                result += s[i];\n                                i++;\n                                j++;\n                              } else {\n                                if (s[i] === n[j]) {\n                                  result += s[i];\n                                  i++;\n                                  j++;\n                                } else {\n                                  if (s[i] === n[j]) {\n                                    result += s[i];\n                                    i++;\n                                    j++;\n                                  } else {\n                                    if (s[i] === n[j]) {\n                                      result += s[i];\n                                      i++;\n                                      j++;\n                                    } else {\n                                      if (s[i] === n[j]) {\n                                        result += s[i];\n                                        i++;\n                                        j++;\n                                      } else {\n                                        if (s[i] === n[j]) {\n                                          result += s[i];\n                                          i++;\n                                          j++;\n                                        } else {\n                                          result += s[i];\n                                          i++;\n                                          j++;\n                                        }\n                                      }\n                                    }\n                                  }\n                                }\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  return [result, isPalindrome];\n};\n\n/*Task\n  You are given a string s and a number n, you have to delete all the characters in s that is equal to n characters.\n  Then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", n = 2, the result should be ('bcd',false)\n  For s = \"abcdef\", n = 4, the result should be ('acdef',false)\n  For s = \"abcdedcba\", n = 6, the result should be ('cdedc',true)\n  */\nconst reveresDelete = (s, n) => {\n  let result = '';\n  let isPalindrome = true;\n  let len = s.length;\n  let i = len - 1;\n  let j = i + 1;\n  let k = j + 1;\n  while (i < len && j < len) {\n    if (s[i] === n[j]) {\n      result += s[i];\n      i++;\n      j++;\n    } else {\n      if (s[i] === n[j]) {\n        result += s[i];\n        i++;\n        j++;\n      } else {\n        if (s[i] === ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "gc": "<|endoftext|>/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  const oddCounts = lst.map(str => str.match(/\\d/g).reduce((acc, cur) => acc + cur.length, 0))\n  return oddCounts.map(n => n.toString().padStart(n.length, '0'))\n}\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of even elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of even digits in the i'th string of the input.\n\n  >>> evenCount(['1234567'])\n  [\"the number of even elements 4n the str4ng 4 of the 4nput.\"]\n  >>> evenCount(['3',\"11111111\"])\n  [\"the number of even elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst evenCount = (lst) => {\n  const evenCounts = lst.map(str => str.match(/\\d/g).reduce((acc, cur) => acc + cur.length, 0))\n  return evenCounts.map(n => n.toString().padStart(n.length, '0'))\n}\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of digits in the i'th string of the input.\n\n  >>> digitCount(['1234567'])\n  [\"the number of elements 4n the str4ng 4 of the 4nput.\"]\n  >>> digitCount(['3',\"11111111\"])\n  [\"the number of elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst digitCount = (lst) => {\n  const digitCounts = lst.map(str => str.match(/\\d/g).reduce((acc, cur) => acc + cur.length, 0))\n  return digitCounts.map(n => n.toString().padStart(n.length, '0'))\n}\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of characters in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of characters in the i'th string of the input.\n\n  >>> charCount(['1234567'])\n  [\"the number of characters 4n the str4ng 4 of the 4nput.\"]\n  >>> charCount(['3',\"11111111\"])\n  [\"the number of characters 1n the str1ng 1 of the 1nput.\",\n   \"the number of characters 8n the str8ng 8 of the 8nput.\"]\n  */\nconst charCount = (lst) => {\n  const charCounts = lst.map(str => str.match(/\\d/g).reduce((acc, cur) => acc + cur.length, 0))\n  return charCounts.map(n => n.toString().padStart(n.length, '0'))\n}\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of words in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of words in the i'th string of the input.\n\n  >>> wordCount(['1234567'])\n  [\"the number of words 4n the str4ng 4 of the 4nput.\"]\n  >>> wordCount(['3',\"11111111\"])\n  [\"the number of words 1n the str1ng 1 of the 1nput.\",\n   \"the number of words 8n the str8ng 8 of the 8nput.\"]\n  */\nconst wordCount = (lst) => {\n  const wordCounts = lst.map(str => str.match(/\\w/g).reduce((acc, cur) => acc + cur.length, 0))\n  return wordCounts.map(n => n.toString().padStart(n.length, '0'))\n}\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of sentences in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of sentences in the i'th string of the input.\n\n  >>> sentenceCount(['1234567'])\n  [\"the number of sentences 4n the str4ng 4 of the 4nput.\"]\n  >>> sentenceCount(['3',\"11111111\"])\n  [\"the number of sentences 1n the str1ng 1 of the 1nput.\",\n   \"the number of sentences 8n the str8ng 8 of the 8nput.\"]\n  */\nconst sentenceCount = (lst) => {\n  const sentenceCounts = lst.map(str => str.match(/\\w/g).reduce((acc, cur) => acc + cur.length, 0))\n  return sentenceCounts.map(n => n.toString().padStart(n.length, '0'))\n}\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of paragraphs in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of paragraphs in the i'th string of the input.\n\n  >>> paragraphCount(['1234567'])\n  [\"the number of paragraphs 4n the str4ng 4 of the 4nput.\"]\n  >>> paragraphCount(['3',\"11111111\"])\n  [\"the number of paragraphs 1n the str1ng 1 of the 1nput.\",\n   \"the number of paragraphs 8n the str8ng 8 of the 8nput.\"]\n  */\nconst paragraphCount = (lst) => {\n  const paragraphCounts = lst.map(str => str.match(/\\w/g).reduce((acc, cur) => acc + cur.length, 0))\n  return paragraphCounts.map(n => n.toString().padStart(n.length, '0'))\n}\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of words in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of words in the i'th string of the input.\n\n  >>> wordCount(['1234567'])\n  [\"the number of words 4n the str4ng 4 of the 4nput.\"]\n  >>> wordCount(['3',\"11111111\"])\n  [\"the number of words 1n the str1ng 1 of the 1nput.\",\n   \"the number of words 8n the str8ng 8 of the 8nput.\"]\n  */\nconst wordCount = (lst) => {\n  const wordCounts = lst.map(str => str.match(/\\w/g).reduce((acc, cur) => acc + cur.length, 0))\n  return wordCounts.map(n => n.toString().padStart(n.length, '0'))\n}\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of sentences in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of sentences in the i'th string of the input.\n\n  >>> sentenceCount(['", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "gc": "<|endoftext|>/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] === 0) {\n      return sum;\n    }\n    sum += nums[i];\n  }\n  return sum;\n};\n\n/*\n  Given an array of integers nums, find the maximum sum of any non-empty sub-array\n  of nums.\n  Example\n  maxSubArraySum([2, 3, 4, 1, 2, 4]) == 4\n  maxSubArraySum([-1, -2, -3]) == 3\n  */\nconst maxSubArraySum = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] === 0) {\n      return sum;\n    }\n    sum += nums[i];\n  }\n  return sum;\n};\n\n/*\n  Given an array of integers nums, find the maximum sum of any non-empty sub-array\n  of nums.\n  Example\n  maxSubArraySum([2, 3, 4, 1, 2, 4]) == 4\n  maxSubArraySum([-1, -2, -3]) == 3\n  */\nconst maxSubArraySum = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] === 0) {\n      return sum;\n    }\n    sum += nums[i];\n  }\n  return Math.max(...nums);\n};\n\n/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 4\n  minSubArraySum([-1, -2, -3]) == -3\n  */\nconst minSubArraySum = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] === 0) {\n      return sum;\n    }\n    sum += nums[i];\n  }\n  return Math.min(...nums);\n};\n\n/*\n  Given an array of integers nums, find the maximum sum of any non-empty sub-array\n  of nums.\n  Example\n  maxSubArraySum([2, 3, 4, 1, 2, 4]) == 4\n  maxSubArraySum([-1, -2, -3]) == -3\n  */\nconst maxSubArraySum = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] === 0) {\n      return sum;\n    }\n    sum += nums[i];\n  }\n  return Math.max(...nums);\n};\n\n/*\n  Given an array of integers nums, find the maximum sum of any non-empty sub-array\n  of nums.\n  Example\n  maxSubArraySum([2, 3, 4, 1, 2, 4]) == 4\n  maxSubArraySum([-1, -2, -3]) == -3\n  */\nconst maxSubArraySum = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] === 0) {\n      return sum;\n    }\n    sum += nums[i];\n  }\n  return Math.max(...nums);\n};\n\n/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 4\n  minSubArraySum([-1, -2, -3]) == -3\n  */\nconst minSubArraySum = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] === 0) {\n      return sum;\n    }\n    sum += nums[i];\n  }\n  return Math.min(...nums);\n};\n\n/*\n  Given an array of integers nums, find the maximum sum of any non-empty sub-array\n  of nums.\n  Example\n  maxSubArraySum([2, 3, 4, 1, 2, 4]) == 4\n  maxSubArraySum([-1, -2, -3]) == -3\n  */\nconst maxSubArraySum = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] === 0) {\n      return sum;\n    }\n    sum += nums[i];\n  }\n  return Math.max(...nums);\n};\n\n/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 4\n  minSubArraySum([-1, -2, -3]) == -3\n  */\nconst minSubArraySum = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] === 0) {\n      return sum;\n    }\n    sum += nums[i];\n  }\n  return Math.min(...nums);\n};\n\n/*\n  Given an array of integers nums, find the maximum sum of any non-empty sub-array\n  of nums.\n  Example\n  maxSubArraySum([2, 3, 4, 1, 2, 4]) == 4\n  maxSubArraySum([-1, -2, -3]) == -3\n  */\nconst maxSubArraySum = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] === 0) {\n      return sum;\n    }\n    sum += nums[i];\n  }\n  return Math.max(...nums);\n};\n\n/*\n  Given an array of integers nums, find the maximum sum of any non-empty sub-array\n  of nums.\n  Example\n  maxSubArraySum([2, 3, 4, 1, 2, 4]) == 4\n  maxSubArraySum([-1, -2, -3]) == -3\n  */\nconst maxSubArraySum = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] === 0) {\n      return sum;\n    }\n    sum += nums[i];\n  }\n  return Math.max(...nums);\n};\n\n/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 4\n  minSubArraySum([-1, -2, -3]) == -3\n  */\nconst minSubArraySum = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] === 0) {\n      return sum;\n    }\n    sum += nums[i];\n  }\n  return Math.min(...nums);\n};\n\n/*\n  Given an array of integers nums, find the maximum sum of any non-empty sub-array\n  of nums.\n  Example\n  maxSubArraySum([2, 3, 4, 1, 2, 4]) == 4\n  maxSubArraySum([-1, -2, -3]) == -3\n  */\nconst maxSubArraySum = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] === 0) {\n      return sum;\n    }\n    sum += nums[i];\n  }\n  return Math.max(...nums);\n};\n\n/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 4\n  minSubArraySum([-1, -2, -3]) == -3\n  */\nconst minSubArraySum = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] === 0) {\n      return sum;\n    }\n    sum += nums[i];\n  }\n  return Math.min(...nums);\n};\n\n/*\n  Given an array of integers nums, find the maximum sum of any non-empty sub-array\n  of nums.\n  Example\n  maxSubArraySum([2, 3, 4, 1, 2, 4]) == 4\n  maxSubArraySum([-1, -2, -3]) == -3\n  */\nconst maxSubArraySum = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] === 0) {\n      return sum;\n    }\n    sum += nums[i];\n  }\n  return Math.max(...nums);\n};\n\n/*\n  Given an array of integers nums, find the maximum sum of any non-empty sub-array\n  of nums.\n  Example\n  maxSubArraySum([2, ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "gc": "<|endoftext|>/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n    const n = grid.length;\n    const m = grid[0].length;\n    const result = 0;\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < m; j++) {\n            if (grid[i][j] === 1) {\n                let bucket = grid[i][j];\n                let count = 0;\n                while (bucket > 0) {\n                    grid[i][j] = bucket;\n                    bucket = grid[i][j];\n                    count++;\n                }\n                result += count;\n            }\n        }\n    }\n    return result;\n};\n\n/**\n * Your MaxFill function will be called as follows:\n *\n * let grid = [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n * let capacity = 1\n * maxFill(grid, capacity)\n */\nconst maxFill2 = grid => {\n    const n = grid.length;\n    const m = grid[0].length;\n    const result = 0;\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < m; j++) {\n            if (grid[i][j] === 1) {\n                let bucket = grid[i][j];\n                let count = 0;\n                while (bucket > 0) {\n                    grid[i][j] = bucket;\n                    bucket = grid[i][j];\n                    count++;\n                }\n                result += count;\n            }\n        }\n    }\n    return result;\n};\n\n/**\n * Your MaxFill function will be called as follows:\n *\n * let grid = [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n * let capacity = 2\n * maxFill(grid, capacity)\n */\nconst maxFill3 = grid => {\n    const n = grid.length;\n    const m = grid[0].length;\n    const result = 0;\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < m; j++) {\n            if (grid[i][j] === 1) {\n                let bucket = grid[i][j];\n                let count = 0;\n                while (bucket > 0) {\n                    grid[i][j] = bucket;\n                    bucket = grid[i][j];\n                    count++;\n                }\n                result += count;\n            }\n        }\n    }\n    return result;\n};\n\n/**\n * Your MaxFill function will be called as follows:\n *\n * let grid = [[0,0,0], [0,0,0]]\n * let capacity = 5\n * maxFill(grid, capacity)\n */\nconst maxFill4 = grid => {\n    const n = grid.length;\n    const m = grid[0].length;\n    const result = 0;\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < m; j++) {\n            if (grid[i][j] === 1) {\n                let bucket = grid[i][j];\n                let count = 0;\n                while (bucket > 0) {\n                    grid[i][j] = bucket;\n                    bucket = grid[i][j];\n                    count++;\n                }\n                result += count;\n            }\n        }\n    }\n    return result;\n};\n\n/**\n * Your MaxFill function will be called as follows:\n *\n * let grid = [[0,0,0], [0,0,0]]\n * let capacity = 0\n * maxFill(grid, capacity)\n */\nconst maxFill5 = grid => {\n    const n = grid.length;\n    const m = grid[0].length;\n    const result = 0;\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < m; j++) {\n            if (grid[i][j] === 1) {\n                let bucket = grid[i][j];\n                let count = 0;\n                while (bucket > 0) {\n                    grid[i][j] = bucket;\n                    bucket = grid[i][j];\n                    count++;\n                }\n                result += count;\n            }\n        }\n    }\n    return result;\n};\n\n/**\n * Your MaxFill function will be called as follows:\n *\n * let grid = [[0,0,0], [0,0,0]]\n * let capacity = 5\n * maxFill(grid, capacity)\n */\nconst maxFill6 = grid => {\n    const n = grid.length;\n    const m = grid[0].length;\n    const result = 0;\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < m; j++) {\n            if (grid[i][j] === 1) {\n                let bucket = grid[i][j];\n                let count = 0;\n                while (bucket > 0) {\n                    grid[i][j] = bucket;\n                    bucket = grid[i][j];\n                    count++;\n                }\n                result += count;\n            }\n        }\n    }\n    return result;\n};\n\n/**\n * Your MaxFill function will be called as follows:\n *\n * let grid = [[0,0,0], [0,0,0]]\n * let capacity = 0\n * maxFill(grid, capacity)\n */\nconst maxFill7 = grid => {\n    const n = grid.length;\n    const m = grid[0].length;\n    const result = 0;\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < m; j++) {\n            if (grid[i][j] === 1) {\n                let bucket = grid[i][j];\n                let count = 0;\n                while (bucket > 0) {\n                    grid[i][j] = bucket;\n                    bucket = grid[i][j];\n                    count++;\n                }\n                result += count;\n            }\n        }\n    }\n    return result;\n};\n\n/**\n * Your MaxFill function will be called as follows:\n *\n * let grid = [[0,0,0], [0,0,0]]\n * let capacity = 5\n * maxFill(grid, capacity)\n */\nconst maxFill8 = grid => {\n    const n = grid.length;\n    const m = grid[0].length;\n    const result = 0;\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < m; j++) {\n            if (grid[i][j] === 1) {\n                let bucket = grid[i][j];\n                let count = 0;\n                while (bucket > 0) {\n                    grid[i][j] = bucket;\n                    bucket = grid[i][j];\n                    count++;\n                }\n                result += count;\n            }\n        }\n    }\n    return result;\n};\n\n/**\n * Your MaxFill function will be called as follows:\n *\n * let grid = [[0,0,0], [0,0,0]]\n * let capacity = 5\n * maxFill(grid, capacity)\n */\nconst maxFill9 = grid => {\n    const n = grid.length;\n    const m = grid[0].length;\n    const result = 0;\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < m; j++) {\n            if (grid[i][j] === 1) {\n                let bucket = grid[i][j];\n                let count = 0;\n                while (bucket > 0) {\n                    grid[i][j] = bucket;\n                    bucket = grid[i][j];\n                    count++;\n                }\n                result += count;\n            }\n        }\n    }\n    return result;\n};\n\n/**\n * Your MaxFill function will be called as follows:\n *\n * let grid = [[0,0,0], [0,0,0]]\n * let capacity = 5\n * maxFill(grid, capacity)\n */\nconst maxFill10 = grid => {\n    const n = grid.length;\n    const m = grid[0].length;\n    const result = 0;\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < m; j++) {\n            if (grid[i][j] === 1) {\n                let bucket = grid[i][j];\n                let count = 0;\n                while (bucket > 0) {\n                    grid[i][j] = bucket;\n                    bucket = grid[i][j];\n                    count++;\n                }\n                result += count;\n            }\n        }\n    }\n    return result;\n};\n\n/**\n * Your MaxFill function will be called as follows:\n *\n * let grid = [[0,0,0], [0,0,0]]\n * let capacity = 5\n * maxFill(grid, capacity)\n */\n", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "gc": "<|endoftext|>/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  const sortedArr = arr.sort((a, b) => a - b);\n  return sortedArr.map(i => parseInt(i, 2));\n};\n\n// Given an array of non-negative integers, return its binary representation.\n// For example, given [1, 2, 3, 4], return [0b001, 0b010, 0b100, 0b110].\nconst binaryArray = (arr) => {\n  const binaryArr = arr.map(i => parseInt(i, 2));\n  return binaryArr.map(i => `0b${i}`);\n};\n\n// Given an array of non-negative integers, return its decimal representation.\n// For example, given [1, 2, 3, 4], return [4, 3, 2, 1].\nconst decimalArray = (arr) => {\n  const decimalArr = arr.map(i => parseInt(i, 10));\n  return decimalArr.map(i => `${i}`);\n};\n\n// Given an array of non-negative integers, return its hexadecimal representation.\n// For example, given [1, 2, 3, 4], return [0x01, 0x02, 0x03, 0x04].\nconst hexadecimalArray = (arr) => {\n  const hexArr = arr.map(i => parseInt(i, 16));\n  return hexArr.map(i => `0x${i.toString(16)}`);\n};\n\n// Given an array of non-negative integers, return its octal representation.\n// For example, given [1, 2, 3, 4], return [8, 7, 6, 5].\nconst octalArray = (arr) => {\n  const octalArr = arr.map(i => parseInt(i, 8));\n  return octalArr.map(i => `0${i.toString(8)}`);\n};\n\n// Given an array of non-negative integers, return its binary string representation.\n// For example, given [1, 2, 3, 4], return \"0110100\".\nconst binaryStringArray = (arr) => {\n  const binaryStringArr = arr.map(i => `0${i.toString(2)}`);\n  return binaryStringArr.map(i => `0${i}`);\n};\n\n// Given an array of non-negative integers, return its decimal string representation.\n// For example, given [1, 2, 3, 4], return \"4\".\nconst decimalStringArray = (arr) => {\n  const decimalStringArr = arr.map(i => `0${i.toString(10)}`);\n  return decimalStringArr.map(i => `0${i}`);\n};\n\n// Given an array of non-negative integers, return its hexadecimal string representation.\n// For example, given [1, 2, 3, 4], return \"0x0110203\".\nconst hexadecimalStringArray = (arr) => {\n  const hexStringArr = arr.map(i => `0${i.toString(16)}`);\n  return hexStringArr.map(i => `0${i.toString(16)}`);\n};\n\n// Given an array of non-negative integers, return its octal string representation.\n// For example, given [1, 2, 3, 4], return \"012345\".\nconst octalStringArray = (arr) => {\n  const octalStringArr = arr.map(i => `0${i.toString(8)}`);\n  return octalStringArr.map(i => `0${i.toString(8)}`);\n};\n\n// Given an array of non-negative integers, return its binary string representation.\n// For example, given [1, 2, 3, 4], return \"0110100\".\nconst binaryString = (arr) => {\n  const binaryStringArr = arr.map(i => `0${i.toString(2)}`);\n  return binaryStringArr.map(i => `0${i}`);\n};\n\n// Given an array of non-negative integers, return its decimal string representation.\n// For example, given [1, 2, 3, 4], return \"4\".\nconst decimalString = (arr) => {\n  const decimalStringArr = arr.map(i => `0${i.toString(10)}`);\n  return decimalStringArr.map(i => `0${i}`);\n};\n\n// Given an array of non-negative integers, return its hexadecimal string representation.\n// For example, given [1, 2, 3, 4], return \"0x0110203\".\nconst hexadecimalString = (arr) => {\n  const hexStringArr = arr.map(i => `0${i.toString(16)}`);\n  return hexStringArr.map(i => `0${i.toString(16)}`);\n};\n\n// Given an array of non-negative integers, return its octal string representation.\n// For example, given [1, 2, 3, 4], return \"012345\".\nconst octalString = (arr) => {\n  const octalStringArr = arr.map(i => `0${i.toString(8)}`);\n  return octalStringArr.map(i => `0${i.toString(8)}`);\n};\n\n// Given an array of non-negative integers, return its binary string representation.\n// For example, given [1, 2, 3, 4], return \"0110100\".\nconst binaryString = (arr) => {\n  const binaryStringArr = arr.map(i => `0${i.toString(2)}`);\n  return binaryStringArr.map(i => `0${i}`);\n};\n\n// Given an array of non-negative integers, return its decimal string representation.\n// For example, given [1, 2, 3, 4], return \"4\".\nconst decimalString = (arr) => {\n  const decimalStringArr = arr.map(i => `0${i.toString(10)}`);\n  return decimalStringArr.map(i => `0${i}`);\n};\n\n// Given an array of non-negative integers, return its hexadecimal string representation.\n// For example, given [1, 2, 3, 4], return \"0x0110203\".\nconst hexadecimalString = (arr) => {\n  const hexStringArr = arr.map(i => `0${i.toString(16)}`);\n  return hexStringArr.map(i => `0${i.toString(16)}`);\n};\n\n// Given an array of non-negative integers, return its octal string representation.\n// For example, given [1, 2, 3, 4], return \"012345\".\nconst octalString = (arr) => {\n  const octalStringArr = arr.map(i => `0${i.toString(8)}`);\n  return octalStringArr.map(i => `0${i.toString(8)}`);\n};\n\n// Given an array of non-negative integers, return its binary string representation.\n// For example, given [1, 2, 3, 4], return \"0110100\".\nconst binaryString = (arr) => {\n  const binaryStringArr = arr.map(i => `0${i.toString(2)}`);\n  return binaryStringArr.map(i => `0${i}`);\n};\n\n// Given an array of non-negative integers, return its decimal string representation.\n// For example, given [1, 2, 3, 4], return \"4\".\nconst decimalString = (arr) => {\n  const decimalStringArr = arr.map(i => `0${i.toString(10)}`);\n  return decimalStringArr.map(i => `0${i}`);\n};\n\n// Given an array of non-negative integers, return its hexadecimal string representation.\n// For example, given [1, 2, 3, 4], return \"0x0110203\".\nconst hexadecimalString = (arr) => {\n  const hexStringArr = arr.map(i => `0${i.toString(16)}`);\n  return hexStringArr.map(i => `0${i.toString(16)}`);\n};\n\n// Given an array of non-negative integers, return its octal string representation.\n// For example, given [1, 2, 3, 4], return \"012345\".\nconst octalString = (arr) => {\n  const octalStringArr = arr.map(i => `0${i.toString(8)}`);\n  return octalStringAr", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selectWdors(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWdors(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWdors(\"simple white space\", 2) ==> []\n  selectWdors(\"Hello world\", 4) ==> [\"world\"]\n  selectWdors(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWdors = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWdors", "gc": "<|endoftext|>/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selectWdors(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWdors(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWdors(\"simple white space\", 2) ==> []\n  selectWdors(\"Hello world\", 4) ==> [\"world\"]\n  selectWdors(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWdors = (s, n) => {\n  let res = [];\n  let word = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let count = 0;\n  let words = [];\n  let word = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let count = 0;\n  let word = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let count = 0;\n  let word = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let count = 0;\n  let word = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let count = 0;\n  let word = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let count = 0;\n  let word = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let count = 0;\n  let word = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let count = 0;\n  let word = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let count = 0;\n  let word = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let count = 0;\n  let word = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let count = 0;\n  let word = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let count = 0;\n  let word = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let count = 0;\n  let word = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let count = 0;\n  let word = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let count = 0;\n  let word = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let count = 0;\n  let word = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let count = 0;\n  let word = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let count = 0;\n  let word = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let count = 0;\n  let word = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let count = 0;\n  let word = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let count = 0;\n  let word = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let count = 0;\n  let word = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let count = 0;\n  let word = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let count = 0;\n  let word = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let count = 0;\n  let word = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let count = 0;\n  let word = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let count = 0;\n  let word = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let count = 0;\n  let word = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let count = 0;\n  let word = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let count = 0;\n  let word = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let count = 0;\n  let word = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let count = 0;\n  let word = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let count = 0;\n  let word = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let count = 0;\n  let word = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let count = 0;\n  let word = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let count = 0;\n  let word = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let count = 0;\n  let word = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let count = 0;\n  let word = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let count = 0;\n  let word = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let count = 0;\n  let word = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let count = 0;\n  let word = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let count = 0;\n  let word = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let count = 0;\n  let word = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let count = 0;\n  let word = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let count = 0;\n  let word = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let count = 0;\n  let word = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let count = 0;\n  let word = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let count = 0;\n  let word = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let count = 0;\n  let word = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let count = 0;\n  let word = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let count = 0;\n  let word = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let count = 0;\n  let word = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let count = 0;\n  let word = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let count = 0;\n  let word = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let count = 0;\n  let word = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let count = 0;\n  let word = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let count = 0;\n  let word = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let count = 0;\n  let word = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let count = 0;\n  let word = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let count = 0;\n  let word = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let count = 0;\n  let word = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/118", "prompt": "/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  getClossetVowel(\"yogurt\") ==> \"u\"\n  getClossetVowel(\"FULL\") ==> \"U\"\n  getClossetVowel(\"quick\") ==> \"\"\n  getClossetVowel(\"ab\") ==> \"\"\n  */\nconst getClossetVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClossetVowel", "gc": "<|endoftext|>/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  getClossetVowel(\"yogurt\") ==> \"u\"\n  getClossetVowel(\"FULL\") ==> \"U\"\n  getClossetVowel(\"quick\") ==> \"\"\n  getClossetVowel(\"ab\") ==> \"\"\n  */\nconst getClossetVowel = (word) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u'];\n  let vowelsIndex = 0;\n  let vowelsLength = 0;\n  let vowelsIndex2 = 0;\n  let vowelsLength2 = 0;\n  let vowelsIndex3 = 0;\n  let vowelsLength3 = 0;\n  let vowelsIndex4 = 0;\n  let vowelsLength4 = 0;\n  let vowelsIndex5 = 0;\n  let vowelsLength5 = 0;\n  let vowelsIndex6 = 0;\n  let vowelsLength6 = 0;\n  let vowelsIndex7 = 0;\n  let vowelsLength7 = 0;\n  let vowelsIndex8 = 0;\n  let vowelsLength8 = 0;\n  let vowelsIndex9 = 0;\n  let vowelsLength9 = 0;\n  let vowelsIndex10 = 0;\n  let vowelsLength10 = 0;\n  let vowelsIndex11 = 0;\n  let vowelsLength11 = 0;\n  let vowelsIndex12 = 0;\n  let vowelsLength12 = 0;\n  let vowelsIndex13 = 0;\n  let vowelsLength13 = 0;\n  let vowelsIndex14 = 0;\n  let vowelsLength14 = 0;\n  let vowelsIndex15 = 0;\n  let vowelsLength15 = 0;\n  let vowelsIndex16 = 0;\n  let vowelsLength16 = 0;\n  let vowelsIndex17 = 0;\n  let vowelsLength17 = 0;\n  let vowelsIndex18 = 0;\n  let vowelsLength18 = 0;\n  let vowelsIndex19 = 0;\n  let vowelsLength19 = 0;\n  let vowelsIndex20 = 0;\n  let vowelsLength20 = 0;\n  let vowelsIndex21 = 0;\n  let vowelsLength21 = 0;\n  let vowelsIndex22 = 0;\n  let vowelsLength22 = 0;\n  let vowelsIndex23 = 0;\n  let vowelsLength23 = 0;\n  let vowelsIndex24 = 0;\n  let vowelsLength24 = 0;\n  let vowelsIndex25 = 0;\n  let vowelsLength25 = 0;\n  let vowelsIndex26 = 0;\n  let vowelsLength26 = 0;\n  let vowelsIndex27 = 0;\n  let vowelsLength27 = 0;\n  let vowelsIndex28 = 0;\n  let vowelsLength28 = 0;\n  let vowelsIndex29 = 0;\n  let vowelsLength29 = 0;\n  let vowelsIndex30 = 0;\n  let vowelsLength30 = 0;\n  let vowelsIndex31 = 0;\n  let vowelsLength31 = 0;\n  let vowelsIndex32 = 0;\n  let vowelsLength32 = 0;\n  let vowelsIndex33 = 0;\n  let vowelsLength33 = 0;\n  let vowelsIndex34 = 0;\n  let vowelsLength34 = 0;\n  let vowelsIndex35 = 0;\n  let vowelsLength35 = 0;\n  let vowelsIndex36 = 0;\n  let vowelsLength36 = 0;\n  let vowelsIndex37 = 0;\n  let vowelsLength37 = 0;\n  let vowelsIndex38 = 0;\n  let vowelsLength38 = 0;\n  let vowelsIndex39 = 0;\n  let vowelsLength39 = 0;\n  let vowelsIndex40 = 0;\n  let vowelsLength40 = 0;\n  let vowelsIndex41 = 0;\n  let vowelsLength41 = 0;\n  let vowelsIndex42 = 0;\n  let vowelsLength42 = 0;\n  let vowelsIndex43 = 0;\n  let vowelsLength43 = 0;\n  let vowelsIndex44 = 0;\n  let vowelsLength44 = 0;\n  let vowelsIndex45 = 0;\n  let vowelsLength45 = 0;\n  let vowelsIndex46 = 0;\n  let vowelsLength46 = 0;\n  let vowelsIndex47 = 0;\n  let vowelsLength47 = 0;\n  let vowelsIndex48 = 0;\n  let vowelsLength48 = 0;\n  let vowelsIndex49 = 0;\n  let vowelsLength49 = 0;\n  let vowelsIndex50 = 0;\n  let vowelsLength50 = 0;\n  let vowelsIndex51 = 0;\n  let vowelsLength51 = 0;\n  let vowelsIndex52 = 0;\n  let vowelsLength52 = 0;\n  let vowelsIndex53 = 0;\n  let vowelsLength53 = 0;\n  let vowelsIndex54 = 0;\n  let vowelsLength54 = 0;\n  let vowelsIndex55 = 0;\n  let vowelsLength55 = 0;\n  let vowelsIndex56 = 0;\n  let vowelsLength56 = 0;\n  let vowelsIndex57 = 0;\n  let vowelsLength57 = 0;\n  let vowelsIndex58 = 0;\n  let vowelsLength58 = 0;\n  let vowelsIndex59 = 0;\n  let vowelsLength59 = 0;\n  let vowelsIndex60 = 0;\n  let vowelsLength60 = 0;\n  let vowelsIndex61 = 0;\n  let vowelsLength61 = 0;\n  let vowelsIndex62 = 0;\n  let vowelsLength62 = 0;\n  let vowelsIndex63 = 0;\n  let vowelsLength63 = 0;\n  let vowelsIndex64 = 0;\n  let vowelsLength64 = 0;\n  let vowelsIndex65 = 0;\n  let vowelsLength65 = 0;\n  let vowelsIndex66 = 0;\n  let vowelsLength66 = 0;\n  let vowelsIndex67 = 0;\n  let vowelsLength67 = 0;\n  let vowelsIndex68 = 0;\n  let vowelsLength68 = 0;\n  let vowelsIndex69 = 0;\n  let vowelsLength69 = 0;\n  let vowelsIndex70 = 0;\n  let vowelsLength70 = 0;\n  let vowelsIndex71 = 0;\n  let vowelsLength71 = 0;\n  let vowelsIndex72 = 0;\n  let vowelsLength72 = 0;\n  let vowelsIndex73 = 0;\n  let vowelsLength73 = 0;\n  let vowelsIndex74 = 0;\n  let vowelsLength74 = 0;\n  let vowelsIndex75 = 0;\n  let vowelsLength75 = 0;\n  let vowelsIndex76 = 0;\n  let vowelsLength76 = 0;\n  let vowelsIndex77 = 0;\n  let vowelsLength77 = 0;\n  let vowelsIndex78 = 0;\n  let vowelsLength78 = 0;\n  let vowelsIndex79 = 0;\n  let vowelsLength79 = 0;\n  let vowelsIndex80 = 0;\n  let vowelsLength80 = 0;\n  let vowelsIndex81 = 0;\n  let vowelsLength81 = 0;\n  let vowelsIndex82 = 0;\n  let vowelsLength82 = 0;\n  let vowelsIndex83 = 0;\n  let vowelsLength83 = 0;\n  let vowelsIndex84 = 0;\n  let vowelsLength84 = 0;\n  let vowelsIndex85 = 0;\n  let vowelsLength85 = 0;\n  let vowelsIndex86 = 0;\n  let vowelsLength86 = 0;\n  let vowelsIndex87 = 0;\n  let vowelsLength87 = 0;\n  let vowelsIndex88 = 0;\n  let vowelsLength88 = 0;\n  let vowelsIndex89 = 0;\n  let vowelsLength89 = 0;\n  let vowelsIndex90 = 0;\n  let vowelsLength90 = 0;\n  let vowelsIndex91 = 0;\n  let vowelsLength91 = 0;\n  let vowelsIndex92 = 0;\n  let vowelsLength92 = 0;\n  let vowelsIndex93 = 0;\n  let vowelsLength93 = 0;\n  let vowelsIndex94 = 0;\n  let vowelsLength94 = 0;\n  let vowelsIndex95 = 0;\n  let vowelsLength95 = 0;\n  let vowelsIndex96 = 0;\n  let vowelsLength96 = 0;\n  let vowelsIndex97 = 0;\n  let vowelsLength97 = 0;\n  let vowelsIndex98 = 0;\n  let vowelsLength98 = 0;\n  let vowelsIndex99 = 0;\n  let vowelsLength99", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/119", "prompt": "/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "gc": "<|endoftext|>/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  let result = 'No';\n  let stack = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the longest one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "gc": "<|endoftext|>/* Out of list of strings, return the longest one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (strings.length === 0) {\n    return null\n  }\n  let longestString = strings[0]\n  let longestLength = 0\n  for (let i = 0; i < strings.length; i++) {\n    const string = strings[i]\n    if (string.length > longestLength) {\n      longestString = string\n      longestLength = string.length\n    }\n  }\n  return longestString\n}\n\n/**\n * Given a string, return its reverse complement (complementary string).\n * Complementary strings are strings that do not contain any character that is\n * not in the given string.\n * Complementary strings are also strings that do not contain any character\n * that is the same as the given string.\n * Complementary strings are also strings that do not contain any character\n * that is the reverse of the given string.\n * Complementary strings are also strings that do not contain any character\n * that is the same as the reverse of the given string.\n * Complementary strings are also strings that do not contain any character\n * that is the reverse of the given string.\n * Complementary strings are also strings that do not contain any character\n * that is the same as the given string but is also a substring of another string.\n * Complementary strings are also strings that do not contain any character\n * that is the reverse of the given string but is also a substring of another string.\n * Complementary strings are also strings that do not contain any character\n * that is the same as the given string but is also a substring of another string.\n * Complementary strings are also strings that do not contain any character\n * that is the reverse of the given string but is also a substring of another string.\n * Complementary strings are also strings that do not contain any character\n * that is the same as the given string but is also a substring of another string.\n * Complementary strings are also strings that do not contain any character\n * that is the reverse of the given string but is also a substring of another string.\n * Complementary strings are also strings that do not contain any character\n * that is the same as the given string but is also a substring of another string.\n * Complementary strings are also strings that do not contain any character\n * that is the reverse of the given string but is also a substring of another string.\n * Complementary strings are also strings that do not contain any character\n * that is the same as the given string but is also a substring of another string.\n * Complementary strings are also strings that do not contain any character\n * that is the reverse of the given string but is also a substring of another string.\n * Complementary strings are also strings that do not contain any character\n * that is the same as the given string but is also a substring of another string.\n * Complementary strings are also strings that do not contain any character\n * that is the reverse of the given string but is also a substring of another string.\n * Complementary strings are also strings that do not contain any character\n * that is the same as the given string but is also a substring of another string.\n * Complementary strings are also strings that do not contain any character\n * that is the reverse of the given string but is also a substring of another string.\n * Complementary strings are also strings that do not contain any character\n * that is the same as the given string but is also a substring of another string.\n * Complementary strings are also strings that do not contain any character\n * that is the reverse of the given string but is also a substring of another string.\n * Complementary strings are also strings that do not contain any character\n * that is the same as the given string but is also a substring of another string.\n * Complementary strings are also strings that do not contain any character\n * that is the reverse of the given string but is also a substring of another string.\n * Complementary strings are also strings that do not contain any character\n * that is the same as the given string but is also a substring of another string.\n * Complementary strings are also strings that do not contain any character\n * that is the reverse of the given string but is also a substring of another string.\n * Complementary strings are also strings that do not contain any character\n * that is the same as the given string but is also a substring of another string.\n * Complementary strings are also strings that do not contain any character\n * that is the reverse of the given string but is also a substring of another string.\n * Complementary strings are also strings that do not contain any character\n * that is the same as the given string but is also a substring of another string.\n * Complementary strings are also strings that do not contain any character\n * that is the reverse of the given string but is also a substring of another string.\n * Complementary strings are also strings that do not contain any character\n * that is the same as the given string but is also a substring of another string.\n * Complementary strings are also strings that do not contain any character\n * that is the reverse of the given string but is also a substring of another string.\n * Complementary strings are also strings that do not contain any character\n * that is the same as the given string but is also a substring of another string.\n * Complementary strings are also strings that do not contain any character\n * that is the reverse of the given string but is also a substring of another string.\n * Complementary strings are also strings that do not contain any character\n * that is the same as the given string but is also a substring of another string.\n * Complementary strings are also strings that do not contain any character\n * that is the reverse of the given string but is also a substring of another string.\n * Complementary strings are also strings that do not contain any character\n * that is the same as the given string but is also a substring of another string.\n * Complementary strings are also strings that do not contain any character\n * that is the reverse of the given string but is also a substring of another string.\n * Complementary strings are also strings that do not contain any character\n * that is the same as the given string but is also a substring of another string.\n * Complementary strings are also strings that do not contain any character\n * that is the reverse of the given string but is also a substring of another string.\n * Complementary strings are also strings that do not contain any character\n * that is the same as the given string but is also a substring of another string.\n * Complementary strings are also strings that do not contain any character\n * that is the reverse of the given string but is also a substring of another string.\n * Complementary strings are also strings that do not contain any character\n * that is the same as the given string but is also a substring of another string.\n * Complementary strings are also strings that do not contain any character\n * that is the reverse of the given string but is also a substring of another string.\n * Complementary strings are also strings that do not contain any character\n * that is the same as the given string but is also a substring of another string.\n * Complementary strings are also strings that do not contain any character\n * that is the reverse of the given string but is also a substring of another string.\n * Complementary strings are also strings that do not contain any character\n * that is the same as the given string but is also a substring of another string.\n * Complementary strings are also strings that do not contain any character\n * that is the reverse of the given string but is also a substring of another string.\n * Complementary strings are also strings that do not contain any character\n * ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maxmium k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maxmium = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maxmium", "gc": "<|endoftext|>/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maxmium k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maxmium = (arr, k) => {\n  let maxmium = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] > maxmium) {\n      maxmium = arr[i];\n    }\n  }\n  return maxmium;\n};\n\n// https://leetcode.com/problems/find-maximum-subarray/\n/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number[]}\n */\nvar findMaxSubArray = function(nums, k) {\n  let maxSubArray = [];\n  let maxSubArrayIndex = 0;\n  let maxSubArrayValue = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > maxSubArrayValue) {\n      maxSubArrayValue = nums[i];\n      maxSubArrayIndex = i;\n    }\n  }\n  for (let i = maxSubArrayIndex + 1; i < nums.length; i++) {\n    if (nums[i] > maxSubArrayValue) {\n      maxSubArrayValue = nums[i];\n      maxSubArrayIndex = i;\n    }\n  }\n  maxSubArray.push(maxSubArrayValue);\n  return maxSubArray;\n};\n\n// https://leetcode.com/problems/find-maximum-subarray-with-sum/\n/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number[]}\n */\nvar findMaxSubArrayWithSum = function(nums, k) {\n  let maxSubArray = [];\n  let maxSubArrayIndex = 0;\n  let maxSubArrayValue = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > maxSubArrayValue) {\n      maxSubArrayValue = nums[i];\n      maxSubArrayIndex = i;\n    }\n  }\n  for (let i = maxSubArrayIndex + 1; i < nums.length; i++) {\n    if (nums[i] > maxSubArrayValue) {\n      maxSubArrayValue = nums[i];\n      maxSubArrayIndex = i;\n    }\n  }\n  maxSubArray.push(maxSubArrayValue);\n  return maxSubArray;\n};\n\n// https://leetcode.com/problems/find-maximum-subarray-with-sum-ii/\n/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number[]}\n */\nvar findMaxSubArrayWithSumII = function(nums, k) {\n  let maxSubArray = [];\n  let maxSubArrayIndex = 0;\n  let maxSubArrayValue = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > maxSubArrayValue) {\n      maxSubArrayValue = nums[i];\n      maxSubArrayIndex = i;\n    }\n  }\n  for (let i = maxSubArrayIndex + 1; i < nums.length; i++) {\n    if (nums[i] > maxSubArrayValue) {\n      maxSubArrayValue = nums[i];\n      maxSubArrayIndex = i;\n    }\n  }\n  maxSubArray.push(maxSubArrayValue);\n  return maxSubArray;\n};\n\n// https://leetcode.com/problems/find-maximum-subarray-with-sum-iii/\n/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number[]}\n */\nvar findMaxSubArrayWithSumIII = function(nums, k) {\n  let maxSubArray = [];\n  let maxSubArrayIndex = 0;\n  let maxSubArrayValue = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > maxSubArrayValue) {\n      maxSubArrayValue = nums[i];\n      maxSubArrayIndex = i;\n    }\n  }\n  for (let i = maxSubArrayIndex + 1; i < nums.length; i++) {\n    if (nums[i] > maxSubArrayValue) {\n      maxSubArrayValue = nums[i];\n      maxSubArrayIndex = i;\n    }\n  }\n  maxSubArray.push(maxSubArrayValue);\n  return maxSubArray;\n};\n\n// https://leetcode.com/problems/find-maximum-subarray-with-sum-iv/\n/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number[]}\n */\nvar findMaxSubArrayWithSumIV = function(nums, k) {\n  let maxSubArray = [];\n  let maxSubArrayIndex = 0;\n  let maxSubArrayValue = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > maxSubArrayValue) {\n      maxSubArrayValue = nums[i];\n      maxSubArrayIndex = i;\n    }\n  }\n  for (let i = maxSubArrayIndex + 1; i < nums.length; i++) {\n    if (nums[i] > maxSubArrayValue) {\n      maxSubArrayValue = nums[i];\n      maxSubArrayIndex = i;\n    }\n  }\n  maxSubArray.push(maxSubArrayValue);\n  return maxSubArray;\n};\n\n// https://leetcode.com/problems/find-maximum-subarray-with-sum-vi/\n/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number[]}\n */\nvar findMaxSubArrayWithSumVI = function(nums, k) {\n  let maxSubArray = [];\n  let maxSubArrayIndex = 0;\n  let maxSubArrayValue = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > maxSubArrayValue) {\n      maxSubArrayValue = nums[i];\n      maxSubArrayIndex = i;\n    }\n  }\n  for (let i = maxSubArrayIndex + 1; i < nums.length; i++) {\n    if (nums[i] > maxSubArrayValue) {\n      maxSubArrayValue = nums[i];\n      maxSubArrayIndex = i;\n    }\n  }\n  maxSubArray.push(maxSubArrayValue);\n  return maxSubArray;\n};\n\n// https://leetcode.com/problems/find-maximum-subarray-with-sum-vv/\n/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number[]}\n */\nvar findMaxSubArrayWithSumVV = function(nums, k) {\n  let maxSubArray = [];\n  let maxSubArrayIndex = 0;\n  let maxSubArrayValue = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > maxSubArrayValue) {\n      maxSubArrayValue = nums[i];\n      maxSubArrayIndex = i;\n    }\n  }\n  for (let i = maxSubArrayIndex + 1; i < nums.length; i++) {\n    if (nums[i] > maxSubArrayValue) {\n      maxSubArrayValue = nums[i];\n      maxSubArrayIndex = i;\n    }\n  }\n  maxSubArray.push(maxSubArrayValue);\n  return maxSubArray;\n};\n\n// https://leetcode.com/problems/find-maximum-subarray-with-sum-vii/\n/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number[]}\n */\nvar findMaxSubArrayWithSumVII = function(nums, k) {\n  let maxSubArray = [];\n  let maxSubArrayIndex = 0;\n  let maxSubArrayValue = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > maxSubArrayValue) {\n      maxSubArrayValue = nums[i];\n      maxSubArrayIndex = i;\n    }\n  }\n  for (let i = maxSubArrayIndex + 1; i < nums.length; i++) {\n    if (nums[i] > maxSubArrayValue) {\n      maxSubArrayValue = nums[i];\n      maxSubArrayIndex = i;\n    }\n  }\n  maxSubArray.push(maxSubArrayValue);\n  return maxSubArray;\n};\n\n// https://leetcode.com/problems/find-maximum-subarray-with-sum-vvv/\n/**\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/121", "prompt": "/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "gc": "<|endoftext|>/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nmodule.exports = {\n  solution,\n};\n\n},{}],3:[function(require,module,exports){\n/*\n  Implement a binary search tree to store a sorted list of integers.\n\n  Each node in the tree should have a value and a left and right subtree. \n  \n  You may assume that the list is sorted in ascending order.\n  \n  You may assume that each node will be inserted into the tree at most once.\n  \n  You may assume that all nodes are inserted into the tree in the order they were inserted.\n  \n  You may assume that all nodes are removed from the tree in the order they were inserted.\n  \n  You may assume that there are no duplicate nodes in the tree.\n  \n  You may assume that the tree nodes are balanced.\n  \n  You may assume that there are no cycles in the tree.\n  \n  You may assume that the tree is balanced if and only if the nodes are in sorted order.\n  \n  You may assume that the tree is balanced if and only if the nodes are in sorted order.\n  \n  You may assume that the tree is balanced if and only if the nodes are in sorted order.\n  \n  You may assume that the tree is balanced if and only if the nodes are in sorted order.\n  \n  You may assume that the tree is balanced if and only if the nodes are in sorted order.\n  \n  You may assume that the tree is balanced if and only if the nodes are in sorted order.\n  \n  You may assume that the tree is balanced if and only if the nodes are in sorted order.\n  \n  You may assume that the tree is balanced if and only if the nodes are in sorted order.\n  \n  You may assume that the tree is balanced if and only if the nodes are in sorted order.\n  \n  You may assume that the tree is balanced if and only if the nodes are in sorted order.\n  \n  You may assume that the tree is balanced if and only if the nodes are in sorted order.\n  \n  You may assume that the tree is balanced if and only if the nodes are in sorted order.\n  \n  You may assume that the tree is balanced if and only if the nodes are in sorted order.\n  \n  You may assume that the tree is balanced if and only if the nodes are in sorted order.\n  \n  You may assume that the tree is balanced if and only if the nodes are in sorted order.\n  \n  You may assume that the tree is balanced if and only if the nodes are in sorted order.\n  \n  You may assume that the tree is balanced if and only if the nodes are in sorted order.\n  \n  You may assume that the tree is balanced if and only if the nodes are in sorted order.\n  \n  You may assume that the tree is balanced if and only if the nodes are in sorted order.\n  \n  You may assume that the tree is balanced if and only if the nodes are in sorted order.\n  \n  You may assume that the tree is balanced if and only if the nodes are in sorted order.\n  \n  You may assume that the tree is balanced if and only if the nodes are in sorted order.\n  \n  You may assume that the tree is balanced if and only if the nodes are in sorted order.\n  \n  You may assume that the tree is balanced if and only if the nodes are in sorted order.\n  \n  You may assume that the tree is balanced if and only if the nodes are in sorted order.\n  \n  You may assume that the tree is balanced if and only if the nodes are in sorted order.\n  \n  You may assume that the tree is balanced if and only if the nodes are in sorted order.\n  \n  You may assume that the tree is balanced if and only if the nodes are in sorted order.\n  \n  You may assume that the tree is balanced if and only if the nodes are in sorted order.\n  \n  You may assume that the tree is balanced if and only if the nodes are in sorted order.\n  \n  You may assume that the tree is balanced if and only if the nodes are in sorted order.\n  \n  You may assume that the tree is balanced if and only if the nodes are in sorted order.\n  \n  You may assume that the tree is balanced if and only if the nodes are in sorted order.\n  \n  You may assume that the tree is balanced if and only if the nodes are in sorted order.\n  \n  You may assume that the tree is balanced if and only if the nodes are in sorted order.\n  \n  You may assume that the tree is balanced if and only if the nodes are in sorted order.\n  \n  You may assume that the tree is balanced if and only if the nodes are in sorted order.\n  \n  You may assume that the tree is balanced if and only if the nodes are in sorted order.\n  \n  You may assume that the tree is balanced if and only if the nodes are in sorted order.\n  \n  You may assume that the tree is balanced if and only if the nodes are in sorted order.\n  \n  You may assume that the tree is balanced if and only if the nodes are in sorted order.\n  \n  You may assume that the tree is balanced if and only if the nodes are in sorted order.\n  \n  You may assume that the tree is balanced if and only if the nodes are in sorted order.\n  \n  You may assume that the tree is balanced if and only if the nodes are in sorted order.\n  \n  You may assume that the tree is balanced if and only if the nodes are in sorted order.\n  \n  You may assume that the tree is balanced if and only if the nodes are in sorted order.\n  \n  You may assume that the tree is balanced if and only if the nodes are in sorted order.\n  \n  You may assume that the tree is balanced if and only if the nodes are in sorted order.\n  \n  You may assume that the tree is balanced if and only if the nodes are in sorted order.\n  \n  You may assume that the tree is balanced if and only if the nodes are in sorted order.\n  \n  You may assume that the tree is balanced if and only if the nodes are in sorted order.\n  \n  You may assume that the tree is balanced if and only if the nodes are in sorted order.\n  \n  You may assume that the tree is balanced if and only if the nodes are in sorted order.\n  \n  You may assume that the tree is balanced if and only if the nodes are in sorted order.\n  \n  You may assume that the tree is balanced if and only if the nodes are in sorted order.\n  \n  You may assume that the tree is balanced if and only if the nodes are in sorted order.\n  \n  You may assume that the tree is balanced if and only if the nodes are in sorted order.\n  \n  You may assume that the tree is balanced if and only if the nodes are in sorted order.\n  \n  You may assume that the tree is balanced if and only if the nodes are in sorted order.\n  \n  You may assume that the tree is balanced if and only if the nodes are in sorted order.\n  \n  You may assume that the tree is balanced if and only if the nodes are in sorted order.\n  \n  You may assume that the tree is balanced if and only if the nodes are in sorted order.\n  \n  You may assume that the tree is balanced if and only if the nodes are in sorted order.\n  \n  You may assume that the tree is balanced if and only if the nodes are in sorted order.\n  \n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "gc": "<|endoftext|>/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  let i = 0;\n  let j = 0;\n  while (i < arr.length) {\n    while (j < k) {\n      if (arr[i] >= arr[j]) {\n        sum += arr[i];\n        i++;\n        j++;\n      } else {\n        sum += arr[i];\n        j++;\n      }\n    }\n    i++;\n  }\n  return sum;\n};\n\n// https://leetcode.com/problems/remove-duplicates-from-sorted-array/\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @return {ListNode}\n */\nvar removeDuplicates = function(head) {\n  let cur = head;\n  while (cur) {\n    let prev = cur.next;\n    if (prev.next === null) prev.next = null;\n    cur = prev;\n  }\n  return head;\n};\n\n// https://leetcode.com/problems/find-the-sum-of-two-numbers/\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @param {number} num1\n * @param {number} num2\n * @return {number}\n */\nvar findSum = function(head, num1, num2) {\n  let cur = head;\n  while (cur) {\n    let sum = cur.val + num1 + num2;\n    if (sum > 9) {\n      return sum;\n    }\n    cur = cur.next;\n  }\n  return 0;\n};\n\n// https://leetcode.com/problems/find-the-sum-of-two-numbers-in-a-linked-list/\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @param {number} num1\n * @param {number} num2\n * @return {number}\n */\nvar findSumLinked = function(head, num1, num2) {\n  let cur = head;\n  while (cur) {\n    let sum = cur.val + num1 + num2;\n    if (sum > 9) {\n      return sum;\n    }\n    cur = cur.next;\n  }\n  return 0;\n};\n\n// https://leetcode.com/problems/find-the-sum-of-two-numbers-in-a-linked-list-ii/\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @param {number} num1\n * @param {number} num2\n * @return {number}\n */\nvar findSumLinkedII = function(head, num1, num2) {\n  let cur = head;\n  while (cur) {\n    let sum = cur.val + num1 + num2;\n    if (sum > 9) {\n      return sum;\n    }\n    cur = cur.next;\n  }\n  return 0;\n};\n\n// https://leetcode.com/problems/find-the-sum-of-two-numbers-in-a-linked-list-iii/\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @param {number} num1\n * @param {number} num2\n * @return {number}\n */\nvar findSumLinkedIII = function(head, num1, num2) {\n  let cur = head;\n  while (cur) {\n    let sum = cur.val + num1 + num2;\n    if (sum > 9) {\n      return sum;\n    }\n    cur = cur.next;\n  }\n  return 0;\n};\n\n// https://leetcode.com/problems/find-the-sum-of-two-numbers-in-a-linked-list-iiii/\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @param {number} num1\n * @param {number} num2\n * @return {number}\n */\nvar findSumLinkedIV = function(head, num1, num2) {\n  let cur = head;\n  while (cur) {\n    let sum = cur.val + num1 + num2;\n    if (sum > 9) {\n      return sum;\n    }\n    cur = cur.next;\n  }\n  return 0;\n};\n\n// https://leetcode.com/problems/find-the-sum-of-two-numbers-in-a-linked-list-iv/\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @param {number} num1\n * @param {number} num2\n * @return {number}\n */\nvar findSumLinkedV = function(head, num1, num2) {\n  let cur = head;\n  while (cur) {\n    let sum = cur.val + num1 + num2;\n    if (sum > 9) {\n      return sum;\n    }\n    cur = cur.next;\n  }\n  return 0;\n};\n\n// https://leetcode.com/problems/find-the-sum-of-two-numbers-in-a-linked-list-iiii/\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @param {number} num1\n * @param {number} num2\n * @return {number}\n */\nvar findSumLinkedVI = function(head, num1, num2) {\n  let cur = head;\n  while (cur) {\n    let sum = cur.val + num1 + num2;\n    if (sum > 9) {\n      return sum;\n    }\n    cur = cur.next;\n  }\n  return 0;\n};\n\n// https://leetcode.com/problems/find-the-sum-of-two-numbers-in-a-linked-list-iv/\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @param {number} num1\n * @param {number} num2\n * @return {number}\n */\nvar findSumLinkedVII = function(head, num1, num2) {\n  let cur = head;\n  while (cur) {\n    let sum = cur.val + num1 + num2;\n    if (sum > 9) {\n      return sum;\n    }\n    cur = cur.next;\n  }\n  return 0;\n};\n\n// https://leetcode.com/problems/find-the-sum-of-two-numbers-in-a-linked-list-iiii/\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @param {number} num1\n * @param {number} num2\n * @return {number}\n */\nvar findSumLinkedVIII = function(head, num1, num2) {\n  let cur = head;\n  while (cur) {\n    let sum = cur.val + num1 + num2;\n    if (sum > 9) {\n      return sum;\n    }\n    cur = cur.next;\n  }\n  return 0;\n};\n\n// https://leetcode.com/problems/find-the-sum-of-two-numbers-in-a-linked-list-iiiii/\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "gc": "<|endoftext|>/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  let collatz = [1, 1];\n  let i = 1;\n  while (collatz[i] < n) {\n    collatz[i] = collatz[i - 1] * 3 + collatz[i - 1];\n    i++;\n  }\n  return collatz;\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the even numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getEvenCollatz(5) returns [1, 5, 16] # The collatz sequence for 5 is [1, 5, 16, 8, 4, 2, 1], so the even numbers are only 1, 5, and 16.\n  */\nconst getEvenCollatz = (n) => {\n  let collatz = [1, 1];\n  let i = 1;\n  while (collatz[i] < n) {\n    collatz[i] = collatz[i - 1] * 3 + collatz[i - 1];\n    i++;\n  }\n  return collatz;\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the prime numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getPrimeCollatz(5) returns [1, 5, 3] # The collatz sequence for 5 is [1, 5, 3, 7, 2, 1], so the prime numbers are only 1, 5, and 3.\n  */\nconst getPrimeCollatz = (n) => {\n  let collatz = [1, 1];\n  let i = 1;\n  while (collatz[i] < n) {\n    collatz[i] = collatz[i - 1] * 3 + collatz[i - 1];\n    i++;\n  }\n  return collatz;\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the natural numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getNaturalCollatz(5) returns [1, 5, 3, 7, 2, 1] # The collatz sequence for 5 is [1, 5, 3, 7, 2, 1], so the natural numbers are only 1, 5, 3, 7, 2, 1.\n  */\nconst getNaturalCollatz = (n) => {\n  let collatz = [1, 1];\n  let i = 1;\n  while (collatz[i] < n) {\n    collatz[i] = collatz[i - 1] * 3 + collatz[i - 1];\n    i++;\n  }\n  return collatz;\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the prime numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getPrimeCollatz(5) returns [1, 5, 3] # The collatz sequence for 5 is [1, 5, 3, 7, 2, 1], so the prime numbers are only 1, 5, 3, 7, 2, 1.\n  */\nconst getPrimeCollatz = (n) => {\n  let collatz = [1, 1];\n  let i = 1;\n  while (collatz[i] < n) {\n    collatz[i] = collatz[i - 1] * 3 + collatz[i - 1];\n    i++;\n  }\n  return collatz;\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the natural numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getNaturalCollatz(5) returns [1, 5, 3, 7, 2, 1] # The collatz sequence for 5 is [1, 5, 3, 7, 2, 1], so the natural numbers are only 1, 5, 3, 7, 2, 1.\n  */\nconst getNaturalCollatz = (n) => {\n  let collatz = [1, 1];\n  let i = 1;\n  while (collatz[i] < n) {\n    collatz[i] = collatz[i - 1] * 3 + collatz[i - 1];\n    i++;\n  }\n  return collatz;\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the natural numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/124", "prompt": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "gc": "<|endoftext|>/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  let dateString = date.toString();\n  let numberOfDays = dateString.split('-')[2];\n  let numberOfMonths = dateString.split('-')[1];\n  let numberOfYears = dateString.split('-')[0];\n  let months = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11];\n  let date = new Date(dateString);\n  let isValid = false;\n\n  if (numberOfDays < 1 || numberOfDays > 31) {\n    isValid = false;\n  } else {\n    if (numberOfMonths < 1 || numberOfMonths > 12) {\n      isValid = false;\n    } else {\n      if (numberOfYears < 1 || numberOfYears > 9999) {\n        isValid = false;\n      } else {\n        if (date.getMonth() < 1 || date.getMonth() > 12) {\n          isValid = false;\n        } else {\n          if (date.getDate() < 1 || date.getDate() > 31) {\n            isValid = false;\n          } else {\n            if (date.getFullYear() < 1 || date.getFullYear() > 9999) {\n              isValid = false;\n            } else {\n              isValid = true;\n            }\n          }\n        }\n      }\n    }\n  }\n\n  return isValid;\n};\n\n/*\n  Given a date string and a date object, this function returns the number of days between the\n  two dates given.\n  If the date string is invalid, the function returns 0.\n  If the date object is invalid, the function returns 0.\n  If the date object is invalid, the function returns 0.\n  If the date object is invalid, the function returns 0.\n  If the date object is invalid, the function returns 0.\n  If the date object is invalid, the function returns 0.\n  If the date object is invalid, the function returns 0.\n  If the date object is invalid, the function returns 0.\n  If the date object is invalid, the function returns 0.\n  If the date object is invalid, the function returns 0.\n  If the date object is invalid, the function returns 0.\n  If the date object is invalid, the function returns 0.\n  If the date object is invalid, the function returns 0.\n  If the date object is invalid, the function returns 0.\n  If the date object is invalid, the function returns 0.\n  If the date object is invalid, the function returns 0.\n  If the date object is invalid, the function returns 0.\n  If the date object is invalid, the function returns 0.\n  If the date object is invalid, the function returns 0.\n  If the date object is invalid, the function returns 0.\n  If the date object is invalid, the function returns 0.\n  If the date object is invalid, the function returns 0.\n  If the date object is invalid, the function returns 0.\n  If the date object is invalid, the function returns 0.\n  If the date object is invalid, the function returns 0.\n  If the date object is invalid, the function returns 0.\n  If the date object is invalid, the function returns 0.\n  If the date object is invalid, the function returns 0.\n  If the date object is invalid, the function returns 0.\n  If the date object is invalid, the function returns 0.\n  If the date object is invalid, the function returns 0.\n  If the date object is invalid, the function returns 0.\n  If the date object is invalid, the function returns 0.\n  If the date object is invalid, the function returns 0.\n  If the date object is invalid, the function returns 0.\n  If the date object is invalid, the function returns 0.\n  If the date object is invalid, the function returns 0.\n  If the date object is invalid, the function returns 0.\n  If the date object is invalid, the function returns 0.\n  If the date object is invalid, the function returns 0.\n  If the date object is invalid, the function returns 0.\n  If the date object is invalid, the function returns 0.\n  If the date object is invalid, the function returns 0.\n  If the date object is invalid, the function returns 0.\n  If the date object is invalid, the function returns 0.\n  If the date object is invalid, the function returns 0.\n  If the date object is invalid, the function returns 0.\n  If the date object is invalid, the function returns 0.\n  If the date object is invalid, the function returns 0.\n  If the date object is invalid, the function returns 0.\n  If the date object is invalid, the function returns 0.\n  If the date object is invalid, the function returns 0.\n  If the date object is invalid, the function returns 0.\n  If the date object is invalid, the function returns 0.\n  If the date object is invalid, the function returns 0.\n  If the date object is invalid, the function returns 0.\n  If the date object is invalid, the function returns 0.\n  If the date object is invalid, the function returns 0.\n  If the date object is invalid, the function returns 0.\n  If the date object is invalid, the function returns 0.\n  If the date object is invalid, the function returns 0.\n  If the date object is invalid, the function returns 0.\n  If the date object is invalid, the function returns 0.\n  If the date object is invalid, the function returns 0.\n  If the date object is invalid, the function returns 0.\n  If the date object is invalid, the function returns 0.\n  If the date object is invalid, the function returns 0.\n  If the date object is invalid, the function returns 0.\n  If the date object is invalid, the function returns 0.\n  If the date object is invalid, the function returns 0.\n  If the date object is invalid, the function returns 0.\n  If the date object is invalid, the function returns 0.\n  If the date object is invalid, the function returns 0.\n  If the date object is invalid, the function returns 0.\n  If the date object is invalid, the function returns 0.\n  If the date object is invalid, the function returns 0.\n  If the date object is invalid, the function returns 0.\n  If the date object is invalid, the function returns 0.\n  If the date object is invalid, the function returns 0.\n  If the date object is invalid, the function returns 0.\n  If the date object is invalid, the function returns 0.\n  If the date object is invalid, the function returns 0.\n  If the date object is invalid, the function returns 0.\n  If the date object is invalid, the function returns 0.\n  If the date object is invalid, the function returns 0.\n  If the date object is invalid, the function returns 0.\n  If the date object is invalid, the function returns 0.\n  If the date object is invalid, the function returns 0.\n  If the date object is invalid, the function returns 0.\n  If the date object is invalid, the function returns 0.\n  If the date object is invalid, the function returns 0.\n  If the date object is invalid, the function returns 0.\n  If the date object is invalid, the function returns 0.\n  If the date object is invalid, the function returns 0.\n  If the date object is invalid, the function returns 0.\n  If the date object is invalid, the function returns 0.\n  If the date object is invalid, the function returns 0.\n  If the date object is invalid, the function returns 0.\n  If the date object is invalid, the function returns 0.\n  If the date object is invalid, the function returns 0.\n  If the date object is invalid, the function returns 0.\n  If the date object is invalid, the function returns 0.\n  If the date object is invalid, the function returns 0.\n  If the date object is invalid, the function returns 0.\n  If the date object is invalid, the function returns 0.\n  If the date object is invalid, the function returns 0.\n  If the date object is invalid, the function returns 0.\n  If the date object is invalid, the function returns 0.\n  If the date object is invalid, the function returns 0.\n  If the date object is invalid, the function returns 0.\n  If the date object is invalid, the function returns 0.\n  If the date object is invalid, the function returns 0.\n  If the date object is invalid, the function returns 0.\n  If the date object is ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/125", "prompt": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "gc": "<|endoftext|>/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  let words = txt.split(/\\s+/);\n  let result = [];\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    if (word.length > 0) {\n      let letter = word.toLowerCase();\n      if (letter.indexOf('a') > -1 || letter.indexOf('b') > -1 || letter.indexOf('c') > -1 || letter.indexOf('d') > -1 || letter.indexOf('e') > -1 || letter.indexOf('f') > -1 || letter.indexOf('g') > -1 || letter.indexOf('h') > -1 || letter.indexOf('i') > -1 || letter.indexOf('j') > -1 || letter.indexOf('k') > -1 || letter.indexOf('l') > -1 || letter.indexOf('m') > -1 || letter.indexOf('n') > -1 || letter.indexOf('o') > -1 || letter.indexOf('p') > -1 || letter.indexOf('q') > -1 || letter.indexOf('r') > -1 || letter.indexOf('s') > -1 || letter.indexOf('t') > -1 || letter.indexOf('u') > -1 || letter.indexOf('v') > -1 || letter.indexOf('w') > -1 || letter.indexOf('x') > -1 || letter.indexOf('y') > -1 || letter.indexOf('z') > -1) {\n        result.push(word);\n      }\n    }\n  }\n  return result;\n};\n\n/**\n * Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWordsNoSpaces = (txt) => {\n  let words = txt.split(/\\s+/);\n  let result = [];\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    if (word.length > 0) {\n      let letter = word.toLowerCase();\n      if (letter.indexOf('a') > -1 || letter.indexOf('b') > -1 || letter.indexOf('c') > -1 || letter.indexOf('d') > -1 || letter.indexOf('e') > -1 || letter.indexOf('f') > -1 || letter.indexOf('g') > -1 || letter.indexOf('h') > -1 || letter.indexOf('i') > -1 || letter.indexOf('j') > -1 || letter.indexOf('k') > -1 || letter.indexOf('l') > -1 || letter.indexOf('m') > -1 || letter.indexOf('n') > -1 || letter.indexOf('o') > -1 || letter.indexOf('p') > -1 || letter.indexOf('q') > -1 || letter.indexOf('r') > -1 || letter.indexOf('s') > -1 || letter.indexOf('t') > -1 || letter.indexOf('u') > -1 || letter.indexOf('v') > -1 || letter.indexOf('w') > -1 || letter.indexOf('x') > -1 || letter.indexOf('y') > -1 || letter.indexOf('z') > -1) {\n        result.push(word);\n      }\n    }\n  }\n  return result;\n};\n\n/**\n * Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWordsNoSpacesAndCommas = (txt) => {\n  let words = txt.split(/\\s+/);\n  let result = [];\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    if (word.length > 0) {\n      let letter = word.toLowerCase();\n      if (letter.indexOf('a') > -1 || letter.indexOf('b') > -1 || letter.indexOf('c') > -1 || letter.indexOf('d') > -1 || letter.indexOf('e') > -1 || letter.indexOf('f') > -1 || letter.indexOf('g') > -1 || letter.indexOf('h') > -1 || letter.indexOf('i') > -1 || letter.indexOf('j') > -1 || letter.indexOf('k') > -1 || letter.indexOf('l') > -1 || letter.indexOf('m') > -1 || letter.indexOf('n') > -1 || letter.indexOf('o') > -1 || letter.indexOf('p') > -1 || letter.indexOf('q') > -1 || letter.indexOf('r') > -1 || letter.indexOf('s') > -1 || letter.indexOf('t') > -1 || letter.indexOf('u') > -1 || letter.indexOf('v') > -1 || letter.indexOf('w') > -1 || letter.indexOf('x') > -1 || letter.indexOf('y') > -1 || letter.indexOf('z') > -1) {\n        result.push(word);\n      }\n    }\n  }\n  return result;\n};\n\n/**\n * Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWordsNoSpacesAndCommas = (txt) => {\n  let words = txt.split(/\\s+/);\n  let result = [];\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    if (word.length > 0) {\n      let letter = word.toLowerCase();\n      if (letter.indexOf('a') > -1 || letter.indexOf('b') > -1 || letter.indexOf('c') > -1 || letter.indexOf('d') > -1 || letter.indexOf('e') > -1 || letter.indexOf('f') > -1 || letter.indexOf('g') > -1 || letter.indexOf('h') > -1 || letter.indexOf('i') > -1 || letter.indexOf('j') > -1 || letter.indexOf('k') > -1 || letter.indexOf('l') > -1 || letter.indexOf('m') > -1 || letter.indexOf('n') > -1 || letter.indexOf('o') > -1 || letter.indexOf('p') > -1 || letter.indexOf('q') > -1 || letter.indexOf('r') > -1 || letter.indexOf('s') > -1 || letter.indexOf('t') > -1 || letter.indexOf('u') > -1 || letter.indexOf('v') > -1 || letter.indexOf('w') > -1 || letter.indexOf('x') > -1 || letter.indexOf('y') > -1 || letter.indexOf('z') > -1) {\n        result.push(word);\n      }\n    }", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "gc": "<|endoftext|>/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  let sorted = false;\n  lst.sort((a, b) => {\n    if (a < b) {\n      sorted = true;\n      return -1;\n    }\n    if (a > b) {\n      sorted = true;\n      return 1;\n    }\n    return 0;\n  });\n  return sorted;\n};\n\n// Given a list of numbers, return whether or not they are sorted\n// descending order. If list has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// isSorted([5, 6, 7]) ➞ false\n// isSorted([5, 6, 7]) ➞ true\n// isSorted([5, 6, 7]) ➞ false\n// isSorted([5, 6, 7]) ➞ true\n// isSorted([5, 6, 7]) ➞ false\n// isSorted([5, 6, 7]) ➞ true\n// isSorted([5, 6, 7]) ➞ false\n// isSorted([5, 6, 7]) ➞ true\n// isSorted([5, 6, 7]) ➞ false\n// isSorted([5, 6, 7]) ➞ true\n// isSorted([5, 6, 7]) ➞ false\n// isSorted([5, 6, 7]) ➞ true\n// isSorted([5, 6, 7]) ➞ false\n// isSorted([5, 6, 7]) ➞ true\n// isSorted([5, 6, 7]) ➞ false\n// isSorted([5, 6, 7]) ➞ true\n// isSorted([5, 6, 7]) ➞ false\n// isSorted([5, 6, 7]) ➞ true\n// isSorted([5, 6, 7]) ➞ false\n// isSorted([5, 6, 7]) ➞ true\n// isSorted([5, 6, 7]) ➞ false\n// isSorted([5, 6, 7]) ➞ true\n// isSorted([5, 6, 7]) ➞ false\n// isSorted([5, 6, 7]) ➞ true\n// isSorted([5, 6, 7]) ➞ false\n// isSorted([5, 6, 7]) ➞ true\n// isSorted([5, 6, 7]) ➞ false\n// isSorted([5, 6, 7]) ➞ true\n// isSorted([5, 6, 7]) ➞ false\n// isSorted([5, 6, 7]) ➞ true\n// isSorted([5, 6, 7]) ➞ false\n// isSorted([5, 6, 7]) ➞ true\n// isSorted([5, 6, 7]) ➞ false\n// isSorted([5, 6, 7]) ➞ true\n// isSorted([5, 6, 7]) ➞ false\n// isSorted([5, 6, 7]) ➞ true\n// isSorted([5, 6, 7]) ➞ false\n// isSorted([5, 6, 7]) ➞ true\n// isSorted([5, 6, 7]) ➞ false\n// isSorted([5, 6, 7]) ➞ true\n// isSorted([5, 6, 7]) ➞ false\n// isSorted([5, 6, 7]) ➞ true\n// isSorted([5, 6, 7]) ➞ false\n// isSorted([5, 6, 7]) ➞ true\n// isSorted([5, 6, 7]) ➞ false\n// isSorted([5, 6, 7]) ➞ true\n// isSorted([5, 6, 7]) ➞ false\n// isSorted([5, 6, 7]) ➞ true\n// isSorted([5, 6, 7]) ➞ false\n// isSorted([5, 6, 7]) ➞ true\n// isSorted([5, 6, 7]) ➞ false\n// isSorted([5, 6, 7]) ➞ true\n// isSorted([5, 6, 7]) ➞ false\n// isSorted([5, 6, 7]) ➞ true\n// isSorted([5, 6, 7]) ➞ false\n// isSorted([5, 6, 7]) ➞ true\n// isSorted([5, 6, 7]) ➞ false\n// isSorted([5, 6, 7]) ➞ true\n// isSorted([5, 6, 7]) ➞ false\n// isSorted([5, 6, 7]) ➞ true\n// isSorted([5, 6, 7]) ➞ false\n// isSorted([5, 6, 7]) ➞ true\n// isSorted([5, 6, 7]) ➞ false\n// isSorted([5, 6, 7]) ➞ true\n// isSorted([5, 6, 7]) ➞ false\n// isSorted([5, 6, 7]) ➞ true\n// isSorted([5, 6, 7]) ➞ false\n// isSorted([5, 6, 7]) ➞ true\n// isSorted([5, 6, 7]) ➞ false\n// isSorted([5, 6, 7]) ➞ true\n// isSorted([5, 6, 7]) ➞ false\n// isSorted([5, 6, 7]) ➞ true\n// isSorted([5, 6, 7]) ➞ false\n// isSorted([5, 6, 7]) ➞ true\n// isSorted([5, 6, 7]) ➞ false\n// isSorted([5, 6, 7]) ➞ true\n// isSorted([5, 6, 7]) ➞ false\n// isSorted([5, 6, 7]) ➞ true\n// isSorted([5, 6, 7]) ➞ false\n// isSorted([5, 6, 7]) ➞ true\n// isSorted([5, 6, 7]) ➞ false\n// isSorted([5, 6, 7]) ➞ true\n// isSorted([5, 6, 7]) ➞ false\n// isSorted([5, 6, 7]) ➞ true\n// isSorted([5, 6, 7]) ➞ false\n// isSorted([5, 6, 7]) �", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/127", "prompt": "/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "gc": "<|endoftext|>/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  const [start1, end1] = interval1;\n  const [start2, end2] = interval2;\n  const [start3, end3] = interval2;\n  const [start4, end4] = interval2;\n  const [start5, end5] = interval2;\n  const [start6, end6] = interval2;\n  const [start7, end7] = interval2;\n  const [start8, end8] = interval2;\n  const [start9, end9] = interval2;\n  const [start10, end10] = interval2;\n  const [start11, end11] = interval2;\n  const [start12, end12] = interval2;\n  const [start13, end13] = interval2;\n  const [start14, end14] = interval2;\n  const [start15, end15] = interval2;\n  const [start16, end16] = interval2;\n  const [start17, end17] = interval2;\n  const [start18, end18] = interval2;\n  const [start19, end19] = interval2;\n  const [start20, end20] = interval2;\n  const [start21, end21] = interval2;\n  const [start22, end22] = interval2;\n  const [start23, end23] = interval2;\n  const [start24, end24] = interval2;\n  const [start25, end25] = interval2;\n  const [start26, end26] = interval2;\n  const [start27, end27] = interval2;\n  const [start28, end28] = interval2;\n  const [start29, end29] = interval2;\n  const [start30, end30] = interval2;\n  const [start31, end31] = interval2;\n  const [start32, end32] = interval2;\n  const [start33, end33] = interval2;\n  const [start34, end34] = interval2;\n  const [start35, end35] = interval2;\n  const [start36, end36] = interval2;\n  const [start37, end37] = interval2;\n  const [start38, end38] = interval2;\n  const [start39, end39] = interval2;\n  const [start40, end40] = interval2;\n  const [start41, end41] = interval2;\n  const [start42, end42] = interval2;\n  const [start43, end43] = interval2;\n  const [start44, end44] = interval2;\n  const [start45, end45] = interval2;\n  const [start46, end46] = interval2;\n  const [start47, end47] = interval2;\n  const [start48, end48] = interval2;\n  const [start49, end49] = interval2;\n  const [start50, end50] = interval2;\n  const [start51, end51] = interval2;\n  const [start52, end52] = interval2;\n  const [start53, end53] = interval2;\n  const [start54, end54] = interval2;\n  const [start55, end55] = interval2;\n  const [start56, end56] = interval2;\n  const [start57, end57] = interval2;\n  const [start58, end58] = interval2;\n  const [start59, end59] = interval2;\n  const [start60, end60] = interval2;\n  const [start61, end61] = interval2;\n  const [start62, end62] = interval2;\n  const [start63, end63] = interval2;\n  const [start64, end64] = interval2;\n  const [start65, end65] = interval2;\n  const [start66, end66] = interval2;\n  const [start67, end67] = interval2;\n  const [start68, end68] = interval2;\n  const [start69, end69] = interval2;\n  const [start70, end70] = interval2;\n  const [start71, end71] = interval2;\n  const [start72, end72] = interval2;\n  const [start73, end73] = interval2;\n  const [start74, end74] = interval2;\n  const [start75, end75] = interval2;\n  const [start76, end76] = interval2;\n  const [start77, end77] = interval2;\n  const [start78, end78] = interval2;\n  const [start79, end79] = interval2;\n  const [start80, end80] = interval2;\n  const [start81, end81] = interval2;\n  const [start82, end82] = interval2;\n  const [start83, end83] = interval2;\n  const [start84, end84] = interval2;\n  const [start85, end85] = interval2;\n  const [start86, end86] = interval2;\n  const [start87, end87] = interval2;\n  const [start88, end88] = interval2;\n  const [start89, end89] = interval2;\n  const [start90, end90] = interval2;\n  const [start91, end91] = interval2;\n  const [start92, end92] = interval2;\n  const [start93, end93] = interval2;\n  const [start94, end94] = interval2;\n  const [start95, end95] = interval2;\n  const [start96, end96] = interval2;\n  const [start97, end97] = interval2;\n  const [start98, end98] = interval2;\n  const [start99, end99] = interval2;\n  const [start100, end100] = interval2;\n  const [start101, end101] = interval2;\n  const [start102, end102] = interval2;\n  const [start103, end103] = interval2;\n  const [start104, end104] = interval2;\n  const [start105, end105] = interval2;\n  const [start106, end106] = interval2;\n  const [start107, end107] = interval2;\n  const [start108, end108] = interval2;\n  const [start109, end109] = interval2;\n  const [start110, end110] = interval2;\n  const [start111, end111] = interval2;\n  const [start112, end112] = interval2;\n  const [start113, end113] = interval2;\n  const [start114, end114] = interval2;\n  const [start115, end115] = interval2;\n  const [start116, end116] = interval2;\n  const [start117, end117] = interval2;\n  const [start118, end118] = interval2;\n  const [start119, end119] = interval2;\n  const [start120, end120] = interval2;\n  const [start121, end121] = interval2;\n  const [start122, end122] = interval2;\n  const [start123, end123] = interval2;\n  const [start124, end124] = interval2;\n  const [start125, end125] = interval2;\n  const [start126, end126] = interval2;\n  const [start127, end127] = interval2;\n  const [start128, end128] = interval2;\n  const [start129, end129] = interval2;\n  const [start", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/128", "prompt": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodSigsn([1, 2, 2, -4]) == -9\n  >>> prodSigsn([0, 1]) == 0\n  >>> prodSigsn([]) == null\n  */\nconst prodSigsn = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigsn", "gc": "<|endoftext|>/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodSigsn([1, 2, 2, -4]) == -9\n  >>> prodSigsn([0, 1]) == 0\n  >>> prodSigsn([]) == null\n  */\nconst prodSigsn = (arr) => {\n  let signs = [-1, 0, 1];\n  let result = 0;\n  for (let i = 0; i < arr.length; i++) {\n    let sign = signs[i];\n    let num = arr[i];\n    if (sign === 1) {\n      result = result * num;\n    } else {\n      result = result * -num;\n    }\n  }\n  return result;\n};\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodSigsn([1, 2, 2, -4]) == -9\n  >>> prodSigsn([0, 1]) == 0\n  >>> prodSigsn([]) == null\n  */\nconst prodSigsd = (arr) => {\n  let signs = [-1, 0, 1];\n  let result = 0;\n  for (let i = 0; i < arr.length; i++) {\n    let sign = signs[i];\n    let num = arr[i];\n    if (sign === 0) {\n      result = result * num;\n    } else {\n      result = result * -num;\n    }\n  }\n  return result;\n};\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodSigsd([1, 2, 2, -4]) == -9\n  >>> prodSigsd([0, 1]) == 0\n  >>> prodSigsd([]) == null\n  */\nconst prodSigss = (arr) => {\n  let signs = [-1, 0, 1];\n  let result = 0;\n  for (let i = 0; i < arr.length; i++) {\n    let sign = signs[i];\n    let num = arr[i];\n    if (sign === 0) {\n      result = result * num;\n    } else {\n      result = result * -num;\n    }\n  }\n  return result;\n};\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodSigss([1, 2, 2, -4]) == -9\n  >>> prodSigss([0, 1]) == 0\n  >>> prodSigss([]) == null\n  */\nconst prodSigsd = (arr) => {\n  let signs = [-1, 0, 1];\n  let result = 0;\n  for (let i = 0; i < arr.length; i++) {\n    let sign = signs[i];\n    let num = arr[i];\n    if (sign === 0) {\n      result = result * num;\n    } else {\n      result = result * -num;\n    }\n  }\n  return result;\n};\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodSigsd([1, 2, 2, -4]) == -9\n  >>> prodSigsd([0, 1]) == 0\n  >>> prodSigsd([]) == null\n  */\nconst prodSigss = (arr) => {\n  let signs = [-1, 0, 1];\n  let result = 0;\n  for (let i = 0; i < arr.length; i++) {\n    let sign = signs[i];\n    let num = arr[i];\n    if (sign === 0) {\n      result = result * num;\n    } else {\n      result = result * -num;\n    }\n  }\n  return result;\n};\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodSigss([1, 2, 2, -4]) == -9\n  >>> prodSigss([0, 1]) == 0\n  >>> prodSigss([]) == null\n  */\nconst prodSigsd = (arr) => {\n  let signs = [-1, 0, 1];\n  let result = 0;\n  for (let i = 0; i < arr.length; i++) {\n    let sign = signs[i];\n    let num = arr[i];\n    if (sign === 0) {\n      result = result * num;\n    } else {\n      result = result * -num;\n    }\n  }\n  return result;\n};\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodSigsd([1, 2, 2, -4]) == -9\n  >>> prodSigsd([0, 1]) == 0\n  >>> prodSigsd([]) == null\n  */\nconst prodSigss = (arr) => {\n  let signs = [-1, 0, 1];\n  let result = 0;\n  for (let i = 0; i < arr.length; i++) {\n    let sign = signs[i];\n    let num = arr[i];\n    if (sign === 0) {\n      result = result * num;\n    } else {\n      result = result * -num;\n    }\n  }\n  return result;\n};\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodSigss([1, 2, 2, -4]) == -9\n  >>> prodSigss([0, 1]) == 0\n  >>> prodSigss([]) == null\n  */\nconst prodSigsd = (arr) => {\n  let signs = [-1, 0, 1];\n  let result = 0;\n  for (let i = 0; i < arr.length; i++) {\n    let sign = signs[i];\n    let num = arr[i];\n    if (sign === 0) {\n      result = result * num;\n    } else {\n      result = result * -num;\n    }\n  }\n  return result;\n};\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodSigss([1, 2, 2, -4]) == -9\n  >>> prodSigss([0, 1]) == 0\n  >>> prodSigss([]) == null\n  */\nconst prodSigss = (arr) => {\n  let signs = [-1, 0, 1];\n  let result = 0;\n  for (let i = 0; i < arr.length; i++) {\n    let sign = signs[i];\n    let num = arr[i];\n    if (sign === 0) {\n      result = result * num;\n    } else {\n      result = result * -num;\n    }\n  }\n  return result;\n};\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodSigss([1, 2, 2, -4]) == -9\n  >>> prodSigss([0, 1]) == 0\n  >>> prodSigss([]) == null\n  */\nconst prodSigsd = (arr) => {\n  let signs = [-1, 0, 1];\n  let result = 0;\n  for (let i = 0; i < arr.length; i++) {\n    let sign = signs[i];\n    let num = arr[i];\n    if (sign === 0) {\n      result = result * num;\n    } else {\n      result = result * -num;\n    }\n  }\n  return result;\n};\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "gc": "<|endoftext|>/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  const lst_A = new Array(k).fill(0).map(() => new Array(k).fill(0));\n  const lst_B = new Array(k).fill(0).map(() => new Array(k).fill(0));\n  const lst_C = new Array(k).fill(0).map(() => new Array(k).fill(0));\n  const lst_D = new Array(k).fill(0).map(() => new Array(k).fill(0));\n  const lst_E = new Array(k).fill(0).map(() => new Array(k).fill(0));\n  const lst_F = new Array(k).fill(0).map(() => new Array(k).fill(0));\n  const lst_G = new Array(k).fill(0).map(() => new Array(k).fill(0));\n  const lst_H = new Array(k).fill(0).map(() => new Array(k).fill(0));\n  const lst_I = new Array(k).fill(0).map(() => new Array(k).fill(0));\n  const lst_J = new Array(k).fill(0).map(() => new Array(k).fill(0));\n  const lst_K = new Array(k).fill(0).map(() => new Array(k).fill(0));\n  const lst_L = new Array(k).fill(0).map(() => new Array(k).fill(0));\n  const lst_M = new Array(k).fill(0).map(() => new Array(k).fill(0));\n  const lst_N = new Array(k).fill(0).map(() => new Array(k).fill(0));\n  const lst_O = new Array(k).fill(0).map(() => new Array(k).fill(0));\n  const lst_P = new Array(k).fill(0).map(() => new Array(k).fill(0));\n  const lst_Q = new Array(k).fill(0).map(() => new Array(k).fill(0));\n  const lst_R = new Array(k).fill(0).map(() => new Array(k).fill(0));\n  const lst_S = new Array(k).fill(0).map(() => new Array(k).fill(0));\n  const lst_T = new Array(k).fill(0).map(() => new Array(k).fill(0));\n  const lst_U = new Array(k).fill(0).map(() => new Array(k).fill(0));\n  const lst_V = new Array(k).fill(0).map(() => new Array(k).fill(0));\n  const lst_W = new Array(k).fill(0).map(() => new Array(k).fill(0));\n  const lst_X = new Array(k).fill(0).map(() => new Array(k).fill(0));\n  const lst_Y = new Array(k).fill(0).map(() => new Array(k).fill(0));\n  const lst_Z = new Array(k).fill(0).map(() => new Array(k).fill(0));\n  const lst_a = new Array(k).fill(0).map(() => new Array(k).fill(0));\n  const lst_b = new Array(k).fill(0).map(() => new Array(k).fill(0));\n  const lst_c = new Array(k).fill(0).map(() => new Array(k).fill(0));\n  const lst_d = new Array(k).fill(0).map(() => new Array(k).fill(0));\n  const lst_e = new Array(k).fill(0).map(() => new Array(k).fill(0));\n  const lst_f = new Array(k).fill(0).map(() => new Array(k).fill(0));\n  const lst_g = new Array(k).fill(0).map(() => new Array(k).fill(0));\n  const lst_h = new Array(k).fill(0).map(() => new Array(k).fill(0));\n  const lst_i = new Array(k).fill(0).map(() => new Array(k).fill(0));\n  const lst_j = new Array(k).fill(0).map(() => new Array(k).fill(0));\n  const lst_k = new Array(k).fill(0).map(() => new Array(k).fill(0));\n  const lst_l = new Array(k).fill(0).map(() => new Array(k).fill(0));\n  const lst_m = new Array(k).fill(0).map(() => new Array(k).fill(0));\n  const lst_n = new Array(k).fill(0).map(() => new Array(k).fill(0));\n  const lst_o = new Array(k).fill(0).map(() => new Array(k).fill(0));\n  const lst_p = new Array(k).fill(0).map(() => new Array(k).fill(0));\n  const lst_q = new Array(k).fill(0).map(() => new Array(k).fill(0));\n  const lst_r = new Array(k).fill(0).map(() => new Array(k).fill(0));\n  const lst_s = new Array(k).fill(0).map(() => new Array(k).fill(0));\n  const lst_t = new Array(k).fill(0).map(() => new Array(k).fill(0));\n  const lst_u = new Array(k).fill(0).map(() => new Array(k).fill(0));\n  const lst_v = new Array(k).fill(0).map(() => new Array(k).fill(0));\n  const lst_w = new Array(k).fill(0).map(() => new Array(k).fill(0));\n  const lst_x = new Array(k).fill(0).map(() => new Array(k).fill(0));\n  const lst_y = new Array(k).fill(0).map(() => new Array(k).fill(0));\n  const lst_z = new Array(k).fill(0).map(() => new Array(k).fill(0));\n  const lst_A = new Array(k).fill(0).map(() => new Array(k).fill(0));\n  const lst_B = new Array(k).fill(0).map(() => new Array(k).fill(0));\n  const lst_C = new Array(k).fill(0).map(() => new Array(k).fill(0));\n  const lst_D = new Array(k).fill(0).map(() => new Array(k).fill(0));\n  const lst_E = new Array(k).fill(0).map(() => new Array(k).fill(0));\n  const lst_F = new Array(k).fill(0).map((", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/13", "prompt": "/* Return a greatest common divisor of two integers a and b\n  >>> rgeatestCommonDivisor(3, 5)\n  1\n  >>> rgeatestCommonDivisor(25, 15)\n  5\n  */\nconst rgeatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "rgeatestCommonDivisor", "gc": "<|endoftext|>/* Return a greatest common divisor of two integers a and b\n  >>> rgeatestCommonDivisor(3, 5)\n  1\n  >>> rgeatestCommonDivisor(25, 15)\n  5\n  */\nconst rgeatestCommonDivisor = (a, b) => {\n  if (a < b) {\n    return rgeatestCommonDivisor(b, a); // a < b\n  }\n  return a % b;\n};\n\n// Given a number x, return its closest prime factor\nconst rgetClosestPrimeFactor = x => {\n  const factors = [];\n  let i = 1;\n  while (true) {\n    if (x % i === 0) {\n      factors.push(i);\n      x = x / i;\n    } else {\n      i++;\n    }\n    if (x === 1) {\n      return factors;\n    }\n  }\n};\n\n// Given a number x, return its closest prime factor\nconst rgetClosestPrimeFactors = x => {\n  const factors = [];\n  let i = 1;\n  while (true) {\n    if (x % i === 0) {\n      factors.push(i);\n      x = x / i;\n    } else {\n      i++;\n    }\n    if (x === 1) {\n      return factors;\n    }\n  }\n};\n\n// Given a number x, return its closest prime factor\nconst rgetClosestPrimeFactorsFast = x => {\n  const factors = [];\n  let i = 1;\n  while (true) {\n    if (x % i === 0) {\n      factors.push(i);\n      x = x / i;\n    } else {\n      i++;\n    }\n    if (x === 1) {\n      return factors;\n    }\n  }\n};\n\n// Given a number x, return its closest prime factor\nconst rgetClosestPrimeFactorsSlow = x => {\n  const factors = [];\n  let i = 1;\n  while (true) {\n    if (x % i === 0) {\n      factors.push(i);\n      x = x / i;\n    } else {\n      i++;\n    }\n    if (x === 1) {\n      return factors;\n    }\n  }\n};\n\n// Given a number x, return its closest prime factor\nconst rgetClosestPrimeFactorsFastSlow = x => {\n  const factors = [];\n  let i = 1;\n  while (true) {\n    if (x % i === 0) {\n      factors.push(i);\n      x = x / i;\n    } else {\n      i++;\n    }\n    if (x === 1) {\n      return factors;\n    }\n  }\n};\n\n// Given a number x, return its closest prime factor\nconst rgetClosestPrimeFactorsSlowFast = x => {\n  const factors = [];\n  let i = 1;\n  while (true) {\n    if (x % i === 0) {\n      factors.push(i);\n      x = x / i;\n    } else {\n      i++;\n    }\n    if (x === 1) {\n      return factors;\n    }\n  }\n};\n\n// Given a number x, return its closest prime factor\nconst rgetClosestPrimeFactorsFastSlowSlow = x => {\n  const factors = [];\n  let i = 1;\n  while (true) {\n    if (x % i === 0) {\n      factors.push(i);\n      x = x / i;\n    } else {\n      i++;\n    }\n    if (x === 1) {\n      return factors;\n    }\n  }\n};\n\n// Given a number x, return its closest prime factor\nconst rgetClosestPrimeFactorsFastSlowSlowFast = x => {\n  const factors = [];\n  let i = 1;\n  while (true) {\n    if (x % i === 0) {\n      factors.push(i);\n      x = x / i;\n    } else {\n      i++;\n    }\n    if (x === 1) {\n      return factors;\n    }\n  }\n};\n\n// Given a number x, return its closest prime factor\nconst rgetClosestPrimeFactorsFastSlowSlowFastSlow = x => {\n  const factors = [];\n  let i = 1;\n  while (true) {\n    if (x % i === 0) {\n      factors.push(i);\n      x = x / i;\n    } else {\n      i++;\n    }\n    if (x === 1) {\n      return factors;\n    }\n  }\n};\n\n// Given a number x, return its closest prime factor\nconst rgetClosestPrimeFactorsFastSlowSlowFastSlowSlow = x => {\n  const factors = [];\n  let i = 1;\n  while (true) {\n    if (x % i === 0) {\n      factors.push(i);\n      x = x / i;\n    } else {\n      i++;\n    }\n    if (x === 1) {\n      return factors;\n    }\n  }\n};\n\n// Given a number x, return its closest prime factor\nconst rgetClosestPrimeFactorsFastSlowSlowFastSlowSlowFast = x => {\n  const factors = [];\n  let i = 1;\n  while (true) {\n    if (x % i === 0) {\n      factors.push(i);\n      x = x / i;\n    } else {\n      i++;\n    }\n    if (x === 1) {\n      return factors;\n    }\n  }\n};\n\n// Given a number x, return its closest prime factor\nconst rgetClosestPrimeFactorsFastSlowSlowFastSlowSlowSlowSlow = x => {\n  const factors = [];\n  let i = 1;\n  while (true) {\n    if (x % i === 0) {\n      factors.push(i);\n      x = x / i;\n    } else {\n      i++;\n    }\n    if (x === 1) {\n      return factors;\n    }\n  }\n};\n\n// Given a number x, return its closest prime factor\nconst rgetClosestPrimeFactorsFastSlowSlowFastSlowSlowSlowFast = x => {\n  const factors = [];\n  let i = 1;\n  while (true) {\n    if (x % i === 0) {\n      factors.push(i);\n      x = x / i;\n    } else {\n      i++;\n    }\n    if (x === 1) {\n      return factors;\n    }\n  }\n};\n\n// Given a number x, return its closest prime factor\nconst rgetClosestPrimeFactorsFastSlowSlowFastSlowSlowSlowSlowSlow = x => {\n  const factors = [];\n  let i = 1;\n  while (true) {\n    if (x % i === 0) {\n      factors.push(i);\n      x = x / i;\n    } else {\n      i++;\n    }\n    if (x === 1) {\n      return factors;\n    }\n  }\n};\n\n// Given a number x, return its closest prime factor\nconst rgetClosestPrimeFactorsFastSlowSlowFastSlowSlowSlowSlowFast = x => {\n  const factors = [];\n  let i = 1;\n  while (true) {\n    if (x % i === 0) {\n      factors.push(i);\n      x = x / i;\n    } else {\n      i++;\n    }\n    if (x === 1) {\n      return factors;\n    }\n  }\n};\n\n// Given a number x, return its closest prime factor\nconst rgetClosestPrimeFactorsFastSlowSlowFastSlowSlowSlowSlowSlowSlow = x => {\n  const factors = [];\n  let i = 1;\n  while (true) {\n    if (x % i === 0) {\n      factors.push(i);\n      x = x / i;\n    } else {\n      i++;\n    }\n    if (x === 1) {\n      return factors;\n    }\n  }\n};\n\n// Given a number x, return its closest prime factor\nconst rgetClosestPrimeFactorsFastSlowSlowFastSlowSlowSlowSlowSlowSlowFast = x => {\n  const factors = [];\n  let i = 1;\n  while (true) {\n    if (x % i === 0) {\n      factors.push(i);\n      x = x / i;\n    } else {\n      i++;\n    }\n    if (x === 1) {\n      return factors;\n    }\n  }\n};\n\n// Given a number x, return its closest prime factor\nconst rgetClosestPrimeFactorsFastSlowSlowFastSlowSlowSlowSlowSlowSlowSlowSlow = x => {\n  const ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tir(1) = 3\n  tir(n) = 1 + n / 2, if n is even.\n  tir(n) =  tir(n - 1) + tir(n - 2) + tir(n + 1), if n is odd.\n  For example:\n  tir(2) = 1 + (2 / 2) = 2\n  tir(4) = 3\n  tir(3) = tir(2) + tir(1) + tir(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tir(3) = [1, 3, 2, 8]\n  */\nconst tir = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tir", "gc": "<|endoftext|>/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tir(1) = 3\n  tir(n) = 1 + n / 2, if n is even.\n  tir(n) =  tir(n - 1) + tir(n - 2) + tir(n + 1), if n is odd.\n  For example:\n  tir(2) = 1 + (2 / 2) = 2\n  tir(4) = 3\n  tir(3) = tir(2) + tir(1) + tir(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tir(3) = [1, 3, 2, 8]\n  */\nconst tir = (n) => {\n  if (n <= 1) {\n    return [n, n, n, n];\n  }\n  return [tir(n - 1) + tir(n - 2) + tir(n), tir(n - 1) + tir(n - 2), tir(n + 1), tir(n + 1)];\n};\n\n/*\n  Given a non-negative integer n, return the first n + 1 numbers of the Fibonacci sequence.\n  Examples:\n  fib(5) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(10) = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765]\n*/\nconst fib = (n) => {\n  if (n <= 1) {\n    return [n, n, n, n];\n  }\n  return [fib(n - 1) + fib(n - 2), fib(n - 1) + fib(n - 2), fib(n - 1) + fib(n - 2), fib(n - 1) + fib(n - 2), fib(n - 1) + fib(n - 2), fib(n - 1) + fib(n - 2), fib(n - 1) + fib(n - 2), fib(n - 1) + fib(n - 2), fib(n - 1) + fib(n - 2), fib(n - 1) + fib(n - 2), fib(n - 1) + fib(n - 2), fib(n - 1) + fib(n - 2), fib(n - 1) + fib(n - 2), fib(n - 1) + fib(n - 2), fib(n - 1) + fib(n - 2), fib(n - 1) + fib(n - 2), fib(n - 1) + fib(n - 2), fib(n - 1) + fib(n - 2), fib(n - 1) + fib(n - 2), fib(n - 1) + fib(n - 2), fib(n - 1) + fib(n - 2), fib(n - 1) + fib(n - 2), fib(n - 1) + fib(n - 2), fib(n - 1) + fib(n - 2), fib(n - 1) + fib(n - 2), fib(n - 1) + fib(n - 2), fib(n - 1) + fib(n - 2), fib(n - 1) + fib(n - 2), fib(n - 1) + fib(n - 2), fib(n - 1) + fib(n - 2), fib(n - 1) + fib(n - 2), fib(n - 1) + fib(n - 2), fib(n - 1) + fib(n - 2), fib(n - 1) + fib(n - 2), fib(n - 1) + fib(n - 2), fib(n - 1) + fib(n - 2), fib(n - 1) + fib(n - 2), fib(n - 1) + fib(n - 2), fib(n - 1) + fib(n - 2), fib(n - 1) + fib(n - 2), fib(n - 1) + fib(n - 2), fib(n - 1) + fib(n - 2), fib(n - 1) + fib(n - 2), fib(n - 1) + fib(n - 2), fib(n - 1) + fib(n - 2), fib(n - 1) + fib(n - 2), fib(n - 1) + fib(n - 2), fib(n - 1) + fib(n - 2), fib(n - 1) + fib(n - 2), fib(n - 1) + fib(n - 2), fib(n - 1) + fib(n - 2), fib(n - 1) + fib(n - 2), fib(n - 1) + fib(n - 2), fib(n - 1) + fib(n - 2), fib(n - 1) + fib(n - 2), fib(n - 1) + fib(n - 2), fib(n - 1) + fib(n - 2), fib(n - 1) + fib(n - 2), fib(n - 1) + fib(n - 2), fib(n - 1) + fib(n - 2), fib(n - 1) + fib(n - 2), fib(n - 1) + fib(n - 2), fib(n - 1) + fib(n - 2), fib(n - 1) + fib(n - 2), fib(n - 1) + fib(n - 2), fib(n - 1) + fib(n - 2), fib(n - 1) + fib(n - 2), fib(n - 1) + fib(n - 2), fib(n - 1) + fib(n - 2), fib(n - 1) + fib(n - 2), fib(n - 1) + fib(n - 2), fib(n - 1) + fib(n - 2), fib(n - 1) + fib(n - 2), fib(n - 1) + fib(n - 2), fib(n - 1) + fib(n - 2), fib(n - 1) + fib(n - 2), fib(n - 1) + fib(n - 2), fib(n - 1) + fib(n - 2), fib(n - 1) + fib(n - 2), fib(n - 1) + fib(n - 2), fib(n - 1) + fib(n - 2), fib(n - 1) + fib(n - 2), fib(n - 1) + fib(n - 2), fib(n - 1) + fib(n - 2), fib(n - 1) + fib(n - 2), fib(n - 1) + fib(n - 2), fib(n - 1) + fib(n - 2), fib(n - 1) + fib(n - 2), fib(n - 1) + fib(n - 2), fib(n - 1) + fib(n - 2), fib(n - 1) + fib(n - 2), fib(n - 1) + fib(n - 2), fib(n - 1) + fib(n - 2), fib(n - 1) + fib(n - 2), fib(n - 1) + fib(n - 2), fib(n - 1) + fib(n - 2), fib(n - 1) + fib(n - 2), fib(n - 1) + fib(n - 2), fib(n - 1) + fib(n - 2), fib(n - 1) + fib(n - 2), fib(n - 1) + fib(n - 2), fib(n - 1) + fib(n - 2), fib(n - 1) + fib(n - 2), fib(n - 1) + fib(n - 2), fib(n - 1) + fib(n - 2), fib(n - 1) + fib(n - 2), fib(n - 1) + fib(n - 2), fib(n - 1) + fib(n - 2), fib(n - 1) + fib(n - 2), fib(n - 1) + fib(n - 2), fib(n - 1) + fib(n - 2), fib(n - 1) + fib(n - 2), fib(n - 1) + fib(n - 2), fib(n - 1) + fib(n - 2), fib(n - 1) + fib(n - 2), fib(n - 1) + fib(n - 2), fib(n - 1) + fib(n - 2), fib(n - 1) + fib(n - 2), fib(n - 1) + fib(n - 2), fib(n - 1) + fib(n - 2), fib(n - 1) + fib(n - 2), fib(n - 1) + fib(n - 2), fib(n - 1) + fib(n - 2), fib(n - 1) + fib(n - 2), fib(n - 1) + fib(n - 2), fib(n - 1) + fib(n - 2), fib(n - 1) + fib(n - 2), fib(n - 1) + fib(n - 2), fib(n - 1) + fib(n - 2), fib(n - 1) + fib(n - 2), fib(n - 1) + fib(n - 2), fib(n - 1) + fib(n - 2), fib(n - 1) + fib(n - 2), fib(n - 1) + fib(n - 2), fib(n - 1) + fib(n - 2), fib(n - 1) + fib(n - 2), fib(n - 1) + fib(n - 2), fib(n - 1) + fib(n - 2), fib(n - 1) + fib(n - 2), fib(n - 1) + fib(n - 2), fib(n - 1) + fib(n - 2), fib(n - 1) + fib(n - 2), fib(n - 1) + fib(n - 2), fib(n - 1) + fib(n - 2), fib(n - 1) + fib(n - 2), fib(n - 1) + fib(n - 2), fib(n - 1) + fib(n - 2), fib(n - 1) + fib(n - 2), fib(n - 1) + fib(n - 2), fi", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integer n, return the product of the odd digits.\n  Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "gc": "<|endoftext|>/*Given a positive integer n, return the product of the odd digits.\n  Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let product = 1;\n  for (let i = 2; i <= n; i++) {\n    product *= i;\n  }\n  return product;\n};\n\n/*Given a positive integer n, return the product of the even digits.\n  Return 0 if all digits are odd.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let product = 1;\n  for (let i = 1; i <= n; i++) {\n    product *= i;\n  }\n  return product;\n};\n\n/*Given a positive integer n, return the sum of its digits, modulo 10.\n  Return 0 if n is 0.\n  For example:\n  digits(0)  == 0\n  digits(1)  == 1\n  digits(4)  == 4\n  digits(235) == 235\n  */\nconst digits = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += digits(i);\n  }\n  return sum % 10;\n};\n\n/*Given a positive integer n, return the sum of its digits, modulo 10.\n  Return 0 if n is 0.\n  For example:\n  digits(0)  == 0\n  digits(1)  == 1\n  digits(4)  == 4\n  digits(235) == 235\n  */\nconst digits = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += digits(i) % 10;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of its digits, modulo 10.\n  Return 0 if n is 0.\n  For example:\n  digits(0)  == 0\n  digits(1)  == 1\n  digits(4)  == 4\n  digits(235) == 235\n  */\nconst digits = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += digits(i) % 10;\n  }\n  return sum % 10;\n};\n\n/*Given a positive integer n, return the sum of its digits, modulo 10.\n  Return 0 if n is 0.\n  For example:\n  digits(0)  == 0\n  digits(1)  == 1\n  digits(4)  == 4\n  digits(235) == 235\n  */\nconst digits = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += digits(i) % 10;\n  }\n  return sum % 10;\n};\n\n/*Given a positive integer n, return the sum of its digits, modulo 10.\n  Return 0 if n is 0.\n  For example:\n  digits(0)  == 0\n  digits(1)  == 1\n  digits(4)  == 4\n  digits(235) == 235\n  */\nconst digits = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += digits(i) % 10;\n  }\n  return sum % 10;\n};\n\n/*Given a positive integer n, return the sum of its digits, modulo 10.\n  Return 0 if n is 0.\n  For example:\n  digits(0)  == 0\n  digits(1)  == 1\n  digits(4)  == 4\n  digits(235) == 235\n  */\nconst digits = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += digits(i) % 10;\n  }\n  return sum % 10;\n};\n\n/*Given a positive integer n, return the sum of its digits, modulo 10.\n  Return 0 if n is 0.\n  For example:\n  digits(0)  == 0\n  digits(1)  == 1\n  digits(4)  == 4\n  digits(235) == 235\n  */\nconst digits = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += digits(i) % 10;\n  }\n  return sum % 10;\n};\n\n/*Given a positive integer n, return the sum of its digits, modulo 10.\n  Return 0 if n is 0.\n  For example:\n  digits(0)  == 0\n  digits(1)  == 1\n  digits(4)  == 4\n  digits(235) == 235\n  */\nconst digits = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += digits(i) % 10;\n  }\n  return sum % 10;\n};\n\n/*Given a positive integer n, return the sum of its digits, modulo 10.\n  Return 0 if n is 0.\n  For example:\n  digits(0)  == 0\n  digits(1)  == 1\n  digits(4)  == 4\n  digits(235) == 235\n  */\nconst digits = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += digits(i) % 10;\n  }\n  return sum % 10;\n};\n\n/*Given a positive integer n, return the sum of its digits, modulo 10.\n  Return 0 if n is 0.\n  For example:\n  digits(0)  == 0\n  digits(1)  == 1\n  digits(4)  == 4\n  digits(235) == 235\n  */\nconst digits = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += digits(i) % 10;\n  }\n  return sum % 10;\n};\n\n/*Given a positive integer n, return the sum of its digits, modulo 10.\n  Return 0 if n is 0.\n  For example:\n  digits(0)  == 0\n  digits(1)  == 1\n  digits(4)  == 4\n  digits(235) == 235\n  */\nconst digits = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += digits(i) % 10;\n  }\n  return sum % 10;\n};\n\n/*Given a positive integer n, return the sum of its digits, modulo 10.\n  Return 0 if n is 0.\n  For example:\n  digits(0)  == 0\n  digits(1)  == 1\n  digits(4)  == 4\n  digits(235) == 235\n  */\nconst digits = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += digits(i) % 10;\n  }\n  return sum % 10;\n};\n\n/*Given a positive integer n, return the sum of its digits, modulo 10.\n  Return 0 if n is 0.\n  For example:\n  digits(0)  == 0\n  digits(1)  == 1\n  digits(4)  == 4\n  digits(235) == 235\n  */\nconst digits = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += digits(i) % 10;\n  }\n  return sum % 10;\n};\n\n/*Given a positive integer n, return the sum of its digits, modulo 10.\n  Return 0 if n is 0.\n  For example:\n  digits(0)  == 0\n  digits(1)  == 1\n  digits(4)  == 4\n  digits(235) == 235\n  */\nconst digits = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += digits(i) % 10;\n  }\n  return sum % 10;\n};\n\n/*Given a positive integer n, return the sum of its digits, modulo 10.\n  Return 0 if n is 0.\n  For example:\n  digits(0)  == 0\n  digits(1)  == 1\n  digits(4)  == 4\n  digits(235) == 235\n  */\nconst digits = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += digits(i) % 10;\n  }\n  return sum % 10;\n};", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 3}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ false\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ true\n  */\nconst isNested = (string) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "gc": "<|endoftext|>/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ false\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ true\n  */\nconst isNested = (string) => {\n  const brackets = string\n   .split(']')\n   .map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/133", "prompt": "/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "gc": "<|endoftext|>/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.ceil(sum);\n};\n\n/*\n  You are given a list of numbers and a target number.\n  You are also given an algorithm to find the maximum sum.\n  Return the maximum sum from the given list.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst maxSum = (lst, target) => {\n  let maxSum = Number.MAX_SAFE_INTEGER;\n  let maxSumIndex = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > target) {\n      maxSum = Math.max(maxSum, lst[i]);\n      maxSumIndex = i;\n    }\n  }\n  return maxSum;\n};\n\n/*\n  You are given a list of numbers and a target number.\n  You are also given an algorithm to find the minimum sum.\n  Return the minimum sum from the given list.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst minSum = (lst, target) => {\n  let minSum = Number.MIN_SAFE_INTEGER;\n  let minSumIndex = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < target) {\n      minSum = Math.min(minSum, lst[i]);\n      minSumIndex = i;\n    }\n  }\n  return minSum;\n};\n\n/*\n  You are given a list of numbers and a target number.\n  You are also given an algorithm to find the maximum difference between target and each number in the list.\n  Return the maximum difference between the target and the numbers in the list.\n  Examples:\n  For lst = [1,2,3] the output should be 1\n  For lst = [1,4,9] the output should be 9\n  For lst = [1,3,5,7] the output should be 7\n  For lst = [1.4,4.2,0] the output should be 0\n  For lst = [-2.4,1,1] the output should be 1\n  */\nconst maxDifference = (lst, target) => {\n  let maxDifference = 0;\n  let maxDifferenceIndex = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > target) {\n      maxDifference = Math.max(maxDifference, Math.abs(target - lst[i]));\n      maxDifferenceIndex = i;\n    }\n  }\n  return maxDifference;\n};\n\n/*\n  You are given a list of numbers and a target number.\n  You are also given an algorithm to find the minimum difference between target and each number in the list.\n  Return the minimum difference between the target and the numbers in the list.\n  Examples:\n  For lst = [1,2,3] the output should be 1\n  For lst = [1,4,9] the output should be 9\n  For lst = [1,3,5,7] the output should be 7\n  For lst = [1.4,4.2,0] the output should be 0\n  For lst = [-2.4,1,1] the output should be 1\n  */\nconst minDifference = (lst, target) => {\n  let minDifference = 0;\n  let minDifferenceIndex = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < target) {\n      minDifference = Math.min(minDifference, Math.abs(target - lst[i]));\n      minDifferenceIndex = i;\n    }\n  }\n  return minDifference;\n};\n\n/*\n  You are given a list of numbers and a target number.\n  You are also given an algorithm to find the maximum difference between target and each number in the list.\n  Return the maximum difference between the target and the numbers in the list.\n  Examples:\n  For lst = [1,2,3] the output should be 1\n  For lst = [1,4,9] the output should be 9\n  For lst = [1,3,5,7] the output should be 7\n  For lst = [1.4,4.2,0] the output should be 0\n  For lst = [-2.4,1,1] the output should be 1\n  */\nconst maxDifferenceBetween = (lst, target) => {\n  let maxDifference = 0;\n  let maxDifferenceIndex = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > target) {\n      maxDifference = Math.max(maxDifference, Math.abs(target - lst[i]));\n      maxDifferenceIndex = i;\n    }\n  }\n  return maxDifference - lst[maxDifferenceIndex];\n};\n\n/*\n  You are given a list of numbers and a target number.\n  You are also given an algorithm to find the minimum difference between target and each number in the list.\n  Return the minimum difference between the target and the numbers in the list.\n  Examples:\n  For lst = [1,2,3] the output should be 1\n  For lst = [1,4,9] the output should be 9\n  For lst = [1,3,5,7] the output should be 7\n  For lst = [1.4,4.2,0] the output should be 0\n  For lst = [-2.4,1,1] the output should be 1\n  */\nconst minDifferenceBetween = (lst, target) => {\n  let minDifference = 0;\n  let minDifferenceIndex = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < target) {\n      minDifference = Math.min(minDifference, Math.abs(target - lst[i]));\n      minDifferenceIndex = i;\n    }\n  }\n  return minDifference - lst[minDifferenceIndex];\n};\n\n/*\n  You are given a list of numbers and a target number.\n  You are also given an algorithm to find the maximum difference between target and each number in the list.\n  Return the maximum difference between the target and the numbers in the list.\n  Examples:\n  For lst = [1,2,3] the output should be 1\n  For lst = [1,4,9] the output should be 9\n  For lst = [1,3,5,7] the output should be 7\n  For lst = [1.4,4.2,0] the output should be 0\n  For lst = [-2.4,1,1] the output should be 1\n  */\nconst maxDifferenceBetweenNumbers = (lst, target) => {\n  let maxDifference = 0;\n  let maxDifferenceIndex = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > target) {\n      maxDifference = Math.max(maxDifference, Math.abs(target - lst[i]));\n      maxDifferenceIndex = i;\n    }\n  }\n  return maxDifference - lst[maxDifferenceIndex];\n};\n\n/*\n  You are given a list of numbers and a target number.\n  You are also given an algorithm to find the minimum difference between target and each number in the list.\n  Return the minimum difference between the target and the numbers in the list.\n  Examples:\n  For lst = [1,2,3] the output should be 1\n  For lst = [1,4,9] the output should be 9\n  For lst = [1,3,5,7] the output should be 7\n  For lst = [1.4,4.2,0] the output should be 0\n  For lst = [-2.4,1,1] the output should be 1\n  */\nconst minDifferenceBetweenNumbers = (lst, target) => {\n  let minDifference = 0;\n  let minDifferenceIndex = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < target) {\n      minDifference = Math.min(minDifference, Math.abs(target - lst[i]));\n      minDifferenceIndex = i;\n    }\n  }\n  return minDifference - lst[minDifferenceIndex];\n};\n\n/*\n  You are given a list of numbers and a target number.\n  You are also given an algorithm ", "passed": 1, "run_status": 0, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "gc": "<|endoftext|>/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt[txt.length - 1];\n  return lastChar && lastChar!== '.' && lastChar!=='';\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a digit and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsDigit(\"apple pie\") ➞ false\n  checkIfLastCharIsDigit(\"apple pi e\") ➞ true\n  checkIfLastCharIsDigit(\"apple pi e \") ➞ false\n  checkIfLastCharIsDigit(\"\") ➞ false\n  */\nconst checkIfLastCharIsDigit = (txt) => {\n  const lastChar = txt[txt.length - 1];\n  return lastChar && lastChar!== '.' && lastChar!=='';\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a letter or digit and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsLetterOrDigit(\"apple pie\") ➞ false\n  checkIfLastCharIsLetterOrDigit(\"apple pi e\") ➞ true\n  checkIfLastCharIsLetterOrDigit(\"apple pi e \") ➞ false\n  checkIfLastCharIsLetterOrDigit(\"\") ➞ false\n  */\nconst checkIfLastCharIsLetterOrDigit = (txt) => {\n  const lastChar = txt[txt.length - 1];\n  return lastChar && lastChar!== '.' && lastChar!=='';\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a letter or digit and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsLetterOrDigit(\"apple pie\") ➞ false\n  checkIfLastCharIsLetterOrDigit(\"apple pi e\") ➞ true\n  checkIfLastCharIsLetterOrDigit(\"apple pi e \") ➞ false\n  checkIfLastCharIsLetterOrDigit(\"\") ➞ false\n  */\nconst checkIfLastCharIsLetterOrDigitAndSpace = (txt) => {\n  const lastChar = txt[txt.length - 1];\n  return lastChar && lastChar!== '.' && lastChar!=='';\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a letter or digit and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsLetterOrDigit(\"apple pie\") ➞ false\n  checkIfLastCharIsLetterOrDigit(\"apple pi e\") ➞ true\n  checkIfLastCharIsLetterOrDigit(\"apple pi e \") ➞ false\n  checkIfLastCharIsLetterOrDigit(\"\") ➞ false\n  */\nconst checkIfLastCharIsLetterOrDigitAndSpaceAndDigit = (txt) => {\n  const lastChar = txt[txt.length - 1];\n  return lastChar && lastChar!== '.' && lastChar!=='';\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a letter or digit and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsLetterOrDigit(\"apple pie\") ➞ false\n  checkIfLastCharIsLetterOrDigit(\"apple pi e\") ➞ true\n  checkIfLastCharIsLetterOrDigit(\"apple pi e \") ➞ false\n  checkIfLastCharIsLetterOrDigit(\"\") ➞ false\n  */\nconst checkIfLastCharIsLetterOrDigitAndSpaceAndDigitAndSpace = (txt) => {\n  const lastChar = txt[txt.length - 1];\n  return lastChar && lastChar!== '.' && lastChar!=='';\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a letter or digit and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsLetterOrDigit(\"apple pie\") ➞ false\n  checkIfLastCharIsLetterOrDigit(\"apple pi e\") ➞ true\n  checkIfLastCharIsLetterOrDigit(\"apple pi e \") ➞ false\n  checkIfLastCharIsLetterOrDigit(\"\") ➞ false\n  */\nconst checkIfLastCharIsLetterOrDigitAndSpaceAndDigitAndSpaceAndDigit = (txt) => {\n  const lastChar = txt[txt.length - 1];\n  return lastChar && lastChar!== '.' && lastChar!=='';\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a letter or digit and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsLetterOrDigit(\"apple pie\") ➞ false\n  checkIfLastCharIsLetterOrDigit(\"apple pi e\") ➞ true\n  checkIfLastCharIsLetterOrDigit(\"apple pi e \") ➞ false\n  checkIfLastCharIsLetterOrDigit(\"\") ➞ false\n  */\nconst checkIfLastCharIsLetterOrDigitAndSpaceAndDigitAndSpaceAndDigit = (txt) => {\n  const lastChar = txt[txt.length - 1];\n  return lastChar && lastChar!== '.' && lastChar!=='';\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a letter or digit and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsLetterOrDigit(\"apple pie\") ➞ false\n  checkIfLastCharIsLetterOrDigit(\"apple pi e\") ➞ true\n  checkIfLastCharIsLetterOrDigit(\"apple pi e \") ➞ false\n  checkIfLastCharIsLetterOrDigit(\"\") ➞ false\n  */\nconst checkIfLastCharIsLetterOrDigitAndSpaceAndDigitAnd", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/135", "prompt": "/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "gc": "<|endoftext|>/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let i = arr.length - 1;\n  let j = arr.length - 1;\n  let k = 0;\n  let max = 0;\n  while (i > 0) {\n    if (arr[i] > arr[j]) {\n      max = i;\n      k = j;\n      j = i;\n      i = k + 1;\n    }\n  }\n  return max;\n};\n\n/*\n  Given a sorted array and a target value, return the index of the target\n  value if it is found in the array. Otherwise, return -1.\n\n  Example:\n  search([1,2,3,4,5], 2) = 1, search([1,2,3,4,5], 3) = -1\n*/\nconst search = (arr, target) => {\n  let i = arr.length - 1;\n  let j = arr.length - 1;\n  let k = 0;\n  let max = 0;\n  while (i > 0) {\n    if (arr[i] === target) {\n      max = i;\n      k = j;\n      j = i;\n      i = k + 1;\n    }\n  }\n  return max;\n};\n\n/*\n  Given a sorted array and a target value, return the index of the target\n  value if it is found in the array. Otherwise, return -1.\n\n  Example:\n  search([1,2,3,4,5], 2) = 1, search([1,2,3,4,5], 3) = -1\n*/\nconst searchInSortedArray = (arr, target) => {\n  let i = arr.length - 1;\n  let j = arr.length - 1;\n  let k = 0;\n  let max = 0;\n  while (i > 0) {\n    if (arr[i] === target) {\n      max = i;\n      k = j;\n      j = i;\n      i = k + 1;\n    }\n  }\n  return max;\n};\n\n/*\n  Given a sorted array and a target value, return the index of the target\n  value if it is found in the array. Otherwise, return -1.\n\n  Example:\n  searchInSortedArray([1,2,3,4,5], 2) = 1, searchInSortedArray([1,2,3,4,5], 3) = -1\n*/\nconst searchInSortedArrayInSortedArray = (arr, target) => {\n  let i = arr.length - 1;\n  let j = arr.length - 1;\n  let k = 0;\n  let max = 0;\n  while (i > 0) {\n    if (arr[i] === target) {\n      max = i;\n      k = j;\n      j = i;\n      i = k + 1;\n    }\n  }\n  return max;\n};\n\n/*\n  Given a sorted array and a target value, return the index of the target\n  value if it is found in the array. Otherwise, return -1.\n\n  Example:\n  searchInSortedArrayInSortedArray([1,2,3,4,5], 2) = 1, searchInSortedArrayInSortedArray([1,2,3,4,5], 3) = -1\n*/\nconst searchInSortedArrayInSortedArrayInSortedArray = (arr, target) => {\n  let i = arr.length - 1;\n  let j = arr.length - 1;\n  let k = 0;\n  let max = 0;\n  while (i > 0) {\n    if (arr[i] === target) {\n      max = i;\n      k = j;\n      j = i;\n      i = k + 1;\n    }\n  }\n  return max;\n};\n\n/*\n  Given a sorted array and a target value, return the index of the target\n  value if it is found in the array. Otherwise, return -1.\n\n  Example:\n  searchInSortedArrayInSortedArrayInSortedArray([1,2,3,4,5], 2) = 1, searchInSortedArrayInSortedArrayInSortedArray([1,2,3,4,5], 3) = -1\n*/\nconst searchInSortedArrayInSortedArrayInSortedArrayInSortedArray = (arr, target) => {\n  let i = arr.length - 1;\n  let j = arr.length - 1;\n  let k = 0;\n  let max = 0;\n  while (i > 0) {\n    if (arr[i] === target) {\n      max = i;\n      k = j;\n      j = i;\n      i = k + 1;\n    }\n  }\n  return max;\n};\n\n/*\n  Given a sorted array and a target value, return the index of the target\n  value if it is found in the array. Otherwise, return -1.\n\n  Example:\n  searchInSortedArrayInSortedArrayInSortedArray([1,2,3,4,5], 2) = 1, searchInSortedArrayInSortedArrayInSortedArray([1,2,3,4,5], 3) = -1\n*/\nconst searchInSortedArrayInSortedArrayInSortedArrayInSortedArrayInSortedArray = (arr, target) => {\n  let i = arr.length - 1;\n  let j = arr.length - 1;\n  let k = 0;\n  let max = 0;\n  while (i > 0) {\n    if (arr[i] === target) {\n      max = i;\n      k = j;\n      j = i;\n      i = k + 1;\n    }\n  }\n  return max;\n};\n\n/*\n  Given a sorted array and a target value, return the index of the target\n  value if it is found in the array. Otherwise, return -1.\n\n  Example:\n  searchInSortedArrayInSortedArrayInSortedArrayInSortedArray([1,2,3,4,5], 2) = 1, searchInSortedArrayInSortedArrayInSortedArrayInSortedArray([1,2,3,4,5], 3) = -1\n*/\nconst searchInSortedArrayInSortedArrayInSortedArrayInSortedArrayInSortedArrayInSortedArray = (arr, target) => {\n  let i = arr.length - 1;\n  let j = arr.length - 1;\n  let k = 0;\n  let max = 0;\n  while (i > 0) {\n    if (arr[i] === target) {\n      max = i;\n      k = j;\n      j = i;\n      i = k + 1;\n    }\n  }\n  return max;\n};\n\n/*\n  Given a sorted array and a target value, return the index of the target\n  value if it is found in the array. Otherwise, return -1.\n\n  Example:\n  searchInSortedArrayInSortedArrayInSortedArrayInSortedArray([1,2,3,4,5], 2) = 1, searchInSortedArrayInSortedArrayInSortedArrayInSortedArray([1,2,3,4,5], 3) = -1\n*/\nconst searchInSortedArrayInSortedArrayInSortedArrayInSortedArrayInSortedArrayInSortedArray = (arr, target) => {\n  let i = arr.length - 1;\n  let j = arr.length - 1;\n  let k = 0;\n  let max = 0;\n  while (i > 0) {\n    if (arr[i] === target) {\n      max = i;\n      k = j;\n      j = i;\n      i = k + 1;\n    }\n  }\n  return max;\n};\n\n/*\n  Given a sorted array and a target value, return the index of the target\n  value if it is found in the array. Otherwise, return -1.\n\n  Example:\n  searchInSortedArrayInSortedArrayInSortedArrayInSortedArray([1,2,3,4,5], 2) = 1, searchInSortedArrayInSortedArrayInSortedArrayInSortedArray([1,2,3,4,5], 3) = -1\n*/\nconst searchInSortedArrayInSortedArrayInSortedArrayInSortedArrayInSortedArrayInSortedArray = (arr, target) => {\n  let i = arr.length - 1;\n  let j = arr.length - 1;\n  let k = 0;\n  let max = 0;\n  while (i > 0) {\n    if (arr[i] === target) {\n      max = i;\n      k = j;\n      j = i;\n      i = k + 1;\n    }\n  }\n  return max;\n};\n\n/*\n  Given a sorted array and a target value, return the index of the target\n  value if it is found in the array. Otherwise, return -1.\n\n  Example:\n  searchInSortedArrayInSortedArrayInSortedArrayInSortedArray([1,2,3,4,5], 2) = 1, searchInSortedArrayInSortedArrayInSortedArrayInSortedArray([1,2,3,4,5], 3) = -1\n*/\nconst searchInSortedArrayInSortedArrayInSortedArrayInSortedArrayInSortedArrayInSortedArray = (arr, target) => {\n  let i = arr.length - 1;\n  let j = arr.length - 1;\n  let k = 0;\n  let max = 0;\n  while (i > 0) {\n    if (arr[i] === target) {\n      max = i;\n      k = j;\n      j = i;\n      i = k + 1;\n    }\n  }\n  return max;\n};\n\n/*\n  Given a sorted array and a target value, return the index of the target\n  ", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  lagrestSmallestIntgeers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  lagrestSmallestIntgeers([]) == (null, null)\n  lagrestSmallestIntgeers([0]) == (null, null)\n  */\nconst lagrestSmallestIntgeers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "lagrestSmallestIntgeers", "gc": "<|endoftext|>/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  lagrestSmallestIntgeers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  lagrestSmallestIntgeers([]) == (null, null)\n  lagrestSmallestIntgeers([0]) == (null, null)\n  */\nconst lagrestSmallestIntgeers = (lst) => {\n  let maxNum = Number.MAX_VALUE;\n  let minNum = -Number.MAX_VALUE;\n  let maxNumInt = null;\n  let minNumInt = null;\n  let maxNumIntInt = null;\n  let minNumIntInt = null;\n  let maxNumIntIntInt = null;\n  let minNumIntIntIntInt = null;\n  let maxNumIntIntIntIntInt = null;\n  let minNumIntIntIntIntIntInt = null;\n  let maxNumIntIntIntIntIntIntInt = null;\n  let minNumIntIntIntIntIntIntIntInt = null;\n  let maxNumIntIntIntIntIntIntIntIntInt = null;\n  let minNumIntIntIntIntIntIntIntIntIntInt = null;\n  let maxNumIntIntIntIntIntIntIntIntIntInt = null;\n  let minNumIntIntIntIntIntIntIntIntIntIntInt = null;\n  let maxNumIntIntIntIntIntIntIntIntIntIntIntInt = null;\n  let minNumIntIntIntIntIntIntIntIntIntIntIntIntInt = null;\n  let maxNumIntIntIntIntIntIntIntIntIntIntIntIntInt = null;\n  let minNumIntIntIntIntIntIntIntIntIntIntIntIntInt = null;\n  let maxNumIntIntIntIntIntIntIntIntIntIntIntIntIntInt = null;\n  let minNumIntIntIntIntIntIntIntIntIntIntIntIntIntInt = null;\n  let maxNumIntIntIntIntIntIntIntIntIntIntIntIntInt = null;\n  let minNumIntIntIntIntIntIntIntIntIntIntIntIntIntInt = null;\n  let maxNumIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt = null;\n  let minNumIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt = null;\n  let maxNumIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt = null;\n  let minNumIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt = null;\n  let maxNumIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt = null;\n  let minNumIntIntIntIntIntIntIntIntIntIntIntIntIntInt = null;\n  let maxNumIntIntIntIntIntIntIntIntIntIntIntIntIntInt = null;\n  let minNumIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt = null;\n  let maxNumIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt = null;\n  let minNumIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt = null;\n  let maxNumIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt = null;\n  let minNumIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt = null;\n  let maxNumIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt = null;\n  let minNumIntIntIntIntIntIntIntIntIntIntIntIntIntInt = null;\n  let maxNumIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt = null;\n  let minNumIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt = null;\n  let maxNumIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt = null;\n  let minNumIntIntIntIntIntIntIntIntIntIntIntIntIntInt = null;\n  let maxNumIntIntIntIntIntIntIntIntIntIntIntIntIntInt = null;\n  let minNumIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt = null;\n  let maxNumIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt = null;\n  let minNumIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt = null;\n  let maxNumIntIntIntIntIntIntIntIntIntIntIntIntIntInt = null;\n  let minNumIntIntIntIntIntIntIntIntIntIntIntIntIntInt = null;\n  let maxNumIntIntIntIntIntIntIntIntIntIntIntIntIntInt = null;\n  let minNumIntIntIntIntIntIntIntIntIntIntIntIntIntInt = null;\n  let maxNumIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt = null;\n  let minNumIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt = null;\n  let maxNumIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt = null;\n  let minNumIntIntIntIntIntIntIntIntIntIntIntIntIntInt = null;\n  let maxNumIntIntIntIntIntIntIntIntIntIntIntIntInt = null;\n  let minNumIntIntIntIntIntIntIntIntIntIntIntIntIntInt = null;\n  let maxNumIntIntIntIntIntIntIntIntIntIntIntIntInt = null;\n  let minNumIntIntIntIntIntIntIntIntIntIntIntIntIntInt = null;\n  let maxNumIntIntIntIntIntIntIntIntIntIntIntIntIntInt = null;\n  let minNumIntIntIntIntIntIntIntIntIntIntIntIntIntInt = null;\n  let maxNumIntIntIntIntIntIntIntIntIntIntIntIntIntInt = null;\n  let minNumIntIntIntIntIntIntIntIntIntIntIntIntIntInt = null;\n  let maxNumIntIntIntIntIntIntIntIntIntIntIntIntInt = null;\n  let minNumIntIntIntIntIntIntIntIntIntIntIntIntIntInt = null;\n  let maxNumIntIntIntIntIntIntIntIntIntIntIntIntIntInt = null;\n  let minNumIntIntIntIntIntIntIntIntIntIntIntIntIntInt = null;\n  let maxNumIntIntIntIntIntIntIntIntIntIntIntIntInt = null;\n  let minNumIntIntIntIntIntIntIntIntIntIntIntIntIntInt = null;\n  let maxNumIntIntIntIntIntIntIntIntIntIntIntIntIntInt = null;\n  let minNumIntIntIntIntIntIntIntIntIntIntIntIntInt = null;\n  let maxNumIntIntIntIntIntIntIntIntIntIntIntIntInt = null;\n  let minNumIntIntIntIntIntIntIntIntIntIntIntIntIntInt = null;\n  let maxNumIntIntIntIntIntIntIntIntIntIntIntIntIntInt = null;\n  let minNumIntIntIntIntIntIntIntIntIntIntIntIntIntInt = null;\n  let maxNumIntIntIntIntIntIntIntIntIntIntIntIntIntInt = null;\n  let minNumIntIntIntIntIntIntIntIntIntIntIntIntIntInt = null;\n  let maxNumIntIntIntIntIntIntIntIntIntIntIntIntInt = null;\n  let minNumIntIntIntIntIntIntInt", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be . or ,\n\n  compaerOne(1, 2.5) ➞ 2.5\n  compaerOne(1, \"2,3\") ➞ \"2,3\"\n  compaerOne(\"5,1\", \"6\") ➞ \"6\"\n  compaerOne(\"1\", 1) ➞ null\n  */\nconst compaerOne = (a, b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compaerOne", "gc": "<|endoftext|>/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  compaerOne(1, 2.5) ➞ 2.5\n  compaerOne(1, \"2,3\") ➞ \"2,3\"\n  compaerOne(\"5,1\", \"6\") ➞ \"6\"\n  compaerOne(\"1\", 1) ➞ null\n  */\nconst compaerOne = (a, b) => {\n  if (a === null || b === null) {\n    return null\n  }\n  if (a === \"\" || b === \"\") {\n    return null\n  }\n  if (a === \"\") {\n    return b\n  }\n  if (b === \"\") {\n    return a\n  }\n  if (a === \"\") {\n    return b\n  }\n  if (b === \"\") {\n    return a\n  }\n  if (a === \"\") {\n    return b\n  }\n  if (b === \"\") {\n    return a\n  }\n  if (a === \"\") {\n    return b\n  }\n  if (b === \"\") {\n    return a\n  }\n  if (a === \"\") {\n    return b\n  }\n  if (b === \"\") {\n    return a\n  }\n  if (a === \"\") {\n    return b\n  }\n  if (b === \"\") {\n    return a\n  }\n  if (a === \"\") {\n    return b\n  }\n  if (b === \"\") {\n    return a\n  }\n  if (a === \"\") {\n    return b\n  }\n  if (b === \"\") {\n    return a\n  }\n  if (a === \"\") {\n    return b\n  }\n  if (b === \"\") {\n    return a\n  }\n  if (a === \"\") {\n    return b\n  }\n  if (b === \"\") {\n    return a\n  }\n  if (a === \"\") {\n    return b\n  }\n  if (b === \"\") {\n    return a\n  }\n  if (a === \"\") {\n    return b\n  }\n  if (b === \"\") {\n    return a\n  }\n  if (a === \"\") {\n    return b\n  }\n  if (b === \"\") {\n    return a\n  }\n  if (a === \"\") {\n    return b\n  }\n  if (b === \"\") {\n    return a\n  }\n  if (a === \"\") {\n    return b\n  }\n  if (b === \"\") {\n    return a\n  }\n  if (a === \"\") {\n    return b\n  }\n  if (b === \"\") {\n    return a\n  }\n  if (a === \"\") {\n    return b\n  }\n  if (b === \"\") {\n    return a\n  }\n  if (a === \"\") {\n    return b\n  }\n  if (b === \"\") {\n    return a\n  }\n  if (a === \"\") {\n    return b\n  }\n  if (b === \"\") {\n    return a\n  }\n  if (a === \"\") {\n    return b\n  }\n  if (b === \"\") {\n    return a\n  }\n  if (a === \"\") {\n    return b\n  }\n  if (b === \"\") {\n    return a\n  }\n  if (a === \"\") {\n    return b\n  }\n  if (b === \"\") {\n    return a\n  }\n  if (a === \"\") {\n    return b\n  }\n  if (b === \"\") {\n    return a\n  }\n  if (a === \"\") {\n    return b\n  }\n  if (b === \"\") {\n    return a\n  }\n  if (a === \"\") {\n    return b\n  }\n  if (b === \"\") {\n    return a\n  }\n  if (a === \"\") {\n    return b\n  }\n  if (b === \"\") {\n    return a\n  }\n  if (a === \"\") {\n    return b\n  }\n  if (b === \"\") {\n    return a\n  }\n  if (a === \"\") {\n    return b\n  }\n  if (b === \"\") {\n    return a\n  }\n  if (a === \"\") {\n    return b\n  }\n  if (b === \"\") {\n    return a\n  }\n  if (a === \"\") {\n    return b\n  }\n  if (b === \"\") {\n    return a\n  }\n  if (a === \"\") {\n    return b\n  }\n  if (b === \"\") {\n    return a\n  }\n  if (a === \"\") {\n    return b\n  }\n  if (b === \"\") {\n    return a\n  }\n  if (a === \"\") {\n    return b\n  }\n  if (b === \"\") {\n    return a\n  }\n  if (a === \"\") {\n    return b\n  }\n  if (b === \"\") {\n    return a\n  }\n  if (a === \"\") {\n    return b\n  }\n  if (b === \"\") {\n    return a\n  }\n  if (a === \"\") {\n    return b\n  }\n  if (b === \"\") {\n    return a\n  }\n  if (a === \"\") {\n    return b\n  }\n  if (b === \"\") {\n    return a\n  }\n  if (a === \"\") {\n    return b\n  }\n  if (b === \"\") {\n    return a\n  }\n  if (a === \"\") {\n    return b\n  }\n  if (b === \"\") {\n    return a\n  }\n  if (a === \"\") {\n    return b\n  }\n  if (b === \"\") {\n    return a\n  }\n  if (a === \"\") {\n    return b\n  }\n  if (b === \"\") {\n    return a\n  }\n  if (a === \"\") {\n    return b\n  }\n  if (b === \"\") {\n    return a\n  }\n  if (a === \"\") {\n    return b\n  }\n  if (b === \"\") {\n    return a\n  }\n  if (a === \"\") {\n    return b\n  }\n  if (b === \"\") {\n    return a\n  }\n  if (a === \"\") {\n    return b\n  }\n  if (b === \"\") {\n    return a\n  }\n  if (a === \"\") {\n    return b\n  }\n  if (b === \"\") {\n    return a\n  }\n  if (a === \"\") {\n    return b\n  }\n  if (b === \"\") {\n    return a\n  }\n  if (a === \"\") {\n    return b\n  }\n  if (b === \"\") {\n    return a\n  }\n  if (a === \"\") {\n    return b\n  }\n  if (b === \"\") {\n    return a\n  }\n  if (a === \"\") {\n    return b\n  }\n  if (b === \"\") {\n    return a\n  }\n  if (a === \"\") {\n    return b\n  }\n  if (b === \"\") {\n    return a\n  }\n  if (a === \"\") {\n    return b\n  }\n  if (b === \"\") {\n    return a\n  }\n  if (a === \"\") {\n    return b\n  }\n  if (b === \"\") {\n    return a\n  }\n  if (a === \"\") {\n    return b\n  }\n  if (b === \"\") {\n    return a\n  }\n  if (a === \"\") {\n    return b\n  }\n  if (b === \"\") {\n    return a\n  }\n  if (a === \"\") {\n    return b\n  }\n  if (b === \"\") {\n    return a\n  }\n  if (a === \"\") {\n    return b\n  }\n  if (b === \"\") {\n    return a\n  }\n  if (a === \"\") {\n    return b\n  }\n  if (b === \"\") {\n    return a\n  }\n  if (a === \"\") {\n    return b\n  }\n  if (b === \"\") {\n    return a\n  }\n  if (a === \"\") {\n    return b\n  }\n  if (b === \"\") {\n    return a\n  }\n  if (a === \"\") {\n    return b\n  }\n  if (b === \"\") {\n    return a\n  }\n  if (a === \"\") {\n    return b\n  }\n  if (b === \"\") {\n    return a\n  }\n  if (a === \"\") {\n    return b\n  }\n  if (b === \"\") {\n    return a\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "gc": "<|endoftext|>/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i % 2;\n  }\n  return sum === 4;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 2 positive odd numbers\n  Example\n  isEqualToSumOdd(4) == true\n  isEqualToSumOdd(6) == false\n  isEqualToSumOdd(8) == false\n  */\nconst isEqualToSumOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i % 2;\n  }\n  return sum === 2;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 1 positive odd number\n  Example\n  isEqualToSumOdd(4) == true\n  isEqualToSumOdd(6) == true\n  isEqualToSumOdd(8) == false\n  */\nconst isEqualToSumOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i % 2;\n  }\n  return sum === 1;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 1 positive even number\n  Example\n  isEqualToSumEven(4) == true\n  isEqualToSumEven(6) == true\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i % 2;\n  }\n  return sum === 1;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 2 positive even numbers\n  Example\n  isEqualToSumEven(4) == true\n  isEqualToSumEven(6) == true\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i % 2;\n  }\n  return sum === 2;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 2 positive odd numbers\n  Example\n  isEqualToSumOdd(4) == true\n  isEqualToSumOdd(6) == true\n  isEqualToSumOdd(8) == true\n  */\nconst isEqualToSumOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i % 2;\n  }\n  return sum === 2;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 1 positive odd number\n  Example\n  isEqualToSumOdd(4) == true\n  isEqualToSumOdd(6) == true\n  isEqualToSumOdd(8) == true\n  */\nconst isEqualToSumOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i % 2;\n  }\n  return sum === 1;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 1 positive even number\n  Example\n  isEqualToSumEven(4) == true\n  isEqualToSumEven(6) == true\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i % 2;\n  }\n  return sum === 1;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 2 positive odd numbers\n  Example\n  isEqualToSumOdd(4) == true\n  isEqualToSumOdd(6) == true\n  isEqualToSumOdd(8) == true\n  */\nconst isEqualToSumOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i % 2;\n  }\n  return sum === 2;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 2 positive even numbers\n  Example\n  isEqualToSumEven(4) == true\n  isEqualToSumEven(6) == true\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i % 2;\n  }\n  return sum === 2;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 1 positive odd number\n  Example\n  isEqualToSumOdd(4) == true\n  isEqualToSumOdd(6) == true\n  isEqualToSumOdd(8) == true\n  */\nconst isEqualToSumOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i % 2;\n  }\n  return sum === 1;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 1 positive even number\n  Example\n  isEqualToSumEven(4) == true\n  isEqualToSumEven(6) == true\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i % 2;\n  }\n  return sum === 1;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 2 positive odd numbers\n  Example\n  isEqualToSumOdd(4) == true\n  isEqualToSumOdd(6) == true\n  isEqualToSumOdd(8) == true\n  */\nconst isEqualToSumOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i % 2;\n  }\n  return sum === 2;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 2 positive even numbers\n  Example\n  isEqualToSumEven(4) == true\n  isEqualToSumEven(6) == true\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i % 2;\n  }\n  return sum === 2;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 1 positive odd number\n  Example\n  isEqualToSumOdd(4) == true\n  isEqualToSumOdd(6) == true\n  isEqualToSumOdd(8) == true\n  */\nconst isEqualToSumOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i % 2;\n  }\n  return sum === 1;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 1 positive even number\n  Example\n  isEqualToSumEven(4) == true\n  isEqualToSumEven(6) == true\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i % 2;\n  }\n  return sum === 1;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 2 positive odd numbers\n  Example\n  isEqualToSumOdd(4) == true\n  isEqualToSumOdd(6) == true\n  isEqualToSumOdd(8) == true\n  */\nconst isEqualToSumOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i % 2;\n  }\n  return sum === 2;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 2 positive even numbers\n  Example\n  isEqualToSumO", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n  where n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "gc": "<|endoftext|>/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n  where n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  if (n < 1) {\n    return 1;\n  }\n  return n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "gc": "<|endoftext|>/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  const prefixes = [];\n  let currentPrefix = string;\n  while (currentPrefix.length > 0) {\n    prefixes.push(currentPrefix);\n    currentPrefix = currentPrefix.slice(0, -1);\n  }\n  return prefixes;\n};\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['ba', 'ca', 'cb', 'cc']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = [];\n  let currentSuffix = string;\n  while (currentSuffix.length > 0) {\n    suffixes.push(currentSuffix);\n    currentSuffix = currentSuffix.slice(0, -1);\n  }\n  return suffixes;\n};\n\n/* Return list of all words from shortest to longest of the input string\n  >>> allWords('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allWords = (string) => {\n  const words = [];\n  let currentWord = string;\n  while (currentWord.length > 0) {\n    words.push(currentWord);\n    currentWord = currentWord.slice(0, -1);\n  }\n  return words;\n};\n\n/* Return list of all words from shortest to longest of the input string\n  >>> allWords('ab')\n  ['a', 'ab']\n  */\nconst allWordsWithPrefix = (string) => {\n  const words = [];\n  let currentWord = string;\n  while (currentWord.length > 0) {\n    words.push(currentWord);\n    currentWord = currentWord.slice(0, -1);\n  }\n  return words;\n};\n\n/* Return list of all words from shortest to longest of the input string\n  >>> allWordsWithPrefix('ab')\n  ['a', 'ab']\n  */\nconst allWordsWithSuffix = (string) => {\n  const words = [];\n  let currentWord = string;\n  while (currentWord.length > 0) {\n    words.push(currentWord);\n    currentWord = currentWord.slice(0, -1);\n  }\n  return words;\n};\n\n/* Return list of all words from shortest to longest of the input string\n  >>> allWordsWithSuffix('ab')\n  ['a', 'ab']\n  */\nconst allWordsWithPrefixAndSuffix = (string) => {\n  const words = [];\n  let currentWord = string;\n  while (currentWord.length > 0) {\n    words.push(currentWord);\n    currentWord = currentWord.slice(0, -1);\n  }\n  return words;\n};\n\n/* Return list of all words from shortest to longest of the input string\n  >>> allWordsWithPrefixAndSuffix('ab')\n  ['a', 'ab']\n  */\nconst allWordsWithPrefixAndSuffixAndPrefix = (string) => {\n  const words = [];\n  let currentWord = string;\n  while (currentWord.length > 0) {\n    words.push(currentWord);\n    currentWord = currentWord.slice(0, -1);\n  }\n  return words;\n};\n\n/* Return list of all words from shortest to longest of the input string\n  >>> allWordsWithPrefixAndSuffixAndPrefix('ab')\n  ['a', 'ab']\n  */\nconst allWordsWithPrefixAndSuffixAndPrefixAndSuffix = (string) => {\n  const words = [];\n  let currentWord = string;\n  while (currentWord.length > 0) {\n    words.push(currentWord);\n    currentWord = currentWord.slice(0, -1);\n  }\n  return words;\n};\n\n/* Return list of all words from shortest to longest of the input string\n  >>> allWordsWithPrefixAndSuffixAndPrefixAndSuffix('ab')\n  ['a', 'ab']\n  */\nconst allWordsWithPrefixAndSuffixAndPrefixAndSuffixAndPrefix = (string) => {\n  const words = [];\n  let currentWord = string;\n  while (currentWord.length > 0) {\n    words.push(currentWord);\n    currentWord = currentWord.slice(0, -1);\n  }\n  return words;\n};\n\n/* Return list of all words from shortest to longest of the input string\n  >>> allWordsWithPrefixAndSuffixAndPrefixAndSuffixAndPrefix('ab')\n  ['a', 'ab']\n  */\nconst allWordsWithPrefixAndSuffixAndPrefixAndSuffixAndPrefixAndSuffix = (string) => {\n  const words = [];\n  let currentWord = string;\n  while (currentWord.length > 0) {\n    words.push(currentWord);\n    currentWord = currentWord.slice(0, -1);\n  }\n  return words;\n};\n\n/* Return list of all words from shortest to longest of the input string\n  >>> allWordsWithPrefixAndSuffixAndPrefixAndSuffixAndPrefixAndSuffix('ab')\n  ['a', 'ab']\n  */\nconst allWordsWithPrefixAndSuffixAndPrefixAndSuffixAndPrefixAndSuffixAndPrefix = (string) => {\n  const words = [];\n  let currentWord = string;\n  while (currentWord.length > 0) {\n    words.push(currentWord);\n    currentWord = currentWord.slice(0, -1);\n  }\n  return words;\n};\n\n/* Return list of all words from shortest to longest of the input string\n  >>> allWordsWithPrefixAndSuffixAndPrefixAndSuffixAndPrefixAndSuffixAndPrefixAndSuffix('ab')\n  ['a', 'ab']\n  */\nconst allWordsWithPrefixAndSuffixAndPrefixAndSuffixAndPrefixAndSuffixAndPrefixAndSuffixAndPrefix = (string) => {\n  const words = [];\n  let currentWord = string;\n  while (currentWord.length > 0) {\n    words.push(currentWord);\n    currentWord = currentWord.slice(0, -1);\n  }\n  return words;\n};\n\n/* Return list of all words from shortest to longest of the input string\n  >>> allWordsWithPrefixAndSuffixAndPrefixAndSuffixAndPrefixAndSuffixAndPrefixAndSuffixAndPrefixAndSuffixAndPrefixAndSuffixAndPrefixAndSuffixAndPrefixAndSuffixAndPrefixAndSuffixAndPrefixAndSuffixAndPrefixAndSuffixAndPrefixAndSuffixAndPrefixAndSuffixAndPrefixAndSuffixAndPrefixAndSuffixAndPrefixAndSuffixAndPrefixAndSuffixAndPrefixAndSuffixAndPrefixAndSuffixAndPrefixAndSuffixAndPrefixAndSuffixAndPrefixAndSuffixAndPrefixAndSuffixAndPrefixAndSuffixAndPrefixAndSuffixAndPrefixAndSuffixAndPrefixAndSuffixAndPrefixAndSuffixAndPrefixAndSuffixAndPrefixAndSuffixAndPrefixAndSuffixAndPrefixAndSuffixAndPrefixAndSuffixAndPrefixAndSuffixAndPrefixAndSuffixAndPrefixAndSuffixAndPrefixAndSuffixAndPrefixAndSuffixAndPrefixAndSuffixAndPrefixAndSuffixAndPrefixAndSuffixAndPrefixAndSuffixAndPrefixAndSuffixAndPrefixAndSuffixAndPrefixAndSuffixAndPrefixAndSuffixAndPrefixAndSuffixAndPrefixAndSuffixAndPrefixAndSuffixAndPrefixAndSuffixAndPrefixAndSuffixAndPrefixAndSuffixAndPrefixAndSuffixAndPrefixAndSuffixAndPrefixAndSuffixAndPrefixAndSuffixAndPrefixAndSuffixAndPrefixAndSuffixAndPrefixAndSuffixAndPrefixAndSuffixAndPrefixAndSuffixAndPrefixAndSuffixAndPrefixAndSuffixAndPrefixAndSuffixAndPrefixAndSuffixAndPrefixAndSuffixAndPrefixAndSuffixAndPrefixAndSuffixAndPrefixAndSuffixAndPrefixAndSuffixAndPrefixAndSuffixAndPrefixAndSuffixAndPrefixAndSuffixAndPrefixAndSuffixAndPrefixAndSuffixAndPrefixAndSuffixAndPrefixAndSuffixAndPrefixAndSuffixAndPrefixAndSuffixAndPrefixAndSuffixAndPrefixAndSuffixAndPrefixAndSuffixAndPrefixAndSuffixAndPrefixAndSuffixAndPrefixAndSuffixAndPrefixAndSuffixAndPrefixAndSuffixAndPrefixAndSuffixAndPrefixAndSuffixAndPrefixAndSuffixAndPrefixAndSuffixAndPrefixAndSuffixAndPrefixAndSuffixAndPrefixAndSuffixAndPrefixAndSuffixAndPrefixAndSuffixAndPrefixAndSuffixAndPrefixAndSuffixAndPrefixAndSuffixAndPrefixAndSuffixAndPrefixAndSuffixAndPrefixAndSuffixAndPrefixAndSuffixAndPrefixAndSuffixAndPrefixAndSuffixAndPrefixAndSuffixAndPrefixAndSuffixAndPrefixAndSuffixAnd", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixSpacse(\"Example\") == \"Example\"\n  fixSpacse(\"Example 1\") == \"Example_1\"\n  fixSpacse(\" Example 2\") == \"_Example_2\"\n  fixSpacse(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpacse = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpacse", "gc": "<|endoftext|>/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixSpacse(\"Example\") == \"Example\"\n  fixSpacse(\"Example 1\") == \"Example_1\"\n  fixSpacse(\" Example 2\") == \"_Example_2\"\n  fixSpacse(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpacse = (text) => {\n  let spaces = text.split(\" \");\n  spaces.forEach((space) => {\n    if (space.length > 2) {\n      space = space.replace(/\\s{2,}/g, \" \");\n    }\n  });\n  return spaces.join(\" \");\n}\n\n/*\n  Given a string text, replace all underscores in it with spaces, \n  and if a string has more than 2 consecutive underscores, \n  then replace all consecutive underscores with _\n  \n  fixUnderscore(\"Example\") == \"Example\"\n  fixUnderscore(\"Example 1\") == \"Example_1\"\n  fixUnderscore(\" Example 2\") == \"_Example_2\"\n  fixUnderscore(\" Example   3\") == \"_Example-3\"\n  */\nconst fixUnderscore = (text) => {\n  let underscores = text.split(\"_\");\n  underscores.forEach((underscore) => {\n    if (underscore.length > 2) {\n      underscore = underscore.replace(/_{2,}/g, \" \");\n    }\n  });\n  return underscores.join(\" \");\n}\n\n/*\n  Given a string text, replace all hyphens in it with spaces, \n  and if a string has more than 2 consecutive hyphens, \n  then replace all consecutive hyphens with -\n  \n  fixHyphens(\"Example\") == \"Example\"\n  fixHyphens(\"Example 1\") == \"Example_1\"\n  fixHyphens(\" Example 2\") == \"-Example_2\"\n  fixHyphens(\" Example   3\") == \"-Example-3\"\n  */\nconst fixHyphens = (text) => {\n  let hyphens = text.split(\"-\");\n  hyphens.forEach((hyphen) => {\n    if (hyphen.includes(\"-\")) {\n      hyphen = hyphen.replace(\"-\", \" \");\n    }\n  });\n  return hyphens.join(\" \");\n}\n\n/*\n  Given a string text, replace all periods in it with spaces, \n  and if a string has more than 2 consecutive periods, \n  then replace all consecutive periods with.\n  \n  fixPeriods(\"Example\") == \"Example\"\n  fixPeriods(\"Example 1\") == \"Example_1\"\n  fixPeriods(\" Example 2\") == \"_Example_2\"\n  fixPeriods(\" Example   3\") == \"_Example-3\"\n  */\nconst fixPeriods = (text) => {\n  let periods = text.split(\".\");\n  periods.forEach((period) => {\n    if (period.includes(\".\")) {\n      period = period.replace(\".\", \" \");\n    }\n  });\n  return periods.join(\" \");\n}\n\n/*\n  Given a string text, replace all commas in it with spaces, \n  and if a string has more than 2 consecutive commas, \n  then replace all consecutive commas with,\n  \n  fixComma(\"Example\") == \"Example\"\n  fixComma(\"Example 1\") == \"Example_1\"\n  fixComma(\" Example 2\") == \"_Example_2\"\n  fixComma(\" Example   3\") == \"_Example-3\"\n  */\nconst fixComma = (text) => {\n  let comma = text.split(\",\");\n  comma.forEach((comma) => {\n    if (comma.length > 2) {\n      comma = comma.replace(\",\", \" \");\n    }\n  });\n  return comma.join(\" \");\n}\n\n/*\n  Given a string text, replace all periods and commas in it with spaces, \n  and if a string has more than 2 consecutive periods and \n  commas in it, \n  then replace all consecutive periods and commas with,\n  \n  fixPeriodsAndComma(\"Example\") == \"Example\"\n  fixPeriodsAndComma(\"Example 1\") == \"Example_1\"\n  fixPeriodsAndComma(\" Example 2\") == \"_Example_2\"\n  fixPeriodsAndComma(\" Example   3\") == \"_Example-3\"\n  */\nconst fixPeriodsAndComma = (text) => {\n  let periods = text.split(\".\");\n  let comma = text.split(\",\");\n  periods.forEach((period) => {\n    if (period.includes(\".\")) {\n      period = period.replace(\".\", \" \");\n    }\n  });\n  comma.forEach((comma) => {\n    if (comma.length > 2) {\n      comma = comma.replace(\",\", \" \");\n    }\n  });\n  return periods.join(\" \");\n}\n\n/*\n  Given a string text, replace all spaces and underscores in it with spaces, \n  and if a string has more than 2 consecutive spaces and \n  underscores in it, \n  then replace all consecutive spaces and underscores with _\n  \n  fixSpaceAndUnderscore(\"Example\") == \"Example\"\n  fixSpaceAndUnderscore(\"Example 1\") == \"Example_1\"\n  fixSpaceAndUnderscore(\" Example 2\") == \"_Example_2\"\n  fixSpaceAndUnderscore(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaceAndUnderscore = (text) => {\n  let spaces = text.split(\" \");\n  let underscores = text.split(\"_\");\n  spaces.forEach((space) => {\n    if (space.length > 2) {\n      space = space.replace(/\\s{2,}/g, \" \");\n    }\n  });\n  underscores.forEach((underscore) => {\n    if (underscore.length > 2) {\n      underscore = underscore.replace(/_{2,}/g, \" \");\n    }\n  });\n  return spaces.join(\" \");\n}\n\n/*\n  Given a string text, replace all spaces and hyphens in it with spaces, \n  and if a string has more than 2 consecutive spaces and \n  hyphens in it, \n  then replace all consecutive spaces and hyphens with -\n  \n  fixSpaceAndHyphens(\"Example\") == \"Example\"\n  fixSpaceAndHyphens(\"Example 1\") == \"Example_1\"\n  fixSpaceAndHyphens(\" Example 2\") == \"-Example_2\"\n  fixSpaceAndHyphens(\" Example   3\") == \"-Example-3\"\n  */\nconst fixSpaceAndHyphens = (text) => {\n  let spaces = text.split(\" \");\n  let hyphens = text.split(\"-\");\n  spaces.forEach((space) => {\n    if (space.length > 2) {\n      space = space.replace(/\\s{2,}/g, \" \");\n    }\n  });\n  hyphens.forEach((hyphen) => {\n    if (hyphen.includes(\"-\")) {\n      hyphen = hyphen.replace(\"-\", \" \");\n    }\n  });\n  return spaces.join(\" \");\n}\n\n/*\n  Given a string text, replace all spaces and periods in it with spaces, \n  and if a string has more than 2 consecutive spaces and \n  periods in it, \n  then replace all consecutive spaces and periods with.\n  \n  fixSpaceAndPeriods(\"Example\") == \"Example\"\n  fixSpaceAndPeriods(\"Example 1\") == \"Example_1\"\n  fixSpaceAndPeriods(\" Example 2\") == \"_Example_2\"\n  fixSpaceAndPeriods(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaceAndPeriods = (text) => {\n  let spaces = text.split(\" \");\n  let periods = text.split(\".\");\n  spaces.forEach((space) => {\n    if (space.length > 2) {\n      space = space.replace(/\\s{2,}/g, \" \");\n    }\n  });\n  periods.forEach((period) => {\n    if (period.includes(\".\")) {\n      period = period.replace(\".\", \" \");\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "gc": "<|endoftext|>/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  const re = /^[0-9]{3}\\.[a-zA-Z]{2,}$/\n  return re.test(file_name)\n}\n\n/*\n  Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  const re = /^[0-9]{3}\\.[a-zA-Z]{2,}$/\n  return re.test(file_name)\n}\n\n/*\n  Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  const re = /^[0-9]{3}\\.[a-zA-Z]{2,}$/\n  return re.test(file_name)\n}\n\n/*\n  Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  const re = /^[0-9]{3}\\.[a-zA-Z]{2,}$/\n  return re.test(file_name)\n}\n\n/*\n  Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  const re = /^[0-9]{3}\\.[a-zA-Z]{2,}$/\n  return re.test(file_name)\n}\n\n/*\n  Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  const re = /^[0-9]{3}\\.[a-zA-Z]{2,}$/\n  return re.test(file_name)\n}\n\n/*\n  Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  const re = /^[0-9]{3}\\.[a-zA-Z]{2,}$/\n  return re.test(file_name)\n}\n\n/*\n  Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "gc": "<|endoftext|>/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0 && i % 4!== 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 3!== 0) {\n      sum += lst[i] * lst[i] * lst[i];\n    } else if (i % 4!== 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function shall cube the integer entry if its index is a multiple of 3 and will \n  square it if its index is a multiple of 4. The function will not change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumCubes = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0 && i % 4!== 0) {\n      sum += lst[i] * lst[i] * lst[i];\n    } else if (i % 3!== 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i];\n    } else if (i % 4!== 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function shall cube the integer entry if its index is a multiple of 3 and will \n  square it if its index is a multiple of 4. The function will not change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquareCubes = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0 && i % 4!== 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i];\n    } else if (i % 3!== 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    } else if (i % 4!== 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function shall cube the integer entry if its index is a multiple of 3 and will \n  square it if its index is a multiple of 4. The function will not change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquareCubesNoChange = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0 && i % 4!== 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i];\n    } else if (i % 3!== 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    } else if (i % 4!== 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function shall cube the integer entry if its index is a multiple of 3 and will \n  square it if its index is a multiple of 4. The function will not change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquareCubesNoChangeNoChange = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0 && i % 4!== 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    } else if (i % 3!== 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    } else if (i % 4!== 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function shall cube the integer entry if its index is a multiple of 3 and will \n  square it if its index is a multiple of 4. The function will not change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquareCubesNoChangeNoChangeNoChangeNoChange = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0 && i % 4!== 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    } else if (i % 3!== 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    } else if (i % 4!== 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function shall cube the integer entry if its index is a multiple of 3 and will \n  square it if its index is a multiple of 4. The function will not change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquareCubesNoChangeNoChangeNoChangeNoChangeNoChangeNoChange = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0 && i % 4!== 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    } else if (i % 3!== 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    } else if (i % 4!== 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function shall cube the integer entry if its index is a multiple of 3 and will \n  square it if its index is a multiple of 4. The function will not change the entries in the list whose indexes are not a multiple of 3 or 4. The function ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/143", "prompt": "/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wrodsInSentenec = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wrodsInSentenec", "gc": "<|endoftext|>/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wrodsInSentenec = (sentence) => {\n  const words = sentence.split(\" \");\n  let newWords = [];\n  let newSentenec = [];\n  let newSentenecLength = 0;\n  let newSentenecOrder = [];\n  let newSentenecWords = [];\n  let newSentenecWordsLength = 0;\n  let newSentenecWordsOrder = [];\n  let newSentenecWordsWords = [];\n  let newSentenecWordsWordsLength = 0;\n  let newSentenecWordsWordsOrder = [];\n  let newSentenecWordsWordsWordsLength = 0;\n  let newSentenecWordsWordsWordsOrder = [];\n  let newSentenecWordsWordsWordsWordsLength = 0;\n  let newSentenecWordsWordsWordsWordsOrder = [];\n  let newSentenecWordsWordsWordsWordsWordsLength = 0;\n  let newSentenecWordsWordsWordsWordsWordsWordsOrder = [];\n  let newSentenecWordsWordsWordsWordsWordsWordsWordsLength = 0;\n  let newSentenecWordsWordsWordsWordsWordsWordsWordsOrder = [];\n  let newSentenecWordsWordsWordsWordsWordsWordsWordsWordsLength = 0;\n  let newSentenecWordsWordsWordsWordsWordsWordsWordsWordsWordsOrder = [];\n  let newSentenecWordsWordsWordsWordsWordsWordsWordsWordsWordsLength = 0;\n  let newSentenecWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsOrder = [];\n  let newSentenecWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsLength = 0;\n  let newSentenecWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsOrder = [];\n  let newSentenecWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsLength = 0;\n  let newSentenecWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWordsWord", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/144", "prompt": "/*Your task is to implement a function that will simpilfy the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simpilfy(\"1/5\", \"5/1\") = true\n  simpilfy(\"1/6\", \"2/1\") = false\n  simpilfy(\"7/10\", \"10/2\") = false\n  */\nconst simpilfy = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simpilfy", "gc": "<|endoftext|>/*Your task is to implement a function that will simpilfy the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simpilfy(\"1/5\", \"5/1\") = true\n  simpilfy(\"1/6\", \"2/1\") = false\n  simpilfy(\"7/10\", \"10/2\") = false\n  */\nconst simpilfy = (x, n) => {\n  // If x is a string, convert it to an integer.\n  if (typeof x ==='string') {\n    x = parseInt(x, 10);\n  }\n\n  // If n is a string, convert it to an integer.\n  if (typeof n ==='string') {\n    n = parseInt(n, 10);\n  }\n\n  // If both x and n are strings, then convert them to integers.\n  if (typeof x ==='string' && typeof n ==='string') {\n    x = parseInt(x, 10);\n    n = parseInt(n, 10);\n  }\n\n  // If both x and n are numbers, then return true if x is divisible by n.\n  if (x % n === 0 && n > 0) {\n    return true;\n  }\n\n  // If both x and n are numbers, then return false if x is divisible by n.\n  if (x % n === 0) {\n    return false;\n  }\n\n  // If both x and n are numbers, then return true if x is divisible by n.\n  if (x % n === 0 && n < 0) {\n    return true;\n  }\n\n  // If both x and n are numbers, then return false if x is divisible by n.\n  if (x % n === 0) {\n    return false;\n  }\n\n  // If both x and n are numbers, then return true if x is divisible by n.\n  if (x % n === 0 && n === 0) {\n    return true;\n  }\n\n  // If both x and n are numbers, then return false if x is divisible by n.\n  if (x % n === 0) {\n    return false;\n  }\n\n  // If both x and n are numbers, then return true if x is divisible by n.\n  if (x % n === 0 && n < 0) {\n    return true;\n  }\n\n  // If both x and n are numbers, then return false if x is divisible by n.\n  if (x % n === 0) {\n    return false;\n  }\n\n  // If both x and n are numbers, then return true if x is divisible by n.\n  if (x % n === 0 && n === 0) {\n    return true;\n  }\n\n  // If both x and n are numbers, then return false if x is divisible by n.\n  if (x % n === 0 && n < 0) {\n    return true;\n  }\n\n  // If both x and n are numbers, then return true if x is divisible by n.\n  if (x % n === 0 && n === 0) {\n    return false;\n  }\n\n  // If both x and n are numbers, then return false if x is divisible by n.\n  if (x % n === 0 && n < 0) {\n    return true;\n  }\n\n  // If both x and n are numbers, then return true if x is divisible by n.\n  if (x % n === 0 && n === 0) {\n    return false;\n  }\n\n  // If both x and n are numbers, then return true if x is divisible by n.\n  if (x % n === 0 && n < 0) {\n    return true;\n  }\n\n  // If both x and n are numbers, then return false if x is divisible by n.\n  if (x % n === 0 && n === 0) {\n    return false;\n  }\n\n  // If both x and n are numbers, then return true if x is divisible by n.\n  if (x % n === 0 && n < 0) {\n    return true;\n  }\n\n  // If both x and n are numbers, then return false if x is divisible by n.\n  if (x % n === 0 && n === 0) {\n    return false;\n  }\n\n  // If both x and n are numbers, then return true if x is divisible by n.\n  if (x % n === 0 && n < 0) {\n    return true;\n  }\n\n  // If both x and n are numbers, then return false if x is divisible by n.\n  if (x % n === 0 && n === 0) {\n    return false;\n  }\n\n  // If both x and n are numbers, then return true if x is divisible by n.\n  if (x % n === 0 && n < 0) {\n    return true;\n  }\n\n  // If both x and n are numbers, then return false if x is divisible by n.\n  if (x % n === 0 && n === 0) {\n    return false;\n  }\n\n  // If both x and n are numbers, then return true if x is divisible by n.\n  if (x % n === 0 && n < 0) {\n    return true;\n  }\n\n  // If both x and n are numbers, then return false if x is divisible by n.\n  if (x % n === 0 && n === 0) {\n    return false;\n  }\n\n  // If both x and n are numbers, then return true if x is divisible by n.\n  if (x % n === 0 && n < 0) {\n    return true;\n  }\n\n  // If both x and n are numbers, then return false if x is divisible by n.\n  if (x % n === 0 && n === 0) {\n    return false;\n  }\n\n  // If both x and n are numbers, then return true if x is divisible by n.\n  if (x % n === 0 && n < 0) {\n    return true;\n  }\n\n  // If both x and n are numbers, then return false if x is divisible by n.\n  if (x % n === 0 && n === 0) {\n    return false;\n  }\n\n  // If both x and n are numbers, then return true if x is divisible by n.\n  if (x % n === 0 && n < 0) {\n    return true;\n  }\n\n  // If both x and n are numbers, then return false if x is divisible by n.\n  if (x % n === 0 && n === 0) {\n    return false;\n  }\n\n  // If both x and n are numbers, then return true if x is divisible by n.\n  if (x % n === 0 && n < 0) {\n    return true;\n  }\n\n  // If both x and n are numbers, then return false if x is divisible by n.\n  if (x % n === 0 && n === 0) {\n    return false;\n  }\n\n  // If both x and n are numbers, then return true if x is divisible by n.\n  if (x % n === 0 && n < 0) {\n    return true;\n  }\n\n  // If both x and n are numbers, then return false if x is divisible by n.\n  if (x % n === 0 && n === 0) {\n    return false;\n  }\n\n  // If both x and n are numbers, then return true if x is divisible by n.\n  if (x % n === 0 && n < 0) {\n    return true;\n  }\n\n  // If both x and n are numbers, then return false if x is divisible by n.\n  if (x % n === 0 && n === 0) {\n    return false;\n  }\n\n  // If both x and n are numbers, then return true if x is divisible by n.\n  if (x % n === 0 && n < 0) {\n    return true;\n  }\n\n  // If both x and n are numbers, then return false if x is divisible by n.\n  if (x % n === 0 && n === 0) {\n    return false;\n  }\n\n  // If both x and n are numbers, then return true if x is divisible by n.\n  if (x % n === 0 && n < 0) {\n    return true;\n  }\n\n  // If both x and n are numbers, then return false if x is divisible by n.\n  if (x % n === 0 && n === 0) {\n    return false;\n  }\n\n  // If both x and n are numbers, then return true if x is divisible by n.\n  if (x % n === 0 && n < 0) {\n    return true;\n  }\n\n  // If both x and n are numbers, then return false if x is divisible by n.\n  if (x % n === 0 && n === 0) {\n    return false;\n  }\n\n  // If both x and n are numbers, then return true if x is divisible by n.\n  if (x % n === 0 && n < 0) {\n    return true;\n  }\n\n  // If both x and n are numbers, then return false if x is divisible by n.\n  if (x % n === 0 && n === 0) {\n    return false;\n  }\n\n  // If both x and n are numbers, then return true if x is divisible by n.\n  if (x % n === 0 && n < 0) {\n    return true;\n  }\n\n  // If both x and n are numbers, then return false if x is divisible by n.\n  if (x % n === 0 && n === 0) {\n    return false;\n  }\n\n  // If both x and n are numbers, then return ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> roderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> roderByPoints([]) == []\n  */\nconst roderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "roderByPoints", "gc": "<|endoftext|>/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> roderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> roderByPoints([]) == []\n  */\nconst roderByPoints = (nums) => {\n  const sums = nums.reduce((acc, n) => acc + n, 0);\n  const sortedNums = nums.sort((a, b) => a - b);\n  return sortedNums.map(n => n % 10 + sums);\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> roderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> roderByPoints([]) == []\n  */\nconst roderByPointsDesc = (nums) => {\n  const sums = nums.reduce((acc, n) => acc + n, 0);\n  const sortedNums = nums.sort((a, b) => b - a);\n  return sortedNums.map(n => n % 10 + sums);\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in descending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> roderByPoints([1, 11, -1, -11, -12]) == [11, -11, -11, -11, -12]\n  >>> roderByPoints([]) == []\n  */\nconst roderByPointsDesc = (nums) => {\n  const sums = nums.reduce((acc, n) => acc + n, 0);\n  const sortedNums = nums.sort((a, b) => b - a);\n  return sortedNums.map(n => n % 10 + sums);\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> roderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> roderByPoints([]) == []\n  */\nconst roderByPointsDescDesc = (nums) => {\n  const sums = nums.reduce((acc, n) => acc + n, 0);\n  const sortedNums = nums.sort((a, b) => b - a);\n  return sortedNums.map(n => n % 10 + sums);\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> roderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> roderByPoints([]) == []\n  */\nconst roderByPointsDescDesc = (nums) => {\n  const sums = nums.reduce((acc, n) => acc + n, 0);\n  const sortedNums = nums.sort((a, b) => b - a);\n  return sortedNums.map(n => n % 10 + sums);\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> roderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> roderByPoints([]) == []\n  */\nconst roderByPointsDescDescDesc = (nums) => {\n  const sums = nums.reduce((acc, n) => acc + n, 0);\n  const sortedNums = nums.sort((a, b) => b - a);\n  return sortedNums.map(n => n % 10 + sums);\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> roderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> roderByPoints([]) == []\n  */\nconst roderByPointsDescDescDesc = (nums) => {\n  const sums = nums.reduce((acc, n) => acc + n, 0);\n  const sortedNums = nums.sort((a, b) => b - a);\n  return sortedNums.map(n => n % 10 + sums);\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> roderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> roderByPoints([]) == []\n  */\nconst roderByPointsDescDescDescDesc = (nums) => {\n  const sums = nums.reduce((acc, n) => acc + n, 0);\n  const sortedNums = nums.sort((a, b) => b - a);\n  return sortedNums.map(n => n % 10 + sums);\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> roderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> roderByPoints([]) == []\n  */\nconst roderByPointsDescDescDescDesc = (nums) => {\n  const sums = nums.reduce((acc, n) => acc + n, 0);\n  const sortedNums = nums.sort((a, b) => b - a);\n  return sortedNums.map(n => n % 10 + sums);\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> roderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> roderByPoints([]) == []\n  */\nconst roderByPointsDescDescDescDesc = (nums) => {\n  const sums = nums.reduce((acc, n) => acc + n, 0);\n  const sortedNums = nums.sort((a, b) => b - a);\n  return sortedNums.map(n => n % 10 + sums);\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> roderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> roderByPoints([]) == []\n  */\nconst roderByPointsDescDescDescDescDesc = (nums) => {\n  const sums = nums.reduce((acc, n) => acc + n, 0);\n  const sortedNums = num", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/146", "prompt": "/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "gc": "<|endoftext|>/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  nums.forEach((num) => {\n    if (num % 2 === 0 && num % 10 === 1) {\n      count++;\n    }\n  });\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are even (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilterEven = (nums) => {\n  let count = 0;\n  nums.forEach((num) => {\n    if (num % 2 === 0 && num % 10 === 0) {\n      count++;\n    }\n  });\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilterOdd = (nums) => {\n  let count = 0;\n  nums.forEach((num) => {\n    if (num % 2 === 0 && num % 10 === 1) {\n      count++;\n    }\n  });\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are even (3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilterEvenOdd = (nums) => {\n  let count = 0;\n  nums.forEach((num) => {\n    if (num % 2 === 0 && num % 10 === 0) {\n      count++;\n    }\n  });\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilterOddEven = (nums) => {\n  let count = 0;\n  nums.forEach((num) => {\n    if (num % 2 === 0 && num % 10 === 1) {\n      count++;\n    }\n  });\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilterOddEvenOdd = (nums) => {\n  let count = 0;\n  nums.forEach((num) => {\n    if (num % 2 === 0 && num % 10 === 0) {\n      count++;\n    }\n  });\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilterOddEvenEvenOdd = (nums) => {\n  let count = 0;\n  nums.forEach((num) => {\n    if (num % 2 === 0 && num % 10 === 1) {\n      count++;\n    }\n  });\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilterOddEvenEvenOdd = (nums) => {\n  let count = 0;\n  nums.forEach((num) => {\n    if (num % 2 === 0 && num % 10 === 0) {\n      count++;\n    }\n  });\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilterOddEvenEvenEvenOdd = (nums) => {\n  let count = 0;\n  nums.forEach((num) => {\n    if (num % 2 === 0 && num % 10 === 1) {\n      count++;\n    }\n  });\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilterOddEvenEvenEvenOdd = (nums) => {\n  let count = 0;\n  nums.forEach((num) => {\n    if (num % 2 === 0 && num % 10 === 1) {\n      count++;\n    }\n  });\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilterOddEvenEvenEvenOdd = (nums) => {\n  let count = 0;\n  nums.forEach((num) => {\n    if (num % 2 === 0 && num % 10 === 0) {\n      count++;\n    }\n  });\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilterOddEvenEvenEvenEvenOdd = (nums) => {\n  let count = 0;\n  nums.forEach((num) => {\n    if (num % 2 === 0 && num % 10 === 1) {\n      count++;\n    }\n  });\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilterOddEvenEvenEvenEvenOdd = (nums) => {\n  let count = 0;\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/147", "prompt": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTrpiles = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTrpiles", "gc": "<|endoftext|>/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTrpiles = (n) => {\n  const a = [...Array(Math.pow(3, n))].map((_, i) => i * i - i + 1);\n  return a.filter(a => a % 3 === 0).length;\n};\n\n/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 3\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  const a = [...Array(Math.pow(3, n))].map((_, i) => i * i - i + 1);\n  return a.filter(a => a % 3 === 0).length;\n};\n\n/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 4\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  const a = [...Array(Math.pow(3, n))].map((_, i) => i * i - i + 1);\n  return a.filter(a => a % 3 === 0).length;\n};\n\n/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 5\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  const a = [...Array(Math.pow(3, n))].map((_, i) => i * i - i + 1);\n  return a.filter(a => a % 3 === 0).length;\n};\n\n/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 6\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  const a = [...Array(Math.pow(3, n))].map((_, i) => i * i - i + 1);\n  return a.filter(a => a % 3 === 0).length;\n};\n\n/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 7\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  const a = [...Array(Math.pow(3, n))].map((_, i) => i * i - i + 1);\n  return a.filter(a => a % 3 === 0).length;\n};\n\n/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 8\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  const a = [...Array(Math.pow(3, n))].map((_, i) => i * i - i + 1);\n  return a.filter(a => a % 3 === 0).length;\n};\n\n/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 9\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  const a = [...Array(Math.pow(3, n))].map((_, i) => i * i - i + 1);\n  return a.filter(a => a % 3 === 0).length;\n};\n\n/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 10\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  const a = [...Array(Math.pow(3, n))].map((_, i) => i * i - i + 1);\n  return a.filter(a => a % 3 === 0).length;\n};\n\n/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 11\n      Explanation: \n      ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 3}
{"task_id": "JavaScript/148", "prompt": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "gc": "<|endoftext|>/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  const planet1Orbit = orbit(planet1);\n  const planet2Orbit = orbit(planet2);\n  const planet1OrbitDistance = planet1Orbit.distance;\n  const planet2OrbitDistance = planet2Orbit.distance;\n  const planet1OrbitOrbits = planet1Orbit.orbits;\n  const planet2OrbitOrbits = planet2Orbit.orbits;\n  const planet1OrbitOrbitPairs = planet1OrbitOrbits.map((orbit) => {\n    const planet1OrbitDistance = orbit.distance;\n    const planet2OrbitDistance = planet2OrbitDistance;\n    const planet1OrbitOrbits = orbit.orbits;\n    const planet2OrbitOrbits = planet2OrbitOrbits.map((orbit2) => {\n      const planet2OrbitDistance = orbit2.distance;\n      if (planet1OrbitDistance < planet2OrbitDistance) {\n        return orbit2;\n      }\n      return orbit;\n    });\n    return planet2OrbitOrbits;\n  });\n  const planet2OrbitOrbitPairs = planet2OrbitOrbits.map((orbit) => {\n    const planet2OrbitDistance = orbit.distance;\n    const planet1OrbitOrbits = orbit.orbits;\n    const planet1OrbitOrbitPairs = planet1OrbitOrbits.map((orbit2) => {\n      const planet1OrbitDistance = orbit2.distance;\n      if (planet2OrbitDistance < planet1OrbitDistance) {\n        return orbit2;\n      }\n      return orbit;\n    });\n    return planet1OrbitOrbitPairs;\n  });\n  const planet1OrbitOrbitPairsSorted = planet1OrbitOrbitPairs.sort((a, b) => {\n    const aDistance = a.distance;\n    const bDistance = b.distance;\n    if (aDistance < bDistance) {\n      return -1;\n    }\n    if (aDistance > bDistance) {\n      return 1;\n    }\n    return 0;\n  });\n  const planet2OrbitOrbitPairsSorted = planet2OrbitOrbitPairs.sort((a, b) => {\n    const aDistance = a.distance;\n    const bDistance = b.distance;\n    if (aDistance < bDistance) {\n      return -1;\n    }\n    if (aDistance > bDistance) {\n      return 1;\n    }\n    return 0;\n  });\n  return planet1OrbitOrbitPairsSorted.concat(planet2OrbitOrbitPairsSorted);\n};\n\n/**\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the distance to the sun in ascending order.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  asc(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  asc(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  asc(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst asc = (planet1, planet2) => {\n  const planet1Orbit = orbit(planet1);\n  const planet2Orbit = orbit(planet2);\n  const planet1OrbitDistance = planet1Orbit.distance;\n  const planet2OrbitDistance = planet2Orbit.distance;\n  const planet1OrbitOrbits = planet1Orbit.orbits;\n  const planet2OrbitOrbits = planet2Orbit.orbits;\n  const planet1OrbitOrbitPairs = planet1OrbitOrbits.map((orbit) => {\n    const planet1OrbitDistance = orbit.distance;\n    const planet2OrbitDistance = planet2OrbitDistance;\n    const planet1OrbitOrbits = orbit.orbits;\n    const planet2OrbitOrbits = planet2OrbitOrbits.map((orbit2) => {\n      const planet2OrbitDistance = orbit2.distance;\n      if (planet1OrbitDistance > planet2OrbitDistance) {\n        return orbit2;\n      }\n      return orbit;\n    });\n    return planet2OrbitOrbits;\n  });\n  const planet2OrbitOrbitPairs = planet2OrbitOrbits.map((orbit) => {\n    const planet2OrbitDistance = orbit.distance;\n    const planet1OrbitOrbits = orbit.orbits;\n    const planet1OrbitOrbitPairs = planet1OrbitOrbits.map((orbit2) => {\n      const planet1OrbitDistance = orbit2.distance;\n      if (planet2OrbitDistance > planet1OrbitDistance) {\n        return orbit2;\n      }\n      return orbit;\n    });\n    return planet1OrbitOrbitPairs;\n  });\n  const planet1OrbitOrbitPairsSorted = planet1OrbitOrbitPairs.sort((a, b) => {\n    const aDistance = a.distance;\n    const bDistance = b.distance;\n    if (aDistance > bDistance) {\n      return -1;\n    }\n    if (aDistance < bDistance) {\n      return 1;\n    }\n    return 0;\n  });\n  const planet2OrbitOrbitPairsSorted = planet2OrbitOrbitPairs.sort((a, b) => {\n    const aDistance = a.distance;\n    const bDistance = b.distance;\n    if (aDistance > bDistance) {\n      return -1;\n    }\n    if (aDistance < bDistance) {\n      return 1;\n    }\n    return 0;\n  });\n  return planet1OrbitOrbitPairsSorted.concat(planet2OrbitOrbitPairsSorted);\n};\n\n/**\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the distance to the sun in descending order.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "gc": "<|endoftext|>/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 1) {\n      sum += lst[i];\n    }\n  }\n  return [...new Set(sum.split(\"\"))]\n   .sort((a, b) => a.length - b.length)\n   .map(s => s.toLowerCase());\n};\n\n/*\n  Write a function that accepts a string as a parameter,\n  and returns the string with all the letters converted to lowercase.\n  For example:\n  assert lowerCase(\"Hello\") => \"hello\"\n  assert lowerCase(\"HELLO\") => \"hello\"\n  assert lowerCase(\"HELLO WORLD\") => \"hello world\"\n  assert lowerCase(\"HELLO WORLD!\") => \"hello world!\"\n  assert lowerCase(\"HELLO WORLD!?\") => \"hello world!?\"\n  assert lowerCase(\"HELLO WORLD!?!\") => \"hello world!?!\"\n  assert lowerCase(\"HELLO WORLD!?!?\") => \"hello world!?!?\"\n  assert lowerCase(\"HELLO WORLD!?!?!\") => \"hello world!?!?!\"\n  assert lowerCase(\"HELLO WORLD!?!?!?!?\") => \"hello world!?!?!?!?\"\n  assert lowerCase(\"HELLO WORLD!?!?!?!?!?!?\") => \"hello world!?!?!?!?!?!?!?\"\n  assert lowerCase(\"HELLO WORLD!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/15", "prompt": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "gc": "<|endoftext|>/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += i;\n    if (i!== n - 1) {\n      s +='';\n    }\n  }\n  return s;\n};\n\n// A simple way to convert a number to a string with leading zeroes if necessary.\nconst numberToString = (n) => {\n  let s = n.toString();\n  if (s.length < 2) {\n    return s;\n  }\n  return s.substr(0, s.length - 2);\n};\n\n// A simple way to convert a number to a string with trailing zeroes if necessary.\nconst numberToStringWithTrailingZeroes = (n) => {\n  let s = n.toString();\n  if (s.length < 2) {\n    return s;\n  }\n  return s.substr(s.length - 2);\n};\n\n// A simple way to convert a number to a string with leading zeroes if necessary.\nconst numberToStringWithLeadingZeroes = (n) => {\n  let s = n.toString();\n  if (s.length < 2) {\n    return s;\n  }\n  return s.substr(0, s.length - 2);\n};\n\n// A simple way to convert a number to a string with trailing zeroes if necessary.\nconst numberToStringWithTrailingZeroesWithLeadingZeroes = (n) => {\n  let s = n.toString();\n  if (s.length < 2) {\n    return s;\n  }\n  return s.substr(s.length - 2);\n};\n\n// A simple way to convert a number to a string with leading zeroes if necessary.\nconst numberToStringWithLeadingZeroesWithTrailingZeroes = (n) => {\n  let s = n.toString();\n  if (s.length < 2) {\n    return s;\n  }\n  return s.substr(0, s.length - 2);\n};\n\n// A simple way to convert a number to a string with leading zeroes if necessary.\nconst numberToStringWithTrailingZeroesWithLeadingZeroesWithTrailingZeroes = (n) => {\n  let s = n.toString();\n  if (s.length < 2) {\n    return s;\n  }\n  return s.substr(s.length - 2);\n};\n\n// A simple way to convert a number to a string with leading zeroes if necessary.\nconst numberToStringWithLeadingZeroesWithTrailingZeroesWithLeadingZeroesWithTrailingZeroes = (n) => {\n  let s = n.toString();\n  if (s.length < 2) {\n    return s;\n  }\n  return s.substr(0, s.length - 2);\n};\n\n// A simple way to convert a number to a string with leading zeroes if necessary.\nconst numberToStringWithLeadingZeroesWithTrailingZeroesWithLeadingZeroesWithTrailingZeroesWithTrailingZeroes = (n) => {\n  let s = n.toString();\n  if (s.length < 2) {\n    return s;\n  }\n  return s.substr(s.length - 2);\n};\n\n// A simple way to convert a number to a string with leading zeroes if necessary.\nconst numberToStringWithLeadingZeroesWithTrailingZeroesWithLeadingZeroesWithTrailingZeroesWithLeadingZeroesWithTrailingZeroesWithTrailingZeroes = (n) => {\n  let s = n.toString();\n  if (s.length < 2) {\n    return s;\n  }\n  return s.substr(s.length - 2);\n};\n\n// A simple way to convert a number to a string with leading zeroes if necessary.\nconst numberToStringWithLeadingZeroesWithTrailingZeroesWithLeadingZeroesWithTrailingZeroesWithLeadingZeroesWithTrailingZeroesWithTrailingZeroesWithTrailingZeroes = (n) => {\n  let s = n.toString();\n  if (s.length < 2) {\n    return s;\n  }\n  return s.substr(s.length - 2);\n};\n\n// A simple way to convert a number to a string with leading zeroes if necessary.\nconst numberToStringWithLeadingZeroesWithTrailingZeroesWithLeadingZeroesWithTrailingZeroesWithLeadingZeroesWithTrailingZeroesWithTrailingZeroesWithTrailingZeroesWithTrailingZeroes = (n) => {\n  let s = n.toString();\n  if (s.length < 2) {\n    return s;\n  }\n  return s.substr(s.length - 2);\n};\n\n// A simple way to convert a number to a string with leading zeroes if necessary.\nconst numberToStringWithLeadingZeroesWithTrailingZeroesWithLeadingZeroesWithTrailingZeroesWithLeadingZeroesWithTrailingZeroesWithTrailingZeroesWithTrailingZeroesWithTrailingZeroesWithTrailingZeroes = (n) => {\n  let s = n.toString();\n  if (s.length < 2) {\n    return s;\n  }\n  return s.substr(s.length - 2);\n};\n\n// A simple way to convert a number to a string with leading zeroes if necessary.\nconst numberToStringWithLeadingZeroesWithTrailingZeroesWithLeadingZeroesWithTrailingZeroesWithLeadingZeroesWithTrailingZeroesWithTrailingZeroesWithTrailingZeroesWithTrailingZeroesWithTrailingZeroes = (n) => {\n  let s = n.toString();\n  if (s.length < 2) {\n    return s;\n  }\n  return s.substr(s.length - 2);\n};\n\n// A simple way to convert a number to a string with leading zeroes if necessary.\nconst numberToStringWithLeadingZeroesWithTrailingZeroesWithLeadingZeroesWithTrailingZeroesWithLeadingZeroesWithTrailingZeroesWithTrailingZeroesWithTrailingZeroesWithTrailingZeroesWithTrailingZeroesWithTrailingZeroes = (n) => {\n  let s = n.toString();\n  if (s.length < 2) {\n    return s;\n  }\n  return s.substr(s.length - 2);\n};\n\n// A simple way to convert a number to a string with leading zeroes if necessary.\nconst numberToStringWithLeadingZeroesWithTrailingZeroesWithLeadingZeroesWithTrailingZeroesWithLeadingZeroesWithTrailingZeroesWithTrailingZeroesWithTrailingZeroesWithTrailingZeroesWithTrailingZeroesWithTrailingZeroes = (n) => {\n  let s = n.toString();\n  if (s.length < 2) {\n    return s;\n  }\n  return s.substr(s.length - 2);\n};\n\n// A simple way to convert a number to a string with leading zeroes if necessary.\nconst numberToStringWithLeadingZeroesWithTrailingZeroesWithLeadingZeroesWithTrailingZeroesWithLeadingZeroesWithTrailingZeroesWithTrailingZeroesWithLeadingZeroesWithTrailingZeroesWithTrailingZeroesWithTrailingZeroesWithTrailingZeroes = (n) => {\n  let s = n.toString();\n  if (s.length < 2) {\n    return s;\n  }\n  return s.substr(s.length - 2);\n};\n\n// A simple way to convert a number to a string with leading zeroes if necessary.\nconst numberToStringWithLeadingZeroesWithTrailingZeroesWithLeadingZeroesWithTrailingZeroesWithLeadingZeroesWithTrailingZeroesWithTrailingZeroesWithLeadingZeroesWithTrailingZeroesWithTrailingZeroesWithTrailingZeroesWithTrailingZeroes = (n) => {\n  let s = n.toString();\n  if (s.length < 2) {\n    return s;\n  }\n  return s.substr(s.length - 2);\n};\n\n// A simple way to convert a number to a string with leading zeroes if necessary.\nconst numberToStringWithLeadingZeroesWithTrailingZeroesWithLeadingZeroesWithTra", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/150", "prompt": "/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "gc": "<|endoftext|>/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n <= 0 || n == 1) return y;\n  if (n % 2!= 0) return xOrY(n/2, y, x);\n  return xOrY(n-1, y, x);\n}\n\n/*\n  A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n <= 0 || n == 1) return y;\n  if (n % 2!= 0) return xOrY(n/2, y, x);\n  return xOrY(n-1, y, x);\n}\n\n/*\n  A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n <= 0 || n == 1) return y;\n  if (n % 2!= 0) return xOrY(n/2, y, x);\n  return xOrY(n-1, y, x);\n}\n\n/*\n  A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n <= 0 || n == 1) return y;\n  if (n % 2!= 0) return xOrY(n/2, y, x);\n  return xOrY(n-1, y, x);\n}\n\n/*\n  A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n <= 0 || n == 1) return y;\n  if (n % 2!= 0) return xOrY(n/2, y, x);\n  return xOrY(n-1, y, x);\n}\n\n/*\n  A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n <= 0 || n == 1) return y;\n  if (n % 2!= 0) return xOrY(n/2, y, x);\n  return xOrY(n-1, y, x);\n}\n\n/*\n  A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n <= 0 || n == 1) return y;\n  if (n % 2!= 0) return xOrY(n/2, y, x);\n  return xOrY(n-1, y, x);\n}\n\n/*\n  A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n <= 0 || n == 1) return y;\n  if (n % 2!= 0) return xOrY(n/2, y, x);\n  return xOrY(n-1, y, x);\n}\n\n/*\n  A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n <= 0 || n == 1) return y;\n  if (n % 2!= 0) return xOrY(n/2, y, x);\n  return xOrY(n-1, y, x);\n}\n\n/*\n  A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n <= 0 || n == 1) return y;\n  if (n % 2!= 0) return xOrY(n/2, y, x);\n  return xOrY(n-1, y, x);\n}\n\n/*\n  A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n <= 0 || n == 1) return y;\n  if (n % 2!= 0) return xOrY(n/2, y, x);\n  return xOrY(n-1, y, x);\n}\n\n/*\n  A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n <= 0 || n == 1) return y;\n  if (n % 2!= 0) return xOrY(n/2, y, x);\n  return xOrY(n-1, y, x);\n}\n\n/*\n  A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n <= 0 || n == 1) return y;\n  if (n % 2!= 0) return xOrY(n/2, y, x);\n  return xOrY(n-1, y, x);\n}\n\n/*\n  A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n <= 0 || n == 1) return y;\n  if (n % 2!= 0) return xOrY(n/2, y, x);\n  return xOrY(n-1, y, x);\n}\n\n/*\n  A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n <= 0 || n == 1) return y;\n  if (n % 2!= 0) return xOrY(n/2, y, x);\n  return xOrY(n-1, y, x);\n}\n\n/*\n  A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n <= 0 || n == 1) return y;\n  if (n % 2!= 0) return xOrY(n/2, y, x);\n  return xOrY(n-1, y, x);\n}\n\n/*", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doublehTeDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doublehTeDifference([-1, -2, 0]) == 0\n  doublehTeDifference([9, -2]) == 81\n  doublehTeDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doublehTeDifference = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doublehTeDifference", "gc": "<|endoftext|>/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doublehTeDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doublehTeDifference([-1, -2, 0]) == 0\n  doublehTeDifference([9, -2]) == 81\n  doublehTeDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doublehTeDifference = (lst) => {\n  if (lst.length === 0) return 0;\n  const sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 1) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are even. Ignore numbers that are negative or not integers.\n  doublehTeDifference([1]) == 1 + 0 = 1\n  doublehTeDifference([-1]) == -1\n  doublehTeDifference([9]) == 81\n  doublehTeDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doublehTeDifference = (lst) => {\n  if (lst.length === 0) return 0;\n  const sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) sum += lst[i] * lst[i];\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are divisible by three. Ignore numbers that are negative\n  or not integers. doublehTeDifference([1]) == 1 + 0 = 1\n  doublehTeDifference([-1]) == -1\n  doublehTeDifference([9]) == 81\n  doublehTeDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doublehTeDifference = (lst) => {\n  if (lst.length === 0) return 0;\n  const sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0) sum += lst[i] * lst[i];\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are divisible by five. Ignore numbers that are negative\n  or not integers. doublehTeDifference([1]) == 1 + 0 = 1\n  doublehTeDifference([-1]) == -1\n  doublehTeDifference([9]) == 81\n  doublehTeDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doublehTeDifference = (lst) => {\n  if (lst.length === 0) return 0;\n  const sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 5 === 0) sum += lst[i] * lst[i];\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are divisible by nine. Ignore numbers that are negative\n  or not integers. doublehTeDifference([1]) == 1 + 0 = 1\n  doublehTeDifference([-1]) == -1\n  doublehTeDifference([9]) == 81\n  doublehTeDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doublehTeDifference = (lst) => {\n  if (lst.length === 0) return 0;\n  const sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 9 === 0) sum += lst[i] * lst[i];\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are divisible by ten. Ignore numbers that are negative\n  or not integers. doublehTeDifference([1]) == 1 + 0 = 1\n  doublehTeDifference([-1]) == -1\n  doublehTeDifference([9]) == 81\n  doublehTeDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doublehTeDifference = (lst) => {\n  if (lst.length === 0) return 0;\n  const sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 10 === 0) sum += lst[i] * lst[i];\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are divisible by eleven. Ignore numbers that are negative\n  or not integers. doublehTeDifference([1]) == 1 + 0 = 1\n  doublehTeDifference([-1]) == -1\n  doublehTeDifference([9]) == 81\n  doublehTeDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doublehTeDifference = (lst) => {\n  if (lst.length === 0) return 0;\n  const sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 11 === 0) sum += lst[i] * lst[i];\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are divisible by twelve. Ignore numbers that are negative\n  or not integers. doublehTeDifference([1]) == 1 + 0 = 1\n  doublehTeDifference([-1]) == -1\n  doublehTeDifference([9]) == 81\n  doublehTeDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doublehTeDifference = (lst) => {\n  if (lst.length === 0) return 0;\n  const sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 12 === 0) sum += lst[i] * lst[i];\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are divisible by fourteen. Ignore numbers that are negative\n  or not integers. doublehTeDifference([1]) == 1 + 0 = 1\n  doublehTeDifference([-1]) == -1\n  doublehTeDifference([9]) == 81\n  doublehTeDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doublehTeDifference = (lst) => {\n  if (lst.length === 0) return 0;\n  const sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 14 === 0) sum += lst[i] * lst[i];\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are divisible by fifteen. Ignore numbers that are negative\n  or not integers. doublehTeDifference([1]) == 1 + 0 = 1\n  doublehTeDifference([-1]) == -1\n  doublehTeDifference([9]) == 81\n  doublehTeDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doublehTeDifference = (lst) => {\n  if (lst.length === 0) return 0;\n  const sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 15 === 0) sum += lst[i] * lst[i];\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are divisible by sixteen. Ignore numbers that are negative\n  or not integers. doublehTeDifference([1]) == 1 + 0 = 1\n  doublehTeDifference([-1]) == -1\n  doublehTeDifference([9]) == 81\n  doublehTeDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doublehTeDifference = (lst) => {\n  if (lst.length === 0) return 0;\n  const sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 16 === 0) sum += lst[i] * lst[i];\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are divisible by seventeen. Ignore numbers that are negative\n  or not integers. doublehTeDifference([1]) == 1 + 0 = 1\n  doublehTeDifference([-1]) == -1\n  doublehTeDifference([9]) == 81\n  doublehTeDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doublehTeDifference = (lst) => {\n  if (lst.length === 0) return 0;\n  const sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 17 === 0) sum += lst[i] * lst[i];\n  }\n  return sum;", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "gc": "<|endoftext|>/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  let scores = [];\n  let guesses = [];\n  \n  game.forEach((row, rowIndex) => {\n    row.forEach((value, columnIndex) => {\n      scores.push(+value);\n      guesses.push(+row[columnIndex]);\n    });\n  });\n  \n  let diff = 0;\n  \n  guesses.forEach((guess, index) => {\n    if (guess === game[index]) {\n      diff++;\n    }\n  });\n  \n  return [diff,...scores];\n};\n\n/*\n  Given a game of chess, a chess piece and a chess piece, determine if they match.\n  \n  \n  example:\n\n  game([\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/153", "prompt": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "gc": "<|endoftext|>/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  const extension_strength = extensions.reduce((acc, curr) => {\n    const [first, second] = curr.split('.');\n    const first_strength = acc.findIndex(e => e.name === first);\n    const second_strength = acc.findIndex(e => e.name === second);\n    if (first_strength === -1 || second_strength === -1) {\n      return acc.concat([{\n        name: first,\n        strength: -1\n      }]);\n    }\n    if (first_strength > second_strength) {\n      return acc.concat([{\n        name: first,\n        strength: first_strength\n      }]);\n    }\n    return acc.concat([{\n      name: second,\n      strength: second_strength\n    }]);\n  }, []).reduce((acc, curr) => {\n    const [first, second] = curr.split('.');\n    const first_strength = acc.findIndex(e => e.name === first);\n    const second_strength = acc.findIndex(e => e.name === second);\n    if (first_strength === -1 || second_strength === -1) {\n      return acc.concat([{\n        name: first,\n        strength: -1\n      }]);\n    }\n    if (first_strength > second_strength) {\n      return acc.concat([{\n        name: first,\n        strength: first_strength\n      }]);\n    }\n    return acc.concat([{\n      name: second,\n      strength: second_strength\n    }]);\n  }, []).reduce((acc, curr) => {\n    const [first, second] = curr.split('.');\n    const first_strength = acc.findIndex(e => e.name === first);\n    const second_strength = acc.findIndex(e => e.name === second);\n    if (first_strength === -1 || second_strength === -1) {\n      return acc.concat([{\n        name: first,\n        strength: -1\n      }]);\n    }\n    if (first_strength > second_strength) {\n      return acc.concat([{\n        name: first,\n        strength: first_strength\n      }]);\n    }\n    return acc.concat([{\n      name: second,\n      strength: second_strength\n    }]);\n  }, []).reduce((acc, curr) => {\n    const [first, second] = curr.split('.');\n    const first_strength = acc.findIndex(e => e.name === first);\n    const second_strength = acc.findIndex(e => e.name === second);\n    if (first_strength === -1 || second_strength === -1) {\n      return acc.concat([{\n        name: first,\n        strength: -1\n      }]);\n    }\n    if (first_strength > second_strength) {\n      return acc.concat([{\n        name: first,\n        strength: first_strength\n      }]);\n    }\n    return acc.concat([{\n      name: second,\n      strength: second_strength\n    }]);\n  }, []).reduce((acc, curr) => {\n    const [first, second] = curr.split('.');\n    const first_strength = acc.findIndex(e => e.name === first);\n    const second_strength = acc.findIndex(e => e.name === second);\n    if (first_strength === -1 || second_strength === -1) {\n      return acc.concat([{\n        name: first,\n        strength: -1\n      }]);\n    }\n    if (first_strength > second_strength) {\n      return acc.concat([{\n        name: first,\n        strength: first_strength\n      }]);\n    }\n    return acc.concat([{\n      name: second,\n      strength: second_strength\n    }]);\n  }, []).reduce((acc, curr) => {\n    const [first, second] = curr.split('.');\n    const first_strength = acc.findIndex(e => e.name === first);\n    const second_strength = acc.findIndex(e => e.name === second);\n    if (first_strength === -1 || second_strength === -1) {\n      return acc.concat([{\n        name: first,\n        strength: -1\n      }]);\n    }\n    if (first_strength > second_strength) {\n      return acc.concat([{\n        name: first,\n        strength: first_strength\n      }]);\n    }\n    return acc.concat([{\n      name: second,\n      strength: second_strength\n    }]);\n  }, []).reduce((acc, curr) => {\n    const [first, second] = curr.split('.');\n    const first_strength = acc.findIndex(e => e.name === first);\n    const second_strength = acc.findIndex(e => e.name === second);\n    if (first_strength === -1 || second_strength === -1) {\n      return acc.concat([{\n        name: first,\n        strength: -1\n      }]);\n    }\n    if (first_strength > second_strength) {\n      return acc.concat([{\n        name: first,\n        strength: first_strength\n      }]);\n    }\n    return acc.concat([{\n      name: second,\n      strength: second_strength\n    }]);\n  }, []).reduce((acc, curr) => {\n    const [first, second] = curr.split('.');\n    const first_strength = acc.findIndex(e => e.name === first);\n    const second_strength = acc.findIndex(e => e.name === second);\n    if (first_strength === -1 || second_strength === -1) {\n      return acc.concat([{\n        name: first,\n        strength: -1\n      }]);\n    }\n    if (first_strength > second_strength) {\n      return acc.concat([{\n        name: first,\n        strength: first_strength\n      }]);\n    }\n    return acc.concat([{\n      name: second,\n      strength: second_strength\n    }]);\n  }, []).reduce((acc, curr) => {\n    const [first, second] = curr.split('.');\n    const first_strength = acc.findIndex(e => e.name === first);\n    const second_strength = acc.findIndex(e => e.name === second);\n    if (first_strength === -1 || second_strength === -1) {\n      return acc.concat([{\n        name: first,\n        strength: -1\n      }]);\n    }\n    if (first_strength > second_strength) {\n      return acc.concat([{\n        name: first,\n        strength: first_strength\n      }]);\n    }\n    return acc.concat([{\n      name: second,\n      strength: second_strength\n    }]);\n  }, []).reduce((acc, curr) => {\n    const [first, second] = curr.split('.');\n    const first_strength = acc.findIndex(e => e.name === first);\n    const second_strength = acc.findIndex(e => e.name === second);\n    if (first_strength === -1 || second_strength === -1) {\n      return acc.concat([{\n        name: first,\n        strength: -1\n      }]);\n    }\n    if (first_strength > second_strength) {\n      return acc.concat([{\n        name: first,\n        strength: first_strength\n      }]);\n    }\n    return acc.concat([{\n      name: second,\n      strength: second_strength\n    }]);\n  }, []).reduce((acc, curr) => {\n    const [first, second] = curr.split('.');\n    const first_strength = acc.findIndex(e => e.name === first);\n    const ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/154", "prompt": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  ccypatternChekc(\"abcd\",\"abd\") => false\n  ccypatternChekc(\"hello\",\"ell\") => true\n  ccypatternChekc(\"whassup\",\"psus\") => false\n  ccypatternChekc(\"abab\",\"baa\") => true\n  ccypatternChekc(\"efef\",\"eeff\") => false\n  ccypatternChekc(\"himenss\",\"simen\") => true\n  */\nconst ccypatternChekc = (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "ccypatternChekc", "gc": "<|endoftext|>/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  ccypatternChekc(\"abcd\",\"abd\") => false\n  ccypatternChekc(\"hello\",\"ell\") => true\n  ccypatternChekc(\"whassup\",\"psus\") => false\n  ccypatternChekc(\"abab\",\"baa\") => true\n  ccypatternChekc(\"efef\",\"eeff\") => false\n  ccypatternChekc(\"himenss\",\"simen\") => true\n  */\nconst ccypatternChekc = (a, b) => {\n  let a1 = a.split('');\n  let b1 = b.split('');\n  let a2 = a1.map((v, i) => v + i);\n  let b2 = b1.map((v, i) => v + i);\n  let a3 = a2.filter((v, i) => a1.includes(v));\n  let b3 = b2.filter((v, i) => b1.includes(v));\n  let a4 = a3.map((v, i) => v + i);\n  let b4 = b3.map((v, i) => v + i);\n  let a5 = a4.filter((v, i) => a1.includes(v));\n  let b5 = b4.filter((v, i) => b1.includes(v));\n  let a6 = a5.map((v, i) => v + i);\n  let b6 = b5.map((v, i) => v + i);\n  let a7 = a6.filter((v, i) => a1.includes(v));\n  let b7 = b6.filter((v, i) => b1.includes(v));\n  let a8 = a7.map((v, i) => v + i);\n  let b8 = b7.map((v, i) => v + i);\n  let a9 = a8.filter((v, i) => a1.includes(v));\n  let b9 = b8.filter((v, i) => b1.includes(v));\n  let a10 = a9.map((v, i) => v + i);\n  let b10 = b9.map((v, i) => v + i);\n  let a11 = a10.filter((v, i) => a1.includes(v));\n  let b11 = b10.filter((v, i) => b1.includes(v));\n  let a12 = a11.map((v, i) => v + i);\n  let b12 = b11.map((v, i) => v + i);\n  let a13 = a12.filter((v, i) => a1.includes(v));\n  let b13 = b12.filter((v, i) => b1.includes(v));\n  let a14 = a13.map((v, i) => v + i);\n  let b14 = b13.map((v, i) => v + i);\n  let a15 = a14.filter((v, i) => a1.includes(v));\n  let b15 = b14.filter((v, i) => b1.includes(v));\n  let a16 = a15.map((v, i) => v + i);\n  let b16 = b15.map((v, i) => v + i);\n  let a17 = a16.filter((v, i) => a1.includes(v));\n  let b17 = b16.filter((v, i) => b1.includes(v));\n  let a18 = a17.map((v, i) => v + i);\n  let b18 = b17.map((v, i) => v + i);\n  let a19 = a18.filter((v, i) => a1.includes(v));\n  let b19 = b18.filter((v, i) => b1.includes(v));\n  let a20 = a19.map((v, i) => v + i);\n  let b20 = b19.map((v, i) => v + i);\n  let a21 = a20.filter((v, i) => a1.includes(v));\n  let b22 = b20.filter((v, i) => b1.includes(v));\n  let a22 = a22.map((v, i) => v + i);\n  let b23 = b22.map((v, i) => v + i);\n  let a23 = a23.filter((v, i) => a1.includes(v));\n  let b24 = b23.filter((v, i) => b1.includes(v));\n  let a24 = a24.map((v, i) => v + i);\n  let b25 = b24.map((v, i) => v + i);\n  let a25 = a25.filter((v, i) => a1.includes(v));\n  let b26 = b25.filter((v, i) => b1.includes(v));\n  let a26 = a26.map((v, i) => v + i);\n  let b27 = b26.map((v, i) => v + i);\n  let a27 = a27.filter((v, i) => a1.includes(v));\n  let b28 = b27.filter((v, i) => b1.includes(v));\n  let a28 = a28.map((v, i) => v + i);\n  let b29 = b28.map((v, i) => v + i);\n  let a29 = a29.filter((v, i) => a1.includes(v));\n  let b30 = b29.filter((v, i) => b1.includes(v));\n  let a30 = a30.map((v, i) => v + i);\n  let b31 = b30.map((v, i) => v + i);\n  let a32 = a31.filter((v, i) => a1.includes(v));\n  let b32 = b31.filter((v, i) => b1.includes(v));\n  let a33 = a32.map((v, i) => v + i);\n  let b33 = b32.map((v, i) => v + i);\n  let a34 = a33.filter((v, i) => a1.includes(v));\n  let b34 = b33.filter((v, i) => b1.includes(v));\n  let a35 = a34.map((v, i) => v + i);\n  let b35 = b34.map((v, i) => v + i);\n  let a36 = a35.filter((v, i) => a1.includes(v));\n  let b36 = b35.filter((v, i) => b1.includes(v));\n  let a37 = a36.map((v, i) => v + i);\n  let b37 = b36.map((v, i) => v + i);\n  let a38 = a37.filter((v, i) => a1.includes(v));\n  let b38 = b37.filter((v, i) => b1.includes(v));\n  let a39 = a38.map((v, i) => v + i);\n  let b39 = b38.map((v, i) => v + i);\n  let a40 = a39.filter((v, i) => a1.includes(v));\n  let b41 = b39.filter((v, i) => b1.includes(v));\n  let a41 = a41.map((v, i) => v + i);\n  let b42 = b41.map((v, i) => v + i);\n  let a42 = a42.filter((v, i) => a1.includes(v));\n  let b43 = b42.filter((v, i) => b1.includes(v));\n  let a44 = a43.map((v, i) => v + i);\n  let b44 = b43.map((v, i) => v + i);\n  let a45 = a44.filter((v, i) => a1.includes(v));\n  let b45 = b44.filter((v, i) => b1.includes(v));\n  let a46 = a45.map((v, i) => v + i);\n  let b46 = b45.map((v, i) => v + i);\n  let a47 = a46.filter((v, i) => a1.includes(v));\n  let b47 = b46.filter((v, i) => b1.includes(v));\n  let a48 = a47.map((v, i) => v + i);\n  let b48 = b47.map", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/155", "prompt": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "gc": "<|endoftext|>/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let oddCount = 0;\n  let evenCount = 0;\n  let digitCount = 0;\n  let digitCount2 = 0;\n  let digitCount3 = 0;\n  let digitCount4 = 0;\n  let digitCount5 = 0;\n  let digitCount6 = 0;\n  let digitCount7 = 0;\n  let digitCount8 = 0;\n  let digitCount9 = 0;\n  let digitCount10 = 0;\n  let digitCount11 = 0;\n  let digitCount12 = 0;\n  let digitCount13 = 0;\n  let digitCount14 = 0;\n  let digitCount15 = 0;\n  let digitCount16 = 0;\n  let digitCount17 = 0;\n  let digitCount18 = 0;\n  let digitCount19 = 0;\n  let digitCount20 = 0;\n  let digitCount21 = 0;\n  let digitCount22 = 0;\n  let digitCount23 = 0;\n  let digitCount24 = 0;\n  let digitCount25 = 0;\n  let digitCount26 = 0;\n  let digitCount27 = 0;\n  let digitCount28 = 0;\n  let digitCount29 = 0;\n  let digitCount30 = 0;\n  let digitCount31 = 0;\n  let digitCount32 = 0;\n  let digitCount33 = 0;\n  let digitCount34 = 0;\n  let digitCount35 = 0;\n  let digitCount36 = 0;\n  let digitCount37 = 0;\n  let digitCount38 = 0;\n  let digitCount39 = 0;\n  let digitCount40 = 0;\n  let digitCount41 = 0;\n  let digitCount42 = 0;\n  let digitCount43 = 0;\n  let digitCount44 = 0;\n  let digitCount45 = 0;\n  let digitCount46 = 0;\n  let digitCount47 = 0;\n  let digitCount48 = 0;\n  let digitCount49 = 0;\n  let digitCount50 = 0;\n  let digitCount51 = 0;\n  let digitCount52 = 0;\n  let digitCount53 = 0;\n  let digitCount54 = 0;\n  let digitCount55 = 0;\n  let digitCount56 = 0;\n  let digitCount57 = 0;\n  let digitCount58 = 0;\n  let digitCount59 = 0;\n  let digitCount60 = 0;\n  let digitCount61 = 0;\n  let digitCount62 = 0;\n  let digitCount63 = 0;\n  let digitCount64 = 0;\n  let digitCount65 = 0;\n  let digitCount66 = 0;\n  let digitCount67 = 0;\n  let digitCount68 = 0;\n  let digitCount69 = 0;\n  let digitCount70 = 0;\n  let digitCount71 = 0;\n  let digitCount72 = 0;\n  let digitCount73 = 0;\n  let digitCount74 = 0;\n  let digitCount75 = 0;\n  let digitCount76 = 0;\n  let digitCount77 = 0;\n  let digitCount78 = 0;\n  let digitCount79 = 0;\n  let digitCount80 = 0;\n  let digitCount81 = 0;\n  let digitCount82 = 0;\n  let digitCount83 = 0;\n  let digitCount84 = 0;\n  let digitCount85 = 0;\n  let digitCount86 = 0;\n  let digitCount87 = 0;\n  let digitCount88 = 0;\n  let digitCount89 = 0;\n  let digitCount90 = 0;\n  let digitCount91 = 0;\n  let digitCount92 = 0;\n  let digitCount93 = 0;\n  let digitCount94 = 0;\n  let digitCount95 = 0;\n  let digitCount96 = 0;\n  let digitCount97 = 0;\n  let digitCount98 = 0;\n  let digitCount99 = 0;\n  let digitCount100 = 0;\n  let digitCount101 = 0;\n  let digitCount102 = 0;\n  let digitCount103 = 0;\n  let digitCount104 = 0;\n  let digitCount105 = 0;\n  let digitCount106 = 0;\n  let digitCount107 = 0;\n  let digitCount108 = 0;\n  let digitCount109 = 0;\n  let digitCount110 = 0;\n  let digitCount111 = 0;\n  let digitCount112 = 0;\n  let digitCount113 = 0;\n  let digitCount114 = 0;\n  let digitCount115 = 0;\n  let digitCount116 = 0;\n  let digitCount117 = 0;\n  let digitCount118 = 0;\n  let digitCount119 = 0;\n  let digitCount120 = 0;\n  let digitCount121 = 0;\n  let digitCount122 = 0;\n  let digitCount123 = 0;\n  let digitCount124 = 0;\n  let digitCount125 = 0;\n  let digitCount126 = 0;\n  let digitCount127 = 0;\n  let digitCount128 = 0;\n  let digitCount129 = 0;\n  let digitCount130 = 0;\n  let digitCount131 = 0;\n  let digitCount132 = 0;\n  let digitCount133 = 0;\n  let digitCount134 = 0;\n  let digitCount135 = 0;\n  let digitCount136 = 0;\n  let digitCount137 = 0;\n  let digitCount138 = 0;\n  let digitCount139 = 0;\n  let digitCount140 = 0;\n  let digitCount141 = 0;\n  let digitCount142 = 0;\n  let digitCount143 = 0;\n  let digitCount144 = 0;\n  let digitCount145 = 0;\n  let digitCount146 = 0;\n  let digitCount147 = 0;\n  let digitCount148 = 0;\n  let digitCount149 = 0;\n  let digitCount150 = 0;\n  let digitCount151 = 0;\n  let digitCount152 = 0;\n  let digitCount153 = 0;\n  let digitCount154 = 0;\n  let digitCount155 = 0;\n  let digitCount156 = 0;\n  let digitCount157 = 0;\n  let digitCount158 = 0;\n  let digitCount159 = 0;\n  let digitCount160 = 0;\n  let digitCount161 = 0;\n  let digitCount162 = 0;\n  let digitCount163 = 0;\n  let digitCount164 = 0;\n  let digitCount165 = 0;\n  let digitCount166 = 0;\n  let digitCount167 = 0;\n  let digitCount168 = 0;\n  let digitCount169 = 0;\n  let digitCount170 = 0;\n  let digitCount171 = 0;\n  let digitCount172 = 0;\n  let digitCount173 = 0;\n  let digitCount174 = 0;\n  let digitCount175 = 0;\n  let digitCount176 = 0;\n  let digitCount177 = 0;\n  let digitCount178 = 0;\n  let digitCount179 = 0;\n  let digitCount180 = 0;\n  let digitCount181 = 0;\n  let digitCount182 = 0;\n  let digitCount183 = 0;\n  let digitCount184 = 0;\n  let digitCount185 = 0;\n  let digitCount186 = 0;\n  let digitCount187 = 0;\n  let digitCount188 = 0;\n  let digitCount189 = 0;\n  let digitCount190 = 0;\n  let digitCount191 = 0;\n  let digitCount192 = 0;\n  let digitCount193 = 0;\n  let digitCount194 = 0;\n  let digitCount195 = 0;\n  let digitCount196 = 0;\n  let digitCount197 = 0;\n  let digitCount198 = 0;\n  let digitCount199 = 0;\n  let digitCount200 = 0;\n  let digitCount201 = 0;\n  let digitCount202 = 0;\n  let digitCount203 = 0;\n  let digitCount204 = 0;\n  let digitCount205 = 0;\n  let digitCount206 = 0;\n  let digitCount207 = 0;\n  let digitCount208 = 0;\n  let digitCount209 = 0;\n  let digitCount210 = 0;\n  let digitCount211 = 0;\n  let digitCount212 = 0;\n  let digitCount213 = 0;\n  let digitCount214 = 0;\n  let digitCount215 = 0;\n  let digitCount216 = 0;\n  let digitCount217 = 0;\n  let digitCount218 = 0;\n  let digitCount219 = 0;\n  let digitCount220 = 0;\n  let digitCount221 = 0;\n  let digitCount222 = 0;\n  let digitCount223 = 0;\n  let digitCount224 = 0;\n  let digitCount225 = 0;\n  let digitCount226 = 0;\n  let digitCount227 = 0;\n  let digitCount228 = 0;\n  let digitCount229 = 0;\n  let digitCount230 = 0;\n  let digitCount231 = 0;\n  let digitCount232 = 0;\n  let digitCount233 = 0;\n  let digitCount234 = 0;\n  let digitCount235 = 0;\n  let digitCount236 = 0;\n  let digitCount237 = 0;\n  let digitCount238 = 0;\n  let digitCount239 = 0;\n  let digitCount240 = 0;\n  let digitCount241 = 0;\n  let digitCount242 = 0;\n  let digitCount243 = 0;\n  let digitCount244 = 0;\n  let digitCount245 = 0;\n  let digitCount246 = 0;\n  let digit", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMinRioman(19) == 'xix'\n  >>> intToMinRioman(152) == 'clii'\n  >>> intToMinRioman(426) == 'cdxxvi'\n  */\nconst intToMinRioman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMinRioman", "gc": "<|endoftext|>/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMinRioman(19) == 'xix'\n  >>> intToMinRioman(152) == 'clii'\n  >>> intToMinRioman(426) == 'cdxxvi'\n  */\nconst intToMinRioman = (number) => {\n  const minRioman = { 0: '', 1: '', 2: '', 3: '', 4: '', 5: '', 6: '', 7: '', 8: '', 9: '', 10: '', 11: '', 12: '', 13: '', 14: '', 15: '', 16: '', 17: '', 18: '', 19: '', 20: '', 21: '', 22: '', 23: '', 24: '', 25: '', 26: '', 27: '', 28: '', 29: '', 30: '', 31: '', 32: '', 33: '', 34: '', 35: '', 36: '', 37: '', 38: '', 39: '', 40: '', 41: '', 42: '', 43: '', 44: '', 45: '', 46: '', 47: '', 48: '', 49: '', 50: '', 51: '', 52: '', 53: '', 54: '', 55: '', 56: '', 57: '', 58: '', 59: '', 60: '', 61: '', 62: '', 63: '', 64: '', 65: '', 66: '', 67: '', 68: '', 69: '', 70: '', 71: '', 72: '', 73: '', 74: '', 75: '', 76: '', 77: '', 78: '', 79: '', 80: '', 81: '', 82: '', 83: '', 84: '', 85: '', 86: '', 87: '', 88: '', 89: '', 90: '', 91: '', 92: '', 93: '', 94: '', 95: '', 96: '', 97: '', 98: '', 99: '', 100: '', 101: '', 102: '', 103: '', 104: '', 105: '', 106: '', 107: '', 108: '', 109: '', 110: '', 111: '', 112: '', 113: '', 114: '', 115: '', 116: '', 117: '', 118: '', 119: '', 120: '', 121: '', 122: '', 123: '', 124: '', 125: '', 126: '', 127: '', 128: '', 129: '', 130: '', 131: '', 132: '', 133: '', 134: '', 135: '', 136: '', 137: '', 138: '', 139: '', 140: '', 141: '', 142: '', 143: '', 144: '', 145: '', 146: '', 147: '', 148: '', 149: '', 150: '', 151: '', 152: '', 153: '', 154: '', 155: '', 156: '', 157: '', 158: '', 159: '', 160: '', 161: '', 162: '', 163: '', 164: '', 165: '', 166: '', 167: '', 168: '', 169: '', 170: '', 171: '', 172: '', 173: '', 174: '', 175: '', 176: '', 177: '', 178: '', 179: '', 180: '', 181: '', 182: '', 183: '', 184: '', 185: '', 186: '', 187: '', 188: '', 189: '', 190: '', 191: '', 192: '', 193: '', 194: '', 195: '', 196: '', 197: '', 198: '', 199: '', 200: '', 201: '', 202: '', 203: '', 204: '', 205: '', 206: '', 207: '', 208: '', 209: '', 210: '', 211: '', 212: '', 213: '', 214: '', 215: '', 216: '', 217: '', 218: '', 219: '', 220: '', 221: '', 222: '', 223: '', 224: '', 225: '', 226: '', 227: '', 228: '', 229: '', 230: '', 231: '', 232: '', 233: '', 234: '', 235: '', 236: '', 237: '', 238: '', 239: '', 240: '', 241: '', 242: '', 243: '', 244: '', 245: '', 246: '', 247: '', 248: '', 249: '', 250: '', 251: '', 252: '', 253: '', 254: '', 255: '', 256: '', 257: '', 258: '', 259: '', 260: '', 261: '', 262: '', 263: '', 264: '', 265: '', 266: '', 267: '', 268: '', 269: '', 270: '', 271: '', 272: '', 273: '', 274: '', 275: '', 276: '', 277: '', 278: '', 279: '', 280: '', 281: '', 282: '', 283: '', 284: '', 285: '', 286: '', 287: '', 288: '', 289: '', 290: '', 291: '', 292: '', 293: '', 294: '', 295: '', 296: '', 297: '', 298: '', 299: '', 300: '', 301: '', 302: '', 303: '', 304: '', 305: '', 306: '', 307: '', 308: '', 309: '', 310: '', 311: '', 312: '', 313: '', 314: '', 315: '', 316: '', 317: '', 318: '', 319: '', 320: '', 321: '', 322: '', 323: '', 324: '', 325: '', 326: '', 327: '', 328: '', 329: '', 330: '', 331: '', 332: '', 333: '', 334: '', 335: '', 336: '', 337: '', 338: '', 339: '', 340: '', 341: '', 342: '', 343: '', 344: '', 345: '', 346: '', 347: '', 348: '', 349: '', 350: '', 351: '', 352: '', 353: '', 354: '', 355: '', 356: '', 357: '', 358: '', 359: '', 360: '', 361: '', 362: '', 363: '', 364: '', 365: '', 366: '', 367: '', 368: '', 369: '', 370: '', 371: '', 372: '', 373: '', 374: '', 375: '', 376: '', 377: '', 378: '', 379: '', 380: '', 381: '', 382: '', 383: '', 384: '', 385: '', 386: '', 387: '', 388: '', 389: '', 390: '', 391: '', 392: '', 393: '', 394: '', 395: '', 396: '', 397: '', 398: '', 399: '', 400: '', 401: '', 402: '', 403: '', 404: '', 405: '', 406: '', 407: '', 408: '', 409: '', 410: '', 411: '', 412: '', 413: '', 414: '', 415: '', 416: '', 417: '', 418: '', 419: '', 420: '', 421: '', 422: '', 423: '', 424: '', 425: '', 426: '', 427: '', 428: '', 429: '', 430: '', 431: '', 432: '', 433: '', 434: '', 435: '', 436: '', 437: '', 438: '', 439: '', 440: '', 441: '', 442: '', 443: '", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rightAngelTriangle(3, 4, 5) == true\n  rightAngelTriangle(1, 2, 3) == false\n  */\nconst rightAngelTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngelTriangle", "gc": "<|endoftext|>/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rightAngelTriangle(3, 4, 5) == true\n  rightAngelTriangle(1, 2, 3) == false\n  */\nconst rightAngelTriangle = (a, b, c) => {\n  const a2 = a * 2;\n  const b2 = b * 2;\n  const c2 = c * 2;\n  return a2 >= b2 && a2 >= c2 && b2 >= c2;\n};\n\n/*\n Given the lengths of the three sides of a rectangle. Return true if the three\n  sides form a square, false otherwise.\n  A square is a rectangle in which all sides are equal.\n  Example:\n  squareTriangle(3, 4, 5) == true\n  squareTriangle(1, 2, 3) == false\n  */\nconst squareTriangle = (a, b, c) => {\n  const a2 = a * 2;\n  const b2 = b * 2;\n  const c2 = c * 2;\n  return a2 >= b2 && a2 >= c2 && b2 >= c2;\n};\n\n/*\n Given the lengths of the three sides of a pentagon. Return true if the three\n  sides form a pentagon, false otherwise.\n  A pentagon is a triangle in which all sides are equal.\n  Example:\n  pentagonTriangle(3, 4, 5) == true\n  pentagonTriangle(1, 2, 3) == false\n  */\nconst pentagonTriangle = (a, b, c) => {\n  const a2 = a * 2;\n  const b2 = b * 2;\n  const c2 = c * 2;\n  return a2 >= b2 && a2 >= c2 && b2 >= c2;\n};\n\n/*\n Given the lengths of the three sides of a hexagon. Return true if the three\n  sides form a hexagon, false otherwise.\n  A hexagon is a triangle in which all sides are equal.\n  Example:\n  hexagonTriangle(3, 4, 5) == true\n  hexagonTriangle(1, 2, 3) == false\n  */\nconst hexagonTriangle = (a, b, c) => {\n  const a2 = a * 2;\n  const b2 = b * 2;\n  const c2 = c * 2;\n  return a2 >= b2 && a2 >= c2 && b2 >= c2;\n};\n\n/*\n Given the lengths of the three sides of a heptagon. Return true if the three\n  sides form a heptagon, false otherwise.\n  A heptagon is a triangle in which all sides are equal.\n  Example:\n  heptagonTriangle(3, 4, 5) == true\n  heptagonTriangle(1, 2, 3) == false\n  */\nconst heptagonTriangle = (a, b, c) => {\n  const a2 = a * 2;\n  const b2 = b * 2;\n  const c2 = c * 2;\n  return a2 >= b2 && a2 >= c2 && b2 >= c2;\n};\n\n/*\n Given the lengths of the three sides of a decagon. Return true if the three\n  sides form a decagon, false otherwise.\n  A decagon is a triangle in which all sides are equal.\n  Example:\n  decagonTriangle(3, 4, 5) == true\n  decagonTriangle(1, 2, 3) == false\n  */\nconst decagonTriangle = (a, b, c) => {\n  const a2 = a * 2;\n  const b2 = b * 2;\n  const c2 = c * 2;\n  return a2 >= b2 && a2 >= c2 && b2 >= c2;\n};\n\n/*\n Given the lengths of the three sides of a dodecagon. Return true if the three\n  sides form a dodecagon, false otherwise.\n  A dodecagon is a triangle in which all sides are equal.\n  Example:\n  dodecagonTriangle(3, 4, 5) == true\n  dodecagonTriangle(1, 2, 3) == false\n  */\nconst dodecagonTriangle = (a, b, c) => {\n  const a2 = a * 2;\n  const b2 = b * 2;\n  const c2 = c * 2;\n  return a2 >= b2 && a2 >= c2 && b2 >= c2;\n};\n\n/*\n Given the lengths of the three sides of a quadic triangle. Return true if the three\n  sides form a quadic triangle, false otherwise.\n  A quadic triangle is a triangle in which all sides are equal.\n  Example:\n  quadicTriangle(3, 4, 5) == true\n  quadicTriangle(1, 2, 3) == false\n  */\nconst quadicTriangle = (a, b, c) => {\n  const a2 = a * 2;\n  const b2 = b * 2;\n  const c2 = c * 2;\n  return a2 >= b2 && a2 >= c2 && b2 >= c2;\n};\n\n/*\n Given the lengths of the three sides of a hexadecagon. Return true if the three\n  sides form a hexadecagon, false otherwise.\n  A hexadecagon is a triangle in which all sides are equal.\n  Example:\n  hexadecagonTriangle(3, 4, 5) == true\n  hexadecagonTriangle(1, 2, 3) == false\n  */\nconst hexadecagonTriangle = (a, b, c) => {\n  const a2 = a * 2;\n  const b2 = b * 2;\n  const c2 = c * 2;\n  return a2 >= b2 && a2 >= c2 && b2 >= c2;\n};\n\n/*\n Given the lengths of the three sides of a heptadecagon. Return true if the three\n  sides form a heptadecagon, false otherwise.\n  A heptadecagon is a triangle in which all sides are equal.\n  Example:\n  heptadecagonTriangle(3, 4, 5) == true\n  heptadecagonTriangle(1, 2, 3) == false\n  */\nconst heptadecagonTriangle = (a, b, c) => {\n  const a2 = a * 2;\n  const b2 = b * 2;\n  const c2 = c * 2;\n  return a2 >= b2 && a2 >= c2 && b2 >= c2;\n};\n\n/*\n Given the lengths of the three sides of a decagon. Return true if the three\n  sides form a dodecagon, false otherwise.\n  A dodecagon is a triangle in which all sides are equal.\n  Example:\n  dodecagonTriangle(3, 4, 5) == true\n  dodecagonTriangle(1, 2, 3) == false\n  */\nconst dodecagonTriangle = (a, b, c) => {\n  const a2 = a * 2;\n  const b2 = b * 2;\n  const c2 = c * 2;\n  return a2 >= b2 && a2 >= c2 && b2 >= c2;\n};\n\n/*\n Given the lengths of the three sides of a dodecagon. Return true if the three\n  sides form a decagon, false otherwise.\n  A decagon is a triangle in which all sides are equal.\n  Example:\n  decagonTriangle(3, 4, 5) == true\n  decagonTriangle(1, 2, 3) == false\n  */\nconst decagonTriangle = (a, b, c) => {\n  const a2 = a * 2;\n  const b2 = b * 2;\n  const c2 = c * 2;\n  return a2 >= b2 && a2 >= c2 && b2 >= c2;\n};\n\n/*\n Given the lengths of the three sides of a hexadecagon. Return true if the three\n  sides form a hexadecagon, false otherwise.\n  A ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"string\"\n  findMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst findMax = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "gc": "<|endoftext|>/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"string\"\n  findMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  findMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst findMax = (words) => {\n  let maxLength = 0;\n  let maxWord = \"\";\n  let maxChar = 0;\n  let maxUniqueChar = 0;\n  let maxUniqueWord = \"\";\n  let maxUniqueWordLength = 0;\n  let maxUniqueWordLengthLength = 0;\n  let maxUniqueWordLengthLengthLength = 0;\n  let maxUniqueWordLengthLengthLengthLength = 0;\n  let maxUniqueWordLengthLengthLengthLengthLength = 0;\n  let maxUniqueWordLengthLengthLengthLengthLengthLengthLength = 0;\n  let maxUniqueWordLengthLengthLengthLengthLengthLengthLengthLengthLength = 0;\n  let maxUniqueWordLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = 0;\n  let maxUniqueWordLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "gc": "<|endoftext|>/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  const carrots = Math.ceil(number * Math.ceil(need));\n  const remaining = Math.ceil(remaining * Math.ceil(need));\n  const meals = Math.ceil(remaining / carrots);\n  const carrotLeft = carrots - meals;\n  const carrotEaten = carrotLeft - remaining;\n  return [carrotEaten, carrotLeft];\n};\n\n/*\n  You are a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  const carrots = Math.ceil(number * Math.ceil(need));\n  const remaining = Math.ceil(remaining * Math.ceil(need));\n  const meals = Math.ceil(remaining / carrots);\n  const carrotLeft = carrots - meals;\n  const carrotEaten = carrotLeft - remaining;\n  return [carrotEaten, carrotLeft];\n};\n\n/*\n  You are a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  const carrots = Math.ceil(number * Math.ceil(need));\n  const remaining = Math.ceil(remaining * Math.ceil(need));\n  const meals = Math.ceil(remaining / carrots);\n  const carrotLeft = carrots - meals;\n  const carrotEaten = carrotLeft - remaining;\n  return [carrotEaten, carrotLeft];\n};\n\n/*\n  You are a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  const carrots = Math.ceil(number * Math.ceil(need));\n  const remaining = Math.ceil(remaining * Math.ceil(need));\n  const meals = Math.ceil(remaining / carrots);\n  const carrotLeft = carrots - meals;\n  const carrotEaten = carrotLeft - remaining;\n  return [carrotEaten, carrotLeft];\n};\n\n/*\n  You are a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  const carrots = Math.ceil(number * Math.ceil(need));\n  const remaining = Math.ceil(remaining * Math.ceil(need));\n  const meals = Math.ceil(remaining ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "gc": "<|endoftext|>/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  let count = 0;\n  let char;\n  for (let i = 0; i < string.length; i++) {\n    char = string[i];\n    if (char ==='') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/**\n * Given a string, find out how many unique characters (regardless of case) does it consist of\n * >>> countUniqueCharacters('xyzXYZ')\n * 3\n * >>> countUniqueCharacters('Jerry')\n * 4\n */\nconst countUniqueCharacters = (string) => {\n  let count = 0;\n  let char;\n  for (let i = 0; i < string.length; i++) {\n    char = string[i];\n    if (char ==='') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/**\n * Given a string, find out how many unique characters (regardless of case) does it consist of\n * >>> countUniqueCharacters('xyzXYZ')\n * 3\n * >>> countUniqueCharacters('Jerry')\n * 4\n */\nconst countUniqueCharactersWithSpaces = (string) => {\n  let count = 0;\n  let char;\n  for (let i = 0; i < string.length; i++) {\n    char = string[i];\n    if (char ==='') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/**\n * Given a string, find out how many unique characters (regardless of case) does it consist of\n * >>> countUniqueCharactersWithSpaces('xyzXYZ')\n * 3\n * >>> countUniqueCharactersWithSpaces('Jerry')\n * 4\n */\nconst countUniqueCharactersWithSpacesAndSpaces = (string) => {\n  let count = 0;\n  let char;\n  for (let i = 0; i < string.length; i++) {\n    char = string[i];\n    if (char ==='') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/**\n * Given a string, find out how many unique characters (regardless of case) does it consist of\n * >>> countUniqueCharactersWithSpaces('xyzXYZ')\n * 3\n * >>> countUniqueCharactersWithSpaces('Jerry')\n * 4\n */\nconst countUniqueCharactersWithSpacesAndTabs = (string) => {\n  let count = 0;\n  let char;\n  for (let i = 0; i < string.length; i++) {\n    char = string[i];\n    if (char ==='') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/**\n * Given a string, find out how many unique characters (regardless of case) does it consist of\n * >>> countUniqueCharactersWithSpaces('xyzXYZ')\n * 3\n * >>> countUniqueCharactersWithSpaces('Jerry')\n * 4\n */\nconst countUniqueCharactersWithSpacesAndTabsAndSpaces = (string) => {\n  let count = 0;\n  let char;\n  for (let i = 0; i < string.length; i++) {\n    char = string[i];\n    if (char ==='') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/**\n * Given a string, find out how many unique characters (regardless of case) does it consist of\n * >>> countUniqueCharactersWithSpaces('xyzXYZ')\n * 3\n * >>> countUniqueCharactersWithSpaces('Jerry')\n * 4\n */\nconst countUniqueCharactersWithSpacesAndTabsAndSpacesAndSpaces = (string) => {\n  let count = 0;\n  let char;\n  for (let i = 0; i < string.length; i++) {\n    char = string[i];\n    if (char ==='') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/**\n * Given a string, find out how many unique characters (regardless of case) does it consist of\n * >>> countUniqueCharactersWithSpaces('xyzXYZ')\n * 3\n * >>> countUniqueCharactersWithSpaces('Jerry')\n * 4\n */\nconst countUniqueCharactersWithSpacesAndTabsAndSpacesAndTabs = (string) => {\n  let count = 0;\n  let char;\n  for (let i = 0; i < string.length; i++) {\n    char = string[i];\n    if (char ==='') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/**\n * Given a string, find out how many unique characters (regardless of case) does it consist of\n * >>> countUniqueCharactersWithSpaces('xyzXYZ')\n * 3\n * >>> countUniqueCharactersWithSpaces('Jerry')\n * 4\n */\nconst countUniqueCharactersWithSpacesAndTabsAndSpacesAndTabsAndSpaces = (string) => {\n  let count = 0;\n  let char;\n  for (let i = 0; i < string.length; i++) {\n    char = string[i];\n    if (char ==='') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/**\n * Given a string, find out how many unique characters (regardless of case) does it consist of\n * >>> countUniqueCharactersWithSpaces('xyzXYZ')\n * 3\n * >>> countUniqueCharactersWithSpaces('Jerry')\n * 4\n */\nconst countUniqueCharactersWithSpacesAndTabsAndSpacesAndTabsAndTabsAndTabs = (string) => {\n  let count = 0;\n  let char;\n  for (let i = 0; i < string.length; i++) {\n    char = string[i];\n    if (char ==='') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/**\n * Given a string, find out how many unique characters (regardless of case) does it consist of\n * >>> countUniqueCharactersWithSpaces('xyzXYZ')\n * 3\n * >>> countUniqueCharactersWithSpaces('Jerry')\n * 4\n */\nconst countUniqueCharactersWithSpacesAndTabsAndSpacesAndTabsAndTabsAndTabsAndSpaces = (string) => {\n  let count = 0;\n  let char;\n  for (let i = 0; i < string.length; i++) {\n    char = string[i];\n    if (char ==='') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/**\n * Given a string, find out how many unique characters (regardless of case) does it consist of\n * >>> countUniqueCharactersWithSpaces('xyzXYZ')\n * 3\n * >>> countUniqueCharactersWithSpaces('Jerry')\n * 4\n */\nconst countUniqueCharactersWithSpacesAndTabsAndSpacesAndTabsAndSpacesAndTabsAndTabsAndTabs = (string) => {\n  let count = 0;\n  let char;\n  for (let i = 0; i < string.length; i++) {\n    char = string[i];\n    if (char ==='') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/**\n * Given a string, find out how many unique characters (regardless of case) does it consist of\n * >>> countUniqueCharactersWithSpaces('xyzXYZ')\n * 3\n * >>> countUniqueCharactersWithSpaces('Jerry')\n * 4\n */\nconst countUniqueCharactersWithSpacesAndTabsAndSpacesAndTabsAndSpacesAndTabsAndTabsAndTabsAndTabsAndSpaces = (string) => {\n  let count = 0;\n  let char;\n  for (let i = 0; i < string.length; i++) {\n    char = string[i];\n    if (char ==='') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/**\n * Given a string, find out how many unique characters (regardless of case) does it consist of\n * >>> countUniqueCharactersWithSpaces('xyzXYZ')\n * 3\n * >>> countUniqueCharactersWithSpaces('Jerry')\n * 4\n */\nconst countUniqueCharactersWithSpacesAndTabsAndSpacesAndTabsAndSpacesAndTabsAndSpacesAnd", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "gc": "<|endoftext|>/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  const operatorList = operator.split('+')\n  const operandList = operand.split('+')\n  const result = []\n  let i = 0\n  let j = 0\n  while (i < operatorList.length && j < operandList.length) {\n    if (operatorList[i] === '-') {\n      result.push(operandList[j] - operandList[i])\n    } else if (operatorList[i] === '*') {\n      result.push(operandList[i] * operandList[j])\n    } else if (operatorList[i] === '/') {\n      result.push(operandList[i] / operandList[j])\n    } else if (operatorList[i] === '^') {\n      result.push(Math.pow(operandList[i], operandList[j]))\n    } else if (operatorList[i] === '+') {\n      result.push(operandList[i] + operandList[j])\n    } else if (operatorList[i] === '-') {\n      result.push(operandList[i] - operandList[j])\n    } else if (operatorList[i] === '*') {\n      result.push(operandList[i] * operandList[j])\n    } else if (operatorList[i] === '/') {\n      result.push(operandList[i] / operandList[j])\n    } else if (operatorList[i] === '^') {\n      result.push(Math.pow(operandList[i], operandList[j]))\n    }\n    i++\n    j++\n  }\n  return result\n}\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  const operatorList = operator.split('+')\n  const operandList = operand.split('+')\n  const result = []\n  let i = 0\n  let j = 0\n  while (i < operatorList.length && j < operandList.length) {\n    if (operatorList[i] === '-') {\n      result.push(operandList[j] - operandList[i])\n    } else if (operatorList[i] === '*') {\n      result.push(operandList[i] * operandList[j])\n    } else if (operatorList[i] === '/') {\n      result.push(operandList[i] / operandList[j])\n    } else if (operatorList[i] === '^') {\n      result.push(Math.pow(operandList[i], operandList[j]))\n    } else if (operatorList[i] === '+') {\n      result.push(operandList[i] + operandList[j])\n    } else if (operatorList[i] === '-') {\n      result.push(operandList[i] - operandList[j])\n    } else if (operatorList[i] === '*') {\n      result.push(operandList[i] * operandList[j])\n    } else if (operatorList[i] === '/') {\n      result.push(operandList[i] / operandList[j])\n    } else if (operatorList[i] === '^') {\n      result.push(Math.pow(operandList[i], operandList[j]))\n    }\n    i++\n    j++\n  }\n  return result\n}\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  const operatorList = operator.split('+')\n  const operandList = operand.split('+')\n  const result = []\n  let i = 0\n  let j = 0\n  while (i < operatorList.length && j < operandList.length) {\n    if (operatorList[i] === '-') {\n      result.push(operandList[j] - operandList[i])\n    } else if (operatorList[i] === '*') {\n      result.push(operandList[i] * operandList[j])\n    } else if (operatorList[i] === '/') {\n      result.push(operandList[i] / operandList[j])\n    } else if (operatorList[i] === '^') {\n      result.push(Math.pow(operandList[i], operandList[j]))\n    } else if (operatorList[i] === '+') {\n      result.push(operandList[i] + operandList[j])\n    } else if (operatorList[i] === '-') {\n      result.push(operandList[i] - operandList[j])\n    } else if (operatorList[i] === '*') {\n      result.push(operandList[i] * operandList[j])\n    } else if (operatorList[i] === '/') {\n      result.push(operandList[i] / operandList[j])\n    } else if (operatorList[i] === '^') {\n      result.push(Math.pow(operandList[i], operandList[j]))\n    }\n    i++\n    j++\n  }\n  return result\n}\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  const operatorList = operator.split('+')\n  const operandList = operand.split('+')\n  const result = []\n  let i = 0\n  let j = 0\n  while (i < operatorList.length && j < operandList.length) {\n    if (operatorList[i] === '-') {\n      result.push(operandList[j] - operandList[i])\n    } else if (operatorList[i] === '*') {\n      result.push(operandList[i] * operandList[j])\n    } else if (operatorList[i] === '/') {\n      result.push(operandList[i] / operandList[j])\n    } else if (operatorList[i] === '^') {\n      result.push(Math.pow(operandList[i], operandList[j]))\n    } else if (operatorList[i] === '+') {\n      result.push(operandList[i] + operandList[j])\n    } else if (operatorList[i] === '-') {\n      result.push(operandList[i] - operandList[j])\n    } else if (operatorList[i] === '", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/161", "prompt": "/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "gc": "<|endoftext|>/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let result = '';\n  let i = 0;\n  let j = 0;\n  let temp = '';\n  let flag = false;\n  let temp1 = '';\n  let temp2 = '';\n  let temp3 = '';\n  let temp4 = '';\n  let temp5 = '';\n  let temp6 = '';\n  let temp7 = '';\n  let temp8 = '';\n  let temp9 = '';\n  let temp10 = '';\n  let temp11 = '';\n  let temp12 = '';\n  let temp13 = '';\n  let temp14 = '';\n  let temp15 = '';\n  let temp16 = '';\n  let temp17 = '';\n  let temp18 = '';\n  let temp19 = '';\n  let temp20 = '';\n  let temp21 = '';\n  let temp22 = '';\n  let temp23 = '';\n  let temp24 = '';\n  let temp25 = '';\n  let temp26 = '';\n  let temp27 = '';\n  let temp28 = '';\n  let temp29 = '';\n  let temp30 = '';\n  let temp31 = '';\n  let temp32 = '';\n  let temp33 = '';\n  let temp34 = '';\n  let temp35 = '';\n  let temp36 = '';\n  let temp37 = '';\n  let temp38 = '';\n  let temp39 = '';\n  let temp40 = '';\n  let temp41 = '';\n  let temp42 = '';\n  let temp43 = '';\n  let temp44 = '';\n  let temp45 = '';\n  let temp46 = '';\n  let temp47 = '';\n  let temp48 = '';\n  let temp49 = '';\n  let temp50 = '';\n  let temp51 = '';\n  let temp52 = '';\n  let temp53 = '';\n  let temp54 = '';\n  let temp55 = '';\n  let temp56 = '';\n  let temp57 = '';\n  let temp58 = '';\n  let temp59 = '';\n  let temp60 = '';\n  let temp61 = '';\n  let temp62 = '';\n  let temp63 = '';\n  let temp64 = '';\n  let temp65 = '';\n  let temp66 = '';\n  let temp67 = '';\n  let temp68 = '';\n  let temp69 = '';\n  let temp70 = '';\n  let temp71 = '';\n  let temp72 = '';\n  let temp73 = '';\n  let temp74 = '';\n  let temp75 = '';\n  let temp76 = '';\n  let temp77 = '';\n  let temp78 = '';\n  let temp79 = '';\n  let temp80 = '';\n  let temp81 = '';\n  let temp82 = '';\n  let temp83 = '';\n  let temp84 = '';\n  let temp85 = '';\n  let temp86 = '';\n  let temp87 = '';\n  let temp88 = '';\n  let temp89 = '';\n  let temp90 = '';\n  let temp91 = '';\n  let temp92 = '';\n  let temp93 = '';\n  let temp94 = '';\n  let temp95 = '';\n  let temp96 = '';\n  let temp97 = '';\n  let temp98 = '';\n  let temp99 = '';\n  let temp100 = '';\n  let temp101 = '';\n  let temp102 = '';\n  let temp103 = '';\n  let temp104 = '';\n  let temp105 = '';\n  let temp106 = '';\n  let temp107 = '';\n  let temp108 = '';\n  let temp109 = '';\n  let temp110 = '';\n  let temp111 = '';\n  let temp112 = '';\n  let temp113 = '';\n  let temp114 = '';\n  let temp115 = '';\n  let temp116 = '';\n  let temp117 = '';\n  let temp118 = '';\n  let temp119 = '';\n  let temp120 = '';\n  let temp121 = '';\n  let temp122 = '';\n  let temp123 = '';\n  let temp124 = '';\n  let temp125 = '';\n  let temp126 = '';\n  let temp127 = '';\n  let temp128 = '';\n  let temp129 = '';\n  let temp130 = '';\n  let temp131 = '';\n  let temp132 = '';\n  let temp133 = '';\n  let temp134 = '';\n  let temp135 = '';\n  let temp136 = '';\n  let temp137 = '';\n  let temp138 = '';\n  let temp139 = '';\n  let temp140 = '';\n  let temp141 = '';\n  let temp142 = '';\n  let temp143 = '';\n  let temp144 = '';\n  let temp145 = '';\n  let temp146 = '';\n  let temp147 = '';\n  let temp148 = '';\n  let temp149 = '';\n  let temp150 = '';\n  let temp151 = '';\n  let temp152 = '';\n  let temp153 = '';\n  let temp154 = '';\n  let temp155 = '';\n  let temp156 = '';\n  let temp157 = '';\n  let temp158 = '';\n  let temp159 = '';\n  let temp160 = '';\n  let temp161 = '';\n  let temp162 = '';\n  let temp163 = '';\n  let temp164 = '';\n  let temp165 = '';\n  let temp166 = '';\n  let temp167 = '';\n  let temp168 = '';\n  let temp169 = '';\n  let temp170 = '';\n  let temp171 = '';\n  let temp172 = '';\n  let temp173 = '';\n  let temp174 = '';\n  let temp175 = '';\n  let temp176 = '';\n  let temp177 = '';\n  let temp178 = '';\n  let temp179 = '';\n  let temp180 = '';\n  let temp181 = '';\n  let temp182 = '';\n  let temp183 = '';\n  let temp184 = '';\n  let temp185 = '';\n  let temp186 = '';\n  let temp187 = '';\n  let temp188 = '';\n  let temp189 = '';\n  let temp190 = '';\n  let temp191 = '';\n  let temp192 = '';\n  let temp193 = '';\n  let temp194 = '';\n  let temp195 = '';\n  let temp196 = '';\n  let temp197 = '';\n  let temp198 = '';\n  let temp199 = '';\n  let temp200 = '';\n  let temp201 = '';\n  let temp202 = '';\n  let temp203 = '';\n  let temp204 = '';\n  let temp205 = '';\n  let temp206 = '';\n  let temp207 = '';\n  let temp208 = '';\n  let temp209 = '';\n  let temp210 = '';\n  let temp211 = '';\n  let temp212 = '';\n  let temp213 = '';\n  let temp214 = '';\n  let temp215 = '';\n  let temp216 = '';\n  let temp217 = '';\n  let temp218 = '';\n  let temp219 = '';\n  let temp220 = '';\n  let temp221 = '';\n  let temp222 = '';\n  let temp223 = '';\n  let temp224 = '';\n  let temp225 = '';\n  let temp226 = '';\n  let temp227 = '';\n  let temp228 = '';\n  let temp229 = '';\n  let temp230 = '';\n  let temp231 = '';\n  let temp232 = '';\n  let temp233 = '';\n  let temp234 = '';\n  let temp235 = '';\n  let temp236 = '';\n  let temp237 = '';\n  let temp238 = '';\n  let temp239 = '';\n  let temp240 = '';\n  let temp241 = '';\n  let temp242 = '';\n  let temp243 = '';\n  let temp244 = '';\n  let temp245 = '';\n  let temp246 = '';\n  let temp247 = '';\n  let temp248 = '';\n  let temp249 = '';\n  let temp250 = '';\n  let temp251 = '';\n  let temp252 = '';\n  let temp253 = '';\n  let temp254 = '';\n  let temp255 = '';\n  let temp256 = '';\n  let temp257 = '';\n  let temp258 = '';\n  let temp259 = '';\n  let temp260 = '';\n  let temp261 = '';\n  let temp262 = '';\n  let temp263 = '';\n  let temp264 = '';\n  let temp265 = '';\n  let temp266 = '';\n  let temp267 = '';\n  let temp268 = '';\n  let temp269 = '';\n  let temp270 = '';\n  let temp271 = '';\n  let temp272 = '';\n  let temp273 = '';\n  let temp274 = '';\n  let temp275 = '';\n  let temp276 = '';\n  let temp277 = '';\n  let ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "gc": "<|endoftext|>/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (!text) {\n    return null;\n  }\n\n  const md5Hash = crypto.createHash('md5');\n  md5Hash.update(text);\n  return md5Hash.digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha1 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToSha1('Hello world') == 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'\n  */\nconst stringToSha1 = (text) => {\n  if (!text) {\n    return null;\n  }\n\n  const sha1Hash = crypto.createHash('sha1');\n  sha1Hash.update(text);\n  return sha1Hash.digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha256 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToSha256('Hello world') == 'cbb0a9e667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f817984'\n  */\nconst stringToSha256 = (text) => {\n  if (!text) {\n    return null;\n  }\n\n  const sha1Hash = crypto.createHash('sha1');\n  sha1Hash.update(text);\n  return sha1Hash.digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha512 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToSha512('Hello world') == '5fa9f8a59ccd41ad312fce84f6bc651d06b0cc53a443de8b4cf2f51f4cc0ca25a32c7'\n  */\nconst stringToSha512 = (text) => {\n  if (!text) {\n    return null;\n  }\n\n  const sha1Hash = crypto.createHash('sha1');\n  sha1Hash.update(text);\n  return sha1Hash.digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToSha1('Hello world') == 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'\n  */\nconst stringToSha1 = (text) => {\n  if (!text) {\n    return null;\n  }\n\n  const sha1Hash = crypto.createHash('sha1');\n  sha1Hash.update(text);\n  return sha1Hash.digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha1 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToSha1('Hello world') == 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'\n  */\nconst stringToSha1 = (text) => {\n  if (!text) {\n    return null;\n  }\n\n  const sha1Hash = crypto.createHash('sha1');\n  sha1Hash.update(text);\n  return sha1Hash.digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToSha1('Hello world') == 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'\n  */\nconst stringToSha1 = (text) => {\n  if (!text) {\n    return null;\n  }\n\n  const sha1Hash = crypto.createHash('sha1');\n  sha1Hash.update(text);\n  return sha1Hash.digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToSha1('Hello world') == 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'\n  */\nconst stringToSha1 = (text) => {\n  if (!text) {\n    return null;\n  }\n\n  const sha1Hash = crypto.createHash('sha1');\n  sha1Hash.update(text);\n  return sha1Hash.digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToSha1('Hello world') == 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'\n  */\nconst stringToSha1 = (text) => {\n  if (!text) {\n    return null;\n  }\n\n  const sha1Hash = crypto.createHash('sha1');\n  sha1Hash.update(text);\n  return sha1Hash.digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToSha1('Hello world') == 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'\n  */\nconst stringToSha1 = (text) => {\n  if (!text) {\n    return null;\n  }\n\n  const sha1Hash = crypto.createHash('sha1');\n  sha1Hash.update(text);\n  return sha1Hash.digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToSha1('Hello world') == 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'\n  */\nconst stringToSha1 = (text) => {\n  if (!text) {\n    return null;\n  }\n\n  const sha1Hash = crypto.createHash('sha1');\n  sha1Hash.update(text);\n  return sha1Hash.digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToSha1('Hello world') == 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'\n  */\nconst stringToSha1 = (text) => {\n  if (!text) {\n    return null;\n  }\n\n  const sha1Hash = crypto.createHash('sha1');\n  sha1Hash.update(text);\n  return sha1Hash.digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "gc": "<|endoftext|>/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  const result = [];\n  let i = a;\n  let j = 0;\n  while (i < b) {\n    result.push(j);\n    i += 1;\n    j += 1;\n  }\n  return result;\n};\n\n/**\n * Given a number, return its decimal representation in base 10.\n */\nconst decimalToBase10 = (num) => {\n  const result = String(num);\n  return result.replace(/0+$/, '');\n};\n\n/**\n * Given a number, return its binary representation in base 2.\n */\nconst binaryToBase10 = (num) => {\n  const result = String(num);\n  return result.replace(/0+$/, '');\n};\n\n/**\n * Given a number, return its octal representation in base 8.\n */\nconst octalToBase10 = (num) => {\n  const result = String(num);\n  return result.replace(/0+$/, '');\n};\n\n/**\n * Given a number, return its hex representation in base 16.\n */\nconst hexToBase10 = (num) => {\n  const result = String(num);\n  return result.replace(/0+$/, '');\n};\n\n/**\n * Given a number, return its decimal representation in base 10.\n */\nconst decimalToBase16 = (num) => {\n  const result = String(num);\n  return result.replace(/0+$/, '');\n};\n\n/**\n * Given a number, return its binary representation in base 2.\n */\nconst binaryToBase16 = (num) => {\n  const result = String(num);\n  return result.replace(/0+$/, '');\n};\n\n/**\n * Given a number, return its octal representation in base 8.\n */\nconst octalToBase16 = (num) => {\n  const result = String(num);\n  return result.replace(/0+$/, '');\n};\n\n/**\n * Given a number, return its hex representation in base 16.\n */\nconst hexToBase16 = (num) => {\n  const result = String(num);\n  return result.replace(/0+$/, '');\n};\n\n/**\n * Given a number, return its decimal representation in base 10.\n */\nconst decimalToHex = (num) => {\n  const result = String(num);\n  return result.replace(/0+$/, '');\n};\n\n/**\n * Given a number, return its binary representation in base 2.\n */\nconst binaryToHex = (num) => {\n  const result = String(num);\n  return result.replace(/0+$/, '');\n};\n\n/**\n * Given a number, return its octal representation in base 8.\n */\nconst octalToHex = (num) => {\n  const result = String(num);\n  return result.replace(/0+$/, '');\n};\n\n/**\n * Given a number, return its hex representation in base 16.\n */\nconst hexToHex = (num) => {\n  const result = String(num);\n  return result.replace(/0+$/, '');\n};\n\n/**\n * Given a number, return its decimal representation in base 10.\n */\nconst decimalToBin = (num) => {\n  const result = String(num);\n  return result.replace(/0+$/, '');\n};\n\n/**\n * Given a number, return its binary representation in base 2.\n */\nconst binaryToBin = (num) => {\n  const result = String(num);\n  return result.replace(/0+$/, '');\n};\n\n/**\n * Given a number, return its octal representation in base 8.\n */\nconst octalToBin = (num) => {\n  const result = String(num);\n  return result.replace(/0+$/, '');\n};\n\n/**\n * Given a number, return its hex representation in base 16.\n */\nconst hexToBin = (num) => {\n  const result = String(num);\n  return result.replace(/0+$/, '');\n};\n\n/**\n * Given a number, return its decimal representation in base 10.\n */\nconst decimalToOctal = (num) => {\n  const result = String(num);\n  return result.replace(/0+$/, '');\n};\n\n/**\n * Given a number, return its binary representation in base 2.\n */\nconst binaryToOctal = (num) => {\n  const result = String(num);\n  return result.replace(/0+$/, '');\n};\n\n/**\n * Given a number, return its octal representation in base 8.\n */\nconst octalToOctal = (num) => {\n  const result = String(num);\n  return result.replace(/0+$/, '');\n};\n\n/**\n * Given a number, return its hex representation in base 16.\n */\nconst hexToOctal = (num) => {\n  const result = String(num);\n  return result.replace(/0+$/, '');\n};\n\n/**\n * Given a number, return its decimal representation in base 10.\n */\nconst decimalToHexadecimal = (num) => {\n  const result = String(num);\n  return result.replace(/0+$/, '');\n};\n\n/**\n * Given a number, return its binary representation in base 2.\n */\nconst binaryToHexadecimal = (num) => {\n  const result = String(num);\n  return result.replace(/0+$/, '');\n};\n\n/**\n * Given a number, return its octal representation in base 8.\n */\nconst octalToHexadecimal = (num) => {\n  const result = String(num);\n  return result.replace(/0+$/, '');\n};\n\n/**\n * Given a number, return its hex representation in base 16.\n */\nconst hexToHexadecimal = (num) => {\n  const result = String(num);\n  return result.replace(/0+$/, '');\n};\n\n/**\n * Given a number, return its decimal representation in base 10.\n */\nconst decimalToBinary = (num) => {\n  const result = String(num);\n  return result.replace(/0+$/, '');\n};\n\n/**\n * Given a number, return its binary representation in base 2.\n */\nconst binaryToBinary = (num) => {\n  const result = String(num);\n  return result.replace(/0+$/, '');\n};\n\n/**\n * Given a number, return its octal representation in base 8.\n */\nconst octalToBinary = (num) => {\n  const result = String(num);\n  return result.replace(/0+$/, '');\n};\n\n/**\n * Given a number, return its hex representation in base 16.\n */\nconst hexToBinary = (num) => {\n  const result = String(num);\n  return result.replace(/0+$/, '');\n};\n\n/**\n * Given a number, return its decimal representation in base 10.\n */\nconst decimalToOctalBinary = (num) => {\n  const result = String(num);\n  return result.replace(/0+$/, '');\n};\n\n/**\n * Given a number, return its binary representation in base 2.\n */\nconst binaryToOctalBinary = (num) => {\n  const result = String(num);\n  return result.replace(/0+$/, '');\n};\n\n/**\n * Given a number, return its octal representation in base 8.\n */\nconst octalToOctalBinary = (num) => {\n  const result = String(num);\n  return result.replace(/0+$/, '');\n};\n\n/**\n * Given a number, return its hex representation in base 16.\n */\nconst hexToOctalBinary = (num) => {\n  const result = String(num);\n  return result.replace(/0+$/, '');\n};\n\n/**\n * Given a number, return its decimal representation in base 10.\n */\nconst decimalToBinaryOctal = (num) => {\n  const result = String(num);\n  return result.replace(/0+$/, '');\n};\n\n/**\n * Given a number, return its binary representation in base 2.\n */\nconst binaryToBinaryOctal = (num) => {\n  const result = String(num);\n  return result.replace(/0+$/, '');\n};\n\n/**\n * Given a number, return its octal representation in base 8.\n */\nconst octalTo", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/17", "prompt": "/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "gc": "<|endoftext|>/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const notes = music_string.split('|');\n  const notes_length = notes.length;\n  const notes_beats = [];\n  for (let i = 0; i < notes_length; i++) {\n    const note = notes[i];\n    const note_is_last = note.includes('.');\n    if (note_is_last) {\n      notes_beats.push(note.length);\n    } else {\n      notes_beats.push(parseInt(note));\n    }\n  }\n  return notes_beats;\n};\n\n// Given a string, return a list of integers representing the number of beats every note lasts.\n// For example, if 'o o|.| o| o|.|.|.|.| o o' is the string, return [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4].\nconst parseNotes = (music_string) => {\n  const notes = parseMusic(music_string);\n  const notes_length = notes.length;\n  const notes_beats = [];\n  for (let i = 0; i < notes_length; i++) {\n    const note = notes[i];\n    const note_is_last = note.includes('.');\n    if (note_is_last) {\n      notes_beats.push(note.length);\n    } else {\n      notes_beats.push(parseInt(note));\n    }\n  }\n  return notes_beats;\n};\n\n// Given a string, return a list of integers representing the number of beats every note lasts.\n// For example, if 'o o|.| o| o|.|.|.|.| o o' is the string, return [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4].\nconst parseNotes_reverse = (music_string) => {\n  const notes = parseMusic(music_string);\n  const notes_length = notes.length;\n  const notes_beats = [];\n  for (let i = 0; i < notes_length; i++) {\n    const note = notes[i];\n    const note_is_last = note.includes('.');\n    if (note_is_last) {\n      notes_beats.push(note.length);\n    } else {\n      notes_beats.push(parseInt(note));\n    }\n  }\n  return notes_beats.reverse();\n};\n\n// Given a string, return a list of integers representing the number of beats every note lasts.\n// For example, if 'o o|.| o| o|.|.|.|.| o o' is the string, return [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4].\nconst parseNotes_reversed_reverse = (music_string) => {\n  const notes = parseMusic(music_string);\n  const notes_length = notes.length;\n  const notes_beats = [];\n  for (let i = 0; i < notes_length; i++) {\n    const note = notes[i];\n    const note_is_last = note.includes('.');\n    if (note_is_last) {\n      notes_beats.push(note.length);\n    } else {\n      notes_beats.push(parseInt(note));\n    }\n  }\n  return notes_beats.reverse().reverse();\n};\n\n// Given a string, return a list of integers representing the number of beats every note lasts.\n// For example, if 'o o|.| o| o|.|.|.|.| o o' is the string, return [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4].\nconst parseNotes_reversed_reverse_notes_length = (music_string) => {\n  const notes = parseMusic(music_string);\n  const notes_length = notes.length;\n  const notes_beats = [];\n  for (let i = 0; i < notes_length; i++) {\n    const note = notes[i];\n    const note_is_last = note.includes('.');\n    if (note_is_last) {\n      notes_beats.push(note.length);\n    } else {\n      notes_beats.push(parseInt(note));\n    }\n  }\n  return notes_beats.reverse().reverse().length;\n};\n\n// Given a string, return a list of integers representing the number of beats every note lasts.\n// For example, if 'o o|.| o| o|.|.|.|.| o o' is the string, return [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4].\nconst parseNotes_reversed_reverse_notes_beats_length = (music_string) => {\n  const notes = parseMusic(music_string);\n  const notes_length = notes.length;\n  const notes_beats = [];\n  for (let i = 0; i < notes_length; i++) {\n    const note = notes[i];\n    const note_is_last = note.includes('.');\n    if (note_is_last) {\n      notes_beats.push(note.length);\n    } else {\n      notes_beats.push(parseInt(note));\n    }\n  }\n  return notes_beats.reverse().reverse().reverse().length;\n};\n\n// Given a string, return a list of integers representing the number of beats every note lasts.\n// For example, if 'o o|.| o| o|.|.|.|.| o o' is the string, return [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4].\nconst parseNotes_reversed_reverse_notes_beats_beats_length = (music_string) => {\n  const notes = parseMusic(music_string);\n  const notes_length = notes.length;\n  const notes_beats = [];\n  for (let i = 0; i < notes_length; i++) {\n    const note = notes[i];\n    const note_is_last = note.includes('.');\n    if (note_is_last) {\n      notes_beats.push(note.length);\n    } else {\n      notes_beats.push(parseInt(note));\n    }\n  }\n  return notes_beats.reverse().reverse().reverse().reverse().length;\n};\n\n// Given a string, return a list of integers representing the number of beats every note lasts.\n// For example, if 'o o|.| o| o|.|.|.|.| o o' is the string, return [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4].\nconst parseNotes_reversed_reverse_notes_beats_beats_beats_length = (music_string) => {\n  const notes = parseMusic(music_string);\n  const notes_length = notes.length;\n  const notes_beats = [];\n  for (let i = 0; i < notes_length; i++) {\n    const note = notes[i];\n    const note_is_last = note.includes('.');\n    if (note_is_last) {\n      notes_beats.push(note.length);\n    } else {\n      notes_beats.push(parseInt(note));\n    }\n  }\n  return notes_beats.reverse().reverse().reverse().reverse().reverse().reverse().length;\n};\n\n// Given a string, return a list of integers representing the number of beats every note lasts.\n// For example, if 'o o|.| o| o|.|.|.|.| o o' is the string, return [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4].\nconst parseNotes_reversed_reverse_notes_beats_beats_beats_beats_length = (music_string) => {\n  const notes = parseMusic(music_string);\n  const notes_length = notes.length;\n  const notes_beats = [];\n  for (let i = 0; i < notes_length; i++) {\n    const note = notes[i];\n    const note_is_last = note.includes('.');\n    if (note_is_last) {\n      notes_beats.push(note.length);\n    } else {\n      notes_beats.push(parseInt(note));\n    }\n  }\n  return notes_beats.reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/18", "prompt": "/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "gc": "<|endoftext|>/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = string.length;\n  let m = substring.length;\n  while (i < l && j < m) {\n    if (string.charAt(i) === substring.charAt(j)) {\n      count++;\n      i++;\n      j++;\n    } else {\n      count++;\n      i++;\n    }\n  }\n  return count;\n};\n\n/**\n * Given a string, return all possible permutations of that string.\n * E.g. \"abc\" -> [\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"]\n * E.g. \"abc\" -> [\"abc\", \"acb\", \"bac\", \"bca\"]\n * E.g. \"abc\" -> [\"abc\"]\n * E.g. \"abc\" -> []\n */\nconst permutations = (string) => {\n  let result = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = string.length;\n  while (i < l) {\n    result.push(string.charAt(i));\n    i++;\n  }\n  while (j < l) {\n    result.push(string.charAt(j));\n    j++;\n  }\n  return result;\n};\n\n/**\n * Given a string, return all possible combinations of that string.\n * E.g. \"abc\" -> [\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"]\n * E.g. \"abc\" -> [\"abc\", \"acb\", \"bac\", \"bca\"]\n * E.g. \"abc\" -> [\"abc\"]\n * E.g. \"abc\" -> []\n */\nconst combinations = (string) => {\n  let result = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = string.length;\n  while (i < l) {\n    result.push(string.charAt(i));\n    i++;\n  }\n  while (j < l) {\n    result.push(string.charAt(j));\n    j++;\n  }\n  return result;\n};\n\n/**\n * Given a string, return all possible combinations of that string that do not contain any repeating characters.\n * E.g. \"abc\" -> [\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"]\n * E.g. \"abc\" -> [\"abc\", \"acb\", \"bac\", \"bca\"]\n * E.g. \"abc\" -> [\"abc\"]\n * E.g. \"abc\" -> []\n */\nconst uniqueCombinations = (string) => {\n  let result = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = string.length;\n  while (i < l) {\n    result.push(string.charAt(i));\n    i++;\n  }\n  while (j < l) {\n    result.push(string.charAt(j));\n    j++;\n  }\n  return result;\n};\n\n/**\n * Given a string, return all possible permutations of that string that do not contain any repeating characters.\n * E.g. \"abc\" -> [\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"]\n * E.g. \"abc\" -> [\"abc\", \"acb\", \"bac\", \"bca\"]\n * E.g. \"abc\" -> [\"abc\"]\n * E.g. \"abc\" -> []\n */\nconst uniqueCombinationsNoRepeats = (string) => {\n  let result = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = string.length;\n  while (i < l) {\n    result.push(string.charAt(i));\n    i++;\n  }\n  while (j < l) {\n    result.push(string.charAt(j));\n    j++;\n  }\n  return result;\n};\n\n/**\n * Given a string, return all possible combinations of that string that do not contain any repeating characters.\n * E.g. \"abc\" -> [\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"]\n * E.g. \"abc\" -> [\"abc\", \"acb\", \"bac\", \"bca\"]\n * E.g. \"abc\" -> [\"abc\"]\n * E.g. \"abc\" -> []\n */\nconst uniqueCombinationsNoRepeatsNoRepeats = (string) => {\n  let result = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = string.length;\n  while (i < l) {\n    result.push(string.charAt(i));\n    i++;\n  }\n  while (j < l) {\n    result.push(string.charAt(j));\n    j++;\n  }\n  return result;\n};\n\n/**\n * Given a string, return all possible combinations of that string that do not contain any repeating characters.\n * E.g. \"abc\" -> [\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"]\n * E.g. \"abc\" -> [\"abc\", \"acb\", \"bac\", \"bca\"]\n * E.g. \"abc\" -> [\"abc\"]\n * E.g. \"abc\" -> []\n */\nconst uniqueCombinationsNoRepeatsNoRepeatsNoRepeats = (string) => {\n  let result = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = string.length;\n  while (i < l) {\n    result.push(string.charAt(i));\n    i++;\n  }\n  while (j < l) {\n    result.push(string.charAt(j));\n    j++;\n  }\n  return result;\n};\n\n/**\n * Given a string, return all possible permutations of that string that do not contain any repeating characters.\n * E.g. \"abc\" -> [\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"]\n * E.g. \"abc\" -> [\"abc\", \"acb\", \"bac\", \"bca\"]\n * E.g. \"abc\" -> [\"abc\"]\n * E.g. \"abc\" -> []\n */\nconst uniqueCombinationsNoRepeatsNoRepeatsNoRepeatsNoRepeats = (string) => {\n  let result = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = string.length;\n  while (i < l) {\n    result.push(string.charAt(i));\n    i++;\n  }\n  while (j < l) {\n    result.push(string.charAt(j));\n    j++;\n  }\n  return result;\n};\n\n/**\n * Given a string, return all possible permutations of that string that do not contain any repeating characters.\n * E.g. \"abc\" -> [\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"]\n * E.g. \"abc\" -> [\"abc\", \"acb\", \"bac\", \"bca\"]\n * E.g. \"abc\" -> [\"abc\"]\n * E.g. \"abc\" -> []\n */\nconst uniqueCombinationsNoRepeatsNoRepeatsNoRepeatsNoRepeatsNoRepeats = (string) => {\n  let result = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = string.length;\n  while (i < l) {\n    result.push(string.charAt(i));\n    i++;\n  }\n  while (j < l) {\n    result.push(string.charAt(j));\n    j++;\n  }\n  return result;\n};\n\n/**\n * Given a string, return all possible permutations of that string that do not contain any repeating characters.\n * E.g. \"abc\" -> [\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"]\n * E.g. \"abc\" -> [\"abc\", \"acb\", \"bac\", \"bca\"]\n * E.g. \"abc\" -> [\"abc\"]\n * E.g. \"abc\" -> []\n */\nconst uniqueCombinationsNoRepeatsNoRepeatsNoRepeatsNoRepeatsNoRepeatsNoRepeats = (string) => {\n  let result = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = string.length;\n  while (i < l) {\n    result.push(string.charAt(i));\n    i++;\n  }\n  while (j < l) {", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/19", "prompt": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "gc": "<|endoftext|>/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const numbers = numbers.split(' ');\n  const sorted = numbers.sort((a, b) => a - b);\n  return sorted.join(' ');\n};\n\n/**\n  Given a string, return all possible permutations of that string.\n  >>> permutation('abc')\n  ['abc', 'acb', 'bac', 'bca', 'cab', 'cba']\n  >>> permutation('abc', 2)\n  ['abc', 'acb', 'bac', 'bca', 'cab', 'cba']\n  >>> permutation('abc', 3)\n  ['abc', 'acb', 'bac', 'bca', 'cab', 'cba']\n  >>> permutation('abc', 4)\n  ['abc', 'acb', 'bac', 'bca', 'cab', 'cba']\n  >>> permutation('abc', 5)\n  ['abc', 'acb', 'bac', 'bca', 'cab', 'cba']\n  >>> permutation('abc', 6)\n  ['abc', 'acb', 'bac', 'bca', 'cab', 'cba']\n  >>> permutation('abc', 7)\n  ['abc', 'acb', 'bac', 'bca', 'cab', 'cba']\n  >>> permutation('abc', 8)\n  ['abc', 'acb', 'bac', 'bca', 'cab', 'cba']\n  >>> permutation('abc', 9)\n  ['abc', 'acb', 'bac', 'bca', 'cab', 'cba']\n  >>> permutation('abc', 10)\n  ['abc', 'acb', 'bac', 'bca', 'cab', 'cba']\n  >>> permutation('abc', 11)\n  ['abc', 'acb', 'bac', 'bca', 'cab', 'cba']\n  >>> permutation('abc', 12)\n  ['abc', 'acb', 'bac', 'bca', 'cab', 'cba']\n  >>> permutation('abc', 13)\n  ['abc', 'acb', 'bac', 'bca', 'cab', 'cba']\n  >>> permutation('abc', 14)\n  ['abc', 'acb', 'bac', 'bca', 'cab', 'cba']\n  >>> permutation('abc', 15)\n  ['abc', 'acb', 'bac', 'bca', 'cab', 'cba']\n  >>> permutation('abc', 16)\n  ['abc', 'acb', 'bac', 'bca', 'cab', 'cba']\n  >>> permutation('abc', 17)\n  ['abc', 'acb', 'bac', 'bca', 'cab', 'cba']\n  >>> permutation('abc', 18)\n  ['abc', 'acb', 'bac', 'bca', 'cab', 'cba']\n  >>> permutation('abc', 19)\n  ['abc', 'acb', 'bac', 'bca', 'cab', 'cba']\n  >>> permutation('abc', 20)\n  ['abc', 'acb', 'bac', 'bca', 'cab', 'cba']\n  >>> permutation('abc', 21)\n  ['abc', 'acb', 'bac', 'bca', 'cab', 'cba']\n  >>> permutation('abc', 22)\n  ['abc', 'acb', 'bac', 'bca', 'cab', 'cba']\n  >>> permutation('abc', 23)\n  ['abc', 'acb', 'bac', 'bca', 'cab', 'cba']\n  >>> permutation('abc', 24)\n  ['abc', 'acb', 'bac', 'bca', 'cab', 'cba']\n  >>> permutation('abc', 25)\n  ['abc', 'acb', 'bac', 'bca', 'cab', 'cba']\n  >>> permutation('abc', 26)\n  ['abc', 'acb', 'bac', 'bca', 'cab', 'cba']\n  >>> permutation('abc', 27)\n  ['abc', 'acb', 'bac', 'bca', 'cab', 'cba']\n  >>> permutation('abc', 28)\n  ['abc', 'acb', 'bac', 'bca', 'cab', 'cba']\n  >>> permutation('abc', 29)\n  ['abc', 'acb', 'bac', 'bca', 'cab', 'cba']\n  >>> permutation('abc', 30)\n  ['abc', 'acb', 'bac', 'bca', 'cab', 'cba']\n  >>> permutation('abc', 31)\n  ['abc', 'acb', 'bac', 'bca', 'cab', 'cba']\n  >>> permutation('abc', 32)\n  ['abc', 'acb', 'bac', 'bca', 'cab', 'cba']\n  >>> permutation('abc', 33)\n  ['abc', 'acb', 'bac', 'bca', 'cab', 'cba']\n  >>> permutation('abc', 34)\n  ['abc', 'acb', 'bac', 'bca', 'cab', 'cba']\n  >>> permutation('abc', 35)\n  ['abc', 'acb', 'bac', 'bca', 'cab', 'cba']\n  >>> permutation('abc', 36)\n  ['abc', 'acb', 'bac', 'bca', 'cab', 'cba']\n  >>> permutation('abc', 37)\n  ['abc', 'acb', 'bac', 'bca', 'cab', 'cba']\n  >>> permutation('abc', 38)\n  ['abc', 'acb', 'bac', 'bca', 'cab', 'cba']\n  >>> permutation('abc', 39)\n  ['abc', 'acb', 'bac', 'bca', 'cab', 'cba']\n  >>> permutation('abc', 40)\n  ['abc', 'acb', 'bac', 'bca', 'cab', 'cba']\n  >>> permutation('abc', 41)\n  ['abc', 'acb', 'bac', 'bca', 'cab', 'cba']\n  >>> permutation('abc', 42)\n  ['abc', 'acb', 'bac', 'bca', 'cab', 'cba']\n  >>> permutation('abc', 43)\n  ['abc', 'acb', 'bac', 'bca', 'cab', 'cba']\n  >>> permutation('abc', 44)\n  ['abc', 'acb', 'bac', 'bca', 'cab', 'cba']\n  >>> permutation('abc', 45)\n  ['abc', 'acb', 'bac', 'bca', 'cab', 'cba']\n  >>> permutation('abc', 46)\n  ['abc', 'acb', 'bac', 'bca', 'cab', 'cba']\n  >>> permutation('abc', 47)\n  ['abc', 'acb', 'bac', 'bca', 'cab', 'cba']\n  >>> permutation('abc', 48)\n  ['abc', 'acb', 'bac', 'bca', 'cab', 'cba']\n  >>> permutation('abc', 49)\n  ['abc', 'acb', 'bac', 'bca', 'cab', 'cba']\n  >>> permutation('abc', 50)\n  ['abc', 'acb', 'bac', 'bca', 'cab', 'cba']\n  >>> permutation('abc', 51)\n  ['abc', 'acb', 'bac', 'bca', 'cab', 'cba']\n  >>> permutation('abc', 52)\n  ['abc', 'acb', 'bac', 'bca', 'cab', 'cba']\n  >>> permutation('abc', 53)\n  ['abc', 'acb', 'bac', 'bca', 'cab', 'cba']\n  >>> permutation('abc', 54)\n  ['abc', 'acb', 'bac', 'bca', 'cab', 'cba']\n  >>> permutation('abc', 55)\n  ['abc', 'acb', 'bac', 'bca', 'cab', 'cba']\n  >>> permutation('abc', 56)\n  ['abc', 'acb', 'bac', 'bca', 'cab', 'cba']\n  >>> permutation('abc', 57)\n  ['abc', 'acb', 'bac', 'bca', 'cab', 'cba']\n  >>> permutation('abc', 58)\n  ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/2", "prompt": "/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncateNubmer(3.5)\n  0.5\n  */\nconst truncateNubmer = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNubmer", "gc": "<|endoftext|>/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncateNubmer(3.5)\n  0.5\n  */\nconst truncateNubmer = (number) => {\n  const [integer, decimal] = number.toString().split('.');\n  return integer > 0? integer : integer * Math.pow(10, decimal);\n};\n\n/**\n  Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNubmer(3.5)\n  3\n  */\nconst truncateNubmerInt = (number) => {\n  const [integer, decimal] = number.toString().split('.');\n  return integer > 0? integer : integer * Math.pow(10, decimal);\n};\n\n/**\n  Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncateNubmer(3.5)\n  3.5\n  */\nconst truncateNubmerDecimal = (number) => {\n  const [integer, decimal] = number.toString().split('.');\n  return integer > 0? integer : integer * Math.pow(10, decimal);\n};\n\n/**\n  Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNubmer(3.5)\n  3.5\n  */\nconst truncateNubmerIntDecimal = (number) => {\n  const [integer, decimal] = number.toString().split('.');\n  return integer > 0? integer : integer * Math.pow(10, decimal);\n};\n\n/**\n  Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncateNubmer(3.5)\n  3.5\n  */\nconst truncateNubmerDecimalInt = (number) => {\n  const [integer, decimal] = number.toString().split('.');\n  return integer > 0? integer : integer * Math.pow(10, decimal);\n};\n\n/**\n  Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNubmer(3.5)\n  3.5\n  */\nconst truncateNubmerIntDecimalInt = (number) => {\n  const [integer, decimal] = number.toString().split('.');\n  return integer > 0? integer : integer * Math.pow(10, decimal);\n};\n\n/**\n  Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncateNubmer(3.5)\n  3.5\n  */\nconst truncateNubmerDecimalDecimal = (number) => {\n  const [integer, decimal] = number.toString().split('.');\n  return integer > 0? integer : integer * Math.pow(10, decimal);\n};\n\n/**\n  Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNubmer(3.5)\n  3.5\n  */\nconst truncateNubmerIntDecimalDecimal = (number) => {\n  const [integer, decimal] = number.toString().split('.');\n  return integer > 0? integer : integer * Math.pow(10, decimal);\n};\n\n/**\n  Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncateNubmer(3.5)\n  3.5\n  */\nconst truncateNubmerDecimalDecimalInt = (number) => {\n  const [integer, decimal] = number.toString().split('.');\n  return integer > 0? integer : integer * Math.pow(10, decimal);\n};\n\n/**\n  Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNubmer(3.5)\n  3.5\n  */\nconst truncateNubmerIntDecimalDecimalInt = (number) => {\n  const [integer, decimal] = number.toString().split('.');\n  return integer > 0? integer : integer * Math.pow(10, decimal);\n};\n\n/**\n  Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncateNubmer(3.5)\n  3.5\n  */\nconst truncateNubmerDecimalDecimalDecimal = (number) => {\n  const [integer, decimal] = number.toString().split('.');\n  return integer > 0? integer : integer * Math.pow(10, decimal);\n};\n\n/**\n  Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNubmer(3.5)\n  3.5\n  */\nconst truncateNubmerIntDecimalDecimalDecimal = (number) => {\n  const [integer, decimal] = number.toString().split('.');\n  return integer > 0? integer : integer * Math.pow(10, decimal);\n};\n\n/**\n  Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncateNubmer(3.5)\n  3.5\n  */\nconst truncateNubmerDecimalDecimalDecimalInt = (number) => {\n  const [integer, decimal] = number.toString().split('.');\n  return integer > 0? integer : integer * Math.pow(10, decimal);\n};\n\n/**\n  Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNubmer(3.5)\n  3.5\n  */\nconst truncateNubmerIntDecimalDecimalDecimalInt = (number) => {\n  const [integer, decimal] = number.toString().split('.');\n  return integer > 0? integer : integer * Math.pow(10, decimal);\n};\n\n/**\n  Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncateNubmer(3.5)\n  3.5\n  */\nconst truncateNubmerDecimalDecimalDecimalDecimal = (number) => {\n  const [integer, decimal] = number.toString().split('.');\n  return integer > 0? integer : integer * Math.pow(10, decimal);\n};\n\n/**\n  Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNubmer(3.5)\n  3.5\n  */\nconst truncateNubmerIntDecimalDecimalDecimalInt = (number", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/20", "prompt": "/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "gc": "<|endoftext|>/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  const minDistance = Number.MAX_VALUE;\n  const minDistanceIndex = -1;\n  const closestElements = [];\n  const closestElementsIndex = [];\n  const distances = [];\n  const distanceIndex = [];\n  const distanceIndexMap = {};\n  const distanceIndexMapIndex = {};\n  const distanceIndexMapValue = {};\n  const distanceIndexMapValueIndex = {};\n  const distanceIndexMapValueIndexMap = {};\n  const distanceIndexMapValueIndexMapIndex = {};\n  const distanceIndexMapValueIndexMapValue = {};\n  const distanceIndexMapValueIndexMapValueIndex = {};\n  const distanceIndexMapValueIndexMapValueIndexMap = {};\n  const distanceIndexMapValueIndexMapValueIndexMapIndex = {};\n  const distanceIndexMapValueIndexMapValueIndexMapValue = {};\n  const distanceIndexMapValueIndexMapValueIndexMapValueIndex = {};\n  const distanceIndexMapValueIndexMapValueIndexMapValueIndexMap = {};\n  const distanceIndexMapValueIndexMapValueIndexMapValueIndexMapIndex = {};\n  const distanceIndexMapValueIndexMapValueIndexMapValueIndexMapValueIndex = {};\n  const distanceIndexMapValueIndexMapValueIndexMapValueIndexMapValueIndexMapValue = {};\n  const distanceIndexMapValueIndexMapValueIndexMapValueIndexMapValueIndexMapValue = {};\n  const distanceIndexMapValueIndexMapValueIndexMapValueIndexMapValueIndexMapValue = {};\n  const distanceIndexMapValueIndexMapValueIndexMapValueIndexMapValueIndexMapValueIndex = {};\n  const distanceIndexMapValueIndexMapValueIndexMapValueIndexMapValueIndexMapValueIndexMapValue = {};\n  const distanceIndexMapValueIndexMapValueIndexMapValueIndexMapValueIndexMapValueIndexMapValue = {};\n  const distanceIndexMapValueIndexMapValueIndexMapValueIndexMapValueIndexMapValueIndexMapValue = {};\n  const distanceIndexMapValueIndexMapValueIndexMapValueIndexMapValueIndexMapValueIndexMapValue = {};\n  const distanceIndexMapValueIndexMapValueIndexMapValueIndexMapValueIndexMapValueIndexMapValue = {};\n  const distanceIndexMapValueIndexMapValueIndexMapValueIndexMapValueIndexMapValueIndexMapValue = {};\n  const distanceIndexMapValueIndexMapValueIndexMapValueIndexMapValueIndexMapValueIndexMapValue = {};\n  const distanceIndexMapValueIndexMapValueIndexMapValueIndexMapValueIndexMapValueIndexMapValue = {};\n  const distanceIndexMapValueIndexMapValueIndexMapValueIndexMapValueIndexMapValueIndexMapValue = {};\n  const distanceIndexMapValueIndexMapValueIndexMapValueIndexMapValueIndexMapValueIndexMapValue = {};\n  const distanceIndexMapValueIndexMapValueIndexMapValueIndexMapValueIndexMapValueIndexMapValue = {};\n  const distanceIndexMapValueIndexMapValueIndexMapValueIndexMapValueIndexMapValueIndexMapValue = {};\n  const distanceIndexMapValueIndexMapValueIndexMapValueIndexMapValueIndexMapValueIndexMapValue = {};\n  const distanceIndexMapValueIndexMapValueIndexMapValueIndexMapValueIndexMapValueIndexMapValue = {};\n  const distanceIndexMapValueIndexMapValueIndexMapValueIndexMapValueIndexMapValueIndexMapValue = {};\n  const distanceIndexMapValueIndexMapValueIndexMapValueIndexMapValueIndexMapValueIndexMapValue = {};\n  const distanceIndexMapValueIndexMapValueIndexMapValueIndexMapValueIndexMapValueIndexMapValue = {};\n  const distanceIndexMapValueIndexMapValueIndexMapValueIndexMapValueIndexMapValueIndexMapValue = {};\n  const distanceIndexMapValueIndexMapValueIndexMapValueIndexMapValueIndexMapValueIndexMapValue = {};\n  const distanceIndexMapValueIndexMapValueIndexMapValueIndexMapValueIndexMapValueIndexMapValue = {};\n  const distanceIndexMapValueIndexMapValueIndexMapValueIndexMapValueIndexMapValueIndexMapValue = {};\n  const distanceIndexMapValueIndexMapValueIndexMapValueIndexMapValueIndexMapValueIndexMapValue = {};\n  const distanceIndexMapValueIndexMapValueIndexMapValueIndexMapValueIndexMapValueIndexMapValue = {};\n  const distanceIndexMapValueIndexMapValueIndexMapValueIndexMapValueIndexMapValueIndexMapValue = {};\n  const distanceIndexMapValueIndexMapValueIndexMapValueIndexMapValueIndexMapValueIndexMapValue = {};\n  const distanceIndexMapValueIndexMapValueIndexMapValueIndexMapValueIndexMapValueIndexMapValue = {};\n  const distanceIndexMapValueIndexMapValueIndexMapValueIndexMapValueIndexMapValueIndexMapValue = {};\n  const distanceIndexMapValueIndexMapValueIndexMapValueIndexMapValueIndexMapValueIndexMapValue = {};\n  const distanceIndexMapValueIndexMapValueIndexMapValueIndexMapValueIndexMapValueIndexMapValue = {};\n  const distanceIndexMapValueIndexMapValueIndexMapValueIndexMapValueIndexMapValueIndexMapValue = {};\n  const distanceIndexMapValueIndexMapValueIndexMapValueIndexMapValueIndexMapValueIndexMapValue = {};\n  const distanceIndexMapValueIndexMapValueIndexMapValueIndexMapValueIndexMapValueIndexMapValue = {};\n  const distanceIndexMapValueIndexMapValueIndexMapValueIndexMapValueIndexMapValueIndexMapValue = {};\n  const distanceIndexMapValueIndexMapValueIndexMapValueIndexMapValueIndexMapValueIndexMapValue = {};\n  const distanceIndexMapValueIndexMapValueIndexMapValueIndexMapValueIndexMapValueIndexMapValue = {};\n  const distanceIndexMapValueIndexMapValueIndexMapValueIndexMapValueIndexMapValueIndexMapValue = {};\n  const distanceIndexMapValueIndexMapValueIndexMapValueIndexMapValueIndexMapValueIndexMapValue = {};\n  const distanceIndexMapValueIndexMapValueIndexMapValueIndexMapValueIndexMapValueIndexMapValue = {};\n  const distanceIndexMapValueIndexMapValueIndexMapValueIndexMapValueIndexMapValueIndexMapValue = {};\n  const distanceIndexMapValueIndexMapValueIndexMapValueIndexMapValueIndexMapValueIndexMapValue = {};\n  const distanceIndexMapValueIndexMapValueIndexMapValueIndexMapValueIndexMapValueIndexMapValue = {};\n  const distanceIndexMapValueIndexMapValueIndexMapValueIndexMapValueIndexMapValueIndexMapValue = {};\n  const distanceIndexMapValueIndexMapValueIndexMapValueIndexMapValueIndexMapValueIndexMapValue = {};\n  const distanceIndexMapValueIndexMapValueIndexMapValueIndexMapValueIndexMapValueIndexMapValue = {};\n  const distanceIndexMapValueIndexMapValueIndexMapValueIndexMapValueIndexMapValueIndexMapValue = {};\n  const distanceIndexMapValueIndexMapValueIndexMapValueIndexMapValueIndexMapValueIndexMapValue = {};\n  const distanceIndexMapValueIndexMapValueIndexMapValueIndexMapValueIndexMapValueIndexMapValue = {};\n  const distanceIndexMapValueIndexMapValueIndexMapValueIndexMapValueIndexMapValueIndexMapValue = {};\n  const distanceIndexMapValueIndexMapValueIndexMapValueIndexMapValueIndexMapValueIndexMapValue = {};\n  const distanceIndexMapValueIndexMapValueIndexMapValueIndexMapValueIndexMapValueIndexMapValue = {};\n  const distanceIndexMapValueIndexMapValueIndexMapValueIndexMapValueIndexMapValueIndexMapValue = {};\n  const distanceIndexMapValueIndexMapValueIndexMapValueIndexMapValueIndexMapValueIndexMapValue = {};\n  const distanceIndexMapValueIndexMapValueIndexMapValueIndexMapValueIndexMapValueIndexMapValue = {};\n  const ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleTonUit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleTonUit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleTonUit", "gc": "<|endoftext|>/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleTonUit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleTonUit = (numbers) => {\n  const [min, max] = numbers.reduce((acc, n) => {\n    return [Math.min(acc, n), Math.max(acc, n)];\n  }, [Number.MAX_VALUE, Number.MIN_VALUE]);\n  return numbers.map((n) => n * max / min);\n};\n\nconst getTonUit = (tonUit) => {\n  const tonUitInKgs = tonUit * 0.45359237;\n  const tonUitInMiles = tonUitInKgs * 0.621371;\n  const tonUitInInches = tonUitInMiles * 0.39370076;\n  const tonUitInCentimeters = tonUitInInches * 0.621371;\n  const tonUitInMeters = tonUitInCentimeters * 0.45359237;\n  const tonUitInFeet = tonUitInMeters * 0.621371;\n  const tonUitInYards = tonUitInFeet * 0.45359237;\n  const tonUitInMilesPerInch = tonUitInYards * 0.621371;\n  const tonUitInInchesPerMeter = tonUitInMilesPerInch * 0.45359237;\n  const tonUitInCentimetersPerMeter = tonUitInInchesPerMeter * 0.621371;\n  const tonUitInMetersPerSecond = tonUitInCentimetersPerMeter * 0.45359237;\n  const tonUitInSecondsPerMinute = tonUitInMetersPerSecond * 0.621371;\n  const tonUitInMinutesPerHour = tonUitInSecondsPerMinute * 0.45359237;\n  const tonUitInHoursPerDay = tonUitInMinutesPerHour * 0.621371;\n  const tonUitInDaysPerYear = tonUitInHoursPerDay * 0.45359237;\n  const tonUitInYearsPerCentury = tonUitInDaysPerYear * 0.621371;\n  const tonUitInCenturiesPerMile = tonUitInYearsPerCentury * 0.45359237;\n  const tonUitInMilesPerCentury = tonUitInCenturiesPerMile * 0.621371;\n  const tonUitInCenturiesPerKilometer = tonUitInMilesPerCentury * 0.45359237;\n  const tonUitInKilometersPerCentury = tonUitInCenturiesPerKilometer * 0.621371;\n  const tonUitInMilesPerKilometer = tonUitInKilometersPerCentury * 0.45359237;\n  const tonUitInKilometersPerMile = tonUitInKilometersPerMile * 0.621371;\n  const tonUitInMilesPerKilometer = tonUitInKilometersPerKilometer * 0.45359237;\n  const tonUitInKilometersPerMile = tonUitInKilometersPerMile * 0.621371;\n  const tonUitInKilometersPerKilometer = tonUitInKilometersPerKilometer * 0.45359237;\n  const tonUitInKilometersPerKilometer = tonUitInKilometersPerKilometer * 0.621371;\n  const tonUitInKilometersPerKilometer = tonUitInKilometersPerKilometer * 0.45359237;\n  const tonUitInKilometersPerKilometer = tonUitInKilometersPerKilometer * 0.621371;\n  const tonUitInKilometersPerKilometer = tonUitInKilometersPerKilometer * 0.45359237;\n  const tonUitInKilometersPerKilometer = tonUitInKilometersPerKilometer * 0.621371;\n  const tonUitInKilometersPerKilometer = tonUitInKilometersPerKilometer * 0.45359237;\n  const tonUitInKilometersPerKilometer = tonUitInKilometersPerKilometer * 0.621371;\n  const tonUitInKilometersPerKilometer = tonUitInKilometersPerKilometer * 0.45359237;\n  const tonUitInKilometersPerKilometer = tonUitInKilometersPerKilometer * 0.621371;\n  const tonUitInKilometersPerKilometer = tonUitInKilometersPerKilometer * 0.45359237;\n  const tonUitInKilometersPerKilometer = tonUitInKilometersPerKilometer * 0.621371;\n  const tonUitInKilometersPerKilometer = tonUitInKilometersPerKilometer * 0.45359237;\n  const tonUitInKilometersPerKilometer = tonUitInKilometersPerKilometer * 0.621371;\n  const tonUitInKilometersPerKilometer = tonUitInKilometersPerKilometer * 0.45359237;\n  const tonUitInKilometersPerKilometer = tonUitInKilometersPerKilometer * 0.621371;\n  const tonUitInKilometersPerKilometer = tonUitInKilometersPerKilometer * 0.45359237;\n  const tonUitInKilometersPerKilometer = tonUitInKilometersPerKilometer * 0.621371;\n  const tonUitInKilometersPerKilometer = tonUitInKilometersPerKilometer * 0.45359237;\n  const tonUitInKilometersPerKilometer = tonUitInKilometersPerKilometer * 0.621371;\n  const tonUitInKilometersPerKilometer = tonUitInKilometersPerKilometer * 0.45359237;\n  const tonUitInKilometersPerKilometer = tonUitInKilometersPerKilometer * 0.621371;\n  const tonUitInKilometersPerKilometer = tonUitInKilometersPerKilometer * 0.45359237;\n  const tonUitInKilometersPerKilo", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/22", "prompt": "/* Filter given list of any python values only for integers\n  >>> filetrItnegers(['a', 3.14, 5])\n  [5]\n  >>> filetrItnegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filetrItnegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filetrItnegers", "gc": "<|endoftext|>/* Filter given list of any python values only for integers\n  >>> filetrItnegers(['a', 3.14, 5])\n  [5]\n  >>> filetrItnegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filetrItnegers = (values) => {\n  const itnegers = values.filter(value => typeof value === 'number');\n  return itnegers;\n};\n\n// Convert given list of any python values to string\nconst filetrStrings = (values) => {\n  const strings = values.map(value => typeof value ==='string'? value : '');\n  return strings;\n};\n\n// Convert given list of any python values to boolean\nconst filetrBools = (values) => {\n  const bools = values.map(value => typeof value === 'boolean'? value : false);\n  return bools;\n};\n\n// Convert given list of any python values to integer\nconst filetrInts = (values) => {\n  const ints = values.map(value => typeof value === 'number'? value : 0);\n  return ints;\n};\n\n// Convert given list of any python values to float\nconst filetrFloats = (values) => {\n  const floats = values.map(value => typeof value === 'number'? value : 0);\n  return floats;\n};\n\n// Convert given list of any python values to list\nconst filetrLists = (values) => {\n  const lists = values.map(value => Array.isArray(value)? value : [value]);\n  return lists;\n};\n\n// Convert given list of any python values to dict\nconst filetrDicts = (values) => {\n  const dicts = values.map(value => typeof value === 'object'? value : {});\n  return dicts;\n};\n\n// Convert given list of any python values to set\nconst filetrSets = (values) => {\n  const sets = values.map(value => typeof value ==='string'? new Set(value) : new Set(value));\n  return sets;\n};\n\n// Convert given list of any python values to tuple\nconst filetrTuples = (values) => {\n  const tuples = values.map(value => Array.isArray(value)? value : [value]);\n  return tuples;\n};\n\n// Convert given list of any python values to set\nconst filetrSetsTuples = (values) => {\n  const sets = values.map(value => Array.isArray(value)? value : [value]);\n  return sets;\n};\n\n// Convert given list of any python values to set\nconst filetrSetsSets = (values) => {\n  const sets = values.map(value => Array.isArray(value)? value : [value]);\n  return sets;\n};\n\n// Convert given list of any python values to set\nconst filetrSetsSetsTuples = (values) => {\n  const sets = values.map(value => Array.isArray(value)? value : [value]);\n  return sets;\n};\n\n// Convert given list of any python values to set\nconst filetrSetsSetsSetsTuples = (values) => {\n  const sets = values.map(value => Array.isArray(value)? value : [value]);\n  return sets;\n};\n\n// Convert given list of any python values to set\nconst filetrSetsSetsSetsSetsSetsTuples = (values) => {\n  const sets = values.map(value => Array.isArray(value)? value : [value]);\n  return sets;\n};\n\n// Convert given list of any python values to set\nconst filetrSetsSetsSetsSetsSetsSetsSetsTuples = (values) => {\n  const sets = values.map(value => Array.isArray(value)? value : [value]);\n  return sets;\n};\n\n// Convert given list of any python values to set\nconst filetrSetsSetsSetsSetsSetsSetsSetsSetsSetsTuples = (values) => {\n  const sets = values.map(value => Array.isArray(value)? value : [value]);\n  return sets;\n};\n\n// Convert given list of any python values to set\nconst filetrSetsSetsSetsSetsSetsSetsSetsSetsSetsSetsTuples = (values) => {\n  const sets = values.map(value => Array.isArray(value)? value : [value]);\n  return sets;\n};\n\n// Convert given list of any python values to set\nconst filetrSetsSetsSetsSetsSetsSetsSetsSetsSetsSetsSetsTuples = (values) => {\n  const sets = values.map(value => Array.isArray(value)? value : [value]);\n  return sets;\n};\n\n// Convert given list of any python values to set\nconst filetrSetsSetsSetsSetsSetsSetsSetsSetsSetsSetsSetsSetsTuples = (values) => {\n  const sets = values.map(value => Array.isArray(value)? value : [value]);\n  return sets;\n};\n\n// Convert given list of any python values to set\nconst filetrSetsSetsSetsSetsSetsSetsSetsSetsSetsSetsSetsSetsTuples = (values) => {\n  const sets = values.map(value => Array.isArray(value)? value : [value]);\n  return sets;\n};\n\n// Convert given list of any python values to set\nconst filetrSetsSetsSetsSetsSetsSetsSetsSetsSetsSetsSetsSetsSetsTuples = (values) => {\n  const sets = values.map(value => Array.isArray(value)? value : [value]);\n  return sets;\n};\n\n// Convert given list of any python values to set\nconst filetrSetsSetsSetsSetsSetsSetsSetsSetsSetsSetsSetsSetsSetsTuples = (values) => {\n  const sets = values.map(value => Array.isArray(value)? value : [value]);\n  return sets;\n};\n\n// Convert given list of any python values to set\nconst filetrSetsSetsSetsSetsSetsSetsSetsSetsSetsSetsSetsSetsSetsSetsTuples = (values) => {\n  const sets = values.map(value => Array.isArray(value)? value : [value]);\n  return sets;\n};\n\n// Convert given list of any python values to set\nconst filetrSetsSetsSetsSetsSetsSetsSetsSetsSetsSetsSetsSetsSetsSetsTuples = (values) => {\n  const sets = values.map(value => Array.isArray(value)? value : [value]);\n  return sets;\n};\n\n// Convert given list of any python values to set\nconst filetrSetsSetsSetsSetsSetsSetsSetsSetsSetsSetsSetsSetsSetsSetsSetsTuples = (values) => {\n  const sets = values.map(value => Array.isArray(value)? value : [value]);\n  return sets;\n};\n\n// Convert given list of any python values to set\nconst filetrSetsSetsSetsSetsSetsSetsSetsSetsSetsSetsSetsSetsSetsSetsSetsTuples = (values) => {\n  const sets = values.map(value => Array.isArray(value)? value : [value]);\n  return sets;\n};\n\n// Convert given list of any python values to set\nconst filetrSetsSetsSetsSetsSetsSetsSetsSetsSetsSetsSetsSetsSetsSetsSetsTuples = (values) => {\n  const sets = values.map(value => Array.isArray(value)? value : [value]);\n  return sets;\n};\n\n// Convert given list of any python values to set\nconst filetrSetsSetsSetsSetsSetsSetsSetsSetsSetsSetsSetsSetsSetsSetsSetsSetsTuples = (values) => {\n  const sets = values.map(value => Array.isArray(value)? value : [", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/23", "prompt": "/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "gc": "<|endoftext|>/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  if (string === null || string === undefined) {\n    return 0;\n  }\n  return Buffer.byteLength(string, 'utf8');\n};\n\n/**\n * Returns a new string containing only characters in `string` which are\n * not in `exclude`.\n *\n * Example:\n *\n * >>> exclude('abc', 'd')\n * 'abc'\n * >>> exclude('abc', 'e')\n * 'bc'\n * >>> exclude('abc', 'z')\n * 'abc'\n * >>> exclude('abc', 'a')\n * ''\n */\nconst exclude = (string, exclude) => {\n  if (string === null || string === undefined) {\n    return '';\n  }\n  return string\n   .split('')\n   .filter(char => exclude.includes(char))\n   .join('');\n};\n\n/**\n * Returns a new string containing only characters in `string` which are\n * in `exclude`.\n *\n * Example:\n *\n * >>> include('abc', 'd')\n * 'abc'\n * >>> include('abc', 'e')\n * 'bc'\n * >>> include('abc', 'z')\n * 'abc'\n * >>> include('abc', 'a')\n * ''\n */\nconst include = (string, exclude) => {\n  if (string === null || string === undefined) {\n    return '';\n  }\n  return string\n   .split('')\n   .filter(char => exclude.includes(char))\n   .join('');\n};\n\n/**\n * Returns a new string containing only characters in `string` which are\n * in `exclude` but not in `string`.\n *\n * Example:\n *\n * >>> excludeNotIn('abc', 'd')\n * 'abc'\n * >>> excludeNotIn('abc', 'e')\n * 'bc'\n * >>> excludeNotIn('abc', 'z')\n * 'abc'\n * >>> excludeNotIn('abc', 'a')\n * ''\n */\nconst excludeNotIn = (string, exclude) => {\n  if (string === null || string === undefined) {\n    return '';\n  }\n  return string\n   .split('')\n   .filter(char => exclude.includes(char))\n   .join('');\n};\n\n/**\n * Returns a new string containing only characters in `string` which are\n * in `string` but not in `exclude`.\n *\n * Example:\n *\n * >>> includeNotIn('abc', 'd')\n * 'abc'\n * >>> includeNotIn('abc', 'e')\n * 'bc'\n * >>> includeNotIn('abc', 'z')\n * 'abc'\n * >>> includeNotIn('abc', 'a')\n * ''\n */\nconst includeNotIn = (string, exclude) => {\n  if (string === null || string === undefined) {\n    return '';\n  }\n  return string\n   .split('')\n   .filter(char => exclude.includes(char))\n   .join('');\n};\n\n/**\n * Returns a new string containing only characters in `string` which are\n * in `string` but not in `exclude`.\n *\n * Example:\n *\n * >>> includeNotIn('abc', 'a')\n * 'bc'\n * >>> includeNotIn('abc', 'z')\n * 'abc'\n * >>> includeNotIn('abc', 'e')\n * 'abc'\n */\nconst includeNotIn = (string, exclude) => {\n  if (string === null || string === undefined) {\n    return '';\n  }\n  return string\n   .split('')\n   .filter(char => exclude.includes(char))\n   .join('');\n};\n\n/**\n * Returns a new string containing only characters in `string` which are\n * in `string` but not in `exclude`.\n *\n * Example:\n *\n * >>> includeNotIn('abc', 'z')\n * 'abc'\n * >>> includeNotIn('abc', 'e')\n * 'bc'\n * >>> includeNotIn('abc', 'a')\n * ''\n */\nconst includeNotIn = (string, exclude) => {\n  if (string === null || string === undefined) {\n    return '';\n  }\n  return string\n   .split('')\n   .filter(char => exclude.includes(char))\n   .join('');\n};\n\n/**\n * Returns a new string containing only characters in `string` which are\n * in `string` but not in `exclude`.\n *\n * Example:\n *\n * >>> includeNotIn('abc', 'a')\n * 'bc'\n * >>> includeNotIn('abc', 'z')\n * 'abc'\n * >>> includeNotIn('abc', 'e')\n * 'abc'\n */\nconst includeNotIn = (string, exclude) => {\n  if (string === null || string === undefined) {\n    return '';\n  }\n  return string\n   .split('')\n   .filter(char => exclude.includes(char))\n   .join('');\n};\n\n/**\n * Returns a new string containing only characters in `string` which are\n * in `string` but not in `exclude`.\n *\n * Example:\n *\n * >>> includeNotIn('abc', 'z')\n * 'abc'\n * >>> includeNotIn('abc', 'e')\n * 'bc'\n * >>> includeNotIn('abc', 'a')\n * ''\n */\nconst includeNotIn = (string, exclude) => {\n  if (string === null || string === undefined) {\n    return '';\n  }\n  return string\n   .split('')\n   .filter(char => exclude.includes(char))\n   .join('');\n};\n\n/**\n * Returns a new string containing only characters in `string` which are\n * in `string` but not in `exclude`.\n *\n * Example:\n *\n * >>> includeNotIn('abc', 'a')\n * 'bc'\n * >>> includeNotIn('abc', 'z')\n * 'abc'\n * >>> includeNotIn('abc', 'e')\n * 'abc'\n */\nconst includeNotIn = (string, exclude) => {\n  if (string === null || string === undefined) {\n    return '';\n  }\n  return string\n   .split('')\n   .filter(char => exclude.includes(char))\n   .join('');\n};\n\n/**\n * Returns a new string containing only characters in `string` which are\n * in `string` but not in `exclude`.\n *\n * Example:\n *\n * >>> includeNotIn('abc', 'z')\n * 'abc'\n * >>> includeNotIn('abc', 'e')\n * 'bc'\n * >>> includeNotIn('abc', 'a')\n * ''\n */\nconst includeNotIn = (string, exclude) => {\n  if (string === null || string === undefined) {\n    return '';\n  }\n  return string\n   .split('')\n   .filter(char => exclude.includes(char))\n   .join('');\n};\n\n/**\n * Returns a new string containing only characters in `string` which are\n * in `string` but not in `exclude`.\n *\n * Example:\n *\n * >>> includeNotIn('abc', 'a')\n * 'bc'\n * >>> includeNotIn('abc', 'z')\n * 'abc'\n * >>> includeNotIn('abc', 'e')\n * 'abc'\n */\nconst includeNotIn = (string, exclude) => {\n  if (string === null || string === undefined) {\n    return '';\n  }\n  return string\n   .split('')\n   .filter(char => exclude.includes(char))\n   .join('');\n};\n\n/**\n * Returns a new string containing only characters in `string` which are\n * in `string` but not in `exclude`.\n *\n * Example:\n *\n * >>> includeNotIn('abc', 'z')\n * 'abc'\n * >>> includeNotIn('abc', '", "passed": 1, "run_status": 0, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/24", "prompt": "/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "gc": "<|endoftext|>/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let divisor = 1;\n  while (n % divisor === 0) {\n    divisor += 1;\n  }\n  return divisor;\n};\n\n/**\n * Given a number n, return the largest number that divides n evenly, larger than n\n * >>> largestDivisor(15)\n * 15\n */\nconst smallestDivisor = (n) => {\n  let divisor = 1;\n  while (n % divisor === 0) {\n    divisor -= 1;\n  }\n  return divisor;\n};\n\n/**\n * Given a number n, return the largest number that divides n evenly, smaller than n\n * >>> smallestDivisor(15)\n * 1\n */\nconst largestDivisorOf = (n) => {\n  let divisor = 1;\n  while (n % divisor === 0) {\n    divisor += 1;\n  }\n  return divisor;\n};\n\n/**\n * Given a number n, return the smallest number that divides n evenly, larger than n\n * >>> smallestDivisorOf(1)\n * 1\n */\nconst smallestDivisorOf = (n) => {\n  let divisor = 1;\n  while (n % divisor === 0) {\n    divisor -= 1;\n  }\n  return divisor;\n};\n\n/**\n * Given a number n, return the smallest number that divides n evenly, smaller than n\n * >>> smallestDivisorOf(15)\n * 15\n */\nconst largestDivisorOf = (n) => {\n  let divisor = 1;\n  while (n % divisor === 0) {\n    divisor += 1;\n  }\n  return divisor;\n};\n\n/**\n * Given a number n, return the largest number that divides n evenly, larger than n\n * >>> largestDivisorOf(1)\n * 1\n */\nconst largestDivisorOf = (n) => {\n  let divisor = 1;\n  while (n % divisor === 0) {\n    divisor -= 1;\n  }\n  return divisor;\n};\n\n/**\n * Given a number n, return the smallest number that divides n evenly, smaller than n\n * >>> smallestDivisorOf(15)\n * 15\n */\nconst smallestDivisorOf = (n) => {\n  let divisor = 1;\n  while (n % divisor === 0) {\n    divisor += 1;\n  }\n  return divisor;\n};\n\n/**\n * Given a number n, return the largest number that divides n evenly, larger than n\n * >>> smallestDivisorOf(15)\n * 15\n */\nconst largestDivisorOf = (n) => {\n  let divisor = 1;\n  while (n % divisor === 0) {\n    divisor -= 1;\n  }\n  return divisor;\n};\n\n/**\n * Given a number n, return the smallest number that divides n evenly, smaller than n\n * >>> smallestDivisorOf(15)\n * 15\n */\nconst smallestDivisorOf = (n) => {\n  let divisor = 1;\n  while (n % divisor === 0) {\n    divisor += 1;\n  }\n  return divisor;\n};\n\n/**\n * Given a number n, return the largest number that divides n evenly, larger than n\n * >>> smallestDivisorOf(15)\n * 15\n */\nconst largestDivisorOf = (n) => {\n  let divisor = 1;\n  while (n % divisor === 0) {\n    divisor -= 1;\n  }\n  return divisor;\n};\n\n/**\n * Given a number n, return the smallest number that divides n evenly, smaller than n\n * >>> smallestDivisorOf(15)\n * 15\n */\nconst smallestDivisorOf = (n) => {\n  let divisor = 1;\n  while (n % divisor === 0) {\n    divisor += 1;\n  }\n  return divisor;\n};\n\n/**\n * Given a number n, return the largest number that divides n evenly, larger than n\n * >>> smallestDivisorOf(15)\n * 15\n */\nconst largestDivisorOf = (n) => {\n  let divisor = 1;\n  while (n % divisor === 0) {\n    divisor -= 1;\n  }\n  return divisor;\n};\n\n/**\n * Given a number n, return the smallest number that divides n evenly, smaller than n\n * >>> smallestDivisorOf(15)\n * 15\n */\nconst smallestDivisorOf = (n) => {\n  let divisor = 1;\n  while (n % divisor === 0) {\n    divisor += 1;\n  }\n  return divisor;\n};\n\n/**\n * Given a number n, return the largest number that divides n evenly, larger than n\n * >>> smallestDivisorOf(15)\n * 15\n */\nconst largestDivisorOf = (n) => {\n  let divisor = 1;\n  while (n % divisor === 0) {\n    divisor -= 1;\n  }\n  return divisor;\n};\n\n/**\n * Given a number n, return the smallest number that divides n evenly, smaller than n\n * >>> smallestDivisorOf(15)\n * 15\n */\nconst smallestDivisorOf = (n) => {\n  let divisor = 1;\n  while (n % divisor === 0) {\n    divisor += 1;\n  }\n  return divisor;\n};\n\n/**\n * Given a number n, return the largest number that divides n evenly, larger than n\n * >>> smallestDivisorOf(15)\n * 15\n */\nconst largestDivisorOf = (n) => {\n  let divisor = 1;\n  while (n % divisor === 0) {\n    divisor -= 1;\n  }\n  return divisor;\n};\n\n/**\n * Given a number n, return the smallest number that divides n evenly, smaller than n\n * >>> smallestDivisorOf(15)\n * 15\n */\nconst smallestDivisorOf = (n) => {\n  let divisor = 1;\n  while (n % divisor === 0) {\n    divisor += 1;\n  }\n  return divisor;\n};\n\n/**\n * Given a number n, return the largest number that divides n evenly, larger than n\n * >>> smallestDivisorOf(15)\n * 15\n */\nconst largestDivisorOf = (n) => {\n  let divisor = 1;\n  while (n % divisor === 0) {\n    divisor -= 1;\n  }\n  return divisor;\n};\n\n/**\n * Given a number n, return the smallest number that divides n evenly, smaller than n\n * >>> smallestDivisorOf(15)\n * 15\n */\nconst smallestDivisorOf = (n) => {\n  let divisor = 1;\n  while (n % divisor === 0) {\n    divisor += 1;\n  }\n  return divisor;\n};\n\n/**\n * Given a number n, return the largest number that divides n evenly, larger than n\n * >>> smallestDivisorOf(15)\n * 15\n */\nconst largestDivisorOf = (n) => {\n  let divisor = 1;\n  while (n % divisor === 0) {\n    divisor -= 1;\n  }\n  return divisor;\n};\n\n/**\n * Given a number n, return the smallest number that divides n evenly, smaller than n\n * >>> smallestDivisorOf(15)\n * 15\n */\nconst smallestDivisorOf = (n) => {\n  let divisor = 1;\n  while (n % divisor === 0) {\n    divisor += 1;\n  }\n  return divisor;\n};\n\n/**\n * Given a number n, return the largest number that divides n evenly, larger than n\n * >>> smallestDivisorOf(15)\n * 15\n */\nconst largestDivisorOf = (n) => {\n  let divisor = 1;\n  while (n % divisor === 0) {\n    divisor -= 1;\n  }\n  return divisor;\n};\n\n/**\n * Given a number n, return the smallest number that divides n evenly, smaller than n\n * >>> smallestDivisorOf(15)\n * 15\n */\nconst smallestDivisorOf = (n) => {\n  let divisor = 1;\n  while (n % divisor === 0) {\n    divisor += 1;\n  }\n  return divisor;\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "gc": "<|endoftext|>/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  const factors = [];\n  let factor = 1;\n  let i = 2;\n  while (n % factor!== 0) {\n    factor *= i;\n    i++;\n  }\n  while (n % factor === 0) {\n    factors.push(factor);\n    factor *= i;\n    i++;\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize2 = (n) => {\n  const factors = [];\n  let factor = 1;\n  let i = 2;\n  while (n % factor!== 0) {\n    factor *= i;\n    i++;\n  }\n  while (n % factor === 0) {\n    factors.push(factor);\n    factor *= i;\n    i++;\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize3 = (n) => {\n  const factors = [];\n  let factor = 1;\n  let i = 2;\n  while (n % factor!== 0) {\n    factor *= i;\n    i++;\n  }\n  while (n % factor === 0) {\n    factors.push(factor);\n    factor *= i;\n    i++;\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize4 = (n) => {\n  const factors = [];\n  let factor = 1;\n  let i = 2;\n  while (n % factor!== 0) {\n    factor *= i;\n    i++;\n  }\n  while (n % factor === 0) {\n    factors.push(factor);\n    factor *= i;\n    i++;\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize5 = (n) => {\n  const factors = [];\n  let factor = 1;\n  let i = 2;\n  while (n % factor!== 0) {\n    factor *= i;\n    i++;\n  }\n  while (n % factor === 0) {\n    factors.push(factor);\n    factor *= i;\n    i++;\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize6 = (n) => {\n  const factors = [];\n  let factor = 1;\n  let i = 2;\n  while (n % factor!== 0) {\n    factor *= i;\n    i++;\n  }\n  while (n % factor === 0) {\n    factors.push(factor);\n    factor *= i;\n    i++;\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize7 = (n) => {\n  const factors = [];\n  let factor = 1;\n  let i = 2;\n  while (n % factor!== 0) {\n    factor *= i;\n    i++;\n  }\n  while (n % factor === 0) {\n    factors.push(factor);\n    factor *= i;\n    i++;\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize8 = (n) => {\n  const factors = [];\n  let factor = 1;\n  let i = 2;\n  while (n % factor!== 0) {\n    factor *= i;\n    i++;\n  }\n  while (n % factor === 0) {\n    factors.push(factor);\n    factor *= i;\n    i++;\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize9 = (n) => {\n  const factors = [];\n  let factor = 1;\n  let i = 2;\n  while (n % factor!== 0) {\n    factor *= i;\n    i++;\n  }\n  while (n % factor === 0) {\n    factors.push(factor);\n    factor *= i;\n    i++;\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize10 = (n) => {\n  const factors = [];\n  let factor = 1;\n  let i = 2;\n  while (n % factor!== 0) {\n    factor *= i;\n    i++;\n  }\n  while (n % factor === 0) {\n    factors.push(factor);\n    factor *= i;\n    i++;\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize11 = (n) => {\n  const factors = [];\n  let factor = 1;\n  let i = 2;\n  while (n % factor!== 0) {\n    factor *= ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "gc": "<|endoftext|>/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const seen = new Set();\n  return numbers.reduce((acc, val) => {\n    if (seen.has(val)) {\n      seen.delete(val);\n    } else {\n      seen.add(val);\n      acc.push(val);\n    }\n    return acc;\n  }, []);\n};\n\n/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicatesSet = (numbers) => {\n  const seen = new Set();\n  return numbers.reduce((acc, val) => {\n    if (seen.has(val)) {\n      seen.delete(val);\n    } else {\n      seen.add(val);\n      acc.push(val);\n    }\n    return acc;\n  }, []);\n};\n\n/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicatesSetWithDuplicates = (numbers) => {\n  const seen = new Set();\n  return numbers.reduce((acc, val) => {\n    if (seen.has(val)) {\n      seen.delete(val);\n    } else {\n      seen.add(val);\n      acc.push(val);\n    }\n    return acc;\n  }, []);\n};\n\n/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicatesSetWithDuplicatesSet = (numbers) => {\n  const seen = new Set();\n  return numbers.reduce((acc, val) => {\n    if (seen.has(val)) {\n      seen.delete(val);\n    } else {\n      seen.add(val);\n      acc.push(val);\n    }\n    return acc;\n  }, []);\n};\n\n/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicatesSetWithDuplicatesSetWithDuplicates = (numbers) => {\n  const seen = new Set();\n  return numbers.reduce((acc, val) => {\n    if (seen.has(val)) {\n      seen.delete(val);\n    } else {\n      seen.add(val);\n      acc.push(val);\n    }\n    return acc;\n  }, []);\n};\n\n/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicatesSetWithDuplicatesSetWithDuplicatesSet = (numbers) => {\n  const seen = new Set();\n  return numbers.reduce((acc, val) => {\n    if (seen.has(val)) {\n      seen.delete(val);\n    } else {\n      seen.add(val);\n      acc.push(val);\n    }\n    return acc;\n  }, []);\n};\n\n/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicatesSetWithDuplicatesSetWithDuplicatesSetWithDuplicates = (numbers) => {\n  const seen = new Set();\n  return numbers.reduce((acc, val) => {\n    if (seen.has(val)) {\n      seen.delete(val);\n    } else {\n      seen.add(val);\n      acc.push(val);\n    }\n    return acc;\n  }, []);\n};\n\n/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicatesSetWithDuplicatesSetWithDuplicatesSetWithDuplicatesSet = (numbers) => {\n  const seen = new Set();\n  return numbers.reduce((acc, val) => {\n    if (seen.has(val)) {\n      seen.delete(val);\n    } else {\n      seen.add(val);\n      acc.push(val);\n    }\n    return acc;\n  }, []);\n};\n\n/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicatesSetWithDuplicatesSetWithDuplicatesSetWithDuplicatesSetWithDuplicates = (numbers) => {\n  const seen = new Set();\n  return numbers.reduce((acc, val) => {\n    if (seen.has(val)) {\n      seen.delete(val);\n    } else {\n      seen.add(val);\n      acc.push(val);\n    }\n    return acc;\n  }, []);\n};\n\n/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicatesSetWithDuplicatesSetWithDuplicatesSetWithDuplicatesSetWithDuplicatesSet = (numbers) => {\n  const seen = new Set();\n  return numbers.reduce((acc, val) => {\n    if (seen.has(val)) {\n      seen.delete(val);\n    } else {\n      seen.add(val);\n      acc.push(val);\n    }\n    return acc;\n  }, []);\n};\n\n/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicatesSetWithDuplicatesSetWithDuplicatesSetWithDuplicatesSetWithDuplicatesSetWithDuplicates = (numbers) => {\n  const seen = new Set();\n  return numbers.reduce((acc, val) => {\n    if (seen.has(val)) {\n      seen.delete(val);\n    } else {\n      seen.add(val);\n      acc.push(val);\n    }\n    return acc;\n  }, []);\n};\n\n/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicatesSetWithDuplicatesSetWithDuplicatesSetWithDuplicatesSetWithDuplicatesSetWithDuplicatesSetWithDuplicates = (numbers) => {\n  const seen = new Set();\n  return numbers.reduce((acc, val) => {\n    if (seen.has(val)) {\n      seen.delete(val);\n    } else {\n      seen.add(val);\n      acc.push(val);\n    }\n    return acc;\n  }, []);\n};\n\n/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicatesSetWithDuplicatesSetWithDuplicatesSetWithDuplicatesSetWithDuplicatesSetWithDuplicatesSetWithDuplicatesSetWithDuplicates = (numbers) => {\n  const seen = new Set();\n  return numbers.reduce((acc, val) => {\n    if (seen.has(val)) {\n      seen.delete(val);\n    } else {\n      seen.add(val);\n      acc.push(val);\n    }\n    return acc;\n  }, []);\n};\n\n/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicatesSetWithDuplicatesSetWithDuplicatesSetWithDuplicatesSetWithDuplicatesSetWithDuplicatesSetWithDuplicatesSetWithDuplicatesSetWithDuplicates = (numbers) => {\n  const seen = new Set();\n  return ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/27", "prompt": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "gc": "<|endoftext|>/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string.toLowerCase().split('').reduce((result, char) => {\n    return result + char.toUpperCase();\n  }, '');\n};\n\n/* Given a string, return the first character of the string that is a vowel.\n  >>> isVowel('Hello')\n  'H'\n  */\nconst isVowel = (string) => {\n  return string.split('').reduce((result, char) => {\n    return result + char.match(/[aeiou]/i);\n  }, '');\n};\n\n/* Given a string, return the first character of the string that is a consonant.\n  >>> isConsonant('Hello')\n  'H'\n  */\nconst isConsonant = (string) => {\n  return string.split('').reduce((result, char) => {\n    return result + char.match(/[bcdfghjklmnpqrstvwxyz]/i);\n  }, '');\n};\n\n/* Given a string, return the first character of the string that is a vowel or consonant.\n  >>> isVowelConsonant('Hello')\n  'H'\n  */\nconst isVowelConsonant = (string) => {\n  return isVowel(string) || isConsonant(string);\n};\n\n/* Given a string, return the first character of the string that is a vowel or consonant and is\n  a consonant.\n  >>> isVowelConsonant('Hello')\n  'H'\n  */\nconst isVowelConsonantAndConsonant = (string) => {\n  return isVowelConsonant(string) && isConsonant(string);\n};\n\n/* Given a string, return the first character of the string that is a vowel or consonant and is\n  a vowel.\n  >>> isVowelConsonant('Hello')\n  'H'\n  */\nconst isVowelConsonantAndVowel = (string) => {\n  return isVowelConsonant(string) && isVowel(string);\n};\n\n/* Given a string, return the first character of the string that is a vowel or consonant and is\n  a vowel.\n  >>> isVowelConsonant('Hello')\n  'H'\n  */\nconst isVowelConsonantAndVowelAndConsonant = (string) => {\n  return isVowelConsonant(string) && isVowel(string) && isConsonant(string);\n};\n\n/* Given a string, return the first character of the string that is a vowel or consonant and is\n  a vowel.\n  >>> isVowelConsonant('Hello')\n  'H'\n  */\nconst isVowelConsonantAndVowelAndVowel = (string) => {\n  return isVowelConsonant(string) && isVowel(string) && isVowel(string);\n};\n\n/* Given a string, return the first character of the string that is a vowel or consonant and is\n  a vowel.\n  >>> isVowelConsonant('Hello')\n  'H'\n  */\nconst isVowelConsonantAndVowelAndVowelAndConsonant = (string) => {\n  return isVowelConsonant(string) && isVowel(string) && isVowel(string) && isConsonant(string);\n};\n\n/* Given a string, return the first character of the string that is a vowel or consonant and is\n  a vowel.\n  >>> isVowelConsonant('Hello')\n  'H'\n  */\nconst isVowelConsonantAndVowelAndVowelAndVowel = (string) => {\n  return isVowelConsonant(string) && isVowel(string) && isVowel(string) && isVowel(string);\n};\n\n/* Given a string, return the first character of the string that is a vowel or consonant and is\n  a vowel.\n  >>> isVowelConsonant('Hello')\n  'H'\n  */\nconst isVowelConsonantAndVowelAndVowelAndVowelAndConsonant = (string) => {\n  return isVowelConsonant(string) && isVowel(string) && isVowel(string) && isVowel(string) && isConsonant(string);\n};\n\n/* Given a string, return the first character of the string that is a vowel or consonant and is\n  a vowel.\n  >>> isVowelConsonant('Hello')\n  'H'\n  */\nconst isVowelConsonantAndVowelAndVowelAndVowelAndVowel = (string) => {\n  return isVowelConsonant(string) && isVowel(string) && isVowel(string) && isVowel(string) && isVowel(string);\n};\n\n/* Given a string, return the first character of the string that is a vowel or consonant and is\n  a vowel.\n  >>> isVowelConsonant('Hello')\n  'H'\n  */\nconst isVowelConsonantAndVowelAndVowelAndVowelAndVowelAndConsonant = (string) => {\n  return isVowelConsonant(string) && isVowel(string) && isVowel(string) && isVowel(string) && isVowel(string) && isConsonant(string);\n};\n\n/* Given a string, return the first character of the string that is a vowel or consonant and is\n  a vowel.\n  >>> isVowelConsonant('Hello')\n  'H'\n  */\nconst isVowelConsonantAndVowelAndVowelAndVowelAndVowelAndVowel = (string) => {\n  return isVowelConsonant(string) && isVowel(string) && isVowel(string) && isVowel(string) && isVowel(string) && isVowel(string);\n};\n\n/* Given a string, return the first character of the string that is a vowel or consonant and is\n  a vowel.\n  >>> isVowelConsonant('Hello')\n  'H'\n  */\nconst isVowelConsonantAndVowelAndVowelAndVowelAndVowelAndVowelAndVowel = (string) => {\n  return isVowelConsonant(string) && isVowel(string) && isVowel(string) && isVowel(string) && isVowel(string) && isVowel(string) && isVowel(string);\n};\n\n/* Given a string, return the first character of the string that is a vowel or consonant and is\n  a vowel.\n  >>> isVowelConsonant('Hello')\n  'H'\n  */\nconst isVowelConsonantAndVowelAndVowelAndVowelAndVowelAndVowelAndVowel = (string) => {\n  return isVowelConsonant(string) && isVowel(string) && isVowel(string) && isVowel(string) && isVowel(string) && isVowel(string) && isVowel(string);\n};\n\n/* Given a string, return the first character of the string that is a vowel or consonant and is\n  a ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single string\n  >>> conactenate([])\n  ''\n  >>> conactenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst conactenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "conactenate", "gc": "<|endoftext|>/* Concatenate list of strings into a single string\n  >>> conactenate([])\n  ''\n  >>> conactenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst conactenate = (strings) => {\n  return strings.reduce((acc, curr) => acc + (curr? curr : ''))\n}\n\n/* Convert string to camel case\n  >>> camelize('hello')\n  'hello'\n  >>> camelize('helloWorld')\n  'helloWorld'\n  */\nconst camelize = (string) => {\n  return string.replace(/(?:^\\w|[A-Z]|\\b\\w)/g, (_, c) => c? c.toUpperCase() : '');\n}\n\n/* Convert string to dash case\n  >>> dasherize('hello')\n  'hello'\n  >>> dasherize('helloWorld')\n  'hello-world'\n  */\nconst dasherize = (string) => {\n  return string.replace(/([a-z])([A-Z])/g, '$1-$2')\n}\n\n/* Convert string to underscore case\n  >>> underscore('hello')\n  'hello'\n  >>> underscore('helloWorld')\n  'hello_world'\n  */\nconst underscore = (string) => {\n  return string.replace(/_/g, '')\n}\n\n/* Convert string to pascal case\n  >>> pascalize('hello')\n  'Hello'\n  >>> pascalize('helloWorld')\n  'HelloWorld'\n  */\nconst pascalize = (string) => {\n  return string.replace(/([a-z])([A-Z])/g, (_, c) => c? c.toLowerCase() : '');\n}\n\n/* Convert string to snake case\n  >>> snakeize('hello')\n  'hello'\n  >>> snakeize('helloWorld')\n  'hello_world'\n  */\nconst snakeize = (string) => {\n  return string.replace(/([A-Z])/g, '$1')\n}\n\n/* Convert string to start case\n  >>> startCase('hello')\n  'Hello'\n  >>> startCase('helloWorld')\n  'HelloWorld'\n  */\nconst startCase = (string) => {\n  return string[0].toUpperCase() + string.slice(1)\n}\n\n/* Convert string to upper case\n  >>> upperCase('hello')\n  'HELLO'\n  >>> upperCase('helloWorld')\n  'HELLOWORLD'\n  */\nconst upperCase = (string) => {\n  return string.toUpperCase()\n}\n\n/* Convert string to lower case\n  >>> lowerCase('hello')\n  'hello'\n  >>> lowerCase('helloWorld')\n  'helloworld'\n  */\nconst lowerCase = (string) => {\n  return string.toLowerCase()\n}\n\n/* Convert string to title case\n  >>> titleCase('hello')\n  'Hello World'\n  >>> titleCase('helloWorld')\n  'Hello World!'\n  */\nconst titleCase = (string) => {\n  return string\n   .toLowerCase()\n   .split(/\\s+/)\n   .map(word => word.charAt(0).toUpperCase() + word.slice(1))\n   .join(' ')\n}\n\n/* Convert string to title case with underscore\n  >>> titleCaseWithUnderscore('hello')\n  'Hello World'\n  >>> titleCaseWithUnderscore('helloWorld')\n  'Hello_World'\n  */\nconst titleCaseWithUnderscore = (string) => {\n  return string\n   .toLowerCase()\n   .split(/\\s+/)\n   .map(word => word.charAt(0).toUpperCase() + word.slice(1))\n   .join('_')\n}\n\n/* Convert string to upper case with underscore\n  >>> titleCaseWithUnderscore('hello')\n  'Hello World'\n  >>> titleCaseWithUnderscore('helloWorld')\n  'Hello_World'\n  */\nconst titleCaseWithUnderscore = (string) => {\n  return string\n   .toLowerCase()\n   .split(/\\s+/)\n   .map(word => word.charAt(0).toUpperCase() + word.slice(1))\n   .join('_')\n}\n\n/* Convert string to lower case with underscore\n  >>> titleCaseWithUnderscore('hello')\n  'Hello World'\n  >>> titleCaseWithUnderscore('helloWorld')\n  'Hello_World'\n  */\nconst titleCaseWithUnderscore = (string) => {\n  return string\n   .toLowerCase()\n   .split(/\\s+/)\n   .map(word => word.charAt(0).toUpperCase() + word.slice(1))\n   .join('_')\n}\n\n/* Convert string to lower case with underscore\n  >>> titleCaseWithUnderscore('hello')\n  'Hello World'\n  >>> titleCaseWithUnderscore('helloWorld')\n  'Hello_World'\n  */\nconst titleCaseWithUnderscore = (string) => {\n  return string\n   .toLowerCase()\n   .split(/\\s+/)\n   .map(word => word.charAt(0).toUpperCase() + word.slice(1))\n   .join('_')\n}\n\n/* Convert string to lower case with underscore\n  >>> titleCaseWithUnderscore('hello')\n  'Hello World'\n  >>> titleCaseWithUnderscore('helloWorld')\n  'Hello_World'\n  */\nconst titleCaseWithUnderscore = (string) => {\n  return string\n   .toLowerCase()\n   .split(/\\s+/)\n   .map(word => word.charAt(0).toUpperCase() + word.slice(1))\n   .join('_')\n}\n\n/* Convert string to lower case with underscore\n  >>> titleCaseWithUnderscore('hello')\n  'Hello World'\n  >>> titleCaseWithUnderscore('helloWorld')\n  'Hello_World'\n  */\nconst titleCaseWithUnderscore = (string) => {\n  return string\n   .toLowerCase()\n   .split(/\\s+/)\n   .map(word => word.charAt(0).toUpperCase() + word.slice(1))\n   .join('_')\n}\n\n/* Convert string to lower case with underscore\n  >>> titleCaseWithUnderscore('hello')\n  'Hello World'\n  >>> titleCaseWithUnderscore('helloWorld')\n  'Hello_World'\n  */\nconst titleCaseWithUnderscore = (string) => {\n  return string\n   .toLowerCase()\n   .split(/\\s+/)\n   .map(word => word.charAt(0).toUpperCase() + word.slice(1))\n   .join('_')\n}\n\n/* Convert string to lower case with underscore\n  >>> titleCaseWithUnderscore('hello')\n  'Hello World'\n  >>> titleCaseWithUnderscore('helloWorld')\n  'Hello_World'\n  */\nconst titleCaseWithUnderscore = (string) => {\n  return string\n   .toLowerCase()\n   .split(/\\s+/)\n   .map(word => word.charAt(0).toUpperCase() + word.slice(1))\n   .join('_')\n}\n\n/* Convert string to lower case with underscore\n  >>> titleCaseWithUnderscore('hello')\n  'Hello World'\n  >>> titleCaseWithUnderscore('helloWorld')\n  'Hello_World'\n  */\nconst titleCaseWithUnderscore = (string) => {\n  return string\n   .toLowerCase()\n   .split(/\\s+/)\n   .map(word => word.charAt(0).toUpperCase() + word.slice(1))\n   .join('_')\n}\n\n/* Convert string to lower case with underscore\n  >>> titleCaseWithUnderscore('hello')\n  'Hello World'\n  >>> titleCaseWithUnderscore('helloWorld')\n  'Hello_World'\n  */\nconst titleCaseWithUnderscore = (string) => {\n  return string\n   .toLowerCase()\n   .split(/\\s+/)\n   .map(word => word.charAt(0).toUpperCase() + word.slice(1))\n   .join('_')\n}\n\n/* Convert string to lower case with underscore\n  >>> titleCaseWithUnderscore('hello')\n  'Hello World'\n  >>> titleCaseWithUnderscore('helloWorld')\n  'Hello_World'\n  */\nconst titleCaseWithUnderscore = (string) => {\n  return string\n   .toLowerCase()\n   .split(/\\s+", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> iflterByrPefix([], 'a')\n  []\n  >>> iflterByrPefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst iflterByrPefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "iflterByrPefix", "gc": "<|endoftext|>/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> iflterByrPefix([], 'a')\n  []\n  >>> iflterByrPefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst iflterByrPefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix))\n}\n\n/**\n * Filter an input list of strings only for ones that end with a given suffix.\n  >>> iflterByrSuffix(['abc', 'bcd', 'cde', 'array'], 'c')\n  ['array', 'cde']\n  >>> iflterByrSuffix(['abc', 'bcd', 'cde', 'array'], 'd')\n  ['array', 'cde']\n  >>> iflterByrSuffix(['abc', 'bcd', 'cde', 'array'], 'e')\n  ['array', 'cde']\n  >>> iflterByrSuffix(['abc', 'bcd', 'cde', 'array'], 'f')\n  ['array', 'cde']\n  >>> iflterByrSuffix(['abc', 'bcd', 'cde', 'array'], 'g')\n  ['array', 'cde']\n  >>> iflterByrSuffix(['abc', 'bcd', 'cde', 'array'], 'h')\n  ['array', 'cde']\n  >>> iflterByrSuffix(['abc', 'bcd', 'cde', 'array'], 'i')\n  ['array', 'cde']\n  >>> iflterByrSuffix(['abc', 'bcd', 'cde', 'array'], 'j')\n  ['array', 'cde']\n  >>> iflterByrSuffix(['abc', 'bcd', 'cde', 'array'], 'k')\n  ['array', 'cde']\n  >>> iflterByrSuffix(['abc', 'bcd', 'cde', 'array'], 'l')\n  ['array', 'cde']\n  >>> iflterByrSuffix(['abc', 'bcd', 'cde', 'array'],'m')\n  ['array', 'cde']\n  >>> iflterByrSuffix(['abc', 'bcd', 'cde', 'array'], 'n')\n  ['array', 'cde']\n  >>> iflterByrSuffix(['abc', 'bcd', 'cde', 'array'], 'o')\n  ['array', 'cde']\n  >>> iflterByrSuffix(['abc', 'bcd', 'cde', 'array'], 'p')\n  ['array', 'cde']\n  >>> iflterByrSuffix(['abc', 'bcd', 'cde', 'array'], 'q')\n  ['array', 'cde']\n  >>> iflterByrSuffix(['abc', 'bcd', 'cde', 'array'], 'r')\n  ['array', 'cde']\n  >>> iflterByrSuffix(['abc', 'bcd', 'cde', 'array'],'s')\n  ['array', 'cde']\n  >>> iflterByrSuffix(['abc', 'bcd', 'cde', 'array'], 't')\n  ['array', 'cde']\n  >>> iflterByrSuffix(['abc', 'bcd', 'cde', 'array'], 'u')\n  ['array', 'cde']\n  >>> iflterByrSuffix(['abc', 'bcd', 'cde', 'array'], 'v')\n  ['array', 'cde']\n  >>> iflterByrSuffix(['abc', 'bcd', 'cde', 'array'], 'w')\n  ['array', 'cde']\n  >>> iflterByrSuffix(['abc', 'bcd', 'cde', 'array'], 'x')\n  ['array', 'cde']\n  >>> iflterByrSuffix(['abc', 'bcd', 'cde', 'array'], 'y')\n  ['array', 'cde']\n  >>> iflterByrSuffix(['abc', 'bcd', 'cde', 'array'], 'z')\n  ['array', 'cde']\n  >>> iflterByrSuffix(['abc', 'bcd', 'cde', 'array'], 'A')\n  ['array', 'cde']\n  >>> iflterByrSuffix(['abc', 'bcd', 'cde', 'array'], 'B')\n  ['array', 'cde']\n  >>> iflterByrSuffix(['abc', 'bcd', 'cde', 'array'], 'C')\n  ['array', 'cde']\n  >>> iflterByrSuffix(['abc', 'bcd', 'cde', 'array'], 'D')\n  ['array', 'cde']\n  >>> iflterByrSuffix(['abc', 'bcd', 'cde', 'array'], 'E')\n  ['array', 'cde']\n  >>> iflterByrSuffix(['abc', 'bcd', 'cde', 'array'], 'F')\n  ['array', 'cde']\n  >>> iflterByrSuffix(['abc', 'bcd', 'cde', 'array'], 'G')\n  ['array', 'cde']\n  >>> iflterByrSuffix(['abc', 'bcd', 'cde', 'array'], 'H')\n  ['array', 'cde']\n  >>> iflterByrSuffix(['abc', 'bcd', 'cde', 'array'], 'I')\n  ['array', 'cde']\n  >>> iflterByrSuffix(['abc', 'bcd', 'cde', 'array'], 'J')\n  ['array', 'cde']\n  >>> iflterByrSuffix(['abc', 'bcd', 'cde', 'array'], 'K')\n  ['array', 'cde']\n  >>> iflterByrSuffix(['abc', 'bcd', 'cde', 'array'], 'L')\n  ['array', 'cde']\n  >>> iflterByrSuffix(['abc', 'bcd', 'cde', 'array'], 'M')\n  ['array', 'cde']\n  >>> iflterByrSuffix(['abc', 'bcd', 'cde', 'array'], 'N')\n  ['array', 'cde']\n  >>> iflterByrSuffix(['abc', 'bcd', 'cde', 'array'], 'O')\n  ['array', 'cde']\n  >>> iflterByrSuffix(['abc', 'bcd', 'cde', 'array'], 'P')\n  ['array', 'cde']\n  >>> iflterByrSuffix(['abc', 'bcd', 'cde', 'array'], 'Q')\n  ['array', 'cde']\n  >>> iflterByrSuffix(['abc', 'bcd', 'cde', 'array'], 'R')\n  ['array', 'cde']\n  >>> iflterByrSuffix(['abc', 'bcd', 'cde', 'array'], 'S')\n  ['array', 'cde']\n  >>> iflterByrSuffix(['abc', 'bcd', 'cde', 'array'], 'T')\n  ['array', 'cde']\n  >>> iflterByrSuffix(['abc', 'bcd', 'cde', 'array'], 'U')\n  ['array', 'cde']\n  >>> iflterByrSuffix(['abc', 'bcd', 'cde', 'array'], 'V')\n  ['array', 'cde']\n  >>> iflterByrSuffix(['abc', 'bcd', 'cde', 'array'], 'W')\n  ['array', 'cde']\n  >>> iflterByrSuffix(['abc', 'bcd', 'cde', 'array'], 'X')\n  ['array', 'cde']\n  >>> iflterByrSuffix(['abc', 'bcd', 'cde', 'array'], 'Y')\n  ['array', 'cde']\n  >>> iflterByrSuffix(['abc', 'bcd', 'cde', 'array'], 'Z')\n  ['array', 'cde']\n  >>> iflterByrSuffix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  >>> iflterByrSuffix(['abc', 'bcd', 'cde', 'array'], 'b')\n  ['array', 'cde']\n  >>> iflterByrSuffix(['abc', 'bcd', 'cde', 'array'], 'c')\n  ['array', 'cde']\n  >>> iflterByrSuffix(['abc', 'b", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/3", "prompt": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZeor([1, 2, 3])\n  false\n  >>> belowZeor([1, 2, -4, 5])\n  true\n  */\nconst belowZeor = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZeor", "gc": "<|endoftext|>/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZeor([1, 2, 3])\n  false\n  >>> belowZeor([1, 2, -4, 5])\n  true\n  */\nconst belowZeor = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n  }\n  return balance < 0;\n};\n\nmodule.exports = belowZeor;\n\n},{}],3:[function(require,module,exports){\nconst { aboveZero } = require('./belowZeor');\n\n/**\n * You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account falls above zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> aboveZero([1, 2, 3])\n  false\n  >>> aboveZero([1, 2, -4, 5])\n  true\n  */\nconst aboveZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance -= operations[i];\n  }\n  return balance > 0;\n};\n\nmodule.exports = aboveZero;\n\n},{\"./belowZeor\":2}],4:[function(require,module,exports){\nconst { belowZero } = require('./aboveZero');\n\n/**\n * You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account falls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n  }\n  return balance > 0;\n};\n\nmodule.exports = belowZero;\n\n},{\"./aboveZero\":3}],5:[function(require,module,exports){\nconst { aboveZero } = require('./aboveZero');\n\n/**\n * You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account falls above zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> aboveZero([-5, -4, -3, 2, 1])\n  false\n  >>> aboveZero([-5, -4, -3, 2, -1])\n  true\n  */\nconst aboveZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance -= operations[i];\n  }\n  return balance < 0;\n};\n\nmodule.exports = aboveZero;\n\n},{\"./aboveZero\":3}],6:[function(require,module,exports){\nconst { aboveZero } = require('./aboveZero');\n\n/**\n * You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account falls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZero([-5, -4, -3, 2, 1])\n  false\n  >>> belowZero([-5, -4, -3, 2, -1])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n  }\n  return balance > 0;\n};\n\nmodule.exports = belowZero;\n\n},{\"./aboveZero\":3}],7:[function(require,module,exports){\nconst { aboveZero } = require('./aboveZero');\n\n/**\n * You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account falls above zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> aboveZero([-5, -4, -3, 2, 1])\n  false\n  >>> aboveZero([-5, -4, -3, 2, -1])\n  true\n  */\nconst aboveZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n  }\n  return balance < 0;\n};\n\nmodule.exports = aboveZero;\n\n},{\"./aboveZero\":3}],8:[function(require,module,exports){\nconst { aboveZero } = require('./aboveZero');\n\n/**\n * You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account falls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZero([-5, -4, -3, 2, 1])\n  false\n  >>> belowZero([-5, -4, -3, 2, -1])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance -= operations[i];\n  }\n  return balance < 0;\n};\n\nmodule.exports = belowZero;\n\n},{\"./aboveZero\":3}],9:[function(require,module,exports){\nconst { aboveZero } = require('./aboveZero');\n\n/**\n * You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account falls above zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> aboveZero([-5, -4, -3, 2, 1])\n  false\n  >>> aboveZero([-5, -4, -3, 2, -1])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n  }\n  return balance > 0;\n};\n\nmodule.exports = belowZero;\n\n},{\"./aboveZero\":3}],10:[function(require,module,exports){\nconst { aboveZero } = require('./aboveZero');\n\n/**\n * You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account falls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZero([-5, -4, -3, 2, 1])\n  false\n  >>> belowZero([-5, -4, -3, 2, -1])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance -= operations[i];\n  }\n  return balance < 0;\n};\n\nmodule.exports = belowZero;\n\n},{\"./aboveZero\":3}],11:[function(require,module,exports){\nconst { aboveZero } = require('./aboveZero');\n\n/**\n * You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account falls above zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> aboveZero([-5, -4, -3, 2, 1])\n  false\n  >>> aboveZero([-5, -4, -3, 2, -1])\n  true\n  */\nconst aboveZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n  }\n  return balance < 0;\n};\n\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "gc": "<|endoftext|>/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  return l.filter(n => n > 0).map(n => +n)\n}\n\n/*Return only negative numbers in the list.\n  >>> getNegative([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> getNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst getNegative = (l) => {\n  return l.filter(n => n < 0).map(n => -n)\n}\n\n/*Return only numbers in the list that are divisible by 3.\n  >>> getDivisible([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> getDivisible([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst getDivisible = (l) => {\n  return l.filter(n => n % 3 === 0).map(n => +n)\n}\n\n/*Return only numbers in the list that are divisible by 3.\n  >>> getDivisible([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> getDivisible([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst getDivisibleBy3 = (l) => {\n  return l.filter(n => n % 3 === 1).map(n => +n)\n}\n\n/*Return only numbers in the list that are divisible by 3.\n  >>> getDivisibleBy3([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> getDivisibleBy3([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst getDivisibleBy3And4 = (l) => {\n  return l.filter(n => n % 3 === 1 && n % 4 === 0).map(n => +n)\n}\n\n/*Return only numbers in the list that are divisible by 3.\n  >>> getDivisibleBy3And4([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> getDivisibleBy3And4([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst getDivisibleBy3And4And5 = (l) => {\n  return l.filter(n => n % 3 === 1 && n % 4 === 0 && n % 5 === 0).map(n => +n)\n}\n\n/*Return only numbers in the list that are divisible by 3.\n  >>> getDivisibleBy3And4And5([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> getDivisibleBy3And4And5([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst getDivisibleBy3And4And5And6 = (l) => {\n  return l.filter(n => n % 3 === 1 && n % 4 === 0 && n % 5 === 0 && n % 6 === 0).map(n => +n)\n}\n\n/*Return only numbers in the list that are divisible by 3.\n  >>> getDivisibleBy3And4And5And6([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> getDivisibleBy3And4And5And6([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst getDivisibleBy3And4And5And6And7 = (l) => {\n  return l.filter(n => n % 3 === 1 && n % 4 === 0 && n % 5 === 0 && n % 6 === 0 && n % 7 === 0).map(n => +n)\n}\n\n/*Return only numbers in the list that are divisible by 3.\n  >>> getDivisibleBy3And4And5And6And7([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> getDivisibleBy3And4And5And6And7([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst getDivisibleBy3And4And5And6And7And8 = (l) => {\n  return l.filter(n => n % 3 === 1 && n % 4 === 0 && n % 5 === 0 && n % 6 === 0 && n % 7 === 0 && n % 8 === 0).map(n => +n)\n}\n\n/*Return only numbers in the list that are divisible by 3.\n  >>> getDivisibleBy3And4And5And6And7And8([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> getDivisibleBy3And4And5And6And7And8([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst getDivisibleBy3And4And5And6And7And8And9 = (l) => {\n  return l.filter(n => n % 3 === 1 && n % 4 === 0 && n % 5 === 0 && n % 6 === 0 && n % 7 === 0 && n % 8 === 0 && n % 9 === 0).map(n => +n)\n}\n\n/*Return only numbers in the list that are divisible by 3.\n  >>> getDivisibleBy3And4And5And6And7And8And9([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> getDivisibleBy3And4And5And6And7And8And9([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst getDivisibleBy3And4And5And6And7And8And9And10 = (l) => {\n  return l.filter(n => n % 3 === 1 && n % 4 === 0 && n % 5 === 0 && n % 6 === 0 && n % 7 === 0 && n % 8 === 0 && n % 9 === 0 && n % 10 === 0).map(n => +n)\n}\n\n/*Return only numbers in the list that are divisible by 3.\n  >>> getDivisibleBy3And4And5And6And7And8And9And10([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> getDivisibleBy3And4And5And6And7And8And9And10([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst getDivisibleBy3And4And5And6And7And8And9And10And11 = (l) => {\n  return l.filter(n => n % 3 === 1 && n % 4 === 0 && n % 5 === 0 && n % 6 === 0 && n % 7 === 0 && n % 8 === 0 && n % 9 === 0 && n % 10 === 0 && n % 11 === 0).map(n => +n)\n}\n\n/*Return only numbers in the list that are divisible by 3.\n  >>> getDivisibleBy3And4And5And6And7And8And9And10And11([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> getDivisibleBy3And4And5And6And7And8And9And10And11([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst getDivisibleBy3And4And5And6And7And8And9And10And11And12 = (l) => {\n  return l.filter(n => n % 3 === 1 && n % 4 === 0 && n % 5 === 0 && n % 6", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a given number is prime, and false otherwise.\n  >>> siPrime(6)\n  false\n  >>> siPrime(101)\n  true\n  >>> siPrime(11)\n  true\n  >>> siPrime(13441)\n  true\n  >>> siPrime(61)\n  true\n  >>> siPrime(4)\n  false\n  >>> siPrime(1)\n  false\n  */\nconst siPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "siPrime", "gc": "<|endoftext|>/*Return true if a given number is prime, and false otherwise.\n  >>> siPrime(6)\n  false\n  >>> siPrime(101)\n  true\n  >>> siPrime(11)\n  true\n  >>> siPrime(13441)\n  true\n  >>> siPrime(61)\n  true\n  >>> siPrime(4)\n  false\n  >>> siPrime(1)\n  false\n  */\nconst siPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n <= 3) {\n    return true;\n  }\n  if (n <= 5) {\n    return siPrime(Math.floor(n / 2));\n  }\n  if (n <= 7) {\n    return siPrime(Math.floor(n / 3));\n  }\n  if (n <= 9) {\n    return siPrime(Math.floor(n / 5));\n  }\n  return false;\n};\n\n/*Return true if a given number is composite, and false otherwise.\n  >>> siComposite(6)\n  true\n  >>> siComposite(101)\n  false\n  >>> siComposite(11)\n  false\n  >>> siComposite(13441)\n  false\n  >>> siComposite(61)\n  false\n  >>> siComposite(4)\n  true\n  >>> siComposite(1)\n  false\n  */\nconst siComposite = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n <= 3) {\n    return true;\n  }\n  if (n <= 5) {\n    return siComposite(Math.floor(n / 2));\n  }\n  if (n <= 7) {\n    return siComposite(Math.floor(n / 3));\n  }\n  if (n <= 9) {\n    return siComposite(Math.floor(n / 5));\n  }\n  return false;\n};\n\n/*Return true if a given number is composite and prime, and false otherwise.\n  >>> siCompositePrime(6)\n  true\n  >>> siCompositePrime(101)\n  false\n  >>> siCompositePrime(11)\n  false\n  >>> siCompositePrime(13441)\n  false\n  >>> siCompositePrime(61)\n  false\n  >>> siCompositePrime(4)\n  true\n  >>> siCompositePrime(1)\n  false\n  */\nconst siCompositePrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n <= 3) {\n    return true;\n  }\n  if (n <= 5) {\n    return siCompositePrime(Math.floor(n / 2));\n  }\n  if (n <= 7) {\n    return siCompositePrime(Math.floor(n / 3));\n  }\n  if (n <= 9) {\n    return siCompositePrime(Math.floor(n / 5));\n  }\n  return false;\n};\n\n/*Return true if a given number is composite and composite, and false otherwise.\n  >>> siCompositeComposite(6)\n  true\n  >>> siCompositeComposite(101)\n  false\n  >>> siCompositeComposite(11)\n  false\n  >>> siCompositeComposite(13441)\n  false\n  >>> siCompositeComposite(61)\n  false\n  >>> siCompositeComposite(4)\n  true\n  >>> siCompositeComposite(1)\n  false\n  */\nconst siCompositeComposite = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n <= 3) {\n    return true;\n  }\n  if (n <= 5) {\n    return siCompositeComposite(Math.floor(n / 2));\n  }\n  if (n <= 7) {\n    return siCompositeComposite(Math.floor(n / 3));\n  }\n  if (n <= 9) {\n    return siCompositeComposite(Math.floor(n / 5));\n  }\n  return false;\n};\n\n/*Return true if a given number is composite and composite and prime, and false otherwise.\n  >>> siCompositeCompositePrime(6)\n  true\n  >>> siCompositeCompositePrime(101)\n  false\n  >>> siCompositeCompositePrime(11)\n  false\n  >>> siCompositeCompositePrime(13441)\n  false\n  >>> siCompositeCompositePrime(61)\n  false\n  >>> siCompositeCompositePrime(4)\n  true\n  >>> siCompositeCompositePrime(1)\n  false\n  */\nconst siCompositeCompositePrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n <= 3) {\n    return true;\n  }\n  if (n <= 5) {\n    return siCompositeCompositePrime(Math.floor(n / 2));\n  }\n  if (n <= 7) {\n    return siCompositeCompositePrime(Math.floor(n / 3));\n  }\n  if (n <= 9) {\n    return siCompositeCompositePrime(Math.floor(n / 5));\n  }\n  return false;\n};\n\n/*Return true if a given number is composite and composite and composite, and false otherwise.\n  >>> siCompositeCompositeCompositeCompositePrime(6)\n  true\n  >>> siCompositeCompositeCompositePrime(101)\n  false\n  >>> siCompositeCompositeCompositePrime(11)\n  false\n  >>> siCompositeCompositeCompositePrime(13441)\n  false\n  >>> siCompositeCompositeCompositePrime(61)\n  false\n  >>> siCompositeCompositeCompositePrime(4)\n  true\n  >>> siCompositeCompositeCompositePrime(1)\n  false\n  */\nconst siCompositeCompositeCompositeCompositePrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n <= 3) {\n    return true;\n  }\n  if (n <= 5) {\n    return siCompositeCompositeCompositePrime(Math.floor(n / 2));\n  }\n  if (n <= 7) {\n    return siCompositeCompositeCompositePrime(Math.floor(n / 3));\n  }\n  if (n <= 9) {\n    return siCompositeCompositeCompositePrime(Math.floor(n / 5));\n  }\n  return false;\n};\n\n/*Return true if a given number is composite and composite and composite and composite, and false otherwise.\n  >>> siCompositeCompositeCompositeCompositeCompositePrime(6)\n  true\n  >>> siCompositeCompositeCompositeCompositePrime(101)\n  false\n  >>> siCompositeCompositeCompositeCompositePrime(11)\n  false\n  >>> siCompositeCompositeCompositeCompositePrime(13441)\n  false\n  >>> siCompositeCompositeCompositeCompositePrime(61)\n  false\n  >>> siCompositeCompositeCompositeCompositePrime(4)\n  true\n  >>> siCompositeCompositeCompositeCompositePrime(1)\n  false\n  */\nconst siCompositeCompositeCompositeCompositeCompositePrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n <= 3) {\n    return true;\n  }\n  if (n <= 5) {\n    return siCompositeCompositeCompositeCompositePrime(Math.floor(n / 2));\n  }\n  if (n <= 7) {\n    return siCompositeCompositeCompositePrime(Math.floor(n / 3));\n  }\n  if (n <= 9) {\n    return siCompositeCompositeCompositePrime(Math.floor(n / 5));\n  }\n  return false;\n};\n\n/*Return true if a given number is composite and composite and composite and composite, and false otherwise.\n  >>> siCompositeCompositeCompositeCompositeCompositeCompositePrime(6)\n  true\n  >>> siCompositeCompositeCompositeCompositeCompositePrime(101)\n  false\n  >>> siCompositeCompositeCompositeCompositeCompositePrime(11)\n  false\n  >>> siCompositeCompositeCompositeCompositeCompositePrime(13441)\n  false\n  >>> siCompositeCompositeCompositeCompositeCompositePrime(", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "gc": "<|endoftext|>/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  let zero = Infinity;\n  let index = xs.length - 1;\n  while (index >= 0) {\n    if (xs[index] === 0) {\n      return zero;\n    }\n    zero = Math.min(zero, xs[index]);\n    index--;\n  }\n  return zero;\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findOne find x such that poly(x) = 1.\n  findOne returns only zero point, even if there are many.\n  Moreover, findOne only takes list xs having even number of coefficients\n  and smallest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findOne([1, 2]), 2) # f(x) = 1 + 2x\n  0.5\n  >>> round(findOne([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findOne = (xs) => {\n  let one = -1;\n  let index = xs.length - 1;\n  while (index >= 0) {\n    if (xs[index] === 1) {\n      return one;\n    }\n    one = Math.max(one, xs[index]);\n    index--;\n  }\n  return one;\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findNearest find x such that poly(x) = x.\n  findNearest returns only zero point, even if there are many.\n  Moreover, findNearest only takes list xs having even number of coefficients\n  and smallest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findNearest([1, 2]), 2) # f(x) = 1 + 2x\n  0.5\n  >>> round(findNearest([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findNearest = (xs) => {\n  let zero = Infinity;\n  let index = xs.length - 1;\n  while (index >= 0) {\n    if (xs[index] === x) {\n      return zero;\n    }\n    zero = Math.min(zero, xs[index]);\n    index--;\n  }\n  return zero;\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findNearestPoint find x such that poly(x) = x.\n  findNearestPoint returns only zero point, even if there are many.\n  Moreover, findNearestPoint only takes list xs having even number of coefficients\n  and smallest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findNearestPoint([1, 2]), 2) # f(x) = 1 + 2x\n  0.5\n  >>> round(findNearestPoint([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findNearestPoint = (xs) => {\n  let zero = Infinity;\n  let index = xs.length - 1;\n  while (index >= 0) {\n    if (xs[index] === x) {\n      return zero;\n    }\n    zero = Math.min(zero, xs[index]);\n    index--;\n  }\n  return zero;\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findNearestPoint find x such that poly(x) = x.\n  findNearestPoint returns only zero point, even if there are many.\n  Moreover, findNearestPoint only takes list xs having even number of coefficients\n  and smallest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findNearestPoint([1, 2]), 2) # f(x) = 1 + 2x\n  0.5\n  >>> round(findNearestPoint([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findNearestPointWithDerivative = (xs) => {\n  let zero = Infinity;\n  let index = xs.length - 1;\n  while (index >= 0) {\n    if (xs[index] === x) {\n      return zero;\n    }\n    zero = Math.min(zero, xs[index]);\n    index--;\n  }\n  return zero;\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findNearestPoint find x such that poly(x) = x.\n  findNearestPoint returns only zero point, even if there are many.\n  Moreover, findNearestPoint only takes list xs having even number of coefficients\n  and smallest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findNearestPointWithDerivative([1, 2]), 2) # f(x) = 1 + 2x\n  0.5\n  >>> round(findNearestPointWithDerivative([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findNearestPointWithDerivativeDerivative = (xs) => {\n  let zero = Infinity;\n  let index = xs.length - 1;\n  while (index >= 0) {\n    if (xs[index] === x) {\n      return zero;\n    }\n    zero = Math.min(zero, xs[index]);\n    index--;\n  }\n  return zero;\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findNearestPoint find x such that poly(x) = x.\n  findNearestPoint returns only zero point, even if there are many.\n  Moreover, findNearestPoint only takes list xs having even number of coefficients\n  and smallest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findNearestPointWithDerivativeDerivative([1, 2]), 2) # f(x) = 1 + 2x\n  0.5\n  >>> round(findNearestPointWithDerivativeDerivative([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findNearestPointWithDerivativeDerivativeDerivative = (xs) => {\n  let zero = Infinity;\n  let index = xs.length - 1;\n  while (index >= 0) {\n    if (xs[index] === x) {\n      return zero;\n    }\n    zero = Math.min(zero, xs[index]);\n    index--;\n  }\n  return zero;\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findNearestPoint find x such that poly(x) = x.\n  findNearestPoint returns only zero point, even if there are many.\n  Moreover, findNearestPoint only takes list xs having even number of coefficients\n  and smallest non zero coefficient as it guarantees\n  a solution.\n", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/33", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "gc": "<|endoftext|>/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  let l2 = l.slice();\n  let l3 = l2.slice();\n  let l4 = l3.slice();\n  let l5 = l4.slice();\n  let l6 = l5.slice();\n  let l7 = l6.slice();\n  let l8 = l7.slice();\n  let l9 = l8.slice();\n  let l10 = l9.slice();\n  let l11 = l10.slice();\n  let l12 = l11.slice();\n  let l13 = l12.slice();\n  let l14 = l13.slice();\n  let l15 = l14.slice();\n  let l16 = l15.slice();\n  let l17 = l16.slice();\n  let l18 = l17.slice();\n  let l19 = l18.slice();\n  let l20 = l19.slice();\n  let l21 = l20.slice();\n  let l22 = l21.slice();\n  let l23 = l22.slice();\n  let l24 = l23.slice();\n  let l25 = l24.slice();\n  let l26 = l25.slice();\n  let l27 = l26.slice();\n  let l28 = l27.slice();\n  let l29 = l28.slice();\n  let l30 = l29.slice();\n  let l31 = l30.slice();\n  let l32 = l31.slice();\n  let l33 = l32.slice();\n  let l34 = l33.slice();\n  let l35 = l34.slice();\n  let l36 = l35.slice();\n  let l37 = l36.slice();\n  let l38 = l37.slice();\n  let l39 = l38.slice();\n  let l40 = l39.slice();\n  let l41 = l40.slice();\n  let l42 = l41.slice();\n  let l43 = l42.slice();\n  let l44 = l43.slice();\n  let l45 = l44.slice();\n  let l46 = l45.slice();\n  let l47 = l46.slice();\n  let l48 = l47.slice();\n  let l49 = l48.slice();\n  let l50 = l49.slice();\n  let l51 = l50.slice();\n  let l52 = l51.slice();\n  let l53 = l52.slice();\n  let l54 = l53.slice();\n  let l55 = l54.slice();\n  let l56 = l55.slice();\n  let l57 = l56.slice();\n  let l58 = l57.slice();\n  let l59 = l58.slice();\n  let l60 = l59.slice();\n  let l61 = l60.slice();\n  let l62 = l61.slice();\n  let l63 = l62.slice();\n  let l64 = l63.slice();\n  let l65 = l64.slice();\n  let l66 = l65.slice();\n  let l67 = l66.slice();\n  let l68 = l67.slice();\n  let l69 = l68.slice();\n  let l70 = l69.slice();\n  let l71 = l70.slice();\n  let l72 = l71.slice();\n  let l73 = l72.slice();\n  let l74 = l73.slice();\n  let l75 = l74.slice();\n  let l76 = l75.slice();\n  let l77 = l76.slice();\n  let l78 = l77.slice();\n  let l79 = l78.slice();\n  let l80 = l79.slice();\n  let l81 = l80.slice();\n  let l82 = l81.slice();\n  let l83 = l82.slice();\n  let l84 = l83.slice();\n  let l85 = l84.slice();\n  let l86 = l85.slice();\n  let l87 = l86.slice();\n  let l88 = l87.slice();\n  let l89 = l88.slice();\n  let l90 = l89.slice();\n  let l91 = l90.slice();\n  let l92 = l91.slice();\n  let l93 = l92.slice();\n  let l94 = l93.slice();\n  let l95 = l94.slice();\n  let l96 = l95.slice();\n  let l97 = l96.slice();\n  let l98 = l97.slice();\n  let l99 = l98.slice();\n  let l100 = l99.slice();\n  let l101 = l100.slice();\n  let l102 = l101.slice();\n  let l103 = l102.slice();\n  let l104 = l103.slice();\n  let l105 = l104.slice();\n  let l106 = l105.slice();\n  let l107 = l106.slice();\n  let l108 = l107.slice();\n  let l109 = l108.slice();\n  let l110 = l109.slice();\n  let l111 = l110.slice();\n  let l112 = l111.slice();\n  let l113 = l112.slice();\n  let l114 = l113.slice();\n  let l115 = l114.slice();\n  let l116 = l115.slice();\n  let l117 = l116.slice();\n  let l118 = l117.slice();\n  let l119 = l118.slice();\n  let l120 = l119.slice();\n  let l121 = l120.slice();\n  let l122 = l121.slice();\n  let l123 = l122.slice();\n  let l124 = l123.slice();\n  let l125 = l124.slice();\n  let l126 = l125.slice();\n  let l127 = l126.slice();\n  let l128 = l127.slice();\n  let l129 = l128.slice();\n  let l130 = l129.slice();\n  let l131 = l130.slice();\n  let l132 = l131.slice();\n  let l133 = l132.slice();\n  let l134 = l133.slice();\n  let l135 = l134.slice();\n  let l136 = l135.slice();\n  let l137 = l136.slice();\n  let l138 = l137.slice();\n  let l139 = l138.slice();\n  let l140 = l139.slice();\n  let l141 = l140.slice();\n  let l142 = l141.slice();\n  let l143 = l142.slice();\n  let l144 = l143.slice();\n  let l145 = l144.slice();\n  let l146 = l145.slice();\n  let l147 = l146.slice();\n  let l148 = l147.slice();\n  let l149 = l148.slice();\n  let l150 = l149.slice();\n  let l151 = l150.slice();\n  let l15", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "gc": "<|endoftext|>/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let seen = {};\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    if (!seen[l[i]]) {\n      seen[l[i]] = true;\n      result.push(l[i]);\n    }\n  }\n  return result;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique2 = (arr) => {\n  let seen = {};\n  let result = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (!seen[arr[i]]) {\n      seen[arr[i]] = true;\n      result.push(arr[i]);\n    }\n  }\n  return result;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique3 = (arr) => {\n  let seen = {};\n  let result = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (!seen[arr[i]]) {\n      seen[arr[i]] = true;\n      result.push(arr[i]);\n    }\n  }\n  return result;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique4 = (arr) => {\n  let seen = {};\n  let result = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (!seen[arr[i]]) {\n      seen[arr[i]] = true;\n      result.push(arr[i]);\n    }\n  }\n  return result;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique5 = (arr) => {\n  let seen = {};\n  let result = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (!seen[arr[i]]) {\n      seen[arr[i]] = true;\n      result.push(arr[i]);\n    }\n  }\n  return result;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique6 = (arr) => {\n  let seen = {};\n  let result = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (!seen[arr[i]]) {\n      seen[arr[i]] = true;\n      result.push(arr[i]);\n    }\n  }\n  return result;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique7 = (arr) => {\n  let seen = {};\n  let result = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (!seen[arr[i]]) {\n      seen[arr[i]] = true;\n      result.push(arr[i]);\n    }\n  }\n  return result;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique8 = (arr) => {\n  let seen = {};\n  let result = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (!seen[arr[i]]) {\n      seen[arr[i]] = true;\n      result.push(arr[i]);\n    }\n  }\n  return result;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique9 = (arr) => {\n  let seen = {};\n  let result = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (!seen[arr[i]]) {\n      seen[arr[i]] = true;\n      result.push(arr[i]);\n    }\n  }\n  return result;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique10 = (arr) => {\n  let seen = {};\n  let result = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (!seen[arr[i]]) {\n      seen[arr[i]] = true;\n      result.push(arr[i]);\n    }\n  }\n  return result;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique11 = (arr) => {\n  let seen = {};\n  let result = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (!seen[arr[i]]) {\n      seen[arr[i]] = true;\n      result.push(arr[i]);\n    }\n  }\n  return result;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique12 = (arr) => {\n  let seen = {};\n  let result = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (!seen[arr[i]]) {\n      seen[arr[i]] = true;\n      result.push(arr[i]);\n    }\n  }\n  return result;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique13 = (arr) => {\n  let seen = {};\n  let result = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (!seen[arr[i]]) {\n      seen[arr[i]] = true;\n      result.push(arr[i]);\n    }\n  }\n  return result;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique14 = (arr) => {\n  let seen = {};\n  let result = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (!seen[arr[i]]) {\n      seen[arr[i]] = true;\n      result.push(arr[i]);\n    }\n  }\n  return result;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique15 = (arr) => {\n  let seen = {};\n  let result = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (!seen[arr[i]]) {\n      seen[arr[i]] = true;\n      result.push(arr[i]);\n    }\n  }\n  return result;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique16 = (arr) => {\n  let seen = {};\n  let result = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (!seen[arr[i]]) {\n      seen[arr[i]] = true;\n      result.push(arr[i]);\n    }\n  }\n  return result;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique17 = (arr) => {\n  let seen = {};\n  let result = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (!seen[arr[i]]) {\n      seen[arr[i]] = true;\n      result.push(arr[i]);\n    }\n  }\n  return result;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique18 = (arr) => {\n  let seen = {};\n  let result = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (!seen[arr[i]]) {\n      seen[arr[i]] = true;\n      result.push(arr[i]);\n    }\n  }\n  return result;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique19 = (arr) => {\n  let seen = {};\n  let result = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (!seen[arr[i]]) {\n      seen[arr", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "gc": "<|endoftext|>/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  return l.length > 0? l[l.length - 1] : null;\n};\n\n/*Return minimum element in the list.\n  >>> minElement([1, 2, 3])\n  1\n  >>> minElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -5\n  */\nconst minElement = (l) => {\n  return l.length > 0? l[0] : null;\n};\n\n/*Return element at specified index.\n  >>> getElementAt([1, 2, 3], 1)\n  2\n  >>> getElementAt([1, 2, 3], 2)\n  3\n  >>> getElementAt([1, 2, 3], 3)\n  null\n  */\nconst getElementAt = (l, i) => {\n  return i < 0? l.length + i : i < l.length? l[i] : null;\n};\n\n/*Return element at specified index.\n  >>> getElementAt([1, 2, 3], 1)\n  2\n  >>> getElementAt([1, 2, 3], 2)\n  3\n  >>> getElementAt([1, 2, 3], 3)\n  null\n  */\nconst getElementAtOrNull = (l, i) => {\n  return i < 0? l.length + i : i < l.length? l[i] : null;\n};\n\n/*Return element at specified index.\n  >>> getElementAt([1, 2, 3], 1)\n  2\n  >>> getElementAt([1, 2, 3], 2)\n  3\n  >>> getElementAt([1, 2, 3], 3)\n  null\n  */\nconst getElementAtOrNullOrUndefined = (l, i) => {\n  return i < 0? l.length + i : i < l.length? l[i] : null;\n};\n\n/*Return element at specified index.\n  >>> getElementAt([1, 2, 3], 1)\n  2\n  >>> getElementAt([1, 2, 3], 2)\n  3\n  >>> getElementAt([1, 2, 3], 3)\n  null\n  */\nconst getElementAtOrNullOrUndefinedOrNull = (l, i) => {\n  return i < 0? l.length + i : i < l.length? l[i] : null;\n};\n\n/*Return element at specified index.\n  >>> getElementAt([1, 2, 3], 1)\n  2\n  >>> getElementAt([1, 2, 3], 2)\n  3\n  >>> getElementAt([1, 2, 3], 3)\n  null\n  */\nconst getElementAtOrNullOrUndefinedOrNullOrUndefined = (l, i) => {\n  return i < 0? l.length + i : i < l.length? l[i] : null;\n};\n\n/*Return element at specified index.\n  >>> getElementAt([1, 2, 3], 1)\n  2\n  >>> getElementAt([1, 2, 3], 2)\n  3\n  >>> getElementAt([1, 2, 3], 3)\n  null\n  */\nconst getElementAtOrNullOrUndefinedOrNullOrUndefinedOrNull = (l, i) => {\n  return i < 0? l.length + i : i < l.length? l[i] : null;\n};\n\n/*Return element at specified index.\n  >>> getElementAt([1, 2, 3], 1)\n  2\n  >>> getElementAt([1, 2, 3], 2)\n  3\n  >>> getElementAt([1, 2, 3], 3)\n  null\n  */\nconst getElementAtOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefined = (l, i) => {\n  return i < 0? l.length + i : i < l.length? l[i] : null;\n};\n\n/*Return element at specified index.\n  >>> getElementAt([1, 2, 3], 1)\n  2\n  >>> getElementAt([1, 2, 3], 2)\n  3\n  >>> getElementAt([1, 2, 3], 3)\n  null\n  */\nconst getElementAtOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNull = (l, i) => {\n  return i < 0? l.length + i : i < l.length? l[i] : null;\n};\n\n/*Return element at specified index.\n  >>> getElementAt([1, 2, 3], 1)\n  2\n  >>> getElementAt([1, 2, 3], 2)\n  3\n  >>> getElementAt([1, 2, 3], 3)\n  null\n  */\nconst getElementAtOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNull = (l, i) => {\n  return i < 0? l.length + i : i < l.length? l[i] : null;\n};\n\n/*Return element at specified index.\n  >>> getElementAt([1, 2, 3], 1)\n  2\n  >>> getElementAt([1, 2, 3], 2)\n  3\n  >>> getElementAt([1, 2, 3], 3)\n  null\n  */\nconst getElementAtOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefined = (l, i) => {\n  return i < 0? l.length + i : i < l.length? l[i] : null;\n};\n\n/*Return element at specified index.\n  >>> getElementAt([1, 2, 3], 1)\n  2\n  >>> getElementAt([1, 2, 3], 2)\n  3\n  >>> getElementAt([1, 2, 3], 3)\n  null\n  */\nconst getElementAtOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNull = (l, i) => {\n  return i < 0? l.length + i : i < l.length? l[i] : null;\n};\n\n/*Return element at specified index.\n  >>> getElementAt([1, 2, 3], 1)\n  2\n  >>> getElementAt([1, 2, 3], 2)\n  3\n  >>> getElementAt([1, 2, 3], 3)\n  null\n  */\nconst getElementAtOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNull", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "gc": "<|endoftext|>/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = n; i >= 1; i--) {\n    if (i % 3 === 0 && i % 5 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string, return true if it is a palindrome.\n  >>> isPalindrome('racecar')\n  true\n  >>> isPalindrome('racecars')\n  false\n  >>> isPalindrome('racecar')\n  false\n  >>> isPalindrome('racecars')\n  true\n  >>> isPalindrome('racecar')\n  false\n  >>> isPalindrome('racecars')\n  false\n  */\nconst isPalindrome = (str) => {\n  let reverseStr = \"\";\n  for (let i = 0; i < str.length; i++) {\n    reverseStr += str[i];\n  }\n  return reverseStr === str;\n};\n\n/*\n  Given a string, return true if it is a palindrome of length 1.\n  >>> isPalindromeOfLength(1)('racecar')\n  true\n  >>> isPalindromeOfLength(1)('racecars')\n  false\n  >>> isPalindromeOfLength(1)('racecar')\n  false\n  >>> isPalindromeOfLength(1)('racecars')\n  true\n  >>> isPalindromeOfLength(1)('racecar')\n  false\n  >>> isPalindromeOfLength(1)('racecars')\n  false\n  */\nconst isPalindromeOfLength = (length) => {\n  return isPalindrome(\n    str.slice(0, length).reverse().join(\"\")\n  );\n};\n\n/*\n  Given a string, return true if it is a palindrome of length 2.\n  >>> isPalindromeOfLength(2)('racecar')\n  true\n  >>> isPalindromeOfLength(2)('racecars')\n  false\n  >>> isPalindromeOfLength(2)('racecar')\n  false\n  >>> isPalindromeOfLength(2)('racecars')\n  true\n  >>> isPalindromeOfLength(2)('racecar')\n  false\n  >>> isPalindromeOfLength(2)('racecars')\n  false\n  */\nconst isPalindromeOfLength = (length) => {\n  return isPalindrome(\n    str.slice(0, length).reverse().join(\"\")\n  );\n};\n\n/*\n  Given a string, return true if it is a palindrome of length 3.\n  >>> isPalindromeOfLength(3)('racecar')\n  true\n  >>> isPalindromeOfLength(3)('racecars')\n  false\n  >>> isPalindromeOfLength(3)('racecar')\n  false\n  >>> isPalindromeOfLength(3)('racecars')\n  true\n  >>> isPalindromeOfLength(3)('racecar')\n  false\n  >>> isPalindromeOfLength(3)('racecars')\n  false\n  */\nconst isPalindromeOfLength = (length) => {\n  return isPalindrome(\n    str.slice(0, length).reverse().join(\"\")\n  );\n};\n\n/*\n  Given a string, return true if it is a palindrome of length 4.\n  >>> isPalindromeOfLength(4)('racecar')\n  true\n  >>> isPalindromeOfLength(4)('racecars')\n  false\n  >>> isPalindromeOfLength(4)('racecar')\n  false\n  >>> isPalindromeOfLength(4)('racecars')\n  true\n  >>> isPalindromeOfLength(4)('racecar')\n  false\n  >>> isPalindromeOfLength(4)('racecars')\n  false\n  */\nconst isPalindromeOfLength = (length) => {\n  return isPalindrome(\n    str.slice(0, length).reverse().join(\"\")\n  );\n};\n\n/*\n  Given a string, return true if it is a palindrome of length 5.\n  >>> isPalindromeOfLength(5)('racecar')\n  true\n  >>> isPalindromeOfLength(5)('racecars')\n  false\n  >>> isPalindromeOfLength(5)('racecar')\n  false\n  >>> isPalindromeOfLength(5)('racecars')\n  true\n  >>> isPalindromeOfLength(5)('racecar')\n  false\n  >>> isPalindromeOfLength(5)('racecars')\n  false\n  */\nconst isPalindromeOfLength = (length) => {\n  return isPalindrome(\n    str.slice(0, length).reverse().join(\"\")\n  );\n};\n\n/*\n  Given a string, return true if it is a palindrome of length 6.\n  >>> isPalindromeOfLength(6)('racecar')\n  true\n  >>> isPalindromeOfLength(6)('racecars')\n  false\n  >>> isPalindromeOfLength(6)('racecar')\n  false\n  >>> isPalindromeOfLength(6)('racecars')\n  true\n  >>> isPalindromeOfLength(6)('racecar')\n  false\n  >>> isPalindromeOfLength(6)('racecars')\n  false\n  */\nconst isPalindromeOfLength = (length) => {\n  return isPalindrome(\n    str.slice(0, length).reverse().join(\"\")\n  );\n};\n\n/*\n  Given a string, return true if it is a palindrome of length 7.\n  >>> isPalindromeOfLength(7)('racecar')\n  true\n  >>> isPalindromeOfLength(7)('racecars')\n  false\n  >>> isPalindromeOfLength(7)('racecar')\n  false\n  >>> isPalindromeOfLength(7)('racecars')\n  true\n  >>> isPalindromeOfLength(7)('racecar')\n  false\n  >>> isPalindromeOfLength(7)('racecars')\n  false\n  */\nconst isPalindromeOfLength = (length) => {\n  return isPalindrome(\n    str.slice(0, length).reverse().join(\"\")\n  );\n};\n\n/*\n  Given a string, return true if it is a palindrome of length 8.\n  >>> isPalindromeOfLength(8)('racecar')\n  true\n  >>> isPalindromeOfLength(8)('racecars')\n  false\n  >>> isPalindromeOfLength(8)('racecar')\n  false\n  >>> isPalindromeOfLength(8)('racecars')\n  true\n  >>> isPalindromeOfLength(8)('racecar')\n  false\n  >>> isPalindromeOfLength(8)('racecars')\n  false\n  */\nconst isPalindromeOfLength = (length) => {\n  return isPalindrome(\n    str.slice(0, length).reverse().join(\"\")\n  );\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/37", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sotrEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sotrEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sotrEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sotrEven", "gc": "<|endoftext|>/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sotrEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sotrEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sotrEven = (l) => {\n  let even = l.filter((item, index) => {\n    return index % 2 === 0;\n  });\n  let odd = l.filter((item, index) => {\n    return index % 2!== 0;\n  });\n  return [...even,...odd];\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the odd indicies are equal\n  to the values of the odd indicies of l, but sorted.\n  >>> sotrOdd([1, 2, 3])\n  [3, 2, 1]\n  >>> sotrOdd([5, 6, 3, 4])\n  [4, 3, 6, 5]\n  */\nconst sotrOdd = (l) => {\n  let even = l.filter((item, index) => {\n    return index % 2 === 0;\n  });\n  let odd = l.filter((item, index) => {\n    return index % 2!== 0;\n  });\n  return [...odd,...even];\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sotrEvenOdd([1, 2, 3])\n  [1, 2, 3, 5]\n  >>> sotrEvenOdd([5, 6, 3, 4])\n  [5, 3, 4, 6]\n  */\nconst sotrEvenOdd = (l) => {\n  let even = l.filter((item, index) => {\n    return index % 2 === 0;\n  });\n  let odd = l.filter((item, index) => {\n    return index % 2!== 0;\n  });\n  return [...odd,...even];\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the odd indicies of l, but sorted.\n  >>> sotrEvenOddOdd([1, 2, 3])\n  [1, 2, 3, 5, 6]\n  >>> sotrEvenOddOdd([5, 6, 3, 4])\n  [5, 3, 4, 6, 6]\n  */\nconst sotrEvenOddOdd = (l) => {\n  let even = l.filter((item, index) => {\n    return index % 2 === 0;\n  });\n  let odd = l.filter((item, index) => {\n    return index % 2!== 0;\n  });\n  return [...odd,...even];\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sotrEvenOddOddOdd([1, 2, 3])\n  [1, 2, 3, 5, 6]\n  >>> sotrEvenOddOddOdd([5, 6, 3, 4])\n  [5, 3, 4, 6, 6]\n  */\nconst sotrEvenOddOddOdd = (l) => {\n  let even = l.filter((item, index) => {\n    return index % 2 === 0;\n  });\n  let odd = l.filter((item, index) => {\n    return index % 2!== 0;\n  });\n  return [...odd,...even];\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the odd indicies of l, but sorted.\n  >>> sotrEvenOddOddOddOdd([1, 2, 3])\n  [1, 2, 3, 5, 6]\n  >>> sotrEvenOddOddOddOdd([5, 6, 3, 4])\n  [5, 3, 4, 6, 6]\n  */\nconst sotrEvenOddOddOddOdd = (l) => {\n  let even = l.filter((item, index) => {\n    return index % 2 === 0;\n  });\n  let odd = l.filter((item, index) => {\n    return index % 2!== 0;\n  });\n  return [...odd,...even];\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sotrEvenOddOddOddOddOdd([1, 2, 3])\n  [1, 2, 3, 5, 6]\n  >>> sotrEvenOddOddOddOddOdd([5, 6, 3, 4])\n  [5, 3, 4, 6, 6]\n  */\nconst sotrEvenOddOddOddOddOdd = (l) => {\n  let even = l.filter((item, index) => {\n    return index % 2 === 0;\n  });\n  let odd = l.filter((item, index) => {\n    return index % 2!== 0;\n  });\n  return [...odd,...even];\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sotrEvenOddOddOddOddOddOdd([1, 2, 3])\n  [1, 2, 3, 5, 6]\n  >>> sotrEvenOddOddOddOddOddOdd([5, 6, 3, 4])\n  [5, 3, 4, 6, 6]\n  */\nconst sotrEvenOddOddOddOddOddOdd = (l) => {\n  let even = l.filter((item, index) => {\n    return index % 2 === 0;\n  });\n  let odd = l.filter((item, index) => {\n    return index % 2!== 0;\n  });\n  return [...odd,...even];\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sotrEvenOddOddOddOddOddOddOdd([1, 2, 3])\n  [1, 2, 3, 5, 6]\n  >>> sotrEvenOddOddOddOddOddOddOdd([5, 6, 3, 4])\n  [5, 3, 4, 6, 6]\n  */\nconst sotrEvenOddOddOddOddOddOddOdd = (l) => {\n  let even = l.filter((item, index) => {\n    return index % 2 === 0;\n  });\n  let odd = l.filter((item, index) => {\n    return index % 2!== 0;\n  });\n  return [...odd,...even];\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sotrEvenOddOddOddOddOddOddOdd([1, 2, 3])\n  [1, 2, 3, 5, 6]\n  >>> sotrEvenOddOddOddOddOddOddOdd([5, 6, 3, 4])\n  [5, 3, 4, 6, 6]\n  */\nconst sotrEvenOddOddOddOddOddOddOddOdd = (l) => {\n  let even = ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "gc": "<|endoftext|>/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group[1]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encodeCyclic function. Returns decoded string.\n  */\nconst encodeCyclicGroups = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group[1]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encodeCyclic function. Returns decoded string.\n  */\nconst decodeCyclicGroups = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group[1]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encodeCyclic function. Returns decoded string.\n  */\nconst encodeCyclicGroupsGroups = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group[1]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encodeCyclic function. Returns decoded string.\n  */\nconst decodeCyclicGroupsGroups = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group[1]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encodeCyclic function. Returns decoded string.\n  */\nconst encodeCyclicGroupsGroupsGroups = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group[1]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encodeCyclic function. Returns decoded string.\n  */\nconst decodeCyclicGroupsGroupsGroups = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group[1]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encodeCyclic function. Returns decoded string.\n  */\nconst encodeCyclicGroupsGroupsGroupsGroups = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group[1]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encodeCyclic function. Returns decoded string.\n  */\nconst decodeCyclicGroupsGroupsGroupsGroupsGroups = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group[1]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encodeCyclic function. Returns decoded string.\n  */\nconst encodeCyclicGroupsGroupsGroupsGroupsGroupsGroups = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group[1]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encodeCyclic function. Returns decoded string.\n  */\nconst decodeCyclicGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroups = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group[1]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encodeCyclic function. Returns decoded string.\n  */\nconst encodeCyclicGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroups", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "gc": "<|endoftext|>/*\n  primeFib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  let i = 1;\n  let fib = [0, 1];\n  while (i <= n) {\n    fib[i] = fib[i - 1] + fib[i - 2];\n    i++;\n  }\n  return fib[n];\n};\n\n/**\n * Given a number, return true if it is a prime number.\n * >>> isPrime(123)\n * true\n * >>> isPrime(124)\n * false\n */\nconst isPrime = (n) => {\n  if (n <= 1) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n <= 3) {\n    return true;\n  }\n  if (n % 3 === 0) {\n    return false;\n  }\n  if (n <= 5) {\n    return true;\n  }\n  if (n % 5 === 0) {\n    return false;\n  }\n  return primeFib(n);\n};\n\n/**\n * Given a string, return true if it is a palindrome.\n * >>> isPalindrome('hello')\n * true\n * >>> isPalindrome('world')\n * false\n */\nconst isPalindrome = (str) => {\n  return str === str.reverse().toString();\n};\n\n/**\n * Given a string, return true if it is a palindrome and it's also palindrome.\n * >>> isPalindromeAndPalindrome('hello')\n * true\n * >>> isPalindromeAndPalindrome('world')\n * true\n * >>> isPalindromeAndPalindrome('helloworld')\n * true\n */\nconst isPalindromeAndPalindrome = (str) => {\n  return isPalindrome(str) && isPalindrome(str);\n};\n\n/**\n * Given a string, return true if it is a palindrome and it's also palindrome and it's also palindrome.\n * >>> isPalindromeAndPalindromeAndPalindrome('hello')\n * true\n * >>> isPalindromeAndPalindromeAndPalindrome('world')\n * true\n * >>> isPalindromeAndPalindromeAndPalindrome('helloworld')\n * true\n */\nconst isPalindromeAndPalindromeAndPalindrome = (str) => {\n  return isPalindromeAndPalindrome(str) && isPalindromeAndPalindrome(str) && isPalindromeAndPalindrome(str);\n};\n\n/**\n * Given a string, return true if it is a palindrome and it's also palindrome and it's also palindrome and it's also palindrome.\n * >>> isPalindromeAndPalindromeAndPalindromeAndPalindrome('hello')\n * true\n * >>> isPalindromeAndPalindromeAndPalindromeAndPalindrome('world')\n * true\n * >>> isPalindromeAndPalindromeAndPalindromeAndPalindrome('helloworld')\n * true\n */\nconst isPalindromeAndPalindromeAndPalindromeAndPalindrome = (str) => {\n  return isPalindromeAndPalindromeAndPalindromeAndPalindrome(str) && isPalindromeAndPalindromeAndPalindrome(str) && isPalindromeAndPalindromeAndPalindrome(str);\n};\n\n/**\n * Given a string, return true if it is a palindrome and it's also palindrome and it's also palindrome and it's also palindrome and it's also palindrome and it's also palindrome.\n * >>> isPalindromeAndPalindromeAndPalindromeAndPalindromeAndPalindrome('hello')\n * true\n * >>> isPalindromeAndPalindromeAndPalindromeAndPalindromeAndPalindrome('world')\n * true\n * >>> isPalindromeAndPalindromeAndPalindromeAndPalindromeAndPalindrome('helloworld')\n * true\n */\nconst isPalindromeAndPalindromeAndPalindromeAndPalindromeAndPalindrome = (str) => {\n  return isPalindromeAndPalindromeAndPalindromeAndPalindromeAndPalindrome(str) && isPalindromeAndPalindromeAndPalindromeAndPalindrome(str) && isPalindromeAndPalindromeAndPalindromeAndPalindrome(str);\n};\n\n/**\n * Given a string, return true if it is a palindrome and it's also palindrome and it's also palindrome and it's also palindrome and it's also palindrome and it's also palindrome and it's also palindrome and it's also palindrome.\n * >>> isPalindromeAndPalindromeAndPalindromeAndPalindromeAndPalindromeAndPalindromeAndPalindromeAndPalindromeAndPalindromeAndPalindromeAndPalindromeAndPalindromeAndPalindromeAndPalindromeAndPalindromeAndPalindromeAndPalindromeAndPalindromeAndPalindromeAndPalindromeAndPalindromeAndPalindromeAndPalindromeAndPalindromeAndPalindromeAndPalindromeAndPalindromeAndPalindromeAndPalindromeAndPalindromeAndPalindromeAndPalindromeAndPalindromeAndPalindromeAndPalindromeAndPalindromeAndPalindromeAndPalindromeAndPalindromeAndPalindromeAndPalindromeAndPalindromeAndPalindromeAndPalindromeAndPalindromeAndPalindromeAndPalindromeAndPalindromeAndPalindromeAndPalindromeAndPalindromeAndPalindromeAndPalindromeAndPalindromeAndPalindromeAndPalindromeAndPalindromeAndPalindromeAndPalindromeAndPalindromeAndPalindromeAndPalindromeAndPalindromeAndPalindromeAndPalindromeAndPalindromeAndPalindromeAndPalindromeAndPalindromeAndPalindromeAndPalindromeAndPalindromeAndPalindromeAndPalindromeAndPalindromeAndPalindromeAndPalindromeAndPalindromeAndPalindromeAndPalindromeAndPalindromeAndPalindromeAndPalindromeAndPalindromeAndPalindromeAndPalindromeAnd", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/4", "prompt": "/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meanAbsoltueDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoltueDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoltueDeviation", "gc": "<|endoftext|>/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meanAbsoltueDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoltueDeviation = (numbers) => {\n  const mean = numbers.reduce((acc, val) => acc + val, 0) / numbers.length;\n  return numbers.map(val => Math.abs(val - mean));\n};\n\n/**\n * Given a list of numbers, calculate Mean Squared Deviation\n  around the mean of this dataset.\n  Mean Squared Deviation is the average squared difference between each\n  element and a centerpoint (mean in this case):\n  MSD = average ^ 2 - x_mean ^ 2\n  >>> meanSquaredDeviation([1.0, 2.0, 3.0, 4.0])\n  4.5\n  */\nconst meanSquaredDeviation = (numbers) => {\n  const mean = numbers.reduce((acc, val) => acc + val, 0) / numbers.length;\n  return numbers.map(val => Math.pow(val - mean, 2));\n};\n\n/**\n * Given a list of numbers, calculate Mean Squared Deviation\n  around the mean of this dataset.\n  Mean Squared Deviation is the average squared difference between each\n  element and a centerpoint (mean in this case):\n  MSD = average ^ 2 - x_mean ^ 2\n  >>> meanSquaredDeviation([1.0, 2.0, 3.0, 4.0])\n  4.5\n  */\nconst meanSquaredDeviationWithWeights = (numbers) => {\n  const mean = numbers.reduce((acc, val) => acc + val, 0) / numbers.length;\n  return numbers.map(val => Math.pow(val - mean, 2) * weight);\n};\n\n/**\n * Given a list of numbers, calculate Mean Squared Deviation\n  around the mean of this dataset.\n  Mean Squared Deviation is the average squared difference between each\n  element and a centerpoint (mean in this case):\n  MSD = average ^ 2 - x_mean ^ 2\n  >>> meanSquaredDeviationWithWeights([1.0, 2.0, 3.0, 4.0])\n  4.5\n  */\nconst meanSquaredDeviationWithWeightsWeighted = (numbers) => {\n  const mean = numbers.reduce((acc, val) => acc + val, 0) / numbers.length;\n  return numbers.map(val => Math.pow(val - mean, 2) * weight);\n};\n\n/**\n * Given a list of numbers, calculate Mean Squared Deviation\n  around the mean of this dataset.\n  Mean Squared Deviation is the average squared difference between each\n  element and a centerpoint (mean in this case):\n  MSD = average ^ 2 - x_mean ^ 2\n  >>> meanSquaredDeviationWithWeightsWeighted([1.0, 2.0, 3.0, 4.0])\n  4.5\n  */\nconst meanSquaredDeviationWithWeightsWeightedWithWeights = (numbers) => {\n  const mean = numbers.reduce((acc, val) => acc + val, 0) / numbers.length;\n  return numbers.map(val => Math.pow(val - mean, 2) * weight);\n};\n\n/**\n * Given a list of numbers, calculate Mean Squared Deviation\n  around the mean of this dataset.\n  Mean Squared Deviation is the average squared difference between each\n  element and a centerpoint (mean in this case):\n  MSD = average ^ 2 - x_mean ^ 2\n  >>> meanSquaredDeviationWithWeightsWeightedWithWeights([1.0, 2.0, 3.0, 4.0])\n  4.5\n  */\nconst meanSquaredDeviationWithWeightsWeightedWithWeightsWeighted = (numbers) => {\n  const mean = numbers.reduce((acc, val) => acc + val, 0) / numbers.length;\n  return numbers.map(val => Math.pow(val - mean, 2) * weight);\n};\n\n/**\n * Given a list of numbers, calculate Mean Squared Deviation\n  around the mean of this dataset.\n  Mean Squared Deviation is the average squared difference between each\n  element and a centerpoint (mean in this case):\n  MSD = average ^ 2 - x_mean ^ 2\n  >>> meanSquaredDeviationWithWeightsWeightedWithWeightsWeighted([1.0, 2.0, 3.0, 4.0])\n  4.5\n  */\nconst meanSquaredDeviationWithWeightsWeightedWithWeightsWeightedWithWeights = (numbers) => {\n  const mean = numbers.reduce((acc, val) => acc + val, 0) / numbers.length;\n  return numbers.map(val => Math.pow(val - mean, 2) * weight);\n};\n\n/**\n * Given a list of numbers, calculate Mean Squared Deviation\n  around the mean of this dataset.\n  Mean Squared Deviation is the average squared difference between each\n  element and a centerpoint (mean in this case):\n  MSD = average ^ 2 - x_mean ^ 2\n  >>> meanSquaredDeviationWithWeightsWeightedWithWeightsWeightedWithWeights([1.0, 2.0, 3.0, 4.0])\n  4.5\n  */\nconst meanSquaredDeviationWithWeightsWeightedWithWeightsWeightedWithWeightsWeighted = (numbers) => {\n  const mean = numbers.reduce((acc, val) => acc + val, 0) / numbers.length;\n  return numbers.map(val => Math.pow(val - mean, 2) * weight);\n};\n\n/**\n * Given a list of numbers, calculate Mean Squared Deviation\n  around the mean of this dataset.\n  Mean Squared Deviation is the average squared difference between each\n  element and a centerpoint (mean in this case):\n  MSD = average ^ 2 - x_mean ^ 2\n  >>> meanSquaredDeviationWithWeightsWeightedWithWeightsWeightedWithWeightsWeighted([1.0, 2.0, 3.0, 4.0])\n  4.5\n  */\nconst meanSquaredDeviationWithWeightsWeightedWithWeightsWeightedWithWeightsWeightedWithWeights = (numbers) => {\n  const mean = numbers.reduce((acc, val) => acc + val, 0) / numbers.length;\n  return numbers.map(val => Math.pow(val - mean, 2) * weight);\n};\n\n/**\n * Given a list of numbers, calculate Mean Squared Deviation\n  around the mean of this dataset.\n  Mean Squared Deviation is the average squared difference between each\n  element and a centerpoint (mean in this case):\n  MSD = average ^ 2 - x_mean ^ 2\n  >>> meanSquaredDeviationWithWeightsWeightedWithWeightsWeightedWithWeightsWeightedWithWeights([1.0, 2.0, 3.0, 4.0])\n  4.5\n  */\nconst meanSquaredDeviationWithWeightsWeightedWithWeightsWeightedWithWeightsWeightedWithWeightsWeighted = (numbers) => {\n  const mean = numbers.reduce((acc, val) => acc + val, 0) / numbers.length;\n  return numbers.map(val => Math.pow(val - mean, 2) * weight);\n};\n\n/**\n * Given a list of numbers, calculate Mean Squared Deviation\n  around the mean of this dataset.\n  Mean Squared Deviation is the average squared difference between each\n  element and a centerpoint (mean in this case):\n  MSD = average ^ 2 - x_mean ^ 2\n  >>> meanSquaredDeviationWithWeightsWeightedWithWeightsWeightedWithWeightsWeightedWithWeights([1.0, 2.0, 3.0, 4.0])\n  4.5\n  */\nconst meanSquaredDeviationWithWeightsWeightedWithWeightsWeightedWithWeightsWeightedWithWeightsWeighted = (numbers) => {\n  const mean = numbers.reduce((acc, val) => acc + val, 0) / numbers.length;\n  return numbers.map(val => Math.pow(val - mean, ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "gc": "<|endoftext|>/*\n  triplesSumToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n  A function to check if a number is prime or not.\n\n  >>> isPrime(7)\n  true\n  >>> isPrime(8)\n  false\n  >>> isPrime(9)\n  false\n  >>> isPrime(10)\n  false\n  >>> isPrime(11)\n  false\n  >>> isPrime(12)\n  false\n  >>> isPrime(13)\n  false\n  >>> isPrime(14)\n  false\n  >>> isPrime(15)\n  false\n  >>> isPrime(16)\n  false\n  >>> isPrime(17)\n  false\n  >>> isPrime(18)\n  false\n  >>> isPrime(19)\n  false\n  >>> isPrime(20)\n  false\n  >>> isPrime(21)\n  false\n  >>> isPrime(22)\n  false\n  >>> isPrime(23)\n  false\n  >>> isPrime(24)\n  false\n  >>> isPrime(25)\n  false\n  >>> isPrime(26)\n  false\n  >>> isPrime(27)\n  false\n  >>> isPrime(28)\n  false\n  >>> isPrime(29)\n  false\n  >>> isPrime(30)\n  false\n  >>> isPrime(31)\n  false\n  >>> isPrime(32)\n  false\n  >>> isPrime(33)\n  false\n  >>> isPrime(34)\n  false\n  >>> isPrime(35)\n  false\n  >>> isPrime(36)\n  false\n  >>> isPrime(37)\n  false\n  >>> isPrime(38)\n  false\n  >>> isPrime(39)\n  false\n  >>> isPrime(40)\n  false\n  >>> isPrime(41)\n  false\n  >>> isPrime(42)\n  false\n  >>> isPrime(43)\n  false\n  >>> isPrime(44)\n  false\n  >>> isPrime(45)\n  false\n  >>> isPrime(46)\n  false\n  >>> isPrime(47)\n  false\n  >>> isPrime(48)\n  false\n  >>> isPrime(49)\n  false\n  >>> isPrime(50)\n  false\n  >>> isPrime(51)\n  false\n  >>> isPrime(52)\n  false\n  >>> isPrime(53)\n  false\n  >>> isPrime(54)\n  false\n  >>> isPrime(55)\n  false\n  >>> isPrime(56)\n  false\n  >>> isPrime(57)\n  false\n  >>> isPrime(58)\n  false\n  >>> isPrime(59)\n  false\n  >>> isPrime(60)\n  false\n  >>> isPrime(61)\n  false\n  >>> isPrime(62)\n  false\n  >>> isPrime(63)\n  false\n  >>> isPrime(64)\n  false\n  >>> isPrime(65)\n  false\n  >>> isPrime(66)\n  false\n  >>> isPrime(67)\n  false\n  >>> isPrime(68)\n  false\n  >>> isPrime(69)\n  false\n  >>> isPrime(70)\n  false\n  >>> isPrime(71)\n  false\n  >>> isPrime(72)\n  false\n  >>> isPrime(73)\n  false\n  >>> isPrime(74)\n  false\n  >>> isPrime(75)\n  false\n  >>> isPrime(76)\n  false\n  >>> isPrime(77)\n  false\n  >>> isPrime(78)\n  false\n  >>> isPrime(79)\n  false\n  >>> isPrime(80)\n  false\n  >>> isPrime(81)\n  false\n  >>> isPrime(82)\n  false\n  >>> isPrime(83)\n  false\n  >>> isPrime(84)\n  false\n  >>> isPrime(85)\n  false\n  >>> isPrime(86)\n  false\n  >>> isPrime(87)\n  false\n  >>> isPrime(88)\n  false\n  >>> isPrime(89)\n  false\n  >>> isPrime(90)\n  false\n  >>> isPrime(91)\n  false\n  >>> isPrime(92)\n  false\n  >>> isPrime(93)\n  false\n  >>> isPrime(94)\n  false\n  >>> isPrime(95)\n  false\n  >>> isPrime(96)\n  false\n  >>> isPrime(97)\n  false\n  >>> isPrime(98)\n  false\n  >>> isPrime(99)\n  false\n  >>> isPrime(100)\n  false\n  >>> isPrime(101)\n  false\n  >>> isPrime(102)\n  false\n  >>> isPrime(103)\n  false\n  >>> isPrime(104)\n  false\n  >>> isPrime(105)\n  false\n  >>> isPrime(106)\n  false\n  >>> isPrime(107)\n  false\n  >>> isPrime(108)\n  false\n  >>> isPrime(109)\n  false\n  >>> isPrime(110)\n  false\n  >>> isPrime(111)\n  false\n  >>> isPrime(112)\n  false\n  >>> isPrime(113)\n  false\n  >>> isPrime(114)\n  false\n  >>> isPrime(115)\n  false\n  >>> isPrime(116)\n  false\n  >>> isPrime(117)\n  false\n  >>> isPrime(118)\n  false\n  >>> isPrime(119)\n  false\n  >>> isPrime(120)\n  false\n  >>> isPrime(121)\n  false\n  >>> isPrime(122)\n  false\n  >>> isPrime(123)\n  false\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst acrRacelColision = (n) => {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "acrRacelColision", "gc": "<|endoftext|>/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst acrRacelColision = (n) => {\n  let collisions = 0;\n  for (let i = 0; i < n; i++) {\n    const car1 = this.cars[i];\n    const car2 = this.cars[(i + 1) % n];\n    if (car1.speed > car2.speed) {\n      collisions++;\n    }\n  }\n  return collisions;\n};\n\n/*\n  Given a car and a line segment (a pair of cars), determine if they collide.\n  A collision occurs when a car that moves left is hit by a car that moves right.\n  A collision occurs when a car that moves right is hit by a car that moves left.\n  A collision occurs when a car that moves left is hit by a car that moves right.\n  A collision occurs when a car that moves right is hit by a car that moves left.\n  A collision occurs when a car that moves left is hit by a car that moves right.\n  A collision occurs when a car that moves right is hit by a car that moves left.\n  A collision occurs when a car that moves left is hit by a car that moves right.\n  A collision occurs when a car that moves right is hit by a car that moves left.\n  A collision occurs when a car that moves left is hit by a car that moves right.\n  A collision occurs when a car that moves right is hit by a car that moves left.\n  A collision occurs when a car that moves left is hit by a car that moves right.\n  A collision occurs when a car that moves right is hit by a car that moves left.\n  A collision occurs when a car that moves left is hit by a car that moves right.\n  A collision occurs when a car that moves right is hit by a car that moves left.\n  A collision occurs when a car that moves left is hit by a car that moves right.\n  A collision occurs when a car that moves right is hit by a car that moves left.\n  A collision occurs when a car that moves left is hit by a car that moves right.\n  A collision occurs when a car that moves right is hit by a car that moves left.\n  A collision occurs when a car that moves left is hit by a car that moves right.\n  A collision occurs when a car that moves right is hit by a car that moves left.\n  A collision occurs when a car that moves left is hit by a car that moves right.\n  A collision occurs when a car that moves right is hit by a car that moves left.\n  A collision occurs when a car that moves left is hit by a car that moves right.\n  A collision occurs when a car that moves right is hit by a car that moves left.\n  A collision occurs when a car that moves left is hit by a car that moves right.\n  A collision occurs when a car that moves right is hit by a car that moves left.\n  A collision occurs when a car that moves left is hit by a car that moves right.\n  A collision occurs when a car that moves right is hit by a car that moves left.\n  A collision occurs when a car that moves left is hit by a car that moves right.\n  A collision occurs when a car that moves right is hit by a car that moves left.\n  A collision occurs when a car that moves left is hit by a car that moves right.\n  A collision occurs when a car that moves right is hit by a car that moves left.\n  A collision occurs when a car that moves left is hit by a car that moves right.\n  A collision occurs when a car that moves right is hit by a car that moves left.\n  A collision occurs when a car that moves left is hit by a car that moves right.\n  A collision occurs when a car that moves right is hit by a car that moves left.\n  A collision occurs when a car that moves left is hit by a car that moves right.\n  A collision occurs when a car that moves right is hit by a car that moves left.\n  A collision occurs when a car that moves left is hit by a car that moves right.\n  A collision occurs when a car that moves right is hit by a car that moves left.\n  A collision occurs when a car that moves left is hit by a car that moves right.\n  A collision occurs when a car that moves right is hit by a car that moves left.\n  A collision occurs when a car that moves left is hit by a car that moves right.\n  A collision occurs when a car that moves right is hit by a car that moves left.\n  A collision occurs when a car that moves left is hit by a car that moves right.\n  A collision occurs when a car that moves right is hit by a car that moves left.\n  A collision occurs when a car that moves left is hit by a car that moves right.\n  A collision occurs when a car that moves right is hit by a car that moves left.\n  A collision occurs when a car that moves left is hit by a car that moves right.\n  A collision occurs when a car that moves right is hit by a car that moves left.\n  A collision occurs when a car that moves left is hit by a car that moves right.\n  A collision occurs when a car that moves right is hit by a car that moves left.\n  A collision occurs when a car that moves left is hit by a car that moves right.\n  A collision occurs when a car that moves right is hit by a car that moves left.\n  A collision occurs when a car that moves left is hit by a car that moves right.\n  A collision occurs when a car that moves right is hit by a car that moves left.\n  A collision occurs when a car that moves left is hit by a car that move", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "gc": "<|endoftext|>/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let i = l.length - 1;\n  let res = new Array(i);\n  while (i--) {\n    res[i] = l[i + 1] + 1;\n  }\n  return res;\n};\n\n/*Return list with elements decremented by 1.\n  >>> decrList([1, 2, 3])\n  [2, 3, 4]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decrList = (l) => {\n  let i = l.length - 1;\n  let res = new Array(i);\n  while (i--) {\n    res[i] = l[i + 1] - 1;\n  }\n  return res;\n};\n\n/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrDecrList = (l) => {\n  let i = l.length - 1;\n  let res = new Array(i);\n  while (i--) {\n    res[i] = l[i + 1] + l[i + 1];\n  }\n  return res;\n};\n\n/*Return list with elements decremented by 1.\n  >>> decrList([1, 2, 3])\n  [2, 3, 4]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decrDecrList = (l) => {\n  let i = l.length - 1;\n  let res = new Array(i);\n  while (i--) {\n    res[i] = l[i + 1] - l[i + 1];\n  }\n  return res;\n};\n\n/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrDecrDecrList = (l) => {\n  let i = l.length - 1;\n  let res = new Array(i);\n  while (i--) {\n    res[i] = l[i + 1] + l[i + 1];\n  }\n  return res;\n};\n\n/*Return list with elements incremented by 1.\n  >>> decrList([1, 2, 3])\n  [2, 3, 4]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decrDecrDecrList = (l) => {\n  let i = l.length - 1;\n  let res = new Array(i);\n  while (i--) {\n    res[i] = l[i + 1] - l[i + 1];\n  }\n  return res;\n};\n\n/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrDecrDecrDecrList = (l) => {\n  let i = l.length - 1;\n  let res = new Array(i);\n  while (i--) {\n    res[i] = l[i + 1] + l[i + 1];\n  }\n  return res;\n};\n\n/*Return list with elements incremented by 1.\n  >>> decrList([1, 2, 3])\n  [2, 3, 4]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decrDecrDecrDecrList = (l) => {\n  let i = l.length - 1;\n  let res = new Array(i);\n  while (i--) {\n    res[i] = l[i + 1] - l[i + 1];\n  }\n  return res;\n};\n\n/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrDecrDecrDecrDecrList = (l) => {\n  let i = l.length - 1;\n  let res = new Array(i);\n  while (i--) {\n    res[i] = l[i + 1] + l[i + 1];\n  }\n  return res;\n};\n\n/*Return list with elements incremented by 1.\n  >>> decrList([1, 2, 3])\n  [2, 3, 4]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decrDecrDecrDecrDecrList = (l) => {\n  let i = l.length - 1;\n  let res = new Array(i);\n  while (i--) {\n    res[i] = l[i + 1] - l[i + 1];\n  }\n  return res;\n};\n\n/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrDecrDecrDecrDecrList = (l) => {\n  let i = l.length - 1;\n  let res = new Array(i);\n  while (i--) {\n    res[i] = l[i + 1] + l[i + 1];\n  }\n  return res;\n};\n\n/*Return list with elements incremented by 1.\n  >>> decrList([1, 2, 3])\n  [2, 3, 4]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decrDecrDecrDecrDecrList = (l) => {\n  let i = l.length - 1;\n  let res = new Array(i);\n  while (i--) {\n    res[i] = l[i + 1] - l[i + 1];\n  }\n  return res;\n};\n\n/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrDecrDecrDecrDecrList = (l) => {\n  let i = l.length - 1;\n  let res = new Array(i);\n  while (i--) {\n    res[i] = l[i + 1] + l[i + 1];\n  }\n  return res;\n};\n\n/*Return list with elements incremented by 1.\n  >>> decrList([1, 2, 3])\n  [2, 3, 4]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decrDecrDecrDecrDecrList = (l) => {\n  let i = l.length - 1;\n  let res = new Array(i);\n  while (i--) {\n    res[i] = l[i + 1] - l[i + 1];\n  }\n  return res;\n};\n\n/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrDecrDecrDecrDecrList = (l) => {\n  let i = l.length - 1;\n  let res = new Array(i);\n  while (i--) {\n    res[i] = l[i + 1] + l[i + 1];\n  }\n  return res;\n};\n\n/*Return list with elements incremented by 1.\n  >>> decrList([1, 2, 3])\n  [2, 3, 4]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decrDecrDecrDecrDecrList = (l) => {\n  let i = l.length - 1;\n  let res = new Array(i);\n  while ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/43", "prompt": "/*\n  apirSsumoTZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> apirSsumoTZero([1, 3, 5, 0])\n  false\n  >>> apirSsumoTZero([1, 3, -2, 1])\n  false\n  >>> apirSsumoTZero([1, 2, 3, 7])\n  false\n  >>> apirSsumoTZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> apirSsumoTZero([1])\n  false\n  */\nconst apirSsumoTZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "apirSsumoTZero", "gc": "<|endoftext|>/*\n  apirSsumoTZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> apirSsumoTZero([1, 3, 5, 0])\n  false\n  >>> apirSsumoTZero([1, 3, -2, 1])\n  false\n  >>> apirSsumoTZero([1, 2, 3, 7])\n  false\n  >>> apirSsumoTZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> apirSsumoTZero([1])\n  false\n  */\nconst apirSsumoTZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n};\n\n/**\n  apirSsumoTZeroOrNull takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> apirSsumoTZeroOrNull([1, 3, 5, 0])\n  false\n  >>> apirSsumoTZeroOrNull([1, 3, -2, 1])\n  false\n  >>> apirSsumoTZeroOrNull([1, 2, 3, 7])\n  false\n  >>> apirSsumoTZeroOrNull([2, 4, -5, 3, 5, 7])\n  true\n  >>> apirSsumoTZeroOrNull([1])\n  false\n  */\nconst apirSsumoTZeroOrNull = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0 || sum === null;\n};\n\n/**\n  apirSsumoTZeroOrNull takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> apirSsumoTZeroOrNull([1, 3, 5, 0])\n  false\n  >>> apirSsumoTZeroOrNull([1, 3, -2, 1])\n  false\n  >>> apirSsumoTZeroOrNull([1, 2, 3, 7])\n  false\n  >>> apirSsumoTZeroOrNull([2, 4, -5, 3, 5, 7])\n  true\n  >>> apirSsumoTZeroOrNull([1])\n  false\n  */\nconst apirSsumoTZeroOrNullOrNull = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0 || sum === null || sum === null;\n};\n\n/**\n  apirSsumoTZeroOrNull takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> apirSsumoTZeroOrNullOrNull([1, 3, 5, 0])\n  false\n  >>> apirSsumoTZeroOrNullOrNull([1, 3, -2, 1])\n  false\n  >>> apirSsumoTZeroOrNullOrNull([1, 2, 3, 7])\n  false\n  >>> apirSsumoTZeroOrNullOrNull([2, 4, -5, 3, 5, 7])\n  true\n  >>> apirSsumoTZeroOrNullOrNull([1])\n  false\n  */\nconst apirSsumoTZeroOrNullOrNullOrNull = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0 || sum === null || sum === null;\n};\n\n/**\n  apirSsumoTZeroOrNull takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> apirSsumoTZeroOrNullOrNullOrNull([1, 3, 5, 0])\n  false\n  >>> apirSsumoTZeroOrNullOrNullOrNullOrNull([1, 3, -2, 1])\n  false\n  >>> apirSsumoTZeroOrNullOrNullOrNullOrNull([1, 2, 3, 7])\n  false\n  >>> apirSsumoTZeroOrNullOrNullOrNullOrNull([2, 4, -5, 3, 5, 7])\n  true\n  >>> apirSsumoTZeroOrNullOrNullOrNullOrNull([1])\n  false\n  */\nconst apirSsumoTZeroOrNullOrNullOrNullOrNull = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0 || sum === null || sum === null;\n};\n\n/**\n  apirSsumoTZeroOrNull takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> apirSsumoTZeroOrNullOrNullOrNullOrNullOrNull([1, 3, 5, 0])\n  false\n  >>> apirSsumoTZeroOrNullOrNullOrNullOrNullOrNull([1, 3, -2, 1])\n  false\n  >>> apirSsumoTZeroOrNullOrNullOrNullOrNullOrNull([1, 2, 3, 7])\n  false\n  >>> apirSsumoTZeroOrNullOrNullOrNullOrNullOrNull([2, 4, -5, 3, 5, 7])\n  true\n  >>> apirSsumoTZeroOrNullOrNullOrNullOrNullOrNull([1])\n  false\n  */\nconst apirSsumoTZeroOrNullOrNullOrNullOrNullOrNull = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0 || sum === null || sum === null;\n};\n\n/**\n  apirSsumoTZeroOrNull takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> apirSsumoTZeroOrNull takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> apirSsumoTZeroOrNull takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> apirSsumoTZeroOrNull takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> apirSsumoTZeroOrNull takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> apirSsumoTZeroOrNull takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> apirSsumoTZeroOrNull takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> apirSsumoTZeroOrNull takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> apirSsumoTZeroOrNull takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> apirSsumoTZeroOrNull takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "gc": "<|endoftext|>/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  if (base === 10) return x.toString();\n  if (base === 2) return x.toFixed(2).toString();\n  if (base === 3) return x.toExponential(2).toString();\n  if (base === 4) return x.toFixed(3).toString();\n  if (base === 5) return x.toExponential(3).toString();\n  if (base === 6) return x.toFixed(4).toString();\n  if (base === 7) return x.toExponential(4).toString();\n  if (base === 8) return x.toFixed(5).toString();\n  if (base === 9) return x.toExponential(5).toString();\n  if (base === 10) return x.toFixed(6).toString();\n  if (base === 11) return x.toExponential(6).toString();\n  if (base === 12) return x.toFixed(7).toString();\n  if (base === 13) return x.toExponential(7).toString();\n  if (base === 14) return x.toFixed(8).toString();\n  if (base === 15) return x.toExponential(8).toString();\n  if (base === 16) return x.toFixed(9).toString();\n  if (base === 17) return x.toExponential(9).toString();\n  if (base === 18) return x.toFixed(10).toString();\n  if (base === 19) return x.toExponential(10).toString();\n  if (base === 20) return x.toFixed(11).toString();\n  if (base === 21) return x.toExponential(11).toString();\n  if (base === 22) return x.toFixed(12).toString();\n  if (base === 23) return x.toExponential(12).toString();\n  if (base === 24) return x.toFixed(13).toString();\n  if (base === 25) return x.toExponential(13).toString();\n  if (base === 26) return x.toFixed(14).toString();\n  if (base === 27) return x.toExponential(14).toString();\n  if (base === 28) return x.toFixed(15).toString();\n  if (base === 29) return x.toExponential(15).toString();\n  if (base === 30) return x.toFixed(16).toString();\n  if (base === 31) return x.toExponential(16).toString();\n  if (base === 32) return x.toFixed(17).toString();\n  if (base === 33) return x.toExponential(17).toString();\n  if (base === 34) return x.toFixed(18).toString();\n  if (base === 35) return x.toExponential(18).toString();\n  if (base === 36) return x.toFixed(19).toString();\n  if (base === 37) return x.toExponential(19).toString();\n  if (base === 38) return x.toFixed(20).toString();\n  if (base === 39) return x.toExponential(20).toString();\n  if (base === 40) return x.toFixed(21).toString();\n  if (base === 41) return x.toExponential(21).toString();\n  if (base === 42) return x.toFixed(22).toString();\n  if (base === 43) return x.toExponential(22).toString();\n  if (base === 44) return x.toFixed(23).toString();\n  if (base === 45) return x.toExponential(23).toString();\n  if (base === 46) return x.toFixed(24).toString();\n  if (base === 47) return x.toExponential(24).toString();\n  if (base === 48) return x.toFixed(25).toString();\n  if (base === 49) return x.toExponential(25).toString();\n  if (base === 50) return x.toFixed(26).toString();\n  if (base === 51) return x.toExponential(26).toString();\n  if (base === 52) return x.toFixed(27).toString();\n  if (base === 53) return x.toExponential(27).toString();\n  if (base === 54) return x.toFixed(28).toString();\n  if (base === 55) return x.toExponential(28).toString();\n  if (base === 56) return x.toFixed(29).toString();\n  if (base === 57) return x.toExponential(29).toString();\n  if (base === 58) return x.toFixed(30).toString();\n  if (base === 59) return x.toExponential(30).toString();\n  if (base === 60) return x.toFixed(31).toString();\n  if (base === 61) return x.toExponential(31).toString();\n  if (base === 62) return x.toFixed(32).toString();\n  if (base === 63) return x.toExponential(32).toString();\n  if (base === 64) return x.toFixed(33).toString();\n  if (base === 65) return x.toExponential(33).toString();\n  if (base === 66) return x.toFixed(34).toString();\n  if (base === 67) return x.toExponential(34).toString();\n  if (base === 68) return x.toFixed(35).toString();\n  if (base === 69) return x.toExponential(35).toString();\n  if (base === 70) return x.toFixed(36).toString();\n  if (base === 71) return x.toExponential(36).toString();\n  if (base === 72) return x.toFixed(37).toString();\n  if (base === 73) return x.toExponential(37).toString();\n  if (base === 74) return x.toFixed(38).toString();\n  if (base === 75) return x.toExponential(38).toString();\n  if (base === 76) return x.toFixed(39).toString();\n  if (base === 77) return x.toExponential(39).toString();\n  if (base === 78) return x.toFixed(40).toString();\n  if (base === 79) return x.toExponential(40).toString();\n  if (base === 80) return x.toFixed(41).toString();\n  if (base === 81) return x.toExponential(41).toString();\n  if (base === 82) return x.toFixed(42).toString();\n  if (base === 83) return x.toExponential(42).toString();\n  if (base === 84) return x.toFixed(43).toString();\n  if (base === 85) return x.toExponential(43).toString();\n  if (base === 86) return x.toFixed(44).toString();\n  if (base === 87) return x.toExponential(44).toString();\n  if (base === 88) return x.toFixed(45).toString();\n  if (base === 89) return x.toExponential(45).toString();\n  if (base === 90) return x.toFixed(46).toString();\n  if (base === 91) return x.toExponential(46).toString();\n  if (base === 92) return x.toFixed(47).toString();\n  if (base === 93) return x.toExponential(47).toString();\n  if (base === 94) return x.toFixed(48).toString();\n  if (base === 95) return x.toExponential(48).toString();\n  if (base === 96) return x.toFixed(49).toString();\n  if (base === 97) return x.toExponential(49).toString();\n  if (base === 98) return x.toFixed(50).toString();\n  if (base === 99) return x.toExponential(50).toString();\n  if (base === 100) return x.toExponential(51).toString();\n  if (base === 101) return x.toFixed(52).toString();\n  if (base === 102) return x.toExponential(52).toString();\n  if (base === 103) return x.toFixed(53).toString();\n  if (base === 104) return x.toExponential(53).toString();\n  if (base === 105) return x.toFixed(54).toString();\n  if (base === 106) return x.toExponential(54).toString();\n  if (base === 107) return x.toFixed(55).toString();\n  if (base === 108) return x.toExponential(55).toString();\n  if (base === 109) return x.toFixed(", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "gc": "<|endoftext|>/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.sqrt(a * a + h * h);\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangleArea(3, 5)\n  15\n  */\nconst triangleArea = (b, w) => {\n  return Math.sqrt(b * b + w * w);\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangleArea(6, 5)\n  25\n  */\nconst triangleArea = (c, d) => {\n  return Math.sqrt(c * c + d * d);\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangleArea(7, 5)\n  35\n  */\nconst triangleArea = (e, f) => {\n  return Math.sqrt(e * e + f * f);\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangleArea(8, 5)\n  55\n  */\nconst triangleArea = (g, h) => {\n  return Math.sqrt(g * g + h * h);\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangleArea(9, 5)\n  75\n  */\nconst triangleArea = (i, j) => {\n  return Math.sqrt(i * i + j * j);\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangleArea(10, 5)\n  105\n  */\nconst triangleArea = (k, l) => {\n  return Math.sqrt(k * k + l * l);\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangleArea(11, 5)\n  115\n  */\nconst triangleArea = (m, n) => {\n  return Math.sqrt(m * m + n * n);\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangleArea(12, 5)\n  125\n  */\nconst triangleArea = (o, p) => {\n  return Math.sqrt(o * o + p * p);\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangleArea(13, 5)\n  135\n  */\nconst triangleArea = (q, r) => {\n  return Math.sqrt(q * q + r * r);\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangleArea(14, 5)\n  145\n  */\nconst triangleArea = (s, t) => {\n  return Math.sqrt(s * s + t * t);\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangleArea(15, 5)\n  155\n  */\nconst triangleArea = (u, v) => {\n  return Math.sqrt(u * u + v * v);\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangleArea(16, 5)\n  165\n  */\nconst triangleArea = (w, x) => {\n  return Math.sqrt(w * w + x * x);\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangleArea(17, 5)\n  175\n  */\nconst triangleArea = (y, z) => {\n  return Math.sqrt(y * y + z * z);\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangleArea(18, 5)\n  185\n  */\nconst triangleArea = (x, w) => {\n  return Math.sqrt(x * x + w * w);\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangleArea(19, 5)\n  195\n  */\nconst triangleArea = (z, y) => {\n  return Math.sqrt(z * z + y * y);\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangleArea(20, 5)\n  205\n  */\nconst triangleArea = (w, x) => {\n  return Math.sqrt(w * w + x * x);\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangleArea(21, 5)\n  211\n  */\nconst triangleArea = (y, z) => {\n  return Math.sqrt(y * y + z * z);\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangleArea(22, 5)\n  222\n  */\nconst triangleArea = (x, w) => {\n  return Math.sqrt(x * x + w * w);\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangleArea(23, 5)\n  233\n  */\nconst triangleArea = (w, y) => {\n  return Math.sqrt(w * w + y * y);\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangleArea(24, 5)\n  243\n  */\nconst triangleArea = (y, z) => {\n  return Math.sqrt(y * y + z * z);\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangleArea(25, 5)\n  255\n  */\nconst triangleArea = (x, w) => {\n  return Math.sqrt(x * x + w * w);\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangleArea(26, 5)\n  265\n  */\nconst triangleArea = (y, z) => {\n  return Math.sqrt(y * y + z * z);\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangleArea(27, 5)\n  277\n  */\nconst triangleArea = (x, w) => {\n  return Math.sqrt(x * x + w * w);\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangleArea(28, 5)\n  283\n  */\nconst triangleArea = (y, z) => {\n  return Math.sqrt(y * y + z * z);\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangleArea(29, 5)\n  293\n  */\nconst triangleArea = (x, w) => {\n  return Math.sqrt(x * x + w * w);\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangleArea(30, 5)\n  303\n  */\nconst triangleArea = (y, z) => {\n  return Math.sqrt(y * y + z * z);\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangleArea(31, 5)\n  313\n  */\nconst triangleArea = (x, w) => {\n  return Math.sqrt(x * x + w * w);\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangleArea(32, 5)\n  323\n  */\nconst triangleArea = (y, z) => {\n  return Math.sqrt(y * y + z * z);\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangleArea(33, 5)\n  333\n  */\nconst triangleArea = (x, w) => {\n  return Math.sqrt(x * x + w * w);\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangleArea(34, 5)\n  343\n  */\nconst triangleArea = (y, z) => {\n  return Math.sqrt(y * y + z * z);\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangleArea(35, 5)\n  353\n  */\nconst triangleArea = (x, w) => {\n  return Math.sqrt(x * x + w * w);\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangleArea(36, 5)\n  363\n  */\nconst triangleArea = (y, z) => {\n  return Math.sqrt(y * y + z * z);\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangleArea(37, 5)", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "gc": "<|endoftext|>/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n < 2) return n;\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n};\n\n/*The Fib5 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib5(0) -> 0\n  fib5(1) -> 1\n  fib5(2) -> 1\n  fib5(3) -> 1\n  fib5(n) -> fib5(n-1) + fib5(n-2) + fib5(n-3) + fib5(n-4) + fib5(n-5).\n  Please write a function to efficiently compute the n-th element of the fib5 number sequence.  Do not use recursion.\n  >>> fib5(5)\n  5\n  >>> fib5(6)\n  8\n  >>> fib5(7)\n  13\n  */\nconst fib5 = (n) => {\n  if (n < 2) return n;\n  return fib5(n - 1) + fib5(n - 2) + fib5(n - 3) + fib5(n - 4) + fib5(n - 5);\n};\n\n/*The Fib6 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib6(0) -> 0\n  fib6(1) -> 1\n  fib6(2) -> 1\n  fib6(3) -> 1\n  fib6(n) -> fib6(n-1) + fib6(n-2) + fib6(n-3) + fib6(n-4) + fib6(n-5) + fib6(n-6).\n  Please write a function to efficiently compute the n-th element of the fib6 number sequence.  Do not use recursion.\n  >>> fib6(6)\n  6\n  >>> fib6(7)\n  13\n  */\nconst fib6 = (n) => {\n  if (n < 2) return n;\n  return fib6(n - 1) + fib6(n - 2) + fib6(n - 3) + fib6(n - 4) + fib6(n - 5) + fib6(n - 6);\n};\n\n/*The Fib7 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib7(0) -> 0\n  fib7(1) -> 1\n  fib7(2) -> 1\n  fib7(3) -> 1\n  fib7(n) -> fib7(n-1) + fib7(n-2) + fib7(n-3) + fib7(n-4) + fib7(n-5) + fib7(n-6) + fib7(n-7).\n  Please write a function to efficiently compute the n-th element of the fib7 number sequence.  Do not use recursion.\n  >>> fib7(7)\n  7\n  >>> fib7(8)\n  13\n  */\nconst fib7 = (n) => {\n  if (n < 2) return n;\n  return fib7(n - 1) + fib7(n - 2) + fib7(n - 3) + fib7(n - 4) + fib7(n - 5) + fib7(n - 6) + fib7(n - 7);\n};\n\n/*The Fib8 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib8(0) -> 0\n  fib8(1) -> 1\n  fib8(2) -> 1\n  fib8(3) -> 1\n  fib8(n) -> fib8(n-1) + fib8(n-2) + fib8(n-3) + fib8(n-4) + fib8(n-5) + fib8(n-6) + fib8(n-7) + fib8(n-8).\n  Please write a function to efficiently compute the n-th element of the fib8 number sequence.  Do not use recursion.\n  >>> fib8(8)\n  8\n  >>> fib8(9)\n  13\n  */\nconst fib8 = (n) => {\n  if (n < 2) return n;\n  return fib8(n - 1) + fib8(n - 2) + fib8(n - 3) + fib8(n - 4) + fib8(n - 5) + fib8(n - 6) + fib8(n - 7) + fib8(n - 8);\n};\n\n/*The Fib9 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib9(0) -> 0\n  fib9(1) -> 1\n  fib9(2) -> 1\n  fib9(3) -> 1\n  fib9(n) -> fib9(n-1) + fib9(n-2) + fib9(n-3) + fib9(n-4) + fib9(n-5) + fib9(n-6) + fib9(n-7) + fib9(n-8) + fib9(n-9).\n  Please write a function to efficiently compute the n-th element of the fib9 number sequence.  Do not use recursion.\n  >>> fib9(9)\n  9\n  >>> fib9(10)\n  15\n  */\nconst fib9 = (n) => {\n  if (n < 2) return n;\n  return fib9(n - 1) + fib9(n - 2) + fib9(n - 3) + fib9(n - 4) + fib9(n - 5) + fib9(n - 6) + fib9(n - 7) + fib9(n - 8) + fib9(n - 9) + fib9(n - 10);\n};\n\n/*The Fib10 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib10(0) -> 0\n  fib10(1) -> 1\n  fib10(2) -> 1\n  fib10(3) -> 1\n  fib10(n) -> fib10(n-1) + fib10(n-2) + fib10(n-3) + fib10(n-4) + fib10(n-5) + fib10(n-6) + fib10(n-7) + fib10(n-8) + fib10(n-9) + fib10(n-10).\n  Please write a function to efficiently compute the n-th element of the fib10 number sequence.  Do not use recursion.\n  >>> fib10(10)\n  10\n  >>> fib10(11)\n  15\n  */\nconst fib10 = (n) => {\n  if (n < 2) return n;\n  return fib10(n - 1) + fib10(n - 2) + fib10(n - 3) + fib10(n - 4) + fib10(n - 5) + fib10(n - 6) + fib10(n - 7) + fib10(n - 8) + fib10(n - 9) + fib10(n - 10);\n};\n\n/*The Fib11 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib11(0) -> 0\n  fib11(1) -> 1\n  fib11(2) -> 1\n  fib11(3) -> 1\n  fib11(n) -> fib11(n-1) + fib11(n-2) + fib11(n-3) + fib11(n-4) + fib11(n-5) + fib11(n-6) + fib11(n-7) + fib11(n-8) + fib11(n-9) + fib11(n-10) + fib11(n-11).\n  Please write a function to efficiently compute the n-th element of the fib11 number sequence.  Do not use recursion.\n  >>> fib11(11)\n  11\n  >>> fib11(12)\n  15\n  */\nconst fib11 = (n) => {\n  if (n < 2) return n;\n  return fib11(n - 1) + fib11(n - 2) + fib11(n - 3) + fib11(n - 4) + fib", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3}
{"task_id": "JavaScript/47", "prompt": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "gc": "<|endoftext|>/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  let n = l.length\n  if (n <= 1) return l[0]\n  let mid = Math.floor((n + 1) * ((n - 1) / 2))\n  return l[mid]\n}\n\n/*Return sum of elements in the list l.\n  >>> sum([3, 1, 2, 4, 5])\n  15\n  >>> sum([-10, 4, 6, 1000, 10, 20])\n  30\n  */\nconst sum = (l) => {\n  let n = l.length\n  if (n <= 1) return 0\n  let sum = 0\n  for (let i = 0; i < n; i++) {\n    sum += l[i]\n  }\n  return sum\n}\n\n/*Return product of elements in the list l.\n  >>> product([3, 1, 2, 4, 5])\n  6\n  >>> product([-10, 4, 6, 1000, 10, 20])\n  24\n  */\nconst product = (l) => {\n  let n = l.length\n  if (n <= 1) return 1\n  let product = 1\n  for (let i = 0; i < n; i++) {\n    product *= l[i]\n  }\n  return product\n}\n\n/*Return sum of squares of elements in the list l.\n  >>> sum([3, 1, 2, 4, 5])**2\n  15\n  >>> sum([-10, 4, 6, 1000, 10, 20])**2\n  30\n  */\nconst sumOfSquares = (l) => {\n  let n = l.length\n  if (n <= 1) return 0\n  let sum = 0\n  for (let i = 0; i < n; i++) {\n    sum += l[i] * l[i]\n  }\n  return sum\n}\n\n/*Return sum of absolute values of elements in the list l.\n  >>> sum([3, 1, 2, 4, 5])\n  15\n  >>> sum([-10, 4, 6, 1000, 10, 20])\n  30\n  */\nconst sumOfAbsoluteValues = (l) => {\n  let n = l.length\n  if (n <= 1) return 0\n  let sum = 0\n  for (let i = 0; i < n; i++) {\n    sum += Math.abs(l[i])\n  }\n  return sum\n}\n\n/*Return sum of absolute differences of elements in the list l.\n  >>> sum([3, 1, 2, 4, 5])\n  15\n  >>> sum([-10, 4, 6, 1000, 10, 20])\n  30\n  */\nconst sumOfAbsoluteDifferences = (l) => {\n  let n = l.length\n  if (n <= 1) return 0\n  let sum = 0\n  for (let i = 0; i < n; i++) {\n    sum += Math.abs(l[i] - l[n - 1 - i])\n  }\n  return sum\n}\n\n/*Return sum of absolute differences of elements in the list l.\n  >>> sum([3, 1, 2, 4, 5])\n  15\n  >>> sum([-10, 4, 6, 1000, 10, 20])\n  30\n  */\nconst sumOfAbsoluteDifference = (l) => {\n  let n = l.length\n  if (n <= 1) return 0\n  let sum = 0\n  for (let i = 0; i < n; i++) {\n    sum += Math.abs(l[i] - l[n - 1 - i])\n  }\n  return sum\n}\n\n/*Return sum of absolute differences of elements in the list l.\n  >>> sum([3, 1, 2, 4, 5])\n  15\n  >>> sum([-10, 4, 6, 1000, 10, 20])\n  30\n  */\nconst sumOfAbsoluteDifference = (l) => {\n  let n = l.length\n  if (n <= 1) return 0\n  let sum = 0\n  for (let i = 0; i < n; i++) {\n    sum += Math.abs(l[i] - l[n - 1 - i])\n  }\n  return sum\n}\n\n/*Return sum of absolute differences of elements in the list l.\n  >>> sum([3, 1, 2, 4, 5])\n  15\n  >>> sum([-10, 4, 6, 1000, 10, 20])\n  30\n  */\nconst sumOfAbsoluteDifference = (l) => {\n  let n = l.length\n  if (n <= 1) return 0\n  let sum = 0\n  for (let i = 0; i < n; i++) {\n    sum += Math.abs(l[i] - l[n - 1 - i])\n  }\n  return sum\n}\n\n/*Return sum of absolute differences of elements in the list l.\n  >>> sum([3, 1, 2, 4, 5])\n  15\n  >>> sum([-10, 4, 6, 1000, 10, 20])\n  30\n  */\nconst sumOfAbsoluteDifference = (l) => {\n  let n = l.length\n  if (n <= 1) return 0\n  let sum = 0\n  for (let i = 0; i < n; i++) {\n    sum += Math.abs(l[i] - l[n - 1 - i])\n  }\n  return sum\n}\n\n/*Return sum of absolute differences of elements in the list l.\n  >>> sum([3, 1, 2, 4, 5])\n  15\n  >>> sum([-10, 4, 6, 1000, 10, 20])\n  30\n  */\nconst sumOfAbsoluteDifference = (l) => {\n  let n = l.length\n  if (n <= 1) return 0\n  let sum = 0\n  for (let i = 0; i < n; i++) {\n    sum += Math.abs(l[i] - l[n - 1 - i])\n  }\n  return sum\n}\n\n/*Return sum of absolute differences of elements in the list l.\n  >>> sum([3, 1, 2, 4, 5])\n  15\n  >>> sum([-10, 4, 6, 1000, 10, 20])\n  30\n  */\nconst sumOfAbsoluteDifference = (l) => {\n  let n = l.length\n  if (n <= 1) return 0\n  let sum = 0\n  for (let i = 0; i < n; i++) {\n    sum += Math.abs(l[i] - l[n - 1 - i])\n  }\n  return sum\n}\n\n/*Return sum of absolute differences of elements in the list l.\n  >>> sum([3, 1, 2, 4, 5])\n  15\n  >>> sum([-10, 4, 6, 1000, 10, 20])\n  30\n  */\nconst sumOfAbsoluteDifference = (l) => {\n  let n = l.length\n  if (n <= 1) return 0\n  let sum = 0\n  for (let i = 0; i < n; i++) {\n    sum += Math.abs(l[i] - l[n - 1 - i])\n  }\n  return sum\n}\n\n/*Return sum of absolute differences of elements in the list l.\n  >>> sum([3, 1, 2, 4, 5])\n  15\n  >>> sum([-10, 4, 6, 1000, 10, 20])\n  30\n  */\nconst sumOfAbsoluteDifference = (l) => {\n  let n = l.length\n  if (n <= 1) return 0\n  let sum = 0\n  for (let i = 0; i < n; i++) {\n    sum += Math.abs(l[i] - l[n - 1 - i])\n  }\n  return sum\n}\n\n/*Return sum of absolute differences of elements in the list l.\n  >>> sum([3, 1, 2, 4, 5])\n  15\n  >>> sum([-10, 4, 6, 1000, 10, 20])\n  30\n  */\nconst sumOfAbsoluteDifference = (l) => {\n  let n = l.length\n  if (n <= 1) return 0\n  let sum = 0\n  for (let i = 0; i < n; i++) {\n    sum += Math.abs(l[i] - l[n - 1 - i])\n  }\n  return sum\n}\n\n/*Return sum of absolute differences of elements in the list l.\n  >>> sum([3, 1, 2, 4, 5])\n  15\n  >>> sum([-10, 4, 6, 1000, 10, 20])\n  30\n  */\nconst sumOfAbsoluteDifference = (l) => {\n  let n = l.length\n  if (n <= 1) return 0\n  let sum = 0\n  for (let i = 0; i < n; i++) {\n    sum += Math.abs(l[i] - l[n - 1 - i])\n  }\n  return sum\n}\n\n/*Return sum of absolute differences of elements in the list l.\n  >>> sum([3, 1, 2, 4, 5])\n  15\n  >>> sum([-10, 4, 6, 1000, 10, 20])\n  30\n  */\nconst sumOfAbsoluteDifference = (l) => {\n  let n = l.length\n  if (n <= 1) return 0\n  let sum = 0\n  for (let i = 0; i < n; i++) {\n    sum += Math.abs(l[i] - l[n - 1 - i])\n  }\n  return sum\n}\n\n/*Return sum of absolute differences of elements in the list l.\n  >>> sum([3, 1, 2, 4, 5])\n  15\n  >>> sum([-10, 4, 6, 1000, 10, 20])\n  30\n  */\nconst sumOfAbsoluteDifference = (l) => {\n  let n = l.length\n  if (n <= 1) return 0\n  let sum = 0\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "gc": "<|endoftext|>/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let reversedText = text\n  reversedText = reversedText.split('').reverse().join('')\n  return reversedText === text\n}\n\n/*\n  Checks if given string is a palindrome (case insensitive)\n  >>> isPalindromeCaseInsensitive('')\n  true\n  >>> isPalindromeCaseInsensitive('aba')\n  true\n  >>> isPalindromeCaseInsensitive('aaaaa')\n  true\n  >>> isPalindromeCaseInsensitive('zbcd')\n  false\n  */\nconst isPalindromeCaseInsensitive = (text) => {\n  let reversedText = text\n  reversedText = reversedText.split('').reverse().join('')\n  return reversedText.toLowerCase() === text.toLowerCase()\n}\n\n/*\n  Checks if given string is a palindrome (case sensitive)\n  >>> isPalindromeCaseSensitive('')\n  true\n  >>> isPalindromeCaseSensitive('aba')\n  true\n  >>> isPalindromeCaseSensitive('aaaaa')\n  true\n  >>> isPalindromeCaseSensitive('zbcd')\n  false\n  */\nconst isPalindromeCaseSensitive = (text) => {\n  let reversedText = text\n  reversedText = reversedText.split('').reverse().join('')\n  return reversedText.toUpperCase() === text.toUpperCase()\n}\n\n/*\n  Checks if given string is a palindrome (case insensitive)\n  >>> isPalindromeCaseInsensitiveCaseSensitive('')\n  true\n  >>> isPalindromeCaseInsensitiveCaseSensitive('aba')\n  true\n  >>> isPalindromeCaseInsensitiveCaseSensitive('aaaaa')\n  true\n  >>> isPalindromeCaseInsensitiveCaseSensitive('zbcd')\n  false\n  */\nconst isPalindromeCaseInsensitiveCaseSensitive = (text) => {\n  let reversedText = text\n  reversedText = reversedText.split('').reverse().join('')\n  return reversedText.toUpperCase().toLowerCase() === text.toLowerCase().toUpperCase()\n}\n\n/*\n  Checks if given string is a palindrome (case sensitive)\n  >>> isPalindromeCaseSensitiveCaseSensitive('')\n  true\n  >>> isPalindromeCaseSensitiveCaseSensitive('aba')\n  true\n  >>> isPalindromeCaseSensitiveCaseSensitive('aaaaa')\n  true\n  >>> isPalindromeCaseSensitiveCaseSensitive('zbcd')\n  false\n  */\nconst isPalindromeCaseSensitiveCaseSensitive = (text) => {\n  let reversedText = text\n  reversedText = reversedText.split('').reverse().join('')\n  return reversedText.toUpperCase().toUpperCase() === text.toUpperCase().toUpperCase()\n}\n\n/*\n  Checks if given string is a palindrome (case insensitive)\n  >>> isPalindromeCaseInsensitiveCaseSensitiveCaseSensitive('')\n  true\n  >>> isPalindromeCaseInsensitiveCaseSensitiveCaseSensitive('aba')\n  true\n  >>> isPalindromeCaseInsensitiveCaseSensitiveCaseSensitive('aaaaa')\n  true\n  >>> isPalindromeCaseInsensitiveCaseSensitiveCaseSensitive('zbcd')\n  false\n  */\nconst isPalindromeCaseInsensitiveCaseSensitiveCaseSensitive = (text) => {\n  let reversedText = text\n  reversedText = reversedText.split('').reverse().join('')\n  return reversedText.toUpperCase().toUpperCase().toLowerCase() === text.toLowerCase().toUpperCase().toLowerCase()\n}\n\n/*\n  Checks if given string is a palindrome (case sensitive)\n  >>> isPalindromeCaseSensitiveCaseSensitiveCaseSensitive('')\n  true\n  >>> isPalindromeCaseSensitiveCaseSensitiveCaseSensitive('aba')\n  true\n  >>> isPalindromeCaseSensitiveCaseSensitiveCaseSensitive('aaaaa')\n  true\n  >>> isPalindromeCaseSensitiveCaseSensitiveCaseSensitive('zbcd')\n  false\n  */\nconst isPalindromeCaseSensitiveCaseSensitiveCaseSensitive = (text) => {\n  let reversedText = text\n  reversedText = reversedText.split('').reverse().join('')\n  return reversedText.toUpperCase().toUpperCase().toUpperCase() === text.toUpperCase().toUpperCase().toUpperCase()\n}\n\n/*\n  Checks if given string is a palindrome (case insensitive)\n  >>> isPalindromeCaseInsensitiveCaseSensitiveCaseSensitiveCaseSensitive('')\n  true\n  >>> isPalindromeCaseInsensitiveCaseSensitiveCaseSensitiveCaseSensitive('aba')\n  true\n  >>> isPalindromeCaseInsensitiveCaseSensitiveCaseSensitiveCaseSensitive('aaaaa')\n  true\n  >>> isPalindromeCaseInsensitiveCaseSensitiveCaseSensitiveCaseSensitive('zbcd')\n  false\n  */\nconst isPalindromeCaseInsensitiveCaseSensitiveCaseSensitiveCaseSensitive = (text) => {\n  let reversedText = text\n  reversedText = reversedText.split('').reverse().join('')\n  return reversedText.toUpperCase().toUpperCase().toUpperCase().toLowerCase() === text.toLowerCase().toUpperCase().toLowerCase().toLowerCase()\n}\n\n/*\n  Checks if given string is a palindrome (case sensitive)\n  >>> isPalindromeCaseSensitiveCaseSensitiveCaseSensitiveCaseSensitive('')\n  true\n  >>> isPalindromeCaseSensitiveCaseSensitiveCaseSensitiveCaseSensitive('aba')\n  true\n  >>> isPalindromeCaseSensitiveCaseSensitiveCaseSensitiveCaseSensitive('aaaaa')\n  true\n  >>> isPalindromeCaseSensitiveCaseSensitiveCaseSensitiveCaseSensitive('zbcd')\n  false\n  */\nconst isPalindromeCaseSensitiveCaseSensitiveCaseSensitiveCaseSensitive = (text) => {\n  let reversedText = text\n  reversedText = reversedText.split('').reverse().join('')\n  return reversedText.toUpperCase().toUpperCase().toUpperCase().toUpperCase() === text.toUpperCase().toUpperCase().toUpperCase().toUpperCase()\n}\n\n/*\n  Checks if given string is a palindrome (case insensitive)\n  >>> isPalindromeCaseInsensitiveCaseSensitiveCaseSensitiveCaseSensitiveCaseSensitive('')\n  true\n  >>> ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "gc": "<|endoftext|>/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  if (n < 0 || p < 0) {\n    throw new Error('modp requires positive integers');\n  }\n  if (p === 0 || p === 1) {\n    return n;\n  }\n  return ((n % p) + p) % p;\n};\n\n/**\n * Returns the number of bits needed to represent a positive integer.\n * This is used to determine if an integer is even or odd.\n *\n * >>> bits(123)\n * 8\n * >>> bits(-123)\n * 7\n * >>> bits(123)\n * 7\n * >>> bits(-123)\n * 6\n * >>> bits(123)\n * 6\n * >>> bits(-123)\n * 5\n * >>> bits(123)\n * 5\n * >>> bits(-123)\n * 4\n * >>> bits(123)\n * 4\n * >>> bits(-123)\n * 3\n * >>> bits(123)\n * 3\n * >>> bits(-123)\n * 2\n * >>> bits(123)\n * 2\n * >>> bits(-123)\n * 1\n * >>> bits(123)\n * 1\n * >>> bits(-123)\n * 0\n * >>> bits(123)\n * 0\n * >>> bits(-123)\n * -1\n * >>> bits(123)\n * -1\n * >>> bits(-123)\n * -2\n * >>> bits(123)\n * -2\n * >>> bits(-123)\n * -3\n * >>> bits(123)\n * -3\n * >>> bits(-123)\n * -4\n * >>> bits(123)\n * -4\n * >>> bits(-123)\n * -5\n * >>> bits(123)\n * -5\n * >>> bits(-123)\n * -6\n * >>> bits(123)\n * -6\n * >>> bits(-123)\n * -7\n * >>> bits(123)\n * -7\n * >>> bits(-123)\n * -8\n * >>> bits(123)\n * -8\n * >>> bits(-123)\n * -9\n * >>> bits(123)\n * -9\n * >>> bits(-123)\n * -10\n * >>> bits(123)\n * -10\n * >>> bits(-123)\n * -11\n * >>> bits(123)\n * -11\n * >>> bits(-123)\n * -12\n * >>> bits(123)\n * -12\n * >>> bits(-123)\n * -13\n * >>> bits(123)\n * -13\n * >>> bits(-123)\n * -14\n * >>> bits(123)\n * -14\n * >>> bits(-123)\n * -15\n * >>> bits(123)\n * -15\n * >>> bits(-123)\n * -16\n * >>> bits(123)\n * -16\n * >>> bits(-123)\n * -17\n * >>> bits(123)\n * -17\n * >>> bits(-123)\n * -18\n * >>> bits(123)\n * -18\n * >>> bits(-123)\n * -19\n * >>> bits(123)\n * -19\n * >>> bits(-123)\n * -20\n * >>> bits(123)\n * -20\n * >>> bits(-123)\n * -21\n * >>> bits(123)\n * -21\n * >>> bits(-123)\n * -22\n * >>> bits(123)\n * -22\n * >>> bits(-123)\n * -23\n * >>> bits(123)\n * -23\n * >>> bits(-123)\n * -24\n * >>> bits(123)\n * -24\n * >>> bits(-123)\n * -25\n * >>> bits(123)\n * -25\n * >>> bits(-123)\n * -26\n * >>> bits(123)\n * -26\n * >>> bits(-123)\n * -27\n * >>> bits(123)\n * -27\n * >>> bits(-123)\n * -28\n * >>> bits(123)\n * -28\n * >>> bits(-123)\n * -29\n * >>> bits(123)\n * -29\n * >>> bits(-123)\n * -30\n * >>> bits(123)\n * -30\n * >>> bits(-123)\n * -31\n * >>> bits(123)\n * -31\n * >>> bits(-123)\n * -32\n * >>> bits(123)\n * -32\n * >>> bits(-123)\n * -33\n * >>> bits(123)\n * -33\n * >>> bits(-123)\n * -34\n * >>> bits(123)\n * -34\n * >>> bits(-123)\n * -35\n * >>> bits(123)\n * -35\n * >>> bits(-123)\n * -36\n * >>> bits(123)\n * -36\n * >>> bits(-123)\n * -37\n * >>> bits(123)\n * -37\n * >>> bits(-123)\n * -38\n * >>> bits(123)\n * -38\n * >>> bits(-123)\n * -39\n * >>> bits(123)\n * -39\n * >>> bits(-123)\n * -40\n * >>> bits(123)\n * -40\n * >>> bits(-123)\n * -41\n * >>> bits(123)\n * -41\n * >>> bits(-123)\n * -42\n * >>> bits(123)\n * -42\n * >>> bits(-123)\n * -43\n * >>> bits(123)\n * -43\n * >>> bits(-123)\n * -44\n * >>> bits(123)\n * -44\n * >>> bits(-123)\n * -45\n * >>> bits(123)\n * -45\n * >>> bits(-123)\n * -46\n * >>> bits(123)\n * -46\n * >>> bits(-123)\n * -47\n * >>> bits(123)\n * -47\n * >>> bits(-123)\n * -48\n * >>> bits(123)\n * -48\n * >>> bits(-123)\n * -49\n * >>> bits(123)\n * -49\n * >>> bits(-123)\n * -50\n * >>> bits(123)\n * -50\n * >>> bits(-123)\n * -51\n * >>> bits(123)\n * -51\n * >>> bits(-123)\n * -52\n * >>> bits(123)\n * -52\n * >>> bits(-123)\n * -53\n * >>> bits(123)\n * -53\n * >>> bits(-123)\n * -54\n * >>> bits(123)\n * -54\n * >>> bits(-123)\n * -55\n * >>> bits(123)\n * -55\n * >>> bits(-123)\n * -56\n * >>> bits(123)\n * -56\n * >>> bits(-123)\n * -57\n * >>> bits(123)\n * -57\n * >>> bits(-123)\n * -58", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> interpserse([], 4)\n  []\n  >>> interpserse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst interpserse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "interpserse", "gc": "<|endoftext|>/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> interpserse([], 4)\n  []\n  >>> interpserse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst interpserse = (numbers, delimeter) => {\n  const result = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let n = 0\n  let n1 = numbers.length\n  let n2 = n1 + 1\n  let n3 = n2 + 1\n  let n4 = n3 + 1\n  let n5 = n4 + 1\n  let n6 = n5 + 1\n  let n7 = n6 + 1\n  let n8 = n7 + 1\n  let n9 = n8 + 1\n  let n10 = n9 + 1\n  let n11 = n10 + 1\n  let n12 = n11 + 1\n  let n13 = n12 + 1\n  let n14 = n13 + 1\n  let n15 = n14 + 1\n  let n16 = n15 + 1\n  let n17 = n16 + 1\n  let n18 = n17 + 1\n  let n19 = n18 + 1\n  let n20 = n19 + 1\n  let n21 = n20 + 1\n  let n22 = n21 + 1\n  let n23 = n22 + 1\n  let n24 = n23 + 1\n  let n25 = n24 + 1\n  let n26 = n25 + 1\n  let n27 = n26 + 1\n  let n28 = n27 + 1\n  let n29 = n28 + 1\n  let n30 = n29 + 1\n  let n31 = n30 + 1\n  let n32 = n31 + 1\n  let n33 = n32 + 1\n  let n34 = n33 + 1\n  let n35 = n34 + 1\n  let n36 = n35 + 1\n  let n37 = n36 + 1\n  let n38 = n37 + 1\n  let n39 = n38 + 1\n  let n40 = n39 + 1\n  let n41 = n40 + 1\n  let n42 = n41 + 1\n  let n43 = n42 + 1\n  let n44 = n43 + 1\n  let n45 = n44 + 1\n  let n46 = n45 + 1\n  let n47 = n46 + 1\n  let n48 = n47 + 1\n  let n49 = n48 + 1\n  let n50 = n49 + 1\n  let n51 = n50 + 1\n  let n52 = n51 + 1\n  let n53 = n52 + 1\n  let n54 = n53 + 1\n  let n55 = n54 + 1\n  let n56 = n55 + 1\n  let n57 = n56 + 1\n  let n58 = n57 + 1\n  let n59 = n58 + 1\n  let n60 = n59 + 1\n  let n61 = n60 + 1\n  let n62 = n61 + 1\n  let n63 = n62 + 1\n  let n64 = n63 + 1\n  let n65 = n64 + 1\n  let n66 = n65 + 1\n  let n67 = n66 + 1\n  let n68 = n67 + 1\n  let n69 = n68 + 1\n  let n70 = n69 + 1\n  let n71 = n70 + 1\n  let n72 = n71 + 1\n  let n73 = n72 + 1\n  let n74 = n73 + 1\n  let n75 = n74 + 1\n  let n76 = n75 + 1\n  let n77 = n76 + 1\n  let n78 = n77 + 1\n  let n79 = n78 + 1\n  let n80 = n79 + 1\n  let n81 = n80 + 1\n  let n82 = n81 + 1\n  let n83 = n82 + 1\n  let n84 = n83 + 1\n  let n85 = n84 + 1\n  let n86 = n85 + 1\n  let n87 = n86 + 1\n  let n88 = n87 + 1\n  let n89 = n88 + 1\n  let n90 = n89 + 1\n  let n91 = n90 + 1\n  let n92 = n91 + 1\n  let n93 = n92 + 1\n  let n94 = n93 + 1\n  let n95 = n94 + 1\n  let n96 = n95 + 1\n  let n97 = n96 + 1\n  let n98 = n97 + 1\n  let n99 = n98 + 1\n  let n100 = n99 + 1\n  let n101 = n100 + 1\n  let n102 = n101\n  let n103 = n102\n  let n104 = n103\n  let n105 = n104\n  let n106 = n105\n  let n107 = n106\n  let n108 = n107\n  let n109 = n108\n  let n110 = n109\n  let n111 = n110\n  let n112 = n111\n  let n113 = n112\n  let n114 = n113\n  let n115 = n114\n  let n116 = n115\n  let n117 = n116\n  let n118 = n117\n  let n119 = n118\n  let n120 = n119\n  let n121 = n120\n  let n122 = n121\n  let n123 = n122\n  let n124 = n123\n  let n125 = n124\n  let n126 = n125\n  let n127 = n126\n  let n128 = n127\n  let n129 = n128\n  let n130 = n129\n  let n131 = n130\n  let n132 = n131\n  let n133 = n132\n  let n134 = n133\n  let n135 = n134\n  let n136 = n135\n  let n137 = n136\n  let n138 = n137\n  let n139 = n138\n  let n140 = n139\n  let n141 = n140\n  let n142 = n141\n  let n143 = n142\n  let n144 = n143\n  let n145 = n144\n  let n146 = n145\n  let n147 = n146\n  let n148 = n147\n  let n149 = n148\n  let n150 = n149\n  let n151 = n150\n  let n152 = n151\n  let n153 = n152\n  let n154 = n153\n  let n155 = n154\n  let n156 = n155\n  let n157 = n156\n  let n158 = n157\n  let n159 = n158\n  let n160 = n159\n  let n161 = n160\n  let n162 = n161\n  let n163 = n162\n  let n164 = n163\n  let n165 = n164\n  let n166 = n165\n  let n167 = n166\n  let n168 = n167\n  let n169 = n168\n  let n170 = n169\n  let n171 = n170\n  let n172 = n171\n  let n173 = n172\n  let n174 = n173\n  let n175 = n174\n  let n176 = n175\n  let n177 = n176\n  let n178 = n177\n  let n179 = n178\n  let n180 = n179\n  let n181 = n180\n  let n182 = n181\n  let n183 = n182\n  let n184 = n183\n  let n185 = n184\n  let n186 = n185\n  let n187 = n186\n  let n188 = n187\n  let n189 = n188\n  let n190 = n189\n  let n191 = n190\n  let n192 = n191\n  let n193 = n192\n  let n194 = n193\n  let n195 = n194\n  let n196 = n195\n  let n197 = n196\n  let n198 = n197\n  let n199 = n198\n  let n200 = n199\n  let n201 = n200\n  let n202 = n201\n  let n203 = n202\n  let n204 = n203\n  let n205 = n204\n  let n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodSehift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodSehift", "gc": "<|endoftext|>/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodSehift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeSehift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeSehift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst encodeSehift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst encodeSehift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst encodeSehift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst encodeSehift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst encodeSehift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst encodeSehift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst encodeSehift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst encodeSehift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst encodeSehift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst encodeSehift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst encodeSehift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst encodeSehift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst encodeSehift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst encodeSehift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst encodeSehift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst encodeSehift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst encodeSehift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst encodeSehift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/51", "prompt": "/*\n  remoevVowels is a function that takes string and returns string without vowels.\n  >>> remoevVowels('')\n  ''\n  >>> remoevVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> remoevVowels('abcdef')\n  'bcdf'\n  >>> remoevVowels('aaaaa')\n  ''\n  >>> remoevVowels('aaBAA')\n  'B'\n  >>> remoevVowels('zbcd')\n  'zbcd'\n  */\nconst remoevVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "remoevVowels", "gc": "<|endoftext|>/*\n  remoevVowels is a function that takes string and returns string without vowels.\n  >>> remoevVowels('')\n  ''\n  >>> remoevVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> remoevVowels('abcdef')\n  'bcdf'\n  >>> remoevVowels('aaaaa')\n  ''\n  >>> remoevVowels('aaBAA')\n  'B'\n  >>> remoevVowels('zbcd')\n  'zbcd'\n  */\nconst remoevVowels = (text) => {\n  let vowels = '';\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] === 'a' || text[i] === 'e' || text[i] === 'i' || text[i] === 'o' || text[i] === 'u') {\n      vowels += text[i];\n    }\n  }\n  return vowels;\n};\n\n/*\n  removeVowels is a function that takes string and returns string without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n  let vowels = '';\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] === 'a' || text[i] === 'e' || text[i] === 'i' || text[i] === 'o' || text[i] === 'u') {\n      vowels += text[i];\n    }\n  }\n  return vowels.slice(0, -1);\n};\n\n/*\n  removeVowels2 is a function that takes string and returns string without vowels.\n  >>> removeVowels2('')\n  ''\n  >>> removeVowels2(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels2('abcdef')\n  'bcdf'\n  >>> removeVowels2('aaaaa')\n  ''\n  >>> removeVowels2('aaBAA')\n  'B'\n  >>> removeVowels2('zbcd')\n  'zbcd'\n  */\nconst removeVowels2 = (text) => {\n  let vowels = '';\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] === 'a' || text[i] === 'e' || text[i] === 'i' || text[i] === 'o' || text[i] === 'u') {\n      vowels += text[i];\n    }\n  }\n  return vowels.slice(0, -1);\n};\n\n/*\n  removeVowels3 returns a string without vowels.\n  >>> removeVowels3('')\n  ''\n  >>> removeVowels3(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels3('abcdef')\n  'bcdf'\n  >>> removeVowels3('aaaaa')\n  ''\n  >>> removeVowels3('aaBAA')\n  'B'\n  >>> removeVowels3('zbcd')\n  'zbcd'\n  */\nconst removeVowels3 = (text) => {\n  let vowels = '';\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] === 'a' || text[i] === 'e' || text[i] === 'i' || text[i] === 'o' || text[i] === 'u') {\n      vowels += text[i];\n    }\n  }\n  return vowels.slice(0, -1);\n};\n\n/*\n  removeVowels4 returns a string without vowels.\n  >>> removeVowels4('')\n  ''\n  >>> removeVowels4(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels4('abcdef')\n  'bcdf'\n  >>> removeVowels4('aaaaa')\n  ''\n  >>> removeVowels4('aaBAA')\n  'B'\n  >>> removeVowels4('zbcd')\n  'zbcd'\n  */\nconst removeVowels4 = (text) => {\n  let vowels = '';\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] === 'a' || text[i] === 'e' || text[i] === 'i' || text[i] === 'o' || text[i] === 'u') {\n      vowels += text[i];\n    }\n  }\n  return vowels.slice(0, -1);\n};\n\n/*\n  removeVowels5 returns a string without vowels.\n  >>> removeVowels5('')\n  ''\n  >>> removeVowels5(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels5('abcdef')\n  'bcdf'\n  >>> removeVowels5('aaaaa')\n  ''\n  >>> removeVowels5('aaBAA')\n  'B'\n  >>> removeVowels5('zbcd')\n  'zbcd'\n  */\nconst removeVowels5 = (text) => {\n  let vowels = '';\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] === 'a' || text[i] === 'e' || text[i] === 'i' || text[i] === 'o' || text[i] === 'u') {\n      vowels += text[i];\n    }\n  }\n  return vowels.slice(0, -1);\n};\n\n/*\n  removeVowels6 returns a string without vowels.\n  >>> removeVowels6('')\n  ''\n  >>> removeVowels6(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels6('abcdef')\n  'bcdf'\n  >>> removeVowels6('aaaaa')\n  ''\n  >>> removeVowels6('aaBAA')\n  'B'\n  >>> removeVowels6('zbcd')\n  'zbcd'\n  */\nconst removeVowels6 = (text) => {\n  let vowels = '';\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] === 'a' || text[i] === 'e' || text[i] === 'i' || text[i] === 'o' || text[i] === 'u') {\n      vowels += text[i];\n    }\n  }\n  return vowels.slice(0, -1);\n};\n\n/*\n  removeVowels7 returns a string without vowels.\n  >>> removeVowels7('')\n  ''\n  >>> removeVowels7(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels7('abcdef')\n  'bcdf'\n  >>> removeVowels7('aaaaa')\n  ''\n  >>> removeVowels7('aaBAA')\n  'B'\n  >>> removeVowels7('zbcd')\n  'zbcd'\n  */\nconst removeVowels7 = (text) => {\n  let vowels = '';\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] === 'a' || text[i] === 'e' || text[i] === 'i' || text[i] === 'o' || text[i] === 'u') {\n      vowels += text[i];\n    }\n  }\n  return vowels.slice(0, -1);\n};\n\n/*\n  removeVowels8 returns a string without vowels.\n  >>> removeVowels8('')\n  ''\n  >>> remove", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers in the list l are below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "gc": "<|endoftext|>/*Return true if all numbers in the list l are below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  return l.every(n => n < t);\n};\n\n/*\n  >>> isEven([2, 3, 4, 5])\n  true\n  >>> isEven([2, 3, 4, 5])\n  false\n*/\nconst isEven = l => l.every(n => n % 2 === 0);\n\n/*\n  >>> isOdd([2, 3, 5, 7])\n  true\n  >>> isOdd([2, 3, 5, 7])\n  false\n*/\nconst isOdd = l => l.every(n => n % 2!== 0);\n\n/*\n  >>> isEvenOrOdd([2, 3, 5, 7])\n  true\n  >>> isEvenOrOdd([2, 3, 5, 7])\n  false\n*/\nconst isEvenOrOdd = l => isEven(l) || isOdd(l);\n\n/*\n  >>> isEvenOrOddOrZero([2, 3, 5, 7])\n  true\n  >>> isEvenOrOddOrZero([2, 3, 5, 7])\n  false\n*/\nconst isEvenOrOddOrZero = l => isEvenOrOdd(l) || isZero(l);\n\n/*\n  >>> isEvenOrOddOrZero([2, 3, 5, 7])\n  true\n  >>> isEvenOrOddOrZero([2, 3, 5, 7])\n  false\n*/\nconst isEvenOrOddOrZeroOrZero = l => isEvenOrOddOrZero(l) || isZeroOrZero(l);\n\n/*\n  >>> isEvenOrOddOrZeroOrZero([2, 3, 5, 7])\n  true\n  >>> isEvenOrOddOrZeroOrZero([2, 3, 5, 7])\n  false\n*/\nconst isEvenOrOddOrZeroOrZeroOrZero = l => isEvenOrOddOrZeroOrZero(l) || isZeroOrZeroOrZero(l);\n\n/*\n  >>> isEvenOrOddOrZeroOrZeroOrZero([2, 3, 5, 7])\n  true\n  >>> isEvenOrOddOrZeroOrZeroOrZero([2, 3, 5, 7])\n  false\n*/\nconst isEvenOrOddOrZeroOrZeroOrZeroOrZero = l => isEvenOrOddOrZeroOrZeroOrZero(l) || isZeroOrZeroOrZeroOrZero(l);\n\n/*\n  >>> isEvenOrOddOrZeroOrZeroOrZeroOrZero([2, 3, 5, 7])\n  true\n  >>> isEvenOrOddOrZeroOrZeroOrZeroOrZero([2, 3, 5, 7])\n  false\n*/\nconst isEvenOrOddOrZeroOrZeroOrZeroOrZeroOrZero = l => isEvenOrOddOrZeroOrZeroOrZeroOrZero(l) || isZeroOrZeroOrZeroOrZeroOrZero(l);\n\n/*\n  >>> isEvenOrOddOrZeroOrZeroOrZeroOrZeroOrZero([2, 3, 5, 7])\n  true\n  >>> isEvenOrOddOrZeroOrZeroOrZeroOrZeroOrZero([2, 3, 5, 7])\n  false\n*/\nconst isEvenOrOddOrZeroOrZeroOrZeroOrZeroOrZeroOrZero = l => isEvenOrOddOrZeroOrZeroOrZeroOrZeroOrZero(l) || isZeroOrZeroOrZeroOrZeroOrZeroOrZero(l);\n\n/*\n  >>> isEvenOrOddOrZeroOrZeroOrZeroOrZeroOrZeroOrZero([2, 3, 5, 7])\n  true\n  >>> isEvenOrOddOrZeroOrZeroOrZeroOrZeroOrZeroOrZero([2, 3, 5, 7])\n  false\n*/\nconst isEvenOrOddOrZeroOrZeroOrZeroOrZeroOrZeroOrZero = l => isEvenOrOddOrZeroOrZeroOrZeroOrZeroOrZeroOrZero(l) || isZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZero(l);\n\n/*\n  >>> isEvenOrOddOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZero([2, 3, 5, 7])\n  true\n  >>> isEvenOrOddOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZero([2, 3, 5, 7])\n  false\n*/\nconst isEvenOrOddOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZero = l => isEvenOrOddOrZeroOrZeroOrZeroOrZeroOrZeroOrZero(l) || isZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZero(l);\n\n/*\n  >>> isEvenOrOddOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZero([2, 3, 5, 7])\n  true\n  >>> isEvenOrOddOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZero([2, 3, 5, 7])\n  false\n*/\nconst isEvenOrOddOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZero = l => isEvenOrOddOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZero(l) || isZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZero(l);\n\n/*\n  >>> isEvenOrOddOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZero([2, 3, 5, 7])\n  true\n  >>> isEvenOrOddOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZero([2, 3, 5, 7])\n  false\n*/\nconst isEvenOrOddOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZero = l => isEvenOrOddOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZero(l) || isZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZero(l);\n\n/*\n  >>> isEvenOrOddOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZero([2, 3, 5, 7])\n  true\n  >>> isEvenOrOddOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZero([2, 3, 5, 7])\n  false\n*/\nconst isEvenOrOddOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZero = l => isEvenOrOddOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZero(l) || isZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZero(l);\n\n/*\n  >>> isEvenOrOddOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZero([2, 3, 5, 7])\n  true\n  >>> isEvenOrOddOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZero([2, 3, 5, 7])\n  false\n*/\nconst isEvenOrOddOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZero = l => isEvenOrOddOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZero(l) || isZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZero(l);\n\n/*\n  >>> isEvenOrOddOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZero([2, 3, 5, 7])\n  true\n  >>> isEvenOrOddOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZero([2, 3, 5, 7])\n  false\n*/\nconst ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "gc": "<|endoftext|>/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst subtract = (x, y) => {\n  return x - y;\n};\n\n/*\n  >>> subtract(2, 3)\n  3\n  >>> subtract(5, 7)\n  -1\n  */\nconst multiply = (x, y) => {\n  return x * y;\n};\n\n/*\n  >>> multiply(2, 3)\n  6\n  >>> multiply(5, 7)\n  24\n  */\nconst divide = (x, y) => {\n  return x / y;\n};\n\n/*\n  >>> divide(2, 3)\n  2\n  >>> divide(5, 7)\n  0\n  */\nconst modulo = (x, y) => {\n  return x % y;\n};\n\n/*\n  >>> modulo(2, 3)\n  2\n  >>> modulo(5, 7)\n  0\n  */\nconst pow = (x, y) => {\n  return Math.pow(x, y);\n};\n\n/*\n  >>> pow(2, 3)\n  8\n  >>> pow(5, 7)\n  32\n  */\nconst powMod = (x, y) => {\n  return Math.pow(x, y) % y;\n};\n\n/*\n  >>> powMod(2, 3)\n  8\n  >>> powMod(5, 7)\n  32\n  */\nconst powMod2 = (x, y) => {\n  return Math.pow(x, y) % y;\n};\n\n/*\n  >>> powMod(2, 3)\n  8\n  >>> powMod(5, 7)\n  32\n  */\nconst powMod3 = (x, y) => {\n  return Math.pow(x, y) % y;\n};\n\n/*\n  >>> powMod(2, 3)\n  8\n  >>> powMod(5, 7)\n  32\n  */\nconst powMod4 = (x, y) => {\n  return Math.pow(x, y) % y;\n};\n\n/*\n  >>> powMod(2, 3)\n  8\n  >>> powMod(5, 7)\n  32\n  */\nconst powMod5 = (x, y) => {\n  return Math.pow(x, y) % y;\n};\n\n/*\n  >>> powMod(2, 3)\n  8\n  >>> powMod(5, 7)\n  32\n  */\nconst powMod6 = (x, y) => {\n  return Math.pow(x, y) % y;\n};\n\n/*\n  >>> powMod(2, 3)\n  8\n  >>> powMod(5, 7)\n  32\n  */\nconst powMod7 = (x, y) => {\n  return Math.pow(x, y) % y;\n};\n\n/*\n  >>> powMod(2, 3)\n  8\n  >>> powMod(5, 7)\n  32\n  */\nconst powMod8 = (x, y) => {\n  return Math.pow(x, y) % y;\n};\n\n/*\n  >>> powMod(2, 3)\n  8\n  >>> powMod(5, 7)\n  32\n  */\nconst powMod9 = (x, y) => {\n  return Math.pow(x, y) % y;\n};\n\n/*\n  >>> powMod(2, 3)\n  8\n  >>> powMod(5, 7)\n  32\n  */\nconst powMod10 = (x, y) => {\n  return Math.pow(x, y) % y;\n};\n\n/*\n  >>> powMod(2, 3)\n  8\n  >>> powMod(5, 7)\n  32\n  */\nconst powMod11 = (x, y) => {\n  return Math.pow(x, y) % y;\n};\n\n/*\n  >>> powMod(2, 3)\n  8\n  >>> powMod(5, 7)\n  32\n  */\nconst powMod12 = (x, y) => {\n  return Math.pow(x, y) % y;\n};\n\n/*\n  >>> powMod(2, 3)\n  8\n  >>> powMod(5, 7)\n  32\n  */\nconst powMod13 = (x, y) => {\n  return Math.pow(x, y) % y;\n};\n\n/*\n  >>> powMod(2, 3)\n  8\n  >>> powMod(5, 7)\n  32\n  */\nconst powMod14 = (x, y) => {\n  return Math.pow(x, y) % y;\n};\n\n/*\n  >>> powMod(2, 3)\n  8\n  >>> powMod(5, 7)\n  32\n  */\nconst powMod15 = (x, y) => {\n  return Math.pow(x, y) % y;\n};\n\n/*\n  >>> powMod(2, 3)\n  8\n  >>> powMod(5, 7)\n  32\n  */\nconst powMod16 = (x, y) => {\n  return Math.pow(x, y) % y;\n};\n\n/*\n  >>> powMod(2, 3)\n  8\n  >>> powMod(5, 7)\n  32\n  */\nconst powMod17 = (x, y) => {\n  return Math.pow(x, y) % y;\n};\n\n/*\n  >>> powMod(2, 3)\n  8\n  >>> powMod(5, 7)\n  32\n  */\nconst powMod18 = (x, y) => {\n  return Math.pow(x, y) % y;\n};\n\n/*\n  >>> powMod(2, 3)\n  8\n  >>> powMod(5, 7)\n  32\n  */\nconst powMod19 = (x, y) => {\n  return Math.pow(x, y) % y;\n};\n\n/*\n  >>> powMod(2, 3)\n  8\n  >>> powMod(5, 7)\n  32\n  */\nconst powMod20 = (x, y) => {\n  return Math.pow(x, y) % y;\n};\n\n/*\n  >>> powMod(2, 3)\n  8\n  >>> powMod(5, 7)\n  32\n  */\nconst powMod21 = (x, y) => {\n  return Math.pow(x, y) % y;\n};\n\n/*\n  >>> powMod(2, 3)\n  8\n  >>> powMod(5, 7)\n  32\n  */\nconst powMod22 = (x, y) => {\n  return Math.pow(x, y) % y;\n};\n\n/*\n  >>> powMod(2, 3)\n  8\n  >>> powMod(5, 7)\n  32\n  */\nconst powMod23 = (x, y) => {\n  return Math.pow(x, y) % y;\n};\n\n/*\n  >>> powMod(2, 3)\n  8\n  >>> powMod(5, 7)\n  32\n  */\nconst powMod24 = (x, y) => {\n  return Math.pow(x, y) % y;\n};\n\n/*\n  >>> powMod(2, 3)\n  8\n  >>> powMod(5, 7)\n  32\n  */\nconst powMod25 = (x, y) => {\n  return Math.pow(x, y) % y;\n};\n\n/*\n  >>> powMod(2, 3)\n  8\n  >>> powMod(5, 7)\n  32\n  */\nconst powMod26 = (x, y) => {\n  return Math.pow(x, y) % y;\n};\n\n/*\n  >>> powMod(2, 3)\n  8\n  >>> powMod(5, 7)\n  32\n  */\nconst powMod27 = (x, y) => {\n  return Math.pow(x, y) % y;\n};\n\n/*\n  >>> powMod(2, 3)\n  8\n  >>> powMod(5, 7)\n  32\n  */\nconst powMod28 = (x, y) => {\n  return Math.pow(x, y) % y;\n};\n\n/*\n  >>> powMod(2, 3)\n  8\n  >>> powMod(5, 7)\n  32\n  */\nconst powMod29 = (x, y) => {\n  return Math.pow(x, y) % y;\n};\n\n/*\n  >>> powMod(2, 3)\n  8\n  >>> powMod(5, 7)\n  32\n  */\nconst powMod30 = (x, y) => {\n  return Math.pow(x, y) % y;\n};\n\n/*\n  >>> powMod(2, 3)\n  8\n  >>> powMod(5, 7)\n  32\n  */\nconst powMod31 = (x, y) => {\n  return Math.pow(x, y) % ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two words have the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "gc": "<|endoftext|>/*\n  Check if two words have the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  if (s0 === s1) {\n    return true\n  }\n  if (s0.length!== s1.length) {\n    return false\n  }\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  Check if two words have the same letters.\n  >>> sameLetters('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameLetters('abcd', 'dddddddabc')\n  true\n  >>> sameLetters('dddddddabc', 'abcd')\n  true\n  >>> sameLetters('eabcd', 'dddddddabc')\n  false\n  >>> sameLetters('abcd', 'dddddddabce')\n  false\n  >>> sameLetters('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameLetters = (s0, s1) => {\n  if (s0 === s1) {\n    return true\n  }\n  if (s0.length!== s1.length) {\n    return false\n  }\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  Check if two words have the same numbers.\n  >>> sameNumbers('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameNumbers('abcd', 'dddddddabc')\n  true\n  >>> sameNumbers('dddddddabc', 'abcd')\n  true\n  >>> sameNumbers('eabcd', 'dddddddabc')\n  false\n  >>> sameNumbers('abcd', 'dddddddabce')\n  false\n  >>> sameNumbers('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameNumbers = (s0, s1) => {\n  if (s0 === s1) {\n    return true\n  }\n  if (s0.length!== s1.length) {\n    return false\n  }\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  Check if two words have the same symbols.\n  >>> sameSymbols('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameSymbols('abcd', 'dddddddabc')\n  true\n  >>> sameSymbols('dddddddabc', 'abcd')\n  true\n  >>> sameSymbols('eabcd', 'dddddddabc')\n  false\n  >>> sameSymbols('abcd', 'dddddddabce')\n  false\n  >>> sameSymbols('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameSymbols = (s0, s1) => {\n  if (s0 === s1) {\n    return true\n  }\n  if (s0.length!== s1.length) {\n    return false\n  }\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  Check if two words have the same uppercase letters.\n  >>> sameUpperCases('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameUpperCases('abcd', 'dddddddabc')\n  true\n  >>> sameUpperCases('dddddddabc', 'abcd')\n  true\n  >>> sameUpperCases('eabcd', 'dddddddabc')\n  false\n  >>> sameUpperCases('abcd', 'dddddddabce')\n  false\n  >>> sameUpperCases('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameUpperCases = (s0, s1) => {\n  if (s0 === s1) {\n    return true\n  }\n  if (s0.length!== s1.length) {\n    return false\n  }\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  Check if two words have the same lowercase letters.\n  >>> sameLowerCases('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameLowerCases('abcd', 'dddddddabc')\n  true\n  >>> sameLowerCases('dddddddabc', 'abcd')\n  true\n  >>> sameLowerCases('eabcd', 'dddddddabc')\n  false\n  >>> sameLowerCases('abcd', 'dddddddabce')\n  false\n  >>> sameLowerCases('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameLowerCases = (s0, s1) => {\n  if (s0 === s1) {\n    return true\n  }\n  if (s0.length!== s1.length) {\n    return false\n  }\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  Check if two words have the same numbers.\n  >>> sameNumbers('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameNumbers('abcd', 'dddddddabc')\n  true\n  >>> sameNumbers('dddddddabc', 'abcd')\n  true\n  >>> sameNumbers('eabcd', 'dddddddabc')\n  false\n  >>> sameNumbers('abcd', 'dddddddabce')\n  false\n  >>> sameNumbers('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameNumbers = (s0, s1) => {\n  if (s0 === s1) {\n    return true\n  }\n  if (s0.length!== s1.length) {\n    return false\n  }\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  Check if two words have the same symbols.\n  >>> sameSymbols('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameSymbols('abcd', 'dddddddabc')\n  true\n  >>> sameSymbols('dddddddabc', 'abcd')\n  true\n  >>> sameSymbols('eabcd', 'dddddddabc')\n  false\n  >>> sameSymbols('abcd', 'dddddddabce')\n  false\n  >>> sameSymbols('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameSymbols = (s0, s1) => {\n  if (s0 === s1) {\n    return true\n  }\n  if (s0.length!== s1.length) {\n    return false\n  }\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  Check if two words have the same uppercase letters.\n  >>> sameUpperCases('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameUpperCases('abcd', 'dddddddabc')\n  true\n  >>> sameUpperCases('dddddddabc', 'abcd')\n  true\n  >>> sameUpperCases('eabcd', 'dddddddabc", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "gc": "<|endoftext|>/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n <= 1) return 1;\n  return fib(n-1) + fib(n-2);\n};\n\n/*\n  >>> fib(100)\n  1055\n  >>> fib(1000)\n  105500\n  >>> fib(10000)\n  105500\n  >>> fib(100000)\n  105500\n  >>> fib(1000000)\n  105500\n  >>> fib(10000000)\n  105500\n  >>> fib(100000000)\n  105500\n  >>> fib(1000000000)\n  105500\n  >>> fib(10000000000)\n  105500\n  >>> fib(100000000000)\n  105500\n  >>> fib(1000000000000)\n  105500\n  >>> fib(10000000000000)\n  105500\n  >>> fib(100000000000000)\n  105500\n  >>> fib(1000000000000000)\n  105500\n  >>> fib(10000000000000000)\n  105500\n  >>> fib(100000000000000000)\n  105500\n  >>> fib(1000000000000000001)\n  105500\n  >>> fib(1000000000000000002)\n  105500\n  >>> fib(1000000000000000003)\n  105500\n  >>> fib(1000000000000000004)\n  105500\n  >>> fib(1000000000000000005)\n  105500\n  >>> fib(1000000000000000006)\n  105500\n  >>> fib(1000000000000000007)\n  105500\n  >>> fib(1000000000000000008)\n  105500\n  >>> fib(1000000000000000009)\n  105500\n  >>> fib(10000000000000000010)\n  105500\n  >>> fib(10000000000000000011)\n  105500\n  >>> fib(10000000000000000012)\n  105500\n  >>> fib(10000000000000000013)\n  105500\n  >>> fib(10000000000000000014)\n  105500\n  >>> fib(10000000000000000015)\n  105500\n  >>> fib(10000000000000000016)\n  105500\n  >>> fib(10000000000000000017)\n  105500\n  >>> fib(10000000000000000018)\n  105500\n  >>> fib(10000000000000000019)\n  105500\n  >>> fib(10000000000000000020)\n  105500\n  >>> fib(10000000000000000021)\n  105500\n  >>> fib(10000000000000000022)\n  105500\n  >>> fib(10000000000000000023)\n  105500\n  >>> fib(10000000000000000024)\n  105500\n  >>> fib(10000000000000000025)\n  105500\n  >>> fib(10000000000000000026)\n  105500\n  >>> fib(10000000000000000027)\n  105500\n  >>> fib(10000000000000000028)\n  105500\n  >>> fib(10000000000000000029)\n  105500\n  >>> fib(10000000000000000030)\n  105500\n  >>> fib(10000000000000000031)\n  105500\n  >>> fib(10000000000000000032)\n  105500\n  >>> fib(10000000000000000033)\n  105500\n  >>> fib(10000000000000000034)\n  105500\n  >>> fib(10000000000000000035)\n  105500\n  >>> fib(10000000000000000036)\n  105500\n  >>> fib(10000000000000000037)\n  105500\n  >>> fib(10000000000000000038)\n  105500\n  >>> fib(10000000000000000039)\n  105500\n  >>> fib(10000000000000000040)\n  105500\n  >>> fib(10000000000000000041)\n  105500\n  >>> fib(10000000000000000042)\n  105500\n  >>> fib(10000000000000000043)\n  105500\n  >>> fib(10000000000000000044)\n  105500\n  >>> fib(10000000000000000045)\n  105500\n  >>> fib(10000000000000000046)\n  105500\n  >>> fib(10000000000000000049)\n  105500\n  >>> fib(10000000000000000050)\n  105500\n  >>> fib(10000000000000000051)\n  105500\n  >>> fib(10000000000000000052)\n  105500\n  >>> fib(10000000000000000053)\n  105500\n  >>> fib(10000000000000000054)\n  105500\n  >>> fib(10000000000000000055)\n  105500\n  >>> fib(10000000000000000056)\n  105500\n  >>> fib(10000000000000000057)\n  105500\n  >>> fib(10000000000000000058)\n  105500\n  >>> fib(10000000000000000059)\n  105500\n  >>> fib(10000000000000000060)\n  105500\n  >>> fib(10000000000000000061)\n  105500\n  >>> fib(10000000000000000062)\n  105500\n  >>> fib(10000000000000000063)\n  105500\n  >>> fib(10000000000000000064)\n  105500\n  >>> fib(10000000000000000065)\n  105500\n  >>> fib(10000000000000000066)\n  105500\n  >>> fib(10000000000000000067)\n  105500\n  >>> fib(10000000000000000068)\n  105500\n  >>> fib(10000000000000000069)\n  105500\n  >>> fib(10000000000000000080)\n  105500\n  >>> fib(10000000000000000090)\n  105500\n  >>> fib(10000000000000000091)\n  105500\n  >>> fib(10000000000000000092)\n  105500\n  >>> fib(10000000000000000093)\n  105500\n  >>> fib(10000000000000000094)\n  105500\n  >>> fib(10000000000000000095)\n  105500\n  >>> fib(10000000000000000096)\n  105500\n  >>> fib(10000000000000000097)\n  105500\n  >>> fib(10000000000000000098)\n  105500\n  >>> fib(10000000000000000099)\n  105500\n  >>> fib(10000000000000000100)\n  105500\n  >>> fib(10000000000000000101)\n  105500\n  >>> fib(10000000000000000102)\n  105500\n  >>> fib(10000000000000000103)\n  105500\n  >>> fib(10000000000000000104)\n  105500\n  >>> fib(10000000000000000105)\n  105500\n  >>> fib(10000000000000000106)\n  105500\n  >>> fib(10000000000000000107)\n  105500\n  >>> fib(", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 3}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketnig(\"<\")\n  false\n  >>> correctBracketnig(\"<>\")\n  false\n  >>> correctBracketnig(\"<<><>>\")\n  false\n  >>> correctBracketnig(\"><<>\")\n  false\n  */\nconst correctBracketnig = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketnig", "gc": "<|endoftext|>/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketnig(\"<\")\n  false\n  >>> correctBracketnig(\"<>\")\n  false\n  >>> correctBracketnig(\"<<><>>\")\n  false\n  >>> correctBracketnig(\"><<>\")\n  false\n  */\nconst correctBracketnig = (brackets) => {\n  const openingBrackets = brackets.split(\"<\");\n  const closingBrackets = brackets.split(\">\");\n  const openingBracketsCount = openingBrackets.length;\n  const closingBracketsCount = closingBrackets.length;\n  if (openingBracketsCount!== closingBracketsCount) {\n    return false;\n  }\n  for (let i = 0; i < openingBracketsCount; i++) {\n    if (openingBrackets[i]!== closingBrackets[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * Returns true if a word is capitalized.\n *\n * >>> isCapitalized(\"hello\")\n * true\n * >>> isCapitalized(\"HELLO\")\n * true\n * >>> isCapitalized(\"helloWorld\")\n * false\n */\nconst isCapitalized = (word) => {\n  return word[0].toUpperCase() === word;\n};\n\n/**\n * Returns true if a word is capitalized.\n *\n * >>> isCapitalized(\"hello\")\n * true\n * >>> isCapitalized(\"HELLO\")\n * true\n * >>> isCapitalized(\"helloWorld\")\n * false\n */\nconst isCapitalizedWord = (word) => {\n  return isCapitalized(word);\n};\n\n/**\n * Returns true if a word is capitalized.\n *\n * >>> isCapitalizedWord(\"hello\")\n * true\n * >>> isCapitalizedWord(\"HELLO\")\n * true\n * >>> isCapitalizedWord(\"helloWorld\")\n * false\n */\nconst isCapitalizedWordWord = (word) => {\n  return isCapitalizedWord(word[0].toUpperCase() + word.slice(1));\n};\n\n/**\n * Returns true if a word is capitalized.\n *\n * >>> isCapitalizedWordWord(\"hello\")\n * true\n * >>> isCapitalizedWordWord(\"HELLO\")\n * true\n * >>> isCapitalizedWordWord(\"helloWorld\")\n * false\n */\nconst isCapitalizedWordWordWord = (word) => {\n  return isCapitalizedWordWord(word[0].toUpperCase() + word.slice(1));\n};\n\n/**\n * Returns true if a word is capitalized.\n *\n * >>> isCapitalizedWordWordWord(\"hello\")\n * true\n * >>> isCapitalizedWordWordWord(\"HELLO\")\n * true\n * >>> isCapitalizedWordWordWord(\"helloWorld\")\n * false\n */\nconst isCapitalizedWordWordWordWord = (word) => {\n  return isCapitalizedWordWordWord(word[0].toUpperCase() + word.slice(1));\n};\n\n/**\n * Returns true if a word is capitalized.\n *\n * >>> isCapitalizedWordWordWordWord(\"hello\")\n * true\n * >>> isCapitalizedWordWordWordWord(\"HELLO\")\n * true\n * >>> isCapitalizedWordWordWordWord(\"helloWorld\")\n * false\n */\nconst isCapitalizedWordWordWordWordWord = (word) => {\n  return isCapitalizedWordWordWordWord(word[0].toUpperCase() + word.slice(1));\n};\n\n/**\n * Returns true if a word is capitalized.\n *\n * >>> isCapitalizedWordWordWordWordWord(\"hello\")\n * true\n * >>> isCapitalizedWordWordWordWordWord(\"HELLO\")\n * true\n * >>> isCapitalizedWordWordWordWordWord(\"helloWorld\")\n * false\n */\nconst isCapitalizedWordWordWordWordWordWord = (word) => {\n  return isCapitalizedWordWordWordWordWordWord(word[0].toUpperCase() + word.slice(1));\n};\n\n/**\n * Returns true if a word is capitalized.\n *\n * >>> isCapitalizedWordWordWordWordWordWordWord(\"hello\")\n * true\n * >>> isCapitalizedWordWordWordWordWordWordWord(\"HELLO\")\n * true\n * >>> isCapitalizedWordWordWordWordWordWordWord(\"helloWorld\")\n * false\n */\nconst isCapitalizedWordWordWordWordWordWordWordWord = (word) => {\n  return isCapitalizedWordWordWordWordWordWordWordWord(word[0].toUpperCase() + word.slice(1));\n};\n\n/**\n * Returns true if a word is capitalized.\n *\n * >>> isCapitalizedWordWordWordWordWordWordWordWord(\"hello\")\n * true\n * >>> isCapitalizedWordWordWordWordWordWordWordWordWordWord(\"HELLO\")\n * true\n * >>> isCapitalizedWordWordWordWordWordWordWordWordWord(\"helloWorld\")\n * false\n */\nconst isCapitalizedWordWordWordWordWordWordWordWordWordWord = (word) => {\n  return isCapitalizedWordWordWordWordWordWordWordWordWordWordWord(word[0].toUpperCase() + word.slice(1));\n};\n\n/**\n * Returns true if a word is capitalized.\n *\n * >>> isCapitalizedWordWordWordWordWordWordWordWordWordWordWordWord(\"hello\")\n * true\n * >>> isCapitalizedWordWordWordWordWordWordWordWordWordWordWordWordWord(\"HELLO\")\n * true\n * >>> isCapitalizedWordWordWordWordWordWordWordWordWordWordWord(\"helloWorld\")\n * false\n */\nconst isCapitalizedWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWord = (word) => {\n  return isCapitalizedWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWord", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/57", "prompt": "/*Return true is list elements are montoonically increasing or decreasing.\n  >>> montoonic([1, 2, 4, 20])\n  true\n  >>> montoonic([1, 20, 4, 10])\n  false\n  >>> montoonic([4, 1, 0, -10])\n  true\n  */\nconst montoonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "montoonic", "gc": "<|endoftext|>/*Return true is list elements are montoonically increasing or decreasing.\n  >>> montoonic([1, 2, 4, 20])\n  true\n  >>> montoonic([1, 20, 4, 10])\n  false\n  >>> montoonic([4, 1, 0, -10])\n  true\n  */\nconst montoonic = (l) => {\n  let n = l.length;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let count = 0;\n  while (i < n) {\n    while (j < n) {\n      if (l[i] > l[j]) {\n        k++;\n        j++;\n      } else {\n        k--;\n        j++;\n      }\n    }\n    if (k === 0) {\n      count++;\n      i++;\n      j = 0;\n      k = 0;\n    }\n  }\n  return count === n;\n};\n\n/*\n  >>> montonic([-10, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5])\n  true\n  >>> montonic([-10, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5])\n  false\n  >>> montonic([-10, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5])\n  false\n  >>> montonic([-10, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5])\n  false\n  >>> montonic([-10, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5])\n  false\n  >>> montonic([-10, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5])\n  false\n  >>> montonic([-10, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5])\n  false\n  >>> montonic([-10, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5])\n  false\n  >>> montonic([-10, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5])\n  false\n  >>> montonic([-10, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5])\n  false\n  >>> montonic([-10, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5])\n  false\n  >>> montonic([-10, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5])\n  false\n  >>> montonic([-10, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5])\n  false\n  >>> montonic([-10, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5])\n  false\n  >>> montonic([-10, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5])\n  false\n  >>> montonic([-10, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5])\n  false\n  >>> montonic([-10, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5])\n  false\n  >>> montonic([-10, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5])\n  false\n  >>> montonic([-10, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5])\n  false\n  >>> montonic([-10, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5])\n  false\n  >>> montonic([-10, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5])\n  false\n  >>> montonic([-10, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5])\n  false\n  >>> montonic([-10, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5])\n  false\n  >>> montonic([-10, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5])\n  false\n  >>> montonic([-10, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5])\n  false\n  >>> montonic([-10, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5])\n  false\n  >>> montonic([-10, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5])\n  false\n  >>> montonic([-10, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5])\n  false\n  >>> montonic([-10, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5])\n  false\n  >>> montonic([-10, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5])\n  false\n  >>> montonic([-10, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5])\n  false\n  >>> montonic([-10, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5])\n  false\n  >>> montonic([-10, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5])\n  false\n  >>> montonic([-10, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5])\n  false\n  >>> montonic([-10, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5])\n  false\n  >>> montonic([-10, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5])\n  false\n  >>> montonic([-10, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5])\n  false\n  >>> montonic([-10, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5])\n  false\n  >>> montonic([-10, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5])\n  false\n  >>> montonic([-10, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5])\n  false\n  >>> montonic([-10, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5])\n  false\n  >>> montonic([-10, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5])\n  false\n  >>> montonic([-10, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5])\n  false\n  >>> montonic([-10, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5])\n  false\n  >>> montonic([-10, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5])\n  false\n  >>> montonic([-10, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5])\n  false\n  >>> montonic([-10, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5])\n  false\n  >>> montonic([-10, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5])\n  false\n  >>> montonic([-10, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5])\n  false\n  >>> montonic([-10, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5])\n  false\n  >>> montonic([-10, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5])\n  false\n  >>> montonic([-10, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5])\n  false\n  >>> montonic([-10, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5])\n  false\n  >>> montonic([-10, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5])\n  false\n  >>> montonic([-10, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5])\n  false\n  >>> montonic([-10, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5])\n  false\n  >>> montonic([-10, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5])\n  false\n  >>> montonic([-10, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5])\n  false\n  >>> montonic([-10, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5])\n  false\n  >>> montonic([-10, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5])\n  false\n  >>> montonic([-10, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5])\n  false\n  >>> montonic([-10, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5])\n  false\n  >>> montonic([-10, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5])", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3}
{"task_id": "JavaScript/58", "prompt": "/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "gc": "<|endoftext|>/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set = new Set();\n  l1.forEach(item => {\n    if (set.has(item)) {\n      return;\n    }\n    set.add(item);\n  });\n  l2.forEach(item => {\n    if (set.has(item)) {\n      return;\n    }\n    set.add(item);\n  });\n  return Array.from(set);\n};\n\n/**\n * Returns true if all elements in the array are unique.\n * If there are duplicates, returns false.\n * If there are duplicates, returns true only if all elements are unique.\n * If there are duplicates, returns false only if all elements are unique.\n * If there are duplicates, returns true only if all elements are unique.\n * If there are duplicates, returns true only if all elements are unique.\n * If there are duplicates, returns true only if all elements are unique.\n * If there are duplicates, returns true only if all elements are unique.\n * If there are duplicates, returns true only if all elements are unique.\n * If there are duplicates, returns true only if all elements are unique.\n * If there are duplicates, returns true only if all elements are unique.\n * If there are duplicates, returns true only if all elements are unique.\n * If there are duplicates, returns true only if all elements are unique.\n * If there are duplicates, returns true only if all elements are unique.\n * If there are duplicates, returns true only if all elements are unique.\n * If there are duplicates, returns true only if all elements are unique.\n * If there are duplicates, returns true only if all elements are unique.\n * If there are duplicates, returns true only if all elements are unique.\n * If there are duplicates, returns true only if all elements are unique.\n * If there are duplicates, returns true only if all elements are unique.\n * If there are duplicates, returns true only if all elements are unique.\n * If there are duplicates, returns true only if all elements are unique.\n * If there are duplicates, returns true only if all elements are unique.\n * If there are duplicates, returns true only if all elements are unique.\n * If there are duplicates, returns true only if all elements are unique.\n * If there are duplicates, returns true only if all elements are unique.\n * If there are duplicates, returns true only if all elements are unique.\n * If there are duplicates, returns true only if all elements are unique.\n * If there are duplicates, returns true only if all elements are unique.\n * If there are duplicates, returns true only if all elements are unique.\n * If there are duplicates, returns true only if all elements are unique.\n * If there are duplicates, returns true only if all elements are unique.\n * If there are duplicates, returns true only if all elements are unique.\n * If there are duplicates, returns true only if all elements are unique.\n * If there are duplicates, returns true only if all elements are unique.\n * If there are duplicates, returns true only if all elements are unique.\n * If there are duplicates, returns true only if all elements are unique.\n * If there are duplicates, returns true only if all elements are unique.\n * If there are duplicates, returns true only if all elements are unique.\n * If there are duplicates, returns true only if all elements are unique.\n * If there are duplicates, returns true only if all elements are unique.\n * If there are duplicates, returns true only if all elements are unique.\n * If there are duplicates, returns true only if all elements are unique.\n * If there are duplicates, returns true only if all elements are unique.\n * If there are duplicates, returns true only if all elements are unique.\n * If there are duplicates, returns true only if all elements are unique.\n * If there are duplicates, returns true only if all elements are unique.\n * If there are duplicates, returns true only if all elements are unique.\n * If there are duplicates, returns true only if all elements are unique.\n * If there are duplicates, returns true only if all elements are unique.\n * If there are duplicates, returns true only if all elements are unique.\n * If there are duplicates, returns true only if all elements are unique.\n * If there are duplicates, returns true only if all elements are unique.\n * If there are duplicates, returns true only if all elements are unique.\n * If there are duplicates, returns true only if all elements are unique.\n * If there are duplicates, returns true only if all elements are unique.\n * If there are duplicates, returns true only if all elements are unique.\n * If there are duplicates, returns true only if all elements are unique.\n * If there are duplicates, returns true only if all elements are unique.\n * If there are duplicates, returns true only if all elements are unique.\n * If there are duplicates, returns true only if all elements are unique.\n * If there are duplicates, returns true only if all elements are unique.\n * If there are duplicates, returns true only if all elements are unique.\n * If there are duplicates, returns true only if all elements are unique.\n * If there are duplicates, returns true only if all elements are unique.\n * If there are duplicates, returns true only if all elements are unique.\n * If there are duplicates, returns true only if all elements are unique.\n * If there are duplicates, returns true only if all elements are unique.\n * If there are duplicates, returns true only if all elements are unique.\n * If there are duplicates, returns true only if all elements are unique.\n * If there are duplicates, returns true only if all elements are unique.\n * If there are duplicates, returns true only if all elements are unique.\n * If there are duplicates, returns true only if all elements are unique.\n * If there are duplicates, returns true only if all elements are unique.\n * If there are duplicates, returns true only if all elements are unique.\n * If there are duplicates, returns true only if all elements are unique.\n * If there are duplicates, returns true only if all elements are unique.\n * If there are duplicates, returns true only if all elements are unique.\n * If there are duplicates, returns true only if all elements are unique.\n * If there are duplicates, returns true only if all elements are unique.\n * If there are duplicates, returns true only if all elements are unique.\n * If there are duplicates, returns true only if all elements are unique.\n * If there are duplicates, returns true only if all elements are unique.\n * If there are duplicates, returns true only if all elements are unique.\n * If there are duplicates, returns true only if all elements are unique.\n * If there are duplicates, returns true only if all elements are unique.\n * If there are duplicates, returns true only if all elements are unique.\n * If there are duplicates, returns true only if all elements are unique.\n * If there are duplicates, returns true only if all elements are unique.\n * If there are duplicates, returns true only if all elements are unique.\n * If there are duplicates, returns true only if all elements are unique.\n * If there are duplicates, returns true only if all elements are unique.\n * If there are duplicates, returns true only if all elements are unique.\n * If there are duplicates, returns true only if all elements are unique.\n * If there are duplicates, returns true only if all elements are unique.\n * If there are duplicates, returns true only if all elements are unique.\n * If there are duplicates, returns true only if all elements are unique.\n * If there are duplicates, returns true only if all elements are unique.\n * If there are duplicates, returns true only if all elements are unique.\n * If there are duplicates, returns true only if all elements are unique.\n * If there are duplicates, returns true only if all elements are unique.\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largetsPrimeFactor(13195)\n  29\n  >>> largetsPrimeFactor(2048)\n  2\n  */\nconst largetsPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largetsPrimeFactor", "gc": "<|endoftext|>/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largetsPrimeFactor(13195)\n  29\n  >>> largetsPrimeFactor(2048)\n  2\n  */\nconst largetsPrimeFactor = (n) => {\n  let factor = 1;\n  while (n % factor!== 0) {\n    factor++;\n  }\n  return factor;\n};\n\n/*\n  Given a number n, return true if n is a prime number, false otherwise.\n  >>> isPrime(13195)\n  true\n  >>> isPrime(2048)\n  false\n  */\nconst isPrime = (n) => {\n  if (n <= 1) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return false;\n  }\n  if (n % 5 === 0) {\n    return false;\n  }\n  if (n % 7 === 0) {\n    return false;\n  }\n  if (n % 13 === 0) {\n    return false;\n  }\n  if (n % 17 === 0) {\n    return false;\n  }\n  if (n % 19 === 0) {\n    return false;\n  }\n  return true;\n};\n\n/*\n  Given a number n, return true if n is a prime number, false otherwise.\n  >>> isPrimeNumber(13195)\n  true\n  >>> isPrimeNumber(2048)\n  false\n  */\nconst isPrimeNumber = (n) => {\n  if (n <= 1) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return false;\n  }\n  if (n % 5 === 0) {\n    return false;\n  }\n  if (n % 7 === 0) {\n    return false;\n  }\n  if (n % 13 === 0) {\n    return false;\n  }\n  if (n % 17 === 0) {\n    return false;\n  }\n  if (n % 19 === 0) {\n    return false;\n  }\n  return true;\n};\n\n/*\n  Given a number n, return true if n is a prime number, false otherwise.\n  >>> isPrimeNumberNumber(13195)\n  true\n  >>> isPrimeNumberNumber(2048)\n  false\n  */\nconst isPrimeNumberNumber = (n) => {\n  if (n <= 1) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return false;\n  }\n  if (n % 5 === 0) {\n    return false;\n  }\n  if (n % 7 === 0) {\n    return false;\n  }\n  if (n % 13 === 0) {\n    return false;\n  }\n  if (n % 17 === 0) {\n    return false;\n  }\n  if (n % 19 === 0) {\n    return false;\n  }\n  return true;\n};\n\n/*\n  Given a number n, return true if n is a prime number, false otherwise.\n  >>> isPrimeNumberNumber(13195)\n  true\n  >>> isPrimeNumberNumber(2048)\n  false\n  */\nconst isPrimeNumberNumber2 = (n) => {\n  if (n <= 1) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return false;\n  }\n  if (n % 5 === 0) {\n    return false;\n  }\n  if (n % 7 === 0) {\n    return false;\n  }\n  if (n % 13 === 0) {\n    return false;\n  }\n  if (n % 17 === 0) {\n    return false;\n  }\n  if (n % 19 === 0) {\n    return false;\n  }\n  return true;\n};\n\n/*\n  Given a number n, return true if n is a prime number, false otherwise.\n  >>> isPrimeNumberNumber2(13195)\n  true\n  >>> isPrimeNumberNumber2(2048)\n  false\n  */\nconst isPrimeNumberNumber3 = (n) => {\n  if (n <= 1) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return false;\n  }\n  if (n % 5 === 0) {\n    return false;\n  }\n  if (n % 7 === 0) {\n    return false;\n  }\n  if (n % 13 === 0) {\n    return false;\n  }\n  if (n % 17 === 0) {\n    return false;\n  }\n  if (n % 19 === 0) {\n    return false;\n  }\n  return true;\n};\n\n/*\n  Given a number n, return true if n is a prime number, false otherwise.\n  >>> isPrimeNumberNumber3(13195)\n  true\n  >>> isPrimeNumberNumber3(2048)\n  false\n  */\nconst isPrimeNumberNumber4 = (n) => {\n  if (n <= 1) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return false;\n  }\n  if (n % 5 === 0) {\n    return false;\n  }\n  if (n % 7 === 0) {\n    return false;\n  }\n  if (n % 13 === 0) {\n    return false;\n  }\n  if (n % 17 === 0) {\n    return false;\n  }\n  if (n % 19 === 0) {\n    return false;\n  }\n  return true;\n};\n\n/*\n  Given a number n, return true if n is a prime number, false otherwise.\n  >>> isPrimeNumberNumber4(13195)\n  true\n  >>> isPrimeNumberNumber4(2048)\n  false\n  */\nconst isPrimeNumberNumber5 = (n) => {\n  if (n <= 1) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return false;\n  }\n  if (n % 5 === 0) {\n    return false;\n  }\n  if (n % 7 === 0) {\n    return false;\n  }\n  if (n % 13 === 0) {\n    return false;\n  }\n  if (n % 17 === 0) {\n    return false;\n  }\n  if (n % 19 === 0) {\n    return false;\n  }\n  return true;\n};\n\n/*\n  Given a number n, return true if n is a prime number, false otherwise.\n  >>> isPrimeNumberNumber5(13195)\n  true\n  >>> isPrimeNumberNumber5(2048)\n  false\n  */\nconst isPrimeNumberNumber6 = (n) => {\n  if (n <= 1) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return false;\n  }\n  if (n % 5 === 0) {\n    return false;\n  }\n  if (n % 7 === 0) {\n    return false;\n  }\n  if (n % 13 === 0) {\n    return false;\n  }\n  if (n % 17 === 0) {\n    return false;\n  }\n  if (n % 19 === 0) {\n    return false;\n  }\n  return true;\n};\n\n/*\n  Given a number n, return true if n is a prime number, false otherwise.\n  >>> isPrimeNumberNumber6(13195)\n  true\n  >>> isPrimeNumberNumber6(2048)\n  false\n  */\nconst isPrimeNumberNumber7 = (n) => {\n  if (n <= 1) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return false;\n  }\n  if (n % 5 === 0) {\n    return false;\n  }\n  if (n % 7 === 0) {\n    return false;\n  }\n  if (n % 13 === 0) {\n    return false;\n  }\n  if (n % 17 === 0) {\n    return false;\n  }\n  if (n % 19 === 0) {\n    return false;\n  }\n  return true;\n};\n\n/*\n  Given a number n, return true if n is a prime number, false otherwise.\n  >>> isPrimeNumberNumber7(13195)\n  true\n  >>> isPrimeNumberNumber7(2048)\n  false\n  */\nconst isPrimeNumberNumber8 = (n) => {\n  if (n <= 1) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return false;\n  }\n  if (n % 5 === 0) {\n    return false;\n  }\n  if (n % 7 === 0) {\n    return false;\n  }\n  if (n % 13 === 0) {\n    return false;\n  }\n  if (n % 17 === 0) {\n    return false;\n  }\n  if (n % 19 === 0) {\n    return false;\n  }\n  return true;\n};\n\n/*\n  Given a number n, return true if n is a prime number, false otherwise.\n  >>> isPrimeNumberNumber8(13195)\n  true\n  >>> isPrimeNumberNumber8(2048)\n  false\n  */\nconst isPrimeNumberNumber9 = (n) => {\n  if (n <= 1) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return false;\n  }\n  if (n % 5 === 0) {\n    return false;\n  }\n  if (n % 7 === 0) {\n    return false;\n  }\n  if (n % 13 === 0) {\n    return false;\n  }\n  if (n % 17 === 0) {\n    return false;\n  }\n  if (n % 19 === 0) {\n    return false;\n  }\n  return true;\n};", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parseNetsedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNetsedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNetsedParens", "gc": "<|endoftext|>/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parseNetsedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNetsedParens = (paren_string) => {\n  const paren_stack = [];\n  const paren_levels = [];\n  const paren_levels_stack = [];\n  const paren_levels_stack_count = 0;\n  const paren_levels_stack_index = 0;\n  const paren_levels_stack_count2 = 0;\n  const paren_levels_stack_index2 = 0;\n  const paren_levels_stack_count3 = 0;\n  const paren_levels_stack_index3 = 0;\n  const paren_levels_stack_count4 = 0;\n  const paren_levels_stack_index4 = 0;\n  const paren_levels_stack_count5 = 0;\n  const paren_levels_stack_index5 = 0;\n  const paren_levels_stack_count6 = 0;\n  const paren_levels_stack_index6 = 0;\n  const paren_levels_stack_count7 = 0;\n  const paren_levels_stack_index7 = 0;\n  const paren_levels_stack_count8 = 0;\n  const paren_levels_stack_index8 = 0;\n  const paren_levels_stack_count9 = 0;\n  const paren_levels_stack_index9 = 0;\n  const paren_levels_stack_count10 = 0;\n  const paren_levels_stack_index10 = 0;\n  const paren_levels_stack_count11 = 0;\n  const paren_levels_stack_index11 = 0;\n  const paren_levels_stack_count12 = 0;\n  const paren_levels_stack_index12 = 0;\n  const paren_levels_stack_count13 = 0;\n  const paren_levels_stack_index13 = 0;\n  const paren_levels_stack_count14 = 0;\n  const paren_levels_stack_index14 = 0;\n  const paren_levels_stack_count15 = 0;\n  const paren_levels_stack_index15 = 0;\n  const paren_levels_stack_count16 = 0;\n  const paren_levels_stack_index16 = 0;\n  const paren_levels_stack_count17 = 0;\n  const paren_levels_stack_index17 = 0;\n  const paren_levels_stack_count18 = 0;\n  const paren_levels_stack_index18 = 0;\n  const paren_levels_stack_count19 = 0;\n  const paren_levels_stack_index19 = 0;\n  const paren_levels_stack_count20 = 0;\n  const paren_levels_stack_index20 = 0;\n  const paren_levels_stack_count21 = 0;\n  const paren_levels_stack_index21 = 0;\n  const paren_levels_stack_count22 = 0;\n  const paren_levels_stack_index22 = 0;\n  const paren_levels_stack_count23 = 0;\n  const paren_levels_stack_index23 = 0;\n  const paren_levels_stack_count24 = 0;\n  const paren_levels_stack_index24 = 0;\n  const paren_levels_stack_count25 = 0;\n  const paren_levels_stack_index25 = 0;\n  const paren_levels_stack_count26 = 0;\n  const paren_levels_stack_index26 = 0;\n  const paren_levels_stack_count27 = 0;\n  const paren_levels_stack_index27 = 0;\n  const paren_levels_stack_count28 = 0;\n  const paren_levels_stack_index28 = 0;\n  const paren_levels_stack_count29 = 0;\n  const paren_levels_stack_index29 = 0;\n  const paren_levels_stack_count30 = 0;\n  const paren_levels_stack_index30 = 0;\n  const paren_levels_stack_count31 = 0;\n  const paren_levels_stack_index31 = 0;\n  const paren_levels_stack_count32 = 0;\n  const paren_levels_stack_index32 = 0;\n  const paren_levels_stack_count33 = 0;\n  const paren_levels_stack_index33 = 0;\n  const paren_levels_stack_count34 = 0;\n  const paren_levels_stack_index34 = 0;\n  const paren_levels_stack_count35 = 0;\n  const paren_levels_stack_index35 = 0;\n  const paren_levels_stack_count36 = 0;\n  const paren_levels_stack_index36 = 0;\n  const paren_levels_stack_count37 = 0;\n  const paren_levels_stack_index37 = 0;\n  const paren_levels_stack_count38 = 0;\n  const paren_levels_stack_index38 = 0;\n  const paren_levels_stack_count39 = 0;\n  const paren_levels_stack_index39 = 0;\n  const paren_levels_stack_count40 = 0;\n  const paren_levels_stack_index40 = 0;\n  const paren_levels_stack_count41 = 0;\n  const paren_levels_stack_index41 = 0;\n  const paren_levels_stack_count42 = 0;\n  const paren_levels_stack_index42 = 0;\n  const paren_levels_stack_count43 = 0;\n  const paren_levels_stack_index43 = 0;\n  const paren_levels_stack_count44 = 0;\n  const paren_levels_stack_index44 = 0;\n  const paren_levels_stack_count45 = 0;\n  const paren_levels_stack_index45 = 0;\n  const paren_levels_stack_count46 = 0;\n  const paren_levels_stack_index46 = 0;\n  const paren_levels_stack_count47 = 0;\n  const paren_levels_stack_index47 = 0;\n  const paren_levels_stack_count48 = 0;\n  const paren_levels_stack_index48 = 0;\n  const paren_levels_stack_count49 = 0;\n  const paren_levels_stack_index49 = 0;\n  const paren_levels_stack_count50 = 0;\n  const paren_levels_stack_index50 = 0;\n  const paren_levels_stack_count51 = 0;\n  const paren_levels_stack_index51 = 0;\n  const paren_levels_stack_count52 = 0;\n  const paren_levels_stack_index52 = 0;\n  const paren_levels_stack_count53 = 0;\n  const paren_levels_stack_index53 = 0;\n  const paren_levels_stack_count54 = 0;\n  const paren_levels_stack_index54 = 0;\n  const paren_levels_stack_count55 = 0;\n  const paren_levels_stack_index55 = 0;\n  const paren_levels_stack_count56 = 0;\n  const paren_levels_stack_index56 = 0;\n  const paren_levels_stack_count57 = 0;\n  const paren_levels_stack_index57 = 0;\n  const paren_levels_stack_count58 = 0;\n  const paren_levels_stack_index58 = 0;\n  const paren_levels_stack_count59 = 0;\n  const paren_levels_stack_index59 = 0;\n  const paren_levels_stack_count60 = 0;\n  const paren_levels_stack_index60 = 0;\n  const paren_levels_stack_count61 = 0;\n  const paren_levels_stack_index61 = 0;\n  const paren_levels_stack_count62 = 0;\n  const paren_levels_stack_index62 = 0;\n  const paren_levels_stack_count63 = 0;\n  const paren_levels_stack_index63 = 0;\n  const paren_levels_stack_count64 = 0;\n  const paren_levels_stack_index64 = 0;\n  const paren_levels_stack_count65 = 0;\n  const paren_levels_stack_index65 = 0;\n  const paren_levels_stack_count66 = 0;\n  const paren_levels_stack_index66 = 0;\n  const paren_levels_stack_count67 = 0;\n  const paren_levels_stack_index67 = 0;\n  const paren_levels_stack_count68 = 0;\n  const paren_levels_stack_index68 = 0;\n  const paren_levels_stack_count69 = 0;\n  const paren_levels_stack_index69 = 0;\n  const paren_levels_stack_count70 = 0;\n  const paren_levels_stack_index70 = 0;\n  const paren_levels_stack_count71 = 0;\n  const paren_levels_stack_index71 = 0;\n  const paren_levels_stack_count72 = 0;\n  const ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/60", "prompt": "/*sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "gc": "<|endoftext|>/*sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/**\n * A function that returns the sum of all the numbers from 1 to n.\n * It works by iterating from 1 to n and adding the numbers together\n * until it reaches the number n.\n * It returns the sum of all the numbers from 1 to n.\n * It works by iterating from 1 to n and adding the numbers together\n * until it reaches the number n.\n * It returns the sum of all the numbers from 1 to n.\n * It works by iterating from 1 to n and adding the numbers together\n * until it reaches the number n.\n * It returns the sum of all the numbers from 1 to n.\n * It works by iterating from 1 to n and adding the numbers together\n * until it reaches the number n.\n * It returns the sum of all the numbers from 1 to n.\n * It works by iterating from 1 to n and adding the numbers together\n * until it reaches the number n.\n * It returns the sum of all the numbers from 1 to n.\n * It works by iterating from 1 to n and adding the numbers together\n * until it reaches the number n.\n * It returns the sum of all the numbers from 1 to n.\n * It works by iterating from 1 to n and adding the numbers together\n * until it reaches the number n.\n * It returns the sum of all the numbers from 1 to n.\n * It works by iterating from 1 to n and adding the numbers together\n * until it reaches the number n.\n * It returns the sum of all the numbers from 1 to n.\n * It works by iterating from 1 to n and adding the numbers together\n * until it reaches the number n.\n * It returns the sum of all the numbers from 1 to n.\n * It works by iterating from 1 to n and adding the numbers together\n * until it reaches the number n.\n * It returns the sum of all the numbers from 1 to n.\n * It works by iterating from 1 to n and adding the numbers together\n * until it reaches the number n.\n * It returns the sum of all the numbers from 1 to n.\n * It works by iterating from 1 to n and adding the numbers together\n * until it reaches the number n.\n * It returns the sum of all the numbers from 1 to n.\n * It works by iterating from 1 to n and adding the numbers together\n * until it reaches the number n.\n * It returns the sum of all the numbers from 1 to n.\n * It works by iterating from 1 to n and adding the numbers together\n * until it reaches the number n.\n * It returns the sum of all the numbers from 1 to n.\n * It works by iterating from 1 to n and adding the numbers together\n * until it reaches the number n.\n * It returns the sum of all the numbers from 1 to n.\n * It works by iterating from 1 to n and adding the numbers together\n * until it reaches the number n.\n * It returns the sum of all the numbers from 1 to n.\n * It works by iterating from 1 to n and adding the numbers together\n * until it reaches the number n.\n * It returns the sum of all the numbers from 1 to n.\n * It works by iterating from 1 to n and adding the numbers together\n * until it reaches the number n.\n * It returns the sum of all the numbers from 1 to n.\n * It works by iterating from 1 to n and adding the numbers together\n * until it reaches the number n.\n * It returns the sum of all the numbers from 1 to n.\n * It works by iterating from 1 to n and adding the numbers together\n * until it reaches the number n.\n * It returns the sum of all the numbers from 1 to n.\n * It works by iterating from 1 to n and adding the numbers together\n * until it reaches the number n.\n * It returns the sum of all the numbers from 1 to n.\n * It works by iterating from 1 to n and adding the numbers together\n * until it reaches the number n.\n * It returns the sum of all the numbers from 1 to n.\n * It works by iterating from 1 to n and adding the numbers together\n * until it reaches the number n.\n * It returns the sum of all the numbers from 1 to n.\n * It works by iterating from 1 to n and adding the numbers together\n * until it reaches the number n.\n * It returns the sum of all the numbers from 1 to n.\n * It works by iterating from 1 to n and adding the numbers together\n * until it reaches the number n.\n * It returns the sum of all the numbers from 1 to n.\n * It works by iterating from 1 to n and adding the numbers together\n * until it reaches the number n.\n * It returns the sum of all the numbers from 1 to n.\n * It works by iterating from 1 to n and adding the numbers together\n * until it reaches the number n.\n * It returns the sum of all the numbers from 1 to n.\n * It works by iterating from 1 to n and adding the numbers together\n * until it reaches the number n.\n * It returns the sum of all the numbers from 1 to n.\n * It works by iterating from 1 to n and adding the numbers together\n * until it reaches the number n.\n * It returns the sum of all the numbers from 1 to n.\n * It works by iterating from 1 to n and adding the numbers together\n * until it reaches the number n.\n * It returns the sum of all the numbers from 1 to n.\n * It works by iterating from 1 to n and adding the numbers together\n * until it reaches the number n.\n * It returns the sum of all the numbers from 1 to n.\n * It works by iterating from 1 to n and adding the numbers together\n * until it reaches the number n.\n * It returns the sum of all the numbers from 1 to n.\n * It works by iterating from 1 to n and adding the numbers together\n * until it reaches the number n.\n * It returns the sum of all the numbers from 1 to n.\n * It works by iterating from 1 to n and adding the numbers together\n * until it reaches the number n.\n * It returns the sum of all the numbers from 1 to n.\n * It works by iterating from 1 to n and adding the numbers together\n * until it reaches the number n.\n * It returns the sum of all the numbers from 1 to n.\n * It works by iterating from 1 to n and adding the numbers together\n * until it reaches the number n.\n * It returns the sum of all the numbers from 1 to n.\n * It works by iterating from 1 to n and adding the numbers together\n * until it reaches the number n.\n * It returns the sum of all the numbers from 1 to n.\n * It works by iterating from 1 to n and adding the numbers together\n * until it reaches the number n.\n * It returns the sum of all the numbers from 1 to n.\n * It works by iterating from 1 to n and adding the numbers together\n * until it reaches the number n.\n * It returns the sum of all the numbers from 1 to n.\n * It works by iterating from 1 to n and adding the numbers together\n * until it reaches the number n.\n * It returns the sum of all the numbers from 1 to n.\n * It works by iterating from 1 to n and adding the numbers together\n * until it reaches the number n.\n * It returns the sum of all the numbers from 1 to n.\n * It works by iterating from 1 to n and adding the numbers together\n * until it reaches the number n.\n * It returns the ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketnig(\"(\")\n  false\n  >>> correctBracketnig(\"()\")\n  true\n  >>> correctBracketnig(\"(()())\")\n  true\n  >>> correctBracketnig(\")(()\")\n  false\n  */\nconst correctBracketnig = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketnig", "gc": "<|endoftext|>/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketnig(\"(\")\n  false\n  >>> correctBracketnig(\"()\")\n  true\n  >>> correctBracketnig(\"(()())\")\n  true\n  >>> correctBracketnig(\")(()\")\n  false\n  */\nconst correctBracketnig = (brackets) => {\n  const openingBrackets = brackets.split('(');\n  const closingBrackets = brackets.split(')');\n  return openingBrackets.every(opening => closingBrackets.every(closing => opening === closing));\n};\n\n/**\n * Returns true if a word is a valid Python identifier.\n *\n * Python identifiers are alphanumeric characters, underscores and hyphens.\n *\n * >>> isPythonIdentifier(\"_\")\n * true\n * >>> isPythonIdentifier(\"_\")\n * false\n * >>> isPythonIdentifier(\"_\")\n * false\n * >>> isPythonIdentifier(\"_\")\n * false\n * >>> isPythonIdentifier(\"_\")\n * false\n * >>> isPythonIdentifier(\"_\")\n * false\n * >>> isPythonIdentifier(\"_\")\n * false\n * >>> isPythonIdentifier(\"_\")\n * false\n * >>> isPythonIdentifier(\"_\")\n * false\n * >>> isPythonIdentifier(\"_\")\n * false\n * >>> isPythonIdentifier(\"_\")\n * false\n * >>> isPythonIdentifier(\"_\")\n * false\n * >>> isPythonIdentifier(\"_\")\n * false\n * >>> isPythonIdentifier(\"_\")\n * false\n * >>> isPythonIdentifier(\"_\")\n * false\n * >>> isPythonIdentifier(\"_\")\n * false\n * >>> isPythonIdentifier(\"_\")\n * false\n * >>> isPythonIdentifier(\"_\")\n * false\n * >>> isPythonIdentifier(\"_\")\n * false\n * >>> isPythonIdentifier(\"_\")\n * false\n * >>> isPythonIdentifier(\"_\")\n * false\n * >>> isPythonIdentifier(\"_\")\n * false\n * >>> isPythonIdentifier(\"_\")\n * false\n * >>> isPythonIdentifier(\"_\")\n * false\n * >>> isPythonIdentifier(\"_\")\n * false\n * >>> isPythonIdentifier(\"_\")\n * false\n * >>> isPythonIdentifier(\"_\")\n * false\n * >>> isPythonIdentifier(\"_\")\n * false\n * >>> isPythonIdentifier(\"_\")\n * false\n * >>> isPythonIdentifier(\"_\")\n * false\n * >>> isPythonIdentifier(\"_\")\n * false\n * >>> isPythonIdentifier(\"_\")\n * false\n * >>> isPythonIdentifier(\"_\")\n * false\n * >>> isPythonIdentifier(\"_\")\n * false\n * >>> isPythonIdentifier(\"_\")\n * false\n * >>> isPythonIdentifier(\"_\")\n * false\n * >>> isPythonIdentifier(\"_\")\n * false\n * >>> isPythonIdentifier(\"_\")\n * false\n * >>> isPythonIdentifier(\"_\")\n * false\n * >>> isPythonIdentifier(\"_\")\n * false\n * >>> isPythonIdentifier(\"_\")\n * false\n * >>> isPythonIdentifier(\"_\")\n * false\n * >>> isPythonIdentifier(\"_\")\n * false\n * >>> isPythonIdentifier(\"_\")\n * false\n * >>> isPythonIdentifier(\"_\")\n * false\n * >>> isPythonIdentifier(\"_\")\n * false\n * >>> isPythonIdentifier(\"_\")\n * false\n * >>> isPythonIdentifier(\"_\")\n * false\n * >>> isPythonIdentifier(\"_\")\n * false\n * >>> isPythonIdentifier(\"_\")\n * false\n * >>> isPythonIdentifier(\"_\")\n * false\n * >>> isPythonIdentifier(\"_\")\n * false\n * >>> isPythonIdentifier(\"_\")\n * false\n * >>> isPythonIdentifier(\"_\")\n * false\n * >>> isPythonIdentifier(\"_\")\n * false\n * >>> isPythonIdentifier(\"_\")\n * false\n * >>> isPythonIdentifier(\"_\")\n * false\n * >>> isPythonIdentifier(\"_\")\n * false\n * >>> isPythonIdentifier(\"_\")\n * false\n * >>> isPythonIdentifier(\"_\")\n * false\n * >>> isPythonIdentifier(\"_\")\n * false\n * >>> isPythonIdentifier(\"_\")\n * false\n * >>> isPythonIdentifier(\"_\")\n * false\n * >>> isPythonIdentifier(\"_\")\n * false\n * >>> isPythonIdentifier(\"_\")\n * false\n * >>> isPythonIdentifier(\"_\")\n * false\n * >>> isPythonIdentifier(\"_\")\n * false\n * >>> isPythonIdentifier(\"_\")\n * false\n * >>> isPythonIdentifier(\"_\")\n * false\n * >>> isPythonIdentifier(\"_\")\n * false\n * >>> isPythonIdentifier(\"_\")\n * false\n * >>> isPythonIdentifier(\"_\")\n * false\n * >>> isPythonIdentifier(\"_\")\n * false\n * >>> isPythonIdentifier(\"_\")\n * false\n * >>> isPythonIdentifier(\"_\")\n * false\n * >>> isPythonIdentifier(\"_\")\n * false\n * >>> isPythonIdentifier(\"_\")\n * false\n * >>> isPythonIdentifier(\"_\")\n * false\n * >>> isPythonIdentifier(\"_\")\n * false\n * >>> isPythonIdentifier(\"_\")\n * false\n * >>> isPythonIdentifier(\"_\")\n * false\n * >>> isPythonIdentifier(\"_\")\n * false\n * >>> isPythonIdentifier(\"_\")\n * false\n * >>> isPythonIdentifier(\"_\")\n * false\n * >>> isPythonIdentifier(\"_\")\n * false\n * >>> isPythonIdentifier(\"_\")\n * false\n * >>> isPythonIdentifier(\"_\")\n * false\n * >>> isPythonIdentifier(\"_\")\n * false\n * >>> isPythonIdentifier(\"_\")\n * false\n * >>> isPythonIdentifier(\"_\")\n * false\n * >>> isPythonIdentifier(\"_\")\n * false\n * >>> isPythonIdentifier(\"_\")\n * false\n * >>> isPythonIdentifier(\"_\")\n * false\n * >>> isPythonIdentifier(\"_\")\n * false\n * >>> isPythonIdentifier(\"_\")\n * false\n * >>> isPythonIdentifier(\"_\")\n * false\n * >>> isPythonIdentifier(\"_\")\n * false\n * >>> isPythonIdentifier(\"_\")\n * false\n * >>> isPythonIdentifier(\"_\")\n * false\n * >>> isPythonIdentifier(\"_\")\n * false\n * >>> isPythonIdentifier(\"_\")\n * false\n * >>> isPythonIdentifier(\"_\")\n * false\n * >>> isPythonIdentifier(\"_\")\n * false\n * >>> isPythonIdentifier(\"_\")\n * false\n * >>> isPythonIdentifier(\"_\")\n * false\n * >>> isPythonIdentifier(\"_\")\n * false\n * >>> isPythonIdentifier(\"_\")\n * false\n * >>> isPythonIdentifier(\"_\")\n * false\n * >>> isPythonIdentifier(\"_\")\n * false\n * >>> isPythonIdentifier(\"_\")\n * false\n * >>> isPythonIdentifier(\"_\")\n * false\n * >>> isPythonIdentifier(\"_\")\n * false\n * >>> isPythonIdentifier(\"_\")\n * false\n * >>> isPythonIdentifier(\"_\")\n * false\n * >>> isPythonIdentifier(\"_\")\n * false\n * >>> isPythonIdentifier(\"_\")\n * false\n * >>> isPythonIdentifier(\"_\")\n * false\n * >>> isPythonIdentifier(\"_\")\n * false\n * >>> isPythonIdentifier(\"_\")\n * false\n * >>> isPythonIdentifier(\"_\")\n * false\n * >>> isPythonIdentifier(\"_\")\n * false\n * >>> isPythonIdentifier(\"_\")\n * false\n * >>> isPythonIdentifier(\"_\")\n * false\n * >>> isPythonIdentifier(\"", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "gc": "<|endoftext|>/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const n = xs.length\n  const d = new Array(n)\n  for (let i = 0; i < n; i++) {\n    d[i] = xs[i + 1] - xs[i]\n  }\n  return d\n}\n\n/**\n * Calculate inverse of a polynomial\n * x^-1 + (x^-2)*x +...\n * Return inverse of this polynomial in the same form.\n * >>> inverse([3, 1, 2, 4, 5])\n * [1, 4, 12, 20]\n * >>> inverse([1, 2, 3])\n * [2, -3]\n */\nconst inverse = (xs) => {\n  const n = xs.length\n  const i = new Array(n)\n  for (let i = 0; i < n; i++) {\n    i[i] = xs[i] - xs[i + 1]\n  }\n  return i\n}\n\n/**\n * Calculate inverse of a polynomial\n * x^-1 + (x^-2)*x +...\n * Return inverse of this polynomial in the same form.\n * >>> inverse([3, 1, 2, 4, 5])\n * [1, 4, 12, 20]\n * >>> inverse([1, 2, 3])\n * [2, -3]\n */\nconst inverseOf = (xs) => {\n  const n = xs.length\n  const i = new Array(n)\n  for (let i = 0; i < n; i++) {\n    i[i] = xs[i] - xs[i + 1]\n  }\n  return i\n}\n\n/**\n * Calculate inverse of a polynomial\n * x^-1 + (x^-2)*x +...\n * Return inverse of this polynomial in the same form.\n * >>> inverse([3, 1, 2, 4, 5])\n * [1, 4, 12, 20]\n * >>> inverse([1, 2, 3])\n * [2, -3]\n */\nconst inverseOf = (xs) => {\n  const n = xs.length\n  const i = new Array(n)\n  for (let i = 0; i < n; i++) {\n    i[i] = xs[i] - xs[i + 1]\n  }\n  return i\n}\n\n/**\n * Calculate inverse of a polynomial\n * x^-1 + (x^-2)*x +...\n * Return inverse of this polynomial in the same form.\n * >>> inverse([3, 1, 2, 4, 5])\n * [1, 4, 12, 20]\n * >>> inverse([1, 2, 3])\n * [2, -3]\n */\nconst inverseOf = (xs) => {\n  const n = xs.length\n  const i = new Array(n)\n  for (let i = 0; i < n; i++) {\n    i[i] = xs[i] - xs[i + 1]\n  }\n  return i\n}\n\n/**\n * Calculate inverse of a polynomial\n * x^-1 + (x^-2)*x +...\n * Return inverse of this polynomial in the same form.\n * >>> inverse([3, 1, 2, 4, 5])\n * [1, 4, 12, 20]\n * >>> inverse([1, 2, 3])\n * [2, -3]\n */\nconst inverseOf = (xs) => {\n  const n = xs.length\n  const i = new Array(n)\n  for (let i = 0; i < n; i++) {\n    i[i] = xs[i] - xs[i + 1]\n  }\n  return i\n}\n\n/**\n * Calculate inverse of a polynomial\n * x^-1 + (x^-2)*x +...\n * Return inverse of this polynomial in the same form.\n * >>> inverse([3, 1, 2, 4, 5])\n * [1, 4, 12, 20]\n * >>> inverse([1, 2, 3])\n * [2, -3]\n */\nconst inverseOf = (xs) => {\n  const n = xs.length\n  const i = new Array(n)\n  for (let i = 0; i < n; i++) {\n    i[i] = xs[i] - xs[i + 1]\n  }\n  return i\n}\n\n/**\n * Calculate inverse of a polynomial\n * x^-1 + (x^-2)*x +...\n * Return inverse of this polynomial in the same form.\n * >>> inverse([3, 1, 2, 4, 5])\n * [1, 4, 12, 20]\n * >>> inverse([1, 2, 3])\n * [2, -3]\n */\nconst inverseOf = (xs) => {\n  const n = xs.length\n  const i = new Array(n)\n  for (let i = 0; i < n; i++) {\n    i[i] = xs[i] - xs[i + 1]\n  }\n  return i\n}\n\n/**\n * Calculate inverse of a polynomial\n * x^-1 + (x^-2)*x +...\n * Return inverse of this polynomial in the same form.\n * >>> inverse([3, 1, 2, 4, 5])\n * [1, 4, 12, 20]\n * >>> inverse([1, 2, 3])\n * [2, -3]\n */\nconst inverseOf = (xs) => {\n  const n = xs.length\n  const i = new Array(n)\n  for (let i = 0; i < n; i++) {\n    i[i] = xs[i] - xs[i + 1]\n  }\n  return i\n}\n\n/**\n * Calculate inverse of a polynomial\n * x^-1 + (x^-2)*x +...\n * Return inverse of this polynomial in the same form.\n * >>> inverse([3, 1, 2, 4, 5])\n * [1, 4, 12, 20]\n * >>> inverse([1, 2, 3])\n * [2, -3]\n */\nconst inverseOf = (xs) => {\n  const n = xs.length\n  const i = new Array(n)\n  for (let i = 0; i < n; i++) {\n    i[i] = xs[i] - xs[i + 1]\n  }\n  return i\n}\n\n/**\n * Calculate inverse of a polynomial\n * x^-1 + (x^-2)*x +...\n * Return inverse of this polynomial in the same form.\n * >>> inverse([3, 1, 2, 4, 5])\n * [1, 4, 12, 20]\n * >>> inverse([1, 2, 3])\n * [2, -3]\n */\nconst inverseOf = (xs) => {\n  const n = xs.length\n  const i = new Array(n)\n  for (let i = 0; i < n; i++) {\n    i[i] = xs[i] - xs[i + 1]\n  }\n  return i\n}\n\n/**\n * Calculate inverse of a polynomial\n * x^-1 + (x^-2)*x +...\n * Return inverse of this polynomial in the same form.\n * >>> inverse([3, 1, 2, 4, 5])\n * [1, 4, 12, 20]\n * >>> inverse([1, 2, 3])\n * [2, -3]\n */\nconst inverseOf = (xs) => {\n  const n = xs.length\n  const i = new Array(n)\n  for (let i = 0; i < n; i++) {\n    i[i] = xs[i] - xs[i + 1]\n  }\n  return i\n}\n\n/**\n * Calculate inverse of a polynomial\n * x^-1 + (x^-2)*x +...\n * Return inverse of this polynomial in the same form.\n * >>> inverse([3, 1, 2, 4, 5])\n * [1, 4, 12, 20]\n * >>> inverse([1, 2, 3])\n * [2, -3]\n */\nconst inverseOf = (xs) => {\n  const n = xs.length\n  const i = new Array(n)\n  for (let i = 0; i < n; i++) {\n    i[i] = xs[i] - xs[i + 1]\n  }\n  return i\n}\n\n/**\n * Calculate inverse of a polynomial\n * x^-1 + (x^-2)*x +...\n * Return inverse of this polynomial in the same form.\n * >>> inverse([3, 1, 2, 4, 5])\n * [1, 4, 12, 20]\n * >>> inverse([1, 2, 3])\n * [2, -3]\n */\nconst inverseOf = (xs) => {\n  const n = xs.length\n  const i = new Array(n)\n  for (let i = 0; i < n; i++) {\n    i[i] = xs[i] - xs[i + 1]\n  }\n  return i\n}\n\n/**\n * Calculate inverse of a polynomial\n * x^-1 + (x^-2)*x +...\n * Return inverse of this polynomial in the same form.\n * >>> inverse([3, 1, 2, 4, 5])\n * [1, 4, 12, 20]\n * >>> inverse([1, 2, 3])\n * [2, -3]\n */\nconst inverseOf = (xs) => {\n  const n = xs.length\n  const i = new Array(n)\n  for (let i = 0; i < n; i++) {\n    i[i] = xs[i] - xs[i + 1]\n  }\n  return i\n}\n\n/**\n * Calculate inverse of a polynomial\n * x^-1 + (x^-2)*x +...\n * Return inverse of this polynomial in the same form.\n * >>> inverse([3, 1, 2, 4, 5])\n * [1, 4, 12, 20]\n * >>> inverse", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "gc": "<|endoftext|>/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n <= 1) return 0;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  Write a function to compute the Fibonacci sequence up to a certain number.\n  >>> fibonacci(10)\n  [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]\n  >>> fibonacci(15)\n  [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  >>> fibonacci(20)\n  [1, 2, 3, 5, 8, 13, 21, 34]\n  >>> fibonacci(25)\n  [1, 2, 3, 5, 8, 13, 21, 34, 55]\n  >>> fibonacci(30)\n  [1, 2, 3, 5, 8, 13, 21, 34, 55, 89]\n  >>> fibonacci(35)\n  [1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144]\n  >>> fibonacci(40)\n  [1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233]\n  >>> fibonacci(45)\n  [1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377]\n  >>> fibonacci(50)\n  [1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610]\n  >>> fibonacci(55)\n  [1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987]\n  >>> fibonacci(60)\n  [1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597]\n  >>> fibonacci(65)\n  [1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584]\n  >>> fibonacci(70)\n  [1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4699]\n  >>> fibonacci(75)\n  [1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4699, 7357]\n  >>> fibonacci(80)\n  [1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4699, 7357, 10941]\n  >>> fibonacci(85)\n  [1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4699, 7357, 10941, 20689]\n  >>> fibonacci(90)\n  [1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4699, 7357, 10941, 20689, 41857]\n  >>> fibonacci(95)\n  [1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4699, 7357, 10941, 20689, 41857, 67653]\n  >>> fibonacci(100)\n  [1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4699, 7357, 10941, 20689, 41857, 67653, 134621]\n  >>> fibonacci(105)\n  [1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4699, 7357, 10941, 20689, 41857, 67653, 134621, 26287]\n  >>> fibonacci(110)\n  [1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4699, 7357, 10941, 20689, 41857, 67653, 134621, 26287, 514229]\n  >>> fibonacci(115)\n  [1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4699, 7357, 10941, 20689, 41857, 67653, 134621, 26287, 514229, 1023379]\n  >>> fibonacci(120)\n  [1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4699, 7357, 10941, 20689, 41857, 67653, 134621, 26287, 514229, 1023379, 2092151]\n  >>> fibonacci(125)\n  [1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4699, 7357, 10941, 20689, 41857, 67653, 134621, 26287, 514229, 1023379, 2092151, 346579]\n  >>> fibonacci(130)\n  [1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4699, 7357, 10941, 20689, 41857, 67653, 134621, 26287, 514229, 1023379, 2092151, 346579, 553413]\n  >>> fibonacci(135)\n  [1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4699, 7357, 10941, 20689, 41857, 67653, 134621, 26287, 514229, 1023379, 2092151, 346579, 553413, 904623]\n  >>> fibonacci(140)\n  [1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4699, 7357, 10941, 20689, 41857, 67653, 134621, 26287, 514229, 1023379, 2092151, 346579, 553413, 904623, 1597333]\n  >>> fibonacci(145)\n  [1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4699, 7357, 10941, 20689, 41857, 67653, 134621, 26287, 514229, 1023379, 2092151, 346579, 553413, 904623, 1597333, 2036281]\n  >>> fibonacci(150)\n  [1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4699, 7357, 10941, 20689, 41857, 67653, 134621, 26287, 514229, 10233", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 3}
{"task_id": "JavaScript/64", "prompt": "/*Write a function vowelsConut which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelsConut(\"abcde\")\n  2\n  >>> vowelsConut(\"ACEDY\")\n  3\n  */\nconst vowelsConut = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsConut", "gc": "<|endoftext|>/*Write a function vowelsConut which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelsConut(\"abcde\")\n  2\n  >>> vowelsConut(\"ACEDY\")\n  3\n  */\nconst vowelsConut = (s) => {\n  let vowels = 0;\n  let lastVowel = s.charAt(s.length - 1);\n  \n  for(let i = 0; i < s.length; i++) {\n    if(s.charAt(i) === lastVowel) {\n      vowels++;\n    }\n  }\n  return vowels;\n};\n\n/*Write a function vowelsConut which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelsConut(\"abcde\")\n  2\n  >>> vowelsConut(\"ACEDY\")\n  3\n  */\nconst vowelsConut = (s) => {\n  let vowels = 0;\n  let lastVowel = s.charAt(s.length - 1);\n  \n  for(let i = 0; i < s.length; i++) {\n    if(s.charAt(i) === lastVowel) {\n      vowels++;\n    }\n  }\n  return vowels;\n};\n\n/*Write a function vowelsConut which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelsConut(\"abcde\")\n  2\n  >>> vowelsConut(\"ACEDY\")\n  3\n  */\nconst vowelsConut = (s) => {\n  let vowels = 0;\n  let lastVowel = s.charAt(s.length - 1);\n  \n  for(let i = 0; i < s.length; i++) {\n    if(s.charAt(i) === lastVowel) {\n      vowels++;\n    }\n  }\n  return vowels;\n};\n\n/*Write a function vowelsConut which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelsConut(\"abcde\")\n  2\n  >>> vowelsConut(\"ACEDY\")\n  3\n  */\nconst vowelsConut = (s) => {\n  let vowels = 0;\n  let lastVowel = s.charAt(s.length - 1);\n  \n  for(let i = 0; i < s.length; i++) {\n    if(s.charAt(i) === lastVowel) {\n      vowels++;\n    }\n  }\n  return vowels;\n};\n\n/*Write a function vowelsConut which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelsConut(\"abcde\")\n  2\n  >>> vowelsConut(\"ACEDY\")\n  3\n  */\nconst vowelsConut = (s) => {\n  let vowels = 0;\n  let lastVowel = s.charAt(s.length - 1);\n  \n  for(let i = 0; i < s.length; i++) {\n    if(s.charAt(i) === lastVowel) {\n      vowels++;\n    }\n  }\n  return vowels;\n};\n\n/*Write a function vowelsConut which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelsConut(\"abcde\")\n  2\n  >>> vowelsConut(\"ACEDY\")\n  3\n  */\nconst vowelsConut = (s) => {\n  let vowels = 0;\n  let lastVowel = s.charAt(s.length - 1);\n  \n  for(let i = 0; i < s.length; i++) {\n    if(s.charAt(i) === lastVowel) {\n      vowels++;\n    }\n  }\n  return vowels;\n};\n\n/*Write a function vowelsConut which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelsConut(\"abcde\")\n  2\n  >>> vowelsConut(\"ACEDY\")\n  3\n  */\nconst vowelsConut = (s) => {\n  let vowels = 0;\n  let lastVowel = s.charAt(s.length - 1);\n  \n  for(let i = 0; i < s.length; i++) {\n    if(s.charAt(i) === lastVowel) {\n      vowels++;\n    }\n  }\n  return vowels;\n};\n\n/*Write a function vowelsConut which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelsConut(\"abcde\")\n  2\n  >>> vowelsConut(\"ACEDY\")\n  3\n  */\nconst vowelsConut = (s) => {\n  let vowels = 0;\n  let lastVowel = s.charAt(s.length - 1);\n  \n  for(let i = 0; i < s.length; i++) {\n    if(s.charAt(i) === lastVowel) {\n      vowels++;\n    }\n  }\n  return vowels;\n};\n\n/*Write a function vowelsConut which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelsConut(\"abcde\")\n  2\n  >>> vowelsConut(\"ACEDY\")\n  3\n  */\nconst vowelsConut = (s) => {\n  let vowels = 0;\n  let lastVowel = s.charAt(s.length - 1);\n  \n  for(let i = 0; i < s.length; i++) {\n    if(s.charAt(i) === lastVowel) {\n      vowels++;\n    }\n  }\n  return vowels;\n};\n\n/*Write a function vowelsConut which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelsConut(\"abcde\")\n  2\n  >>> vowelsConut(\"ACEDY\")\n  3\n  */\nconst vowelsConut = (s) => {\n  let vowels = 0;\n  let lastVowel = s.charAt(s.length - 1);\n  \n  for(let i = 0; i < s.length; i++) {\n    if(s.charAt(i) === lastVowel) {\n      vowels++;\n    }\n  }\n  return vowels;\n};\n\n/*Write a function vowelsConut which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> circularSihft(12, 1)\n  \"21\"\n  >>> circularSihft(12, 2)\n  \"12\"\n  */\nconst circularSihft = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularSihft", "gc": "<|endoftext|>/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> circularSihft(12, 1)\n  \"21\"\n  >>> circularSihft(12, 2)\n  \"12\"\n  */\nconst circularSihft = (x, shift) => {\n  let result = '';\n  let digits = Math.ceil(Math.log10(x));\n  while (digits > 0) {\n    let digit = x % 10;\n    result += digits[digit];\n    x = Math.floor(x / 10);\n    digits--;\n  }\n  return result + x.toString().split('').reverse().join('');\n};\n\n/*\n  Convert a decimal number to its binary representation.\n  >>> decimalToBinary(42)\n  \"1010\"\n  >>> decimalToBinary(43)\n  \"1110\"\n  >>> decimalToBinary(44)\n  \"1011\"\n  >>> decimalToBinary(45)\n  \"1101\"\n  >>> decimalToBinary(46)\n  \"1110\"\n  >>> decimalToBinary(47)\n  \"1011\"\n  >>> decimalToBinary(48)\n  \"1101\"\n  >>> decimalToBinary(49)\n  \"1110\"\n  >>> decimalToBinary(50)\n  \"1011\"\n  >>> decimalToBinary(51)\n  \"1101\"\n  >>> decimalToBinary(52)\n  \"1110\"\n  >>> decimalToBinary(53)\n  \"1011\"\n  >>> decimalToBinary(54)\n  \"1101\"\n  >>> decimalToBinary(55)\n  \"1110\"\n  >>> decimalToBinary(56)\n  \"1011\"\n  >>> decimalToBinary(57)\n  \"1101\"\n  >>> decimalToBinary(58)\n  \"1110\"\n  >>> decimalToBinary(59)\n  \"1011\"\n  >>> decimalToBinary(60)\n  \"1101\"\n  >>> decimalToBinary(61)\n  \"1110\"\n  >>> decimalToBinary(62)\n  \"1011\"\n  >>> decimalToBinary(63)\n  \"1101\"\n  >>> decimalToBinary(64)\n  \"1110\"\n  >>> decimalToBinary(65)\n  \"1011\"\n  >>> decimalToBinary(66)\n  \"1101\"\n  >>> decimalToBinary(67)\n  \"1110\"\n  >>> decimalToBinary(68)\n  \"1011\"\n  >>> decimalToBinary(69)\n  \"1101\"\n  >>> decimalToBinary(70)\n  \"1110\"\n  >>> decimalToBinary(71)\n  \"1011\"\n  >>> decimalToBinary(72)\n  \"1101\"\n  >>> decimalToBinary(73)\n  \"1110\"\n  >>> decimalToBinary(74)\n  \"1011\"\n  >>> decimalToBinary(75)\n  \"1101\"\n  >>> decimalToBinary(76)\n  \"1110\"\n  >>> decimalToBinary(77)\n  \"1011\"\n  >>> decimalToBinary(78)\n  \"1101\"\n  >>> decimalToBinary(79)\n  \"1110\"\n  >>> decimalToBinary(80)\n  \"1011\"\n  >>> decimalToBinary(81)\n  \"1101\"\n  >>> decimalToBinary(82)\n  \"1110\"\n  >>> decimalToBinary(83)\n  \"1011\"\n  >>> decimalToBinary(84)\n  \"1101\"\n  >>> decimalToBinary(85)\n  \"1110\"\n  >>> decimalToBinary(86)\n  \"1011\"\n  >>> decimalToBinary(87)\n  \"1101\"\n  >>> decimalToBinary(88)\n  \"1110\"\n  >>> decimalToBinary(89)\n  \"1011\"\n  >>> decimalToBinary(90)\n  \"1101\"\n  >>> decimalToBinary(91)\n  \"1110\"\n  >>> decimalToBinary(92)\n  \"1011\"\n  >>> decimalToBinary(93)\n  \"1101\"\n  >>> decimalToBinary(94)\n  \"1110\"\n  >>> decimalToBinary(95)\n  \"1011\"\n  >>> decimalToBinary(96)\n  \"1101\"\n  >>> decimalToBinary(97)\n  \"1110\"\n  >>> decimalToBinary(98)\n  \"1011\"\n  >>> decimalToBinary(99)\n  \"1101\"\n  >>> decimalToBinary(100)\n  \"1110\"\n  >>> decimalToBinary(101)\n  \"1011\"\n  >>> decimalToBinary(102)\n  \"1101\"\n  >>> decimalToBinary(103)\n  \"1110\"\n  >>> decimalToBinary(104)\n  \"1011\"\n  >>> decimalToBinary(105)\n  \"1101\"\n  >>> decimalToBinary(106)\n  \"1110\"\n  >>> decimalToBinary(107)\n  \"1011\"\n  >>> decimalToBinary(108)\n  \"1101\"\n  >>> decimalToBinary(109)\n  \"1110\"\n  >>> decimalToBinary(110)\n  \"1011\"\n  >>> decimalToBinary(111)\n  \"1101\"\n  >>> decimalToBinary(112)\n  \"1110\"\n  >>> decimalToBinary(113)\n  \"1011\"\n  >>> decimalToBinary(114)\n  \"1101\"\n  >>> decimalToBinary(115)\n  \"1110\"\n  >>> decimalToBinary(116)\n  \"1011\"\n  >>> decimalToBinary(117)\n  \"1101\"\n  >>> decimalToBinary(118)\n  \"1110\"\n  >>> decimalToBinary(119)\n  \"1011\"\n  >>> decimalToBinary(120)\n  \"1101\"\n  >>> decimalToBinary(121)\n  \"1110\"\n  >>> decimalToBinary(122)\n  \"1011\"\n  >>> decimalToBinary(123)\n  \"1101\"\n  >>> decimalToBinary(124)\n  \"1110\"\n  >>> decimalToBinary(125)\n  \"1011\"\n  >>> decimalToBinary(126)\n  \"1101\"\n  >>> decimalToBinary(127)\n  \"1110\"\n  >>> decimalToBinary(128)\n  \"1011\"\n  >>> decimalToBinary(129)\n  \"1101\"\n  >>> decimalToBinary(130)\n  \"1110\"\n  >>> decimalToBinary(131)\n  \"1011\"\n  >>> decimalToBinary(132)\n  \"1101\"\n  >>> decimalToBinary(133)\n  \"1110\"\n  >>> decimalToBinary(134)\n  \"1011\"\n  >>> decimalToBinary(135)\n  \"1101\"\n  >>> decimalToBinary(136)\n  \"1110\"\n  >>> decimalToBinary(137)\n  \"1011\"\n  >>> decimalToBinary(138)\n  \"1101\"\n  >>> decimalToBinary(139)\n  \"1110\"\n  >>> decimalToBinary(140)\n  \"1011\"\n  >>> decimalToBinary(141)\n  \"1101\"\n  >>> decimalToBinary(142)\n  \"1110\"\n  >>> decimalToBinary(143)\n  \"1011\"\n  >>> decimalToBinary(144)\n  \"1101\"\n  >>> decimalToBinary(145)\n  \"1110\"\n  >>> decimalToBinary(146)\n  \"1011\"\n  >>> decimalToBin", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/66", "prompt": "/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "gc": "<|endoftext|>/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i) - 48;\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the lower characters only'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSumLower = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i) - 48;\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the upper and lower case characters\n  only'\n  ASCII codes.\n\n  Examples:\n      digitSumLower(\"\") => 0\n      digitSumLower(\"abAB\") => 131\n      digitSumLower(\"abcCd\") => 67\n      digitSumLower(\"helloE\") => 69\n      digitSumLower(\"woArBld\") => 131\n      digitSumLower(\"aAaaaXa\") => 153\n  */\nconst digitSumLower = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i) - 48;\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the upper and lower case characters\n  only'\n  ASCII codes.\n\n  Examples:\n      digitSumUpper(\"\") => 0\n      digitSumUpper(\"abAB\") => 131\n      digitSumUpper(\"abcCd\") => 67\n      digitSumUpper(\"helloE\") => 69\n      digitSumUpper(\"woArBld\") => 131\n      digitSumUpper(\"aAaaaXa\") => 153\n  */\nconst digitSumUpper = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i) - 48;\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the upper and lower case characters\n  only'\n  ASCII codes.\n\n  Examples:\n      digitSumLower(\"\") => 0\n      digitSumLower(\"abAB\") => 131\n      digitSumLower(\"abcCd\") => 67\n      digitSumLower(\"helloE\") => 69\n      digitSumLower(\"woArBld\") => 131\n      digitSumLower(\"aAaaaXa\") => 153\n  */\nconst digitSumLower = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i) - 48;\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the upper and lower case characters\n  only'\n  ASCII codes.\n\n  Examples:\n      digitSumUpper(\"\") => 0\n      digitSumUpper(\"abAB\") => 131\n      digitSumUpper(\"abcCd\") => 67\n      digitSumUpper(\"helloE\") => 69\n      digitSumUpper(\"woArBld\") => 131\n      digitSumUpper(\"aAaaaXa\") => 153\n  */\nconst digitSumUpperLower = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i) - 48;\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the upper and lower case characters\n  only'\n  ASCII codes.\n\n  Examples:\n      digitSumLower(\"\") => 0\n      digitSumLower(\"abAB\") => 131\n      digitSumLower(\"abcCd\") => 67\n      digitSumLower(\"helloE\") => 69\n      digitSumLower(\"woArBld\") => 131\n      digitSumLower(\"aAaaaXa\") => 153\n  */\nconst digitSumUpperLower = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i) - 48;\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the upper and lower case characters\n  only'\n  ASCII codes.\n\n  Examples:\n      digitSumUpperLower(\"\") => 0\n      digitSumUpperLower(\"abAB\") => 131\n      digitSumUpperLower(\"abcCd\") => 67\n      digitSumUpperLower(\"helloE\") => 69\n      digitSumUpperLower(\"woArBld\") => 131\n      digitSumUpperLower(\"aAaaaXa\") => 153\n  */\nconst digitSumUpperLower = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i) - 48;\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the upper and lower case characters\n  only'\n  ASCII codes.\n\n  Examples:\n      digitSumUpperLower(\"\") => 0\n      digitSumUpperLower(\"abAB\") => 131\n      digitSumUpperLower(\"abcCd\") => 67\n      digitSumUpperLower(\"helloE\") => 69\n      digitSumUpperLower(\"woArBld\") => 131\n      digitSumUpperLower(\"aAaaaXa\") => 153\n  */\nconst digitSumUpperLower = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i) - 48;\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the upper and lower case characters\n  only'\n  ASCII codes.\n\n  Examples:\n      digitSumUpperLower(\"\") => 0\n      digitSumUpperLower(\"abAB\") => 131\n      digitSumUpperLower(\"abcCd\") => 67\n      digitSumUpperLower(\"helloE\") => 69\n      digitSumUpperLower(\"woArBld\") => 131\n      digitSumUpperLower(\"aAaaaXa\") => 153\n  */\nconst digitSumUpperLower = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i) - 48;\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the upper and lower case characters\n  only'\n  ASCII codes.\n\n  Examples:\n      digitSumUpperLower(\"\") => 0\n      digitSumUpperLower(\"abAB\") => 131\n      digitSumUpperLower(\"abcCd\") => 67\n      digitSumUpperLower(\"helloE\") => 69\n      digitSumUpperLower(\"woArBld\") => 131\n      digitSumUpperLower(\"aAaaaXa\") => 153\n  */\nconst digitSumUpperLow", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "gc": "<|endoftext|>/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n  let total = 0;\n  let apples = 0;\n  let oranges = 0;\n  let mango = 0;\n  let fruits = n.split(' ');\n  fruits.forEach((fruit) => {\n    if (fruit === 'apples') {\n      apples++;\n    } else if (fruit === 'oranges') {\n      oranges++;\n    } else if (fruit ==='mango') {\n      mango++;\n    }\n  });\n  total = apples+oranges+mango;\n  return total;\n};\n\n/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n  let total = 0;\n  let apples = 0;\n  let oranges = 0;\n  let mango = 0;\n  let fruits = n.split(' ');\n  fruits.forEach((fruit) => {\n    if (fruit === 'apples') {\n      apples++;\n    } else if (fruit === 'oranges') {\n      oranges++;\n    } else if (fruit ==='mango') {\n      mango++;\n    }\n  });\n  total = apples+oranges+mango;\n  return total;\n};\n\n/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n  let total = 0;\n  let apples = 0;\n  let oranges = 0;\n  let mango = 0;\n  let fruits = n.split(' ');\n  fruits.forEach((fruit) => {\n    if (fruit === 'apples') {\n      apples++;\n    } else if (fruit === 'oranges') {\n      oranges++;\n    } else if (fruit ==='mango') {\n      mango++;\n    }\n  });\n  total = apples+oranges+mango;\n  return total;\n};\n\n/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n  let total = 0;\n  let apples = 0;\n  let oranges = 0;\n  let mango = 0;\n  let fruits = n.split(' ');\n  fruits.forEach((fruit) => {\n    if (fruit === 'apples') {\n      apples++;\n    } else if (fruit === 'oranges') {\n      oranges++;\n    } else if (fruit ==='mango') {\n      mango++;\n    }\n  });\n  total = apples+oranges+mango;\n  return total;\n};\n\n/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n  let total = 0;\n  let apples = 0;\n  let oranges = 0;\n  let mango = 0;\n  let fruits = n.split(' ');\n  fruits.forEach((fruit) => {\n    if (fruit === 'apples') {\n      apples++;\n    } else if (fruit === 'oranges') {\n      oranges++;\n    } else if (fruit ==='mango') {\n      mango++;\n    }\n  });\n  total = apples+oranges+mango;\n  return total;\n};\n\n/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n  let total = 0;\n  let apples = 0;\n  let oranges = 0;\n  let mango = 0;\n  let fruits = n.split(' ');\n  fruits.forEach((fruit) => {\n    if (fruit === 'apples') {\n      apples++;\n    } else if (fruit ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "gc": "<|endoftext|>/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  const len = arr.length;\n  let min = 0;\n  let max = len - 1;\n  let even = 0;\n  let index = -1;\n  while (min <= max) {\n    even = arr[min];\n    if (even % 2 === 0) {\n      min = min + 1;\n    } else {\n      max = max - 1;\n    }\n    index++;\n  }\n  return [even, index];\n};\n\n// https://leetcode.com/problems/find-the-smallest-positive-integer-that-is-greater-than-or-equal-to-k\n/**\n * @param {number} k\n * @return {number}\n */\nvar findSmallestPositiveInteger = function (k) {\n  const arr = [...Array(k)].map(() => 0);\n  for (let i = 0; i < arr.length; i++) {\n    arr[i] = Math.max(arr[i], arr[i] + i);\n  }\n  return arr[0];\n};\n\n// https://leetcode.com/problems/find-the-smallest-positive-integer-that-is-greater-than-or-equal-to-k\n/**\n * @param {number} k\n * @return {number}\n */\nvar findSmallestPositiveInteger2 = function (k) {\n  const arr = [...Array(k)].map(() => 0);\n  for (let i = 0; i < arr.length; i++) {\n    arr[i] = Math.max(arr[i], arr[i] + i);\n  }\n  return arr[0];\n};\n\n// https://leetcode.com/problems/find-the-smallest-positive-integer-that-is-greater-than-or-equal-to-k\n/**\n * @param {number} k\n * @return {number}\n */\nvar findSmallestPositiveInteger3 = function (k) {\n  const arr = [...Array(k)].map(() => 0);\n  for (let i = 0; i < arr.length; i++) {\n    arr[i] = Math.max(arr[i], arr[i] + i);\n  }\n  return arr[0];\n};\n\n// https://leetcode.com/problems/find-the-smallest-positive-integer-that-is-greater-than-or-equal-to-k\n/**\n * @param {number} k\n * @return {number}\n */\nvar findSmallestPositiveInteger4 = function (k) {\n  const arr = [...Array(k)].map(() => 0);\n  for (let i = 0; i < arr.length; i++) {\n    arr[i] = Math.max(arr[i], arr[i] + i);\n  }\n  return arr[0];\n};\n\n// https://leetcode.com/problems/find-the-smallest-positive-integer-that-is-greater-than-or-equal-to-k\n/**\n * @param {number} k\n * @return {number}\n */\nvar findSmallestPositiveInteger5 = function (k) {\n  const arr = [...Array(k)].map(() => 0);\n  for (let i = 0; i < arr.length; i++) {\n    arr[i] = Math.max(arr[i], arr[i] + i);\n  }\n  return arr[0];\n};\n\n// https://leetcode.com/problems/find-the-smallest-positive-integer-that-is-greater-than-or-equal-to-k\n/**\n * @param {number} k\n * @return {number}\n */\nvar findSmallestPositiveInteger6 = function (k) {\n  const arr = [...Array(k)].map(() => 0);\n  for (let i = 0; i < arr.length; i++) {\n    arr[i] = Math.max(arr[i], arr[i] + i);\n  }\n  return arr[0];\n};\n\n// https://leetcode.com/problems/find-the-smallest-positive-integer-that-is-greater-than-or-equal-to-k\n/**\n * @param {number} k\n * @return {number}\n */\nvar findSmallestPositiveInteger7 = function (k) {\n  const arr = [...Array(k)].map(() => 0);\n  for (let i = 0; i < arr.length; i++) {\n    arr[i] = Math.max(arr[i], arr[i] + i);\n  }\n  return arr[0];\n};\n\n// https://leetcode.com/problems/find-the-smallest-positive-integer-that-is-greater-than-or-equal-to-k\n/**\n * @param {number} k\n * @return {number}\n */\nvar findSmallestPositiveInteger8 = function (k) {\n  const arr = [...Array(k)].map(() => 0);\n  for (let i = 0; i < arr.length; i++) {\n    arr[i] = Math.max(arr[i], arr[i] + i);\n  }\n  return arr[0];\n};\n\n// https://leetcode.com/problems/find-the-smallest-positive-integer-that-is-greater-than-or-equal-to-k\n/**\n * @param {number} k\n * @return {number}\n */\nvar findSmallestPositiveInteger9 = function (k) {\n  const arr = [...Array(k)].map(() => 0);\n  for (let i = 0; i < arr.length; i++) {\n    arr[i] = Math.max(arr[i], arr[i] + i);\n  }\n  return arr[0];\n};\n\n// https://leetcode.com/problems/find-the-smallest-positive-integer-that-is-greater-than-or-equal-to-k\n/**\n * @param {number} k\n * @return {number}\n */\nvar findSmallestPositiveInteger10 = function (k) {\n  const arr = [...Array(k)].map(() => 0);\n  for (let i = 0; i < arr.length; i++) {\n    arr[i] = Math.max(arr[i], arr[i] + i);\n  }\n  return arr[0];\n};\n\n// https://leetcode.com/problems/find-the-smallest-positive-integer-that-is-greater-than-or-equal-to-k\n/**\n * @param {number} k\n * @return {number}\n */\nvar findSmallestPositiveInteger11 = function (k) {\n  const arr = [...Array(k)].map(() => 0);\n  for (let i = 0; i < arr.length; i++) {\n    arr[i] = Math.max(arr[i], arr[i] + i);\n  }\n  return arr[0];\n};\n\n// https://leetcode.com/problems/find-the-smallest-positive-integer-that-is-greater-than-or-equal-to-k\n/**\n * @param {number} k\n * @return {number}\n */\nvar findSmallestPositiveInteger12 = function (k) {\n  const arr = [...Array(k)].map(() => 0);\n  for (let i = 0; i < arr.length; i++) {\n    arr[i] = Math.max(arr[i], arr[i] + i);\n  }\n  return arr[0];\n};\n\n// https://leetcode.com/problems/find-the-smallest-positive-integer-that-is-greater-than-or-equal-to-k\n/**\n * @param {number} k\n * @return {number}\n */\nvar findSmallestPositiveInteger13 = function (k) {\n  const arr = [...Array(k)].map(() => 0);\n  for (let i = 0; i < arr.length; i++) {\n    arr[i] = Math.max(arr[i], arr[i] + i);\n  }\n  return arr[0];\n};\n\n// https://leetcode.com/problems/find-the-smallest-positive-integer-that-is-greater-than-or-equal-to-k\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/69", "prompt": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "gc": "<|endoftext|>/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = 0;\n  let freq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n      freq = i;\n    }\n  }\n  return max;\n};\n\nmodule.exports = search;\n\n},{}],7:[function(require,module,exports){\nconst search = require('./search');\n\n/**\n * Given a non-empty list of positive integers, return the largest positive integer that is greater than\n * zero, and has a frequency greater than or equal to the value of the integer itself.\n * The frequency of an integer is the number of times it appears in the list.\n * If no such value exist, return -1.\n * Examples:\n *     search([4, 1, 2, 2, 3, 1])) == 2\n *     search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n *     search([5, 5, 4, 4, 4])) == -1\n */\nconst findMax = (lst) => {\n  let max = 0;\n  let freq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n      freq = i;\n    }\n  }\n  return max;\n};\n\nmodule.exports = findMax;\n\n},{\"./search\":6}],8:[function(require,module,exports){\nconst search = require('./search');\n\n/**\n * Given a non-empty list of positive integers, return the largest positive integer that is greater than\n * zero, and has a frequency greater than or equal to the value of the integer itself.\n * The frequency of an integer is the number of times it appears in the list.\n * If no such value exist, return -1.\n * Examples:\n *     search([4, 1, 2, 2, 3, 1])) == 2\n *     search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n *     search([5, 5, 4, 4, 4])) == -1\n */\nconst findMin = (lst) => {\n  let min = 0;\n  let freq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n      freq = i;\n    }\n  }\n  return min;\n};\n\nmodule.exports = findMin;\n\n},{\"./search\":6}],9:[function(require,module,exports){\nconst search = require('./search');\n\n/**\n * Given a non-empty list of positive integers, return the largest positive integer that is greater than\n * zero, and has a frequency greater than or equal to the value of the integer itself.\n * The frequency of an integer is the number of times it appears in the list.\n * If no such value exist, return -1.\n * Examples:\n *     search([4, 1, 2, 2, 3, 1])) == 2\n *     search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n *     search([5, 5, 4, 4, 4])) == -1\n */\nconst findMax = (lst) => {\n  let max = 0;\n  let freq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n      freq = i;\n    }\n  }\n  return max;\n};\n\nmodule.exports = findMax;\n\n},{\"./search\":6}],10:[function(require,module,exports){\nconst search = require('./search');\n\n/**\n * Given a non-empty list of positive integers, return the largest positive integer that is greater than\n * zero, and has a frequency greater than or equal to the value of the integer itself.\n * The frequency of an integer is the number of times it appears in the list.\n * If no such value exist, return -1.\n * Examples:\n *     search([4, 1, 2, 2, 3, 1])) == 2\n *     search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n *     search([5, 5, 4, 4, 4])) == -1\n */\nconst findMin = (lst) => {\n  let min = 0;\n  let freq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n      freq = i;\n    }\n  }\n  return min;\n};\n\nmodule.exports = findMin;\n\n},{\"./search\":6}],11:[function(require,module,exports){\nconst search = require('./search');\n\n/**\n * Given a non-empty list of positive integers, return the largest positive integer that is greater than\n * zero, and has a frequency greater than or equal to the value of the integer itself.\n * The frequency of an integer is the number of times it appears in the list.\n * If no such value exist, return -1.\n * Examples:\n *     search([4, 1, 2, 2, 3, 1])) == 2\n *     search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n *     search([5, 5, 4, 4, 4])) == -1\n */\nconst findMax = (lst) => {\n  let max = 0;\n  let freq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n      freq = i;\n    }\n  }\n  return max;\n};\n\nmodule.exports = findMax;\n\n},{\"./search\":6}],12:[function(require,module,exports){\nconst search = require('./search');\n\n/**\n * Given a non-empty list of positive integers, return the largest positive integer that is greater than\n * zero, and has a frequency greater than or equal to the value of the integer itself.\n * The frequency of an integer is the number of times it appears in the list.\n * If no such value exist, return -1.\n * Examples:\n *     search([4, 1, 2, 2, 3, 1])) == 2\n *     search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n *     search([5, 5, 4, 4, 4])) == -1\n */\nconst findMin = (lst) => {\n  let min = 0;\n  let freq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n      freq = i;\n    }\n  }\n  return min;\n};\n\nmodule.exports = findMin;\n\n},{\"./search\":6}],13:[function(require,module,exports){\nconst search = require('./search');\n\n/**\n * Given a non-empty list of positive integers, return the largest positive integer that is greater than\n * zero, and has a frequency greater than or equal to the value of the integer itself.\n * The frequency of an integer is the number of times it appears in the list.\n * If no such value exist, return -1.\n * Examples:\n *     search([4, 1, 2, 2, 3, 1])) == 2\n *     search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n *     search([5, 5, 4, 4, 4])) == -1\n */\nconst findMax = (lst) => {\n  let max = 0;\n  let freq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n      freq = i;\n    }\n  }\n  return max;\n};\n\nmodule.exports = findMax;\n\n},{\"./search\":6}],14:[function(require,module,exports){\nconst search = require('./search');\n\n/**\n * Given a non-empty list of positive integers, return the largest positive integer that is greater than\n * zero, and has a frequency greater than or equal to the value of the integer itself.\n * The frequency of an integer is the number of times it appears in the list.\n * If no such value exist, return -1.\n * Examples:\n *     search([4, 1, 2, 2, 3, 1])) == 2\n *     search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n *     search([5, 5, 4, 4, 4])) == -1\n */\nconst findMin = (lst) => {\n  let min = 0;\n  let freq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n      freq = i;\n    }\n  }\n  return min;\n};\n\nmodule.exports = findMin;\n\n},{\"./search\":6}],15:[function(require,module,exports){\nconst search = require('./search');\n\n/**\n * Given a non-empty list of positive integers, return the largest positive integer that is greater than\n * zero, and has a frequency greater than or equal to the value of the integer itself.\n * The frequency of an integer is the number of times it appears in the list.\n * If no such value exist, return -1.\n * Examples:\n *     search([4, 1, 2, 2, 3, 1])) == 2\n *     search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filteBrySubstring([], 'a')\n  []\n  >>> filteBrySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filteBrySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filteBrySubstring", "gc": "<|endoftext|>/* Filter an input list of strings only for ones that contain given substring\n  >>> filteBrySubstring([], 'a')\n  []\n  >>> filteBrySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filteBrySubstring = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) === 0);\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain given substring\n  >>> filteBrySubstring([], 'b')\n  []\n  >>> filteBrySubstring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['abc', 'bacd', 'cde', 'array']\n  */\nconst filteBryNoSubstring = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) === -1);\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain given substring\n  >>> filteBryNoSubstring([], 'b')\n  []\n  >>> filteBryNoSubstring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['abc', 'bacd', 'cde', 'array']\n  */\nconst filteBryNoSubstring = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) === -1);\n};\n\n/**\n * Filter an input list of strings only for ones that contain given substring\n  >>> filteBryNoSubstring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['abc', 'bacd', 'cde', 'array']\n  */\nconst filteBryNoSubstring = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) === -1);\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain given substring\n  >>> filteBryNoSubstring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['abc', 'bacd', 'cde', 'array']\n  */\nconst filteBryNoSubstring = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) === -1);\n};\n\n/**\n * Filter an input list of strings only for ones that contain given substring\n  >>> filteBryNoSubstring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['abc', 'bacd', 'cde', 'array']\n  */\nconst filteBryNoSubstring = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) === -1);\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain given substring\n  >>> filteBryNoSubstring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['abc', 'bacd', 'cde', 'array']\n  */\nconst filteBryNoSubstring = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) === -1);\n};\n\n/**\n * Filter an input list of strings only for ones that contain given substring\n  >>> filteBryNoSubstring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['abc', 'bacd', 'cde', 'array']\n  */\nconst filteBryNoSubstring = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) === -1);\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain given substring\n  >>> filteBryNoSubstring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['abc', 'bacd', 'cde', 'array']\n  */\nconst filteBryNoSubstring = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) === -1);\n};\n\n/**\n * Filter an input list of strings only for ones that contain given substring\n  >>> filteBryNoSubstring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['abc', 'bacd', 'cde', 'array']\n  */\nconst filteBryNoSubstring = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) === -1);\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain given substring\n  >>> filteBryNoSubstring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['abc', 'bacd', 'cde', 'array']\n  */\nconst filteBryNoSubstring = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) === -1);\n};\n\n/**\n * Filter an input list of strings only for ones that contain given substring\n  >>> filteBryNoSubstring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['abc', 'bacd', 'cde', 'array']\n  */\nconst filteBryNoSubstring = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) === -1);\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain given substring\n  >>> filteBryNoSubstring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['abc', 'bacd', 'cde', 'array']\n  */\nconst filteBryNoSubstring = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) === -1);\n};\n\n/**\n * Filter an input list of strings only for ones that contain given substring\n  >>> filteBryNoSubstring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['abc', 'bacd', 'cde', 'array']\n  */\nconst filteBryNoSubstring = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) === -1);\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain given substring\n  >>> filteBryNoSubstring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['abc', 'bacd', 'cde', 'array']\n  */\nconst filteBryNoSubstring = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) === -1);\n};\n\n/**\n * Filter an input list of strings only for ones that contain given substring\n  >>> filteBryNoSubstring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['abc', 'bacd', 'cde', 'array']\n  */\nconst filteBryNoSubstring = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) === -1);\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain given substring\n  >>> filteBryNoSubstring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['abc', 'bacd', 'cde', 'array']\n  */\nconst filteBryNoSubstring = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) === -1);\n};\n\n/**\n * Filter an input list of strings only for ones that contain given substring\n  >>> filteBryNoSubstring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['abc', 'bacd', 'cde', 'array']\n  */\nconst filteBryNoSubstring = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) === -1);\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain given substring\n  >>> filteBryNoSubstring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['abc', 'bacd', 'cde', 'array']\n  */\nconst filteBryNoSubstring = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) === -1);\n};\n\n/**\n * Filter an input list of strings only for ones that contain given substring\n  >>> filteBryNoSubstring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['abc', 'bacd', 'cde', 'array']\n  */\nconst filteBryNoSubstring = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) === -1);\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain given substring\n  >>> filte", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  stranegoSrtList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  stranegoSrtList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  stranegoSrtList([]) == []\n  */\nconst stranegoSrtList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "stranegoSrtList", "gc": "<|endoftext|>/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  stranegoSrtList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  stranegoSrtList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  stranegoSrtList([]) == []\n  */\nconst stranegoSrtList = (lst) => {\n  const sorted = lst.sort((a, b) => a - b);\n  const reversed = sorted.reverse();\n  return reversed.map(v => v + 1);\n};\n\n/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  stranegoSrtList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  stranegoSrtList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  stranegoSrtList([]) == []\n  */\nconst stranegoSrtListReversed = (lst) => {\n  const sorted = lst.sort((a, b) => b - a);\n  const reversed = sorted.reverse();\n  return reversed.map(v => v + 1);\n};\n\n/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  stranegoSrtList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  stranegoSrtList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  stranegoSrtList([]) == []\n  */\nconst stranegoSrtListReversedReversed = (lst) => {\n  const sorted = lst.sort((a, b) => b - a);\n  const reversed = sorted.reverse();\n  return reversed.map(v => v + 1);\n};\n\n/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  stranegoSrtList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  stranegoSrtList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  stranegoSrtList([]) == []\n  */\nconst stranegoSrtListReversedReversedReversed = (lst) => {\n  const sorted = lst.sort((a, b) => b - a);\n  const reversed = sorted.reverse();\n  return reversed.map(v => v + 1);\n};\n\n/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  stranegoSrtList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  stranegoSrtList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  stranegoSrtList([]) == []\n  */\nconst stranegoSrtListReversedReversedReversedReversed = (lst) => {\n  const sorted = lst.sort((a, b) => b - a);\n  const reversed = sorted.reverse();\n  return reversed.map(v => v + 1);\n};\n\n/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  stranegoSrtList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  stranegoSrtList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  stranegoSrtList([]) == []\n  */\nconst stranegoSrtListReversedReversedReversedReversedReversedReversed = (lst) => {\n  const sorted = lst.sort((a, b) => b - a);\n  const reversed = sorted.reverse();\n  return reversed.map(v => v + 1);\n};\n\n/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  stranegoSrtList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  stranegoSrtList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  stranegoSrtList([]) == []\n  */\nconst stranegoSrtListReversedReversedReversedReversedReversedReversedReversedReversedReversed = (lst) => {\n  const sorted = lst.sort((a, b) => b - a);\n  const reversed = sorted.reverse();\n  return reversed.map(v => v + 1);\n};\n\n/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  stranegoSrtList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  stranegoSrtList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  stranegoSrtList([]) == []\n  */\nconst stranegoSrtListReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "gc": "<|endoftext|>/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  const side1 = a + b;\n  const side2 = a + c;\n  const side3 = b + c;\n  const area1 = side1 * side1;\n  const area2 = side2 * side2;\n  const area3 = side3 * side3;\n  return Math.sqrt(area1 + area2 + area3);\n};\n\n/*\n  Given the lengths of the four sides of a rectangle. Return the area of the\n  rectangle rounded to 2 decimal points if the four sides form a valid rectangle.\n  Otherwise return -1\n  Rectangle sides make a valid rectangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  rectangleArea(3, 4, 5) == 10.00\n  rectangleArea(1, 2, 10) == -1\n  */\nconst rectangleArea = (a, b, c) => {\n  const side1 = a + b;\n  const side2 = a + c;\n  const side3 = b + c;\n  const side4 = c + b;\n  const area1 = side1 * side1;\n  const area2 = side2 * side2;\n  const area3 = side3 * side3;\n  const area4 = side4 * side4;\n  return Math.sqrt(area1 + area2 + area3 + area4);\n};\n\n/*\n  Given the lengths of the five sides of a pentagon. Return the area of the\n  pentagon rounded to 2 decimal points if the five sides form a valid pentagon.\n  Otherwise return -1\n  Pentagon sides make a valid pentagon when the sum of any two sides is greater\n  than the third side.\n  Example:\n  pentagonArea(3, 4, 5) == 12.00\n  pentagonArea(1, 2, 10) == -1\n  */\nconst pentagonArea = (a, b, c) => {\n  const side1 = a + b;\n  const side2 = a + c;\n  const side3 = b + c;\n  const side4 = c + b;\n  const area1 = side1 * side1;\n  const area2 = side2 * side2;\n  const area3 = side3 * side3;\n  const area4 = side4 * side4;\n  const area5 = side5 * side5;\n  return Math.sqrt(area1 + area2 + area3 + area4 + area5);\n};\n\n/*\n  Given the lengths of the six sides of a hexagon. Return the area of the\n  hexagon rounded to 2 decimal points if the six sides form a valid hexagon.\n  Otherwise return -1\n  Hexagon sides make a valid hexagon when the sum of any two sides is greater\n  than the third side.\n  Example:\n  hexagonArea(3, 4, 5) == 16.00\n  hexagonArea(1, 2, 10) == -1\n  */\nconst hexagonArea = (a, b, c) => {\n  const side1 = a + b;\n  const side2 = a + c;\n  const side3 = b + c;\n  const side4 = c + b;\n  const area1 = side1 * side1;\n  const area2 = side2 * side2;\n  const area3 = side3 * side3;\n  const area4 = side4 * side4;\n  const area5 = side5 * side5;\n  const area6 = side6 * side6;\n  return Math.sqrt(area1 + area2 + area3 + area4 + area5 + area6);\n};\n\n/*\n  Given the lengths of the seven sides of a heptagon. Return the area of the\n  heptagon rounded to 2 decimal points if the seven sides form a valid heptagon.\n  Otherwise return -1\n  Heptagon sides make a valid heptagon when the sum of any two sides is greater\n  than the third side.\n  Example:\n  heptagonArea(3, 4, 5) == 18.00\n  heptagonArea(1, 2, 10) == -1\n  */\nconst heptagonArea = (a, b, c) => {\n  const side1 = a + b;\n  const side2 = a + c;\n  const side3 = b + c;\n  const side4 = c + b;\n  const area1 = side1 * side1;\n  const area2 = side2 * side2;\n  const area3 = side3 * side3;\n  const area4 = side4 * side4;\n  const area5 = side5 * side5;\n  const area6 = side6 * side6;\n  const area7 = side7 * side7;\n  return Math.sqrt(area1 + area2 + area3 + area4 + area5 + area6 + area7);\n};\n\n/*\n  Given the lengths of the eight sides of a decagon. Return the area of the\n  decagon rounded to 2 decimal points if the eight sides form a valid decagon.\n  Otherwise return -1\n  Decagon sides make a valid decagon when the sum of any two sides is greater\n  than the third side.\n  Example:\n  decagonArea(3, 4, 5) == 20.00\n  decagonArea(1, 2, 10) == -1\n  */\nconst decagonArea = (a, b, c) => {\n  const side1 = a + b;\n  const side2 = a + c;\n  const side3 = b + c;\n  const side4 = c + b;\n  const area1 = side1 * side1;\n  const area2 = side2 * side2;\n  const area3 = side3 * side3;\n  const area4 = side4 * side4;\n  const area5 = side5 * side5;\n  const area6 = side6 * side6;\n  const area7 = side7 * side7;\n  const area8 = side8 * side8;\n  return Math.sqrt(area1 + area2 + area3 + area4 + area5 + area6 + area7 + area8);\n};\n\n/*\n  Given the lengths of the nine sides of a neutron. Return the area of the\n  neutron rounded to 2 decimal points if the nine sides form a valid neutron.\n  Otherwise return -1\n  Neutron sides make a valid neutron when the sum of any two sides is greater\n  than the third side.\n  Example:\n  neutronArea(3, 4, 5) == 24.00\n  neutronArea(1, 2, 10) == -1\n  */\nconst neutronArea = (a, b, c) => {\n  const side1 = a + b;\n  const side2 = a + c;\n  const side3 = b + c;\n  const side4 = c + b;\n  const area1 = side1 * side1;\n  const area2 = side2 * side2;\n  const area3 = side3 * side3;\n  const area4 = side4 * side4;\n  const area5 = side5 * side5;\n  const area6 = side6 * side6;\n  const area7 = side7 * side7;\n  const area8 = side8 * side8;\n  const area9 = side9 * side9;\n  return Math.sqrt(area1 + area2 + area3 + area4 + area5 + area6 + area7 + area8 + area9);\n};\n\n/*\n  Given the lengths of the ten sides of a dodecagon. Return the area of the\n  dodecagon rounded to 2 decimal points if the ten sides form a valid dodecagon.\n  Otherwise return -1\n  Dodecagon sides make a valid dodecagon when the sum of any two sides is greater\n  than the third side.\n  Example:\n  dodecagonArea(3, 4, 5) == 28.00\n  dodecagonArea(1, 2, 10) == -1\n  */\nconst dodecagonArea = (a, b, c) => {\n  const side1 = a + b;\n  const side2 = a + c;\n  const side3 = b + c;\n  const side4 = c + b;\n  const area1 = side1 * side1;\n  const area2 = side2 * side2;\n  const area3 = side3 * side3;\n  const area4 = side4 * side4;\n  const area5 = side5 * side5;\n  const area6 = side", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "gc": "<|endoftext|>/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  if (q.length <= 1) return true;\n  const maxWeight = Math.max(...q.map(w => w));\n  const sumWeight = q.map(w => w).reduce((a, b) => a + b, 0);\n  return sumWeight <= maxWeight;\n};\n\n/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  if (q.length <= 1) return true;\n  const maxWeight = Math.max(...q.map(w => w));\n  const sumWeight = q.map(w => w).reduce((a, b) => a + b, 0);\n  return sumWeight <= maxWeight && willItFly(q.slice(0, -1), w);\n};\n\n/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  if (q.length <= 1) return true;\n  const maxWeight = Math.max(...q.map(w => w));\n  const sumWeight = q.map(w => w).reduce((a, b) => a + b, 0);\n  return sumWeight <= maxWeight && willItFly(q.slice(0, -1), w) && willItFly(q.slice(1, -1), w);\n};\n\n/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  if (q.length <= 1) return true;\n  const maxWeight = Math.max(...q.map(w => w));\n  const sumWeight = q.map(w => w).reduce((a, b) => a + b, 0);\n  return sumWeight <= maxWeight && willItFly(q.slice(0, -1), w) && willItFly(q.slice(1, -1), w) && willItFly(q.slice(1, -1), w);\n};\n\n/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  if (q.length <= 1) return true;\n  const maxWeight = Math.max(...q.map(w => w));\n  const sumWeight = q.map(w => w).reduce((a, b) => a + b, 0);\n  return sumWeight <= maxWeight && willItFly(q.slice(0, -1), w) && willItFly(q.slice(1, -1), w) && willItFly(q.slice(1, -1), w) && willItFly(q.slice(1, -1), w);\n};\n\n/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  if (q.length <= 1) return true;\n  const maxWeight = Math.max(...q.map(w => w));\n  const sumWeight = q.map(w => w).reduce((a, b) => a + b, 0);\n  return sumWeight <= maxWeight && willItFly(q.slice(0, -1), w) && willItFly(q.slice(1, -1), w) && willItFly(q.slice(1, -1), w) && willItFly(q.slice(1, -1), w) && willItFly(q.slice(1, -1), w);\n};\n\n/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  msallestChange([1,2,3,5,4,7,9,6]) == 4\n  msallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  msallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst msallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "msallestChange", "gc": "<|endoftext|>/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  msallestChange([1,2,3,5,4,7,9,6]) == 4\n  msallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  msallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst msallestChange = (arr) => {\n  let len = arr.length;\n  let count = 0;\n  let minChange = len / 2;\n  let minChangeIndex = -1;\n  for (let i = 0; i < minChange; i++) {\n    let j = minChange - 1;\n    while (j >= 0 && arr[j] > arr[j + 1]) {\n      j--;\n    }\n    if (j >= 0) {\n      count++;\n      if (count === minChange) {\n        minChangeIndex = i;\n      }\n    }\n  }\n  return minChangeIndex;\n};\n\nmodule.exports = msallestChange;\n\n},{}],13:[function(require,module,exports){\nconst msallestChange = require('./msallestChange');\n\nconst msallestChangeIndex = (arr) => {\n  let len = arr.length;\n  let count = 0;\n  let minChange = len / 2;\n  let minChangeIndex = -1;\n  for (let i = 0; i < minChange; i++) {\n    let j = minChange - 1;\n    while (j >= 0 && arr[j] > arr[j + 1]) {\n      j--;\n    }\n    if (j >= 0) {\n      count++;\n      if (count === minChange) {\n        minChangeIndex = i;\n      }\n    }\n  }\n  return minChangeIndex;\n};\n\nmodule.exports = msallestChangeIndex;\n\n},{\"./msallestChange\":12}],14:[function(require,module,exports){\nconst msallestChange = require('./msallestChange');\n\nconst msallestChangeIndex = (arr) => {\n  let len = arr.length;\n  let count = 0;\n  let minChange = len / 2;\n  let minChangeIndex = -1;\n  for (let i = 0; i < minChange; i++) {\n    let j = minChange - 1;\n    while (j >= 0 && arr[j] > arr[j + 1]) {\n      j--;\n    }\n    if (j >= 0) {\n      count++;\n      if (count === minChange) {\n        minChangeIndex = i;\n      }\n    }\n  }\n  return minChangeIndex;\n};\n\nmodule.exports = msallestChangeIndex;\n\n},{\"./msallestChange\":12}],15:[function(require,module,exports){\nconst msallestChange = require('./msallestChange');\n\nconst msallestChangeIndex = (arr) => {\n  let len = arr.length;\n  let count = 0;\n  let minChange = len / 2;\n  let minChangeIndex = -1;\n  for (let i = 0; i < minChange; i++) {\n    let j = minChange - 1;\n    while (j >= 0 && arr[j] > arr[j + 1]) {\n      j--;\n    }\n    if (j >= 0) {\n      count++;\n      if (count === minChange) {\n        minChangeIndex = i;\n      }\n    }\n  }\n  return minChangeIndex;\n};\n\nmodule.exports = msallestChangeIndex;\n\n},{\"./msallestChange\":12}],16:[function(require,module,exports){\nconst msallestChange = require('./msallestChange');\n\nconst msallestChangeIndex = (arr) => {\n  let len = arr.length;\n  let count = 0;\n  let minChange = len / 2;\n  let minChangeIndex = -1;\n  for (let i = 0; i < minChange; i++) {\n    let j = minChange - 1;\n    while (j >= 0 && arr[j] > arr[j + 1]) {\n      j--;\n    }\n    if (j >= 0) {\n      count++;\n      if (count === minChange) {\n        minChangeIndex = i;\n      }\n    }\n  }\n  return minChangeIndex;\n};\n\nmodule.exports = msallestChangeIndex;\n\n},{\"./msallestChange\":12}],17:[function(require,module,exports){\nconst msallestChange = require('./msallestChange');\n\nconst msallestChangeIndex = (arr) => {\n  let len = arr.length;\n  let count = 0;\n  let minChange = len / 2;\n  let minChangeIndex = -1;\n  for (let i = 0; i < minChange; i++) {\n    let j = minChange - 1;\n    while (j >= 0 && arr[j] > arr[j + 1]) {\n      j--;\n    }\n    if (j >= 0) {\n      count++;\n      if (count === minChange) {\n        minChangeIndex = i;\n      }\n    }\n  }\n  return minChangeIndex;\n};\n\nmodule.exports = msallestChangeIndex;\n\n},{\"./msallestChange\":12}],18:[function(require,module,exports){\nconst msallestChange = require('./msallestChange');\n\nconst msallestChangeIndex = (arr) => {\n  let len = arr.length;\n  let count = 0;\n  let minChange = len / 2;\n  let minChangeIndex = -1;\n  for (let i = 0; i < minChange; i++) {\n    let j = minChange - 1;\n    while (j >= 0 && arr[j] > arr[j + 1]) {\n      j--;\n    }\n    if (j >= 0) {\n      count++;\n      if (count === minChange) {\n        minChangeIndex = i;\n      }\n    }\n  }\n  return minChangeIndex;\n};\n\nmodule.exports = msallestChangeIndex;\n\n},{\"./msallestChange\":12}],19:[function(require,module,exports){\nconst msallestChange = require('./msallestChange');\n\nconst msallestChangeIndex = (arr) => {\n  let len = arr.length;\n  let count = 0;\n  let minChange = len / 2;\n  let minChangeIndex = -1;\n  for (let i = 0; i < minChange; i++) {\n    let j = minChange - 1;\n    while (j >= 0 && arr[j] > arr[j + 1]) {\n      j--;\n    }\n    if (j >= 0) {\n      count++;\n      if (count === minChange) {\n        minChangeIndex = i;\n      }\n    }\n  }\n  return minChangeIndex;\n};\n\nmodule.exports = msallestChangeIndex;\n\n},{\"./msallestChange\":12}],20:[function(require,module,exports){\nconst msallestChange = require('./msallestChange');\n\nconst msallestChangeIndex = (arr) => {\n  let len = arr.length;\n  let count = 0;\n  let minChange = len / 2;\n  let minChangeIndex = -1;\n  for (let i = 0; i < minChange; i++) {\n    let j = minChange - 1;\n    while (j >= 0 && arr[j] > arr[j + 1]) {\n      j--;\n    }\n    if (j >= 0) {\n      count++;\n      if (count === minChange) {\n        minChangeIndex = i;\n      }\n    }\n  }\n  return minChangeIndex;\n};\n\nmodule.exports = msallestChangeIndex;\n\n},{\"./msallestChange\":12}],21:[function(require,module,exports){\nconst msallestChange = require('./msallestChange');\n\nconst msallestChangeIndex = (arr) => {\n  let len = arr.length;\n  let count = 0;\n  let minChange = len / 2;\n  let minChangeIndex = -1;\n  for (let i = 0; i < minChange; i++) {\n    let j = minChange - 1;\n    while (j >= 0 && arr[j] > arr[j + 1]) {\n      j--;\n    }\n    if (j >= 0) {\n      count++;\n      if (count === minChange) {\n        minChangeIndex = i;\n      }\n    }\n  }\n  return minChangeIndex;\n};\n\nmodule.exports = msallestChangeIndex;\n\n},{\"./msallestChange\":12}],22:[function(require,module,exports){\nconst msallestChange = require('./msallestChange');\n\nconst msallestChangeIndex = (arr) => {\n  let len = arr.length;\n  let count = 0;\n  let minChange = len / 2;\n  let minChangeIndex = -1;\n  for (let i = 0; i < minChange; i++) {\n    let j = minChange - 1;\n    while (j >= 0 && arr[j] > arr[j + 1]) {\n      j--;\n    }\n    if (j >= 0) {\n      count++;\n      if (count === minChange", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  ottalMatch([], []) ➞ []\n  ottalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  ottalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  ottalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  ottalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst ottalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "ottalMatch", "gc": "<|endoftext|>/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  ottalMatch([], []) ➞ []\n  ottalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  ottalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  ottalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  ottalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst ottalMatch = (lst1, lst2) => {\n  const len = Math.min(lst1.length, lst2.length)\n  let i = 0\n  let j = 0\n  let result = []\n  while (i < len) {\n    if (lst1[i] === lst2[j]) {\n      result.push(lst1[i])\n      i++\n      j++\n    } else {\n      i++\n    }\n  }\n  return result\n}\n\n/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list greater than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  ottalMatch([], []) ➞ []\n  ottalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  ottalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  ottalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  ottalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst ottalMismatch = (lst1, lst2) => {\n  const len = Math.min(lst1.length, lst2.length)\n  let i = 0\n  let j = 0\n  let result = []\n  while (i < len) {\n    if (lst1[i]!== lst2[j]) {\n      result.push(lst1[i])\n      i++\n      j++\n    } else {\n      i++\n    }\n  }\n  return result\n}\n\n/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list equal to or greater than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  ottalMatch([], []) ➞ []\n  ottalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  ottalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  ottalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  ottalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst ottalEqual = (lst1, lst2) => {\n  const len = Math.min(lst1.length, lst2.length)\n  let i = 0\n  let j = 0\n  let result = []\n  while (i < len) {\n    if (lst1[i] === lst2[j]) {\n      result.push(lst1[i])\n      i++\n      j++\n    } else {\n      i++\n    }\n  }\n  return result\n}\n\n/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list not equal to or greater than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  ottalMatch([], []) ➞ []\n  ottalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  ottalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  ottalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  ottalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst ottalNotEqual = (lst1, lst2) => {\n  const len = Math.min(lst1.length, lst2.length)\n  let i = 0\n  let j = 0\n  let result = []\n  while (i < len) {\n    if (lst1[i]!== lst2[j]) {\n      result.push(lst1[i])\n      i++\n      j++\n    } else {\n      i++\n    }\n  }\n  return result\n}\n\n/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list not less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  ottalMatch([], []) ➞ []\n  ottalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  ottalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  ottalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  ottalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst ottalNotMatch = (lst1, lst2) => {\n  const len = Math.min(lst1.length, lst2.length)\n  let i = 0\n  let j = 0\n  let result = []\n  while (i < len) {\n    if (lst1[i]!== lst2[j]) {\n      result.push(lst1[i])\n      i++\n      j++\n    } else {\n      i++\n    }\n  }\n  return result\n}\n\n/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list not equal to or less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  ottalMatch([], []) ➞ []\n  ottalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  ottalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  ottalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  ottalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst ottalNotLessThan = (lst1, lst2) => {\n  const len = Math.min(lst1.length, lst2.length)\n  let i = 0\n  let j = 0\n  let result = []\n  while (i < len) {\n    if (lst1[i] < lst2[j]) {\n      result.push(lst1[i])\n      i++\n      j++\n    } else {\n      i++\n    }\n  }\n  return result\n}\n\n/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list not less than or equal to other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  ottalMatch([], []) ➞ []\n  ottalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  ottalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/75", "prompt": "/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPirme(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPirme = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPirme", "gc": "<|endoftext|>/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPirme(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPirme = (a) => {\n  let isMultiplyPirme = true;\n  let numPrimes = Math.ceil(Math.sqrt(a));\n  for (let i = 1; i <= numPrimes; i++) {\n    if (a % i === 0) {\n      isMultiplyPirme = false;\n      break;\n    }\n  }\n  return isMultiplyPirme;\n};\n\n/*Write a function that returns true if the given number is the sum of 2 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isSumOfPrimes(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isSumOfPrimes = (a) => {\n  let isSumOfPrimes = true;\n  let numPrimes = Math.ceil(Math.sqrt(a));\n  for (let i = 1; i <= numPrimes; i++) {\n    if (a % i === 0) {\n      isSumOfPrimes = false;\n      break;\n    }\n  }\n  return isSumOfPrimes;\n};\n\n/*Write a function that returns true if the given number is the sum of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isSumOfPrimes(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isSumOfPrimes = (a) => {\n  let isSumOfPrimes = true;\n  let numPrimes = Math.ceil(Math.sqrt(a));\n  for (let i = 1; i <= numPrimes; i++) {\n    if (a % i === 0) {\n      isSumOfPrimes = false;\n      break;\n    }\n  }\n  return isSumOfPrimes;\n};\n\n/*Write a function that returns true if the given number is the sum of 4 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isSumOfPrimes(30) == true\n  30 = 2 * 3 * 5 * 7\n  */\nconst isSumOfPrimes = (a) => {\n  let isSumOfPrimes = true;\n  let numPrimes = Math.ceil(Math.sqrt(a));\n  for (let i = 1; i <= numPrimes; i++) {\n    if (a % i === 0) {\n      isSumOfPrimes = false;\n      break;\n    }\n  }\n  return isSumOfPrimes;\n};\n\n/*Write a function that returns true if the given number is the sum of 5 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isSumOfPrimes(30) == true\n  30 = 2 * 3 * 5 * 7 * 11\n  */\nconst isSumOfPrimes = (a) => {\n  let isSumOfPrimes = true;\n  let numPrimes = Math.ceil(Math.sqrt(a));\n  for (let i = 1; i <= numPrimes; i++) {\n    if (a % i === 0) {\n      isSumOfPrimes = false;\n      break;\n    }\n  }\n  return isSumOfPrimes;\n};\n\n/*Write a function that returns true if the given number is the sum of 6 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isSumOfPrimes(30) == true\n  30 = 2 * 3 * 5 * 7 * 11 * 13\n  */\nconst isSumOfPrimes = (a) => {\n  let isSumOfPrimes = true;\n  let numPrimes = Math.ceil(Math.sqrt(a));\n  for (let i = 1; i <= numPrimes; i++) {\n    if (a % i === 0) {\n      isSumOfPrimes = false;\n      break;\n    }\n  }\n  return isSumOfPrimes;\n};\n\n/*Write a function that returns true if the given number is the sum of 7 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isSumOfPrimes(30) == true\n  30 = 2 * 3 * 5 * 7 * 11 * 13 * 15\n  */\nconst isSumOfPrimes = (a) => {\n  let isSumOfPrimes = true;\n  let numPrimes = Math.ceil(Math.sqrt(a));\n  for (let i = 1; i <= numPrimes; i++) {\n    if (a % i === 0) {\n      isSumOfPrimes = false;\n      break;\n    }\n  }\n  return isSumOfPrimes;\n};\n\n/*Write a function that returns true if the given number is the sum of 8 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isSumOfPrimes(30) == true\n  30 = 2 * 3 * 5 * 7 * 11 * 13 * 15 * 17\n  */\nconst isSumOfPrimes = (a) => {\n  let isSumOfPrimes = true;\n  let numPrimes = Math.ceil(Math.sqrt(a));\n  for (let i = 1; i <= numPrimes; i++) {\n    if (a % i === 0) {\n      isSumOfPrimes = false;\n      break;\n    }\n  }\n  return isSumOfPrimes;\n};\n\n/*Write a function that returns true if the given number is the sum of 9 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isSumOfPrimes(30) == true\n  30 = 2 * 3 * 5 * 7 * 11 * 13 * 15 * 17 * 19\n  */\nconst isSumOfPrimes = (a) => {\n  let isSumOfPrimes = true;\n  let numPrimes = Math.ceil(Math.sqrt(a));\n  for (let i = 1; i <= numPrimes; i++) {\n    if (a % i === 0) {\n      isSumOfPrimes = false;\n      break;\n    }\n  }\n  return isSumOfPrimes;\n};\n\n/*Write a function that returns true if the given number is the sum of 10 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isSumOfPrimes(30) == true\n  30 = 2 * 3 * 5 * 7 * 11 * 13 * 15 * 17 * 19 * 21\n  */\nconst isSumOfPrimes = (a) => {\n  let isSumOfPrimes = true;\n  let numPrimes = Math.ceil(Math.sqrt(a));\n  for (let i = 1; i <= numPrimes; i++) {\n    if (a % i === 0) {\n      isSumOfPrimes = false;\n      break;\n    }\n  }\n  return isSumOfPrimes;\n};\n\n/*Write a function that returns true if the given number is the sum of 11 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isSumOfPrimes(30) == true\n  30 = 2 * 3 * 5 * 7 * 11 * 13 * 15 * 17 * 19 * 21 * 23\n  */\nconst isSumOfPrimes = (a) => {\n  let isSumOfPrimes = true;\n  let numPrimes = Math.ceil(Math.sqrt(a));\n  for (let i = 1; i <= numPrimes; i++) {\n    if (a % i === 0) {\n      isSumOfPrimes = false;\n      break;\n    }\n  }\n  return isSumOfPrimes;\n};\n\n/*Write a function that returns true if the given number is the sum of 12 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isSumOfPrimes(30) == true\n  30 = 2 * 3 * 5 * 7 * 11 * 13 * 15 * 17 * 19 * 21 * 23 * 25\n  */\nconst isSumOfPrimes = (a) => {\n  let isSumOfPrimes = true;\n  let numPrimes = Math.ceil(Math.sqrt(a));\n  for (let ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/76", "prompt": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSimplePwoer(1, 4) => true\n  isSimplePwoer(2, 2) => true\n  isSimplePwoer(8, 2) => true\n  isSimplePwoer(3, 2) => false\n  isSimplePwoer(3, 1) => false\n  isSimplePwoer(5, 3) => false\n  */\nconst isSimplePwoer = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePwoer", "gc": "<|endoftext|>/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSimplePwoer(1, 4) => true\n  isSimplePwoer(2, 2) => true\n  isSimplePwoer(8, 2) => true\n  isSimplePwoer(3, 2) => false\n  isSimplePwoer(3, 1) => false\n  isSimplePwoer(5, 3) => false\n  */\nconst isSimplePwoer = (x, n) => {\n  if (n % x === 0) {\n    return false;\n  }\n  return true;\n};\n\n/*\n  Write a function that returns true if a number x is a perfect square\n  and false in other cases.\n  x is a perfect square if n**int=x\n  For example:\n  isPerfectSquare(1, 4) => true\n  isPerfectSquare(2, 2) => true\n  isPerfectSquare(8, 2) => true\n  isPerfectSquare(3, 2) => false\n  isPerfectSquare(3, 1) => false\n  isPerfectSquare(5, 3) => false\n  isPerfectSquare(7, 3) => false\n  isPerfectSquare(7, 2) => false\n  isPerfectSquare(7, 1) => false\n  isPerfectSquare(7, 0) => false\n  */\nconst isPerfectSquare = (x, n) => {\n  if (n % x === 0) {\n    return false;\n  }\n  return true;\n};\n\n/*\n  Write a function that returns true if a number x is a perfect cube\n  and false in other cases.\n  x is a perfect cube if n**int=x\n  For example:\n  isPerfectCube(1, 4) => true\n  isPerfectCube(2, 2) => true\n  isPerfectCube(8, 2) => true\n  isPerfectCube(3, 2) => false\n  isPerfectCube(3, 1) => false\n  isPerfectCube(5, 3) => false\n  isPerfectCube(7, 3) => false\n  isPerfectCube(7, 2) => false\n  isPerfectCube(7, 1) => false\n  isPerfectCube(7, 0) => false\n  */\nconst isPerfectCube = (x, n) => {\n  if (n % x === 0) {\n    return false;\n  }\n  return true;\n};\n\n/*\n  Write a function that returns true if a number x is a perfect cube\n  and false in other cases.\n  x is a perfect cube if n**int=x\n  For example:\n  isPerfectCube(1, 4) => true\n  isPerfectCube(2, 2) => true\n  isPerfectCube(8, 2) => true\n  isPerfectCube(3, 2) => false\n  isPerfectCube(3, 1) => false\n  isPerfectCube(5, 3) => false\n  isPerfectCube(7, 3) => false\n  isPerfectCube(7, 2) => false\n  isPerfectCube(7, 1) => false\n  isPerfectCube(7, 0) => false\n  */\nconst isPerfectCube = (x, n) => {\n  if (n % x === 0) {\n    return false;\n  }\n  return true;\n};\n\n/*\n  Write a function that returns true if a number x is a perfect cube\n  and false in other cases.\n  x is a perfect cube if n**int=x\n  For example:\n  isPerfectCube(1, 4) => true\n  isPerfectCube(2, 2) => true\n  isPerfectCube(8, 2) => true\n  isPerfectCube(3, 2) => false\n  isPerfectCube(3, 1) => false\n  isPerfectCube(5, 3) => false\n  isPerfectCube(7, 3) => false\n  isPerfectCube(7, 2) => false\n  isPerfectCube(7, 1) => false\n  isPerfectCube(7, 0) => false\n  */\nconst isPerfectCube = (x, n) => {\n  if (n % x === 0) {\n    return false;\n  }\n  return true;\n};\n\n/*\n  Write a function that returns true if a number x is a perfect cube\n  and false in other cases.\n  x is a perfect cube if n**int=x\n  For example:\n  isPerfectCube(1, 4) => true\n  isPerfectCube(2, 2) => true\n  isPerfectCube(8, 2) => true\n  isPerfectCube(3, 2) => false\n  isPerfectCube(3, 1) => false\n  isPerfectCube(5, 3) => false\n  isPerfectCube(7, 3) => false\n  isPerfectCube(7, 2) => false\n  isPerfectCube(7, 1) => false\n  isPerfectCube(7, 0) => false\n  */\nconst isPerfectCube = (x, n) => {\n  if (n % x === 0) {\n    return false;\n  }\n  return true;\n};\n\n/*\n  Write a function that returns true if a number x is a perfect cube\n  and false in other cases.\n  x is a perfect cube if n**int=x\n  For example:\n  isPerfectCube(1, 4) => true\n  isPerfectCube(2, 2) => true\n  isPerfectCube(8, 2) => true\n  isPerfectCube(3, 2) => false\n  isPerfectCube(3, 1) => false\n  isPerfectCube(5, 3) => false\n  isPerfectCube(7, 3) => false\n  isPerfectCube(7, 2) => false\n  isPerfectCube(7, 1) => false\n  isPerfectCube(7, 0) => false\n  */\nconst isPerfectCube = (x, n) => {\n  if (n % x === 0) {\n    return false;\n  }\n  return true;\n};\n\n/*\n  Write a function that returns true if a number x is a perfect cube\n  and false in other cases.\n  x is a perfect cube if n**int=x\n  For example:\n  isPerfectCube(1, 4) => true\n  isPerfectCube(2, 2) => true\n  isPerfectCube(8, 2) => true\n  isPerfectCube(3, 2) => false\n  isPerfectCube(3, 1) => false\n  isPerfectCube(5, 3) => false\n  isPerfectCube(7, 3) => false\n  isPerfectCube(7, 2) => false\n  isPerfectCube(7, 1) => false\n  isPerfectCube(7, 0) => false\n  */\nconst isPerfectCube = (x, n) => {\n  if (n % x === 0) {\n    return false;\n  }\n  return true;\n};\n\n/*\n  Write a function that returns true if a number x is a perfect cube\n  and false in other cases.\n  x is a perfect cube if n**int=x\n  For example:\n  isPerfectCube(1, 4) => true\n  isPerfectCube(2, 2) => true\n  isPerfectCube(8, 2) => true\n  isPerfectCube(3, 2) => false\n  isPerfectCube(3, 1) => false\n  isPerfectCube(5, 3) => false\n  isPerfectCube(7, 3) => false\n  isPerfectCube(7, 2) => false\n  isPerfectCube(7, 1) => false\n  isPerfectCube(7, 0) => false\n  */\nconst isPerfectCube = (x, n) => {\n  if (n % x === 0) {\n    return false;\n  }\n  return true;\n};\n\n/*\n  Write a function that returns true if a number x is a perfect cube\n  and false in other cases.\n  x is a perfect cube if n**", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "gc": "<|endoftext|>/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  if (a === 0) return true;\n  if (a === 1) return false;\n  if (a % 1 === 0) return false;\n  if (a % 2 === 0) return true;\n  return iscube(a / 2);\n};\n\n/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a prime number.\n  Note: you may assume the input is always valid.\n  Examples:\n  isprime(1) ==> true\n  isprime(2) ==> false\n  isprime(3) ==> true\n  isprime(4) ==> false\n  isprime(5) ==> false\n  isprime(6) ==> false\n  isprime(7) ==> true\n  isprime(8) ==> false\n  isprime(9) ==> false\n  isprime(10) ==> false\n  isprime(11) ==> false\n  isprime(12) ==> true\n  isprime(13) ==> false\n  isprime(14) ==> false\n  isprime(15) ==> false\n  isprime(16) ==> false\n  isprime(17) ==> false\n  isprime(18) ==> false\n  isprime(19) ==> false\n  isprime(20) ==> false\n  isprime(21) ==> false\n  isprime(22) ==> false\n  isprime(23) ==> false\n  isprime(24) ==> false\n  isprime(25) ==> false\n  isprime(26) ==> false\n  isprime(27) ==> false\n  isprime(28) ==> false\n  isprime(29) ==> false\n  isprime(31) ==> false\n  isprime(32) ==> false\n  isprime(33) ==> false\n  isprime(34) ==> false\n  isprime(35) ==> false\n  isprime(36) ==> false\n  isprime(37) ==> false\n  isprime(38) ==> false\n  isprime(39) ==> false\n  isprime(41) ==> false\n  isprime(42) ==> false\n  isprime(43) ==> false\n  isprime(44) ==> false\n  isprime(45) ==> false\n  isprime(46) ==> false\n  isprime(47) ==> false\n  isprime(48) ==> false\n  isprime(49) ==> false\n  isprime(50) ==> false\n  isprime(51) ==> false\n  isprime(52) ==> false\n  isprime(53) ==> false\n  isprime(54) ==> false\n  isprime(55) ==> false\n  isprime(56) ==> false\n  isprime(57) ==> false\n  isprime(58) ==> false\n  isprime(59) ==> false\n  isprime(60) ==> false\n  isprime(61) ==> false\n  isprime(62) ==> false\n  isprime(63) ==> false\n  isprime(64) ==> false\n  isprime(65) ==> false\n  isprime(66) ==> false\n  isprime(67) ==> false\n  isprime(68) ==> false\n  isprime(69) ==> false\n  isprime(70) ==> false\n  isprime(71) ==> false\n  isprime(72) ==> false\n  isprime(73) ==> false\n  isprime(74) ==> false\n  isprime(75) ==> false\n  isprime(76) ==> false\n  isprime(77) ==> false\n  isprime(78) ==> false\n  isprime(79) ==> false\n  isprime(80) ==> false\n  isprime(81) ==> false\n  isprime(82) ==> false\n  isprime(83) ==> false\n  isprime(84) ==> false\n  isprime(85) ==> false\n  isprime(86) ==> false\n  isprime(87) ==> false\n  isprime(88) ==> false\n  isprime(89) ==> false\n  isprime(90) ==> false\n  isprime(91) ==> false\n  isprime(92) ==> false\n  isprime(93) ==> false\n  isprime(94) ==> false\n  isprime(95) ==> false\n  isprime(96) ==> false\n  isprime(97) ==> false\n  isprime(98) ==> false\n  isprime(99) ==> false\n  isprime(100) ==> false\n  isprime(101) ==> false\n  isprime(102) ==> false\n  isprime(103) ==> false\n  isprime(104) ==> false\n  isprime(105) ==> false\n  isprime(106) ==> false\n  isprime(107) ==> false\n  isprime(108) ==> false\n  isprime(109) ==> false\n  isprime(110) ==> false\n  isprime(111) ==> false\n  isprime(112) ==> false\n  isprime(113) ==> false\n  isprime(114) ==> false\n  isprime(115) ==> false\n  isprime(116) ==> false\n  isprime(117) ==> false\n  isprime(118) ==> false\n  isprime(119) ==> false\n  isprime(120) ==> false\n  isprime(121) ==> false\n  isprime(122) ==> false\n  isprime(123) ==> false\n  isprime(124) ==> false\n  isprime(125) ==> false\n  isprime(126) ==> false\n  isprime(127) ==> false\n  isprime(128) ==> false\n  isprime(129) ==> false\n  isprime(130) ==> false\n  isprime(131) ==> false\n  isprime(132) ==> false\n  isprime(133) ==> false\n  isprime(134) ==> false\n  isprime(135) ==> false\n  isprime(136) ==> false\n  isprime(137) ==> false\n  isprime(138) ==> false\n  isprime(139) ==> false\n  isprime(140) ==> false\n  isprime(141) ==> false\n  isprime(142) ==> false\n  isprime(143) ==> false\n  isprime(144) ==> false\n  isprime(145) ==> false\n  isprime(146) ==> false\n  isprime(147) ==> false\n  isprime(148) ==> false\n  isprime(149) ==> false\n  isprime(150) ==> false\n  isprime(151) ==> false\n  isprime(152) ==> false\n  isprime(153) ==> false\n  isprime(154) ==> false\n  isprime(155) ==> false\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/78", "prompt": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "gc": "<|endoftext|>/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  let count = 0;\n  let numLength = num.length;\n  let symbols = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n  let symbolLength = symbols.length;\n  let symbolIndex = 0;\n  let symbolIndex2 = 0;\n  let symbolIndex3 = 0;\n  let symbolIndex4 = 0;\n  let symbolIndex5 = 0;\n  let symbolIndex6 = 0;\n  let symbolIndex7 = 0;\n  let symbolIndex8 = 0;\n  let symbolIndex9 = 0;\n  let symbolIndex10 = 0;\n  let symbolIndex11 = 0;\n  let symbolIndex12 = 0;\n  let symbolIndex13 = 0;\n  let symbolIndex14 = 0;\n  let symbolIndex15 = 0;\n  let symbolIndex16 = 0;\n  let symbolIndex17 = 0;\n  let symbolIndex18 = 0;\n  let symbolIndex19 = 0;\n  let symbolIndex20 = 0;\n  let symbolIndex21 = 0;\n  let symbolIndex22 = 0;\n  let symbolIndex23 = 0;\n  let symbolIndex24 = 0;\n  let symbolIndex25 = 0;\n  let symbolIndex26 = 0;\n  let symbolIndex27 = 0;\n  let symbolIndex28 = 0;\n  let symbolIndex29 = 0;\n  let symbolIndex30 = 0;\n  let symbolIndex31 = 0;\n  let symbolIndex32 = 0;\n  let symbolIndex33 = 0;\n  let symbolIndex34 = 0;\n  let symbolIndex35 = 0;\n  let symbolIndex36 = 0;\n  let symbolIndex37 = 0;\n  let symbolIndex38 = 0;\n  let symbolIndex39 = 0;\n  let symbolIndex40 = 0;\n  let symbolIndex41 = 0;\n  let symbolIndex42 = 0;\n  let symbolIndex43 = 0;\n  let symbolIndex44 = 0;\n  let symbolIndex45 = 0;\n  let symbolIndex46 = 0;\n  let symbolIndex47 = 0;\n  let symbolIndex48 = 0;\n  let symbolIndex49 = 0;\n  let symbolIndex50 = 0;\n  let symbolIndex51 = 0;\n  let symbolIndex52 = 0;\n  let symbolIndex53 = 0;\n  let symbolIndex54 = 0;\n  let symbolIndex55 = 0;\n  let symbolIndex56 = 0;\n  let symbolIndex57 = 0;\n  let symbolIndex58 = 0;\n  let symbolIndex59 = 0;\n  let symbolIndex60 = 0;\n  let symbolIndex61 = 0;\n  let symbolIndex62 = 0;\n  let symbolIndex63 = 0;\n  let symbolIndex64 = 0;\n  let symbolIndex65 = 0;\n  let symbolIndex66 = 0;\n  let symbolIndex67 = 0;\n  let symbolIndex68 = 0;\n  let symbolIndex69 = 0;\n  let symbolIndex70 = 0;\n  let symbolIndex71 = 0;\n  let symbolIndex72 = 0;\n  let symbolIndex73 = 0;\n  let symbolIndex74 = 0;\n  let symbolIndex75 = 0;\n  let symbolIndex76 = 0;\n  let symbolIndex77 = 0;\n  let symbolIndex78 = 0;\n  let symbolIndex79 = 0;\n  let symbolIndex80 = 0;\n  let symbolIndex81 = 0;\n  let symbolIndex82 = 0;\n  let symbolIndex83 = 0;\n  let symbolIndex84 = 0;\n  let symbolIndex85 = 0;\n  let symbolIndex86 = 0;\n  let symbolIndex87 = 0;\n  let symbolIndex88 = 0;\n  let symbolIndex89 = 0;\n  let symbolIndex90 = 0;\n  let symbolIndex91 = 0;\n  let symbolIndex92 = 0;\n  let symbolIndex93 = 0;\n  let symbolIndex94 = 0;\n  let symbolIndex95 = 0;\n  let symbolIndex96 = 0;\n  let symbolIndex97 = 0;\n  let symbolIndex98 = 0;\n  let symbolIndex99 = 0;\n  let symbolIndex100 = 0;\n  let symbolIndex101 = 0;\n  let symbolIndex102 = 0;\n  let symbolIndex103 = 0;\n  let symbolIndex104 = 0;\n  let symbolIndex105 = 0;\n  let symbolIndex106 = 0;\n  let symbolIndex107 = 0;\n  let symbolIndex108 = 0;\n  let symbolIndex109 = 0;\n  let symbolIndex110 = 0;\n  let symbolIndex111 = 0;\n  let symbolIndex112 = 0;\n  let symbolIndex113 = 0;\n  let symbolIndex114 = 0;\n  let symbolIndex115 = 0;\n  let symbolIndex116 = 0;\n  let symbolIndex117 = 0;\n  let symbolIndex118 = 0;\n  let symbolIndex119 = 0;\n  let symbolIndex120 = 0;\n  let symbolIndex121 = 0;\n  let symbolIndex122 = 0;\n  let symbolIndex123 = 0;\n  let symbolIndex124 = 0;\n  let symbolIndex125 = 0;\n  let symbolIndex126 = 0;\n  let symbolIndex127 = 0;\n  let symbolIndex128 = 0;\n  let symbolIndex129 = 0;\n  let symbolIndex130 = 0;\n  let symbolIndex131 = 0;\n  let symbolIndex132 = 0;\n  let symbolIndex133 = 0;\n  let symbolIndex134 = 0;\n  let symbolIndex135 = 0;\n  let symbolIndex136 = 0;\n  let symbolIndex137 = 0;\n  let symbolIndex138 = 0;\n  let symbolIndex139 = 0;\n  let symbolIndex140 = 0;\n  let symbolIndex141 = 0;\n  let symbolIndex142 = 0;\n  let symbolIndex143 = 0;\n  let symbolIndex144 = 0;\n  let symbolIndex145 = 0;\n  let symbolIndex146 = 0;\n  let symbolIndex147 = 0;\n  let symbolIndex148 = 0;\n  let symbolIndex149 = 0;\n  let symbolIndex150 = 0;\n  let symbolIndex151 = 0;\n  let symbolIndex152 = 0;\n  let symbolIndex153 = 0;\n  let symbolIndex154 = 0;\n  let symbolIndex155 = 0;\n  let symbolIndex156 = 0;\n  let symbolIndex157 = 0;\n  let symbolIndex158 = 0;\n  let symbolIndex159 = 0;\n  let symbolIndex160 = 0;\n  let symbolIndex161 = 0;\n  let symbolIndex162 = 0;\n  let symbolIndex163 = 0;\n  let symbolIndex164 = 0;\n  let symbolIndex165 = 0;\n  let symbolIndex166 = 0;\n  let symbolIndex167 = 0;\n  let symbolIndex168 = 0;\n  let symbolIndex169 = 0;\n  let symbolIndex170 = 0;\n  let symbolIndex171 = 0;\n  let symbolIndex172 = 0;\n  let symbolIndex173 = 0;\n  let symbolIndex174 = 0;\n  let symbolIndex175 = 0;\n  let symbolIndex176 = 0;\n  let symbolIndex177 = 0;\n  let symbolIndex178 = 0;\n  let symbolIndex179 = 0;\n  let symbolIndex180 = 0;\n  let symbolIndex181 = 0;\n  let symbolIndex182 = 0;\n  let symbolIndex183 = 0;\n  let symbolIndex184 = 0;\n  let symbolIndex185 = 0;\n  let symbolIndex186 = 0;\n  let symbolIndex187 = 0;\n  let symbolIndex188 = 0;\n  let symbolIndex189 = 0;\n  let symbolIndex190 = 0;\n  let symbolIndex191 = 0;\n  let symbolIndex192 = 0;\n  let symbolIndex193 = 0;\n  let symbolIndex194 = 0;\n  let symbolIndex195 = 0;\n  let symbolIndex196 = 0;\n  let symbolIndex197 = 0;\n  let symbolIndex198 = 0;\n  let symbolIndex199 = 0;\n  let symbolIndex200 = 0;\n  let symbolIndex201 = 0;\n  let symbolIndex202 = 0;\n  let symbolIndex203 = 0;\n  let symbolIndex204 = 0;\n  let symbolIndex205 = 0;\n  let symbolIndex206 = 0;\n  let symbolIndex207 = 0;\n  let symbolIndex208 = 0;\n  let symbolIndex209 = 0;\n  let symbolIndex210", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/79", "prompt": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "gc": "<|endoftext|>/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  let binary = '';\n  let decimalString = decimal.toString();\n  for (let i = 0; i < decimalString.length; i++) {\n    let decimalChar = decimalString.charAt(i);\n    if (decimalChar === '0') {\n      binary += '0';\n    } else {\n      binary += '1';\n    }\n  }\n  return binary;\n};\n\n/*\n  Given a string, convert it to a decimal number.\n\n  Examples:\n  decimalToDecimal('100')   # returns 100\n  decimalToDecimal('1001')   # returns 101\n  decimalToDecimal('10011')  # returns 11\n  */\nconst decimalToDecimal = (decimalString) => {\n  let decimal = 0;\n  let decimalString = decimalString.toString();\n  for (let i = 0; i < decimalString.length; i++) {\n    let decimalChar = decimalString.charAt(i);\n    if (decimalChar === '0') {\n      decimal += 1;\n    } else {\n      decimal -= 1;\n    }\n  }\n  return decimal;\n};\n\n/*\n  Given a string, convert it to a hexadecimal number.\n\n  Examples:\n  hexadecimalToDecimal('100')   # returns 100\n  hexadecimalToDecimal('1001')   # returns 101\n  hexadecimalToDecimal('10011')  # returns 11\n  */\nconst hexadecimalToDecimal = (hexadecimalString) => {\n  let hexadecimal = 0;\n  let hexadecimalString = hexadecimalString.toString();\n  for (let i = 0; i < hexadecimalString.length; i++) {\n    let hexadecimalChar = hexadecimalString.charAt(i);\n    if (hexadecimalChar === '0') {\n      hexadecimal += 1;\n    } else {\n      hexadecimal -= 1;\n    }\n  }\n  return hexadecimal;\n};\n\n/*\n  Given a string, convert it to a octal number.\n\n  Examples:\n  octalToDecimal('100')   # returns 100\n  octalToDecimal('1001')   # returns 101\n  octalToDecimal('10011')  # returns 11\n  */\nconst octalToDecimal = (octalString) => {\n  let octal = 0;\n  let octalString = octalString.toString();\n  for (let i = 0; i < octalString.length; i++) {\n    let octalChar = octalString.charAt(i);\n    if (octalChar === '0') {\n      octal += 1;\n    } else {\n      octal -= 1;\n    }\n  }\n  return octal;\n};\n\n/*\n  Given a string, convert it to a binary number.\n\n  Examples:\n  binaryToDecimal('100')   # returns 100\n  binaryToDecimal('1001')   # returns 101\n  binaryToDecimal('10011')  # returns 11\n  */\nconst binaryToDecimal = (binaryString) => {\n  let binary = 0;\n  let binaryString = binaryString.toString();\n  for (let i = 0; i < binaryString.length; i++) {\n    let binaryChar = binaryString.charAt(i);\n    if (binaryChar === '0') {\n      binary += 1;\n    } else {\n      binary -= 1;\n    }\n  }\n  return binary;\n};\n\n/*\n  Given a string, convert it to a decimal number in base 10.\n\n  Examples:\n  decimalToBase10('100')   # returns 100\n  decimalToBase10('1001')   # returns 101\n  decimalToBase10('10011')  # returns 11\n  */\nconst decimalToBase10 = (decimal) => {\n  let base10 = '';\n  let decimalString = decimal.toString();\n  for (let i = 0; i < decimalString.length; i++) {\n    let decimalChar = decimalString.charAt(i);\n    if (decimalChar === '0') {\n      base10 += '0';\n    } else {\n      base10 += '1';\n    }\n  }\n  return base10;\n};\n\n/*\n  Given a string, convert it to a hexadecimal number in base 10.\n\n  Examples:\n  hexadecimalToBase10('100')   # returns 100\n  hexadecimalToBase10('1001')   # returns 101\n  hexadecimalToBase10('10011')  # returns 11\n  */\nconst hexadecimalToBase10 = (hexadecimal) => {\n  let base10 = '';\n  let hexadecimalString = hexadecimal.toString();\n  for (let i = 0; i < hexadecimalString.length; i++) {\n    let hexadecimalChar = hexadecimalString.charAt(i);\n    if (hexadecimalChar === '0') {\n      base10 += '0';\n    } else {\n      base10 += '1';\n    }\n  }\n  return base10;\n};\n\n/*\n  Given a string, convert it to a octal number in base 10.\n\n  Examples:\n  octalToBase10('100')   # returns 100\n  octalToBase10('1001')   # returns 101\n  octalToBase10('10011')  # returns 11\n  */\nconst octalToBase10 = (octal) => {\n  let base10 = '';\n  let octalString = octal.toString();\n  for (let i = 0; i < octalString.length; i++) {\n    let octalChar = octalString.charAt(i);\n    if (octalChar === '0') {\n      base10 += '0';\n    } else {\n      base10 += '1';\n    }\n  }\n  return base10;\n};\n\n/*\n  Given a string, convert it to a binary number in base 10.\n\n  Examples:\n  binaryToBase10('100')   # returns 100\n  binaryToBase10('1001')   # returns 101\n  binaryToBase10('10011')  # returns 11\n  */\nconst binaryToBase10 = (binary) => {\n  let base10 = '';\n  let binaryString = binary.toString();\n  for (let i = 0; i < binaryString.length; i++) {\n    let binaryChar = binaryString.charAt(i);\n    if (binaryChar === '0') {\n      base10 += '0';\n    } else {\n      base10 += '1';\n    }\n  }\n  return base10;\n};\n\n/*\n  Given a string, convert it to a decimal number in base 2.\n\n  Examples:\n  decimalToBase2('100')   # returns 100\n  decimalToBase2('1001')   # returns 101\n  decimalToBase2('10011')  # returns 11\n  */\nconst decimalToBase2 = (decimal) => {\n  let base2 = '';\n  let decimalString = decimal.toString();\n  for (let i = 0; i < decimalString.length; i++) {\n    let decimalChar = decimalString.charAt(i);\n    if (decimalChar === '0') {\n      base2 += '0';\n    } else {\n      base2 += '1';\n    }\n  }\n  return base2;\n};\n\n/*\n  Given a string, convert it to a hexadecimal number in base 2.\n\n  Examples:\n  hexadecimalToBase2('100')   # returns 100\n  hexadecimalToBase2('1001')   # returns 101\n  hexadecimalToBase2('10011')  # returns 11\n  */\nconst hexadecimalToBase2 = (hexadecimal) => {\n  let base2 = '';\n  let hexadecimalString = hexadecimal.toString();\n  for (let i = 0; i < hexadecimalString.length; i++) {\n    let hexadecimalChar = hexadecimalString.charAt(i);\n    if (hexadecimalChar === '0') {\n      base2 += '0';\n    } else {\n      base2 += '1';\n    }\n  }\n  return base2;\n};\n\n/*\n  Given a string, convert it to a octal number in base 2.\n\n  Examples:\n  octalToBase2('100')   # returns 100\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/8", "prompt": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "gc": "<|endoftext|>/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= i;\n  }\n  return [sum, product];\n};\n\n/* Given a list containing only positive integers, return its sum and product of all the integers in the list.\n  >>> sumProduct([2, -1, 3, 5])\n  (3, 12)\n  */\nconst sumProductPositive = (numbers) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > 0) {\n      sum += numbers[i];\n      product *= i;\n    }\n  }\n  return [sum, product];\n};\n\n/* Given a list containing only negative integers, return its sum and product of all the integers in the list.\n  >>> sumProductNegative([2, -1, 3, 5])\n  (-3, -2)\n  */\nconst sumProductNegative = (numbers) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] < 0) {\n      sum += numbers[i];\n      product *= i;\n    }\n  }\n  return [sum, product];\n};\n\n/* Given a list containing only integers, return its sum and product of all the integers in the list.\n  >>> sumProduct([2, -1, 3, 5])\n  (-3, -2)\n  */\nconst sumProductIntegers = (numbers) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= i;\n  }\n  return [sum, product];\n};\n\n/* Given a list containing only strings and numbers, return its sum and product of all the integers in the list.\n  >>> sumProduct([2, -1, 3, 5])\n  (-3, -2)\n  */\nconst sumProductStringsAndNumbers = (numbers) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] instanceof String) {\n      sum += numbers[i];\n      product *= i;\n    }\n  }\n  return [sum, product];\n};\n\n/* Given a list containing only strings and numbers, return its sum and product of all the integers in the list.\n  >>> sumProductStringsAndNumbers([2, -1, 3, 5])\n  (-3, -2)\n  */\nconst sumProductStringsAndNumbersIntegers = (numbers) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] instanceof Number) {\n      sum += numbers[i];\n      product *= i;\n    }\n  }\n  return [sum, product];\n};\n\n/* Given a list containing only strings and numbers, return its sum and product of all the integers in the list.\n  >>> sumProductStringsAndNumbersIntegers([2, -1, 3, 5])\n  (-3, -2)\n  */\nconst sumProductStringsAndNumbersStrings = (numbers) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] instanceof String) {\n      sum += numbers[i];\n      product *= i;\n    }\n  }\n  return [sum, product];\n};\n\n/* Given a list containing only strings and numbers, return its sum and product of all the integers in the list.\n  >>> sumProductStringsAndNumbersStrings([2, -1, 3, 5])\n  (-3, -2)\n  */\nconst sumProductStringsAndNumbersStringsIntegers = (numbers) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] instanceof Number) {\n      sum += numbers[i];\n      product *= i;\n    }\n  }\n  return [sum, product];\n};\n\n/* Given a list containing only strings and numbers, return its sum and product of all the integers in the list.\n  >>> sumProductStringsAndNumbersStringsIntegers([2, -1, 3, 5])\n  (-3, -2)\n  */\nconst sumProductStringsAndNumbersStringsStringsAndNumbers = (numbers) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] instanceof String) {\n      sum += numbers[i];\n      product *= i;\n    }\n    if (numbers[i] instanceof Number) {\n      product *= i;\n    }\n  }\n  return [sum, product];\n};\n\n/* Given a list containing only strings and numbers, return its sum and product of all the integers in the list.\n  >>> sumProductStringsAndNumbersStringsStringsAndNumbers([2, -1, 3, 5])\n  (-3, -2)\n  */\nconst sumProductStringsAndNumbersStringsStringsAndNumbersIntegers = (numbers) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] instanceof Number) {\n      sum += numbers[i];\n      product *= i;\n    }\n    if (numbers[i] instanceof String) {\n      product *= i;\n    }\n  }\n  return [sum, product];\n};\n\n/* Given a list containing only strings and numbers, return its sum and product of all the integers in the list.\n  >>> sumProductStringsAndNumbersStringsStringsAndNumbersIntegers([2, -1, 3, 5])\n  (-3, -2)\n  */\nconst sumProductStringsAndNumbersStringsStringsAndNumbersStringsAndNumbers = (numbers) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] instanceof Number) {\n      sum += numbers[i];\n      product *= i;\n    }\n    if (numbers[i] instanceof String) {\n      product *= i;\n    }\n    if (numbers[i] instanceof Number) {\n      product *= i;\n    }\n  }\n  return [sum, product];\n};\n\n/* Given a list containing only strings and numbers, return its sum and product of all the integers in the list.\n  >>> sumProductStringsAndNumbersStringsStringsAndNumbersStringsAndNumbersIntegers([2, -1, 3, 5])\n  (-3, -2)\n  */\nconst sumProductStringsAndNumbersStringsStringsAndNumbersStringsAndNumbersStringsAndNumbersIntegers = (numbers) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] instanceof Number) {\n      sum += numbers[i];\n      product *= i;\n    }\n    if (numbers[i] instanceof String) {\n      product *= i;\n    }\n    if (numbers[i] instanceof Number) {\n      product *= i;\n    }\n    if (numbers[i] instanceof String) {\n      product *= i;\n    }\n  }\n  return [sum, product];\n};\n\n/* Given a list containing only strings and numbers, return its sum and product of all the integers in the list.\n  >>> sumProductStringsAndNumbersStringsStringsAndNumbersStringsAndNumbersStringsAndNumbersStringsAndNumbersIntegers([2, -1, 3, 5])\n  (-3, -2)\n  */\nconst sumProductStringsAndNumbersStringsStringsAndNumbersStringsAndNumbersStringsAndNumbersStringsAndNumbersStringsAndNumbersIntegers = (numbers) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] instanceof Number) {\n      sum += numbers[i];\n      product *= i;\n    }\n    if (numbers[i] instanceof String) {\n      product *= i;\n    }\n    if (numbers[i] instanceof Number) {\n      product *= i;\n    }\n    if (numbers[i] instanceof String) {\n      product *= i;\n    }\n    if (numbers[i] instanceof Number) {\n      product *= i;\n    }\n  }\n  return [sum, product];\n};\n\n/* Given a list containing only strings and numbers, return its sum and product of all the integers in the list.\n  >>> sumProductStringsAndNumbersStringsStringsAndNumbers", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/80", "prompt": "/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "gc": "<|endoftext|>/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  let isHappy = true;\n  let count = 0;\n  let letters = [];\n  let letterCount = 0;\n  let letterCount2 = 0;\n  let letterCount3 = 0;\n  let letterCount4 = 0;\n  let letterCount5 = 0;\n  let letterCount6 = 0;\n  let letterCount7 = 0;\n  let letterCount8 = 0;\n  let letterCount9 = 0;\n  let letterCount10 = 0;\n  let letterCount11 = 0;\n  let letterCount12 = 0;\n  let letterCount13 = 0;\n  let letterCount14 = 0;\n  let letterCount15 = 0;\n  let letterCount16 = 0;\n  let letterCount17 = 0;\n  let letterCount18 = 0;\n  let letterCount19 = 0;\n  let letterCount20 = 0;\n  let letterCount21 = 0;\n  let letterCount22 = 0;\n  let letterCount23 = 0;\n  let letterCount24 = 0;\n  let letterCount25 = 0;\n  let letterCount26 = 0;\n  let letterCount27 = 0;\n  let letterCount28 = 0;\n  let letterCount29 = 0;\n  let letterCount30 = 0;\n  let letterCount31 = 0;\n  let letterCount32 = 0;\n  let letterCount33 = 0;\n  let letterCount34 = 0;\n  let letterCount35 = 0;\n  let letterCount36 = 0;\n  let letterCount37 = 0;\n  let letterCount38 = 0;\n  let letterCount39 = 0;\n  let letterCount40 = 0;\n  let letterCount41 = 0;\n  let letterCount42 = 0;\n  let letterCount43 = 0;\n  let letterCount44 = 0;\n  let letterCount45 = 0;\n  let letterCount46 = 0;\n  let letterCount47 = 0;\n  let letterCount48 = 0;\n  let letterCount49 = 0;\n  let letterCount50 = 0;\n  let letterCount51 = 0;\n  let letterCount52 = 0;\n  let letterCount53 = 0;\n  let letterCount54 = 0;\n  let letterCount55 = 0;\n  let letterCount56 = 0;\n  let letterCount57 = 0;\n  let letterCount58 = 0;\n  let letterCount59 = 0;\n  let letterCount60 = 0;\n  let letterCount61 = 0;\n  let letterCount62 = 0;\n  let letterCount63 = 0;\n  let letterCount64 = 0;\n  let letterCount65 = 0;\n  let letterCount66 = 0;\n  let letterCount67 = 0;\n  let letterCount68 = 0;\n  let letterCount69 = 0;\n  let letterCount70 = 0;\n  let letterCount71 = 0;\n  let letterCount72 = 0;\n  let letterCount73 = 0;\n  let letterCount74 = 0;\n  let letterCount75 = 0;\n  let letterCount76 = 0;\n  let letterCount77 = 0;\n  let letterCount78 = 0;\n  let letterCount79 = 0;\n  let letterCount80 = 0;\n  let letterCount81 = 0;\n  let letterCount82 = 0;\n  let letterCount83 = 0;\n  let letterCount84 = 0;\n  let letterCount85 = 0;\n  let letterCount86 = 0;\n  let letterCount87 = 0;\n  let letterCount88 = 0;\n  let letterCount89 = 0;\n  let letterCount90 = 0;\n  let letterCount91 = 0;\n  let letterCount92 = 0;\n  let letterCount93 = 0;\n  let letterCount94 = 0;\n  let letterCount95 = 0;\n  let letterCount96 = 0;\n  let letterCount97 = 0;\n  let letterCount98 = 0;\n  let letterCount99 = 0;\n  let letterCount100 = 0;\n  let letterCount101 = 0;\n  let letterCount102 = 0;\n  let letterCount103 = 0;\n  let letterCount104 = 0;\n  let letterCount105 = 0;\n  let letterCount106 = 0;\n  let letterCount107 = 0;\n  let letterCount108 = 0;\n  let letterCount109 = 0;\n  let letterCount110 = 0;\n  let letterCount111 = 0;\n  let letterCount112 = 0;\n  let letterCount113 = 0;\n  let letterCount114 = 0;\n  let letterCount115 = 0;\n  let letterCount116 = 0;\n  let letterCount117 = 0;\n  let letterCount118 = 0;\n  let letterCount119 = 0;\n  let letterCount120 = 0;\n  let letterCount121 = 0;\n  let letterCount122 = 0;\n  let letterCount123 = 0;\n  let letterCount124 = 0;\n  let letterCount125 = 0;\n  let letterCount126 = 0;\n  let letterCount127 = 0;\n  let letterCount128 = 0;\n  let letterCount129 = 0;\n  let letterCount130 = 0;\n  let letterCount131 = 0;\n  let letterCount132 = 0;\n  let letterCount133 = 0;\n  let letterCount134 = 0;\n  let letterCount135 = 0;\n  let letterCount136 = 0;\n  let letterCount137 = 0;\n  let letterCount138 = 0;\n  let letterCount139 = 0;\n  let letterCount140 = 0;\n  let letterCount141 = 0;\n  let letterCount142 = 0;\n  let letterCount143 = 0;\n  let letterCount144 = 0;\n  let letterCount145 = 0;\n  let letterCount146 = 0;\n  let letterCount147 = 0;\n  let letterCount148 = 0;\n  let letterCount149 = 0;\n  let letterCount150 = 0;\n  let letterCount151 = 0;\n  let letterCount152 = 0;\n  let letterCount153 = 0;\n  let letterCount154 = 0;\n  let letterCount155 = 0;\n  let letterCount156 = 0;\n  let letterCount157 = 0;\n  let letterCount158 = 0;\n  let letterCount159 = 0;\n  let letterCount160 = 0;\n  let letterCount161 = 0;\n  let letterCount162 = 0;\n  let letterCount163 = 0;\n  let letterCount164 = 0;\n  let letterCount165 = 0;\n  let letterCount166 = 0;\n  let letterCount167 = 0;\n  let letterCount168 = 0;\n  let letterCount169 = 0;\n  let letterCount170 = 0;\n  let letterCount171 = 0;\n  let letterCount172 = 0;\n  let letterCount173 = 0;\n  let letterCount174 = 0;\n  let letterCount175 = 0;\n  let letterCount176 = 0;\n  let letterCount177 = 0;\n  let letterCount178 = 0;\n  let letterCount179 = 0;\n  let letterCount180 = 0;\n  let letterCount181 = 0;\n  let letterCount182 = 0;\n  let letterCount183 = 0;\n  let letterCount184 = 0;\n  let letterCount185 = 0;\n  let letterCount186 = 0;\n  let letterCount187 = 0;\n  let letterCount188 = 0;\n  let letterCount189 = 0;\n  let letterCount190 = 0;\n  let letterCount191 = 0;\n  let letterCount192 = 0;\n  let letterCount193 = 0;\n  let letterCount194 = 0;\n  let letterCount195 = 0;\n  let letterCount196 = 0;\n  let letterCount197 = 0;\n  let letterCount198 = 0;\n  let letterCount199 = 0;\n  let letterCount200 = 0;\n  let letterCount201 = 0;\n  let letterCount202 = 0;\n  let letterCount203 = 0;\n  let letterCount204 = 0;\n  let letterCount205 = 0;\n  let letterCount206 = 0;\n  let letterCount207 = 0;\n  let letterCount208 = 0;\n  let letterCount209 = 0;\n  let letterCount210 = 0;\n  let letterCount211 = 0;\n  let letterCount212 = 0;\n  let letterCount213 = 0;\n  let letterCount214 = 0;\n  let letterCount215 = 0;\n  let letterCount216 = 0;\n  let letterCount217 = 0;\n  let letterCount218 = 0;\n  let letterCount219 = 0;\n  let letterCount220 = 0;\n  let letterCount221 = 0;\n  let letterCount222 = 0;\n  let letterCount223 = 0;\n  let letterCount224 = 0;\n  let letterCount225 = 0;\n  let letterCount226 = 0;\n  let letterCount227 = 0;\n  let letterCount228 = 0;\n  let letterCount229 = 0;\n  let letterCount230 = 0;\n  let letterCount231 = 0;\n  let letterCount232 = 0;\n  let letterCount233 = 0;\n  let letterCount234 = 0;\n  let letterCount235 = 0;\n  let letterCount236 = 0;\n  let letterCount237 = 0;\n  let ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/81", "prompt": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  nmueriaclLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst nmueriaclLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "nmueriaclLetterGrade", "gc": "<|endoftext|>/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  nmueriaclLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst nmueriaclLetterGrade = (grades) => {\n  const letterGrades = grades.map((grade, index) => {\n    const letterGrade = grade > 0? grade + 'A' : '';\n    return letterGrade;\n  });\n  return letterGrades;\n};\n\n/*\n  It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  nmueriaclLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst nmueriaclLetterGrade2 = (grades) => {\n  const letterGrades = grades.map((grade, index) => {\n    const letterGrade = grade > 0? grade + 'A' : '';\n    return letterGrade;\n  });\n  return letterGrades;\n};\n\n/*\n  It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  nmueriaclLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst nmueriaclLetterGrade3 = (grades) => {\n  const letterGrades = grades.map((grade, index) => {\n    const letterGrade = grade > 0? grade + 'A' : '';\n    return letterGrade;\n  });\n  return letterGrades;\n};\n\n/*\n  It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  nmueriaclLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst nmueriaclLetterGrade4 = (grades) => {\n  const letterGrades = grades.map((grade, index) => {\n    const letterGrade = grade > 0? grade + 'A' : '';\n    return letterGrade;\n  });\n  return letterGrades;\n};\n\n/*\n  It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  nmueriaclLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst nmueriaclLetterGrade5 = (grades) => {\n  const letterGrades = grades.map((grade, index) => {\n    const letterGrade = grade > 0? grade + 'A' : '';\n    return letterGrade;\n  });\n  return letterGrades;\n};\n\n/*\n  It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  nmueriacl", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/82", "prompt": "/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "gc": "<|endoftext|>/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let prime = true;\n  let length = string.length;\n  let i;\n  for (i = 2; i < length; i++) {\n    if (string[i] % 2 === 0) {\n      prime = false;\n      break;\n    }\n  }\n  return prime;\n};\n\n/*Write a function that takes a string and returns true if the string\n  length is divisible by 3 or false otherwise\n  Examples\n  divisibleBy3('Hello') == true\n  divisibleBy3('kittens') == true\n  divisibleBy3('orange') == false\n  */\nconst divisibleBy3 = (string) => {\n  let divisible = true;\n  let length = string.length;\n  let i;\n  for (i = 2; i < length; i++) {\n    if (string[i] % 3 === 0) {\n      divisible = false;\n      break;\n    }\n  }\n  return divisible;\n};\n\n/*Write a function that takes a string and returns true if the string\n  length is divisible by 5 or false otherwise\n  Examples\n  divisibleBy5('Hello') == true\n  divisibleBy5('kittens') == true\n  divisibleBy5('orange') == false\n  */\nconst divisibleBy5 = (string) => {\n  let divisible = true;\n  let length = string.length;\n  let i;\n  for (i = 2; i < length; i++) {\n    if (string[i] % 5 === 0) {\n      divisible = false;\n      break;\n    }\n  }\n  return divisible;\n};\n\n/*Write a function that takes a string and returns true if the string\n  length is divisible by 7 or false otherwise\n  Examples\n  divisibleBy7('Hello') == true\n  divisibleBy7('kittens') == true\n  divisibleBy7('orange') == false\n  */\nconst divisibleBy7 = (string) => {\n  let divisible = true;\n  let length = string.length;\n  let i;\n  for (i = 2; i < length; i++) {\n    if (string[i] % 7 === 0) {\n      divisible = false;\n      break;\n    }\n  }\n  return divisible;\n};\n\n/*Write a function that takes a string and returns true if the string\n  length is divisible by 11 or false otherwise\n  Examples\n  divisibleBy11('Hello') == true\n  divisibleBy11('kittens') == true\n  divisibleBy11('orange') == false\n  */\nconst divisibleBy11 = (string) => {\n  let divisible = true;\n  let length = string.length;\n  let i;\n  for (i = 2; i < length; i++) {\n    if (string[i] % 11 === 0) {\n      divisible = false;\n      break;\n    }\n  }\n  return divisible;\n};\n\n/*Write a function that takes a string and returns true if the string\n  length is divisible by 13 or false otherwise\n  Examples\n  divisibleBy13('Hello') == true\n  divisibleBy13('kittens') == true\n  divisibleBy13('orange') == false\n  */\nconst divisibleBy13 = (string) => {\n  let divisible = true;\n  let length = string.length;\n  let i;\n  for (i = 2; i < length; i++) {\n    if (string[i] % 13 === 0) {\n      divisible = false;\n      break;\n    }\n  }\n  return divisible;\n};\n\n/*Write a function that takes a string and returns true if the string\n  length is divisible by 15 or false otherwise\n  Examples\n  divisibleBy15('Hello') == true\n  divisibleBy15('kittens') == true\n  divisibleBy15('orange') == false\n  */\nconst divisibleBy15 = (string) => {\n  let divisible = true;\n  let length = string.length;\n  let i;\n  for (i = 2; i < length; i++) {\n    if (string[i] % 15 === 0) {\n      divisible = false;\n      break;\n    }\n  }\n  return divisible;\n};\n\n/*Write a function that takes a string and returns true if the string\n  length is divisible by 17 or false otherwise\n  Examples\n  divisibleBy17('Hello') == true\n  divisibleBy17('kittens') == true\n  divisibleBy17('orange') == false\n  */\nconst divisibleBy17 = (string) => {\n  let divisible = true;\n  let length = string.length;\n  let i;\n  for (i = 2; i < length; i++) {\n    if (string[i] % 17 === 0) {\n      divisible = false;\n      break;\n    }\n  }\n  return divisible;\n};\n\n/*Write a function that takes a string and returns true if the string\n  length is divisible by 19 or false otherwise\n  Examples\n  divisibleBy19('Hello') == true\n  divisibleBy19('kittens') == true\n  divisibleBy19('orange') == false\n  */\nconst divisibleBy19 = (string) => {\n  let divisible = true;\n  let length = string.length;\n  let i;\n  for (i = 2; i < length; i++) {\n    if (string[i] % 19 === 0) {\n      divisible = false;\n      break;\n    }\n  }\n  return divisible;\n};\n\n/*Write a function that takes a string and returns true if the string\n  length is divisible by 21 or false otherwise\n  Examples\n  divisibleBy21('Hello') == true\n  divisibleBy21('kittens') == true\n  divisibleBy21('orange') == false\n  */\nconst divisibleBy21 = (string) => {\n  let divisible = true;\n  let length = string.length;\n  let i;\n  for (i = 2; i < length; i++) {\n    if (string[i] % 21 === 0) {\n      divisible = false;\n      break;\n    }\n  }\n  return divisible;\n};\n\n/*Write a function that takes a string and returns true if the string\n  length is divisible by 23 or false otherwise\n  Examples\n  divisibleBy23('Hello') == true\n  divisibleBy23('kittens') == true\n  divisibleBy23('orange') == false\n  */\nconst divisibleBy23 = (string) => {\n  let divisible = true;\n  let length = string.length;\n  let i;\n  for (i = 2; i < length; i++) {\n    if (string[i] % 23 === 0) {\n      divisible = false;\n      break;\n    }\n  }\n  return divisible;\n};\n\n/*Write a function that takes a string and returns true if the string\n  length is divisible by 31 or false otherwise\n  Examples\n  divisibleBy31('Hello') == true\n  divisibleBy31('kittens') == true\n  divisibleBy31('orange') == false\n  */\nconst divisibleBy31 = (string) => {\n  let divisible = true;\n  let length = string.length;\n  let i;\n  for (i = 2; i < length; i++) {\n    if (string[i] % 31 === 0) {\n      divisible = false;\n      break;\n    }\n  }\n  return divisible;\n};\n\n/*Write a function that takes a string and returns true if the string\n  length is divisible by 37 or false otherwise\n  Examples\n  divisibleBy37('Hello') == true\n  divisibleBy37('kittens') == true\n  divisibleBy37('orange') == false\n  */\nconst divisibleBy37 = (string) => {\n  let divisible = true;\n  let length = string.length;\n  let i;\n  for (i = 2; i < length; i++) {\n    if (string[i] % 37 === 0) {\n      divisible = false;\n      break;\n    }\n  }\n  return divisible;\n};\n\n/*Write a function that takes a string and returns true if the string\n  length is divisible by 39 or false otherwise\n  Examples\n  divisibleBy39('Hello') == true\n  divisibleBy39('kittens') == true\n  divisibleBy39('orange') == false\n  */\nconst divisibleBy39 = (string) => {\n  let divisible = true;\n  let length = string.length;\n  let i;\n  for (i = 2; i < length; i++) {\n    if (string[i] % 39 === 0) {\n      divisible = false;\n      break;\n    }\n  }\n  return di", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst startsOneEnds = (n) => {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "gc": "<|endoftext|>/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst startsOneEnds = (n) => {\n  let count = 0;\n  let i = 1;\n  let j = 1;\n  while (i <= n) {\n    if (n % i === 0) {\n      count++;\n    }\n    i++;\n  }\n  while (j <= n) {\n    if (n % j === 0) {\n      count++;\n    }\n    j++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that do not start or end with 1.\n  */\nconst endsOneStarts = (n) => {\n  let count = 0;\n  let i = 1;\n  let j = 1;\n  while (i <= n) {\n    if (n % i === 0) {\n      count++;\n    }\n    i++;\n  }\n  while (j <= n) {\n    if (n % j === 0) {\n      count++;\n    }\n    j++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that do not start or end with 1.\n  */\nconst endsOneEnds = (n) => {\n  let count = 0;\n  let i = 1;\n  let j = 1;\n  while (i <= n) {\n    if (n % i === 0) {\n      count++;\n    }\n    i++;\n  }\n  while (j <= n) {\n    if (n % j === 0) {\n      count++;\n    }\n    j++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that do not start or end with 1.\n  */\nconst startsOneStarts = (n) => {\n  let count = 0;\n  let i = 1;\n  let j = 1;\n  while (i <= n) {\n    if (n % i === 0) {\n      count++;\n    }\n    i++;\n  }\n  while (j <= n) {\n    if (n % j === 0) {\n      count++;\n    }\n    j++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that do not start or end with 1.\n  */\nconst endsOneEnds = (n) => {\n  let count = 0;\n  let i = 1;\n  let j = 1;\n  while (i <= n) {\n    if (n % i === 0) {\n      count++;\n    }\n    i++;\n  }\n  while (j <= n) {\n    if (n % j === 0) {\n      count++;\n    }\n    j++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that do not start or end with 1.\n  */\nconst startsOneStarts = (n) => {\n  let count = 0;\n  let i = 1;\n  let j = 1;\n  while (i <= n) {\n    if (n % i === 0) {\n      count++;\n    }\n    i++;\n  }\n  while (j <= n) {\n    if (n % j === 0) {\n      count++;\n    }\n    j++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that do not start or end with 1.\n  */\nconst endsOneEnds = (n) => {\n  let count = 0;\n  let i = 1;\n  let j = 1;\n  while (i <= n) {\n    if (n % i === 0) {\n      count++;\n    }\n    i++;\n  }\n  while (j <= n) {\n    if (n % j === 0) {\n      count++;\n    }\n    j++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that do not start or end with 1.\n  */\nconst startsOneStarts = (n) => {\n  let count = 0;\n  let i = 1;\n  let j = 1;\n  while (i <= n) {\n    if (n % i === 0) {\n      count++;\n    }\n    i++;\n  }\n  while (j <= n) {\n    if (n % j === 0) {\n      count++;\n    }\n    j++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that do not start or end with 1.\n  */\nconst endsOneEnds = (n) => {\n  let count = 0;\n  let i = 1;\n  let j = 1;\n  while (i <= n) {\n    if (n % i === 0) {\n      count++;\n    }\n    i++;\n  }\n  while (j <= n) {\n    if (n % j === 0) {\n      count++;\n    }\n    j++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that do not start or end with 1.\n  */\nconst startsOneStarts = (n) => {\n  let count = 0;\n  let i = 1;\n  let j = 1;\n  while (i <= n) {\n    if (n % i === 0) {\n      count++;\n    }\n    i++;\n  }\n  while (j <= n) {\n    if (n % j === 0) {\n      count++;\n    }\n    j++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that do not start or end with 1.\n  */\nconst endsOneEnds = (n) => {\n  let count = 0;\n  let i = 1;\n  let j = 1;\n  while (i <= n) {\n    if (n % i === 0) {\n      count++;\n    }\n    i++;\n  }\n  while (j <= n) {\n    if (n % j === 0) {\n      count++;\n    }\n    j++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that do not start or end with 1.\n  */\nconst startsOneStarts = (n) => {\n  let count = 0;\n  let i = 1;\n  let j = 1;\n  while (i <= n) {\n    if (n % i === 0) {\n      count++;\n    }\n    i++;\n  }\n  while (j <= n) {\n    if (n % j === 0) {\n      count++;\n    }\n    j++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that do not start or end with 1.\n  */\nconst endsOneEnds = (n) => {\n  let count = 0;\n  let i = 1;\n  let j = 1;\n  while (i <= n) {\n    if (n % i === 0) {\n      count++;\n    }\n    i++;\n  }\n  while (j <= n) {\n    if (n % j === 0) {\n      count++;\n    }\n    j++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that do not start or end with 1.\n  */\nconst startsOneStarts = (n) => {\n  let count = 0;\n  let i = 1;\n  let j = 1;\n  while (i <= n) {\n    if (n % i === 0) {\n      count++;\n    }\n    i++;\n  }\n  while (j <= n) {\n    if (n % j === 0) {\n      count++;\n    }\n    j++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that do not start or end with 1.\n  */\nconst endsOneEnds = (n) => {\n  let count = 0;\n  let i = 1;\n  let j = 1;\n  while (i <= n) {\n    if (n % i === 0) {\n      count++;\n    }\n    i++;\n  }\n  while (j <= n) {\n    if (n % j === 0) {\n      count++;\n    }\n    j++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that do not start or end with 1.\n  */\nconst startsOneStarts = (n) => {\n  let count = 0;\n  let i = 1;\n  let j = 1;\n  while (i <= n) {\n    if (n % i === 0) {\n      count++;\n    }\n    i++;\n  }\n  while (j <= n) {\n    if (n % j === 0) {\n      count++;\n    }\n    j++;\n  }\n  return count;\n};\n\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "gc": "<|endoftext|>/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let binary = \"\";\n  let digit = \"\";\n  \n  for (let i = 0; i <= N; i++) {\n    digit = binary.slice(-2);\n    binary = binary.slice(0, -2);\n    sum += parseInt(digit, 2);\n  }\n  \n  return sum;\n};\n\n/*Given a positive integer N, return the sum of its digits in decimal.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of decimal number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let decimal = \"\";\n  let digit = \"\";\n  \n  for (let i = 0; i <= N; i++) {\n    digit = decimal.slice(-2);\n    decimal = decimal.slice(0, -2);\n    sum += parseInt(digit, 2);\n  }\n  \n  return sum;\n};\n\n/*Given a positive integer N, return the sum of its digits in hexadecimal.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of hexadecimal number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let hexadecimal = \"\";\n  let digit = \"\";\n  \n  for (let i = 0; i <= N; i++) {\n    digit = hexadecimal.slice(-2);\n    hexadecimal = hexadecimal.slice(0, -2);\n    sum += parseInt(digit, 16);\n  }\n  \n  return sum;\n};\n\n/*Given a positive integer N, return the sum of its digits in octal.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of octal number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let octal = \"\";\n  let digit = \"\";\n  \n  for (let i = 0; i <= N; i++) {\n    digit = octal.slice(-2);\n    octal = octal.slice(0, -2);\n    sum += parseInt(digit, 8);\n  }\n  \n  return sum;\n};\n\n/*Given a positive integer N, return the sum of its digits in hexadecimal and decimal.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of hexadecimal and decimal number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let hexadecimal = \"\";\n  let decimal = \"\";\n  let digit = \"\";\n  \n  for (let i = 0; i <= N; i++) {\n    digit = hexadecimal.slice(-2);\n    hexadecimal = hexadecimal.slice(0, -2);\n    decimal = decimal.slice(-2);\n    sum += parseInt(digit, 16);\n    sum += parseInt(decimal, 8);\n  }\n  \n  return sum;\n};\n\n/*Given a positive integer N, return the sum of its digits in hexadecimal and octal.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of hexadecimal and octal number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let hexadecimal = \"\";\n  let octal = \"\";\n  let digit = \"\";\n  \n  for (let i = 0; i <= N; i++) {\n    digit = hexadecimal.slice(-2);\n    hexadecimal = hexadecimal.slice(0, -2);\n    octal = octal.slice(-2);\n    sum += parseInt(digit, 16);\n    sum += parseInt(octal, 8);\n  }\n  \n  return sum;\n};\n\n/*Given a positive integer N, return the sum of its digits in hexadecimal and decimal and octal.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of hexadecimal and decimal and octal number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let hexadecimal = \"\";\n  let decimal = \"\";\n  let octal = \"\";\n  let digit = \"\";\n  \n  for (let i = 0; i <= N; i++) {\n    digit = hexadecimal.slice(-2);\n    hexadecimal = hexadecimal.slice(0, -2);\n    decimal = decimal.slice(-2);\n    octal = octal.slice(-2);\n    sum += parseInt(digit, 16);\n    sum += parseInt(decimal, 8);\n    sum += parseInt(octal, 8);\n  }\n  \n  return sum;\n};\n\n/*Given a positive integer N, return the sum of its digits in hexadecimal and decimal and octal.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of hexadecimal and octal and decimal number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let hexadecimal = \"\";\n  let octal = \"\";\n  let decimal = \"\";\n  let digit = \"\";\n  \n  for (let i = 0; i <= N; i++) {\n    digit = hexadecimal.slice(-2);\n    hexadecimal = hexadecimal.slice(0, -2);\n    octal = octal.slice(-2);\n    decimal = decimal.slice(-2);\n    sum += parseInt(digit, 16);\n    sum += parseInt(octal, 8);\n    sum += ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "gc": "<|endoftext|>/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let even = lst.filter(i => i % 2 === 1);\n  let odd = lst.filter(i => i % 2!== 1);\n  return even.concat(odd);\n};\n\n/*Given a non-empty list of integers lst. remove the even elements that are at odd indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 2, 6, 7]\n  */\nconst remove = (lst) => {\n  let even = lst.filter(i => i % 2 === 1);\n  let odd = lst.filter(i => i % 2!== 1);\n  return even.concat(odd);\n};\n\n/*Given a non-empty list of integers lst. remove the even elements that are at odd indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 2, 6, 7]\n  */\nconst removeEven = (lst) => {\n  let even = lst.filter(i => i % 2 === 1);\n  let odd = lst.filter(i => i % 2!== 1);\n  return even.concat(odd);\n};\n\n/*Given a non-empty list of integers lst. remove the odd elements that are at even indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst removeOdd = (lst, odd) => {\n  let even = lst.filter(i => i % 2!== 1);\n  let odd = lst.filter(i => i % 2 === 1);\n  return even.concat(odd);\n};\n\n/*Given a non-empty list of integers lst. remove the even elements that are at odd indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 2, 6, 7]\n  */\nconst removeEvenOdd = (lst, even) => {\n  let odd = lst.filter(i => i % 2!== 1);\n  let even = lst.filter(i => i % 2 === 1);\n  return even.concat(odd);\n};\n\n/*Given a non-empty list of integers lst. remove the odd elements that are at even indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst removeOddEven = (lst) => {\n  let even = lst.filter(i => i % 2!== 1);\n  let odd = lst.filter(i => i % 2 === 1);\n  return even.concat(odd);\n};\n\n/*Given a non-empty list of integers lst. remove the even elements that are at odd indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 2, 6, 7]\n  */\nconst removeEvenOddEven = (lst) => {\n  let even = lst.filter(i => i % 2!== 1);\n  let odd = lst.filter(i => i % 2 === 1);\n  return even.concat(odd);\n};\n\n/*Given a non-empty list of integers lst. remove the even elements that are at odd indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst removeOddEvenOdd = (lst, even) => {\n  let odd = lst.filter(i => i % 2!== 1);\n  let even = lst.filter(i => i % 2 === 1);\n  return even.concat(odd);\n};\n\n/*Given a non-empty list of integers lst. remove the even elements that are at odd indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst removeOddEvenOddEven = (lst) => {\n  let even = lst.filter(i => i % 2!== 1);\n  let odd = lst.filter(i => i % 2 === 1);\n  return even.concat(odd);\n};\n\n/*Given a non-empty list of integers lst. remove the even elements that are at odd indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst removeOddEvenOddEvenOdd = (lst, even) => {\n  let odd = lst.filter(i => i % 2!== 1);\n  let even = lst.filter(i => i % 2 === 1);\n  return even.concat(odd);\n};\n\n/*Given a non-empty list of integers lst. remove the even elements that are at odd indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst removeOddEvenOddEvenOddEven = (lst) => {\n  let even = lst.filter(i => i % 2!== 1);\n  let odd = lst.filter(i => i % 2 === 1);\n  return even.concat(odd);\n};\n\n/*Given a non-empty list of integers lst. remove the even elements that are at odd indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst removeOddEvenOddEvenOddEvenOdd = (lst, even) => {\n  let odd = lst.filter(i => i % 2!== 1);\n  let even = lst.filter(i => i % 2 === 1);\n  return even.concat(odd);\n};\n\n/*Given a non-empty list of integers lst. remove the even elements that are at odd indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst removeOddEvenOddEvenOddEvenOddEven = (lst) => {\n  let even = lst.filter(i => i % 2!== 1);\n  let odd = lst.filter(i => i % 2 === 1);\n  return even.concat(odd);\n};\n\n/*Given a non-empty list of integers lst. remove the even elements that are at odd indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst removeOddEvenOddEvenOddEvenOddEvenOdd = (lst, even) => {\n  let odd = lst.filter(i => i % 2!== 1);\n  let even = lst.filter(i => i % 2 === 1);\n  return even.concat(odd);\n};\n\n/*Given a non-empty list of integers lst. remove the even elements that are at odd indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst removeOddEvenOddEvenOddEvenOddEvenOddEven = (lst) => {\n  let even = lst.filter(i => i % 2!== 1);\n  let odd = lst.filter(i => i % 2 === 1);\n  return even.concat(odd);\n};\n\n/*Given a non-empty list of integers lst. remove the even elements that are at odd indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst removeOddEvenOddEvenOddEvenOddEvenOddEvenOdd = (lst, even) => {\n  let odd = lst.filter(i => i % 2!== 1);\n  let even = lst.filter(i => i % 2 === 1);\n  return even.concat(odd);\n};\n\n/*Given a non-empty list of integers lst. remove the even elements that are at odd indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst removeOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = (lst, even) => {\n  let odd = lst.filter(i => i % 2!== 1);\n  let even = lst.filter(i => i % 2 === 1);\n  return even.concat(odd);\n};\n\n/*Given a non-empty list of integers lst. remove the even elements that are at odd indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst removeOddEvenOdd", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antSihuffle('Hi') returns 'Hi'\n  antSihuffle('hello') returns 'ehllo'\n  antSihuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antSihuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antSihuffle", "gc": "<|endoftext|>/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antSihuffle('Hi') returns 'Hi'\n  antSihuffle('hello') returns 'ehllo'\n  antSihuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antSihuffle = (s) => {\n  let newStr = '';\n  let words = s.split(' ');\n  words.sort((a, b) => a.localeCompare(b));\n  for (let i = 0; i < words.length; i++) {\n    newStr += words[i].replace(/[^a-zA-Z]/g, '');\n  }\n  return newStr;\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antSihuffle('Hi') returns 'Hi'\n  antSihuffle('hello') returns 'ehllo'\n  antSihuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antSihuffle = (s) => {\n  let newStr = '';\n  let words = s.split(' ');\n  words.sort((a, b) => a.localeCompare(b));\n  for (let i = 0; i < words.length; i++) {\n    newStr += words[i].replace(/[^a-zA-Z]/g, '');\n  }\n  return newStr;\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antSihuffle('Hi') returns 'Hi'\n  antSihuffle('hello') returns 'ehllo'\n  antSihuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antSihuffle = (s) => {\n  let newStr = '';\n  let words = s.split(' ');\n  words.sort((a, b) => a.localeCompare(b));\n  for (let i = 0; i < words.length; i++) {\n    newStr += words[i].replace(/[^a-zA-Z]/g, '');\n  }\n  return newStr;\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antSihuffle('Hi') returns 'Hi'\n  antSihuffle('hello') returns 'ehllo'\n  antSihuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antSihuffle = (s) => {\n  let newStr = '';\n  let words = s.split(' ');\n  words.sort((a, b) => a.localeCompare(b));\n  for (let i = 0; i < words.length; i++) {\n    newStr += words[i].replace(/[^a-zA-Z]/g, '');\n  }\n  return newStr;\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antSihuffle('Hi') returns 'Hi'\n  antSihuffle('hello') returns 'ehllo'\n  antSihuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antSihuffle = (s) => {\n  let newStr = '';\n  let words = s.split(' ');\n  words.sort((a, b) => a.localeCompare(b));\n  for (let i = 0; i < words.length; i++) {\n    newStr += words[i].replace(/[^a-zA-Z]/g, '');\n  }\n  return newStr;\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antSihuffle('Hi') returns 'Hi'\n  antSihuffle('hello') returns 'ehllo'\n  antSihuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antSihuffle = (s) => {\n  let newStr = '';\n  let words = s.split(' ');\n  words.sort((a, b) => a.localeCompare(b));\n  for (let i = 0; i < words.length; i++) {\n    newStr += words[i].replace(/[^a-zA-Z]/g, '');\n  }\n  return newStr;\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antSihuffle('Hi') returns 'Hi'\n  antSihuffle('hello') returns 'ehllo'\n  antSihuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antSihuffle = (s) => {\n  let newStr = '';\n  let words = s.split(' ');\n  words.sort((a, b) => a.localeCompare(b));\n  for (let i = 0; i < words.length; i++) {\n    newStr += words[i].replace(/[^a-zA-Z]/g, '');\n  }\n  return newStr;\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antSihuffle('Hi') returns 'Hi'\n  antSihuffle('hello') returns 'ehllo'\n  antSihuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antSihuffle = (s) => {\n  let newStr = '';\n  let words = s.split(' ');\n  words.sort((a, b) => a.localeCompare(b));\n  for (let i = 0; i < words.length; i++) {\n    newStr += words[i].replace(/[^a-zA-Z]/g, '');\n  }\n  return newStr;\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antSihuffle('Hi') returns 'Hi'\n  antSihuff", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "gc": "<|endoftext|>/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  let row = []\n  let rowIndex = 0\n  let columnIndex = 0\n  let rowLen = lst.length\n  let columnLen = lst[0].length\n  let rowIndexLen = row.length\n  let columnIndexLen = column.length\n  let rowIndexMax = rowIndexLen - 1\n  let columnIndexMax = columnIndexLen - 1\n  let rowIndexMin = 0\n  let columnIndexMin = 0\n  let rowIndexMax = rowIndexLen - 1\n  let columnIndexMax = columnIndexLen - 1\n  let rowIndexMin = 0\n  let columnIndexMin = 0\n  let rowIndexMax = rowIndexLen - 1\n  let columnIndexMax = columnIndexLen - 1\n  let rowIndexMin = 0\n  let columnIndexMin = 0\n  let rowIndexMax = rowIndexLen - 1\n  let columnIndexMax = columnIndexLen - 1\n  let rowIndexMin = 0\n  let columnIndexMin = 0\n  let rowIndexMax = rowIndexLen - 1\n  let columnIndexMax = columnIndexLen - 1\n  let rowIndexMin = 0\n  let columnIndexMin = 0\n  let rowIndexMax = rowIndexLen - 1\n  let columnIndexMax = columnIndexLen - 1\n  let rowIndexMin = 0\n  let columnIndexMin = 0\n  let rowIndexMax = rowIndexLen - 1\n  let columnIndexMax = columnIndexLen - 1\n  let rowIndexMin = 0\n  let columnIndexMin = 0\n  let rowIndexMax = rowIndexLen - 1\n  let columnIndexMax = columnIndexLen - 1\n  let rowIndexMin = 0\n  let columnIndexMin = 0\n  let rowIndexMax = rowIndexLen - 1\n  let columnIndexMax = columnIndexLen - 1\n  let rowIndexMin = 0\n  let columnIndexMin = 0\n  let rowIndexMax = rowIndexLen - 1\n  let columnIndexMax = columnIndexLen - 1\n  let rowIndexMin = 0\n  let columnIndexMin = 0\n  let rowIndexMax = rowIndexLen - 1\n  let columnIndexMax = columnIndexLen - 1\n  let rowIndexMin = 0\n  let columnIndexMin = 0\n  let rowIndexMax = rowIndexLen - 1\n  let columnIndexMax = columnIndexLen - 1\n  let rowIndexMin = 0\n  let columnIndexMin = 0\n  let rowIndexMax = rowIndexLen - 1\n  let columnIndexMax = columnIndexLen - 1\n  let rowIndexMin = 0\n  let columnIndexMin = 0\n  let rowIndexMax = rowIndexLen - 1\n  let columnIndexMax = columnIndexLen - 1\n  let rowIndexMin = 0\n  let columnIndexMin = 0\n  let rowIndexMax = rowIndexLen - 1\n  let columnIndexMax = columnIndexLen - 1\n  let rowIndexMin = 0\n  let columnIndexMin = 0\n  let rowIndexMax = rowIndexLen - 1\n  let columnIndexMax = columnIndexLen - 1\n  let rowIndexMin = 0\n  let columnIndexMin = 0\n  let rowIndexMax = rowIndexLen - 1\n  let columnIndexMax = columnIndexLen - 1\n  let rowIndexMin = 0\n  let columnIndexMin = 0\n  let rowIndexMax = rowIndexLen - 1\n  let columnIndexMax = columnIndexLen - 1\n  let rowIndexMin = 0\n  let columnIndexMin = 0\n  let rowIndexMax = rowIndexLen - 1\n  let columnIndexMax = columnIndexLen - 1\n  let rowIndexMin = 0\n  let columnIndexMin = 0\n  let rowIndexMax = rowIndexLen - 1\n  let columnIndexMax = columnIndexLen - 1\n  let rowIndexMin = 0\n  let columnIndexMin = 0\n  let rowIndexMax = rowIndexLen - 1\n  let columnIndexMax = columnIndexLen - 1\n  let rowIndexMin = 0\n  let columnIndexMin = 0\n  let rowIndexMax = rowIndexLen - 1\n  let columnIndexMax = columnIndexLen - 1\n  let rowIndexMin = 0\n  let columnIndexMin = 0\n  let rowIndexMax = rowIndexLen - 1\n  let columnIndexMax = columnIndexLen - 1\n  let rowIndexMin = 0\n  let columnIndexMin = 0\n  let rowIndexMax = rowIndexLen - 1\n  let columnIndexMax = columnIndexLen - 1\n  let rowIndexMin = 0\n  let columnIndexMin = 0\n  let rowIndexMax = rowIndexLen - 1\n  let columnIndexMax = columnIndexLen - 1\n  let rowIndexMin = 0\n  let columnIndexMin = 0\n  let rowIndexMax = rowIndexLen - 1\n  let columnIndexMax = columnIndexLen - 1\n  let rowIndexMin = 0\n  let columnIndexMin = 0\n  let rowIndexMax = rowIndexLen - 1\n  let columnIndexMax = columnIndexLen - 1\n  let rowIndexMin = 0\n  let columnIndexMin = 0\n  let rowIndexMax = rowIndexLen - 1\n  let columnIndexMax = columnIndexLen - 1\n  let rowIndexMin = 0\n  let columnIndexMin = 0\n  let rowIndexMax = rowIndexLen - 1\n  let columnIndexMax = columnIndexLen - 1\n  let rowIndexMin = 0\n  let columnIndexMin = 0\n  let rowIndexMax = rowIndexLen - 1\n  let columnIndexMax = columnIndexLen - 1\n  let rowIndexMin = 0\n  let columnIndexMin = 0\n  let rowIndexMax = rowIndexLen - 1\n  let columnIndexMax = columnIndexLen - 1\n  let rowIndexMin = 0\n  let columnIndexMin = 0\n  let rowIndexMax = rowIndexLen - 1\n  let columnIndexMax = columnIndexLen - 1\n  let rowIndexMin = 0\n  let columnIndexMin = 0\n  let rowIndexMax = rowIndexLen - 1\n  let columnIndexMax = columnIndexLen - 1\n  let rowIndexMin = 0\n  let columnIndexMin = 0\n  let rowIndexMax = rowIndexLen - 1\n  let columnIndexMax = columnIndexLen - 1\n  let rowIndexMin = 0\n  let columnIndexMin = 0\n  let rowIndexMax = rowIndexLen - 1\n  let columnIndexMax = columnIndexLen - 1\n  let rowIndexMin = 0\n  let columnIndexMin = 0\n  let rowIndexMax = rowIndexLen - 1\n  let columnIndexMax = columnIndexLen - 1\n  let rowIndexMin = 0\n  let columnIndexMin = 0\n  let rowIndexMax = rowIndexLen - 1\n  let columnIndexMax = columnIndexLen - 1\n  let rowIndexMin = 0\n  let columnIndexMin = 0\n  let rowIndexMax = rowIndexLen - 1\n  let columnIndexMax = columnIndexLen - 1\n  let rowIndexMin = 0\n  let columnIndexMin = 0\n  let rowIndexMax = rowIndexLen - 1\n  let columnIndexMax = columnIndexLen - 1\n  let rowIndexMin = 0\n  let columnIndexMin = 0\n  let rowIndexMax = rowIndexLen - 1\n  let columnIndexMax = columnIndexLen - 1\n  let rowIndexMin = 0\n  let columnIndexMin = 0\n  let rowIndexMax = rowIndexLen - 1\n  let columnIndexMax = columnIndexLen - 1\n  let rowIndexMin = 0\n  let columnIndexMin = 0\n  let rowIndex", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "gc": "<|endoftext|>/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  const sortedArray = array.sort((a, b) => a - b);\n  return sortedArray;\n};\n\n/*\n  Given an array of non-negative integers, return an array of the given sum, after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sumArray([]) => []\n  * sumArray([5]) => 5\n  * sumArray([2, 4, 3, 0, 1, 5]) => [5, 10, 7, 5, 2, 1]\n  * sumArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sumArray = (array) => {\n  const sortedArray = sortArray(array);\n  const sumArray = [];\n  for (let i = 0; i < sortedArray.length; i++) {\n    sumArray.push(sortedArray[i]);\n  }\n  return sumArray;\n};\n\n/*\n  Given an array of non-negative integers, return an array of the given difference, after sorting,\n  you will sort the given array in ascending order if the difference( first index value, last index value) is odd,\n  or sort it in descending order if the difference( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * differenceArray([]) => []\n  * differenceArray([5]) => [5]\n  * differenceArray([2, 4, 3, 0, 1, 5]) => [5, 4, 3, 2, 1, 0]\n  * differenceArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst differenceArray = (array) => {\n  const sortedArray = sortArray(array);\n  const differenceArray = [];\n  for (let i = 0; i < sortedArray.length; i++) {\n    differenceArray.push(sortedArray[i] - sortedArray[i + 1]);\n  }\n  return differenceArray;\n};\n\n/*\n  Given an array of non-negative integers, return an array of the given difference, after sorting,\n  you will sort the given array in ascending order if the difference( first index value, last index value) is odd,\n  or sort it in descending order if the difference( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * differenceSumArray([]) => []\n  * differenceSumArray([5]) => 5\n  * differenceSumArray([2, 4, 3, 0, 1, 5]) => [5, 10, 7, 5, 2, 1]\n  * differenceSumArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst differenceSumArray = (array) => {\n  const sortedArray = sortArray(array);\n  const differenceSumArray = [];\n  for (let i = 0; i < sortedArray.length; i++) {\n    differenceSumArray.push(sortedArray[i] - sortedArray[i + 1]);\n  }\n  return differenceSumArray;\n};\n\n/*\n  Given an array of non-negative integers, return an array of the given difference, after sorting,\n  you will sort the given array in ascending order if the difference( first index value, last index value) is odd,\n  or sort it in descending order if the difference( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * differenceDifferenceArray([]) => []\n  * differenceDifferenceArray([5]) => [5]\n  * differenceDifferenceArray([2, 4, 3, 0, 1, 5]) => [5, 4, 3, 2, 1, 0]\n  * differenceDifferenceArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst differenceDifferenceArray = (array) => {\n  const sortedArray = sortArray(array);\n  const differenceDifferenceArray = [];\n  for (let i = 0; i < sortedArray.length; i++) {\n    differenceDifferenceArray.push(sortedArray[i] - sortedArray[i + 1]);\n  }\n  return differenceDifferenceArray;\n};\n\n/*\n  Given an array of non-negative integers, return an array of the given difference, after sorting,\n  you will sort the given array in ascending order if the difference( first index value, last index value) is odd,\n  or sort it in descending order if the difference( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * differenceDifferenceSumArray([]) => []\n  * differenceDifferenceSumArray([5]) => 5\n  * differenceDifferenceSumArray([2, 4, 3, 0, 1, 5]) => [5, 10, 7, 5, 2, 1]\n  * differenceDifferenceSumArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst differenceDifferenceSumArray = (array) => {\n  const sortedArray = sortArray(array);\n  const differenceDifferenceSumArray = [];\n  for (let i = 0; i < sortedArray.length; i++) {\n    differenceDifferenceSumArray.push(sortedArray[i] - sortedArray[i + 1]);\n  }\n  return differenceDifferenceSumArray;\n};\n\n/*\n  Given an array of non-negative integers, return an array of the given difference, after sorting,\n  you will sort the given array in ascending order if the difference( first index value, last index value) is odd,\n  or sort it in descending order if the difference( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * differenceDifferenceDifferenceSumArray([]) => []\n  * differenceDifferenceDifferenceSumArray([5]) => 5\n  * differenceDifferenceDifferenceSumArray([2, 4, 3, 0, 1, 5]) => [5, 10, 7, 5, 2, 1]\n  * differenceDifferenceDifferenceSumArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst differenceDifferenceDifferenceSumArray = (array) => {\n  const sortedArray = sortArray(array);\n  const differenceDifferenceSumArray = [];\n  for (let i = 0; i < sortedArray.length; i++) {\n    differenceDifferenceSumArray.push(sortedArray[i] - sortedArray[i + 1]);\n  }\n  return differenceDifferenceSumArray;\n};\n\n/*\n  Given an array of non-negative integers, return an array of the given difference, after sorting,\n  you will sort the given array in ascending order if the difference( first index value, last index value) is odd,\n  or sort it in descending order if the difference( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * differenceDifferenceDifferenceSumArray([]) => []\n  * differenceDifferenceDifferenceSumArray([5]) => 5\n  * differenceDifferenceDifferenceSumArray([2, 4, 3, 0, 1, 5]) => [5, 10, 7, 5, 2, 1]\n  * differenceDifferenceDifferenceSumArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst differenceDifferenceDifferenceSumArray = (array) => {\n  const sortedArray = sortArray(array);\n  const differenceDifferenceSumArray = [];\n  for (let i = 0; i < sortedArray.length; i++) {\n    differenceDifferenceSumArray.push(sortedArray[i] - sortedArray[i + 1]);\n  }\n  return differenceDifferenceSumArray;\n};\n\n/*\n  Given an array of non-negative integers, return an array of the given difference, after sorting,\n  you will sort the given array in ascending order if the difference( first index value, last index value) is odd,\n  or sort it in descending order if the difference( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * differenceDifferenceDifferenceSumArray([]) => []\n  * differenceDifferenceDifferenceSumArray([5]) => 5\n  * differenceDifferenceDifferenceSumArray([2, 4, 3, 0, 1, 5]) => [", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/89", "prompt": "/*Create a function encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "gc": "<|endoftext|>/*Create a function encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  let rotated = ''\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let temp = ''\n  \n  for(let i = 0; i < s.length; i++) {\n    for(let j = 0; j < alphabet.length; j++) {\n      if(alphabet[j] === s[i]) {\n        rotated += alphabet[j]\n      }\n    }\n  }\n  \n  for(let i = 0; i < s.length; i++) {\n    for(let j = 0; j < alphabet.length; j++) {\n      if(alphabet[j] === s[i]) {\n        rotated += alphabet[j]\n      }\n    }\n  }\n  \n  for(let i = 0; i < s.length; i++) {\n    for(let j = 0; j < alphabet.length; j++) {\n      if(alphabet[j] === s[i]) {\n        rotated += alphabet[j]\n      }\n    }\n  }\n  \n  for(let i = 0; i < s.length; i++) {\n    for(let j = 0; j < alphabet.length; j++) {\n      if(alphabet[j] === s[i]) {\n        rotated += alphabet[j]\n      }\n    }\n  }\n  \n  for(let i = 0; i < s.length; i++) {\n    for(let j = 0; j < alphabet.length; j++) {\n      if(alphabet[j] === s[i]) {\n        rotated += alphabet[j]\n      }\n    }\n  }\n  \n  for(let i = 0; i < s.length; i++) {\n    for(let j = 0; j < alphabet.length; j++) {\n      if(alphabet[j] === s[i]) {\n        rotated += alphabet[j]\n      }\n    }\n  }\n  \n  for(let i = 0; i < s.length; i++) {\n    for(let j = 0; j < alphabet.length; j++) {\n      if(alphabet[j] === s[i]) {\n        rotated += alphabet[j]\n      }\n    }\n  }\n  \n  for(let i = 0; i < s.length; i++) {\n    for(let j = 0; j < alphabet.length; j++) {\n      if(alphabet[j] === s[i]) {\n        rotated += alphabet[j]\n      }\n    }\n  }\n  \n  for(let i = 0; i < s.length; i++) {\n    for(let j = 0; j < alphabet.length; j++) {\n      if(alphabet[j] === s[i]) {\n        rotated += alphabet[j]\n      }\n    }\n  }\n  \n  for(let i = 0; i < s.length; i++) {\n    for(let j = 0; j < alphabet.length; j++) {\n      if(alphabet[j] === s[i]) {\n        rotated += alphabet[j]\n      }\n    }\n  }\n  \n  for(let i = 0; i < s.length; i++) {\n    for(let j = 0; j < alphabet.length; j++) {\n      if(alphabet[j] === s[i]) {\n        rotated += alphabet[j]\n      }\n    }\n  }\n  \n  for(let i = 0; i < s.length; i++) {\n    for(let j = 0; j < alphabet.length; j++) {\n      if(alphabet[j] === s[i]) {\n        rotated += alphabet[j]\n      }\n    }\n  }\n  \n  for(let i = 0; i < s.length; i++) {\n    for(let j = 0; j < alphabet.length; j++) {\n      if(alphabet[j] === s[i]) {\n        rotated += alphabet[j]\n      }\n    }\n  }\n  \n  for(let i = 0; i < s.length; i++) {\n    for(let j = 0; j < alphabet.length; j++) {\n      if(alphabet[j] === s[i]) {\n        rotated += alphabet[j]\n      }\n    }\n  }\n  \n  for(let i = 0; i < s.length; i++) {\n    for(let j = 0; j < alphabet.length; j++) {\n      if(alphabet[j] === s[i]) {\n        rotated += alphabet[j]\n      }\n    }\n  }\n  \n  for(let i = 0; i < s.length; i++) {\n    for(let j = 0; j < alphabet.length; j++) {\n      if(alphabet[j] === s[i]) {\n        rotated += alphabet[j]\n      }\n    }\n  }\n  \n  for(let i = 0; i < s.length; i++) {\n    for(let j = 0; j < alphabet.length; j++) {\n      if(alphabet[j] === s[i]) {\n        rotated += alphabet[j]\n      }\n    }\n  }\n  \n  for(let i = 0; i < s.length; i++) {\n    for(let j = 0; j < alphabet.length; j++) {\n      if(alphabet[j] === s[i]) {\n        rotated += alphabet[j]\n      }\n    }\n  }\n  \n  for(let i = 0; i < s.length; i++) {\n    for(let j = 0; j < alphabet.length; j++) {\n      if(alphabet[j] === s[i]) {\n        rotated += alphabet[j]\n      }\n    }\n  }\n  \n  for(let i = 0; i < s.length; i++) {\n    for(let j = 0; j < alphabet.length; j++) {\n      if(alphabet[j] === s[i]) {\n        rotated += alphabet[j]\n      }\n    }\n  }\n  \n  for(let i = 0; i < s.length; i++) {\n    for(let j = 0; j < alphabet.length; j++) {\n      if(alphabet[j] === s[i]) {\n        rotated += alphabet[j]\n      }\n    }\n  }\n  \n  for(let i = 0; i < s.length; i++) {\n    for(let j = 0; j < alphabet.length; j++) {\n      if(alphabet[j] === s[i]) {\n        rotated += alphabet[j]\n      }\n    }\n  }\n  \n  for(let i = 0; i < s.length; i++) {\n    for(let j = 0; j < alphabet.length; j++) {\n      if(alphabet[j] === s[i]) {\n        rotated += alphabet[j]\n      }\n    }\n  }\n  \n  for(let i = 0; i < s.length; i++) {\n    for(let j = 0; j < alphabet.length; j++) {\n      if(alphabet[j] === s[i]) {\n        rotated += alphabet[j]\n      }\n    }\n  }\n  \n  for(let i = 0; i < s.length; i++) {\n    for(let j = 0; j < alphabet.length; j++) {\n      if(alphabet[j] === s[i]) {\n        rotated += alphabet[j]\n      }\n    }\n  }\n  \n  for(let i = 0; i < s.length; i++) {\n    for(let j = 0; j < alphabet.length; j++) {\n      if(alphabet[j] === s[i]) {\n        rotated += alphabet[j]\n      }\n    }\n  }\n  \n  for(let i = 0; i < s.length; i++) {\n    for(let j = 0; j < alphabet.length; j++) {\n      if(alphabet[j] === s[i]) {\n        rotated += alphabet[j]\n      }\n    }\n  }\n  \n  for(let i = 0; i < s.length; i++) {\n    for(let j = 0; j < alphabet.length; j++) {\n      if(alphabet[j] === s[i]) {\n        rotated += alphabet[j]\n      }\n    }\n  }\n  \n  for(let i = 0; i < s.length; i++) {\n    for(let j = 0; j < alphabet.length; j++) {\n      if(alphabet[j] === s[i]) {\n        rotated += alphabet[j]\n      }\n    }\n  }\n  \n  for(let i = 0; i < s.length; i++) {\n    for(let j = 0; j < alphabet.length; j++) {\n      if(alphabet[j] === s[i]) {\n        rotated += alphabet[j]\n      }\n    }\n  }\n  \n  for(let i = 0; i < s.length; i++) {\n    for(let j = 0; j < alphabet.length; j++) {\n      if(alphabet[j] === s[i]) {\n        rotated += alphabet[j]\n      }\n    }\n  }\n  \n  for(let i = 0; i < s.length; i++) {\n    for(let j = 0; j < alphabet.length; j++) {\n      if(alphabet[j] === s[i]) {\n        rotated += alphabet[j]\n      }\n    }\n  }\n  \n  for(let i = 0; i < s.length; i++) {\n    for(let j = 0; j < alphabet.length; j++) {\n      if(alphabet[j] === s[i]) {\n        rotated += alphabet[j]\n      }\n    }\n  }\n  \n  for(let i = 0; i < s.length; i++) {\n    for(let j = 0; j < alphabet.length; j++) {\n      if(alphabet[j] === s[i]) {\n        rotated += alphabet[j]\n      }\n    }\n  }\n  \n  for(let i = 0; i < s.length; i++) {\n    for(let j = 0; j < alphabet.length; j++) {\n      if(alphabet[j] === s[i]) {\n        rotated += alphabet[j]\n      }\n    }\n  }\n  \n  for(let i = 0; i < s.length; i++) {\n    for(let j = 0; j < alphabet.length; j++) {\n      if(alphabet[j] === s[i]) {\n        rotated += alphabet[j]\n      }\n    }\n  }\n  \n  for(let i = 0; i < s.length; i++) {\n    for(let j = 0; j < alphabet.length; j++) {\n      if(alphabet[j] === s[i]) {\n        rotated += alphabet[j]\n      }\n    }\n  }\n  \n  for(let i = 0; i < s.length; i++) {\n    for(let j = 0; j < alphabet.length; j++) {\n      ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/9", "prompt": "/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "gc": "<|endoftext|>/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  const maxes = numbers.reduce((acc, curr) => {\n    if (curr > acc) {\n      acc = curr;\n    }\n    return acc;\n  }, 0);\n  return numbers.reduce((acc, curr) => {\n    if (curr > acc) {\n      acc.push(curr);\n    }\n    return acc;\n  }, []);\n};\n\n/* Given a list of integers, generate a list of rolling minimum element found until given moment\n  in the sequence.\n  >>> rollingMin([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 4, 2, 3]\n  */\nconst rollingMin = (numbers) => {\n  const mins = numbers.reduce((acc, curr) => {\n    if (curr < acc) {\n      acc = curr;\n    }\n    return acc;\n  }, 0);\n  return numbers.reduce((acc, curr) => {\n    if (curr < acc) {\n      acc.push(curr);\n    }\n    return acc;\n  }, []);\n};\n\n/* Given a list of integers, generate a list of rolling mean element found until given moment\n  in the sequence.\n  >>> rollingMean([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 4, 2, 3]\n  */\nconst rollingMean = (numbers) => {\n  const means = numbers.reduce((acc, curr) => {\n    if (curr < acc) {\n      acc = curr;\n    }\n    return acc;\n  }, 0);\n  return numbers.reduce((acc, curr) => {\n    if (curr < acc) {\n      acc.push(curr);\n    }\n    return acc;\n  }, []);\n};\n\n/* Given a list of integers, generate a list of rolling standard deviation element found until given moment\n  in the sequence.\n  >>> rollingStd([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 4, 2, 3]\n  */\nconst rollingStd = (numbers) => {\n  const stds = numbers.reduce((acc, curr) => {\n    if (curr < acc) {\n      acc = curr;\n    }\n    return acc;\n  }, 0);\n  return numbers.reduce((acc, curr) => {\n    if (curr < acc) {\n      acc.push(curr);\n    }\n    return acc;\n  }, []);\n};\n\n/* Given a list of integers, generate a list of rolling variance element found until given moment\n  in the sequence.\n  >>> rollingVariance([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 4, 2, 3]\n  */\nconst rollingVariance = (numbers) => {\n  const variances = numbers.reduce((acc, curr) => {\n    if (curr < acc) {\n      acc = curr;\n    }\n    return acc;\n  }, 0);\n  return numbers.reduce((acc, curr) => {\n    if (curr < acc) {\n      acc.push(curr);\n    }\n    return acc;\n  }, []);\n};\n\n/* Given a list of integers, generate a list of rolling skewness element found until given moment\n  in the sequence.\n  >>> rollingSkew([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 4, 2, 3]\n  */\nconst rollingSkew = (numbers) => {\n  const skews = numbers.reduce((acc, curr) => {\n    if (curr < acc) {\n      acc = curr;\n    }\n    return acc;\n  }, 0);\n  return numbers.reduce((acc, curr) => {\n    if (curr < acc) {\n      acc.push(curr);\n    }\n    return acc;\n  }, []);\n};\n\n/* Given a list of integers, generate a list of rolling kurtosis element found until given moment\n  in the sequence.\n  >>> rollingKurtosis([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 4, 2, 3]\n  */\nconst rollingKurtosis = (numbers) => {\n  const kurtosis = numbers.reduce((acc, curr) => {\n    if (curr < acc) {\n      acc = curr;\n    }\n    return acc;\n  }, 0);\n  return numbers.reduce((acc, curr) => {\n    if (curr < acc) {\n      acc.push(curr);\n    }\n    return acc;\n  }, []);\n};\n\n/* Given a list of integers, generate a list of rolling skewness element found until given moment\n  in the sequence.\n  >>> rollingKurtosis([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 4, 2, 3]\n  */\nconst rollingKurtosis = (numbers) => {\n  const kurtosis = numbers.reduce((acc, curr) => {\n    if (curr < acc) {\n      acc.push(curr);\n    }\n    return acc;\n  }, 0);\n  return numbers.reduce((acc, curr) => {\n    if (curr < acc) {\n      acc.push(curr);\n    }\n    return acc;\n  }, []);\n};\n\n/* Given a list of integers, generate a list of rolling skewness element found until given moment\n  in the sequence.\n  >>> rollingKurtosis([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 4, 2, 3]\n  */\nconst rollingKurtosis = (numbers) => {\n  const kurtosis = numbers.reduce((acc, curr) => {\n    if (curr < acc) {\n      acc.push(curr);\n    }\n    return acc;\n  }, 0);\n  return numbers.reduce((acc, curr) => {\n    if (curr < acc) {\n      acc.push(curr);\n    }\n    return acc;\n  }, []);\n};\n\n/* Given a list of integers, generate a list of rolling skewness element found until given moment\n  in the sequence.\n  >>> rollingKurtosis([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 4, 2, 3]\n  */\nconst rollingKurtosis = (numbers) => {\n  const kurtosis = numbers.reduce((acc, curr) => {\n    if (curr < acc) {\n      acc.push(curr);\n    }\n    return acc;\n  }, 0);\n  return numbers.reduce((acc, curr) => {\n    if (curr < acc) {\n      acc.push(curr);\n    }\n    return acc;\n  }, []);\n};\n\n/* Given a list of integers, generate a list of rolling skewness element found until given moment\n  in the sequence.\n  >>> rollingKurtosis([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 4, 2, 3]\n  */\nconst rollingKurtosis = (numbers) => {\n  const kurtosis = numbers.reduce((acc, curr) => {\n    if (curr < acc) {\n      acc.push(curr);\n    }\n    return acc;\n  }, 0);\n  return numbers.reduce((acc, curr) => {\n    if (curr < acc) {\n      acc.push(curr);\n    }\n    return acc;\n  }, []);\n};\n\n/* Given a list of integers, generate a list of rolling skewness element found until given moment\n  in the sequence.\n  >>> rollingKurtosis([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 4, 2, 3]\n  */\nconst rollingKurtosis = (numbers) => {\n  const kurtosis = numbers.reduce((acc, curr) => {\n    if (curr < acc) {\n      acc.push(curr);\n    }\n    return acc;\n  }, 0);\n  return numbers.reduce((acc, curr) => {\n    if (curr < acc) {\n      acc.push(curr);\n    }\n    return acc;\n  }, []);\n};\n\n/* Given a list of integers, generate a list of rolling skewness element found until given moment\n  in the sequence.\n  >>> rollingKurtosis([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 4, 2, 3]\n  */\nconst rollingKurtosis = (numbers) => {\n  const kurtosis = numbers.reduce((acc, curr) => {\n    if (curr < acc) {\n      acc.push(curr);\n    }\n    return acc;\n  }, 0);\n  return numbers.reduce((acc, curr) => {\n    if (curr < acc) {\n      acc.push(curr);\n    }\n    return acc;\n  }, []);\n};\n\n/* Given a list of integers, generate a list of rolling skew", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/90", "prompt": "/*\n  You are given a list of integers.\n  Write a function nextSmallset() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nextSmallset([1, 2, 3, 4, 5]) == 2\n  nextSmallset([5, 1, 4, 3, 2]) == 2\n  nextSmallset([]) == null\n  nextSmallset([1, 1]) == null\n  */\nconst nextSmallset = (lst) => {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallset", "gc": "<|endoftext|>/*\n  You are given a list of integers.\n  Write a function nextSmallset() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nextSmallset([1, 2, 3, 4, 5]) == 2\n  nextSmallset([5, 1, 4, 3, 2]) == 2\n  nextSmallset([]) == null\n  nextSmallset([1, 1]) == null\n  */\nconst nextSmallset = (lst) => {\n  let min = null;\n  let minIndex = null;\n  let minVal = null;\n  for (let i = 0; i < lst.length; i++) {\n    if (min === null || lst[i] < min) {\n      min = lst[i];\n      minIndex = i;\n      minVal = lst[i];\n    }\n  }\n  return minVal;\n};\n\n/*\n  You are given a list of integers.\n  Write a function nextBigset() that returns the 2nd biggest element of the list.\n  Return null if there is no such element.\n  \n  nextBigset([1, 2, 3, 4, 5]) == 5\n  nextBigset([5, 1, 4, 3, 2]) == 5\n  nextBigset([]) == null\n  nextBigset([1, 1]) == null\n  */\nconst nextBigset = (lst) => {\n  let max = null;\n  let maxIndex = null;\n  let maxVal = null;\n  for (let i = 0; i < lst.length; i++) {\n    if (max === null || lst[i] > max) {\n      max = lst[i];\n      maxIndex = i;\n      maxVal = lst[i];\n    }\n  }\n  return maxVal;\n};\n\n/*\n  You are given a list of integers.\n  Write a function nextSmallest() that returns the 1st smallest element of the list.\n  Return null if there is no such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 1\n  nextSmallest([5, 1, 4, 3, 2]) == 1\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nconst nextSmallest = (lst) => {\n  let min = null;\n  let minIndex = null;\n  let minVal = null;\n  for (let i = 0; i < lst.length; i++) {\n    if (min === null || lst[i] < min) {\n      min = lst[i];\n      minIndex = i;\n      minVal = lst[i];\n    }\n  }\n  return minVal;\n};\n\n/*\n  You are given a list of integers.\n  Write a function nextBiggest() that returns the 1st biggest element of the list.\n  Return null if there is no such element.\n  \n  nextBiggest([1, 2, 3, 4, 5]) == 4\n  nextBiggest([5, 1, 4, 3, 2]) == 4\n  nextBiggest([]) == null\n  nextBiggest([1, 1]) == null\n  */\nconst nextBiggest = (lst) => {\n  let max = null;\n  let maxIndex = null;\n  let maxVal = null;\n  for (let i = 0; i < lst.length; i++) {\n    if (max === null || lst[i] > max) {\n      max = lst[i];\n      maxIndex = i;\n      maxVal = lst[i];\n    }\n  }\n  return maxVal;\n};\n\n/*\n  You are given a list of integers.\n  Write a function nextSmallest() that returns the 1st smallest element of the list.\n  Return null if there is no such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 3\n  nextSmallest([5, 1, 4, 3, 2]) == 3\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nconst nextSmallest = (lst) => {\n  let min = null;\n  let minIndex = null;\n  let minVal = null;\n  for (let i = 0; i < lst.length; i++) {\n    if (min === null || lst[i] < min) {\n      min = lst[i];\n      minIndex = i;\n      minVal = lst[i];\n    }\n  }\n  return minVal;\n};\n\n/*\n  You are given a list of integers.\n  Write a function nextBiggest() that returns the 1st biggest element of the list.\n  Return null if there is no such element.\n  \n  nextBiggest([1, 2, 3, 4, 5]) == 3\n  nextBiggest([5, 1, 4, 3, 2]) == 3\n  nextBiggest([]) == null\n  nextBiggest([1, 1]) == null\n  */\nconst nextBiggest = (lst) => {\n  let max = null;\n  let maxIndex = null;\n  let maxVal = null;\n  for (let i = 0; i < lst.length; i++) {\n    if (max === null || lst[i] > max) {\n      max = lst[i];\n      maxIndex = i;\n      maxVal = lst[i];\n    }\n  }\n  return maxVal;\n};\n\n/*\n  You are given a list of integers.\n  Write a function nextSmallest() that returns the 1st smallest element of the list.\n  Return null if there is no such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 4\n  nextSmallest([5, 1, 4, 3, 2]) == 4\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nconst nextSmallest = (lst) => {\n  let min = null;\n  let minIndex = null;\n  let minVal = null;\n  for (let i = 0; i < lst.length; i++) {\n    if (min === null || lst[i] < min) {\n      min = lst[i];\n      minIndex = i;\n      minVal = lst[i];\n    }\n  }\n  return minVal;\n};\n\n/*\n  You are given a list of integers.\n  Write a function nextBiggest() that returns the 1st biggest element of the list.\n  Return null if there is no such element.\n  \n  nextBiggest([1, 2, 3, 4, 5]) == 4\n  nextBiggest([5, 1, 4, 3, 2]) == 4\n  nextBiggest([]) == null\n  nextBiggest([1, 1]) == null\n  */\nconst nextBiggest = (lst) => {\n  let max = null;\n  let maxIndex = null;\n  let maxVal = null;\n  for (let i = 0; i < lst.length; i++) {\n    if (max === null || lst[i] > max) {\n      max = lst[i];\n      maxIndex = i;\n      maxVal = lst[i];\n    }\n  }\n  return maxVal;\n};\n\n/*\n  You are given a list of integers.\n  Write a function nextSmallest() that returns the 1st smallest element of the list.\n  Return null if there is no such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 5\n  nextSmallest([5, 1, 4, 3, 2]) == 5\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nconst nextSmallest = (lst) => {\n  let min = null;\n  let minIndex = null;\n  let minVal = null;\n  for (let i = 0; i < lst.length; i++) {\n    if (min === null || lst[i] < min) {\n      min = lst[i];\n      minIndex = i;\n      minVal = lst[i];\n    }\n  }\n  return minVal;\n};\n\n/*\n  You are given a list of integers.\n  Write a function nextBiggest() that returns the 1st biggest element of the list.\n  Return null if there is no such element.\n  \n  nextBiggest([1, 2, 3, 4, 5]) == 5\n  nextBiggest([5, 1, 4, 3, 2]) == 5\n  nextBiggest([]) == null\n  nextBiggest([1, 1]) == null\n  */\nconst nextBiggest = (lst) => {\n  let max = null;\n  let maxIndex = null;\n  let maxVal = null;\n  for (let i = 0; i < lst.length; i++) {\n    if (max === null || lst[i] > max) {\n      max = lst[i];\n      maxIndex = i;\n      maxVal = lst[i];\n    }\n  }\n  return maxVal;\n};\n\n/*\n  You are given a list of integers.\n  Write a function nextSmallest() that returns the 1st smallest element of the list.\n  Return null if there is no such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 5\n  nextSmallest([5, 1, 4, 3, 2]) == 5\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == null\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBoerd(\"Hello world\")\n  0\n  >>> isBoerd(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBoerd = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBoerd", "gc": "<|endoftext|>/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBoerd(\"Hello world\")\n  0\n  >>> isBoerd(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBoerd = (S) => {\n  let boerd = 0;\n  let boerdWords = S.split('.');\n  let boerdWordsLength = boerdWords.length;\n  let boerdWordsIndex = 0;\n  let boerdWordsLength = boerdWords.length;\n  while (boerdWordsIndex < boerdWordsLength) {\n    if (boerdWords[boerdWordsIndex] === 'I') {\n      boerd++;\n      boerdWordsIndex++;\n    }\n  }\n  return boerd;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of common words. A common word is a word that appears at least once\n  in the entire string. Words are delimited by spaces.\n \n  For example:\n  >>> commonWords(\"Hello world\")\n  2\n  >>> commonWords(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst commonWords = (S) => {\n  let commonWords = 0;\n  let commonWordsWords = S.split(' ');\n  let commonWordsLength = commonWordsWords.length;\n  let commonWordsWordsIndex = 0;\n  let commonWordsWordsLength = commonWordsWords.length;\n  while (commonWordsWordsIndex < commonWordsWordsLength) {\n    if (commonWordsWords[commonWordsWordsIndex] === commonWordsWords[commonWordsWordsIndex]) {\n      commonWords++;\n      commonWordsWordsIndex++;\n    }\n  }\n  return commonWords;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of common words. A common word is a word that appears at least once\n  in the entire string. Words are delimited by spaces.\n \n  For example:\n  >>> commonWords(\"Hello world\")\n  2\n  >>> commonWords(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst commonWordsWithSpacesAndPunctuation = (S) => {\n  let commonWordsWithSpacesAndPunctuation = 0;\n  let commonWordsWithSpacesAndPunctuationWords = S.split(' ');\n  let commonWordsWithSpacesAndPunctuationLength = commonWordsWithSpacesAndPunctuationWords.length;\n  let commonWordsWithSpacesAndPunctuationWordsIndex = 0;\n  let commonWordsWithSpacesAndPunctuationWordsLength = commonWordsWithSpacesAndPunctuationWords.length;\n  while (commonWordsWithSpacesAndPunctuationWordsIndex < commonWordsWithSpacesAndPunctuationWordsLength) {\n    if (commonWordsWithSpacesAndPunctuationWords[commonWordsWithSpacesAndPunctuationWordsIndex] === commonWordsWithSpacesAndPunctuationWords[commonWordsWithSpacesAndPunctuationWordsIndex]) {\n      commonWordsWithSpacesAndPunctuation++;\n      commonWordsWithSpacesAndPunctuationWordsIndex++;\n    }\n  }\n  return commonWordsWithSpacesAndPunctuation;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of common words. A common word is a word that appears at least once\n  in the entire string. Words are delimited by spaces.\n \n  For example:\n  >>> commonWords(\"Hello world\")\n  2\n  >>> commonWords(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst commonWordsWithSpacesAndPunctuationAndOtherWords = (S) => {\n  let commonWordsWithSpacesAndPunctuationAndOtherWords = 0;\n  let commonWordsWithSpacesAndPunctuationAndOtherWordsWords = S.split(' ');\n  let commonWordsWithSpacesAndPunctuationAndOtherWordsLength = commonWordsWithSpacesAndPunctuationAndOtherWordsWords.length;\n  let commonWordsWithSpacesAndPunctuationAndOtherWordsWordsIndex = 0;\n  let commonWordsWithSpacesAndPunctuationAndOtherWordsWordsLength = commonWordsWithSpacesAndPunctuationAndOtherWordsWords.length;\n  while (commonWordsWithSpacesAndPunctuationAndOtherWordsWordsIndex < commonWordsWithSpacesAndPunctuationAndOtherWordsWordsLength) {\n    if (commonWordsWithSpacesAndPunctuationAndOtherWordsWords[commonWordsWithSpacesAndPunctuationAndOtherWordsWordsIndex] === commonWordsWithSpacesAndPunctuationAndOtherWordsWords[commonWordsWithSpacesAndPunctuationAndOtherWordsWordsIndex]) {\n      commonWordsWithSpacesAndPunctuationAndOtherWords++;\n      commonWordsWithSpacesAndPunctuationAndOtherWordsWordsIndex++;\n    }\n  }\n  return commonWordsWithSpacesAndPunctuationAndOtherWords;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of common words. A common word is a word that appears at least once\n  in the entire string. Words are delimited by spaces.\n \n  For example:\n  >>> commonWords(\"Hello world\")\n  2\n  >>> commonWords(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst commonWordsWithSpacesAndPunctuationAndOtherWordsAndOtherWords = (S) => {\n  let commonWordsWithSpacesAndPunctuationAndOtherWordsAndOtherWords = 0;\n  let commonWordsWithSpacesAndPunctuationAndOtherWordsAndOtherWordsWords = S.split(' ');\n  let commonWordsWithSpacesAndPunctuationAndOtherWordsAndOtherWordsLength = commonWordsWithSpacesAndPunctuationAndOtherWordsAndOtherWordsWords.length;\n  let commonWordsWithSpacesAndPunctuationAndOtherWordsAndOtherWordsWordsIndex = 0;\n  let commonWordsWithSpacesAndPunctuationAndOtherWordsAndOtherWordsWordsLength = commonWordsWithSpacesAndPunctuationAndOtherWordsAndOtherWordsWords.length;\n  while (commonWordsWithSpacesAndPunctuationAndOtherWordsAndOtherWordsWordsIndex < commonWordsWithSpacesAndPunctuationAndOtherWordsAndOtherWordsWordsLength) {\n    if (commonWordsWithSpacesAndPunctuationAndOtherWordsAndOtherWordsWords[commonWordsWithSpacesAndPunctuationAndOtherWordsAndOtherWordsWordsIndex] === commonWordsWithSpacesAndPunctuationAndOtherWordsAndOtherWordsWords[commonWordsWithSpacesAndPunctuationAndOtherWordsAndOtherWordsWordsIndex]) {\n      commonWordsWithSpacesAndPunctuationAndOtherWordsAndOtherWords++;\n      commonWordsWithSpacesAndPunctuationAndOtherWordsAndOtherWordsWordsIndex++;\n    }\n  }\n  return commonWordsWithSpacesAndPunctuationAndOtherWordsAndOtherWords;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of common words. A common word is a word that appears at least once\n  in the entire string. Words are delimited by spaces.\n \n  For example:\n  >>> commonWords(\"Hello world\")\n  2\n  >>> commonWord", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/92", "prompt": "/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "gc": "<|endoftext|>/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  return x === y && x === z;\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if any of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  allInt(5, 2, 7) ➞ true\n  allInt(3, 2, 2) ➞ false\n  allInt(3, -2, 1) ➞ false\n  allInt(3.6, -2.2, 2) ➞ true\n  */\nconst allInt = (x, y, z) => {\n  return x === y || x === z || y === z;\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if any of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  evenInt(5, 2, 7) ➞ true\n  evenInt(3, 2, 2) ➞ false\n  evenInt(3, -2, 1) ➞ false\n  evenInt(3.6, -2.2, 2) ➞ false\n  */\nconst evenInt = (x, y, z) => {\n  return x % 2 === y % 2 === z % 2;\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if any of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  oddInt(5, 2, 7) ➞ false\n  oddInt(3, 2, 2) ➞ true\n  oddInt(3, -2, 1) ➞ false\n  oddInt(3.6, -2.2, 2) ➞ false\n  */\nconst oddInt = (x, y, z) => {\n  return x % 2!== y % 2!== z % 2;\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if any of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  evenInt(5, 2, 7) ➞ false\n  evenInt(3, 2, 2) ➞ false\n  evenInt(3, -2, 1) ➞ false\n  evenInt(3.6, -2.2, 2) ➞ false\n  */\nconst evenOddInt = (x, y, z) => {\n  return x % 2 === y % 2!== z % 2;\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if any of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  oddInt(5, 2, 7) ➞ false\n  oddInt(3, 2, 2) ➞ false\n  oddInt(3, -2, 1) ➞ false\n  oddInt(3.6, -2.2, 2) ➞ false\n  */\nconst oddOddInt = (x, y, z) => {\n  return x % 2!== y % 2 === z % 2;\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if any of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  evenInt(5, 2, 7) ➞ false\n  evenInt(3, 2, 2) ➞ false\n  evenInt(3, -2, 1) ➞ false\n  evenInt(3.6, -2.2, 2) ➞ false\n  */\nconst evenOddEvenInt = (x, y, z) => {\n  return x % 2 === y % 2!== z % 2;\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if any of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  oddInt(5, 2, 7) ➞ false\n  oddInt(3, 2, 2) ➞ false\n  oddInt(3, -2, 1) ➞ false\n  oddInt(3.6, -2.2, 2) ➞ false\n  */\nconst oddOddEvenOddInt = (x, y, z) => {\n  return x % 2!== y % 2 === z % 2;\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if any of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  evenInt(5, 2, 7) ➞ false\n  evenInt(3, 2, 2) ➞ false\n  evenInt(3, -2, 1) ➞ false\n  evenInt(3.6, -2.2, 2) ➞ false\n  */\nconst evenOddOddEvenOddInt = (x, y, z) => {\n  return x % 2 === y % 2!== z % 2;\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if any of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  evenInt(5, 2, 7) ➞ false\n  evenInt(3, 2, 2) ➞ false\n  evenInt(3, -2, 1) ➞ false\n  evenInt(3.6, -2.2, 2) ➞ false\n  */\nconst oddOddOddOddEvenOddInt = (x, y, z) => {\n  return x % 2!== y % 2 === z % 2;\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if any of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  evenInt(5, 2, 7) ➞ false\n  evenInt(3, 2, 2) ➞ false\n  evenInt(3, -2, 1) ➞ false\n  evenInt(3.6, -2.2, 2) ➞ false\n  */\nconst evenOddOddOddOddEvenOddInt = (x, y, z) => {\n  return x % 2 === y % 2!== z % 2;\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if any of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  evenInt(5, 2, 7) ➞ false\n  evenInt(3, 2, 2) ➞ false\n  evenInt(3, -2, 1) ➞ false\n  evenInt(3.6, -2.2, 2) ➞ false\n  */\nconst oddOddOddOddOddOddEvenOddInt = (x, y, z) => {\n  return x % 2!== y % 2 === z % 2;\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if any of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  evenInt(5, 2, 7) ➞ false\n  evenInt(3, 2, 2) ➞ false\n  evenInt(3, -2, 1) ➞ false\n  evenInt(3.6, -2.2, 2) ➞ false\n  */\nconst evenOddOddOddOddOddOddEvenOddInt = (x, y, z) => {\n  return x % 2 === y % 2!== z % 2;\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if any of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  evenInt(5, 2, 7) ➞ false\n  evenInt(3, 2, 2) ➞ false\n  evenInt(3, -2, 1) ➞ ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "gc": "<|endoftext|>/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let newMessage = '';\n  let vowels = 'aeiouAEIOU';\n  let letters = 'abcdefghijklmnopqrstuvwxyz';\n  let vowelsIndex = letters.indexOf(vowels);\n  let lettersIndex = letters.indexOf(letters);\n  let vowelsIndex2 = letters.indexOf(vowels);\n  let lettersIndex2 = letters.indexOf(letters);\n  \n  newMessage = message;\n  \n  newMessage = newMessage.toLowerCase();\n  \n  newMessage = newMessage.replace(/([a-z])([aeiou])/g, '$1 $2');\n  \n  newMessage = newMessage.replace(vowels, vowelsIndex2);\n  \n  newMessage = newMessage.replace(letters, lettersIndex2);\n  \n  return newMessage;\n};\n\n/*\n  Write a function that takes a message, and decodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> decode('TGST')\n  'test'\n  >>> decode('tHKS KS C MGSSCGG')\n  'This is a message'\n  */\nconst decode = (message) => {\n  let newMessage = '';\n  let vowels = 'aeiouAEIOU';\n  let letters = 'abcdefghijklmnopqrstuvwxyz';\n  let vowelsIndex = letters.indexOf(vowels);\n  let lettersIndex = letters.indexOf(letters);\n  let vowelsIndex2 = letters.indexOf(vowels);\n  let lettersIndex2 = letters.indexOf(letters);\n  \n  newMessage = message;\n  \n  newMessage = newMessage.toLowerCase();\n  \n  newMessage = newMessage.replace(/([aeiou])([a-z])/g, '$1 $2');\n  \n  newMessage = newMessage.replace(vowels, vowelsIndex);\n  \n  newMessage = newMessage.replace(letters, lettersIndex);\n  \n  return newMessage;\n};\n\n/*\n  Write a function that takes a message, and decodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> decode('TGST')\n  'test'\n  >>> decode('tHKS KS C MGSSCGG')\n  'This is a message'\n  */\nconst decodeAll = (message) => {\n  let newMessage = '';\n  let vowels = 'aeiouAEIOU';\n  let letters = 'abcdefghijklmnopqrstuvwxyz';\n  let vowelsIndex = letters.indexOf(vowels);\n  let lettersIndex = letters.indexOf(letters);\n  let vowelsIndex2 = letters.indexOf(vowels);\n  let lettersIndex2 = letters.indexOf(letters);\n  \n  newMessage = message;\n  \n  newMessage = newMessage.toLowerCase();\n  \n  newMessage = newMessage.replace(/([aeiou])([a-z])/g, '$1 $2');\n  \n  newMessage = newMessage.replace(vowels, vowelsIndex2);\n  \n  newMessage = newMessage.replace(letters, lettersIndex2);\n  \n  return newMessage;\n};\n\n/*\n  Write a function that takes a message, and decodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> decodeAll('TGST')\n  'test'\n  >>> decodeAll('tHKS KS C MGSSCGG')\n  'This is a message'\n  */\nconst decodeAllAll = (message) => {\n  let newMessage = '';\n  let vowels = 'aeiouAEIOU';\n  let letters = 'abcdefghijklmnopqrstuvwxyz';\n  let vowelsIndex = letters.indexOf(vowels);\n  let lettersIndex = letters.indexOf(letters);\n  let vowelsIndex2 = letters.indexOf(vowels);\n  let lettersIndex2 = letters.indexOf(letters);\n  \n  newMessage = message;\n  \n  newMessage = newMessage.toLowerCase();\n  \n  newMessage = newMessage.replace(/([aeiou])([a-z])/g, '$1 $2');\n  \n  newMessage = newMessage.replace(vowels, vowelsIndex);\n  \n  newMessage = newMessage.replace(letters, lettersIndex);\n  \n  return newMessage;\n};\n\n/*\n  Write a function that takes a message, and decodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> decodeAllAll('TGST')\n  'test'\n  >>> decodeAllAll('tHKS KS C MGSSCGG')\n  'This is a message'\n  */\nconst decodeAllAllAll = (message) => {\n  let newMessage = '';\n  let vowels = 'aeiouAEIOU';\n  let letters = 'abcdefghijklmnopqrstuvwxyz';\n  let vowelsIndex = letters.indexOf(vowels);\n  let lettersIndex = letters.indexOf(letters);\n  let vowelsIndex2 = letters.indexOf(vowels);\n  let lettersIndex2 = letters.indexOf(letters);\n  \n  newMessage = message;\n  \n  newMessage = newMessage.toLowerCase();\n  \n  newMessage = newMessage.replace(/([aeiou])([a-z])/g, '$1 $2');\n  \n  newMessage = newMessage.replace(vowels, vowelsIndex2);\n  \n  newMessage = newMessage.replace(letters, lettersIndex2);\n  \n  return newMessage;\n};\n\n/*\n  Write a function that takes a message, and decodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> decodeAllAllAll('TGST')\n  'test'\n  >>> decodeAllAllAll('tHKS KS C MGSSCGG')\n  'This is a message'\n  */\nconst decodeAllAllAllAll = (message) => {\n  let newMessage = '';\n  let vowels = 'aeiouAEIOU';\n  let letters = 'abcdefghijklmnopqrstuvwxyz';\n  let vowelsIndex = letters.indexOf(vowels);\n  let lettersIndex = letters.indexOf(letters);\n  let vowelsIndex2 = letters.indexOf(vowels);\n  let lettersIndex2 = letters.indexOf(letters);\n  \n  newMessage = message;\n  \n  newMessage = newMessage.toLowerCase();\n  \n  newMessage = newMessage.replace(/([aeiou])([a-z])/g, '$1 $2');\n  \n  newMessage = newMessage.replace(vowels, vowelsIndex2);\n  \n  newMessage = newMessage.replace(letters, lettersIndex2);\n  \n  return newMessage;\n};\n\n/*\n  Write a function that takes a message, and decodes in such a \n  way that it swaps ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/94", "prompt": "/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst ksjkasddk = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "ksjkasddk", "gc": "<|endoftext|>/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst ksjkasddk = (lst) => {\n  let max = 0;\n  let sum = 0;\n  let i = 1;\n  let j = 1;\n  let k = 1;\n  let l = lst.length;\n  let sum1 = 0;\n  let sum2 = 0;\n  let sum3 = 0;\n  let sum4 = 0;\n  let sum5 = 0;\n  let sum6 = 0;\n  let sum7 = 0;\n  let sum8 = 0;\n  let sum9 = 0;\n  let sum10 = 0;\n  let sum11 = 0;\n  let sum12 = 0;\n  let sum13 = 0;\n  let sum14 = 0;\n  let sum15 = 0;\n  let sum16 = 0;\n  let sum17 = 0;\n  let sum18 = 0;\n  let sum19 = 0;\n  let sum20 = 0;\n  let sum21 = 0;\n  let sum22 = 0;\n  let sum23 = 0;\n  let sum24 = 0;\n  let sum25 = 0;\n  let sum26 = 0;\n  let sum27 = 0;\n  let sum28 = 0;\n  let sum29 = 0;\n  let sum30 = 0;\n  let sum31 = 0;\n  let sum32 = 0;\n  let sum33 = 0;\n  let sum34 = 0;\n  let sum35 = 0;\n  let sum36 = 0;\n  let sum37 = 0;\n  let sum38 = 0;\n  let sum39 = 0;\n  let sum40 = 0;\n  let sum41 = 0;\n  let sum42 = 0;\n  let sum43 = 0;\n  let sum44 = 0;\n  let sum45 = 0;\n  let sum46 = 0;\n  let sum47 = 0;\n  let sum48 = 0;\n  let sum49 = 0;\n  let sum50 = 0;\n  let sum51 = 0;\n  let sum52 = 0;\n  let sum53 = 0;\n  let sum54 = 0;\n  let sum55 = 0;\n  let sum56 = 0;\n  let sum57 = 0;\n  let sum58 = 0;\n  let sum59 = 0;\n  let sum60 = 0;\n  let sum61 = 0;\n  let sum62 = 0;\n  let sum63 = 0;\n  let sum64 = 0;\n  let sum65 = 0;\n  let sum66 = 0;\n  let sum67 = 0;\n  let sum68 = 0;\n  let sum69 = 0;\n  let sum70 = 0;\n  let sum71 = 0;\n  let sum72 = 0;\n  let sum73 = 0;\n  let sum74 = 0;\n  let sum75 = 0;\n  let sum76 = 0;\n  let sum77 = 0;\n  let sum78 = 0;\n  let sum79 = 0;\n  let sum80 = 0;\n  let sum81 = 0;\n  let sum82 = 0;\n  let sum83 = 0;\n  let sum84 = 0;\n  let sum85 = 0;\n  let sum86 = 0;\n  let sum87 = 0;\n  let sum88 = 0;\n  let sum89 = 0;\n  let sum90 = 0;\n  let sum91 = 0;\n  let sum92 = 0;\n  let sum93 = 0;\n  let sum94 = 0;\n  let sum95 = 0;\n  let sum96 = 0;\n  let sum97 = 0;\n  let sum98 = 0;\n  let sum99 = 0;\n  let sum100 = 0;\n  let sum101 = 0;\n  let sum102 = 0;\n  let sum103 = 0;\n  let sum104 = 0;\n  let sum105 = 0;\n  let sum106 = 0;\n  let sum107 = 0;\n  let sum108 = 0;\n  let sum109 = 0;\n  let sum110 = 0;\n  let sum111 = 0;\n  let sum112 = 0;\n  let sum113 = 0;\n  let sum114 = 0;\n  let sum115 = 0;\n  let sum116 = 0;\n  let sum117 = 0;\n  let sum118 = 0;\n  let sum119 = 0;\n  let sum120 = 0;\n  let sum121 = 0;\n  let sum122 = 0;\n  let sum123 = 0;\n  let sum124 = 0;\n  let sum125 = 0;\n  let sum126 = 0;\n  let sum127 = 0;\n  let sum128 = 0;\n  let sum129 = 0;\n  let sum130 = 0;\n  let sum131 = 0;\n  let sum132 = 0;\n  let sum133 = 0;\n  let sum134 = 0;\n  let sum135 = 0;\n  let sum136 = 0;\n  let sum137 = 0;\n  let sum138 = 0;\n  let sum139 = 0;\n  let sum140 = 0;\n  let sum141 = 0;\n  let sum142 = 0;\n  let sum143 = 0;\n  let sum144 = 0;\n  let sum145 = 0;\n  let sum146 = 0;\n  let sum147 = 0;\n  let sum148 = 0;\n  let sum149 = 0;\n  let sum150 = 0;\n  let sum151 = 0;\n  let sum152 = 0;\n  let sum153 = 0;\n  let sum154 = 0;\n  let sum155 = 0;\n  let sum156 = 0;\n  let sum157 = 0;\n  let sum158 = 0;\n  let sum159 = 0;\n  let sum160 = 0;\n  let sum161 = 0;\n  let sum162 = 0;\n  let sum163 = 0;\n  let sum164 = 0;\n  let sum165 = 0;\n  let sum166 = 0;\n  let sum167 = 0;\n  let sum168 = 0;\n  let sum169 = 0;\n  let sum170 = 0;\n  let sum171 = 0;\n  let sum172 = 0;\n  let sum173 = 0;\n  let sum174 = 0;\n  let sum175 = 0;\n  let sum176 = 0;\n  let sum177 = 0;\n  let sum178 = 0;\n  let sum179 = 0;\n  let sum180 = 0;\n  let sum181 = 0;\n  let sum182 = 0;\n  let sum183 = 0;\n  let sum184 = 0;\n  let sum185 = 0;\n  let sum186 = 0;\n  let sum187 = 0;\n  let sum188 = 0;\n  let sum189 = 0;\n  let sum190 = 0;\n  let sum191 = 0;\n  let sum192 = 0;\n  let sum193 = 0;\n  let sum194 = 0;\n  let sum195 = 0;\n  let sum196 = 0;\n  let sum197 = 0;\n  let sum198 = 0;\n  let sum199 = 0;\n  let sum200 = 0;\n  let sum201 = 0;\n  let sum202 = 0;\n  let sum203 = 0;\n  let sum204 = 0;\n  let sum205 = 0;\n  let sum206 = 0;\n  let sum207 = 0;\n  let sum208 = 0;\n  let sum209 = 0;\n  let sum210 = 0;\n  let sum211 = 0;\n  let sum212 = 0;\n  let sum213 = 0;\n  let sum214 = 0;\n  let sum215 = 0;\n  let sum216 = 0;\n  let sum217 = 0;\n  let sum218 = 0;\n  let sum219 = 0;\n  let sum220 = 0;\n  let sum221 = 0;\n  let sum222 = 0;\n  let sum223 = 0;\n  let sum224 = 0;\n  let sum225 = 0;\n  let sum226 = 0;\n  let sum227 = 0;\n  let sum228 = 0;\n  let sum229 = 0;\n  let sum230 = 0;\n  let sum231 = 0;\n  let sum232 = 0;\n  let sum233 = 0;\n  let sum234 = 0;\n  let sum235 = 0;\n  let sum236 = 0;\n  let sum237 = 0;\n  let sum238 = 0;\n  let sum239 = 0;\n  let sum240 = 0;\n  let sum241 = 0;\n  let sum242 = 0;\n  let sum243 = 0;\n  let sum244 = 0;\n  let sum245 = 0;\n  let sum246 = 0;\n  let sum247 = 0;\n  let sum248 = 0;\n  let sum249 = 0;\n  let sum250 = 0;\n  let sum251 = 0;\n  let sum252 = 0;\n  let sum253 = 0;\n  let sum254 = 0;\n  let sum255 = 0;\n  let sum256 = 0;\n  let sum257 = 0;\n  let sum258 = 0;\n  let sum259 = 0;\n  let sum260 = 0;\n  let sum261 = 0;\n  let sum262 = 0;\n  let sum263 = 0;\n  let sum264 = 0;\n  let sum265 = 0;\n  let sum266 = 0;\n  let sum267 = 0;\n  let sum268", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "gc": "<|endoftext|>/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let keys = Object.keys(dict);\n  let lowerCaseKeys = keys.filter(key => key.toLowerCase() === key);\n  let upperCaseKeys = keys.filter(key => key.toUpperCase() === key);\n  return lowerCaseKeys.length === keys.length && upperCaseKeys.length === keys.length;\n};\n\n/*\n  Given a string, return true if all characters are digits, else return false.\n  The function should return false is the given string is empty.\n  Examples:\n  checkStringDigits(\"123\") should return true.\n  checkStringDigits(\"123abc\") should return false.\n  checkStringDigits(\"123abc123\") should return false.\n  checkStringDigits(\"123abc123abc\") should return false.\n  checkStringDigits(\"123abc123abc123\") should return false.\n  checkStringDigits(\"123abc123abc123abc123\") should return false.\n  */\nconst checkStringDigits = (str) => {\n  let digits = str.match(/\\d/g);\n  return digits.length === str.length;\n};\n\n/*\n  Given a string, return true if all characters are letters, else return false.\n  The function should return false is the given string is empty.\n  Examples:\n  checkStringLetters(\"123\") should return true.\n  checkStringLetters(\"123abc\") should return false.\n  checkStringLetters(\"123abc123\") should return false.\n  checkStringLetters(\"123abc123abc\") should return false.\n  checkStringLetters(\"123abc123abc123\") should return false.\n  checkStringLetters(\"123abc123abc123abc\") should return false.\n  */\nconst checkStringLetters = (str) => {\n  let letters = str.match(/[a-zA-Z]/g);\n  return letters.length === str.length;\n};\n\n/*\n  Given a string, return true if all characters are uppercase letters, else return false.\n  The function should return false is the given string is empty.\n  Examples:\n  checkStringUpperCase(\"123\") should return true.\n  checkStringUpperCase(\"123abc\") should return false.\n  checkStringUpperCase(\"123abc123\") should return false.\n  checkStringUpperCase(\"123abc123abc\") should return false.\n  checkStringUpperCase(\"123abc123abc123\") should return false.\n  checkStringUpperCase(\"123abc123abc123abc\") should return false.\n  */\nconst checkStringUpperCase = (str) => {\n  let upperCaseLetters = str.match(/[A-Z]/g);\n  return upperCaseLetters.length === str.length;\n};\n\n/*\n  Given a string, return true if all characters are lowercase letters, else return false.\n  The function should return false is the given string is empty.\n  Examples:\n  checkStringLowerCase(\"123\") should return true.\n  checkStringLowerCase(\"123abc\") should return false.\n  checkStringLowerCase(\"123abc123\") should return false.\n  checkStringLowerCase(\"123abc123abc\") should return false.\n  checkStringLowerCase(\"123abc123abc123\") should return false.\n  checkStringLowerCase(\"123abc123abc123abc\") should return false.\n  */\nconst checkStringLowerCase = (str) => {\n  let lowerCaseLetters = str.match(/[a-z]/g);\n  return lowerCaseLetters.length === str.length;\n};\n\n/*\n  Given a string, return true if all characters are alphanumeric characters, else return false.\n  The function should return false is the given string is empty.\n  Examples:\n  checkStringAlphaNumeric(\"123\") should return true.\n  checkStringAlphaNumeric(\"123abc\") should return false.\n  checkStringAlphaNumeric(\"123abc123\") should return false.\n  checkStringAlphaNumeric(\"123abc123abc\") should return false.\n  checkStringAlphaNumeric(\"123abc123abc123\") should return false.\n  checkStringAlphaNumeric(\"123abc123abc123abc\") should return false.\n  */\nconst checkStringAlphaNumeric = (str) => {\n  let alphaNumericCharacters = str.match(/[a-zA-Z0-9]/g);\n  return alphaNumericCharacters.length === str.length;\n};\n\n/*\n  Given a string, return true if all characters are whitespace, else return false.\n  The function should return false is the given string is empty.\n  Examples:\n  checkStringWhitespace(\"123\") should return true.\n  checkStringWhitespace(\"123abc\") should return false.\n  checkStringWhitespace(\"123abc123\") should return false.\n  checkStringWhitespace(\"123abc123abc\") should return false.\n  checkStringWhitespace(\"123abc123abc123\") should return false.\n  checkStringWhitespace(\"123abc123abc123abc\") should return false.\n  */\nconst checkStringWhitespace = (str) => {\n  let whitespaceCharacters = str.match(/[\\s\\t]/g);\n  return whitespaceCharacters.length === str.length;\n};\n\n/*\n  Given a string, return true if all characters are punctuation, else return false.\n  The function should return false is the given string is empty.\n  Examples:\n  checkStringPunctuation(\"123\") should return true.\n  checkStringPunctuation(\"123abc\") should return false.\n  checkStringPunctuation(\"123abc123\") should return false.\n  checkStringPunctuation(\"123abc123abc\") should return false.\n  checkStringPunctuation(\"123abc123abc123\") should return false.\n  checkStringPunctuation(\"123abc123abc123abc\") should return false.\n  */\nconst checkStringPunctuation = (str) => {\n  let punctuation = str.match(/[!,.:;?]/g);\n  return punctuation.length === str.length;\n};\n\n/*\n  Given a string, return true if all characters are symbols except underscore, else return false.\n  The function should return false is the given string is empty.\n  Examples:\n  checkStringSymbols(\"123\") should return true.\n  checkStringSymbols(\"123abc\") should return false.\n  checkStringSymbols(\"123abc123\") should return false.\n  checkStringSymbols(\"123abc123abc\") should return false.\n  checkStringSymbols(\"123abc123abc123\") should return false.\n  checkStringSymbols(\"123abc123abc123abc\") should return false.\n  */\nconst checkStringSymbols = (str) => {\n  let symbols = str.match(/[^_]/g);\n  return symbols.length === str.length;\n};\n\n/*\n  Given a string, return true if all characters are symbols, else return false.\n  The function should return false is the given string is empty.\n  Examples:\n  checkStringSymbols(\"123\") should return true.\n  checkStringSymbols(\"123abc\") should return false.\n  checkStringSymbols(\"123abc123\") should return false.\n  checkStringSymbols(\"123abc123abc\") should return false.\n  checkStringSymbols(\"123abc123abc123\") should return false.\n  checkStringSymbols(\"123abc123abc123abc\") should return false.\n  */\nconst checkStringSymbols = (str) => {\n  let symbols = str.match(/[!,.:;?]/g);\n  return symbols.length === str.length;\n};\n\n/*\n  Given a string, return true if all character", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "gc": "<|endoftext|>/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  let primes = [];\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      primes.push(i);\n    }\n    i++;\n  }\n  return primes;\n};\n\n/*Implement a function that takes an integer and returns the largest prime factor of it.\n  for example:\n  largestPrimeFactor(5) => 3\n  largestPrimeFactor(11) => 5\n  largestPrimeFactor(0) => 0\n  largestPrimeFactor(20) => 1\n  largestPrimeFactor(18) => 2\n  */\nconst largestPrimeFactor = (n) => {\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return 0;\n};\n\n/*Implement a function that takes an integer and returns the smallest prime factor of it.\n  for example:\n  smallestPrimeFactor(5) => 2\n  smallestPrimeFactor(11) => 5\n  smallestPrimeFactor(0) => 0\n  smallestPrimeFactor(20) => 1\n  smallestPrimeFactor(18) => 3\n  */\nconst smallestPrimeFactor = (n) => {\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return 0;\n};\n\n/*Implement a function that takes an integer and returns the largest prime factor of it.\n  for example:\n  largestPrimeFactor(5) => 3\n  largestPrimeFactor(11) => 5\n  largestPrimeFactor(0) => 0\n  largestPrimeFactor(20) => 1\n  largestPrimeFactor(18) => 2\n  */\nconst largestPrimeFactor = (n) => {\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return 0;\n};\n\n/*Implement a function that takes an integer and returns the smallest prime factor of it.\n  for example:\n  smallestPrimeFactor(5) => 2\n  smallestPrimeFactor(11) => 5\n  smallestPrimeFactor(0) => 0\n  smallestPrimeFactor(20) => 1\n  smallestPrimeFactor(18) => 3\n  */\nconst smallestPrimeFactor = (n) => {\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return 0;\n};\n\n/*Implement a function that takes an integer and returns the largest prime factor of it.\n  for example:\n  largestPrimeFactor(5) => 3\n  largestPrimeFactor(11) => 5\n  largestPrimeFactor(0) => 0\n  largestPrimeFactor(20) => 1\n  largestPrimeFactor(18) => 2\n  */\nconst largestPrimeFactor = (n) => {\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return 0;\n};\n\n/*Implement a function that takes an integer and returns the smallest prime factor of it.\n  for example:\n  smallestPrimeFactor(5) => 2\n  smallestPrimeFactor(11) => 5\n  smallestPrimeFactor(0) => 0\n  smallestPrimeFactor(20) => 1\n  smallestPrimeFactor(18) => 3\n  */\nconst smallestPrimeFactor = (n) => {\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return 0;\n};\n\n/*Implement a function that takes an integer and returns the largest prime factor of it.\n  for example:\n  largestPrimeFactor(5) => 3\n  largestPrimeFactor(11) => 5\n  largestPrimeFactor(0) => 0\n  largestPrimeFactor(20) => 1\n  largestPrimeFactor(18) => 2\n  */\nconst largestPrimeFactor = (n) => {\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return 0;\n};\n\n/*Implement a function that takes an integer and returns the smallest prime factor of it.\n  for example:\n  smallestPrimeFactor(5) => 2\n  smallestPrimeFactor(11) => 5\n  smallestPrimeFactor(0) => 0\n  smallestPrimeFactor(20) => 1\n  smallestPrimeFactor(18) => 3\n  */\nconst smallestPrimeFactor = (n) => {\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return 0;\n};\n\n/*Implement a function that takes an integer and returns the largest prime factor of it.\n  for example:\n  largestPrimeFactor(5) => 3\n  largestPrimeFactor(11) => 5\n  largestPrimeFactor(0) => 0\n  largestPrimeFactor(20) => 1\n  largestPrimeFactor(18) => 2\n  */\nconst largestPrimeFactor = (n) => {\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return 0;\n};\n\n/*Implement a function that takes an integer and returns the smallest prime factor of it.\n  for example:\n  smallestPrimeFactor(5) => 2\n  smallestPrimeFactor(11) => 5\n  smallestPrimeFactor(0) => 0\n  smallestPrimeFactor(20) => 1\n  smallestPrimeFactor(18) => 3\n  */\nconst smallestPrimeFactor = (n) => {\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return 0;\n};\n\n/*Implement a function that takes an integer and returns the largest prime factor of it.\n  for example:\n  largestPrimeFactor(5) => 3\n  largestPrimeFactor(11) => 5\n  largestPrimeFactor(0) => 0\n  largestPrimeFactor(20) => 1\n  largestPrimeFactor(18) => 2\n  */\nconst largestPrimeFactor = (n) => {\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return 0;\n};\n\n/*Implement a function that takes an integer and returns the smallest prime factor of it.\n  for example:\n  smallestPrimeFactor(5) => 2\n  smallestPrimeFactor(11) => 5\n  smallestPrimeFactor(0) => 0\n  smallestPrimeFactor(20) => 1\n  smallestPrimeFactor(18) => 3\n  */\nconst smallestPrimeFactor = (n) => {\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return 0;\n};\n\n/*Implement a function that takes an integer and returns the largest prime factor of it.\n  for example:\n  largestPrimeFactor", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "gc": "<|endoftext|>/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  let product = 1;\n  while (b) {\n    product = product * b;\n    b = a % b;\n    a = Math.floor(a / b);\n  }\n  return product;\n};\n\n/*Complete the function that takes two integers and returns \n  the sum of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  sum(148, 412) should return 164.\n  sum(19, 28) should return 72.\n  sum(2020, 1851) should return 0.\n  sum(14,-15) should return 20.\n  */\nconst sum = (a, b) => {\n  let sum = 0;\n  while (b) {\n    sum += b;\n    b = a % b;\n    a = Math.floor(a / b);\n  }\n  return sum;\n};\n\n/*Complete the function that takes two integers and returns \n  the difference between their unit digits.\n  Assume the input is always valid.\n  Examples:\n  difference(148, 412) should return -14.\n  difference(19, 28) should return -28.\n  difference(2020, 1851) should return 0.\n  difference(14,-15) should return 20.\n  */\nconst difference = (a, b) => {\n  let difference = 0;\n  while (b) {\n    difference = difference + b;\n    b = a % b;\n    a = Math.floor(a / b);\n  }\n  return difference;\n};\n\n/*Complete the function that takes two integers and returns \n  the absolute value of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  abs(148, 412) should return 148.\n  abs(19, 28) should return 28.\n  abs(2020, 1851) should return 0.\n  abs(14,-15) should return 15.\n  */\nconst abs = (a) => {\n  let abs = 0;\n  while (a) {\n    abs = abs + a;\n    a = Math.floor(a / 10);\n  }\n  return abs;\n};\n\n/*Complete the function that takes two integers and returns \n  the square root of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  sqrt(148, 412) should return 1.414213562.\n  sqrt(19, 28) should return 1.414213562.\n  sqrt(2020, 1851) should return 0.\n  sqrt(14,-15) should return 1.414213562.\n  */\nconst sqrt = (a) => {\n  let sqrt = 0;\n  while (a) {\n    sqrt = sqrt + a * a;\n    a = Math.floor(a / 10);\n  }\n  return sqrt;\n};\n\n/*Complete the function that takes two integers and returns \n  the inverse of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  inverse(148, 412) should return 148.\n  inverse(19, 28) should return 19.\n  inverse(2020, 1851) should return 0.\n  inverse(14,-15) should return -15.\n  */\nconst inverse = (a) => {\n  let inverse = 0;\n  while (a) {\n    inverse = inverse / a;\n    a = Math.floor(a / 10);\n  }\n  return inverse;\n};\n\n/*Complete the function that takes two integers and returns \n  the modulo of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  modulo(148, 412) should return 148.\n  modulo(19, 28) should return 19.\n  modulo(2020, 1851) should return 0.\n  modulo(14,-15) should return -15.\n  */\nconst modulo = (a, b) => {\n  let modulo = 0;\n  while (b) {\n    modulo = modulo + b;\n    b = a % b;\n    a = Math.floor(a / b);\n  }\n  return modulo;\n};\n\n/*Complete the function that takes two integers and returns \n  the remainder of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  remainder(148, 412) should return 148.\n  remainder(19, 28) should return 19.\n  remainder(2020, 1851) should return 0.\n  remainder(14,-15) should return -15.\n  */\nconst remainder = (a, b) => {\n  let remainder = 0;\n  while (b) {\n    remainder = remainder + b;\n    b = a % b;\n    a = Math.floor(a / b);\n  }\n  return remainder;\n};\n\n/*Complete the function that takes two integers and returns \n  the absolute value of the remainder of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  remainder2(148, 412) should return 148.\n  remainder2(19, 28) should return 19.\n  remainder2(2020, 1851) should return 0.\n  remainder2(14,-15) should return -15.\n  */\nconst remainder2 = (a, b) => {\n  let remainder = 0;\n  while (b) {\n    remainder = remainder + b;\n    b = a % b;\n    a = Math.floor(a / b);\n  }\n  return remainder;\n};\n\n/*Complete the function that takes two integers and returns \n  the absolute value of the absolute value of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  absolute(148, 412) should return 148.\n  absolute(19, 28) should return 19.\n  absolute(2020, 1851) should return 0.\n  absolute(14,-15) should return -15.\n  */\nconst absolute = (a) => {\n  let absolute = 0;\n  while (a) {\n    absolute = absolute + a;\n    a = Math.floor(a / 10);\n  }\n  return absolute;\n};\n\n/*Complete the function that takes two integers and returns \n  the absolute value of the square root of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  absolute2(148, 412) should return 148.\n  absolute2(19, 28) should return 19.\n  absolute2(2020, 1851) should return 0.\n  absolute2(14,-15) should return -15.\n  */\nconst absolute2 = (a) => {\n  let absolute = 0;\n  while (a) {\n    absolute = absolute + a * a;\n    a = Math.floor(a / 10);\n  }\n  return absolute;\n};\n\n/*Complete the function that takes two integers and returns \n  the absolute value of the inverse of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  absolute2(148, 412) should return 148.\n  absolute2(19, 28) should return 19.\n  absolute2(2020, 1851) should return 0.\n  absolute2(14,-15) should return -15.\n  */\nconst absolute3 = (a) => {\n  let absolute = 0;\n  while (a) {\n    absolute = absolute + a * a;\n    a = Math.floor(a / 10);\n  }\n  return absolute;\n};\n\n/*Complete the function that takes two integers and returns \n  the absolute value of the modulo of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  absolute3(148, 412) should return 148.\n  absolute3(19, 28) should return 19.\n  absolute3(2020, 1851) should return 0.\n  absolute3(14,-15) should return -15.\n  */\nconst absolute4 = (a) => {\n  let absolute = 0;\n  while (a) {\n    absolute = absolute + a * a;\n    a = Math.floor(a / 10);\n  }\n  return absolute;\n};\n\n/*Complete the function that takes two integers and returns \n  the absolute value of the remainder of the absolute ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "gc": "<|endoftext|>/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = s.length;\n  \n  for(let i = 0; i < l; i++){\n    if(s[i] >= 'a' && s[i] <= 'z'){\n      count++;\n    }\n  }\n  \n  for(let j = 0; j < l; j++){\n    if(s[j] >= 'A' && s[j] <= 'Z'){\n      count++;\n    }\n  }\n  \n  for(let k = 0; k < l; k++){\n    if(s[k] >= 'a' && s[k] <= 'z'){\n      count++;\n    }\n  }\n  \n  for(let l = 0; l < l; l++){\n    if(s[l] >= 'A' && s[l] <= 'Z'){\n      count++;\n    }\n  }\n  \n  return count;\n}\n\n/*\n  Given a string s, count the number of lowercase vowels in even indices.\n  \n  For example:\n  countLower('aBCdEf') returns 1\n  countLower('abcdefg') returns 0\n  countLower('dBBE') returns 0\n  */\nconst countLower = (s) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = s.length;\n  \n  for(let i = 0; i < l; i++){\n    if(s[i] >= 'a' && s[i] <= 'z'){\n      count++;\n    }\n  }\n  \n  for(let j = 0; j < l; j++){\n    if(s[j] >= 'a' && s[j] <= 'z'){\n      count++;\n    }\n  }\n  \n  for(let k = 0; k < l; k++){\n    if(s[k] >= 'A' && s[k] <= 'Z'){\n      count++;\n    }\n  }\n  \n  for(let l = 0; l < l; l++){\n    if(s[l] >= 'a' && s[l] <= 'z'){\n      count++;\n    }\n  }\n  \n  return count;\n}\n\n/*\n  Given a string s, count the number of vowels in even indices.\n  \n  For example:\n  countVowel('aBCdEf') returns 1\n  countVowel('abcdefg') returns 0\n  countVowel('dBBE') returns 0\n  */\nconst countVowel = (s) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = s.length;\n  \n  for(let i = 0; i < l; i++){\n    if(s[i] >= 'a' && s[i] <= 'z'){\n      count++;\n    }\n  }\n  \n  for(let j = 0; j < l; j++){\n    if(s[j] >= 'a' && s[j] <= 'z'){\n      count++;\n    }\n  }\n  \n  for(let k = 0; k < l; k++){\n    if(s[k] >= 'A' && s[k] <= 'Z'){\n      count++;\n    }\n  }\n  \n  for(let l = 0; l < l; l++){\n    if(s[l] >= 'a' && s[l] <= 'z'){\n      count++;\n    }\n  }\n  \n  return count;\n}\n\n/*\n  Given a string s, count the number of spaces in even indices.\n  \n  For example:\n  countSpace('aBCdEf') returns 1\n  countSpace('abcdefg') returns 0\n  countSpace('dBBE') returns 0\n  */\nconst countSpace = (s) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = s.length;\n  \n  for(let i = 0; i < l; i++){\n    if(s[i] >= 'a' && s[i] <= 'z'){\n      count++;\n    }\n  }\n  \n  for(let j = 0; j < l; j++){\n    if(s[j] >= 'a' && s[j] <= 'z'){\n      count++;\n    }\n  }\n  \n  for(let k = 0; k < l; k++){\n    if(s[k] >= 'A' && s[k] <= 'Z'){\n      count++;\n    }\n  }\n  \n  for(let l = 0; l < l; l++){\n    if(s[l] >= 'a' && s[l] <= 'z'){\n      count++;\n    }\n  }\n  \n  return count;\n}\n\n/*\n  Given a string s, count the number of numbers in even indices.\n  \n  For example:\n  countNumber('aBCdEf') returns 1\n  countNumber('abcdefg') returns 0\n  countNumber('dBBE') returns 0\n  */\nconst countNumber = (s) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = s.length;\n  \n  for(let i = 0; i < l; i++){\n    if(s[i] >= '0' && s[i] <= '9'){\n      count++;\n    }\n  }\n  \n  for(let j = 0; j < l; j++){\n    if(s[j] >= '0' && s[j] <= '9'){\n      count++;\n    }\n  }\n  \n  for(let k = 0; k < l; k++){\n    if(s[k] >= '0' && s[k] <= '9'){\n      count++;\n    }\n  }\n  \n  for(let l = 0; l < l; l++){\n    if(s[l] >= '0' && s[l] <= '9'){\n      count++;\n    }\n  }\n  \n  return count;\n}\n\n/*\n  Given a string s, count the number of letters in even indices.\n  \n  For example:\n  countLetter('aBCdEf') returns 1\n  countLetter('abcdefg') returns 0\n  countLetter('dBBE') returns 0\n  */\nconst countLetter = (s) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = s.length;\n  \n  for(let i = 0; i < l; i++){\n    if(s[i] >= 'a' && s[i] <= 'z'){\n      count++;\n    }\n  }\n  \n  for(let j = 0; j < l; j++){\n    if(s[j] >= 'a' && s[j] <= 'z'){\n      count++;\n    }\n  }\n  \n  for(let k = 0; k < l; k++){\n    if(s[k] >= 'A' && s[k] <= 'Z'){\n      count++;\n    }\n  }\n  \n  for(let l = 0; l < l; l++){\n    if(s[l] >= 'a' && s[l] <= 'z'){\n      count++;\n    }\n  }\n  \n  return count;\n}\n\n/*\n  Given a string s, count the number of digits in even indices.\n  \n  For example:\n  countDigit('aBCdEf') returns 1\n  countDigit('abcdefg') returns 0\n  countDigit('dBBE') returns 0\n  */\nconst countDigit = (s) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = s.length;\n  \n  for(let i = 0; i < l; i++){\n    if(s[i] >= '0' && s[i] <= '9'){\n      count++;\n    }\n  }\n  \n  for(let j = 0; j < l; j++){\n    if(s[j] >= '0' && s[j] <= '9'){\n      count++;\n    }\n  }\n  \n  for(let k = 0; k < l; k++){\n    if(s[k] >= '", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/99", "prompt": "/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closestInetger(\"10\")\n  10\n  >>> closestInetger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInetger(\"14.5\") should\n  return 15 and closestInetger(\"-14.5\") should return -15.\n  */\nconst closestInetger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInetger", "gc": "<|endoftext|>/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closestInetger(\"10\")\n  10\n  >>> closestInetger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInetger(\"14.5\") should\n  return 15 and closestInetger(\"-14.5\") should return -15.\n  */\nconst closestInetger = (value) => {\n  const isNumber = isNumeric(value)\n  const isPositive = isNumber(value) && value >= 0\n  const isNegative = isNumber(value) && value < 0\n  const isZero = isNumber(value) && value === 0\n  const isNegativeZero = isNumber(value) && value >= 0 && value < 0\n  const isNegativeZeroOrZero = isNegativeZero || isZero\n  const isPositiveZeroOrZero = isPositiveZero || isZero\n  const isNegativeZeroOrNegativeZero = isNegativeZeroOrZero || isNegativeZero\n  const isPositiveZeroOrNegativeZero = isPositiveZeroOrZero || isNegativeZero\n  const isNegativeZeroOrPositiveZero = isNegativeZeroOrZero || isPositiveZero\n  const isPositiveZeroOrPositiveZero = isPositiveZeroOrZero || isPositiveZero\n  const isNegativeZeroOrNegativeZeroOrZero = isNegativeZeroOrNegativeZero || isNegativeZero\n  const isPositiveZeroOrNegativeZeroOrZero = isPositiveZeroOrNegativeZero || isPositiveZero\n  const isNegativeZeroOrPositiveZeroOrZero = isNegativeZeroOrPositiveZero || isPositiveZero\n  const isPositiveZeroOrPositiveZeroOrZero = isPositiveZeroOrPositiveZero || isPositiveZero\n  const isNegativeZeroOrNegativeZeroOrNegativeZero = isNegativeZeroOrNegativeZeroOrZero || isNegativeZero\n  const isPositiveZeroOrNegativeZeroOrNegativeZero = isPositiveZeroOrNegativeZeroOrZero || isPositiveZero\n  const isNegativeZeroOrPositiveZeroOrNegativeZero = isNegativeZeroOrPositiveZeroOrZero || isPositiveZero\n  const isPositiveZeroOrPositiveZeroOrNegativeZero = isPositiveZeroOrPositiveZeroOrZero || isPositiveZero\n  const isNegativeZeroOrNegativeZeroOrPositiveZeroOrZero = isNegativeZeroOrNegativeZeroOrZero || isPositiveZero\n  const isPositiveZeroOrNegativeZeroOrPositiveZeroOrZero = isPositiveZeroOrNegativeZeroOrZero || isPositiveZero\n  const isNegativeZeroOrPositiveZeroOrPositiveZeroOrZero = isNegativeZeroOrPositiveZeroOrZero || isPositiveZero\n  const isPositiveZeroOrPositiveZeroOrPositiveZeroOrZero = isPositiveZeroOrPositiveZeroOrZero || isPositiveZero\n  const isNegativeZeroOrNegativeZeroOrPositiveZeroOrZero = isNegativeZeroOrNegativeZeroOrZero || isPositiveZero\n  const isPositiveZeroOrNegativeZeroOrPositiveZeroOrZero = isPositiveZeroOrNegativeZeroOrZero || isPositiveZero\n  const isNegativeZeroOrPositiveZeroOrPositiveZeroOrZero = isNegativeZeroOrPositiveZeroOrZero || isPositiveZero\n  const isPositiveZeroOrPositiveZeroOrPositiveZeroOrZero = isPositiveZeroOrPositiveZeroOrZero || isPositiveZero\n  const isNegativeZeroOrNegativeZeroOrPositiveZeroOrZero = isNegativeZeroOrNegativeZeroOrZero || isPositiveZero\n  const isPositiveZeroOrPositiveZeroOrPositiveZeroOrZero = isPositiveZeroOrPositiveZeroOrZero || isPositiveZero\n  const isNegativeZeroOrNegativeZeroOrPositiveZeroOrZero = isNegativeZeroOrNegativeZeroOrZero || isPositiveZero\n  const isPositiveZeroOrPositiveZeroOrPositiveZeroOrZero = isPositiveZeroOrPositiveZeroOrZero || isPositiveZero\n  const isNegativeZeroOrNegativeZeroOrPositiveZeroOrZero = isNegativeZeroOrNegativeZeroOrZero || isPositiveZero\n  const isPositiveZeroOrPositiveZeroOrPositiveZeroOrZero = isPositiveZeroOrPositiveZeroOrZero || isPositiveZero\n  const isNegativeZeroOrNegativeZeroOrPositiveZeroOrZero = isNegativeZeroOrNegativeZeroOrZero || isPositiveZero\n  const isPositiveZeroOrPositiveZeroOrPositiveZeroOrZero = isPositiveZeroOrPositiveZeroOrZero || isPositiveZero\n  const isNegativeZeroOrNegativeZeroOrPositiveZeroOrZero = isNegativeZeroOrNegativeZeroOrZero || isPositiveZero\n  const isPositiveZeroOrPositiveZeroOrPositiveZeroOrZero = isPositiveZeroOrPositiveZeroOrZero || isPositiveZero\n  const isNegativeZeroOrPositiveZeroOrPositiveZeroOrZero = isNegativeZeroOrPositiveZeroOrZero || isPositiveZero\n  const isPositiveZeroOrPositiveZeroOrPositiveZeroOrZero = isPositiveZeroOrPositiveZeroOrZero || isPositiveZero\n  const isNegativeZeroOrNegativeZeroOrPositiveZeroOrZero = isNegativeZeroOrNegativeZeroOrZero || isPositiveZero\n  const isPositiveZeroOrPositiveZeroOrPositiveZeroOrZero = isPositiveZeroOrPositiveZeroOrZero || isPositiveZero\n  const isNegativeZeroOrNegativeZeroOrPositiveZeroOrZero = isNegativeZeroOrNegativeZeroOrZero || isPositiveZero\n  const isPositiveZeroOrPositiveZeroOrPositiveZeroOrZero = isPositiveZeroOrPositiveZeroOrZero || isPositiveZero\n  const isNegativeZeroOrNegativeZeroOrPositiveZeroOrZero = isNegativeZeroOrNegativeZeroOrZero || isPositiveZero\n  const isPositiveZeroOrPositiveZeroOrPositiveZeroOrZero = isPositiveZeroOrPositiveZeroOrZero || isPositiveZero\n  const isNegativeZeroOrNegativeZeroOrPositiveZeroOrZero = isNegativeZeroOrNegativeZeroOrZero || isPositiveZero\n  const isPositiveZeroOrPositiveZeroOrPositiveZeroOrZero = isPositiveZeroOrPositiveZeroOrZero || isPositiveZero\n  const isNegativeZeroOrNegativeZeroOrPositiveZeroOrZero = isNegativeZeroOrNegativeZeroOrZero || isPositiveZero\n  const isPositiveZeroOrPositiveZeroOrPositiveZeroOrZero = isPositiveZeroOrPositiveZeroOrZero || isPositiveZero\n  const isNegativeZeroOrNegativeZeroOrPositiveZeroOrZero = isNegativeZeroOrNegativeZeroOrZero || isPositiveZero\n  const isPositiveZeroOrPositiveZeroOrPositiveZeroOrZero = isPositiveZeroOrPositiveZeroOrZero || isPositiveZero\n  const isNegativeZeroOrNegativeZeroOrPositiveZeroOrZero = isNegativeZeroOrNegativeZeroOrZero || isPositiveZero\n  const isPositiveZeroOrPositiveZeroOrPositiveZeroOrZero = isPositiveZeroOrPositiveZeroOrZero || isPositiveZero\n  const isNegativeZeroOrNegativeZeroOrPositiveZeroOrZero = isNegativeZeroOrNegativeZeroOrZero || isPositiveZero\n  const isPositiveZeroOrPositiveZeroOrPositiveZeroOrZero = isPositiveZeroOrPositiveZeroOrZero || isPositiveZero\n  const isNegativeZeroOrNegativeZeroOrPositiveZeroOrZero = isNegativeZeroOrNegativeZeroOrZero || isPositiveZero\n  const isPositiveZeroOrPositiveZeroOrPositiveZeroOrZero = isPositiveZeroOrPositiveZeroOrZero || isPositiveZero\n  const isNegativeZeroOrNegativeZeroOrPositiveZeroOrZero = isNegativeZeroOrNegativeZeroOrZero || isPositiveZero\n  const isPositiveZeroOrPositiveZeroOrPositiveZeroOrZero = isPositiveZeroOrPositiveZeroOrZero || isPositiveZero\n  const isNegativeZeroOrNegativeZeroOrPositiveZeroOrZero = isNegativeZeroOrNegativeZeroOrZero ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
