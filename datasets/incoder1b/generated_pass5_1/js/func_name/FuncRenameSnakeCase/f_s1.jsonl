{"task_id": "JavaScript/0", "prompt": "/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst has_close_elements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "has_close_elements", "gc": "<|endoftext|>/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst has_close_elements = (numbers, threshold) => {\n  const n = numbers.length;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;"}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separate_paren_groups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separate_paren_groups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separate_paren_groups", "gc": "<|endoftext|>/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separate_paren_groups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separate_paren_groups = (paren_string) => {\n  const paren_groups = paren_string.match(/\\(([^)]+)\\)/).map((group) => {\n    const [, paren_str,...inner_paren_strs] = group.match(/\\(([^)]+)\\)/).slice(1);\n    return [paren_str,...inner_paren_strs];\n  });\n  return paren_groups;\n};\n\n/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separate_paren_groups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separate_paren_groups_nested = (paren_string) => {\n  const paren_groups = paren_string.match(/\\(([^)]+)\\)/).map((group) => {\n    const [, paren_str,...inner_paren_strs] = group.match(/\\(([^)]+)\\)/).slice(1);\n    return [inner_paren_strs];\n  });\n  return paren_groups;\n};\n\n/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separate_paren_groups_nested('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separate_paren_groups_nested_nested = (paren_string) => {\n  const paren_groups = paren_string.match(/\\(([^)]+)\\)/).map((group) => {\n    const [, paren_str,...inner_paren_strs] = group.match(/\\(([^)]+)\\)/).slice(1);\n    return [inner_paren_strs];\n  });\n  return paren_groups;\n};\n\n/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separate_paren_groups_nested_nested('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separate_paren_groups_nested_nested_nested = (paren_string) => {\n  const paren_groups = paren_string.match(/\\(([^)]+)\\)/).map((group) => {\n    const [, paren_str,...inner_paren_strs] = group.match(/\\(([^)]+)\\)/).slice(1);\n    return [inner_paren_strs];\n  });\n  return paren_groups;\n};\n\n/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separate_paren_groups_nested_nested_nested('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separate_paren_groups_nested_nested_nested_nested = (paren_string) => {\n  const paren_groups = paren_string.match(/\\(([^)]+)\\)/).map((group) => {\n    const [, paren_str,...inner_paren_strs] = group.match(/\\(([^)]+)\\)/).slice(1);\n    return [inner_paren_strs];\n  });\n  return paren_groups;\n};\n\n/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separate_paren_groups_nested_nested_nested_nested('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separate_paren_groups_nested_nested_nested_nested_nested = (paren_string) => {\n  const paren_groups = paren_string.match(/\\(([^)]+)\\)/).map((group) => {\n    const [, paren_str,...inner_paren_strs] = group.match(/\\(([^)]+)\\)/).slice(1);\n    return [inner_paren_strs];\n  });\n  return paren_groups;\n};\n\n/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separate_paren_groups_nested_nested_nested_nested_nested('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separate_paren_groups_nested_nested_nested_nested_nested_nested = (paren_string) => {\n  const paren_groups = paren_string.match(/\\(([^)]+)\\)/).map((group) => {\n    const [, paren_str,...inner_paren_strs] = group.match(/\\(([^)]+)\\)/).slice(1);\n    return [inner_paren_strs];\n  });\n  return paren_groups;\n};\n\n/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separate_paren_groups_nested_nested_nested_nested_nested_nested('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separate_paren_groups_nested_nested_nested_nested_nested_nested_nested = (paren_string) => {\n  const paren_groups = paren_string.match(/\\(([^)]+)\\)/).map((group) => {\n    const [, paren_str,...inner_paren_strs] = group.match(/\\(([^)]+)\\)/).slice(1);\n    return [inner_paren_strs];\n  });\n  return paren_groups;\n};\n\n/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separate_paren_groups_nested_nested_nested_nested_nested_nested('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separate_paren_groups_nested_nested_nested_nested_nested_nested_nested = (paren_string) => {\n  const paren_groups = paren_string.match(/\\(([^)]+)\\)/).map((group) => {\n    const [, paren_str,...inner_paren_strs] = group.match(/\\(([^)]+)\\)/).slice(1);\n    return [inner_paren_strs];\n  });\n  return "}
{"task_id": "JavaScript/2", "prompt": "/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncate_number(3.5)\n  0.5\n  */\nconst truncate_number = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncate_number", "gc": "<|endoftext|>/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncate_number(3.5)\n  0.5\n  */\nconst truncate_number = (number) => {\n  let decimals = Math.floor(Math.log10(number));\n  let decimal = number % 1;\n  let remainder = number - decimals;\n  let integer_part = remainder / Math.pow(10, decimals);\n  let decimal_part = remainder % Math.pow(10, decimals);\n  return { integer_part, decimal_part };\n};\n\n/**\n  Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncate_number(3.5)\n  3\n  */\nconst truncate_number_to_int = (number) => {\n  let decimals = Math.floor(Math.log10(number));\n  let decimal = number % 1;\n  let remainder = number - decimals;\n  let integer_part = remainder / Math.pow(10, decimals);\n  let decimal_part = remainder % Math.pow(10, decimals);\n  return { integer_part, decimal_part };\n};\n\n/**\n  Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncate_number_to_int(3.5)\n  3.5\n  */\nconst truncate_number_to_decimal = (number) => {\n  let decimals = Math.floor(Math.log10(number));\n  let decimal = number % 1;\n  let remainder = number - decimals;\n  let integer_part = remainder / Math.pow(10, decimals);\n  let decimal_part = remainder % Math.pow(10, decimals);\n  return { integer_part, decimal_part };\n};\n\n/**\n  Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part and the decimal part of the number.\n  >>> truncate_number_to_int(3.5)\n  (3,)\n  */\nconst truncate_number_to_intAndDecimal = (number) => {\n  let decimals = Math.floor(Math.log10(number));\n  let decimal = number % 1;\n  let remainder = number - decimals;\n  let integer_part = remainder / Math.pow(10, decimals);\n  let decimal_part = remainder % Math.pow(10, decimals);\n  return { integer_part, decimal_part };\n};\n\n/**\n  Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part and the decimal part of the number.\n  >>> truncate_number_to_decimal(3.5)\n  (3,)\n  */\nconst truncate_number_to_decimalAndInt = (number) => {\n  let decimals = Math.floor(Math.log10(number));\n  let decimal = number % 1;\n  let remainder = number - decimals;\n  let integer_part = remainder / Math.pow(10, decimals);\n  let decimal_part = remainder % Math.pow(10, decimals);\n  return { integer_part, decimal_part };\n};\n\n/**\n  Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part and the decimal part of the number.\n  >>> truncate_number_to_intAndDecimal(3.5)\n  (3,)\n  */\nconst truncate_number_to_intAndDecimalAndInt = (number) => {\n  let decimals = Math.floor(Math.log10(number));\n  let decimal = number % 1;\n  let remainder = number - decimals;\n  let integer_part = remainder / Math.pow(10, decimals);\n  let decimal_part = remainder % Math.pow(10, decimals);\n  return { integer_part, decimal_part };\n};\n\n/**\n  Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part and the decimal part of the number.\n  >>> truncate_number_to_intAndDecimalAndInt(3.5)\n  (3,)\n  */\nconst truncate_number_to_intAndDecimalAndDecimal = (number) => {\n  let decimals = Math.floor(Math.log10(number));\n  let decimal = number % 1;\n  let remainder = number - decimals;\n  let integer_part = remainder / Math.pow(10, decimals);\n  let decimal_part = remainder % Math.pow(10, decimals);\n  return { integer_part, decimal_part };\n};\n\n/**\n  Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part and the decimal part of the number.\n  >>> truncate_number_to_intAndDecimalAndDecimalAndInt(3.5)\n  (3,)\n  */\nconst truncate_number_to_intAndDecimalAndDecimalAndInt = (number) => {\n  let decimals = Math.floor(Math.log10(number));\n  let decimal = number % 1;\n  let remainder = number - decimals;\n  let integer_part = remainder / Math.pow(10, decimals);\n  let decimal_part = remainder % Math.pow(10, decimals);\n  return { integer_part, decimal_part };\n};\n\n/**\n  Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part and the decimal part of the number.\n  >>> truncate_number_to_intAndDecimalAndDecimalAndDecimalAndDecimalAndInt\n  (3,)\n  */\nconst truncate_number_to_intAndDecimalAndDecimalAndDecimalAndDecimal = (number) => {\n  let decimals = Math.floor(Math.log10(number));\n  let decimal = number % 1;\n  let remainder = number - decimals;\n  let integer_part = remainder / Math.pow(10, decimals);\n  let decimal_part = remainder % Math.pow(10, decimals);\n  return { integer_part, decimal_part };\n};\n\n/**\n  Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part and the decimal part of the number.\n  >>> truncate_number_to_intAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAnd"}
{"task_id": "JavaScript/3", "prompt": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> below_zero([1, 2, 3])\n  false\n  >>> below_zero([1, 2, -4, 5])\n  true\n  */\nconst below_zero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "below_zero", "gc": "<|endoftext|>/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> below_zero([1, 2, 3])\n  false\n  >>> below_zero([1, 2, -4, 5])\n  true\n  */\nconst below_zero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n  }\n  return balance < 0;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account falls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> below_zero([-4, -5, -6, -7, -8, -9, 10])\n  false\n  >>> below_zero([-4, -5, -6, -7, -8, -9, 10])\n  true\n  */\nconst below_zero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n  }\n  return balance > 0;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account falls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> below_zero([-4, -5, -6, -7, -8, -9, 10])\n  false\n  >>> below_zero([-4, -5, -6, -7, -8, -9, 10])\n  true\n  */\nconst below_zero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n  }\n  return balance > 0 && balance < -10;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account falls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> below_zero([-4, -5, -6, -7, -8, -9, 10])\n  false\n  >>> below_zero([-4, -5, -6, -7, -8, -9, 10])\n  true\n  */\nconst below_zero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n  }\n  return balance > 0 && balance < -10;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account falls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> below_zero([-4, -5, -6, -7, -8, -9, 10])\n  false\n  >>> below_zero([-4, -5, -6, -7, -8, -9, 10])\n  true\n  */\nconst below_zero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n  }\n  return balance > 0 && balance < -10;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account falls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> below_zero([-4, -5, -6, -7, -8, -9, 10])\n  false\n  >>> below_zero([-4, -5, -6, -7, -8, -9, 10])\n  true\n  */\nconst below_zero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n  }\n  return balance > 0 && balance < -10;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account falls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> below_zero([-4, -5, -6, -7, -8, -9, 10])\n  false\n  >>> below_zero([-4, -5, -6, -7, -8, -9, 10])\n  true\n  */\nconst below_zero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n  }\n  return balance > 0 && balance < -10;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account falls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> below_zero([-4, -5, -6, -7, -8, -9, 10])\n  false\n  >>> below_zero([-4, -5, -6, -7, -8, -9, 10])\n  true\n  */\nconst below_zero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n  }\n  return balance > 0 && balance < -10;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account falls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> below_zero([-4, -5, -6, -7, -8, -9, 10])\n  false\n  >>> below_zero([-4, -5, -6, -7, -8, -9, 10])\n  true\n  */\nconst below_zero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n  }\n  return balance > 0 && balance < -10;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account falls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> below_zero([-4, -5, -6, -7, -8, -9, 10])\n  false\n  >>> below_zero([-4, -5, -6, -7, -8, -9, 10])\n  true\n  */\nconst below_zero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n  }\n  return balance > 0 && balance < -10;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account falls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> below_zero([-4, -5, -6, -7, -8, -9, 10])\n  false\n  >>> below_zero([-4, -5, -6, -7, -8, -9, 10])\n  true\n  */\nconst below_zero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n  }\n  return balance > 0 && balance < -10;\n};\n\n/* You're given a list of deposit and withdrawal operations on a "}
{"task_id": "JavaScript/4", "prompt": "/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst mean_absolute_deviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "mean_absolute_deviation", "gc": "<|endoftext|>/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst mean_absolute_deviation = (numbers) => {\n  const mean = numbers.reduce((acc, val) => acc + val, 0) / numbers.length;\n  return numbers.map((val) => Math.abs(val - mean));\n};\n\n/* For a given list of input numbers, calculate Mean Squared Deviation\n  around the mean of this dataset.\n  Mean Squared Deviation is the average of the squared differences between each\n  element and a centerpoint (mean in this case):\n  MSD = average | x - x_mean |^2\n  >>> mean_squared_deviation([1.0, 2.0, 3.0, 4.0])\n  4.5\n  */\nconst mean_squared_deviation = (numbers) => {\n  const mean = numbers.reduce((acc, val) => acc + val, 0) / numbers.length;\n  return numbers.map((val) => Math.pow(val - mean, 2));\n};\n\n/* For a given list of input numbers, calculate Root Mean Squared Deviation\n  around the mean of this dataset.\n  Root Mean Squared Deviation is the square root of the mean squared deviation\n  of the input numbers:\n  RMSE = sqrt(mean(|x - x_mean|))\n  >>> root_mean_squared_deviation([1.0, 2.0, 3.0, 4.0])\n  1.4142135623730951\n  */\nconst root_mean_squared_deviation = (numbers) => {\n  const mean = numbers.reduce((acc, val) => acc + val, 0) / numbers.length;\n  return Math.sqrt(mean);\n};\n\n/* For a given list of input numbers, calculate Standard Deviation of\n  the input numbers:\n  STD = sqrt(mean(|x - x_mean|))\n  >>> standard_deviation([1.0, 2.0, 3.0, 4.0])\n  1.4142135623730951\n  */\nconst standard_deviation = (numbers) => {\n  const mean = numbers.reduce((acc, val) => acc + val, 0) / numbers.length;\n  return Math.sqrt(mean);\n};\n\n/* For a given list of input numbers, calculate Variance of the input numbers:\n  VAR = mean(|x - x_mean|)\n  >>> variance([1.0, 2.0, 3.0, 4.0])\n  1.4142135623730951\n  */\nconst variance = (numbers) => {\n  const mean = numbers.reduce((acc, val) => acc + val, 0) / numbers.length;\n  return Math.pow(mean, (1 / numbers.length));\n};\n\n/* For a given list of input numbers, calculate Standard Deviation of\n  the input numbers, squared, of the mean of the input numbers:\n  STD2 = mean(|x - x_mean|)^2\n  >>> standard_deviation_squared([1.0, 2.0, 3.0, 4.0])\n  1.4142135623730951\n  */\nconst standard_deviation_squared = (numbers) => {\n  const mean = numbers.reduce((acc, val) => acc + val, 0) / numbers.length;\n  return Math.pow(mean, (1 / numbers.length));\n};\n\n/* For a given list of input numbers, calculate Variance of the input numbers,\n  squared, of the mean of the input numbers, squared, of the mean of the\n  input numbers, squared, of the mean of the input numbers, squared, of\n  the mean of the input numbers, squared, of the mean of the input numbers, squared,\n  of the mean of the input numbers, squared, of the mean of the input numbers, squared,\n  of the mean of the input numbers, squared, of the mean of the input numbers, squared,\n  of the mean of the input numbers, squared, of the mean of the input numbers, squared,\n  of the mean of the input numbers, squared, of the mean of the input numbers, squared,\n  of the mean of the input numbers, squared, of the mean of the input numbers, squared,\n  of the mean of the input numbers, squared, of the mean of the input numbers, squared,\n  of the mean of the input numbers, squared, of the mean of the input numbers, squared,\n  of the mean of the input numbers, squared, of the mean of the input numbers, squared,\n  of the mean of the input numbers, squared, of the mean of the input numbers, squared,\n  of the mean of the input numbers, squared, of the mean of the input numbers, squared,\n  of the mean of the input numbers, squared, of the mean of the input numbers, squared,\n  of the mean of the input numbers, squared, of the mean of the input numbers, squared,\n  of the mean of the input numbers, squared, of the mean of the input numbers, squared,\n  of the mean of the input numbers, squared, of the mean of the input numbers, squared,\n  of the mean of the input numbers, squared, of the mean of the input numbers, squared,\n  of the mean of the input numbers, squared, of the mean of the input numbers, squared,\n  of the mean of the input numbers, squared, of the mean of the input numbers, squared,\n  of the mean of the input numbers, squared, of the mean of the input numbers, squared,\n  of the mean of the input numbers, squared, of the mean of the input numbers, squared,\n  of the mean of the input numbers, squared, of the mean of the input numbers, squared,\n  of the mean of the input numbers, squared, of the mean of the input numbers, squared,\n  of the mean of the input numbers, squared, of the mean of the input numbers, squared,\n  of the mean of the input numbers, squared, of the mean of the input numbers, squared,\n  of the mean of the input numbers, squared, of the mean of the input numbers, squared,\n  of the mean of the input numbers, squared, of the mean of the input numbers, squared,\n  of the mean of the input numbers, squared, of the mean of the input numbers, squared,\n  of the mean of the input numbers, squared, of the mean of the input numbers, squared,\n  of the mean of the input numbers, squared, of the mean of the input numbers, squared,\n  of the mean of the input numbers, squared, of the mean of the input numbers, squared,\n  of the mean of the input numbers, squared, of the mean of the input numbers, squared,\n  of the mean of the input numbers, squared, of the mean of the input numbers, squared,\n  of the mean of the input numbers, squared, of the mean of the input numbers, squared,\n  of the mean of the input numbers, squared, of the mean of the input numbers, squared,\n  of the mean of the input numbers, squared, of the mean of the input numbers, squared,\n  of the mean of the input numbers, squared, of the mean of the input numbers, squared,\n  of the mean of the input numbers, squared, of the mean of the input numbers, squared,\n  of the mean of the input numbers, squared, of the mean of the input numbers, squared,\n  of the mean of the input numbers, squared, of the mean of the input numbers, squared,\n  of the mean of the input numbers, squared, of the mean of the input numbers, squared,\n  of the mean of the input numbers, squared, of the mean of the input numbers, squared,\n  of the mean of the input numbers, squared, of the mean of the input numbers, squared,\n  of the mean of the input numbers, squared, of the mean of the input numbers, squared,\n  of the mean of the input numbers, squared, of the mean of the input numbers, squared,\n  of the mean of the input numbers, squared, of the mean of the input numbers, squ"}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "gc": "<|endoftext|>/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  const result = []\n  let i = 0\n  let j = 0\n  let k = 0\n  while (i < numbers.length) {\n    if (numbers[i]!== delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    result.push(numbers[i])\n    i++\n  }\n  while (j < numbers.length) {\n    if (numbers[j]!== delimeter) {\n      result.push(numbers[j])\n      j++\n      continue\n    }\n    result.push(numbers[j])\n    j++\n  }\n  while (k < numbers.length) {\n    if (numbers[k]!== delimeter) {\n      result.push(numbers[k])\n      k++\n      continue\n    }\n    result.push(numbers[k])\n    k++\n  }\n  return result\n}\n\n/**\n * Convert an input string to a list of integers\n *\n * >>> toIntegers('1 2 3 4')\n * [1, 2, 3, 4]\n * >>> toIntegers('1 2 3 4 5 6 7 8 9 0')\n * [1, 2, 3, 4, 5, 6, 7, 8, 9, 0]\n */\nconst toIntegers = (str) => {\n  const result = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let n = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 1\n  let j = 1\n  let k = 1\n  let l = 1\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 1\n  let j = 1\n  let k = 1\n  let l = 1\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 1\n  let j = 1\n  let k = 1\n  let l = 1\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 1\n  let j = 1\n  let k = 1\n  let l = 1\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 1\n  let j = 1\n  let k = 1\n  let l = 1\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 1\n  let j = 1\n  let k = 1\n  let l = 1\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0"}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parse_nested_parens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parse_nested_parens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parse_nested_parens", "gc": "<|endoftext|>/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parse_nested_parens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parse_nested_parens = (paren_string) => {\n  const paren_stack = [];\n  let paren_count = 0;\n  let paren_level = 0;\n  let paren_level_count = 0;\n  let paren_level_count2 = 0;\n  let paren_level_count3 = 0;\n  let paren_level_count4 = 0;\n  let paren_level_count5 = 0;\n  let paren_level_count6 = 0;\n  let paren_level_count7 = 0;\n  let paren_level_count8 = 0;\n  let paren_level_count9 = 0;\n  let paren_level_count10 = 0;\n  let paren_level_count11 = 0;\n  let paren_level_count12 = 0;\n  let paren_level_count13 = 0;\n  let paren_level_count14 = 0;\n  let paren_level_count15 = 0;\n  let paren_level_count16 = 0;\n  let paren_level_count17 = 0;\n  let paren_level_count18 = 0;\n  let paren_level_count19 = 0;\n  let paren_level_count20 = 0;\n  let paren_level_count21 = 0;\n  let paren_level_count22 = 0;\n  let paren_level_count23 = 0;\n  let paren_level_count24 = 0;\n  let paren_level_count25 = 0;\n  let paren_level_count26 = 0;\n  let paren_level_count27 = 0;\n  let paren_level_count28 = 0;\n  let paren_level_count29 = 0;\n  let paren_level_count30 = 0;\n  let paren_level_count31 = 0;\n  let paren_level_count32 = 0;\n  let paren_level_count33 = 0;\n  let paren_level_count34 = 0;\n  let paren_level_count35 = 0;\n  let paren_level_count36 = 0;\n  let paren_level_count37 = 0;\n  let paren_level_count38 = 0;\n  let paren_level_count39 = 0;\n  let paren_level_count40 = 0;\n  let paren_level_count41 = 0;\n  let paren_level_count42 = 0;\n  let paren_level_count43 = 0;\n  let paren_level_count44 = 0;\n  let paren_level_count45 = 0;\n  let paren_level_count46 = 0;\n  let paren_level_count47 = 0;\n  let paren_level_count48 = 0;\n  let paren_level_count49 = 0;\n  let paren_level_count50 = 0;\n  let paren_level_count51 = 0;\n  let paren_level_count52 = 0;\n  let paren_level_count53 = 0;\n  let paren_level_count54 = 0;\n  let paren_level_count55 = 0;\n  let paren_level_count56 = 0;\n  let paren_level_count57 = 0;\n  let paren_level_count58 = 0;\n  let paren_level_count59 = 0;\n  let paren_level_count60 = 0;\n  let paren_level_count61 = 0;\n  let paren_level_count62 = 0;\n  let paren_level_count63 = 0;\n  let paren_level_count64 = 0;\n  let paren_level_count65 = 0;\n  let paren_level_count66 = 0;\n  let paren_level_count67 = 0;\n  let paren_level_count68 = 0;\n  let paren_level_count69 = 0;\n  let paren_level_count70 = 0;\n  let paren_level_count71 = 0;\n  let paren_level_count72 = 0;\n  let paren_level_count73 = 0;\n  let paren_level_count74 = 0;\n  let paren_level_count75 = 0;\n  let paren_level_count76 = 0;\n  let paren_level_count77 = 0;\n  let paren_level_count78 = 0;\n  let paren_level_count79 = 0;\n  let paren_level_count80 = 0;\n  let paren_level_count81 = 0;\n  let paren_level_count82 = 0;\n  let paren_level_count83 = 0;\n  let paren_level_count84 = 0;\n  let paren_level_count85 = 0;\n  let paren_level_count86 = 0;\n  let paren_level_count87 = 0;\n  let paren_level_count88 = 0;\n  let paren_level_count89 = 0;\n  let paren_level_count90 = 0;\n  let paren_level_count91 = 0;\n  let paren_level_count92 = 0;\n  let paren_level_count93 = 0;\n  let paren_level_count94 = 0;\n  let paren_level_count95 = 0;\n  let paren_level_count96 = 0;\n  let paren_level_count97 = 0;\n  let paren_level_count98 = 0;\n  let paren_level_count99 = 0;\n  let paren_level_count100 = 0;\n  let paren_level_count101 = 0;\n  let paren_level_count102 = 0;\n  let paren_level_count103 = 0;\n  let paren_level_count104 = 0;\n  let paren_level_count105 = 0;\n  let paren_level_count106 = 0;\n  let paren_level_count107 = 0;\n  let paren_level_count108 = 0;\n  let paren_level_count109 = 0;\n  let paren_level_count110 = 0;\n  let paren_level_count111 = 0;\n  let paren_level_count112 = 0;\n  let paren_level_count113 = 0;\n  let paren_level_count114 = 0;\n  let paren_level_count115 = 0;\n  let paren_level_count116 = 0;\n  let paren_level_count117 = 0;\n  let paren_level_count118 = 0;\n  let paren_level_count119 = 0;\n  let paren_level_count120 = 0;\n  let paren_level_count121 = 0;\n  let paren_level_count122 = 0;\n  let paren_level_count123 = 0;\n  let paren_level_count124 = 0;\n  let paren_level_count125 = 0;\n  let paren_level_count126 = 0;\n  let paren_level_count127 = 0;\n  let paren_level_count128 = 0;\n  let paren_level_count129 = 0;\n  let paren_level_count130 = 0;\n  let paren_level_count131 = 0;\n  let paren_level_count132 = 0;\n  let paren_level_count133 = 0;\n  let paren_level_count134 = 0;\n  let paren_level_count135 = 0;\n  let paren_level_count136 = 0;\n  let paren_level_count137 = 0;\n  let paren_level_count138 = 0;\n  let paren_level_count139 = 0;\n  let paren_level_count140 = 0;\n  let paren_level_count141 = 0;\n  let paren_level_count142 = 0;\n  let paren_level_count143 = 0;\n  let paren_level_count144 = 0;\n  let paren_level_count145 = 0;\n  let paren_level_count146 = 0;\n  let paren_level_count147 = 0;\n  let paren_level_count148 = 0;\n  let paren_level_count149 = 0;\n  let paren_level_count150 = 0;\n  let paren_level_count151 = 0;\n  let paren_level_count152 = 0;\n  let paren_level_count153 = 0;\n  let paren_level_count154 = 0;\n  let paren_level_count155 = 0;\n  let paren_level_count156 = 0;\n  let paren_level_count157 = 0;\n  let paren_level_count158 = 0;\n  let paren_level_count159 = 0;\n  let paren_level_count160 = 0;\n  let paren_level_count161 = 0;\n  let paren_level_count162 = 0;\n  let paren_level_count163 = 0;\n  let paren_level_count164 = 0;\n  let paren_level_count165 = 0;\n  let paren_level_count166 = 0;\n  let paren_level_count167 = 0;\n  let paren_level_count168 = 0;\n  let paren_level_count169 = 0;\n  let paren_level_count170 = 0;\n  let paren_level_count171 = 0;\n  let paren_level_count172 = 0;\n  let paren_level_count173 = 0;\n  let paren_level_count174 = 0;\n  let paren_level_count175 = 0;\n  let paren_level_count176 = 0;\n  let paren_level_count177 = 0;\n  let paren_level_count178 = 0;\n  let paren_level_count179 = 0;"}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filter_by_substring([], 'a')\n  []\n  >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filter_by_substring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filter_by_substring", "gc": "<|endoftext|>/* Filter an input list of strings only for ones that contain given substring\n  >>> filter_by_substring([], 'a')\n  []\n  >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filter_by_substring = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) === 0);\n};\n\n/* Filter an input list of strings only keeping those that contain at least one\n  character in given list\n  >>> filter_by_characters(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filter_by_characters = (strings, characters) => {\n  return strings.filter(string => characters.includes(string[0]));\n};\n\n/* Filter an input list of strings only keeping those that contain at least one\n  character in given list\n  >>> filter_by_characters(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filter_by_characters_nocase = (strings, characters) => {\n  return strings.filter(string => characters.includes(string[0].toLowerCase()));\n};\n\n/* Filter an input list of strings only keeping those that contain at least one\n  character in given list\n  >>> filter_by_characters(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filter_by_characters_nocase_insensitive = (strings, characters) => {\n  return strings.filter(string => characters.includes(string[0].toLowerCase()));\n};\n\n/* Filter an input list of strings only keeping those that contain at least one\n  character in given list\n  >>> filter_by_characters(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filter_by_characters_nocase_insensitive_insensitive = (strings, characters) => {\n  return strings.filter(string => characters.includes(string[0].toLowerCase()));\n};\n\n/* Filter an input list of strings only keeping those that contain at least one\n  character in given list\n  >>> filter_by_characters(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filter_by_characters_nocase_insensitive_insensitive_insensitive = (strings, characters) => {\n  return strings.filter(string => characters.includes(string[0].toLowerCase()));\n};\n\n/* Filter an input list of strings only keeping those that contain at least one\n  character in given list\n  >>> filter_by_characters(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filter_by_characters_nocase_insensitive_insensitive_insensitive_insensitive = (strings, characters) => {\n  return strings.filter(string => characters.includes(string[0].toLowerCase()));\n};\n\n/* Filter an input list of strings only keeping those that contain at least one\n  character in given list\n  >>> filter_by_characters(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filter_by_characters_nocase_insensitive_insensitive_insensitive_insensitive_insensitive = (strings, characters) => {\n  return strings.filter(string => characters.includes(string[0].toLowerCase()));\n};\n\n/* Filter an input list of strings only keeping those that contain at least one\n  character in given list\n  >>> filter_by_characters(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filter_by_characters_nocase_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive = (strings, characters) => {\n  return strings.filter(string => characters.includes(string[0].toLowerCase()));\n};\n\n/* Filter an input list of strings only keeping those that contain at least one\n  character in given list\n  >>> filter_by_characters(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filter_by_characters_nocase_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive = (strings, characters) => {\n  return strings.filter(string => characters.includes(string[0].toLowerCase()));\n};\n\n/* Filter an input list of strings only keeping those that contain at least one\n  character in given list\n  >>> filter_by_characters(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filter_by_characters_nocase_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive = (strings, characters) => {\n  return strings.filter(string => characters.includes(string[0].toLowerCase()));\n};\n\n/* Filter an input list of strings only keeping those that contain at least one\n  character in given list\n  >>> filter_by_characters(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filter_by_characters_nocase_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_in"}
{"task_id": "JavaScript/8", "prompt": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sum_product([])\n  (0, 1)\n  >>> sum_product([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sum_product = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sum_product", "gc": "<|endoftext|>/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sum_product([])\n  (0, 1)\n  >>> sum_product([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sum_product = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n};\n\n/* Given a list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sum_product([], 1)\n  (0, 1)\n  >>> sum_product([1,2,3], 1)\n  (5, 6)\n  */\nconst sum_product_int = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* Given a list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sum_product_int([], 1)\n  (0, 1)\n  >>> sum_product_int([1,2,3], 1)\n  (5, 6)\n  */\nconst sum_product_int_int = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* Given a list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sum_product_int_int([], 1)\n  (0, 1)\n  >>> sum_product_int_int([1,2,3], 1)\n  (5, 6)\n  */\nconst sum_product_int_int_int = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* Given a list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sum_product_int_int_int([], 1)\n  (0, 1)\n  >>> sum_product_int_int_int([1,2,3], 1)\n  (5, 6)\n  */\nconst sum_product_int_int_int_int = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* Given a list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sum_product_int_int_int_int([], 1)\n  (0, 1)\n  >>> sum_product_int_int_int_int([1,2,3], 1)\n  (5, 6)\n  */\nconst sum_product_int_int_int_int_int = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* Given a list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sum_product_int_int_int_int_int_int([], 1)\n  (0, 1)\n  >>> sum_product_int_int_int_int_int_int([1,2,3], 1)\n  (5, 6)\n  */\nconst sum_product_int_int_int_int_int_int = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* Given a list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sum_product_int_int_int_int_int_int_int([], 1)\n  (0, 1)\n  >>> sum_product_int_int_int_int_int_int([1,2,3], 1)\n  (5, 6)\n  */\nconst sum_product_int_int_int_int_int_int_int = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* Given a list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sum_product_int_int_int_int_int_int_int_int([], 1)\n  (0, 1)\n  >>> sum_product_int_int_int_int_int_int_int([1,2,3], 1)\n  (5, 6)\n  */\nconst sum_product_int_int_int_int_int_int_int = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* Given a list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sum_product_int_int_int_int_int_int_int_int_int_int([], 1)\n  (0, 1)\n  >>> sum_product_int_int_int_int_int_int_int_int_int([1,2,3], 1)\n  (5, 6)\n  */\nconst sum_product_int_int_int_int_int_int_int_int_int = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* Given a list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sum_product_int_int_int_int_int_int_int_int_int_int_int([], 1)\n  (0, 1)\n  >>> sum_product_int_int_int_int_int_int_int_int_int_int([1,2,3], 1)\n  (5, 6)\n  */\nconst sum_product_int_int_int_int_int_int_int_int_int_int = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* Given a list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sum_product_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_"}
{"task_id": "JavaScript/9", "prompt": "/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rolling_max = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rolling_max", "gc": "<|endoftext|>/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rolling_max = (numbers) => {\n  const result = [];\n  let current = numbers[0];\n  let max = 0;\n  for (let i = 1; i < numbers.length; i++) {\n    const next = numbers[i];\n    if (current > next) {\n      current = next;\n      max = i;\n    }\n  }\n  result.push(current);\n  return result;\n};\n\n// Given a string, convert it to a list of integers\nconst stringToIntegers = (str) => {\n  const result = [];\n  let current = 0;\n  for (let i = 0; i < str.length; i++) {\n    const char = str[i];\n    if (char === '-') {\n      result.push(current);\n      current++;\n    } else {\n      current++;\n    }\n  }\n  return result;\n};\n\n// Given a string, convert it to a list of integers\nconst stringToIntegers_reverse = (str) => {\n  const result = [];\n  let current = 0;\n  for (let i = str.length - 1; i >= 0; i--) {\n    const char = str[i];\n    if (char === '-') {\n      result.push(current);\n      current++;\n    } else {\n      current++;\n    }\n  }\n  return result;\n};\n\n// Given a string, convert it to a list of integers\nconst stringToIntegers_reverse_reverse = (str) => {\n  const result = [];\n  let current = 0;\n  for (let i = str.length - 1; i >= 0; i--) {\n    const char = str[i];\n    if (char === '-') {\n      result.push(current);\n      current++;\n    } else {\n      current++;\n    }\n  }\n  return result;\n};\n\n// Given a string, convert it to a list of integers\nconst stringToIntegers_reverse_noreverse = (str) => {\n  const result = [];\n  let current = 0;\n  for (let i = str.length - 1; i >= 0; i--) {\n    const char = str[i];\n    if (char === '-') {\n      result.push(current);\n      current++;\n    } else {\n      current++;\n    }\n  }\n  return result;\n};\n\n// Given a string, convert it to a list of integers\nconst stringToIntegers_reverse_reverse_noreverse = (str) => {\n  const result = [];\n  let current = 0;\n  for (let i = str.length - 1; i >= 0; i--) {\n    const char = str[i];\n    if (char === '-') {\n      result.push(current);\n      current++;\n    } else {\n      current++;\n    }\n  }\n  return result;\n};\n\n// Given a string, convert it to a list of integers\nconst stringToIntegers_reverse_noreverse_noreverse = (str) => {\n  const result = [];\n  let current = 0;\n  for (let i = str.length - 1; i >= 0; i--) {\n    const char = str[i];\n    if (char === '-') {\n      result.push(current);\n      current++;\n    } else {\n      current++;\n    }\n  }\n  return result;\n};\n\n// Given a string, convert it to a list of integers\nconst stringToIntegers_reverse_noreverse_noreverse_noreverse = (str) => {\n  const result = [];\n  let current = 0;\n  for (let i = str.length - 1; i >= 0; i--) {\n    const char = str[i];\n    if (char === '-') {\n      result.push(current);\n      current++;\n    } else {\n      current++;\n    }\n  }\n  return result;\n};\n\n// Given a string, convert it to a list of integers\nconst stringToIntegers_reverse_noreverse_noreverse_noreverse_noreverse = (str) => {\n  const result = [];\n  let current = 0;\n  for (let i = str.length - 1; i >= 0; i--) {\n    const char = str[i];\n    if (char === '-') {\n      result.push(current);\n      current++;\n    } else {\n      current++;\n    }\n  }\n  return result;\n};\n\n// Given a string, convert it to a list of integers\nconst stringToIntegers_reverse_noreverse_noreverse_noreverse_noreverse_noreverse = (str) => {\n  const result = [];\n  let current = 0;\n  for (let i = str.length - 1; i >= 0; i--) {\n    const char = str[i];\n    if (char === '-') {\n      result.push(current);\n      current++;\n    } else {\n      current++;\n    }\n  }\n  return result;\n};\n\n// Given a string, convert it to a list of integers\nconst stringToIntegers_reverse_noreverse_noreverse_noreverse_noreverse_noreverse_noreverse = (str) => {\n  const result = [];\n  let current = 0;\n  for (let i = str.length - 1; i >= 0; i--) {\n    const char = str[i];\n    if (char === '-') {\n      result.push(current);\n      current++;\n    } else {\n      current++;\n    }\n  }\n  return result;\n};\n\n// Given a string, convert it to a list of integers\nconst stringToIntegers_reverse_noreverse_noreverse_noreverse_noreverse_noreverse_noreverse_noreverse_noreverse = (str) => {\n  const result = [];\n  let current = 0;\n  for (let i = str.length - 1; i >= 0; i--) {\n    const char = str[i];\n    if (char === '-') {\n      result.push(current);\n      current++;\n    } else {\n      current++;\n    }\n  }\n  return result;\n};\n\n// Given a string, convert it to a list of integers\nconst stringToIntegers_reverse_noreverse_noreverse_noreverse_noreverse_noreverse_noreverse_noreverse_noreverse_noreverse_noreverse = (str) => {\n  const result = [];\n  let current = 0;\n  for (let i = str.length - 1; i >= 0; i--) {\n    const char = str[i];\n    if (char === '-') {\n      result.push(current);\n      current++;\n    } else {\n      current++;\n    }\n  }\n  return result;\n};\n\n// Given a string, convert it to a list of integers\nconst stringToIntegers_reverse_noreverse_noreverse_noreverse_noreverse_noreverse_noreverse_noreverse_noreverse_noreverse_noreverse_noreverse = (str) => {\n  const result = [];\n  let current = 0;\n  for (let i = str.length - 1; i >= 0; i--) {\n    const char = str[i];\n    if (char === '-') {\n      result.push(current);\n      current++;\n    } else {\n      current++;\n    }\n  }\n  return result;\n};\n\n// Given a string, convert it to a list of integers\nconst stringToIntegers_reverse_noreverse_noreverse_noreverse_noreverse_noreverse_noreverse_noreverse_noreverse_noreverse_noreverse_noreverse_noreverse = (str) => {\n  const result = [];\n  let current = 0;\n  for (let i = str.length - 1; i >= 0; i--) {\n    const char = str[i];\n    if (char === '-') {\n      result.push(current);\n      current++;\n    } else {\n      current++;\n    }\n  }\n  return result;\n};\n\n// Given a string, convert it to a list of integers\nconst stringToIntegers_reverse_noreverse_noreverse_noreverse_noreverse_noreverse_noreverse_noreverse_noreverse_noreverse_noreverse_noreverse_noreverse_noreverse_noreverse = (str) => {\n  const result = [];\n  let current = 0;\n  for (let i = str.length - 1; i >= 0; i--) {\n    const char = str[i];\n    if (char === '-') {\n      result.push(current);\n      current++;\n    } else {\n      current++;\n    }\n  }\n  return result;\n};\n\n// Given a string, convert it to a list of integers\nconst stringToIntegers_reverse_noreverse_noreverse_noreverse_noreverse_noreverse_noreverse_noreverse_noreverse_noreverse_noreverse_noreverse_noreverse_noreverse_noreverse = (str) => {\n  const result = [];\n  let current = 0;\n  for (let i = str.length - 1; i >= 0; i--) {\n    const char = str[i];\n    if (char === '-') {\n      result.push(current);\n      current++;\n    } else {\n      current++;\n    }\n  }\n  return result;\n};\n\n// Given a string, convert it to a list of integers\nconst stringToIntegers_reverse_noreverse_noreverse_no"}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig is a palindrome */\nconst is_palindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "is_palindrome", "gc": "<|endoftext|>/* Test if gniven strig is a palindrome */\nconst is_palindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let palindrome = '';\n  let longestPalindrome = '';\n  let palindromeLength = 0;\n  let palindromePrefix = '';\n  let palindromeSuffix = '';\n\n  /* Find longest palindrome that begins with a supplied string */\n  longestPalindrome = string.length\n   ? string\n     .reverse()\n     .slice(0, string.length - 1)\n     .join('')\n    : '';\n\n  /* Find palindrome prefix that comes before the longest palindrome */\n  longestPalindrome = longestPalindrome\n   ? longestPalindrome\n     .split('')\n     .slice(0, longestPalindrome.length - 1)\n     .join('')\n    : '';\n\n  /* Find palindrome suffix that comes after the longest palindrome */\n  longestPalindrome = longestPalindrome\n   ? longestPalindrome\n     .split('')\n     .slice(longestPalindrome.length)\n     .join('')\n    : '';\n\n  /* Find palindrome that begins with a supplied string */\n  palindromePrefix = longestPalindrome\n   ? longestPalindrome\n     .split('')\n     .slice(0, longestPalindrome.length)\n     .join('')\n    : '';\n\n  /* Find palindrome that ends with a supplied string */\n  palindromeSuffix = longestPalindrome\n   ? longestPalindrome\n     .split('')\n     .slice(longestPalindrome.length)\n     .join('')\n    : '';\n\n  /* Find palindrome that begins with a supplied string */\n  palindromePrefix = palindromePrefix\n   ? palindromePrefix\n     .split('')\n     .slice(0, palindromePrefix.length - 1)\n     .join('')\n    : '';\n\n  /* Find palindrome that ends with a supplied string */\n  palindromeSuffix = palindromeSuffix\n   ? palindromeSuffix\n     .split('')\n     .slice(palindromeSuffix.length - 1)\n     .join('')\n    : '';\n\n  /* Find palindrome that begins with a supplied string */\n  palindromePrefix = palindromePrefix\n   ? palindromePrefix\n     .split('')\n     .slice(0, palindromePrefix.length - 1)\n     .join('')\n    : '';\n\n  /* Find palindrome that ends with a supplied string */\n  palindromeSuffix = palindromeSuffix\n   ? palindromeSuffix\n     .split('')\n     .slice(palindromeSuffix.length - 1)\n     .join('')\n    : '';\n\n  /* Find palindrome that begins with a supplied string */\n  palindromePrefix = palindromePrefix\n   ? palindromePrefix\n     .split('')\n     .slice(0, palindromePrefix.length - 1)\n     .join('')\n    : '';\n\n  /* Find palindrome that ends with a supplied string */\n  palindromeSuffix = palindromeSuffix\n   ? palindromeSuffix\n     .split('')\n     .slice(palindromeSuffix.length - 1)\n     .join('')\n    : '';\n\n  /* Find palindrome that begins with a supplied string */\n  palindromePrefix = palindromePrefix\n   ? palindromePrefix\n     .split('')\n     .slice(0, palindromePrefix.length - 1)\n     .join('')\n    : '';\n\n  /* Find palindrome that ends with a supplied string */\n  palindromeSuffix = palindromeSuffix\n   ? palindromeSuffix\n     .split('')\n     .slice(palindromeSuffix.length - 1)\n     .join('')\n    : '';\n\n  /* Find palindrome that begins with a supplied string */\n  palindromePrefix = palindromePrefix\n   ? palindromePrefix\n     .split('')\n     .slice(0, palindromePrefix.length - 1)\n     .join('')\n    : '';\n\n  /* Find palindrome that ends with a supplied string */\n  palindromeSuffix = palindromeSuffix\n   ? palindromeSuffix\n     .split('')\n     .slice(palindromeSuffix.length - 1)\n     .join('')\n    : '';\n\n  /* Find palindrome that begins with a supplied string */\n  palindromePrefix = palindromePrefix\n   ? palindromePrefix\n     .split('')\n     .slice(0, palindromePrefix.length - 1)\n     .join('')\n    : '';\n\n  /* Find palindrome that ends with a supplied string */\n  palindromeSuffix = palindromeSuffix\n   ? palindromeSuffix\n     .split('')\n     .slice(palindromeSuffix.length - 1)\n     .join('')\n    : '';\n\n  /* Find palindrome that begins with a supplied string */\n  palindromePrefix = palindromePrefix\n   ? palindromePrefix\n     .split('')\n     .slice(0, palindromePrefix.length - 1)\n     .join('')\n    : '';\n\n  /* Find palindrome that ends with a supplied string */\n  palindromeSuffix = palindromeSuffix\n   ? palindromeSuffix\n     .split('')\n     .slice(palindromeSuffix.length - 1)\n     .join('')\n    : '';\n\n  /* Find palindrome that begins with a supplied string */\n  palindromePrefix = palindromePrefix\n   ? palindromePrefix\n     .split('')\n     .slice(0, palindromePrefix.length - 1)\n     .join('')\n    : '';\n\n  /* Find palindrome that ends with a supplied string */\n  palindromeSuffix = palindromeSuffix\n   ? palindromeSuffix\n     .split('')\n     .slice(palindromeSuffix.length - 1)\n     .join('')\n    : '';\n\n  /* Find palindrome that begins with a supplied string */\n  palindromePrefix = palindromePrefix\n   ? palindromePrefix\n     .split('')\n     .slice(0, palindromePrefix.length - 1)\n     .join('')\n    : '';\n\n  /* Find palindrome that ends with a supplied string */\n  palindromeSuffix = palindromeSuffix\n   ? palindromeSuffix\n     .split('')\n     .slice(palindromeSuffix.length - 1)\n     .join('')\n    : '';\n\n  /* Find palindrome that begins with a supplied string */\n  palindromePrefix = palindromePrefix\n   ? palindromePrefix\n     .split('')\n     .slice(0, palindromePrefix.length - 1)\n     .join('')\n    : '';\n\n  /* Find palindrome that ends with a supplied string */\n  palindromeSuffix = palindromeSuffix\n   ? palindromeSuffix\n     .split('')\n     .slice(p"}
{"task_id": "JavaScript/11", "prompt": "/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> string_xor('010', '110')\n  '100'\n  */\nconst string_xor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "string_xor", "gc": "<|endoftext|>/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> string_xor('010', '110')\n  '100'\n  */\nconst string_xor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += String.fromCharCode(a[i] ^ b[i]);\n  }\n  return result;\n};\n\n/**\n  Convert a string to binary (base8) representation.\n  >>> binary(0x41)\n  '1010'\n  */\nconst binary = a => a.toString(2);\n\n/**\n  Convert a string to hexadecimal (base16) representation.\n  >>> hexadecimal('0101')\n  '41'\n  */\nconst hexadecimal = a => a.toString(16);\n\n/**\n  Convert a string to octal (base8) representation.\n  >>> octal('0101')\n  '01'\n  */\nconst octal = a => a.toString(8);\n\n/**\n  Convert a string to decimal (base10) representation.\n  >>> decimal('0101')\n  '1'\n  */\nconst decimal = a => a.toString(10);\n\n/**\n  Convert a string to hexadecimal (base16) representation with leading zeros.\n  >>> hexadecimal('0101')\n  '01'\n  */\nconst hexadecimal_with_leading_zeros = a => a.toString(16).padStart(2, '0');\n\n/**\n  Convert a string to octal (base8) representation with leading zeros.\n  >>> octal('0101')\n  '01'\n  */\nconst octal_with_leading_zeros = a => a.toString(8).padStart(2, '0');\n\n/**\n  Convert a string to decimal (base10) representation with leading zeros.\n  >>> decimal('0101')\n  '1'\n  */\nconst decimal_with_leading_zeros = a => a.toString(10).padStart(2, '0');\n\n/**\n  Convert a string to hexadecimal (base16) representation with leading zeros.\n  >>> hexadecimal('0101')\n  '01'\n  */\nconst hexadecimal_with_leading_zeros_with_decimal = a => a.toString(16).padStart(2, '0');\n\n/**\n  Convert a string to octal (base8) representation with leading zeros.\n  >>> octal('0101')\n  '01'\n  */\nconst octal_with_leading_zeros_with_decimal = a => a.toString(8).padStart(2, '0');\n\n/**\n  Convert a string to decimal (base10) representation with leading zeros.\n  >>> decimal('0101')\n  '1'\n  */\nconst decimal_with_leading_zeros_with_decimal = a => a.toString(10).padStart(2, '0');\n\n/**\n  Convert a string to hexadecimal (base16) representation with leading zeros.\n  >>> hexadecimal('0101')\n  '01'\n  */\nconst hexadecimal_with_leading_zeros_with_decimal_with_decimal = a => a.toString(16).padStart(2, '0');\n\n/**\n  Convert a string to octal (base8) representation with leading zeros.\n  >>> octal('0101')\n  '01'\n  */\nconst octal_with_leading_zeros_with_decimal_with_decimal = a => a.toString(8).padStart(2, '0');\n\n/**\n  Convert a string to decimal (base10) representation with leading zeros.\n  >>> decimal('0101')\n  '1'\n  */\nconst decimal_with_leading_zeros_with_decimal_with_decimal = a => a.toString(10).padStart(2, '0');\n\n/**\n  Convert a string to hexadecimal (base16) representation with leading zeros.\n  >>> hexadecimal('0101')\n  '01'\n  */\nconst hexadecimal_with_leading_zeros_with_decimal_with_decimal_with_decimal = a => a.toString(16).padStart(2, '0');\n\n/**\n  Convert a string to octal (base8) representation with leading zeros.\n  >>> octal('0101')\n  '01'\n  */\nconst octal_with_leading_zeros_with_decimal_with_decimal_with_decimal = a => a.toString(8).padStart(2, '0');\n\n/**\n  Convert a string to decimal (base10) representation with leading zeros.\n  >>> decimal('0101')\n  '1'\n  */\nconst decimal_with_leading_zeros_with_decimal_with_decimal_with_decimal = a => a.toString(10).padStart(2, '0');\n\n/**\n  Convert a string to hexadecimal (base16) representation with leading zeros.\n  >>> hexadecimal('0101')\n  '01'\n  */\nconst hexadecimal_with_leading_zeros_with_decimal_with_decimal_with_decimal_with_decimal = a => a.toString(16).padStart(2, '0');\n\n/**\n  Convert a string to octal (base8) representation with leading zeros.\n  >>> octal('0101')\n  '01'\n  */\nconst octal_with_leading_zeros_with_decimal_with_decimal_with_decimal_with_decimal_with_decimal = a => a.toString(8).padStart(2, '0');\n\n/**\n  Convert a string to decimal (base10) representation with leading zeros.\n  >>> decimal('0101')\n  '1'\n  */\nconst decimal_with_leading_zeros_with_decimal_with_decimal_with_decimal_with_decimal_with_decimal = a => a.toString(10).padStart(2, '0');\n\n/**\n  Convert a string to hexadecimal (base16) representation with leading zeros.\n  >>> hexadecimal('0101')\n  '01'\n  */\nconst hexadecimal_with_leading_zeros_with_decimal_with_decimal_with_decimal_with_decimal_with_decimal_with_decimal = a => a.toString(16).padStart(2, '0');\n\n/**\n  Convert a string to octal (base8) representation with leading zeros.\n  >>> octal('0101')\n  '01'\n  */\nconst octal_with_leading_zeros_with_decimal_with_decimal_with_decimal_with_decimal_with_decimal_with_decimal = a => a.toString(8).padStart(2, '0');\n\n/**\n  Convert a string to decimal (base10) representation with leading zeros.\n  >>> decimal('0101')\n  '1'\n  */\nconst decimal_with_leading_zeros_with_decimal_with_decimal_with_decimal_with_decimal_with_decimal_with_decimal = a => a.toString(10).padStart(2, '0');\n\n/**\n  Convert a string to hexadecimal (base16) representation with leading zeros.\n  >>> hexadecimal('0101')\n  '01'\n  */\nconst hexadecimal_with_leading_zeros_with_decimal_with_decimal_with_decimal_with_decimal_with_decimal_with_decimal = a => a.toString(16).padStart(2, '0');\n\n/**\n  Convert a string to octal (base8) representation with leading zeros.\n  >>> octal('0101')\n  '01'\n  */\nconst octal_with_leading_zeros_with_decimal_with_de"}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the longest one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "gc": "<|endoftext|>/* Out of list of strings, return the longest one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (strings.length === 0) {\n    return null\n  }\n  const longestString = strings.reduce((longestString, string) => {\n    if (string.length > longestString.length) {\n      longestString = string\n    }\n    return longestString\n  }, '')\n  return longestString\n}\n\n/**\n  Remove all occurrences of a string from a string.\n  >>> removeAll('abc', 'b')\n  'ab'\n  >>> removeAll('abc', 'b')\n  'abc'\n  >>> removeAll('abc', 'b')\n  'abc'\n  >>> removeAll('abc', 'b')\n  'abc'\n  >>> removeAll('abc', 'b')\n  'abc'\n  >>> removeAll('abc', 'b')\n  'abc'\n  >>> removeAll('abc', 'b')\n  'abc'\n  >>> removeAll('abc', 'b')\n  'abc'\n  >>> removeAll('abc', 'b')\n  'abc'\n  >>> removeAll('abc', 'b')\n  'abc'\n  >>> removeAll('abc', 'b')\n  'abc'\n  >>> removeAll('abc', 'b')\n  'abc'\n  >>> removeAll('abc', 'b')\n  'abc'\n  >>> removeAll('abc', 'b')\n  'abc'\n  >>> removeAll('abc', 'b')\n  'abc'\n  >>> removeAll('abc', 'b')\n  'abc'\n  >>> removeAll('abc', 'b')\n  'abc'\n  >>> removeAll('abc', 'b')\n  'abc'\n  >>> removeAll('abc', 'b')\n  'abc'\n  >>> removeAll('abc', 'b')\n  'abc'\n  >>> removeAll('abc', 'b')\n  'abc'\n  >>> removeAll('abc', 'b')\n  'abc'\n  >>> removeAll('abc', 'b')\n  'abc'\n  >>> removeAll('abc', 'b')\n  'abc'\n  >>> removeAll('abc', 'b')\n  'abc'\n  >>> removeAll('abc', 'b')\n  'abc'\n  >>> removeAll('abc', 'b')\n  'abc'\n  >>> removeAll('abc', 'b')\n  'abc'\n  >>> removeAll('abc', 'b')\n  'abc'\n  >>> removeAll('abc', 'b')\n  'abc'\n  >>> removeAll('abc', 'b')\n  'abc'\n  >>> removeAll('abc', 'b')\n  'abc'\n  >>> removeAll('abc', 'b')\n  'abc'\n  >>> removeAll('abc', 'b')\n  'abc'\n  >>> removeAll('abc', 'b')\n  'abc'\n  >>> removeAll('abc', 'b')\n  'abc'\n  >>> removeAll('abc', 'b')\n  'abc'\n  >>> removeAll('abc', 'b')\n  'abc'\n  >>> removeAll('abc', 'b')\n  'abc'\n  >>> removeAll('abc', 'b')\n  'abc'\n  >>> removeAll('abc', 'b')\n  'abc'\n  >>> removeAll('abc', 'b')\n  'abc'\n  >>> removeAll('abc', 'b')\n  'abc'\n  >>> removeAll('abc', 'b')\n  'abc'\n  >>> removeAll('abc', 'b')\n  'abc'\n  >>> removeAll('abc', 'b')\n  'abc'\n  >>> removeAll('abc', 'b')\n  'abc'\n  >>> removeAll('abc', 'b')\n  'abc'\n  >>> removeAll('abc', 'b')\n  'abc'\n  >>> removeAll('abc', 'b')\n  'abc'\n  >>> removeAll('abc', 'b')\n  'abc'\n  >>> removeAll('abc', 'b')\n  'abc'\n  >>> removeAll('abc', 'b')\n  'abc'\n  >>> removeAll('abc', 'b')\n  'abc'\n  >>> removeAll('abc', 'b')\n  'abc'\n  >>> removeAll('abc', 'b')\n  'abc'\n  >>> removeAll('abc', 'b')\n  'abc'\n  >>> removeAll('abc', 'b')\n  'abc'\n  >>> removeAll('abc', 'b')\n  'abc'\n  >>> removeAll('abc', 'b')\n  'abc'\n  >>> removeAll('abc', 'b')\n  'abc'\n  >>> removeAll('abc', 'b')\n  'abc'\n  >>> removeAll('abc', 'b')\n  'abc'\n  >>> removeAll('abc', 'b')\n  'abc'\n  >>> removeAll('abc', 'b')\n  'abc'\n  >>> removeAll('abc', 'b')\n  'abc'\n  >>> removeAll('abc', 'b')\n  'abc'\n  >>> removeAll('abc', 'b')\n  'abc'\n  >>> removeAll('abc', 'b')\n  'abc'\n  >>> removeAll('abc', 'b')\n  'abc'\n  >>> removeAll('abc', 'b')\n  'abc'\n  >>> removeAll('abc', 'b')\n  'abc'\n  >>> removeAll('abc', 'b')\n  'abc'\n  >>> removeAll('abc', 'b')\n  'abc'\n  >>> removeAll('abc', 'b')\n  'abc'\n  >>> removeAll('abc', 'b')\n  'abc'\n  >>> removeAll('abc', 'b')\n  'abc'\n  >>> removeAll('abc', 'b')\n  'abc'\n  >>> removeAll('abc', 'b')\n  'abc'\n  >>> removeAll('abc', 'b')\n  'abc'\n  >>> removeAll('abc', 'b')\n  'abc'\n  >>> removeAll('abc', 'b')\n  'abc'\n  >>> removeAll('abc', 'b')\n  'abc'\n  >>> removeAll('abc', 'b')\n  'abc'\n  >>> removeAll('abc', 'b')\n  'abc'\n  >>> removeAll('abc', 'b')\n  'abc'\n  >>> removeAll('abc', 'b')\n  'abc'\n  >>> removeAll('abc', 'b')\n  'abc'\n  >>> removeAll('abc', 'b')\n  'abc'\n  >>> removeAll('abc', 'b')\n  'abc'\n  >>> removeAll('abc', 'b')\n  'abc'\n  >>> removeAll('abc', 'b')\n  'abc'\n  >>> removeAll('abc', 'b')\n  'abc'\n  >>> removeAll('abc', 'b')\n  'abc'\n  >>> removeAll('abc', 'b')\n  'abc'\n  >>> removeAll('abc', 'b')\n  'abc'\n  >>> removeAll('abc', 'b')\n  'abc'\n  >>> removeAll('abc', 'b')\n  'abc'\n  >>> removeAll('abc', 'b')\n  'abc'\n  >>> removeAll('abc', 'b')\n  'abc'\n  >>> removeAll('abc', 'b')\n  'abc'\n  >>> removeAll('abc', 'b')\n  'abc'\n  >>> removeAll('abc', 'b')\n  'abc'\n  >>> removeAll('abc', 'b')\n  'abc'\n  >>> removeAll('abc', 'b')\n  'abc'\n  >>> removeAll('abc', 'b')\n  'abc'\n  >>> removeAll('abc', 'b')\n  'abc'\n  >>> removeAll('abc', 'b')\n  'abc'\n"}
{"task_id": "JavaScript/13", "prompt": "/* Return a greatest common divisor of two integers a and b\n  >>> greatest_common_divisor(3, 5)\n  1\n  >>> greatest_common_divisor(25, 15)\n  5\n  */\nconst greatest_common_divisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatest_common_divisor", "gc": "<|endoftext|>/* Return a greatest common divisor of two integers a and b\n  >>> greatest_common_divisor(3, 5)\n  1\n  >>> greatest_common_divisor(25, 15)\n  5\n  */\nconst greatest_common_divisor = (a, b) => {\n  if (a < b) return greatest_common_divisor(b, a);\n  return gcd(a, b);\n};\n\n/**\n * Return the number of bits needed to represent a number in base b\n * e.g. for base 10, the answer is 5\n * For base 2, the answer is 4\n * For base 16, the answer is 8\n * For base 256, the answer is 16\n */\nconst bits_in_base = (b) => {\n  if (b === 0) return 0;\n  if (b === 1) return 1;\n  if (b === 2) return 2;\n  if (b === 16) return 16;\n  if (b === 32) return 32;\n  if (b === 64) return 64;\n  if (b === 128) return 128;\n  if (b === 256) return 256;\n  throw new Error('Invalid base'+ b);\n};\n\n/**\n * Convert a number to a string in base b\n * e.g. for base 10, the answer is '10'\n * For base 2, the answer is '2'\n * For base 16, the answer is '16'\n * For base 256, the answer is '256'\n */\nconst number_to_string = (n, b) => {\n  if (n < 0) throw new Error('Negative number');\n  if (b === 0) return n.toString();\n  if (b === 1) return n.toString(2);\n  if (b === 2) return n.toString(16);\n  if (b === 16) return n.toString(16);\n  if (b === 32) return n.toString(32);\n  if (b === 64) return n.toString(64);\n  if (b === 128) return n.toString(128);\n  if (b === 256) return n.toString(256);\n  throw new Error('Invalid base'+ b);\n};\n\n/**\n * Convert a number to a string in base b\n * e.g. for base 10, the answer is '10'\n * For base 2, the answer is '2'\n * For base 16, the answer is '16'\n * For base 256, the answer is '256'\n */\nconst number_to_hex = (n, b) => {\n  if (n < 0) throw new Error('Negative number');\n  if (b === 0) return n.toString(16);\n  if (b === 1) return n.toString(16);\n  if (b === 2) return n.toString(16);\n  if (b === 16) return n.toString(16);\n  if (b === 32) return n.toString(16);\n  if (b === 64) return n.toString(16);\n  if (b === 128) return n.toString(16);\n  if (b === 256) return n.toString(16);\n  throw new Error('Invalid base'+ b);\n};\n\n/**\n * Convert a number to a string in base b\n * e.g. for base 10, the answer is '10'\n * For base 2, the answer is '2'\n * For base 16, the answer is '16'\n * For base 256, the answer is '256'\n */\nconst number_to_bech32 = (n, b) => {\n  if (n < 0) throw new Error('Negative number');\n  if (b === 0) return n.toString(16);\n  if (b === 1) return n.toString(16);\n  if (b === 2) return n.toString(16);\n  if (b === 16) return n.toString(16);\n  if (b === 32) return n.toString(16);\n  if (b === 64) return n.toString(16);\n  if (b === 128) return n.toString(16);\n  if (b === 256) return n.toString(16);\n  throw new Error('Invalid base'+ b);\n};\n\n/**\n * Convert a number to a string in base b\n * e.g. for base 10, the answer is '10'\n * For base 2, the answer is '2'\n * For base 16, the answer is '16'\n * For base 256, the answer is '256'\n */\nconst number_to_bech32_hrp = (n, b) => {\n  if (n < 0) throw new Error('Negative number');\n  if (b === 0) return n.toString(16);\n  if (b === 1) return n.toString(16);\n  if (b === 2) return n.toString(16);\n  if (b === 16) return n.toString(16);\n  if (b === 32) return n.toString(16);\n  if (b === 64) return n.toString(16);\n  if (b === 128) return n.toString(16);\n  if (b === 256) return n.toString(16);\n  throw new Error('Invalid base'+ b);\n};\n\n/**\n * Convert a number to a string in base b\n * e.g. for base 10, the answer is '10'\n * For base 2, the answer is '2'\n * For base 16, the answer is '16'\n * For base 256, the answer is '256'\n */\nconst number_to_bech32_hrp2str = (n, b) => {\n  if (n < 0) throw new Error('Negative number');\n  if (b === 0) return n.toString(16);\n  if (b === 1) return n.toString(16);\n  if (b === 2) return n.toString(16);\n  if (b === 16) return n.toString(16);\n  if (b === 32) return n.toString(16);\n  if (b === 64) return n.toString(16);\n  if (b === 128) return n.toString(16);\n  if (b === 256) return n.toString(16);\n  throw new Error('Invalid base'+ b);\n};\n\n/**\n * Convert a number to a string in base b\n * e.g. for base 10, the answer is '10'\n * For base 2, the answer is '2'\n * For base 16, the answer is '16'\n * For base 256, the answer is '256'\n */\nconst number_to_bech32_hrp2str_b = (n, b) => {\n  if (n < 0) throw new Error('Negative number');\n  if (b === 0) return n.toString(16);\n  if (b === 1) return n.toString(16);\n  if (b === 2) return n.toString(16);\n  if (b === 16) return n.toString(16);\n  if (b === 32) return n.toString(16);\n  if (b === 64) return n.toString(16);\n  if (b === 128) return n.toString(16);\n  if (b === 256) return n.toString(16);\n  throw new Error('Invalid base'+ b);\n};\n\n/**\n * Convert a number to a string in base b\n * e.g. for base 10, the answer is '10'\n * For base 2, the answer is '2'\n * For base 16, the answer is '16'\n * For base 256, the answer is '256'\n */\nconst number_to_bech32_hrp2str_b2str = (n, b) => {\n  if (n < 0) throw new Error('Negative number');\n  if (b === 0) return n.toString(16);\n  if (b === 1) return n.toString(16);\n  if (b === 2) return n.toString(16);\n  if (b === 16) return n.toString(16);\n  if (b === 32) return n.toString(16);\n  if (b === 64) return n.toString(16);\n  if (b === 128) return n.toString(16);\n  if (b === 256) return n.toString(16);\n  throw new Error('Invalid base'+ b);\n};\n\n/**\n * Convert a number to a string in base b\n * e.g. for base 10, the answer is '10'\n * For base 2, the answer is '2'\n * For base 16, the answer is '16'\n * For base 256, the answer is '256'\n */\nconst number_to_bech32_hrp2str_b2str_bech32 = (n, b) => {\n  if (n < 0) throw new Error('Negative number');\n  if (b === 0) return n.toString(16);\n  if (b === 1) return n.toString(16);\n  if (b === 2) return n.toString(16);\n  if (b === 16) return n.toString(16);\n  if (b === 32) return n.toString(16);\n  if (b === 64) return n.toString(16);\n  if (b === 128) return n.toString(16);\n  if (b === 256) return n.toString(16);\n  throw new Error('Invalid base'+ b);\n};\n\n/**\n * Convert a number to a string in base b\n * e.g. for base 10, the answer is '10'\n * For base 2, the answer is '2'\n * For base 16, the answer is '16'\n * For base 256, the answer is '"}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> all_prefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst all_prefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "all_prefixes", "gc": "<|endoftext|>/* Return list of all prefixes from shortest to longest of the input string\n  >>> all_prefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst all_prefixes = (string) => {\n  let prefixes = [];\n  let prefix = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let len = string.length;\n  while (i < len) {\n    if (string[i] === prefix) {\n      prefixes.push(prefix);\n      prefix = '';\n      i++;\n      j = 0;\n      k = 0;\n    } else {\n      if (string[i] === prefix) {\n        prefixes.push(prefix);\n        prefix = '';\n      } else {\n        prefix = string[i];\n      }\n      i++;\n      j++;\n      k++;\n    }\n  }\n  return prefixes;\n};\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> all_suffixes('abc')\n  ['c', 'ba', 'ca', 'cb']\n  */\nconst all_suffixes = (string) => {\n  let suffixes = [];\n  let suffix = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let len = string.length;\n  while (i < len) {\n    if (string[i] === suffix) {\n      suffixes.push(suffix);\n      suffix = '';\n      i++;\n      j = 0;\n      k = 0;\n    } else {\n      if (string[i] === suffix) {\n        suffixes.push(suffix);\n        suffix = '';\n      } else {\n        suffix = string[i];\n      }\n      i++;\n      j++;\n      k++;\n    }\n  }\n  return suffixes;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> all_substrings('abc')\n  ['abc', 'ab', 'ba', 'ca', 'cb']\n  */\nconst all_substrings = (string) => {\n  let substrings = [];\n  let substring = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let len = string.length;\n  while (i < len) {\n    if (string[i] === substring) {\n      substrings.push(substring);\n      substring = '';\n      i++;\n      j = 0;\n      k = 0;\n    } else {\n      if (string[i] === substring) {\n        substrings.push(substring);\n        substring = '';\n      } else {\n        substring = string[i];\n      }\n      i++;\n      j++;\n      k++;\n    }\n  }\n  return substrings;\n};\n\n/* Return list of all words from shortest to longest of the input string\n  >>> all_words('abc')\n  ['abc', 'ab', 'ba', 'ca', 'cb']\n  */\nconst all_words = (string) => {\n  let words = [];\n  let word = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let len = string.length;\n  while (i < len) {\n    if (string[i] === word) {\n      words.push(word);\n      word = '';\n      i++;\n      j = 0;\n      k = 0;\n    } else {\n      if (string[i] === word) {\n        words.push(word);\n        word = '';\n      } else {\n        word = string[i];\n      }\n      i++;\n      j++;\n      k++;\n    }\n  }\n  return words;\n};\n\n/* Return list of all words from shortest to longest of the input string\n  >>> all_words('abc')\n  ['abc', 'ab', 'ba', 'ca', 'cb']\n  */\nconst all_words = (string) => {\n  let words = [];\n  let word = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let len = string.length;\n  while (i < len) {\n    if (string[i] === word) {\n      words.push(word);\n      word = '';\n      i++;\n      j = 0;\n      k = 0;\n    } else {\n      if (string[i] === word) {\n        words.push(word);\n        word = '';\n      } else {\n        word = string[i];\n      }\n      i++;\n      j++;\n      k++;\n    }\n  }\n  return words;\n};\n\n/* Return list of all words from shortest to longest of the input string\n  >>> all_words('abc')\n  ['abc', 'ab', 'ba', 'ca', 'cb']\n  */\nconst all_words = (string) => {\n  let words = [];\n  let word = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let len = string.length;\n  while (i < len) {\n    if (string[i] === word) {\n      words.push(word);\n      word = '';\n      i++;\n      j = 0;\n      k = 0;\n    } else {\n      if (string[i] === word) {\n        words.push(word);\n        word = '';\n      } else {\n        word = string[i];\n      }\n      i++;\n      j++;\n      k++;\n    }\n  }\n  return words;\n};\n\n/* Return list of all words from shortest to longest of the input string\n  >>> all_words('abc')\n  ['abc', 'ab', 'ba', 'ca', 'cb']\n  */\nconst all_words = (string) => {\n  let words = [];\n  let word = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let len = string.length;\n  while (i < len) {\n    if (string[i] === word) {\n      words.push(word);\n      word = '';\n      i++;\n      j = 0;\n      k = 0;\n    } else {\n      if (string[i] === word) {\n        words.push(word);\n        word = '';\n      } else {\n        word = string[i];\n      }\n      i++;\n      j++;\n      k++;\n    }\n  }\n  return words;\n};\n\n/* Return list of all words from shortest to longest of the input string\n  >>> all_words('abc')\n  ['abc', 'ab', 'ba', 'ca', 'cb']\n  */\nconst all_words = (string) => {\n  let words = [];\n  let word = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let len = string.length;\n  while (i < len) {\n    if (string[i] === word) {\n      words.push(word);\n      word = '';\n      i++;\n      j = 0;\n      k = 0;\n    } else {\n      if (string[i] === word) {\n        words.push(word);\n        word = '';\n      } else {\n        word = string[i];\n      }\n      i++;\n      j++;\n      k++;\n    }\n  }\n  return words;\n};\n\n/* Return list of all words from shortest to longest of the input string\n  >>> all_words('abc')\n  ['abc', 'ab', 'ba', 'ca', 'cb']\n  */\nconst all_words = (string) => {\n  let words = [];\n  let word = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let len = string.length;\n  while (i < len) {\n    if (string[i] === word) {\n      words.push(word);\n      word = '';\n      i++;\n      j = 0;\n      k = 0;\n    } else {\n      if (string[i] === word) {\n        words.push(word);\n        word = '';\n      } else {\n        word = string[i];\n      }\n      i++;\n      j++;\n      k++;\n    }\n  }\n  return words;\n};\n\n/* Return list of all words from shortest to longest of the input string\n  >>> all_words('abc')\n  ['abc', 'ab', 'ba', 'ca', 'cb']\n  */\nconst all_words = (string) => {\n  let words = [];\n  let word = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let len = string.length;\n  while (i < len) {\n    if (string[i] === word) {\n      words.push(word);\n      word = '';\n      i++;\n      j = 0;\n      k = 0;\n    } else {\n      if (string[i] === word) {\n        words.push(word);\n        word = '';\n      } else {\n        word = string[i];\n      }\n      i++;\n      j++;\n      k++;\n    }\n  }\n  return words;\n};\n\n/* Return list of all words from shortest to lon"}
{"task_id": "JavaScript/15", "prompt": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> string_sequence(0)\n  '0'\n  >>> string_sequence(5)\n  '0 1 2 3 4 5'\n  */\nconst string_sequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "string_sequence", "gc": "<|endoftext|>/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> string_sequence(0)\n  '0'\n  >>> string_sequence(5)\n  '0 1 2 3 4 5'\n  */\nconst string_sequence = (n) => {\n  const str = '';\n  for (let i = 0; i < n; i++) {\n    str += String.fromCharCode(97 + i);\n  }\n  return str;\n};\n\n// Return a string containing space-delimited numbers starting from n inclusive.\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5"}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> count_distinct_characters('xyzXYZ')\n  3\n  >>> count_distinct_characters('Jerry')\n  4\n  */\nconst count_distinct_characters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "count_distinct_characters", "gc": "<|endoftext|>/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> count_distinct_characters('xyzXYZ')\n  3\n  >>> count_distinct_characters('Jerry')\n  4\n  */\nconst count_distinct_characters = (string) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i) === string.charAt(i).toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Given a string, find the longest common subsequence (LCS) of its characters (regardless of case)\n  >>> lcs(['abc', 'def', 'ghi', 'jkl'])\n  'def'\n  */\nconst lcs = (string) => {\n  let lcs = '';\n  let current = string;\n  let previous = string;\n  let i = 0;\n  let j = 0;\n  while (i < current.length && j < previous.length) {\n    if (current.charAt(i) === previous.charAt(j)) {\n      lcs += current.charAt(i);\n      i++;\n      j++;\n    } else {\n      i++;\n    }\n  }\n  return lcs;\n};\n\n/* Given a string, find the longest common subsequence (LCS) of its characters (regardless of case)\n  >>> lcs(['abc', 'def', 'ghi', 'jkl'])\n  'def'\n  */\nconst lcs = (string) => {\n  let lcs = '';\n  let current = string;\n  let previous = string;\n  let i = 0;\n  let j = 0;\n  while (i < current.length && j < previous.length) {\n    if (current.charAt(i) === previous.charAt(j)) {\n      lcs += current.charAt(i);\n      i++;\n      j++;\n    } else {\n      i++;\n    }\n  }\n  return lcs;\n};\n\n/* Given a string, find the longest common subsequence (LCS) of its characters (regardless of case)\n  >>> lcs(['abc', 'def', 'ghi', 'jkl'])\n  'def'\n  */\nconst lcs = (string) => {\n  let lcs = '';\n  let current = string;\n  let previous = string;\n  let i = 0;\n  let j = 0;\n  while (i < current.length && j < previous.length) {\n    if (current.charAt(i) === previous.charAt(j)) {\n      lcs += current.charAt(i);\n      i++;\n      j++;\n    } else {\n      i++;\n    }\n  }\n  return lcs;\n};\n\n/* Given a string, find the longest common subsequence (LCS) of its characters (regardless of case)\n  >>> lcs(['abc', 'def', 'ghi', 'jkl'])\n  'def'\n  */\nconst lcs = (string) => {\n  let lcs = '';\n  let current = string;\n  let previous = string;\n  let i = 0;\n  let j = 0;\n  while (i < current.length && j < previous.length) {\n    if (current.charAt(i) === previous.charAt(j)) {\n      lcs += current.charAt(i);\n      i++;\n      j++;\n    } else {\n      i++;\n    }\n  }\n  return lcs;\n};\n\n/* Given a string, find the longest common subsequence (LCS) of its characters (regardless of case)\n  >>> lcs(['abc', 'def', 'ghi', 'jkl'])\n  'def'\n  */\nconst lcs = (string) => {\n  let lcs = '';\n  let current = string;\n  let previous = string;\n  let i = 0;\n  let j = 0;\n  while (i < current.length && j < previous.length) {\n    if (current.charAt(i) === previous.charAt(j)) {\n      lcs += current.charAt(i);\n      i++;\n      j++;\n    } else {\n      i++;\n    }\n  }\n  return lcs;\n};\n\n/* Given a string, find the longest common subsequence (LCS) of its characters (regardless of case)\n  >>> lcs(['abc', 'def', 'ghi', 'jkl'])\n  'def'\n  */\nconst lcs = (string) => {\n  let lcs = '';\n  let current = string;\n  let previous = string;\n  let i = 0;\n  let j = 0;\n  while (i < current.length && j < previous.length) {\n    if (current.charAt(i) === previous.charAt(j)) {\n      lcs += current.charAt(i);\n      i++;\n      j++;\n    } else {\n      i++;\n    }\n  }\n  return lcs;\n};\n\n/* Given a string, find the longest common subsequence (LCS) of its characters (regardless of case)\n  >>> lcs(['abc', 'def', 'ghi', 'jkl'])\n  'def'\n  */\nconst lcs = (string) => {\n  let lcs = '';\n  let current = string;\n  let previous = string;\n  let i = 0;\n  let j = 0;\n  while (i < current.length && j < previous.length) {\n    if (current.charAt(i) === previous.charAt(j)) {\n      lcs += current.charAt(i);\n      i++;\n      j++;\n    } else {\n      i++;\n    }\n  }\n  return lcs;\n};\n\n/* Given a string, find the longest common subsequence (LCS) of its characters (regardless of case)\n  >>> lcs(['abc', 'def', 'ghi', 'jkl'])\n  'def'\n  */\nconst lcs = (string) => {\n  let lcs = '';\n  let current = string;\n  let previous = string;\n  let i = 0;\n  let j = 0;\n  while (i < current.length && j < previous.length) {\n    if (current.charAt(i) === previous.charAt(j)) {\n      lcs += current.charAt(i);\n      i++;\n      j++;\n    } else {\n      i++;\n    }\n  }\n  return lcs;\n};\n\n/* Given a string, find the longest common subsequence (LCS) of its characters (regardless of case)\n  >>> lcs(['abc', 'def', 'ghi', 'jkl'])\n  'def'\n  */\nconst lcs = (string) => {\n  let lcs = '';\n  let current = string;\n  let previous = string;\n  let i = 0;\n  let j = 0;\n  while (i < current.length && j < previous.length) {\n    if (current.charAt(i) === previous.charAt(j)) {\n      lcs += current.charAt(i);\n      i++;\n      j++;\n    } else {\n      i++;\n    }\n  }\n  return lcs;\n};\n\n/* Given a string, find the longest common subsequence (LCS) of its characters (regardless of case)\n  >>> lcs(['abc', 'def', 'ghi', 'jkl'])\n  'def'\n  */\nconst lcs = (string) => {\n  let lcs = '';\n  let current = string;\n  let previous = string;\n  let i = 0;\n  let j = 0;\n  while (i < current.length && j < previous.length) {\n    if (current.charAt(i) === previous.charAt(j)) {\n      lcs += current.charAt(i);\n      i++;\n      j++;\n    } else {\n      i++;\n    }\n  }\n  return lcs;\n};\n\n/* Given a string, find the longest common subsequence (LCS) of its characters (regardless of case)\n  >>> lcs(['abc', 'def', 'ghi', 'jkl'])\n  'def'\n  */\nconst lcs = (string) => {\n  let lcs = '';\n  let current = string;\n  let previous = string;\n  let i = 0;\n  let j = 0;\n  while (i < current.length && j < previous.length) {\n    if (current.charAt(i) === previous.charAt(j)) {\n      lcs += current.charAt(i);\n      i++;\n      j++;\n    } else {\n      i++;\n    }\n  }\n  return lcs;\n};\n\n/* Given a string, find the longest common subsequence (LCS) of its characters (regardless of case)\n  >>> lcs(['abc', 'def', 'ghi', 'jkl'])\n  'def'\n  */\nconst lcs = (string) => {\n  let lcs = '';\n  let current = string;\n  let previous = string;\n  let i = 0;\n  let j = 0;\n  while (i < current.length && j < previous.length) {\n    if (current.charAt(i) === previous.charAt(j)) {"}
{"task_id": "JavaScript/17", "prompt": "/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parse_music = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parse_music", "gc": "<|endoftext|>/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parse_music('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parse_music = (music_string) => {\n  const notes = music_string.split('|');\n  const result = [];\n  for (let i = 0; i < notes.length; i++) {\n    const note = notes[i];\n    const beats = note.match(/(\\d+)/g);\n    if (beats) {\n      result.push(parseInt(beats[0]));\n    }\n  }\n  return result;\n};\n\n// Given a string, return a list of integers representing how many beats does each note last.\n// For example, given 'o o|.| o| o|.|.|.|.| o o', the output should be:\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nconst parse_notes = (notes) => {\n  const result = [];\n  for (let i = 0; i < notes.length; i++) {\n    const note = notes[i];\n    const beats = note.match(/(\\d+)/g);\n    if (beats) {\n      result.push(parseInt(beats[0]));\n    }\n  }\n  return result;\n};\n\n// Given a string, return a list of integers representing how many beats does each note last.\n// For example, given 'o o|.| o| o|.|.|.|.| o o', the output should be:\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nconst parse_notes_reversed = (notes) => {\n  const result = [];\n  for (let i = 0; i < notes.length; i++) {\n    const note = notes[i];\n    const beats = note.match(/(\\d+)/g);\n    if (beats) {\n      result.push(parseInt(beats[0]));\n    }\n  }\n  return result.slice().reverse();\n};\n\n// Given a string, return a list of integers representing how many beats does each note last.\n// For example, given 'o o|.| o| o|.|.|.|.| o o', the output should be:\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nconst parse_notes_reversed_reversed = (notes) => {\n  const result = [];\n  for (let i = 0; i < notes.length; i++) {\n    const note = notes[i];\n    const beats = note.match(/(\\d+)/g);\n    if (beats) {\n      result.push(parseInt(beats[0]));\n    }\n  }\n  return result.slice().reverse().slice();\n};\n\n// Given a string, return a list of integers representing how many beats does each note last.\n// For example, given 'o o|.| o| o|.|.|.|.| o o', the output should be:\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nconst parse_notes_reversed_reversed_reversed = (notes) => {\n  const result = [];\n  for (let i = 0; i < notes.length; i++) {\n    const note = notes[i];\n    const beats = note.match(/(\\d+)/g);\n    if (beats) {\n      result.push(parseInt(beats[0]));\n    }\n  }\n  return result.slice().reverse().slice().reverse();\n};\n\n// Given a string, return a list of integers representing how many beats does each note last.\n// For example, given 'o o|.| o| o|.|.|.|.| o o', the output should be:\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nconst parse_notes_reversed_reversed_reversed_reversed = (notes) => {\n  const result = [];\n  for (let i = 0; i < notes.length; i++) {\n    const note = notes[i];\n    const beats = note.match(/(\\d+)/g);\n    if (beats) {\n      result.push(parseInt(beats[0]));\n    }\n  }\n  return result.slice().reverse().slice().reverse().slice().reverse();\n};\n\n// Given a string, return a list of integers representing how many beats does each note last.\n// For example, given 'o o|.| o| o|.|.|.|.| o o', the output should be:\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nconst parse_notes_reversed_reversed_reversed_reversed_reversed = (notes) => {\n  const result = [];\n  for (let i = 0; i < notes.length; i++) {\n    const note = notes[i];\n    const beats = note.match(/(\\d+)/g);\n    if (beats) {\n      result.push(parseInt(beats[0]));\n    }\n  }\n  return result.slice().reverse().slice().reverse().slice().reverse().slice().reverse();\n};\n\n// Given a string, return a list of integers representing how many beats does each note last.\n// For example, given 'o o|.| o| o|.|.|.|.| o o', the output should be:\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nconst parse_notes_reversed_reversed_reversed_reversed_reversed_reversed = (notes) => {\n  const result = [];\n  for (let i = 0; i < notes.length; i++) {\n    const note = notes[i];\n    const beats = note.match(/(\\d+)/g);\n    if (beats) {\n      result.push(parseInt(beats[0]));\n    }\n  }\n  return result.slice().reverse().slice().reverse().slice().reverse().slice().reverse().slice().reverse();\n};\n\n// Given a string, return a list of integers representing how many beats does each note last.\n// For example, given 'o o|.| o| o|.|.|.|.| o o', the output should be:\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nconst parse_notes_reversed_reversed_reversed_reversed_reversed_reversed_reversed = (notes) => {\n  const result = [];\n  for (let i = 0; i < notes.length; i++) {\n    const note = notes[i];\n    const beats = note.match(/(\\d+)/g);\n    if (beats) {\n      result.push(parseInt(beats[0]));\n    }\n  }\n  return result.slice().reverse().slice().reverse().slice().reverse().slice().reverse().slice().reverse().slice().reverse();\n};\n\n// Given a string, return a list of integers representing how many beats does each note last.\n// For example, given 'o o|.| o| o|.|.|.|.|.| o o', the output should be:\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nconst parse_notes_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed = (notes) => {\n  const result = [];\n  for (let i = 0; i < notes.length; i++) {\n    const note = notes[i];\n    const beats = note.match(/(\\d+)/g);\n    if (beats) {\n      result.push(parseInt(beats[0]));\n    }\n  }\n  return result.slice().reverse().slice().reverse().slice().reverse().slice().reverse().slice().reverse().slice().reverse().slice().reverse().slice().reverse().slice().reverse().slice().reverse().slice().reverse().slice().reverse().slice().reverse().slice().reverse().slice().reverse().slice().reverse().slice().reverse().slice().reverse().slice().reverse().slice().reverse().slice().reverse().slice().reverse().slice().reverse().slice().reverse().slice().reverse().slice().reverse().slice().reverse().slice().reverse().slice().reverse().slice().reverse().slice().reverse().slice().reverse().slice().reverse().slice().reverse().slice().reverse().slice().reverse().slice().reverse().slice().reverse()."}
{"task_id": "JavaScript/18", "prompt": "/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> how_many_times('', 'a')\n  0\n  >>> how_many_times('aaa', 'a')\n  3\n  >>> how_many_times('aaaa', 'aa')\n  3\n  */\nconst how_many_times = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "how_many_times", "gc": "<|endoftext|>/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> how_many_times('', 'a')\n  0\n  >>> how_many_times('aaa', 'a')\n  3\n  >>> how_many_times('aaaa', 'aa')\n  3\n  */\nconst how_many_times = (string, substring) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = string.length;\n  let m = substring? substring.split('') : [];\n\n  while (i < l && j < m) {\n    if (string.charAt(i) === substring.charAt(j)) {\n      count++;\n      i++;\n      j++;\n    } else if (string.charAt(i)!== substring.charAt(j)) {\n      count++;\n      i++;\n      j++;\n    } else if (string.charAt(i) === substring.charAt(j)) {\n      count++;\n      i++;\n      j++;\n    } else if (string.charAt(i)!== substring.charAt(j)) {\n      count++;\n      i++;\n      j++;\n    } else if (string.charAt(i) === substring.charAt(j)) {\n      count++;\n      i++;\n      j++;\n    } else if (string.charAt(i)!== substring.charAt(j)) {\n      count++;\n      i++;\n      j++;\n    } else if (string.charAt(i) === substring.charAt(j)) {\n      count++;\n      i++;\n      j++;\n    } else if (string.charAt(i)!== substring.charAt(j)) {\n      count++;\n      i++;\n      j++;\n    } else if (string.charAt(i) === substring.charAt(j)) {\n      count++;\n      i++;\n      j++;\n    } else if (string.charAt(i)!== substring.charAt(j)) {\n      count++;\n      i++;\n      j++;\n    } else if (string.charAt(i) === substring.charAt(j)) {\n      count++;\n      i++;\n      j++;\n    } else if (string.charAt(i)!== substring.charAt(j)) {\n      count++;\n      i++;\n      j++;\n    } else if (string.charAt(i) === substring.charAt(j)) {\n      count++;\n      i++;\n      j++;\n    } else if (string.charAt(i)!== substring.charAt(j)) {\n      count++;\n      i++;\n      j++;\n    } else if (string.charAt(i) === substring.charAt(j)) {\n      count++;\n      i++;\n      j++;\n    } else if (string.charAt(i)!== substring.charAt(j)) {\n      count++;\n      i++;\n      j++;\n    } else if (string.charAt(i) === substring.charAt(j)) {\n      count++;\n      i++;\n      j++;\n    } else if (string.charAt(i)!== substring.charAt(j)) {\n      count++;\n      i++;\n      j++;\n    } else if (string.charAt(i) === substring.charAt(j)) {\n      count++;\n      i++;\n      j++;\n    } else if (string.charAt(i)!== substring.charAt(j)) {\n      count++;\n      i++;\n      j++;\n    } else if (string.charAt(i) === substring.charAt(j)) {\n      count++;\n      i++;\n      j++;\n    } else if (string.charAt(i)!== substring.charAt(j)) {\n      count++;\n      i++;\n      j++;\n    } else if (string.charAt(i) === substring.charAt(j)) {\n      count++;\n      i++;\n      j++;\n    } else if (string.charAt(i)!== substring.charAt(j)) {\n      count++;\n      i++;\n      j++;\n    } else if (string.charAt(i) === substring.charAt(j)) {\n      count++;\n      i++;\n      j++;\n    } else if (string.charAt(i)!== substring.charAt(j)) {\n      count++;\n      i++;\n      j++;\n    } else if (string.charAt(i) === substring.charAt(j)) {\n      count++;\n      i++;\n      j++;\n    } else if (string.charAt(i)!== substring.charAt(j)) {\n      count++;\n      i++;\n      j++;\n    } else if (string.charAt(i) === substring.charAt(j)) {\n      count++;\n      i++;\n      j++;\n    } else if (string.charAt(i)!== substring.charAt(j)) {\n      count++;\n      i++;\n      j++;\n    } else if (string.charAt(i) === substring.charAt(j)) {\n      count++;\n      i++;\n      j++;\n    } else if (string.charAt(i)!== substring.charAt(j)) {\n      count++;\n      i++;\n      j++;\n    } else if (string.charAt(i) === substring.charAt(j)) {\n      count++;\n      i++;\n      j++;\n    } else if (string.charAt(i)!== substring.charAt(j)) {\n      count++;\n      i++;\n      j++;\n    } else if (string.charAt(i) === substring.charAt(j)) {\n      count++;\n      i++;\n      j++;\n    } else if (string.charAt(i)!== substring.charAt(j)) {\n      count++;\n      i++;\n      j++;\n    } else if (string.charAt(i) === substring.charAt(j)) {\n      count++;\n      i++;\n      j++;\n    } else if (string.charAt(i)!== substring.charAt(j)) {\n      count++;\n      i++;\n      j++;\n    } else if (string.charAt(i) === substring.charAt(j)) {\n      count++;\n      i++;\n      j++;\n    } else if (string.charAt(i)!== substring.charAt(j)) {\n      count++;\n      i++;\n      j++;\n    } else if (string.charAt(i) === substring.charAt(j)) {\n      count++;\n      i++;\n      j++;\n    } else if (string.charAt(i)!== substring.charAt(j)) {\n      count++;\n      i++;\n      j++;\n    } else if (string.charAt(i) === substring.charAt(j)) {\n      count++;\n      i++;\n      j++;\n    } else if (string.charAt(i)!== substring.charAt(j)) {\n      count++;\n      i++;\n      j++;\n    } else if (string.charAt(i) === substring.charAt(j)) {\n      count++;\n      i++;\n      j++;\n    } else if (string.charAt(i)!== substring.charAt(j)) {\n      count++;\n      i++;\n      j++;\n    } else if (string.charAt(i) === substring.charAt(j)) {\n      count++;\n      i++;\n      j++;\n    } else if (string.charAt(i)!== substring.charAt(j)) {\n      count++;\n      i++;\n      j++;\n    } else if (string.charAt(i) === substring.charAt(j)) {\n      count++;\n      i++;\n      j++;\n    } else if (string.charAt(i)!== substring.charAt(j)) {\n      count++;\n      i++;\n      j++;\n    } else if (string.charAt(i) === substring.charAt(j)) {\n      count++;\n      i++;\n      j++;\n    } else if (string.charAt(i)!== substring.charAt(j)) {\n      count++;\n      i++;\n      j++;\n    } else if (string.charAt(i) === substring.charAt(j)) {\n      count++;\n      i++;\n      j++;\n    } else if (string.charAt(i)!== substring.charAt(j)) {\n      count++;\n      i++;\n      j++;\n    } else if (string.charAt(i) === substring.charAt(j)) {\n      count++;\n      i++;\n      j++;\n    } else if (string.charAt(i)!== substring.charAt(j)) {\n      count++;\n      i++;\n      j++;\n    } else if (string.charAt(i) === substring.charAt(j)) {\n      count++;\n      i++;\n      j++;\n    } else if (string.charAt(i)!== substring.charAt(j)) {\n      count++;\n      i++;\n      j++;\n    } else if (string.charAt(i) === substring.charAt(j)) {\n      count++;\n      i++;\n      j++;\n    } else if (string.charAt(i)!== substring.charAt(j)) {\n      count++;\n      i++;\n      j++;\n    } else if (string.charAt(i) === substring.charAt(j)) {\n      count++;\n      i++;\n      j++;\n    } else if (string.charAt(i)!== substring.charAt(j)) {\n      count++;\n      i++;"}
{"task_id": "JavaScript/19", "prompt": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sort_numbers('three one five')\n  'one three five'\n  */\nconst sort_numbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sort_numbers", "gc": "<|endoftext|>/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sort_numbers('three one five')\n  'one three five'\n  */\nconst sort_numbers = (numbers) => {\n  const numbers_sorted = numbers.split(' ').sort((a, b) => a - b)\n  return numbers_sorted.join(' ')\n}\n\n/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sort_numbers('three one five')\n  'one three five'\n  */\nconst sort_numbers = (numbers) => {\n  const numbers_sorted = numbers.split(' ').sort((a, b) => a - b)\n  return numbers_sorted.join(' ')\n}\n\n/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sort_numbers('three one five')\n  'one three five'\n  */\nconst sort_numbers = (numbers) => {\n  const numbers_sorted = numbers.split(' ').sort((a, b) => a - b)\n  return numbers_sorted.join(' ')\n}\n\n/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sort_numbers('three one five')\n  'one three five'\n  */\nconst sort_numbers = (numbers) => {\n  const numbers_sorted = numbers.split(' ').sort((a, b) => a - b)\n  return numbers_sorted.join(' ')\n}\n\n/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sort_numbers('three one five')\n  'one three five'\n  */\nconst sort_numbers = (numbers) => {\n  const numbers_sorted = numbers.split(' ').sort((a, b) => a - b)\n  return numbers_sorted.join(' ')\n}\n\n/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sort_numbers('three one five')\n  'one three five'\n  */\nconst sort_numbers = (numbers) => {\n  const numbers_sorted = numbers.split(' ').sort((a, b) => a - b)\n  return numbers_sorted.join(' ')\n}\n\n/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sort_numbers('three one five')\n  'one three five'\n  */\nconst sort_numbers = (numbers) => {\n  const numbers_sorted = numbers.split(' ').sort((a, b) => a - b)\n  return numbers_sorted.join(' ')\n}\n\n/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sort_numbers('three one five')\n  'one three five'\n  */\nconst sort_numbers = (numbers) => {\n  const numbers_sorted = numbers.split(' ').sort((a, b) => a - b)\n  return numbers_sorted.join(' ')\n}\n\n/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sort_numbers('three one five')\n  'one three five'\n  */\nconst sort_numbers = (numbers) => {\n  const numbers_sorted = numbers.split(' ').sort((a, b) => a - b)\n  return numbers_sorted.join(' ')\n}\n\n/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sort_numbers('three one five')\n  'one three five'\n  */\nconst sort_numbers = (numbers) => {\n  const numbers_sorted = numbers.split(' ').sort((a, b) => a - b)\n  return numbers_sorted.join(' ')\n}\n\n/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sort_numbers('three one five')\n  'one three five'\n  */\nconst sort_numbers = (numbers) => {\n  const numbers_sorted = numbers.split(' ').sort((a, b) => a - b)\n  return numbers_sorted.join(' ')\n}\n\n/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sort_numbers('three one five')\n  'one three five'\n  */\nconst sort_numbers = (numbers) => {\n  const numbers_sorted = numbers.split(' ').sort((a, b) => a - b)\n  return numbers_sorted.join(' ')\n}\n\n/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sort_numbers('three one five')\n  'one three five'\n  */\nconst sort_numbers = (numbers) => {\n  const numbers_sorted = numbers.split(' ').sort((a, b) => a - b)\n  return numbers_sorted.join(' ')\n}\n\n/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sort_numbers('three one "}
{"task_id": "JavaScript/20", "prompt": "/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst find_closest_elements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "find_closest_elements", "gc": "<|endoftext|>/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst find_closest_elements = (numbers) => {\n  const [min] = numbers.sort((a, b) => a - b)\n  const [max] = numbers.sort((a, b) => b - a)\n  return [min, max]\n}\n\n/* Given a number, return its closest power of 2 to that number.\n  >>> closest_power_of_2(4)\n  2\n  >>> closest_power_of_2(8)\n  4\n  >>> closest_power_of_2(16)\n  8\n  >>> closest_power_of_2(32)\n  16\n  >>> closest_power_of_2(64)\n  32\n  >>> closest_power_of_2(128)\n  64\n  >>> closest_power_of_2(256)\n  128\n  >>> closest_power_of_2(512)\n  256\n  >>> closest_power_of_2(1024)\n  512\n  >>> closest_power_of_2(2048)\n  1024\n  >>> closest_power_of_2(4096)\n  2048\n  >>> closest_power_of_2(8192)\n  4096\n  >>> closest_power_of_2(16384)\n  8192\n  >>> closest_power_of_2(32768)\n  16384\n  >>> closest_power_of_2(65536)\n  32768\n  >>> closest_power_of_2(131072)\n  65536\n  >>> closest_power_of_2(262144)\n  131072\n  >>> closest_power_of_2(524288)\n  262144\n  >>> closest_power_of_2(1048576)\n  524288\n  >>> closest_power_of_2(2097152)\n  1048576\n  >>> closest_power_of_2(4194304)\n  2097152\n  >>> closest_power_of_2(8388608)\n  4194304\n  >>> closest_power_of_2(16777216)\n  8388608\n  >>> closest_power_of_2(33554432)\n  16777216\n  >>> closest_power_of_2(67108864)\n  33554432\n  >>> closest_power_of_2(134217728)\n  67108864\n  >>> closest_power_of_2(268435456)\n  134217728\n  >>> closest_power_of_2(536870912)\n  268435456\n  >>> closest_power_of_2(1073741824)\n  536870912\n  >>> closest_power_of_2(2147483648)\n  1073741824\n  >>> closest_power_of_2(4294967296)\n  2147483648\n  >>> closest_power_of_2(8589934592)\n  4294967296\n  >>> closest_power_of_2(17179869184)\n  8589934592\n  >>> closest_power_of_2(3435973836)\n  17179869184\n  >>> closest_power_of_2(68719476736)\n  3435973836\n  >>> closest_power_of_2(13743895344)\n  68719476736\n  >>> closest_power_of_2(27487790696)\n  13743895344\n  >>> closest_power_of_2(5368709120)\n  27487790696\n  >>> closest_power_of_2(10737418240)\n  5368709120\n  >>> closest_power_of_2(21474836480)\n  10737418240\n  >>> closest_power_of_2(429496729600)\n  21474836480\n  >>> closest_power_of_2(858993459200)\n  429496729600\n  >>> closest_power_of_2(171798691840)\n  858993459200\n  >>> closest_power_of_2(3435973836800)\n  1717986918400\n  >>> closest_power_of_2(68719476736800)\n  3435973836800\n  >>> closest_power_of_2(13743895344000)\n  68719476736800\n  >>> closest_power_of_2(27487790696000)\n  13743895344000\n  >>> closest_power_of_2(5368709120000)\n  27487790696000\n  >>> closest_power_of_2(1073741824000)\n  5368709120000\n  >>> closest_power_of_2(2147483648000)\n  107374182400000\n  >>> closest_power_of_2(429496729600000)\n  2147483648000\n  >>> closest_power_of_2(858993459200000)\n  429496729600000\n  >>> closest_power_of_2(1717986918400000)\n  858993459200000\n  >>> closest_power_of_2(34359738368000)\n  1717986918400000\n  >>> closest_power_of_2(687194767368000)\n  34359738368000\n  >>> closest_power_of_2(13743895344000)\n  687194767368000\n  >>> closest_power_of_2(27487790696000)\n  1374389534400000\n  >>> closest_power_of_2(53687091200000)\n  2748779069600000\n  >>> closest_power_of_2(1073741824000)\n  536870912000000\n  >>> closest_power_of_2(2147483648000)\n  1073741824000000\n  >>> closest_power_of_2(429496729600000)\n  21474836480000000\n  >>> closest_power_of_2(858993459200000)\n  42949672960000000\n  >>> closest_power_of_2(1717986918400000)\n  85899345920000000\n  >>> closest_power_of_2(34359738368000)\n  171798691840000000\n  >>> closest_power_of_2(687194767368000)\n  343597383680000000\n  >>> closest_power_of_2(13743895344000)\n  6871947673680000000\n  >>> closest_power_of_2(27487790696000)\n  137438953440000000\n  >>> closest_power_of_2(53687091200000)\n  274877906960000000\n  >>> closest_power_of_2(1073741824000)\n  53687091200000000\n  >>> closest_power_of_2(2147483648000)\n  107374182400000000\n  >>> closest_power_of_2(429496729600000)\n  214748364800000000\n  >>> closest_power_of_2(858993459200000)\n  429496729600000000\n  >>> closest_power_of_2(1717986918400000)\n  858993459200000000\n  >>> closest_power_of_2(34359738368000)\n  1717986918400000000\n  >>> closest_power_of_2(687194767368000)\n  3435973836800000000\n  >>> closest_power_of_2(13743895344000)\n  68719476736800000000\n  >>> closest_power_of_2(27487790696000)\n  1374389534400000000"}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescale_to_unit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescale_to_unit", "gc": "<|endoftext|>/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescale_to_unit = (numbers) => {\n  const [min, max] = numbers.map((n) => Math.min(n, 1))\n  const scale = max - min\n  return numbers.map((n) => n * scale)\n}\n\n/**\n * Given a number, return its closest power of 2\n * >>> closest_power_of_two(16)\n  2\n  */\nconst closest_power_of_two = (n) => {\n  const log2n = Math.log(n) / Math.LN2\n  return Math.pow(2, Math.floor(log2n))\n}\n\n/**\n * Given a number, return its closest power of 2\n * >>> closest_power_of_two(16)\n  2\n  */\nconst closest_power_of_two_inverse = (n) => {\n  const log2n = Math.log(n) / Math.LN2\n  return Math.pow(2, Math.ceil(log2n))\n}\n\n/**\n * Given a number, return its closest power of 2\n * >>> closest_power_of_two(16)\n  2\n  */\nconst closest_power_of_two_inverse_2d = (n) => {\n  const log2n = Math.log(n) / Math.LN2\n  return Math.pow(2, Math.ceil(log2n))\n}\n\n/**\n * Given a number, return its closest power of 2\n * >>> closest_power_of_two(16)\n  2\n  */\nconst closest_power_of_two_inverse_3d = (n) => {\n  const log2n = Math.log(n) / Math.LN2\n  return Math.pow(2, Math.ceil(log2n))\n}\n\n/**\n * Given a number, return its closest power of 2\n * >>> closest_power_of_two(16)\n  2\n  */\nconst closest_power_of_two_inverse_4d = (n) => {\n  const log2n = Math.log(n) / Math.LN2\n  return Math.pow(2, Math.ceil(log2n))\n}\n\n/**\n * Given a number, return its closest power of 2\n * >>> closest_power_of_two(16)\n  2\n  */\nconst closest_power_of_two_inverse_5d = (n) => {\n  const log2n = Math.log(n) / Math.LN2\n  return Math.pow(2, Math.ceil(log2n))\n}\n\n/**\n * Given a number, return its closest power of 2\n * >>> closest_power_of_two(16)\n  2\n  */\nconst closest_power_of_two_inverse_6d = (n) => {\n  const log2n = Math.log(n) / Math.LN2\n  return Math.pow(2, Math.ceil(log2n))\n}\n\n/**\n * Given a number, return its closest power of 2\n * >>> closest_power_of_two(16)\n  2\n  */\nconst closest_power_of_two_inverse_7d = (n) => {\n  const log2n = Math.log(n) / Math.LN2\n  return Math.pow(2, Math.ceil(log2n))\n}\n\n/**\n * Given a number, return its closest power of 2\n * >>> closest_power_of_two(16)\n  2\n  */\nconst closest_power_of_two_inverse_8d = (n) => {\n  const log2n = Math.log(n) / Math.LN2\n  return Math.pow(2, Math.ceil(log2n))\n}\n\n/**\n * Given a number, return its closest power of 2\n * >>> closest_power_of_two(16)\n  2\n  */\nconst closest_power_of_two_inverse_9d = (n) => {\n  const log2n = Math.log(n) / Math.LN2\n  return Math.pow(2, Math.ceil(log2n))\n}\n\n/**\n * Given a number, return its closest power of 2\n * >>> closest_power_of_two(16)\n  2\n  */\nconst closest_power_of_two_inverse_10d = (n) => {\n  const log2n = Math.log(n) / Math.LN2\n  return Math.pow(2, Math.ceil(log2n))\n}\n\n/**\n * Given a number, return its closest power of 2\n * >>> closest_power_of_two(16)\n  2\n  */\nconst closest_power_of_two_inverse_11d = (n) => {\n  const log2n = Math.log(n) / Math.LN2\n  return Math.pow(2, Math.ceil(log2n))\n}\n\n/**\n * Given a number, return its closest power of 2\n * >>> closest_power_of_two(16)\n  2\n  */\nconst closest_power_of_two_inverse_12d = (n) => {\n  const log2n = Math.log(n) / Math.LN2\n  return Math.pow(2, Math.ceil(log2n))\n}\n\n/**\n * Given a number, return its closest power of 2\n * >>> closest_power_of_two(16)\n  2\n  */\nconst closest_power_of_two_inverse_13d = (n) => {\n  const log2n = Math.log(n) / Math.LN2\n  return Math.pow(2, Math.ceil(log2n))\n}\n\n/**\n * Given a number, return its closest power of 2\n * >>> closest_power_of_two(16)\n  2\n  */\nconst closest_power_of_two_inverse_14d = (n) => {\n  const log2n = Math.log(n) / Math.LN2\n  return Math.pow(2, Math.ceil(log2n))\n}\n\n/**\n * Given a number, return its closest power of 2\n * >>> closest_power_of_two(16)\n  2\n  */\nconst closest_power_of_two_inverse_15d = (n) => {\n  const log2n = Math.log(n) / Math.LN2\n  return Math.pow(2, Math.ceil(log2n))\n}\n\n/**\n * Given a number, return its closest power of 2\n * >>> closest_power_of_two(16)\n  2\n  */\nconst closest_power_of_two_inverse_16d = (n) => {\n  const log2n = Math.log(n) / Math.LN2\n  return Math.pow(2, Math.ceil(log2n))\n}\n\n/**\n * Given a number, return its closest power of 2\n * >>> closest_power_of_two(16)\n  2\n  */\nconst closest_power_of_two_inverse_17d = (n) => {\n  const log2n = Math.log(n) / Math.LN2\n  return Math.pow(2, Math.ceil(log2n))\n}\n\n/**\n * Given a number, return its closest power of 2\n * >>> closest_power_of_two(16)\n  2\n  */\nconst closest_power_of_two_inverse_18d = (n) => {\n  const log2n = Math.log(n) / Math.LN2\n  return Math.pow(2, Math.ceil(log2n))\n}\n\n/**\n * Given a number, return its closest power of 2\n * >>> closest_power_of_two(16)\n  2\n  */\nconst closest_power_of_two_inverse_19d = (n) => {\n  const log2n = Math.log(n) / Math.LN2\n  return Math.pow(2, Math.ceil(log2n))\n}\n\n/**\n * Given a number, return its closest power of 2\n * >>> closest_power_of_two(16)\n  2\n  */\nconst closest_power_of_two_inverse_20d = (n) => {\n  const log2n = Math.log(n) / Math.LN2\n  return Math.pow(2, Math.ceil(log2n))\n}\n\n/**\n * Given a number, return its closest power of 2\n * >>> closest_power_of_two(16)\n  2\n  */\nconst closest_power_of_two_inverse_21d = (n) => {\n  const log2n = Math.log(n) / Math.LN2\n  return Math.pow(2, Math.ceil(log2n))\n}\n\n/**\n * Given a number, return its closest power of 2\n * >>> closest_power_of_two(16)\n  2\n  */\nconst closest_power_of_two_inverse_22d = (n) => {\n  const log2n = Math.log(n) / Math.LN2\n  return Math.pow(2, Math."}
{"task_id": "JavaScript/22", "prompt": "/* Filter given list of any python values only for integers\n  >>> filter_integers(['a', 3.14, 5])\n  [5]\n  >>> filter_integers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filter_integers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filter_integers", "gc": "<|endoftext|>/* Filter given list of any python values only for integers\n  >>> filter_integers(['a', 3.14, 5])\n  [5]\n  >>> filter_integers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filter_integers = (values) => {\n  return values.filter(value => typeof value === 'number');\n};\n\n/**\n * Filter given list of any python values only for floats\n  >>> filter_integers(['a', 3.14, 5.0])\n  [5.0]\n  >>> filter_integers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3, 'abc']\n  */\nconst filter_floats = (values) => {\n  return values.filter(value => typeof value === 'number' && isFinite(value));\n};\n\n/**\n * Filter given list of any python values only for strings\n  >>> filter_integers(['a', 3.14, 5.0, 'abc', {}, []])\n  [5.0, 'abc']\n  >>> filter_integers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3, 'abc']\n  */\nconst filter_strings = (values) => {\n  return values.filter(value => typeof value ==='string');\n};\n\n/**\n * Filter given list of any python values only for booleans\n  >>> filter_integers(['a', 3.14, 5.0, 'abc', {}, []])\n  [5.0, 'abc']\n  >>> filter_integers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3, 'abc']\n  */\nconst filter_booleans = (values) => {\n  return values.filter(value => typeof value === 'boolean');\n};\n\n/**\n * Filter given list of any python values only for None\n  >>> filter_integers(['a', 3.14, 5.0, 'abc', {}, []])\n  [5.0, 'abc']\n  >>> filter_integers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3, 'abc']\n  */\nconst filter_nones = (values) => {\n  return values.filter(value => value === null);\n};\n\n/**\n * Filter given list of any python values only for empty lists\n  >>> filter_integers(['a', 3.14, 5.0, 'abc', {}, []])\n  [5.0, 'abc']\n  >>> filter_integers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3, 'abc']\n  */\nconst filter_empty_lists = (values) => {\n  return values.filter(value => Array.isArray(value) && value.length === 0);\n};\n\n/**\n * Filter given list of any python values only for empty dictionaries\n  >>> filter_integers(['a', 3.14, 5.0, 'abc', {}, []])\n  [5.0, 'abc']\n  >>> filter_integers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3, 'abc']\n  */\nconst filter_empty_dictionaries = (values) => {\n  return values.filter(value => typeof value === 'object' &&!Object.keys(value).length);\n};\n\n/**\n * Filter given list of any python values only for empty strings\n  >>> filter_integers(['a', 3.14, 5.0, 'abc', {}, []])\n  [5.0, 'abc']\n  >>> filter_integers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3, 'abc']\n  */\nconst filter_empty_strings = (values) => {\n  return values.filter(value => typeof value ==='string' && value.length === 0);\n};\n\n/**\n * Filter given list of any python values only for empty booleans\n  >>> filter_integers(['a', 3.14, 5.0, 'abc', {}, []])\n  [5.0, 'abc']\n  >>> filter_integers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3, 'abc']\n  */\nconst filter_empty_booleans = (values) => {\n  return values.filter(value => typeof value === 'boolean' && value.length === 0);\n};\n\n/**\n * Filter given list of any python values only for empty None\n  >>> filter_integers(['a', 3.14, 5.0, 'abc', {}, []])\n  [5.0, 'abc']\n  >>> filter_integers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3, 'abc']\n  */\nconst filter_empty_nones = (values) => {\n  return values.filter(value => value === null);\n};\n\n/**\n * Filter given list of any python values only for empty lists\n  >>> filter_integers(['a', 3.14, 5.0, 'abc', {}, []])\n  [5.0, 'abc']\n  >>> filter_integers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3, 'abc']\n  */\nconst filter_empty_arrays = (values) => {\n  return values.filter(value => Array.isArray(value) && value.length === 0);\n};\n\n/**\n * Filter given list of any python values only for empty dictionaries\n  >>> filter_integers(['a', 3.14, 5.0, 'abc', {}, []])\n  [5.0, 'abc']\n  >>> filter_integers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3, 'abc']\n  */\nconst filter_empty_dictionaries = (values) => {\n  return values.filter(value => typeof value === 'object' &&!Object.keys(value).length);\n};\n\n/**\n * Filter given list of any python values only for empty strings\n  >>> filter_integers(['a', 3.14, 5.0, 'abc', {}, []])\n  [5.0, 'abc']\n  >>> filter_integers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3, 'abc']\n  */\nconst filter_empty_strings = (values) => {\n  return values.filter(value => typeof value ==='string' && value.length === 0);\n};\n\n/**\n * Filter given list of any python values only for empty booleans\n  >>> filter_integers(['a', 3.14, 5.0, 'abc', {}, []])\n  [5.0, 'abc']\n  >>> filter_integers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3, 'abc']\n  */\nconst filter_empty_booleans = (values) => {\n  return values.filter(value => typeof value === 'boolean' && value.length === 0);\n};\n\n/**\n * Filter given list of any python values only for empty None\n  >>> filter_integers(['a', 3.14, 5.0, 'abc', {}, []])\n  [5.0, 'abc']\n  >>> filter_integers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3, 'abc']\n  */\nconst filter_empty_nones = (values) => {\n  return values.filter(value => value === null);\n};\n\n/**\n * Filter given list of any python values only for empty arrays\n  >>> filter_integers(['a', 3.14, 5.0, 'abc', {}, []])\n  [5.0, 'abc']\n  >>> filter_integers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3, 'abc']\n  */\nconst filter_empty_arrays = (values) => {\n  return values.filter(value => Array.isArray(value) && value.length === 0);\n};\n\n/**\n * Filter given list of any python values only for empty dictionaries\n  >>> filter_integers(['a', 3.14, 5.0, 'abc', {}, []])\n  [5.0, 'abc']\n  >>> filter_integers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3, 'abc']\n  */\nconst filter_empty_dictionaries = (values) => {\n  return values.filter(value => typeof value === 'object' &&!Object.keys(value).length);\n};\n\n/**\n * Filter given list of any python values only for empty strings\n  >>> filter_integers(['a', 3.14, 5.0, 'abc', {}, []])\n  [5.0, 'abc']\n  >>> filter_integers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3, 'abc']\n  */\nconst filter_empty_strings = (values) => {\n  return values.filter(value => typeof value ==='string' && value.length === 0);\n};\n\n/**\n * Filter given list of any python values only for empty booleans\n  >>> filter_integers(['a', 3.14, 5.0, 'abc', {}, []])\n  [5.0, 'abc']\n  >>> filter_integers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3, 'abc']\n  */\nconst filter_empty_booleans = (values) => {\n  return values."}
{"task_id": "JavaScript/23", "prompt": "/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "gc": "<|endoftext|>/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  let length = 0;\n  for (let i = 0; i < string.length; i++) {\n    length += string.charCodeAt(i).length;\n  }\n  return length;\n};\n\n/**\n * Return true if given string starts with given prefix\n * >>> startsWith('abc', 'ab')\n  true\n  >>> startsWith('abc', 'abc')\n  false\n  */\nconst startsWith = (string, prefix) => {\n  return string.startsWith(prefix);\n};\n\n/**\n * Return true if given string ends with given suffix\n * >>> endsWith('abc', 'ab')\n  true\n  >>> endsWith('abc', 'abc')\n  false\n  */\nconst endsWith = (string, suffix) => {\n  return string.endsWith(suffix);\n};\n\n/**\n * Return true if given string starts with given prefix\n * >>> startsWith('abc', 'ab')\n  true\n  >>> startsWith('abc', 'abc')\n  false\n  */\nconst startsWithIgnoreCase = (string, prefix) => {\n  return string.startsWith(prefix, StringCaseInsensitive);\n};\n\n/**\n * Return true if given string ends with given suffix\n * >>> endsWith('abc', 'ab')\n  true\n  >>> endsWith('abc', 'abc')\n  false\n  */\nconst endsWithIgnoreCase = (string, suffix) => {\n  return string.endsWith(suffix, StringCaseInsensitive);\n};\n\n/**\n * Return true if given string starts with given prefix\n * >>> startsWith('abc', 'ab')\n  true\n  >>> startsWith('abc', 'abc')\n  false\n  */\nconst startsWithIgnoreCaseIgnoreCase = (string, prefix) => {\n  return string.startsWith(prefix, StringCaseInsensitiveIgnoreCase);\n};\n\n/**\n * Return true if given string ends with given suffix\n * >>> endsWith('abc', 'ab')\n  true\n  >>> endsWith('abc', 'abc')\n  false\n  */\nconst endsWithIgnoreCaseIgnoreCase = (string, suffix) => {\n  return string.endsWith(suffix, StringCaseInsensitiveIgnoreCase);\n};\n\n/**\n * Return true if given string starts with given prefix\n * >>> startsWith('abc', 'ab')\n  true\n  >>> startsWith('abc', 'abc')\n  false\n  */\nconst startsWithIgnoreCaseIgnoreCaseIgnoreCase = (string, prefix) => {\n  return string.startsWith(prefix, StringCaseInsensitiveIgnoreCaseIgnoreCase);\n};\n\n/**\n * Return true if given string ends with given suffix\n * >>> endsWith('abc', 'ab')\n  true\n  >>> endsWith('abc', 'abc')\n  false\n  */\nconst endsWithIgnoreCaseIgnoreCaseIgnoreCase = (string, suffix) => {\n  return string.endsWith(suffix, StringCaseInsensitiveIgnoreCaseIgnoreCase);\n};\n\n/**\n * Return true if given string starts with given prefix\n * >>> startsWith('abc', 'ab')\n  true\n  >>> startsWith('abc', 'abc')\n  false\n  */\nconst startsWithIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCase = (string, prefix) => {\n  return string.startsWith(prefix, StringCaseInsensitiveIgnoreCaseIgnoreCaseIgnoreCase);\n};\n\n/**\n * Return true if given string ends with given suffix\n * >>> endsWith('abc', 'ab')\n  true\n  >>> endsWith('abc', 'abc')\n  false\n  */\nconst endsWithIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCase = (string, suffix) => {\n  return string.endsWith(suffix, StringCaseInsensitiveIgnoreCaseIgnoreCaseIgnoreCase);\n};\n\n/**\n * Return true if given string starts with given prefix\n * >>> startsWith('abc', 'ab')\n  true\n  >>> startsWith('abc', 'abc')\n  false\n  */\nconst startsWithIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCase = (string, prefix) => {\n  return string.startsWith(prefix, StringCaseInsensitiveIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCase);\n};\n\n/**\n * Return true if given string ends with given suffix\n * >>> endsWith('abc', 'ab')\n  true\n  >>> endsWith('abc', 'abc')\n  false\n  */\nconst endsWithIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCase = (string, suffix) => {\n  return string.endsWith(suffix, StringCaseInsensitiveIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCase);\n};\n\n/**\n * Return true if given string starts with given prefix\n * >>> startsWith('abc', 'ab')\n  true\n  >>> startsWith('abc', 'abc')\n  false\n  */\nconst startsWithIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCase = (string, prefix) => {\n  return string.startsWith(prefix, StringCaseInsensitiveIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCase);\n};\n\n/**\n * Return true if given string ends with given suffix\n * >>> endsWith('abc', 'ab')\n  true\n  >>> endsWith('abc', 'abc')\n  false\n  */\nconst endsWithIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCase = (string, suffix) => {\n  return string.endsWith(suffix, StringCaseInsensitiveIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCase);\n};\n\n/**\n * Return true if given string starts with given prefix\n * >>> startsWith('abc', 'ab')\n  true\n  >>> startsWith('abc', 'abc')\n  false\n  */\nconst startsWithIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCase = (string, prefix) => {\n  return string.startsWith(prefix, StringCaseInsensitiveIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCase);\n};\n\n/**\n * Return true if given string ends with given suffix\n * >>> endsWith('abc', 'ab')\n  true\n  >>> endsWith('abc', 'abc')\n  false\n  */\nconst endsWithIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCase = (string, suffix) => {\n  return string.endsWith(suffix, StringCaseInsensitiveIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCase);\n};\n\n/**\n * Return true if given string starts with given prefix\n * >>> startsWith('abc', 'ab')\n  true\n  >>> startsWith('abc', 'abc')\n  false\n  */\nconst startsWithIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCase = (string, prefix) => {\n  return string.startsWith(prefix, StringCaseInsensitiveIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCase);\n};\n\n/**\n * Return true if given string ends with given suffix\n * >>> endsWith('abc', 'ab')\n  true\n  >>> endsWith('abc', 'abc')\n  false\n  */\nconst endsWithIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCase = (string, suffix) => {\n  return string.endsWith(suffix, StringCaseInsensitiveIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCase);\n};\n\n/**\n * Return true if given string starts with given prefix\n * >>> startsWith('abc', 'ab')\n  true\n  >>> startsWith('abc', 'abc')\n  false\n  */\nconst startsWithIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCase = (string, prefix) => {\n  return string.startsWith(prefix, StringCaseInsensitiveIgnoreCaseIgnoreCaseIgnoreCase"}
{"task_id": "JavaScript/24", "prompt": "/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largest_divisor(15)\n  5\n  */\nconst largest_divisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largest_divisor", "gc": "<|endoftext|>/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largest_divisor(15)\n  5\n  */\nconst largest_divisor = (n) => {\n  let divisor = 1;\n  while (divisor < n) {\n    divisor += 1;\n  }\n  return divisor;\n};\n\n/* Given a number n, return the largest number that divides n evenly, smaller than n\n  >>> largest_divisor_evenly(15)\n  5\n  */\nconst largest_divisor_evenly = (n) => {\n  let divisor = 1;\n  while (divisor < n) {\n    divisor += 1;\n    if (n % divisor === 0) {\n      return divisor;\n    }\n  }\n  return 1;\n};\n\n/* Given a number n, return the largest number that divides n evenly, smaller than n\n  >>> largest_divisor_evenly_smaller(15)\n  5\n  */\nconst largest_divisor_evenly_smaller = (n) => {\n  let divisor = 1;\n  while (divisor < n) {\n    divisor += 1;\n    if (n % divisor === 0) {\n      return divisor;\n    }\n    if (divisor % 2 === 0) {\n      return 1;\n    }\n  }\n  return 1;\n};\n\n/* Given a number n, return the largest number that divides n evenly, smaller than n\n  >>> largest_divisor_evenly_smaller_evenly(15)\n  5\n  */\nconst largest_divisor_evenly_smaller_evenly = (n) => {\n  let divisor = 1;\n  while (divisor < n) {\n    divisor += 1;\n    if (n % divisor === 0) {\n      return divisor;\n    }\n    if (divisor % 2 === 0) {\n      return 1;\n    }\n    if (n % divisor === 0 && divisor % 2 === 0) {\n      return 1;\n    }\n  }\n  return 1;\n};\n\n/* Given a number n, return the largest number that divides n evenly, smaller than n\n  >>> largest_divisor_evenly_smaller_evenly_smaller(15)\n  5\n  */\nconst largest_divisor_evenly_smaller_evenly_smaller = (n) => {\n  let divisor = 1;\n  while (divisor < n) {\n    divisor += 1;\n    if (n % divisor === 0) {\n      return divisor;\n    }\n    if (divisor % 2 === 0) {\n      return 1;\n    }\n    if (n % divisor === 0 && divisor % 2 === 0) {\n      return 1;\n    }\n    if (n % divisor === 0 && divisor % 2 === 0 && divisor % 3 === 0) {\n      return 1;\n    }\n    if (n % divisor === 0 && divisor % 2 === 0 && divisor % 3 === 0 && divisor % 4 === 0) {\n      return 1;\n    }\n  }\n  return 1;\n};\n\n/* Given a number n, return the largest number that divides n evenly, smaller than n\n  >>> largest_divisor_evenly_smaller_evenly_smaller_evenly(15)\n  5\n  */\nconst largest_divisor_evenly_smaller_evenly_smaller_evenly = (n) => {\n  let divisor = 1;\n  while (divisor < n) {\n    divisor += 1;\n    if (n % divisor === 0) {\n      return divisor;\n    }\n    if (divisor % 2 === 0) {\n      return 1;\n    }\n    if (n % divisor === 0 && divisor % 2 === 0) {\n      return 1;\n    }\n    if (n % divisor === 0 && divisor % 2 === 0 && divisor % 3 === 0) {\n      return 1;\n    }\n    if (n % divisor === 0 && divisor % 2 === 0 && divisor % 3 === 0 && divisor % 4 === 0) {\n      return 1;\n    }\n  }\n  return 1;\n};\n\n/* Given a number n, return the largest number that divides n evenly, smaller than n\n  >>> largest_divisor_evenly_smaller_evenly_smaller_evenly_smaller(15)\n  5\n  */\nconst largest_divisor_evenly_smaller_evenly_smaller_evenly_smaller = (n) => {\n  let divisor = 1;\n  while (divisor < n) {\n    divisor += 1;\n    if (n % divisor === 0) {\n      return divisor;\n    }\n    if (divisor % 2 === 0) {\n      return 1;\n    }\n    if (n % divisor === 0 && divisor % 2 === 0) {\n      return 1;\n    }\n    if (n % divisor === 0 && divisor % 2 === 0 && divisor % 3 === 0) {\n      return 1;\n    }\n    if (n % divisor === 0 && divisor % 2 === 0 && divisor % 3 === 0 && divisor % 4 === 0) {\n      return 1;\n    }\n    if (n % divisor === 0 && divisor % 2 === 0 && divisor % 3 === 0 && divisor % 4 === 0 && divisor % 5 === 0) {\n      return 1;\n    }\n    if (n % divisor === 0 && divisor % 2 === 0 && divisor % 3 === 0 && divisor % 4 === 0 && divisor % 5 === 0 && divisor % 6 === 0) {\n      return 1;\n    }\n    if (n % divisor === 0 && divisor % 2 === 0 && divisor % 3 === 0 && divisor % 4 === 0 && divisor % 5 === 0 && divisor % 6 === 0 && divisor % 7 === 0) {\n      return 1;\n    }\n    if (n % divisor === 0 && divisor % 2 === 0 && divisor % 3 === 0 && divisor % 4 === 0 && divisor % 5 === 0 && divisor % 6 === 0 && divisor % 7 === 0 && divisor % 8 === 0) {\n      return 1;\n    }\n    if (n % divisor === 0 && divisor % 2 === 0 && divisor % 3 === 0 && divisor % 4 === 0 && divisor % 5 === 0 && divisor % 6 === 0 && divisor % 7 === 0 && divisor % 8 === 0 && divisor % 9 === 0) {\n      return 1;\n    }\n    if (n % divisor === 0 && divisor % 2 === 0 && divisor % 3 === 0 && divisor % 4 === 0 && divisor % 5 === 0 && divisor % 6 === 0 && divisor % 7 === 0 && divisor % 8 === 0 && divisor % 9 === 0 && divisor % 10 === 0) {\n      return 1;\n    }\n    if (n % divisor === 0 && divisor % 2 === 0 && divisor % 3 === 0 && divisor % 4 === 0 && divisor % 5 === 0 && divisor % 6 === 0 && divisor % 7 === 0 && divisor % 8 === 0 && divisor % 9 === 0 && divisor % 10 === 0 && divisor % 11 === 0) {\n      return 1;\n    }\n    if (n % divisor === 0 && divisor % 2 === 0 && divisor % 3 === 0 && divisor % 4 === 0 && divisor % 5 === 0 && divisor % 6 === 0 && divisor % 7 === 0 && divisor % 8 === 0 && divisor % 9 === 0 && divisor % 10 === 0 && divisor % 11 === 0 && divisor % 12 === 0) {\n      return 1;\n    }\n    if (n % divisor === 0 && divisor % 2 === 0 && divisor % 3 === 0 && divisor % 4 === 0 && divisor % 5 === 0 && divisor % 6 === 0 && divisor % 7 === 0 && divisor % 8 === 0 && divisor % 9 === 0 && divisor % 10 === 0 && divisor % 11 === 0 && divisor % 12 === 0 && divisor % 13 === 0) {\n      return 1;\n    }\n    if (n % divisor === 0 && divisor % 2 === 0 && divisor % 3 === 0 && divisor % 4 === 0 && divisor % 5 === 0 && divisor % 6 === 0 && divisor % 7 === 0 && divisor % 8 === 0 && divisor % 9 === 0 && divisor % 10 === 0 && divisor % 11 === 0 && divisor % 12 === 0 && divisor % 13 === 0 && divisor % 14 === 0) {\n      return 1;\n    }\n    if (n % divisor === 0 && divisor % 2 === 0 && divisor % 3 === 0 && divisor % 4 === 0 && divisor % 5 === 0 && divisor % 6 === 0 && divisor % 7 === 0 && divisor % 8 === 0 && divisor % "}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "gc": "<|endoftext|>/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  const factors = [];\n  let i = 1;\n  let j = 1;\n  let k = 1;\n  let temp = 1;\n  let temp2 = 1;\n  let temp3 = 1;\n  let temp4 = 1;\n  let temp5 = 1;\n  let temp6 = 1;\n  let temp7 = 1;\n  let temp8 = 1;\n  let temp9 = 1;\n  let temp10 = 1;\n  let temp11 = 1;\n  let temp12 = 1;\n  let temp13 = 1;\n  let temp14 = 1;\n  let temp15 = 1;\n  let temp16 = 1;\n  let temp17 = 1;\n  let temp18 = 1;\n  let temp19 = 1;\n  let temp20 = 1;\n  let temp21 = 1;\n  let temp22 = 1;\n  let temp23 = 1;\n  let temp24 = 1;\n  let temp25 = 1;\n  let temp26 = 1;\n  let temp27 = 1;\n  let temp28 = 1;\n  let temp29 = 1;\n  let temp30 = 1;\n  let temp31 = 1;\n  let temp32 = 1;\n  let temp33 = 1;\n  let temp34 = 1;\n  let temp35 = 1;\n  let temp36 = 1;\n  let temp37 = 1;\n  let temp38 = 1;\n  let temp39 = 1;\n  let temp40 = 1;\n  let temp41 = 1;\n  let temp42 = 1;\n  let temp43 = 1;\n  let temp44 = 1;\n  let temp45 = 1;\n  let temp46 = 1;\n  let temp47 = 1;\n  let temp48 = 1;\n  let temp49 = 1;\n  let temp50 = 1;\n  let temp51 = 1;\n  let temp52 = 1;\n  let temp53 = 1;\n  let temp54 = 1;\n  let temp55 = 1;\n  let temp56 = 1;\n  let temp57 = 1;\n  let temp58 = 1;\n  let temp59 = 1;\n  let temp60 = 1;\n  let temp61 = 1;\n  let temp62 = 1;\n  let temp63 = 1;\n  let temp64 = 1;\n  let temp65 = 1;\n  let temp66 = 1;\n  let temp67 = 1;\n  let temp68 = 1;\n  let temp69 = 1;\n  let temp70 = 1;\n  let temp71 = 1;\n  let temp72 = 1;\n  let temp73 = 1;\n  let temp74 = 1;\n  let temp75 = 1;\n  let temp76 = 1;\n  let temp77 = 1;\n  let temp78 = 1;\n  let temp79 = 1;\n  let temp80 = 1;\n  let temp81 = 1;\n  let temp82 = 1;\n  let temp83 = 1;\n  let temp84 = 1;\n  let temp85 = 1;\n  let temp86 = 1;\n  let temp87 = 1;\n  let temp88 = 1;\n  let temp89 = 1;\n  let temp90 = 1;\n  let temp91 = 1;\n  let temp92 = 1;\n  let temp93 = 1;\n  let temp94 = 1;\n  let temp95 = 1;\n  let temp96 = 1;\n  let temp97 = 1;\n  let temp98 = 1;\n  let temp99 = 1;\n  let temp100 = 1;\n  let temp101 = 1;\n  let temp102 = 1;\n  let temp103 = 1;\n  let temp104 = 1;\n  let temp105 = 1;\n  let temp106 = 1;\n  let temp107 = 1;\n  let temp108 = 1;\n  let temp109 = 1;\n  let temp110 = 1;\n  let temp111 = 1;\n  let temp112 = 1;\n  let temp113 = 1;\n  let temp114 = 1;\n  let temp115 = 1;\n  let temp116 = 1;\n  let temp117 = 1;\n  let temp118 = 1;\n  let temp119 = 1;\n  let temp120 = 1;\n  let temp121 = 1;\n  let temp122 = 1;\n  let temp123 = 1;\n  let temp124 = 1;\n  let temp125 = 1;\n  let temp126 = 1;\n  let temp127 = 1;\n  let temp128 = 1;\n  let temp129 = 1;\n  let temp130 = 1;\n  let temp131 = 1;\n  let temp132 = 1;\n  let temp133 = 1;\n  let temp134 = 1;\n  let temp135 = 1;\n  let temp136 = 1;\n  let temp137 = 1;\n  let temp138 = 1;\n  let temp139 = 1;\n  let temp140 = 1;\n  let temp141 = 1;\n  let temp142 = 1;\n  let temp143 = 1;\n  let temp144 = 1;\n  let temp145 = 1;\n  let temp146 = 1;\n  let temp147 = 1;\n  let temp148 = 1;\n  let temp149 = 1;\n  let temp150 = 1;\n  let temp151 = 1;\n  let temp152 = 1;\n  let temp153 = 1;\n  let temp154 = 1;\n  let temp155 = 1;\n  let temp156 = 1;\n  let temp157 = 1;\n  let temp158 = 1;\n  let temp159 = 1;\n  let temp160 = 1;\n  let temp161 = 1;\n  let temp162 = 1;\n  let temp163 = 1;\n  let temp164 = 1;\n  let temp165 = 1;\n  let temp166 = 1;\n  let temp167 = 1;\n  let temp168 = 1;\n  let temp169 = 1;\n  let temp170 = 1;\n  let temp171 = 1;\n  let temp172 = 1;\n  let temp173 = 1;\n  let temp174 = 1;\n  let temp175 = 1;\n  let temp176 = 1;\n  let temp177 = 1;\n  let temp178 = 1;\n  let temp179 = 1;\n  let temp180 = 1;\n  let temp181 = 1;\n  let temp182 = 1;\n  let temp183 = 1;\n  let temp184 = 1;\n  let temp185 = 1;\n  let temp186 = 1;\n  let temp187 = 1;\n  let temp188 = 1;\n  let temp189 = 1;\n  let temp190 = 1;\n  let temp191 = 1;\n  let temp192 = 1;\n  let temp193 = 1;\n  let temp194 = 1;\n  let temp195 = 1;\n  let temp196 = 1;\n  let temp197 = 1;\n  let temp198 = 1;\n  let temp199 = 1;\n  let temp200 = 1;\n  let temp201 = 1;\n  let temp202 = 1;\n  let temp203 = 1;\n  let temp204 = 1;\n  let temp205 = 1;\n  let temp206 = 1;\n  let temp207 = 1;\n  let temp208 = 1;\n  let temp209 = 1;\n  let temp210 = 1;\n  let temp211 = 1;\n  let temp212 = 1;\n  let temp213 = 1;\n  let temp214 = 1;\n  let temp215 = 1;\n  let temp216 = 1;\n  let temp217 = 1;\n  let temp218 = 1;\n  let temp219 = 1;\n  let temp220 = 1;\n  let temp221 = 1;\n  let temp222 = 1;\n  let temp223 = 1;\n  let temp224 = 1;\n  let temp225 = 1;\n  let temp226 = 1;\n  let temp227 = 1;\n  let temp228 = 1;\n  let temp229 = 1;\n  let temp230 = 1;\n  let temp231 = 1;\n  let temp232 = 1;\n  let temp233 = 1;\n  let temp234 = 1;\n  let temp235 = 1;\n  let temp236 = 1;\n  let temp237 = 1;\n  let temp238 = 1;\n  let temp239 = 1;\n  let temp240 = 1;\n  let temp241 = 1;\n  let temp242 = 1;\n  let temp243 = 1;\n  let temp244 = 1;\n  let temp245 = 1;\n  let temp246 = 1;\n  let temp247 = 1;\n  let temp248 = 1;\n  let temp249 = 1;\n  let temp250 = 1;\n  let temp251 = 1;\n  let temp252 = 1;\n  let temp253 = 1;\n  let temp254 = 1;\n  let temp255 = 1;\n  let temp256 = 1;\n  let temp257 = 1;\n  let temp258 = 1;\n  let temp259 = 1;\n  let temp260 = 1;\n  let temp261 = 1;\n  let temp262 = 1;\n  let temp263 = 1;\n  let temp264 = 1;\n  let temp265 = 1;\n  let temp266 = 1;\n  let temp267 = 1;\n  let temp268 = 1;\n  let temp269 = 1;\n  let temp270 = 1;\n  let temp271 = 1;\n  let temp272 = 1;\n  let temp273 = 1;\n  let temp274 = 1;\n  let temp275 = 1;\n  let temp276 = 1;\n  let temp277 = 1;\n  let temp"}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> remove_duplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst remove_duplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "remove_duplicates", "gc": "<|endoftext|>/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> remove_duplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst remove_duplicates = (numbers) => {\n  const seen = new Set();\n  return numbers.filter((number) => {\n    if (seen.has(number)) {\n      return false;\n    }\n    seen.add(number);\n    return true;\n  });\n};\n\n/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> remove_duplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst remove_duplicates_reversed = (numbers) => {\n  const seen = new Set();\n  return numbers.filter((number) => {\n    if (seen.has(number)) {\n      return false;\n    }\n    seen.add(number);\n    return true;\n  });\n};\n\n/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> remove_duplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst remove_duplicates_reversed_reversed = (numbers) => {\n  const seen = new Set();\n  return numbers.filter((number) => {\n    if (seen.has(number)) {\n      return false;\n    }\n    seen.add(number);\n    return true;\n  });\n};\n\n/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> remove_duplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst remove_duplicates_reversed_reversed_reversed = (numbers) => {\n  const seen = new Set();\n  return numbers.filter((number) => {\n    if (seen.has(number)) {\n      return false;\n    }\n    seen.add(number);\n    return true;\n  });\n};\n\n/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> remove_duplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst remove_duplicates_reversed_reversed_reversed_reversed = (numbers) => {\n  const seen = new Set();\n  return numbers.filter((number) => {\n    if (seen.has(number)) {\n      return false;\n    }\n    seen.add(number);\n    return true;\n  });\n};\n\n/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> remove_duplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst remove_duplicates_reversed_reversed_reversed_reversed_reversed = (numbers) => {\n  const seen = new Set();\n  return numbers.filter((number) => {\n    if (seen.has(number)) {\n      return false;\n    }\n    seen.add(number);\n    return true;\n  });\n};\n\n/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> remove_duplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst remove_duplicates_reversed_reversed_reversed_reversed_reversed_reversed = (numbers) => {\n  const seen = new Set();\n  return numbers.filter((number) => {\n    if (seen.has(number)) {\n      return false;\n    }\n    seen.add(number);\n    return true;\n  });\n};\n\n/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> remove_duplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst remove_duplicates_reversed_reversed_reversed_reversed_reversed_reversed_reversed = (numbers) => {\n  const seen = new Set();\n  return numbers.filter((number) => {\n    if (seen.has(number)) {\n      return false;\n    }\n    seen.add(number);\n    return true;\n  });\n};\n\n/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> remove_duplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst remove_duplicates_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed = (numbers) => {\n  const seen = new Set();\n  return numbers.filter((number) => {\n    if (seen.has(number)) {\n      return false;\n    }\n    seen.add(number);\n    return true;\n  });\n};\n\n/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> remove_duplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst remove_duplicates_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed = (numbers) => {\n  const seen = new Set();\n  return numbers.filter((number) => {\n    if (seen.has(number)) {\n      return false;\n    }\n    seen.add(number);\n    return true;\n  });\n};\n\n/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> remove_duplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst remove_duplicates_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed = (numbers) => {\n  const seen = new Set();\n  return numbers.filter((number) => {\n    if (seen.has(number)) {\n      return false;\n    }\n    seen.add(number);\n    return true;\n  });\n};\n\n/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> remove_duplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst remove_duplicates_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_"}
{"task_id": "JavaScript/27", "prompt": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> flip_case('Hello')\n  'hELLO'\n  */\nconst flip_case = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flip_case", "gc": "<|endoftext|>/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> flip_case('Hello')\n  'hELLO'\n  */\nconst flip_case = (string) => {\n  return string.toLowerCase().replace(/[a-z]/g, c => c.toUpperCase());\n};\n\nmodule.exports = { flip_case };\n\n},{}],8:[function(require,module,exports){\nconst { createHash } = require('crypto');\n\nconst SHA256 ='sha256';\n\nconst hash = (data) => {\n  const hash = createHash(SHA256);\n  hash.update(data);\n  return hash.digest('hex');\n};\n\nmodule.exports = { hash };\n\n},{\"crypto\":7}],9:[function(require,module,exports){\nconst { createHash } = require('crypto');\n\nconst SHA256 ='sha256';\n\nconst hash = (data) => {\n  const hash = createHash(SHA256);\n  hash.update(data);\n  return hash.digest('hex');\n};\n\nmodule.exports = { hash };\n\n},{\"crypto\":7}],10:[function(require,module,exports){\nconst { createHash } = require('crypto');\n\nconst SHA256 ='sha256';\n\nconst hash = (data) => {\n  const hash = createHash(SHA256);\n  hash.update(data);\n  return hash.digest('hex');\n};\n\nmodule.exports = { hash };\n\n},{\"crypto\":7}],11:[function(require,module,exports){\nconst { createHash } = require('crypto');\n\nconst SHA256 ='sha256';\n\nconst hash = (data) => {\n  const hash = createHash(SHA256);\n  hash.update(data);\n  return hash.digest('hex');\n};\n\nmodule.exports = { hash };\n\n},{\"crypto\":7}],12:[function(require,module,exports){\nconst { createHash } = require('crypto');\n\nconst SHA256 ='sha256';\n\nconst hash = (data) => {\n  const hash = createHash(SHA256);\n  hash.update(data);\n  return hash.digest('hex');\n};\n\nmodule.exports = { hash };\n\n},{\"crypto\":7}],13:[function(require,module,exports){\nconst { createHash } = require('crypto');\n\nconst SHA256 ='sha256';\n\nconst hash = (data) => {\n  const hash = createHash(SHA256);\n  hash.update(data);\n  return hash.digest('hex');\n};\n\nmodule.exports = { hash };\n\n},{\"crypto\":7}],14:[function(require,module,exports){\nconst { createHash } = require('crypto');\n\nconst SHA256 ='sha256';\n\nconst hash = (data) => {\n  const hash = createHash(SHA256);\n  hash.update(data);\n  return hash.digest('hex');\n};\n\nmodule.exports = { hash };\n\n},{\"crypto\":7}],15:[function(require,module,exports){\nconst { createHash } = require('crypto');\n\nconst SHA256 ='sha256';\n\nconst hash = (data) => {\n  const hash = createHash(SHA256);\n  hash.update(data);\n  return hash.digest('hex');\n};\n\nmodule.exports = { hash };\n\n},{\"crypto\":7}],16:[function(require,module,exports){\nconst { createHash } = require('crypto');\n\nconst SHA256 ='sha256';\n\nconst hash = (data) => {\n  const hash = createHash(SHA256);\n  hash.update(data);\n  return hash.digest('hex');\n};\n\nmodule.exports = { hash };\n\n},{\"crypto\":7}],17:[function(require,module,exports){\nconst { createHash } = require('crypto');\n\nconst SHA256 ='sha256';\n\nconst hash = (data) => {\n  const hash = createHash(SHA256);\n  hash.update(data);\n  return hash.digest('hex');\n};\n\nmodule.exports = { hash };\n\n},{\"crypto\":7}],18:[function(require,module,exports){\nconst { createHash } = require('crypto');\n\nconst SHA256 ='sha256';\n\nconst hash = (data) => {\n  const hash = createHash(SHA256);\n  hash.update(data);\n  return hash.digest('hex');\n};\n\nmodule.exports = { hash };\n\n},{\"crypto\":7}],19:[function(require,module,exports){\nconst { createHash } = require('crypto');\n\nconst SHA256 ='sha256';\n\nconst hash = (data) => {\n  const hash = createHash(SHA256);\n  hash.update(data);\n  return hash.digest('hex');\n};\n\nmodule.exports = { hash };\n\n},{\"crypto\":7}],20:[function(require,module,exports){\nconst { createHash } = require('crypto');\n\nconst SHA256 ='sha256';\n\nconst hash = (data) => {\n  const hash = createHash(SHA256);\n  hash.update(data);\n  return hash.digest('hex');\n};\n\nmodule.exports = { hash };\n\n},{\"crypto\":7}],21:[function(require,module,exports){\nconst { createHash } = require('crypto');\n\nconst SHA256 ='sha256';\n\nconst hash = (data) => {\n  const hash = createHash(SHA256);\n  hash.update(data);\n  return hash.digest('hex');\n};\n\nmodule.exports = { hash };\n\n},{\"crypto\":7}],22:[function(require,module,exports){\nconst { createHash } = require('crypto');\n\nconst SHA256 ='sha256';\n\nconst hash = (data) => {\n  const hash = createHash(SHA256);\n  hash.update(data);\n  return hash.digest('hex');\n};\n\nmodule.exports = { hash };\n\n},{\"crypto\":7}],23:[function(require,module,exports){\nconst { createHash } = require('crypto');\n\nconst SHA256 ='sha256';\n\nconst hash = (data) => {\n  const hash = createHash(SHA256);\n  hash.update(data);\n  return hash.digest('hex');\n};\n\nmodule.exports = { hash };\n\n},{\"crypto\":7}],24:[function(require,module,exports){\nconst { createHash } = require('crypto');\n\nconst SHA256 ='sha256';\n\nconst hash = (data) => {\n  const hash = createHash(SHA256);\n  hash.update(data);\n  return hash.digest('hex');\n};\n\nmodule.exports = { hash };\n\n},{\"crypto\":7}],25:[function(require,module,exports){\nconst { createHash } = require('crypto');\n\nconst SHA256 ='sha256';\n\nconst hash = (data) => {\n  const hash = createHash(SHA256);\n  hash.update(data);\n  return hash.digest('hex');\n};\n\nmodule.exports = { hash };\n\n},{\"crypto\":7}],26:[function(require,module,exports){\nconst { createHash } = require('crypto');\n\nconst SHA256 ='sha256';\n\nconst hash = (data) => {\n  const hash = createHash(SHA256);\n  hash.update(data);\n  return hash.digest('hex');\n};\n\nmodule.exports = { hash };\n\n},{\"crypto\":7}],27:[function(require,module,exports){\nconst { createHash } = require('crypto');\n\nconst SHA256 ='sha256';\n\nconst hash = (data) => {\n  const hash = createHash(SHA256);\n  hash.update(data);\n  return hash.digest('hex');\n};\n\nmodule.exports = { hash };\n\n},{\"crypto\":7}],28:[function(require,module,exports){\nconst { createHash } = require('crypto');\n\nconst SHA256 ='sha256';\n\nconst hash = (data) => {\n  const hash = createHash(SHA256);\n  hash.update(data);\n  return hash.digest('hex');\n};\n\nmodule.exports = { hash };\n\n},{\"crypto\":7}],29:[function(require,module,exports){\nconst { createHash } = require('crypto');\n\nconst SHA256 ='sha256';\n\nconst hash = (data) => {\n  const hash = createHash(SHA256);\n  hash.update(data);\n  return hash.digest('hex');\n};\n\nmodule.exports = { hash };\n\n},{\"crypto\":7}],30:[function(require,module,exports){\nconst { createHash }"}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "gc": "<|endoftext|>/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, curr) => acc += curr, \"\");\n};\n\n/* Convert string to number\n  >>> convertToNumber(\"\")\n  0\n  >>> convertToNumber(\"1\")\n  1\n  >>> convertToNumber(\"1.2\")\n  1.2\n  >>> convertToNumber(\"1.23\")\n  1.23\n  >>> convertToNumber(\"1.234\")\n  1.234\n  >>> convertToNumber(\"1.23456789\")\n  1.23456789\n  >>> convertToNumber(\"1.2345678901\")\n  1.2345678901\n  >>> convertToNumber(\"1.23456789012\")\n  1.23456789012\n  >>> convertToNumber(\"1.234567890123\")\n  1.234567890123\n  >>> convertToNumber(\"1.2345678901234\")\n  1.2345678901234\n  >>> convertToNumber(\"1.23456789012345\")\n  1.23456789012345\n  >>> convertToNumber(\"1.234567890123456\")\n  1.234567890123456\n  >>> convertToNumber(\"1.2345678901234567\")\n  1.2345678901234567\n  >>> convertToNumber(\"1.23456789012345678\")\n  1.23456789012345678\n  >>> convertToNumber(\"1.23456789012345679\")\n  1.23456789012345679\n  >>> convertToNumber(\"1.23456789012345680\")\n  1.23456789012345680\n  >>> convertToNumber(\"1.234567890123456801\")\n  1.234567890123456801\n  >>> convertToNumber(\"1.234567890123456802\")\n  1.234567890123456802\n  >>> convertToNumber(\"1.234567890123456803\")\n  1.234567890123456803\n  >>> convertToNumber(\"1.234567890123456804\")\n  1.234567890123456804\n  >>> convertToNumber(\"1.234567890123456805\")\n  1.234567890123456805\n  >>> convertToNumber(\"1.234567890123456806\")\n  1.234567890123456806\n  >>> convertToNumber(\"1.234567890123456807\")\n  1.234567890123456807\n  >>> convertToNumber(\"1.234567890123456808\")\n  1.234567890123456808\n  >>> convertToNumber(\"1.234567890123456809\")\n  1.234567890123456809\n  >>> convertToNumber(\"1.234567890123456810\")\n  1.234567890123456810\n  >>> convertToNumber(\"1.234567890123456811\")\n  1.234567890123456811\n  >>> convertToNumber(\"1.234567890123456812\")\n  1.234567890123456812\n  >>> convertToNumber(\"1.234567890123456813\")\n  1.234567890123456813\n  >>> convertToNumber(\"1.234567890123456814\")\n  1.234567890123456814\n  >>> convertToNumber(\"1.234567890123456815\")\n  1.234567890123456815\n  >>> convertToNumber(\"1.234567890123456816\")\n  1.234567890123456816\n  >>> convertToNumber(\"1.234567890123456817\")\n  1.234567890123456817\n  >>> convertToNumber(\"1.234567890123456818\")\n  1.234567890123456818\n  >>> convertToNumber(\"1.234567890123456819\")\n  1.234567890123456819\n  >>> convertToNumber(\"1.234567890123456820\")\n  1.234567890123456820\n  >>> convertToNumber(\"1.234567890123456821\")\n  1.234567890123456821\n  >>> convertToNumber(\"1.234567890123456822\")\n  1.234567890123456822\n  >>> convertToNumber(\"1.234567890123456823\")\n  1.234567890123456823\n  >>> convertToNumber(\"1.234567890123456824\")\n  1.234567890123456824\n  >>> convertToNumber(\"1.234567890123456825\")\n  1.234567890123456825\n  >>> convertToNumber(\"1.234567890123456826\")\n  1.234567890123456826\n  >>> convertToNumber(\"1.234567890123456827\")\n  1.234567890123456827\n  >>> convertToNumber(\"1.234567890123456828\")\n  1.234567890123456828\n  >>> convertToNumber(\"1.234567890123456829\")\n  1.234567890123456829\n  >>> convertToNumber(\"1.234567890123456830\")\n  1.234567890123456830\n  >>> convertToNumber(\"1.234567890123456831\")\n  1.234567890123456831\n  >>> convertToNumber(\"1.234567890123456832\")\n  1.234567890123456832\n  >>> convertToNumber(\"1.234567890123456833\")\n  1.234567890123456833\n  >>> convertToNumber(\"1.234567890123456834\")\n  1.234567890123456834\n  >>> convertToNumber(\"1.234567890123456835\")\n  1.234567890123456835\n  >>> convertToNumber(\"1.234567890123456836\")\n  1.234567890123456836\n  >>> convertToNumber(\"1.234567890123456837\")\n  1.234567890123456837\n  >>> convertToNumber(\"1.234567890123456838\")\n  1.234567890123456838\n  >>> convertToNumber(\"1.234567890123456839\")\n  1.234567890123456839\n  >>> convertToNumber(\"1.234567890123456840\")\n  1.234567890123456840\n  >>> convertToNumber(\"1.234567890123456841\")\n  1.234567890123456841\n  >>> convertToNumber(\"1.234567890123456842\")\n  1.234567890123456842\n  >>> convertToNumber(\"1.234567890123456843\")\n  1.234567890123456843\n  >>> convertToNumber(\"1.234567890123456844\")\n  1.234567890123456844\n  >>> convertToNumber(\"1.234567890123456845\")\n  1.234567890123456845\n  >>> convertToNumber(\"1.234567890123456846\")"}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filter_by_prefix([], 'a')\n  []\n  >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filter_by_prefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filter_by_prefix", "gc": "<|endoftext|>/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filter_by_prefix([], 'a')\n  []\n  >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filter_by_prefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix))\n}\n\n/**\n  Filter an input list of strings only keeping those that end with a given suffix.\n  >>> filter_by_suffix([], 'a')\n  []\n  >>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filter_by_suffix = (strings, suffix) => {\n  return strings.filter(s => s.endsWith(suffix))\n}\n\n/**\n  Filter an input list of strings only keeping those that do not start with a given prefix.\n  >>> filter_by_prefix([], 'a')\n  []\n  >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filter_by_prefix = (strings, prefix) => {\n  return strings.filter(s =>!s.startsWith(prefix))\n}\n\n/**\n  Filter an input list of strings only keeping those that do not end with a given suffix.\n  >>> filter_by_suffix([], 'a')\n  []\n  >>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filter_by_suffix = (strings, suffix) => {\n  return strings.filter(s =>!s.endsWith(suffix))\n}\n\n/**\n  Filter an input list of strings only keeping those that do not start with a given prefix or suffix.\n  >>> filter_by_prefix([], 'a')\n  []\n  >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filter_by_prefix = (strings, prefix) => {\n  return strings.filter(s =>!s.startsWith(prefix) ||!s.endsWith(suffix))\n}\n\n/**\n  Filter an input list of strings only keeping those that do not end with a given prefix or suffix.\n  >>> filter_by_suffix([], 'a')\n  []\n  >>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filter_by_suffix = (strings, suffix) => {\n  return strings.filter(s =>!s.startsWith(prefix) ||!s.endsWith(suffix))\n}\n\n/**\n  Filter an input list of strings only keeping those that do not start with a given prefix or suffix.\n  >>> filter_by_prefix([], 'a')\n  []\n  >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filter_by_prefix = (strings, prefix) => {\n  return strings.filter(s =>!s.startsWith(prefix) ||!s.endsWith(suffix))\n}\n\n/**\n  Filter an input list of strings only keeping those that do not end with a given prefix or suffix.\n  >>> filter_by_suffix([], 'a')\n  []\n  >>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filter_by_suffix = (strings, suffix) => {\n  return strings.filter(s =>!s.startsWith(prefix) ||!s.endsWith(suffix))\n}\n\n/**\n  Filter an input list of strings only keeping those that do not start with a given prefix or suffix.\n  >>> filter_by_prefix([], 'a')\n  []\n  >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filter_by_prefix = (strings, prefix) => {\n  return strings.filter(s =>!s.startsWith(prefix) ||!s.endsWith(suffix))\n}\n\n/**\n  Filter an input list of strings only keeping those that do not end with a given prefix or suffix.\n  >>> filter_by_suffix([], 'a')\n  []\n  >>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filter_by_suffix = (strings, suffix) => {\n  return strings.filter(s =>!s.startsWith(prefix) ||!s.endsWith(suffix))\n}\n\n/**\n  Filter an input list of strings only keeping those that do not start with a given prefix or suffix.\n  >>> filter_by_prefix([], 'a')\n  []\n  >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filter_by_prefix = (strings, prefix) => {\n  return strings.filter(s =>!s.startsWith(prefix) ||!s.endsWith(suffix))\n}\n\n/**\n  Filter an input list of strings only keeping those that do not end with a given prefix or suffix.\n  >>> filter_by_suffix([], 'a')\n  []\n  >>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filter_by_suffix = (strings, suffix) => {\n  return strings.filter(s =>!s.startsWith(prefix) ||!s.endsWith(suffix))\n}\n\n/**\n  Filter an input list of strings only keeping those that do not start with a given prefix or suffix.\n  >>> filter_by_prefix([], 'a')\n  []\n  >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filter_by_prefix = (strings, prefix) => {\n  return strings.filter(s =>!s.startsWith(prefix) ||!s.endsWith(suffix))\n}\n\n/**\n  Filter an input list of strings only keeping those that do not end with a given prefix or suffix.\n  >>> filter_by_suffix([], 'a')\n  []\n  >>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filter_by_suffix = (strings, suffix) => {\n  return strings.filter(s =>!s.startsWith(prefix) ||!s.endsWith(suffix))\n}\n\n/**\n  Filter an input list of strings only keeping those that do not start with a given prefix or suffix.\n  >>> filter_by_prefix([], 'a')\n  []\n  >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filter_by_prefix = (strings, prefix) => {\n  return strings.filter(s =>!s.startsWith(prefix) ||!s.endsWith(suffix))\n}\n\n/**\n  Filter an input list of strings only keeping those that do not end with a given prefix or suffix.\n  >>> filter_by_suffix([], 'a')\n  []\n  >>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filter_by_suffix = (strings, suffix) => {\n  return strings.filter(s =>!s.startsWith(prefix) ||!s.endsWith(suffix))\n}\n\n/**\n  Filter an input list of strings only keeping those that do not start with a given prefix or suffix.\n  >>> filter_by_prefix([], 'a')\n  []\n  >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filter_by_prefix = (strings, prefix) => {\n  return strings.filter(s =>!s.startsWith(prefix) ||!s.endsWith(suffix))\n}\n\n/**\n  Filter an input list of strings only keeping those that do not end with a given prefix or suffix.\n  >>> filter_by_suffix([], 'a')\n  []\n  >>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'a')\n"}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive numbers in the list.\n  >>> get_positive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst get_positive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "get_positive", "gc": "<|endoftext|>/*Return only positive numbers in the list.\n  >>> get_positive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst get_positive = (l) => {\n  return l.filter(n => n > 0)\n}\n\n/*Return only negative numbers in the list.\n  >>> get_negative([-1, 2, -4, 5, 6])\n  [-2, -5, 6]\n  >>> get_negative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-5, 3, 2, 3, 9, 123, 1]\n  */\nconst get_negative = (l) => {\n  return l.filter(n => n < 0)\n}\n\n/*Return only numbers in the list that are divisible by 3.\n  >>> get_divisible([-1, 2, -4, 5, 6])\n  [2, 3, 5]\n  >>> get_divisible([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst get_divisible = (l) => {\n  return l.filter(n => n % 3 === 0)\n}\n\n/*Return only numbers in the list that are divisible by 5.\n  >>> get_divisible([-1, 2, -4, 5, 6])\n  [2, 3, 5]\n  >>> get_divisible([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst get_divisible5 = (l) => {\n  return l.filter(n => n % 5 === 0)\n}\n\n/*Return only numbers in the list that are divisible by 7.\n  >>> get_divisible([-1, 2, -4, 5, 6])\n  [2, 3, 5]\n  >>> get_divisible([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst get_divisible7 = (l) => {\n  return l.filter(n => n % 7 === 0)\n}\n\n/*Return only numbers in the list that are divisible by 9.\n  >>> get_divisible([-1, 2, -4, 5, 6])\n  [2, 3, 5]\n  >>> get_divisible([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst get_divisible9 = (l) => {\n  return l.filter(n => n % 9 === 0)\n}\n\n/*Return only numbers in the list that are divisible by 11.\n  >>> get_divisible([-1, 2, -4, 5, 6])\n  [2, 3, 5]\n  >>> get_divisible([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst get_divisible11 = (l) => {\n  return l.filter(n => n % 11 === 0)\n}\n\n/*Return only numbers in the list that are divisible by 13.\n  >>> get_divisible([-1, 2, -4, 5, 6])\n  [2, 3, 5]\n  >>> get_divisible([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst get_divisible13 = (l) => {\n  return l.filter(n => n % 13 === 0)\n}\n\n/*Return only numbers in the list that are divisible by 15.\n  >>> get_divisible([-1, 2, -4, 5, 6])\n  [2, 3, 5]\n  >>> get_divisible([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst get_divisible15 = (l) => {\n  return l.filter(n => n % 15 === 0)\n}\n\n/*Return only numbers in the list that are divisible by 17.\n  >>> get_divisible([-1, 2, -4, 5, 6])\n  [2, 3, 5]\n  >>> get_divisible([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst get_divisible17 = (l) => {\n  return l.filter(n => n % 17 === 0)\n}\n\n/*Return only numbers in the list that are divisible by 19.\n  >>> get_divisible([-1, 2, -4, 5, 6])\n  [2, 3, 5]\n  >>> get_divisible([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst get_divisible19 = (l) => {\n  return l.filter(n => n % 19 === 0)\n}\n\n/*Return only numbers in the list that are divisible by 23.\n  >>> get_divisible([-1, 2, -4, 5, 6])\n  [2, 3, 5]\n  >>> get_divisible([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst get_divisible23 = (l) => {\n  return l.filter(n => n % 23 === 0)\n}\n\n/*Return only numbers in the list that are divisible by 29.\n  >>> get_divisible([-1, 2, -4, 5, 6])\n  [2, 3, 5]\n  >>> get_divisible([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst get_divisible29 = (l) => {\n  return l.filter(n => n % 29 === 0)\n}\n\n/*Return only numbers in the list that are divisible by 31.\n  >>> get_divisible([-1, 2, -4, 5, 6])\n  [2, 3, 5]\n  >>> get_divisible([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst get_divisible31 = (l) => {\n  return l.filter(n => n % 31 === 0)\n}\n\n/*Return only numbers in the list that are divisible by 35.\n  >>> get_divisible([-1, 2, -4, 5, 6])\n  [2, 3, 5]\n  >>> get_divisible([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst get_divisible35 = (l) => {\n  return l.filter(n => n % 35 === 0)\n}\n\n/*Return only numbers in the list that are divisible by 37.\n  >>> get_divisible([-1, 2, -4, 5, 6])\n  [2, 3, 5]\n  >>> get_divisible([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst get_divisible37 = (l) => {\n  return l.filter(n => n % 37 === 0)\n}\n\n/*Return only numbers in the list that are divisible by 39.\n  >>> get_divisible([-1, 2, -4, 5, 6])\n  [2, 3, 5]\n  >>> get_divisible([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst get_divisible39 = (l) => {\n  return l.filter(n => n % 39 === 0)\n}\n\n/*Return only numbers in the list that are divisible by 43.\n  >>> get_divisible([-1, 2, -4, 5, 6])\n  [2, 3, 5]\n  >>> get_divisible([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst get_divisible43 = (l) => {\n  return l.filter(n => n % 43 === 0)\n}\n\n/*Return only numbers in the list that are divisible by 45.\n  >>> get_divisible([-1, 2, -4, 5, 6])\n  [2, 3, 5]\n  >>> get_divisible([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst get_divisible45 = (l) => {\n  return l.filter(n => n % 45 === 0)\n}\n\n/*Return only numbers in the list that are divisible by 47.\n  >>> get_divisible([-1, 2, -4, 5, 6])\n  [2, 3, 5]"}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a given number is prime, and false otherwise.\n  >>> is_prime(6)\n  false\n  >>> is_prime(101)\n  true\n  >>> is_prime(11)\n  true\n  >>> is_prime(13441)\n  true\n  >>> is_prime(61)\n  true\n  >>> is_prime(4)\n  false\n  >>> is_prime(1)\n  false\n  */\nconst is_prime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "is_prime", "gc": "<|endoftext|>/*Return true if a given number is prime, and false otherwise.\n  >>> is_prime(6)\n  false\n  >>> is_prime(101)\n  true\n  >>> is_prime(11)\n  true\n  >>> is_prime(13441)\n  true\n  >>> is_prime(61)\n  true\n  >>> is_prime(4)\n  false\n  >>> is_prime(1)\n  false\n  */\nconst is_prime = (n) => {\n  if (n < 2) return false;\n  if (n % 2 === 0) return false;\n  if (n % 3 === 0) return false;\n  if (n % 5 === 0) return false;\n  return true;\n};\n\n/*Return true if a given number is composite, and false otherwise.\n  >>> is_composite(6)\n  true\n  >>> is_composite(101)\n  false\n  >>> is_composite(11)\n  false\n  >>> is_composite(13441)\n  false\n  >>> is_composite(61)\n  false\n  >>> is_composite(4)\n  false\n  >>> is_composite(1)\n  false\n  */\nconst is_composite = (n) => {\n  if (n < 2) return false;\n  if (n % 2 === 0) return false;\n  if (n % 3 === 0) return true;\n  if (n % 5 === 0) return false;\n  return true;\n};\n\n/*Return true if a given number is composite and prime, and false otherwise.\n  >>> is_composite_prime(6)\n  false\n  >>> is_composite_prime(101)\n  true\n  >>> is_composite_prime(11)\n  true\n  >>> is_composite_prime(13441)\n  true\n  >>> is_composite_prime(61)\n  true\n  >>> is_composite_prime(4)\n  false\n  >>> is_composite_prime(1)\n  false\n  */\nconst is_composite_prime = (n) => {\n  if (n < 2) return false;\n  if (n % 2 === 0) return false;\n  if (n % 3 === 0) return true;\n  if (n % 5 === 0) return false;\n  return true;\n};\n\n/*Return true if a given number is composite and prime and composite, and false otherwise.\n  >>> is_composite_composite_prime(6)\n  false\n  >>> is_composite_composite_prime(101)\n  true\n  >>> is_composite_composite_prime(11)\n  true\n  >>> is_composite_composite_prime(13441)\n  true\n  >>> is_composite_composite_prime(61)\n  true\n  >>> is_composite_composite_prime(4)\n  false\n  >>> is_composite_composite_prime(1)\n  false\n  */\nconst is_composite_composite_prime = (n) => {\n  if (n < 2) return false;\n  if (n % 2 === 0) return false;\n  if (n % 3 === 0) return true;\n  if (n % 5 === 0) return false;\n  if (n % 7 === 0) return false;\n  return true;\n};\n\n/*Return true if a given number is composite and prime and composite, and false otherwise.\n  >>> is_composite_composite_composite_prime(6)\n  false\n  >>> is_composite_composite_composite_prime(101)\n  true\n  >>> is_composite_composite_composite_prime(11)\n  true\n  >>> is_composite_composite_composite_prime(13441)\n  true\n  >>> is_composite_composite_composite_prime(61)\n  true\n  >>> is_composite_composite_composite_prime(4)\n  false\n  >>> is_composite_composite_composite_prime(1)\n  false\n  */\nconst is_composite_composite_composite_prime = (n) => {\n  if (n < 2) return false;\n  if (n % 2 === 0) return false;\n  if (n % 3 === 0) return true;\n  if (n % 5 === 0) return false;\n  if (n % 7 === 0) return false;\n  if (n % 9 === 0) return false;\n  return true;\n};\n\n/*Return true if a given number is composite and prime and composite and composite, and false otherwise.\n  >>> is_composite_composite_composite_composite_prime(6)\n  false\n  >>> is_composite_composite_composite_composite_prime(101)\n  true\n  >>> is_composite_composite_composite_composite_prime(11)\n  true\n  >>> is_composite_composite_composite_composite_prime(13441)\n  true\n  >>> is_composite_composite_composite_composite_prime(61)\n  true\n  >>> is_composite_composite_composite_composite_prime(4)\n  false\n  >>> is_composite_composite_composite_composite_prime(1)\n  false\n  */\nconst is_composite_composite_composite_composite_prime = (n) => {\n  if (n < 2) return false;\n  if (n % 2 === 0) return false;\n  if (n % 3 === 0) return true;\n  if (n % 5 === 0) return false;\n  if (n % 7 === 0) return false;\n  if (n % 9 === 0) return false;\n  if (n % 11 === 0) return false;\n  return true;\n};\n\n/*Return true if a given number is composite and prime and composite and composite, and false otherwise.\n  >>> is_composite_composite_composite_composite_composite_prime(6)\n  false\n  >>> is_composite_composite_composite_composite_composite_prime(101)\n  true\n  >>> is_composite_composite_composite_composite_composite_prime(11)\n  true\n  >>> is_composite_composite_composite_composite_composite_prime(13441)\n  true\n  >>> is_composite_composite_composite_composite_composite_prime(61)\n  true\n  >>> is_composite_composite_composite_composite_composite_prime(4)\n  false\n  >>> is_composite_composite_composite_composite_prime(1)\n  false\n  */\nconst is_composite_composite_composite_composite_composite_prime = (n) => {\n  if (n < 2) return false;\n  if (n % 2 === 0) return false;\n  if (n % 3 === 0) return true;\n  if (n % 5 === 0) return false;\n  if (n % 7 === 0) return false;\n  if (n % 9 === 0) return false;\n  if (n % 11 === 0) return false;\n  if (n % 13 === 0) return false;\n  return true;\n};\n\n/*Return true if a given number is composite and prime and composite and composite and composite, and false otherwise.\n  >>> is_composite_composite_composite_composite_composite_composite_prime(6)\n  false\n  >>> is_composite_composite_composite_composite_composite_composite_prime(101)\n  true\n  >>> is_composite_composite_composite_composite_composite_composite_prime(11)\n  true\n  >>> is_composite_composite_composite_composite_composite_prime(13441)\n  true\n  >>> is_composite_composite_composite_composite_composite_prime(61)\n  true\n  >>> is_composite_composite_composite_composite_composite_prime(4)\n  false\n  >>> is_composite_composite_composite_composite_composite_prime(1)\n  false\n  */\nconst is_composite_composite_composite_composite_composite_composite_prime = (n) => {\n  if (n < 2) return false;\n  if (n % 2 === 0) return false;\n  if (n % 3 === 0) return true;\n  if (n % 5 === 0) return false;\n  if (n % 7 === 0) return false;\n  if (n % 9 === 0) return false;\n  if (n % 11 === 0) return false;\n  if (n % 13 === 0) return false;\n  if (n % 15 === 0) return false;\n  return true;\n};\n\n/*Return true if a given number is composite and prime and composite and composite and composite, and false otherwise.\n  >>> is_composite_composite_composite_composite_composite_composite_composite_prime(6)"}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "gc": "<|endoftext|>/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  let x = xs[0];\n  let zero = 0;\n  let i = 0;\n  let j = 1;\n  let k = 1;\n  let l = xs.length;\n  while (i < l) {\n    if (xs[i] === 0) {\n      zero = x;\n      break;\n    }\n    x += xs[i] * xs[j] * xs[k] * xs[k];\n    i++;\n    j++;\n    k++;\n  }\n  return zero;\n}\n\n/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly2 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero2 = (xs) => {\n  let x = xs[0];\n  let zero = 0;\n  let i = 0;\n  let j = 1;\n  let k = 1;\n  let l = xs.length;\n  while (i < l) {\n    if (xs[i] === 0) {\n      zero = x;\n      break;\n    }\n    x += xs[i] * xs[j] * xs[k] * xs[k];\n    i++;\n    j++;\n    k++;\n  }\n  return zero;\n}\n\n/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly3 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly4 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly5 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly6 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly7 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly8 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly9 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly10 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly11 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly12 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly13 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly14 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly15 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  Evaluates polynomial with coefficients x"}
{"task_id": "JavaScript/33", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sort_third([1, 2, 3])\n  [1, 2, 3]\n  >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sort_third = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sort_third", "gc": "<|endoftext|>/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sort_third([1, 2, 3])\n  [1, 2, 3]\n  >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sort_third = (l) => {\n  let third = l.slice(0); // copy the list\n  third.sort((a, b) => a - b); // sort the list\n  let thirdCopy = third.slice(0); // copy the list\n  thirdCopy.sort((a, b) => a - b); // sort the list\n  return thirdCopy;\n};\n\n/*\n  >>> sort_fourth([4, 3, 2, 1])\n  [4, 3, 2, 1]\n  >>> sort_fourth([4, 3, 2, 1])\n  [4, 3, 2, 1]\n  >>> sort_fourth([4, 3, 2, 1])\n  [4, 3, 2, 1]\n  >>> sort_fourth([4, 3, 2, 1])\n  [4, 3, 2, 1]\n  */\nconst sort_fourth = (l) => {\n  let fourth = l.slice(0); // copy the list\n  fourth.sort((a, b) => a - b); // sort the list\n  let fourthCopy = fourth.slice(0); // copy the list\n  fourthCopy.sort((a, b) => a - b); // sort the list\n  return fourthCopy;\n};\n\n/*\n  >>> sort_fifth([4, 3, 2, 1])\n  [4, 3, 2, 1]\n  >>> sort_fifth([4, 3, 2, 1])\n  [4, 3, 2, 1]\n  >>> sort_fifth([4, 3, 2, 1])\n  [4, 3, 2, 1]\n  >>> sort_fifth([4, 3, 2, 1])\n  [4, 3, 2, 1]\n  */\nconst sort_fifth = (l) => {\n  let fifth = l.slice(0); // copy the list\n  fifth.sort((a, b) => a - b); // sort the list\n  let fifthCopy = fifth.slice(0); // copy the list\n  fifthCopy.sort((a, b) => a - b); // sort the list\n  return fifthCopy;\n};\n\n/*\n  >>> sort_sixth([4, 3, 2, 1])\n  [4, 3, 2, 1]\n  >>> sort_sixth([4, 3, 2, 1])\n  [4, 3, 2, 1]\n  >>> sort_sixth([4, 3, 2, 1])\n  [4, 3, 2, 1]\n  >>> sort_sixth([4, 3, 2, 1])\n  [4, 3, 2, 1]\n  */\nconst sort_sixth = (l) => {\n  let sixth = l.slice(0); // copy the list\n  sixth.sort((a, b) => a - b); // sort the list\n  let sixthCopy = sixth.slice(0); // copy the list\n  sixthCopy.sort((a, b) => a - b); // sort the list\n  return sixthCopy;\n};\n\n/*\n  >>> sort_seventh([4, 3, 2, 1])\n  [4, 3, 2, 1]\n  >>> sort_seventh([4, 3, 2, 1])\n  [4, 3, 2, 1]\n  >>> sort_seventh([4, 3, 2, 1])\n  [4, 3, 2, 1]\n  >>> sort_seventh([4, 3, 2, 1])\n  [4, 3, 2, 1]\n  */\nconst sort_seventh = (l) => {\n  let seventh = l.slice(0); // copy the list\n  seventh.sort((a, b) => a - b); // sort the list\n  let seventhCopy = seventh.slice(0); // copy the list\n  seventhCopy.sort((a, b) => a - b); // sort the list\n  return seventhCopy;\n};\n\n/*\n  >>> sort_eighth([4, 3, 2, 1])\n  [4, 3, 2, 1]\n  >>> sort_eighth([4, 3, 2, 1])\n  [4, 3, 2, 1]\n  >>> sort_eighth([4, 3, 2, 1])\n  [4, 3, 2, 1]\n  >>> sort_eighth([4, 3, 2, 1])\n  [4, 3, 2, 1]\n  */\nconst sort_eighth = (l) => {\n  let eighth = l.slice(0); // copy the list\n  eighth.sort((a, b) => a - b); // sort the list\n  let eighthCopy = eighth.slice(0); // copy the list\n  eighthCopy.sort((a, b) => a - b); // sort the list\n  return eighthCopy;\n};\n\n/*\n  >>> sort_ninth([4, 3, 2, 1])\n  [4, 3, 2, 1]\n  >>> sort_ninth([4, 3, 2, 1])\n  [4, 3, 2, 1]\n  >>> sort_ninth([4, 3, 2, 1])\n  [4, 3, 2, 1]\n  >>> sort_ninth([4, 3, 2, 1])\n  [4, 3, 2, 1]\n  */\nconst sort_ninth = (l) => {\n  let ninth = l.slice(0); // copy the list\n  ninth.sort((a, b) => a - b); // sort the list\n  let ninthCopy = ninth.slice(0); // copy the list\n  ninthCopy.sort((a, b) => a - b); // sort the list\n  return ninthCopy;\n};\n\n/*\n  >>> sort_tenth([4, 3, 2, 1])\n  [4, 3, 2, 1]\n  >>> sort_tenth([4, 3, 2, 1])\n  [4, 3, 2, 1]\n  >>> sort_tenth([4, 3, 2, 1])\n  [4, 3, 2, 1]\n  >>> sort_tenth([4, 3, 2, 1])\n  [4, 3, 2, 1]\n  */\nconst sort_tenth = (l) => {\n  let tenth = l.slice(0); // copy the list\n  tenth.sort((a, b) => a - b); // sort the list\n  let tenthCopy = tenth.slice(0); // copy the list\n  tenthCopy.sort((a, b) => a - b); // sort the list\n  return tenthCopy;\n};\n\n/*\n  >>> sort_eleventh([4, 3, 2, 1])\n  [4, 3, 2, 1]\n  >>> sort_eleventh([4, 3, 2, 1])\n  [4, 3, 2, 1]\n  >>> sort_eleventh([4, 3, 2, 1])\n  [4, 3, 2, 1]\n  >>> sort_eleventh([4, 3, 2, 1])\n  [4, 3, 2, 1]\n  */\nconst sort_eleventh = (l) => {\n  let eleventh = l.slice(0); // copy the list\n  eleventh.sort((a, b) => a - b); // sort the list\n  let eleventhCopy = eleventh.slice(0); // copy the list\n  eleventhCopy.sort((a, b) => a - b); // sort the list\n  return eleventhCopy;\n};\n\n/*\n  >>> sort_twelfth([4, 3, 2, 1])\n  [4, 3, 2, 1]\n  >>> sort_twelfth([4, 3, 2, 1])\n  [4, 3, 2, 1]\n  >>> sort_twelfth([4, 3, 2, 1])\n  [4, 3, 2, 1]\n  >>> sort_twelfth([4, 3, 2, 1])\n  [4, 3, 2, 1]\n  */\nconst sort_twelfth = (l) => {\n  let twelfth = l.slice(0); // copy the list\n  twelfth.sort((a, b) => a - b); // sort the list\n  let twelfthCopy = twelfth.slice(0); // copy the list\n  twelfthCopy.sort((a, b) => a - b); // sort the list\n  return twelfthCopy;\n};\n\n/*\n  >>> sort_thirteenth([4, 3, 2, 1])\n  [4, 3, 2, 1]\n  >>> sort_thirteenth([4, 3, 2, 1])\n  [4, 3, 2, 1]\n  >>> sort_thirteenth([4, 3, 2, 1])\n  [4, 3, 2, 1]\n  >>> sort_thirteenth([4, 3, 2, 1])\n  [4, 3, 2, 1]\n  */\nconst sort_thirteenth = (l) => {\n  let thirteenth = l.slice(0); // "}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "gc": "<|endoftext|>/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let seen = {};\n  return l.filter((v, i, a) => {\n    if (seen[v]) return true;\n    seen[v] = true;\n    return false;\n  });\n};\n\n/*\n  Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123], 1)\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l, key) => {\n  let seen = {};\n  return l.filter((v, i, a) => {\n    if (seen[v]) return true;\n    seen[v] = true;\n    return false;\n  }).sort((a, b) => {\n    if (key === undefined) return a > b? 1 : -1;\n    return a[key] > b[key]? 1 : -1;\n  });\n};\n\n/*\n  Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123], 2)\n  [5, 3, 5, 2, 3, 3, 9, 0, 123]\n  */\nconst unique = (l, key) => {\n  let seen = {};\n  return l.filter((v, i, a) => {\n    if (seen[v]) return true;\n    seen[v] = true;\n    return false;\n  }).sort((a, b) => {\n    if (key === undefined) return a > b? 1 : -1;\n    return a[key] > b[key]? 1 : -1;\n  }).filter((v, i, a) => {\n    if (seen[v]) return true;\n    seen[v] = true;\n    return false;\n  });\n};\n\n/*\n  Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123], 3)\n  [5, 3, 5, 2, 3, 3, 9, 0, 123]\n  */\nconst unique = (l, key) => {\n  let seen = {};\n  return l.filter((v, i, a) => {\n    if (seen[v]) return true;\n    seen[v] = true;\n    return false;\n  }).sort((a, b) => {\n    if (key === undefined) return a > b? 1 : -1;\n    return a[key] > b[key]? 1 : -1;\n  }).filter((v, i, a) => {\n    if (seen[v]) return true;\n    seen[v] = true;\n    return false;\n  }).filter((v, i, a) => {\n    if (seen[v]) return true;\n    seen[v] = true;\n    return false;\n  });\n};\n\n/*\n  Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123], 4)\n  [5, 3, 5, 2, 3, 3, 9, 0, 123]\n  */\nconst unique = (l, key) => {\n  let seen = {};\n  return l.filter((v, i, a) => {\n    if (seen[v]) return true;\n    seen[v] = true;\n    return false;\n  }).sort((a, b) => {\n    if (key === undefined) return a > b? 1 : -1;\n    return a[key] > b[key]? 1 : -1;\n  }).filter((v, i, a) => {\n    if (seen[v]) return true;\n    seen[v] = true;\n    return false;\n  }).filter((v, i, a) => {\n    if (seen[v]) return true;\n    seen[v] = true;\n    return false;\n  }).filter((v, i, a) => {\n    if (seen[v]) return true;\n    seen[v] = true;\n    return false;\n  });\n};\n\n/*\n  Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123], 5)\n  [5, 3, 5, 2, 3, 3, 9, 0, 123]\n  */\nconst unique = (l, key) => {\n  let seen = {};\n  return l.filter((v, i, a) => {\n    if (seen[v]) return true;\n    seen[v] = true;\n    return false;\n  }).sort((a, b) => {\n    if (key === undefined) return a > b? 1 : -1;\n    return a[key] > b[key]? 1 : -1;\n  }).filter((v, i, a) => {\n    if (seen[v]) return true;\n    seen[v] = true;\n    return false;\n  }).filter((v, i, a) => {\n    if (seen[v]) return true;\n    seen[v] = true;\n    return false;\n  }).filter((v, i, a) => {\n    if (seen[v]) return true;\n    seen[v] = true;\n    return false;\n  }).filter((v, i, a) => {\n    if (seen[v]) return true;\n    seen[v] = true;\n    return false;\n  });\n};\n\n/*\n  Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123], 6)\n  [5, 3, 5, 2, 3, 3, 9, 0, 123]\n  */\nconst unique = (l, key) => {\n  let seen = {};\n  return l.filter((v, i, a) => {\n    if (seen[v]) return true;\n    seen[v] = true;\n    return false;\n  }).sort((a, b) => {\n    if (key === undefined) return a > b? 1 : -1;\n    return a[key] > b[key]? 1 : -1;\n  }).filter((v, i, a) => {\n    if (seen[v]) return true;\n    seen[v] = true;\n    return false;\n  }).filter((v, i, a) => {\n    if (seen[v]) return true;\n    seen[v] = true;\n    return false;\n  }).filter((v, i, a) => {\n    if (seen[v]) return true;\n    seen[v] = true;\n    return false;\n  }).filter((v, i, a) => {\n    if (seen[v]) return true;\n    seen[v] = true;\n    return false;\n  }).filter((v, i, a) => {\n    if (seen[v]) return true;\n    seen[v] = true;\n    return false;\n  });\n};\n\n/*\n  Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123], 7)\n  [5, 3, 5, 2, 3, 3, 9, 0, 123]\n  */\nconst unique = (l, key) => {\n  let seen = {};\n  return l.filter((v, i, a) => {\n    if (seen[v]) return true;\n    seen[v] = true;\n    return false;\n  }).sort((a, b) => {\n    if (key === undefined) return a > b? 1 : -1;\n    return a[key] > b[key]? 1 : -1;\n  }).filter((v, i, a) => {\n    if (seen[v]) return true;\n    seen[v] = true;\n    return false;\n  }).filter((v, i, a) => {\n    if (seen[v]) return true;\n    seen[v] = true;\n    return false;\n  }).filter((v, i, a) => {\n    if (seen[v]) return true;\n    seen[v] = true;\n    return false;\n  }).filter((v, i, a) => {\n    if (seen[v]) return true;\n    seen[v] = true;\n    return false;\n  }).filter((v, i, a) => {\n    if (seen[v]) return true;\n    seen[v] = true;\n    return false;\n  }).filter((v, i, a) => {\n    if (seen[v]) return true;\n    seen[v] = true;\n    return false;\n  }).filter((v, i, a) => {\n    if (seen[v]) return true;\n    seen[v] = true;\n    return false;\n  });\n};\n\n/*\n  Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123], 8)\n  [5, 3, 5, 2, 3, 3, 9, 0, 123]\n  */\nconst unique = (l, key) => {\n  let seen = {};\n  return l.filter((v, i, a) => {\n    if (seen[v]) return true;\n    seen[v] = true;\n    return false;\n  }).sort((a, b) => {\n    if (key === undefined) return a > b? 1 : -1;\n    return a[key] > b[key]? 1 : -1;\n  }).filter((v, i, a) => {\n    if (seen[v]) return true;\n    seen[v] = true;\n    return false;\n  }).filter((v, i, a) => {\n    if (seen[v]) return true;\n    seen[v] = true;\n    return false;\n  }).filter((v, i, a) => {\n    if (seen[v]) return true;\n    seen[v] = true;\n    return false;\n  }).filter((v, i, a) => {\n    if (seen[v]) return true;\n    seen[v] = true;\n    return false;\n  }).filter((v, i, a) => {"}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum element in the list.\n  >>> max_element([1, 2, 3])\n  3\n  >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst max_element = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "max_element", "gc": "<|endoftext|>/*Return maximum element in the list.\n  >>> max_element([1, 2, 3])\n  3\n  >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst max_element = (l) => {\n  let max = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\n/*Return minimum element in the list.\n  >>> min_element([1, 2, 3])\n  1\n  >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -5\n  */\nconst min_element = (l) => {\n  let min = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < min) {\n      min = l[i];\n    }\n  }\n  return min;\n};\n\n/*Return sum of elements in the list.\n  >>> sum([1, 2, 3])\n  6\n  >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -45\n  */\nconst sum = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum;\n};\n\n/*Return sum of elements in the list.\n  >>> sum([1, 2, 3])\n  6\n  >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -45\n  */\nconst sum_elements = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum;\n};\n\n/*Return sum of elements in the list.\n  >>> sum([1, 2, 3])\n  6\n  >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -45\n  */\nconst sum_elements_elements = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i] * l[i];\n  }\n  return sum;\n};\n\n/*Return sum of elements in the list.\n  >>> sum([1, 2, 3])\n  6\n  >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -45\n  */\nconst sum_elements_elements_elements = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i] * l[i] * l[i];\n  }\n  return sum;\n};\n\n/*Return sum of elements in the list.\n  >>> sum([1, 2, 3])\n  6\n  >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -45\n  */\nconst sum_elements_elements_elements_elements = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i] * l[i] * l[i] * l[i];\n  }\n  return sum;\n};\n\n/*Return sum of elements in the list.\n  >>> sum([1, 2, 3])\n  6\n  >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -45\n  */\nconst sum_elements_elements_elements_elements_elements = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i] * l[i] * l[i] * l[i] * l[i] * l[i];\n  }\n  return sum;\n};\n\n/*Return sum of elements in the list.\n  >>> sum([1, 2, 3])\n  6\n  >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -45\n  */\nconst sum_elements_elements_elements_elements_elements_elements = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i] * l[i] * l[i] * l[i] * l[i] * l[i] * l[i];\n  }\n  return sum;\n};\n\n/*Return sum of elements in the list.\n  >>> sum([1, 2, 3])\n  6\n  >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -45\n  */\nconst sum_elements_elements_elements_elements_elements_elements_elements_elements = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i] * l[i] * l[i] * l[i] * l[i] * l[i] * l[i] * l[i];\n  }\n  return sum;\n};\n\n/*Return sum of elements in the list.\n  >>> sum([1, 2, 3])\n  6\n  >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -45\n  */\nconst sum_elements_elements_elements_elements_elements_elements_elements_elements_elements = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i] * l[i] * l[i] * l[i] * l[i] * l[i] * l[i] * l[i] * l[i];\n  }\n  return sum;\n};\n\n/*Return sum of elements in the list.\n  >>> sum([1, 2, 3])\n  6\n  >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -45\n  */\nconst sum_elements_elements_elements_elements_elements_elements_elements_elements_elements_elements_elements = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i] * l[i] * l[i] * l[i] * l[i] * l[i] * l[i] * l[i] * l[i] * l[i];\n  }\n  return sum;\n};\n\n/*Return sum of elements in the list.\n  >>> sum([1, 2, 3])\n  6\n  >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -45\n  */\nconst sum_elements_elements_elements_elements_elements_elements_elements_elements_elements_elements_elements_elements_elements_elements = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i] * l[i] * l[i] * l[i] * l[i] * l[i] * l[i] * l[i] * l[i] * l[i] * l[i] * l[i];\n  }\n  return sum;\n};\n\n/*Return sum of elements in the list.\n  >>> sum([1, 2, 3])\n  6\n  >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -45\n  */\nconst sum_elements_elements_elements_elements_elements_elements_elements_elements_elements_elements_elements_elements_elements_elements_elements = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i] * l[i] * l[i] * l[i] * l[i] * l[i] * l[i] * l[i] * l[i] * l[i] * l[i] * l[i];\n  }\n  return sum;\n};\n\n/*Return sum of elements in the list.\n  >>> sum([1, 2, 3])\n  6\n  >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -45\n  */\nconst sum_elements_elements_elements_elements_elements_elements_elements_elements_elements_elements_elements_elements_elements_elements_elements_elements_elements = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i] * l[i] * l[i] * l[i] * l[i] * l[i] * l[i] * l[i] * l[i] * l[i] * l[i] * l[i];\n  }\n  return sum;\n};\n\n/*Return sum of elements in the list.\n  >>> sum([1, 2, 3])\n  6\n  >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -45\n  */\nconst sum_elements_elements_elements_elements_elements_elements_elements_elements_elements_elements_elements_elements_elements_elements_elements_elements_elements_elements_elements = (l) => {\n  let sum = 0;"}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizz_buzz(50)\n  0\n  >>> fizz_buzz(78)\n  2\n  >>> fizz_buzz(79)\n  3\n  */\nconst fizz_buzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizz_buzz", "gc": "<|endoftext|>/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizz_buzz(50)\n  0\n  >>> fizz_buzz(78)\n  2\n  >>> fizz_buzz(79)\n  3\n  */\nconst fizz_buzz = (n) => {\n  let count = 0;\n  let i = n;\n  while (i) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n    i = Math.floor(i / 10);\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return true if n is a palindrome.\n  >>> is_palindrome(123)\n  true\n  >>> is_palindrome(321)\n  false\n  >>> is_palindrome(121)\n  false\n  >>> is_palindrome(122)\n  false\n  >>> is_palindrome(123)\n  false\n  >>> is_palindrome(121)\n  false\n  >>> is_palindrome(122)\n  false\n  >>> is_palindrome(123)\n  false\n  >>> is_palindrome(121)\n  false\n  >>> is_palindrome(122)\n  false\n  >>> is_palindrome(123)\n  false\n  >>> is_palindrome(121)\n  false\n  >>> is_palindrome(122)\n  false\n  >>> is_palindrome(123)\n  false\n  >>> is_palindrome(121)\n  false\n  >>> is_palindrome(122)\n  false\n  >>> is_palindrome(123)\n  false\n  >>> is_palindrome(121)\n  false\n  >>> is_palindrome(122)\n  false\n  >>> is_palindrome(123)\n  false\n  >>> is_palindrome(121)\n  false\n  >>> is_palindrome(122)\n  false\n  >>> is_palindrome(123)\n  false\n  >>> is_palindrome(121)\n  false\n  >>> is_palindrome(122)\n  false\n  >>> is_palindrome(123)\n  false\n  >>> is_palindrome(121)\n  false\n  >>> is_palindrome(122)\n  false\n  >>> is_palindrome(123)\n  false\n  >>> is_palindrome(121)\n  false\n  >>> is_palindrome(122)\n  false\n  >>> is_palindrome(123)\n  false\n  >>> is_palindrome(121)\n  false\n  >>> is_palindrome(122)\n  false\n  >>> is_palindrome(123)\n  false\n  >>> is_palindrome(121)\n  false\n  >>> is_palindrome(122)\n  false\n  >>> is_palindrome(123)\n  false\n  >>> is_palindrome(121)\n  false\n  >>> is_palindrome(122)\n  false\n  >>> is_palindrome(123)\n  false\n  >>> is_palindrome(121)\n  false\n  >>> is_palindrome(122)\n  false\n  >>> is_palindrome(123)\n  false\n  >>> is_palindrome(121)\n  false\n  >>> is_palindrome(122)\n  false\n  >>> is_palindrome(123)\n  false\n  >>> is_palindrome(121)\n  false\n  >>> is_palindrome(122)\n  false\n  >>> is_palindrome(123)\n  false\n  >>> is_palindrome(121)\n  false\n  >>> is_palindrome(122)\n  false\n  >>> is_palindrome(123)\n  false\n  >>> is_palindrome(121)\n  false\n  >>> is_palindrome(122)\n  false\n  >>> is_palindrome(123)\n  false\n  >>> is_palindrome(121)\n  false\n  >>> is_palindrome(122)\n  false\n  >>> is_palindrome(123)\n  false\n  >>> is_palindrome(121)\n  false\n  >>> is_palindrome(122)\n  false\n  >>> is_palindrome(123)\n  false\n  >>> is_palindrome(121)\n  false\n  >>> is_palindrome(122)\n  false\n  >>> is_palindrome(123)\n  false\n  >>> is_palindrome(121)\n  false\n  >>> is_palindrome(122)\n  false\n  >>> is_palindrome(123)\n  false\n  >>> is_palindrome(121)\n  false\n  >>> is_palindrome(122)\n  false\n  >>> is_palindrome(123)\n  false\n  >>> is_palindrome(121)\n  false\n  >>> is_palindrome(122)\n  false\n  >>> is_palindrome(123)\n  false\n  >>> is_palindrome(121)\n  false\n  >>> is_palindrome(122)\n  false\n  >>> is_palindrome(123)\n  false\n  >>> is_palindrome(121)\n  false\n  >>> is_palindrome(122)\n  false\n  >>> is_palindrome(123)\n  false\n  >>> is_palindrome(121)\n  false\n  >>> is_palindrome(122)\n  false\n  >>> is_palindrome(123)\n  false\n  >>> is_palindrome(121)\n  false\n  >>> is_palindrome(122)\n  false\n  >>> is_palindrome(123)\n  false\n  >>> is_palindrome(121)\n  false\n  >>> is_palindrome(122)\n  false\n  >>> is_palindrome(123)\n  false\n  >>> is_palindrome(121)\n  false\n  >>> is_palindrome(122)\n  false\n  >>> is_palindrome(123)\n  false\n  >>> is_palindrome(121)\n  false\n  >>> is_palindrome(122)\n  false\n  >>> is_palindrome(123)\n  false\n  >>> is_palindrome(121)\n  false\n  >>> is_palindrome(122)\n  false\n  >>> is_palindrome(123)\n  false\n  >>> is_palindrome(121)\n  false\n  >>> is_palindrome(122)\n  false\n  >>> is_"}
{"task_id": "JavaScript/37", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sort_even([1, 2, 3])\n  [1, 2, 3]\n  >>> sort_even([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sort_even = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sort_even", "gc": "<|endoftext|>/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sort_even([1, 2, 3])\n  [1, 2, 3]\n  >>> sort_even([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sort_even = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return [...odd,...even]\n}\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the odd indicies are equal\n  to the values of the odd indicies of l, but sorted.\n  >>> sort_odd([1, 2, 3])\n  [3, 2, 1]\n  >>> sort_odd([5, 6, 3, 4])\n  [4, 3, 2, 5]\n  */\nconst sort_odd = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2!== 0) {\n      odd.push(l[i])\n    } else {\n      even.push(l[i])\n    }\n  }\n  return [...even,...odd]\n}\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sort_even([5, 6, 3, 4])\n  [4, 3, 2, 5]\n  >>> sort_odd([1, 2, 3])\n  [3, 2, 1]\n  */\nconst sort_odd_and_even = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return [...odd,...even]\n}\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the odd indicies are equal\n  to the values of the odd indicies of l, but sorted.\n  >>> sort_odd_and_even([5, 6, 3, 4])\n  [4, 3, 2, 5]\n  >>> sort_even([1, 2, 3])\n  [3, 2, 1]\n  */\nconst sort_odd_and_even = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2!== 0) {\n      odd.push(l[i])\n    } else {\n      even.push(l[i])\n    }\n  }\n  return [...even,...odd]\n}\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sort_odd_and_even([5, 6, 3, 4])\n  [4, 3, 2, 5]\n  >>> sort_odd_and_even([1, 2, 3])\n  [3, 2, 1]\n  */\nconst sort_odd_and_odd = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2!== 0) {\n      odd.push(l[i])\n    } else {\n      even.push(l[i])\n    }\n  }\n  return [...odd,...even]\n}\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sort_odd_and_odd([1, 2, 3])\n  [3, 2, 1]\n  >>> sort_odd_and_odd([5, 6, 3, 4])\n  [4, 3, 2, 5]\n  */\nconst sort_odd_and_odd = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2!== 0) {\n      odd.push(l[i])\n    } else {\n      even.push(l[i])\n    }\n  }\n  return [...even,...odd]\n}\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sort_odd_and_odd([1, 2, 3])\n  [3, 2, 1]\n  >>> sort_odd_and_odd([5, 6, 3, 4])\n  [4, 3, 2, 5]\n  */\nconst sort_odd_and_odd_and_even = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2!== 0) {\n      odd.push(l[i])\n    } else {\n      even.push(l[i])\n    }\n  }\n  return [...odd,...even]\n}\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sort_odd_and_odd_and_even([1, 2, 3])\n  [3, 2, 1]\n  >>> sort_odd_and_odd_and_even([5, 6, 3, 4])\n  [4, 3, 2, 5]\n  */\nconst sort_odd_and_odd_and_even = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2!== 0) {\n      odd.push(l[i])\n    } else {\n      even.push(l[i])\n    }\n  }\n  return [...even,...odd]\n}\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sort_odd_and_odd_and_even([1, 2, 3])\n  [3, 2, 1]\n  >>> sort_odd_and_odd_and_even([5, 6, 3, 4])\n  [4, 3, 2, 5]\n  */\nconst sort_odd_and_odd_and_odd = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2!== 0) {\n      odd.push(l[i])\n    } else {\n      even.push(l[i])\n    }\n  }\n  return [...odd,...even]\n}\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sort_odd_and_odd_and_odd([1, 2, 3])\n  [3, 2, 1]\n  >>> sort_odd_and_odd_and_odd([5, 6, 3, 4])\n  [4, 3, 2, 5]\n  */\nconst sort_odd_and_odd_and_odd = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2!== 0) {\n      odd.push(l[i])\n    } else {\n      even.push(l[i])\n    }\n  }\n  return [...even,...odd]\n}\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sort_odd_and_odd_and_odd([1, 2, 3])\n  [3, 2, 1]\n  >>> sort_odd_and_odd_and_odd([5, 6, 3, 4])\n  [4, 3, 2, 5]\n  */\nconst sort_odd_and_odd_and_odd_and_even = ("}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encode_cyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encode_cyclic", "gc": "<|endoftext|>/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encode_cyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group[1]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst encodeCyclic_groups = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group[1]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic_groups = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group[1]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst encodeCyclic_group = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group[1]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic_group = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group[1]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst encodeCyclic_groups = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group[1]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic_groups = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group[1]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst encodeCyclic_group = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group[1]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic_group = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group[1]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst encodeCyclic_groups = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group[1]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic_groups = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group[1]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst encodeCyclic_group = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group[1]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic_group = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group[1]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n"}
{"task_id": "JavaScript/39", "prompt": "/*\n  prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> prime_fib(1)\n  2\n  >>> prime_fib(2)\n  3\n  >>> prime_fib(3)\n  5\n  >>> prime_fib(4)\n  13\n  >>> prime_fib(5)\n  89\n  */\nconst prime_fib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "prime_fib", "gc": "<|endoftext|>/*\n  prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> prime_fib(1)\n  2\n  >>> prime_fib(2)\n  3\n  >>> prime_fib(3)\n  5\n  >>> prime_fib(4)\n  13\n  >>> prime_fib(5)\n  89\n  */\nconst prime_fib = (n) => {\n  let prime = 1;\n  let i = 2;\n  while (i <= n) {\n    prime = prime * i;\n    i++;\n  }\n  return prime;\n};\n\n/*\n  is_prime returns true if n is a prime number and false otherwise.\n  >>> is_prime(7)\n  true\n  >>> is_prime(8)\n  false\n  >>> is_prime(9)\n  false\n  >>> is_prime(10)\n  false\n  >>> is_prime(11)\n  false\n  >>> is_prime(12)\n  false\n  >>> is_prime(13)\n  false\n  >>> is_prime(14)\n  false\n  >>> is_prime(15)\n  false\n  >>> is_prime(16)\n  false\n  >>> is_prime(17)\n  false\n  >>> is_prime(18)\n  false\n  >>> is_prime(19)\n  false\n  >>> is_prime(20)\n  false\n  >>> is_prime(21)\n  false\n  >>> is_prime(22)\n  false\n  >>> is_prime(23)\n  false\n  >>> is_prime(24)\n  false\n  >>> is_prime(25)\n  false\n  >>> is_prime(26)\n  false\n  >>> is_prime(27)\n  false\n  >>> is_prime(28)\n  false\n  >>> is_prime(29)\n  false\n  >>> is_prime(30)\n  false\n  >>> is_prime(31)\n  false\n  >>> is_prime(32)\n  false\n  >>> is_prime(33)\n  false\n  >>> is_prime(34)\n  false\n  >>> is_prime(35)\n  false\n  >>> is_prime(36)\n  false\n  >>> is_prime(37)\n  false\n  >>> is_prime(38)\n  false\n  >>> is_prime(39)\n  false\n  >>> is_prime(40)\n  false\n  >>> is_prime(41)\n  false\n  >>> is_prime(42)\n  false\n  >>> is_prime(43)\n  false\n  >>> is_prime(44)\n  false\n  >>> is_prime(45)\n  false\n  >>> is_prime(46)\n  false\n  >>> is_prime(47)\n  false\n  >>> is_prime(48)\n  false\n  >>> is_prime(49)\n  false\n  >>> is_prime(50)\n  false\n  >>> is_prime(51)\n  false\n  >>> is_prime(52)\n  false\n  >>> is_prime(53)\n  false\n  >>> is_prime(54)\n  false\n  >>> is_prime(55)\n  false\n  >>> is_prime(56)\n  false\n  >>> is_prime(57)\n  false\n  >>> is_prime(58)\n  false\n  >>> is_prime(59)\n  false\n  >>> is_prime(60)\n  false\n  >>> is_prime(61)\n  false\n  >>> is_prime(62)\n  false\n  >>> is_prime(63)\n  false\n  >>> is_prime(64)\n  false\n  >>> is_prime(65)\n  false\n  >>> is_prime(66)\n  false\n  >>> is_prime(67)\n  false\n  >>> is_prime(68)\n  false\n  >>> is_prime(69)\n  false\n  >>> is_prime(70)\n  false\n  >>> is_prime(71)\n  false\n  >>> is_prime(72)\n  false\n  >>> is_prime(73)\n  false\n  >>> is_prime(74)\n  false\n  >>> is_prime(75)\n  false\n  >>> is_prime(76)\n  false\n  >>> is_prime(77)\n  false\n  >>> is_prime(78)\n  false\n  >>> is_prime(79)\n  false\n  >>> is_prime(80)\n  false\n  >>> is_prime(81)\n  false\n  >>> is_prime(82)\n  false\n  >>> is_prime(83)\n  false\n  >>> is_prime(84)\n  false\n  >>> is_prime(85)\n  false\n  >>> is_prime(86)\n  false\n  >>> is_prime(87)\n  false\n  >>> is_prime(88)\n  false\n  >>> is_prime(89)\n  false\n  >>> is_prime(90)\n  false\n  >>> is_prime(91)\n  false\n  >>> is_prime(92)\n  false\n  >>> is_prime(93)\n  false\n  >>> is_prime(94)\n  false\n  >>> is_prime(95)\n  false\n  >>> is_prime(96)\n  false\n  >>> is_prime(97)\n  false\n  >>> is_prime(98)\n  false\n  >>> is_prime(99)\n  false\n  >>> is_prime(100)\n  false\n  >>> is_prime(101)\n  false\n  >>> is_prime(102)\n  false\n  >>> is_prime(103)\n  false\n  >>> is_prime(104)\n  false\n  >>> is_prime(105)\n  false\n  >>> is_prime(106)\n  false\n  >>> is_prime(107)\n  false\n  >>> is_prime(108)\n  false\n  >>> is_prime(109)\n  false\n  >>> is_prime(110)\n  false\n  >>> is_prime(111)\n  false\n  >>> is_prime(112)\n  false\n  >>> is_prime(113)\n  false\n  >>> is_prime(114)\n  false\n  >>> is_prime(115)\n  false\n  >>> is_prime(116)\n  false\n  >>> is_prime(117)\n  false\n  >>> is_prime(118)\n  false\n  >>> is_prime(119)\n  false\n  >>> is_prime(120)\n  false\n  >>> is_prime(121)\n  false\n  >>> is_prime(122)\n  false\n  >>> is_prime(123)\n  false\n  >>> is_prime(124)\n  false\n  >>> is_prime(125)\n  false\n  >>> is_prime(126)\n  false\n  >>> is_prime(127)\n  false\n  >>> is_prime(128)\n  false\n  >>> is_prime(129)\n  false\n  >>> is_prime(130)\n  false\n  >>> is_prime(131)\n  false\n  >>> is_prime(132)\n  false\n  >>> is_prime(133)\n  false\n  >>> is_prime(134)\n  false\n  >>> is_prime(135)\n  false\n  >>> is_prime(136)\n  false\n  >>> is_prime(137)\n"}
{"task_id": "JavaScript/40", "prompt": "/*\n  triples_sum_to_zero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triples_sum_to_zero([1, 3, 5, 0])\n  false\n  >>> triples_sum_to_zero([1, 3, -2, 1])\n  true\n  >>> triples_sum_to_zero([1, 2, 3, 7])\n  false\n  >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triples_sum_to_zero([1])\n  false\n  */\nconst triples_sum_to_zero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triples_sum_to_zero", "gc": "<|endoftext|>/*\n  triples_sum_to_zero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triples_sum_to_zero([1, 3, 5, 0])\n  false\n  >>> triples_sum_to_zero([1, 3, -2, 1])\n  true\n  >>> triples_sum_to_zero([1, 2, 3, 7])\n  false\n  >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triples_sum_to_zero([1])\n  false\n  */\nconst triples_sum_to_zero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst is_prime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst is_prime_or_odd = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst is_prime_or_even = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst is_prime_or_odd_or_even = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  if (n % 2 === 1) {\n    return true;\n  }\n  return false;\n};\n\nconst is_prime_or_even = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  if (n % 2 === 1) {\n    return true;\n  }\n  return false;\n};\n\nconst is_prime_or_odd_or_even = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  if (n % 2 === 1) {\n    return true;\n  }\n  return false;\n};\n\nconst is_prime_or_odd_or_even = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  if (n % 2 === 1) {\n    return true;\n  }\n  return false;\n};\n\nconst is_prime_or_even = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  if (n % 2 === 1) {\n    return true;\n  }\n  return false;\n};\n\nconst is_prime_or_odd_or_even = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  if (n % 2 === 1) {\n    return true;\n  }\n  return false;\n};\n\nconst is_prime_or_odd_or_even = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  if (n % 2 === 1) {\n    return true;\n  }\n  return false;\n};\n\nconst is_prime_or_even = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  if (n % 2 === 1) {\n    return true;\n  }\n  return false;\n};\n\nconst is_prime_or_odd_or_even = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  if (n % 2 === 1) {\n    return true;\n  }\n  return false;\n};\n\nconst is_prime_or_odd_or_even = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  if (n % 2 === 1) {\n    return true;\n  }\n  return false;\n};\n\nconst is_prime_or_even = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  if (n % 2 === 1) {\n    return true;\n  }\n  return false;\n};\n\nconst is_prime_or_odd_or_even = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  if (n % 2 === 1) {\n    return true;\n  }\n  return false;\n};\n\nconst is_prime_or_odd_or_even = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  if (n % 2 === 1) {\n    return true;\n  }\n  return false;\n};\n\nconst is_prime_or_even = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  if (n % 2 === 1) {\n    return true;\n  }\n  return false;\n};\n\nconst is_prime_or_odd_or_even = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  if (n % 2 === 1) {\n    return true;\n  }\n  return false;\n};\n\nconst is_prime_or_odd_or_even = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  if (n % 2 === 1) {\n    return true;\n  }\n  return false;\n};\n\nconst is_prime_or_even = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  if (n % 2 === 1) {\n    return true;\n  }\n  return false;\n};\n\nconst is_prime_or_odd_or_even = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  if (n % 2 === 1) {\n    return true;\n  }\n  return false;\n};\n\nconst is_prime_or_even = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  if (n % 2 === 1) {\n    return true;\n  }\n  return false;\n};\n\nconst is_prime_or_odd_or_even = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  for (let i = 2; i < n; i++) {\n    if ("}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst car_race_collision = (n) => {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "car_race_collision", "gc": "<|endoftext|>/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst car_race_collision = (n) => {\n  let collisions = 0;\n  for (let i = 0; i < n; i++) {\n    if (car_race.cars[i].is_colliding()) {\n      collisions++;\n    }\n  }\n  return collisions;\n};\n\n/*\n  Given a car and a race, determine if they collide and return the number of collisions.\n  If the car has collided with any race cars, return 0.\n  If the car has collided with any race cars, return the number of collisions made by each race car.\n  If the car has collided with any race cars, return the number of collisions made by each race car.\n  If the car has collided with any race cars, return the number of collisions made by each race car.\n  If the car has collided with any race cars, return the number of collisions made by each race car.\n  If the car has collided with any race cars, return the number of collisions made by each race car.\n  If the car has collided with any race cars, return the number of collisions made by each race car.\n  If the car has collided with any race cars, return the number of collisions made by each race car.\n  If the car has collided with any race cars, return the number of collisions made by each race car.\n  If the car has collided with any race cars, return the number of collisions made by each race car.\n  If the car has collided with any race cars, return the number of collisions made by each race car.\n  If the car has collided with any race cars, return the number of collisions made by each race car.\n  If the car has collided with any race cars, return the number of collisions made by each race car.\n  If the car has collided with any race cars, return the number of collisions made by each race car.\n  If the car has collided with any race cars, return the number of collisions made by each race car.\n  If the car has collided with any race cars, return the number of collisions made by each race car.\n  If the car has collided with any race cars, return the number of collisions made by each race car.\n  If the car has collided with any race cars, return the number of collisions made by each race car.\n  If the car has collided with any race cars, return the number of collisions made by each race car.\n  If the car has collided with any race cars, return the number of collisions made by each race car.\n  If the car has collided with any race cars, return the number of collisions made by each race car.\n  If the car has collided with any race cars, return the number of collisions made by each race car.\n  If the car has collided with any race cars, return the number of collisions made by each race car.\n  If the car has collided with any race cars, return the number of collisions made by each race car.\n  If the car has collided with any race cars, return the number of collisions made by each race car.\n  If the car has collided with any race cars, return the number of collisions made by each race car.\n  If the car has collided with any race cars, return the number of collisions made by each race car.\n  If the car has collided with any race cars, return the number of collisions made by each race car.\n  If the car has collided with any race cars, return the number of collisions made by each race car.\n  If the car has collided with any race cars, return the number of collisions made by each race car.\n  If the car has collided with any race cars, return the number of collisions made by each race car.\n  If the car has collided with any race cars, return the number of collisions made by each race car.\n  If the car has collided with any race cars, return the number of collisions made by each race car.\n  If the car has collided with any race cars, return the number of collisions made by each race car.\n  If the car has collided with any race cars, return the number of collisions made by each race car.\n  If the car has collided with any race cars, return the number of collisions made by each race car.\n  If the car has collided with any race cars, return the number of collisions made by each race car.\n  If the car has collided with any race cars, return the number of collisions made by each race car.\n  If the car has collided with any race cars, return the number of collisions made by each race car.\n  If the car has collided with any race cars, return the number of collisions made by each race car.\n  If the car has collided with any race cars, return the number of collisions made by each race car.\n  If the car has collided with any race cars, return the number of collisions made by each race car.\n  If the car has collided with any race cars, return the number of collisions made by each race car.\n  If the car has collided with any race cars, return the number of collisions made by each race car.\n  If the car has collided with any race cars, return the number of collisions made by each race car.\n  If the car has collided with any race cars, return the number of collisions made by each race car.\n  If the car has collided with any race cars, return the number of collisions made by each race car.\n  If the car has collided with any race cars, return the number of collisions made by each race car.\n  If the car has collided with any race cars, return the number of collisions made by each race car.\n  If the car has collided with any race cars, return the number of collisions made by each race car.\n  If the car has collided with any race cars, return the number of collisions made by each race car.\n  If the car has collided with any race cars, return the number of collisions made by each race car.\n  If the car has collided with any race cars, return the number of collisions made by each race car.\n  If the car has collided with any ra"}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements incremented by 1.\n  >>> incr_list([1, 2, 3])\n  [2, 3, 4]\n  >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incr_list = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incr_list", "gc": "<|endoftext|>/*Return list with elements incremented by 1.\n  >>> incr_list([1, 2, 3])\n  [2, 3, 4]\n  >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incr_list = (l) => {\n  let n = 0;\n  for (let i = 0; i < l.length; i++) {\n    n += l[i];\n  }\n  return [n,...l.slice(n)];\n};\n\n/**\n * Return list with elements decremented by 1.\n * >>> decr_list([1, 2, 3])\n * [2, 3, 4]\n * >>> decr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n * [6, 4, 6, 3, 4, 4, 10, 1, 124]\n */\nconst decr_list = (l) => {\n  let n = 0;\n  for (let i = 0; i < l.length; i++) {\n    n -= l[i];\n  }\n  return [n,...l.slice(0, n)];\n};\n\n/**\n * Return list with elements incremented by 1.\n * >>> incr_list_by_index([1, 2, 3], 0)\n * [2, 3, 4]\n * >>> incr_list_by_index([5, 3, 5, 2, 3, 3, 9, 0, 123], 0)\n * [6, 4, 6, 3, 4, 4, 10, 1, 124]\n */\nconst incr_list_by_index = (l, i) => {\n  let n = 0;\n  for (let i = 0; i < l.length; i++) {\n    n += l[i];\n  }\n  return [n,...l.slice(i, i + 1)];\n};\n\n/**\n * Return list with elements decremented by 1.\n * >>> decr_list_by_index([1, 2, 3], 0)\n * [2, 3, 4]\n * >>> decr_list_by_index([5, 3, 5, 2, 3, 3, 9, 0, 123], 0)\n * [6, 4, 6, 3, 4, 4, 10, 1, 124]\n */\nconst decr_list_by_index = (l, i) => {\n  let n = 0;\n  for (let i = 0; i < l.length; i++) {\n    n -= l[i];\n  }\n  return [n,...l.slice(0, i)];\n};\n\n/**\n * Return list with elements incremented by 1.\n * >>> incr_list_by_index_by_index([1, 2, 3], 0, 0)\n * [2, 3, 4]\n * >>> incr_list_by_index_by_index([5, 3, 5, 2, 3, 3, 9, 0, 123], 0, 0)\n * [6, 4, 6, 3, 4, 4, 10, 1, 124]\n */\nconst incr_list_by_index_by_index = (l, i, j) => {\n  let n = 0;\n  for (let i = 0; i < l.length; i++) {\n    n += l[i];\n  }\n  return [n,...l.slice(i, i + 1)];\n};\n\n/**\n * Return list with elements decremented by 1.\n * >>> decr_list_by_index_by_index([1, 2, 3], 0, 0)\n * [2, 3, 4]\n * >>> decr_list_by_index_by_index([5, 3, 5, 2, 3, 3, 9, 0, 123], 0, 0)\n * [6, 4, 6, 3, 4, 4, 10, 1, 124]\n */\nconst decr_list_by_index_by_index = (l, i, j) => {\n  let n = 0;\n  for (let i = 0; i < l.length; i++) {\n    n -= l[i];\n  }\n  return [n,...l.slice(0, i)];\n};\n\n/**\n * Return list with elements incremented by 1.\n * >>> incr_list_by_index_by_index_by_index([1, 2, 3], 0, 0, 0)\n * [2, 3, 4]\n * >>> incr_list_by_index_by_index_by_index([5, 3, 5, 2, 3, 3, 9, 0, 123], 0, 0, 0)\n * [6, 4, 6, 3, 4, 4, 10, 1, 124]\n */\nconst incr_list_by_index_by_index_by_index = (l, i, j, k) => {\n  let n = 0;\n  for (let i = 0; i < l.length; i++) {\n    n += l[i];\n  }\n  return [n,...l.slice(i, i + 1)];\n};\n\n/**\n * Return list with elements decremented by 1.\n * >>> decr_list_by_index_by_index_by_index([1, 2, 3], 0, 0, 0)\n * [2, 3, 4]\n * >>> decr_list_by_index_by_index_by_index([5, 3, 5, 2, 3, 3, 9, 0, 123], 0, 0, 0)\n * [6, 4, 6, 3, 4, 4, 10, 1, 124]\n */\nconst decr_list_by_index_by_index_by_index = (l, i, j, k) => {\n  let n = 0;\n  for (let i = 0; i < l.length; i++) {\n    n -= l[i];\n  }\n  return [n,...l.slice(0, i)];\n};\n\n/**\n * Return list with elements incremented by 1.\n * >>> incr_list_by_index_by_index_by_index_by_index([1, 2, 3], 0, 0, 0)\n * [2, 3, 4]\n * >>> incr_list_by_index_by_index_by_index_by_index([5, 3, 5, 2, 3, 3, 9, 0, 123], 0, 0, 0)\n * [6, 4, 6, 3, 4, 4, 10, 1, 124]\n */\nconst incr_list_by_index_by_index_by_index_by_index = (l, i, j, k, l2) => {\n  let n = 0;\n  for (let i = 0; i < l.length; i++) {\n    n += l[i];\n  }\n  return [n,...l.slice(i, i + 1)];\n};\n\n/**\n * Return list with elements decremented by 1.\n * >>> decr_list_by_index_by_index_by_index_by_index([1, 2, 3], 0, 0, 0)\n * [2, 3, 4]\n * >>> decr_list_by_index_by_index_by_index_by_index([5, 3, 5, 2, 3, 3, 9, 0, 123], 0, 0, 0)\n * [6, 4, 6, 3, 4, 4, 10, 1, 124]\n */\nconst decr_list_by_index_by_index_by_index_by_index = (l, i, j, k, l2) => {\n  let n = 0;\n  for (let i = 0; i < l.length; i++) {\n    n -= l[i];\n  }\n  return [n,...l.slice(0, i)];\n};\n\n/**\n * Return list with elements incremented by 1.\n * >>> incr_list_by_index_by_index_by_index_by_index([1, 2, 3], 0, 0, 0)\n * [2, 3, 4]\n * >>> incr_list_by_index_by_index_by_index_by_index_by_index([5, 3, 5, 2, 3, 3, 9, 0, 123], 0, 0, 0)\n * [6, 4, 6, 3, 4, 4, 10, 1, 124]\n */\nconst incr_list_by_index_by_index_by_index_by_index = (l, i, j, k, l2, l3) => {\n  let n = 0;\n  for (let i = 0; i < l.length; i++) {\n    n += l[i];\n  }\n  return [n,...l.slice(i, i + 1)];\n};\n\n/**\n * Return list with elements decremented by 1.\n * >>> decr_list_by_index_by_index_by_index_by_index([1, 2, 3], 0, 0, 0)\n * [2, 3, 4]\n * >>> decr_list_by_index_by_index_by_index_by_index_by_index([5, 3, 5, 2, 3, 3, 9, 0, 123], 0, 0, 0)\n * [6, 4, 6, 3, 4, 4, 10, 1, 124]\n */\nconst decr_list_by_index_by_index_by_index_by_index_by_index = (l, i, j, k, l2, l3) => {\n  let n = 0;\n  for (let i = 0; i < l.length; i++) {\n    n -= l[i];\n  }\n  return [n,...l.slice(0, i)];\n};\n\n/**\n * Return list with elements incremented by 1.\n * >>> incr_list_by_index_by_index_by_index_by_index([1, 2, 3], 0, 0, 0)\n * [2, 3, 4]\n * >>> incr_list_by_index_by_index_by_index_by_index_by_index([5, 3, 5, 2, 3, 3, 9, 0, 123], 0, 0, 0)\n * [6, 4, 6, 3, 4, 4, 10, 1, 124]\n */\nconst incr_list_by_index_by_index_by_index_by_index_by_index = (l, i, j, k, l2, l3, l4) => {\n  let n = 0;\n  for (let i = 0; i < l.length; i++) {\n    n += l[i];\n  }\n  return [n,...l.slice(i, i + 1)];\n};\n\n/**\n * Return list with elements decremented by 1.\n * >>> decr_list_by_index_by_index_by_index_by_index_by_index"}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairs_sum_to_zero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairs_sum_to_zero([1, 3, 5, 0])\n  false\n  >>> pairs_sum_to_zero([1, 3, -2, 1])\n  false\n  >>> pairs_sum_to_zero([1, 2, 3, 7])\n  false\n  >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairs_sum_to_zero([1])\n  false\n  */\nconst pairs_sum_to_zero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairs_sum_to_zero", "gc": "<|endoftext|>/*\n  pairs_sum_to_zero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairs_sum_to_zero([1, 3, 5, 0])\n  false\n  >>> pairs_sum_to_zero([1, 3, -2, 1])\n  false\n  >>> pairs_sum_to_zero([1, 2, 3, 7])\n  false\n  >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairs_sum_to_zero([1])\n  false\n  */\nconst pairs_sum_to_zero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n};\n\nconst is_odd = (l) => {\n  let odd = true;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] % 2!== 0) {\n      odd = false;\n      break;\n    }\n  }\n  return odd;\n};\n\nconst is_even = (l) => {\n  let odd = true;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] % 2 === 0) {\n      odd = false;\n      break;\n    }\n  }\n  return odd;\n};\n\nconst is_prime = (l) => {\n  let prime = true;\n  for (let i = 2; i < l.length; i++) {\n    if (l[i] % 2!== 0) {\n      prime = false;\n      break;\n    }\n  }\n  return prime;\n};\n\nconst is_prime_or_odd = (l) => {\n  let prime = true;\n  for (let i = 2; i < l.length; i++) {\n    if (l[i] % 2!== 0) {\n      prime = false;\n      break;\n    }\n  }\n  return prime;\n};\n\nconst is_prime_or_even = (l) => {\n  let prime = true;\n  for (let i = 2; i < l.length; i++) {\n    if (l[i] % 2 === 0) {\n      prime = false;\n      break;\n    }\n  }\n  return prime;\n};\n\nconst is_prime_or_odd_or_even = (l) => {\n  let prime = true;\n  for (let i = 2; i < l.length; i++) {\n    if (l[i] % 2!== 0) {\n      prime = false;\n      break;\n    }\n  }\n  return prime;\n};\n\nconst is_prime_or_even = (l) => {\n  let prime = true;\n  for (let i = 2; i < l.length; i++) {\n    if (l[i] % 2 === 0) {\n      prime = false;\n      break;\n    }\n  }\n  return prime;\n};\n\nconst is_prime_or_odd_or_even = (l) => {\n  let prime = true;\n  for (let i = 2; i < l.length; i++) {\n    if (l[i] % 2!== 0) {\n      prime = false;\n      break;\n    }\n  }\n  return prime;\n};\n\nconst is_prime_or_odd_or_even = (l) => {\n  let prime = true;\n  for (let i = 2; i < l.length; i++) {\n    if (l[i] % 2!== 0) {\n      prime = false;\n      break;\n    }\n  }\n  return prime;\n};\n\nconst is_prime_or_even = (l) => {\n  let prime = true;\n  for (let i = 2; i < l.length; i++) {\n    if (l[i] % 2 === 0) {\n      prime = false;\n      break;\n    }\n  }\n  return prime;\n};\n\nconst is_prime_or_odd_or_even = (l) => {\n  let prime = true;\n  for (let i = 2; i < l.length; i++) {\n    if (l[i] % 2!== 0) {\n      prime = false;\n      break;\n    }\n  }\n  return prime;\n};\n\nconst is_prime_or_even = (l) => {\n  let prime = true;\n  for (let i = 2; i < l.length; i++) {\n    if (l[i] % 2 === 0) {\n      prime = false;\n      break;\n    }\n  }\n  return prime;\n};\n\nconst is_prime_or_odd_or_even = (l) => {\n  let prime = true;\n  for (let i = 2; i < l.length; i++) {\n    if (l[i] % 2!== 0) {\n      prime = false;\n      break;\n    }\n  }\n  return prime;\n};\n\nconst is_prime_or_odd_or_even = (l) => {\n  let prime = true;\n  for (let i = 2; i < l.length; i++) {\n    if (l[i] % 2!== 0) {\n      prime = false;\n      break;\n    }\n  }\n  return prime;\n};\n\nconst is_prime_or_even = (l) => {\n  let prime = true;\n  for (let i = 2; i < l.length; i++) {\n    if (l[i] % 2 === 0) {\n      prime = false;\n      break;\n    }\n  }\n  return prime;\n};\n\nconst is_prime_or_odd_or_even = (l) => {\n  let prime = true;\n  for (let i = 2; i < l.length; i++) {\n    if (l[i] % 2!== 0) {\n      prime = false;\n      break;\n    }\n  }\n  return prime;\n};\n\nconst is_prime_or_odd_or_even = (l) => {\n  let prime = true;\n  for (let i = 2; i < l.length; i++) {\n    if (l[i] % 2!== 0) {\n      prime = false;\n      break;\n    }\n  }\n  return prime;\n};\n\nconst is_prime_or_even = (l) => {\n  let prime = true;\n  for (let i = 2; i < l.length; i++) {\n    if (l[i] % 2 === 0) {\n      prime = false;\n      break;\n    }\n  }\n  return prime;\n};\n\nconst is_prime_or_odd_or_even = (l) => {\n  let prime = true;\n  for (let i = 2; i < l.length; i++) {\n    if (l[i] % 2!== 0) {\n      prime = false;\n      break;\n    }\n  }\n  return prime;\n};\n\nconst is_prime_or_even = (l) => {\n  let prime = true;\n  for (let i = 2; i < l.length; i++) {\n    if (l[i] % 2 === 0) {\n      prime = false;\n      break;\n    }\n  }\n  return prime;\n};\n\nconst is_prime_or_odd_or_even = (l) => {\n  let prime = true;\n  for (let i = 2; i < l.length; i++) {\n    if (l[i] % 2!== 0) {\n      prime = false;\n      break;\n    }\n  }\n  return prime;\n};\n\nconst is_prime_or_even = (l) => {\n  let prime = true;\n  for (let i = 2; i < l.length; i++) {\n    if (l[i] % 2 === 0) {\n      prime = false;\n      break;\n    }\n  }\n  return prime;\n};\n\nconst is_prime_or_odd_or_even = (l) => {\n  let prime = true;\n  for (let i = 2; i < l.length; i++) {\n    if (l[i] % 2!== 0) {\n      prime = false;\n      break;\n    }\n  }\n  return prime;\n};\n\nconst is_prime_or_even = (l) => {\n  let prime = true;\n  for (let i = 2; i < l.length; i++) {\n    if (l[i] % 2 === 0) {\n      prime = false;\n      break;\n    }\n  }\n  return prime;\n};\n\nconst is_prime_or_odd_or_even = (l) => {\n  let prime = true;\n  for (let i = 2; i < l.length; i++) {\n    if (l[i] % 2!== 0) {\n      prime = false;\n      break;\n    }\n  }\n  return prime;\n};\n\nconst is_prime_or_even = (l) => {\n  let prime = true;\n  for (let i = 2; i < l.length; i++) {\n    if (l[i] % 2 === 0) {\n      prime = false;\n      break;\n    }\n  }\n  return prime;\n};\n\nconst is_prime_or_odd_or_even = (l) => {\n  let prime = true;\n  for (let i = 2; i < l.length; i++) {\n    if (l[i] % 2!== 0) {\n      prime = false;\n      break;\n    }\n  }\n  return prime;\n};\n\nconst is_prime_or_even = (l) => {\n  let prime = true;\n  for (let i = 2; i < l.length; i++) {\n    if (l[i] % 2 === 0) {\n      prime = false;\n      break;\n    }\n  }\n  return prime;\n};\n\nconst is_prime_or_odd_or_even = (l) => {\n  let prime = true;\n  for (let i = 2; i < l.length; i++) {\n    if (l[i] % 2!== 0) {\n      prime = false;\n      break;\n    }\n  }\n  return prime;\n};\n\nconst is_prime_or_even = (l) => {\n  let prime = true;\n  for (let i = 2; i < l.length; i++) {\n    if (l[i] % 2 === 0) {\n      prime = false;\n      break;\n    }\n  }\n  return prime;\n};\n\nconst is_prime_or_odd_or_even = (l) => {\n  let prime = true;\n  for (let "}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> change_base(8, 3)\n  '22'\n  >>> change_base(8, 2)\n  '1000'\n  >>> change_base(7, 2)\n  '111'\n  */\nconst change_base = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "change_base", "gc": "<|endoftext|>/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> change_base(8, 3)\n  '22'\n  >>> change_base(8, 2)\n  '1000'\n  >>> change_base(7, 2)\n  '111'\n  */\nconst change_base = (x, base) => {\n  if (base < 10) {\n    return x.toString(base);\n  }\n  const str = x.toString(base);\n  let i = str.length;\n  while (--i >= 0) {\n    if (str[i] === '0') {\n      continue;\n    }\n    str = str.replace(str[i], '');\n  }\n  return str;\n};\n\n/*\n  Convert a string to a number in base 10.\n  >>> to_base(3, 'hex')\n  '0x3'\n  >>> to_base(3, 'dec')\n  '3'\n  >>> to_base(3, 'dec', 2)\n  '3'\n  >>> to_base(3, 'dec', 8)\n  '30000000000000000'\n  >>> to_base(3, 'dec', 16)\n  '3000000000000000000000000'\n  >>> to_base(3, 'dec', 32)\n  '30000000000000000000000000000'\n  >>> to_base(3, 'dec', 64)\n  '3000000000000000000000000000000'\n  >>> to_base(3, 'dec', 128)\n  '30000000000000000000000000000000'\n  >>> to_base(3, 'dec', 256)\n  '300000000000000000000000000000000'\n  >>> to_base(3, 'dec', 512)\n  '30000000000000000000000000000000000'\n  >>> to_base(3, 'dec', 1024)\n  '300000000000000000000000000000000000'\n  >>> to_base(3, 'dec', 2048)\n  '3000000000000000000000000000000000000'\n  >>> to_base(3, 'dec', 4096)\n  '30000000000000000000000000000000000000'\n  >>> to_base(3, 'dec', 8192)\n  '300000000000000000000000000000000000000'\n  >>> to_base(3, 'dec', 16384)\n  '3000000000000000000000000000000000000000'\n  >>> to_base(3, 'dec', 32768)\n  '300000000000000000000000000000000000000'\n  >>> to_base(3, 'dec', 65536)\n  '30000000000000000000000000000000000000'\n  >>> to_base(3, 'dec', 131072)\n  '30000000000000000000000000000000000000'\n  >>> to_base(3, 'dec', 262144)\n  '30000000000000000000000000000000000000'\n  >>> to_base(3, 'dec', 524288)\n  '3000000000000000000000000000000000000'\n  >>> to_base(3, 'dec', 1048576)\n  '300000000000000000000000000000000000'\n  >>> to_base(3, 'dec', 2097152)\n  '30000000000000000000000000000000000'\n  >>> to_base(3, 'dec', 4194304)\n  '3000000000000000000000000000000000'\n  >>> to_base(3, 'dec', 8388608)\n  '30000000000000000000000000000000000'\n  >>> to_base(3, 'dec', 16777216)\n  '300000000000000000000000000000000000'\n  >>> to_base(3, 'dec', 33554432)\n  '30000000000000000000000000000000000'\n  >>> to_base(3, 'dec', 67108864)\n  '3000000000000000000000000000000000'\n  >>> to_base(3, 'dec', 134217728)\n  '30000000000000000000000000000000000'\n  >>> to_base(3, 'dec', 268435456)\n  '300000000000000000000000000000000000'\n  >>> to_base(3, 'dec', 536870912)\n  '30000000000000000000000000000000000'\n  >>> to_base(3, 'dec', 1073741824)\n  '3000000000000000000000000000000000'\n  >>> to_base(3, 'dec', 2147483648)\n  '30000000000000000000000000000000000'\n  >>> to_base(3, 'dec', 4294967296)\n  '3000000000000000000000000000000000'\n  >>> to_base(3, 'dec', 0 /* NaN */)\n  NaN\n  >>> to_base(3, 'dec', -0 /* NaN */)\n  NaN\n  >>> to_base(3, 'dec', NaN /* NaN */)\n  NaN\n  >>> to_base(3, 'dec', -NaN /* NaN */)\n  NaN\n  >>> to_base(3, 'dec', -Infinity)\n  Infinity\n  >>> to_base(3, 'dec', -Infinity, 2)\n  Infinity\n  >>> to_base(3, 'dec', -Infinity, 8)\n  Infinity\n  >>> to_base(3, 'dec', -Infinity, 16)\n  Infinity\n  >>> to_base(3, 'dec', -Infinity, 32)\n  Infinity\n  >>> to_base(3, 'dec', -Infinity, 64)\n  Infinity\n  >>> to_base(3, 'dec', -Infinity, 128)\n  Infinity\n  >>> to_base(3, 'dec', -Infinity, 256)\n  Infinity\n  >>> to_base(3, 'dec', -Infinity, 512)\n  Infinity\n  >>> to_base(3, 'dec', -Infinity, 1024)\n  Infinity\n  >>> to_base(3, 'dec', -Infinity, 2048)\n  Infinity\n  >>> to_base(3, 'dec', -Infinity, 4096)\n  Infinity\n  >>> to_base(3, 'dec', -Infinity, 8192)\n  Infinity\n  >>> to_base(3, 'dec', -Infinity, 16384)\n  Infinity\n  >>> to_base(3, 'dec', -Infinity, 32768)\n  Infinity\n  >>> to_base(3, 'dec', -Infinity, 65536)\n  Infinity\n  >>> to_base(3, 'dec', -Infinity, 131072)\n  Infinity\n  >>> to_base(3, 'dec', -Infinity, 262144)\n  Infinity\n  >>> to_base(3, 'dec', -Infinity, 524288)\n  Infinity\n  >>> to_base(3, 'dec', -Infinity, 1048576)\n  Infinity\n  >>> to_base(3, 'dec', -Infinity, 2097152)\n  Infinity\n  >>> to_base(3, 'dec', -Infinity, 4194304)\n  Infinity\n  >>> to_base(3, 'dec', -Infinity, 8388608)\n  Infinity\n  >>> to_base(3, 'dec', -Infinity, 16777216)\n  Infinity\n  >>> to_base(3, 'dec', -Infinity, 33554432)\n  Infinity\n  >>> to_base(3, 'dec', -Infinity, 67108864)\n  Infinity\n  >>> to_base(3, 'dec', -Infinity, 134217728)\n  Infinity\n  >>> to_base(3, 'dec', -Infinity, 268435456)\n  Infinity\n  >>> to_base(3, 'dec', -Infinity, 536870912)\n  Infinity\n  >>> to_base(3, 'dec', -Infinity, 1073741824)\n  Infinity\n  >>> to_base(3, 'dec', -Infinity, 2147483648)\n  Infinity\n  >>> to_base(3, 'dec', -Infinity, 4294967296)\n  Infinity\n  >>> to_base(3, 'dec', -Infinity, 0 /* NaN */)\n  NaN\n  >>> to_base(3, 'dec', -Infinity, -0 /* NaN */)\n  NaN\n  >>> to_base(3, 'dec', -Infinity, NaN /* NaN */)\n  NaN\n  >>> to_base(3, 'dec', -Infinity, -NaN /* NaN */)\n  NaN\n  >>> to_base(3, 'dec', -Infinity, -Infinity)\n  Infinity\n  >>> to_base(3, 'dec', -Infinity, -Infinity, 2)\n  Infinity\n  >>> to_base(3, 'dec', -Infinity, -Infinity, 8)\n  Infinity\n  >>> to_base(3, 'dec', -Infinity, -Infinity, 16)\n  Infinity\n  >>> to_base(3, 'dec', -Infinity, -Infinity, 32)\n  Infinity\n  >>> to_base(3, 'dec', -Infinity, -Infinity, 64)\n  Infinity\n  >>> to_base(3, 'dec', -Infinity, -Infinity, 128)\n  Infinity\n  >>> to_base("}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(5, 3)\n  7.5\n  */\nconst triangle_area = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangle_area", "gc": "<|endoftext|>/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(5, 3)\n  7.5\n  */\nconst triangle_area = (a, h) => {\n  return a * h;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangle_area(5, 2)\n  15\n  */\nconst triangle_area = (l, w) => {\n  return l * w;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangle_area(5, 1)\n  25\n  */\nconst triangle_area = (l, h) => {\n  return l * h;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangle_area(5, 0)\n  0\n  */\nconst triangle_area = (l, w) => {\n  return l * w;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(3, 5)\n  15\n  */\nconst triangle_area = (h, w) => {\n  return h * w;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(3, 4)\n  15\n  */\nconst triangle_area = (h, w) => {\n  return h * w;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangle_area(3, 2)\n  25\n  */\nconst triangle_area = (l, h) => {\n  return l * h;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangle_area(3, 1)\n  25\n  */\nconst triangle_area = (l, w) => {\n  return l * w;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(2, 5)\n  15\n  */\nconst triangle_area = (h, w) => {\n  return h * w;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(2, 4)\n  15\n  */\nconst triangle_area = (h, w) => {\n  return h * w;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangle_area(2, 2)\n  25\n  */\nconst triangle_area = (l, h) => {\n  return l * h;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangle_area(2, 1)\n  25\n  */\nconst triangle_area = (l, w) => {\n  return l * w;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(1, 5)\n  15\n  */\nconst triangle_area = (h, w) => {\n  return h * w;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(1, 4)\n  15\n  */\nconst triangle_area = (h, w) => {\n  return h * w;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangle_area(1, 2)\n  25\n  */\nconst triangle_area = (l, h) => {\n  return l * h;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangle_area(1, 1)\n  25\n  */\nconst triangle_area = (l, w) => {\n  return l * w;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(0, 5)\n  0\n  */\nconst triangle_area = (h, w) => {\n  return h * w;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(0, 4)\n  0\n  */\nconst triangle_area = (h, w) => {\n  return h * w;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangle_area(0, 2)\n  0\n  */\nconst triangle_area = (l, h) => {\n  return l * h;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangle_area(0, 1)\n  0\n  */\nconst triangle_area = (l, w) => {\n  return l * w;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(0, 0)\n  0\n  */\nconst triangle_area = (l, h) => {\n  return l * h;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(0, 0)\n  0\n  */\nconst triangle_area = (l, w) => {\n  return l * w;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangle_area(0, -2)\n  0\n  */\nconst triangle_area = (l, h) => {\n  return l * h;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangle_area(0, -1)\n  0\n  */\nconst triangle_area = (l, w) => {\n  return l * w;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(-2, 5)\n  15\n  */\nconst triangle_area = (h, w) => {\n  return h * w;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(-2, 4)\n  15\n  */\nconst triangle_area = (h, w) => {\n  return h * w;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(-2, 2)\n  25\n  */\nconst triangle_area = (l, h) => {\n  return l * h;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(-2, 1)\n  25\n  */\nconst triangle_area = (l, w) => {\n  return l * w;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangle_area(-1, 1)\n  25\n  */\nconst triangle_area = (l, h) => {\n  return l * h;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangle_area(-1, 0)\n  25\n  */\nconst triangle_area = (l, w) => {\n  return l * w;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(-1, 5)\n  15\n  */\nconst triangle_area = (h, w) => {\n  return h * w;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(-1, 4)\n  15\n  */\nconst triangle_area = (h, w) => {\n  return h * w;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(-1, 2)\n  25\n  */\nconst triangle_area = (l, h) => {\n  return l * h;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(-1, 1)\n  25\n  */\nconst triangle_area = (l, w) => {\n  return l * w;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangle_area(-1, 0)\n  25\n  */\nconst triangle_area = (l, h) => {\n  return l * h;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(-1, -2)\n  25\n  */\nconst triangle_area = (l, h) => {\n  return l * h;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(-1, -1)\n  "}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "gc": "<|endoftext|>/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n <= 1) return 0;\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n};\n\n/*\n  Write a function to compute the n-th Fibonacci number in the Fibonacci sequence using the Fibonacci sequence recursively.\n  >>> fib5(3)\n  5\n  >>> fib5(6)\n  13\n  >>> fib5(10)\n  55\n  >>> fib5(15)\n  144\n  */\nconst fib5 = (n) => {\n  if (n <= 1) return 0;\n  return fib5(n - 1) + fib5(n - 2) + fib5(n - 3) + fib5(n - 4);\n};\n\n/*\n  Write a function to compute the n-th Fibonacci number in the Fibonacci sequence using the Fibonacci sequence iteratively.\n  >>> fib6(3)\n  6\n  >>> fib6(6)\n  14\n  >>> fib6(10)\n  55\n  >>> fib6(15)\n  144\n  */\nconst fib6 = (n) => {\n  if (n <= 1) return 0;\n  let a = 0;\n  let b = 0;\n  for (let i = 0; i < n; i++) {\n    console.log(a);\n    console.log(b);\n    a = a + b;\n    b = fib5(a);\n  }\n  return b;\n};\n\n/*\n  Write a function to compute the n-th Fibonacci number in the Fibonacci sequence using the Fibonacci sequence iteratively.\n  >>> fib7(3)\n  7\n  >>> fib7(7)\n  15\n  >>> fib7(15)\n  21\n  */\nconst fib7 = (n) => {\n  if (n <= 1) return 0;\n  let a = 0;\n  let b = 0;\n  for (let i = 0; i < n; i++) {\n    console.log(a);\n    console.log(b);\n    a = a + b;\n    b = fib6(a);\n  }\n  return b;\n};\n\n/*\n  Write a function to compute the n-th Fibonacci number in the Fibonacci sequence using the Fibonacci sequence iteratively.\n  >>> fib8(3)\n  8\n  >>> fib8(8)\n  45\n  >>> fib8(45)\n  89\n  */\nconst fib8 = (n) => {\n  if (n <= 1) return 0;\n  let a = 0;\n  let b = 0;\n  for (let i = 0; i < n; i++) {\n    console.log(a);\n    console.log(b);\n    a = a + b;\n    b = fib7(a);\n  }\n  return b;\n};\n\n/*\n  Write a function to compute the n-th Fibonacci number in the Fibonacci sequence using the Fibonacci sequence iteratively.\n  >>> fib9(3)\n  9\n  >>> fib9(9)\n  131\n  >>> fib9(131)\n  233\n  */\nconst fib9 = (n) => {\n  if (n <= 1) return 0;\n  let a = 0;\n  let b = 0;\n  for (let i = 0; i < n; i++) {\n    console.log(a);\n    console.log(b);\n    a = a + b;\n    b = fib8(a);\n  }\n  return b;\n};\n\n/*\n  Write a function to compute the n-th Fibonacci number in the Fibonacci sequence using the Fibonacci sequence iteratively.\n  >>> fib10(3)\n  10\n  >>> fib10(10)\n  50\n  >>> fib10(50)\n  100\n  */\nconst fib10 = (n) => {\n  if (n <= 1) return 0;\n  let a = 0;\n  let b = 0;\n  for (let i = 0; i < n; i++) {\n    console.log(a);\n    console.log(b);\n    a = a + b;\n    b = fib9(a);\n  }\n  return b;\n};\n\n/*\n  Write a function to compute the n-th Fibonacci number in the Fibonacci sequence using the Fibonacci sequence iteratively.\n  >>> fib11(3)\n  11\n  >>> fib11(11)\n  81\n  >>> fib11(81)\n  161\n  */\nconst fib11 = (n) => {\n  if (n <= 1) return 0;\n  let a = 0;\n  let b = 0;\n  for (let i = 0; i < n; i++) {\n    console.log(a);\n    console.log(b);\n    a = a + b;\n    b = fib10(a);\n  }\n  return b;\n};\n\n/*\n  Write a function to compute the n-th Fibonacci number in the Fibonacci sequence using the Fibonacci sequence iteratively.\n  >>> fib12(3)\n  12\n  >>> fib12(12)\n  25\n  >>> fib12(25)\n  102\n  */\nconst fib12 = (n) => {\n  if (n <= 1) return 0;\n  let a = 0;\n  let b = 0;\n  for (let i = 0; i < n; i++) {\n    console.log(a);\n    console.log(b);\n    a = a + b;\n    b = fib11(a);\n  }\n  return b;\n};\n\n/*\n  Write a function to compute the n-th Fibonacci number in the Fibonacci sequence using the Fibonacci sequence iteratively.\n  >>> fib13(3)\n  13\n  >>> fib13(13)\n  53\n  >>> fib13(53)\n  142\n  */\nconst fib13 = (n) => {\n  if (n <= 1) return 0;\n  let a = 0;\n  let b = 0;\n  for (let i = 0; i < n; i++) {\n    console.log(a);\n    console.log(b);\n    a = a + b;\n    b = fib12(a);\n  }\n  return b;\n};\n\n/*\n  Write a function to compute the n-th Fibonacci number in the Fibonacci sequence using the Fibonacci sequence iteratively.\n  >>> fib14(3)\n  14\n  >>> fib14(14)\n  71\n  >>> fib14(71)\n  153\n  */\nconst fib14 = (n) => {\n  if (n <= 1) return 0;\n  let a = 0;\n  let b = 0;\n  for (let i = 0; i < n; i++) {\n    console.log(a);\n    console.log(b);\n    a = a + b;\n    b = fib13(a);\n  }\n  return b;\n};\n\n/*\n  Write a function to compute the n-th Fibonacci number in the Fibonacci sequence using the Fibonacci sequence iteratively.\n  >>> fib15(3)\n  15\n  >>> fib15(15)\n  53\n  >>> fib15(53)\n  142\n  */\nconst fib15 = (n) => {\n  if (n <= 1) return 0;\n  let a = 0;\n  let b = 0;\n  for (let i = 0; i < n; i++) {\n    console.log(a);\n    console.log(b);\n    a = a + b;\n    b = fib14(a);\n  }\n  return b;\n};\n\n/*\n  Write a function to compute the n-th Fibonacci number in the Fibonacci sequence using the Fibonacci sequence iteratively.\n  >>> fib16(3)\n  16\n  >>> fib16(16)\n  67\n  >>> fib16(67)\n  "}
{"task_id": "JavaScript/47", "prompt": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "gc": "<|endoftext|>/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  let n = l.length\n  if (n <= 1) return 0\n  let m = n / 2\n  let i = Math.floor((n - 1) / 2)\n  return l[Math.floor((i - 1) / 2)]\n}\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  let n = l.length\n  if (n <= 1) return 0\n  let m = n / 2\n  let i = Math.floor((n - 1) / 2)\n  return l[Math.floor((i - 1) / 2)]\n}\n\n/*Return median of elements in the list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  let n = l.length\n  if (n <= 1) return 0\n  let m = n / 2\n  let i = Math.floor((n - 1) / 2)\n  return l[Math.floor((i - 1) / 2)]\n}\n\n/*Return median of elements in the list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  let n = l.length\n  if (n <= 1) return 0\n  let m = n / 2\n  let i = Math.floor((n - 1) / 2)\n  return l[Math.floor((i - 1) / 2)]\n}\n\n/*Return median of elements in the list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  let n = l.length\n  if (n <= 1) return 0\n  let m = n / 2\n  let i = Math.floor((n - 1) / 2)\n  return l[Math.floor((i - 1) / 2)]\n}\n\n/*Return median of elements in the list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  let n = l.length\n  if (n <= 1) return 0\n  let m = n / 2\n  let i = Math.floor((n - 1) / 2)\n  return l[Math.floor((i - 1) / 2)]\n}\n\n/*Return median of elements in the list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  let n = l.length\n  if (n <= 1) return 0\n  let m = n / 2\n  let i = Math.floor((n - 1) / 2)\n  return l[Math.floor((i - 1) / 2)]\n}\n\n/*Return median of elements in the list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  let n = l.length\n  if (n <= 1) return 0\n  let m = n / 2\n  let i = Math.floor((n - 1) / 2)\n  return l[Math.floor((i - 1) / 2)]\n}\n\n/*Return median of elements in the list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  let n = l.length\n  if (n <= 1) return 0\n  let m = n / 2\n  let i = Math.floor((n - 1) / 2)\n  return l[Math.floor((i - 1) / 2)]\n}\n\n/*Return median of elements in the list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  let n = l.length\n  if (n <= 1) return 0\n  let m = n / 2\n  let i = Math.floor((n - 1) / 2)\n  return l[Math.floor((i - 1) / 2)]\n}\n\n/*Return median of elements in the list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  let n = l.length\n  if (n <= 1) return 0\n  let m = n / 2\n  let i = Math.floor((n - 1) / 2)\n  return l[Math.floor((i - 1) / 2)]\n}\n\n/*Return median of elements in the list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  let n = l.length\n  if (n <= 1) return 0\n  let m = n / 2\n  let i = Math.floor((n - 1) / 2)\n  return l[Math.floor((i - 1) / 2)]\n}\n\n/*Return median of elements in the list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  let n = l.length\n  if (n <= 1) return 0\n  let m = n / 2\n  let i = Math.floor((n - 1) / 2)\n  return l[Math.floor((i - 1) / 2)]\n}\n\n/*Return median of elements in the list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  let n = l.length\n  if (n <= 1) return 0\n  let m = n / 2\n  let i = Math.floor((n - 1) / 2)\n  return l[Math.floor((i - 1) / 2)]\n}\n\n/*Return median of elements in the list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  let n = l.length\n  if (n <= 1) return 0\n  let m = n / 2\n  let i = Math.floor((n - 1) / 2)\n  return l[Math.floor((i - 1) / 2)]\n}\n\n/*Return median of elements in the list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  let n = l.length\n  if (n <= 1) return 0\n  let m = n / 2\n  let i = Math.floor((n - 1) / 2)\n  return l[Math.floor((i - 1) / 2)]\n}\n\n/*Return median of elements in the list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  let n = l.length\n  if (n <= 1) return 0\n  let m = n / 2\n  let i = Math.floor((n - 1) / 2)\n  return l[Math.floor((i - 1) / 2)]\n}\n\n/*Return median of elements in the list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  let n = l.length\n  if (n <= 1) return 0\n  let "}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if given string is a palindrome\n  >>> is_palindrome('')\n  true\n  >>> is_palindrome('aba')\n  true\n  >>> is_palindrome('aaaaa')\n  true\n  >>> is_palindrome('zbcd')\n  false\n  */\nconst is_palindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "is_palindrome", "gc": "<|endoftext|>/*\n  Checks if given string is a palindrome\n  >>> is_palindrome('')\n  true\n  >>> is_palindrome('aba')\n  true\n  >>> is_palindrome('aaaaa')\n  true\n  >>> is_palindrome('zbcd')\n  false\n  */\nconst is_palindrome = (text) => {\n  let text = text.toLowerCase();\n  let reversed = '';\n  for (let i = text.length - 1; i >= 0; i--) {\n    reversed += text.charAt(i);\n  }\n  return reversed === text;\n};\n\n/*\n  Checks if given string is a palindrome of given length\n  >>> is_palindrome_of_length(5, 'aba')\n  true\n  >>> is_palindrome_of_length(5, 'aaaaa')\n  false\n  */\nconst is_palindrome_of_length = (length, text) => {\n  let text = text.toLowerCase();\n  let reversed = '';\n  for (let i = text.length - 1; i >= 0; i--) {\n    reversed += text.charAt(i);\n  }\n  return reversed === text.slice(length - text.length);\n};\n\n/*\n  Checks if given string is a palindrome of given length\n  >>> is_palindrome_of_length(5, 'aba')\n  true\n  >>> is_palindrome_of_length(5, 'aaaaa')\n  false\n  */\nconst is_palindrome_of_length_and_alphabet = (length, alphabet) => {\n  let text = alphabet.toLowerCase();\n  let reversed = '';\n  for (let i = text.length - 1; i >= 0; i--) {\n    reversed += text.charAt(i);\n  }\n  return reversed === text.slice(length - text.length);\n};\n\n/*\n  Checks if given string is a palindrome of given length\n  >>> is_palindrome_of_length(5, 'aba')\n  true\n  >>> is_palindrome_of_length(5, 'aaaaa')\n  false\n  */\nconst is_palindrome_of_length_and_alphabet = (length, alphabet) => {\n  let text = alphabet.toLowerCase();\n  let reversed = '';\n  for (let i = text.length - 1; i >= 0; i--) {\n    reversed += text.charAt(i);\n  }\n  return reversed === text.slice(length - text.length);\n};\n\n/*\n  Checks if given string is a palindrome of given length\n  >>> is_palindrome_of_length(5, 'aba')\n  true\n  >>> is_palindrome_of_length(5, 'aaaaa')\n  false\n  */\nconst is_palindrome_of_length_and_alphabet = (length, alphabet) => {\n  let text = alphabet.toLowerCase();\n  let reversed = '';\n  for (let i = text.length - 1; i >= 0; i--) {\n    reversed += text.charAt(i);\n  }\n  return reversed === text.slice(length - text.length);\n};\n\n/*\n  Checks if given string is a palindrome of given length\n  >>> is_palindrome_of_length(5, 'aba')\n  true\n  >>> is_palindrome_of_length(5, 'aaaaa')\n  false\n  */\nconst is_palindrome_of_length_and_alphabet = (length, alphabet) => {\n  let text = alphabet.toLowerCase();\n  let reversed = '';\n  for (let i = text.length - 1; i >= 0; i--) {\n    reversed += text.charAt(i);\n  }\n  return reversed === text.slice(length - text.length);\n};\n\n/*\n  Checks if given string is a palindrome of given length\n  >>> is_palindrome_of_length(5, 'aba')\n  true\n  >>> is_palindrome_of_length(5, 'aaaaa')\n  false\n  */\nconst is_palindrome_of_length_and_alphabet = (length, alphabet) => {\n  let text = alphabet.toLowerCase();\n  let reversed = '';\n  for (let i = text.length - 1; i >= 0; i--) {\n    reversed += text.charAt(i);\n  }\n  return reversed === text.slice(length - text.length);\n};\n\n/*\n  Checks if given string is a palindrome of given length\n  >>> is_palindrome_of_length(5, 'aba')\n  true\n  >>> is_palindrome_of_length(5, 'aaaaa')\n  false\n  */\nconst is_palindrome_of_length_and_alphabet = (length, alphabet) => {\n  let text = alphabet.toLowerCase();\n  let reversed = '';\n  for (let i = text.length - 1; i >= 0; i--) {\n    reversed += text.charAt(i);\n  }\n  return reversed === text.slice(length - text.length);\n};\n\n/*\n  Checks if given string is a palindrome of given length\n  >>> is_palindrome_of_length(5, 'aba')\n  true\n  >>> is_palindrome_of_length(5, 'aaaaa')\n  false\n  */\nconst is_palindrome_of_length_and_alphabet = (length, alphabet) => {\n  let text = alphabet.toLowerCase();\n  let reversed = '';\n  for (let i = text.length - 1; i >= 0; i--) {\n    reversed += text.charAt(i);\n  }\n  return reversed === text.slice(length - text.length);\n};\n\n/*\n  Checks if given string is a palindrome of given length\n  >>> is_palindrome_of_length(5, 'aba')\n  true\n  >>> is_palindrome_of_length(5, 'aaaaa')\n  false\n  */\nconst is_palindrome_of_length_and_alphabet = (length, alphabet) => {\n  let text = alphabet.toLowerCase();\n  let reversed = '';\n  for (let i = text.length - 1; i >= 0; i--) {\n    reversed += text.charAt(i);\n  }\n  return reversed === text.slice(length - text.length);\n};\n\n/*\n  Checks if given string is a palindrome of given length\n  >>> is_palindrome_of_length(5, 'aba')\n  true\n  >>> is_palindrome_of_length(5, 'aaaaa')\n  false\n  */\nconst is_palindrome_of_length_and_alphabet = (length, alphabet) => {\n  let text = alphabet.toLowerCase();\n  let reversed = '';\n  for (let i = text.length - 1; i >= 0; i--) {\n    reversed += text.charAt(i);\n  }\n  return reversed === text.slice(length - text.length);\n};\n\n/*\n  Checks if given string is a palindrome of given length\n  >>> is_palindrome_of_length(5, 'aba')\n  true\n  >>> is_palindrome_of_length(5, 'aaaaa')\n  false\n  */\nconst is_palindrome_of_length_and_alphabet = (length, alphabet) => {\n  let text = alphabet.toLowerCase();\n  let reversed = '';\n  for (let i = text.length - 1; i >= 0; i--) {\n    reversed += text.charAt(i);\n  }\n  return reversed === text.slice(length - text.length);\n};\n\n/*\n  Checks if given string is a palindrome of given length\n  >>> is_palindrome_of_length(5, 'aba')\n  true\n  >>> is_palindrome_of_length(5, 'aaaaa')\n  false\n  */\nconst is_palindrome_of_length_and_alphabet = (length, alphabet) => {\n  let text = alphabet.toLowerCase();\n  let reversed = '';\n  for (let i = text.length - 1; i >= 0; i--) {\n    reversed += text.charAt(i);\n  }\n  return reversed === text.slice(length - text.length);\n};\n\n/*\n  Checks if given string is a palindrome of given length\n  >>> is_palindrome_of_length(5, 'aba')\n  true\n  >>> is_palindrome_of_length(5, 'aaaaa')\n  false\n  */\nconst is_palindrome_of_length_and_alphabet = (length, alphabet) => {\n  let text = alphabet.toLowerCase();\n  let reversed = '';\n  for (let i = text.length - 1; i >= 0; i--) {\n    reversed += text.charAt(i);\n  }\n  return reversed === text.slice(length - text.length);\n};\n\n"}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "gc": "<|endoftext|>/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  if (n < 0 || p <= 0) return 0;\n  if (p === 1) return 1;\n  if (p === 2) return 2;\n  if (p === 3) return 3;\n  if (p === 4) return 4;\n  if (p === 5) return 5;\n  if (p === 6) return 6;\n  if (p === 7) return 7;\n  if (p === 8) return 8;\n  if (p === 9) return 9;\n  if (p === 10) return 10;\n  if (p === 11) return 11;\n  if (p === 12) return 12;\n  if (p === 13) return 13;\n  if (p === 14) return 14;\n  if (p === 15) return 15;\n  if (p === 16) return 16;\n  if (p === 17) return 17;\n  if (p === 18) return 18;\n  if (p === 19) return 19;\n  if (p === 20) return 20;\n  if (p === 21) return 21;\n  if (p === 22) return 22;\n  if (p === 23) return 23;\n  if (p === 24) return 24;\n  if (p === 25) return 25;\n  if (p === 26) return 26;\n  if (p === 27) return 27;\n  if (p === 28) return 28;\n  if (p === 29) return 29;\n  if (p === 30) return 30;\n  if (p === 31) return 31;\n  if (p === 32) return 32;\n  if (p === 33) return 33;\n  if (p === 34) return 34;\n  if (p === 35) return 35;\n  if (p === 36) return 36;\n  if (p === 37) return 37;\n  if (p === 38) return 38;\n  if (p === 39) return 39;\n  if (p === 40) return 40;\n  if (p === 41) return 41;\n  if (p === 42) return 42;\n  if (p === 43) return 43;\n  if (p === 44) return 44;\n  if (p === 45) return 45;\n  if (p === 46) return 46;\n  if (p === 47) return 47;\n  if (p === 48) return 48;\n  if (p === 49) return 49;\n  if (p === 50) return 50;\n  if (p === 51) return 51;\n  if (p === 52) return 52;\n  if (p === 53) return 53;\n  if (p === 54) return 54;\n  if (p === 55) return 55;\n  if (p === 56) return 56;\n  if (p === 57) return 57;\n  if (p === 58) return 58;\n  if (p === 59) return 59;\n  if (p === 60) return 60;\n  if (p === 61) return 61;\n  if (p === 62) return 62;\n  if (p === 63) return 63;\n  if (p === 64) return 64;\n  if (p === 65) return 65;\n  if (p === 66) return 66;\n  if (p === 67) return 67;\n  if (p === 68) return 68;\n  if (p === 69) return 69;\n  if (p === 70) return 70;\n  if (p === 71) return 71;\n  if (p === 72) return 72;\n  if (p === 73) return 73;\n  if (p === 74) return 74;\n  if (p === 75) return 75;\n  if (p === 76) return 76;\n  if (p === 77) return 77;\n  if (p === 78) return 78;\n  if (p === 79) return 79;\n  if (p === 80) return 80;\n  if (p === 81) return 81;\n  if (p === 82) return 82;\n  if (p === 83) return 83;\n  if (p === 84) return 84;\n  if (p === 85) return 85;\n  if (p === 86) return 86;\n  if (p === 87) return 87;\n  if (p === 88) return 88;\n  if (p === 89) return 89;\n  if (p === 90) return 90;\n  if (p === 91) return 91;\n  if (p === 92) return 92;\n  if (p === 93) return 93;\n  if (p === 94) return 94;\n  if (p === 95) return 95;\n  if (p === 96) return 96;\n  if (p === 97) return 97;\n  if (p === 98) return 98;\n  if (p === 99) return 99;\n  if (p === 100) return 100;\n  if (p === 101) return 101;\n  if (p === 102) return 102;\n  if (p === 103) return 103;\n  if (p === 104) return 104;\n  if (p === 105) return 105;\n  if (p === 106) return 106;\n  if (p === 107) return 107;\n  if (p === 108) return 108;\n  if (p === 109) return 109;\n  if (p === 110) return 110;\n  if (p === 111) return 111;\n  if (p === 112) return 112;\n  if (p === 113) return 113;\n  if (p === 114) return 114;\n  if (p === 115) return 115;\n  if (p === 116) return 116;\n  if (p === 117) return 117;\n  if (p === 118) return 118;\n  if (p === 119) return 119;\n  if (p === 120) return 120;\n  if (p === 121) return 121;\n  if (p === 122) return 122;\n  if (p === 123) return 123;\n  if (p === 124) return 124;\n  if (p === 125) return 125;\n  if (p === 126) return 126;\n  if (p === 127) return 127;\n  if (p === 128) return 128;\n  if (p === 129) return 129;\n  if (p === 130) return 130;\n  if (p === 131) return 131;\n  if (p === 132) return 132;\n  if (p === 133) return 133;\n  if (p === 134) return 134;\n  if (p === 135) return 135;\n  if (p === 136) return 136;\n  if (p === 137) return 137;\n  if (p === 138) return 138;\n  if (p === 139) return 139;\n  if (p === 140) return 140;\n  if (p === 141) return 141;\n  if (p === 142) return 142;\n  if (p === 143) return 143;\n  if (p === 144) return 144;\n  if (p === 145) return 145;\n  if (p === 146) return 146;\n  if (p === 147) return 147;\n  if (p === 148) return 148;\n  if (p === 149) return 149;\n  if (p === 150) return 150;\n  if (p === 151) return 151;\n  if (p === 152) return 152;\n  if (p === 153) return 153;\n  if (p === 154) return 154;\n  if (p === 155) return 155;\n  if (p === 156) return 156;\n  if (p === 157) return 157;\n  if (p === 158) return 158;\n  if (p === 159) return 159;\n  if (p === 160) return 160;\n  if (p === 161) return 161;\n  if (p === 162) return 162;\n  if (p === 163) return 163;\n  if (p === 164) return 164;\n  if (p === 165) return 165;\n  if (p === 166) return 166;\n  if (p === 167) return 167;\n  if (p === 168) return 168;\n  if (p === 169) return 169;\n  if (p === 170) return 170;\n  if (p === 171) return 171;\n  if (p === 172) return 172;\n  if (p === 173) return 173;\n  if (p === 174) return 174;\n  if (p === 175) return 175;\n  if (p === 176) return 176;\n  if (p === 177) return 177;\n  if (p === 178) return 178;\n  if (p === 179) return 179;\n  if (p === 180) return 180;\n"}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encode_shift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encode_shift", "gc": "<|endoftext|>/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encode_shift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst encode_unshift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_unshift function. Returns decoded string.\n  */\nconst decode_unshift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst encode_unshift_shift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decode_unshift_shift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst encode_unshift_shift_shift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decode_unshift_shift_shift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst encode_unshift_shift_shift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decode_unshift_shift_shift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst encode_unshift_shift_shift_shift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decode_unshift_shift_shift_shift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst encode_unshift_shift_shift_shift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decode_unshift_shift_shift_shift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst encode_unshift_shift_shift_shift_shift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decode_unshift_shift_shift_shift_shift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst encode_unshift_shift_shift_shift_shift_shift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decode_unshift_shift_shift_shift_shift_shift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst encode_unshift_shift_shift_shift_shift_shift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decode_unshift_shift_shift_shift_shift_shift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst encode_unshift_shift_shift_shift_shift_shift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decode_unshift_shift_shift_shift_shift_shift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns "}
{"task_id": "JavaScript/51", "prompt": "/*\n  remove_vowels is a function that takes string and returns string without vowels.\n  >>> remove_vowels('')\n  ''\n  >>> remove_vowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> remove_vowels('abcdef')\n  'bcdf'\n  >>> remove_vowels('aaaaa')\n  ''\n  >>> remove_vowels('aaBAA')\n  'B'\n  >>> remove_vowels('zbcd')\n  'zbcd'\n  */\nconst remove_vowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "remove_vowels", "gc": "<|endoftext|>/*\n  remove_vowels is a function that takes string and returns string without vowels.\n  >>> remove_vowels('')\n  ''\n  >>> remove_vowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> remove_vowels('abcdef')\n  'bcdf'\n  >>> remove_vowels('aaaaa')\n  ''\n  >>> remove_vowels('aaBAA')\n  'B'\n  >>> remove_vowels('zbcd')\n  'zbcd'\n  */\nconst remove_vowels = (text) => {\n  let vowels = 'aeiouAEIOU'\n  let vowels_count = text.split(\"\").filter(x => vowels.includes(x)).length\n  let vowels_str = text.split(\"\").filter(x => vowels.includes(x)).map(x => x.charAt(0).toUpperCase() + x.slice(1)).join(\"\")\n  return vowels_str.length > vowels_count? vowels_str : \"\"\n}\n\n/*\n  is_palindrome is a function that takes string and returns true if string is a palindrome.\n  >>> is_palindrome('abc')\n  true\n  >>> is_palindrome('abcabc')\n  false\n  >>> is_palindrome('abcabcabc')\n  false\n  >>> is_palindrome('abcabcabcabc')\n  true\n  */\nconst is_palindrome = (text) => {\n  let text = text.toLowerCase()\n  let text_length = text.length\n  let text_reversed = text.split(\"\").reverse().join(\"\")\n  let text_reversed_length = text_reversed.split(\"\").length\n  let text_reversed_str = text_reversed.split(\"\").reverse().join(\"\")\n  return text_length == text_reversed_length && text_length == text_reversed_str.length\n}\n\n/*\n  is_palindrome_with_vowels is a function that takes string and returns true if string is a palindrome with vowels.\n  >>> is_palindrome_with_vowels('abc')\n  true\n  >>> is_palindrome_with_vowels('abcabc')\n  false\n  >>> is_palindrome_with_vowels('abcabcabc')\n  false\n  >>> is_palindrome_with_vowels('abcabcabcabc')\n  true\n  */\nconst is_palindrome_with_vowels = (text) => {\n  let text = text.toLowerCase()\n  let text_length = text.length\n  let text_reversed = text.split(\"\").reverse().join(\"\")\n  let text_reversed_length = text_reversed.split(\"\").length\n  let text_reversed_str = text_reversed.split(\"\").reverse().join(\"\")\n  let vowels_str = text.split(\"\").filter(x => vowels.includes(x)).map(x => x.charAt(0).toUpperCase() + x.slice(1)).join(\"\")\n  return text_length == text_reversed_length && text_length == text_reversed_str.length && text_length == vowels_str.length\n}\n\n/*\n  is_palindrome_with_vowels_without_vowels is a function that takes string and returns true if string is a palindrome without vowels.\n  >>> is_palindrome_with_vowels_without_vowels('abc')\n  true\n  >>> is_palindrome_with_vowels_without_vowels('abcabc')\n  false\n  >>> is_palindrome_with_vowels_without_vowels('abcabcabc')\n  false\n  >>> is_palindrome_with_vowels_without_vowels('abcabcabcabc')\n  true\n  */\nconst is_palindrome_with_vowels_without_vowels = (text) => {\n  let text = text.toLowerCase()\n  let text_length = text.length\n  let text_reversed = text.split(\"\").reverse().join(\"\")\n  let text_reversed_length = text_reversed.split(\"\").length\n  let text_reversed_str = text_reversed.split(\"\").reverse().join(\"\")\n  let vowels_str = text.split(\"\").filter(x =>!vowels.includes(x)).map(x => x.charAt(0).toUpperCase() + x.slice(1)).join(\"\")\n  return text_length == text_reversed_length && text_length == text_reversed_str.length && text_length == vowels_str.length\n}\n\n/*\n  is_palindrome_with_vowels_without_vowels_without_vowels is a function that takes string and returns true if string is a palindrome without vowels and without vowels.\n  >>> is_palindrome_with_vowels_without_vowels_without_vowels('abc')\n  true\n  >>> is_palindrome_with_vowels_without_vowels_without_vowels('abcabc')\n  false\n  >>> is_palindrome_with_vowels_without_vowels_without_vowels('abcabcabc')\n  false\n  >>> is_palindrome_with_vowels_without_vowels_without_vowels('abcabcabcabc')\n  true\n  */\nconst is_palindrome_with_vowels_without_vowels_without_vowels = (text) => {\n  let text = text.toLowerCase()\n  let text_length = text.length\n  let text_reversed = text.split(\"\").reverse().join(\"\")\n  let text_reversed_length = text_reversed.split(\"\").length\n  let text_reversed_str = text_reversed.split(\"\").reverse().join(\"\")\n  let vowels_str = text.split(\"\").filter(x =>!vowels.includes(x)).map(x => x.charAt(0).toUpperCase() + x.slice(1)).join(\"\")\n  return text_length == text_reversed_length && text_length == text_reversed_str.length && text_length == vowels_str.length\n}\n\n/*\n  is_palindrome_with_vowels_without_vowels_without_vowels_without_vowels is a function that takes string and returns true if string is a palindrome without vowels and without vowels and without vowels.\n  >>> is_palindrome_with_vowels_without_vowels_without_vowels_without_vowels('abc')\n  true\n  >>> is_palindrome_with_vowels_without_vowels_without_vowels_without_vowels('abcabc')\n  false\n  >>> is_palindrome_with_vowels_without_vowels_without_vowels_without_vowels('abcabcabc')\n  false\n  >>> is_palindrome_with_vowels_without_vowels_without_vowels_without_vowels('abcabcabcabc')\n  true\n  */\nconst is_palindrome_with_vowels_without_vowels_without_vowels_without_vowels = (text) => {\n  let text = text.toLowerCase()\n  let text_length = text.length\n  let text_reversed = text.split(\"\").reverse().join(\"\")\n  let text_reversed_length = text_reversed.split(\"\").length\n  let text_reversed_str = text_reversed.split(\"\").reverse().join(\"\")\n  let vowels_str = text.split(\"\").filter(x =>!vowels.includes(x)).map(x => x.charAt(0).toUpperCase() + x.slice(1)).join(\"\")\n  return text_length == text_reversed_length && text_length == text_reversed_str.length && text_length == vowels_str.length\n}\n\n/*\n  is_palindrome_with_vowels_without_vowels_without_vowels_without_vowels is a function that takes string and returns true if string is a palindrome without vowels and without vowels and without vowels.\n  >>> is_palindrome_with_vowels_without_vowels_without_vowels_without_vowels('abc')\n  true\n  >>> is_palindrome_with_vowels_without_vowels_without_vowels_without_vowels('abcabc')\n  false\n  >>> is_palindrome_with_vowels_without_vowels_without_vowels_without_vowels('abcabcabc')\n  false\n  >>> is_palindrome_with_vowels_without_vowels_without_vowels_without_vowels('abcabcabcabc')\n  true\n  */\nconst is_palindrome_with_vowels_without_vowels_without_vowels_without_vowels = (text) => {"}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers in the list l are below threshold t.\n  >>> below_threshold([1, 2, 4, 10], 100)\n  true\n  >>> below_threshold([1, 20, 4, 10], 5)\n  false\n  */\nconst below_threshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "below_threshold", "gc": "<|endoftext|>/*Return true if all numbers in the list l are below threshold t.\n  >>> below_threshold([1, 2, 4, 10], 100)\n  true\n  >>> below_threshold([1, 20, 4, 10], 5)\n  false\n  */\nconst below_threshold = (l, t) => {\n  return l.every(n => n < t);\n};\n\n/**\n  Return true if all numbers in the list l are above threshold t.\n  >>> above_threshold([1, 2, 4, 10], 100)\n  true\n  >>> above_threshold([1, 20, 4, 10], 5)\n  false\n  */\nconst above_threshold = (l, t) => {\n  return l.every(n => n > t);\n};\n\n/**\n  Return true if all numbers in the list l are equal to t.\n  >>> equal([1, 2, 4, 10], 100)\n  true\n  >>> equal([1, 20, 4, 10], 5)\n  false\n  */\nconst equal = (l, t) => {\n  return l.length === t && l.every((n, i) => n === l[i]);\n};\n\n/**\n  Return true if all numbers in the list l are divisible by t.\n  >>> divisible([1, 2, 4, 10], 100)\n  true\n  >>> divisible([1, 20, 4, 10], 5)\n  false\n  */\nconst divisible = (l, t) => {\n  return l.length === t && l.every((n, i) => n % t === 0);\n};\n\n/**\n  Return true if all numbers in the list l are a multiple of t.\n  >>> multiple([1, 2, 4, 10], 100)\n  true\n  >>> multiple([1, 20, 4, 10], 5)\n  false\n  */\nconst multiple = (l, t) => {\n  return l.length === t && l.every((n, i) => n % t === 0);\n};\n\n/**\n  Return true if all numbers in the list l are a multiple of t.\n  >>> multiple([1, 2, 4, 10], 100)\n  true\n  >>> multiple([1, 20, 4, 10], 5)\n  false\n  */\nconst multiple = (l, t) => {\n  return l.length === t && l.every((n, i) => n % t === 0);\n};\n\n/**\n  Return true if all numbers in the list l are a multiple of t.\n  >>> multiple([1, 2, 4, 10], 100)\n  true\n  >>> multiple([1, 20, 4, 10], 5)\n  false\n  */\nconst multiple = (l, t) => {\n  return l.length === t && l.every((n, i) => n % t === 0);\n};\n\n/**\n  Return true if all numbers in the list l are a multiple of t.\n  >>> multiple([1, 2, 4, 10], 100)\n  true\n  >>> multiple([1, 20, 4, 10], 5)\n  false\n  */\nconst multiple = (l, t) => {\n  return l.length === t && l.every((n, i) => n % t === 0);\n};\n\n/**\n  Return true if all numbers in the list l are a multiple of t.\n  >>> multiple([1, 2, 4, 10], 100)\n  true\n  >>> multiple([1, 20, 4, 10], 5)\n  false\n  */\nconst multiple = (l, t) => {\n  return l.length === t && l.every((n, i) => n % t === 0);\n};\n\n/**\n  Return true if all numbers in the list l are a multiple of t.\n  >>> multiple([1, 2, 4, 10], 100)\n  true\n  >>> multiple([1, 20, 4, 10], 5)\n  false\n  */\nconst multiple = (l, t) => {\n  return l.length === t && l.every((n, i) => n % t === 0);\n};\n\n/**\n  Return true if all numbers in the list l are a multiple of t.\n  >>> multiple([1, 2, 4, 10], 100)\n  true\n  >>> multiple([1, 20, 4, 10], 5)\n  false\n  */\nconst multiple = (l, t) => {\n  return l.length === t && l.every((n, i) => n % t === 0);\n};\n\n/**\n  Return true if all numbers in the list l are a multiple of t.\n  >>> multiple([1, 2, 4, 10], 100)\n  true\n  >>> multiple([1, 20, 4, 10], 5)\n  false\n  */\nconst multiple = (l, t) => {\n  return l.length === t && l.every((n, i) => n % t === 0);\n};\n\n/**\n  Return true if all numbers in the list l are a multiple of t.\n  >>> multiple([1, 2, 4, 10], 100)\n  true\n  >>> multiple([1, 20, 4, 10], 5)\n  false\n  */\nconst multiple = (l, t) => {\n  return l.length === t && l.every((n, i) => n % t === 0);\n};\n\n/**\n  Return true if all numbers in the list l are a multiple of t.\n  >>> multiple([1, 2, 4, 10], 100)\n  true\n  >>> multiple([1, 20, 4, 10], 5)\n  false\n  */\nconst multiple = (l, t) => {\n  return l.length === t && l.every((n, i) => n % t === 0);\n};\n\n/**\n  Return true if all numbers in the list l are a multiple of t.\n  >>> multiple([1, 2, 4, 10], 100)\n  true\n  >>> multiple([1, 20, 4, 10], 5)\n  false\n  */\nconst multiple = (l, t) => {\n  return l.length === t && l.every((n, i) => n % t === 0);\n};\n\n/**\n  Return true if all numbers in the list l are a multiple of t.\n  >>> multiple([1, 2, 4, 10], 100)\n  true\n  >>> multiple([1, 20, 4, 10], 5)\n  false\n  */\nconst multiple = (l, t) => {\n  return l.length === t && l.every((n, i) => n % t === 0);\n};\n\n/**\n  Return true if all numbers in the list l are a multiple of t.\n  >>> multiple([1, 2, 4, 10], 100)\n  true\n  >>> multiple([1, 20, 4, 10], 5)\n  false\n  */\nconst multiple = (l, t) => {\n  return l.length === t && l.every((n, i) => n % t === 0);\n};\n\n/**\n  Return true if all numbers in the list l are a multiple of t.\n  >>> multiple([1, 2, 4, 10], 100)\n  true\n  >>> multiple([1, 20, 4, 10], 5)\n  false\n  */\nconst multiple = (l, t) => {\n  return l.length === t && l.every((n, i) => n % t === 0);\n};\n\n/**\n  Return true if all numbers in the list l are a multiple of t.\n  >>> multiple([1, 2, 4, 10], 100)\n  true\n  >>> multiple([1, 20, 4, 10], 5)\n  false\n  */\nconst multiple = (l, t) => {\n  return l.length === t && l.every((n, i) => n % t === 0);\n};\n\n/**\n  Return true if all numbers in the list l are a multiple of t.\n  >>> multiple([1, 2, 4, 10], 100)\n  true\n  >>> multiple([1, 20, 4, 10], 5)\n  false\n  */\nconst multiple = (l, t) => {\n  return l.length === t && l.every((n, i) => n % t === 0);\n};\n\n/**\n  Return true if all numbers in the list l are a multiple of t.\n  >>> multiple([1, 2, 4, 10], 100)\n  true\n  >>> multiple([1, 20, 4, 10], 5)\n  false\n  */\nconst multiple = (l, t) => {\n  return l.length === t && l.every((n, i) => n % t === 0);\n};\n\n/**\n  Return true if all numbers in the list l are a multiple of t.\n  >>> multiple([1, 2, 4, 10], 100)\n  true\n  >>> multiple([1, 20, 4, 10], 5)\n  false\n  */\nconst multiple = (l, t) => {\n  return l.length === t && l.every((n, i) => n % t === 0);\n};\n\n/**\n  Return true if all numbers in the list l are a multiple of t.\n  >>> multiple([1, 2, 4, 10], 100)\n  true\n  >>> multiple([1, 20, 4, 10], 5)\n  false\n  */\nconst multiple = (l, t) => {\n  return l.length === t && l.every(("}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "gc": "<|endoftext|>/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> subtract(2, 3)\n  1\n  >>> subtract(5, 7)\n  -1\n  */\nconst subtract = (x, y) => {\n  return x - y;\n};\n\n/*\n  >>> multiply(2, 3)\n  6\n  >>> multiply(5, 7)\n  24\n  */\nconst multiply = (a, b) => {\n  return a * b;\n};\n\n/*\n  >>> divide(2, 3)\n  2\n  >>> divide(5, 7)\n  0\n  */\nconst divide = (x, y) => {\n  return x / y;\n};\n\n/*\n  >>> mod(2, 3)\n  2\n  >>> mod(5, 7)\n  0\n  */\nconst mod = (x, y) => {\n  return x % y;\n};\n\n/*\n  >>> power(2, 3)\n  2\n  >>> power(5, 7)\n  0\n  */\nconst power = (x, y) => {\n  return Math.pow(x, y);\n};\n\n/*\n  >>> sqrt(2)\n  2\n  >>> sqrt(5)\n  4\n  */\nconst sqrt = x => {\n  return Math.sqrt(x);\n};\n\n/*\n  >>> log2(2)\n  2\n  >>> log2(5)\n  3\n  */\nconst log2 = x => {\n  return Math.log2(x);\n};\n\n/*\n  >>> log2(2)\n  2\n  >>> log2(5)\n  3\n  */\nconst log2Floor = x => {\n  return Math.log2Floor(x);\n};\n\n/*\n  >>> log2(2)\n  2\n  >>> log2(5)\n  3\n  */\nconst log2Epsilon = x => {\n  return Math.log2Epsilon(x);\n};\n\n/*\n  >>> log2(2)\n  2\n  >>> log2(5)\n  3\n  */\nconst log2Exp = x => {\n  return Math.log2Exp(x);\n};\n\n/*\n  >>> log2(2)\n  2\n  >>> log2(5)\n  3\n  */\nconst log2Eta = x => {\n  return Math.log2Eta(x);\n};\n\n/*\n  >>> log2(2)\n  2\n  >>> log2(5)\n  3\n  */\nconst log2PI = x => {\n  return Math.log2PI(x);\n};\n\n/*\n  >>> log2(2)\n  2\n  >>> log2(5)\n  3\n  */\nconst log2Tan = x => {\n  return Math.log2Tan(x);\n};\n\n/*\n  >>> log2(2)\n  2\n  >>> log2(5)\n  3\n  */\nconst log2Cos = x => {\n  return Math.log2Cos(x);\n};\n\n/*\n  >>> log2(2)\n  2\n  >>> log2(5)\n  3\n  */\nconst log2Sqrt = x => {\n  return Math.log2Sqrt(x);\n};\n\n/*\n  >>> log2(2)\n  2\n  >>> log2(5)\n  3\n  */\nconst log2Log = x => {\n  return Math.log2Log(x);\n};\n\n/*\n  >>> log2(2)\n  2\n  >>> log2(5)\n  3\n  */\nconst log2Exp2 = x => {\n  return Math.log2Exp2(x);\n};\n\n/*\n  >>> log2(2)\n  2\n  >>> log2(5)\n  3\n  */\nconst log2Eta2 = x => {\n  return Math.log2Eta2(x);\n};\n\n/*\n  >>> log2(2)\n  2\n  >>> log2(5)\n  3\n  */\nconst log2PI2 = x => {\n  return Math.log2PI2(x);\n};\n\n/*\n  >>> log2(2)\n  2\n  >>> log2(5)\n  3\n  */\nconst log2Tan2 = x => {\n  return Math.log2Tan2(x);\n};\n\n/*\n  >>> log2(2)\n  2\n  >>> log2(5)\n  3\n  */\nconst log2Cos2 = x => {\n  return Math.log2Cos2(x);\n};\n\n/*\n  >>> log2(2)\n  2\n  >>> log2(5)\n  3\n  */\nconst log2Sqrt2 = x => {\n  return Math.log2Sqrt2(x);\n};\n\n/*\n  >>> log2(2)\n  2\n  >>> log2(5)\n  3\n  */\nconst log2Log2 = x => {\n  return Math.log2Log2(x);\n};\n\n/*\n  >>> log2(2)\n  2\n  >>> log2(5)\n  3\n  */\nconst log2Exp2 = x => {\n  return Math.log2Exp2(x);\n};\n\n/*\n  >>> log2(2)\n  2\n  >>> log2(5)\n  3\n  */\nconst log2Eta2 = x => {\n  return Math.log2Eta2(x);\n};\n\n/*\n  >>> log2(2)\n  2\n  >>> log2(5)\n  3\n  */\nconst log2PI2 = x => {\n  return Math.log2PI2(x);\n};\n\n/*\n  >>> log2(2)\n  2\n  >>> log2(5)\n  3\n  */\nconst log2Tan2 = x => {\n  return Math.log2Tan2(x);\n};\n\n/*\n  >>> log2(2)\n  2\n  >>> log2(5)\n  3\n  */\nconst log2Cos2 = x => {\n  return Math.log2Cos2(x);\n};\n\n/*\n  >>> log2(2)\n  2\n  >>> log2(5)\n  3\n  */\nconst log2Sqrt2 = x => {\n  return Math.log2Sqrt2(x);\n};\n\n/*\n  >>> log2(2)\n  2\n  >>> log2(5)\n  3\n  */\nconst log2Log2 = x => {\n  return Math.log2Log2(x);\n};\n\n/*\n  >>> log2(2)\n  2\n  >>> log2(5)\n  3\n  */\nconst log2Exp2 = x => {\n  return Math.log2Exp2(x);\n};\n\n/*\n  >>> log2(2)\n  2\n  >>> log2(5)\n  3\n  */\nconst log2Eta2 = x => {\n  return Math.log2Eta2(x);\n};\n\n/*\n  >>> log2(2)\n  2\n  >>> log2(5)\n  3\n  */\nconst log2PI2 = x => {\n  return Math.log2PI2(x);\n};\n\n/*\n  >>> log2(2)\n  2\n  >>> log2(5)\n  3\n  */\nconst log2Tan2 = x => {\n  return Math.log2Tan2(x);\n};\n\n/*\n  >>> log2(2)\n  2\n  >>> log2(5)\n  3\n  */\nconst log2Cos2 = x => {\n  return Math.log2Cos2(x);\n};\n\n/*\n  >>> log2(2)\n  2\n  >>> log2(5)\n  3\n  */\nconst log2Sqrt2 = x => {\n  return Math.log2Sqrt2(x);\n};\n\n/*\n  >>> log2(2)\n  2\n  >>> log2(5)\n  3\n  */\nconst log2Log2 = x => {\n  return Math.log2Log2(x);\n};\n\n/*\n  >>> log2(2)\n  2\n  >>> log2(5)\n  3\n  */\nconst log2Exp2 = x => {\n  return Math.log2Exp2(x);\n"}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two words have the same characters.\n  >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> same_chars('abcd', 'dddddddabc')\n  true\n  >>> same_chars('dddddddabc', 'abcd')\n  true\n  >>> same_chars('eabcd', 'dddddddabc')\n  false\n  >>> same_chars('abcd', 'dddddddabce')\n  false\n  >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst same_chars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "same_chars", "gc": "<|endoftext|>/*\n  Check if two words have the same characters.\n  >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> same_chars('abcd', 'dddddddabc')\n  true\n  >>> same_chars('dddddddabc', 'abcd')\n  true\n  >>> same_chars('eabcd', 'dddddddabc')\n  false\n  >>> same_chars('abcd', 'dddddddabce')\n  false\n  >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst same_chars = (s0, s1) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;"}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "gc": "<|endoftext|>/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n < 2) return 1;\n  return fib(n-1) + fib(n-2);\n};\n\n/*\n  Return n-th Fibonacci number with given modulus.\n  >>> fib(10, 2)\n  55\n  >>> fib(10, 3)\n  55\n  >>> fib(10, 4)\n  55\n  >>> fib(10, 5)\n  55\n  >>> fib(10, 6)\n  55\n  >>> fib(10, 7)\n  55\n  >>> fib(10, 8)\n  55\n  >>> fib(10, 9)\n  55\n  >>> fib(10, 10)\n  55\n  >>> fib(10, 11)\n  55\n  >>> fib(10, 12)\n  55\n  >>> fib(10, 13)\n  55\n  >>> fib(10, 14)\n  55\n  >>> fib(10, 15)\n  55\n  >>> fib(10, 16)\n  55\n  >>> fib(10, 17)\n  55\n  >>> fib(10, 18)\n  55\n  >>> fib(10, 19)\n  55\n  >>> fib(10, 20)\n  55\n  >>> fib(10, 21)\n  55\n  >>> fib(10, 22)\n  55\n  >>> fib(10, 23)\n  55\n  >>> fib(10, 24)\n  55\n  >>> fib(10, 25)\n  55\n  >>> fib(10, 26)\n  55\n  >>> fib(10, 27)\n  55\n  >>> fib(10, 28)\n  55\n  >>> fib(10, 29)\n  55\n  >>> fib(10, 30)\n  55\n  >>> fib(10, 31)\n  55\n  >>> fib(10, 32)\n  55\n  >>> fib(10, 33)\n  55\n  >>> fib(10, 34)\n  55\n  >>> fib(10, 35)\n  55\n  >>> fib(10, 36)\n  55\n  >>> fib(10, 37)\n  55\n  >>> fib(10, 38)\n  55\n  >>> fib(10, 39)\n  55\n  >>> fib(10, 40)\n  55\n  >>> fib(10, 41)\n  55\n  >>> fib(10, 42)\n  55\n  >>> fib(10, 43)\n  55\n  >>> fib(10, 44)\n  55\n  >>> fib(10, 45)\n  55\n  >>> fib(10, 46)\n  55\n  >>> fib(10, 47)\n  55\n  >>> fib(10, 48)\n  55\n  >>> fib(10, 49)\n  55\n  >>> fib(10, 50)\n  55\n  >>> fib(10, 51)\n  55\n  >>> fib(10, 52)\n  55\n  >>> fib(10, 53)\n  55\n  >>> fib(10, 54)\n  55\n  >>> fib(10, 55)\n  55\n  >>> fib(10, 56)\n  55\n  >>> fib(10, 57)\n  55\n  >>> fib(10, 58)\n  55\n  >>> fib(10, 59)\n  55\n  >>> fib(10, 60)\n  55\n  >>> fib(10, 61)\n  55\n  >>> fib(10, 62)\n  55\n  >>> fib(10, 63)\n  55\n  >>> fib(10, 64)\n  55\n  >>> fib(10, 65)\n  55\n  >>> fib(10, 66)\n  55\n  >>> fib(10, 67)\n  55\n  >>> fib(10, 68)\n  55\n  >>> fib(10, 69)\n  55\n  >>> fib(10, 70)\n  55\n  >>> fib(10, 71)\n  55\n  >>> fib(10, 72)\n  55\n  >>> fib(10, 73)\n  55\n  >>> fib(10, 74)\n  55\n  >>> fib(10, 75)\n  55\n  >>> fib(10, 76)\n  55\n  >>> fib(10, 77)\n  55\n  >>> fib(10, 78)\n  55\n  >>> fib(10, 79)\n  55\n  >>> fib(10, 80)\n  55\n  >>> fib(10, 81)\n  55\n  >>> fib(10, 82)\n  55\n  >>> fib(10, 83)\n  55\n  >>> fib(10, 84)\n  55\n  >>> fib(10, 85)\n  55\n  >>> fib(10, 86)\n  55\n  >>> fib(10, 87)\n  55\n  >>> fib(10, 88)\n  55\n  >>> fib(10, 89)\n  55\n  >>> fib(10, 90)\n  55\n  >>> fib(10, 91)\n  55\n  >>> fib(10, 92)\n  55\n  >>> fib(10, 93)\n  55\n  >>> fib(10, 94)\n  55\n  >>> fib(10, 95)\n  55\n  >>> fib(10, 96)\n  55\n  >>> fib(10, 97)\n  55\n  >>> fib(10, 98)\n  55\n  >>> fib(10, 99)\n  55\n  >>> fib(10, 100)\n  55\n  >>> fib(10, 101)\n  55\n  >>> fib(10, 102)\n  55\n  >>> fib(10, 103)\n  55\n  >>> fib(10, 104)\n  55\n  >>> fib(10, 105)\n  55\n  >>> fib(10, 106)\n  55\n  >>> fib(10, 107)\n  55\n  >>> fib(10, 108)\n  55\n  >>> fib(10, 109)\n  55\n  >>> fib(10, 110)\n  55\n  >>> fib(10, 111)\n  55\n  >>> fib(10, 112)\n  55\n  >>> fib(10, 113)\n  55\n  >>> fib(10, 114)\n  55\n  >>> fib(10, 115)\n  55\n  >>> fib(10, 116)\n  55\n  >>> fib(10, 117)\n  55\n  >>> fib(10, 118)\n  55\n  >>> fib(10, 119)\n  55\n  >>> fib(10, 120)\n  55\n  >>> fib(10, 121)\n  55\n  >>> fib(10, 122)\n  55\n  >>> fib(10, 123)\n  55\n  >>> fib(10, 124)\n  55\n  >>> fib(10, 125)\n  55\n  >>> fib(10, 126)\n  55\n  >>> fib(10, 127)\n  55\n  >>> fib(10, 128)\n  55\n  >>> fib(10, 129)\n  55\n  >>> fib(10, 130)\n  55\n  >>> fib(10, 131)\n  55\n  >>> fib(10, 132)\n  55\n  >>> fib(10, 133)\n  55\n  >>> fib(10, 134)\n  55\n  >>> fib(10, 135)\n  55\n  >>> fib(10, 136)\n  55\n  >>> fib(10, 137)"}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> correct_bracketing(\"<\")\n  false\n  >>> correct_bracketing(\"<>\")\n  false\n  >>> correct_bracketing(\"<<><>>\")\n  false\n  >>> correct_bracketing(\"><<>\")\n  false\n  */\nconst correct_bracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correct_bracketing", "gc": "<|endoftext|>/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> correct_bracketing(\"<\")\n  false\n  >>> correct_bracketing(\"<>\")\n  false\n  >>> correct_bracketing(\"<<><>>\")\n  false\n  >>> correct_bracketing(\"><<>\")\n  false\n  */\nconst correct_bracketing = (brackets) => {\n  const opening_brackets = brackets.split(\">\");\n  const closing_brackets = brackets.split(\"<\");\n  return opening_brackets.every((opening_bracket) => {\n    return closing_brackets.every((closing_bracket) => {\n      return opening_bracket === closing_bracket;\n    });\n  });\n};\n\n// Given a string, return true if it contains only letters.\nconst is_letter = (str) => {\n  return str.length === 1 && str.match(/[a-zA-Z]/);\n};\n\n// Given a string, return true if it contains only numbers.\nconst is_number = (str) => {\n  return str.length === 1 && str.match(/[0-9]/);\n};\n\n// Given a string, return true if it contains only letters and numbers.\nconst is_alphanumeric = (str) => {\n  return is_number(str) && is_letter(str);\n};\n\n// Given a string, return true if it contains only letters and numbers.\nconst is_alphanumeric_with_underscore = (str) => {\n  return is_number(str) && is_letter(str) && str.match(/[^a-zA-Z0-9_]/);\n};\n\n// Given a string, return true if it contains only letters and numbers.\nconst is_alphanumeric_with_dashes = (str) => {\n  return is_number(str) && is_letter(str) && str.match(/[^a-zA-Z0-9-_]/);\n};\n\n// Given a string, return true if it contains only letters and numbers.\nconst is_alphanumeric_with_underscores_and_dashes = (str) => {\n  return is_number(str) && is_letter(str) && str.match(/[^a-zA-Z0-9_\\-_]/);\n};\n\n// Given a string, return true if it contains only letters and numbers.\nconst is_alphanumeric_with_underscores_and_dashes_dash = (str) => {\n  return is_number(str) && is_letter(str) && str.match(/[^a-zA-Z0-9_\\-_\\- ]/);\n};\n\n// Given a string, return true if it contains only letters and numbers.\nconst is_alphanumeric_with_underscores_and_dashes_dash_dash = (str) => {\n  return is_number(str) && is_letter(str) && str.match(/[^a-zA-Z0-9_\\-_\\- \\- ]/);\n};\n\n// Given a string, return true if it contains only letters and numbers.\nconst is_alphanumeric_with_underscores_and_dashes_dash_dash_dash = (str) => {\n  return is_number(str) && is_letter(str) && str.match(/[^a-zA-Z0-9_\\-_\\- \\- \\- ]/);\n};\n\n// Given a string, return true if it contains only letters and numbers.\nconst is_alphanumeric_with_underscores_and_dashes_dash_dash_dash_dash = (str) => {\n  return is_number(str) && is_letter(str) && str.match(/[^a-zA-Z0-9_\\-_\\- \\- \\- \\- ]/);\n};\n\n// Given a string, return true if it contains only letters and numbers.\nconst is_alphanumeric_with_underscores_and_dashes_dash_dash_dash_dash_dash = (str) => {\n  return is_number(str) && is_letter(str) && str.match(/[^a-zA-Z0-9_\\-_\\- \\- \\- \\- \\- ]/);\n};\n\n// Given a string, return true if it contains only letters and numbers.\nconst is_alphanumeric_with_underscores_and_dashes_dash_dash_dash_dash_dash_dash = (str) => {\n  return is_number(str) && is_letter(str) && str.match(/[^a-zA-Z0-9_\\-_\\- \\- \\- \\- \\- \\- ]/);\n};\n\n// Given a string, return true if it contains only letters and numbers.\nconst is_alphanumeric_with_underscores_and_dashes_dash_dash_dash_dash_dash_dash = (str) => {\n  return is_number(str) && is_letter(str) && str.match(/[^a-zA-Z0-9_\\-_\\- \\- \\- \\- \\- \\- ]/);\n};\n\n// Given a string, return true if it contains only letters and numbers.\nconst is_alphanumeric_with_underscores_and_dashes_dash_dash_dash_dash_dash_dash_dash = (str) => {\n  return is_number(str) && is_letter(str) && str.match(/[^a-zA-Z0-9_\\-_\\- \\- \\- \\- \\- \\- \\- \\- ]/);\n};\n\n// Given a string, return true if it contains only letters and numbers.\nconst is_alphanumeric_with_underscores_and_dashes_dash_dash_dash_dash_dash_dash_dash_dash = (str) => {\n  return is_number(str) && is_letter(str) && str.match(/[^a-zA-Z0-9_\\-_\\- \\- \\- \\- \\- \\- \\- \\- \\- ]/);\n};\n\n// Given a string, return true if it contains only letters and numbers.\nconst is_alphanumeric_with_underscores_and_dashes_dash_dash_dash_dash_dash_dash_dash_dash = (str) => {\n  return is_number(str) && is_letter(str) && str.match(/[^a-zA-Z0-9_\\-_\\- \\- \\- \\- \\- \\- \\- \\- \\- \\- ]/);\n};\n\n// Given a string, return true if it contains only letters and numbers.\nconst is_alphanumeric_with_underscores_and_dashes_dash_dash_dash_dash_dash_dash_dash_dash = (str) => {\n  return is_number(str) && is_letter(str) && str.match(/[^a-zA-Z0-9_\\-_\\- \\- \\- \\- \\- \\- \\- \\- \\- \\- \\- ]/);\n};\n\n// Given a string, return true if it contains only letters and numbers.\nconst is_alphanumeric_with_underscores_and_dashes_dash_dash_dash_dash_dash_dash_dash_dash = (str) => {\n  return is_number(str) && is_letter(str) && str.match(/[^a-zA-Z0-9_\\-_\\- \\- \\- \\- \\- \\- \\- \\- \\- \\- \\- \\- ]/);\n};\n\n// Given a string, return true if it contains only letters and numbers.\nconst is_alphanumeric_with_underscores_and_dashes_dash_dash_dash_dash_dash_dash_dash_dash_dash = (str) => {\n  return is_number(str) && is_letter(str) && str.match(/[^a-zA-Z0-9_\\-_\\- \\- \\- \\- \\- \\- \\- \\- \\- \\- \\- \\- \\- \\- ]/);\n};\n\n// Given a string, return true if it contains only letters and numbers.\nconst is_alphanumeric_with_underscores_and_dashes_dash_dash_dash_dash_dash_dash_dash_dash_dash = (str) => {\n  return is_number(str) && is_letter(str) && str.match(/[^a-zA-Z0-9_\\-_\\- \\- \\- \\- \\- \\- \\- \\- \\- \\- \\- \\- \\- \\- ]/);\n};\n\n// Given a string, return true if it contains only letters and numbers.\nconst is_alphanumeric_with_underscores_and_dashes_dash_dash_dash_dash_dash_dash_dash_dash_dash = (str) => {\n  return is_number(str) && is_letter(str) && str.match(/[^a-zA-Z0-9_\\-_\\- \\- \\- \\- \\- \\- \\- \\- \\- \\- \\- \\- \\- \\- \\- ]/);\n};\n\n// Given a string, return true if it contains only letters and numbers.\nconst is_alphanumeric_with_underscores_and_dashes_dash_dash_dash_dash_dash_dash_dash_dash_dash_dash = (str) => {\n  return is_number(str) && is_"}
{"task_id": "JavaScript/57", "prompt": "/*Return true is list elements are monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "gc": "<|endoftext|>/*Return true is list elements are monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  let i = l.length - 1;\n  let j = 0;\n  while (true) {\n    if (l[j] < l[i]) {\n      i++;\n      j++;\n    } else if (l[j] > l[i]) {\n      j--;\n    } else {\n      return true;\n    }\n  }\n};\n\n/**\n * Return true if two lists are equal, false otherwise.\n * If two lists are equal, return true if they have the same length.\n * If two lists are unequal, return false.\n * If two lists are unequal, return false if they have the same elements.\n * If two lists are unequal, return false if they have the same elements and are in different orders.\n * If two lists are unequal, return false if they have the same elements and are in different orders and are in different orders.\n * If two lists are unequal, return false if they have the same elements and are in different orders and are in different orders and are in different orders.\n * If two lists are unequal, return false if they have the same elements and are in different orders and are in different orders and are in different orders and are in different orders.\n * If two lists are unequal, return false if they have the same elements and are in different orders and are in different orders and are in different orders and are in different orders and are in different orders.\n * If two lists are unequal, return false if they have the same elements and are in different orders and are in different orders and are in different orders and are in different orders and are in different orders.\n * If two lists are unequal, return false if they have the same elements and are in different orders and are in different orders and are in different orders and are in different orders and are in different orders and are in different orders.\n * If two lists are unequal, return false if they have the same elements and are in different orders and are in different orders and are in different orders and are in different orders and are in different orders and are in different orders and are in different orders.\n * If two lists are unequal, return false if they have the same elements and are in different orders and are in different orders and are in different orders and are in different orders and are in different orders and are in different orders and are in different orders.\n * If two lists are unequal, return false if they have the same elements and are in different orders and are in different orders and are in different orders and are in different orders and are in different orders and are in different orders and are in different orders.\n * If two lists are unequal, return false if they have the same elements and are in different orders and are in different orders and are in different orders and are in different orders and are in different orders and are in different orders and are in different orders.\n * If two lists are unequal, return false if they have the same elements and are in different orders and are in different orders and are in different orders and are in different orders and are in different orders and are in different orders and are in different orders.\n * If two lists are unequal, return false if they have the same elements and are in different orders and are in different orders and are in different orders and are in different orders and are in different orders and are in different orders and are in different orders.\n * If two lists are unequal, return false if they have the same elements and are in different orders and are in different orders and are in different orders and are in different orders and are in different orders and are in different orders and are in different orders.\n * If two lists are unequal, return false if they have the same elements and are in different orders and are in different orders and are in different orders and are in different orders and are in different orders and are in different orders and are in different orders.\n * If two lists are unequal, return false if they have the same elements and are in different orders and are in different orders and are in different orders and are in different orders and are in different orders and are in different orders and are in different orders.\n * If two lists are unequal, return false if they have the same elements and are in different orders and are in different orders and are in different orders and are in different orders and are in different orders and are in different orders and are in different orders.\n * If two lists are unequal, return false if they have the same elements and are in different orders and are in different orders and are in different orders and are in different orders and are in different orders and are in different orders and are in different orders.\n * If two lists are unequal, return false if they have the same elements and are in different orders and are in different orders and are in different orders and are in different orders and are in different orders and are in different orders and are in different orders.\n * If two lists are unequal, return false if they have the same elements and are in different orders and are in different orders and are in different orders and are in different orders and are in different orders and are in different orders and are in different orders.\n * If two lists are unequal, return false if they have the same elements and are in different orders and are in different orders and are in different orders and are in different orders and are in different orders and are in different orders.\n * If two lists are unequal, return false if they have the same elements and are in different orders and are in different orders and are in different orders and are in different orders and are in different orders and are in different orders.\n * If two lists are unequal, return false if they have the same elements and are in different orders and are in different orders and are in different orders and are in different orders and are in different orders and are in different orders.\n * If two lists are unequal, return false if they have the same elements and are in different orders and are in different orders and are in different orders and are in different orders and are in different orders and are in different orders.\n * If two lists are unequal, return false if they have the same elements and are in different orders and are in different orders and are in different orders and are in different orders and are in different orders and are in different orders.\n * If two lists are unequal, return false if they have the same elements and are in different orders and are in different orders and are in different orders and are in different orders and are in different orders and are in different orders.\n * If two lists are unequal, return false if they have the same elements and are in different orders and are in different orders and are in different orders and are in different orders and are in different orders and are in different orders.\n * If two lists are unequal, return false if they have the same elements and are in different orders and are in different orders and are in different orders and are in different orders and are in different orders and are in different orders.\n * If two lists are unequal, return false if they have the same elements and are in different orders and are in different orders and are in different orders and are in different orders and are in different orders and are in different orders.\n * If two lists are unequal, return false if they have the same elements and are in different orders and are in different orders and are in different orders and are in different orders and are in different orders and are in different orders.\n * If two lists are un"}
{"task_id": "JavaScript/58", "prompt": "/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "gc": "<|endoftext|>/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set = new Set();\n  l1.forEach(item => set.add(item));\n  l2.forEach(item => set.add(item));\n  return Array.from(set).sort((a, b) => a.localeCompare(b));\n};\n\n/*\n  >>> getUniqueId()\n  'a1b2c3d4'\n  >>> getUniqueId()\n  'a1b2c3d4'\n  >>> getUniqueId()\n  'a1b2c3d4'\n  >>> getUniqueId()\n  'a1b2c3d4'\n  >>> getUniqueId()\n  'a1b2c3d4'\n  >>> getUniqueId()\n  'a1b2c3d4'\n  >>> getUniqueId()\n  'a1b2c3d4'\n  >>> getUniqueId()\n  'a1b2c3d4'\n  >>> getUniqueId()\n  'a1b2c3d4'\n  >>> getUniqueId()\n  'a1b2c3d4'\n  >>> getUniqueId()\n  'a1b2c3d4'\n  >>> getUniqueId()\n  'a1b2c3d4'\n  >>> getUniqueId()\n  'a1b2c3d4'\n  >>> getUniqueId()\n  'a1b2c3d4'\n  >>> getUniqueId()\n  'a1b2c3d4'\n  >>> getUniqueId()\n  'a1b2c3d4'\n  >>> getUniqueId()\n  'a1b2c3d4'\n  >>> getUniqueId()\n  'a1b2c3d4'\n  >>> getUniqueId()\n  'a1b2c3d4'\n  >>> getUniqueId()\n  'a1b2c3d4'\n  >>> getUniqueId()\n  'a1b2c3d4'\n  >>> getUniqueId()\n  'a1b2c3d4'\n  >>> getUniqueId()\n  'a1b2c3d4'\n  >>> getUniqueId()\n  'a1b2c3d4'\n  >>> getUniqueId()\n  'a1b2c3d4'\n  >>> getUniqueId()\n  'a1b2c3d4'\n  >>> getUniqueId()\n  'a1b2c3d4'\n  >>> getUniqueId()\n  'a1b2c3d4'\n  >>> getUniqueId()\n  'a1b2c3d4'\n  >>> getUniqueId()\n  'a1b2c3d4'\n  >>> getUniqueId()\n  'a1b2c3d4'\n  >>> getUniqueId()\n  'a1b2c3d4'\n  >>> getUniqueId()\n  'a1b2c3d4'\n  >>> getUniqueId()\n  'a1b2c3d4'\n  >>> getUniqueId()\n  'a1b2c3d4'\n  >>> getUniqueId()\n  'a1b2c3d4'\n  >>> getUniqueId()\n  'a1b2c3d4'\n  >>> getUniqueId()\n  'a1b2c3d4'\n  >>> getUniqueId()\n  'a1b2c3d4'\n  >>> getUniqueId()\n  'a1b2c3d4'\n  >>> getUniqueId()\n  'a1b2c3d4'\n  >>> getUniqueId()\n  'a1b2c3d4'\n  >>> getUniqueId()\n  'a1b2c3d4'\n  >>> getUniqueId()\n  'a1b2c3d4'\n  >>> getUniqueId()\n  'a1b2c3d4'\n  >>> getUniqueId()\n  'a1b2c3d4'\n  >>> getUniqueId()\n  'a1b2c3d4'\n  >>> getUniqueId()\n  'a1b2c3d4'\n  >>> getUniqueId()\n  'a1b2c3d4'\n  >>> getUniqueId()\n  'a1b2c3d4'\n  >>> getUniqueId()\n  'a1b2c3d4'\n  >>> getUniqueId()\n  'a1b2c3d4'\n  >>> getUniqueId()\n  'a1b2c3d4'\n  >>> getUniqueId()\n  'a1b2c3d4'\n  >>> getUniqueId()\n  'a1b2c3d4'\n  >>> getUniqueId()\n  'a1b2c3d4'\n  >>> getUniqueId()\n  'a1b2c3d4'\n  >>> getUniqueId()\n  'a1b2c3d4'\n  >>> getUniqueId()\n  'a1b2c3d4'\n  >>> getUniqueId()\n  'a1b2c3d4'\n  >>> getUniqueId()\n  'a1b2c3d4'\n  >>> getUniqueId()\n  'a1b2c3d4'\n  >>> getUniqueId()\n  'a1b2c3d4'\n  >>> getUniqueId()\n  'a1b2c3d4'\n  >>> getUniqueId()\n  'a1b2c3d4'\n  >>> getUniqueId()\n  'a1b2c3d4'\n  >>> getUniqueId()\n  'a1b2c3d4'\n  >>> getUniqueId()\n  'a1b2c3d4'\n  >>> getUniqueId()\n  'a1b2c3d4'\n  >>> getUniqueId()\n  'a1b2c3d4'\n  >>> getUniqueId()\n  'a1b2c3d4'\n  >>> getUniqueId()\n  'a1b2c3d4'\n  >>> getUniqueId()\n  'a1b2c3d4'\n  >>> getUniqueId()\n  'a1b2c3d4'\n  >>> getUniqueId()\n  'a1b2c3d4'\n  >>> getUniqueId()\n  'a1b2c3d4'\n  >>> getUniqueId()\n  'a1b2c3d4'\n  >>> getUniqueId()\n  'a1b2c3d4'\n  >>> getUniqueId()\n  'a1b2c3d4'\n  >>> getUniqueId()\n  'a1b2c3d4'\n  >>> getUniqueId()\n  'a1b2c3d4'\n  >>> getUniqueId()\n  'a1b2c3d4'\n  >>> getUniqueId()\n  'a1b2c3d4'\n  >>> getUniqueId()\n  'a1b2c3d4'\n  >>> getUniqueId()\n  'a1b2c3d4'\n  >>> getUniqueId()\n  'a1b2c3d4'\n  >>> getUniqueId()\n  'a1b2c3d4'\n  >>> getUniqueId()\n  'a1b2c3d4'\n  >>> getUniqueId()\n  'a1b2c3d4'\n  >>> getUniqueId()\n  'a1b2c3d4'\n  >>> getUniqueId()\n  'a1b2c3d4'\n  >>> getUniqueId()\n  'a1b2c3d4'\n  >>> getUniqueId()\n  'a1b2c3d4'\n  >>> getUniqueId()\n  'a1b2c3d4'\n  >>> getUniqueId()\n  'a1b2c3d4'"}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largest_prime_factor(13195)\n  29\n  >>> largest_prime_factor(2048)\n  2\n  */\nconst largest_prime_factor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largest_prime_factor", "gc": "<|endoftext|>/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largest_prime_factor(13195)\n  29\n  >>> largest_prime_factor(2048)\n  2\n  */\nconst largest_prime_factor = (n) => {\n  let i = 2;\n  let prime_factor = 1;\n  while (true) {\n    if (n % i === 0) {\n      prime_factor = i;\n      break;\n    }\n    i += 2;\n  }\n  return prime_factor;\n};\n\n/*\n  Given a number n, return true if and only if n is a prime number.\n  >>> is_prime(13195)\n  True\n  >>> is_prime(2048)\n  False\n  */\nconst is_prime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return false;\n  }\n  if (n % 5 === 0) {\n    return false;\n  }\n  if (n % 7 === 0) {\n    return false;\n  }\n  if (n % 11 === 0) {\n    return false;\n  }\n  if (n % 13 === 0) {\n    return false;\n  }\n  if (n % 17 === 0) {\n    return false;\n  }\n  if (n % 19 === 0) {\n    return false;\n  }\n  return true;\n};\n\n/*\n  Given a number n, return true if and only if n is a prime number and\n  is divisible by 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\n  47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107,\n  109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173,\n  179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241,\n  251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313,\n  317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389,\n  397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461,\n  463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547,\n  557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619,\n  631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709,\n  719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797,\n  809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877,\n  881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967,\n  971, 977, 983, 991, 997\n  */\nconst is_prime_and_divisible = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return false;\n  }\n  if (n % 5 === 0) {\n    return false;\n  }\n  if (n % 7 === 0) {\n    return false;\n  }\n  if (n % 11 === 0) {\n    return false;\n  }\n  if (n % 13 === 0) {\n    return false;\n  }\n  if (n % 17 === 0) {\n    return false;\n  }\n  if (n % 19 === 0) {\n    return false;\n  }\n  return true;\n};\n\n/*\n  Given a number n, return true if and only if n is a prime number and\n  is divisible by 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\n  47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107,\n  109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173,\n  179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241,\n  251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313,\n  317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389,\n  397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461,\n  463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547,\n  557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619,\n  631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709,\n  719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797,\n  809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877,\n  881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967,\n  971, 977, 983, 991, 997\n  */\nconst is_prime_and_divisible_and_is_divisible = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return false;\n  }\n  if (n % 5 === 0) {\n    return false;\n  }\n  if (n % 7 === 0) {\n    return false;\n  }\n  if (n % 11 === 0) {\n    return false;\n  }\n  if (n % 13 === 0) {\n    return false;\n  }\n  if (n % 17 === 0) {\n    return false;\n  }\n  if (n % 19 === 0) {\n    return false;\n  }\n  return true;\n};\n\n/*\n  Given a number n, return true if and only if n is a prime number and\n  is divisible by 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\n  47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107,\n  109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173,\n  179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241,\n  251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313,\n  317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389,\n  397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461,\n  463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547,\n  557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619,\n  631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709,\n  719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797,\n  809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877,\n  881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967,\n  971, 977, 983, 991, 997\n"}
{"task_id": "JavaScript/60", "prompt": "/*sum_to_n is a function that sums numbers from 1 to n.\n  >>> sum_to_n(30)\n  465\n  >>> sum_to_n(100)\n  5050\n  >>> sum_to_n(5)\n  15\n  >>> sum_to_n(10)\n  55\n  >>> sum_to_n(1)\n  1\n  */\nconst sum_to_n = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sum_to_n", "gc": "<|endoftext|>/*sum_to_n is a function that sums numbers from 1 to n.\n  >>> sum_to_n(30)\n  465\n  >>> sum_to_n(100)\n  5050\n  >>> sum_to_n(5)\n  15\n  >>> sum_to_n(10)\n  55\n  >>> sum_to_n(1)\n  1\n  */\nconst sum_to_n = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_n(sum_to_"}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> correct_bracketing(\"(\")\n  false\n  >>> correct_bracketing(\"()\")\n  true\n  >>> correct_bracketing(\"(()())\")\n  true\n  >>> correct_bracketing(\")(()\")\n  false\n  */\nconst correct_bracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correct_bracketing", "gc": "<|endoftext|>/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> correct_bracketing(\"(\")\n  false\n  >>> correct_bracketing(\"()\")\n  true\n  >>> correct_bracketing(\"(()())\")\n  true\n  >>> correct_bracketing(\")(()\")\n  false\n  */\nconst correct_bracketing = (brackets) => {\n  const opening_brackets = brackets.split(\"(\").filter(Boolean);\n  const closing_brackets = brackets.split(\")\").filter(Boolean);\n  return opening_brackets.every(\n    opening => closing_brackets.every(closing => opening === closing)\n  );\n};\n\n/**\n * Given a string, return true if it starts with \"@\" and ends with \".\"\n * e.g. \"@foo\" returns true\n * e.g. \"@foo.bar\" returns true\n * e.g. \"@foo.bar\" returns false\n */\nconst is_email = (str) => {\n  return str.startsWith(\"@\") && str.endsWith(\".\");\n};\n\n/**\n * Given a string, return true if it starts with \"@\" and ends with \".\"\n * e.g. \"@foo\" returns true\n * e.g. \"@foo.bar\" returns true\n * e.g. \"@foo.bar\" returns false\n */\nconst is_email2 = (str) => {\n  return str.startsWith(\"@\") && str.endsWith(\".\");\n};\n\n/**\n * Given a string, return true if it starts with \"@\" and ends with \".\"\n * e.g. \"@foo\" returns true\n * e.g. \"@foo.bar\" returns true\n * e.g. \"@foo.bar\" returns false\n */\nconst is_email3 = (str) => {\n  return str.startsWith(\"@\") && str.endsWith(\".\");\n};\n\n/**\n * Given a string, return true if it starts with \"@\" and ends with \".\"\n * e.g. \"@foo\" returns true\n * e.g. \"@foo.bar\" returns true\n * e.g. \"@foo.bar\" returns false\n */\nconst is_email4 = (str) => {\n  return str.startsWith(\"@\") && str.endsWith(\".\");\n};\n\n/**\n * Given a string, return true if it starts with \"@\" and ends with \".\"\n * e.g. \"@foo\" returns true\n * e.g. \"@foo.bar\" returns true\n * e.g. \"@foo.bar\" returns false\n */\nconst is_email5 = (str) => {\n  return str.startsWith(\"@\") && str.endsWith(\".\");\n};\n\n/**\n * Given a string, return true if it starts with \"@\" and ends with \".\"\n * e.g. \"@foo\" returns true\n * e.g. \"@foo.bar\" returns true\n * e.g. \"@foo.bar\" returns false\n */\nconst is_email6 = (str) => {\n  return str.startsWith(\"@\") && str.endsWith(\".\");\n};\n\n/**\n * Given a string, return true if it starts with \"@\" and ends with \".\"\n * e.g. \"@foo\" returns true\n * e.g. \"@foo.bar\" returns true\n * e.g. \"@foo.bar\" returns false\n */\nconst is_email7 = (str) => {\n  return str.startsWith(\"@\") && str.endsWith(\".\");\n};\n\n/**\n * Given a string, return true if it starts with \"@\" and ends with \".\"\n * e.g. \"@foo\" returns true\n * e.g. \"@foo.bar\" returns true\n * e.g. \"@foo.bar\" returns false\n */\nconst is_email8 = (str) => {\n  return str.startsWith(\"@\") && str.endsWith(\".\");\n};\n\n/**\n * Given a string, return true if it starts with \"@\" and ends with \".\"\n * e.g. \"@foo\" returns true\n * e.g. \"@foo.bar\" returns true\n * e.g. \"@foo.bar\" returns false\n */\nconst is_email9 = (str) => {\n  return str.startsWith(\"@\") && str.endsWith(\".\");\n};\n\n/**\n * Given a string, return true if it starts with \"@\" and ends with \".\"\n * e.g. \"@foo\" returns true\n * e.g. \"@foo.bar\" returns true\n * e.g. \"@foo.bar\" returns false\n */\nconst is_email10 = (str) => {\n  return str.startsWith(\"@\") && str.endsWith(\".\");\n};\n\n/**\n * Given a string, return true if it starts with \"@\" and ends with \".\"\n * e.g. \"@foo\" returns true\n * e.g. \"@foo.bar\" returns true\n * e.g. \"@foo.bar\" returns false\n */\nconst is_email11 = (str) => {\n  return str.startsWith(\"@\") && str.endsWith(\".\");\n};\n\n/**\n * Given a string, return true if it starts with \"@\" and ends with \".\"\n * e.g. \"@foo\" returns true\n * e.g. \"@foo.bar\" returns true\n * e.g. \"@foo.bar\" returns false\n */\nconst is_email12 = (str) => {\n  return str.startsWith(\"@\") && str.endsWith(\".\");\n};\n\n/**\n * Given a string, return true if it starts with \"@\" and ends with \".\"\n * e.g. \"@foo\" returns true\n * e.g. \"@foo.bar\" returns true\n * e.g. \"@foo.bar\" returns false\n */\nconst is_email13 = (str) => {\n  return str.startsWith(\"@\") && str.endsWith(\".\");\n};\n\n/**\n * Given a string, return true if it starts with \"@\" and ends with \".\"\n * e.g. \"@foo\" returns true\n * e.g. \"@foo.bar\" returns true\n * e.g. \"@foo.bar\" returns false\n */\nconst is_email14 = (str) => {\n  return str.startsWith(\"@\") && str.endsWith(\".\");\n};\n\n/**\n * Given a string, return true if it starts with \"@\" and ends with \".\"\n * e.g. \"@foo\" returns true\n * e.g. \"@foo.bar\" returns true\n * e.g. \"@foo.bar\" returns false\n */\nconst is_email15 = (str) => {\n  return str.startsWith(\"@\") && str.endsWith(\".\");\n};\n\n/**\n * Given a string, return true if it starts with \"@\" and ends with \".\"\n * e.g. \"@foo\" returns true\n * e.g. \"@foo.bar\" returns true\n * e.g. \"@foo.bar\" returns false\n */\nconst is_email16 = (str) => {\n  return str.startsWith(\"@\") && str.endsWith(\".\");\n};\n\n/**\n * Given a string, return true if it starts with \"@\" and ends with \".\"\n * e.g. \"@foo\" returns true\n * e.g. \"@foo.bar\" returns true\n * e.g. \"@foo.bar\" returns false\n */\nconst is_email17 = (str) => {\n  return str.startsWith(\"@\") && str.endsWith(\".\");\n};\n\n/**\n * Given a string, return true if it starts with \"@\" and ends with \".\"\n * e.g. \"@foo\" returns true\n * e.g. \"@foo.bar\" returns true\n * e.g. \"@foo.bar\" returns false\n */\nconst is_email18 = (str) => {\n  return str.startsWith(\"@\") && str.endsWith(\".\");\n};\n\n/**\n * Given a string, return true if it starts with \"@\" and ends with \".\"\n * e.g. \"@foo\" returns true\n * e.g. \"@foo.bar\" returns true\n * e.g. \"@foo.bar\" returns false\n */\nconst is_email19 = (str) => {"}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "gc": "<|endoftext|>/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  let result = [];\n  for (let i = 0; i < xs.length; i++) {\n    const x = xs[i];\n    const derivative = x * x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * (x * ("}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "gc": "<|endoftext|>/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  let fibfib = 0;\n  for (let i = 1; i <= n; i++) {\n    fibfib = fibfib + fibfib;\n  }\n  return fibfib;\n};\n\n/*\n  Write a function to compute the Fibonacci sequence starting from 1 up to n.\n  >>> fibonacci(10)\n  [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  >>> fibonacci(15)\n  [1, 1, 2, 3, 5, 8, 13, 21, 34, 55]\n  >>> fibonacci(20)\n  [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]\n  >>> fibonacci(25)\n  [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144]\n  >>> fibonacci(30)\n  [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233]\n  >>> fibonacci(35)\n  [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377]\n  >>> fibonacci(40)\n  [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610]\n  >>> fibonacci(45)\n  [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987]\n  >>> fibonacci(50)\n  [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597]\n  >>> fibonacci(55)\n  [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584]\n  >>> fibonacci(60)\n  [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181]\n  >>> fibonacci(65)\n  [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765]\n  >>> fibonacci(70)\n  [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946]\n  >>> fibonacci(75)\n  [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 15999]\n  >>> fibonacci(80)\n  [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 15999, 25161]\n  >>> fibonacci(85)\n  [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 15999, 25161, 46348]\n  >>> fibonacci(90)\n  [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 15999, 25161, 46348, 70555]\n  >>> fibonacci(95)\n  [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 15999, 25161, 46348, 70555, 101390]\n  >>> fibonacci(100)\n  [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 15999, 25161, 46348, 70555, 101390, 15311]\n  >>> fibonacci(105)\n  [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 15999, 25161, 46348, 70555, 101390, 15311, 26287]\n  >>> fibonacci(110)\n  [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 15999, 25161, 46348, 70555, 101390, 15311, 26287, 41883]\n  >>> fibonacci(115)\n  [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 15999, 25161, 46348, 70555, 101390, 15311, 26287, 41883, 6765]\n  >>> fibonacci(120)\n  [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 15999, 25161, 46348, 70555, 101390, 15311, 26287, 41883, 6765, 15999]\n  >>> fibonacci(125)\n  [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 15999, 25161, 46348, 70555, 101390, 15311, 26287, 41883, 6765, 15999, 25161]\n  >>> fibonacci(130)\n  [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 15999, 25161, 46348, 70555, 101390, 15311, 26287, 41883, 6765, 15999, 25161, 46348, 70555, 101390, 15311, 26287, 41883, 6765, 15999, 25161, 46348, 70555, 101390, 15311, 26287, 41883, 6765, 15999, 25161, 46348, 70555, 101390, 15311, 26287, 41883, 6765, 15999, 25161, 46348, 70555, 101390, 15311, 26287, 41883, 6765, 15999, 25161, 46348, 70555, 101390, 15311, 26287, 41883, 6765, 15999, 25161, 46348, 70555, 101390, 15311, 26287, 41883, 6765, 15999, 25161, 46348, 70555, 101390, 15311, 26287, 41883, 6765, 15999, 25161, 46348, 70555, 101390, 15311, 26287, 41883, 6765, 15999, 25161, 46"}
{"task_id": "JavaScript/64", "prompt": "/*Write a function vowels_count which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowels_count(\"abcde\")\n  2\n  >>> vowels_count(\"ACEDY\")\n  3\n  */\nconst vowels_count = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowels_count", "gc": "<|endoftext|>/*Write a function vowels_count which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowels_count(\"abcde\")\n  2\n  >>> vowels_count(\"ACEDY\")\n  3\n  */\nconst vowels_count = (s) => {\n  let count = 0;\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let vowels_end = vowels.indexOf(\"y\");\n  let vowels_start = vowels.indexOf(\"a\");\n  let vowels_middle = vowels.indexOf(\"e\");\n  let vowels_end = vowels.indexOf(\"i\");\n  let vowels_start = vowels.indexOf(\"o\");\n  let vowels_middle = vowels.indexOf(\"u\");\n  let vowels_middle = vowels.indexOf(\"y\");\n  let vowels_middle = vowels.indexOf(\"a\");\n  let vowels_middle = vowels.indexOf(\"e\");\n  let vowels_middle = vowels.indexOf(\"i\");\n  let vowels_middle = vowels.indexOf(\"o\");\n  let vowels_middle = vowels.indexOf(\"u\");\n  let vowels_middle = vowels.indexOf(\"y\");\n  let vowels_middle = vowels.indexOf(\"a\");\n  let vowels_middle = vowels.indexOf(\"e\");\n  let vowels_middle = vowels.indexOf(\"i\");\n  let vowels_middle = vowels.indexOf(\"o\");\n  let vowels_middle = vowels.indexOf(\"u\");\n  let vowels_middle = vowels.indexOf(\"y\");\n  let vowels_middle = vowels.indexOf(\"a\");\n  let vowels_middle = vowels.indexOf(\"e\");\n  let vowels_middle = vowels.indexOf(\"i\");\n  let vowels_middle = vowels.indexOf(\"o\");\n  let vowels_middle = vowels.indexOf(\"u\");\n  let vowels_middle = vowels.indexOf(\"y\");\n  let vowels_middle = vowels.indexOf(\"a\");\n  let vowels_middle = vowels.indexOf(\"e\");\n  let vowels_middle = vowels.indexOf(\"i\");\n  let vowels_middle = vowels.indexOf(\"o\");\n  let vowels_middle = vowels.indexOf(\"u\");\n  let vowels_middle = vowels.indexOf(\"y\");\n  let vowels_middle = vowels.indexOf(\"a\");\n  let vowels_middle = vowels.indexOf(\"e\");\n  let vowels_middle = vowels.indexOf(\"i\");\n  let vowels_middle = vowels.indexOf(\"o\");\n  let vowels_middle = vowels.indexOf(\"u\");\n  let vowels_middle = vowels.indexOf(\"y\");\n  let vowels_middle = vowels.indexOf(\"a\");\n  let vowels_middle = vowels.indexOf(\"e\");\n  let vowels_middle = vowels.indexOf(\"i\");\n  let vowels_middle = vowels.indexOf(\"o\");\n  let vowels_middle = vowels.indexOf(\"u\");\n  let vowels_middle = vowels.indexOf(\"y\");\n  let vowels_middle = vowels.indexOf(\"a\");\n  let vowels_middle = vowels.indexOf(\"e\");\n  let vowels_middle = vowels.indexOf(\"i\");\n  let vowels_middle = vowels.indexOf(\"o\");\n  let vowels_middle = vowels.indexOf(\"u\");\n  let vowels_middle = vowels.indexOf(\"y\");\n  let vowels_middle = vowels.indexOf(\"a\");\n  let vowels_middle = vowels.indexOf(\"e\");\n  let vowels_middle = vowels.indexOf(\"i\");\n  let vowels_middle = vowels.indexOf(\"o\");\n  let vowels_middle = vowels.indexOf(\"u\");\n  let vowels_middle = vowels.indexOf(\"y\");\n  let vowels_middle = vowels.indexOf(\"a\");\n  let vowels_middle = vowels.indexOf(\"e\");\n  let vowels_middle = vowels.indexOf(\"i\");\n  let vowels_middle = vowels.indexOf(\"o\");\n  let vowels_middle = vowels.indexOf(\"u\");\n  let vowels_middle = vowels.indexOf(\"y\");\n  let vowels_middle = vowels.indexOf(\"a\");\n  let vowels_middle = vowels.indexOf(\"e\");\n  let vowels_middle = vowels.indexOf(\"i\");\n  let vowels_middle = vowels.indexOf(\"o\");\n  let vowels_middle = vowels.indexOf(\"u\");\n  let vowels_middle = vowels.indexOf(\"y\");\n  let vowels_middle = vowels.indexOf(\"a\");\n  let vowels_middle = vowels.indexOf(\"e\");\n  let vowels_middle = vowels.indexOf(\"i\");\n  let vowels_middle = vowels.indexOf(\"o\");\n  let vowels_middle = vowels.indexOf(\"u\");\n  let vowels_middle = vowels.indexOf(\"y\");\n  let vowels_middle = vowels.indexOf(\"a\");\n  let vowels_middle = vowels.indexOf(\"e\");\n  let vowels_middle = vowels.indexOf(\"i\");\n  let vowels_middle = vowels.indexOf(\"o\");\n  let vowels_middle = vowels.indexOf(\"u\");\n  let vowels_middle = vowels.indexOf(\"y\");\n  let vowels_middle = vowels.indexOf(\"a\");\n  let vowels_middle = vowels.indexOf(\"e\");\n  let vowels_middle = vowels.indexOf(\"i\");\n  let vowels_middle = vowels.indexOf(\"o\");\n  let vowels_middle = vowels.indexOf(\"u\");\n  let vowels_middle = vowels.indexOf(\"y\");\n  let vowels_middle = vowels.indexOf(\"a\");\n  let vowels_middle = vowels.indexOf(\"e\");\n  let vowels_middle = vowels.indexOf(\"i\");\n  let vowels_middle = vowels.indexOf(\"o\");\n  let vowels_middle = vowels.indexOf(\"u\");\n  let vowels_middle = vowels.indexOf(\"y\");\n  let vowels_middle = vowels.indexOf(\"a\");\n  let vowels_middle = vowels.indexOf(\"e\");\n  let vowels_middle = vowels.indexOf(\"i\");\n  let vowels_middle = vowels.indexOf(\"o\");\n  let vowels_middle = vowels.indexOf(\"u\");\n  let vowels_middle = vowels.indexOf(\"y\");\n  let vowels_middle = vowels.indexOf(\"a\");\n  let vowels_middle = vowels.indexOf(\"e\");\n  let vowels_middle = vowels.indexOf(\"i\");\n  let vowels_middle = vowels.indexOf(\"o\");\n  let vowels_middle = vowels.indexOf(\"u\");\n  let vowels_middle = vowels.indexOf(\"y\");\n  let vowels_middle = vowels.indexOf(\"a\");\n  let vowels_middle = vowels.indexOf(\"e\");\n  let vowels_middle = vowels.indexOf(\"i\");\n  let vowels_middle = vowels.indexOf(\"o\");\n  let vowels_middle = vowels.indexOf(\"u\");\n  let vowels_middle = vowels.indexOf(\"y\");\n  let vowels_middle = vowels.indexOf(\"a\");\n  let vowels_middle = vowels.indexOf(\"e\");\n  let vowels_middle = vowels.indexOf(\"i\");\n  let vowels_middle = vowels.indexOf(\"o\");\n  let vowels_middle = vowels.indexOf(\"u\");\n  let vowels_middle = vowels.indexOf(\"y\");\n  let vowels_middle = vowels.indexOf(\"a\");\n  let vowels_middle = vowels.indexOf(\"e\");\n  let vowels_middle = vowels.indexOf(\"i\");\n  let vowels_middle = vowels.indexOf(\"o\");\n  let vowels_middle = vowels.indexOf(\"u\");\n  let vowels_middle = vowels.indexOf(\"y\");"}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> circular_shift(12, 1)\n  \"21\"\n  >>> circular_shift(12, 2)\n  \"12\"\n  */\nconst circular_shift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circular_shift", "gc": "<|endoftext|>/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> circular_shift(12, 1)\n  \"21\"\n  >>> circular_shift(12, 2)\n  \"12\"\n  */\nconst circular_shift = (x, shift) => {\n  const digits = x.toString(2).split('').reverse()\n  return digits.slice(shift, digits.length - shift).join('')\n}\n\n/*\n  Return the number of trailing zeros in a number.\n  >>> trailing_zeros(123)\n  3\n  >>> trailing_zeros(123)\n  0\n  >>> trailing_zeros(123)\n  0\n  >>> trailing_zeros(123)\n  0\n  >>> trailing_zeros(123)\n  0\n  >>> trailing_zeros(123)\n  0\n  >>> trailing_zeros(123)\n  0\n  >>> trailing_zeros(123)\n  0\n  >>> trailing_zeros(123)\n  0\n  >>> trailing_zeros(123)\n  0\n  >>> trailing_zeros(123)\n  0\n  >>> trailing_zeros(123)\n  0\n  >>> trailing_zeros(123)\n  0\n  >>> trailing_zeros(123)\n  0\n  >>> trailing_zeros(123)\n  0\n  >>> trailing_zeros(123)\n  0\n  >>> trailing_zeros(123)\n  0\n  >>> trailing_zeros(123)\n  0\n  >>> trailing_zeros(123)\n  0\n  >>> trailing_zeros(123)\n  0\n  >>> trailing_zeros(123)\n  0\n  >>> trailing_zeros(123)\n  0\n  >>> trailing_zeros(123)\n  0\n  >>> trailing_zeros(123)\n  0\n  >>> trailing_zeros(123)\n  0\n  >>> trailing_zeros(123)\n  0\n  >>> trailing_zeros(123)\n  0\n  >>> trailing_zeros(123)\n  0\n  >>> trailing_zeros(123)\n  0\n  >>> trailing_zeros(123)\n  0\n  >>> trailing_zeros(123)\n  0\n  >>> trailing_zeros(123)\n  0\n  >>> trailing_zeros(123)\n  0\n  >>> trailing_zeros(123)\n  0\n  >>> trailing_zeros(123)\n  0\n  >>> trailing_zeros(123)\n  0\n  >>> trailing_zeros(123)\n  0\n  >>> trailing_zeros(123)\n  0\n  >>> trailing_zeros(123)\n  0\n  >>> trailing_zeros(123)\n  0\n  >>> trailing_zeros(123)\n  0\n  >>> trailing_zeros(123)\n  0\n  >>> trailing_zeros(123)\n  0\n  >>> trailing_zeros(123)\n  0\n  >>> trailing_zeros(123)\n  0\n  >>> trailing_zeros(123)\n  0\n  >>> trailing_zeros(123)\n  0\n  >>> trailing_zeros(123)\n  0\n  >>> trailing_zeros(123)\n  0\n  >>> trailing_zeros(123)\n  0\n  >>> trailing_zeros(123)\n  0\n  >>> trailing_zeros(123)\n  0\n  >>> trailing_zeros(123)\n  0\n  >>> trailing_zeros(123)\n  0\n  >>> trailing_zeros(123)\n  0\n  >>> trailing_zeros(123)\n  0\n  >>> trailing_zeros(123)\n  0\n  >>> trailing_zeros(123)\n  0\n  >>> trailing_zeros(123)\n  0\n  >>> trailing_zeros(123)\n  0\n  >>> trailing_zeros(123)\n  0\n  >>> trailing_zeros(123)\n  0\n  >>> trailing_zeros(123)\n  0\n  >>> trailing_zeros(123)\n  0\n  >>> trailing_zeros(123)\n  0\n  >>> trailing_zeros(123)\n  0\n  >>> trailing_zeros(123)\n  0\n  >>> trailing_zeros(123)\n  0\n  >>> trailing_zeros(123)\n  0\n  >>> trailing_zeros(123)\n  0\n  >>> trailing_zeros(123)\n  0\n  >>> trailing_zeros(123)\n  0\n  >>> trailing_zeros(123)\n  0\n  >>> trailing_zeros(123)\n  0\n  >>> trailing_zeros(123)\n  0\n  >>> trailing_zeros(123)\n  0\n  >>> trailing_zeros(123)\n  0\n  >>> trailing_zeros(123)\n  0\n  >>> trailing_zeros(123)\n  0\n  >>> trailing_zeros(123)\n  0\n  >>> trailing_zeros(123)\n  0\n  >>> trailing_zeros(123)\n  0\n  >>> trailing_zeros(123)\n  0\n  >>> trailing_zeros(123)\n  0\n  >>> trailing_zeros(123)\n  0\n  >>> trailing_zeros(123)\n  0\n  >>> trailing_zeros(123)\n  0\n  >>> trailing_zeros(123)\n  0\n  >>> trailing_zeros(123)\n  0\n  >>> trailing_zeros(123)\n  0\n  >>> trailing_zeros(123)\n  0\n  >>> trailing_zeros(123)\n  0\n  >>> trailing_zeros(123)\n  0\n  >>> trailing_zeros(123)\n  0\n  >>> trailing_zeros(123)\n  0\n  >>> trailing_zeros(123)\n  0\n  >>> trailing_zeros(123)\n  0\n  >>> trailing_zeros(123)\n  0\n  >>> trailing_zeros(123)\n  0\n  >>> trailing_zeros(123)\n  0\n  >>> trailing_zeros(123)\n  0\n  >>> trailing_zeros(123)\n  0\n  >>> trailing_zeros(123)\n  0\n  >>> trailing_zeros(123)\n  0\n  >>> trailing_zeros(123)\n  0\n  >>> trailing_zeros(123)\n  0\n  >>> trailing_zeros(123)\n  0\n  >>> trailing_zeros(123)\n  0\n  >>> trailing_zeros(123)\n  0\n  >>> trailing_zeros(123)\n  0\n  >>> trailing_zeros(123)\n  0\n  >>> trailing_zeros(123)\n  0\n  >>> trailing_zeros(123)\n  0\n  >>> trailing_zeros(123)\n  0\n  >>> trailing_zeros(123)\n  0\n  >>> trailing_zeros(123)\n  0\n  >>> trailing_zeros(123)\n  0\n  >>> trailing_zeros(123)\n  0\n  >>> trailing_zeros(123)\n  0\n  >>> trailing_zeros(123)\n  0\n  >>> trailing_zeros(123)\n  0\n  >>> trailing_zeros(123)\n  0\n  >>> trailing_zeros(123)\n  0\n  >>> trailing_zeros(123)\n  0\n  >>> trailing_zeros(123)\n  0\n  >>> trailing_zeros(123)\n  0\n  >>> trailing_zeros(123)\n  0\n  >>> trailing_zeros(123)\n  0\n  >>> trailing_zeros(123)\n  0\n  >>> trailing_zeros(123)\n  0\n  "}
{"task_id": "JavaScript/66", "prompt": "/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digit_sum(\"\") => 0\n      digit_sum(\"abAB\") => 131\n      digit_sum(\"abcCd\") => 67\n      digit_sum(\"helloE\") => 69\n      digit_sum(\"woArBld\") => 131\n      digit_sum(\"aAaaaXa\") => 153\n  */\nconst digit_sum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digit_sum", "gc": "<|endoftext|>/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digit_sum(\"\") => 0\n      digit_sum(\"abAB\") => 131\n      digit_sum(\"abcCd\") => 67\n      digit_sum(\"helloE\") => 69\n      digit_sum(\"woArBld\") => 131\n      digit_sum(\"aAaaaXa\") => 153\n  */\nconst digit_sum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the lower characters only'\n  ASCII codes.\n\n  Examples:\n      digit_sum(\"\") => 0\n      digit_sum(\"abAB\") => 131\n      digit_sum(\"abcCd\") => 67\n      digit_sum(\"helloE\") => 69\n      digit_sum(\"woArBld\") => 131\n      digit_sum(\"aAaaaXa\") => 153\n  */\nconst digit_sum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the digits only'\n  ASCII codes.\n\n  Examples:\n      digit_sum(\"\") => 0\n      digit_sum(\"abAB\") => 131\n      digit_sum(\"abcCd\") => 67\n      digit_sum(\"helloE\") => 69\n      digit_sum(\"woArBld\") => 131\n      digit_sum(\"aAaaaXa\") => 153\n  */\nconst digit_sum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the uppercase and lowercase letters'\n  ASCII codes.\n\n  Examples:\n      digit_sum(\"\") => 0\n      digit_sum(\"abAB\") => 131\n      digit_sum(\"abcCd\") => 67\n      digit_sum(\"helloE\") => 69\n      digit_sum(\"woArBld\") => 131\n      digit_sum(\"aAaaaXa\") => 153\n  */\nconst digit_sum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the uppercase and lowercase letters'\n  ASCII codes.\n\n  Examples:\n      digit_sum(\"\") => 0\n      digit_sum(\"abAB\") => 131\n      digit_sum(\"abcCd\") => 67\n      digit_sum(\"helloE\") => 69\n      digit_sum(\"woArBld\") => 131\n      digit_sum(\"aAaaaXa\") => 153\n  */\nconst digit_sum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the uppercase and lowercase letters'\n  ASCII codes.\n\n  Examples:\n      digit_sum(\"\") => 0\n      digit_sum(\"abAB\") => 131\n      digit_sum(\"abcCd\") => 67\n      digit_sum(\"helloE\") => 69\n      digit_sum(\"woArBld\") => 131\n      digit_sum(\"aAaaaXa\") => 153\n  */\nconst digit_sum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the uppercase and lowercase letters'\n  ASCII codes.\n\n  Examples:\n      digit_sum(\"\") => 0\n      digit_sum(\"abAB\") => 131\n      digit_sum(\"abcCd\") => 67\n      digit_sum(\"helloE\") => 69\n      digit_sum(\"woArBld\") => 131\n      digit_sum(\"aAaaaXa\") => 153\n  */\nconst digit_sum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the uppercase and lowercase letters'\n  ASCII codes.\n\n  Examples:\n      digit_sum(\"\") => 0\n      digit_sum(\"abAB\") => 131\n      digit_sum(\"abcCd\") => 67\n      digit_sum(\"helloE\") => 69\n      digit_sum(\"woArBld\") => 131\n      digit_sum(\"aAaaaXa\") => 153\n  */\nconst digit_sum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the uppercase and lowercase letters'\n  ASCII codes.\n\n  Examples:\n      digit_sum(\"\") => 0\n      digit_sum(\"abAB\") => 131\n      digit_sum(\"abcCd\") => 67\n      digit_sum(\"helloE\") => 69\n      digit_sum(\"woArBld\") => 131\n      digit_sum(\"aAaaaXa\") => 153\n  */\nconst digit_sum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the uppercase and lowercase letters'\n  ASCII codes.\n\n  Examples:\n      digit_sum(\"\") => 0\n      digit_sum(\"abAB\") => 131\n      digit_sum(\"abcCd\") => 67\n      digit_sum(\"helloE\") => 69\n      digit_sum(\"woArBld\") => 131\n      digit_sum(\"aAaaaXa\") => 153\n  */\nconst digit_sum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the uppercase and lowercase letters'\n  ASCII codes.\n\n  Examples:\n      digit_sum(\"\") => 0\n      digit_sum(\"abAB\") => 131\n      digit_sum(\"abcCd\") => 67\n      digit_sum(\"helloE\") => 69\n      digit_sum(\"woArBld\") => 131\n      digit_sum(\"aAaaaXa\") => 153\n  */\nconst digit_sum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the uppercase and lowercase letters'\n  ASCII codes.\n\n  Examples:\n      digit_sum(\"\") => 0\n      digit_sum(\"abAB\") => 131\n      digit_sum(\"abcCd\") => 67\n      digit_sum(\"helloE\") => 69\n      digit_sum(\"woArBld\") => 131\n      digit_sum(\"aAaaaXa\") => 153\n  */\nconst digit_sum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;"}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruit_distribution = (s, n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruit_distribution", "gc": "<|endoftext|>/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruit_distribution = (s, n) => {\n  let total = 0;\n  let fruits = [];\n  let fruits_sum = 0;\n  let fruits_count = 0;\n  let fruits_sum2 = 0;\n  let fruits_sum3 = 0;\n  let fruits_sum4 = 0;\n  let fruits_sum5 = 0;\n  let fruits_sum6 = 0;\n  let fruits_sum7 = 0;\n  let fruits_sum8 = 0;\n  let fruits_sum9 = 0;\n  let fruits_sum10 = 0;\n  let fruits_sum11 = 0;\n  let fruits_sum12 = 0;\n  let fruits_sum13 = 0;\n  let fruits_sum14 = 0;\n  let fruits_sum15 = 0;\n  let fruits_sum16 = 0;\n  let fruits_sum17 = 0;\n  let fruits_sum18 = 0;\n  let fruits_sum19 = 0;\n  let fruits_sum20 = 0;\n  let fruits_sum21 = 0;\n  let fruits_sum22 = 0;\n  let fruits_sum23 = 0;\n  let fruits_sum24 = 0;\n  let fruits_sum25 = 0;\n  let fruits_sum26 = 0;\n  let fruits_sum27 = 0;\n  let fruits_sum28 = 0;\n  let fruits_sum29 = 0;\n  let fruits_sum30 = 0;\n  let fruits_sum31 = 0;\n  let fruits_sum32 = 0;\n  let fruits_sum33 = 0;\n  let fruits_sum34 = 0;\n  let fruits_sum35 = 0;\n  let fruits_sum36 = 0;\n  let fruits_sum37 = 0;\n  let fruits_sum38 = 0;\n  let fruits_sum39 = 0;\n  let fruits_sum40 = 0;\n  let fruits_sum41 = 0;\n  let fruits_sum42 = 0;\n  let fruits_sum43 = 0;\n  let fruits_sum44 = 0;\n  let fruits_sum45 = 0;\n  let fruits_sum46 = 0;\n  let fruits_sum47 = 0;\n  let fruits_sum48 = 0;\n  let fruits_sum49 = 0;\n  let fruits_sum50 = 0;\n  let fruits_sum51 = 0;\n  let fruits_sum52 = 0;\n  let fruits_sum53 = 0;\n  let fruits_sum54 = 0;\n  let fruits_sum55 = 0;\n  let fruits_sum56 = 0;\n  let fruits_sum57 = 0;\n  let fruits_sum58 = 0;\n  let fruits_sum59 = 0;\n  let fruits_sum60 = 0;\n  let fruits_sum61 = 0;\n  let fruits_sum62 = 0;\n  let fruits_sum63 = 0;\n  let fruits_sum64 = 0;\n  let fruits_sum65 = 0;\n  let fruits_sum66 = 0;\n  let fruits_sum67 = 0;\n  let fruits_sum68 = 0;\n  let fruits_sum69 = 0;\n  let fruits_sum70 = 0;\n  let fruits_sum71 = 0;\n  let fruits_sum72 = 0;\n  let fruits_sum73 = 0;\n  let fruits_sum74 = 0;\n  let fruits_sum75 = 0;\n  let fruits_sum76 = 0;\n  let fruits_sum77 = 0;\n  let fruits_sum78 = 0;\n  let fruits_sum79 = 0;\n  let fruits_sum80 = 0;\n  let fruits_sum81 = 0;\n  let fruits_sum82 = 0;\n  let fruits_sum83 = 0;\n  let fruits_sum84 = 0;\n  let fruits_sum85 = 0;\n  let fruits_sum86 = 0;\n  let fruits_sum87 = 0;\n  let fruits_sum88 = 0;\n  let fruits_sum89 = 0;\n  let fruits_sum90 = 0;\n  let fruits_sum91 = 0;\n  let fruits_sum92 = 0;\n  let fruits_sum93 = 0;\n  let fruits_sum94 = 0;\n  let fruits_sum95 = 0;\n  let fruits_sum96 = 0;\n  let fruits_sum97 = 0;\n  let fruits_sum98 = 0;\n  let fruits_sum99 = 0;\n  let fruits_sum100 = 0;\n  let fruits_sum101 = 0;\n  let fruits_sum102 = 0;\n  let fruits_sum103 = 0;\n  let fruits_sum104 = 0;\n  let fruits_sum105 = 0;\n  let fruits_sum106 = 0;\n  let fruits_sum107 = 0;\n  let fruits_sum108 = 0;\n  let fruits_sum109 = 0;\n  let fruits_sum110 = 0;\n  let fruits_sum111 = 0;\n  let fruits_sum112 = 0;\n  let fruits_sum113 = 0;\n  let fruits_sum114 = 0;\n  let fruits_sum115 = 0;\n  let fruits_sum116 = 0;\n  let fruits_sum117 = 0;\n  let fruits_sum118 = 0;\n  let fruits_sum119 = 0;\n  let fruits_sum120 = 0;\n  let fruits_sum121 = 0;\n  let fruits_sum122 = 0;\n  let fruits_sum123 = 0;\n  let fruits_sum124 = 0;\n  let fruits_sum125 = 0;\n  let fruits_sum126 = 0;\n  let fruits_sum127 = 0;\n  let fruits_sum128 = 0;\n  let fruits_sum129 = 0;\n  let fruits_sum130 = 0;\n  let fruits_sum131 = 0;\n  let fruits_sum132 = 0;\n  let fruits_sum133 = 0;\n  let fruits_sum134 = 0;\n  let fruits_sum135 = 0;\n  let fruits_sum136 = 0;\n  let fruits_sum137 = 0;\n  let fruits_sum138 = 0;\n  let fruits_sum139 = 0;\n  let fruits_sum140 = 0;\n  let fruits_sum141 = 0;\n  let fruits_sum142 = 0;\n  let fruits_sum143 = 0;\n  let fruits_sum144 = 0;\n  let fruits_sum145 = 0;\n  let fruits_sum146 = 0;\n  let fruits_sum147 = 0;\n  let fruits_sum148 = 0;\n  let fruits_sum149 = 0;\n  let fruits_sum150 = 0;\n  let fruits_sum151 = 0;\n  let fruits_sum152 = 0;\n  let fruits_sum153 = 0;\n  let fruits_sum154 = 0;\n  let fruits_sum155 = 0;\n  let fruits_sum156 = 0;\n  let fruits_sum157 = 0;\n  let fruits_sum158 = 0;\n  let fruits_sum159 = 0;\n  let fruits_sum160 = 0;\n  let fruits_sum161 = 0;\n  let fruits_sum162 = 0;\n  let fruits_sum163 = 0;\n  let fruits_sum164 = 0;\n  let fruits_sum165 = 0;\n  let fruits_sum166 = 0;\n  let fruits_sum167 = 0;\n  let fruits_sum168 = 0;\n  let fruits_sum169 = 0;\n  let fruits_sum170 = 0;\n  let fruits_sum171 = 0;\n  let fruits_sum172 = 0;\n  let fruits_sum173 = 0;\n  let fruits_sum174 = 0;\n  let fruits_sum175 = 0;\n  let fruits_sum176 = 0;\n  let fruits_sum177 = 0;\n  let fruits_sum178 = 0;\n  let fruits_sum179 = 0;\n  let fruits_sum180 = 0;\n  let fruits_sum181 = 0;\n  let fruits_sum182 = 0;\n  let fruits_sum183 = 0;\n  let fruits_sum184 = 0;\n  let fruits_sum185 = 0;\n  let fruits_sum186 = 0;\n  let fruits_sum187 = 0;\n  let fruits_sum188 = 0;\n  let fruits_sum189 = 0;\n  let fruits_sum190 = 0;\n  let fruits_sum191 = 0;\n  let fruits_sum192 = 0;\n  let fruit"}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "gc": "<|endoftext|>/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  const len = arr.length;\n  let min = 0;\n  let max = len - 1;\n  let even = 0;\n  let index = 0;\n  while (min <= max) {\n    even = arr[min];\n    if (even % 2 === 0) {\n      min = min + 1;\n    } else {\n      max = max - 1;\n    }\n    index++;\n  }\n  return [even, index];\n};\n\n// https://leetcode.com/problems/find-the-minimum-element-in-an-array/\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @return {number}\n */\nvar findMin = function (head) {\n  let min = 0;\n  let curr = head;\n  while (curr) {\n    if (curr.val <= min) {\n      min = curr.val;\n    }\n    curr = curr.next;\n  }\n  return min;\n};\n\n// https://leetcode.com/problems/find-the-minimum-element-in-an-array/\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @return {number}\n */\nvar findMinIndex = function (head) {\n  let min = 0;\n  let curr = head;\n  while (curr) {\n    if (curr.val <= min) {\n      min = curr.val;\n    }\n    curr = curr.next;\n  }\n  return min;\n};\n\n// https://leetcode.com/problems/find-the-minimum-element-in-an-array/\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @return {number}\n */\nvar findMinIndex2Min = function (head) {\n  let min = 0;\n  let curr = head;\n  while (curr) {\n    if (curr.val <= min) {\n      min = curr.val;\n    }\n    curr = curr.next;\n  }\n  return min;\n};\n\n// https://leetcode.com/problems/find-the-minimum-element-in-an-array/\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @return {number}\n */\nvar findMinIndex3Min = function (head) {\n  let min = 0;\n  let curr = head;\n  while (curr) {\n    if (curr.val <= min) {\n      min = curr.val;\n    }\n    curr = curr.next;\n  }\n  return min;\n};\n\n// https://leetcode.com/problems/find-the-minimum-element-in-an-array/\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @return {number}\n */\nvar findMinIndex4Min = function (head) {\n  let min = 0;\n  let curr = head;\n  while (curr) {\n    if (curr.val <= min) {\n      min = curr.val;\n    }\n    curr = curr.next;\n  }\n  return min;\n};\n\n// https://leetcode.com/problems/find-the-minimum-element-in-an-array/\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @return {number}\n */\nvar findMinIndex5Min = function (head) {\n  let min = 0;\n  let curr = head;\n  while (curr) {\n    if (curr.val <= min) {\n      min = curr.val;\n    }\n    curr = curr.next;\n  }\n  return min;\n};\n\n// https://leetcode.com/problems/find-the-minimum-element-in-an-array/\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @return {number}\n */\nvar findMinIndex6Min = function (head) {\n  let min = 0;\n  let curr = head;\n  while (curr) {\n    if (curr.val <= min) {\n      min = curr.val;\n    }\n    curr = curr.next;\n  }\n  return min;\n};\n\n// https://leetcode.com/problems/find-the-minimum-element-in-an-array/\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @return {number}\n */\nvar findMinIndex7Min = function (head) {\n  let min = 0;\n  let curr = head;\n  while (curr) {\n    if (curr.val <= min) {\n      min = curr.val;\n    }\n    curr = curr.next;\n  }\n  return min;\n};\n\n// https://leetcode.com/problems/find-the-minimum-element-in-an-array/\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @return {number}\n */\nvar findMinIndex8Min = function (head) {\n  let min = 0;\n  let curr = head;\n  while (curr) {\n    if (curr.val <= min) {\n      min = curr.val;\n    }\n    curr = curr.next;\n  }\n  return min;\n};\n\n// https://leetcode.com/problems/find-the-minimum-element-in-an-array/\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @return {number}\n */\nvar findMinIndex9Min = function (head) {\n  let min = 0;\n  let curr = head;\n  while (curr) {\n    if (curr.val <= min) {\n      min = curr.val;\n    }\n    curr = curr.next;\n  }\n  return min;\n};\n\n// https://leetcode.com/problems/find-the-minimum-element-in-an-array/\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @return {number}\n */"}
{"task_id": "JavaScript/69", "prompt": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "gc": "<|endoftext|>/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = 0;\n  let freq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n      freq = i;\n    }\n  }\n  return max;\n};\n\n/*\n  You are given a non-empty list of positive integers. Return the sum of the integers in the list.\n  Examples:\n      sum([4, 1, 2, 2, 3, 1]) = 15\n      sum([1, 2, 2, 3, 3, 3, 4, 4, 4]) = 15\n      sum([5, 5, 4, 4, 4]) = 15\n      sum([5, 5, 4, 4, 4]) = 15\n      sum([5, 5, 4, 4, 4]) = 15\n      sum([5, 5, 4, 4, 4]) = 15\n      sum([5, 5, 4, 4, 4]) = 15\n      sum([5, 5, 4, 4, 4]) = 15\n      sum([5, 5, 4, 4, 4]) = 15\n      sum([5, 5, 4, 4, 4]) = 15\n      sum([5, 5, 4, 4, 4]) = 15\n      sum([5, 5, 4, 4, 4]) = 15\n      sum([5, 5, 4, 4, 4]) = 15\n      sum([5, 5, 4, 4, 4]) = 15\n      sum([5, 5, 4, 4, 4]) = 15\n      sum([5, 5, 4, 4, 4]) = 15\n      sum([5, 5, 4, 4, 4]) = 15\n      sum([5, 5, 4, 4, 4]) = 15\n      sum([5, 5, 4, 4, 4]) = 15\n      sum([5, 5, 4, 4, 4]) = 15\n      sum([5, 5, 4, 4, 4]) = 15\n      sum([5, 5, 4, 4, 4]) = 15\n      sum([5, 5, 4, 4, 4]) = 15\n      sum([5, 5, 4, 4, 4]) = 15\n      sum([5, 5, 4, 4, 4]) = 15\n      sum([5, 5, 4, 4, 4]) = 15\n      sum([5, 5, 4, 4, 4]) = 15\n      sum([5, 5, 4, 4, 4]) = 15\n      sum([5, 5, 4, 4, 4]) = 15\n      sum([5, 5, 4, 4, 4]) = 15\n      sum([5, 5, 4, 4, 4]) = 15\n      sum([5, 5, 4, 4, 4]) = 15\n      sum([5, 5, 4, 4, 4]) = 15\n      sum([5, 5, 4, 4, 4]) = 15\n      sum([5, 5, 4, 4, 4]) = 15\n      sum([5, 5, 4, 4, 4]) = 15\n      sum([5, 5, 4, 4, 4]) = 15\n      sum([5, 5, 4, 4, 4]) = 15\n      sum([5, 5, 4, 4, 4]) = 15\n      sum([5, 5, 4, 4, 4]) = 15\n      sum([5, 5, 4, 4, 4]) = 15\n      sum([5, 5, 4, 4, 4]) = 15\n      sum([5, 5, 4, 4, 4]) = 15\n      sum([5, 5, 4, 4, 4]) = 15\n      sum([5, 5, 4, 4, 4]) = 15\n      sum([5, 5, 4, 4, 4]) = 15\n      sum([5, 5, 4, 4, 4]) = 15\n      sum([5, 5, 4, 4, 4]) = 15\n      sum([5, 5, 4, 4, 4]) = 15\n      sum([5, 5, 4, 4, 4]) = 15\n      sum([5, 5, 4, 4, 4]) = 15\n      sum([5, 5, 4, 4, 4]) = 15\n      sum([5, 5, 4, 4, 4]) = 15\n      sum([5, 5, 4, 4, 4]) = 15\n      sum([5, 5, 4, 4, 4]) = 15\n      sum([5, 5, 4, 4, 4]) = 15\n      sum([5, 5, 4, 4, 4]) = 15\n      sum([5, 5, 4, 4, 4]) = 15\n      sum([5, 5, 4, 4, 4]) = 15\n      sum([5, 5, 4, 4, 4]) = 15\n      sum([5, 5, 4, 4, 4]) = 15\n      sum([5, 5, 4, 4, 4]) = 15\n      sum([5, 5, 4, 4, 4]) = 15\n      sum([5, 5, 4, 4, 4]) = 15\n      sum([5, 5, 4, 4, 4]) = 15\n      sum([5, 5, 4, 4, 4]) = 15\n      sum([5, 5, 4, 4, 4]) = 15\n      sum([5, 5, 4, 4, 4]) = 15\n      sum([5, 5, 4, 4, 4]) = 15\n      sum([5, 5, 4, 4, 4]) = 15\n      sum([5, 5, 4, 4, 4]) = 15\n      sum([5, 5, 4, 4, 4]) = 15\n      sum([5, 5, 4, 4, 4]) = 15\n      sum([5, 5, 4, 4, 4]) = 15\n      sum([5, 5, 4, 4, 4]) = 15\n      sum([5, 5, 4, 4, 4]) = 15\n      sum([5, 5, 4, 4, 4]) = 15\n      sum([5, 5, 4, 4, 4]) = 15\n      sum([5, 5, 4, 4, 4]) = 15\n      sum([5, 5, 4, 4, 4]) = 15\n      sum([5, 5, 4, 4, 4]) = 15\n      sum([5, 5, 4, 4, 4]) = 15\n      sum([5, 5, 4, 4, 4]) = 15\n      sum([5, 5, 4, 4, 4]) = 15\n      sum([5, 5, 4, 4, 4]) = 15\n      sum([5, 5, 4, 4, 4]) = 15\n      sum([5, 5, 4, 4, 4]) = 15\n      sum([5, 5, 4, 4, 4]) = 15\n      sum([5, 5, 4, 4, 4]) = 15\n      sum([5, 5, 4, 4, 4]) = 15\n      sum([5, 5, 4, 4, 4]) = 15\n      sum([5, 5, 4, 4, 4]) = 15\n      sum([5, 5, 4, 4, 4]) = 15\n      sum([5, 5, 4, 4, 4]) = 15\n      sum([5, 5, 4, 4, 4]) = 15\n      sum([5, 5, 4, 4, 4]) = 15\n      sum([5, 5, 4, 4, 4]) = 15\n      sum([5, 5, 4, 4, 4]) = 15\n      sum([5, 5, 4, 4, 4]) = 15\n      sum([5, 5, 4, 4, 4]) = 15\n      sum([5, 5, 4, 4, 4]) = 15\n      sum([5, 5, 4, 4, 4]) = 15\n      sum([5, 5, 4, 4, 4]) = 15\n      sum([5, 5, 4, 4, 4]) = 15\n      sum([5, 5, 4, 4, 4]) = 15\n      sum([5, 5, 4, 4, 4]) = 15\n      sum([5, 5, 4, 4, 4]) = 15\n      sum([5, 5, 4, 4, 4]) = 15\n      sum([5, 5, 4, 4, 4]) = 15\n      sum([5, 5, 4, 4, 4]) = 15\n      sum([5, 5, 4, 4, 4]) = 15\n      sum([5, 5, 4, 4, 4]) = 15\n      sum([5, 5, 4, 4, 4]) = 15\n      sum([5, 5, 4, 4, 4]) = 15\n      sum([5, 5, 4, 4, 4]) = 15\n      sum([5, 5, 4, 4, 4]) = 15\n      sum([5, 5, 4, 4, 4]) = 15\n      sum([5, 5, 4, 4, 4]) = 15\n      sum([5, 5, 4, 4, 4]) = 15\n      sum([5, 5, 4, 4, 4]) = 15\n      sum([5, 5, 4, 4, 4]) = 15\n      sum([5, 5, 4, 4, 4]) = 15\n      sum([5, 5, 4, 4, 4]) = 15\n      sum([5, 5, 4, 4, 4]) = 15\n      sum([5, 5, 4, 4, 4]) = 15\n      sum([5, 5, 4, 4, 4]) = 15\n      sum([5, 5, 4, 4, 4]) = 15\n      sum([5, 5, 4, 4, 4]) = 15\n      sum([5, 5, 4, 4, 4]) = 15\n      sum([5, 5, 4, 4, 4]) = 15\n      sum([5, 5, 4, 4, 4]) = 15\n      sum([5, 5, 4, 4, 4]) = 15\n      sum([5, 5, 4, 4, 4]) = 15\n      sum([5, 5, 4, 4, 4]) = 15\n      sum([5, 5, 4, 4, 4]) = 15\n      sum([5, 5, 4, 4, 4]) = 15\n      sum([5, 5, 4, 4, 4]) = 15\n      sum([5, 5, 4, 4, 4]) = 15\n      sum([5, 5, 4, 4, 4]) = 15\n      sum([5, 5, 4, 4, 4]) = 15\n      sum([5, 5, 4, 4, 4]) = 15\n      sum([5, 5, 4, 4, 4]) = 15\n      sum([5, 5, 4, 4, 4]) = 15\n      sum([5, 5, 4, 4, 4]) = 15\n      sum([5, 5, 4, 4, 4]) = 15\n      sum([5, 5, 4, 4, 4]) = 15\n      sum([5, 5, 4, 4, 4]) = 15\n      sum([5, 5, 4, 4, 4]) = 15\n      sum([5, 5, 4, 4, 4]) = 15\n      sum([5, 5, 4, 4, 4]) = 15\n      sum([5, 5, 4, 4, 4]) = 15\n      sum([5, 5, 4, 4, 4]) = 15\n      sum([5, 5, 4, 4, 4]) = 15\n      sum(["}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strange_sort_list([]) == []\n  */\nconst strange_sort_list = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strange_sort_list", "gc": "<|endoftext|>/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strange_sort_list([]) == []\n  */\nconst strange_sort_list = (lst) => {\n  const sorted = lst.sort((a, b) => a - b);\n  return sorted.reverse();\n};\n\n/*\n  Given list of integers, return list in sorted order.\n  Sort is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  sort_list([1, 2, 3, 4]) == [1, 3, 4, 2]\n  sort_list([5, 5, 5, 5]) == [5, 4, 5, 5]\n  sort_list([]) == []\n  */\nconst sort_list = (lst) => {\n  const sorted = lst.sort((a, b) => a - b);\n  return sorted;\n};\n\n/*\n  Given list of integers, return list in sorted order and in reverse order.\n  Sort is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  sort_list_rev([1, 2, 3, 4]) == [3, 4, 1, 2]\n  sort_list_rev([5, 5, 5, 5]) == [5, 4, 5, 5]\n  sort_list_rev([]) == []\n  */\nconst sort_list_rev = (lst) => {\n  const sorted = lst.sort((a, b) => b - a);\n  return sorted.reverse();\n};\n\n/*\n  Given list of integers, return list in sorted order and in reverse order and in ascending order.\n  Sort is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  sort_list_asc([1, 2, 3, 4]) == [3, 2, 4, 1]\n  sort_list_asc([5, 5, 5, 5]) == [5, 4, 5, 5]\n  sort_list_asc([]) == []\n  */\nconst sort_list_asc = (lst) => {\n  const sorted = lst.sort((a, b) => a - b);\n  return sorted.reverse();\n};\n\n/*\n  Given list of integers, return list in sorted order and in reverse order and in ascending order and in reverse order.\n  Sort is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  sort_list_asc_rev([1, 2, 3, 4]) == [3, 2, 4, 1]\n  sort_list_asc_rev([5, 5, 5, 5]) == [5, 4, 5, 5]\n  sort_list_asc_rev([]) == []\n  */\nconst sort_list_asc_rev = (lst) => {\n  const sorted = lst.sort((a, b) => b - a);\n  return sorted.reverse();\n};\n\n/*\n  Given list of integers, return list in sorted order and in reverse order and in ascending order and in reverse order.\n  Sort is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  sort_list_asc_rev([1, 2, 3, 4]) == [3, 2, 4, 1]\n  sort_list_asc_rev([5, 5, 5, 5]) == [5, 4, 5, 5]\n  sort_list_asc_rev([]) == []\n  */\nconst sort_list_asc_asc_rev = (lst) => {\n  const sorted = lst.sort((a, b) => a - b);\n  return sorted.reverse();\n};\n\n/*\n  Given list of integers, return list in sorted order and in reverse order and in ascending order and in reverse order.\n  Sort is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  sort_list_asc_asc_rev([1, 2, 3, 4]) == [3, 2, 4, 1]\n  sort_list_asc_asc_rev([5, 5, 5, 5]) == [5, 4, 5, 5]\n  sort_list_asc_asc_rev([]) == []\n  */\nconst sort_list_asc_asc_asc = (lst) => {\n  const sorted = lst.sort((a, b) => b - a);\n  return sorted.reverse();\n};\n\n/*\n  Given list of integers, return list in sorted order and in reverse order and in ascending order and in reverse order.\n  Sort is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  sort_list_asc_asc_rev([1, 2, 3, 4]) == [3, 2, 4, 1]\n  sort_list_asc_asc_rev([5, 5, 5, 5]) == [5, 4, 5, 5]\n  sort_list_asc_asc_rev([]) == []\n  */\nconst sort_list_asc_asc_asc_rev = (lst) => {\n  const sorted = lst.sort((a, b) => b - a);\n  return sorted.reverse();\n};\n\n/*\n  Given list of integers, return list in sorted order and in reverse order and in ascending order and in reverse order.\n  Sort is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  sort_list_asc_asc_asc_rev([1, 2, 3, 4]) == [3, 2, 4, 1]\n  sort_list_asc_asc_asc_rev([5, 5, 5, 5]) == [5, 4, 5, 5]\n  sort_list_asc_asc_asc_rev([]) == []\n  */\nconst sort_list_asc_asc_asc_asc_asc = (lst) => {\n  const sorted = lst.sort((a, b) => b - a);\n  return sorted.reverse();\n};\n\n/*\n  Given list of integers, return list in sorted order and in reverse order and in ascending order and in reverse order.\n  Sort is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  sort_list_asc_asc_asc_asc_rev([1, 2, 3, 4]) == [3, 2, 4, 1]\n  sort_list_asc_asc_asc_asc_rev([5, 5, 5, 5]) == [5, 4, 5, 5]\n  sort_list_asc_asc_asc_asc_rev([]) == []\n  */\nconst sort_list_asc_asc_asc_asc_asc_rev = (lst) => {\n  const sorted = lst.sort((a, b) => b - a);\n  return sorted.reverse();\n};\n\n/*\n  Given list of integers, return list in sorted order and in reverse order and in ascending order and in reverse order.\n  Sort is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  sort_list_asc_asc_asc_asc_asc_rev([1, 2, 3, 4]) == [3, 2, 4, 1]\n  sort_list_asc_asc_asc_asc_asc_rev([5, 5, 5, 5]) == [5, 4, 5, 5]\n  sort_list_asc_asc_asc_asc_asc_rev([]) == []\n  */\nconst sort_list_asc_asc_asc_asc_asc_asc_asc = (lst) => {\n  const sorted = lst.sort((a, b) => b - a);\n  return sorted.reverse();\n};\n\n/*\n  Given list of integers, return list in sorted order and in reverse order and in ascending order and in reverse order.\n  Sort is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  sort_list_asc_asc_asc_asc_asc_rev([1, 2, 3, 4]) == [3, 2, 4, 1]\n  sort_list_asc_asc_asc_asc_asc_asc_rev([5, 5, 5, 5]) == [5, 4, 5, 5]\n  sort_list_asc_asc_asc_asc_asc_asc_rev([]) == []\n  */\nconst sort_list_asc_asc_asc_asc_asc_asc_rev = (lst) => {\n  const sor"}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangle_area(3, 4, 5) == 6.00\n  triangle_area(1, 2, 10) == -1\n  */\nconst triangle_area = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangle_area", "gc": "<|endoftext|>/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangle_area(3, 4, 5) == 6.00\n  triangle_area(1, 2, 10) == -1\n  */\nconst triangle_area = (a, b, c) => {\n  const ab = a + b;\n  const ac = a + c;\n  const bc = b + c;\n  const abc = ab + c;\n  const acc = ac + c;\n  const bcc = bc + c;\n  const abcc = abcc + c;\n  const accc = acc + c;\n  const bcd = bc + d;\n  const abcd = abcc + d;\n  const acdd = acc + d;\n  const bcde = bc + e;\n  const abcde = abcc + e;\n  const acde = acc + e;\n  const bcdd = bc + f;\n  const abcde = abcc + f;\n  const acde = acc + f;\n  const bce = bc + g;\n  const abcde = abcc + g;\n  const acde = acc + g;\n  const bcf = bc + h;\n  const abcde = abcc + h;\n  const acde = acc + h;\n  const bced = bc + i;\n  const abcde = abcc + i;\n  const acde = acc + i;\n  const bcfd = bc + j;\n  const abcde = abcc + j;\n  const acde = acc + j;\n  const bcee = bc + k;\n  const abcde = abcc + k;\n  const acde = acc + k;\n  const bcfe = bc + l;\n  const abcde = abcc + l;\n  const acde = acc + l;\n  const bcef = bc + m;\n  const abcde = abcc + m;\n  const acde = acc + m;\n  const bcfg = bc + n;\n  const abcde = abcc + n;\n  const acde = acc + n;\n  const bcfh = bc + o;\n  const abcde = abcc + o;\n  const acde = acc + o;\n  const bcfi = bc + p;\n  const abcde = abcc + p;\n  const acde = acc + p;\n  const bcfj = bc + q;\n  const abcde = abcc + q;\n  const acde = acc + q;\n  const bcfk = bc + r;\n  const abcde = abcc + r;\n  const acde = acc + r;\n  const bcfl = bc + s;\n  const abcde = abcc + s;\n  const acde = acc + s;\n  const bcfm = bc + t;\n  const abcde = abcc + t;\n  const acde = acc + t;\n  const bcfn = bc + u;\n  const abcde = abcc + u;\n  const acde = acc + u;\n  const bcfo = bc + v;\n  const abcde = abcc + v;\n  const acde = acc + v;\n  const bcfp = bc + w;\n  const abcde = abcc + w;\n  const acde = acc + w;\n  const bcfq = bc + x;\n  const abcde = abcc + x;\n  const acde = acc + x;\n  const bcfr = bc + y;\n  const abcde = abcc + y;\n  const acde = acc + y;\n  const bcfs = bc + z;\n  const abcde = abcc + z;\n  const acde = acc + z;\n  const bcft = bc + A;\n  const abcde = abcc + A;\n  const acde = acc + A;\n  const bcfu = bc + B;\n  const abcde = abcc + B;\n  const acde = acc + B;\n  const bcfv = bc + C;\n  const abcde = abcc + C;\n  const acde = acc + C;\n  const bcfw = bc + D;\n  const abcde = abcc + D;\n  const acde = acc + D;\n  const bcfx = bc + E;\n  const abcde = abcc + E;\n  const acde = acc + E;\n  const bcfy = bc + F;\n  const abcde = abcc + F;\n  const acde = acc + F;\n  const bcfz = bc + G;\n  const abcde = abcc + G;\n  const acde = acc + G;\n  const bcfA = bc + H;\n  const abcde = abcc + H;\n  const acde = acc + H;\n  const bcfB = bc + I;\n  const abcde = abcc + I;\n  const acde = acc + I;\n  const bcfC = bc + J;\n  const abcde = abcc + J;\n  const acde = acc + J;\n  const bcfD = bc + K;\n  const abcde = abcc + K;\n  const acde = acc + K;\n  const bcfE = bc + L;\n  const abcde = abcc + L;\n  const acde = acc + L;\n  const bcfF = bc + M;\n  const abcde = abcc + M;\n  const acde = acc + M;\n  const bcfG = bc + N;\n  const abcde = abcc + N;\n  const acde = acc + N;\n  const bcfH = bc + O;\n  const abcde = abcc + O;\n  const acde = acc + O;\n  const bcfI = bc + P;\n  const abcde = abcc + P;\n  const acde = acc + P;\n  const bcfJ = bc + Q;\n  const abcde = abcc + Q;\n  const acde = acc + Q;\n  const bcfK = bc + R;\n  const abcde = abcc + R;\n  const acde = acc + R;\n  const bcfL = bc + S;\n  const abcde = abcc + S;\n  const acde = acc + S;\n  const bcfM = bc + T;\n  const abcde = abcc + T;\n  const acde = acc + T;\n  const bcfN = bc + U;\n  const abcde = abcc + U;\n  const acde = acc + U;\n  const bcfO = bc + V;\n  const abcde = abcc + V;\n  const acde = acc + V;\n  const bcfP = bc + W;\n  const abcde = abcc + W;\n  const acde = acc + W;\n  const bcfQ = bc + X;\n  const abcde = abcc + X;\n  const acde = acc + X;\n  const bcfR = bc + Y;\n  const abcde = abcc + Y;\n  const acde = acc + Y;\n  const bcfS = bc + Z;\n  const abcde = abcc + Z;\n  const acde = acc + Z;\n  const bcfT = bc + _;\n  const abcde = abcc + _;\n  const acde = acc + _;\n  const bcfU = bc + a;\n  const abcde = abcc + a;\n  const acde = acc + a;\n  const bcfV = bc + b;\n  const abcde = abcc + b;\n  const acde = acc + b;\n  const bcfW = bc + c;\n  const abcde = abcc + c;\n  const acde = acc + c;\n  const bcfX = bc + d;\n  const abcde = abcc + d;\n  const acde = acc + d;\n"}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  will_it_fly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  will_it_fly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  will_it_fly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  will_it_fly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst will_it_fly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "will_it_fly", "gc": "<|endoftext|>/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  will_it_fly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  will_it_fly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  will_it_fly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  will_it_fly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst will_it_fly = (q, w) => {\n  const maxWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const max"}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallest_change([1,2,3,5,4,7,9,6]) == 4\n  smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallest_change([1, 2, 3, 2, 1]) == 0\n  */\nconst smallest_change = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallest_change", "gc": "<|endoftext|>/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallest_change([1,2,3,5,4,7,9,6]) == 4\n  smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallest_change([1, 2, 3, 2, 1]) == 0\n  */\nconst smallest_change = (arr) => {\n  let change = 0;\n  let len = arr.length;\n  for (let i = 0; i < len - 1; i++) {\n    let temp = arr[i];\n    arr[i] = arr[len - 1];\n    arr[len - 1] = temp;\n    change++;\n  }\n  return change;\n};\n\n/*\n  Given an array arr of integers, find the maximum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallest_change([1,2,3,5,4,7,9,6]) == 4\n  smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallest_change([1, 2, 3, 2, 1]) == 0\n  */\nconst largestChange = (arr) => {\n  let change = 0;\n  let len = arr.length;\n  for (let i = 0; i < len - 1; i++) {\n    let temp = arr[i];\n    arr[i] = arr[len - 1];\n    arr[len - 1] = temp;\n    change++;\n  }\n  return change;\n};\n\n/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallest_change([1,2,3,5,4,7,9,6]) == 4\n  smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallest_change([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let change = 0;\n  let len = arr.length;\n  for (let i = 0; i < len - 1; i++) {\n    let temp = arr[i];\n    arr[i] = arr[len - 1];\n    arr[len - 1] = temp;\n    change++;\n  }\n  return change;\n};\n\n/*\n  Given an array arr of integers, find the maximum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallest_change([1,2,3,5,4,7,9,6]) == 4\n  smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallest_change([1, 2, 3, 2, 1]) == 0\n  */\nconst largestChange = (arr) => {\n  let change = 0;\n  let len = arr.length;\n  for (let i = 0; i < len - 1; i++) {\n    let temp = arr[i];\n    arr[i] = arr[len - 1];\n    arr[len - 1] = temp;\n    change++;\n  }\n  return change;\n};\n\n/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallest_change([1,2,3,5,4,7,9,6]) == 4\n  smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallest_change([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let change = 0;\n  let len = arr.length;\n  for (let i = 0; i < len - 1; i++) {\n    let temp = arr[i];\n    arr[i] = arr[len - 1];\n    arr[len - 1] = temp;\n    change++;\n  }\n  return change;\n};\n\n/*\n  Given an array arr of integers, find the maximum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallest_change([1,2,3,5,4,7,9,6]) == 4\n  smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallest_change([1, 2, 3, 2, 1]) == 0\n  */\nconst largestChange = (arr) => {\n  let change = 0;\n  let len = arr.length;\n  for (let i = 0; i < len - 1; i++) {\n    let temp = arr[i];\n    arr[i] = arr[len - 1];\n    arr[len - 1] = temp;\n    change++;\n  }\n  return change;\n};\n\n/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallest_change([1,2,3,5,4,7,9,6]) == 4\n  smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallest_change([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let change = 0;\n  let len = arr.length;\n  for (let i = 0; i < len - 1; i++) {\n    let temp = arr[i];\n    arr[i] = arr[len - 1];\n    arr[len - 1] = temp;\n    change++;\n  }\n  return change;\n};\n\n/*\n  Given an array arr of integers, find the maximum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallest_change([1,2,3,5,4,7,9,6]) == 4\n  smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallest_change([1, 2, 3, 2, 1]) == 0\n  */\nconst largestChange = (arr) => {\n  let change = 0;\n  let len = arr.length;\n  for (let i = 0; i < len - 1; i++) {\n    let temp = arr[i];\n    arr[i] = arr[len - 1];\n    arr[len - 1] = temp;\n    change++;\n  }\n  return change;\n};\n\n/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallest_change([1,2,3,5,4,7,9,6]) == 4\n  smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallest_change([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let change = 0;\n  let len = arr.length;\n  for (let i = 0; i < len - 1; i++) {\n    let temp = arr[i];\n    arr[i] = arr[len - 1];\n    arr[len - 1] = temp;\n    change++;\n  }\n  return change;\n};\n\n/*\n  Given an array arr of integers, find the maximum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallest_change([1,2,3,5,4,7,9,6]) == 4\n  smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallest_change([1, 2, 3, 2, 1]) == 0\n  */\nconst largestChange = (arr) => {\n  let change = 0;\n  let len = arr.length;\n  for (let i = 0; i < len - 1; i++) {\n    let temp = arr[i];\n    arr[i] = arr[len - 1];\n    arr[len - 1] = temp;\n    change++;\n  }\n  return change;\n};\n\n/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that"}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  total_match([], []) ➞ []\n  total_match(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  total_match(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst total_match = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "total_match", "gc": "<|endoftext|>/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  total_match([], []) ➞ []\n  total_match(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  total_match(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst total_match = (lst1, lst2) => {\n  if (lst1.length!== lst2.length) {\n    return lst1;\n  }\n  const result = [];\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i]!== lst2[i]) {\n      result.push(lst1[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list greater than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  total_match([], []) ➞ []\n  total_match(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  total_match(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst total_not_match = (lst1, lst2) => {\n  if (lst1.length!== lst2.length) {\n    return lst1;\n  }\n  const result = [];\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i]!== lst2[i]) {\n      result.push(lst1[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list equal to the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  total_match([], []) ➞ []\n  total_match(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  total_match(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst total_equal = (lst1, lst2) => {\n  if (lst1.length!== lst2.length) {\n    return lst1;\n  }\n  const result = [];\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] === lst2[i]) {\n      result.push(lst1[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list greater than or equal to the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  total_match([], []) ➞ []\n  total_match(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  total_match(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst total_greater_or_equal = (lst1, lst2) => {\n  if (lst1.length!== lst2.length) {\n    return lst1;\n  }\n  const result = [];\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] >= lst2[i]) {\n      result.push(lst1[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than or equal to the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  total_match([], []) ➞ []\n  total_match(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  total_match(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst total_less_or_equal = (lst1, lst2) => {\n  if (lst1.length!== lst2.length) {\n    return lst1;\n  }\n  const result = [];\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] <= lst2[i]) {\n      result.push(lst1[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list greater than or equal to the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  total_match([], []) ➞ []\n  total_match(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  total_match(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst total_greater_or_equal_equal = (lst1, lst2) => {\n  if (lst1.length!== lst2.length) {\n    return lst1;\n  }\n  const result = [];\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] >= lst2[i]) {\n      result.push(lst1[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than or equal to the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  total_match([], []) ➞ []\n  total_match(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  total_match(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst total_less_or_equal_equal = (lst1, lst2) => {\n  if (lst1.length!== lst2.length) {\n    return lst1;\n  }\n  const result = [];\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] <= lst2[i]) {\n      result.push(lst1[i]);\n    }\n  }\n  return result;\n};\n\n"}
{"task_id": "JavaScript/75", "prompt": "/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  is_multiply_prime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst is_multiply_prime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "is_multiply_prime", "gc": "<|endoftext|>/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  is_multiply_prime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst is_multiply_prime = (a) => {\n  let is_multiply_prime = false;\n  if (a < 100) {\n    for (let i = 2; i <= a; i++) {\n      if (a % i === 0) {\n        is_multiply_prime = true;\n        break;\n      }\n    }\n  }\n  return is_multiply_prime;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  is_multiply_prime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst is_multiply_prime = (a) => {\n  let is_multiply_prime = false;\n  if (a < 100) {\n    for (let i = 2; i <= a; i++) {\n      if (a % i === 0) {\n        is_multiply_prime = true;\n        break;\n      }\n    }\n  }\n  return is_multiply_prime;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  is_multiply_prime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst is_multiply_prime = (a) => {\n  let is_multiply_prime = false;\n  if (a < 100) {\n    for (let i = 2; i <= a; i++) {\n      if (a % i === 0) {\n        is_multiply_prime = true;\n        break;\n      }\n    }\n  }\n  return is_multiply_prime;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  is_multiply_prime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst is_multiply_prime = (a) => {\n  let is_multiply_prime = false;\n  if (a < 100) {\n    for (let i = 2; i <= a; i++) {\n      if (a % i === 0) {\n        is_multiply_prime = true;\n        break;\n      }\n    }\n  }\n  return is_multiply_prime;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  is_multiply_prime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst is_multiply_prime = (a) => {\n  let is_multiply_prime = false;\n  if (a < 100) {\n    for (let i = 2; i <= a; i++) {\n      if (a % i === 0) {\n        is_multiply_prime = true;\n        break;\n      }\n    }\n  }\n  return is_multiply_prime;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  is_multiply_prime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst is_multiply_prime = (a) => {\n  let is_multiply_prime = false;\n  if (a < 100) {\n    for (let i = 2; i <= a; i++) {\n      if (a % i === 0) {\n        is_multiply_prime = true;\n        break;\n      }\n    }\n  }\n  return is_multiply_prime;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  is_multiply_prime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst is_multiply_prime = (a) => {\n  let is_multiply_prime = false;\n  if (a < 100) {\n    for (let i = 2; i <= a; i++) {\n      if (a % i === 0) {\n        is_multiply_prime = true;\n        break;\n      }\n    }\n  }\n  return is_multiply_prime;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  is_multiply_prime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst is_multiply_prime = (a) => {\n  let is_multiply_prime = false;\n  if (a < 100) {\n    for (let i = 2; i <= a; i++) {\n      if (a % i === 0) {\n        is_multiply_prime = true;\n        break;\n      }\n    }\n  }\n  return is_multiply_prime;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  is_multiply_prime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst is_multiply_prime = (a) => {\n  let is_multiply_prime = false;\n  if (a < 100) {\n    for (let i = 2; i <= a; i++) {\n      if (a % i === 0) {\n        is_multiply_prime = true;\n        break;\n      }\n    }\n  }\n  return is_multiply_prime;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  is_multiply_prime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst is_multiply_prime = (a) => {\n  let is_multiply_prime = false;\n  if (a < 100) {\n    for (let i = 2; i <= a; i++) {\n      if (a % i === 0) {\n        is_multiply_prime = true;\n        break;\n      }\n    }\n  }\n  return is_multiply_prime;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  is_multiply_prime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst is_multiply_prime = (a) => {\n  let is_multiply_prime = false;\n  if (a < 100) {\n    for (let i = 2; i <= a; i++) {\n      if (a % i === 0) {\n        is_multiply_prime = true;\n        break;\n      }\n    }\n  }\n  return is_multiply_prime;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  is_multiply_prime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst is_multiply_prime = (a) => {\n  let is_multiply_prime = false;\n  if (a < 100) {\n    for (let i = 2; i <= a; i++) {\n      if (a % i === 0) {\n        is_multiply_prime = true;\n        break;\n      }\n    }\n  }\n  return is_multiply_prime;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  is_multiply_prime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst is_multiply_prime = (a) => {\n  let is_multiply_prime = false;\n  if (a < 100) {\n    for (let i = 2; i <= a; i++) {\n      if (a % i === 0) {\n        is_multiply_prime = true;\n        break;\n      }\n    }\n  }\n  return is_multiply_prime;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  is_multiply_prime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst is_multiply_prime = (a) => {\n  let is_multi"}
{"task_id": "JavaScript/76", "prompt": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  is_simple_power(1, 4) => true\n  is_simple_power(2, 2) => true\n  is_simple_power(8, 2) => true\n  is_simple_power(3, 2) => false\n  is_simple_power(3, 1) => false\n  is_simple_power(5, 3) => false\n  */\nconst is_simple_power = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "is_simple_power", "gc": "<|endoftext|>/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  is_simple_power(1, 4) => true\n  is_simple_power(2, 2) => true\n  is_simple_power(8, 2) => true\n  is_simple_power(3, 2) => false\n  is_simple_power(3, 1) => false\n  is_simple_power(5, 3) => false\n  */\nconst is_simple_power = (x, n) => {\n  if (n % x === 0) {\n    return false;\n  }\n  return true;\n};\n\n/*Your task is to write a function that returns true if a number x is a prime number\n  and false in other cases.\n  x is a prime number if n%int=x\n  For example:\n  is_prime(2) => true\n  is_prime(3) => true\n  is_prime(5) => false\n  is_prime(7) => false\n  is_prime(11) => true\n  */\nconst is_prime = (n) => {\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return false;\n  }\n  if (n % 5 === 0) {\n    return false;\n  }\n  if (n % 7 === 0) {\n    return false;\n  }\n  if (n % 11 === 0) {\n    return true;\n  }\n  return false;\n};\n\n/*Your task is to write a function that returns true if a number x is a perfect square\n  and false in other cases.\n  x is a perfect square if n%int=x\n  For example:\n  is_perfect_square(2) => true\n  is_perfect_square(3) => true\n  is_perfect_square(5) => false\n  is_perfect_square(7) => false\n  is_perfect_square(11) => true\n  */\nconst is_perfect_square = (n) => {\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return false;\n  }\n  if (n % 5 === 0) {\n    return false;\n  }\n  if (n % 7 === 0) {\n    return false;\n  }\n  if (n % 11 === 0) {\n    return true;\n  }\n  return false;\n};\n\n/*Your task is to write a function that returns true if a number x is a perfect cube\n  and false in other cases.\n  x is a perfect cube if n%int=x\n  For example:\n  is_perfect_cube(2) => true\n  is_perfect_cube(3) => true\n  is_perfect_cube(5) => false\n  is_perfect_cube(7) => false\n  is_perfect_cube(11) => true\n  */\nconst is_perfect_cube = (n) => {\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return false;\n  }\n  if (n % 5 === 0) {\n    return false;\n  }\n  if (n % 7 === 0) {\n    return false;\n  }\n  if (n % 11 === 0) {\n    return true;\n  }\n  return false;\n};\n\n/*Your task is to write a function that returns true if a number x is a perfect cube\n  and false in other cases.\n  x is a perfect cube if n%int=x\n  For example:\n  is_perfect_cube(2) => true\n  is_perfect_cube(3) => true\n  is_perfect_cube(5) => false\n  is_perfect_cube(7) => false\n  is_perfect_cube(11) => true\n  */\nconst is_perfect_cube_power = (x, n) => {\n  if (n % x === 0) {\n    return false;\n  }\n  return true;\n};\n\n/*Your task is to write a function that returns true if a number x is a perfect cube\n  and false in other cases.\n  x is a perfect cube if n%int=x\n  For example:\n  is_perfect_cube_power(2, 2) => true\n  is_perfect_cube_power(2, 1) => true\n  is_perfect_cube_power(2, 3) => false\n  is_perfect_cube_power(2, 5) => false\n  is_perfect_cube_power(2, 7) => false\n  is_perfect_cube_power(2, 11) => true\n  */\nconst is_perfect_cube_power_power = (x, n) => {\n  if (n % x === 0) {\n    return false;\n  }\n  return true;\n};\n\n/*Your task is to write a function that returns true if a number x is a perfect cube\n  and false in other cases.\n  x is a perfect cube if n%int=x\n  For example:\n  is_perfect_cube_power_power(2, 2) => true\n  is_perfect_cube_power_power(2, 1) => true\n  is_perfect_cube_power_power(2, 3) => false\n  is_perfect_cube_power_power(2, 5) => false\n  is_perfect_cube_power_power(2, 7) => false\n  is_perfect_cube_power_power(2, 11) => true\n  */\nconst is_perfect_cube_power_power_power = (x, n) => {\n  if (n % x === 0) {\n    return false;\n  }\n  return true;\n};\n\n/*Your task is to write a function that returns true if a number x is a perfect cube\n  and false in other cases.\n  x is a perfect cube if n%int=x\n  For example:\n  is_perfect_cube_power_power_power(2, 2) => true\n  is_perfect_cube_power_power_power(2, 1) => true\n  is_perfect_cube_power_power_power(2, 3) => false\n  is_perfect_cube_power_power_power(2, 5) => false\n  is_perfect_cube_power_power_power(2, 7) => false\n  is_perfect_cube_power_power_power(2, 11) => true\n  */\nconst is_perfect_cube_power_power_power_power = (x, n) => {\n  if (n % x === 0) {\n    return false;\n  }\n  return true;\n};\n\n/*Your task is to write a function that returns true if a number x is a perfect cube\n  and false in other cases.\n  x is a perfect cube if n%int=x\n  For example:\n  is_perfect_cube_power_power_power_power(2, 2) => true\n  is_perfect_cube_power_power_power_power(2, 1) => true\n  is_perfect_cube_power_power_power_power(2, 3) => false\n  is_perfect_cube_power_power_power_power(2, 5) => false\n  is_perfect_cube_power_power_power_power(2, 7) => false\n  is_perfect_cube_power_power_power_power(2, 11) => true\n  */\nconst is_perfect_cube_power_power_power_power = (x, n) => {\n  if (n % x === 0) {\n    return false;\n  }\n  return true;\n};\n\n/*Your task is to write a function that returns true if a number x is a perfect cube\n  and false in other cases.\n  x is a perfect cube if n%int=x\n  For example:\n  is_perfect_cube_power_power_power_power(2, 2) => true\n  is_perfect_cube_power_power_power_power(2, 1) => true\n  is_perfect_cube_power_power_power_power(2, 3) => false\n  is_perfect_cube_power_power_power_power(2, 5) => false\n  is_perfect_cube_power_power_power_power(2, 7) => false\n  is_perfect_cube_power_power_power_power(2, 11) => true\n  */\nconst is_perfect_cube_power_power_power_power_power = (x, n) => {\n  if (n % x === 0) {\n    return false;\n  }\n  return true;\n};\n\n/*Your task is to write a function that returns true if a number x is a perfect cube\n  and false in other cases.\n  x is a perfect cube if n%int=x\n  For example:\n  is_perfect_cube_power_power_power_power(2, 2) => true\n  is_perfect_cube_power_power_power_power(2, 1) => true\n  is_perfect_cube_power_power_power_power(2, 3) => false\n  is_perfect_cube_power_power_power_power(2, 5) => "}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "gc": "<|endoftext|>/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  if (a <= 0) return false;\n  if (a === 1) return true;\n  if (a % 2 === 0) return iscube(a / 2);\n  return false;\n};\n\n/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a prime number greater than 1.\n  Note: you may assume the input is always valid.\n  Examples:\n  isprime(2) ==> true\n  isprime(3) ==> false\n  isprime(4) ==> false\n  isprime(5) ==> true\n  isprime(6) ==> false\n  isprime(7) ==> false\n  isprime(8) ==> false\n  isprime(9) ==> false\n  isprime(10) ==> false\n  isprime(11) ==> false\n  isprime(12) ==> false\n  isprime(13) ==> false\n  isprime(14) ==> false\n  isprime(15) ==> false\n  isprime(16) ==> false\n  isprime(17) ==> false\n  isprime(18) ==> false\n  isprime(19) ==> false\n  isprime(20) ==> false\n  isprime(21) ==> false\n  isprime(22) ==> false\n  isprime(23) ==> false\n  isprime(24) ==> false\n  isprime(25) ==> false\n  isprime(26) ==> false\n  isprime(27) ==> false\n  isprime(28) ==> false\n  isprime(29) ==> false\n  isprime(31) ==> false\n  isprime(32) ==> false\n  isprime(33) ==> false\n  isprime(34) ==> false\n  isprime(35) ==> false\n  isprime(36) ==> false\n  isprime(37) ==> false\n  isprime(38) ==> false\n  isprime(39) ==> false\n  isprime(41) ==> false\n  isprime(42) ==> false\n  isprime(43) ==> false\n  isprime(44) ==> false\n  isprime(45) ==> false\n  isprime(46) ==> false\n  isprime(47) ==> false\n  isprime(48) ==> false\n  isprime(49) ==> false\n  isprime(50) ==> false\n  isprime(51) ==> false\n  isprime(52) ==> false\n  isprime(53) ==> false\n  isprime(54) ==> false\n  isprime(55) ==> false\n  isprime(56) ==> false\n  isprime(57) ==> false\n  isprime(58) ==> false\n  isprime(59) ==> false\n  isprime(60) ==> false\n  isprime(61) ==> false\n  isprime(62) ==> false\n  isprime(63) ==> false\n  isprime(64) ==> false\n  isprime(65) ==> false\n  isprime(66) ==> false\n  isprime(67) ==> false\n  isprime(68) ==> false\n  isprime(69) ==> false\n  isprime(70) ==> false\n  isprime(71) ==> false\n  isprime(72) ==> false\n  isprime(73) ==> false\n  isprime(74) ==> false\n  isprime(75) ==> false\n  isprime(76) ==> false\n  isprime(77) ==> false\n  isprime(78) ==> false\n  isprime(79) ==> false\n  isprime(80) ==> false\n  isprime(81) ==> false\n  isprime(82) ==> false\n  isprime(83) ==> false\n  isprime(84) ==> false\n  isprime(85) ==> false\n  isprime(86) ==> false\n  isprime(87) ==> false\n  isprime(88) ==> false\n  isprime(89) ==> false\n  isprime(90) ==> false\n  isprime(91) ==> false\n  isprime(92) ==> false\n  isprime(93) ==> false\n  isprime(94) ==> false\n  isprime(95) ==> false\n  isprime(96) ==> false\n  isprime(97) ==> false\n  isprime(98) ==> false\n  isprime(99) ==> false\n  isprime(100) ==> false\n  isprime(101) ==> false\n  isprime(102) ==> false\n  isprime(103) ==> false\n  isprime(104) ==> false\n  isprime(105) ==> false\n  isprime(106) ==> false\n  isprime(107) ==> false\n  isprime(108) ==> false\n  isprime(109) ==> false\n  isprime(110) ==> false\n  isprime(111) ==> false\n  isprime(112) ==> false\n  isprime(113) ==> false\n  isprime(114) ==> false\n  isprime(115) ==> false\n  isprime(116) ==> false\n  isprime(117) ==> false\n  isprime(118) ==> false\n  isprime(119) ==> false\n  isprime(120) ==> false\n  isprime(121) ==> false\n  isprime(122) ==> false\n  isprime(123) ==> false\n  isprime(124) ==> false\n  isprime(125) ==> false\n  isprime(126) ==> false\n  isprime(127) ==> false\n  isprime(128) ==> false\n  isprime(129) ==> false\n  isprime(130) ==> false\n  isprime(131) ==> false\n  isprime(132) ==> false\n  isprime(133) ==> false\n  isprime(134) ==> false\n  isprime(135) ==> false\n  isprime(136) ==> false\n  isprime(137) ==> false\n  isprime(138) ==> false\n  isprime(139) ==> false\n  isprime(140) ==> false\n  isprime(141) ==> false\n  isprime(142) ==> false\n  isprime(143) ==> false\n  isprime(144) ==> false\n  isprime(145) ==> false\n  isprime(146) ==> false\n  isprime(147) ==> false\n  isprime(148) ==> false\n  isprime(149) ==> false\n  isprime(150) ==> false\n  isprime(151) ==> false\n  isprime(152) ==> false\n  isprime(153) ==> false\n  isprime(154) ==> false\n  isprime(155) ==> false\n  isprime(156) ==> false\n  isprime(157) "}
{"task_id": "JavaScript/78", "prompt": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hex_key = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hex_key", "gc": "<|endoftext|>/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hex_key = (num) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let prime_digits = [];\n  let prime_digit_count = [];\n  let prime_digit_count_array = [];\n  let prime_digit_count_array_index = [];\n  let prime_digit_count_array_index_array = [];\n  let prime_digit_count_array_index_array_index = [];\n  let prime_digit_count_array_index_array_index_array = [];\n  let prime_digit_count_array_index_array_index_array_index = [];\n  let prime_digit_count_array_index_array_index_array_index_array = [];\n  let prime_digit_count_array_index_array_index_array_index_array_index = [];\n  let prime_digit_count_array_index_array_index_array_index_array_index_array = [];\n  let prime_digit_count_array_index_array_index_array_index_array_index_array_index = [];\n  let prime_digit_count_array_index_array_index_array_index_array_index_array_index_array = [];\n  let prime_digit_count_array_index_array_index_array_index_array_index_array_index_array_index = [];\n  let prime_digit_count_array_index_array_index_array_index_array_index_array_index_array_index_array = [];\n  let prime_digit_count_array_index_array_index_array_index_array_index_array_index_array_index_array_index = [];\n  let prime_digit_count_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array = [];\n  let prime_digit_count_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index = [];\n  let prime_digit_count_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array = [];\n  let prime_digit_count_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index = [];\n  let prime_digit_count_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_"}
{"task_id": "JavaScript/79", "prompt": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimal_to_binary(15)   # returns \"db1111db\"\n  decimal_to_binary(32)   # returns \"db100000db\"\n  */\nconst decimal_to_binary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimal_to_binary", "gc": "<|endoftext|>/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimal_to_binary(15)   # returns \"db1111db\"\n  decimal_to_binary(32)   # returns \"db100000db\"\n  */\nconst decimal_to_binary = (decimal) => {\n  let binary = '';\n  let decimalString = decimal.toString();\n  let decimalLength = decimalString.length;\n  let decimalNumber;\n  let decimalNumberLength;\n  let decimalNumberLength2;\n  let decimalNumberLength3;\n  let decimalNumberLength4;\n  let decimalNumberLength5;\n  let decimalNumberLength6;\n  let decimalNumberLength7;\n  let decimalNumberLength8;\n  let decimalNumberLength9;\n  let decimalNumberLength10;\n  let decimalNumberLength11;\n  let decimalNumberLength12;\n  let decimalNumberLength13;\n  let decimalNumberLength14;\n  let decimalNumberLength15;\n  let decimalNumberLength16;\n  let decimalNumberLength17;\n  let decimalNumberLength18;\n  let decimalNumberLength19;\n  let decimalNumberLength20;\n  let decimalNumberLength21;\n  let decimalNumberLength22;\n  let decimalNumberLength23;\n  let decimalNumberLength24;\n  let decimalNumberLength25;\n  let decimalNumberLength26;\n  let decimalNumberLength27;\n  let decimalNumberLength28;\n  let decimalNumberLength29;\n  let decimalNumberLength30;\n  let decimalNumberLength31;\n  let decimalNumberLength32;\n  let decimalNumberLength33;\n  let decimalNumberLength34;\n  let decimalNumberLength35;\n  let decimalNumberLength36;\n  let decimalNumberLength37;\n  let decimalNumberLength38;\n  let decimalNumberLength39;\n  let decimalNumberLength40;\n  let decimalNumberLength41;\n  let decimalNumberLength42;\n  let decimalNumberLength43;\n  let decimalNumberLength44;\n  let decimalNumberLength45;\n  let decimalNumberLength46;\n  let decimalNumberLength47;\n  let decimalNumberLength48;\n  let decimalNumberLength49;\n  let decimalNumberLength50;\n  let decimalNumberLength51;\n  let decimalNumberLength52;\n  let decimalNumberLength53;\n  let decimalNumberLength54;\n  let decimalNumberLength55;\n  let decimalNumberLength56;\n  let decimalNumberLength57;\n  let decimalNumberLength58;\n  let decimalNumberLength59;\n  let decimalNumberLength60;\n  let decimalNumberLength61;\n  let decimalNumberLength62;\n  let decimalNumberLength63;\n  let decimalNumberLength64;\n  let decimalNumberLength65;\n  let decimalNumberLength66;\n  let decimalNumberLength67;\n  let decimalNumberLength68;\n  let decimalNumberLength69;\n  let decimalNumberLength70;\n  let decimalNumberLength71;\n  let decimalNumberLength72;\n  let decimalNumberLength73;\n  let decimalNumberLength74;\n  let decimalNumberLength75;\n  let decimalNumberLength76;\n  let decimalNumberLength77;\n  let decimalNumberLength78;\n  let decimalNumberLength79;\n  let decimalNumberLength80;\n  let decimalNumberLength81;\n  let decimalNumberLength82;\n  let decimalNumberLength83;\n  let decimalNumberLength84;\n  let decimalNumberLength85;\n  let decimalNumberLength86;\n  let decimalNumberLength87;\n  let decimalNumberLength88;\n  let decimalNumberLength89;\n  let decimalNumberLength90;\n  let decimalNumberLength91;\n  let decimalNumberLength92;\n  let decimalNumberLength93;\n  let decimalNumberLength94;\n  let decimalNumberLength95;\n  let decimalNumberLength96;\n  let decimalNumberLength97;\n  let decimalNumberLength98;\n  let decimalNumberLength99;\n  let decimalNumberLength100;\n  let decimalNumberLength101;\n  let decimalNumberLength102;\n  let decimalNumberLength103;\n  let decimalNumberLength104;\n  let decimalNumberLength105;\n  let decimalNumberLength106;\n  let decimalNumberLength107;\n  let decimalNumberLength108;\n  let decimalNumberLength109;\n  let decimalNumberLength110;\n  let decimalNumberLength111;\n  let decimalNumberLength112;\n  let decimalNumberLength113;\n  let decimalNumberLength114;\n  let decimalNumberLength115;\n  let decimalNumberLength116;\n  let decimalNumberLength117;\n  let decimalNumberLength118;\n  let decimalNumberLength119;\n  let decimalNumberLength120;\n  let decimalNumberLength121;\n  let decimalNumberLength122;\n  let decimalNumberLength123;\n  let decimalNumberLength124;\n  let decimalNumberLength125;\n  let decimalNumberLength126;\n  let decimalNumberLength127;\n  let decimalNumberLength128;\n  let decimalNumberLength129;\n  let decimalNumberLength130;\n  let decimalNumberLength131;\n  let decimalNumberLength132;\n  let decimalNumberLength133;\n  let decimalNumberLength134;\n  let decimalNumberLength135;\n  let decimalNumberLength136;\n  let decimalNumberLength137;\n  let decimalNumberLength138;\n  let decimalNumberLength139;\n  let decimalNumberLength140;\n  let decimalNumberLength141;\n  let decimalNumberLength142;\n  let decimalNumberLength143;\n  let decimalNumberLength144;\n  let decimalNumberLength145;\n  let decimalNumberLength146;\n  let decimalNumberLength147;\n  let decimalNumberLength148;\n  let decimalNumberLength149;\n  let decimalNumberLength150;\n  let decimalNumberLength151;\n  let decimalNumberLength152;\n  let decimalNumberLength153;\n  let decimalNumberLength154;\n  let decimalNumberLength155;\n  let decimalNumberLength156;\n  let decimalNumberLength157;\n  let decimalNumberLength158;\n  let decimalNumberLength159;\n  let decimalNumberLength160;\n  let decimalNumberLength161;\n  let decimalNumberLength162;\n  let decimalNumberLength163;\n  let decimalNumberLength164;\n  let decimalNumberLength165;\n  let decimalNumberLength166;\n  let decimalNumberLength167;\n  let decimalNumberLength168;\n  let decimalNumberLength169;\n  let decimalNumberLength170;\n  let decimalNumberLength171;\n  let decimalNumberLength172;\n  let decimalNumberLength173;\n  let decimalNumberLength174;\n  let decimalNumberLength175;\n  let decimalNumberLength176;\n  let decimalNumberLength177;\n  let decimalNumberLength178;\n  let decimalNumberLength179;\n  let decimalNumberLength180;\n  let decimalNumberLength181;\n  let decimalNumberLength182;\n  let decimalNumberLength183;\n  let decimalNumberLength184;\n  let decimalNumberLength185;\n  let decimalNumberLength186;\n  let decimalNumberLength187;\n  let decimalNumberLength188;\n  let decimalNumberLength189;\n  let decimalNumberLength190;\n  let decimalNumberLength191;\n  let decimalNumberLength192;\n  let decimalNumberLength193;\n  let decimalNumberLength194;\n  let decimalNumberLength195;\n  let decimalNumberLength196;\n  let decimalNumberLength197;\n  let decimalNumberLength198;\n  let decimalNumberLength199;\n  let decimalNumberLength200;\n  let decimalNumberLength201;\n  let decimalNumberLength202;\n  let decimalNumberLength203;\n  let decimal"}
{"task_id": "JavaScript/80", "prompt": "/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  is_happy(a) => false\n  is_happy(aa) => false\n  is_happy(abcd) => true\n  is_happy(aabb) => false\n  is_happy(adb) => true\n  is_happy(xyy) => false\n  */\nconst is_happy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "is_happy", "gc": "<|endoftext|>/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  is_happy(a) => false\n  is_happy(aa) => false\n  is_happy(abcd) => true\n  is_happy(aabb) => false\n  is_happy(adb) => true\n  is_happy(xyy) => false\n  */\nconst is_happy = (s) => {\n  let is_happy = true;\n  let count = 0;\n  let letter;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let A;\n  let B;\n  let C;\n  let D;\n  let E;\n  let F;\n  let G;\n  let H;\n  let I;\n  let J;\n  let K;\n  let L;\n  let M;\n  let N;\n  let O;\n  let P;\n  let Q;\n  let R;\n  let S;\n  let T;\n  let U;\n  let V;\n  let W;\n  let X;\n  let Y;\n  let Z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let A;\n  let B;\n  let C;\n  let D;\n  let E;\n  let F;\n  let G;\n  let H;\n  let I;\n  let J;\n  let K;\n  let L;\n  let M;\n  let N;\n  let O;\n  let P;\n  let Q;\n  let R;\n  let S;\n  let T;\n  let U;\n  let V;\n  let W;\n  let X;\n  let Y;\n  let Z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let A;\n  let B;\n  let C;\n  let D;\n  let E;\n  let F;\n  let G;\n  let H;\n  let I;\n  let J;\n  let K;\n  let L;\n  let M;\n  let N;\n  let O;\n  let P;\n  let Q;\n  let R;\n  let S;\n  let T;\n  let U;\n  let V;\n  let W;\n  let X;\n  let Y;\n  let Z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let A;\n  let B;\n  let C;\n  let D;\n  let E;\n  let F;\n  let G;\n  let H;\n  let I;\n  let J;\n  let K;\n  let L;\n  let M;\n  let N;\n  let O;\n  let P;\n  let Q;\n  let R;\n  let S;\n  let T;\n  let U;\n  let V;\n  let W;\n  let X;\n  let Y;\n  let Z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let A;\n  let B;\n  let C;\n  let D;\n  let E;\n  let F;\n  let G;\n  let H;\n  let I;\n  let J;\n  let K;\n  let L;\n  let M;\n  let N;\n  let O;\n  let P;\n  let Q;\n  let R;\n  let S;\n  let T;\n  let U;\n  let V;\n  let W;\n  let X;\n  let Y;\n  let Z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let A;\n  let B;\n  let C;\n  let D;\n  let E;\n  let F;\n  let G;\n  let H;\n  let I;\n  let J;\n  let K;\n  let L;\n  let M;\n  let N;\n  let O;\n  let P;\n  let Q;\n  let R;\n  let S;\n  let T;\n  let U;\n  let V;\n  let W;\n  let X;\n  let Y;\n  let Z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let A;\n  let B;\n  let C;\n  let D;\n  let E;\n  let F;\n  let G;\n  let H;\n  let I;\n  let J;\n  let K;\n  let L;\n  let M;\n  let N;\n  let O;\n  let P;\n  let Q;\n  let R;\n  let S;\n  let T;\n  let U;\n  let V;\n  let W;\n  let X;\n  let Y;\n  let Z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let A;\n  let B;\n  let C;\n  let D;\n  let E;\n  let F;\n  let G;\n  let H;\n  let I;\n  let J;\n  let K;\n  let L;\n  let M;\n  let N;\n  let O;\n  let P;\n  let Q;\n  let R"}
{"task_id": "JavaScript/81", "prompt": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numerical_letter_grade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numerical_letter_grade", "gc": "<|endoftext|>/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numerical_letter_grade = (grades) => {\n  const letterGrades = {\n    A: 'A',\n    B: 'B',\n    C: 'C',\n    D: 'D',\n    E: 'E',\n  };\n  return grades.map((grade) => {\n    const letter = letterGrades[grade];\n    return letter? letter : grade;\n  });\n};\n\n/*\n  Given an array of grades, return the average of the grades.\n  Example:\n  average_grade([4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7]) == 4.5\n  */\nconst average_grade = (grades) => {\n  const average = grades.reduce((sum, grade) => sum + grade, 0) / grades.length;\n  return average;\n};\n\n/*\n  Given an array of grades, return the standard deviation of the grades.\n  Example:\n  standard_deviation_grade([4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7]) == 2.5\n  */\nconst standard_deviation_grade = (grades) => {\n  const mean = average_grade(grades);\n  const variance = grades.reduce((sum, grade) => sum + grad * grade, 0) / grades.length;\n  return Math.sqrt(variance);\n};\n\n/*\n  Given an array of grades, return the median of the grades.\n  Example:\n  median_grade([4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7]) == 3.5\n  */\nconst median_grade = (grades) => {\n  const mean = average_grade(grades);\n  const variance = grades.reduce((sum, grade) => sum + grad * grade, 0) / grades.length;\n  const median = grades.reduce((sum, grade) => sum + grad * grade / 2, 0) / 2;\n  return median + mean / 2;\n};\n\n/*\n  Given an array of grades, return the mode of the grades.\n  Example:\n  mode_grade([4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7]) == 3.7\n  */\nconst mode_grade = (grades) => {\n  const mean = average_grade(grades);\n  const variance = grades.reduce((sum, grade) => sum + grad * grade, 0) / grades.length;\n  const modes = grades.reduce((acc, grade) => {\n    if (acc === grade) {\n      acc.push(grade);\n    } else {\n      acc.push(grade);\n    }\n    return acc;\n  }, []);\n  return modes.reduce((acc, grade) => {\n    if (acc.includes(grade)) {\n      return grade;\n    } else {\n      return acc;\n    }\n  }, mean);\n};\n\n/*\n  Given an array of grades, return the mode of the grades.\n  Example:\n  mode_grade([4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7]) == 3.3\n  */\nconst mode_grade = (grades) => {\n  const mean = average_grade(grades);\n  const variance = grades.reduce((sum, grade) => sum + grad * grade, 0) / grades.length;\n  const modes = grades.reduce((acc, grade) => {\n    if (acc === grade) {\n      acc.push(grade);\n    } else {\n      acc.push(grade);\n    }\n    return acc;\n  }, []);\n  return modes.reduce((acc, grade) => {\n    if (acc.includes(grade)) {\n      return grade;\n    } else {\n      return acc;\n    }\n  }, mean);\n};\n\n/*\n  Given an array of grades, return the mode of the grades.\n  Example:\n  mode_grade([4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7]) == 3.0\n  */\nconst mode_grade = (grades) => {\n  const mean = average_grade(grades);\n  const variance = grades.reduce((sum, grade) => sum + grad * grade, 0) / grades.length;\n  const modes = grades.reduce((acc, grade) => {\n    if (acc === grade) {\n      acc.push(grade);\n    } else {\n      acc.push(grade);\n    }\n    return acc;\n  }, []);\n  return modes.reduce((acc, grade) => {\n    if (acc.includes(grade)) {\n      return grade;\n    } else {\n      return acc;\n    }\n  }, mean);\n};\n\n/*\n  Given an array of grades, return the mode of the grades.\n  Example:\n  mode_grade([4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7]) == 1.7\n  */\nconst mode_grade = (grades) => {\n  const mean = average_grade(grades);\n  const variance = grades.reduce((sum, grade) => sum + grad * grade, 0) / grades.length;\n  const modes = grades.reduce((acc, grade) => {\n    if (acc === grade) {\n      acc.push(grade);\n    } else {\n      acc.push(grade);\n    }\n    return acc;\n  }, []);\n  return modes.reduce((acc, grade) => {\n    if (acc.includes(grade)) {\n      return grade;\n    } else {\n      return acc;\n    }\n  }, mean);\n};\n\n/*\n  Given an array of grades, return the mode of the grades.\n  Example:\n  mode_grade([4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7]) == 2.0\n  */\nconst mode_grade = (grades) => {\n  const mean = average_grade(grades);\n  const variance = grades.reduce((sum, grade) => sum + grad * grade, 0) / grades.length;\n  const modes = grades.reduce((acc, grade) => {\n    if (acc === grade) {\n      acc.push(grade);\n    } else {\n      acc.push(grade);\n    }\n    return acc;\n  }, []);\n  return modes.reduce((acc, grade) => {\n    if (acc.includes(grade)) {\n      return grade;\n    } else {\n      return acc;\n    }\n  }, mean);\n};\n\n/*\n  Given an array of grades, return the mode of the grades.\n  Example:\n  mode_grade([4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7]) == 1.0\n  */\nconst mode_grade = (grades) => {\n  const mean = average_grade(grades);\n  const variance = grades.reduce((sum, grade) => sum + grad * grade, 0) / grades.length;\n  const modes = grades.reduce((acc, grade) => {\n    if (acc === grade) {\n      acc.push(grade);\n    } else {\n      acc.push(grade);\n    }\n    return acc;\n  }, []);\n  return modes.reduce((acc, grade) => {\n    if (acc.includes(grade)) {\n      return grade;\n    } else {\n      return acc;\n    }\n  }, mean);\n};\n\n/*\n  Given an array of grades, return the mode of the grades.\n  Example:\n  mode_grade(["}
{"task_id": "JavaScript/82", "prompt": "/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  prime_length('Hello') == true\n  prime_length('abcdcba') == true\n  prime_length('kittens') == true\n  prime_length('orange') == false\n  */\nconst prime_length = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "prime_length", "gc": "<|endoftext|>/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  prime_length('Hello') == true\n  prime_length('abcdcba') == true\n  prime_length('kittens') == true\n  prime_length('orange') == false\n  */\nconst prime_length = (string) => {\n  let prime = true;\n  let length = string.length;\n  for (let i = 2; i <= length; i++) {\n    if (string[i] === '1') {\n      prime = false;\n      break;\n    }\n  }\n  return prime;\n};\n\n/*Write a function that takes a string and returns true if the string\n  is a palindrome or false otherwise\n  Examples\n  is_palindrome('Hello') == true\n  is_palindrome('kittens') == true\n  is_palindrome('kittens') == false\n  */\nconst is_palindrome = (string) => {\n  let reversed = string.reverse();\n  return reversed === string;\n};\n\n/*Write a function that takes a string and returns true if the string\n  is a palindrome or false otherwise\n  Examples\n  is_palindrome('kittens') == true\n  is_palindrome('kittens') == false\n  */\nconst is_palindrome_with_space = (string) => {\n  let reversed = string.reverse();\n  return reversed === string;\n};\n\n/*Write a function that takes a string and returns true if the string\n  is a palindrome or false otherwise\n  Examples\n  is_palindrome_with_space('kittens') == true\n  is_palindrome_with_space('kittens') == false\n  */\nconst is_palindrome_with_space_in_middle = (string) => {\n  let reversed = string.reverse();\n  return reversed === string;\n};\n\n/*Write a function that takes a string and returns true if the string\n  is a palindrome or false otherwise\n  Examples\n  is_palindrome_with_space_in_middle('kittens') == true\n  is_palindrome_with_space_in_middle('kittens') == false\n  */\nconst is_palindrome_with_space_in_middle_with_space = (string) => {\n  let reversed = string.reverse();\n  return reversed === string;\n};\n\n/*Write a function that takes a string and returns true if the string\n  is a palindrome or false otherwise\n  Examples\n  is_palindrome_with_space_in_middle_with_space('kittens') == true\n  is_palindrome_with_space_in_middle_with_space('kittens') == false\n  */\nconst is_palindrome_with_space_in_middle_with_space_in_middle = (string) => {\n  let reversed = string.reverse();\n  return reversed === string;\n};\n\n/*Write a function that takes a string and returns true if the string\n  is a palindrome or false otherwise\n  Examples\n  is_palindrome_with_space_in_middle_with_space_in_middle('kittens') == true\n  is_palindrome_with_space_in_middle_with_space_in_middle('kittens') == false\n  */\nconst is_palindrome_with_space_in_middle_with_space_in_middle_with_space = (string) => {\n  let reversed = string.reverse();\n  return reversed === string;\n};\n\n/*Write a function that takes a string and returns true if the string\n  is a palindrome or false otherwise\n  Examples\n  is_palindrome_with_space_in_middle_with_space_in_middle_with_space_in_middle('kittens') == true\n  is_palindrome_with_space_in_middle_with_space_in_middle_with_space_in_middle('kittens') == false\n  */\nconst is_palindrome_with_space_in_middle_with_space_in_middle_with_space_in_middle = (string) => {\n  let reversed = string.reverse();\n  return reversed === string;\n};\n\n/*Write a function that takes a string and returns true if the string\n  is a palindrome or false otherwise\n  Examples\n  is_palindrome_with_space_in_middle_with_space_in_middle_with_space_in_middle_with_space_in_middle('kittens') == true\n  is_palindrome_with_space_in_middle_with_space_in_middle_with_space_in_middle_with_space_in_middle('kittens') == false\n  */\nconst is_palindrome_with_space_in_middle_with_space_in_middle_with_space_in_middle_with_space_in_middle = (string) => {\n  let reversed = string.reverse();\n  return reversed === string;\n};\n\n/*Write a function that takes a string and returns true if the string\n  is a palindrome or false otherwise\n  Examples\n  is_palindrome_with_space_in_middle_with_space_in_middle_with_space_in_middle_with_space_in_middle_with_space_in_middle('kittens') == true\n  is_palindrome_with_space_in_middle_with_space_in_middle_with_space_in_middle_with_space_in_middle_with_space_in_middle_with_space_in_middle('kittens') == false\n  */\nconst is_palindrome_with_space_in_middle_with_space_in_middle_with_space_in_middle_with_space_in_middle_with_space_in_middle = (string) => {\n  let reversed = string.reverse();\n  return reversed === string;\n};\n\n/*Write a function that takes a string and returns true if the string\n  is a palindrome or false otherwise\n  Examples\n  is_palindrome_with_space_in_middle_with_space_in_middle_with_space_in_middle_with_space_in_middle_with_space_in_middle_with_space_in_middle_with_space_in_middle('kittens') == true\n  is_palindrome_with_space_in_middle_with_space_in_middle_with_space_in_middle_with_space_in_middle_with_space_in_middle_with_space_in_middle_with_space_in_middle_with_space_in_middle_with_space_in_middle_with_space_in_middle_with_space_in_middle_with_space_in_middle_with_space_in_middle_with_space_in_middle_with_space_in_middle_with_space_in_middle_with_space_in_middle_with_space_in_middle_with_space_in_middle_with_space_in_middle_with_space_in_middle_with_space_in_middle_with_space_in_middle_with_space_in_middle_with_space_in_middle_with_space_in_middle_with_space_in_middle_with_space_in_middle_with_space_in_middle_with_space_in_middle_with_space_in_middle_with_space_in_middle_with_space_in_middle_with_space_in_middle_with_space_in_middle_with_space_in_middle_with_space_in_middle_with_space_in_middle_with_space_in_middle_with_space_in_middle_with_space_in_middle_with_space_in_middle_with_space_in_middle_with_space_in_middle_with_space_in_middle_with_space_in_middle_with_space_in_middle_with_space_in_middle_with_space_in_middle_with_space_in_middle_with_space_in_middle_with_space_in_middle_with_space_in_middle_with_space_in_middle_with_space_in_middle_with_space_in_middle_with_space_in_middle_with_space_in_middle_with_space_in_middle_with_space_in_middle_with_space_in_middle_with_space_in_middle_with_space_in_middle_with_space_in_middle_with_space_in_middle_with_space_in_middle_with_space_in_middle_with_space_in_middle_with_space_in_middle_with_space_in_middle_with_space_in_middle_with_space_in_middle_with_space_in_middle_with_space_in_middle_with_space_in_middle_with_space_in_middle_with_space_in_middle_with_space_in_middle_with_space_in_middle_with_space_in_middle_with_space_in_middle_with_space_in_middle_with_space_in_middle_with_space_in_middle_with_space_in_middle_with_space_in_middle_with_space_in_middle_with_space_in_middle_with_space_in_middle_with_space_in_middle_with_space_in_middle_with_space_in_middle_with_space_in_middle_with_space_in_middle_with_space_in_middle_with_space_in_middle_with_space_in_middle_with_space_in_middle_with_space_in_middle_with_space_in_middle_with_space_in_middle_with_space_in_middle_with_space_in_middle_with_space_in_middle_with_space_in_middle_with_space_in_middle_with_space_in_middle_with_space"}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst starts_one_ends = (n) => {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "starts_one_ends", "gc": "<|endoftext|>/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst starts_one_ends = (n) => {\n  let count = 0;\n  let i = 1;\n  while (n > 0) {\n    if (n % 10 === 0) {\n      count++;\n    }\n    n /= 10;\n    i++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst starts_zero_ends = (n) => {\n  let count = 0;\n  let i = 1;\n  while (n > 0) {\n    if (n % 10 === 0) {\n      count++;\n    }\n    n /= 10;\n    i++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 2.\n  */\nconst starts_two_ends = (n) => {\n  let count = 0;\n  let i = 1;\n  while (n > 0) {\n    if (n % 10 === 0) {\n      count++;\n    }\n    n /= 10;\n    i++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 3.\n  */\nconst starts_three_ends = (n) => {\n  let count = 0;\n  let i = 1;\n  while (n > 0) {\n    if (n % 10 === 0) {\n      count++;\n    }\n    n /= 10;\n    i++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 4.\n  */\nconst starts_four_ends = (n) => {\n  let count = 0;\n  let i = 1;\n  while (n > 0) {\n    if (n % 10 === 0) {\n      count++;\n    }\n    n /= 10;\n    i++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 5.\n  */\nconst starts_five_ends = (n) => {\n  let count = 0;\n  let i = 1;\n  while (n > 0) {\n    if (n % 10 === 0) {\n      count++;\n    }\n    n /= 10;\n    i++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 6.\n  */\nconst starts_six_ends = (n) => {\n  let count = 0;\n  let i = 1;\n  while (n > 0) {\n    if (n % 10 === 0) {\n      count++;\n    }\n    n /= 10;\n    i++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 7.\n  */\nconst starts_seven_ends = (n) => {\n  let count = 0;\n  let i = 1;\n  while (n > 0) {\n    if (n % 10 === 0) {\n      count++;\n    }\n    n /= 10;\n    i++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 8.\n  */\nconst starts_eight_ends = (n) => {\n  let count = 0;\n  let i = 1;\n  while (n > 0) {\n    if (n % 10 === 0) {\n      count++;\n    }\n    n /= 10;\n    i++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 9.\n  */\nconst starts_nine_ends = (n) => {\n  let count = 0;\n  let i = 1;\n  while (n > 0) {\n    if (n % 10 === 0) {\n      count++;\n    }\n    n /= 10;\n    i++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 10.\n  */\nconst starts_ten_ends = (n) => {\n  let count = 0;\n  let i = 1;\n  while (n > 0) {\n    if (n % 10 === 0) {\n      count++;\n    }\n    n /= 10;\n    i++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 11.\n  */\nconst starts_eleven_ends = (n) => {\n  let count = 0;\n  let i = 1;\n  while (n > 0) {\n    if (n % 10 === 0) {\n      count++;\n    }\n    n /= 10;\n    i++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 12.\n  */\nconst starts_twelve_ends = (n) => {\n  let count = 0;\n  let i = 1;\n  while (n > 0) {\n    if (n % 10 === 0) {\n      count++;\n    }\n    n /= 10;\n    i++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 13.\n  */\nconst starts_thirteen_ends = (n) => {\n  let count = 0;\n  let i = 1;\n  while (n > 0) {\n    if (n % 10 === 0) {\n      count++;\n    }\n    n /= 10;\n    i++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 14.\n  */\nconst starts_fourteen_ends = (n) => {\n  let count = 0;\n  let i = 1;\n  while (n > 0) {\n    if (n % 10 === 0) {\n      count++;\n    }\n    n /= 10;\n    i++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 15.\n  */\nconst starts_fifteen_ends = (n) => {\n  let count = 0;\n  let i = 1;\n  while (n > 0) {\n    if (n % 10 === 0) {\n      count++;\n    }\n    n /= 10;\n    i++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 16.\n  */\nconst starts_sixteen_ends = (n) => {\n  let count = 0;\n  let i = 1;\n  while (n > 0) {\n    if (n % 10 === 0) {\n      count++;\n    }\n    n /= 10;\n    i++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 17.\n  */\nconst starts_seventeen_ends = (n) => {\n  let count = 0;\n  let i = 1;\n  while (n > 0) {\n    if (n % 10 === 0) {\n      count++;\n    }\n    n /= 10;\n    i++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 18.\n  */\nconst starts_eighteen_ends = (n) => {\n  let count = 0;\n  let i = 1;\n  while (n > 0) {\n    if (n % 10 === 0) {\n      count++;\n    }\n    n /= 10;\n    i++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 19.\n  */\nconst starts_nineteen_ends = (n) => {\n  let count = 0;\n  let i = 1;\n  while (n > 0) {\n    if (n % 10 === 0) {\n      count++;\n    }\n    n /= 10;\n    i++;\n  }\n  return count;\n};\n\n/*\n  Given a positive "}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "gc": "<|endoftext|>/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let binary = \"\";\n  let digit;\n  let i;\n  \n  for(i = 1; i <= N; i++){\n    digit = parseInt(i.toString(2), 2);\n    sum += digit;\n    binary = binary + digit;\n  }\n  \n  return binary;\n};\n\n/*Given a positive integer N, return the number of ways to convert it into binary.\n  \n  Example\n      For N = 1000, the output should be \"1000\".\n      For N = 150, the output should be \"15\".\n      For N = 147, the output should be \"147\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       an integer\n  */\nconst count = (N) => {\n  let count = 0;\n  let i;\n  \n  for(i = 1; i <= N; i++){\n    count += i;\n  }\n  \n  return count;\n};\n\n/*Given a positive integer N, return the number of ways to convert it into binary.\n  \n  Example\n      For N = 1000, the output should be \"1000\".\n      For N = 150, the output should be \"15\".\n      For N = 147, the output should be \"147\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       an integer\n  */\nconst count2 = (N) => {\n  let count = 0;\n  let i;\n  \n  for(i = 1; i <= N; i++){\n    count += Math.pow(2, i);\n  }\n  \n  return count;\n};\n\n/*Given a positive integer N, return the number of ways to convert it into binary.\n  \n  Example\n      For N = 1000, the output should be \"1000\".\n      For N = 150, the output should be \"15\".\n      For N = 147, the output should be \"147\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       an integer\n  */\nconst count3 = (N) => {\n  let count = 0;\n  let i;\n  \n  for(i = 1; i <= N; i++){\n    count += Math.pow(2, i + 1);\n  }\n  \n  return count;\n};\n\n/*Given a positive integer N, return the number of ways to convert it into binary.\n  \n  Example\n      For N = 1000, the output should be \"1000\".\n      For N = 150, the output should be \"15\".\n      For N = 147, the output should be \"147\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       an integer\n  */\nconst count4 = (N) => {\n  let count = 0;\n  let i;\n  \n  for(i = 1; i <= N; i++){\n    count += Math.pow(2, i + 2);\n  }\n  \n  return count;\n};\n\n/*Given a positive integer N, return the number of ways to convert it into binary.\n  \n  Example\n      For N = 1000, the output should be \"1000\".\n      For N = 150, the output should be \"15\".\n      For N = 147, the output should be \"147\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       an integer\n  */\nconst count5 = (N) => {\n  let count = 0;\n  let i;\n  \n  for(i = 1; i <= N; i++){\n    count += Math.pow(2, i + 3);\n  }\n  \n  return count;\n};\n\n/*Given a positive integer N, return the number of ways to convert it into binary.\n  \n  Example\n      For N = 1000, the output should be \"1000\".\n      For N = 150, the output should be \"15\".\n      For N = 147, the output should be \"147\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       an integer\n  */\nconst count6 = (N) => {\n  let count = 0;\n  let i;\n  \n  for(i = 1; i <= N; i++){\n    count += Math.pow(2, i + 4);\n  }\n  \n  return count;\n};\n\n/*Given a positive integer N, return the number of ways to convert it into binary.\n  \n  Example\n      For N = 1000, the output should be \"1000\".\n      For N = 150, the output should be \"15\".\n      For N = 147, the output should be \"147\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       an integer\n  */\nconst count7 = (N) => {\n  let count = 0;\n  let i;\n  \n  for(i = 1; i <= N; i++){\n    count += Math.pow(2, i + 5);\n  }\n  \n  return count;\n};\n\n/*Given a positive integer N, return the number of ways to convert it into binary.\n  \n  Example\n      For N = 1000, the output should be \"1000\".\n      For N = 150, the output should be \"15\".\n      For N = 147, the output should be \"147\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       an integer\n  */\nconst count8 = (N) => {\n  let count = 0;\n  let i;\n  \n  for(i = 1; i <= N; i++){\n    count += Math.pow(2, i + 6);\n  }\n  \n  return count;\n};\n\n/*Given a positive integer N, return the number of ways to convert it into binary.\n  \n  Example\n      For N = 1000, the output should be \"1000\".\n      For N = 150, the output should be \"15\".\n      For N = 147, the output should be \"147\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       an integer\n  */\nconst count9 = (N) => {\n  let count = 0;\n  let i;\n  \n  for(i = 1; i <= N; i++){\n    count += Math.pow(2, i + 7);\n  }\n  \n  return count;\n};\n\n/*Given a positive integer N, return the number of ways to convert it into binary.\n  \n  Example\n      For N = 1000, the output should be \"1000\".\n      For N = 150, the output should be \"15\".\n      For N = 147, the output should be \"147\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       an integer\n  */\nconst count10 = (N) => {\n  let count = 0;\n  let i;\n  \n  for(i = 1; i <= N; i++){\n    count += Math.pow(2, i + 8);\n  }\n  \n  return count;\n};\n\n/*Given a positive integer N, return the number of ways to convert it into binary.\n  \n  Example\n      For N = 1000, the output should be \"1000\".\n      For N = 150, the output should be \"15\".\n      For N = 147, the output should be \"147\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 �"}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "gc": "<|endoftext|>/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let res = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      res += lst[i];\n    }\n  }\n  return res;\n};\n\n/*Given a non-empty list of integers lst. remove the even elements that are at odd indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst remove = (lst) => {\n  let res = lst;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      res.splice(i, 1);\n    }\n  }\n  return res;\n};\n\n/*Given a non-empty list of integers lst. remove the even elements that are at odd indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst removeEven = (lst) => {\n  let res = lst;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      res.splice(i, 1);\n    }\n  }\n  return res;\n};\n\n/*Given a non-empty list of integers lst. remove the odd elements that are at even indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst removeOdd = (lst, i) => {\n  let res = lst;\n  for (let j = i; j < lst.length; j++) {\n    if (lst[j] % 2!== 0) {\n      res.splice(j, 1);\n    }\n  }\n  return res;\n};\n\n/*Given a non-empty list of integers lst. remove the odd elements that are at even indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst removeOddEven = (lst) => {\n  let res = lst;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      res.splice(i, 1);\n    }\n  }\n  return res;\n};\n\n/*Given a non-empty list of integers lst. remove the even elements that are at odd indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst removeEvenOdd = (lst, i) => {\n  let res = lst;\n  for (let j = i; j < lst.length; j++) {\n    if (lst[j] % 2 === 0) {\n      res.splice(j, 1);\n    }\n  }\n  return res;\n};\n\n/*Given a non-empty list of integers lst. remove the odd elements that are at even indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst removeOddEvenOdd = (lst, i) => {\n  let res = lst;\n  for (let j = 0; j < lst.length; j++) {\n    if (lst[j] % 2!== 0) {\n      res.splice(j, 1);\n    }\n  }\n  return res;\n};\n\n/*Given a non-empty list of integers lst. remove the even elements that are at odd indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst removeEvenOddEven = (lst) => {\n  let res = lst;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      res.splice(i, 1);\n    }\n  }\n  return res;\n};\n\n/*Given a non-empty list of integers lst. remove the odd elements that are at even indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst removeOddEvenOddEven = (lst) => {\n  let res = lst;\n  for (let j = 0; j < lst.length; j++) {\n    if (lst[j] % 2!== 0) {\n      res.splice(j, 1);\n    }\n  }\n  return res;\n};\n\n/*Given a non-empty list of integers lst. remove the odd elements that are at odd indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst removeOddEvenOddOddEven = (lst) => {\n  let res = lst;\n  for (let k = 0; k < lst.length; k++) {\n    if (lst[k] % 2!== 0) {\n      res.splice(k, 1);\n    }\n  }\n  return res;\n};\n\n/*Given a non-empty list of integers lst. remove the even elements that are at odd indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst removeEvenOddEvenOddOddEven = (lst) => {\n  let res = lst;\n  for (let l = 0; l < lst.length; l++) {\n    if (lst[l] % 2!== 0) {\n      res.splice(l, 1);\n    }\n  }\n  return res;\n};\n\n/*Given a non-empty list of integers lst. remove the even elements that are at odd indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst removeOddEvenOddEvenOddOddEven = (lst) => {\n  let res = lst;\n  for (let m = 0; m < lst.length; m++) {\n    if (lst[m] % 2!== 0) {\n      res.splice(m, 1);\n    }\n  }\n  return res;\n};\n\n/*Given a non-empty list of integers lst. remove the odd elements that are at odd indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst removeOddEvenOddEvenOddOddOddEven = (lst) => {\n  let res = lst;\n  for (let n = 0; n < lst.length; n++) {\n    if (lst[n] % 2!== 0) {\n      res.splice(n, 1);\n    }\n  }\n  return res;\n};\n\n/*Given a non-empty list of integers lst. remove the even elements that are at odd indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst removeOddEvenOddEvenOddOddOddOddEven = (lst) => {\n  let res = lst;\n  for (let o = 0; o < lst.length; o++) {\n    if (lst[o] % 2!== 0) {\n      res.splice(o, 1);\n    }\n  }\n  return res;\n};\n\n/*Given a non-empty list of integers lst. remove the odd elements that are at odd indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst removeOddEvenOddEvenOddOddOddOddOddOddEven = (lst) => {\n  let res = lst;\n  for (let p = 0; p < lst.length; p++) {\n    if (lst[p] % 2!== 0) {\n      res.splice(p, 1);\n    }\n  }\n  return res;\n};\n\n/*Given a non-empty list of integers lst. remove the even elements that are at odd indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst removeOddEvenOddEvenOddOddOddOddOddOddOddOddOddEven = (lst) => {\n  let res = lst;\n  for (let q = 0; q < lst.length; q++) {\n    if (lst[q] % 2!== 0) {\n      res.splice(q, 1);\n    }\n  }\n  return res;\n};\n\n/*Given a non-empty list of integers lst. remove the odd elements that are at odd indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst removeOddEvenOddEvenOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddO"}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  anti_shuffle('Hi') returns 'Hi'\n  anti_shuffle('hello') returns 'ehllo'\n  anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst anti_shuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "anti_shuffle", "gc": "<|endoftext|>/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  anti_shuffle('Hi') returns 'Hi'\n  anti_shuffle('hello') returns 'ehllo'\n  anti_shuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst anti_shuffle = (s) => {\n  let arr = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let temp = ''\n  let temp2 = ''\n  let temp3 = ''\n  let temp4 = ''\n  let temp5 = ''\n  let temp6 = ''\n  let temp7 = ''\n  let temp8 = ''\n  let temp9 = ''\n  let temp10 = ''\n  let temp11 = ''\n  let temp12 = ''\n  let temp13 = ''\n  let temp14 = ''\n  let temp15 = ''\n  let temp16 = ''\n  let temp17 = ''\n  let temp18 = ''\n  let temp19 = ''\n  let temp20 = ''\n  let temp21 = ''\n  let temp22 = ''\n  let temp23 = ''\n  let temp24 = ''\n  let temp25 = ''\n  let temp26 = ''\n  let temp27 = ''\n  let temp28 = ''\n  let temp29 = ''\n  let temp30 = ''\n  let temp31 = ''\n  let temp32 = ''\n  let temp33 = ''\n  let temp34 = ''\n  let temp35 = ''\n  let temp36 = ''\n  let temp37 = ''\n  let temp38 = ''\n  let temp39 = ''\n  let temp40 = ''\n  let temp41 = ''\n  let temp42 = ''\n  let temp43 = ''\n  let temp44 = ''\n  let temp45 = ''\n  let temp46 = ''\n  let temp47 = ''\n  let temp48 = ''\n  let temp49 = ''\n  let temp50 = ''\n  let temp51 = ''\n  let temp52 = ''\n  let temp53 = ''\n  let temp54 = ''\n  let temp55 = ''\n  let temp56 = ''\n  let temp57 = ''\n  let temp58 = ''\n  let temp59 = ''\n  let temp60 = ''\n  let temp61 = ''\n  let temp62 = ''\n  let temp63 = ''\n  let temp64 = ''\n  let temp65 = ''\n  let temp66 = ''\n  let temp67 = ''\n  let temp68 = ''\n  let temp69 = ''\n  let temp70 = ''\n  let temp71 = ''\n  let temp72 = ''\n  let temp73 = ''\n  let temp74 = ''\n  let temp75 = ''\n  let temp76 = ''\n  let temp77 = ''\n  let temp78 = ''\n  let temp79 = ''\n  let temp80 = ''\n  let temp81 = ''\n  let temp82 = ''\n  let temp83 = ''\n  let temp84 = ''\n  let temp85 = ''\n  let temp86 = ''\n  let temp87 = ''\n  let temp88 = ''\n  let temp89 = ''\n  let temp90 = ''\n  let temp91 = ''\n  let temp92 = ''\n  let temp93 = ''\n  let temp94 = ''\n  let temp95 = ''\n  let temp96 = ''\n  let temp97 = ''\n  let temp98 = ''\n  let temp99 = ''\n  let temp100 = ''\n  let temp101 = ''\n  let temp102 = ''\n  let temp103 = ''\n  let temp104 = ''\n  let temp105 = ''\n  let temp106 = ''\n  let temp107 = ''\n  let temp108 = ''\n  let temp109 = ''\n  let temp110 = ''\n  let temp111 = ''\n  let temp112 = ''\n  let temp113 = ''\n  let temp114 = ''\n  let temp115 = ''\n  let temp116 = ''\n  let temp117 = ''\n  let temp118 = ''\n  let temp119 = ''\n  let temp120 = ''\n  let temp121 = ''\n  let temp122 = ''\n  let temp123 = ''\n  let temp124 = ''\n  let temp125 = ''\n  let temp126 = ''\n  let temp127 = ''\n  let temp128 = ''\n  let temp129 = ''\n  let temp130 = ''\n  let temp131 = ''\n  let temp132 = ''\n  let temp133 = ''\n  let temp134 = ''\n  let temp135 = ''\n  let temp136 = ''\n  let temp137 = ''\n  let temp138 = ''\n  let temp139 = ''\n  let temp140 = ''\n  let temp141 = ''\n  let temp142 = ''\n  let temp143 = ''\n  let temp144 = ''\n  let temp145 = ''\n  let temp146 = ''\n  let temp147 = ''\n  let temp148 = ''\n  let temp149 = ''\n  let temp150 = ''\n  let temp151 = ''\n  let temp152 = ''\n  let temp153 = ''\n  let temp154 = ''\n  let temp155 = ''\n  let temp156 = ''\n  let temp157 = ''\n  let temp158 = ''\n  let temp159 = ''\n  let temp160 = ''\n  let temp161 = ''\n  let temp162 = ''\n  let temp163 = ''\n  let temp164 = ''\n  let temp165 = ''\n  let temp166 = ''\n  let temp167 = ''\n  let temp168 = ''\n  let temp169 = ''\n  let temp170 = ''\n  let temp171 = ''\n  let temp172 = ''\n  let temp173 = ''\n  let temp174 = ''\n  let temp175 = ''\n  let temp176 = ''\n  let temp177 = ''\n  let temp178 = ''\n  let temp179 = ''\n  let temp180 = ''\n  let temp181 = ''\n  let temp182 = ''\n  let temp183 = ''\n  let temp184 = ''\n  let temp185 = ''\n  let temp186 = ''\n  let temp187 = ''\n  let temp188 = ''\n  let temp189 = ''\n  let temp190 = ''\n  let temp191 = ''\n  let temp192 = ''\n  let temp193 = ''\n  let temp194 = ''\n  let temp195 = ''\n  let temp196 = ''\n  let temp197 = ''\n  let temp198 = ''\n  let temp199 = ''\n  let temp200 = ''\n  let temp201 = ''\n  let temp202 = ''\n  let temp203 = ''\n  let temp204 = ''\n  let temp205 = ''\n  let temp206 = ''\n  let temp207 = ''\n  let temp208 = ''\n  let temp209 = ''\n  let temp210 = ''\n  let temp211 = ''\n  let temp212 = ''\n  let temp213 = ''\n  let temp214 = ''\n  let temp215 = ''\n  let temp216 = ''\n  let temp217 = ''\n  let temp218 = ''\n  let temp219 = ''\n  let temp220 = ''\n  let temp221 = ''\n  let temp222 = ''\n  let temp223 = ''\n  let temp224 = ''\n  let temp225 = ''\n  let temp226 = ''\n  let temp227 = ''\n  let temp228 = ''\n  let temp229 = ''\n  let temp230 = ''\n  let temp231 = ''\n  let temp232 = ''\n  let temp233 = ''\n  let temp234 = ''\n  let temp235 = ''\n  let temp236 = ''\n  let temp237 = ''\n  let temp238 = ''\n  let temp239 = ''\n  let temp240 = ''\n  let temp241 = ''\n  let temp242 = ''\n  let temp243 = ''\n  let temp244 = ''\n  let temp245 = ''\n  let temp246 = ''\n  let temp247 = ''\n  let temp248 = ''\n  let temp249 = ''\n  let temp250 = ''\n  let temp251 = ''\n  let temp252 = ''\n  let temp253 = ''\n  let temp254 = ''\n  let temp255 = ''\n  let temp256 = ''\n  let temp257 = ''\n  let temp258 = ''\n  let temp259 = ''\n  let temp260 = ''\n  let temp261 = ''\n  let temp262 = ''\n  let temp263 = ''\n  let temp264 = ''\n  let temp265 = ''\n  let temp266 = ''\n  let temp267 = ''\n  let temp268 = ''\n  let temp269 = ''\n  let temp270 = ''\n  let temp271 = ''\n  let temp272 = ''\n  let temp273"}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  get_row([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  get_row([], 1) == []\n  get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst get_row = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "get_row", "gc": "<|endoftext|>/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  get_row([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  get_row([], 1) == []\n  get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst get_row = (lst, x) => {\n  const row = [];\n  let row_index = 0;\n  let row_num = 0;\n  let row_len = lst.length;\n  while (row_index < row_len) {\n    row.push(lst[row_index]);\n    row_index++;\n  }\n  row.sort((a, b) => {\n    return a[0] - b[0];\n  });\n  row.sort((a, b) => {\n    return b[1] - a[1];\n  });\n  let row_num = 0;\n  let row_len = lst.length;\n  while (row_num < x) {\n    row.push(lst[row_num]);\n    row_num++;\n  }\n  return row;\n};\n\n/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  get_row([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  get_row([], 1) == []\n  get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst get_col = (lst, x) => {\n  const col = [];\n  let col_index = 0;\n  let col_num = 0;\n  let col_len = lst.length;\n  while (col_index < col_len) {\n    col.push(lst[col_index]);\n    col_index++;\n  }\n  col.sort((a, b) => {\n    return a[1] - b[1];\n  });\n  col.sort((a, b) => {\n    return b[0] - a[0];\n  });\n  let col_num = 0;\n  let col_len = lst.length;\n  while (col_num < x) {\n    col.push(lst[col_num]);\n    col_num++;\n  }\n  return col;\n};\n\n/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  get_row([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  get_row([], 1) == []\n  get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst get_rows = (lst, x) => {\n  const rows = [];\n  let row_index = 0;\n  let row_num = 0;\n  let row_len = lst.length;\n  while (row_index < row_len) {\n    rows.push(lst[row_index]);\n    row_index++;\n  }\n  rows.sort((a, b) => {\n    return a[0] - b[0];\n  });\n  rows.sort((a, b) => {\n    return b[1] - a[1];\n  });\n  let row_num = 0;\n  let row_len = lst.length;\n  while (row_num < x) {\n    rows.push(lst[row_num]);\n    row_num++;\n  }\n  return rows;\n};\n\n/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  get_row([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  get_row([], 1) == []\n  get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst get_cols = (lst, x) => {\n  const cols = [];\n  let col_index = 0;\n  let col_num = 0;\n  let col_len = lst.length;\n  while (col_index < col_len) {\n    cols.push(lst[col_index]);\n    col_index++;\n  }\n  cols.sort((a, b) => {\n    return a[1] - b[1];\n  });\n  cols.sort((a, b) => {\n    return b[0] - a[0];\n  });\n  let col_num = 0;\n  let col_len = lst.length;\n  while (col_num < x) {\n    cols.push(lst[col_num]);\n    col_num++;\n  }\n  return cols;\n};\n\n/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  get_row([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  get_row([], 1) == []\n  get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst get_rows = (lst, x) => {\n  const rows = [];\n  let row_index = 0;\n  let row_num = 0;\n  let row_len = lst.length;\n  while (row_index < row_len) {\n    rows.push(lst[row_index]);\n    row_index++;\n  }\n  rows.sort((a, b) => {\n    return a[0] - b[0];\n  });\n  rows.sort((a, b) => {\n    return b[1] - a[1];\n  });\n  let row_num = 0;\n  let row_len = lst.length;\n  while (row_num < x) {\n    rows.push(lst[row_num]);\n    row_num++;\n  }\n  return rows;\n};\n\n/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n"}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sort_array([]) => []\n  * sort_array([5]) => [5]\n  * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sort_array = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sort_array", "gc": "<|endoftext|>/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sort_array([]) => []\n  * sort_array([5]) => [5]\n  * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sort_array = (array) => {\n  const sorted = array.sort((a, b) => a - b);\n  return sorted.map((value, index) => array[index]);\n};\n\n/*\n  Given an array of non-negative integers, return the maximum element in the given array.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * max_element([]) => undefined\n  * max_element([5, 2, 1]) => 5\n  * max_element([5, 2, 1]) => 5\n  * max_element([5, 2, 1]) => 5\n  * max_element([5, 2, 1]) => 5\n  */\nconst max_element = (array) => {\n  const maxValue = array.reduce((acc, val) => Math.max(acc, val), 0);\n  return array[array.length - 1] > maxValue? array[array.length - 1] : maxValue;\n};\n\n/*\n  Given an array of non-negative integers, return the minimum element in the given array.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * min_element([]) => undefined\n  * min_element([5, 2, 1]) => 1\n  * min_element([5, 2, 1]) => 1\n  * min_element([5, 2, 1]) => 1\n  * min_element([5, 2, 1]) => 1\n  */\nconst min_element = (array) => {\n  const minValue = array.reduce((acc, val) => Math.min(acc, val), 0);\n  return array[0] < minValue? array[0] : minValue;\n};\n\n/*\n  Given an array of non-negative integers, return the sum of the given array.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sum([]) => 0\n  * sum([5, 2, 1]) => 5\n  * sum([5, 2, 1]) => 5\n  * sum([5, 2, 1]) => 5\n  * sum([5, 2, 1]) => 5\n  */\nconst sum = (array) => {\n  return array.reduce((acc, val) => acc + val, 0);\n};\n\n/*\n  Given an array of non-negative integers, return the difference between the maximum element in the given array and the minimum element in the given array.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * difference([]) => 0\n  * difference([5, 2, 1]) => 1\n  * difference([5, 2, 1]) => 1\n  * difference([5, 2, 1]) => 1\n  * difference([5, 2, 1]) => 1\n  */\nconst difference = (array) => {\n  const maxValue = max_element(array);\n  const minValue = min_element(array);\n  return maxValue - minValue;\n};\n\n/*\n  Given an array of non-negative integers, return the difference between the sum of the given array and the difference between the maximum element in the given array and the minimum element in the given array.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * difference([]) => 0\n  * difference([5, 2, 1]) => 1\n  * difference([5, 2, 1]) => 1\n  * difference([5, 2, 1]) => 1\n  * difference([5, 2, 1]) => 1\n  */\nconst difference = (array) => {\n  const maxValue = max_element(array);\n  const minValue = min_element(array);\n  return maxValue - minValue - sum(array);\n};\n\n/*\n  Given an array of non-negative integers, return the difference between the sum of the given array and the difference between the maximum element in the given array and the minimum element in the given array.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * difference([]) => 0\n  * difference([5, 2, 1]) => 1\n  * difference([5, 2, 1]) => 1\n  * difference([5, 2, 1]) => 1\n  * difference([5, 2, 1]) => 1\n  */\nconst difference = (array) => {\n  const maxValue = max_element(array);\n  const minValue = min_element(array);\n  return maxValue - minValue - sum(array) - difference(array);\n};\n\n/*\n  Given an array of non-negative integers, return the difference between the sum of the given array and the difference between the maximum element in the given array and the minimum element in the given array.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * difference([]) => 0\n  * difference([5, 2, 1]) => 1\n  * difference([5, 2, 1]) => 1\n  * difference([5, 2, 1]) => 1\n  * difference([5, 2, 1]) => 1\n  */\nconst difference = (array) => {\n  const maxValue = max_element(array);\n  const minValue = min_element(array);\n  return maxValue - minValue - sum(array) - difference(array);\n};\n\n/*\n  Given an array of non-negative integers, return the difference between the sum of the given array and the difference between the maximum element in the given array and the minimum element in the given array.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * difference([]) => 0\n  * difference([5, 2, 1]) => 1\n  * difference([5, 2, 1]) => 1\n  * difference([5, 2, 1]) => 1\n  * difference([5, 2, 1]) => 1\n  */\nconst difference = (array) => {\n  const maxValue = max_element(array);\n  const minValue = min_element(array);\n  return maxValue - minValue - sum(array) - difference(array);\n};\n\n/*\n  Given an array of non-negative integers, return the difference between the sum of the given array and the difference between the maximum element in the given array and the minimum element in the given array.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * difference([]) => 0\n  * difference([5, 2, 1]) => 1\n  * difference([5, 2, 1]) => 1\n  * difference([5, 2, 1]) => 1\n  * difference([5, 2, 1]) => 1\n  */\nconst difference = (array) => {\n  const maxValue = max_element(array);\n  const minValue = min_element(array);\n  return maxValue - minValue - sum(array) - difference(array);\n};\n\n/*\n  Given an array of non-negative integers, return the difference between the sum of the given array and the difference between the maximum element in the given array and the minimum element in the given array.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * difference([]) => 0\n  * difference([5, 2, 1]) => 1\n  * difference([5, 2, 1]) => 1\n  * difference([5, 2, 1]) => 1\n  * difference([5, 2, 1]) => 1\n  */\nconst difference = (array) => {\n  const maxValue = max_element(array);\n  const minValue = min_element(array);\n  return maxValue - minValue - sum(array) - difference(array);\n};\n\n/*\n  Given an array of non-negative integers, return the difference between the sum of the given array and the difference between the maximum element in the given array and the minimum element in the given array.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * difference([]) => 0\n  * difference([5, 2, 1]) => 1\n  * difference([5, 2, 1]) => 1\n  * difference([5, 2, 1]) => 1\n  * difference([5, 2, 1]) => 1\n  */\nconst difference = (array) => {\n  const maxValue = max_element(array);\n  const minValue = min_element(array);\n  return maxValue - minValue - sum(array) - difference(array);\n};\n\n/*\n  Given an array of non-negative integers, return the difference between the sum of the given array and the difference between the maximum element in the given array and the minimum element in the given array.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * difference([]) => 0\n  * difference([5, 2, 1]) => 1\n  * difference([5, 2, 1]) => 1\n  * difference([5, 2, 1]) => 1\n  * difference([5, "}
{"task_id": "JavaScript/89", "prompt": "/*Create a function encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "gc": "<|endoftext|>/*Create a function encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let rotated = '';\n  for (let i = 0; i < s.length; i++) {\n    let char = s[i];\n    rotated += char.charCodeAt(0) * Math.pow(2, (rotated - 'a'.charCodeAt(0)) % 26);\n  }\n  return rotated;\n}\n\n/*Create a function decrypt that takes a string as an argument and\n  returns a string decrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift up by two multiplied to two places.\n  For example:\n  decrypt('lm') returns 'hi'\n  decrypt('ewhjklnop') returns 'asdfghjkl'\n  decrypt('kj') returns 'gf'\n  decrypt('ix') returns 'et'\n  */\nconst decrypt = (s) => {\n  let rotated = '';\n  for (let i = 0; i < s.length; i++) {\n    let char = s[i];\n    rotated += char.charCodeAt(0) * Math.pow(2, (rotated - 'a'.charCodeAt(0)) % 26);\n  }\n  return rotated;\n}\n\n/*Create a function encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'hi'\n  encrypt('asdfghjkl') returns 'asdfghjkl'\n  encrypt('gf') returns 'gf'\n  encrypt('et') returns 'et'\n  */\nconst encrypt = (s) => {\n  let rotated = '';\n  for (let i = 0; i < s.length; i++) {\n    let char = s[i];\n    rotated += char.charCodeAt(0) * Math.pow(2, (rotated - 'a'.charCodeAt(0)) % 26);\n  }\n  return rotated;\n}\n\n/*Create a function decrypt that takes a string as an argument and\n  returns a string decrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift up by two multiplied to two places.\n  For example:\n  decrypt('lm') returns 'hi'\n  decrypt('ewhjklnop') returns 'asdfghjkl'\n  decrypt('kj') returns 'gf'\n  decrypt('ix') returns 'et'\n  */\nconst decrypt = (s) => {\n  let rotated = '';\n  for (let i = 0; i < s.length; i++) {\n    let char = s[i];\n    rotated += char.charCodeAt(0) * Math.pow(2, (rotated - 'a'.charCodeAt(0)) % 26);\n  }\n  return rotated;\n}\n\n/*Create a function encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'hi'\n  encrypt('asdfghjkl') returns 'asdfghjkl'\n  encrypt('gf') returns 'gf'\n  encrypt('et') returns 'et'\n  */\nconst encrypt = (s) => {\n  let rotated = '';\n  for (let i = 0; i < s.length; i++) {\n    let char = s[i];\n    rotated += char.charCodeAt(0) * Math.pow(2, (rotated - 'a'.charCodeAt(0)) % 26);\n  }\n  return rotated;\n}\n\n/*Create a function decrypt that takes a string as an argument and\n  returns a string decrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift up by two multiplied to two places.\n  For example:\n  decrypt('lm') returns 'hi'\n  decrypt('ewhjklnop') returns 'asdfghjkl'\n  decrypt('kj') returns 'gf'\n  decrypt('ix') returns 'et'\n  */\nconst decrypt = (s) => {\n  let rotated = '';\n  for (let i = 0; i < s.length; i++) {\n    let char = s[i];\n    rotated += char.charCodeAt(0) * Math.pow(2, (rotated - 'a'.charCodeAt(0)) % 26);\n  }\n  return rotated;\n}\n\n/*Create a function encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'hi'\n  encrypt('asdfghjkl') returns 'asdfghjkl'\n  encrypt('gf') returns 'gf'\n  encrypt('et') returns 'et'\n  */\nconst encrypt = (s) => {\n  let rotated = '';\n  for (let i = 0; i < s.length; i++) {\n    let char = s[i];\n    rotated += char.charCodeAt(0) * Math.pow(2, (rotated - 'a'.charCodeAt(0)) % 26);\n  }\n  return rotated;\n}\n\n/*Create a function decrypt that takes a string as an argument and\n  returns a string decrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift up by two multiplied to two places.\n  For example:\n  decrypt('lm') returns 'hi'\n  decrypt('ewhjklnop') returns 'asdfghjkl'\n  decrypt('kj') returns 'gf'\n  decrypt('ix') returns 'et'\n  */\nconst decrypt = (s) => {\n  let rotated = '';\n  for (let i = 0; i < s.length; i++) {\n    let char = s[i];\n    rotated += char.charCodeAt(0) * Math.pow(2, (rotated - 'a'.charCodeAt(0)) % 26);\n  }\n  return rotated;\n}\n\n/*Create a function encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'hi'\n  encrypt('asdfghjkl') returns 'asdfghjkl'\n  encrypt('gf') returns 'gf'\n  encrypt('et') returns 'et'\n  */\nconst encrypt = (s) => {\n  let rotated = '';\n  for (let i = 0; i < s.length; i++) {\n    let char = s[i];\n    rotated += char.charCodeAt(0) * Math.pow(2, (rotated - 'a'.charCodeAt(0)) % 26);\n  }\n  return rotated;\n}\n\n/*Create a function decrypt that takes a string as an argument and\n  returns a string decrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift up by two multiplied to two places.\n  For example:\n  decrypt('lm') returns 'hi'\n  decrypt('ewhjklnop') returns 'asdfghjkl'\n  decrypt('kj') returns 'gf'\n  decrypt('ix') returns 'et'\n  */\nconst decrypt = (s) => {\n  let rotated = '';\n  for (let i = 0; i < s.length; i++) {\n    let char = s[i];\n    rotated += char.charCodeAt(0) * Math.pow"}
{"task_id": "JavaScript/90", "prompt": "/*\n  You are given a list of integers.\n  Write a function next_smallest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  next_smallest([1, 2, 3, 4, 5]) == 2\n  next_smallest([5, 1, 4, 3, 2]) == 2\n  next_smallest([]) == null\n  next_smallest([1, 1]) == null\n  */\nconst next_smallest = (lst) => {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "next_smallest", "gc": "<|endoftext|>/*\n  You are given a list of integers.\n  Write a function next_smallest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  next_smallest([1, 2, 3, 4, 5]) == 2\n  next_smallest([5, 1, 4, 3, 2]) == 2\n  next_smallest([]) == null\n  next_smallest([1, 1]) == null\n  */\nconst next_smallest = (lst) => {\n  let smallest = lst[0];\n  let smallest_index = -1;\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < smallest) {\n      smallest = lst[i];\n      smallest_index = i;\n    }\n  }\n  return smallest_index;\n};\n\n/*\n  You are given a list of integers.\n  Write a function next_largest() that returns the 1st largest element of the list.\n  Return null if there is no such element.\n  \n  next_largest([1, 2, 3, 4, 5]) == 3\n  next_largest([5, 1, 4, 3, 2]) == 3\n  next_larst([]) == null\n  next_larst([1, 1]) == null\n  */\nconst next_largest = (lst) => {\n  let largest = lst[0];\n  let largest_index = -1;\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] > largest) {\n      largest = lst[i];\n      largest_index = i;\n    }\n  }\n  return largest_index;\n};\n\n/*\n  You are given a list of integers.\n  Write a function next_random() that returns a random element of the list.\n  Return null if there is no such element.\n  \n  next_random([1, 2, 3, 4, 5]) == 4\n  next_random([5, 1, 4, 3, 2]) == 4\n  next_random([]) == null\n  next_random([1, 1]) == null\n  */\nconst next_random = (lst) => {\n  let randomIndex = Math.floor(Math.random() * lst.length);\n  return lst[randomIndex];\n};\n\n/*\n  You are given a list of integers.\n  Write a function next_even() that returns the even element of the list.\n  Return null if there is no such element.\n  \n  next_even([1, 2, 3, 4, 5]) == 3\n  next_even([5, 1, 4, 3, 2]) == 3\n  next_even([]) == null\n  next_even([1, 1]) == null\n  */\nconst next_even = (lst) => {\n  let evenIndex = Math.floor(lst.length / 2);\n  let even = lst[evenIndex];\n  if (evenIndex % 2 === 0) {\n    return even;\n  } else {\n    return null;\n  }\n};\n\n/*\n  You are given a list of integers.\n  Write a function next_odd() that returns the odd element of the list.\n  Return null if there is no such element.\n  \n  next_odd([1, 2, 3, 4, 5]) == 5\n  next_odd([5, 1, 4, 3, 2]) == 5\n  next_odd([]) == null\n  next_odd([1, 1]) == null\n  */\nconst next_odd = (lst) => {\n  let oddIndex = Math.floor(lst.length / 2);\n  let odd = lst[oddIndex];\n  if (oddIndex % 2!== 0) {\n    return odd;\n  } else {\n    return null;\n  }\n};\n\n/*\n  You are given a list of integers.\n  Write a function next_even() that returns the even element of the list.\n  Return null if there is no such element.\n  \n  next_even([1, 2, 3, 4, 5]) == 3\n  next_even([5, 1, 4, 3, 2]) == 3\n  next_even([]) == null\n  next_even([1, 1]) == null\n  */\nconst next_even = (lst) => {\n  let evenIndex = Math.floor(lst.length / 2);\n  let even = lst[evenIndex];\n  if (evenIndex % 2 === 0) {\n    return even;\n  } else {\n    return null;\n  }\n};\n\n/*\n  You are given a list of integers.\n  Write a function next_odd() that returns the odd element of the list.\n  Return null if there is no such element.\n  \n  next_odd([1, 2, 3, 4, 5]) == 5\n  next_odd([5, 1, 4, 3, 2]) == 5\n  next_odd([]) == null\n  next_odd([1, 1]) == null\n  */\nconst next_odd = (lst) => {\n  let oddIndex = Math.floor(lst.length / 2);\n  let odd = lst[oddIndex];\n  if (oddIndex % 2!== 0) {\n    return odd;\n  } else {\n    return null;\n  }\n};\n\n/*\n  You are given a list of integers.\n  Write a function next_even() that returns the even element of the list.\n  Return null if there is no such element.\n  \n  next_even([1, 2, 3, 4, 5]) == 3\n  next_even([5, 1, 4, 3, 2]) == 3\n  next_even([]) == null\n  next_even([1, 1]) == null\n  */\nconst next_even = (lst) => {\n  let evenIndex = Math.floor(lst.length / 2);\n  let even = lst[evenIndex];\n  if (evenIndex % 2 === 0) {\n    return even;\n  } else {\n    return null;\n  }\n};\n\n/*\n  You are given a list of integers.\n  Write a function next_odd() that returns the odd element of the list.\n  Return null if there is no such element.\n  \n  next_odd([1, 2, 3, 4, 5]) == 5\n  next_odd([5, 1, 4, 3, 2]) == 5\n  next_odd([]) == null\n  next_odd([1, 1]) == null\n  */\nconst next_odd = (lst) => {\n  let oddIndex = Math.floor(lst.length / 2);\n  let odd = lst[oddIndex];\n  if (oddIndex % 2!== 0) {\n    return odd;\n  } else {\n    return null;\n  }\n};\n\n/*\n  You are given a list of integers.\n  Write a function next_even() that returns the even element of the list.\n  Return null if there is no such element.\n  \n  next_even([1, 2, 3, 4, 5]) == 3\n  next_even([5, 1, 4, 3, 2]) == 3\n  next_even([]) == null\n  next_even([1, 1]) == null\n  */\nconst next_even = (lst) => {\n  let evenIndex = Math.floor(lst.length / 2);\n  let even = lst[evenIndex];\n  if (evenIndex % 2 === 0) {\n    return even;\n  } else {\n    return null;\n  }\n};\n\n/*\n  You are given a list of integers.\n  Write a function next_even() that returns the even element of the list.\n  Return null if there is no such element.\n  \n  next_odd([1, 2, 3, 4, 5]) == 5\n  next_odd([5, 1, 4, 3, 2]) == 5\n  next_odd([]) == null\n  next_odd([1, 1]) == null\n  */\nconst next_odd = (lst) => {\n  let oddIndex = Math.floor(lst.length / 2);\n  let odd = lst[oddIndex];\n  if (oddIndex % 2!== 0) {\n    return odd;\n  } else {\n    return null;\n  }\n};\n\n/*\n  You are given a list of integers.\n  Write a function next_even() that returns the even element of the list.\n  Return null if there is no such element.\n  \n  next_odd([1, 2, 3, 4, 5]) == 5\n  next_odd([5, 1, 4, 3, 2]) == 5\n  next_odd([]) == null\n  next_odd([1, 1]) == null\n  */\nconst next_odd = (lst) => {\n  let oddIndex = Math.floor(lst.length / 2);\n  let odd = lst[oddIndex];\n  if (oddIndex % 2!== 0) {\n    return odd;\n  } else {\n    return null;\n  }\n};\n\n/*\n  You are given a list of integers.\n  Write a function next_even() that returns the even element of the list.\n  Return null if there is no such element.\n  \n  next_odd([1, 2, 3, 4, 5]) == 5\n  next_odd([5, 1, 4, 3, 2]) == 5\n  next_odd([]) == null\n  next_odd([1, 1]) == null\n  */\nconst next_odd = (lst) => {\n  let oddIndex = Math.floor(lst.length / 2);\n  let odd = lst[oddIndex];\n  if (oddIndex % 2!== 0) {\n"}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> is_bored(\"Hello world\")\n  0\n  >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst is_bored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "is_bored", "gc": "<|endoftext|>/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> is_bored(\"Hello world\")\n  0\n  >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst is_bored = (S) => {\n  let bored = 0;\n  let words = S.split('.');\n  words.forEach((word) => {\n    if (word === 'I') {\n      bored++;\n    }\n  });\n  return bored;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of angers. A anger is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> is_anger(\"Hello world\")\n  0\n  >>> is_anger(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst is_anger = (S) => {\n  let anger = 0;\n  let words = S.split('.');\n  words.forEach((word) => {\n    if (word === 'I') {\n      anger++;\n    }\n  });\n  return anger;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of disgust. Disgust is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> is_disgust(\"Hello world\")\n  0\n  >>> is_disgust(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst is_disgust = (S) => {\n  let disgust = 0;\n  let words = S.split('.');\n  words.forEach((word) => {\n    if (word === 'I') {\n      disgust++;\n    }\n  });\n  return disgust;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of fear. Fear is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> is_fear(\"Hello world\")\n  0\n  >>> is_fear(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst is_fear = (S) => {\n  let fear = 0;\n  let words = S.split('.');\n  words.forEach((word) => {\n    if (word === 'I') {\n      fear++;\n    }\n  });\n  return fear;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of happiness. Happiness is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> is_happiness(\"Hello world\")\n  0\n  >>> is_happiness(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst is_happiness = (S) => {\n  let happiness = 0;\n  let words = S.split('.');\n  words.forEach((word) => {\n    if (word === 'I') {\n      happiness++;\n    }\n  });\n  return happiness;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of sadness. Sadness is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> is_sadness(\"Hello world\")\n  0\n  >>> is_sadness(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst is_sadness = (S) => {\n  let sadness = 0;\n  let words = S.split('.');\n  words.forEach((word) => {\n    if (word === 'I') {\n      sadness++;\n    }\n  });\n  return sadness;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of surprise. Surprise is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> is_surprise(\"Hello world\")\n  0\n  >>> is_surprise(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst is_surprise = (S) => {\n  let surprise = 0;\n  let words = S.split('.');\n  words.forEach((word) => {\n    if (word === 'I') {\n      surprise++;\n    }\n  });\n  return surprise;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of neutral. Neutral is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> is_neutral(\"Hello world\")\n  0\n  >>> is_neutral(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst is_neutral = (S) => {\n  let neutral = 0;\n  let words = S.split('.');\n  words.forEach((word) => {\n    if (word === 'I') {\n      neutral++;\n    }\n  });\n  return neutral;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of anger. Anger (a word that starts with \"I\") is a sentence that starts\n  with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> is_anger(\"Hello world\")\n  0\n  >>> is_anger(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst is_anger = (S) => {\n  let anger = 0;\n  let words = S.split('.');\n  words.forEach((word) => {\n    if (word === 'I') {\n      anger++;\n    }\n  });\n  return anger;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of disgust. Disgust (a word that starts with \"I\") is a sentence that starts\n  with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> is_disgust(\"Hello world\")\n  0\n  >>> is_disgust(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst is_disgust = (S) => {\n  let disgust = 0;\n  let words = S.split('.');\n  words.forEach((word) => {\n    if (word === 'I') {\n      disgust++;\n    }\n  });\n  return disgust;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of fear. Fear (a word that starts with \"I\") is a sentence that starts\n  with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  "}
{"task_id": "JavaScript/92", "prompt": "/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  any_int(5, 2, 7) ➞ true\n  any_int(3, 2, 2) ➞ false\n  any_int(3, -2, 1) ➞ true\n  any_int(3.6, -2.2, 2) ➞ false\n  */\nconst any_int = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "any_int", "gc": "<|endoftext|>/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  any_int(5, 2, 7) ➞ true\n  any_int(3, 2, 2) ➞ false\n  any_int(3, -2, 1) ➞ true\n  any_int(3.6, -2.2, 2) ➞ false\n  */\nconst any_int = (x, y, z) => {\n  return ((x + y + z) === (x + y + z + Number.EPSILON)) &&\n         ((x + y + z + Number.EPSILON) === (x + y + z + Number.EPSILON + Number.EPSILON)) &&\n         ((x + y + z + Number.EPSILON) === (x + y + z + Number.EPSILON + Number.EPSILON + Number.EPSILON));\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  any_int(5, 2, 7) ➞ true\n  any_int(3, 2, 2) ➞ false\n  any_int(3, -2, 1) ➞ true\n  any_int(3.6, -2.2, 2) ➞ false\n  */\nconst any_float = (x, y, z) => {\n  return ((x + y + z) === (x + y + z + Number.EPSILON)) &&\n         ((x + y + z + Number.EPSILON) === (x + y + z + Number.EPSILON + Number.EPSILON)) &&\n         ((x + y + z + Number.EPSILON) === (x + y + z + Number.EPSILON + Number.EPSILON + Number.EPSILON));\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  any_float(5, 2, 7) ➞ true\n  any_float(3, 2, 2) ➞ false\n  any_float(3, -2, 1) ➞ true\n  any_float(3.6, -2.2, 2) ➞ false\n  */\nconst any_double = (x, y, z) => {\n  return ((x + y + z) === (x + y + z + Number.EPSILON)) &&\n         ((x + y + z + Number.EPSILON) === (x + y + z + Number.EPSILON + Number.EPSILON)) &&\n         ((x + y + z + Number.EPSILON) === (x + y + z + Number.EPSILON + Number.EPSILON + Number.EPSILON));\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  any_double(5, 2, 7) ➞ true\n  any_double(3, -2, 1) ➞ true\n  any_double(3.6, -2.2, 2) ➞ false\n  */\nconst any_string = (x, y, z) => {\n  return ((x + y + z) === (x + y + z + Number.EPSILON)) &&\n         ((x + y + z + Number.EPSILON) === (x + y + z + Number.EPSILON + Number.EPSILON)) &&\n         ((x + y + z + Number.EPSILON) === (x + y + z + Number.EPSILON + Number.EPSILON + Number.EPSILON));\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  any_string(5, 2, 7) ➞ true\n  any_string(3, 2, 2) ➞ false\n  any_string(3, -2, 1) ➞ true\n  any_string(3.6, -2.2, 2) ➞ false\n  */\nconst any_boolean = (x, y, z) => {\n  return ((x + y + z) === (x + y + z + Number.EPSILON)) &&\n         ((x + y + z + Number.EPSILON) === (x + y + z + Number.EPSILON + Number.EPSILON)) &&\n         ((x + y + z + Number.EPSILON) === (x + y + z + Number.EPSILON + Number.EPSILON + Number.EPSILON));\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  any_boolean(5, 2, 7) ➞ true\n  any_boolean(3, -2, 1) ➞ true\n  any_boolean(3.6, -2.2, 2) ➞ false\n  */\nconst any_array = (x, y, z) => {\n  return ((x + y + z) === (x + y + z + Number.EPSILON)) &&\n         ((x + y + z + Number.EPSILON) === (x + y + z + Number.EPSILON + Number.EPSILON)) &&\n         ((x + y + z + Number.EPSILON) === (x + y + z + Number.EPSILON + Number.EPSILON + Number.EPSILON));\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  any_array(5, 2, 7) ➞ true\n  any_array(3, 2, 2) ➞ false\n  any_array(3, -2, 1) ➞ true\n  any_array(3.6, -2.2, 2) ➞ false\n  */\nconst any_object = (x, y, z) => {\n  return ((x + y + z) === (x + y + z + Number.EPSILON)) &&\n         ((x + y + z + Number.EPSILON) === (x + y + z + Number.EPSILON + Number.EPSILON)) &&\n         ((x + y + z + Number.EPSILON) === (x + y + z + Number.EPSILON + Number.EPSILON + Number.EPSILON));\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  any_object(5, 2, 7) ➞ true\n  any_object(3, 2, 2) ➞ false\n  any_object(3, -2, 1) ➞ true\n  any_object(3.6, -2.2, 2) ➞ false\n  */\nconst any_function = (x, y, z) => {\n  return ((x + y + z) === (x + y + z + Number.EPSILON)) &&\n         ((x + y + z + Number.EPSILON) === (x + y + z + Number.EPSILON + Number.EPSILON)) &&\n         ((x + y + z + Number.EPSILON) === (x + y + z + Number.EPSILON + Number.EPSILON + Number.EPSILON));\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  any_function(5, 2, 7) ➞ true\n  any_function(3, 2, 2) ➞ false\n  any_function(3, -2, 1) ➞ true\n  any_function(3.6, -2.2, 2) ➞ false\n  */\nconst any_symbol = (x, y, z) => {\n  return ((x + y + z) === (x + y + z + Number.EPSILON)) &&\n         ((x + y + z + Number.EPSILON) === (x + y + z + Number.EPSILON + Number.EPSILON)) &&\n         ((x + y + z + Number.EPSILON) === (x + y + z + Number.EPSILON + Number.EPSILON + Number.EPSILON));\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  any_symbol(5, 2, 7) ➞ true\n  any_symbol(3, -2, 1) ➞ true\n  any_symbol(3.6, -2.2, 2) ➞ false\n  */\nconst any_number = (x, y, z) => {\n  return ((x + y + z) === (x + y + z + Number.EPSILON)) &&\n         ((x + y + z + Number.EPSILON) === (x + y + z + Number.EPSILON + Number.EPSILON)) &&\n         ((x + y + z + Number.EPSILON) === (x + y + z + Number.EPSILON + Number.EPSILON + Number."}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "gc": "<|endoftext|>/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let encoded = '';\n  let vowels = 'aeiouAEIOU';\n  let vowelsIndex = 0;\n  let vowelsCount = 0;\n  let vowelsIndex2 = 0;\n  let vowelsIndex3 = 0;\n  let vowelsIndex4 = 0;\n  let vowelsIndex5 = 0;\n  let vowelsIndex6 = 0;\n  let vowelsIndex7 = 0;\n  let vowelsIndex8 = 0;\n  let vowelsIndex9 = 0;\n  let vowelsIndex10 = 0;\n  let vowelsIndex11 = 0;\n  let vowelsIndex12 = 0;\n  let vowelsIndex13 = 0;\n  let vowelsIndex14 = 0;\n  let vowelsIndex15 = 0;\n  let vowelsIndex16 = 0;\n  let vowelsIndex17 = 0;\n  let vowelsIndex18 = 0;\n  let vowelsIndex19 = 0;\n  let vowelsIndex20 = 0;\n  let vowelsIndex21 = 0;\n  let vowelsIndex22 = 0;\n  let vowelsIndex23 = 0;\n  let vowelsIndex24 = 0;\n  let vowelsIndex25 = 0;\n  let vowelsIndex26 = 0;\n  let vowelsIndex27 = 0;\n  let vowelsIndex28 = 0;\n  let vowelsIndex29 = 0;\n  let vowelsIndex30 = 0;\n  let vowelsIndex31 = 0;\n  let vowelsIndex32 = 0;\n  let vowelsIndex33 = 0;\n  let vowelsIndex34 = 0;\n  let vowelsIndex35 = 0;\n  let vowelsIndex36 = 0;\n  let vowelsIndex37 = 0;\n  let vowelsIndex38 = 0;\n  let vowelsIndex39 = 0;\n  let vowelsIndex40 = 0;\n  let vowelsIndex41 = 0;\n  let vowelsIndex42 = 0;\n  let vowelsIndex43 = 0;\n  let vowelsIndex44 = 0;\n  let vowelsIndex45 = 0;\n  let vowelsIndex46 = 0;\n  let vowelsIndex47 = 0;\n  let vowelsIndex48 = 0;\n  let vowelsIndex49 = 0;\n  let vowelsIndex50 = 0;\n  let vowelsIndex51 = 0;\n  let vowelsIndex52 = 0;\n  let vowelsIndex53 = 0;\n  let vowelsIndex54 = 0;\n  let vowelsIndex55 = 0;\n  let vowelsIndex56 = 0;\n  let vowelsIndex57 = 0;\n  let vowelsIndex58 = 0;\n  let vowelsIndex59 = 0;\n  let vowelsIndex60 = 0;\n  let vowelsIndex61 = 0;\n  let vowelsIndex62 = 0;\n  let vowelsIndex63 = 0;\n  let vowelsIndex64 = 0;\n  let vowelsIndex65 = 0;\n  let vowelsIndex66 = 0;\n  let vowelsIndex67 = 0;\n  let vowelsIndex68 = 0;\n  let vowelsIndex69 = 0;\n  let vowelsIndex70 = 0;\n  let vowelsIndex71 = 0;\n  let vowelsIndex72 = 0;\n  let vowelsIndex73 = 0;\n  let vowelsIndex74 = 0;\n  let vowelsIndex75 = 0;\n  let vowelsIndex76 = 0;\n  let vowelsIndex77 = 0;\n  let vowelsIndex78 = 0;\n  let vowelsIndex79 = 0;\n  let vowelsIndex80 = 0;\n  let vowelsIndex81 = 0;\n  let vowelsIndex82 = 0;\n  let vowelsIndex83 = 0;\n  let vowelsIndex84 = 0;\n  let vowelsIndex85 = 0;\n  let vowelsIndex86 = 0;\n  let vowelsIndex87 = 0;\n  let vowelsIndex88 = 0;\n  let vowelsIndex89 = 0;\n  let vowelsIndex90 = 0;\n  let vowelsIndex91 = 0;\n  let vowelsIndex92 = 0;\n  let vowelsIndex93 = 0;\n  let vowelsIndex94 = 0;\n  let vowelsIndex95 = 0;\n  let vowelsIndex96 = 0;\n  let vowelsIndex97 = 0;\n  let vowelsIndex98 = 0;\n  let vowelsIndex99 = 0;\n  let vowelsIndex100 = 0;\n  let vowelsIndex101 = 0;\n  let vowelsIndex102 = 0;\n  let vowelsIndex103 = 0;\n  let vowelsIndex104 = 0;\n  let vowelsIndex105 = 0;\n  let vowelsIndex106 = 0;\n  let vowelsIndex107 = 0;\n  let vowelsIndex108 = 0;\n  let vowelsIndex109 = 0;\n  let vowelsIndex110 = 0;\n  let vowelsIndex111 = 0;\n  let vowelsIndex112 = 0;\n  let vowelsIndex113 = 0;\n  let vowelsIndex114 = 0;\n  let vowelsIndex115 = 0;\n  let vowelsIndex116 = 0;\n  let vowelsIndex117 = 0;\n  let vowelsIndex118 = 0;\n  let vowelsIndex119 = 0;\n  let vowelsIndex120 = 0;\n  let vowelsIndex121 = 0;\n  let vowelsIndex122 = 0;\n  let vowelsIndex123 = 0;\n  let vowelsIndex124 = 0;\n  let vowelsIndex125 = 0;\n  let vowelsIndex126 = 0;\n  let vowelsIndex127 = 0;\n  let vowelsIndex128 = 0;\n  let vowelsIndex129 = 0;\n  let vowelsIndex130 = 0;\n  let vowelsIndex131 = 0;\n  let vowelsIndex132 = 0;\n  let vowelsIndex133 = 0;\n  let vowelsIndex134 = 0;\n  let vowelsIndex135 = 0;\n  let vowelsIndex136 = 0;\n  let vowelsIndex137 = 0;\n  let vowelsIndex138 = 0;\n  let vowelsIndex139 = 0;\n  let vowelsIndex140 = 0;\n  let vowelsIndex141 = 0;\n  let vowelsIndex142 = 0;\n  let vowelsIndex143 = 0;\n  let vowelsIndex144 = 0;\n  let vowelsIndex145 = 0;\n  let vowelsIndex146 = 0;\n  let vowelsIndex147 = 0;\n  let vowelsIndex148 = 0;\n  let vowelsIndex149 = 0;\n  let vowelsIndex150 = 0;\n  let vowelsIndex151 = 0;\n  let vowelsIndex152 = 0;\n  let vowelsIndex153 = 0;\n  let vowelsIndex154 = 0;\n  let vowelsIndex155 = 0;\n  let vowelsIndex156 = 0;\n  let vowelsIndex157 = 0;\n  let vowelsIndex158 = 0;\n  let vowelsIndex159 = 0;\n  let vowelsIndex160 = 0;\n  let vowelsIndex161 = 0;\n  let vowelsIndex162 = 0;\n  let vowelsIndex163 = 0;\n  let vowelsIndex164 = 0;\n  let vowelsIndex165 = 0;\n  let vowelsIndex166 = 0;\n  let vowelsIndex167 = 0;\n  let vowelsIndex168 = 0;\n  let vowelsIndex169 = 0;\n  let vowelsIndex170 = 0;\n  let vowelsIndex171 = 0;\n  let vowelsIndex172 = 0;\n  let vowelsIndex173 = 0;\n  let vowelsIndex174 = 0;\n  let vowelsIndex175 = 0;\n  let vowelsIndex176 = 0;\n  let vowelsIndex177 = 0;\n  let vowelsIndex178 = 0;\n  let vowelsIndex179 = 0;\n  let vowelsIndex180 = 0;\n  let vowelsIndex181 = 0;\n  let vowelsIndex182 = 0;\n  let vowelsIndex183 = 0;\n  let vowelsIndex184 = 0;\n  let vowelsIndex185 = 0;\n  let vowelsIndex186 = 0;\n  let vowelsIndex187 = 0;\n  let vowelsIndex188 = 0;\n  let vowelsIndex189 = 0;\n  let vowelsIndex190 = 0;\n  let vowelsIndex191 = 0;\n  let vowelsIndex192 = 0;\n  let vowelsIndex193 = 0;\n  let vowelsIndex194 = 0;\n  let vowelsIndex195 = 0;\n  let vowelsIndex196 = 0;\n  let vowelsIndex197 = 0;\n  let vowelsIndex198 = 0;\n  let vowelsIndex199 = 0;\n  let vowelsIndex200 = 0;\n  let vowelsIndex201 = 0;\n  let vowelsIndex202 = 0;\n  let vowelsIndex203 = 0;\n"}
{"task_id": "JavaScript/94", "prompt": "/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "gc": "<|endoftext|>/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let max = 0;\n  let sum = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = [];\n  let B = [];\n  let C = [];\n  let D = [];\n  let E = [];\n  let F = [];\n  let G = [];\n  let H = [];\n  let I = [];\n  let J = [];\n  let K = [];\n  let L = [];\n  let M = [];\n  let N = [];\n  let O = [];\n  let P = [];\n  let Q = [];\n  let R = [];\n  let S = [];\n  let T = [];\n  let U = [];\n  let V = [];\n  let W = [];\n  let X = [];\n  let Y = [];\n  let Z = [];\n  let a = [];\n  let b = [];\n  let c = [];\n  let d = [];\n  let e = [];\n  let f = [];\n  let g = [];\n  let h = [];\n  let i = [];\n  let j = [];\n  let k = [];\n  let l = [];\n  let m = [];\n  let n = [];\n  let o = [];\n  let p = [];\n  let q = [];\n  let r = [];\n  let s = [];\n  let t = [];\n  let u = [];\n  let v = [];\n  let w = [];\n  let x = [];\n  let y = [];\n  let z = [];\n  let A = [];\n  let B = [];\n  let C = [];\n  let D = [];\n  let E = [];\n  let F = [];\n  let G = [];\n  let H = [];\n  let I = [];\n  let J = [];\n  let K = [];\n  let L = [];\n  let M = [];\n  let N = [];\n  let O = [];\n  let P = [];\n  let Q = [];\n  let R = [];\n  let S = [];\n  let T = [];\n  let U = [];\n  let V = [];\n  let W = [];\n  let X = [];\n  let Y = [];\n  let Z = [];\n  let a = [];\n  let b = [];\n  let c = [];\n  let d = [];\n  let e = [];\n  let f = [];\n  let g = [];\n  let h = [];\n  let i = [];\n  let j = [];\n  let k = [];\n  let l = [];\n  let m = [];\n  let n = [];\n  let o = [];\n  let p = [];\n  let q = [];\n  let r = [];\n  let s = [];\n  let t = [];\n  let u = [];\n  let v = [];\n  let w = [];\n  let x = [];\n  let y = [];\n  let z = [];\n  let A = [];\n  let B = [];\n  let C = [];\n  let D = [];\n  let E = [];\n  let F = [];\n  let G = [];\n  let H = [];\n  let I = [];\n  let J = [];\n  let K = [];\n  let L = [];\n  let M = [];\n  let N = [];\n  let O = [];\n  let P = [];\n  let Q = [];\n  let R = [];\n  let S = [];\n  let T = [];\n  let U = [];\n  let V = [];\n  let W = [];\n  let X = [];\n  let Y = [];\n  let Z = [];\n  let a = [];\n  let b = [];\n  let c = [];\n  let d = [];\n  let e = [];\n  let f = [];\n  let g = [];\n  let h = [];\n  let i = [];\n  let j = [];\n  let k = [];\n  let l = [];\n  let m = [];\n  let n = [];\n  let o = [];\n  let p = [];\n  let q = [];\n  let r = [];\n  let s = [];\n  let t = [];\n  let u = [];\n  let v = [];\n  let w = [];\n  let x = [];\n  let y = [];\n  let z = [];\n  let A = [];\n  let B = [];\n  let C = [];\n  let D = [];\n  let E = [];\n  let F = [];\n  let G = [];\n  let H = [];\n  let I = [];\n  let J = [];\n  let K = [];\n  let L = [];\n  let M = [];\n  let N = [];\n  let O = [];\n  let P = [];\n  let Q = [];\n  let R = [];\n  let S = [];\n  let T = [];\n  let U = [];\n  let V = [];\n  let W = [];\n  let X = [];\n  let Y = [];\n  let Z = [];\n  let a = [];\n  let b = [];\n  let c = [];\n  let d = [];\n  let e = [];\n  let f = [];\n  let g = [];\n  let h = [];\n  let i = [];\n  let j = [];\n  let k = [];\n  let l = [];\n  let m = [];\n  let n = [];\n  let o = [];\n  let p = [];\n  let q = [];\n  let r = [];\n  let s = [];\n  let t = [];\n  let u = [];\n  let v = [];\n  let w = [];\n  let x = [];\n  let y = [];\n  let z = [];\n  let A = [];\n  let B = [];\n  let C = [];\n  let D = [];\n  let E = [];\n  let F = [];\n  let G = [];\n  let H = [];\n  let I = [];\n  let J = [];\n  let K = [];\n  let L = [];\n  let M = [];\n  let N = [];\n  let O = [];\n  let P = [];\n  let Q = [];\n  let R = [];\n  let S = [];\n  let T = [];\n  let U = [];\n  let V = [];\n  let W = [];\n  let X = [];\n  let Y = [];\n  let Z = [];\n  let a = [];\n  let b = [];\n  let c = [];\n  let d = [];\n  let e = [];\n  let f = [];\n  let g = [];\n  let h = [];\n  let i = [];\n  let j = [];\n  let k = [];\n  let l = [];\n  let m = [];\n  let n = [];\n  let o = [];\n  let p = [];\n  let q = [];\n  let r = [];\n  let s = [];\n  let t = [];\n  let u = [];\n  let v = [];\n  let w = [];\n  let x = [];\n  let y = [];\n  let z = [];\n  let A = [];\n  let B = [];\n  let C = [];\n  let D = [];\n  let E = [];\n  let F = [];\n  let G = [];\n  let H = [];\n  let I = [];\n  let J = [];\n  let K = [];\n  let L = [];\n  let M = [];\n  let N = [];\n  let O = [];\n  let P = [];\n  let Q = [];\n  let R = [];\n  let S = [];\n  let T = [];\n  let U = [];\n  let V = [];\n  let W = [];\n  let X = [];\n  let Y = [];\n  let Z = [];\n  let a = [];\n  let b = [];\n  let c = [];\n  let d = [];\n  let e = [];\n  let f = [];\n  let g = [];\n  let h = [];\n  let i = [];\n  let j = [];\n  let k = [];\n  let l = [];\n  let m = [];\n  let n = [];\n  let o = [];\n  let p = [];\n  let q = [];\n  let r = [];\n  let s = [];\n  let t = [];\n  let u = [];\n  let v = [];\n  let w = [];\n  let x = [];\n  let y = [];\n  let z = [];\n  let A = [];\n  let B = [];\n  let C = [];\n  let D = [];\n  let E = [];\n  let F = [];\n  let G = [];\n  let H = [];\n  let I = [];\n  let J = [];\n  let "}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst check_dict_case = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "check_dict_case", "gc": "<|endoftext|>/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst check_dict_case = (dict) => {\n  for (let key in dict) {\n    if (typeof dict[key] ==='string' && dict[key].toLowerCase() === 'true' || dict[key].toLowerCase() === 'false') {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  Given a dictionary, return true if all keys are numbers in lower \n  case or all keys are numbers in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst check_dict_case = (dict) => {\n  for (let key in dict) {\n    if (typeof dict[key] === 'number' && dict[key].toLowerCase() === 'true' || dict[key].toLowerCase() === 'false') {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst check_dict_case = (dict) => {\n  for (let key in dict) {\n    if (typeof dict[key] ==='string' && dict[key].toLowerCase() === 'true' || dict[key].toLowerCase() === 'false') {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  Given a dictionary, return true if all keys are numbers in lower \n  case or all keys are numbers in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst check_dict_case = (dict) => {\n  for (let key in dict) {\n    if (typeof dict[key] === 'number' && dict[key].toLowerCase() === 'true' || dict[key].toLowerCase() === 'false') {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst check_dict_case = (dict) => {\n  for (let key in dict) {\n    if (typeof dict[key] ==='string' && dict[key].toLowerCase() === 'true' || dict[key].toLowerCase() === 'false') {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  Given a dictionary, return true if all keys are numbers in lower \n  case or all keys are numbers in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst check_dict_case = (dict) => {\n  for (let key in dict) {\n    if (typeof dict[key] === 'number' && dict[key].toLowerCase() === 'true' || dict[key].toLowerCase() === 'false') {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst check_dict_case = (dict) => {\n  for (let key in dict) {\n    if (typeof dict[key] ==='string' && dict[key].toLowerCase() === 'true' || dict[key].toLowerCase() === 'false') {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  Given a dictionary, return true if all keys are numbers in lower \n  case or all keys are numbers in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \""}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  count_up_to(5) => [2,3]\n  count_up_to(11) => [2,3,5,7]\n  count_up_to(0) => []\n  count_up_to(20) => [2,3,5,7,11,13,17,19]\n  count_up_to(1) => []\n  count_up_to(18) => [2,3,5,7,11,13,17]\n  */\nconst count_up_to = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "count_up_to", "gc": "<|endoftext|>/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  count_up_to(5) => [2,3]\n  count_up_to(11) => [2,3,5,7]\n  count_up_to(0) => []\n  count_up_to(20) => [2,3,5,7,11,13,17,19]\n  count_up_to(1) => []\n  count_up_to(18) => [2,3,5,7,11,13,17]\n  */\nconst count_up_to = (n) => {\n  const primes = [2, 3]\n  let i = 2\n  let prime_count = 0\n  while (primes.length < n) {\n    if (primes.includes(i)) {\n      prime_count++\n    }\n    primes.push(prime_count)\n    i++\n  }\n  return primes\n}\n\n/*Implement a function that takes an integer and returns the largest number that is a multiple of n.\n  for example:\n  is_prime(2) => true\n  is_prime(3) => false\n  is_prime(4) => false\n  is_prime(5) => false\n  is_prime(6) => false\n  is_prime(7) => false\n  is_prime(8) => false\n  is_prime(9) => false\n  is_prime(10) => false\n  is_prime(11) => false\n  is_prime(12) => false\n  is_prime(13) => false\n  is_prime(14) => false\n  is_prime(15) => false\n  is_prime(16) => false\n  is_prime(17) => false\n  is_prime(18) => false\n  is_prime(19) => false\n  is_prime(20) => false\n  is_prime(21) => false\n  is_prime(22) => false\n  is_prime(23) => false\n  is_prime(24) => false\n  is_prime(25) => false\n  is_prime(26) => false\n  is_prime(27) => false\n  is_prime(28) => false\n  is_prime(29) => false\n  is_prime(3) => false\n  is_prime(30) => false\n  is_prime(31) => false\n  is_prime(32) => false\n  is_prime(33) => false\n  is_prime(34) => false\n  is_prime(35) => false\n  is_prime(36) => false\n  is_prime(37) => false\n  is_prime(38) => false\n  is_prime(39) => false\n  is_prime(4) => false\n  is_prime(40) => false\n  is_prime(41) => false\n  is_prime(42) => false\n  is_prime(43) => false\n  is_prime(44) => false\n  is_prime(45) => false\n  is_prime(46) => false\n  is_prime(47) => false\n  is_prime(48) => false\n  is_prime(49) => false\n  is_prime(50) => false\n  is_prime(51) => false\n  is_prime(52) => false\n  is_prime(53) => false\n  is_prime(54) => false\n  is_prime(55) => false\n  is_prime(56) => false\n  is_prime(57) => false\n  is_prime(58) => false\n  is_prime(59) => false\n  is_prime(60) => false\n  is_prime(61) => false\n  is_prime(62) => false\n  is_prime(63) => false\n  is_prime(64) => false\n  is_prime(65) => false\n  is_prime(66) => false\n  is_prime(67) => false\n  is_prime(68) => false\n  is_prime(69) => false\n  is_prime(70) => false\n  is_prime(71) => false\n  is_prime(72) => false\n  is_prime(73) => false\n  is_prime(74) => false\n  is_prime(75) => false\n  is_prime(76) => false\n  is_prime(77) => false\n  is_prime(78) => false\n  is_prime(79) => false\n  is_prime(80) => false\n  is_prime(81) => false\n  is_prime(82) => false\n  is_prime(83) => false\n  is_prime(84) => false\n  is_prime(85) => false\n  is_prime(86) => false\n  is_prime(87) => false\n  is_prime(88) => false\n  is_prime(89) => false\n  is_prime(90) => false\n  is_prime(91) => false\n  is_prime(92) => false\n  is_prime(93) => false\n  is_prime(94) => false\n  is_prime(95) => false\n  is_prime(96) => false\n  is_prime(97) => false\n  is_prime(98) => false\n  is_prime(99) => false\n  is_prime(100) => false\n  is_prime(101) => false\n  is_prime(102) => false\n  is_prime(103) => false\n  is_prime(104) => false\n  is_prime(105) => false\n  is_prime(106) => false\n  is_prime(107) => false\n  is_prime(108) => false\n  is_prime(109) => false\n  is_prime(110) => false\n  is_prime(111) => false\n  is_prime(112) => false\n  is_prime(113) => false\n  is_prime(114) => false\n  is_prime(115) => false\n  is_prime(116) => false\n  is_prime(117) => false\n  is_prime(118) => false\n  is_prime(119) => false\n  is_prime(120) => false\n  is_prime(121) => false\n  is_prime(122) => false\n  is_prime(123) => false\n  is_prime(124) => false\n  is_prime(125) => false\n  is_prime(126) => false\n  is_prime(127) => false\n  is_prime(128) => false\n  is_prime(129) => false\n  is_prime(130) => false\n  is_prime(131) => false\n  is_prime(132) => false\n  is_prime(133) => false\n  is_prime(134) => false\n  is_prime(135) => false\n  is_prime(136) => false\n  is_prime(137) => false\n  is_prime(138) => false\n  is_prime(139) => false\n  is_prime(140) => false\n  is_prime(141) => false\n  is_prime(142) => false\n  is_prime(143) => false\n  is_prime(144) => false\n  is_prime(145) => false\n  is_prime(146) => false\n  is_prime(147) => false\n  is_prime(148) => false\n  is_prime(149) => false\n  is_prime(150) => false\n  is_prime(151) => false\n  is_prime(152) => false\n  is_prime(153) => false\n  is_prime(154) => false\n  is_prime(155) => false\n  is_prime(156) => false\n  is_prime(157) => false\n  is_prime(158) => false\n  is_prime(159) => false\n  is_prime(160) => false\n  is_prime(161) => false\n  is_prime(162) => false\n  is_prime(163) => false\n  is_prime(164) => false\n  is_prime(165) => false\n  is_prime(166"}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "gc": "<|endoftext|>/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  let product = 1;\n  while (b > 0) {\n    product = product * b;\n    b = a % b;\n    a = Math.floor(a / b);\n  }\n  return product;\n};\n\n/*Complete the function that takes two integers and returns \n  the sum of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  sum(148, 412) should return 148.\n  sum(19, 28) should return 280.\n  sum(2020, 1851) should return 1851.\n  sum(14,-15) should return 14.\n  */\nconst sum = (a, b) => {\n  let sum = 0;\n  while (b > 0) {\n    sum += b;\n    b = a % b;\n    a = Math.floor(a / b);\n  }\n  return sum;\n};\n\n/*Complete the function that takes two integers and returns \n  the difference between their unit digits.\n  Assume the input is always valid.\n  Examples:\n  difference(148, 412) should return -14.\n  difference(19, 28) should return 28.\n  difference(2020, 1851) should return 1851.\n  difference(14,-15) should return 14.\n  */\nconst difference = (a, b) => {\n  let difference = 0;\n  while (b > 0) {\n    difference = difference + b;\n    b = a % b;\n    a = Math.floor(a / b);\n  }\n  return difference;\n};\n\n/*Complete the function that takes two integers and returns \n  the absolute value of the difference between their unit digits.\n  Assume the input is always valid.\n  Examples:\n  absolute(148, 412) should return 148.\n  absolute(19, 28) should return 28.\n  absolute(2020, 1851) should return 1851.\n  absolute(14,-15) should return 14.\n  */\nconst absolute = (a, b) => {\n  let absolute = 0;\n  while (b > 0) {\n    absolute = absolute + b;\n    b = a % b;\n    a = Math.floor(a / b);\n  }\n  return absolute;\n};\n\n/*Complete the function that takes two integers and returns \n  the square root of the difference between their unit digits.\n  Assume the input is always valid.\n  Examples:\n  sqrt(148, 412) should return 1.4142135623730951.\n  sqrt(19, 28) should return 1.4142135623730951.\n  sqrt(2020, 1851) should return 1.4142135623730951.\n  sqrt(14,-15) should return 1.4142135623730951.\n  */\nconst sqrt = (a, b) => {\n  let sqrt = 0;\n  while (b > 0) {\n    sqrt = sqrt + b;\n    b = a % b;\n    a = Math.floor(a / b);\n  }\n  return sqrt;\n};\n\n/*Complete the function that takes two integers and returns \n  the inverse of the square root of the difference between their unit digits.\n  Assume the input is always valid.\n  Examples:\n  inverse(148, 412) should return 1.4142135623730951.\n  inverse(19, 28) should return 1.4142135623730951.\n  inverse(2020, 1851) should return 1.4142135623730951.\n  inverse(14,-15) should return 1.4142135623730951.\n  */\nconst inverse = (a, b) => {\n  let inverse = 0;\n  while (b > 0) {\n    inverse = inverse + b;\n    b = a % b;\n    a = Math.floor(a / b);\n  }\n  return inverse;\n};\n\n/*Complete the function that takes two integers and returns \n  the inverse of the square root of the difference between their unit digits.\n  Assume the input is always valid.\n  Examples:\n  inverse(148, 412) should return 1.4142135623730951.\n  inverse(19, 28) should return 1.4142135623730951.\n  inverse(2020, 1851) should return 1.4142135623730951.\n  inverse(14,-15) should return 1.4142135623730951.\n  */\nconst inverseSquareRoot = (a, b) => {\n  let inverse = 0;\n  while (b > 0) {\n    inverse = inverse + b;\n    b = a % b;\n    a = Math.floor(a / b);\n  }\n  return inverse * inverse;\n};\n\n/*Complete the function that takes two integers and returns \n  the square root of the difference between their unit digits.\n  Assume the input is always valid.\n  Examples:\n  inverseSquareRoot(148, 412) should return 1.4142135623730951.\n  inverseSquareRoot(19, 28) should return 1.4142135623730951.\n  inverseSquareRoot(2020, 1851) should return 1.4142135623730951.\n  inverseSquareRoot(14,-15) should return 1.4142135623730951.\n  */\nconst inverseSquareRootOfDifference = (a, b) => {\n  let inverse = 0;\n  while (b > 0) {\n    inverse = inverse + b;\n    b = a % b;\n    a = Math.floor(a / b);\n  }\n  return inverse * inverse;\n};\n\n/*Complete the function that takes two integers and returns \n  the square root of the difference between their unit digits.\n  Assume the input is always valid.\n  Examples:\n  inverseSquareRootOfDifference(148, 412) should return 1.4142135623730951.\n  inverseSquareRootOfDifference(19, 28) should return 1.4142135623730951.\n  inverseSquareRootOfDifference(2020, 1851) should return 1.4142135623730951.\n  inverseSquareRootOfDifference(14,-15) should return 1.4142135623730951.\n  */\nconst inverseSquareRootOfDifferenceOfDifference = (a, b) => {\n  let inverse = 0;\n  while (b > 0) {\n    inverse = inverse + b;\n    b = a % b;\n    a = Math.floor(a / b);\n  }\n  return inverse * inverse;\n};\n\n/*Complete the function that takes two integers and returns \n  the square root of the difference between their unit digits.\n  Assume the input is always valid.\n  Examples:\n  inverseSquareRootOfDifferenceOfDifference(148, 412) should return 1.4142135623730951.\n  inverseSquareRootOfDifferenceOfDifference(19, 28) should return 1.4142135623730951.\n  inverseSquareRootOfDifferenceOfDifference(2020, 1851) should return 1.4142135623730951.\n  inverseSquareRootOfDifferenceOfDifference(14,-15) should return 1.4142135623730951.\n  */\nconst inverseSquareRootOfDifferenceOfDifferenceOfDifference = (a, b) => {\n  let inverse = 0;\n  while (b > 0) {\n    inverse = inverse + b;\n    b = a % b;\n    a = Math.floor(a / b);\n  }\n  return inverse * inverse;\n};\n\n/*Complete the function that takes two integers and returns \n  the square root of the difference between their unit digits.\n  Assume the input is always valid.\n  Examples:\n  inverseSquareRootOfDifferenceOfDifferenceOfDifference(148, 412) should return 1.4142135623730951.\n  inverseSquareRootOfDifferenceOfDifferenceOfDifference(19, 28) should return 1.4142135623730951.\n  inverseSquareRootOfDifferenceOfDifferenceOfDifference(2020, 1851) should return 1.4142135623730951.\n  inverseSquareRootOfDifferenceOfDifferenceOf"}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  count_upper('aBCdEf') returns 1\n  count_upper('abcdefg') returns 0\n  count_upper('dBBE') returns 0\n  */\nconst count_upper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "count_upper", "gc": "<|endoftext|>/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  count_upper('aBCdEf') returns 1\n  count_upper('abcdefg') returns 0\n  count_upper('dBBE') returns 0\n  */\nconst count_upper = (s) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = s.length;\n  \n  for(let i = 0; i < l; i++) {\n    if(s[i].toUpperCase() === s[i]) {\n      count++;\n    }\n  }\n  \n  for(let j = 0; j < l; j++) {\n    if(s[j].toUpperCase() === s[j]) {\n      count++;\n    }\n  }\n  \n  for(let k = 0; k < l; k++) {\n    if(s[k].toUpperCase() === s[k]) {\n      count++;\n    }\n  }\n  \n  return count;\n};\n\n/*\n  Given a string s, count the number of lowercase vowels in even indices.\n  \n  For example:\n  count_lower('aBCdEf') returns 1\n  count_lower('abcdefg') returns 0\n  count_lower('dBBE') returns 0\n  */\nconst count_lower = (s) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = s.length;\n  \n  for(let i = 0; i < l; i++) {\n    if(s[i].toLowerCase() === s[i]) {\n      count++;\n    }\n  }\n  \n  for(let j = 0; j < l; j++) {\n    if(s[j].toLowerCase() === s[j]) {\n      count++;\n    }\n  }\n  \n  for(let k = 0; k < l; k++) {\n    if(s[k].toLowerCase() === s[k]) {\n      count++;\n    }\n  }\n  \n  return count;\n};\n\n/*\n  Given a string s, count the number of vowels in even indices.\n  \n  For example:\n  count_vowel('aBCdEf') returns 1\n  count_vowel('abcdefg') returns 0\n  count_vowel('dBBE') returns 0\n  */\nconst count_vowel = (s) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = s.length;\n  \n  for(let i = 0; i < l; i++) {\n    if(s[i].toUpperCase() === s[i]) {\n      count++;\n    }\n  }\n  \n  for(let j = 0; j < l; j++) {\n    if(s[j].toUpperCase() === s[j]) {\n      count++;\n    }\n  }\n  \n  for(let k = 0; k < l; k++) {\n    if(s[k].toUpperCase() === s[k]) {\n      count++;\n    }\n  }\n  \n  return count;\n};\n\n/*\n  Given a string s, count the number of consonants in even indices.\n  \n  For example:\n  count_consonant('aBCdEf') returns 1\n  count_consonant('abcdefg') returns 0\n  count_consonant('dBBE') returns 0\n  */\nconst count_consonant = (s) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = s.length;\n  \n  for(let i = 0; i < l; i++) {\n    if(s[i].toUpperCase() === s[i]) {\n      count++;\n    }\n  }\n  \n  for(let j = 0; j < l; j++) {\n    if(s[j].toUpperCase() === s[j]) {\n      count++;\n    }\n  }\n  \n  for(let k = 0; k < l; k++) {\n    if(s[k].toUpperCase() === s[k]) {\n      count++;\n    }\n  }\n  \n  return count;\n};\n\n/*\n  Given a string s, count the number of vowels in odd indices.\n  \n  For example:\n  count_vowel_odd('aBCdEf') returns 1\n  count_vowel_odd('abcdefg') returns 0\n  count_vowel_odd('dBBE') returns 0\n  */\nconst count_vowel_odd = (s) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = s.length;\n  \n  for(let i = 0; i < l; i++) {\n    if(s[i].toUpperCase() === s[i]) {\n      count++;\n    }\n  }\n  \n  for(let j = 0; j < l; j++) {\n    if(s[j].toUpperCase() === s[j]) {\n      count++;\n    }\n  }\n  \n  for(let k = 0; k < l; k++) {\n    if(s[k].toUpperCase() === s[k]) {\n      count++;\n    }\n  }\n  \n  return count;\n};\n\n/*\n  Given a string s, count the number of consonants in odd indices.\n  \n  For example:\n  count_consonant_odd('aBCdEf') returns 1\n  count_consonant_odd('abcdefg') returns 0\n  count_consonant_odd('dBBE') returns 0\n  */\nconst count_consonant_odd = (s) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = s.length;\n  \n  for(let i = 0; i < l; i++) {\n    if(s[i].toUpperCase() === s[i]) {\n      count++;\n    }\n  }\n  \n  for(let j = 0; j < l; j++) {\n    if(s[j].toUpperCase() === s[j]) {\n      count++;\n    }\n  }\n  \n  for(let k = 0; k < l; k++) {\n    if(s[k].toUpperCase() === s[k]) {\n      count++;\n    }\n  }\n  \n  return count;\n};\n\n/*\n  Given a string s, count the number of uppercase vowels in odd indices.\n  \n  For example:\n  count_upper('aBCdEf') returns 1\n  count_upper('abcdefg') returns 0\n  count_upper('dBBE') returns 0\n  */\nconst count_upper_odd = (s) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = s.length;\n  \n  for(let i = 0; i < l; i++) {\n    if(s[i].toUpperCase() === s[i]) {\n      count++;\n    }\n  }\n  \n  for(let j = 0; j < l; j++) {\n    if(s[j].toUpperCase() === s[j]) {\n      count++;\n    }\n  }\n  \n  for(let k = 0; k < l; k++) {\n    if(s[k].toUpperCase() === s[k]) {\n      count++;\n    }\n  }\n  \n  return count;\n};\n\n/*\n  Given a string s, count the number of lowercase vowels in odd indices.\n  \n  For example:\n  count_lower('aBCdEf') returns 1\n  count_lower('abcdefg') returns 0\n  count_lower('dBBE') returns 0\n  */\nconst count_lower_odd = (s) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = s.length;\n  \n  for(let i = 0; i < l; i++) {\n    if(s[i].toUpperCase() === s[i]) {\n      count++;\n    }\n  }\n  \n  for(let j = 0; j < l; j++) {\n    if(s[j].toUpperCase() === s[j]) {\n      count++;\n    }\n  }\n  \n  for(let k = 0; k < l; k++) {\n    if(s[k].toUpperCase() === s[k]) {\n      count++;\n    }\n  }\n  \n  return count;\n};\n\n/*\n  Given a string s, count the number of vowels in even indices.\n  \n  For example:\n  count_vowel_even('aBCdEf') returns 1\n  count_vowel_even('abcdefg') returns 0\n  count_vowel_even('dBBE') returns 0\n  */\nconst count_vowel_even = (s) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = s.length;\n  \n  for(let i = 0; i < l; i++) {\n    if(s[i].toUpperCase() === s[i]) {\n      count++;\n    }\n  }\n  \n  for(let j = 0; j < l; j++) {\n    if(s[j].toUpperCase() === s[j]) {\n      count++;\n    }\n  }\n  \n  for(let k = 0; k < l; k++) {\n    if(s[k].toUpperCase() === s[k]) {\n      count++;\n    }\n  }\n  "}
{"task_id": "JavaScript/99", "prompt": "/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closest_integer(\"10\")\n  10\n  >>> closest_integer(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closest_integer(\"14.5\") should\n  return 15 and closest_integer(\"-14.5\") should return -15.\n  */\nconst closest_integer = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closest_integer", "gc": "<|endoftext|>/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closest_integer(\"10\")\n  10\n  >>> closest_integer(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closest_integer(\"14.5\") should\n  return 15 and closest_integer(\"-14.5\") should return -15.\n  */\nconst closest_integer = (value) => {\n  const [integer, fraction] = value.split(\".\");\n  const [integer1, integer2] = integer.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer2, integer1] = integer2.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer2, integer1] = integer2.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer2, integer1] = integer2.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer2, integer1] = integer2.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer2, integer1] = integer2.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer2, integer1] = integer2.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer2, integer1] = integer2.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer2, integer1] = integer2.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer2, integer1] = integer2.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer2, integer1] = integer2.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer2, integer1] = integer2.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer2, integer1] = integer2.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer2, integer1] = integer2.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer2, integer1] = integer2.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer2, integer1] = integer2.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer2, integer1] = integer2.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer2, integer1] = integer2.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer2, integer1] = integer2.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer2, integer1] = integer2.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer2, integer1] = integer2.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer2, integer1] = integer2.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer2, integer1] = integer2.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer2, integer1] = integer2.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer2, integer1] = integer2.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer2, integer1] = integer2.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer2, integer1] = integer2.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer2, integer1] = integer2.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer2, integer1] = integer2.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer2, integer1] = integer2.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer2, integer1] = integer2.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer2, integer1] = integer2.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer2, integer1] = integer2.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer2, integer1] = integer2.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer2, integer1] = integer2.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer2, integer1] = integer2.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer2, integer1] = integer2.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer2, integer1] = integer2.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer2, integer1] = integer2.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer2, integer1] = integer2.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer2, integer1] = integer2.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer2, integer1] = integer2.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer2, integer1] = integer2.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer2, integer1] = integer2.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer2, integer1] = integer2.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer2, integer1] = integer2.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer2, integer1] = integer2.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer2, integer1] = integer2.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer2, integer1] = integer2.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer2, integer1] = integer2.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer2, integer1] = integer2.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer2, integer1] = integer2.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer2, integer1] = integer2.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer2, integer1] = integer2.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer2, integer1] = integer2.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer2, integer1] = integer2.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer2, integer1] = integer2.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer2, integer1] = integer2.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer"}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> make_a_pile(3)\n  [3, 5, 7]\n  */\nconst make_a_pile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "make_a_pile", "gc": "<|endoftext|>/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> make_a_pile(3)\n  [3, 5, 7]\n  */\nconst make_a_pile = (n) => {\n  const levels = [\n    [n, 0, 0],\n    [n, 0, 0],\n    [n, 0, 0],\n  ];\n  for (let i = 1; i < n; i++) {\n    levels[n % 2][i + 1] = levels[n % 2][i];\n  }\n  return levels;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> make_a_pile(3)\n  [3, 5, 7]\n  */\nconst make_a_pile_with_holes = (n) => {\n  const levels = [\n    [n, 0, 0],\n    [n, 0, 0],\n    [n, 0, 0],\n  ];\n  for (let i = 1; i < n; i++) {\n    levels[n % 2][i + 1] = levels[n % 2][i];\n  }\n  return levels;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> make_a_pile_with_holes(3)\n  [3, 5, 7]\n  */\nconst make_a_pile_with_holes_with_repeating = (n) => {\n  const levels = [\n    [n, 0, 0],\n    [n, 0, 0],\n    [n, 0, 0],\n  ];\n  for (let i = 1; i < n; i++) {\n    levels[n % 2][i + 1] = levels[n % 2][i];\n  }\n  return levels;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> make_a_pile_with_holes_with_repeating(3)\n  [3, 5, 7]\n  */\nconst make_a_pile_with_holes_with_repeating_and_holes = (n) => {\n  const levels = [\n    [n, 0, 0],\n    [n, 0, 0],\n    [n, 0, 0],\n  ];\n  for (let i = 1; i < n; i++) {\n    levels[n % 2][i + 1] = levels[n % 2][i];\n  }\n  return levels;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> make_a_pile_with_holes_with_repeating_and_holes(3)\n  [3, 5, 7]\n  */\nconst make_a_pile_with_holes_with_repeating_and_holes_with_repeating = (n) => {\n  const levels = [\n    [n, 0, 0],\n    [n, 0, 0],\n    [n, 0, 0],\n  ];\n  for (let i = 1; i < n; i++) {\n    levels[n % 2][i + 1] = levels[n % 2][i];\n  }\n  return levels;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> make_a_pile_with_holes_with_repeating_and_holes_with_repeating(3)\n  [3, 5, 7]\n  */\nconst make_a_pile_with_holes_with_repeating_and_holes_with_repeating_and_holes = (\n  n\n) => {\n  const levels = [\n    [n, 0, 0],\n    [n, 0, 0],\n    [n, 0, 0],\n  ];\n  for (let i = 1; i < n; i++) {\n    levels[n % 2][i + 1] = levels[n % 2][i];\n  }\n  return levels;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> make_a_pile_with_holes_with_repeating_and_holes_with_repeating_and_holes(3)\n  [3, 5, 7]\n  */\nconst make_a_pile_with_holes_with_repeating_and_holes_with_repeating_and_holes_with_repeating_and_holes = (\n  n\n) => {\n  const levels = [\n    [n, 0, 0],\n    [n, 0, 0],\n    [n, 0, 0],\n  ];\n  for (let i = 1; i < n; i++) {\n    levels[n % 2][i + 1] = levels[n % 2][i];\n  }\n  return levels;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> make_a_pile_with_holes_with_repeating_and_holes_with_repeating_and_holes_with_repeating_and_holes(3)\n  [3, 5, 7]\n  */\nconst make_a_pile_with_holes_with_repeating_and_holes_with_repeating_and_holes_with_repeating_and_holes_with_repeating_and_holes = (\n  n\n) => {\n  const levels = [\n    [n, 0, 0],\n    [n, 0, 0],\n    [n, 0, 0],\n  ];\n  for (let i = 1; i < n; i++) {\n    levels[n % 2][i + 1] = levels[n % 2][i];\n  }\n  return levels;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> make_a_pile_with_holes_with_re"}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst words_string = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "words_string", "gc": "<|endoftext|>/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst words_string = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task\n  is to return the length of the longest word in the string.\n  \n  For example:\n  word_length(\"Hi, my name is John\") == 2\n  word_length(\"One, two, three, four, five, six\") == 2\n  */\nconst word_length = (s) => {\n  const words = s.split(/\\s+/);\n  return words.length;\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task\n  is to return the length of the shortest word in the string.\n  \n  For example:\n  word_length(\"Hi, my name is John\") == 1\n  word_length(\"One, two, three, four, five, six\") == 1\n  */\nconst word_length = (s) => {\n  const words = s.split(/\\s+/);\n  return words[0].length;\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task\n  is to return the number of spaces in the string.\n  \n  For example:\n  space_count(\"Hi, my name is John\") == 2\n  space_count(\"One, two, three, four, five, six\") == 2\n  */\nconst space_count = (s) => {\n  const words = s.split(/\\s+/);\n  return words.length;\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task\n  is to return the number of words in the string.\n  \n  For example:\n  word_count(\"Hi, my name is John\") == 2\n  word_count(\"One, two, three, four, five, six\") == 2\n  */\nconst word_count = (s) => {\n  const words = s.split(/\\s+/);\n  return words.length;\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task\n  is to return the number of characters in the string.\n  \n  For example:\n  character_count(\"Hi, my name is John\") == 2\n  character_count(\"One, two, three, four, five, six\") == 2\n  */\nconst character_count = (s) => {\n  const words = s.split(/\\s+/);\n  return words.length;\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task\n  is to return the number of characters in the string.\n  \n  For example:\n  character_count(\"Hi, my name is John\") == 2\n  character_count(\"One, two, three, four, five, six\") == 2\n  */\nconst character_count = (s) => {\n  const words = s.split(/\\s+/);\n  return words[0].length;\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task\n  is to return the number of characters in the string.\n  \n  For example:\n  character_count(\"Hi, my name is John\") == 2\n  character_count(\"One, two, three, four, five, six\") == 2\n  */\nconst character_count = (s) => {\n  const words = s.split(/\\s+/);\n  return words.length;\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task\n  is to return the number of characters in the string.\n  \n  For example:\n  character_count(\"Hi, my name is John\") == 2\n  character_count(\"One, two, three, four, five, six\") == 2\n  */\nconst character_count = (s) => {\n  const words = s.split(/\\s+/);\n  return words[0].length;\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task\n  is to return the number of characters in the string.\n  \n  For example:\n  character_count(\"Hi, my name is John\") == 2\n  character_count(\"One, two, three, four, five, six\") == 2\n  */\nconst character_count = (s) => {\n  const words = s.split(/\\s+/);\n  return words.length;\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task\n  is to return the number of characters in the string.\n  \n  For example:\n  character_count(\"Hi, my name is John\") == 2\n  character_count(\"One, two, three, four, five, six\") == 2\n  */\nconst character_count = (s) => {\n  const words = s.split(/\\s+/);\n  return words[0].length;\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task\n  is to return the number of characters in the string.\n  \n  For example:\n  character_count(\"Hi, my name is John\") == 2\n  character_count(\"One, two, three, four, five, six\") == 2\n  */\nconst character_count = (s) => {\n  const words = s.split(/\\s+/);\n  return words.length;\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task\n  is to return the number of characters in the string.\n  \n  For example:\n  character_count(\"Hi, my name is John\") == 2\n  character_count(\"One, two, three, four, five, six\") == 2\n  */\nconst character_count = (s) => {\n  const words = s.split(/\\s+/);\n  return words[0].length;\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task\n  is to return the number of characters in the string.\n  \n  For example:\n  character_count(\"Hi, my name is John\") == 2\n  character_count(\"One, two, three, four, five, six\") == 2\n  */\nconst character_count = (s) => {\n  const words = s.split(/\\s+/);\n  return words.length;\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task\n  is to return the number of characters in the string.\n  \n  For example:\n  character_count(\"Hi, my name is John\") == 2\n  character_count(\"One, two, three, four, five, six\") == 2\n  */\nconst character_count = (s) => {\n  const words = s.split(/\\s+/);\n  return words[0].length;\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task\n  is to return the number of characters in the string.\n  \n  For example:\n  character_count(\"Hi, my name is John\") == 2\n  character_count(\"One, two, three, four, five, six\") == 2\n  */\nconst character_count = (s) => {\n  const words = s.split(/\\s+/);\n  return words.length;\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task\n  is to return the number of characters in the string.\n  \n  For example:\n  character_count(\"Hi, my name is John\") == 2\n  character_count(\"One, two, three, four, five, six\") == 2\n  */\nconst character_count = (s) => {\n  const words = s.split(/\\s+/);\n  return words[0].length;\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task\n  is to return the number of characters in the string.\n  \n  For example:\n  character_count(\"Hi, my name is John\") == 2\n  character_count(\"One, two, "}
{"task_id": "JavaScript/102", "prompt": "/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choose_num(12, 15) = 14\n  choose_num(13, 12) = -1\n  */\nconst choose_num = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "choose_num", "gc": "<|endoftext|>/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choose_num(12, 15) = 14\n  choose_num(13, 12) = -1\n  */\nconst choose_num = (x, y) => {\n  if (x < 0 || y < 0 || x > y || x < 0 || y < 0) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return choose_num(x / 2, y);\n  }\n  return choose_num(x / 2, choose_num(y, x));\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest odd integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choose_num(12, 15) = 14\n  choose_num(13, 12) = -1\n  */\nconst choose_num = (x, y) => {\n  if (x < 0 || y < 0 || x > y || x < 0 || y < 0) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return choose_num(x / 2, y);\n  }\n  return choose_num(x / 2, choose_num(y, x));\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choose_num(12, 15) = 14\n  choose_num(13, 12) = -1\n  */\nconst choose_num = (x, y) => {\n  if (x < 0 || y < 0 || x > y || x < 0 || y < 0) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return choose_num(x / 2, y);\n  }\n  return choose_num(x / 2, choose_num(y, x));\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choose_num(12, 15) = 14\n  choose_num(13, 12) = -1\n  */\nconst choose_num = (x, y) => {\n  if (x < 0 || y < 0 || x > y || x < 0 || y < 0) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return choose_num(x / 2, y);\n  }\n  return choose_num(x / 2, choose_num(y, x));\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choose_num(12, 15) = 14\n  choose_num(13, 12) = -1\n  */\nconst choose_num = (x, y) => {\n  if (x < 0 || y < 0 || x > y || x < 0 || y < 0) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return choose_num(x / 2, y);\n  }\n  return choose_num(x / 2, choose_num(y, x));\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choose_num(12, 15) = 14\n  choose_num(13, 12) = -1\n  */\nconst choose_num = (x, y) => {\n  if (x < 0 || y < 0 || x > y || x < 0 || y < 0) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return choose_num(x / 2, y);\n  }\n  return choose_num(x / 2, choose_num(y, x));\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choose_num(12, 15) = 14\n  choose_num(13, 12) = -1\n  */\nconst choose_num = (x, y) => {\n  if (x < 0 || y < 0 || x > y || x < 0 || y < 0) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return choose_num(x / 2, y);\n  }\n  return choose_num(x / 2, choose_num(y, x));\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choose_num(12, 15) = 14\n  choose_num(13, 12) = -1\n  */\nconst choose_num = (x, y) => {\n  if (x < 0 || y < 0 || x > y || x < 0 || y < 0) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return choose_num(x / 2, y);\n  }\n  return choose_num(x / 2, choose_num(y, x));\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choose_num(12, 15) = 14\n  choose_num(13, 12) = -1\n  */\nconst choose_num = (x, y) => {\n  if (x < 0 || y < 0 || x > y || x < 0 || y < 0) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return choose_num(x / 2, y);\n  }\n  return choose_num(x / 2, choose_num(y, x));\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choose_num(12, 15) = 14\n  choose_num(13, 12) = -1\n  */\nconst choose_num = (x, y) => {\n  if (x < 0 || y < 0 || x > y || x < 0 || y < 0) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return choose_num(x / 2, y);\n  }\n  return choose_num(x / 2, choose_num(y, x));\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choose_num(12, 15) = 14\n  choose_num(13, 12) = -1\n  */\nconst choose_num = (x, y) => {\n  if (x < 0 || y < 0 || x > y || x < 0 || y < 0) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return choose_num(x / 2, y);\n  }\n  return choose_num(x / 2, choose_num(y, x));\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choose_num(12, 15) = 14\n  choose_num(13, 12) = -1\n  */\nconst choose_num = (x, y) => {\n  if (x < 0 || y < 0 || x > y || x < 0 || y < 0) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return choose_num(x / 2, y);\n  }\n  return "}
{"task_id": "JavaScript/103", "prompt": "/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  rounded_avg(1, 5) => \"0b11\"\n  rounded_avg(7, 5) => -1\n  rounded_avg(10, 20) => \"0b1111\"\n  rounded_avg(20, 33) => \"0b11010\"\n  */\nconst rounded_avg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "rounded_avg", "gc": "<|endoftext|>/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  rounded_avg(1, 5) => \"0b11\"\n  rounded_avg(7, 5) => -1\n  rounded_avg(10, 20) => \"0b1111\"\n  rounded_avg(20, 33) => \"0b11010\"\n  */\nconst rounded_avg = (n, m) => {\n  let rounded = Math.round(n);\n  let binary = binary(rounded);\n  let result = \"\";\n  let count = 0;\n  let sum = 0;\n  let avg = 0;\n  while(binary!== 0) {\n    result += binary;\n    count++;\n    sum += binary;\n    avg += binary;\n    binary = binary(rounded--);\n  }\n  result = result.substr(0, result.length - 1);\n  result = `0b${result}`;\n  result = parseInt(result, 2);\n  result = result / count;\n  result = result * Math.pow(10, avg);\n  return result;\n};\n\n/*\n  You are given two positive integers n and m, and your task is to compute the\n  largest integer that is less than or equal to n and greater than or equal to m.\n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  rounded_max_less_than_or_equal(1, 5) => \"0b11\"\n  rounded_max_less_than_or_equal(7, 5) => -1\n  rounded_max_less_than_or_equal(10, 20) => \"0b1111\"\n  rounded_max_less_than_or_equal(20, 33) => \"0b11010\"\n  */\nconst rounded_max_less_than_or_equal = (n, m) => {\n  let rounded = Math.round(n);\n  let binary = binary(rounded);\n  let result = \"\";\n  let count = 0;\n  let sum = 0;\n  let max = 0;\n  let avg = 0;\n  while(binary!== 0) {\n    result += binary;\n    count++;\n    sum += binary;\n    max = Math.max(max, binary);\n    avg = avg + binary;\n    binary = binary(rounded--);\n  }\n  result = result.substr(0, result.length - 1);\n  result = `0b${result}`;\n  result = parseInt(result, 2);\n  result = result / count;\n  result = result * Math.pow(10, avg);\n  return result;\n};\n\n/*\n  You are given two positive integers n and m, and your task is to compute the\n  smallest integer that is less than or equal to n and greater than or equal to m.\n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  rounded_min_less_than_or_equal(1, 5) => \"0b11\"\n  rounded_min_less_than_or_equal(7, 5) => -1\n  rounded_min_less_than_or_equal(10, 20) => \"0b1111\"\n  rounded_min_less_than_or_equal(20, 33) => \"0b11010\"\n  */\nconst rounded_min_less_than_or_equal = (n, m) => {\n  let rounded = Math.round(n);\n  let binary = binary(rounded);\n  let result = \"\";\n  let count = 0;\n  let sum = 0;\n  let min = 0;\n  let avg = 0;\n  while(binary!== 0) {\n    result += binary;\n    count++;\n    sum += binary;\n    min = Math.min(min, binary);\n    avg = avg + binary;\n    binary = binary(rounded--);\n  }\n  result = result.substr(0, result.length - 1);\n  result = `0b${result}`;\n  result = parseInt(result, 2);\n  result = result / count;\n  result = result * Math.pow(10, avg);\n  return result;\n};\n\n/*\n  You are given two positive integers n and m, and your task is to compute the\n  largest integer that is less than or equal to n and less than or equal to m.\n  Round the answer to the nearest integer and convert that to binary.\n  If n is less than m, return -1.\n  Example:\n  rounded_max_less_than_or_equal_and_less_than_or_equal(1, 5) => \"0b11\"\n  rounded_max_less_than_or_equal_and_less_than_or_equal(7, 5) => -1\n  rounded_max_less_than_or_equal_and_less_than_or_equal(10, 20) => \"0b1111\"\n  rounded_max_less_than_or_equal_and_less_than_or_equal(20, 33) => \"0b11010\"\n  */\nconst rounded_max_less_than_or_equal_and_less_than_or_equal = (n, m) => {\n  let rounded = Math.round(n);\n  let binary = binary(rounded);\n  let result = \"\";\n  let count = 0;\n  let sum = 0;\n  let max = 0;\n  let avg = 0;\n  while(binary!== 0) {\n    result += binary;\n    count++;\n    sum += binary;\n    max = Math.max(max, binary);\n    avg = avg + binary;\n    binary = binary(rounded--);\n  }\n  result = result.substr(0, result.length - 1);\n  result = `0b${result}`;\n  result = parseInt(result, 2);\n  result = result / count;\n  result = result * Math.pow(10, avg);\n  return result;\n};\n\n/*\n  You are given two positive integers n and m, and your task is to compute the\n  smallest integer that is less than or equal to n and less than or equal to m.\n  Round the answer to the nearest integer and convert that to binary.\n  If n is less than m, return -1.\n  Example:\n  rounded_min_less_than_or_equal_and_less_than_or_equal(1, 5) => \"0b11\"\n  rounded_min_less_than_or_equal_and_less_than_or_equal(7, 5) => -1\n  rounded_min_less_than_or_equal_and_less_than_or_equal(10, 20) => \"0b1111\"\n  rounded_min_less_than_or_equal_and_less_than_or_equal(20, 33) => \"0b11010\"\n  */\nconst rounded_min_less_than_or_equal_and_less_than_or_equal = (n, m) => {\n  let rounded = Math.round(n);\n  let binary = binary(rounded);\n  let result = \"\";\n  let count = 0;\n  let sum = 0;\n  let min = 0;\n  let avg = 0;\n  while(binary!== 0) {\n    result += binary;\n    count++;\n    sum += binary;\n    min = Math.min(min, binary);\n    avg = avg + binary;\n    binary = binary(rounded--);\n  }\n  result = result.substr(0, result.length - 1);\n  result = `0b${result}`;\n  result = parseInt(result, 2);\n  result = result / count;\n  result = result * Math.pow(10, avg);\n  return result;\n};\n\n/*\n  You are given two positive integers n and m, and your task is to compute the\n  largest integer that is greater than or equal to n and less than or equal to m.\n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  rounded_max_greater_than_or_equal(1, 5) => \"0b11\"\n  rounded_max_greater_than_or_equal(7, 5) => -1\n  rounded_max_greater_than_or_equal(10, 20) => \"0b1111\"\n  rounded_max_greater_than_or_equal(20, 33) => \"0b11010\"\n  */\nconst rounded_max_greater_than_or_equal = (n, m) => {\n  let rounded = Math.round(n);\n  let binary = binary(rounded);\n  let result = \"\";\n  let count = 0;\n"}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> unique_digits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> unique_digits([152, 323, 1422, 10])\n  []\n  */\nconst unique_digits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "unique_digits", "gc": "<|endoftext|>/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> unique_digits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> unique_digits([152, 323, 1422, 10])\n  []\n  */\nconst unique_digits = (x) => {\n  let result = []\n  let digits = []\n  let digit\n  let i\n  \n  for(i = 0; i < x.length; i++) {\n    digit = parseInt(x[i])\n    if(digit % 2 === 0) {\n      digits.push(digit)\n    }\n  }\n  \n  for(i = 0; i < digits.length; i++) {\n    if(digits[i] % 2 === 0) {\n      result.push(digits[i])\n    }\n  }\n  \n  return result\n}\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that has odd digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> unique_digits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> unique_digits([152, 323, 1422, 10])\n  []\n  */\nconst unique_odd_digits = (x) => {\n  let result = []\n  let digits = []\n  let digit\n  let i\n  \n  for(i = 0; i < x.length; i++) {\n    digit = parseInt(x[i])\n    if(digit % 2 === 0) {\n      digits.push(digit)\n    }\n  }\n  \n  for(i = 0; i < digits.length; i++) {\n    if(digits[i] % 2!== 1) {\n      result.push(digits[i])\n    }\n  }\n  \n  return result\n}\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that has even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> unique_digits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> unique_digits([152, 323, 1422, 10])\n  []\n  */\nconst unique_even_digits = (x) => {\n  let result = []\n  let digits = []\n  let digit\n  let i\n  \n  for(i = 0; i < x.length; i++) {\n    digit = parseInt(x[i])\n    if(digit % 2!== 0) {\n      digits.push(digit)\n    }\n  }\n  \n  for(i = 0; i < digits.length; i++) {\n    if(digits[i] % 2 === 1) {\n      result.push(digits[i])\n    }\n  }\n  \n  return result\n}\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that has odd or even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> unique_digits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> unique_digits([152, 323, 1422, 10])\n  []\n  */\nconst unique_odd_or_even_digits = (x) => {\n  let result = []\n  let digits = []\n  let digit\n  let i\n  \n  for(i = 0; i < x.length; i++) {\n    digit = parseInt(x[i])\n    if(digit % 2!== 0) {\n      digits.push(digit)\n    }\n  }\n  \n  for(i = 0; i < digits.length; i++) {\n    if(digits[i] % 2 === 1) {\n      result.push(digits[i])\n    }\n  }\n  \n  return result\n}\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that has odd or even digit and has even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> unique_digits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> unique_digits([152, 323, 1422, 10])\n  []\n  */\nconst unique_odd_or_even_digits_odd_or_even = x => {\n  let result = []\n  let digits = []\n  let digit\n  let i\n  \n  for(i = 0; i < x.length; i++) {\n    digit = parseInt(x[i])\n    if(digit % 2!== 0) {\n      digits.push(digit)\n    }\n  }\n  \n  for(i = 0; i < digits.length; i++) {\n    if(digits[i] % 2 === 1) {\n      result.push(digits[i])\n    }\n  }\n  \n  return result\n}\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that has odd or even digit and has odd digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> unique_digits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> unique_digits([152, 323, 1422, 10])\n  []\n  */\nconst unique_odd_or_even_digits_odd_or_even2 = x => {\n  let result = []\n  let digits = []\n  let digit\n  let i\n  \n  for(i = 0; i < x.length; i++) {\n    digit = parseInt(x[i])\n    if(digit % 2!== 0) {\n      digits.push(digit)\n    }\n  }\n  \n  for(i = 0; i < digits.length; i++) {\n    if(digits[i] % 2 === 1) {\n      result.push(digits[i])\n    }\n  }\n  \n  return result\n}\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that has odd or even digit and has even digit and has odd digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> unique_digits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> unique_digits([152, 323, 1422, 10])\n  []\n  */\nconst unique_odd_or_even_digits_odd_or_even3 = x => {\n  let result = []\n  let digits = []\n  let digit\n  let i\n  \n  for(i = 0; i < x.length; i++) {\n    digit = parseInt(x[i])\n    if(digit % 2!== 0) {\n      digits.push(digit)\n    }\n  }\n  \n  for(i = 0; i < digits.length; i++) {\n    if(digits[i] % 2 === 1) {\n      result.push(digits[i])\n    }\n  }\n  \n  return result\n}\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that has odd or even digit and has odd digit and has even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> unique_digits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> unique_digits([152, 323, 1422, 10])\n  []\n  */\nconst unique_odd_or_even_digits_odd_or_even4 = x => {\n  let result = []\n  let digits = []\n  let digit\n  let i\n  \n  for(i = 0; i < x.length; i++) {\n    digit = parseInt(x[i])\n    if(digit % 2!== 0) {\n      digits.push(digit)\n    }\n  }\n  \n  for(i = 0; i < digits.length; i++) {\n    if(digits[i] % 2 === 1) {\n      result.push(digits[i])\n    }\n  }\n  \n  return result\n}\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that has odd or even digit and has odd digit and has even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> unique_digits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> unique_digits([152, 323, 1422, 10])\n  []\n  */\nconst unique_odd_or_even_digits_odd_or_even5 = x => {\n  let result = []\n  let digits = []\n  let digit\n  let i\n  \n  for(i = 0; i < x.length; i++) {\n    digit = parseInt(x[i])\n    if(digit % 2!== 0) {\n      digits.push(digit)\n    }\n  }\n  \n  for(i = 0; i < digits.length; i++) {\n    if(digits[i] % 2 === 1) {\n      result.push(digits[i])\n    }\n  }\n  \n  return result\n}\n\n/*Given a list of positive integers x. return a sorted "}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst by_length = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "by_length", "gc": "<|endoftext|>/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst by_length = (arr) => {\n  const len = arr.length;\n  let res = [];\n  for (let i = len - 1; i >= 0; i--) {\n    res.push(arr[i]);\n  }\n  return res;\n};\n\nconst by_name = (arr) => {\n  const len = arr.length;\n  let res = [];\n  for (let i = len - 1; i >= 0; i--) {\n    res.push(arr[i]);\n  }\n  return res;\n};\n\nconst by_name_reversed = (arr) => {\n  const len = arr.length;\n  let res = [];\n  for (let i = len - 1; i >= 0; i--) {\n    res.push(arr[i]);\n  }\n  return res.reverse();\n};\n\nconst by_name_reversed_reversed = (arr) => {\n  const len = arr.length;\n  let res = [];\n  for (let i = len - 1; i >= 0; i--) {\n    res.push(arr[i]);\n  }\n  return res.reverse().reverse();\n};\n\nconst by_name_reversed_reversed_reversed = (arr) => {\n  const len = arr.length;\n  let res = [];\n  for (let i = len - 1; i >= 0; i--) {\n    res.push(arr[i]);\n  }\n  return res.reverse().reverse().reverse();\n};\n\nconst by_name_reversed_reversed_reversed_reversed = (arr) => {\n  const len = arr.length;\n  let res = [];\n  for (let i = len - 1; i >= 0; i--) {\n    res.push(arr[i]);\n  }\n  return res.reverse().reverse().reverse().reverse().reverse();\n};\n\nconst by_name_reversed_reversed_reversed_reversed_reversed = (arr) => {\n  const len = arr.length;\n  let res = [];\n  for (let i = len - 1; i >= 0; i--) {\n    res.push(arr[i]);\n  }\n  return res.reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse();\n};\n\nconst by_name_reversed_reversed_reversed_reversed_reversed_reversed = (arr) => {\n  const len = arr.length;\n  let res = [];\n  for (let i = len - 1; i >= 0; i--) {\n    res.push(arr[i]);\n  }\n  return res.reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse"}
{"task_id": "JavaScript/106", "prompt": "/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "gc": "<|endoftext|>/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/* Implement the function g that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the greatest common divisor of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the greatest common divisor of i is the product of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  g(5) == [1, 2, 6, 24, 15]\n  */\nconst g = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/* Implement the function h that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the greatest common divisor of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the greatest common divisor of i is the product of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  h(5) == [1, 2, 6, 24, 15]\n  */\nconst h = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/* Implement the function i that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the greatest common divisor of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the greatest common divisor of i is the product of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  i(5) == [1, 2, 6, 24, 15]\n  */\nconst i = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/* Implement the function j that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the greatest common divisor of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the greatest common divisor of i is the product of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  j(5) == [1, 2, 6, 24, 15]\n  */\nconst j = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/* Implement the function k that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the greatest common divisor of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the greatest common divisor of i is the product of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  k(5) == [1, 2, 6, 24, 15]\n  */\nconst k = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/* Implement the function l that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the greatest common divisor of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the greatest common divisor of i is the product of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  l(5) == [1, 2, 6, 24, 15]\n  */\nconst l = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/* Implement the function m that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the greatest common divisor of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the greatest common divisor of i is the product of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  m(5) == [1, 2, 6, 24, 15]\n  */\nconst m = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/* Implement the function n that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the greatest common divisor of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the greatest common divisor of i is the product of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  n(5) == [1, 2, 6, 24, 15]\n  */\nconst n = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/* Implement the function o that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the greatest common divisor of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the greatest common divisor of i is the product of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  o(5) == [1, 2, 6, 24, 15]\n  */\nconst o = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/* Implement the function p that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the greatest common divisor of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the greatest common divisor of i is the product of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  p(5) == [1, 2, 6, 24, 15]\n  */\nconst p = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/* Implement the function q that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the greatest common divisor of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the greatest common divisor of i is the product of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  q(5) == [1, 2, 6, 24, 15]\n  */\nconst q = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }"}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst even_odd_palindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "even_odd_palindrome", "gc": "<|endoftext|>/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst even_odd_palindrome = (n) => {\n  const even_palindromes = Array.from({ length: n }, (_, i) => n % 2 === 0);\n  const odd_palindromes = Array.from({ length: n }, (_, i) => n % 2!== 0);\n  return [...even_palindromes,...odd_palindromes];\n};\n\n// Given a positive integer n, return an array that has all possible palindromes within range(1, n).\n// For example, given n = 5, return [5, 3, 2, 1]\nconst palindromes = (num) => {\n  const palindromes = [];\n  for (let i = 1; i <= num; i++) {\n    const palindrome = even_odd_palindrome(i);\n    palindromes.push(palindrome);\n  }\n  return palindromes;\n};\n\n// Given a positive integer n, return an array that has all possible palindromes within range(1, n).\n// For example, given n = 5, return [5, 3, 2, 1]\nconst palindromes_reverse = (num) => {\n  const palindromes = [];\n  for (let i = num; i >= 1; i--) {\n    const palindrome = even_odd_palindrome(i);\n    palindromes.push(palindrome);\n  }\n  return palindromes;\n};\n\n// Given a positive integer n, return an array that has all possible palindromes within range(1, n).\n// For example, given n = 5, return [5, 3, 2, 1]\nconst palindromes_reversed_reverse = (num) => {\n  const palindromes = [];\n  for (let i = num; i >= 1; i--) {\n    const palindrome = even_odd_palindrome(i);\n    palindromes.push(palindrome);\n  }\n  return palindromes.reverse();\n};\n\n// Given a positive integer n, return an array that has all possible palindromes within range(1, n).\n// For example, given n = 5, return [5, 3, 2, 1]\nconst palindromes_reversed_reverse_even = (num) => {\n  const palindromes = [];\n  for (let i = num; i >= 1; i--) {\n    const palindrome = even_odd_palindrome(i);\n    palindromes.push(palindrome);\n  }\n  return palindromes.reverse().reverse();\n};\n\n// Given a positive integer n, return an array that has all possible palindromes within range(1, n).\n// For example, given n = 5, return [5, 3, 2, 1]\nconst palindromes_reversed_reverse_odd = (num) => {\n  const palindromes = [];\n  for (let i = num; i >= 1; i--) {\n    const palindrome = even_odd_palindrome(i);\n    palindromes.push(palindrome);\n  }\n  return palindromes.reverse().reverse();\n};\n\n// Given a positive integer n, return an array that has all possible palindromes within range(1, n).\n// For example, given n = 5, return [5, 3, 2, 1]\nconst palindromes_reversed_reverse_odd_even = (num) => {\n  const palindromes = [];\n  for (let i = num; i >= 1; i--) {\n    const palindrome = even_odd_palindrome(i);\n    palindromes.push(palindrome);\n  }\n  return palindromes.reverse().reverse().reverse();\n};\n\n// Given a positive integer n, return an array that has all possible palindromes within range(1, n).\n// For example, given n = 5, return [5, 3, 2, 1]\nconst palindromes_reversed_reverse_odd_odd = (num) => {\n  const palindromes = [];\n  for (let i = num; i >= 1; i--) {\n    const palindrome = even_odd_palindrome(i);\n    palindromes.push(palindrome);\n  }\n  return palindromes.reverse().reverse().reverse().reverse();\n};\n\n// Given a positive integer n, return an array that has all possible palindromes within range(1, n).\n// For example, given n = 5, return [5, 3, 2, 1]\nconst palindromes_reversed_reverse_odd_odd_even = (num) => {\n  const palindromes = [];\n  for (let i = num; i >= 1; i--) {\n    const palindrome = even_odd_palindrome(i);\n    palindromes.push(palindrome);\n  }\n  return palindromes.reverse().reverse().reverse().reverse().reverse();\n};\n\n// Given a positive integer n, return an array that has all possible palindromes within range(1, n).\n// For example, given n = 5, return [5, 3, 2, 1]\nconst palindromes_reversed_reverse_odd_odd_odd_even = (num) => {\n  const palindromes = [];\n  for (let i = num; i >= 1; i--) {\n    const palindrome = even_odd_palindrome(i);\n    palindromes.push(palindrome);\n  }\n  return palindromes.reverse().reverse().reverse().reverse().reverse().reverse();\n};\n\n// Given a positive integer n, return an array that has all possible palindromes within range(1, n).\n// For example, given n = 5, return [5, 3, 2, 1]\nconst palindromes_reversed_reverse_odd_odd_odd_odd = (num) => {\n  const palindromes = [];\n  for (let i = num; i >= 1; i--) {\n    const palindrome = even_odd_palindrome(i);\n    palindromes.push(palindrome);\n  }\n  return palindromes.reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse();\n};\n\n// Given a positive integer n, return an array that has all possible palindromes within range(1, n).\n// For example, given n = 5, return [5, 3, 2, 1]\nconst palindromes_reversed_reverse_odd_odd_odd_odd_even = (num) => {\n  const palindromes = [];\n  for (let i = num; i >= 1; i--) {\n    const palindrome = even_odd_palindrome(i);\n    palindromes.push(palindrome);\n  }\n  return palindromes.reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse();\n};\n\n// Given a positive integer n, return an array that has all possible palindromes within range(1, n).\n// For example, given n = 5, return [5, 3, 2, 1]\nconst palindromes_reversed_reverse_odd_odd_odd_odd_odd_even = (num) => {\n  const palindromes = [];\n  for (let i = num; i >= 1; i--) {\n    const palindrome = even_odd_palindrome(i);\n"}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function count_nums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> count_nums([]) == 0\n  >>> count_nums([-1, 11, -11]) == 1\n  >>> count_nums([1, 1, 2]) == 3\n  */\nconst count_nums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "count_nums", "gc": "<|endoftext|>/*\n  Write a function count_nums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> count_nums([]) == 0\n  >>> count_nums([-1, 11, -11]) == 1\n  >>> count_nums([1, 1, 2]) == 3\n  */\nconst count_nums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function count_evens which takes an array of integers and returns\n  the number of even numbers in the array.\n  >>> count_evens([]) == 0\n  >>> count_evens([1, 2, 3, 4]) == 4\n  >>> count_evens([-1, 11, -12, -13, -14, -15, -16, -17]) == 3\n  */\nconst count_evens = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function count_odds which takes an array of integers and returns\n  the number of odd numbers in the array.\n  >>> count_odds([]) == 0\n  >>> count_odds([1, 2, 3, 4]) == 3\n  >>> count_odds([-1, 11, -12, -13, -14, -15, -16, -17]) == 2\n  */\nconst count_odds = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2!== 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function count_zeros which takes an array of integers and returns\n  the number of zeros in the array.\n  >>> count_zeros([]) == 0\n  >>> count_zeros([1, 2, 3, 4]) == 0\n  >>> count_zeros([-1, 11, -12, -13, -14, -15, -16, -17]) == 0\n  */\nconst count_zeros = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function count_negatives which takes an array of integers and\n  returns the number of negative numbers in the array.\n  >>> count_negatives([]) == 0\n  >>> count_negatives([1, 2, 3, 4]) == 3\n  >>> count_negatives([-1, 11, -12, -13, -14, -15, -16, -17]) == 2\n  */\nconst count_negatives = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function count_positives which takes an array of integers and\n  returns the number of positive numbers in the array.\n  >>> count_positives([]) == 0\n  >>> count_positives([1, 2, 3, 4]) == 1\n  >>> count_positives([-1, 11, -12, -13, -14, -15, -16, -17]) == 2\n  */\nconst count_positives = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function count_negatives_odd and count_positives_odd which\n  takes an array of integers and returns the number of negative and positive\n  numbers in the array.\n  >>> count_negatives_odd([]) == 0\n  >>> count_negatives_odd([1, 2, 3, 4]) == 1\n  >>> count_negatives_odd([-1, 11, -12, -13, -14, -15, -16, -17]) == 2\n  >>> count_positives_odd([1, 2, 3, 4]) == 1\n  >>> count_positives_odd([-1, 11, -12, -13, -14, -15, -16, -17]) == 2\n  */\nconst count_negatives_odd = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      count++;\n    }\n    if (arr[i] > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function count_negatives_even and count_positives_even which\n  takes an array of integers and returns the number of negative and positive\n  numbers in the array.\n  >>> count_negatives_even([]) == 0\n  >>> count_negatives_even([1, 2, 3, 4]) == 1\n  >>> count_negatives_even([-1, 11, -12, -13, -14, -15, -16, -17]) == 2\n  >>> count_positives_even([1, 2, 3, 4]) == 1\n  >>> count_positives_even([-1, 11, -12, -13, -14, -15, -16, -17]) == 2\n  */\nconst count_negatives_even = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      count++;\n    }\n    if (arr[i] > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function count_odd_evens which takes an array of integers and\n  returns the number of odd numbers and even numbers in the array.\n  >>> count_odd_evens([]) == 0\n  >>> count_odd_evens([1, 2, 3, 4]) == 3\n  >>> count_odd_evens([-1, 11, -12, -13, -14, -15, -16, -17]) == 2\n  >>> count_odd_evens([1, 1, 2]) == 2\n  */\nconst count_odd_evens = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0) {\n      count++;\n    }\n    if (arr[i] % 2 === 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function count_evens_odds which takes an array of integers and\n  returns the number of even numbers and odd numbers in the array.\n  >>> count_evens_odds([]) == 0\n  >>> count_evens_odds([1, 2, 3, 4]) == 3\n  >>> count_evens_odds([-1, 11, -12, -13, -14, -15, -16, -17]) == 2\n  >>> count_evens_odds([1, 1, 2]) == 2\n  */\nconst count_evens_odds = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0) {\n      count++;\n    }\n    if (arr[i] % 2 === 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function count_odd_evens_negatives which takes an array of integers and\n  returns the number of odd numbers and even numbers in the array.\n  >>> count_odd_evens_negatives([]) == 0\n  >>> count_odd_evens_negatives([1, 2, 3, 4]) == 3\n  >>> count_odd_evens_negatives([-1, 11, -12, -13, -14, -15, -16, -17]) == 2\n  >>> count_odd_evens_negatives([1, 1, 2]) == 2\n  */\nconst count_odd_evens_negatives = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0) {\n      count++;\n    }\n    if (arr[i] < 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function count_evens_evens_negatives which takes an array of integers and\n  returns the number of even numbers and odd numbers in the array.\n  >>> count_evens_evens_negatives([]) == 0\n  >>> count_evens_evens_negatives([1, 2, 3, 4]) == 3\n  >>> count_evens_evens_negatives([-1, 11, -12, -13, -14, -15, -16, -17]) == 2\n  >>> count_evens_evens_negatives([1, 1, 2]) == 2\n  */\nconst count_evens_evens_negatives = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0) {\n      count++;\n    }\n    if (arr[i] < 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function count_odd_evens_positives which takes an array of integers and\n  returns the number of odd numbers and even numbers in the array.\n  >>> count_odd_evens_positives([]) == 0\n  >>> count_odd_evens_"}
{"task_id": "JavaScript/109", "prompt": "/*We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  move_one_ball([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  move_one_ball([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst move_one_ball = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "move_one_ball", "gc": "<|endoftext|>/*We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  move_one_ball([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  move_one_ball([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst move_one_ball = (arr) => {\n  let arr1 = arr.slice();\n  let arr2 = arr1.slice();\n  let arr3 = arr2.slice();\n  let arr4 = arr3.slice();\n  let arr5 = arr4.slice();\n  let arr6 = arr5.slice();\n  let arr7 = arr6.slice();\n  let arr8 = arr7.slice();\n  let arr9 = arr8.slice();\n  let arr10 = arr9.slice();\n  let arr11 = arr10.slice();\n  let arr12 = arr11.slice();\n  let arr13 = arr12.slice();\n  let arr14 = arr13.slice();\n  let arr15 = arr14.slice();\n  let arr16 = arr15.slice();\n  let arr17 = arr16.slice();\n  let arr18 = arr17.slice();\n  let arr19 = arr18.slice();\n  let arr20 = arr19.slice();\n  let arr21 = arr20.slice();\n  let arr22 = arr21.slice();\n  let arr23 = arr22.slice();\n  let arr24 = arr23.slice();\n  let arr25 = arr24.slice();\n  let arr26 = arr25.slice();\n  let arr27 = arr26.slice();\n  let arr28 = arr27.slice();\n  let arr29 = arr28.slice();\n  let arr30 = arr29.slice();\n  let arr31 = arr30.slice();\n  let arr32 = arr31.slice();\n  let arr33 = arr32.slice();\n  let arr34 = arr33.slice();\n  let arr35 = arr34.slice();\n  let arr36 = arr35.slice();\n  let arr37 = arr36.slice();\n  let arr38 = arr37.slice();\n  let arr39 = arr38.slice();\n  let arr40 = arr39.slice();\n  let arr41 = arr40.slice();\n  let arr42 = arr41.slice();\n  let arr43 = arr42.slice();\n  let arr44 = arr43.slice();\n  let arr45 = arr44.slice();\n  let arr46 = arr45.slice();\n  let arr47 = arr46.slice();\n  let arr48 = arr47.slice();\n  let arr49 = arr48.slice();\n  let arr50 = arr49.slice();\n  let arr51 = arr50.slice();\n  let arr52 = arr51.slice();\n  let arr53 = arr52.slice();\n  let arr54 = arr53.slice();\n  let arr55 = arr54.slice();\n  let arr56 = arr55.slice();\n  let arr57 = arr56.slice();\n  let arr58 = arr57.slice();\n  let arr59 = arr58.slice();\n  let arr60 = arr59.slice();\n  let arr61 = arr60.slice();\n  let arr62 = arr61.slice();\n  let arr63 = arr62.slice();\n  let arr64 = arr63.slice();\n  let arr65 = arr64.slice();\n  let arr66 = arr65.slice();\n  let arr67 = arr66.slice();\n  let arr68 = arr67.slice();\n  let arr69 = arr68.slice();\n  let arr70 = arr69.slice();\n  let arr71 = arr70.slice();\n  let arr72 = arr71.slice();\n  let arr73 = arr72.slice();\n  let arr74 = arr73.slice();\n  let arr75 = arr74.slice();\n  let arr76 = arr75.slice();\n  let arr77 = arr76.slice();\n  let arr78 = arr77.slice();\n  let arr79 = arr78.slice();\n  let arr80 = arr79.slice();\n  let arr81 = arr80.slice();\n  let arr82 = arr81.slice();\n  let arr83 = arr82.slice();\n  let arr84 = arr83.slice();\n  let arr85 = arr84.slice();\n  let arr86 = arr85.slice();\n  let arr87 = arr86.slice();\n  let arr88 = arr87.slice();\n  let arr89 = arr88.slice();\n  let arr90 = arr89.slice();\n  let arr91 = arr90.slice();\n  let arr92 = arr91.slice();\n  let arr93 = arr92.slice();\n  let arr94 = arr93.slice();\n  let arr95 = arr94.slice();\n  let arr96 = arr95.slice();\n  let arr97 = arr96.slice();\n  let arr98 = arr97.slice();\n  let arr99 = arr98.slice();\n  let arr100 = arr99.slice();\n  let arr101 = arr100.slice();\n  let arr102 = arr101.slice();\n  let arr103 = arr102.slice();\n  let arr104 = arr103.slice();\n  let arr105 = arr104.slice();\n  let arr106 = arr105.slice();\n  let arr107 = arr106.slice();\n  let arr108 = arr107.slice();\n  let arr109 = arr108.slice();\n  let arr110 = arr109.slice();\n  let arr111 = arr110.slice();\n  let arr112 = arr111.slice();\n  let arr113 = arr112.slice();\n  let arr114 = arr113.slice();\n  let arr115 = arr114.slice();\n  let arr116 = arr115.slice();\n  let arr117 = arr116.slice();\n  let arr118 = arr117.slice();\n  let arr119 = arr118.slice();\n  let arr120 = arr119.slice();\n  let arr121 = arr120.slice();\n  let arr122 = arr121.slice();\n  let arr123 = arr122.slice();\n  let arr124 = arr123.slice();\n  let arr125 = arr124.slice();\n  let arr126 = arr125.slice();\n  let arr127 = arr126.slice();\n  let arr128 = arr127.slice();\n  let arr129 = arr128.slice();\n  let arr130 = arr129.slice();\n  let arr131 = arr130.slice();\n  let arr132 = arr131.slice();\n  let arr133 = arr132.slice();\n  let arr134 = arr133.slice();\n  let arr135 = arr134.slice();\n"}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an exchange of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of exchanged elements between lst1 and lst2.\n  If it is possible to exchange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "gc": "<|endoftext|>/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an exchange of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of exchanged elements between lst1 and lst2.\n  If it is possible to exchange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  let result = \"NO\";\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let temp = [];\n  while (i < lst1.length && j < lst2.length) {\n    if (lst1[i] % 2 === 0 && lst2[j] % 2 === 0) {\n      temp.push(lst1[i]);\n      i++;\n      j++;\n    } else {\n      temp.push(lst2[j]);\n      j++;\n    }\n  }\n  while (i < lst1.length) {\n    temp.push(lst1[i]);\n    i++;\n  }\n  while (j < lst2.length) {\n    temp.push(lst2[j]);\n    j++;\n  }\n  while (i < lst1.length) {\n    temp.push(lst1[i]);\n    i++;\n  }\n  while (j < lst2.length) {\n    temp.push(lst2[j]);\n    j++;\n  }\n  result = temp.join();\n  return result;\n};\n\n/*\n  Write a function that takes an array of numbers and returns the\n  sum of the numbers in the array.\n  For example:\n  sum([3, 6, 9, 12]) => 15\n  sum([3, 6, 9, 12]) => 15\n  sum([3, 6, 9, 12]) => 15\n  sum([3, 6, 9, 12]) => 15\n  sum([3, 6, 9, 12]) => 15\n  sum([3, 6, 9, 12]) => 15\n  sum([3, 6, 9, 12]) => 15\n  sum([3, 6, 9, 12]) => 15\n  sum([3, 6, 9, 12]) => 15\n  sum([3, 6, 9, 12]) => 15\n  sum([3, 6, 9, 12]) => 15\n  sum([3, 6, 9, 12]) => 15\n  sum([3, 6, 9, 12]) => 15\n  sum([3, 6, 9, 12]) => 15\n  sum([3, 6, 9, 12]) => 15\n  sum([3, 6, 9, 12]) => 15\n  sum([3, 6, 9, 12]) => 15\n  sum([3, 6, 9, 12]) => 15\n  sum([3, 6, 9, 12]) => 15\n  sum([3, 6, 9, 12]) => 15\n  sum([3, 6, 9, 12]) => 15\n  sum([3, 6, 9, 12]) => 15\n  sum([3, 6, 9, 12]) => 15\n  sum([3, 6, 9, 12]) => 15\n  sum([3, 6, 9, 12]) => 15\n  sum([3, 6, 9, 12]) => 15\n  sum([3, 6, 9, 12]) => 15\n  sum([3, 6, 9, 12]) => 15\n  sum([3, 6, 9, 12]) => 15\n  sum([3, 6, 9, 12]) => 15\n  sum([3, 6, 9, 12]) => 15\n  sum([3, 6, 9, 12]) => 15\n  sum([3, 6, 9, 12]) => 15\n  sum([3, 6, 9, 12]) => 15\n  sum([3, 6, 9, 12]) => 15\n  sum([3, 6, 9, 12]) => 15\n  sum([3, 6, 9, 12]) => 15\n  sum([3, 6, 9, 12]) => 15\n  sum([3, 6, 9, 12]) => 15\n  sum([3, 6, 9, 12]) => 15\n  sum([3, 6, 9, 12]) => 15\n  sum([3, 6, 9, 12]) => 15\n  sum([3, 6, 9, 12]) => 15\n  sum([3, 6, 9, 12]) => 15\n  sum([3, 6, 9, 12]) => 15\n  sum([3, 6, 9, 12]) => 15\n  sum([3, 6, 9, 12]) => 15\n  sum([3, 6, 9, 12]) => 15\n  sum([3, 6, 9, 12]) => 15\n  sum([3, 6, 9, 12]) => 15\n  sum([3, 6, 9, 12]) => 15\n  sum([3, 6, 9, 12]) => 15\n  sum([3, 6, 9, 12]) => 15\n  sum([3, 6, 9, 12]) => 15\n  sum([3, 6, 9, 12]) => 15\n  sum([3, 6, 9, 12]) => 15\n  sum([3, 6, 9, 12]) => 15\n  sum([3, 6, 9, 12]) => 15\n  sum([3, 6, 9, 12]) => 15\n  sum([3, 6, 9, 12]) => 15\n  sum([3, 6, 9, 12]) => 15\n  sum([3, 6, 9, 12]) => 15\n  sum([3, 6, 9, 12]) => 15\n  sum([3, 6, 9, 12]) => 15\n  sum([3, 6, 9, 12]) => 15\n  sum([3, 6, 9, 12]) => 15\n  sum([3, 6, 9, 12]) => 15\n  sum([3, 6, 9, 12]) => 15\n  sum([3, 6, 9, 12]) => 15\n  sum([3, 6, 9, 12]) => 15\n  sum([3, 6, 9, 12]) => 15\n  sum([3, 6, 9, 12]) => 15\n  sum([3, 6, 9, 12]) => 15\n  sum([3, 6, 9, 12]) => 15\n  sum([3, 6, 9, 12]) => 15\n  sum([3, 6, 9, 12]) => 15\n  sum([3, 6, 9, 12]) => 15\n  sum([3, 6, 9, 12]) => 15\n  sum([3, 6, 9, 12]) => 15\n  sum([3, 6, 9, 12]) => 15\n  sum([3, 6, 9, 12]) => 15\n  sum([3, 6, 9, 12]) => 15\n  sum([3, 6, 9, 12]) => 15\n  sum([3, 6, 9, 12]) => 15\n  sum([3, 6, 9, 12]) => 15\n  sum([3, 6, 9, 12]) => 15\n  sum([3, 6, 9, 12]) => 15\n  sum([3, 6, 9, 12]) => 15\n  sum([3, 6, 9, 12]) => 15\n  sum([3, 6, 9, 12]) => 15\n  sum([3, 6, 9, 12]) => 15\n  sum([3, 6, 9, 12]) => 15\n  sum([3, 6, 9, 12]) => 15\n  sum([3, 6, 9, 12]) => 15\n  sum([3, 6, 9, 12]) => 15\n  sum([3, 6, 9, 12]) => 15\n  sum([3, 6, 9, 12]) => 15\n  sum([3, 6, 9, 12]) => 15\n  sum([3, 6, 9, 12]) => 15\n  sum([3, 6, 9, 12]) => 15\n  sum([3, 6, 9, 12]) => 15\n  sum([3, 6, 9, 12]) => 15\n  sum([3, 6, 9, 12]) => 15\n  sum([3, 6, 9, 12]) => 15\n  sum([3, 6, 9, 12]) => 15\n  sum([3, 6, 9, 12]) => 15\n  sum([3, 6, 9, 12]) => 15\n  sum([3, 6, 9, 12]) => 15\n  sum([3, 6, 9, 12]) => 15\n  sum([3, 6, 9, 12]) => "}
{"task_id": "JavaScript/111", "prompt": "/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "gc": "<|endoftext|>/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let histogram = {}\n  let letters = test.split(' ').map(x => x.toLowerCase())\n  letters.forEach(letter => {\n    histogram[letter] = histogram[letter] || 0\n    histogram[letter]++\n  })\n  return histogram\n}\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst count = (test) => {\n  let histogram = {}\n  let letters = test.split(' ').map(x => x.toLowerCase())\n  letters.forEach(letter => {\n    histogram[letter] = histogram[letter] || 0\n    histogram[letter]++\n  })\n  return histogram\n}\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst countLetters = (test) => {\n  let histogram = {}\n  let letters = test.split(' ').map(x => x.toLowerCase())\n  letters.forEach(letter => {\n    histogram[letter] = histogram[letter] || 0\n    histogram[letter]++\n  })\n  return histogram\n}\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst countLettersSpace = (test) => {\n  let histogram = {}\n  let letters = test.split(' ').map(x => x.toLowerCase())\n  letters.forEach(letter => {\n    histogram[letter] = histogram[letter] || 0\n    histogram[letter]++\n  })\n  return histogram\n}\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst countLettersSpaceLetters = (test) => {\n  let histogram = {}\n  let letters = test.split(' ').map(x => x.toLowerCase())\n  letters.forEach(letter => {\n    histogram[letter] = histogram[letter] || 0\n    histogram[letter]++\n  })\n  return histogram\n}\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst countLettersSpaceLettersSpace = (test) => {\n  let histogram = {}\n  let letters = test.split(' ').map(x => x.toLowerCase())\n  letters.forEach(letter => {\n    histogram[letter] = histogram[letter] || 0\n    histogram[letter]++\n  })\n  return histogram\n}\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst countLettersSpaceLettersSpaceLetters = (test) => {\n  let histogram = {}\n  let letters = test.split(' ').map(x => x.toLowerCase())\n  letters.forEach(letter => {\n    histogram[letter] = histogram[letter] || 0\n    histogram[letter]++\n  })\n  return histogram\n}\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst countLettersSpaceLettersSpaceLettersSpaceLetters = (test) => {\n  let histogram = {}\n  let letters = test.split(' ').map(x => x.toLowerCase())\n  letters.forEach(letter => {\n    histogram[letter] = histogram[letter] || 0\n    histogram[letter]++\n  })\n  return histogram\n}\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst countLettersSpaceLettersSpaceLettersSpaceLettersSpaceLetters = (test) => {\n  let histogram = {}\n  let letters = test.split(' ').map(x => x.toLowerCase())\n  letters.forEach(letter => {\n    histogram[letter] = histogram[letter] || 0\n    histogram[letter]++\n  })\n  return histogram\n}\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  "}
{"task_id": "JavaScript/112", "prompt": "/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverse_delete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverse_delete", "gc": "<|endoftext|>/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverse_delete = (s, c) => {\n  let result = ''\n  let isPalindrome = false\n  let len = s.length\n  let i = 0\n  let j = 0\n  let temp = ''\n  let temp2 = ''\n  let temp3 = ''\n  let temp4 = ''\n  let temp5 = ''\n  let temp6 = ''\n  let temp7 = ''\n  let temp8 = ''\n  let temp9 = ''\n  let temp10 = ''\n  let temp11 = ''\n  let temp12 = ''\n  let temp13 = ''\n  let temp14 = ''\n  let temp15 = ''\n  let temp16 = ''\n  let temp17 = ''\n  let temp18 = ''\n  let temp19 = ''\n  let temp20 = ''\n  let temp21 = ''\n  let temp22 = ''\n  let temp23 = ''\n  let temp24 = ''\n  let temp25 = ''\n  let temp26 = ''\n  let temp27 = ''\n  let temp28 = ''\n  let temp29 = ''\n  let temp30 = ''\n  let temp31 = ''\n  let temp32 = ''\n  let temp33 = ''\n  let temp34 = ''\n  let temp35 = ''\n  let temp36 = ''\n  let temp37 = ''\n  let temp38 = ''\n  let temp39 = ''\n  let temp40 = ''\n  let temp41 = ''\n  let temp42 = ''\n  let temp43 = ''\n  let temp44 = ''\n  let temp45 = ''\n  let temp46 = ''\n  let temp47 = ''\n  let temp48 = ''\n  let temp49 = ''\n  let temp50 = ''\n  let temp51 = ''\n  let temp52 = ''\n  let temp53 = ''\n  let temp54 = ''\n  let temp55 = ''\n  let temp56 = ''\n  let temp57 = ''\n  let temp58 = ''\n  let temp59 = ''\n  let temp60 = ''\n  let temp61 = ''\n  let temp62 = ''\n  let temp63 = ''\n  let temp64 = ''\n  let temp65 = ''\n  let temp66 = ''\n  let temp67 = ''\n  let temp68 = ''\n  let temp69 = ''\n  let temp70 = ''\n  let temp71 = ''\n  let temp72 = ''\n  let temp73 = ''\n  let temp74 = ''\n  let temp75 = ''\n  let temp76 = ''\n  let temp77 = ''\n  let temp78 = ''\n  let temp79 = ''\n  let temp80 = ''\n  let temp81 = ''\n  let temp82 = ''\n  let temp83 = ''\n  let temp84 = ''\n  let temp85 = ''\n  let temp86 = ''\n  let temp87 = ''\n  let temp88 = ''\n  let temp89 = ''\n  let temp90 = ''\n  let temp91 = ''\n  let temp92 = ''\n  let temp93 = ''\n  let temp94 = ''\n  let temp95 = ''\n  let temp96 = ''\n  let temp97 = ''\n  let temp98 = ''\n  let temp99 = ''\n  let temp100 = ''\n  let temp101 = ''\n  let temp102 = ''\n  let temp103 = ''\n  let temp104 = ''\n  let temp105 = ''\n  let temp106 = ''\n  let temp107 = ''\n  let temp108 = ''\n  let temp109 = ''\n  let temp110 = ''\n  let temp111 = ''\n  let temp112 = ''\n  let temp113 = ''\n  let temp114 = ''\n  let temp115 = ''\n  let temp116 = ''\n  let temp117 = ''\n  let temp118 = ''\n  let temp119 = ''\n  let temp120 = ''\n  let temp121 = ''\n  let temp122 = ''\n  let temp123 = ''\n  let temp124 = ''\n  let temp125 = ''\n  let temp126 = ''\n  let temp127 = ''\n  let temp128 = ''\n  let temp129 = ''\n  let temp130 = ''\n  let temp131 = ''\n  let temp132 = ''\n  let temp133 = ''\n  let temp134 = ''\n  let temp135 = ''\n  let temp136 = ''\n  let temp137 = ''\n  let temp138 = ''\n  let temp139 = ''\n  let temp140 = ''\n  let temp141 = ''\n  let temp142 = ''\n  let temp143 = ''\n  let temp144 = ''\n  let temp145 = ''\n  let temp146 = ''\n  let temp147 = ''\n  let temp148 = ''\n  let temp149 = ''\n  let temp150 = ''\n  let temp151 = ''\n  let temp152 = ''\n  let temp153 = ''\n  let temp154 = ''\n  let temp155 = ''\n  let temp156 = ''\n  let temp157 = ''\n  let temp158 = ''\n  let temp159 = ''\n  let temp160 = ''\n  let temp161 = ''\n  let temp162 = ''\n  let temp163 = ''\n  let temp164 = ''\n  let temp165 = ''\n  let temp166 = ''\n  let temp167 = ''\n  let temp168 = ''\n  let temp169 = ''\n  let temp170 = ''\n  let temp171 = ''\n  let temp172 = ''\n  let temp173 = ''\n  let temp174 = ''\n  let temp175 = ''\n  let temp176 = ''\n  let temp177 = ''\n  let temp178 = ''\n  let temp179 = ''\n  let temp180 = ''\n  let temp181 = ''\n  let temp182 = ''\n  let temp183 = ''\n  let temp184 = ''\n  let temp185 = ''\n  let temp186 = ''\n  let temp187 = ''\n  let temp188 = ''\n  let temp189 = ''\n  let temp190 = ''\n  let temp191 = ''\n  let temp192 = ''\n  let temp193 = ''\n  let temp194 = ''\n  let temp195 = ''\n  let temp196 = ''\n  let temp197 = ''\n  let temp198 = ''\n  let temp199 = ''\n  let temp200 = ''\n  let temp201 = ''\n  let temp202 = ''\n  let temp203 = ''\n  let temp204 = ''\n  let temp205 = ''\n  let temp206 = ''\n  let temp207 = ''\n  let temp208 = ''\n  let temp209 = ''\n  let temp210 = ''\n  let temp211 = ''\n  let temp212 = ''\n  let temp213 = ''\n  let temp214 = ''\n  let temp215 = ''\n  let temp216 = ''\n  let temp217 = ''\n  let temp218 = ''\n  let temp219 = ''\n  let temp220 = ''\n  let temp221 = ''\n  let temp222 = ''\n  let temp223 = ''\n  let temp224 = ''\n  let temp225 = ''\n  let temp226 = ''\n  let temp227 = ''\n  let temp228 = ''\n  let temp229 = ''\n  let temp230 = ''\n  let temp231 = ''\n  let temp232 = ''\n  let temp233 = ''\n  let temp234 = ''\n  let temp235 = ''\n  let temp236 = ''\n  let temp237 = ''\n  let temp238 = ''\n  let temp239 = ''\n  let temp240 = ''\n  let temp241 = ''\n  let temp242 = ''\n  let temp243 = ''\n  let temp244 = ''\n  let temp245 = ''\n  let temp246 = ''\n  let temp247 = ''\n  let temp248 = ''\n  let temp249 = ''\n  let temp250 = ''\n  let temp251 = ''\n  let temp252 = ''\n  let temp253 = ''\n  let temp254 = ''\n  let temp255 = ''\n  let temp256 = ''\n  let temp257 = ''\n  let temp258 = ''\n  let temp259 = ''\n  let temp260 = ''\n  let temp261 = ''\n  let temp262 = ''\n  let temp263 = ''\n  let temp264 = ''\n  let temp265 = ''\n  let temp266 = ''\n  let temp267 = ''\n  let temp268 = ''\n  let temp269 = ''\n  let temp"}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> odd_count(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> odd_count(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst odd_count = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "odd_count", "gc": "<|endoftext|>/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> odd_count(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> odd_count(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst odd_count = (lst) => {\n  let res = [];\n  for (let i = 0; i < lst.length; i++) {\n    let odd = lst[i].match(/\\d+/);\n    if (odd) {\n      res.push(odd.length);\n    }\n  }\n  return res;\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of even elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of even digits in the i'th string of the input.\n\n  >>> even_count(['1234567'])\n  [\"the number of even elements 4n the str4ng 4 of the 4nput.\"]\n  >>> even_count(['3',\"11111111\"])\n  [\"the number of even elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst even_count = (lst) => {\n  let res = [];\n  for (let i = 0; i < lst.length; i++) {\n    let even = lst[i].match(/\\d+/);\n    if (even) {\n      res.push(even.length);\n    }\n  }\n  return res;\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of pairs of adjacent digits in\n  the string i of the input.\" where all the i's should be replaced by the number\n  of pairs of adjacent digits in the i'th string of the input.\n\n  >>> pair_count(['1234567'])\n  [\"the number of pairs of adjacent digits 4n the str4ng 4 of the 4nput.\"]\n  >>> pair_count(['3',\"11111111\"])\n  [\"the number of pairs of adjacent digits 1n the str1ng 1 of the 1nput.\",\n   \"the number of pairs of adjacent digits 8n the str8ng 8 of the 8nput.\"]\n  */\nconst pair_count = (lst) => {\n  let res = [];\n  for (let i = 0; i < lst.length; i++) {\n    let pair = lst[i].match(/\\d+/);\n    if (pair) {\n      res.push(pair.length);\n    }\n  }\n  return res;\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of triples of adjacent digits in\n  the string i of the input.\" where all the i's should be replaced by the number\n  of triples of adjacent digits in the i'th string of the input.\n\n  >>> triples_count(['1234567'])\n  [\"the number of triples of adjacent digits 4n the str4ng 4 of the 4nput.\"]\n  >>> triples_count(['3',\"11111111\"])\n  [\"the number of triples of adjacent digits 1n the str1ng 1 of the 1nput.\",\n   \"the number of triples of adjacent digits 8n the str8ng 8 of the 8nput.\"]\n  */\nconst triples_count = (lst) => {\n  let res = [];\n  for (let i = 0; i < lst.length; i++) {\n    let triple = lst[i].match(/\\d+/);\n    if (triple) {\n      res.push(triple.length);\n    }\n  }\n  return res;\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of fours of adjacent digits in\n  the string i of the input.\" where all the i's should be replaced by the number\n  of fours of adjacent digits in the i'th string of the input.\n\n  >>> fours_count(['1234567'])\n  [\"the number of fours of adjacent digits 4n the str4ng 4 of the 4nput.\"]\n  >>> fours_count(['3',\"11111111\"])\n  [\"the number of fours of adjacent digits 1n the str1ng 1 of the 1nput.\",\n   \"the number of fours of adjacent digits 8n the str8ng 8 of the 8nput.\"]\n  */\nconst fours_count = (lst) => {\n  let res = [];\n  for (let i = 0; i < lst.length; i++) {\n    let four = lst[i].match(/\\d+/);\n    if (four) {\n      res.push(four.length);\n    }\n  }\n  return res;\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of fives of adjacent digits in\n  the string i of the input.\" where all the i's should be replaced by the number\n  of fives of adjacent digits in the i'th string of the input.\n\n  >>> fives_count(['1234567'])\n  [\"the number of fives of adjacent digits 4n the str4ng 4 of the 4nput.\"]\n  >>> fives_count(['3',\"11111111\"])\n  [\"the number of fives of adjacent digits 1n the str1ng 1 of the 1nput.\",\n   \"the number of fives of adjacent digits 8n the str8ng 8 of the 8nput.\"]\n  */\nconst fives_count = (lst) => {\n  let res = [];\n  for (let i = 0; i < lst.length; i++) {\n    let five = lst[i].match(/\\d+/);\n    if (five) {\n      res.push(five.length);\n    }\n  }\n  return res;\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of six of adjacent digits in\n  the string i of the input.\" where all the i's should be replaced by the number\n  of six of adjacent digits in the i'th string of the input.\n\n  >>> six_count(['1234567'])\n  [\"the number of six of adjacent digits 4n the str4ng 4 of the 4nput.\"]\n  >>> six_count(['3',\"11111111\"])\n  [\"the number of six of adjacent digits 1n the str1ng 1 of the 1nput.\",\n   \"the number of six of adjacent digits 8n the str8ng 8 of the 8nput.\"]\n  */\nconst six_count = (lst) => {\n  let res = [];\n  for (let i = 0; i < lst.length; i++) {\n    let six = lst[i].match(/\\d+/);\n    if (six) {\n      res.push(six.length);\n    }\n  }\n  return res;\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of ten of adjacent digits in\n  the string i of the input.\" where all the i's should be replaced by the number\n  of ten of adjacent digits in the i'th string of the input.\n\n  >>> tens_count(['1234567'])\n  [\"the number of ten of adjacent digits 4n the str4ng 4 of the 4nput.\"]\n  >>> tens_count(['3',\"11111111\"])\n  [\"the number of ten of adjacent digits 1n the str1ng 1 of the 1nput.\",\n   \"the number of ten of adjacent digits 8n the str8ng 8 of the 8nput.\"]\n  */\nconst tens_count = (lst) => {\n  let re"}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  min_sub_array_sum([2, 3, 4, 1, 2, 4]) == 1\n  min_sub_array_sum([-1, -2, -3]) == -6\n  */\nconst min_sub_array_sum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "min_sub_array_sum", "gc": "<|endoftext|>/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  min_sub_array_sum([2, 3, 4, 1, 2, 4]) == 1\n  min_sub_array_sum([-1, -2, -3]) == -6\n  */\nconst min_sub_array_sum = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n    if (sum > 0) {\n      return sum;\n    }\n  }\n  return sum;\n};\n\n/*\n  Given an array of integers nums, find the maximum sum of any non-empty sub-array\n  of nums.\n  Example\n  max_sub_array_sum([2, 3, 4, 1, 2, 4]) == 4\n  max_sub_array_sum([-1, -2, -3]) == 6\n  */\nconst max_sub_array_sum = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n    if (sum < 0) {\n      return sum;\n    }\n  }\n  return sum;\n};\n\n/*\n  Given an array of integers nums, find the maximum sum of any non-empty sub-array\n  of nums.\n  Example\n  max_sub_array_sum([2, 3, 4, 1, 2, 4]) == 4\n  max_sub_array_sum([-1, -2, -3]) == 6\n  */\nconst max_sub_array_sum_with_zero = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n    if (sum < 0) {\n      return sum;\n    }\n  }\n  return sum;\n};\n\n/*\n  Given an array of integers nums, find the maximum sum of any non-empty sub-array\n  of nums.\n  Example\n  max_sub_array_sum_with_zero([2, 3, 4, 1, 2, 4]) == 4\n  max_sub_array_sum_with_zero([-1, -2, -3]) == 6\n  */\nconst max_sub_array_sum_with_zero_and_one = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n    if (sum < 0) {\n      return sum;\n    }\n  }\n  return sum;\n};\n\n/*\n  Given an array of integers nums, find the maximum sum of any non-empty sub-array\n  of nums.\n  Example\n  max_sub_array_sum_with_zero_and_one([2, 3, 4, 1, 2, 4]) == 4\n  max_sub_array_sum_with_zero_and_one([-1, -2, -3]) == 6\n  */\nconst max_sub_array_sum_with_zero_and_one_and_zero = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n    if (sum < 0) {\n      return sum;\n    }\n  }\n  return sum;\n};\n\n/*\n  Given an array of integers nums, find the maximum sum of any non-empty sub-array\n  of nums.\n  Example\n  max_sub_array_sum_with_zero_and_one_and_zero([2, 3, 4, 1, 2, 4]) == 4\n  max_sub_array_sum_with_zero_and_one_and_zero([-1, -2, -3]) == 6\n  */\nconst max_sub_array_sum_with_zero_and_one_and_one_and_zero = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n    if (sum < 0) {\n      return sum;\n    }\n  }\n  return sum;\n};\n\n/*\n  Given an array of integers nums, find the maximum sum of any non-empty sub-array\n  of nums.\n  Example\n  max_sub_array_sum_with_zero_and_one_and_one_and_zero([2, 3, 4, 1, 2, 4]) == 4\n  max_sub_array_sum_with_zero_and_one_and_one_and_zero([-1, -2, -3]) == 6\n  */\nconst max_sub_array_sum_with_zero_and_one_and_one_and_one_and_zero = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n    if (sum < 0) {\n      return sum;\n    }\n  }\n  return sum;\n};\n\n/*\n  Given an array of integers nums, find the maximum sum of any non-empty sub-array\n  of nums.\n  Example\n  max_sub_array_sum_with_zero_and_one_and_one_and_one_and_zero([2, 3, 4, 1, 2, 4]) == 4\n  max_sub_array_sum_with_zero_and_one_and_one_and_one_and_zero([-1, -2, -3]) == 6\n  */\nconst max_sub_array_sum_with_zero_and_one_and_one_and_one_and_one_and_zero = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n    if (sum < 0) {\n      return sum;\n    }\n  }\n  return sum;\n};\n\n/*\n  Given an array of integers nums, find the maximum sum of any non-empty sub-array\n  of nums.\n  Example\n  max_sub_array_sum_with_zero_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_one_and_"}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst max_fill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "max_fill", "gc": "<|endoftext|>/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst max_fill = (grid, capacity) => {\n    const n = grid.length;\n    const m = grid[0].length;\n    const result = 0;\n    \n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < m; j++) {\n            if (grid[i][j] === 1) {\n                result += (grid[i][j] === 0)? capacity : max_fill(grid, capacity - 1);\n            }\n        }\n    }\n    return result;\n};\n\n/**\n * You are given a rectangular grid of wells. Each row represents a single well,\n * and each 1 in a row represents a single unit of water.\n * Each well has a corresponding bucket that can be used to extract water from it, \n * and all buckets have the same capacity.\n * Your task is to use the buckets to empty the wells.\n * Output the number of times you need to lower the buckets.\n\n * Example 1:\n *     Input: \n *         grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n *         bucket_capacity : 1\n *     Output: 6\n\n * Example 2:\n *     Input: \n *         grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n *         bucket_capacity : 2\n *     Output: 5\n * \n * Example 3:\n *     Input: \n *         grid : [[0,0,0], [0,0,0]]\n *         bucket_capacity : 5\n *     Output: 0\n * \n * Constraints:\n *     * all wells have the same length\n *     * 1 <= grid.length <= 10^2\n *     * 1 <= grid[:,1].length <= 10^2\n *     * grid[i][j] -> 0 | 1\n *     * 1 <= capacity <= 10\n */\nconst max_fill_in_bucket = (grid, capacity) => {\n    const n = grid.length;\n    const m = grid[0].length;\n    const result = 0;\n    \n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < m; j++) {\n            if (grid[i][j] === 1) {\n                result += (grid[i][j] === 0)? capacity : max_fill_in_bucket(grid, capacity - 1);\n            }\n        }\n    }\n    return result;\n};\n\n/**\n * You are given a rectangular grid of wells. Each row represents a single well,\n * and each 1 in a row represents a single unit of water.\n * Each well has a corresponding bucket that can be used to extract water from it, \n * and all buckets have the same capacity.\n * Your task is to use the buckets to empty the wells.\n * Output the number of times you need to lower the buckets.\n\n * Example 1:\n *     Input: \n *         grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n *         bucket_capacity : 1\n *     Output: 6\n\n * Example 2:\n *     Input: \n *         grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n *         bucket_capacity : 2\n *     Output: 5\n * \n * Example 3:\n *     Input: \n *         grid : [[0,0,0], [0,0,0]]\n *         bucket_capacity : 5\n *     Output: 0\n * \n * Constraints:\n *     * all wells have the same length\n *     * 1 <= grid.length <= 10^2\n *     * 1 <= grid[:,1].length <= 10^2\n *     * grid[i][j] -> 0 | 1\n *     * 1 <= capacity <= 10\n */\nconst max_fill_in_bucket_in_bucket = (grid, capacity) => {\n    const n = grid.length;\n    const m = grid[0].length;\n    const result = 0;\n    \n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < m; j++) {\n            if (grid[i][j] === 1) {\n                result += (grid[i][j] === 0)? capacity : max_fill_in_bucket_in_bucket(grid, capacity - 1);\n            }\n        }\n    }\n    return result;\n};\n\n/**\n * You are given a rectangular grid of wells. Each row represents a single well,\n * and each 1 in a row represents a single unit of water.\n * Each well has a corresponding bucket that can be used to extract water from it, \n * and all buckets have the same capacity.\n * Your task is to use the buckets to empty the wells.\n * Output the number of times you need to lower the buckets.\n\n * Example 1:\n *     Input: \n *         grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n *         bucket_capacity : 1\n *     Output: 6\n\n * Example 2:\n *     Input: \n *         grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n *         bucket_capacity : 2\n *     Output: 5\n * \n * Example 3:\n *     Input: \n *         grid : [[0,0,0], [0,0,0]]\n *         bucket_capacity : 5\n *     Output: 0\n * \n * Constraints:\n *     * all wells have the same length\n *     * 1 <= grid.length <= 10^2\n *     * 1 <= grid[:,1].length <= 10^2\n *     * grid[i][j] -> 0 | 1\n *     * 1 <= capacity <= 10\n */\nconst max_fill_in_bucket_in_bucket_in_bucket = (grid, capacity) => {\n    const n = grid.length;\n    const m = grid[0].length;\n    const result = 0;\n    \n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < m; j++) {\n            if (grid[i][j] === 1) {\n                result += (grid[i][j] === 0)? capacity : max_fill_in_bucket_in_bucket_in_bucket(grid, capacity - 1);\n            }\n        }\n    }\n    return result;\n};\n\n/**\n * You are given a rectangular grid of wells. Each row represents a single well,\n * and each 1 in a row represents a single unit of water.\n * Each well has a corresponding bucket that can be used to extract water from it, \n * and all buckets have the same capacity.\n * Your task is to use the buckets to empty the wells.\n * Output the number of times you need to lower the buckets.\n\n * Example 1:\n *     Input: \n *         grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n *         bucket_capacity : 1\n *     Output: 6\n\n * Example 2:\n *     Input: \n *         grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n *         bucket_capacity : 2\n *     Output: 5\n * \n * Example 3:\n *     Input: \n *         grid : [[0,0,0], [0,0,0]]\n *         bucket_capacity : 5\n *     Output: 0\n * \n * Constraints:\n *     * all wells have the same length\n *     * 1 <= grid.length <= 10^2\n *     * 1 <= grid[:,1].length <= 10^2\n *     * grid[i][j] -> 0 | 1\n *     * 1 <= capacity <= 10\n */\nconst max_fill_in_bucket_in_bucket_in_bucket_in_bucket = (grid, capacity) => {\n    const n = grid.length;\n    const m = grid[0].length;\n    const result = 0;\n    \n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < m; j++) {\n            if (grid[i][j] === 1) {\n                result += (grid[i][j] === 0)? capacity : max_fill_in_bucket_in_bucket_in_bucket_in_bucket(grid, capacity - 1);\n            }\n        }\n    }\n    return result;\n};\n\n/**\n * You are given a rectangular grid of wells. Each row represents a single well,\n"}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sort_array = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sort_array", "gc": "<|endoftext|>/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sort_array = (arr) => {\n  const sorted = arr.sort((a, b) => a - b);\n  return sorted;\n};\n\nconst sort_array_binary = (arr) => {\n  const sorted = sort_array(arr);\n  const ones = sorted.filter(a => a === 1);\n  const zeros = sorted.filter(a => a === 0);\n  const ones_sorted = sort_array(ones);\n  const zeros_sorted = sort_array(zeros);\n  return ones_sorted.concat(zeros_sorted);\n};\n\nconst sort_array_decimal = (arr) => {\n  const sorted = sort_array(arr);\n  const ones = sorted.filter(a => a === 1);\n  const zeros = sorted.filter(a => a === 0);\n  const ones_sorted = sort_array(ones);\n  const zeros_sorted = sort_array(zeros);\n  return ones_sorted.concat(zeros_sorted);\n};\n\nconst sort_array_decimal_reversed = (arr) => {\n  const sorted = sort_array(arr);\n  const ones = sorted.filter(a => a === 1);\n  const zeros = sorted.filter(a => a === 0);\n  const ones_sorted = sort_array(ones);\n  const zeros_sorted = sort_array(zeros);\n  return ones_sorted.concat(zeros_sorted).reverse();\n};\n\nconst sort_array_decimal_reversed_binary = (arr) => {\n  const sorted = sort_array_binary(arr);\n  const ones = sorted.filter(a => a === 1);\n  const zeros = sorted.filter(a => a === 0);\n  const ones_sorted = sort_array_binary(ones);\n  const zeros_sorted = sort_array_binary(zeros);\n  return ones_sorted.concat(zeros_sorted).reverse();\n};\n\nconst sort_array_decimal_reversed_decimal = (arr) => {\n  const sorted = sort_array_decimal(arr);\n  const ones = sorted.filter(a => a === 1);\n  const zeros = sorted.filter(a => a === 0);\n  const ones_sorted = sort_array_decimal(ones);\n  const zeros_sorted = sort_array_decimal(zeros);\n  return ones_sorted.concat(zeros_sorted).reverse();\n};\n\nconst sort_array_decimal_reversed_decimal_reversed = (arr) => {\n  const sorted = sort_array_decimal_reversed(arr);\n  const ones = sorted.filter(a => a === 1);\n  const zeros = sorted.filter(a => a === 0);\n  const ones_sorted = sort_array_decimal_reversed(ones);\n  const zeros_sorted = sort_array_decimal_reversed(zeros);\n  return ones_sorted.concat(zeros_sorted).reverse();\n};\n\nconst sort_array_decimal_reversed_decimal_reversed_binary = (arr) => {\n  const sorted = sort_array_decimal_reversed_binary(arr);\n  const ones = sorted.filter(a => a === 1);\n  const zeros = sorted.filter(a => a === 0);\n  const ones_sorted = sort_array_decimal_reversed_binary(ones);\n  const zeros_sorted = sort_array_decimal_reversed_binary(zeros);\n  return ones_sorted.concat(zeros_sorted).reverse();\n};\n\nconst sort_array_decimal_reversed_decimal_reversed_decimal = (arr) => {\n  const sorted = sort_array_decimal_reversed_decimal(arr);\n  const ones = sorted.filter(a => a === 1);\n  const zeros = sorted.filter(a => a === 0);\n  const ones_sorted = sort_array_decimal_reversed_decimal(ones);\n  const zeros_sorted = sort_array_decimal_reversed_decimal(zeros);\n  return ones_sorted.concat(zeros_sorted).reverse();\n};\n\nconst sort_array_decimal_reversed_decimal_reversed_decimal_reversed = (arr) => {\n  const sorted = sort_array_decimal_reversed_decimal_reversed(arr);\n  const ones = sorted.filter(a => a === 1);\n  const zeros = sorted.filter(a => a === 0);\n  const ones_sorted = sort_array_decimal_reversed_decimal_reversed(ones);\n  const zeros_sorted = sort_array_decimal_reversed_decimal_reversed(zeros);\n  return ones_sorted.concat(zeros_sorted).reverse();\n};\n\nconst sort_array_decimal_reversed_decimal_reversed_decimal_reversed_binary = (arr) => {\n  const sorted = sort_array_decimal_reversed_decimal_reversed_binary(arr);\n  const ones = sorted.filter(a => a === 1);\n  const zeros = sorted.filter(a => a === 0);\n  const ones_sorted = sort_array_decimal_reversed_decimal_reversed_binary(ones);\n  const zeros_sorted = sort_array_decimal_reversed_decimal_reversed_binary(zeros);\n  return ones_sorted.concat(zeros_sorted).reverse();\n};\n\nconst sort_array_decimal_reversed_decimal_reversed_decimal_reversed_decimal = (arr) => {\n  const sorted = sort_array_decimal_reversed_decimal_reversed_decimal(arr);\n  const ones = sorted.filter(a => a === 1);\n  const zeros = sorted.filter(a => a === 0);\n  const ones_sorted = sort_array_decimal_reversed_decimal_reversed_decimal(ones);\n  const zeros_sorted = sort_array_decimal_reversed_decimal_reversed_decimal(zeros);\n  return ones_sorted.concat(zeros_sorted).reverse();\n};\n\nconst sort_array_decimal_reversed_decimal_reversed_decimal_reversed_decimal_reversed = (arr) => {\n  const sorted = sort_array_decimal_reversed_decimal_reversed_decimal_reversed(arr);\n  const ones = sorted.filter(a => a === 1);\n  const zeros = sorted.filter(a => a === 0);\n  const ones_sorted = sort_array_decimal_reversed_decimal_reversed_decimal_reversed(ones);\n  const zeros_sorted = sort_array_decimal_reversed_decimal_reversed_decimal_reversed(zeros);\n  return ones_sorted.concat(zeros_sorted).reverse();\n};\n\nconst sort_array_decimal_reversed_decimal_reversed_decimal_reversed_decimal_reversed_binary = (arr) => {\n  const sorted = sort_array_decimal_reversed_decimal_reversed_decimal_reversed_binary(arr);\n  const ones = sorted.filter(a => a === 1);\n  const zeros = sorted.filter(a => a === 0);\n  const ones_sorted = sort_array_decimal_reversed_decimal_reversed_decimal_reversed_binary(ones);\n  const zeros_sorted = sort_array_decimal_reversed_decimal_reversed_decimal_reversed_binary(zeros);\n  return ones_sorted.concat(zeros_sorted).reverse();\n};\n\nconst sort_array_decimal_reversed_decimal_reversed_decimal_reversed_decimal_reversed_decimal = (arr) => {\n  const sorted = sort_array_decimal_reversed_decimal_reversed_decimal_reversed_decimal(arr);\n  const ones = sorted.filter(a => a === 1);\n  const zeros = sorted.filter(a => a === 0);\n  const ones_sorted = sort_array_decimal_reversed_decimal_reversed_decimal_reversed_decimal(ones);\n  const zeros_sorted = sort_array_decimal_reversed_decimal_reversed_decimal_reversed_decimal(zeros);\n  return ones_sorted.concat(zeros_sorted).reverse();\n};\n\nconst sort_array_decimal_reversed_decimal_reversed_decimal_reversed_decimal_reversed_decimal_reversed = (arr) => {\n  const sorted = sort_array_decimal_reversed_decimal_reversed_decimal_reversed_decimal_reversed(arr);\n  const ones = sorted.filter(a => a === 1);\n  const zeros = sorted.filter(a => a === 0);\n  const ones_sorted = sort_array_decimal_"}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  select_words(\"simple white space\", 2) ==> []\n  select_words(\"Hello world\", 4) ==> [\"world\"]\n  select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst select_words = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "select_words", "gc": "<|endoftext|>/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  select_words(\"simple white space\", 2) ==> []\n  select_words(\"Hello world\", 4) ==> [\"world\"]\n  select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst select_words = (s, n) => {\n  let words = [];\n  let word = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let count = 0;\n  let wordCount = 0;\n  let wordCount2 = 0;\n  let wordCount3 = 0;\n  let wordCount4 = 0;\n  let wordCount5 = 0;\n  let wordCount6 = 0;\n  let wordCount7 = 0;\n  let wordCount8 = 0;\n  let wordCount9 = 0;\n  let wordCount10 = 0;\n  let wordCount11 = 0;\n  let wordCount12 = 0;\n  let wordCount13 = 0;\n  let wordCount14 = 0;\n  let wordCount15 = 0;\n  let wordCount16 = 0;\n  let wordCount17 = 0;\n  let wordCount18 = 0;\n  let wordCount19 = 0;\n  let wordCount20 = 0;\n  let wordCount21 = 0;\n  let wordCount22 = 0;\n  let wordCount23 = 0;\n  let wordCount24 = 0;\n  let wordCount25 = 0;\n  let wordCount26 = 0;\n  let wordCount27 = 0;\n  let wordCount28 = 0;\n  let wordCount29 = 0;\n  let wordCount30 = 0;\n  let wordCount31 = 0;\n  let wordCount32 = 0;\n  let wordCount33 = 0;\n  let wordCount34 = 0;\n  let wordCount35 = 0;\n  let wordCount36 = 0;\n  let wordCount37 = 0;\n  let wordCount38 = 0;\n  let wordCount39 = 0;\n  let wordCount40 = 0;\n  let wordCount41 = 0;\n  let wordCount42 = 0;\n  let wordCount43 = 0;\n  let wordCount44 = 0;\n  let wordCount45 = 0;\n  let wordCount46 = 0;\n  let wordCount47 = 0;\n  let wordCount48 = 0;\n  let wordCount49 = 0;\n  let wordCount50 = 0;\n  let wordCount51 = 0;\n  let wordCount52 = 0;\n  let wordCount53 = 0;\n  let wordCount54 = 0;\n  let wordCount55 = 0;\n  let wordCount56 = 0;\n  let wordCount57 = 0;\n  let wordCount58 = 0;\n  let wordCount59 = 0;\n  let wordCount60 = 0;\n  let wordCount61 = 0;\n  let wordCount62 = 0;\n  let wordCount63 = 0;\n  let wordCount64 = 0;\n  let wordCount65 = 0;\n  let wordCount66 = 0;\n  let wordCount67 = 0;\n  let wordCount68 = 0;\n  let wordCount69 = 0;\n  let wordCount70 = 0;\n  let wordCount71 = 0;\n  let wordCount72 = 0;\n  let wordCount73 = 0;\n  let wordCount74 = 0;\n  let wordCount75 = 0;\n  let wordCount76 = 0;\n  let wordCount77 = 0;\n  let wordCount78 = 0;\n  let wordCount79 = 0;\n  let wordCount80 = 0;\n  let wordCount81 = 0;\n  let wordCount82 = 0;\n  let wordCount83 = 0;\n  let wordCount84 = 0;\n  let wordCount85 = 0;\n  let wordCount86 = 0;\n  let wordCount87 = 0;\n  let wordCount88 = 0;\n  let wordCount89 = 0;\n  let wordCount90 = 0;\n  let wordCount91 = 0;\n  let wordCount92 = 0;\n  let wordCount93 = 0;\n  let wordCount94 = 0;\n  let wordCount95 = 0;\n  let wordCount96 = 0;\n  let wordCount97 = 0;\n  let wordCount98 = 0;\n  let wordCount99 = 0;\n  let wordCount100 = 0;\n  let wordCount101 = 0;\n  let wordCount102 = 0;\n  let wordCount103 = 0;\n  let wordCount104 = 0;\n  let wordCount105 = 0;\n  let wordCount106 = 0;\n  let wordCount107 = 0;\n  let wordCount108 = 0;\n  let wordCount109 = 0;\n  let wordCount110 = 0;\n  let wordCount111 = 0;\n  let wordCount112 = 0;\n  let wordCount113 = 0;\n  let wordCount114 = 0;\n  let wordCount115 = 0;\n  let wordCount116 = 0;\n  let wordCount117 = 0;\n  let wordCount118 = 0;\n  let wordCount119 = 0;\n  let wordCount120 = 0;\n  let wordCount121 = 0;\n  let wordCount122 = 0;\n  let wordCount123 = 0;\n  let wordCount124 = 0;\n  let wordCount125 = 0;\n  let wordCount126 = 0;\n  let wordCount127 = 0;\n  let wordCount128 = 0;\n  let wordCount129 = 0;\n  let wordCount130 = 0;\n  let wordCount131 = 0;\n  let wordCount132 = 0;\n  let wordCount133 = 0;\n  let wordCount134 = 0;\n  let wordCount135 = 0;\n  let wordCount136 = 0;\n  let wordCount137 = 0;\n  let wordCount138 = 0;\n  let wordCount139 = 0;\n  let wordCount140 = 0;\n  let wordCount141 = 0;\n  let wordCount142 = 0;\n  let wordCount143 = 0;\n  let wordCount144 = 0;\n  let wordCount145 = 0;\n  let wordCount146 = 0;\n  let wordCount147 = 0;\n  let wordCount148 = 0;\n  let wordCount149 = 0;\n  let wordCount150 = 0;\n  let wordCount151 = 0;\n  let wordCount152 = 0;\n  let wordCount153 = 0;\n  let wordCount154 = 0;\n  let wordCount155 = 0;\n  let wordCount156 = 0;\n  let wordCount157 = 0;\n  let wordCount158 = 0;\n  let wordCount159 = 0;\n  let wordCount160 = 0;\n  let wordCount161 = 0;\n  let wordCount162 = 0;\n  let wordCount163 = 0;\n  let wordCount164 = 0;\n  let wordCount165 = 0;\n  let wordCount166 = 0;\n  let wordCount167 = 0;\n  let wordCount168 = 0;\n  let wordCount169 = 0;\n  let wordCount170 = 0;\n  let wordCount171 = 0;\n  let wordCount172 = 0;\n  let wordCount173 = 0;\n  let wordCount174 = 0;\n  let wordCount175 = 0;\n  let wordCount176 = 0;\n  let wordCount177 = 0;\n  let wordCount178 = 0;\n  let wordCount179 = 0;\n  let wordCount180 = 0;\n  let wordCount181 = 0;\n  let wordCount182 = 0;\n  let wordCount183 = 0;\n  let wordCount184 = 0;\n  let wordCount185 = 0;\n  let wordCount186 = 0;\n  let wordCount187 = 0;\n  let wordCount188 = 0;\n  let wordCount189 = 0;\n  let wordCount190 = 0;\n  let wordCount191 = 0;\n  let wordCount192 = 0;\n  let wordCount193 = 0;\n  let wordCount194 = 0;\n  let wordCount195 = 0;\n  let wordCount196 = 0;\n  let wordCount197 = 0;\n  let wordCount198 = 0;\n  let wordCount199 = 0;\n  let wordCount200 = 0;\n  let wordCount201 = 0;\n  let wordCount202 = 0;\n  let wordCount203 = 0;\n  let wordCount204 = 0;\n  let wordCount205 = 0;\n  let wordCount206 = 0;\n  let wordCount207 = 0;\n  let wordCount208 = 0;\n  let wordCount209 = 0;\n  let wordCount210 = 0;\n  let wordCount211 = 0;\n  let wordCount212 = 0;\n  let wordCount213 = 0;\n  let wordCount214 = 0;\n  let wordCount215 = 0;\n  let wordCount216 = 0;\n  let wordCount217 = 0;\n  let wordCount218 = 0;\n  let wordCount219 = 0;\n  let wordCount220 = 0;\n  let wordCount221 = 0;\n  let wordCount222 = 0;\n  let wordCount223 = 0;\n  let wordCount224 = 0;\n  let wordCount225 = 0;\n  let wordCount"}
{"task_id": "JavaScript/118", "prompt": "/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  get_closest_vowel(\"yogurt\") ==> \"u\"\n  get_closest_vowel(\"FULL\") ==> \"U\"\n  get_closest_vowel(\"quick\") ==> \"\"\n  get_closest_vowel(\"ab\") ==> \"\"\n  */\nconst get_closest_vowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "get_closest_vowel", "gc": "<|endoftext|>/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  get_closest_vowel(\"yogurt\") ==> \"u\"\n  get_closest_vowel(\"FULL\") ==> \"U\"\n  get_closest_vowel(\"quick\") ==> \"\"\n  get_closest_vowel(\"ab\") ==> \"\"\n  */\nconst get_closest_vowel = (word) => {\n  let vowel_left = get_closest_vowel_left(word);\n  let vowel_right = get_closest_vowel_right(word);\n  let vowel_left_index = vowel_left.indexOf(vowel_left);\n  let vowel_right_index = vowel_right.indexOf(vowel_right);\n  let vowel_left_index = vowel_left_index + 1;\n  let vowel_right_index = vowel_right_index + 1;\n  let vowel_left_index = vowel_left_index > vowel_right_index? vowel_left_index : vowel_right_index;\n  let vowel_right_index = vowel_right_index > vowel_left_index? vowel_right_index : vowel_left_index;\n  let vowel_left_index = vowel_left_index > vowel_right_index? vowel_left_index : vowel_right_index;\n  let vowel_right_index = vowel_right_index > vowel_left_index? vowel_right_index : vowel_left_index;\n  let vowel_left_index = vowel_left_index > vowel_right_index? vowel_left_index : vowel_right_index;\n  let vowel_right_index = vowel_right_index > vowel_left_index? vowel_right_index : vowel_left_index;\n  let vowel_left_index = vowel_left_index > vowel_right_index? vowel_left_index : vowel_right_index;\n  let vowel_right_index = vowel_right_index > vowel_left_index? vowel_right_index : vowel_left_index;\n  let vowel_left_index = vowel_left_index > vowel_right_index? vowel_left_index : vowel_right_index;\n  let vowel_right_index = vowel_right_index > vowel_left_index? vowel_right_index : vowel_left_index;\n  let vowel_left_index = vowel_left_index > vowel_right_index? vowel_left_index : vowel_right_index;\n  let vowel_right_index = vowel_right_index > vowel_left_index? vowel_right_index : vowel_left_index;\n  let vowel_left_index = vowel_left_index > vowel_right_index? vowel_left_index : vowel_right_index;\n  let vowel_right_index = vowel_right_index > vowel_left_index? vowel_right_index : vowel_left_index;\n  let vowel_left_index = vowel_left_index > vowel_right_index? vowel_left_index : vowel_right_index;\n  let vowel_right_index = vowel_right_index > vowel_left_index? vowel_right_index : vowel_left_index;\n  let vowel_left_index = vowel_left_index > vowel_right_index? vowel_left_index : vowel_right_index;\n  let vowel_right_index = vowel_right_index > vowel_left_index? vowel_right_index : vowel_left_index;\n  let vowel_left_index = vowel_left_index > vowel_right_index? vowel_left_index : vowel_right_index;\n  let vowel_right_index = vowel_right_index > vowel_left_index? vowel_right_index : vowel_left_index;\n  let vowel_left_index = vowel_left_index > vowel_right_index? vowel_left_index : vowel_right_index;\n  let vowel_right_index = vowel_right_index > vowel_left_index? vowel_right_index : vowel_left_index;\n  let vowel_left_index = vowel_left_index > vowel_right_index? vowel_left_index : vowel_right_index;\n  let vowel_right_index = vowel_right_index > vowel_left_index? vowel_right_index : vowel_left_index;\n  let vowel_left_index = vowel_left_index > vowel_right_index? vowel_left_index : vowel_right_index;\n  let vowel_right_index = vowel_right_index > vowel_left_index? vowel_right_index : vowel_left_index;\n  let vowel_left_index = vowel_left_index > vowel_right_index? vowel_left_index : vowel_right_index;\n  let vowel_right_index = vowel_right_index > vowel_left_index? vowel_right_index : vowel_left_index;\n  let vowel_left_index = vowel_left_index > vowel_right_index? vowel_left_index : vowel_right_index;\n  let vowel_right_index = vowel_right_index > vowel_left_index? vowel_right_index : vowel_left_index;\n  let vowel_left_index = vowel_left_index > vowel_right_index? vowel_left_index : vowel_right_index;\n  let vowel_right_index = vowel_right_index > vowel_left_index? vowel_right_index : vowel_left_index;\n  let vowel_left_index = vowel_left_index > vowel_right_index? vowel_left_index : vowel_right_index;\n  let vowel_right_index = vowel_right_index > vowel_left_index? vowel_right_index : vowel_left_index;\n  let vowel_left_index = vowel_left_index > vowel_right_index? vowel_left_index : vowel_right_index;\n  let vowel_right_index = vowel_right_index > vowel_left_index? vowel_right_index : vowel_left_index;\n  let vowel_left_index = vowel_left_index > vowel_right_index? vowel_left_index : vowel_right_index;\n  let vowel_right_index = vowel_right_index > vowel_left_index? vowel_right_index : vowel_left_index;\n  let vowel_left_index = vowel_left_index > vowel_right_index? vowel_left_index : vowel_right_index;\n  let vowel_right_index = vowel_right_index > vowel_left_index? vowel_right_index : vowel_left_index;\n  let vowel_left_index = vowel_left_index > vowel_right_index? vowel_left_index : vowel_right_index;\n  let vowel_right_index = vowel_right_index > vowel_left_index? vowel_right_index : vowel_left_index;\n  let vowel_left_index = vowel_left_index > vowel_right_index? vowel_left_index : vowel_right_index;\n  let vowel_right_index = vowel_right_index > vowel_left_index? vowel_right_index : vowel_left_index;\n  let vowel_left_index = vowel_left_index > vowel_right_index? vowel_left_index : vowel_right_index;\n  let vowel_right_index = vowel_right_index > vowel_left_index? vowel_right_index : vowel_left_index;\n  let vowel_left_index = vowel_left_index > vowel_right_index? vowel_left_index : vowel_right_index;\n  let vowel_right_index = vowel_right_index > vowel_left_index? vowel_right_index : vowel_left_index;\n  let vowel_left_index = vowel_left_index > vowel_right_index? vowel_left_index : vowel_right_index;\n  let vowel_right_index = vowel_right_index > vowel_left_index? vowel_right_index : vowel_left_index;\n  let vowel_left_index = vowel_left_index > vowel_right_index? vowel_left_index : vowel_right_index;\n  let vowel_right_index = vowel_right_index > vowel_left_index? vowel_right_index : vowel_left_index;\n  let vowel_left_index = vowel_left_index > vowel_right_index? vowel_left_index : vowel_"}
{"task_id": "JavaScript/119", "prompt": "/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  match_parens(['()(', ')']) == 'Yes'\n  match_parens([')', ')']) == 'No'\n  */\nconst match_parens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "match_parens", "gc": "<|endoftext|>/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  match_parens(['()(', ')']) == 'Yes'\n  match_parens([')', ')']) == 'No'\n  */\nconst match_parens = (lst) => {\n  const stack = [lst[0]];\n  while (stack.length) {\n    const top = stack.pop();\n    if (top === '(') {\n      stack.push(top);\n    } else if (top === ')') {\n      stack.pop();\n    } else {\n      return false;\n    }\n  }\n  return true;\n};\n\n/* You are given a string S of length N, and an integer K. You are also\n  given a string T of length N. Your job is to check if T can be formed by removing\n  K characters from S. For example, if S is '(())', and K is 3, then T can be\n  formed by removing 3 characters from S. Return 'Yes' if T can be formed,\n  and 'No' otherwise.\n  Examples:\n  remove_K('(())', 3) == 'Yes'\n  remove_K('(())', 4) == 'No'\n  */\nconst remove_K = (str, k) => {\n  const len = str.length;\n  const stack = [str[0]];\n  while (stack.length) {\n    const top = stack.pop();\n    if (top === '(') {\n      stack.push(top);\n    } else if (top === ')') {\n      stack.pop();\n    } else if (top === '(' || top === ')') {\n      if (stack.length >= k) {\n        return false;\n      } else {\n        stack.push(top);\n      }\n    } else {\n      return false;\n    }\n  }\n  return true;\n};\n\n/* You are given a string S of length N, and an integer K. You are also\n  given a string T of length N. Your job is to check if T can be formed by removing\n  K characters from S. For example, if S is '(())', and K is 3, then T can be\n  formed by removing 3 characters from S. Return 'Yes' if T can be formed,\n  and 'No' otherwise.\n  Examples:\n  remove_K('(())', 3) == 'Yes'\n  remove_K('(())', 4) == 'No'\n  */\nconst remove_K2 = (str, k) => {\n  const len = str.length;\n  const stack = [str[0]];\n  while (stack.length) {\n    const top = stack.pop();\n    if (top === '(') {\n      stack.push(top);\n    } else if (top === ')') {\n      stack.pop();\n    } else if (top === '(' || top === ')') {\n      if (stack.length >= k) {\n        return false;\n      } else {\n        stack.push(top);\n      }\n    } else {\n      return false;\n    }\n  }\n  return true;\n};\n\n/* You are given a string S of length N, and an integer K. You are also\n  given a string T of length N. Your job is to check if T can be formed by removing\n  K characters from S. For example, if S is '(())', and K is 3, then T can be\n  formed by removing 3 characters from S. Return 'Yes' if T can be formed,\n  and 'No' otherwise.\n  Examples:\n  remove_K('(())', 3) == 'Yes'\n  remove_K('(())', 4) == 'No'\n  */\nconst remove_K3 = (str, k) => {\n  const len = str.length;\n  const stack = [str[0]];\n  while (stack.length) {\n    const top = stack.pop();\n    if (top === '(') {\n      stack.push(top);\n    } else if (top === ')') {\n      stack.pop();\n    } else if (top === '(' || top === ')') {\n      if (stack.length >= k) {\n        return false;\n      } else {\n        stack.push(top);\n      }\n    } else {\n      return false;\n    }\n  }\n  return true;\n};\n\n/* You are given a string S of length N, and an integer K. You are also\n  given a string T of length N. Your job is to check if T can be formed by removing\n  K characters from S. For example, if S is '(())', and K is 3, then T can be\n  formed by removing 3 characters from S. Return 'Yes' if T can be formed,\n  and 'No' otherwise.\n  Examples:\n  remove_K('(())', 3) == 'Yes'\n  remove_K('(())', 4) == 'No'\n  */\nconst remove_K4 = (str, k) => {\n  const len = str.length;\n  const stack = [str[0]];\n  while (stack.length) {\n    const top = stack.pop();\n    if (top === '(') {\n      stack.push(top);\n    } else if (top === ')') {\n      stack.pop();\n    } else if (top === '(' || top === ')') {\n      if (stack.length >= k) {\n        return false;\n      } else {\n        stack.push(top);\n      }\n    } else {\n      return false;\n    }\n  }\n  return true;\n};\n\n/* You are given a string S of length N, and an integer K. You are also\n  given a string T of length N. Your job is to check if T can be formed by removing\n  K characters from S. For example, if S is '(())', and K is 3, then T can be\n  formed by removing 3 characters from S. Return 'Yes' if T can be formed,\n  and 'No' otherwise.\n  Examples:\n  remove_K('(())', 3) == 'Yes'\n  remove_K('(())', 4) == 'No'\n  */\nconst remove_K5 = (str, k) => {\n  const len = str.length;\n  const stack = [str[0]];\n  while (stack.length) {\n    const top = stack.pop();\n    if (top === '(') {\n      stack.push(top);\n    } else if (top === ')') {\n      stack.pop();\n    } else if (top === '(' || top === ')') {\n      if (stack.length >= k) {\n        return false;\n      } else {\n        stack.push(top);\n      }\n    } else {\n      return false;\n    }\n  }\n  return true;\n};\n\n/* You are given a string S of length N, and an integer K. You are also\n  given a string T of length N. Your job is to check if T can be formed by removing\n  K characters from S. For example, if S is '(())', and K is 3, then T can be\n  formed by removing 3 characters from S. Return 'Yes' if T can be formed,\n  and 'No' otherwise.\n  Examples:\n  remove_K('(())', 3) == 'Yes'\n  remove_K('(())', 4) == 'No'\n  */\nconst remove_K6 = (str, k) => {\n  const len = str.length;\n  const stack = [str[0]];\n  while (stack.length) {\n    const top = stack.pop();\n    if (top === '(') {\n      stack.push(top);\n    } else if (top === ')') {\n      stack.pop();\n    } else if (top === '(' || top === ')') {\n      if (stack.length >= k) {\n        return false;\n      } else {\n        stack.push(top);\n      }\n    } else {\n      return false;\n    }\n  }\n  return true;\n};\n\n/* You are given a string S of length N, and an integer K. You are also\n  given a string T of length N. Your job is to check if T can be formed by removing\n  K characters from S. For example, if S is '(())', and K is 3, then T can be\n  formed by removing 3 characters from S. Return 'Yes' if T can be formed,\n  and 'No' otherwise.\n  Examples:\n  remove_K('(())', 3) == 'Yes'\n  remove_K('(())', 4) == 'No'\n  */\nconst remove_K7 = (str, "}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "gc": "<|endoftext|>/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  const len = arr.length;\n  let max = 0;\n  let maxIdx = 0;\n  for (let i = 0; i < len; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n      maxIdx = i;\n    }\n  }\n  return [arr[maxIdx], maxIdx];\n};\n\n// https://leetcode.com/problems/find-the-number-of-distinct-numbers-in-an-array/\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar countDistinct = function(nums) {\n  let count = 0;\n  let curr = nums[0];\n  while (curr) {\n    if (nums.indexOf(curr)!== -1) {\n      count++;\n    }\n    curr = nums.shift();\n  }\n  return count;\n};\n\n// https://leetcode.com/problems/find-the-number-of-distinct-numbers-in-an-array/\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar countDistinct2 = function(nums) {\n  let count = 0;\n  let curr = nums[0];\n  while (curr) {\n    if (nums.indexOf(curr)!== -1) {\n      count++;\n    }\n    curr = nums.shift();\n  }\n  return count;\n};\n\n// https://leetcode.com/problems/find-the-number-of-distinct-numbers-in-an-array/\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar countDistinct3 = function(nums) {\n  let count = 0;\n  let curr = nums[0];\n  while (curr) {\n    if (nums.indexOf(curr)!== -1) {\n      count++;\n    }\n    curr = nums.shift();\n  }\n  return count;\n};\n\n// https://leetcode.com/problems/find-the-number-of-distinct-numbers-in-an-array/\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar countDistinct4 = function(nums) {\n  let count = 0;\n  let curr = nums[0];\n  while (curr) {\n    if (nums.indexOf(curr)!== -1) {\n      count++;\n    }\n    curr = nums.shift();\n  }\n  return count;\n};\n\n// https://leetcode.com/problems/find-the-number-of-distinct-numbers-in-an-array/\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar countDistinct5 = function(nums) {\n  let count = 0;\n  let curr = nums[0];\n  while (curr) {\n    if (nums.indexOf(curr)!== -1) {\n      count++;\n    }\n    curr = nums.shift();\n  }\n  return count;\n};\n\n// https://leetcode.com/problems/find-the-number-of-distinct-numbers-in-an-array/\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar countDistinct6 = function(nums) {\n  let count = 0;\n  let curr = nums[0];\n  while (curr) {\n    if (nums.indexOf(curr)!== -1) {\n      count++;\n    }\n    curr = nums.shift();\n  }\n  return count;\n};\n\n// https://leetcode.com/problems/find-the-number-of-distinct-numbers-in-an-array/\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar countDistinct7 = function(nums) {\n  let count = 0;\n  let curr = nums[0];\n  while (curr) {\n    if (nums.indexOf(curr)!== -1) {\n      count++;\n    }\n    curr = nums.shift();\n  }\n  return count;\n};\n\n// https://leetcode.com/problems/find-the-number-of-distinct-numbers-in-an-array/\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar countDistinct8 = function(nums) {\n  let count = 0;\n  let curr = nums[0];\n  while (curr) {\n    if (nums.indexOf(curr)!== -1) {\n      count++;\n    }\n    curr = nums.shift();\n  }\n  return count;\n};\n\n// https://leetcode.com/problems/find-the-number-of-distinct-numbers-in-an-array/\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar countDistinct9 = function(nums) {\n  let count = 0;\n  let curr = nums[0];\n  while (curr) {\n    if (nums.indexOf(curr)!== -1) {\n      count++;\n    }\n    curr = nums.shift();\n  }\n  return count;\n};\n\n// https://leetcode.com/problems/find-the-number-of-distinct-numbers-in-an-array/\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar countDistinct10 = function(nums) {\n  let count = 0;\n  let curr = nums[0];\n  while (curr) {\n    if (nums.indexOf(curr)!== -1) {\n      count++;\n    }\n    curr = nums.shift();\n  }\n  return count;\n};\n\n// https://leetcode.com/problems/find-the-number-of-distinct-numbers-in-an-array/\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar countDistinct11 = function(nums) {\n  let count = 0;\n  let curr = nums[0];\n  while (curr) {\n    if (nums.indexOf(curr)!== -1) {\n      count++;\n    }\n    curr = nums.shift();\n  }\n  return count;\n};\n\n// https://leetcode.com/problems/find-the-number-of-distinct-numbers-in-an-array/\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n"}
{"task_id": "JavaScript/121", "prompt": "/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "gc": "<|endoftext|>/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  lst.forEach((num) => {\n    if (num % 2 === 0) {\n      sum += num;\n    }\n  });\n  return sum;\n};\n\nmodule.exports = {\n  solution,\n};\n\n},{}],4:[function(require,module,exports){\n/*Given a non-empty list of integers, return the sum of all of the even elements that are in odd positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  lst.forEach((num) => {\n    if (num % 2!== 0) {\n      sum += num;\n    }\n  });\n  return sum;\n};\n\nmodule.exports = {\n  solution,\n};\n\n},{}],5:[function(require,module,exports){\n/*Given a non-empty list of integers, return the sum of all of the even elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  lst.forEach((num) => {\n    if (num % 2 === 0) {\n      sum += num;\n    }\n  });\n  return sum;\n};\n\nmodule.exports = {\n  solution,\n};\n\n},{}],6:[function(require,module,exports){\n/*Given a non-empty list of integers, return the sum of all of the even elements that are in odd positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  lst.forEach((num) => {\n    if (num % 2!== 0) {\n      sum += num;\n    }\n  });\n  return sum;\n};\n\nmodule.exports = {\n  solution,\n};\n\n},{}],7:[function(require,module,exports){\n/*Given a non-empty list of integers, return the sum of all of the even elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  lst.forEach((num) => {\n    if (num % 2 === 0) {\n      sum += num;\n    }\n  });\n  return sum;\n};\n\nmodule.exports = {\n  solution,\n};\n\n},{}],8:[function(require,module,exports){\n/*Given a non-empty list of integers, return the sum of all of the even elements that are in odd positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  lst.forEach((num) => {\n    if (num % 2 === 0) {\n      sum += num;\n    }\n  });\n  return sum;\n};\n\nmodule.exports = {\n  solution,\n};\n\n},{}],9:[function(require,module,exports){\n/*Given a non-empty list of integers, return the sum of all of the even elements that are in odd positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  lst.forEach((num) => {\n    if (num % 2 === 0) {\n      sum += num;\n    }\n  });\n  return sum;\n};\n\nmodule.exports = {\n  solution,\n};\n\n},{}],10:[function(require,module,exports){\n/*Given a non-empty list of integers, return the sum of all of the even elements that are in odd positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  lst.forEach((num) => {\n    if (num % 2 === 0) {\n      sum += num;\n    }\n  });\n  return sum;\n};\n\nmodule.exports = {\n  solution,\n};\n\n},{}],11:[function(require,module,exports){\n/*Given a non-empty list of integers, return the sum of all of the even elements that are in odd positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  lst.forEach((num) => {\n    if (num % 2 === 0) {\n      sum += num;\n    }\n  });\n  return sum;\n};\n\nmodule.exports = {\n  solution,\n};\n\n},{}],12:[function(require,module,exports){\n/*Given a non-empty list of integers, return the sum of all of the even elements that are in odd positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  lst.forEach((num) => {\n    if (num % 2 === 0) {\n      sum += num;\n    }\n  });\n  return sum;\n};\n\nmodule.exports = {\n  solution,\n};\n\n},{}],13:[function(require,module,exports){\n/*Given a non-empty list of integers, return the sum of all of the even elements that are in odd positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  lst.forEach((num) => {\n    if (num % 2 === 0) {\n      sum += num;\n    }\n  });\n  return sum;\n};\n\nmodule.exports = {\n  solution,\n};\n\n},{}],14:[function(require,module,exports){\n/*Given a non-empty list of integers, return the sum of all of the even elements that are in odd positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  lst.forEach((num) => {\n    if (num % 2 === 0) {\n      sum += num;\n    }\n  });\n  return sum;\n};\n\nmodule.exports = {\n  solution,\n};\n\n},{}],15:[function(require,module,exports){\n/*Given a non-empty list of integers, return the sum of all of the even elements that are in odd positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  lst.forEach((num) => {\n    if (num % 2 === 0) {\n      sum += num;\n    }\n  });\n  return "}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst add_elements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "add_elements", "gc": "<|endoftext|>/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst add_elements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (i % k === 0) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n};\n\n// https://leetcode.com/problems/sum-of-digits-from-the-first-k-digits-of-an-integer/\n// https://leetcode.com/problems/sum-of-digits-from-the-first-k-digits-of-an-integer/discuss/434/Java-Solution-for-Sum-of-Digits-from-the-First-k-Digits-of-an-Integer\n// https://leetcode.com/problems/sum-of-digits-from-the-first-k-digits-of-an-integer/discuss/435/Java-Solution-for-Sum-of-Digits-from-the-First-k-Digits-of-an-Integer\n// https://leetcode.com/problems/sum-of-digits-from-the-first-k-digits-of-an-integer/discuss/437/Java-Solution-for-Sum-of-Digits-from-the-First-k-Digits-of-an-Integer\n// https://leetcode.com/problems/sum-of-digits-from-the-first-k-digits-of-an-integer/discuss/438/Java-Solution-for-Sum-of-Digits-from-the-First-k-Digits-of-an-Integer\n// https://leetcode.com/problems/sum-of-digits-from-the-first-k-digits-of-an-integer/discuss/439/Java-Solution-for-Sum-of-Digits-from-the-First-k-Digits-of-an-Integer\n// https://leetcode.com/problems/sum-of-digits-from-the-first-k-digits-of-an-integer/discuss/440/Java-Solution-for-Sum-of-Digits-from-the-First-k-Digits-of-an-Integer\n// https://leetcode.com/problems/sum-of-digits-from-the-first-k-digits-of-an-integer/discuss/441/Java-Solution-for-Sum-of-Digits-from-the-First-k-Digits-of-an-Integer\n// https://leetcode.com/problems/sum-of-digits-from-the-first-k-digits-of-an-integer/discuss/442/Java-Solution-for-Sum-of-Digits-from-the-First-k-Digits-of-an-Integer\n// https://leetcode.com/problems/sum-of-digits-from-the-first-k-digits-of-an-integer/discuss/443/Java-Solution-for-Sum-of-Digits-from-the-First-k-Digits-of-an-Integer\n// https://leetcode.com/problems/sum-of-digits-from-the-first-k-digits-of-an-integer/discuss/444/Java-Solution-for-Sum-of-Digits-from-the-First-k-Digits-of-an-Integer\n// https://leetcode.com/problems/sum-of-digits-from-the-first-k-digits-of-an-integer/discuss/445/Java-Solution-for-Sum-of-Digits-from-the-First-k-Digits-of-an-Integer\n// https://leetcode.com/problems/sum-of-digits-from-the-first-k-digits-of-an-integer/discuss/446/Java-Solution-for-Sum-of-Digits-from-the-First-k-Digits-of-an-Integer\n// https://leetcode.com/problems/sum-of-digits-from-the-first-k-digits-of-an-integer/discuss/447/Java-Solution-for-Sum-of-Digits-from-the-First-k-Digits-of-an-Integer\n// https://leetcode.com/problems/sum-of-digits-from-the-first-k-digits-of-an-integer/discuss/448/Java-Solution-for-Sum-of-Digits-from-the-First-k-Digits-of-an-Integer\n// https://leetcode.com/problems/sum-of-digits-from-the-first-k-digits-of-an-integer/discuss/449/Java-Solution-for-Sum-of-Digits-from-the-First-k-Digits-of-an-Integer\n// https://leetcode.com/problems/sum-of-digits-from-the-first-k-digits-of-an-integer/discuss/450/Java-Solution-for-Sum-of-Digits-from-the-First-k-Digits-of-an-Integer\n// https://leetcode.com/problems/sum-of-digits-from-the-first-k-digits-of-an-integer/discuss/451/Java-Solution-for-Sum-of-Digits-from-the-First-k-Digits-of-an-Integer\n// https://leetcode.com/problems/sum-of-digits-from-the-first-k-digits-of-an-integer/discuss/452/Java-Solution-for-Sum-of-Digits-from-the-First-k-Digits-of-an-Integer\n// https://leetcode.com/problems/sum-of-digits-from-the-first-k-digits-of-an-integer/discuss/453/Java-Solution-for-Sum-of-Digits-from-the-First-k-Digits-of-an-Integer\n// https://leetcode.com/problems/sum-of-digits-from-the-first-k-digits-of-an-integer/discuss/454/Java-Solution-for-Sum-of-Digits-from-the-First-k-Digits-of-an-Integer\n// https://leetcode.com/problems/sum-of-digits-from-the-first-k-digits-of-an-integer/discuss/455/Java-Solution-for-Sum-of-Digits-from-the-First-k-Digits-of-an-Integer\n// https://leetcode.com/problems/sum-of-digits-from-the-first-k-digits-of-an-integer/discuss/456/Java-Solution-for-Sum-of-Digits-from-the-First-k-Digits-of-an-Integer\n// https://leetcode.com/problems/sum-of-digits-from-the-first-k-digits-of-an-integer/discuss/457/Java-Solution-for-Sum-of-Digits-from-the-First-k-Digits-of-an-Integer\n// https://leetcode.com/problems/sum-of-digits-from-the-first-k-digits-of-an-integer/discuss/458/Java-Solution-for-Sum-of-Digits-from-the-First-k-Digits-of-an-Integer\n// https://leetcode.com/problems/sum-of-digits-from-the-first-k-digits-of-an-integer/discuss/459/Java-Solution-for-Sum-of-Digits-from-the-First-k-Digits-of-an-Integer\n// https://leetcode.com/problems/sum-of-digits-from-the-first-k-digits-of-an-integer/discuss/460/Java-Solution-for-Sum-of-Digits-from-the-First-k-Digits-of-an-Integer\n// https://leetcode.com/problems/sum-of-digits-from-the-first-k-digits-of-an-integer/discuss/461/Java-Solution-for-Sum-of-Digits-from-the-First-k-Digits-of-an-Integer\n// https://leetcode.com/problems/sum-of-digits-from-the-first-k-digits-of-an-integer/discuss/462/Java-Solution-for-Sum-of-Digits-from-the-First-k-Digits-of-an-Integer\n// https://leetcode.com/problems/sum-of-digits-from-the-first-k-digits-of-an-integer/discuss/463/Java-Solution-for-Sum-of-Digit"}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst get_odd_collatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "get_odd_collatz", "gc": "<|endoftext|>/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst get_odd_collatz = (n) => {\n  let collatz = [1, 1];\n  let i = 1;\n  while (collatz[i] <= n) {\n    collatz[i] = collatz[i] * 3 + collatz[i - 1];\n    i++;\n  }\n  return collatz;\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the even numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  get_even_collatz(5) returns [1, 5, 16, 8, 4, 2] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the even numbers are only 1, 5, 16, and 8.\n  */\nconst get_even_collatz = (n) => {\n  let collatz = [1, 1];\n  let i = 1;\n  while (collatz[i] <= n) {\n    collatz[i] = collatz[i] * 3 + collatz[i - 1];\n    i++;\n  }\n  return collatz;\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the prime numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  get_prime_collatz(5) returns [1, 5, 3, 7, 9, 11] # The collatz sequence for 5 is [5, 3, 7, 9, 11, 1], so the prime numbers are only 1, 3, 5, 7, 9, 11.\n  */\nconst get_prime_collatz = (n) => {\n  let collatz = [1, 1];\n  let i = 1;\n  while (collatz[i] <= n) {\n    collatz[i] = collatz[i] * 3 + collatz[i - 1];\n    i++;\n  }\n  return collatz;\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the prime numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  get_prime_collatz(5) returns [1, 5, 3, 7, 9, 11] # The collatz sequence for 5 is [5, 3, 7, 9, 11, 1], so the prime numbers are only 1, 3, 5, 7, 9, 11.\n  */\nconst get_prime_collatz = (n) => {\n  let collatz = [1, 1];\n  let i = 1;\n  while (collatz[i] <= n) {\n    collatz[i] = collatz[i] * 3 + collatz[i - 1];\n    i++;\n  }\n  return collatz;\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the prime numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  get_prime_collatz(5) returns [1, 5, 3, 7, 9, 11] # The collatz sequence for 5 is [5, 3, 7, 9, 11, 1], so the prime numbers are only 1, 3, 5, 7, 9, 11.\n  */\nconst get_prime_collatz = (n) => {\n  let collatz = [1, 1];\n  let i = 1;\n  while (collatz[i] <= n) {\n    collatz[i] = collatz[i] * 3 + collatz[i - 1];\n    i++;\n  }\n  return collatz;\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the prime numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  get_prime_collatz(5) returns [1, 5, 3, 7, 9, 11] # The collatz sequence for 5 is [5, 3, 7, 9, 11, 1], so the prime numbers are only 1, 3, 5, 7, 9, 11.\n  */\nconst get_prime_collatz = (n) => {\n  let collatz = [1, 1];\n  let i = 1;\n  while (collatz[i] <= n) {\n    collatz[i] = collatz[i] * 3 + collatz[i - 1];\n    i++;\n  }\n  return collatz;\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the prime numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous "}
{"task_id": "JavaScript/124", "prompt": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  valid_date('03-11-2000') => true\n\n  valid_date('15-01-2012') => false\n\n  valid_date('04-0-2040') => false\n\n  valid_date('06-04-2020') => true\n\n  valid_date('06/04/2020') => false\n  */\nconst valid_date = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "valid_date", "gc": "<|endoftext|>/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  valid_date('03-11-2000') => true\n\n  valid_date('15-01-2012') => false\n\n  valid_date('04-0-2040') => false\n\n  valid_date('06-04-2020') => true\n\n  valid_date('06/04/2020') => false\n  */\nconst valid_date = (date) => {\n  const [month, day, year] = date.split('-');\n  const months = [\n    'January',\n    'February',\n    'March',\n    'April',\n    'May',\n    'June',\n    'July',\n    'August',\n    'September',\n    'October',\n    'November',\n    'December'\n  ];\n  const days = [\n    'Sunday',\n    'Monday',\n    'Tuesday',\n    'Wednesday',\n    'Thursday',\n    'Friday',\n    'Saturday'\n  ];\n  const isValid = months.includes(month) && days.includes(day) && days.includes(year);\n  return isValid;\n};\n\n/*\n  Given a date string and a month number, returns the date in the format: mm-dd-yyyy\n\n  example: \n  get_date('03-11-2000', '03') => 03-11-2000\n\n  get_date('03-11-2000', '03') => 03-11-2000\n\n  get_date('03-11-2000', '03') => 03-11-2000\n\n  get_date('03-11-2000', '03') => 03-11-2000\n\n  get_date('03-11-2000', '03') => 03-11-2000\n\n  get_date('03-11-2000', '03') => 03-11-2000\n\n  get_date('03-11-2000', '03') => 03-11-2000\n\n  get_date('03-11-2000', '03') => 03-11-2000\n\n  get_date('03-11-2000', '03') => 03-11-2000\n\n  get_date('03-11-2000', '03') => 03-11-2000\n\n  get_date('03-11-2000', '03') => 03-11-2000\n\n  get_date('03-11-2000', '03') => 03-11-2000\n\n  get_date('03-11-2000', '03') => 03-11-2000\n\n  get_date('03-11-2000', '03') => 03-11-2000\n\n  get_date('03-11-2000', '03') => 03-11-2000\n\n  get_date('03-11-2000', '03') => 03-11-2000\n\n  get_date('03-11-2000', '03') => 03-11-2000\n\n  get_date('03-11-2000', '03') => 03-11-2000\n\n  get_date('03-11-2000', '03') => 03-11-2000\n\n  get_date('03-11-2000', '03') => 03-11-2000\n\n  get_date('03-11-2000', '03') => 03-11-2000\n\n  get_date('03-11-2000', '03') => 03-11-2000\n\n  get_date('03-11-2000', '03') => 03-11-2000\n\n  get_date('03-11-2000', '03') => 03-11-2000\n\n  get_date('03-11-2000', '03') => 03-11-2000\n\n  get_date('03-11-2000', '03') => 03-11-2000\n\n  get_date('03-11-2000', '03') => 03-11-2000\n\n  get_date('03-11-2000', '03') => 03-11-2000\n\n  get_date('03-11-2000', '03') => 03-11-2000\n\n  get_date('03-11-2000', '03') => 03-11-2000\n\n  get_date('03-11-2000', '03') => 03-11-2000\n\n  get_date('03-11-2000', '03') => 03-11-2000\n\n  get_date('03-11-2000', '03') => 03-11-2000\n\n  get_date('03-11-2000', '03') => 03-11-2000\n\n  get_date('03-11-2000', '03') => 03-11-2000\n\n  get_date('03-11-2000', '03') => 03-11-2000\n\n  get_date('03-11-2000', '03') => 03-11-2000\n\n  get_date('03-11-2000', '03') => 03-11-2000\n\n  get_date('03-11-2000', '03') => 03-11-2000\n\n  get_date('03-11-2000', '03') => 03-11-2000\n\n  get_date('03-11-2000', '03') => 03-11-2000\n\n  get_date('03-11-2000', '03') => 03-11-2000\n\n  get_date('03-11-2000', '03') => 03-11-2000\n\n  get_date('03-11-2000', '03') => 03-11-2000\n\n  get_date('03-11-2000', '03') => 03-11-2000\n\n  get_date('03-11-2000', '03') => 03-11-2000\n\n  get_date('03-11-2000', '03') => 03-11-2000\n\n  get_date('03-11-2000', '03') => 03-11-2000\n\n  get_date('03-11-2000', '03') => 03-11-2000\n\n  get_date('03-11-2000', '03') => 03-11-2000\n\n  get_date('03-11-2000', '03') => 03-11-2000\n\n  get_date('03-11-2000', '03') => 03-11-2000\n\n  get_date('03-11-2000', '03') => 03-11-2000\n\n  get_date('03-11-2000', '03') => 03-11-2000\n\n  get_date('03-11-2000', '03') => 03-11-2000\n\n  get_date('03-11-2000', '03') => 03-11-2000\n\n  get_date('03-11-2000', '03') => 03-11-2000\n\n  get_date('03-11-2000', '03') => 03-11-2000\n\n  get_date('03-11-2000', '03') => 03-11-2000\n\n  get_date('03-11-2000', '03') => 03-11-2000\n\n  get_date('03-11-2000', '03') => 03-11-2000\n\n  get_date('03-11-2000', '03') => 03-11-2000\n\n  get_date('03-11-2000', '03') => 03-11-2000\n\n  get_date('03-11-2000', '03') => 03-11-2000\n\n  get_date('03-11-2000', '03') => 03-11-2000\n\n  get_date('03-11-2000', '03') => 03-11-2000\n\n  get_date('03-11-2000', '03') => 03-11-2000\n\n  get_date('03-11-2000', '03') => 03-11-2000\n\n  get_date('03-11-2000', '03') => 03-11-2000\n\n  get_date('03-11-2000', '"}
{"task_id": "JavaScript/125", "prompt": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  split_words(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"abcdef\") == 3\n  */\nconst split_words = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "split_words", "gc": "<|endoftext|>/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  split_words(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"abcdef\") == 3\n  */\nconst split_words = (txt) => {\n  let words = txt.split(\" \");\n  let splitWords = [];\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    if (word.length > 0) {\n      let splitWord = word.split(\",\");\n      splitWords.push(splitWord);\n    }\n  }\n  return splitWords;\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  split_words_odd_case(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  split_words_odd_case(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  split_words_odd_case(\"abcdef\") == 3\n  */\nconst split_words_odd_case = (txt) => {\n  let words = txt.split(\" \");\n  let splitWords = [];\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    if (word.length > 0) {\n      let splitWord = word.split(\",\");\n      splitWords.push(splitWord);\n    }\n  }\n  return splitWords;\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  split_words_odd_case_and_space(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  split_words_odd_case_and_space(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  split_words_odd_case_and_space(\"abcdef\") == 3\n  */\nconst split_words_odd_case_and_space = (txt) => {\n  let words = txt.split(\" \");\n  let splitWords = [];\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    if (word.length > 0) {\n      let splitWord = word.split(\",\");\n      splitWords.push(splitWord);\n    }\n  }\n  return splitWords;\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  split_words_odd_case_and_space_and_comma(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  split_words_odd_case_and_space_and_comma(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  split_words_odd_case_and_space_and_comma(\"abcdef\") == 3\n  */\nconst split_words_odd_case_and_space_and_comma = (txt) => {\n  let words = txt.split(\" \");\n  let splitWords = [];\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    if (word.length > 0) {\n      let splitWord = word.split(\",\");\n      splitWords.push(splitWord);\n    }\n  }\n  return splitWords;\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  split_words_odd_case_and_space_and_comma_and_comma(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  split_words_odd_case_and_space_and_comma_and_comma(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  split_words_odd_case_and_space_and_comma_and_comma(\"abcdef\") == 3\n  */\nconst split_words_odd_case_and_space_and_comma_and_comma = (txt) => {\n  let words = txt.split(\" \");\n  let splitWords = [];\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    if (word.length > 0) {\n      let splitWord = word.split(\",\");\n      splitWords.push(splitWord);\n    }\n  }\n  return splitWords;\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  split_words_odd_case_and_space_and_comma_and_comma_and_comma(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  split_words_odd_case_and_space_and_comma_and_comma_and_comma(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  split_words_odd_case_and_space_and_comma_and_comma_and_comma(\"abcdef\") == 3\n  */\nconst split_words_odd_case_and_space_and_comma_and_comma_and_comma = (txt) => {\n  let words = txt.split(\" \");\n  let splitWords = [];\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    if (word.length > 0) {\n      let splitWord = word.split(\",\");\n      splitWords.push(splitWord);\n    }\n  }\n  return splitWords;\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  split_words_odd_case_and_space_and_comma_and_comma_and_comma_and_comma(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  split_words_odd_case_and_space_and_comma_and_comma_and_comma_and_comma(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  split_words_odd_case_and_space_and_comma_and_comma_and_comma_and_comma(\"abcdef\") == 3\n  */\nconst split_words_odd_case_and_space_and_comma_and_comma_and_comma_and_comma = (txt) => {\n  let words = txt.split(\" \");\n  let splitWords = [];\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    if (word.length > 0) {\n      let splitWord = word.split(\",\");\n      splitWords.push(splitWord);\n    }\n  }\n  return splitWords;\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  split_words_odd_case_and_space_and_comma_and_comma_and_comma_and_comma(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  split_words_odd_case_and_"}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  is_sorted([5]) ➞ true\n  is_sorted([1, 2, 3, 4, 5]) ➞ true\n  is_sorted([1, 3, 2, 4, 5]) ➞ false\n  is_sorted([1, 2, 3, 4, 5, 6]) ➞ true\n  is_sorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  is_sorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  is_sorted([1, 2, 2, 3, 3, 4]) ➞ true\n  is_sorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst is_sorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "is_sorted", "gc": "<|endoftext|>/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  is_sorted([5]) ➞ true\n  is_sorted([1, 2, 3, 4, 5]) ➞ true\n  is_sorted([1, 3, 2, 4, 5]) ➞ false\n  is_sorted([1, 2, 3, 4, 5, 6]) ➞ true\n  is_sorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  is_sorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  is_sorted([1, 2, 2, 3, 3, 4]) ➞ true\n  is_sorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst is_sorted = (lst) => {\n  let sorted = false\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === lst[i - 1]) {\n      sorted = true\n      break\n    }\n  }\n  return sorted\n}\n\n/* Given a list of numbers, return whether or not they are sorted\n  in descending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  is_sorted([5, 6, 7]) ➞ false\n  is_sorted([6, 5, 7]) ➞ true\n  is_sorted([6, 5, 7, 4]) ➞ false\n  is_sorted([6, 5, 7, 4, 3]) ➞ true\n  is_sorted([6, 5, 7, 4, 3, 2]) ➞ false\n  is_sorted([6, 5, 7, 4, 3, 2, 1]) ➞ true\n  is_sorted([6, 5, 7, 4, 3, 2, 1, 0]) ➞ false\n  */\nconst is_descending = (lst) => {\n  let sorted = false\n  for (let i = lst.length - 1; i >= 0; i--) {\n    if (lst[i] === lst[i + 1]) {\n      sorted = true\n      break\n    }\n  }\n  return sorted\n}\n\n/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  is_sorted([5, 6, 7]) ➞ false\n  is_sorted([6, 5, 7]) ➞ false\n  is_sorted([6, 5, 7, 4]) ➞ true\n  is_sorted([6, 5, 7, 4, 3]) ➞ false\n  is_sorted([6, 5, 7, 4, 3, 2]) ➞ false\n  is_sorted([6, 5, 7, 4, 3, 2, 1, 0]) ➞ true\n  is_sorted([6, 5, 7, 4, 3, 2, 1, 1]) ➞ false\n  */\nconst is_ascending = (lst) => {\n  let sorted = false\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === lst[i - 1]) {\n      sorted = true\n      break\n    }\n  }\n  return sorted\n}\n\n/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  is_sorted([5, 6, 7]) ➞ false\n  is_sorted([6, 5, 7]) ➞ false\n  is_sorted([6, 5, 7, 4]) ➞ false\n  is_sorted([6, 5, 7, 4, 3]) ➞ false\n  is_sorted([6, 5, 7, 4, 3, 2]) ➞ false\n  is_sorted([6, 5, 7, 4, 3, 2, 1, 0]) ➞ false\n  is_sorted([6, 5, 7, 4, 3, 2, 1, 1]) ➞ false\n  */\nconst is_ascending_descending = (lst) => {\n  let sorted = false\n  for (let i = lst.length - 1; i >= 0; i--) {\n    if (lst[i] === lst[i + 1]) {\n      sorted = true\n      break\n    }\n  }\n  return sorted\n}\n\n/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  is_sorted([5, 6, 7]) ➞ false\n  is_sorted([6, 5, 7]) ➞ false\n  is_sorted([6, 5, 7, 4]) ➞ true\n  is_sorted([6, 5, 7, 4, 3]) ➞ false\n  is_sorted([6, 5, 7, 4, 3, 2]) ➞ false\n  is_sorted([6, 5, 7, 4, 3, 2, 1, 0]) ➞ true\n  is_sorted([6, 5, 7, 4, 3, 2, 1, 1]) ➞ false\n  */\nconst is_ascending_descending_ascending = (lst) => {\n  let sorted = false\n  for (let i = lst.length - 1; i >= 0; i--) {\n    if (lst[i] === lst[i + 1]) {\n      sorted = true\n      break\n    }\n  }\n  return sorted\n}\n\n/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  is_sorted([5, 6, 7]) ➞ false\n  is_sorted([6, 5, 7]) ➞ false\n  is_sorted([6, 5, 7, 4]) ➞ false\n  is_sorted([6, 5, 7, 4, 3]) ➞ false\n  is_sorted([6, 5, 7, 4, 3, 2]) ➞ false\n  is_sorted([6, 5, 7, 4, 3, 2, 1, 0]) ➞ true\n  is_sorted([6, 5, 7, 4, 3, 2, 1, 1]) ➞ false\n  */\nconst is_ascending_descending_ascending_ascending = (lst) => {\n  let sorted = false\n  for (let i = lst.length - 1; i >= 0; i--) {\n    if (lst[i] === lst[i + 1]) {\n      sorted = true\n      break\n    }\n  }\n  return sorted\n}\n\n/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  is_sorted([5, 6, 7]) ➞ false\n  is_sorted([6, 5, 7]) ➞ false\n  is_sorted([6, 5, 7, 4]) ➞ false\n  is_sorted([6, 5, 7, 4, 3]) ➞ false\n  is_sorted([6, 5, 7, 4, 3, 2]) ➞ false\n  is_sorted([6, 5, 7, 4, 3, 2, 1, 0]) ➞ true\n  is_sorted([6, 5, 7, 4, 3, 2, 1, 1]) ➞ false\n  */\nconst is_ascending_descending_ascending_ascending_ascending = (lst) => {\n  let sorted = false\n  for (let i = lst.length - 1; i >= 0; i--) {\n    if (lst[i] === lst[i + 1]) {\n      sorted = true\n      break\n    }\n  }\n  return sorted\n}\n\n/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  is_sorted([5, 6, 7]) ➞ false\n  is_sorted([6, 5, 7]) ➞ false\n  is_sorted([6, 5, 7, 4]) ➞ false\n  is_sorted([6, 5, 7, 4, 3]) ➞ false\n  is_sorted([6, 5, 7, 4, "}
{"task_id": "JavaScript/127", "prompt": "/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "gc": "<|endoftext|>/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  if (interval1.length!== interval2.length) {\n    return \"NO\";\n  }\n  let result = [];\n  for (let i = 0; i < interval1.length; i++) {\n    if (interval1[i] < interval2[i]) {\n      result.push(interval1[i]);\n    } else {\n      result.push(interval2[i]);\n    }\n  }\n  return result.length === 0? \"NO\" : \"YES\";\n};\n\n/*\n  [input] intervals: an array of intervals\n  [output] a boolean indicating whether each interval is prime or not\n  \n  Example 1:\n  Input: intervals = [[1, 2], [2, 3], [3, 5]]\n  Output: true\n  Example 2:\n  Input: intervals = [[1, 2], [2, 3], [3, 5], [4, 6]]\n  Output: false\n  Example 3:\n  Input: intervals = [[1, 2], [2, 3], [3, 5], [4, 6], [7, 8]]\n  Output: false\n  Example 4:\n  Input: intervals = [[1, 2], [2, 3], [3, 5], [4, 6], [7, 8], [9, 10]]\n  Output: false\n  Example 5:\n  Input: intervals = [[1, 2], [2, 3], [3, 5], [4, 6], [7, 8], [9, 10], [11, 12]]\n  Output: false\n  Example 6:\n  Input: intervals = [[1, 2], [2, 3], [3, 5], [4, 6], [7, 8], [9, 10], [11, 12], [13, 14]]\n  Output: false\n  Example 7:\n  Input: intervals = [[1, 2], [2, 3], [3, 5], [4, 6], [7, 8], [9, 10], [11, 12], [13, 14], [15, 16]]\n  Output: false\n  Example 8:\n  Input: intervals = [[1, 2], [2, 3], [3, 5], [4, 6], [7, 8], [9, 10], [11, 12], [13, 14], [15, 16], [17, 18]]\n  Output: false\n  Example 9:\n  Input: intervals = [[1, 2], [2, 3], [3, 5], [4, 6], [7, 8], [9, 10], [11, 12], [13, 14], [15, 16], [17, 18], [19, 20]]\n  Output: false\n  Example 10:\n  Input: intervals = [[1, 2], [2, 3], [3, 5], [4, 6], [7, 8], [9, 10], [11, 12], [13, 14], [15, 16], [17, 18], [19, 20], [21, 22]]\n  Output: false\n  Example 11:\n  Input: intervals = [[1, 2], [2, 3], [3, 5], [4, 6], [7, 8], [9, 10], [11, 12], [13, 14], [15, 16], [17, 18], [19, 20], [21, 22], [23, 24]]\n  Output: false\n  Example 12:\n  Input: intervals = [[1, 2], [2, 3], [3, 5], [4, 6], [7, 8], [9, 10], [11, 12], [13, 14], [15, 16], [17, 18], [19, 20], [21, 22], [23, 24], [25, 26]]\n  Output: false\n  Example 13:\n  Input: intervals = [[1, 2], [2, 3], [3, 5], [4, 6], [7, 8], [9, 10], [11, 12], [13, 14], [15, 16], [17, 18], [19, 20], [21, 22], [23, 24], [25, 26], [27, 28]]\n  Output: false\n  Example 14:\n  Input: intervals = [[1, 2], [2, 3], [3, 5], [4, 6], [7, 8], [9, 10], [11, 12], [13, 14], [15, 16], [17, 18], [19, 20], [21, 22], [23, 24], [25, 26], [27, 28], [29, 30]]\n  Output: false\n  Example 15:\n  Input: intervals = [[1, 2], [2, 3], [3, 5], [4, 6], [7, 8], [9, 10], [11, 12], [13, 14], [15, 16], [17, 18], [19, 20], [21, 22], [23, 24], [25, 26], [27, 28], [29, 30], [31, 32]]\n  Output: false\n  Example 16:\n  Input: intervals = [[1, 2], [2, 3], [3, 5], [4, 6], [7, 8], [9, 10], [11, 12], [13, 14], [15, 16], [17, 18], [19, 20], [21, 22], [23, 24], [25, 26], [27, 28], [29, 30], [31, 32], [33, 34]]\n  Output: false\n  Example 17:\n  Input: intervals = [[1, 2], [2, 3], [3, 5], [4, 6], [7, 8], [9, 10], [11, 12], [13, 14], [15, 16], [17, 18], [19, 20], [21, 22], [23, 24], [25, 26], [27, 28], [29, 30], [31, 32], [33, 34], [35, 36]]\n  Output: false\n  Example 18:\n  Input: intervals = [[1, 2], [2, 3], [3, 5], [4, 6], [7, 8], [9, 10], [11, 12], [13, 14], [15, 16], [17, 18], [19, 20], [21, 22], [23, 24], [25, 26], [27, 28], [29, 30], [31, 32], [33, 34], [35, 36], [37, 38]]\n  Output: false\n  Example 19:\n  Input: intervals = [[1, 2], [2, 3], [3, 5], [4, 6], [7, 8], [9, 10], [11, 12], [13, 14], [15, 16], [17, 18], [19, 20], [21, 22], [23, 24], [25, 26], [27, 28], [29, 30], [31, 32], [33, 34], [35, 36], [37, 38], [39, 40]]\n  Output: false\n  Example 20:\n  Input: intervals = [[1, 2], [2, 3], [3, 5], [4, 6], [7, 8], [9, 10], [11, 12], [13, 14], [15, 16], [17, 18], [19, 20], [21, 22], [23, 24], [25, 26], [27, 28], [29, 30], [31, 32], [33, 34], [35, 36], [37, 38], [39, 40], [41, 42]]\n  Output: false\n  Example 21:\n  Input: intervals = [[1, 2], [2, 3], [3, 5], [4, 6], [7, 8], [9, 10], [11, 12], [13, 14], [15, 16], [17, 18], [19, 20], [21, 22], [23, 24], [25, 26], [27, 28], [29, 30], [31, 32], [33, 34], [35, 36], [37, 38], [39, 40], [41, 42], [43, 44]]\n  Output: false\n  Example 22:\n  Input: intervals = [[1, 2], [2, 3], [3, 5], [4, 6], [7, 8], [9, 10], [11, 12], [13, 14], [15, 16], [17, 18], [19, 20], [21, 22], [23, 24], [25, 26], [27, 28], [29, 30], [31, 32], [33, 34], [35, 36], [37, 38], [39, 40], [41, 42], [43, 44], [45, 46]]\n  Output: false\n  Example 23:\n  Input: intervals = [[1, 2], [2, 3], [3, 5], [4, 6], [7, 8], [9, 10], [11, 12], [13, 14], [15, 16], [17, 18], [19, 20], [21, 22], [23, 24], [25, 26], [27, 28], [29, 30], [31, 32], [33, 34], [35, 36], [37, 38], [39, 40], [41, 42], [43, 44], [45, 46], [47, 48]]\n  "}
{"task_id": "JavaScript/128", "prompt": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prod_signs([1, 2, 2, -4]) == -9\n  >>> prod_signs([0, 1]) == 0\n  >>> prod_signs([]) == null\n  */\nconst prod_signs = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prod_signs", "gc": "<|endoftext|>/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prod_signs([1, 2, 2, -4]) == -9\n  >>> prod_signs([0, 1]) == 0\n  >>> prod_signs([]) == null\n  */\nconst prod_signs = (arr) => {\n  let signs = [0];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      signs.push(1);\n    } else if (arr[i] < 0) {\n      signs.push(-1);\n    } else {\n      signs.push(0);\n    }\n  }\n  return signs.reduce((acc, sign) => acc + sign * sign, 0);\n};\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of absolute values of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> abs_signs([1, 2, 2, -4]) == -9\n  >>> abs_signs([0, 1]) == 0\n  >>> abs_signs([]) == null\n  */\nconst abs_signs = (arr) => {\n  let signs = [0];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      signs.push(1);\n    } else if (arr[i] < 0) {\n      signs.push(-1);\n    } else {\n      signs.push(0);\n    }\n  }\n  return signs.reduce((acc, sign) => acc + sign * sign, 0);\n};\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of squares of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> sqr_signs([1, 2, 2, -4]) == -9\n  >>> sqr_signs([0, 1]) == 0\n  >>> sqr_signs([]) == null\n  */\nconst sqr_signs = (arr) => {\n  let signs = [0];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      signs.push(1);\n    } else if (arr[i] < 0) {\n      signs.push(-1);\n    } else {\n      signs.push(0);\n    }\n  }\n  return signs.reduce((acc, sign) => acc + sign * sign, 0);\n};\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of cubes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> cube_signs([1, 2, 2, -4]) == -9\n  >>> cube_signs([0, 1]) == 0\n  >>> cube_signs([]) == null\n  */\nconst cube_signs = (arr) => {\n  let signs = [0];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      signs.push(1);\n    } else if (arr[i] < 0) {\n      signs.push(-1);\n    } else {\n      signs.push(0);\n    }\n  }\n  return signs.reduce((acc, sign) => acc + sign * sign, 0);\n};\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of cubes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> cube_signs([1, 2, 2, -4]) == -9\n  >>> cube_signs([0, 1]) == 0\n  >>> cube_signs([]) == null\n  */\nconst cube_signs = (arr) => {\n  let signs = [0];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      signs.push(1);\n    } else if (arr[i] < 0) {\n      signs.push(-1);\n    } else {\n      signs.push(0);\n    }\n  }\n  return signs.reduce((acc, sign) => acc + sign * sign, 0);\n};\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of cubes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> cube_signs([1, 2, 2, -4]) == -9\n  >>> cube_signs([0, 1]) == 0\n  >>> cube_signs([]) == null\n  */\nconst cube_signs = (arr) => {\n  let signs = [0];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      signs.push(1);\n    } else if (arr[i] < 0) {\n      signs.push(-1);\n    } else {\n      signs.push(0);\n    }\n  }\n  return signs.reduce((acc, sign) => acc + sign * sign, 0);\n};\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of cubes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> cube_signs([1, 2, 2, -4]) == -9\n  >>> cube_signs([0, 1]) == 0\n  >>> cube_signs([]) == null\n  */\nconst cube_signs = (arr) => {\n  let signs = [0];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      signs.push(1);\n    } else if (arr[i] < 0) {\n      signs.push(-1);\n    } else {\n      signs.push(0);\n    }\n  }\n  return signs.reduce((acc, sign) => acc + sign * sign, 0);\n};\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of cubes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> cube_signs([1, 2, 2, -4]) == -9\n  >>> cube_signs([0, 1]) == 0\n  >>> cube_signs([]) == null\n  */\nconst cube_signs = (arr) => {\n  let signs = [0];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      signs.push(1);\n    } else if (arr[i] < 0) {\n      signs.push(-1);\n    } else {\n      signs.push(0);\n    }\n  }\n  return signs.reduce((acc, sign) => acc + sign * sign, 0);\n};\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of cubes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> cube_signs([1, 2, 2, -4]) == -9\n  >>> cube_signs([0, 1]) == 0\n  >>> cube_signs([]) == null\n  */\nconst cube_signs = (arr) => {\n  let signs = [0];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      signs.push(1);\n    } else if (arr[i] < 0) {\n      signs.push(-1);\n    } else {\n      signs.push(0);\n    }\n  }\n  return signs.reduce((acc, sign) => acc + sign * sign, 0);\n};\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of cubes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> cube_signs([1, 2, 2, -4]) == -9\n  >>> cube_signs([0, 1]) == 0\n  >>> cube_signs([]) == null\n  */\nconst cube_signs = (arr) => {\n  let signs = [0];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      signs.push(1);\n    } else if (arr[i] < 0) {\n      signs.push(-1);\n    } else {\n      signs.push(0);\n    }\n  }\n  return signs.reduce((acc, sign) => acc + sign * sign, 0);\n};\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of cubes of integers multiplied by product of all "}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst min_path = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "min_path", "gc": "<|endoftext|>/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst min_path = (grid, k) => {\n  const lst_A = new Array(k).fill(0);\n  const lst_B = new Array(k).fill(0);\n  const lst_C = new Array(k).fill(0);\n  const lst_D = new Array(k).fill(0);\n  const lst_E = new Array(k).fill(0);\n  const lst_F = new Array(k).fill(0);\n  const lst_G = new Array(k).fill(0);\n  const lst_H = new Array(k).fill(0);\n  const lst_I = new Array(k).fill(0);\n  const lst_J = new Array(k).fill(0);\n  const lst_K = new Array(k).fill(0);\n  const lst_L = new Array(k).fill(0);\n  const lst_M = new Array(k).fill(0);\n  const lst_N = new Array(k).fill(0);\n  const lst_O = new Array(k).fill(0);\n  const lst_P = new Array(k).fill(0);\n  const lst_Q = new Array(k).fill(0);\n  const lst_R = new Array(k).fill(0);\n  const lst_S = new Array(k).fill(0);\n  const lst_T = new Array(k).fill(0);\n  const lst_U = new Array(k).fill(0);\n  const lst_V = new Array(k).fill(0);\n  const lst_W = new Array(k).fill(0);\n  const lst_X = new Array(k).fill(0);\n  const lst_Y = new Array(k).fill(0);\n  const lst_Z = new Array(k).fill(0);\n  const lst_a = new Array(k).fill(0);\n  const lst_b = new Array(k).fill(0);\n  const lst_c = new Array(k).fill(0);\n  const lst_d = new Array(k).fill(0);\n  const lst_e = new Array(k).fill(0);\n  const lst_f = new Array(k).fill(0);\n  const lst_g = new Array(k).fill(0);\n  const lst_h = new Array(k).fill(0);\n  const lst_i = new Array(k).fill(0);\n  const lst_j = new Array(k).fill(0);\n  const lst_k = new Array(k).fill(0);\n  const lst_l = new Array(k).fill(0);\n  const lst_m = new Array(k).fill(0);\n  const lst_n = new Array(k).fill(0);\n  const lst_o = new Array(k).fill(0);\n  const lst_p = new Array(k).fill(0);\n  const lst_q = new Array(k).fill(0);\n  const lst_r = new Array(k).fill(0);\n  const lst_s = new Array(k).fill(0);\n  const lst_t = new Array(k).fill(0);\n  const lst_u = new Array(k).fill(0);\n  const lst_v = new Array(k).fill(0);\n  const lst_w = new Array(k).fill(0);\n  const lst_x = new Array(k).fill(0);\n  const lst_y = new Array(k).fill(0);\n  const lst_z = new Array(k).fill(0);\n  const lst_A = new Array(k).fill(0);\n  const lst_B = new Array(k).fill(0);\n  const lst_C = new Array(k).fill(0);\n  const lst_D = new Array(k).fill(0);\n  const lst_E = new Array(k).fill(0);\n  const lst_F = new Array(k).fill(0);\n  const lst_G = new Array(k).fill(0);\n  const lst_H = new Array(k).fill(0);\n  const lst_I = new Array(k).fill(0);\n  const lst_J = new Array(k).fill(0);\n  const lst_K = new Array(k).fill(0);\n  const lst_L = new Array(k).fill(0);\n  const lst_M = new Array(k).fill(0);\n  const lst_N = new Array(k).fill(0);\n  const lst_O = new Array(k).fill(0);\n  const lst_P = new Array(k).fill(0);\n  const lst_Q = new Array(k).fill(0);\n  const lst_R = new Array(k).fill(0);\n  const lst_S = new Array(k).fill(0);\n  const lst_T = new Array(k).fill(0);\n  const lst_U = new Array(k).fill(0);\n  const lst_V = new Array(k).fill(0);\n  const lst_W = new Array(k).fill(0);\n  const lst_X = new Array(k).fill(0);\n  const lst_Y = new Array(k).fill(0);\n  const lst_Z = new Array(k).fill(0);\n  const lst_a = new Array(k).fill(0);\n  const lst_b = new Array(k).fill(0);\n  const lst_c = new Array(k).fill(0);\n  const lst_d = new Array(k).fill(0);\n  const lst_e = new Array(k).fill(0);\n  const lst_f = new Array(k).fill(0);\n  const lst_g = new Array(k).fill(0);\n  const lst_h = new Array(k).fill(0);\n  const lst_i = new Array(k).fill(0);\n  const lst_j = new Array(k).fill(0);\n  const lst_k = new Array(k).fill(0);\n  const lst_l = new Array(k).fill(0);\n  const lst_m = new Array(k).fill(0);\n  const lst_n = new Array(k).fill(0);\n  const lst_o = new Array(k).fill(0);\n  const lst_p = new Array(k).fill(0);\n  const lst_q = new Array(k).fill(0);\n  const lst_r = new Array(k).fill(0);\n  const lst_s = new Array(k).fill(0);\n  const lst_t = new Array(k).fill(0);\n  const lst_u = new Array(k).fill(0);\n  const lst_v = new Array(k).fill(0);\n  const lst_w = new Array(k).fill(0);\n  const lst_x = new Array(k).fill(0);\n  const lst_y = new Array(k).fill(0);\n  const lst_z = new Array(k).fill(0);\n  const lst_A = new Array(k).fill(0);\n  const lst_B = new Array(k).fill(0);\n  const lst_C = new Array(k).fill(0);\n  const lst_D = new Array(k).fill(0);\n  const lst_E = new Array(k).fill(0);\n  const lst_F = new Array(k).fill(0);\n"}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "gc": "<|endoftext|>/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  if (n <= 1) return [n, n, n, n];\n  return [tri(n - 1) + tri(n - 2) + tri(n), tri(n - 1) + tri(n - 2) + tri(n), tri(n - 1) + tri(n - 2) + tri(n), tri(n - 1) + tri(n - 2) + tri(n), tri(n - 1) + tri(n - 2) + tri(n), tri(n - 1) + tri(n - 2) + tri(n), tri(n - 1) + tri(n - 2) + tri(n), tri(n - 1) + tri(n - 2) + tri(n), tri(n - 1) + tri(n - 2) + tri(n), tri(n - 1) + tri(n - 2) + tri(n), tri(n - 1) + tri(n - 2) + tri(n), tri(n - 1) + tri(n - 2) + tri(n), tri(n - 1) + tri(n - 2) + tri(n), tri(n - 1) + tri(n - 2) + tri(n), tri(n - 1) + tri(n - 2) + tri(n), tri(n - 1) + tri(n - 2) + tri(n), tri(n - 1) + tri(n - 2) + tri(n), tri(n - 1) + tri(n - 2) + tri(n), tri(n - 1) + tri(n - 2) + tri(n), tri(n - 1) + tri(n - 2) + tri(n), tri(n - 1) + tri(n - 2) + tri(n), tri(n - 1) + tri(n - 2) + tri(n), tri(n - 1) + tri(n - 2) + tri(n), tri(n - 1) + tri(n - 2) + tri(n), tri(n - 1) + tri(n - 2) + tri(n), tri(n - 1) + tri(n - 2) + tri(n), tri(n - 1) + tri(n - 2) + tri(n), tri(n - 1) + tri(n - 2) + tri(n), tri(n - 1) + tri(n - 2) + tri(n), tri(n - 1) + tri(n - 2) + tri(n), tri(n - 1) + tri(n - 2) + tri(n), tri(n - 1) + tri(n - 2) + tri(n), tri(n - 1) + tri(n - 2) + tri(n), tri(n - 1) + tri(n - 2) + tri(n), tri(n - 1) + tri(n - 2) + tri(n), tri(n - 1) + tri(n - 2) + tri(n), tri(n - 1) + tri(n - 2) + tri(n), tri(n - 1) + tri(n - 2) + tri(n), tri(n - 1) + tri(n - 2) + tri(n), tri(n - 1) + tri(n - 2) + tri(n), tri(n - 1) + tri(n - 2) + tri(n), tri(n - 1) + tri(n - 2) + tri(n), tri(n - 1) + tri(n - 2) + tri(n), tri(n - 1) + tri(n - 2) + tri(n), tri(n - 1) + tri(n - 2) + tri(n), tri(n - 1) + tri(n - 2) + tri(n), tri(n - 1) + tri(n - 2) + tri(n), tri(n - 1) + tri(n - 2) + tri(n), tri(n - 1) + tri(n - 2) + tri(n), tri(n - 1) + tri(n - 2) + tri(n), tri(n - 1) + tri(n - 2) + tri(n), tri(n - 1) + tri(n - 2) + tri(n), tri(n - 1) + tri(n - 2) + tri(n), tri(n - 1) + tri(n - 2) + tri(n), tri(n - 1) + tri(n - 2) + tri(n), tri(n - 1) + tri(n - 2) + tri(n), tri(n - 1) + tri(n - 2) + tri(n), tri(n - 1) + tri(n - 2) + tri(n), tri(n - 1) + tri(n - 2) + tri(n), tri(n - 1) + tri(n - 2) + tri(n), tri(n - 1) + tri(n - 2) + tri(n), tri(n - 1) + tri(n - 2) + tri(n), tri(n - 1) + tri(n - 2) + tri(n), tri(n - 1) + tri(n - 2) + tri(n), tri(n - 1) + tri(n - 2) + tri(n), tri(n - 1) + tri(n - 2) + tri(n), tri(n - 1) + tri(n - 2) + tri(n), tri(n - 1) + tri(n - 2) + tri(n), tri(n - 1) + tri(n - 2) + tri(n), tri(n - 1) + tri(n - 2) + tri(n), tri(n - 1) + tri(n - 2) + tri(n), tri(n - 1) + tri(n - 2) + tri(n), tri(n - 1) + tri(n - 2) + tri(n), tri(n - 1) + tri(n - 2) + tri(n), tri(n - 1) + tri(n - 2) + tri(n), tri(n - 1) + tri(n - 2) + tri(n), tri(n - 1) + tri(n - 2) + tri(n), tri(n - 1) + tri(n - 2) + tri(n), tri(n - 1) + tri(n - 2) + tri(n), tri(n - 1) + tri(n - 2) + tri(n), tri(n - 1) + tri(n - 2) + tri(n), tri(n - 1) + tri(n - 2) + tri(n), tri(n - 1) + tri(n - 2) + tri(n), tri(n - 1) + tri(n - 2) + tri(n), tri(n - 1) + tri(n - 2) + tri(n), tri(n - 1) + tri(n - 2) + tri(n), tri(n - 1) + tri(n - 2) + tri(n), tri(n - 1) + tri(n - 2) + tri(n), tri(n - 1) + tri(n - 2) + tri(n), tri(n - 1) + tri(n - 2) + tri(n), tri(n - 1) + tri(n - 2) + tri(n), tri(n - 1) + tri(n - 2) + tri(n), tri(n - 1) + tri(n - 2) + tri(n), tri(n - 1) + tri(n - 2) + tri(n), tri(n - 1) + tri(n - 2) + tri(n), tri(n - 1) + tri(n - 2) + tri(n), tri(n - 1) + tri(n - 2) + tri(n), tri(n - 1) + tri(n - 2) + tri(n), tri(n - 1) + tri(n - 2) + tri(n), tri(n - 1) + tri(n - 2) + tri(n), tri(n - 1) + tri(n - 2) + tri(n), tri(n - 1) + tri(n - 2) + tri(n), tri(n - 1) + tri(n - 2) + tri(n), tri(n - 1) + tri(n - 2) + tri(n), tri(n - 1) + tri(n - 2) + tri(n), tri(n - 1) + tri(n - 2) + tri(n), tri(n - 1) + tri(n - 2) + tri(n), tri(n - 1) + tri(n - 2) + tri(n), tri(n - 1) + tri(n - 2) + tri(n), tri(n - 1) + tri(n - 2) + tri(n), tri(n - 1) + tri(n - 2) + tri(n), tri(n - 1) + tri(n - 2) + tri(n), tri(n - 1) + tri(n - 2) + tri(n), tri(n - 1) + tri(n - 2) + tri(n), tri(n - 1) + tri(n - 2) + tri(n), tri(n - 1) + tri(n - 2) + tri(n), tri(n - 1) + tri(n - 2) + tri(n), tri(n - 1) + tri(n - 2) + tri(n), tri(n - 1) + tri(n - 2) + tri(n), tri(n - 1) + tri(n - 2) + tri(n), tri(n - 1) + tri(n - 2) + tri(n), tri(n - 1) + tri(n - "}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integer n, return the product of the odd digits.\n  Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "gc": "<|endoftext|>/*Given a positive integer n, return the product of the odd digits.\n  Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let digit = 0;\n  for (let i = 2; i <= n; i++) {\n    digit *= i;\n  }\n  return digit;\n};\n\n/*Given a positive integer n, return the product of the even digits.\n  Return 0 if all digits are odd.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst evenDigits = (n) => {\n  let digit = 0;\n  for (let i = 1; i <= n; i++) {\n    digit += i % 2? 1 : 0;\n  }\n  return digit;\n};\n\n/*Given a positive integer n, return the product of the digits of the nth power.\n  Return 0 if n is negative.\n  For example:\n  nthPower(-4)  == 0\n  nthPower(-3)  == 0\n  nthPower(-2)  == 0\n  nthPower(-1)  == 0\n  nthPower(0)  == 0\n  nthPower(1)  == 1\n  nthPower(2)  == 2\n  nthPower(3)  == 6\n  nthPower(4)  == 24\n  */\nconst nthPower = (n) => {\n  let product = 1;\n  for (let i = 1; i <= n; i++) {\n    product *= i;\n  }\n  return product;\n};\n\n/*Given a positive integer n, return the sum of all even digits of the nth power.\n  Return 0 if n is negative.\n  For example:\n  nthPowerSum(-4)  == 0\n  nthPowerSum(-3)  == 0\n  nthPowerSum(-2)  == 0\n  nthPowerSum(-1)  == 0\n  nthPowerSum(0)  == 0\n  nthPowerSum(1)  == 1\n  nthPowerSum(2)  == 2\n  nthPowerSum(3)  == 6\n  nthPowerSum(4)  == 24\n  */\nconst nthPowerSum = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += evenDigits(nthPower(i));\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of all odd digits of the nth power.\n  Return 0 if n is negative.\n  For example:\n  nthPowerSum(-4)  == 0\n  nthPowerSum(-3)  == 0\n  nthPowerSum(-2)  == 0\n  nthPowerSum(-1)  == 0\n  nthPowerSum(0)  == 0\n  nthPowerSum(1)  == 1\n  nthPowerSum(2)  == 2\n  nthPowerSum(3)  == 6\n  nthPowerSum(4)  == 24\n  */\nconst nthPowerOddSum = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += oddDigits(nthPower(i));\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of all digits of the nth power.\n  Return 0 if n is negative.\n  For example:\n  nthPowerSum(-4)  == 0\n  nthPowerSum(-3)  == 0\n  nthPowerSum(-2)  == 0\n  nthPowerSum(-1)  == 0\n  nthPowerSum(0)  == 0\n  nthPowerSum(1)  == 1\n  nthPowerSum(2)  == 2\n  nthPowerSum(3)  == 6\n  nthPowerSum(4)  == 24\n  */\nconst nthPowerDigits = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += digits(nthPower(i));\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of all digits of the nth power.\n  Return 0 if n is negative.\n  For example:\n  nthPowerSum(-4)  == 0\n  nthPowerSum(-3)  == 0\n  nthPowerSum(-2)  == 0\n  nthPowerSum(-1)  == 0\n  nthPowerSum(0)  == 0\n  nthPowerSum(1)  == 1\n  nthPowerSum(2)  == 2\n  nthPowerSum(3)  == 6\n  nthPowerSum(4)  == 24\n  */\nconst nthPowerDigitOddSum = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += digitOddDigits(nthPower(i));\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of all digits of the nth power.\n  Return 0 if n is negative.\n  For example:\n  nthPowerSum(-4)  == 0\n  nthPowerSum(-3)  == 0\n  nthPowerSum(-2)  == 0\n  nthPowerSum(-1)  == 0\n  nthPowerSum(0)  == 0\n  nthPowerSum(1)  == 1\n  nthPowerSum(2)  == 2\n  nthPowerSum(3)  == 6\n  nthPowerSum(4)  == 24\n  */\nconst nthPowerDigitDigits = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += digitDigits(nthPower(i));\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of all digits of the nth power.\n  Return 0 if n is negative.\n  For example:\n  nthPowerSum(-4)  == 0\n  nthPowerSum(-3)  == 0\n  nthPowerSum(-2)  == 0\n  nthPowerSum(-1)  == 0\n  nthPowerSum(0)  == 0\n  nthPowerSum(1)  == 1\n  nthPowerSum(2)  == 2\n  nthPowerSum(3)  == 6\n  nthPowerSum(4)  == 24\n  */\nconst nthPowerDigitOddSumDigits = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += digitOddDigitDigits(nthPower(i));\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of all digits of the nth power.\n  Return 0 if n is negative.\n  For example:\n  nthPowerSum(-4)  == 0\n  nthPowerSum(-3)  == 0\n  nthPowerSum(-2)  == 0\n  nthPowerSum(-1)  == 0\n  nthPowerSum(0)  == 0\n  nthPowerSum(1)  == 1\n  nthPowerSum(2)  == 2\n  nthPowerSum(3)  == 6\n  nthPowerSum(4)  == 24\n  */\nconst nthPowerDigitDigitOddSumDigits = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += digitDigitOddDigitDigits(nthPower(i));\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of all digits of the nth power.\n  Return 0 if n is negative.\n  For example:\n  nthPowerSum(-4)  == 0\n  nthPowerSum(-3)  == 0\n  nthPowerSum(-2)  == 0\n  nthPowerSum(-1)  == 0\n  nthPowerSum(0)  == 0\n  nthPowerSum(1)  == 1\n  nthPowerSum(2)  == 2\n  nthPowerSum(3)  == 6\n  nthPowerSum(4)  == 24\n  */\nconst nthPowerDigitDigitOddSumDigitDigits = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += digitDigitOddDigit"}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  is_nested('[[]]') ➞ true\n  is_nested('[]]]]]]][[[[[]') ➞ false\n  is_nested('[][]') ➞ false\n  is_nested('[]') ➞ false\n  is_nested('[[][]]') ➞ true\n  is_nested('[[]][[') ➞ true\n  */\nconst is_nested = (string) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "is_nested", "gc": "<|endoftext|>/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  is_nested('[[]]') ➞ true\n  is_nested('[]]]]]]][[[[[]') ➞ false\n  is_nested('[][]') ➞ false\n  is_nested('[]') ➞ false\n  is_nested('[[][]]') ➞ true\n  is_nested('[[]][[') ➞ true\n  */\nconst is_nested = (string) => {\n  const regex = /[\\[\\]]/g;\n  return regex.test(string);\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  is_nested('[[]]') ➞ true\n  is_nested('[]]]]]]][[[[[]') ➞ false\n  is_nested('[][]') ➞ false\n  is_nested('[]') ➞ false\n  is_nested('[[][]]') ➞ true\n  is_nested('[[]][[') ➞ true\n  */\nconst is_nested = (string) => {\n  const regex = /[\\[\\]]/g;\n  return regex.test(string);\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  is_nested('[[]]') ➞ true\n  is_nested('[]]]]]]][[[[[]') ➞ false\n  is_nested('[][]') ➞ false\n  is_nested('[]') ➞ false\n  is_nested('[[][]]') ➞ true\n  is_nested('[[]][[') ➞ true\n  */\nconst is_nested = (string) => {\n  const regex = /[\\[\\]]/g;\n  return regex.test(string);\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  is_nested('[[]]') ➞ true\n  is_nested('[]]]]]]][[[[[]') ➞ false\n  is_nested('[][]') ➞ false\n  is_nested('[]') ➞ false\n  is_nested('[[][]]') ➞ true\n  is_nested('[[]][[') ➞ true\n  */\nconst is_nested = (string) => {\n  const regex = /[\\[\\]]/g;\n  return regex.test(string);\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  is_nested('[[]]') ➞ true\n  is_nested('[]]]]]]][[[[[]') ➞ false\n  is_nested('[][]') ➞ false\n  is_nested('[]') ➞ false\n  is_nested('[[][]]') ➞ true\n  is_nested('[[]][[') ➞ true\n  */\nconst is_nested = (string) => {\n  const regex = /[\\[\\]]/g;\n  return regex.test(string);\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  is_nested('[[]]') ➞ true\n  is_nested('[]]]]]]][[[[[]') ➞ false\n  is_nested('[][]') ➞ false\n  is_nested('[]') ➞ false\n  is_nested('[[][]]') ➞ true\n  is_nested('[[]][[') ➞ true\n  */\nconst is_nested = (string) => {\n  const regex = /[\\[\\]]/g;\n  return regex.test(string);\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  is_nested('[[]]') ➞ true\n  is_nested('[]]]]]]][[[[[]') ➞ false\n  is_nested('[][]') ➞ false\n  is_nested('[]') ➞ false\n  is_nested('[[][]]') ➞ true\n  is_nested('[[]][[') ➞ true\n  */\nconst is_nested = (string) => {\n  const regex = /[\\[\\]]/g;\n  return regex.test(string);\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  is_nested('[[]]') ➞ true\n  is_nested('[]]]]]]][[[[[]') ➞ false\n  is_nested('[][]') ➞ false\n  is_nested('[]') ➞ false\n  is_nested('[[][]]') ➞ true\n  is_nested('[[]][[') ➞ true\n  */\nconst is_nested = (string) => {\n  const regex = /[\\[\\]]/g;\n  return regex.test(string);\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  is_nested('[[]]') ➞ true\n  is_nested('[]]]]]]][[[[[]') ➞ false\n  is_nested('[][]') ➞ false\n  is_nested('[]') ➞ false\n  is_nested('[[][]]') ➞ true\n  is_nested('[[]][[') ➞ true\n  */\nconst is_nested = (string) => {\n  const regex = /[\\[\\]]/g;\n  return regex.test(string);\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  is_nested('[[]]') ➞ true\n  is_nested('[]]]]]]][[[[[]') ➞ false\n  is_nested('[][]') ➞ false\n  is_nested('[]') ➞ false\n  is_nested('[[][]]') ➞ true\n  is_nested('[[]][[') ➞ true\n  */\nconst is_nested = (string) => {\n  const regex = /[\\[\\]]/g;\n  return regex.test("}
{"task_id": "JavaScript/133", "prompt": "/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sum_squares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sum_squares", "gc": "<|endoftext|>/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sum_squares = (lst) => {\n  const sum_squares = lst.map(n => n * n)\n  return sum_squares\n}\n\n/*\n  You are given a list of numbers.\n  You are given an integer C.\n  You are given a list of integers S\n  You need to return the list of integers such that each element of S is multiplied by C and each element of S is rounded up to the nearest integer.\n  Examples:\n  For lst = [1,2,3] the output should be [2,4,6]\n  For lst = [1,4,9] the output should be [4,9,16]\n  For lst = [1,3,5,7] the output should be [5,15,30]\n  For lst = [1.4,4.2,0] the output should be [4,2,0]\n  For lst = [-2.4,1,1] the output should be [1,-1,1]\n  */\nconst round_up = (lst, C) => {\n  const round_up = lst.map(n => n * C)\n  return round_up\n}\n\n/*\n  You are given a list of numbers.\n  You are given an integer C.\n  You are given a list of integers S\n  You need to return the list of integers such that each element of S is multiplied by C and each element of S is rounded down to the nearest integer.\n  Examples:\n  For lst = [1,2,3] the output should be [2,4,6]\n  For lst = [1,4,9] the output should be [4,9,16]\n  For lst = [1,3,5,7] the output should be [5,15,30]\n  For lst = [1.4,4.2,0] the output should be [4,2,0]\n  For lst = [-2.4,1,1] the output should be [1,-1,1]\n  */\nconst round_down = (lst, C) => {\n  const round_down = lst.map(n => n * C)\n  return round_down\n}\n\n/*\n  You are given a list of numbers.\n  You are given an integer C.\n  You are given a list of integers S\n  You need to return the list of integers such that each element of S is multiplied by C and each element of S is rounded up to the nearest integer.\n  Examples:\n  For lst = [1,2,3] the output should be [2,4,6]\n  For lst = [1,4,9] the output should be [4,9,16]\n  For lst = [1,3,5,7] the output should be [5,15,30]\n  For lst = [1.4,4.2,0] the output should be [4,2,0]\n  For lst = [-2.4,1,1] the output should be [1,-1,1]\n  */\nconst round_up_to_nearest = (lst, C) => {\n  const round_up_to_nearest = lst.map(n => n * C)\n  return round_up_to_nearest\n}\n\n/*\n  You are given a list of numbers.\n  You are given an integer C.\n  You are given a list of integers S\n  You need to return the list of integers such that each element of S is multiplied by C and each element of S is rounded down to the nearest integer.\n  Examples:\n  For lst = [1,2,3] the output should be [2,4,6]\n  For lst = [1,4,9] the output should be [4,9,16]\n  For lst = [1,3,5,7] the output should be [5,15,30]\n  For lst = [1.4,4.2,0] the output should be [4,2,0]\n  For lst = [-2.4,1,1] the output should be [1,-1,1]\n  */\nconst round_down_to_nearest = (lst, C) => {\n  const round_down_to_nearest = lst.map(n => n * C)\n  return round_down_to_nearest\n}\n\n/*\n  You are given a list of numbers.\n  You are given an integer C.\n  You are given a list of integers S\n  You need to return the list of integers such that each element of S is multiplied by C and each element of S is rounded up to the nearest integer.\n  Examples:\n  For lst = [1,2,3] the output should be [2,4,6]\n  For lst = [1,4,9] the output should be [4,9,16]\n  For lst = [1,3,5,7] the output should be [5,15,30]\n  For lst = [1.4,4.2,0] the output should be [4,2,0]\n  For lst = [-2.4,1,1] the output should be [1,-1,1]\n  */\nconst round_up_to_nearest_ceiling = (lst, C) => {\n  const round_up_to_nearest_ceiling = lst.map(n => n * C)\n  return round_up_to_nearest_ceiling\n}\n\n/*\n  You are given a list of numbers.\n  You are given an integer C.\n  You are given a list of integers S\n  You need to return the list of integers such that each element of S is multiplied by C and each element of S is rounded down to the nearest integer.\n  Examples:\n  For lst = [1,2,3] the output should be [2,4,6]\n  For lst = [1,4,9] the output should be [4,9,16]\n  For lst = [1,3,5,7] the output should be [5,15,30]\n  For lst = [1.4,4.2,0] the output should be [4,2,0]\n  For lst = [-2.4,1,1] the output should be [1,-1,1]\n  */\nconst round_down_to_nearest_ceiling = (lst, C) => {\n  const round_down_to_nearest_ceiling = lst.map(n => n * C)\n  return round_down_to_nearest_ceiling\n}\n\n/*\n  You are given a list of numbers.\n  You are given an integer C.\n  You are given a list of integers S\n  You need to return the list of integers such that each element of S is multiplied by C and each element of S is rounded up to the nearest integer.\n  Examples:\n  For lst = [1,2,3] the output should be [2,4,6]\n  For lst = [1,4,9] the output should be [4,9,16]\n  For lst = [1,3,5,7] the output should be [5,15,30]\n  For lst = [1.4,4.2,0] the output should be [4,2,0]\n  For lst = [-2.4,1,1] the output should be [1,-1,1]\n  */\nconst round_up_to_nearest_floor = (lst, C) => {\n  const round_up_to_nearest_floor = lst.map(n => n * C)\n  return round_up_to_nearest_floor\n}\n\n/*\n  You are given a list of numbers.\n  You are given an integer C.\n  You are given a list of integers S\n  You need to return the list of integers such that each element of S is multiplied by C and each element of S is rounded down to the nearest integer.\n  Examples:\n  For lst = [1,2,3] the output should be [2,4,6]\n  For lst = [1,4,9] the output should be [4,9,16]\n  For lst = [1,3,5,7] the output should be [5,15,30]\n  For lst = [1.4,4.2,0] the output should be [4,2,0]\n  For lst = [-2.4,1,1] the output should be [1,-1,1]\n  */\nconst round_down_to_nearest_floor = (lst, C) => {\n  const round_down_to_nearest_floor = lst.map(n => n * C)\n  return round_down_to_nearest_floor\n}\n\n/*\n  You are given a list of numbers.\n  You are given an integer C.\n  You are given a list of integers S\n  You need to return the list of integers such that each element of S is multiplied by C and each element of S is rounded up to the nearest integer.\n  Examples:\n  For lst = [1,2,3] the output should be [2,4,6]\n  For lst = [1,4,9] the output should be [4,9,16]\n  For lst = [1,3,5,7] the output "}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  check_if_last_char_is_a_letter(\"apple pie\") ➞ false\n  check_if_last_char_is_a_letter(\"apple pi e\") ➞ true\n  check_if_last_char_is_a_letter(\"apple pi e \") ➞ false\n  check_if_last_char_is_a_letter(\"\") ➞ false\n  */\nconst check_if_last_char_is_a_letter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "check_if_last_char_is_a_letter", "gc": "<|endoftext|>/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  check_if_last_char_is_a_letter(\"apple pie\") ➞ false\n  check_if_last_char_is_a_letter(\"apple pi e\") ➞ true\n  check_if_last_char_is_a_letter(\"apple pi e \") ➞ false\n  check_if_last_char_is_a_letter(\"\") ➞ false\n  */\nconst check_if_last_char_is_a_letter = (txt) => {\n  let last_char = txt.charAt(txt.length - 1)\n  let is_letter = last_char.match(/[a-zA-Z]/)\n  return is_letter\n}\n\n/* Create a function that returns true if the last character\n  of a given string is a digit and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  check_if_last_char_is_a_digit(\"apple pie\") ➞ false\n  check_if_last_char_is_a_digit(\"apple pi e\") ➞ true\n  check_if_last_char_is_a_digit(\"apple pi e \") ➞ false\n  check_if_last_char_is_a_digit(\"\") ➞ false\n  */\nconst check_if_last_char_is_a_digit = (txt) => {\n  let last_char = txt.charAt(txt.length - 1)\n  let is_digit = last_char.match(/\\d/)\n  return is_digit\n}\n\n/* Create a function that returns true if the last character\n  of a given string is a space and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  check_if_last_char_is_a_space(\"apple pie\") ➞ false\n  check_if_last_char_is_a_space(\"apple pi e\") ➞ true\n  check_if_last_char_is_a_space(\"apple pi e \") ➞ false\n  check_if_last_char_is_a_space(\"\") ➞ false\n  */\nconst check_if_last_char_is_a_space = (txt) => {\n  let last_char = txt.charAt(txt.length - 1)\n  let is_space = last_char.match(/\\s/)\n  return is_space\n}\n\n/* Create a function that returns true if the last character\n  of a given string is a capital letter and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  check_if_last_char_is_a_capital(\"apple pie\") ➞ false\n  check_if_last_char_is_a_capital(\"apple pi e\") ➞ true\n  check_if_last_char_is_a_capital(\"apple pi e \") ➞ false\n  check_if_last_char_is_a_capital(\"\") ➞ false\n  */\nconst check_if_last_char_is_a_capital = (txt) => {\n  let last_char = txt.charAt(txt.length - 1)\n  let is_capital = last_char.match(/[A-Z]/)\n  return is_capital\n}\n\n/* Create a function that returns true if the last character\n  of a given string is a special character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  check_if_last_char_is_a_special(\"apple pie\") ➞ false\n  check_if_last_char_is_a_special(\"apple pi e\") ➞ true\n  check_if_last_char_is_a_special(\"apple pi e \") ➞ false\n  check_if_last_char_is_a_special(\"\") ➞ false\n  */\nconst check_if_last_char_is_a_special = (txt) => {\n  let last_char = txt.charAt(txt.length - 1)\n  let is_special = last_char.match(/[!@#$%^&*()_+{}|:\"<>?,.\\/]/)\n  return is_special\n}\n\n/* Create a function that returns true if the last character\n  of a given string is a special character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  check_if_last_char_is_a_special_and_not_a_word(\"apple pie\") ➞ false\n  check_if_last_char_is_a_special_and_not_a_word(\"apple pi e\") ➞ true\n  check_if_last_char_is_a_special_and_not_a_word(\"apple pi e \") ➞ false\n  check_if_last_char_is_a_special_and_not_a_word(\"\") ➞ false\n  */\nconst check_if_last_char_is_a_special_and_not_a_word = (txt) => {\n  let last_char = txt.charAt(txt.length - 1)\n  let is_special_and_not_a_word = last_char.match(/[!@#$%^&*()_+{}|:\"<>?,.\\/]/)\n  return is_special_and_not_a_word\n}\n\n/* Create a function that returns true if the last character\n  of a given string is a special character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  check_if_last_char_is_a_special_and_not_a_word_and_not_a_digit(\"apple pie\") ➞ false\n  check_if_last_char_is_a_special_and_not_a_word_and_not_a_digit(\"apple pi e\") ➞ true\n  check_if_last_char_is_a_special_and_not_a_word_and_not_a_digit(\"apple pi e \") ➞ false\n  check_if_last_char_is_a_special_and_not_a_word_and_not_a_digit(\"\") ➞ false\n  */\nconst check_if_last_char_is_a_special_and_not_a_word_and_not_a_digit = (txt) => {\n  let last_char = txt.charAt(txt.length - 1)\n  let is_special_and_not_a_word_and_not_a_digit = last_char.match(/[!@#$%^&*()_+{}|:\"<>?,.\\/]/)\n  return is_special_and_not_a_word_and_not_a_digit\n}\n\n/* Create a function that returns true if the last character\n  of a given string is a special character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  check_if_last_char_is_a_special_and_not_a_word_and_not_a_digit_and_not_a_space(\"apple pie\") ➞ false\n  check_if_last_char_is_a_special_and_not_a_word_and_not_a_digit_and_not_a_space(\"apple pi e\") ➞ true\n  check_if_last_char_is_a_special_and_not_a_word_and_not_a_digit_and_not_a_space(\"apple pi e \") ➞ false\n  check_if_last_char_is_a_special_and_not_a_word_and_not_a_digit_and_not_a_space(\"\") ➞ false\n  */\nconst check_if_last_char_is_a_special_and_not_a_word_and_not_a_digit_and_not_a_space = (txt) => {\n  let last_char = txt.charAt(txt.length - 1)\n  let is_special_and_not_a_word_and_not_a_digit_and_not_a_space = last_char.match(/[!@#$%^&*()_+{}|:\"<>?,.\\/]/)\n  return is_special_and_not_a_word_and_"}
{"task_id": "JavaScript/135", "prompt": "/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  can_arrange([1,2,4,3,5]) = 3\n  can_arrange([1,2,3]) = -1\n  */\nconst can_arrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "can_arrange", "gc": "<|endoftext|>/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  can_arrange([1,2,4,3,5]) = 3\n  can_arrange([1,2,3]) = -1\n  */\nconst can_arrange = (arr) => {\n  let index = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > arr[index]) {\n      index = i;\n    }\n  }\n  return index;\n};\n\n/*\n  Given an array of integers, return a new array which contains all the\n  integers except the one at index. For example,\n\n  can_partition([1,2,3,4,5,6]) = [1,3,6]\n  can_partition([1,2,3,4,5,6]) = [1,3,6]\n  can_partition([1,2,3,4,5,6]) = [1,3,6]\n  can_partition([1,2,3,4,5,6]) = [1,3,6]\n  can_partition([1,2,3,4,5,6]) = [1,3,6]\n  can_partition([1,2,3,4,5,6]) = [1,3,6]\n  can_partition([1,2,3,4,5,6]) = [1,3,6]\n  can_partition([1,2,3,4,5,6]) = [1,3,6]\n  can_partition([1,2,3,4,5,6]) = [1,3,6]\n  can_partition([1,2,3,4,5,6]) = [1,3,6]\n  can_partition([1,2,3,4,5,6]) = [1,3,6]\n  can_partition([1,2,3,4,5,6]) = [1,3,6]\n  can_partition([1,2,3,4,5,6]) = [1,3,6]\n  can_partition([1,2,3,4,5,6]) = [1,3,6]\n  can_partition([1,2,3,4,5,6]) = [1,3,6]\n  can_partition([1,2,3,4,5,6]) = [1,3,6]\n  can_partition([1,2,3,4,5,6]) = [1,3,6]\n  can_partition([1,2,3,4,5,6]) = [1,3,6]\n  can_partition([1,2,3,4,5,6]) = [1,3,6]\n  can_partition([1,2,3,4,5,6]) = [1,3,6]\n  can_partition([1,2,3,4,5,6]) = [1,3,6]\n  can_partition([1,2,3,4,5,6]) = [1,3,6]\n  can_partition([1,2,3,4,5,6]) = [1,3,6]\n  can_partition([1,2,3,4,5,6]) = [1,3,6]\n  can_partition([1,2,3,4,5,6]) = [1,3,6]\n  can_partition([1,2,3,4,5,6]) = [1,3,6]\n  can_partition([1,2,3,4,5,6]) = [1,3,6]\n  can_partition([1,2,3,4,5,6]) = [1,3,6]\n  can_partition([1,2,3,4,5,6]) = [1,3,6]\n  can_partition([1,2,3,4,5,6]) = [1,3,6]\n  can_partition([1,2,3,4,5,6]) = [1,3,6]\n  can_partition([1,2,3,4,5,6]) = [1,3,6]\n  can_partition([1,2,3,4,5,6]) = [1,3,6]\n  can_partition([1,2,3,4,5,6]) = [1,3,6]\n  can_partition([1,2,3,4,5,6]) = [1,3,6]\n  can_partition([1,2,3,4,5,6]) = [1,3,6]\n  can_partition([1,2,3,4,5,6]) = [1,3,6]\n  can_partition([1,2,3,4,5,6]) = [1,3,6]\n  can_partition([1,2,3,4,5,6]) = [1,3,6]\n  can_partition([1,2,3,4,5,6]) = [1,3,6]\n  can_partition([1,2,3,4,5,6]) = [1,3,6]\n  can_partition([1,2,3,4,5,6]) = [1,3,6]\n  can_partition([1,2,3,4,5,6]) = [1,3,6]\n  can_partition([1,2,3,4,5,6]) = [1,3,6]\n  can_partition([1,2,3,4,5,6]) = [1,3,6]\n  can_partition([1,2,3,4,5,6]) = [1,3,6]\n  can_partition([1,2,3,4,5,6]) = [1,3,6]\n  can_partition([1,2,3,4,5,6]) = [1,3,6]\n  can_partition([1,2,3,4,5,6]) = [1,3,6]\n  can_partition([1,2,3,4,5,6]) = [1,3,6]\n  can_partition([1,2,3,4,5,6]) = [1,3,6]\n  can_partition([1,2,3,4,5,6]) = [1,3,6]\n  can_partition([1,2,3,4,5,6]) = [1,3,6]\n  can_partition([1,2,3,4,5,6]) = [1,3,6]\n  can_partition([1,2,3,4,5,6]) = [1,3,6]\n  can_partition([1,2,3,4,5,6]) = [1,3,6]\n  can_partition([1,2,3,4,5,6]) = [1,3,6]\n  can_partition([1,2,3,4,5,6]) = [1,3,6]\n  can_partition([1,2,3,4,5,6]) = [1,3,6]\n  can_partition([1,2,3,4,5,6]) = [1,3,6]\n  can_partition([1,2,3,4,5,6]) = [1,3,6]\n  can_partition([1,2,3,4,5,6]) = [1,3,6]\n  can_partition([1,2,3,4,5,6]) = [1,3,6]\n  can_partition([1,2,3,4,5,6]) = [1,3,6]\n  can_partition([1,2,3,4,5,6]) = [1,3,6]\n  can_partition([1,2,3,4,5,6]) = [1,3,6]\n  can_partition([1,2,3,4,5,6]) = [1,3,6]\n  can_partition([1,2,3,4,5,6]) = [1,3,6]\n  can_partition([1,2,3,4,5,6]) = [1,3,6]\n  can_partition([1,2,3,4,5,6]) = [1,3,6]\n  can_partition([1,2,3,4,5,6]) = [1,3,6]\n  can_partition([1,2,3,4,5,6]) = [1,3,6]\n  can_partition([1,2,3,4,5,6]) = [1,3,6]\n  can_partition([1,2,3,4,5,6]) = [1,3,6]\n  can_partition([1,2,3,4,5,6]) = [1,3,6]\n  can_partition([1,2,3,4,5,6]) = [1,3,6]\n  can_partition([1,2,3,4,5,6]) = [1,3,6]\n  can_partition([1,2,3,4,5,6]) = [1,3,6]\n  can_partition([1,2,3,4,5,6]) = [1,3,6]\n  can_partition([1,2,3,4,5,6]) = [1,3,6]\n  can_partition([1,2,3,4,5,6]) = [1,3,6]\n  can_partition([1,2,3,4,5,6]) = [1,3,6]\n  can_partition([1,2,3,4,5,6]) = [1,3,6]\n  can_partition([1,2,3,4,5,6]) = [1,3,6]\n  can_partition([1,2,3,4,5,6]) = [1,3,6]\n  can_partition([1,2,3,4,5,6]) = [1,3,6]\n  can_partition([1,2,3,4,5,6]) = [1,3,6]\n  can_partition([1,2,3,4,5,6]) = [1,3,6]\n  can_partition([1,2,3,4,5,6]) = [1,3,6]\n  can_partition([1,2,3,4,5,6]) = [1,3,6]\n  can_partition([1,2,3,4,5,6]) = [1,3,6]\n  can_partition([1,2,3,4,5,6]) = [1,3,6]\n  can_partition([1,2,3,4,5,6]) = [1,3,6]\n  can_partition([1,2,3,4,5,6]) = [1,3,6]\n  can_partition([1,2,3,4,5,6]) = [1,3,6]\n  can_partition([1,2,3,4,5,6]) = [1,3,6]\n  can_partition([1,2,3,4,5,6]) = [1,3,6]\n  can_partition([1,2,3,4,5,6]) = [1,3,6]\n  can_partition([1,2,3,4,5,6]) = [1,3,6]\n  can_partition([1,2,3,4,5,6]) = [1,3,6]\n  can_partition([1,2,3,4,5,6]) = [1,3,6]\n  can_partition([1,2,3,4,5,6]) = [1,3,6]\n  can_partition([1,2,3,4,5,6]) = [1,3,6]\n  can_partition([1,2,3,4,5,6]) = [1,3,6]\n  can_partition([1,2,3,4,5,6]) = [1,3,6]\n  can_partition([1,2,3,4,5,6]) = [1,3,6]\n  can_partition([1,2,3,4,5,6]) = [1,3,6]\n  can_partition([1,2,3,4,5,6]) = [1,3,6]\n"}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largest_smallest_integers([]) == (null, null)\n  largest_smallest_integers([0]) == (null, null)\n  */\nconst largest_smallest_integers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largest_smallest_integers", "gc": "<|endoftext|>/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largest_smallest_integers([]) == (null, null)\n  largest_smallest_integers([0]) == (null, null)\n  */\nconst largest_smallest_integers = (lst) => {\n  let largest = null, smallest = null, i;\n  for (i = 0; i < lst.length; i++) {\n    if (lst[i] > largest) {\n      largest = lst[i];\n    }\n    if (lst[i] < smallest) {\n      smallest = lst[i];\n    }\n  }\n  return [smallest, largest];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of positive integers, and 'b' is the smallest\n  of negative integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largest_smallest_integers([]) == (null, null)\n  largest_smallest_integers([0]) == (null, null)\n  */\nconst largest_smallest_negative_integers = (lst) => {\n  let largest = null, smallest = null, i;\n  for (i = 0; i < lst.length; i++) {\n    if (lst[i] > largest) {\n      largest = lst[i];\n    }\n    if (lst[i] < smallest) {\n      smallest = lst[i];\n    }\n  }\n  return [smallest, largest];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largest_smallest_negative_integers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largest_smallest_negative_integers([]) == (null, null)\n  largest_smallest_negative_integers([0]) == (null, null)\n  */\nconst largest_smallest_positive_integers = (lst) => {\n  let largest = null, smallest = null, i;\n  for (i = 0; i < lst.length; i++) {\n    if (lst[i] > largest) {\n      largest = lst[i];\n    }\n    if (lst[i] < smallest) {\n      smallest = lst[i];\n    }\n  }\n  return [smallest, largest];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of positive integers, and 'b' is the smallest\n  of negative integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largest_smallest_positive_integers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largest_smallest_positive_integers([]) == (null, null)\n  largest_smallest_positive_integers([0]) == (null, null)\n  */\nconst largest_smallest_negative_integers = (lst) => {\n  let largest = null, smallest = null, i;\n  for (i = 0; i < lst.length; i++) {\n    if (lst[i] > largest) {\n      largest = lst[i];\n    }\n    if (lst[i] < smallest) {\n      smallest = lst[i];\n    }\n  }\n  return [smallest, largest];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of positive integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largest_smallest_positive_integers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largest_smallest_positive_integers([]) == (null, null)\n  largest_smallest_positive_integers([0]) == (null, null)\n  */\nconst largest_smallest_positive_integers = (lst) => {\n  let largest = null, smallest = null, i;\n  for (i = 0; i < lst.length; i++) {\n    if (lst[i] > largest) {\n      largest = lst[i];\n    }\n    if (lst[i] < smallest) {\n      smallest = lst[i];\n    }\n  }\n  return [smallest, largest];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of positive integers, and 'b' is the smallest\n  of negative integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largest_smallest_negative_integers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largest_smallest_negative_integers([]) == (null, null)\n  largest_smallest_negative_integers([0]) == (null, null)\n  */\nconst largest_smallest_negative_integers = (lst) => {\n  let largest = null, smallest = null, i;\n  for (i = 0; i < lst.length; i++) {\n    if (lst[i] > largest) {\n      largest = lst[i];\n    }\n    if (lst[i] < smallest) {\n      smallest = lst[i];\n    }\n  }\n  return [smallest, largest];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of positive integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largest_smallest_positive_integers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largest_smallest_positive_integers([]) == (null, null)\n  largest_smallest_positive_integers([0]) == (null, null)\n  */\nconst largest_smallest_positive_integers = (lst) => {\n  let largest = null, smallest = null, i;\n  for (i = 0; i < lst.length; i++) {\n    if (lst[i] > largest) {\n      largest = lst[i];\n    }\n    if (lst[i] < smallest) {\n      smallest = lst[i];\n    }\n  }\n  return [smallest, largest];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of positive integers, and 'b' is the smallest\n  of negative integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largest_smallest_negative_integers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largest_smallest_negative_integers([]) == (null, null)\n  largest_smallest_negative_integers([0]) == (null, null)\n  */\nconst largest_smallest_positive_integers = (lst) => {\n  let largest = null, smallest = null, i;\n  for (i = 0; i < lst.length; i++) {\n    if (lst[i] > largest) {\n      largest = lst[i];\n    }\n    if (lst[i] < smallest) {\n      smallest = lst[i];\n    }\n  }\n  return [smallest, largest];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of positive integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largest_smallest_positive_integers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largest_smallest_positive_integers([]) == (null, null)\n  largest_smallest_positive_integers([0]) == (null, null)\n  */\nconst largest_smallest_positive_integers = (lst) => {\n  let largest = null, smallest = null, i;\n  for (i = 0; i < lst.length; i++) {\n    if (lst[i] > largest) {\n      largest = lst[i];\n    }\n    if (lst[i] < smallest) {\n      smallest = lst[i];\n    }\n  }\n  return [smallest, largest];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a"}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be . or ,\n\n  compare_one(1, 2.5) ➞ 2.5\n  compare_one(1, \"2,3\") ➞ \"2,3\"\n  compare_one(\"5,1\", \"6\") ➞ \"6\"\n  compare_one(\"1\", 1) ➞ null\n  */\nconst compare_one = (a, b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compare_one", "gc": "<|endoftext|>/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  compare_one(1, 2.5) ➞ 2.5\n  compare_one(1, \"2,3\") ➞ \"2,3\"\n  compare_one(\"5,1\", \"6\") ➞ \"6\"\n  compare_one(\"1\", 1) ➞ null\n  */\nconst compare_one = (a, b) => {\n  if (a === null || b === null) return null;\n  if (typeof a === \"string\" && typeof b === \"string\") {\n    if (a === b) return null;\n    return parseFloat(a) > parseFloat(b)? 1 : -1;\n  }\n  if (typeof a === \"number\" && typeof b === \"number\") {\n    return a > b? 1 : -1;\n  }\n  if (typeof a === \"string\" && typeof b === \"number\") {\n    return parseFloat(a) > parseFloat(b)? 1 : -1;\n  }\n  if (typeof a === \"string\" && typeof b === \"number\") {\n    return parseFloat(a) > parseFloat(b)? 1 : -1;\n  }\n  if (typeof a === \"string\" && typeof b === \"number\") {\n    return parseFloat(a) > parseFloat(b)? 1 : -1;\n  }\n  if (typeof a === \"string\" && typeof b === \"number\") {\n    return parseFloat(a) > parseFloat(b)? 1 : -1;\n  }\n  if (typeof a === \"string\" && typeof b === \"number\") {\n    return parseFloat(a) > parseFloat(b)? 1 : -1;\n  }\n  if (typeof a === \"string\" && typeof b === \"number\") {\n    return parseFloat(a) > parseFloat(b)? 1 : -1;\n  }\n  if (typeof a === \"string\" && typeof b === \"number\") {\n    return parseFloat(a) > parseFloat(b)? 1 : -1;\n  }\n  if (typeof a === \"string\" && typeof b === \"number\") {\n    return parseFloat(a) > parseFloat(b)? 1 : -1;\n  }\n  if (typeof a === \"string\" && typeof b === \"number\") {\n    return parseFloat(a) > parseFloat(b)? 1 : -1;\n  }\n  if (typeof a === \"string\" && typeof b === \"number\") {\n    return parseFloat(a) > parseFloat(b)? 1 : -1;\n  }\n  if (typeof a === \"string\" && typeof b === \"number\") {\n    return parseFloat(a) > parseFloat(b)? 1 : -1;\n  }\n  if (typeof a === \"string\" && typeof b === \"number\") {\n    return parseFloat(a) > parseFloat(b)? 1 : -1;\n  }\n  if (typeof a === \"string\" && typeof b === \"number\") {\n    return parseFloat(a) > parseFloat(b)? 1 : -1;\n  }\n  if (typeof a === \"string\" && typeof b === \"number\") {\n    return parseFloat(a) > parseFloat(b)? 1 : -1;\n  }\n  if (typeof a === \"string\" && typeof b === \"number\") {\n    return parseFloat(a) > parseFloat(b)? 1 : -1;\n  }\n  if (typeof a === \"string\" && typeof b === \"number\") {\n    return parseFloat(a) > parseFloat(b)? 1 : -1;\n  }\n  if (typeof a === \"string\" && typeof b === \"number\") {\n    return parseFloat(a) > parseFloat(b)? 1 : -1;\n  }\n  if (typeof a === \"string\" && typeof b === \"number\") {\n    return parseFloat(a) > parseFloat(b)? 1 : -1;\n  }\n  if (typeof a === \"string\" && typeof b === \"number\") {\n    return parseFloat(a) > parseFloat(b)? 1 : -1;\n  }\n  if (typeof a === \"string\" && typeof b === \"number\") {\n    return parseFloat(a) > parseFloat(b)? 1 : -1;\n  }\n  if (typeof a === \"string\" && typeof b === \"number\") {\n    return parseFloat(a) > parseFloat(b)? 1 : -1;\n  }\n  if (typeof a === \"string\" && typeof b === \"number\") {\n    return parseFloat(a) > parseFloat(b)? 1 : -1;\n  }\n  if (typeof a === \"string\" && typeof b === \"number\") {\n    return parseFloat(a) > parseFloat(b)? 1 : -1;\n  }\n  if (typeof a === \"string\" && typeof b === \"number\") {\n    return parseFloat(a) > parseFloat(b)? 1 : -1;\n  }\n  if (typeof a === \"string\" && typeof b === \"number\") {\n    return parseFloat(a) > parseFloat(b)? 1 : -1;\n  }\n  if (typeof a === \"string\" && typeof b === \"number\") {\n    return parseFloat(a) > parseFloat(b)? 1 : -1;\n  }\n  if (typeof a === \"string\" && typeof b === \"number\") {\n    return parseFloat(a) > parseFloat(b)? 1 : -1;\n  }\n  if (typeof a === \"string\" && typeof b === \"number\") {\n    return parseFloat(a) > parseFloat(b)? 1 : -1;\n  }\n  if (typeof a === \"string\" && typeof b === \"number\") {\n    return parseFloat(a) > parseFloat(b)? 1 : -1;\n  }\n  if (typeof a === \"string\" && typeof b === \"number\") {\n    return parseFloat(a) > parseFloat(b)? 1 : -1;\n  }\n  if (typeof a === \"string\" && typeof b === \"number\") {\n    return parseFloat(a) > parseFloat(b)? 1 : -1;\n  }\n  if (typeof a === \"string\" && typeof b === \"number\") {\n    return parseFloat(a) > parseFloat(b)? 1 : -1;\n  }\n  if (typeof a === \"string\" && typeof b === \"number\") {\n    return parseFloat(a) > parseFloat(b)? 1 : -1;\n  }\n  if (typeof a === \"string\" && typeof b === \"number\") {\n    return parseFloat(a) > parseFloat(b)? 1 : -1;\n  }\n  if (typeof a === \"string\" && typeof b === \"number\") {\n    return parseFloat(a) > parseFloat(b)? 1 : -1;\n  }\n  if (typeof a === \"string\" && typeof b === \"number\") {\n    return parseFloat(a) > parseFloat(b)? 1 : -1;\n  }\n  if (typeof a === \"string\" && typeof b === \"number\") {\n    return parseFloat(a) > parseFloat(b)? 1 : -1;\n  }\n  if (typeof a === \"string\" && typeof b === \"number\") {\n    return parseFloat(a) > parseFloat(b)? 1 : -1;\n  }\n  if (typeof a === \"string\" && typeof b === \"number\") {\n    return parseFloat(a) > parseFloat(b)? 1 : -1;\n  }\n  if (typeof a === \"string\" && typeof b === \"number\") {\n    return parseFloat(a) > parseFloat(b)? 1 : -1;\n  }\n  if (typeof a === \"string\" && typeof b === \"number\") {\n    return parseFloat(a) > parseFloat(b)? 1 : -1;\n  }\n  if (typeof a === \"string\" && typeof b === \"number\") {\n    return parseFloat(a) > parseFloat(b)? 1 : -1;\n  }\n  if (typeof a === \"string\" && typeof b === \"number\") {\n    return parseFloat(a) > parseFloat(b)? 1 : -1;\n  }\n  if (typeof a === \"string\" && typeof b === \"number\") {\n    return parseFloat(a) > parseFloat(b)? 1 : -1;\n  }\n  if (typeof a === \"string\" && typeof b === \"number\") {\n    return parseFloat(a) > parseFloat(b)? 1 : -1;\n  }\n  if (typeof a === \"string\" && typeof b === \"number\") {\n    return parseFloat(a) > parseFloat(b)? 1 : -1;\n  }\n  if (typeof a === \"string\" && typeof b === \"number\") {\n    return parseFloat(a) > parseFloat(b)? 1 : -1;\n  }\n  if (typeof a === \"string\" && typeof b === \"number\") {\n    return parseFloat(a) > parseFloat(b)? 1 : -1;\n  }\n  if (typeof a === \"string\" && typeof b === \"number\") {\n    return parseFloat(a) > parseFloat(b)? 1 : -1;\n  }\n  if (typeof a === \"string\" && typeof b === \"number\") {\n    return parseFloat(a) > parseFloat(b)? 1 : -1;\n  }\n  if (typeof a === \"string\" && typeof b === \"number\") {\n    return parseFloat(a) > parseFloat(b)? 1 : -1;\n  }\n  if (typeof a === \"string\" && typeof b === \"number\") {\n    return parseFloat(a) > parseFloat(b)? 1 : -1;\n  }\n  if (typeof a === \"string\" && typeof b === \"number\") {\n    return parseFloat(a) > parseFloat(b)? 1 : -1;\n  }\n  if (typeof a === \"string\" && typeof b === \"number\") {\n    return parseFloat(a) > parseFloat(b)? 1 : -1;\n  }\n  if (typeof a === \"string\" && typeof b === \"number\") {\n    return parseFloat(a) > parseFloat(b)? 1 : -1;\n  }\n  if (typeof a === \"string\" && typeof b === \"number\") {\n    return parseFloat(a) > parseFloat(b)? 1 : -1;\n  }\n  if (typeof a === \"string\" && typeof b === \"number\") {\n    return parseFloat(a) > parseFloat(b)? 1 : -1;\n  }\n  if (typeof a === \"string\" && typeof b === \"number\") {\n    return parseFloat(a) > parseFloat(b)? 1 : -1;\n  }\n  if (typeof a === \"string\" && typeof b === \"number\") {\n    return parseFloat(a) > parseFloat(b)? 1 : -1;\n  }\n  if (typeof a === \"string\" && typeof b === \"number\") {\n    return parseFloat(a) > parseFloat(b)? 1 : -1;\n  }\n  if (typeof a === \"string\" && typeof b === \"number\") {\n    return parseFloat(a) > parseFloat(b)? 1 : -1;\n  }\n  if (typeof a === \"string\" && typeof b === \"number\") {\n    return parseFloat(a) > parseFloat(b)? 1 : -1;\n"}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  is_equal_to_sum_even(4) == false\n  is_equal_to_sum_even(6) == false\n  is_equal_to_sum_even(8) == true\n  */\nconst is_equal_to_sum_even = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "is_equal_to_sum_even", "gc": "<|endoftext|>/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  is_equal_to_sum_even(4) == false\n  is_equal_to_sum_even(6) == false\n  is_equal_to_sum_even(8) == true\n  */\nconst is_equal_to_sum_even = (n) => {\n  return n % 2 === 0 && n % 4 === 0;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 8 positive even numbers\n  Example\n  is_equal_to_sum_even(8) == false\n  is_equal_to_sum_even(10) == false\n  is_equal_to_sum_even(12) == true\n  */\nconst is_equal_to_sum_even = (n) => {\n  return n % 2 === 0 && n % 8 === 0;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 16 positive even numbers\n  Example\n  is_equal_to_sum_even(16) == false\n  is_equal_to_sum_even(20) == false\n  is_equal_to_sum_even(24) == true\n  */\nconst is_equal_to_sum_even = (n) => {\n  return n % 2 === 0 && n % 16 === 0;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 32 positive even numbers\n  Example\n  is_equal_to_sum_even(32) == false\n  is_equal_to_sum_even(40) == false\n  is_equal_to_sum_even(48) == true\n  */\nconst is_equal_to_sum_even = (n) => {\n  return n % 2 === 0 && n % 32 === 0;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 64 positive even numbers\n  Example\n  is_equal_to_sum_even(64) == false\n  is_equal_to_sum_even(80) == false\n  is_equal_to_sum_even(88) == true\n  */\nconst is_equal_to_sum_even = (n) => {\n  return n % 2 === 0 && n % 64 === 0;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 128 positive even numbers\n  Example\n  is_equal_to_sum_even(128) == false\n  is_equal_to_sum_even(160) == false\n  is_equal_to_sum_even(192) == true\n  */\nconst is_equal_to_sum_even = (n) => {\n  return n % 2 === 0 && n % 128 === 0;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 256 positive even numbers\n  Example\n  is_equal_to_sum_even(256) == false\n  is_equal_to_sum_even(320) == false\n  is_equal_to_sum_even(384) == true\n  */\nconst is_equal_to_sum_even = (n) => {\n  return n % 2 === 0 && n % 256 === 0;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 512 positive even numbers\n  Example\n  is_equal_to_sum_even(512) == false\n  is_equal_to_sum_even(640) == false\n  is_equal_to_sum_even(704) == true\n  */\nconst is_equal_to_sum_even = (n) => {\n  return n % 2 === 0 && n % 512 === 0;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 1024 positive even numbers\n  Example\n  is_equal_to_sum_even(1024) == false\n  is_equal_to_sum_even(1536) == false\n  is_equal_to_sum_even(2048) == true\n  */\nconst is_equal_to_sum_even = (n) => {\n  return n % 2 === 0 && n % 1024 === 0;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 2048 positive even numbers\n  Example\n  is_equal_to_sum_even(2048) == false\n  is_equal_to_sum_even(4096) == false\n  is_equal_to_sum_even(8192) == true\n  */\nconst is_equal_to_sum_even = (n) => {\n  return n % 2 === 0 && n % 2048 === 0;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4096 positive even numbers\n  Example\n  is_equal_to_sum_even(4096) == false\n  is_equal_to_sum_even(8192) == false\n  is_equal_to_sum_even(16384) == true\n  */\nconst is_equal_to_sum_even = (n) => {\n  return n % 2 === 0 && n % 4096 === 0;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 8192 positive even numbers\n  Example\n  is_equal_to_sum_even(8192) === false\n  is_equal_to_sum_even(16384) === false\n  is_equal_to_sum_even(32768) === true\n  */\nconst is_equal_to_sum_even = (n) => {\n  return n % 2 === 0 && n % 8192 === 0;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 16384 positive even numbers\n  Example\n  is_equal_to_sum_even(16384) === false\n  is_equal_to_sum_even(32768) === false\n  is_equal_to_sum_even(65536) === true\n  */\nconst is_equal_to_sum_even = (n) => {\n  return n % 2 === 0 && n % 16384 === 0;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 32768 positive even numbers\n  Example\n  is_equal_to_sum_even(32768) === false\n  is_equal_to_sum_even(65536) === false\n  is_equal_to_sum_even(131072) === true\n  */\nconst is_equal_to_sum_even = (n) => {\n  return n % 2 === 0 && n % 32768 === 0;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 65536 positive even numbers\n  Example\n  is_equal_to_sum_even(65536) === false\n  is_equal_to_sum_even(131072) === false\n  is_equal_to_sum_even(262144) === true\n  */\nconst is_equal_to_sum_even = (n) => {\n  return n % 2 === 0 && n % 65536 === 0;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 131072 positive even numbers\n  Example\n  is_equal_to_sum_even(131072) === false\n  is_equal_to_sum_even(262144) === false\n  is_equal_to_sum_even(524288) === true\n  */\nconst is_equal_to_sum_even = (n) => {\n  return n % 2 === 0 && n % 131072 === 0;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 262144 positive even numbers\n  Example\n  is_equal_to_sum_even(262144) === false\n  is_equal_to_sum_even(524288) === false\n  is_equal_to_sum_even(1048576) === true\n  */\nconst is_equal_to_sum_even = (n) => {\n  return n % 2 === 0 && n % 262144 === 0;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 524288 positive even numbers\n  Example\n  is_equal_to_sum_even(524288) === false\n  is_equal_to_sum_even(1048576) === false\n  is_equal_to_sum_even(20971521) === true\n  */\nconst is_equal_to_sum_even = (n) => {\n  return n % 2 === 0 && n % 524288 === 0;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 1048576 positive even numbers\n  Example\n  is_equal_to_sum_even(1048576) === false\n  is_equal_to_sum_even(20971521) === false\n  is_equal_to_sum_even(4194304) === true\n  */\nconst is_equal_to_sum_even = (n) => {\n  return n % 2 === 0 && n % 1048576 === 0;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 20971521 positive even numbers\n  Example\n  is_equal_to_sum_even(20971521) === false\n  is_equal_to_sum_even(4194304) === false\n  is_equal_"}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n  where n > 0\n\n  For example:\n  >>> special_factorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst special_factorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "special_factorial", "gc": "<|endoftext|>/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n  where n > 0\n\n  For example:\n  >>> special_factorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst special_factorial = (n) => {\n  if (n <= 1) return 1;\n  return n * special_factorial(n - 1);\n};\n\n/*\n  Returns the factorial of n raised to the power e.\n  \n  For example:\n  >>> factorial(4)\n  120\n\n  >>> factorial(4)**3\n  720\n\n  >>> factorial(4)**4\n  5040\n\n  >>> factorial(4)**5\n  3628800 \n*/\nconst factorial = (n) => {\n  if (n <= 1) return 1;\n  return n * factorial(n - 1);\n};\n\n/*\n  Returns the factorial of n raised to the power e.\n  \n  For example:\n  >>> factorial(4)**3\n  720\n\n  >>> factorial(4)**4\n  5040\n\n  >>> factorial(4)**5\n  3628800 \n*/\nconst factorial_power = (n) => {\n  if (n <= 1) return 1;\n  return n * factorial_power(n - 1);\n};\n\n/*\n  Returns the factorial of n raised to the power e.\n  \n  For example:\n  >>> factorial(4)**3\n  720\n\n  >>> factorial(4)**4\n  5040\n\n  >>> factorial(4)**5\n  3628800 \n*/\nconst factorial_power_power = (n) => {\n  if (n <= 1) return 1;\n  return n * factorial_power_power(n - 1);\n};\n\n/*\n  Returns the factorial of n raised to the power e.\n  \n  For example:\n  >>> factorial(4)**3\n  720\n\n  >>> factorial(4)**4\n  5040\n\n  >>> factorial(4)**5\n  3628800 \n*/\nconst factorial_power_power_power = (n) => {\n  if (n <= 1) return 1;\n  return n * factorial_power_power_power(n - 1);\n};\n\n/*\n  Returns the factorial of n raised to the power e.\n  \n  For example:\n  >>> factorial(4)**3\n  720\n\n  >>> factorial(4)**4\n  5040\n\n  >>> factorial(4)**5\n  3628800 \n*/\nconst factorial_power_power_power_power = (n) => {\n  if (n <= 1) return 1;\n  return n * factorial_power_power_power_power(n - 1);\n};\n\n/*\n  Returns the factorial of n raised to the power e.\n  \n  For example:\n  >>> factorial(4)**3\n  720\n\n  >>> factorial(4)**4\n  5040\n\n  >>> factorial(4)**5\n  3628800 \n*/\nconst factorial_power_power_power_power_power = (n) => {\n  if (n <= 1) return 1;\n  return n * factorial_power_power_power_power_power(n - 1);\n};\n\n/*\n  Returns the factorial of n raised to the power e.\n  \n  For example:\n  >>> factorial(4)**3\n  720\n\n  >>> factorial(4)**4\n  5040\n\n  >>> factorial(4)**5\n  3628800 \n*/\nconst factorial_power_power_power_power_power = (n) => {\n  if (n <= 1) return 1;\n  return n * factorial_power_power_power_power_power(n - 1);\n};\n\n/*\n  Returns the factorial of n raised to the power e.\n  \n  For example:\n  >>> factorial(4)**3\n  720\n\n  >>> factorial(4)**4\n  5040\n\n  >>> factorial(4)**5\n  3628800 \n*/\nconst factorial_power_power_power_power_power_power = (n) => {\n  if (n <= 1) return 1;\n  return n * factorial_power_power_power_power_power_power(n - 1);\n};\n\n/*\n  Returns the factorial of n raised to the power e.\n  \n  For example:\n  >>> factorial(4)**3\n  720\n\n  >>> factorial(4)**4\n  5040\n\n  >>> factorial(4)**5\n  3628800 \n*/\nconst factorial_power_power_power_power_power_power = (n) => {\n  if (n <= 1) return 1;\n  return n * factorial_power_power_power_power_power_power(n - 1);\n};\n\n/*\n  Returns the factorial of n raised to the power e.\n  \n  For example:\n  >>> factorial(4)**3\n  720\n\n  >>> factorial(4)**4\n  5040\n\n  >>> factorial(4)**5\n  3628800 \n*/\nconst factorial_power_power_power_power_power_power = (n) => {\n  if (n <= 1) return 1;\n  return n * factorial_power_power_power_power_power_power(n - 1);\n};\n\n/*\n  Returns the factorial of n raised to the power e.\n  \n  For example:\n  >>> factorial(4)**3\n  720\n\n  >>> factorial(4)**4\n  5040\n\n  >>> factorial(4)**5\n  3628800 \n*/\nconst factorial_power_power_power_power_power_power_power = (n) => {\n  if (n <= 1) return 1;\n  return n * factorial_power_power_power_power_power_power_power(n - 1);\n};\n\n/*\n  Returns the factorial of n raised to the power e.\n  \n  For example:\n  >>> factorial(4)**3\n  720\n\n  >>> factorial(4)**4\n  5040\n\n  >>> factorial(4)**5\n  3628800 \n*/\nconst factorial_power_power_power_power_power_power_power = (n) => {\n  if (n <= 1) return 1;\n  return n * factorial_power_power_power_power_power_power_power(n - 1);\n};\n\n/*\n  Returns the factorial of n raised to the power e.\n  \n  For example:\n  >>> factorial(4)**3\n  720\n\n  >>> factorial(4)**4\n  5040\n\n  >>> factorial(4)**5\n  3628800 \n*/\nconst factorial_power_power_power_power_power_power_power = (n) => {\n  if (n <= 1) return 1;\n  return n * factorial_power_power_power_power_power_power(n - 1);\n};\n\n/*\n  Returns the factorial of n raised to the power e.\n  \n  For example:\n  >>> factorial(4)**3\n  720\n\n  >>> factorial(4)**4\n  5040\n\n  >>> factorial(4)**5\n  3628800 \n*/\nconst factorial_power_power_power_power_power_power_power_power = (n) => {\n  if (n <= 1) return 1;\n  return n * factorial_power_power_power_power_power_power_power_power(n - 1);\n};\n\n/*\n  Returns the factorial of n raised to the power e.\n  \n  For example:\n  >>> factorial(4)**3\n  720\n\n  >>> factorial(4)**4\n  5040\n\n  >>> factorial(4)**5\n  3628800 \n*/\nconst factorial_power_power_power_power_power_power_power_power = (n) => {\n  if (n <= 1) return 1;\n  return n * factorial_power_power_power_power_power_power_power_power(n - 1);\n};\n\n/*\n  Returns the factorial of n raised to the power e.\n  \n  For example:\n  >>> factorial(4)**3\n  720\n\n  >>> factorial(4)**4\n  5040\n\n  >>> factorial(4)**5\n  3628800 \n*/\nconst factorial_power_power_power_power_power_power_power_power = (n) => {\n  if (n <= 1) return 1;\n  return n * factorial_power_power_power_power_power_power_power_power(n - 1);\n"}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fix_spaces(\"Example\") == \"Example\"\n  fix_spaces(\"Example 1\") == \"Example_1\"\n  fix_spaces(\" Example 2\") == \"_Example_2\"\n  fix_spaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fix_spaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fix_spaces", "gc": "<|endoftext|>/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fix_spaces(\"Example\") == \"Example\"\n  fix_spaces(\"Example 1\") == \"Example_1\"\n  fix_spaces(\" Example 2\") == \"_Example_2\"\n  fix_spaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fix_spaces = (text) => {\n  let spaces = text.split(' ');\n  spaces.forEach((space) => {\n    if (space.length > 2) {\n      space = space.replace(/\\s+/g, '-');\n    }\n  });\n  return spaces.join(' ');\n}\n\n/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fix_spaces_2(text) == \"Example\"\n  fix_spaces_2(\"Example 1\") == \"Example_1\"\n  fix_spaces_2(\" Example 2\") == \"_Example_2\"\n  fix_spaces_2(\" Example   3\") == \"_Example-3\"\n  */\nconst fix_spaces_2 = (text) => {\n  let spaces = text.split(' ');\n  spaces.forEach((space) => {\n    if (space.length > 2) {\n      space = space.replace(/\\s+/g, '-');\n    }\n  });\n  return spaces.join(' ');\n}\n\n/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fix_spaces_3(text) == \"Example\"\n  fix_spaces_3(\"Example 1\") == \"Example_1\"\n  fix_spaces_3(\" Example 2\") == \"_Example_2\"\n  fix_spaces_3(\" Example   3\") == \"_Example-3\"\n  */\nconst fix_spaces_3 = (text) => {\n  let spaces = text.split(' ');\n  spaces.forEach((space) => {\n    if (space.length > 2) {\n      space = space.replace(/\\s+/g, '-');\n    }\n  });\n  return spaces.join(' ');\n}\n\n/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fix_spaces_4(text) == \"Example\"\n  fix_spaces_4(\"Example 1\") == \"Example_1\"\n  fix_spaces_4(\" Example 2\") == \"_Example_2\"\n  fix_spaces_4(\" Example   3\") == \"_Example-3\"\n  */\nconst fix_spaces_4 = (text) => {\n  let spaces = text.split(' ');\n  spaces.forEach((space) => {\n    if (space.length > 2) {\n      space = space.replace(/\\s+/g, '-');\n    }\n  });\n  return spaces.join(' ');\n}\n\n/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fix_spaces_5(text) == \"Example\"\n  fix_spaces_5(\"Example 1\") == \"Example_1\"\n  fix_spaces_5(\" Example 2\") == \"_Example_2\"\n  fix_spaces_5(\" Example   3\") == \"_Example-3\"\n  */\nconst fix_spaces_5 = (text) => {\n  let spaces = text.split(' ');\n  spaces.forEach((space) => {\n    if (space.length > 2) {\n      space = space.replace(/\\s+/g, '-');\n    }\n  });\n  return spaces.join(' ');\n}\n\n/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fix_spaces_6(text) == \"Example\"\n  fix_spaces_6(\"Example 1\") == \"Example_1\"\n  fix_spaces_6(\" Example 2\") == \"_Example_2\"\n  fix_spaces_6(\" Example   3\") == \"_Example-3\"\n  */\nconst fix_spaces_6 = (text) => {\n  let spaces = text.split(' ');\n  spaces.forEach((space) => {\n    if (space.length > 2) {\n      space = space.replace(/\\s+/g, '-');\n    }\n  });\n  return spaces.join(' ');\n}\n\n/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fix_spaces_7(text) == \"Example\"\n  fix_spaces_7(\"Example 1\") == \"Example_1\"\n  fix_spaces_7(\" Example 2\") == \"_Example_2\"\n  fix_spaces_7(\" Example   3\") == \"_Example-3\"\n  */\nconst fix_spaces_7 = (text) => {\n  let spaces = text.split(' ');\n  spaces.forEach((space) => {\n    if (space.length > 2) {\n      space = space.replace(/\\s+/g, '-');\n    }\n  });\n  return spaces.join(' ');\n}\n\n/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fix_spaces_8(text) == \"Example\"\n  fix_spaces_8(\"Example 1\") == \"Example_1\"\n  fix_spaces_8(\" Example 2\") == \"_Example_2\"\n  fix_spaces_8(\" Example   3\") == \"_Example-3\"\n  */\nconst fix_spaces_8 = (text) => {\n  let spaces = text.split(' ');\n  spaces.forEach((space) => {\n    if (space.length > 2) {\n      space = space.replace(/\\s+/g, '-');\n    }\n  });\n  return spaces.join(' ');\n}\n\n/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fix_spaces_9(text) == \"Example\"\n  fix_spaces_9(\"Example 1\") == \"Example_1\"\n  fix_spaces_9(\" Example 2\") == \"_Example_2\"\n  fix_spaces_9(\" Example   3\") == \"_Example-3\"\n  */\nconst fix_spaces_9 = (text) => {\n  let spaces = text.split(' ');\n  spaces.forEach((space) => {\n    if (space.length > 2) {\n      space = space.replace(/\\s+/g, '-');\n    }\n  });\n  return spaces.join(' ');\n}\n\n/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fix_spaces_10(text) == \"Example\"\n  fix_spaces_10(\"Example 1\") == \"Example_1\"\n  fix_spaces_10(\" Example 2\") == \"_Example_2\"\n  fix_spaces_10(\" Example   3\") == \"_Example-3\"\n  */\nconst fix_spaces_10 = (text) => {\n  let spaces = text.split(' ');\n  spaces.forEach((space) => {\n    if (space.length > 2) {\n      space = space.replace(/\\s+/g, '-');\n    }\n  });\n  return spaces.join(' ');\n}\n\n/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fix_spaces_11(text) == \"Example\"\n  fix_spaces_11(\"Example 1\") == \"Example_1\"\n  fix_spaces_11(\" Example 2\") == \"_Example_2\"\n  fix_"}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  file_name_check(\"example.txt\") # => 'Yes'\n  file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst file_name_check = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "file_name_check", "gc": "<|endoftext|>/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  file_name_check(\"example.txt\") # => 'Yes'\n  file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst file_name_check = (file_name) => {\n  const file_name_length = file_name.length;\n  const file_name_starts_with_dot = file_name.indexOf('.')!== -1;\n  const file_name_contains_one_dot = file_name.indexOf('.') === file_name.length - 1;\n  const file_name_contains_one_digit = file_name.indexOf('0') === file_name.length - 1;\n  const file_name_contains_one_letter_from_latin_alphabet = file_name.indexOf('a') === file_name.length - 1;\n  const file_name_contains_one_letter_from_latin_alphabet_and_digit = file_name.indexOf('A') === file_name.length - 1;\n  const file_name_contains_one_letter_from_latin_alphabet_and_digit_and_dot = file_name.indexOf('a') === file_name.length - 1 && file_name.indexOf('.') === file_name.length - 1;\n  const file_name_contains_one_letter_from_latin_alphabet_and_digit_and_dot_and_dot = file_name.indexOf('a') === file_name.length - 1 && file_name.indexOf('.') === file_name.length - 2 && file_name.indexOf('.') === file_name.length - 3;\n  const file_name_contains_one_letter_from_latin_alphabet_and_digit_and_dot_and_dot_and_dot = file_name.indexOf('a') === file_name.length - 1 && file_name.indexOf('.') === file_name.length - 2 && file_name.indexOf('.') === file_name.length - 3 && file_name.indexOf('.') === file_name.length - 4;\n  const file_name_contains_one_letter_from_latin_alphabet_and_digit_and_dot_and_dot_and_dot_and_dot = file_name.indexOf('a') === file_name.length - 1 && file_name.indexOf('.') === file_name.length - 2 && file_name.indexOf('.') === file_name.length - 3 && file_name.indexOf('.') === file_name.length - 4 && file_name.indexOf('.') === file_name.length - 5;\n  const file_name_contains_one_letter_from_latin_alphabet_and_digit_and_dot_and_dot_and_dot_and_dot_and_dot = file_name.indexOf('a') === file_name.length - 1 && file_name.indexOf('.') === file_name.length - 2 && file_name.indexOf('.') === file_name.length - 3 && file_name.indexOf('.') === file_name.length - 4 && file_name.indexOf('.') === file_name.length - 5 && file_name.indexOf('.') === file_name.length - 6;\n  const file_name_contains_one_letter_from_latin_alphabet_and_digit_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot = file_name.indexOf('a') === file_name.length - 1 && file_name.indexOf('.') === file_name.length - 2 && file_name.indexOf('.') === file_name.length - 3 && file_name.indexOf('.') === file_name.length - 4 && file_name.indexOf('.') === file_name.length - 5 && file_name.indexOf('.') === file_name.length - 6 && file_name.indexOf('.') === file_name.length - 7;\n  const file_name_contains_one_letter_from_latin_alphabet_and_digit_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot = file_name.indexOf('a') === file_name.length - 1 && file_name.indexOf('.') === file_name.length - 2 && file_name.indexOf('.') === file_name.length - 3 && file_name.indexOf('.') === file_name.length - 4 && file_name.indexOf('.') === file_name.length - 5 && file_name.indexOf('.') === file_name.length - 6 && file_name.indexOf('.') === file_name.length - 7 && file_name.indexOf('.') === file_name.length - 8;\n  const file_name_contains_one_letter_from_latin_alphabet_and_digit_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot = file_name.indexOf('a') === file_name.length - 1 && file_name.indexOf('.') === file_name.length - 2 && file_name.indexOf('.') === file_name.length - 3 && file_name.indexOf('.') === file_name.length - 4 && file_name.indexOf('.') === file_name.length - 5 && file_name.indexOf('.') === file_name.length - 6 && file_name.indexOf('.') === file_name.length - 7 && file_name.indexOf('.') === file_name.length - 8 && file_name.indexOf('.') === file_name.length - 9;\n  const file_name_contains_one_letter_from_latin_alphabet_and_digit_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_and_dot_"}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sum_squares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sum_squares", "gc": "<|endoftext|>/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sum_squares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0 && i % 4!== 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 3!== 0) {\n      sum += lst[i] * lst[i] * lst[i];\n    } else if (i % 4!== 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function shall cube the integer entry if its index is a multiple of 3 and will \n  square the integer entry if its index is a multiple of 4. The function will not change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst cube = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0 && i % 4!== 0) {\n      sum += lst[i] * lst[i] * lst[i];\n    } else if (i % 3!== 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i];\n    } else if (i % 4!== 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function shall cube the integer entry if its index is a multiple of 3 and will \n  square the integer entry if its index is a multiple of 4. The function will not change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst cube_of_squares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0 && i % 4!== 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i];\n    } else if (i % 3!== 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    } else if (i % 4!== 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function shall cube the integer entry if its index is a multiple of 3 and will \n  square the integer entry if its index is a multiple of 4. The function will not change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst cube_of_cubes = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0 && i % 4!== 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    } else if (i % 3!== 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    } else if (i % 4!== 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function shall cube the integer entry if its index is a multiple of 3 and will \n  square the integer entry if its index is a multiple of 4. The function will not change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst cube_of_cubes_of_squares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0 && i % 4!== 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    } else if (i % 3!== 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    } else if (i % 4!== 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function shall cube the integer entry if its index is a multiple of 3 and will \n  square the integer entry if its index is a multiple of 4. The function will not change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst cube_of_cubes_of_cubes = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0 && i % 4!== 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    } else if (i % 3!== 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    } else if (i % 4!== 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function shall cube the integer entry if its index is a multiple of 3 and will \n  square the integer entry if its index is a multiple of 4. The function will not change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst cube_of_cubes_of_cubes_of_squares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0 && i % 4!== 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    } else if (i % 3!== 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    } else if (i % 4!== 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i]"}
{"task_id": "JavaScript/143", "prompt": "/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst words_in_sentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "words_in_sentence", "gc": "<|endoftext|>/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst words_in_sentence = (sentence) => {\n  const words = sentence.split(\" \");\n  let newWords = [];\n  let newWordsLength = 0;\n  let newWordsOrder = [];\n  let newWordsIndex = 0;\n  let newWordsLengthIndex = 0;\n  let newWordsLengthIndex2 = 0;\n  let newWordsIndex2 = 0;\n  let newWordsLengthIndex3 = 0;\n  let newWordsIndex3 = 0;\n  let newWordsLengthIndex4 = 0;\n  let newWordsIndex4 = 0;\n  let newWordsLengthIndex5 = 0;\n  let newWordsIndex5 = 0;\n  let newWordsLengthIndex6 = 0;\n  let newWordsIndex6 = 0;\n  let newWordsLengthIndex7 = 0;\n  let newWordsIndex7 = 0;\n  let newWordsLengthIndex8 = 0;\n  let newWordsIndex8 = 0;\n  let newWordsLengthIndex9 = 0;\n  let newWordsIndex9 = 0;\n  let newWordsLengthIndex10 = 0;\n  let newWordsIndex10 = 0;\n  let newWordsLengthIndex11 = 0;\n  let newWordsIndex11 = 0;\n  let newWordsLengthIndex12 = 0;\n  let newWordsIndex12 = 0;\n  let newWordsLengthIndex13 = 0;\n  let newWordsIndex13 = 0;\n  let newWordsLengthIndex14 = 0;\n  let newWordsIndex14 = 0;\n  let newWordsLengthIndex15 = 0;\n  let newWordsIndex15 = 0;\n  let newWordsLengthIndex16 = 0;\n  let newWordsIndex16 = 0;\n  let newWordsLengthIndex17 = 0;\n  let newWordsIndex17 = 0;\n  let newWordsLengthIndex18 = 0;\n  let newWordsIndex18 = 0;\n  let newWordsLengthIndex19 = 0;\n  let newWordsIndex19 = 0;\n  let newWordsLengthIndex20 = 0;\n  let newWordsIndex20 = 0;\n  let newWordsLengthIndex21 = 0;\n  let newWordsIndex21 = 0;\n  let newWordsLengthIndex22 = 0;\n  let newWordsIndex22 = 0;\n  let newWordsLengthIndex23 = 0;\n  let newWordsIndex23 = 0;\n  let newWordsLengthIndex24 = 0;\n  let newWordsIndex24 = 0;\n  let newWordsLengthIndex25 = 0;\n  let newWordsIndex25 = 0;\n  let newWordsLengthIndex26 = 0;\n  let newWordsIndex26 = 0;\n  let newWordsLengthIndex27 = 0;\n  let newWordsIndex27 = 0;\n  let newWordsLengthIndex28 = 0;\n  let newWordsIndex28 = 0;\n  let newWordsLengthIndex29 = 0;\n  let newWordsIndex29 = 0;\n  let newWordsLengthIndex30 = 0;\n  let newWordsIndex30 = 0;\n  let newWordsLengthIndex31 = 0;\n  let newWordsIndex31 = 0;\n  let newWordsLengthIndex32 = 0;\n  let newWordsIndex32 = 0;\n  let newWordsLengthIndex33 = 0;\n  let newWordsIndex33 = 0;\n  let newWordsLengthIndex34 = 0;\n  let newWordsIndex34 = 0;\n  let newWordsLengthIndex35 = 0;\n  let newWordsIndex35 = 0;\n  let newWordsLengthIndex36 = 0;\n  let newWordsIndex36 = 0;\n  let newWordsLengthIndex37 = 0;\n  let newWordsIndex37 = 0;\n  let newWordsLengthIndex38 = 0;\n  let newWordsIndex38 = 0;\n  let newWordsLengthIndex39 = 0;\n  let newWordsIndex39 = 0;\n  let newWordsLengthIndex40 = 0;\n  let newWordsIndex40 = 0;\n  let newWordsLengthIndex41 = 0;\n  let newWordsIndex41 = 0;\n  let newWordsLengthIndex42 = 0;\n  let newWordsIndex42 = 0;\n  let newWordsLengthIndex43 = 0;\n  let newWordsIndex43 = 0;\n  let newWordsLengthIndex44 = 0;\n  let newWordsIndex44 = 0;\n  let newWordsLengthIndex45 = 0;\n  let newWordsIndex45 = 0;\n  let newWordsLengthIndex46 = 0;\n  let newWordsIndex46 = 0;\n  let newWordsLengthIndex47 = 0;\n  let newWordsIndex47 = 0;\n  let newWordsLengthIndex48 = 0;\n  let newWordsIndex48 = 0;\n  let newWordsLengthIndex49 = 0;\n  let newWordsIndex49 = 0;\n  let newWordsLengthIndex50 = 0;\n  let newWordsIndex50 = 0;\n  let newWordsLengthIndex51 = 0;\n  let newWordsIndex51 = 0;\n  let newWordsLengthIndex52 = 0;\n  let newWordsIndex52 = 0;\n  let newWordsLengthIndex53 = 0;\n  let newWordsIndex53 = 0;\n  let newWordsLengthIndex54 = 0;\n  let newWordsIndex54 = 0;\n  let newWordsLengthIndex55 = 0;\n  let newWordsIndex55 = 0;\n  let newWordsLengthIndex56 = 0;\n  let newWordsIndex56 = 0;\n  let newWordsLengthIndex57 = 0;\n  let newWordsIndex57 = 0;\n  let newWordsLengthIndex58 = 0;\n  let newWordsIndex58 = 0;\n  let newWordsLengthIndex59 = 0;\n  let newWordsIndex59 = 0;\n  let newWordsLengthIndex60 = 0;\n  let newWordsIndex60 = 0;\n  let newWordsLengthIndex61 = 0;\n  let newWordsIndex61 = 0;\n  let newWordsLengthIndex62 = 0;\n  let newWordsIndex62 = 0;\n  let newWordsLengthIndex63 = 0;\n  let newWordsIndex63 = 0;\n  let newWordsLengthIndex64 = 0;\n  let newWordsIndex64 = 0;\n  let newWordsLengthIndex65 = 0;\n  let newWordsIndex65 = 0;\n  let newWordsLengthIndex66 = 0;\n  let newWordsIndex66 = 0;\n  let newWordsLengthIndex67 = 0;\n  let newWordsIndex67 = 0;\n  let newWordsLengthIndex68 = 0;\n  let newWordsIndex68 = 0;\n  let newWordsLengthIndex69 = 0;\n  let newWordsIndex69 = 0;\n  let newWordsLengthIndex70 = 0;\n  let newWordsIndex70 = 0;\n  let newWordsLengthIndex71 = 0;\n  let newWordsIndex71 = 0;\n  let newWordsLengthIndex72 = 0;\n  let newWordsIndex72 = 0;\n  let newWordsLengthIndex73 = 0;\n  let newWordsIndex73 = 0;\n  let newWordsLengthIndex74 = 0;\n  let newWordsIndex74 = 0;\n  let newWordsLengthIndex75 = 0;\n  let newWordsIndex75 = 0;\n  let newWordsLengthIndex76 = 0;\n  let newWordsIndex76 = 0;\n  let newWordsLengthIndex77 = 0;\n  let newWordsIndex77 = 0;\n  let newWordsLengthIndex78 = 0;\n  let newWordsIndex78 = 0;\n  let newWordsLengthIndex79 = 0;\n  let newWordsIndex79 = 0;\n  let newWordsLengthIndex80 = 0;\n  let newWordsIndex80 = 0;\n  let newWordsLengthIndex81 = 0;\n  let newWordsIndex81 = 0;\n  let newWordsLengthIndex82 = 0;\n  let newWordsIndex"}
{"task_id": "JavaScript/144", "prompt": "/*Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "gc": "<|endoftext|>/*Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  const [numerator, denominator] = x.split('/')\n  const numeratorNum = Number(numerator)\n  const denominatorNum = Number(denominator)\n  const numeratorNumIsPositive = numeratorNum > 0\n  const denominatorNumIsPositive = denominatorNum > 0\n  const numeratorNumIsZero = numeratorNum === 0\n  const denominatorNumIsZero = denominatorNum === 0\n  const numeratorNumIsNegative = numeratorNum < 0\n  const denominatorNumIsNegative = denominatorNum < 0\n  const numeratorNumIsNegativeZero = numeratorNumIsNegative && denominatorNumIsZero\n  const denominatorNumIsNegativeZero = denominatorNumIsNegative && numeratorNumIsZero\n  const numeratorNumIsPositiveZero = numeratorNumIsPositive && denominatorNumIsZero\n  const denominatorNumIsPositiveZero = denominatorNumIsPositive && numeratorNumIsZero\n  const numeratorNumIsNegativeZero = numeratorNumIsNegative && denominatorNumIsZero\n  const denominatorNumIsNegativeZero = denominatorNumIsNegative && numeratorNumIsZero\n  const numeratorNumIsPositiveNegative = numeratorNumIsPositive && denominatorNumIsNegative\n  const denominatorNumIsPositiveNegative = denominatorNumIsPositive && numeratorNumIsNegative\n  const numeratorNumIsPositiveNegativeZero = numeratorNumIsPositiveNegative && denominatorNumIsZero\n  const denominatorNumIsPositiveNegativeZero = denominatorNumIsPositiveNegative && numeratorNumIsZero\n  const numeratorNumIsPositiveZero = numeratorNumIsPositive && denominatorNumIsZero\n  const denominatorNumIsPositiveZero = denominatorNumIsPositive && numeratorNumIsZero\n  const numeratorNumIsNegativeZero = numeratorNumIsNegative && denominatorNumIsZero\n  const denominatorNumIsNegativeZero = denominatorNumIsNegative && numeratorNumIsZero\n  const numeratorNumIsPositiveZero = numeratorNumIsPositive && denominatorNumIsZero\n  const denominatorNumIsPositiveZero = denominatorNumIsPositive && numeratorNumIsZero\n  const numeratorNumIsNegativeZero = numeratorNumIsNegative && denominatorNumIsZero\n  const denominatorNumIsNegativeZero = denominatorNumIsNegative && numeratorNumIsZero\n  const numeratorNumIsPositiveZero = numeratorNumIsPositive && denominatorNumIsZero\n  const denominatorNumIsPositiveZero = denominatorNumIsPositive && numeratorNumIsZero\n  const numeratorNumIsNegativeZero = numeratorNumIsNegative && denominatorNumIsZero\n  const denominatorNumIsNegativeZero = denominatorNumIsNegative && numeratorNumIsZero\n  const numeratorNumIsPositiveZero = numeratorNumIsPositive && denominatorNumIsZero\n  const denominatorNumIsPositiveZero = denominatorNumIsPositive && numeratorNumIsZero\n  const numeratorNumIsNegativeZero = numeratorNumIsNegative && denominatorNumIsZero\n  const denominatorNumIsNegativeZero = denominatorNumIsNegative && numeratorNumIsZero\n  const numeratorNumIsPositiveZero = numeratorNumIsPositive && denominatorNumIsZero\n  const denominatorNumIsPositiveZero = denominatorNumIsPositive && numeratorNumIsZero\n  const numeratorNumIsNegativeZero = numeratorNumIsNegative && denominatorNumIsZero\n  const denominatorNumIsNegativeZero = denominatorNumIsNegative && numeratorNumIsZero\n  const numeratorNumIsPositiveZero = numeratorNumIsPositive && denominatorNumIsZero\n  const denominatorNumIsPositiveZero = denominatorNumIsPositive && numeratorNumIsZero\n  const numeratorNumIsNegativeZero = numeratorNumIsNegative && denominatorNumIsZero\n  const denominatorNumIsNegativeZero = denominatorNumIsNegative && numeratorNumIsZero\n  const numeratorNumIsPositiveZero = numeratorNumIsPositive && denominatorNumIsZero\n  const denominatorNumIsPositiveZero = denominatorNumIsPositive && numeratorNumIsZero\n  const numeratorNumIsNegativeZero = numeratorNumIsNegative && denominatorNumIsZero\n  const denominatorNumIsNegativeZero = denominatorNumIsNegative && numeratorNumIsZero\n  const numeratorNumIsPositiveZero = numeratorNumIsPositive && denominatorNumIsZero\n  const denominatorNumIsPositiveZero = denominatorNumIsPositive && numeratorNumIsZero\n  const numeratorNumIsNegativeZero = numeratorNumIsNegative && denominatorNumIsZero\n  const denominatorNumIsNegativeZero = denominatorNumIsNegative && numeratorNumIsZero\n  const numeratorNumIsPositiveZero = numeratorNumIsPositive && denominatorNumIsZero\n  const denominatorNumIsPositiveZero = denominatorNumIsPositive && numeratorNumIsZero\n  const numeratorNumIsNegativeZero = numeratorNumIsNegative && denominatorNumIsZero\n  const denominatorNumIsNegativeZero = denominatorNumIsNegative && numeratorNumIsZero\n  const numeratorNumIsPositiveZero = numeratorNumIsPositive && denominatorNumIsZero\n  const denominatorNumIsPositiveZero = denominatorNumIsPositive && numeratorNumIsZero\n  const numeratorNumIsNegativeZero = numeratorNumIsNegative && denominatorNumIsZero\n  const denominatorNumIsNegativeZero = denominatorNumIsNegative && numeratorNumIsZero\n  const numeratorNumIsPositiveZero = numeratorNumIsPositive && denominatorNumIsZero\n  const denominatorNumIsPositiveZero = denominatorNumIsPositive && numeratorNumIsZero\n  const numeratorNumIsNegativeZero = numeratorNumIsNegative && denominatorNumIsZero\n  const denominatorNumIsNegativeZero = denominatorNumIsNegative && numeratorNumIsZero\n  const numeratorNumIsPositiveZero = numeratorNumIsPositive && denominatorNumIsZero\n  const denominatorNumIsPositiveZero = denominatorNumIsPositive && numeratorNumIsZero\n  const numeratorNumIsNegativeZero = numeratorNumIsNegative && denominatorNumIsZero\n  const denominatorNumIsNegativeZero = denominatorNumIsNegative && numeratorNumIsZero\n  const numeratorNumIsPositiveZero = numeratorNumIsPositive && denominatorNumIsZero\n  const denominatorNumIsPositiveZero = denominatorNumIsPositive && numeratorNumIsZero\n  const numeratorNumIsNegativeZero = numeratorNumIsNegative && denominatorNumIsZero\n  const denominatorNumIsNegativeZero = denominatorNumIsNegative && numeratorNumIsZero\n  const numeratorNumIsPositiveZero = numeratorNumIsPositive && denominatorNumIsZero\n  const denominatorNumIsPositiveZero = denominatorNumIsPositive && numeratorNumIsZero\n  const numeratorNumIsNegativeZero = numeratorNumIsNegative && denominatorNumIsZero\n  const denominatorNumIsNegativeZero = denominatorNumIsNegative && numeratorNumIsZero\n  const numeratorNumIsPositiveZero = numeratorNumIsPositive && denominatorNumIsZero\n  const denominatorNumIsPositiveZero = denominatorNumIsPositive && numeratorNumIsZero\n  const numeratorNumIsNegativeZero = numeratorNumIsNegative && denominatorNumIsZero\n  const denominatorNumIsNegative"}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> order_by_points([]) == []\n  */\nconst order_by_points = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "order_by_points", "gc": "<|endoftext|>/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> order_by_points([]) == []\n  */\nconst order_by_points = (nums) => {\n  const digits = nums.map(n => n.toString().split('').map(Number).reduce((a, b) => a + b, 0))\n  const sums = digits.map(n => n.reduce((a, b) => a + b, 0))\n  const sorted = sums.sort((a, b) => a - b)\n  return sorted.map(n => n.toString())\n}\n\n/*\n  Write a function which sorts the given list of integers\n  in descending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> order_by_points([1, 11, -1, -11, -12]) == [11, -11, 1, -12, -1]\n  >>> order_by_points([]) == []\n  */\nconst order_by_points2 = (nums) => {\n  const digits = nums.map(n => n.toString().split('').map(Number).reduce((a, b) => a + b, 0))\n  const sums = digits.map(n => n.reduce((a, b) => a + b, 0))\n  const sorted = sums.sort((a, b) => b - a)\n  return sorted.map(n => n.toString())\n}\n\n/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> order_by_points([1, 11, -1, -11, -12]) == [11, -11, 1, -12, -1]\n  >>> order_by_points([]) == []\n  */\nconst order_by_points3 = (nums) => {\n  const digits = nums.map(n => n.toString().split('').map(Number).reduce((a, b) => a + b, 0))\n  const sums = digits.map(n => n.reduce((a, b) => a + b, 0))\n  const sorted = sums.sort((a, b) => a - b)\n  return sorted.map(n => n.toString())\n}\n\n/*\n  Write a function which sorts the given list of integers\n  in descending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> order_by_points([1, 11, -1, -11, -12]) == [11, -11, 1, -12, -1]\n  >>> order_by_points([]) == []\n  */\nconst order_by_points4 = (nums) => {\n  const digits = nums.map(n => n.toString().split('').map(Number).reduce((a, b) => a + b, 0))\n  const sums = digits.map(n => n.reduce((a, b) => a + b, 0))\n  const sorted = sums.sort((a, b) => b - a)\n  return sorted.map(n => n.toString())\n}\n\n/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> order_by_points([1, 11, -1, -11, -12]) == [11, -11, 1, -12, -1]\n  >>> order_by_points([]) == []\n  */\nconst order_by_points5 = (nums) => {\n  const digits = nums.map(n => n.toString().split('').map(Number).reduce((a, b) => a + b, 0))\n  const sums = digits.map(n => n.reduce((a, b) => a + b, 0))\n  const sorted = sums.sort((a, b) => b - a)\n  return sorted.map(n => n.toString())\n}\n\n/*\n  Write a function which sorts the given list of integers\n  in descending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> order_by_points([1, 11, -1, -11, -12]) == [11, -11, 1, -12, -1]\n  >>> order_by_points([]) == []\n  */\nconst order_by_points6 = (nums) => {\n  const digits = nums.map(n => n.toString().split('').map(Number).reduce((a, b) => a + b, 0))\n  const sums = digits.map(n => n.reduce((a, b) => a + b, 0))\n  const sorted = sums.sort((a, b) => b - a)\n  return sorted.map(n => n.toString())\n}\n\n/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> order_by_points([1, 11, -1, -11, -12]) == [11, -11, 1, -12, -1]\n  >>> order_by_points([]) == []\n  */\nconst order_by_points7 = (nums) => {\n  const digits = nums.map(n => n.toString().split('').map(Number).reduce((a, b) => a + b, 0))\n  const sums = digits.map(n => n.reduce((a, b) => a + b, 0))\n  const sorted = sums.sort((a, b) => b - a)\n  return sorted.map(n => n.toString())\n}\n\n/*\n  Write a function which sorts the given list of integers\n  in descending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> order_by_points([1, 11, -1, -11, -12]) == [11, -11, 1, -12, -1]\n  >>> order_by_points([]) == []\n  */\nconst order_by_points8 = (nums) => {\n  const digits = nums.map(n => n.toString().split('').map(Number).reduce((a, b) => a + b, 0))\n  const sums = digits.map(n => n.reduce((a, b) => a + b, 0))\n  const sorted = sums.sort((a, b) => b - a)\n  return sorted.map(n => n.toString())\n}\n\n/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> order_by_points([1, 11, -1, -11, -12]) == [11, -11, 1, -12, -1]\n  >>> order_by_points([]) == []\n  */\nconst order_by_points9 = (nums) => {\n  const digits = nums.map(n => n.toString().split('').map(Number).reduce((a, b) => a + b, 0))\n  const sums = digits.map(n => n.reduce((a, b) => a + b, 0))\n  const sorted = sums.sort((a, b) => b - a)\n  return sorted.map(n => n.toString())\n}\n\n/*\n  Write a function which sorts the given list of integers\n  in descending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> order_by_points([1, 11, -1, -11, -12]) == [11, -11, 1, -12, -1]\n  >>> order_by_points([]) == []\n  */\nconst order_by_points10 = (nums) => {\n  const digits = nums.map(n => n.toString().split('').map(Number).reduce((a, b) => a + b, 0))\n  const sums = digits.map(n => n.reduce((a, b) => a + b, 0))\n  const sorted = "}
{"task_id": "JavaScript/146", "prompt": "/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  special_filter([15, -73, 14, -15]) => 1 \n  special_filter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst special_filter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "special_filter", "gc": "<|endoftext|>/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  special_filter([15, -73, 14, -15]) => 1 \n  special_filter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst special_filter = (nums) => {\n  let count = 0;\n  nums.forEach((num) => {\n    if (num % 2 === 0 && num.toString().length === 1) {\n      count++;\n    }\n  });\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are even (1, 3, 5, 7, 9).\n  For example:\n  special_filter([15, -73, 14, -15]) => 1 \n  special_filter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst special_filter_even = (nums) => {\n  let count = 0;\n  nums.forEach((num) => {\n    if (num % 2 === 0 && num.toString().length === 1) {\n      count++;\n    }\n  });\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  special_filter([15, -73, 14, -15]) => 1 \n  special_filter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst special_filter_odd = (nums) => {\n  let count = 0;\n  nums.forEach((num) => {\n    if (num % 2 === 0 && num.toString().length === 1) {\n      count++;\n    }\n  });\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are even (1, 3, 5, 7, 9).\n  For example:\n  special_filter([15, -73, 14, -15]) => 1 \n  special_filter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst special_filter_odd_even = (nums) => {\n  let count = 0;\n  nums.forEach((num) => {\n    if (num % 2 === 0 && num.toString().length === 1) {\n      count++;\n    }\n  });\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  special_filter([15, -73, 14, -15]) => 1 \n  special_filter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst special_filter_odd_odd = (nums) => {\n  let count = 0;\n  nums.forEach((num) => {\n    if (num % 2 === 0 && num.toString().length === 1) {\n      count++;\n    }\n  });\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are even (1, 3, 5, 7, 9).\n  For example:\n  special_filter([15, -73, 14, -15]) => 1 \n  special_filter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst special_filter_odd_odd_even = (nums) => {\n  let count = 0;\n  nums.forEach((num) => {\n    if (num % 2 === 0 && num.toString().length === 1) {\n      count++;\n    }\n  });\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  special_filter([15, -73, 14, -15]) => 1 \n  special_filter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst special_filter_odd_odd_odd = (nums) => {\n  let count = 0;\n  nums.forEach((num) => {\n    if (num % 2 === 0 && num.toString().length === 1) {\n      count++;\n    }\n  });\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  special_filter([15, -73, 14, -15]) => 1 \n  special_filter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst special_filter_odd_odd_odd_even = (nums) => {\n  let count = 0;\n  nums.forEach((num) => {\n    if (num % 2 === 0 && num.toString().length === 1) {\n      count++;\n    }\n  });\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  special_filter([15, -73, 14, -15]) => 1 \n  special_filter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst special_filter_odd_odd_odd_odd_even = (nums) => {\n  let count = 0;\n  nums.forEach((num) => {\n    if (num % 2 === 0 && num.toString().length === 1) {\n      count++;\n    }\n  });\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  special_filter([15, -73, 14, -15]) => 1 \n  special_filter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst special_filter_odd_odd_odd_odd_odd_even = (nums) => {\n  let count = 0;\n  nums.forEach((num) => {\n    if (num % 2 === 0 && num.toString().length === 1) {\n      count++;\n    }\n  });\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  special_filter([15, -73, 14, -15]) => 1 \n  special_filter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst special_filter_odd_odd_odd_odd_odd_odd_even = (nums) => {\n  let count = 0;\n  nums.forEach((num) => {\n    if (num % 2 === 0 && num.toString().length === 1) {\n      count++;\n    }\n  });\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  special_filter([15, -73, 14, -15]) => 1 \n  special_filter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst special_filter_odd_odd_odd_odd_odd_odd_odd_even = (nums) => {\n  let count = 0;\n  nums.forEach((num) => {\n    if (num % 2 === 0 && num.toString().length === 1) {\n      count++;\n    }\n  });\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  special_filter([15, -73, 14, -15]) => 1 \n  special_filter([33, -2, -3, 45, 21, 109]) => 2\n"}
{"task_id": "JavaScript/147", "prompt": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst get_max_triples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "get_max_triples", "gc": "<|endoftext|>/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst get_max_triples = (n) => {\n  const a = [...Array(Math.pow(3, n))].map((_, i) => i * i - i + 1);\n  return a.filter((_, i) => i % 3 === 0).length;\n};\n\n/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst get_max_triples_2d = (n) => {\n  const a = [...Array(Math.pow(3, n))].map((_, i) => i * i - i + 1);\n  return a.filter((_, i) => i % 3 === 0).length;\n};\n\n/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst get_max_triples_3d = (n) => {\n  const a = [...Array(Math.pow(3, n))].map((_, i) => i * i - i + 1);\n  return a.filter((_, i) => i % 3 === 0).length;\n};\n\n/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst get_max_triples_4d = (n) => {\n  const a = [...Array(Math.pow(3, n))].map((_, i) => i * i - i + 1);\n  return a.filter((_, i) => i % 3 === 0).length;\n};\n\n/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst get_max_triples_5d = (n) => {\n  const a = [...Array(Math.pow(3, n))].map((_, i) => i * i - i + 1);\n  return a.filter((_, i) => i % 3 === 0).length;\n};\n\n/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst get_max_triples_6d = (n) => {\n  const a = [...Array(Math.pow(3, n))].map((_, i) => i * i - i + 1);\n  return a.filter((_, i) => i % 3 === 0).length;\n};\n\n/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst get_max_triples_7d = (n) => {\n  const a = [...Array(Math.pow(3, n))].map((_, i) => i * i - i + 1);\n  return a.filter((_, i) => i % 3 === 0).length;\n};\n\n/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst get_max_triples_8d = (n) => {\n  const a = [...Array(Math.pow(3, n))].map((_, i) => i * i - i + 1);\n  return a.filter((_, i) => i % 3 === 0).length;\n};\n\n/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst get_max_triples_9d = (n) => {\n  const a = [...Array(Math.pow(3, n))].map((_, i) => i * i - i + 1);\n  return a.filter((_, i) => i % 3 === 0).length;\n};\n\n/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      "}
{"task_id": "JavaScript/148", "prompt": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "gc": "<|endoftext|>/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  const planet1Orbit = orbit(planet1);\n  const planet2Orbit = orbit(planet2);\n  const planet1Orbits = planet1Orbit.orbits;\n  const planet2Orbits = planet2Orbit.orbits;\n  const planet1OrbitNames = planet1Orbits.map(orbit.orbitName);\n  const planet2OrbitNames = planet2Orbits.map(orbit.orbitName);\n  const planet1OrbitNamesSorted = planet1OrbitNames.sort();\n  const planet2OrbitNamesSorted = planet2OrbitNames.sort();\n  const planet1OrbitNamesSortedSorted = planet1OrbitNamesSorted\n   .map(orbitName => orbitName + \" (\" + planet1OrbitNamesSorted\n     .map(orbitName => orbit.orbitName(orbitName)).join(', ') + \")\");\n  const planet2OrbitNamesSortedSorted = planet2OrbitNamesSorted\n   .map(orbitName => orbitName + \" (\" + planet2OrbitNamesSorted\n     .map(orbitName => orbit.orbitName(orbitName)).join(', ') + \")\");\n  const planet1OrbitNamesSortedSortedSorted = planet1OrbitNamesSortedSorted\n   .map(orbitName => orbitName + \" (\" + planet1OrbitNamesSortedSorted\n     .map(orbitName => orbit.orbitName(orbitName)).join(', ') + \")\");\n  const planet2OrbitNamesSortedSortedSorted = planet2OrbitNamesSortedSorted\n   .map(orbitName => orbitName + \" (\" + planet2OrbitNamesSortedSorted\n     .map(orbitName => orbit.orbitName(orbitName)).join(', ') + \")\");\n  const planet1OrbitNamesSortedSortedSortedSorted = planet1OrbitNamesSortedSortedSorted\n   .map(orbitName => orbitName + \" (\" + planet1OrbitNamesSortedSortedSorted\n     .map(orbitName => orbit.orbitName(orbitName)).join(', ') + \")\");\n  return planet1OrbitNamesSortedSortedSorted\n   .concat(planet2OrbitNamesSortedSortedSorted)\n   .concat(planet1OrbitNamesSortedSortedSortedSorted)\n   .concat(planet2OrbitNamesSortedSortedSortedSorted);\n};\n\n/* Given a planet name, return the orbit of planet in degrees.\n  Examples\n  orbit(\"Venus\") ==> 90\n  orbit(\"Mercury\") ==> 180\n  orbit(\"Jupiter\") ==> 360\n  orbit(\"Saturn\") ==> 0\n  orbit(\"Uranus\") ==> 0\n  orbit(\"Neptune\") ==> 0\n  orbit(\"Earth\") ==> 0\n  orbit(\"Mars\") ==> 0\n  orbit(\"Jupiter\") ==> 0\n  orbit(\"Saturn\") ==> 0\n  orbit(\"Uranus\") ==> 0\n  orbit(\"Neptune\") ==> 0\n  orbit(\"Earth\") ==> 0\n  orbit(\"Mars\") ==> 0\n  orbit(\"Jupiter\") ==> 0\n  orbit(\"Saturn\") ==> 0\n  orbit(\"Uranus\") ==> 0\n  orbit(\"Neptune\") ==> 0\n  orbit(\"Earth\") ==> 0\n  orbit(\"Mars\") ==> 0\n  orbit(\"Jupiter\") ==> 0\n  orbit(\"Saturn\") ==> 0\n  orbit(\"Uranus\") ==> 0\n  orbit(\"Neptune\") ==> 0\n  orbit(\"Earth\") ==> 0\n  orbit(\"Mars\") ==> 0\n  orbit(\"Jupiter\") ==> 0\n  orbit(\"Saturn\") ==> 0\n  orbit(\"Uranus\") ==> 0\n  orbit(\"Neptune\") ==> 0\n  orbit(\"Earth\") ==> 0\n  orbit(\"Mars\") ==> 0\n  orbit(\"Jupiter\") ==> 0\n  orbit(\"Saturn\") ==> 0\n  orbit(\"Uranus\") ==> 0\n  orbit(\"Neptune\") ==> 0\n  orbit(\"Earth\") ==> 0\n  orbit(\"Mars\") ==> 0\n  orbit(\"Jupiter\") ==> 0\n  orbit(\"Saturn\") ==> 0\n  orbit(\"Uranus\") ==> 0\n  orbit(\"Neptune\") ==> 0\n  orbit(\"Earth\") ==> 0\n  orbit(\"Mars\") ==> 0\n  orbit(\"Jupiter\") ==> 0\n  orbit(\"Saturn\") ==> 0\n  orbit(\"Uranus\") ==> 0\n  orbit(\"Neptune\") ==> 0\n  orbit(\"Earth\") ==> 0\n  orbit(\"Mars\") ==> 0\n  orbit(\"Jupiter\") ==> 0\n  orbit(\"Saturn\") ==> 0\n  orbit(\"Uranus\") ==> 0\n  orbit(\"Neptune\") ==> 0\n  orbit(\"Earth\") ==> 0\n  orbit(\"Mars\") ==> 0\n  orbit(\"Jupiter\") ==> 0\n  orbit(\"Saturn\") ==> 0\n  orbit(\"Uranus\") ==> 0\n  orbit(\"Neptune\") ==> 0\n  orbit(\"Earth\") ==> 0\n  orbit(\"Mars\") ==> 0\n  orbit(\"Jupiter\") ==> 0\n  orbit(\"Saturn\") ==> 0\n  orbit(\"Uranus\") ==> 0\n  orbit(\"Neptune\") ==> 0\n  orbit(\"Earth\") ==> 0\n  orbit(\"Mars\") ==> 0\n  orbit(\"Jupiter\") ==> 0\n  orbit(\"Saturn\") ==> 0\n  orbit(\"Uranus\") ==> 0\n  orbit(\"Neptune\") ==> 0\n  orbit(\"Earth\") ==> 0\n  orbit(\"Mars\") ==> 0\n  orbit(\"Jupiter\") ==> 0\n  orbit(\"Saturn\") ==> 0\n  orbit(\"Uranus\") ==> 0\n  orbit(\"Ne"}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sorted_list_sum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sorted_list_sum", "gc": "<|endoftext|>/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sorted_list_sum = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return [...new Set(sum.split(\"\"))]\n   .sort((a, b) => a.length - b.length)\n   .map(s => s.split(\"\"))\n   .map(s => s.reduce((a, b) => a + b, 0))\n   .map(s => s.join(\"\"))\n   .filter(s => s.length > 0)\n   .map(s => s.split(\"\"))\n   .map(s => s.join(\"\"))\n   .filter(s => s.length > 0)\n   .map(s => s.split(\"\"))\n   .map(s => s.join(\"\"))\n   .filter(s => s.length > 0)\n   .map(s => s.split(\"\"))\n   .map(s => s.join(\"\"))\n   .filter(s => s.length > 0)\n   .map(s => s.split(\"\"))\n   .map(s => s.join(\"\"))\n   .filter(s => s.length > 0)\n   .map(s => s.split(\"\"))\n   .map(s => s.join(\"\"))\n   .filter(s => s.length > 0)\n   .map(s => s.split(\"\"))\n   .map(s => s.join(\"\"))\n   .filter(s => s.length > 0)\n   .map(s => s.split(\"\"))\n   .map(s => s.join(\"\"))\n   .filter(s => s.length > 0)\n   .map(s => s.split(\"\"))\n   .map(s => s.join(\"\"))\n   .filter(s => s.length > 0)\n   .map(s => s.split(\"\"))\n   .map(s => s.join(\"\"))\n   .filter(s => s.length > 0)\n   .map(s => s.split(\"\"))\n   .map(s => s.join(\"\"))\n   .filter(s => s.length > 0)\n   .map(s => s.split(\"\"))\n   .map(s => s.join(\"\"))\n   .filter(s => s.length > 0)\n   .map(s => s.split(\"\"))\n   .map(s => s.join(\"\"))\n   .filter(s => s.length > 0)\n   .map(s => s.split(\"\"))\n   .map(s => s.join(\"\"))\n   .filter(s => s.length > 0)\n   .map(s => s.split(\"\"))\n   .map(s => s.join(\"\"))\n   .filter(s => s.length > 0)\n   .map(s => s.split(\"\"))\n   .map(s => s.join(\"\"))\n   .filter(s => s.length > 0)\n   .map(s => s.split(\"\"))\n   .map(s => s.join(\"\"))\n   .filter(s => s.length > 0)\n   .map(s => s.split(\"\"))\n   .map(s => s.join(\"\"))\n   .filter(s => s.length > 0)\n   .map(s => s.split(\"\"))\n   .map(s => s.join(\"\"))\n   .filter(s => s.length > 0)\n   .map(s => s.split(\"\"))\n   .map(s => s.join(\"\"))\n   .filter(s => s.length > 0)\n   .map(s => s.split(\"\"))\n   .map(s => s.join(\"\"))\n   .filter(s => s.length > 0)\n   .map(s => s.split(\"\"))\n   .map(s => s.join(\"\"))\n   .filter(s => s.length > 0)\n   .map(s => s.split(\"\"))\n   .map(s => s.join(\"\"))\n   .filter(s => s.length > 0)\n   .map(s => s.split(\"\"))\n   .map(s => s.join(\"\"))\n   .filter(s => s.length > 0)\n   .map(s => s.split(\"\"))\n   .map(s => s.join(\"\"))\n   .filter(s => s.length > 0)\n   .map(s => s.split(\"\"))\n   .map(s => s.join(\"\"))\n   .filter(s => s.length > 0)\n   .map(s => s.split(\"\"))\n   .map(s => s.join(\"\"))\n   .filter(s => s.length > 0)\n   .map(s => s.split(\"\"))\n   .map(s => s.join(\"\"))\n   .filter(s => s.length > 0)\n   .map(s => s.split(\"\"))\n   .map(s => s.join(\"\"))\n   .filter(s => s.length > 0)\n   .map(s => s.split(\"\"))\n   .map(s => s.join(\"\"))\n   .filter(s => s.length > 0)\n   .map(s => s.split(\"\"))\n   .map(s => s.join(\"\"))\n   .filter(s => s.length > 0)\n   .map(s => s.split(\"\"))\n   .map(s => s.join(\"\"))\n   .filter(s => s.length > 0)\n   .map(s => s.split(\"\"))\n   .map(s => s.join(\"\"))\n   .filter(s => s.length > 0)\n   .map(s => s.split(\"\"))\n   .map(s => s.join(\"\"))\n   .filter(s => s.length > 0)\n   .map(s => s.split(\"\"))\n   .map(s => s.join(\"\"))\n   .filter(s => s.length > 0)\n   .map(s => s.split(\"\"))\n   .map(s => s.join(\"\"))\n   .filter(s => s.length > 0)\n   .map(s => s.split(\"\"))\n   .map(s => s.join(\"\"))\n   .filter(s => s.length > 0)\n   .map(s => s.split(\"\"))\n   .map(s => s.join(\"\"))\n   .filter(s => s.length > 0)\n   .map(s => s.split(\"\"))\n   .map(s => s.join(\"\"))\n   .filter(s => s.length > 0)\n   .map(s => s.split(\"\"))\n   .map(s => s.join(\"\"))\n   .filter(s => s.length > 0)\n   .map(s => s.split(\"\"))\n   .map(s => s.join(\"\"))\n   .filter(s => s.length > 0)\n   .map(s => s.split(\"\"))\n   .map(s => s.join(\"\"))\n   .filter(s => s.length > 0)\n   .map(s => s.split(\"\"))\n   .map(s => s.join(\"\"))\n   .filter(s => s.length > 0)\n   .map(s => s.split(\"\"))\n   .map(s => s.join(\"\"))\n   .filter(s => s.length > 0)\n   .map(s => s.split(\"\"))\n   .map(s => s.join(\"\"))\n   .filter(s => s.length > 0)\n   .map(s => s.split(\"\"))\n   .map(s => s.join(\"\"))\n   .filter(s => s.length > 0)\n   .map(s => s.split(\"\"))\n   .map(s => s.join(\"\"))\n   .filter(s => s.length > 0)\n   .map(s => s.split(\"\"))\n   .map(s => s.join(\"\"))\n   .filter(s => s.length > 0)\n   .map(s => s.split(\"\"))\n   .map(s => s.join(\"\"))\n   .filter(s => s.length > 0)\n   .map(s => s.split(\"\"))\n   .map(s => s.join(\"\"))\n   .filter(s => s.length > 0)\n   .map(s => s.split(\"\"))\n   .map(s => s.join(\"\"))\n   .filter(s => s.length > 0)\n   .map(s => s.split(\"\"))\n   .map(s => s.join(\"\"))\n   .filter(s => s.length > 0)\n   .map(s => s.split(\"\"))\n   .map(s => s.join(\"\"))\n   .filter(s => s.length > 0)\n   .map(s => s.split(\"\"))\n   .map(s => s.join(\"\"))\n   .filter(s => s.length > 0)\n   .map(s => s.split(\"\"))\n   .map(s => s.join(\"\"))\n   .filter(s => s.length > 0)\n   .map(s => s.split(\"\"))\n   .map(s => s.join(\"\"))\n   .filter(s => s.length > 0)\n   .map(s => s.split(\"\"))\n   .map(s => s.join(\"\"))\n   .filter(s => s.length > 0)\n   .map(s => s.split(\"\"))\n"}
{"task_id": "JavaScript/150", "prompt": "/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for x_or_y(7, 34, 12) == 34\n  for x_or_y(15, 8, 5) == 5\n  \n  */\nconst x_or_y = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "x_or_y", "gc": "<|endoftext|>/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for x_or_y(7, 34, 12) == 34\n  for x_or_y(15, 8, 5) == 5\n  \n  */\nconst x_or_y = (n, x, y) => {\n  if (n <= 0 || n % 2!== 0 || n % 3!== 0 || n % 4!== 0) {\n    throw new Error('n must be a positive integer');\n  }\n  if (x === 0 || y === 0) {\n    throw new Error('x and y must be non-zero');\n  }\n  if (x === y) {\n    return x;\n  }\n  if (n % 2 === 0) {\n    return x_or_y(n / 2, y, x);\n  }\n  return x_or_y(n / 3, y, x);\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for x_or_y(7, 34, 12) == 34\n  for x_or_y(15, 8, 5) == 5\n  \n  */\nconst x_or_y = (n, x, y) => {\n  if (n <= 0 || n % 2!== 0 || n % 3!== 0 || n % 4!== 0) {\n    throw new Error('n must be a positive integer');\n  }\n  if (x === 0 || y === 0) {\n    throw new Error('x and y must be non-zero');\n  }\n  if (x === y) {\n    return x;\n  }\n  if (n % 2 === 0) {\n    return x_or_y(n / 2, y, x);\n  }\n  return x_or_y(n / 3, y, x);\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for x_or_y(7, 34, 12) == 34\n  for x_or_y(15, 8, 5) == 5\n  \n  */\nconst x_or_y = (n, x, y) => {\n  if (n <= 0 || n % 2!== 0 || n % 3!== 0 || n % 4!== 0) {\n    throw new Error('n must be a positive integer');\n  }\n  if (x === 0 || y === 0) {\n    throw new Error('x and y must be non-zero');\n  }\n  if (x === y) {\n    return x;\n  }\n  if (n % 2 === 0) {\n    return x_or_y(n / 2, y, x);\n  }\n  return x_or_y(n / 3, y, x);\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for x_or_y(7, 34, 12) == 34\n  for x_or_y(15, 8, 5) == 5\n  \n  */\nconst x_or_y = (n, x, y) => {\n  if (n <= 0 || n % 2!== 0 || n % 3!== 0 || n % 4!== 0) {\n    throw new Error('n must be a positive integer');\n  }\n  if (x === 0 || y === 0) {\n    throw new Error('x and y must be non-zero');\n  }\n  if (x === y) {\n    return x;\n  }\n  if (n % 2 === 0) {\n    return x_or_y(n / 2, y, x);\n  }\n  return x_or_y(n / 3, y, x);\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for x_or_y(7, 34, 12) == 34\n  for x_or_y(15, 8, 5) == 5\n  \n  */\nconst x_or_y = (n, x, y) => {\n  if (n <= 0 || n % 2!== 0 || n % 3!== 0 || n % 4!== 0) {\n    throw new Error('n must be a positive integer');\n  }\n  if (x === 0 || y === 0) {\n    throw new Error('x and y must be non-zero');\n  }\n  if (x === y) {\n    return x;\n  }\n  if (n % 2 === 0) {\n    return x_or_y(n / 2, y, x);\n  }\n  return x_or_y(n / 3, y, x);\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for x_or_y(7, 34, 12) == 34\n  for x_or_y(15, 8, 5) == 5\n  \n  */\nconst x_or_y = (n, x, y) => {\n  if (n <= 0 || n % 2!== 0 || n % 3!== 0 || n % 4!== 0) {\n    throw new Error('n must be a positive integer');\n  }\n  if (x === 0 || y === 0) {\n    throw new Error('x and y must be non-zero');\n  }\n  if (x === y) {\n    return x;\n  }\n  if (n % 2 === 0) {\n    return x_or_y(n / 2, y, x);\n  }\n  return x_or_y(n / 3, y, x);\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for x_or_y(7, 34, 12) == 34\n  for x_or_y(15, 8, 5) == 5\n  \n  */\nconst x_or_y = (n, x, y) => {\n  if (n <= 0 || n % 2!== 0 || n % 3!== 0 || n % 4!== 0) {\n    throw new Error('n must be a positive integer');\n  }\n  if (x === 0 || y === 0) {\n    throw new Error('x and y must be non-zero');\n  }\n  if (x === y) {\n    return x;\n  }\n  if (n % 2 === 0) {\n    return x_or_y(n / 2, y, x);\n  }\n  return x_or_y(n / 3, y, x);\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for x_or_y(7, 34, 12) == 34\n  for x_or_y(15, 8, 5) == 5\n  \n  */\nconst x_or_y = (n, x, y) => {\n  if (n <= 0 || n % 2!== 0 || n % 3!== 0 || n % 4!== 0) {\n    throw new Error('n must be a positive integer');\n  }\n  if (x === 0 || y === 0) {\n    throw new Error('x and y must be non-zero');\n  }\n  if (x === y) {\n    return x;\n  }\n  if (n % 2 === 0) {\n    return x_or_y(n / 2, y, x);\n  }\n  return x_or_y(n / 3, y, x);\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for x_or_y(7, 34, 12) == 34\n  for x_or_y(15, 8, 5) == 5\n  \n  */\nconst x_or_y = (n, x, y) => {\n  if (n <= 0 || n % 2!== 0 || n % 3!== 0 || n % 4!== 0) {\n    throw new Error('n must be a positive integer');\n  }\n  if (x === 0 || y === 0) {\n    throw new Error('x and y must be non-zero');\n  }\n  if (x === y) {\n    return x;\n  }\n  if (n % 2 === 0) {\n    return x_or_y(n / 2, y, x);\n  }\n  return x_or_y(n / 3, y, x);\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for x_or_y(7, 34, 12) == 34\n  for x_or_y(15, 8, 5) == 5\n  \n  */\nconst x_or_y = (n, x, y) => {\n  if (n <= 0 || n % 2!== 0 || n % 3!== 0 || n % 4!== 0) {\n    throw new Error('n must be a positive integer');\n  }\n  if (x === 0 || y === 0) {\n    throw new Error('x and y must be non-zero');\n  }\n  if (x === y) {\n    return x;\n  }\n  if (n % 2 === 0) {\n    return x_or_y(n / 2, y, x);\n  }\n  return x_or_y(n / 3, y, x);\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for x_or_y(7, 34, 12) == 34\n  for x_or_y(15, 8, 5) == 5\n  \n  */\nconst x_or_y = (n, x, y) => {\n  if (n <= 0 || n % 2!== 0 || n % 3!== 0 || n % 4!== 0) {\n    throw new Error('n must be a positive integer');\n  }\n  if (x === 0 || y === 0) {\n    throw new Error('x and y must be non-zero');\n  }\n  if (x === y) {\n    return x;\n  }\n  if (n % "}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  double_the_difference([-1, -2, 0]) == 0\n  double_the_difference([9, -2]) == 81\n  double_the_difference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst double_the_difference = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "double_the_difference", "gc": "<|endoftext|>/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  double_the_difference([-1, -2, 0]) == 0\n  double_the_difference([9, -2]) == 81\n  double_the_difference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst double_the_difference = (lst) => {\n  if (lst == null || lst.length == 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!= 0) {\n      sum += Math.pow(lst[i], 2);\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are even. Ignore numbers that are negative or not integers.\n  double_the_difference([1, 3, 2, 0]) == 1 + 2 + 0 + 0 = 6\n  double_the_difference([-1, -2, 0]) == -1\n  double_the_difference([9, -2]) == 27\n  double_the_difference([0]) == 6\n  If the input list is empty, return 0.\n  */\nconst double_the_difference = (lst) => {\n  if (lst == null || lst.length == 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!= 0) {\n      sum += Math.pow(lst[i], 2);\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are divisible by 3. Ignore numbers that are negative or not integers.\n  double_the_difference([1, 3, 2, 0]) == 1 + 2 + 0 + 0 = 6\n  double_the_difference([-1, -2, 0]) == -1\n  double_the_difference([9, -2]) == 27\n  double_the_difference([0]) == 6\n  If the input list is empty, return 0.\n  */\nconst double_the_difference = (lst) => {\n  if (lst == null || lst.length == 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3!= 0) {\n      sum += Math.pow(lst[i], 3);\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are divisible by 5 and ignore numbers that are negative or not integers.\n  double_the_difference([1, 3, 2, 0]) == 1 + 2 + 0 + 0 = 6\n  double_the_difference([-1, -2, 0]) == -1\n  double_the_difference([9, -2]) == 27\n  double_the_difference([0]) == 6\n  If the input list is empty, return 0.\n  */\nconst double_the_difference = (lst) => {\n  if (lst == null || lst.length == 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 5!= 0) {\n      sum += Math.pow(lst[i], 5);\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are divisible by 7 and ignore numbers that are negative or not integers.\n  double_the_difference([1, 3, 2, 0]) == 1 + 2 + 0 + 0 = 6\n  double_the_difference([-1, -2, 0]) == -1\n  double_the_difference([9, -2]) == 27\n  double_the_difference([0]) == 6\n  If the input list is empty, return 0.\n  */\nconst double_the_difference = (lst) => {\n  if (lst == null || lst.length == 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 7!= 0) {\n      sum += Math.pow(lst[i], 7);\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are divisible by 9 and ignore numbers that are negative or not integers.\n  double_the_difference([1, 3, 2, 0]) == 1 + 2 + 0 + 0 = 6\n  double_the_difference([-1, -2, 0]) == -1\n  double_the_difference([9, -2]) == 27\n  double_the_difference([0]) == 6\n  If the input list is empty, return 0.\n  */\nconst double_the_difference = (lst) => {\n  if (lst == null || lst.length == 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 9!= 0) {\n      sum += Math.pow(lst[i], 9);\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are divisible by 11 and ignore numbers that are negative or not integers.\n  double_the_difference([1, 3, 2, 0]) == 1 + 2 + 0 + 0 = 6\n  double_the_difference([-1, -2, 0]) == -1\n  double_the_difference([9, -2]) == 27\n  double_the_difference([0]) == 6\n  If the input list is empty, return 0.\n  */\nconst double_the_difference = (lst) => {\n  if (lst == null || lst.length == 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 11!= 0) {\n      sum += Math.pow(lst[i], 11);\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are divisible by 13 and ignore numbers that are negative or not integers.\n  double_the_difference([1, 3, 2, 0]) == 1 + 2 + 0 + 0 = 6\n  double_the_difference([-1, -2, 0]) == -1\n  double_the_difference([9, -2]) == 27\n  double_the_difference([0]) == 6\n  If the input list is empty, return 0.\n  */\nconst double_the_difference = (lst) => {\n  if (lst == null || lst.length == 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 13!= 0) {\n      sum += Math.pow(lst[i], 13);\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are divisible by 15 and ignore numbers that are negative or not integers.\n  double_the_difference([1, 3, 2, 0]) == 1 + 2 + 0 + 0 = 6\n  double_the_difference([-1, -2, 0]) == -1\n  double_the_difference([9, -2]) == 27\n  double_the_difference([0]) == 6\n  If the input list is empty, return 0.\n  */\nconst double_the_difference = (lst) => {\n  if (lst == null || lst.length == 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 15!= 0) {\n      sum += Math.pow(lst[i], 15);\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are divisible by 17 and ignore numbers that are negative or not integers.\n  double_the_difference([1, 3, 2, 0]) == 1 + 2 + 0 + 0 = 6\n  double_the_difference([-1, -2, 0]) == -1\n  double_the_difference([9, -2]) == 27\n  double_the_difference([0]) == 6\n  If the input list is empty, return 0.\n  */\nconst double_the_difference = (lst) => {\n  if (lst == null || lst.length == 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 17!= 0) {\n      sum += Math.pow(lst[i], 17);\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are divisible by 19 and ignore numbers that are negative or not integers.\n  double_the_difference([1, 3, 2, 0]) == 1 + 2 + 0 + 0 = 6\n  double_the_difference([-1, -2, 0]) == -1\n  double_the_difference([9, -2]) == 27\n  double_the_difference([0]) == 6\n  If the input list is empty, return 0.\n  */\nconst double_the_difference = (lst) => {\n  if (lst == null || lst.length == 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 19!= 0) {\n      sum += Math.pow(lst[i], 19);\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are divisible by 21 and ignore numbers that are negative "}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "gc": "<|endoftext|>/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  const scores = [...game];\n  const guesses = [...guess];\n  const scoreDifferences = scores.length - guesses.length;\n  const guesseDifferences = guesses.length - scores.length;\n  const scoreDifference = scoreDifferences.reduce((acc, cur) => acc + Math.abs(cur - scores[cur]), 0);\n  const guesseDifference = guesseDifferences.reduce((acc, cur) => acc + Math.abs(cur - guesses[cur]), 0);\n  return [scoreDifference, guesseDifference];\n};\n\n/*\n  Given an array of numbers, return an array of the same length with each element being one of\n  the numbers in that array multiplied by a factor.\n  \n  Example:\n  \n  multiply([1,2,3],2) -> [2,4,6]\n  multiply([1,2,3],3) -> [6,24,120]\n  multiply([1,2,3],4) -> [120,720,5040]\n  multiply([1,2,3],5) -> [5040,720,720,5040,720,720,5040]\n  multiply([1,2,3],6) -> [720,720,720,720,720,720,720,720]\n  multiply([1,2,3],7) -> [720,720,720,720,720,720,720,720]\n  multiply([1,2,3],8) -> [720,720,720,720,720,720,720,720]\n  multiply([1,2,3],9) -> [720,720,720,720,720,720,720,720]\n  multiply([1,2,3],10) -> [720,720,720,720,720,720,720,720]\n  multiply([1,2,3],11) -> [720,720,720,720,720,720,720,720]\n  multiply([1,2,3],12) -> [720,720,720,720,720,720,720,720]\n  multiply([1,2,3],13) -> [720,720,720,720,720,720,720,720]\n  multiply([1,2,3],14) -> [720,720,720,720,720,720,720,720]\n  multiply([1,2,3],15) -> [720,720,720,720,720,720,720,720]\n  multiply([1,2,3],16) -> [720,720,720,720,720,720,720,720]\n  multiply([1,2,3],17) -> [720,720,720,720,720,720,720,720]\n  multiply([1,2,3],18) -> [720,720,720,720,720,720,720,720]\n  multiply([1,2,3],19) -> [720,720,720,720,720,720,720,720]\n  multiply([1,2,3],20) -> [720,720,720,720,720,720,720,720]\n  multiply([1,2,3],21) -> [720,720,720,720,720,720,720,720]\n  multiply([1,2,3],22) -> [720,720,720,720,720,720,720,720]\n  multiply([1,2,3],23) -> [720,720,720,720,720,720,720,720]\n  multiply([1,2,3],24) -> [720,720,720,720,720,720,720,720]\n  multiply([1,2,3],25) -> [720,720,720,720,720,720,720,720]\n  multiply([1,2,3],26) -> [720,720,720,720,720,720,720,720]\n  multiply([1,2,3],27) -> [720,720,720,720,720,720,720,720]\n  multiply([1,2,3],28) -> [720,720,720,720,720,720,720,720]\n  multiply([1,2,3],29) -> [720,720,720,720,720,720,720,720]\n  multiply([1,2,3],30) -> [720,720,720,720,720,720,720,720]\n  multiply([1,2,3],31) -> [720,720,720,720,720,720,720,720]\n  multiply([1,2,3],32) -> [720,720,720,720,720,720,720,720]\n  multiply([1,2,3],33) -> [720,720,720,720,720,720,720,720]\n  multiply([1,2,3],34) -> [720,720,720,720,720,720,720,720]\n  multiply([1,2,3],35) -> [720,720,720,720,720,720,720,720]\n  multiply([1,2,3],36) -> [720,720,720,720,720,720,720,720]\n  multiply([1,2,3],37) -> [720,720,720,720,720,720,720,720]\n  multiply([1,2,3],38) -> [720,720,720,720,720,720,720,720]\n  multiply([1,2,3],39) -> [720,720,720,720,720,720,720,720]\n  multiply([1,2,3],40) -> [720,720,720,720,720,720,720,720]\n  multiply([1,2,3],41) -> [720,720,720,720,720,720,720,720]\n  multiply([1,2,3],42) -> [720,720,720,720,720,720,720,720]\n  multiply([1,2,3],43) -> [720,720,720,720,720,720,720,720]\n  multiply([1,2,3],44) -> [720,720,720,720,720,720,720,720]\n  multiply([1,2,3],45) -> [720,720,720,720,720,720,720,720]\n  multiply([1,2,3],46) -> [720,720,720,720,720,720,720,720]\n  multiply([1,2,3],47) -> [720,720,720,720,720,720,720,720]\n  multiply([1,2,3],48) -> [720,720,720,720,720,720,720,720]\n  multiply([1,2,3],49) -> [720,720,720,720,720,720,720,720]\n  multiply([1,2,3],50) -> [720,720,720,720,720,720,720,720]\n  multiply([1,2,3],51) -> [720,720,720,720,720,720,720,720]\n  multiply([1,2,"}
{"task_id": "JavaScript/153", "prompt": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongest_extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongest_extension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongest_extension", "gc": "<|endoftext|>/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongest_extension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongest_extension = (class_name, extensions) => {\n  let extension_strength = 0;\n  let strongest_extension = '';\n  for (let extension of extensions) {\n    const extension_length = extension.length;\n    const extension_letters = extension.split(\"\");\n    const extension_letters_length = extension_letters.length;\n    const extension_letters_count = extension_letters_length / 2;\n    const extension_letters_upper = extension_letters.slice(0, extension_letters_count);\n    const extension_letters_lower = extension_letters.slice(extension_letters_count, extension_letters_length / 2);\n    const extension_letters_upper = extension_letters_upper.join(\"_\");\n    const extension_letters_lower = extension_letters_lower.join(\"-\");\n    const extension_letters_upper_capitalized = extension_letters_upper.charAt(0).toUpperCase() + extension_letters_upper.slice(1);\n    const extension_letters_lower_capitalized = extension_letters_lower.charAt(0).toUpperCase() + extension_letters_lower.slice(1);\n    const extension_letters_upper_capitalized_capitalized = extension_letters_upper_capitalized.charAt(0).toUpperCase() + extension_letters_upper_capitalized.slice(1);\n    const extension_letters_lower_capitalized_capitalized = extension_letters_lower_capitalized.charAt(0).toUpperCase() + extension_letters_lower_capitalized.slice(1);\n    const extension_letters_upper_capitalized_capitalized_capitalized = extension_letters_upper_capitalized_capitalized.charAt(0).toUpperCase() + extension_letters_upper_capitalized_capitalized.slice(1);\n    const extension_letters_lower_capitalized_capitalized_capitalized = extension_letters_lower_capitalized_capitalized.charAt(0).toUpperCase() + extension_letters_lower_capitalized_capitalized.slice(1);\n    const extension_letters_upper_capitalized_capitalized_capitalized_capitalized = extension_letters_upper_capitalized_capitalized_capitalized.charAt(0).toUpperCase() + extension_letters_upper_capitalized_capitalized_capitalized.slice(1);\n    const extension_letters_lower_capitalized_capitalized_capitalized_capitalized = extension_letters_lower_capitalized_capitalized_capitalized.charAt(0).toUpperCase() + extension_letters_lower_capitalized_capitalized_capitalized.slice(1);\n    const extension_letters_upper_capitalized_capitalized_capitalized_capitalized = extension_letters_upper_capitalized_capitalized_capitalized_capitalized.charAt(0).toUpperCase() + extension_letters_upper_capitalized_capitalized_capitalized.slice(1);\n    const extension_letters_lower_capitalized_capitalized_capitalized_capitalized = extension_letters_lower_capitalized_capitalized_capitalized_capitalized.charAt(0).toUpperCase() + extension_letters_lower_capitalized_capitalized_capitalized.slice(1);\n    const extension_letters_upper_capitalized_capitalized_capitalized_capitalized_capitalized = extension_letters_upper_capitalized_capitalized_capitalized_capitalized_capitalized.charAt(0).toUpperCase() + extension_letters_upper_capitalized_capitalized_capitalized_capitalized.slice(1);\n    const extension_letters_lower_capitalized_capitalized_capitalized_capitalized_capitalized = extension_letters_lower_capitalized_capitalized_capitalized_capitalized_capitalized.charAt(0).toUpperCase() + extension_letters_lower_capitalized_capitalized_capitalized_capitalized.slice(1);\n    const extension_letters_upper_capitalized_capitalized_capitalized_capitalized_capitalized_capitalized = extension_letters_upper_capitalized_capitalized_capitalized_capitalized_capitalized_capitalized.charAt(0).toUpperCase() + extension_letters_upper_capitalized_capitalized_capitalized_capitalized.slice(1);\n    const extension_letters_lower_capitalized_capitalized_capitalized_capitalized_capitalized = extension_letters_lower_capitalized_capitalized_capitalized_capitalized_capitalized.charAt(0).toUpperCase() + extension_letters_lower_capitalized_capitalized_capitalized_capitalized.slice(1);\n    const extension_letters_upper_capitalized_capitalized_capitalized_capitalized_capitalized_capitalized = extension_letters_upper_capitalized_capitalized_capitalized_capitalized_capitalized_capitalized.charAt(0).toUpperCase() + extension_letters_upper_capitalized_capitalized_capitalized_capitalized_capitalized.slice(1);\n    const extension_letters_lower_capitalized_capitalized_capitalized_capitalized_capitalized_capitalized = extension_letters_lower_capitalized_capitalized_capitalized_capitalized_capitalized_capitalized.charAt(0).toUpperCase() + extension_letters_lower_capitalized_capitalized_capitalized_capitalized_capitalized.slice(1);\n    const extension_letters_upper_capitalized_capitalized_capitalized_capitalized_capitalized_capitalized = extension_letters_upper_capitalized_capitalized_capitalized_capitalized_capitalized_capitalized_capitalized.charAt(0).toUpperCase() + extension_letters_upper_capitalized_capitalized_capitalized_capitalized_capitalized.slice(1);\n    const extension_letters_lower_capitalized_capitalized_capitalized_capitalized_capitalized_capitalized = extension_letters_lower_capitalized_capitalized_capitalized_capitalized_capitalized_capitalized.charAt(0).toUpperCase() + extension_letters_lower_capitalized_capitalized_capitalized_capitalized_capitalized.slice(1);\n    const extension_letters_upper_capitalized_capitalized_capitalized_capitalized_capitalized_capitalized_capitalized = extension_letters_upper_capitalized_capitalized_capitalized_capitalized_capitalized_capitalized_capitalized.charAt(0).toUpperCase() + extension_letters_upper_capitalized_capitalized_capitalized_capitalized_capitalized_capitalized.slice(1);\n    const extension_letters_lower_capitalized_capitalized_capitalized_capitalized_capitalized_capitalized_capitalized_capitalized = extension_letters_lower_capitalized_capitalized_capitalized_capitalized_capitalized_capitalized_capitalized_capitalized.charAt(0).toUpperCase() + extension_letters_lower_capitalized_capitalized_capitalized_capitalized_capitalized_capitalized.slice(1);\n    const extension_letters_upper_capitalized_capitalized_capitalized_capitalized_capitalized_capitalized_capitalized_capitalized = extension_letters_upper_capitalized_capitalized_capitalized_capitalized_capitalized_capitalized_capitalized_capitalized.charAt(0).toUpperCase() + extension_letters_upper_capitalized_capitalized_capitalized_capitalized_capitalized_capitalized.slice(1);\n    const extension_letters_lower_capitalized_capitalized_capitalized_capitalized_capitalized_capitalized_capitalized_capitalized = extension_letters_lower_capitalized_capitalized_capitalized_capitalized_capitalized_capitalized_capitalized_capitalized.charAt(0).toUpperCase() + extension_letters_lower_capitalized_capitalized_capitalized_capitalized_capitalized_capitalized_capitalized.slice(1);\n    const extension_letters_upper_capitalized_capitalized_capitalized_capitalized_capitalized_capitalized_capitalized_capitalized_capitalized = extension_letters_upper_capitalized_capitalized_capitalized_capitalized_capitalized_capitalized_capitalized_capitalized.charAt(0).toUpperCase() + extension_letters_upper_capitalized_capitalized_capitalized_capitalized_capitalized_capitalized_capitalized.slice(1);\n    const extension_letters_lower_"}
{"task_id": "JavaScript/154", "prompt": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycpattern_check(\"abcd\",\"abd\") => false\n  cycpattern_check(\"hello\",\"ell\") => true\n  cycpattern_check(\"whassup\",\"psus\") => false\n  cycpattern_check(\"abab\",\"baa\") => true\n  cycpattern_check(\"efef\",\"eeff\") => false\n  cycpattern_check(\"himenss\",\"simen\") => true\n  */\nconst cycpattern_check = (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpattern_check", "gc": "<|endoftext|>/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycpattern_check(\"abcd\",\"abd\") => false\n  cycpattern_check(\"hello\",\"ell\") => true\n  cycpattern_check(\"whassup\",\"psus\") => false\n  cycpattern_check(\"abab\",\"baa\") => true\n  cycpattern_check(\"efef\",\"eeff\") => false\n  cycpattern_check(\"himenss\",\"simen\") => true\n  */\nconst cycpattern_check = (a, b) => {\n  let a1 = a.split('')\n  let b1 = b.split('')\n  let a2 = a1.map((v, i) => v + i)\n  let b2 = b1.map((v, i) => v + i)\n  let a3 = a2.filter((v, i) => v === b2.shift())\n  let b3 = b2.filter((v, i) => v === b2.shift())\n  let a4 = a3.filter((v, i) => v === b3.shift())\n  let b4 = b3.filter((v, i) => v === b3.shift())\n  let a5 = a4.filter((v, i) => v === b4.shift())\n  let b5 = b4.filter((v, i) => v === b4.shift())\n  let a6 = a5.filter((v, i) => v === b5.shift())\n  let b6 = b5.filter((v, i) => v === b5.shift())\n  let a7 = a6.filter((v, i) => v === b6.shift())\n  let b7 = b6.filter((v, i) => v === b6.shift())\n  let a8 = a7.filter((v, i) => v === b7.shift())\n  let b8 = b7.filter((v, i) => v === b7.shift())\n  let a9 = a8.filter((v, i) => v === b8.shift())\n  let b9 = b8.filter((v, i) => v === b8.shift())\n  let a10 = a9.filter((v, i) => v === b9.shift())\n  let b10 = b9.filter((v, i) => v === b9.shift())\n  let a11 = a10.filter((v, i) => v === b10.shift())\n  let b11 = b10.filter((v, i) => v === b10.shift())\n  let a12 = a11.filter((v, i) => v === b11.shift())\n  let b12 = b11.filter((v, i) => v === b11.shift())\n  let a13 = a12.filter((v, i) => v === b12.shift())\n  let b13 = b12.filter((v, i) => v === b12.shift())\n  let a14 = a13.filter((v, i) => v === b13.shift())\n  let b14 = b13.filter((v, i) => v === b13.shift())\n  let a15 = a14.filter((v, i) => v === b14.shift())\n  let b15 = b14.filter((v, i) => v === b14.shift())\n  let a16 = a15.filter((v, i) => v === b15.shift())\n  let b16 = b15.filter((v, i) => v === b15.shift())\n  let a17 = a16.filter((v, i) => v === b16.shift())\n  let b17 = b16.filter((v, i) => v === b16.shift())\n  let a18 = a17.filter((v, i) => v === b17.shift())\n  let b18 = b17.filter((v, i) => v === b17.shift())\n  let a19 = a18.filter((v, i) => v === b18.shift())\n  let b19 = b18.filter((v, i) => v === b18.shift())\n  let a20 = a19.filter((v, i) => v === b19.shift())\n  let b20 = b19.filter((v, i) => v === b19.shift())\n  let a21 = a20.filter((v, i) => v === b20.shift())\n  let b22 = b20.filter((v, i) => v === b20.shift())\n  let a22 = a21.filter((v, i) => v === b22.shift())\n  let b23 = b21.filter((v, i) => v === b22.shift())\n  let a23 = a22.filter((v, i) => v === b23.shift())\n  let b24 = b22.filter((v, i) => v === b23.shift())\n  let a24 = a23.filter((v, i) => v === b24.shift())\n  let b25 = b23.filter((v, i) => v === b24.shift())\n  let a25 = a24.filter((v, i) => v === b25.shift())\n  let b26 = b24.filter((v, i) => v === b25.shift())\n  let a26 = a25.filter((v, i) => v === b26.shift())\n  let b27 = b25.filter((v, i) => v === b26.shift())\n  let a27 = a26.filter((v, i) => v === b27.shift())\n  let b28 = b26.filter((v, i) => v === b27.shift())\n  let a28 = a27.filter((v, i) => v === b28.shift())\n  let b29 = b27.filter((v, i) => v === b28.shift())\n  let a29 = a28.filter((v, i) => v === b29.shift())\n  let b30 = b28.filter((v, i) => v === b29.shift())\n  let a31 = a29.filter((v, i) => v === b30.shift())\n  let b32 = b29.filter((v, i) => v === b30.shift())\n  let a32 = a31.filter((v, i) => v === b31.shift())\n  let b33 = b31.filter((v, i) => v === b31.shift())\n  let a33 = a32.filter((v, i) => v === b32.shift())\n  let b34 = b32.filter((v, i) => v === b32.shift())\n  let a34 = a33.filter((v, i) => v === b34.shift())\n  let b35 = b33.filter((v, i) => v === b34.shift())\n  let a35 = a34.filter((v, i) => v === b35.shift())\n  let b36 = b34.filter((v, i) => v === b35.shift())\n  let a36 = a35.filter((v, i) => v === b36.shift())\n  let b37 = b35.filter((v, i) => v === b36.shift())\n  let a37 = a36.filter((v, i) => v === b37.shift())\n  let b38 = b36.filter((v, i) => v === b37.shift())\n  let a38 = a37.filter((v, i) => v === b38.shift())\n  let b39 = b37.filter((v, i) => v === b38.shift())\n  let a39 = a38.filter((v, i) => v === b39.shift())\n  let b40 = b38.filter((v, i) => v === b39.shift())\n  let a41 = b39.filter((v, i) => v === b40.shift())\n  let b42 = b40.filter((v, i) => v === b40.shift())\n  let a42 = a41.filter((v, i) => v === b42.shift())\n  let b43 = b42.filter((v, i) => v === b42.shift())\n  let a43 = a43.filter((v, i) => v === b43.shift())\n  let b44 = b43.filter((v, i) => v === b43.shift())\n  let a44 = a44.filter((v, i) => v === b44.shift())\n  let b45 = b44.filter((v, i) => v === b44.shift())\n  let a46 = a45."}
{"task_id": "JavaScript/155", "prompt": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      even_odd_count(-12) ==> (1, 1)\n      even_odd_count(123) ==> (1, 2)\n  */\nconst even_odd_count = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "even_odd_count", "gc": "<|endoftext|>/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      even_odd_count(-12) ==> (1, 1)\n      even_odd_count(123) ==> (1, 2)\n  */\nconst even_odd_count = (num) => {\n  let even = 0, odd = 0, digit;\n  do {\n    digit = num % 10;\n    num = Math.floor(num / 10);\n    even = even + digit % 2;\n    odd = odd + digit / 2;\n  } while (num > 0);\n  return [even, odd];\n};\n\n/*Given a string, return a tuple that has the number of letters and the number of digits respectively.\n\n   Example:\n      letter_count(\"abc\") ==> (3, 2)\n      letter_count(\"abc def\") ==> (3, 3)\n      letter_count(\"abc def\") ==> (3, 2)\n      letter_count(\"abc def\") ==> (3, 2)\n      letter_count(\"abc def\") ==> (3, 2)\n      letter_count(\"abc def\") ==> (3, 2)\n      letter_count(\"abc def\") ==> (3, 2)\n      letter_count(\"abc def\") ==> (3, 2)\n      letter_count(\"abc def\") ==> (3, 2)\n      letter_count(\"abc def\") ==> (3, 2)\n      letter_count(\"abc def\") ==> (3, 2)\n      letter_count(\"abc def\") ==> (3, 2)\n      letter_count(\"abc def\") ==> (3, 2)\n      letter_count(\"abc def\") ==> (3, 2)\n      letter_count(\"abc def\") ==> (3, 2)\n      letter_count(\"abc def\") ==> (3, 2)\n      letter_count(\"abc def\") ==> (3, 2)\n      letter_count(\"abc def\") ==> (3, 2)\n      letter_count(\"abc def\") ==> (3, 2)\n      letter_count(\"abc def\") ==> (3, 2)\n      letter_count(\"abc def\") ==> (3, 2)\n      letter_count(\"abc def\") ==> (3, 2)\n      letter_count(\"abc def\") ==> (3, 2)\n      letter_count(\"abc def\") ==> (3, 2)\n      letter_count(\"abc def\") ==> (3, 2)\n      letter_count(\"abc def\") ==> (3, 2)\n      letter_count(\"abc def\") ==> (3, 2)\n      letter_count(\"abc def\") ==> (3, 2)\n      letter_count(\"abc def\") ==> (3, 2)\n      letter_count(\"abc def\") ==> (3, 2)\n      letter_count(\"abc def\") ==> (3, 2)\n      letter_count(\"abc def\") ==> (3, 2)\n      letter_count(\"abc def\") ==> (3, 2)\n      letter_count(\"abc def\") ==> (3, 2)\n      letter_count(\"abc def\") ==> (3, 2)\n      letter_count(\"abc def\") ==> (3, 2)\n      letter_count(\"abc def\") ==> (3, 2)\n      letter_count(\"abc def\") ==> (3, 2)\n      letter_count(\"abc def\") ==> (3, 2)\n      letter_count(\"abc def\") ==> (3, 2)\n      letter_count(\"abc def\") ==> (3, 2)\n      letter_count(\"abc def\") ==> (3, 2)\n      letter_count(\"abc def\") ==> (3, 2)\n      letter_count(\"abc def\") ==> (3, 2)\n      letter_count(\"abc def\") ==> (3, 2)\n      letter_count(\"abc def\") ==> (3, 2)\n      letter_count(\"abc def\") ==> (3, 2)\n      letter_count(\"abc def\") ==> (3, 2)\n      letter_count(\"abc def\") ==> (3, 2)\n      letter_count(\"abc def\") ==> (3, 2)\n      letter_count(\"abc def\") ==> (3, 2)\n      letter_count(\"abc def\") ==> (3, 2)\n      letter_count(\"abc def\") ==> (3, 2)\n      letter_count(\"abc def\") ==> (3, 2)\n      letter_count(\"abc def\") ==> (3, 2)\n      letter_count(\"abc def\") ==> (3, 2)\n      letter_count(\"abc def\") ==> (3, 2)\n      letter_count(\"abc def\") ==> (3, 2)\n      letter_count(\"abc def\") ==> (3, 2)\n      letter_count(\"abc def\") ==> (3, 2)\n      letter_count(\"abc def\") ==> (3, 2)\n      letter_count(\"abc def\") ==> (3, 2)\n      letter_count(\"abc def\") ==> (3, 2)\n      letter_count(\"abc def\") ==> (3, 2)\n      letter_count(\"abc def\") ==> (3, 2)\n      letter_count(\"abc def\") ==> (3, 2)\n      letter_count(\"abc def\") ==> (3, 2)\n      letter_count(\"abc def\") ==> (3, 2)\n      letter_count(\"abc def\") ==> (3, 2)\n      letter_count(\"abc def\") ==> (3, 2)\n      letter_count(\"abc def\") ==> (3, 2)\n      letter_count(\"abc def\") ==> (3, 2)\n      letter_count(\"abc def\") ==> (3, 2)\n      letter_count(\"abc def\") ==> (3, 2)\n      letter_count(\"abc def\") ==> (3, 2)\n      letter_count(\"abc def\") ==> (3, 2)\n      letter_count(\"abc def\") ==> (3, 2)\n      letter_count(\"abc def\") ==> (3, 2)\n      letter_count(\"abc def\") ==> (3, 2)\n      letter_count(\"abc def\") ==> (3, 2)\n      letter_count(\"abc def\") ==> (3, 2)\n      letter_count(\"abc def\") ==> (3, 2)\n      letter_count(\"abc def\") ==> (3, 2)\n      letter_count(\"abc def\") ==> (3, 2)\n      letter_count(\"abc def\") ==> (3, 2)\n      letter_count(\"abc def\") ==> (3, 2)\n      letter_count(\"abc def\") ==> (3, 2)\n      letter_count(\"abc def\") ==> (3, 2)\n      letter_count(\"abc def\") ==> (3, 2)\n      letter_count(\"abc def\") ==> (3, 2)\n      letter_count(\"abc def\") ==> (3, 2)\n      letter_count(\"abc def\") ==> (3, 2)\n      letter_count(\"abc def\") ==> (3, 2)\n      letter_count(\"abc def\") ==> (3, 2)\n      letter_count(\"abc def\") ==> (3, 2)\n      letter_count(\"abc def\") ==> (3, 2)\n      letter_count(\"abc def\") ==> (3, 2)\n      letter_count(\"abc def\") ==> (3, 2)\n      letter_count(\"abc def\") ==> (3, 2)\n      letter_count(\"abc def\") ==> (3, 2)\n      letter_count(\"abc def\") ==> (3, 2)\n      letter_count(\"abc def\") ==> (3, 2)\n      letter_count(\"abc def\") ==> (3, 2)\n      letter_count(\"abc def\") ==> (3, 2)\n      letter_count(\"abc def\") ==> (3, 2)\n      letter_count(\"abc def\") ==> (3, 2)\n      letter_count(\"abc def\") ==> (3, 2)\n      letter_count(\"abc def\") ==> (3, 2)\n      "}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> int_to_mini_roman(19) == 'xix'\n  >>> int_to_mini_roman(152) == 'clii'\n  >>> int_to_mini_roman(426) == 'cdxxvi'\n  */\nconst int_to_mini_roman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "int_to_mini_roman", "gc": "<|endoftext|>/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> int_to_mini_roman(19) == 'xix'\n  >>> int_to_mini_roman(152) == 'clii'\n  >>> int_to_mini_roman(426) == 'cdxxvi'\n  */\nconst int_to_mini_roman = (number) => {\n  const roman = { 0: '', 1: '', 2: '', 3: '', 4: '', 5: '', 6: '', 7: '', 8: '', 9: '', 10: '', 11: '', 12: '', 13: '', 14: '', 15: '', 16: '', 17: '', 18: '', 19: '', 20: '', 21: '', 22: '', 23: '', 24: '', 25: '', 26: '', 27: '', 28: '', 29: '', 30: '', 31: '', 32: '', 33: '', 34: '', 35: '', 36: '', 37: '', 38: '', 39: '', 40: '', 41: '', 42: '', 43: '', 44: '', 45: '', 46: '', 47: '', 48: '', 49: '', 50: '', 51: '', 52: '', 53: '', 54: '', 55: '', 56: '', 57: '', 58: '', 59: '', 60: '', 61: '', 62: '', 63: '', 64: '', 65: '', 66: '', 67: '', 68: '', 69: '', 70: '', 71: '', 72: '', 73: '', 74: '', 75: '', 76: '', 77: '', 78: '', 79: '', 80: '', 81: '', 82: '', 83: '', 84: '', 85: '', 86: '', 87: '', 88: '', 89: '', 90: '', 91: '', 92: '', 93: '', 94: '', 95: '', 96: '', 97: '', 98: '', 99: '', 100: '', 101: '', 102: '', 103: '', 104: '', 105: '', 106: '', 107: '', 108: '', 109: '', 110: '', 111: '', 112: '', 113: '', 114: '', 115: '', 116: '', 117: '', 118: '', 119: '', 120: '', 121: '', 122: '', 123: '', 124: '', 125: '', 126: '', 127: '', 128: '', 129: '', 130: '', 131: '', 132: '', 133: '', 134: '', 135: '', 136: '', 137: '', 138: '', 139: '', 140: '', 141: '', 142: '', 143: '', 144: '', 145: '', 146: '', 147: '', 148: '', 149: '', 150: '', 151: '', 152: '', 153: '', 154: '', 155: '', 156: '', 157: '', 158: '', 159: '', 160: '', 161: '', 162: '', 163: '', 164: '', 165: '', 166: '', 167: '', 168: '', 169: '', 170: '', 171: '', 172: '', 173: '', 174: '', 175: '', 176: '', 177: '', 178: '', 179: '', 180: '', 181: '', 182: '', 183: '', 184: '', 185: '', 186: '', 187: '', 188: '', 189: '', 190: '', 191: '', 192: '', 193: '', 194: '', 195: '', 196: '', 197: '', 198: '', 199: '', 200: '', 201: '', 202: '', 203: '', 204: '', 205: '', 206: '', 207: '', 208: '', 209: '', 210: '', 211: '', 212: '', 213: '', 214: '', 215: '', 216: '', 217: '', 218: '', 219: '', 220: '', 221: '', 222: '', 223: '', 224: '', 225: '', 226: '', 227: '', 228: '', 229: '', 230: '', 231: '', 232: '', 233: '', 234: '', 235: '', 236: '', 237: '', 238: '', 239: '', 240: '', 241: '', 242: '', 243: '', 244: '', 245: '', 246: '', 247: '', 248: '', 249: '', 250: '', 251: '', 252: '', 253: '', 254: '', 255: '', 256: '', 257: '', 258: '', 259: '', 260: '', 261: '', 262: '', 263: '', 264: '', 265: '', 266: '', 267: '', 268: '', 269: '', 270: '', 271: '', 272: '', 273: '', 274: '', 275: '', 276: '', 277: '', 278: '', 279: '', 280: '', 281: '', 282: '', 283: '', 284: '', 285: '', 286: '', 287: '', 288: '', 289: '', 290: '', 291: '', 292: '', 293: '', 294: '', 295: '', 296: '', 297: '', 298: '', 299: '', 300: '', 301: '', 302: '', 303: '', 304: '', 305: '', 306: '', 307: '', 308: '', 309: '', 310: '', 311: '', 312: '', 313: '', 314: '', 315: '', 316: '', 317: '', 318: '', 319: '', 320: '', 321: '', 322: '', 323: '', 324: '', 325: '', 326: '', 327: '', 328: '', 329: '', 330: '', 331: '', 332: '', 333: '', 334: '', 335: '', 336: '', 337: '', 338: '', 339: '', 340: '', 341: '', 342: '', 343: '', 344: '', 345: '', 346: '', 347: '', 348: '', 349: '', 350: '', 351: '', 352: '', 353: '', 354: '', 355: '', 356: '', 357: '', 358: '', 359: '', 360: '', 361: '', 362: '', 363: '', 364: '', 365: '', 366: '', 367: '', 368: '', 369: '', 370: '', 371: '', 372: '', 373: '', 374: '', 375: '', 376: '', 377: '', 378: '', 379: '', 380: '', 381: '', 382: '', 383: '', 384: '', 385: '', 386: '', 387: '', 388: '', 389: '', 390: '', 391: '', 392: '', 393: '', 394: '', 395: '', 396: '', 397: '', 398: '', 399: '', 400: '', 401: '', 402: '', 403: '', 404: '', 405: '', 406: '', 407: '', 408: '', 409: '', 410: '', 411: '', 412: '', 413: '', 414: '', 415: '', 416: '', 417: '', 418: '', 419: '', 420: '', 421: '', 422: '', 423: '', 424: '', 425: '', 426: '', 427: '', 428: '', 429: '', 430: '', 431: '', 432: '', 433: '', 434: '', 435: '', 436: '', 437: '', 438: '', 439: '', 440: '', 441: '', 442: '', 443: '', 444"}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  right_angle_triangle(3, 4, 5) == true\n  right_angle_triangle(1, 2, 3) == false\n  */\nconst right_angle_triangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "right_angle_triangle", "gc": "<|endoftext|>/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  right_angle_triangle(3, 4, 5) == true\n  right_angle_triangle(1, 2, 3) == false\n  */\nconst right_angle_triangle = (a, b, c) => {\n  const ab = a - b;\n  const ac = a - c;\n  const bc = b - c;\n  return ab * ac - bc * bc;\n};\n\n/*\n Given the lengths of the three sides of a square. Return true if the three\n  sides form a square, false otherwise.\n  A square is a square in which one side is length 2 or less and one side is\n  length 1 or less.\n  Example:\n  square_triangle(3, 4, 5) == true\n  square_triangle(1, 2, 3) == false\n  */\nconst square_triangle = (a, b, c) => {\n  const ab = a - b;\n  const ac = a - c;\n  const bc = b - c;\n  return ab * ac - bc * bc;\n};\n\n/*\n Given the lengths of the three sides of a pentagon. Return true if the three\n  sides form a pentagon, false otherwise.\n  A pentagon is a pentagon whose three sides are length 2 or less and one\n  side is length 1 or less.\n  Example:\n  pentagon_triangle(3, 4, 5) == true\n  pentagon_triangle(1, 2, 3) == false\n  */\nconst pentagon_triangle = (a, b, c) => {\n  const ab = a - b;\n  const ac = a - c;\n  const bc = b - c;\n  return ab * ac - bc * bc;\n};\n\n/*\n Given the lengths of the three sides of a hexagon. Return true if the three\n  sides form a hexagon, false otherwise.\n  A hexagon is a hexagon whose three sides are length 2 or less and one\n  side is length 1 or less.\n  Example:\n  hexagon_triangle(3, 4, 5) == true\n  hexagon_triangle(1, 2, 3) == false\n  */\nconst hexagon_triangle = (a, b, c) => {\n  const ab = a - b;\n  const ac = a - c;\n  const bc = b - c;\n  return ab * ac - bc * bc;\n};\n\n/*\n Given the lengths of the three sides of a heptagon. Return true if the three\n  sides form a heptagon, false otherwise.\n  A heptagon is a heptagon whose three sides are length 2 or less and one\n  side is length 1 or less.\n  Example:\n  heptagon_triangle(3, 4, 5) == true\n  heptagon_triangle(1, 2, 3) == false\n  */\nconst heptagon_triangle = (a, b, c) => {\n  const ab = a - b;\n  const ac = a - c;\n  const bc = b - c;\n  return ab * ac - bc * bc;\n};\n\n/*\n Given the lengths of the three sides of a decagon. Return true if the three\n  sides form a decagon, false otherwise.\n  A decagon is a decagon whose three sides are length 2 or less and one\n  side is length 1 or less.\n  Example:\n  decagon_triangle(3, 4, 5) == true\n  decagon_triangle(1, 2, 3) == false\n  */\nconst decagon_triangle = (a, b, c) => {\n  const ab = a - b;\n  const ac = a - c;\n  const bc = b - c;\n  return ab * ac - bc * bc;\n};\n\n/*\n Given the lengths of the three sides of a helix. Return true if the three\n  sides form a helix, false otherwise.\n  A helix is a helix whose three sides are length 2 or less and one side is\n  length 1 or less.\n  Example:\n  helix_triangle(3, 4, 5) == true\n  helix_triangle(1, 2, 3) == false\n  */\nconst helix_triangle = (a, b, c) => {\n  const ab = a - b;\n  const ac = a - c;\n  const bc = b - c;\n  return ab * ac - bc * bc;\n};\n\n/*\n Given the lengths of the three sides of a octagon. Return true if the three\n  sides form a octagon, false otherwise.\n  A octagon is a octagon whose three sides are length 2 or less and one\n  side is length 1 or less.\n  Example:\n  octagon_triangle(3, 4, 5) == true\n  octagon_triangle(1, 2, 3) == false\n  */\nconst octagon_triangle = (a, b, c) => {\n  const ab = a - b;\n  const ac = a - c;\n  const bc = b - c;\n  return ab * ac - bc * bc;\n};\n\n/*\n Given the lengths of the three sides of a dodecagon. Return true if the three\n  sides form a dodecagon, false otherwise.\n  A dodecagon is a dodecagon whose three sides are length 2 or less and one\n  side is length 1 or less.\n  Example:\n  dodecagon_triangle(3, 4, 5) == true\n  dodecagon_triangle(1, 2, 3) == false\n  */\nconst dodecagon_triangle = (a, b, c) => {\n  const ab = a - b;\n  const ac = a - c;\n  const bc = b - c;\n  return ab * ac - bc * bc;\n};\n\n/*\n Given the lengths of the three sides of a hexadecagon. Return true if the three\n  sides form a hexadecagon, false otherwise.\n  A hexadecagon is a hexadecagon whose three sides are length 2 or less and one\n  side is length 1 or less.\n  Example:\n  hexadecagon_triangle(3, 4, 5) == true\n  hexadecagon_triangle(1, 2, 3) == false\n  */\nconst hexadecagon_triangle = (a, b, c) => {\n  const ab = a - b;\n  const ac = a - c;\n  const bc = b - c;\n  return ab * ac - bc * bc;\n};\n\n/*\n Given the lengths of the three sides of a helix. Return true if the three\n  sides form a helix, false otherwise.\n  A helix is a helix whose three sides are length 2 or less and one side is\n  length 1 or less.\n  Example:\n  helix_triangle(3, 4, 5) == true\n  helix_triangle(1, 2, 3) == false\n  */\nconst helix_triangle = (a, b, c) => {\n  const ab = a - b;\n  const ac = a - c;\n  const bc = b - c;\n  return ab * ac - bc * bc;\n};\n\n/*\n Given the lengths of the three sides of a decagon. Return true if the three\n  sides form a decagon, false otherwise.\n  A decagon is a decagon whose three sides are length 2 or less and one\n  side is length 1 or less.\n  Example:\n  decagon_triangle(3, 4, 5) == true\n  decagon_triangle(1, 2, 3) == false\n  */\nconst decagon_triangle = (a, b, c) => {\n  const ab = a - b;\n  const ac = a - c;\n  const bc = b - c;\n  return ab * ac - bc * bc;\n};\n\n/*\n Given the lengths of the three sides of a helix. Return true if the three\n  sides form a helix, false otherwise.\n  A helix is a helix whose three sides are "}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  find_max([\"name\", \"of\", \"string\"]) === \"string\"\n  find_max([\"name\", \"enam\", \"game\"]) === \"enam\"\n  find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst find_max = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "find_max", "gc": "<|endoftext|>/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  find_max([\"name\", \"of\", \"string\"]) === \"string\"\n  find_max([\"name\", \"enam\", \"game\"]) === \"enam\"\n  find_max([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst find_max = (words) => {\n  let max = 0;\n  let maxWord = \"\";\n  let maxChar = 0;\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    let chars = word.length;\n    if (chars > maxChar) {\n      maxChar = chars;\n      maxWord = word;\n    }\n  }\n  return maxWord;\n};\n\n/*Write a function that accepts a string and returns a list of all words in\n  the string.\n\n  words(\"Hello world\") => [\"Hello\", \"world\"]\n  words(\"Hello world!\") => [\"Hello\", \"world\", \"!\"]\n  words(\"Hello world!\") => [\"Hello\", \"world\", \"!\"]\n  words(\"Hello world!\") => [\"Hello\", \"world\", \"!\"]\n  words(\"Hello world!\") => [\"Hello\", \"world\", \"!\"]\n  words(\"Hello world!\") => [\"Hello\", \"world\", \"!\"]\n  words(\"Hello world!\") => [\"Hello\", \"world\", \"!\"]\n  words(\"Hello world!\") => [\"Hello\", \"world\", \"!\"]\n  words(\"Hello world!\") => [\"Hello\", \"world\", \"!\"]\n  words(\"Hello world!\") => [\"Hello\", \"world\", \"!\"]\n  words(\"Hello world!\") => [\"Hello\", \"world\", \"!\"]\n  words(\"Hello world!\") => [\"Hello\", \"world\", \"!\"]\n  words(\"Hello world!\") => [\"Hello\", \"world\", \"!\"]\n  words(\"Hello world!\") => [\"Hello\", \"world\", \"!\"]\n  words(\"Hello world!\") => [\"Hello\", \"world\", \"!\"]\n  words(\"Hello world!\") => [\"Hello\", \"world\", \"!\"]\n  words(\"Hello world!\") => [\"Hello\", \"world\", \"!\"]\n  words(\"Hello world!\") => [\"Hello\", \"world\", \"!\"]\n  words(\"Hello world!\") => [\"Hello\", \"world\", \"!\"]\n  words(\"Hello world!\") => [\"Hello\", \"world\", \"!\"]\n  words(\"Hello world!\") => [\"Hello\", \"world\", \"!\"]\n  words(\"Hello world!\") => [\"Hello\", \"world\", \"!\"]\n  words(\"Hello world!\") => [\"Hello\", \"world\", \"!\"]\n  words(\"Hello world!\") => [\"Hello\", \"world\", \"!\"]\n  words(\"Hello world!\") => [\"Hello\", \"world\", \"!\"]\n  words(\"Hello world!\") => [\"Hello\", \"world\", \"!\"]\n  words(\"Hello world!\") => [\"Hello\", \"world\", \"!\"]\n  words(\"Hello world!\") => [\"Hello\", \"world\", \"!\"]\n  words(\"Hello world!\") => [\"Hello\", \"world\", \"!\"]\n  words(\"Hello world!\") => [\"Hello\", \"world\", \"!\"]\n  words(\"Hello world!\") => [\"Hello\", \"world\", \"!\"]\n  words(\"Hello world!\") => [\"Hello\", \"world\", \"!\"]\n  words(\"Hello world!\") => [\"Hello\", \"world\", \"!\"]\n  words(\"Hello world!\") => [\"Hello\", \"world\", \"!\"]\n  words(\"Hello world!\") => [\"Hello\", \"world\", \"!\"]\n  words(\"Hello world!\") => [\"Hello\", \"world\", \"!\"]\n  words(\"Hello world!\") => [\"Hello\", \"world\", \"!\"]\n  words(\"Hello world!\") => [\"Hello\", \"world\", \"!\"]\n  words(\"Hello world!\") => [\"Hello\", \"world\", \"!\"]\n  words(\"Hello world!\") => [\"Hello\", \"world\", \"!\"]\n  words(\"Hello world!\") => [\"Hello\", \"world\", \"!\"]\n  words(\"Hello world!\") => [\"Hello\", \"world\", \"!\"]\n  words(\"Hello world!\") => [\"Hello\", \"world\", \"!\"]\n  words(\"Hello world!\") => [\"Hello\", \"world\", \"!\"]\n  words(\"Hello world!\") => [\"Hello\", \"world\", \"!\"]\n  words(\"Hello world!\") => [\"Hello\", \"world\", \"!\"]\n  words(\"Hello world!\") => [\"Hello\", \"world\", \"!\"]\n  words(\"Hello world!\") => [\"Hello\", \"world\", \"!\"]\n  words(\"Hello world!\") => [\"Hello\", \"world\", \"!\"]\n  words(\"Hello world!\") => [\"Hello\", \"world\", \"!\"]\n  words(\"Hello world!\") => [\"Hello\", \"world\", \"!\"]\n  words(\"Hello world!\") => [\"Hello\", \"world\", \"!\"]\n  words(\"Hello world!\") => [\"Hello\", \"world\", \"!\"]\n  words(\"Hello world!\") => [\"Hello\", \"world\", \"!\"]\n  words(\"Hello world!\") => [\"Hello\", \"world\", \"!\"]\n  words(\"Hello world!\") => [\"Hello\", \"world\", \"!\"]\n  words(\"Hello world!\") => [\"Hello\", \"world\", \"!\"]\n  words(\"Hello world!\") => [\"Hello\", \"world\", \"!\"]\n  words(\"Hello world!\") => [\"Hello\", \"world\", \"!\"]\n  words(\"Hello world!\") => [\"Hello\", \"world\", \"!\"]\n  words(\"Hello world!\") => [\"Hello\", \"world\", \"!\"]\n  words(\"Hello world!\") => [\"Hello\", \"world\", \"!\"]\n  words(\"Hello world!\") => [\"Hello\", \"world\", \"!\"]\n  words(\"Hello world!\") => [\"Hello\", \"world\", \"!\"]\n  words(\"Hello world!\") => [\"Hello\", \"world\", \"!\"]\n  words(\"Hello world!\") => [\"Hello\", \"world\", \"!\"]\n  words(\"Hello world!\") => [\"Hello\", \"world\", \"!\"]\n  words(\"Hello world!\") => [\"Hello\", \"world\", \"!\"]\n  words(\"Hello world!\") => [\"Hello\", \"world\", \"!\"]\n  words(\"Hello world!\") => [\"Hello\", \"world\", \"!\"]\n  words(\"Hello world!\") => [\"Hello\", \"world\", \"!\"]\n  words(\"Hello world!\") => [\"Hello\", \"world\", \"!\"]\n  words(\"Hello world!\") => [\"Hello\", \"world\", \"!\"]\n  words(\"Hello world!\") => [\"Hello\", \"world\", \"!\"]\n  words(\"Hello world!\") => [\"Hello\", \"world\", \"!\"]\n  words(\"Hello world!\") => [\"Hello\", \"world\", \"!\"]\n  words(\"Hello world!\") => [\"Hello\", \"world\", \"!\"]\n  words(\"Hello world!\") => [\"Hello\", \"world\", \"!\"]\n  words(\"Hello world!\") => [\"Hello\", \"world\", \"!\"]\n  words(\"Hello world!\") => [\"Hello\", \"world\", \"!\"]\n  words(\"Hello world!\") => [\"Hello\", \"world\", \"!\"]\n  words(\"Hello world!\") => [\"Hello\", \"world\", \"!\"]\n  words(\"Hello world!\") => [\"Hello\", \"world\", \"!\"]\n  words(\"Hello world!\") => [\"Hello\", \"world\", \"!\"]\n  words(\"Hello world!\") => "}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "gc": "<|endoftext|>/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  const carrots = Math.floor(number / need);\n  const remainingCarrots = number % need;\n  const remainingCarrots = remainingCarrots < 0? remainingCarrots + need : remainingCarrots;\n  const remainingCarrots = remainingCarrots < 0? remainingCarrots + need : remainingCarrots;\n  const carrots = carrots < 0? carrots + need : carrots;\n  const carrots = carrots < 0? carrots + need : carrots;\n  const carrots = carrots < 0? carrots + need : carrots;\n  const carrots = carrots < 0? carrots + need : carrots;\n  const carrots = carrots < 0? carrots + need : carrots;\n  const carrots = carrots < 0? carrots + need : carrots;\n  const carrots = carrots < 0? carrots + need : carrots;\n  const carrots = carrots < 0? carrots + need : carrots;\n  const carrots = carrots < 0? carrots + need : carrots;\n  const carrots = carrots < 0? carrots + need : carrots;\n  const carrots = carrots < 0? carrots + need : carrots;\n  const carrots = carrots < 0? carrots + need : carrots;\n  const carrots = carrots < 0? carrots + need : carrots;\n  const carrots = carrots < 0? carrots + need : carrots;\n  const carrots = carrots < 0? carrots + need : carrots;\n  const carrots = carrots < 0? carrots + need : carrots;\n  const carrots = carrots < 0? carrots + need : carrots;\n  const carrots = carrots < 0? carrots + need : carrots;\n  const carrots = carrots < 0? carrots + need : carrots;\n  const carrots = carrots < 0? carrots + need : carrots;\n  const carrots = carrots < 0? carrots + need : carrots;\n  const carrots = carrots < 0? carrots + need : carrots;\n  const carrots = carrots < 0? carrots + need : carrots;\n  const carrots = carrots < 0? carrots + need : carrots;\n  const carrots = carrots < 0? carrots + need : carrots;\n  const carrots = carrots < 0? carrots + need : carrots;\n  const carrots = carrots < 0? carrots + need : carrots;\n  const carrots = carrots < 0? carrots + need : carrots;\n  const carrots = carrots < 0? carrots + need : carrots;\n  const carrots = carrots < 0? carrots + need : carrots;\n  const carrots = carrots < 0? carrots + need : carrots;\n  const carrots = carrots < 0? carrots + need : carrots;\n  const carrots = carrots < 0? carrots + need : carrots;\n  const carrots = carrots < 0? carrots + need : carrots;\n  const carrots = carrots < 0? carrots + need : carrots;\n  const carrots = carrots < 0? carrots + need : carrots;\n  const carrots = carrots < 0? carrots + need : carrots;\n  const carrots = carrots < 0? carrots + need : carrots;\n  const carrots = carrots < 0? carrots + need : carrots;\n  const carrots = carrots < 0? carrots + need : carrots;\n  const carrots = carrots < 0? carrots + need : carrots;\n  const carrots = carrots < 0? carrots + need : carrots;\n  const carrots = carrots < 0? carrots + need : carrots;\n  const carrots = carrots < 0? carrots + need : carrots;\n  const carrots = carrots < 0? carrots + need : carrots;\n  const carrots = carrots < 0? carrots + need : carrots;\n  const carrots = carrots < 0? carrots + need : carrots;\n  const carrots = carrots < 0? carrots + need : carrots;\n  const carrots = carrots < 0? carrots + need : carrots;\n  const carrots = carrots < 0? carrots + need : carrots;\n  const carrots = carrots < 0? carrots + need : carrots;\n  const carrots = carrots < 0? carrots + need : carrots;\n  const carrots = carrots < 0? carrots + need : carrots;\n  const carrots = carrots < 0? carrots + need : carrots;\n  const carrots = carrots < 0? carrots + need : carrots;\n  const carrots = carrots < 0? carrots + need : carrots;\n  const carrots = carrots < 0? carrots + need : carrots;\n  const carrots = carrots < 0? carrots + need : carrots;\n  const carrots = carrots < 0? carrots + need : carrots;\n  const carrots = carrots < 0? carrots + need : carrots;\n  const carrots = carrots < 0? carrots + need : carrots;\n  const carrots = carrots < 0? carrots + need : carrots;\n  const carrots = carrots < 0? carrots + need : carrots;\n  const carrots = carrots < 0? carrots + need : carrots;\n  const carrots = carrots < 0? carrots + need : carrots;\n  const carrots = carrots < 0? carrots + need : carrots;\n  const carrots = carrots < 0? carrots + need : carrots;\n  const carrots = carrots < 0? carrots + need : carrots;\n  const carrots = carrots < 0? carrots + need : carrots;\n  const carrots = carrots < 0? carrots + need : carrots;\n  const carrots = carrots < 0? carrots + need : carrots;\n  const carrots = carrots < 0? carrots + need : carrots;\n  const carrots = carrots < 0? carrots + need : car"}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst do_algebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "do_algebra", "gc": "<|endoftext|>/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst do_algebra = (operator, operand) => {\n  let result = 0;\n  let operator_count = 0;\n  let operands_count = 0;\n  for (let i = 0; i < operator.length; i++) {\n    if (operator[i] === '+') {\n      result += operand[operands_count++];\n    } else if (operator[i] === '-') {\n      result -= operand[operands_count++];\n    } else if (operator[i] === '*') {\n      result *= operand[operands_count++];\n    } else if (operator[i] === '/') {\n      result /= operand[operands_count++];\n    } else if (operator[i] === '**') {\n      result **= operand[operands_count++];\n    }\n  }\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst do_algebra_multi = (operator, operand) => {\n  let result = 0;\n  let operator_count = 0;\n  let operands_count = 0;\n  for (let i = 0; i < operator.length; i++) {\n    if (operator[i] === '+') {\n      result += operand[operands_count++];\n    } else if (operator[i] === '-') {\n      result -= operand[operands_count++];\n    } else if (operator[i] === '*') {\n      result *= operand[operands_count++];\n    } else if (operator[i] === '/') {\n      result /= operand[operands_count++];\n    } else if (operator[i] === '**') {\n      result *= operand[operands_count++];\n    }\n  }\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst do_algebra_div = (operator, operand) => {\n  let result = 0;\n  let operator_count = 0;\n  let operands_count = 0;\n  for (let i = 0; i < operator.length; i++) {\n    if (operator[i] === '+') {\n      result += operand[operands_count++];\n    } else if (operator[i] === '-') {\n      result -= operand[operands_count++];\n    } else if (operator[i] === '*') {\n      result *= operand[operands_count++];\n    } else if (operator[i] === '/') {\n      result /= operand[operands_count++];\n    } else if (operator[i] === '**') {\n      result /= operand[operands_count++];\n    }\n  }\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst do_algebra_pow = (operator, operand) => {\n  let result = 0;\n  let operator_count = 0;\n  let operands_count = 0;\n  for (let i = 0; i < operator.length; i++) {\n    if (operator[i] === '+') {\n      result += operand[operands_count++];\n    } else if (operator[i] === '-') {\n      result -= operand[operands_count++];\n    } else if (operator[i] === '*') {\n      result *= operand[operands_count++];\n    } else if (operator[i] === '/') {\n      result /= operand[operands_count++];\n    } else if (operator[i] === '**') {\n      result *= operand[operands_count++];\n    }\n  }\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst do_algebra_exp = (operator, operand) => {\n  let result = 0;\n  let operator_count = 0;\n  let operands_count = 0;\n  for (let i = 0; i < operator.length; i++) {\n    if (operator[i] === '+') {\n      result += operand[operands_count++];\n    } else if (operator[i] === '-') {\n      result -= operand[operands_count++];\n    } else if (operator[i] === '*') {\n      result *= operand[operands_count++];\n    } else if (operator[i] === '/') {\n      result /= operand[operands_count++];\n    } else if (operator[i] === '**') {\n      result *= operand[operands_count++];\n    }\n  }\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator "}
{"task_id": "JavaScript/161", "prompt": "/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "gc": "<|endoftext|>/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let newStr = \"\";\n  let len = s.length;\n  let i = 0;\n  let j = 0;\n  let temp;\n  let temp2;\n  let temp3;\n  let temp4;\n  let temp5;\n  let temp6;\n  let temp7;\n  let temp8;\n  let temp9;\n  let temp10;\n  let temp11;\n  let temp12;\n  let temp13;\n  let temp14;\n  let temp15;\n  let temp16;\n  let temp17;\n  let temp18;\n  let temp19;\n  let temp20;\n  let temp21;\n  let temp22;\n  let temp23;\n  let temp24;\n  let temp25;\n  let temp26;\n  let temp27;\n  let temp28;\n  let temp29;\n  let temp30;\n  let temp31;\n  let temp32;\n  let temp33;\n  let temp34;\n  let temp35;\n  let temp36;\n  let temp37;\n  let temp38;\n  let temp39;\n  let temp40;\n  let temp41;\n  let temp42;\n  let temp43;\n  let temp44;\n  let temp45;\n  let temp46;\n  let temp47;\n  let temp48;\n  let temp49;\n  let temp50;\n  let temp51;\n  let temp52;\n  let temp53;\n  let temp54;\n  let temp55;\n  let temp56;\n  let temp57;\n  let temp58;\n  let temp59;\n  let temp60;\n  let temp61;\n  let temp62;\n  let temp63;\n  let temp64;\n  let temp65;\n  let temp66;\n  let temp67;\n  let temp68;\n  let temp69;\n  let temp70;\n  let temp71;\n  let temp72;\n  let temp73;\n  let temp74;\n  let temp75;\n  let temp76;\n  let temp77;\n  let temp78;\n  let temp79;\n  let temp80;\n  let temp81;\n  let temp82;\n  let temp83;\n  let temp84;\n  let temp85;\n  let temp86;\n  let temp87;\n  let temp88;\n  let temp89;\n  let temp90;\n  let temp91;\n  let temp92;\n  let temp93;\n  let temp94;\n  let temp95;\n  let temp96;\n  let temp97;\n  let temp98;\n  let temp99;\n  let temp100;\n  let temp101;\n  let temp102;\n  let temp103;\n  let temp104;\n  let temp105;\n  let temp106;\n  let temp107;\n  let temp108;\n  let temp109;\n  let temp110;\n  let temp111;\n  let temp112;\n  let temp113;\n  let temp114;\n  let temp115;\n  let temp116;\n  let temp117;\n  let temp118;\n  let temp119;\n  let temp120;\n  let temp121;\n  let temp122;\n  let temp123;\n  let temp124;\n  let temp125;\n  let temp126;\n  let temp127;\n  let temp128;\n  let temp129;\n  let temp130;\n  let temp131;\n  let temp132;\n  let temp133;\n  let temp134;\n  let temp135;\n  let temp136;\n  let temp137;\n  let temp138;\n  let temp139;\n  let temp140;\n  let temp141;\n  let temp142;\n  let temp143;\n  let temp144;\n  let temp145;\n  let temp146;\n  let temp147;\n  let temp148;\n  let temp149;\n  let temp150;\n  let temp151;\n  let temp152;\n  let temp153;\n  let temp154;\n  let temp155;\n  let temp156;\n  let temp157;\n  let temp158;\n  let temp159;\n  let temp160;\n  let temp161;\n  let temp162;\n  let temp163;\n  let temp164;\n  let temp165;\n  let temp166;\n  let temp167;\n  let temp168;\n  let temp169;\n  let temp170;\n  let temp171;\n  let temp172;\n  let temp173;\n  let temp174;\n  let temp175;\n  let temp176;\n  let temp177;\n  let temp178;\n  let temp179;\n  let temp180;\n  let temp181;\n  let temp182;\n  let temp183;\n  let temp184;\n  let temp185;\n  let temp186;\n  let temp187;\n  let temp188;\n  let temp189;\n  let temp190;\n  let temp191;\n  let temp192;\n  let temp193;\n  let temp194;\n  let temp195;\n  let temp196;\n  let temp197;\n  let temp198;\n  let temp199;\n  let temp200;\n  let temp201;\n  let temp202;\n  let temp203;\n  let temp204;\n  let temp205;\n  let temp206;\n  let temp207;\n  let temp208;\n  let temp209;\n  let temp210;\n  let temp211;\n  let temp212;\n  let temp213;\n  let temp214;\n  let temp215;\n  let temp216;\n  let temp217;\n  let temp218;\n  let temp219;\n  let temp220;\n  let temp221;\n  let temp222;\n  let temp223;\n  let temp224;\n  let temp225;\n  let temp226;\n  let temp227;\n  let temp228;\n  let temp229;\n  let temp230;\n  let temp231;\n  let temp232;\n  let temp233;\n  let temp234;\n  let temp235;\n  let temp236;\n  let temp237;\n  let temp238;\n  let temp239;\n  let temp240;\n  let temp241;\n  let temp242;\n  let temp243;\n  let temp244;\n  let temp245;\n  let temp246;\n  let temp247;\n  let temp248;\n  let temp249;\n  let temp250;\n  let temp251;\n  let temp252;\n  let temp253;\n  let temp254;\n  let temp255;\n  let temp256;\n  let temp257;\n  let temp258;\n  let temp259;\n  let temp260;\n  let temp261;\n  let temp262;\n  let temp263;\n  let temp264;\n  let temp265;\n  let temp266;\n  let temp267;\n  let temp268;\n  let temp269;\n  let temp270;\n  let temp271;\n  let temp272;\n  let temp273;\n  let temp274;\n  let temp275;\n  let temp276;\n  let temp277;\n  let temp278;\n  let temp279;\n  let temp280;\n  let temp281;\n  let temp282;\n  let temp283;\n  let temp284;\n  let temp285;\n  let temp286;\n  let temp287;\n  let temp288;\n  let temp289;\n  let temp"}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst string_to_md5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "string_to_md5", "gc": "<|endoftext|>/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst string_to_md5 = (text) => {\n  if (!text) {\n    return null;\n  }\n\n  const md5 = new MD5();\n  md5.update(text);\n  return md5.digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst string_to_sha1 = (text) => {\n  if (!text) {\n    return null;\n  }\n\n  const sha1 = new SHA1();\n  sha1.update(text);\n  return sha1.digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> string_to_sha1('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst string_to_sha256 = (text) => {\n  if (!text) {\n    return null;\n  }\n\n  const sha256 = new SHA256();\n  sha256.update(text);\n  return sha256.digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> string_to_sha256('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst string_to_sha512 = (text) => {\n  if (!text) {\n    return null;\n  }\n\n  const sha512 = new SHA512();\n  sha512.update(text);\n  return sha512.digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> string_to_sha512('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst string_to_sha3_224 = (text) => {\n  if (!text) {\n    return null;\n  }\n\n  const sha3_224 = new SHA3_224();\n  sha3_224.update(text);\n  return sha3_224.digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> string_to_sha3_224('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst string_to_sha3_256 = (text) => {\n  if (!text) {\n    return null;\n  }\n\n  const sha3_256 = new SHA3_256();\n  sha3_256.update(text);\n  return sha3_256.digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> string_to_sha3_256('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst string_to_sha3_384 = (text) => {\n  if (!text) {\n    return null;\n  }\n\n  const sha3_384 = new SHA3_384();\n  sha3_384.update(text);\n  return sha3_384.digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> string_to_sha3_384('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst string_to_sha3_512 = (text) => {\n  if (!text) {\n    return null;\n  }\n\n  const sha3_512 = new SHA3_512();\n  sha3_512.update(text);\n  return sha3_512.digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> string_to_sha3_512('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst string_to_sha3_224_224 = (text) => {\n  if (!text) {\n    return null;\n  }\n\n  const sha3_224_224 = new SHA3_224_224();\n  sha3_224_224.update(text);\n  return sha3_224_224.digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> string_to_sha3_224_224('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst string_to_sha3_224_256 = (text) => {\n  if (!text) {\n    return null;\n  }\n\n  const sha3_224_256 = new SHA3_224_256();\n  sha3_224_256.update(text);\n  return sha3_224_256.digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> string_to_sha3_224_256('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst string_to_sha3_224_384 = (text) => {\n  if (!text) {\n    return null;\n  }\n\n  const sha3_224_384 = new SHA3_224_384();\n  sha3_224_384.update(text);\n  return sha3_224_384.digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> string_to_sha3_224_384('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst string_to_sha3_224_512 = (text) => {\n  if (!text) {\n    return null;\n  }\n\n  const sha3_224_512 = new SHA3_224_512();\n  sha3_224_512.update(text);\n  return sha3_224_512.digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> string_to_sha3_224_512('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst string_to_sha3_256_224 = (text) => {\n  if (!text) {\n    return null;\n  }\n\n  const sha3_256_224 = new SHA3_256_224();\n  sha3_256_224.update(text);\n  return sha3_256_224.digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> string_to_sha3_256_224('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst string_to_sha3_256_256 = (text) => {\n  if (!text) {\n    return null;"}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  generate_integers(2, 8) => [2, 4, 6, 8]\n  generate_integers(8, 2) => [2, 4, 6, 8]\n  generate_integers(10, 14) => []\n  */\nconst generate_integers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generate_integers", "gc": "<|endoftext|>/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  generate_integers(2, 8) => [2, 4, 6, 8]\n  generate_integers(8, 2) => [2, 4, 6, 8]\n  generate_integers(10, 14) => []\n  */\nconst generate_integers = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\n/**\n * Given a string, return the first letter of the string capitalized.\n * If the string does not begin with a letter, return an empty string.\n */\nconst capitalizeFirstLetter = str => {\n  if (str === '') {\n    return '';\n  }\n  return str.charAt(0).toUpperCase() + str.slice(1);\n};\n\n/**\n * Given a string, return the first letter of the string capitalized.\n * If the string does not begin with a letter, return an empty string.\n */\nconst capitalizeFirstLetterWithSpace = str => {\n  if (str === '') {\n    return '';\n  }\n  return str.charAt(0).toUpperCase() + str.slice(1).toLowerCase();\n};\n\n/**\n * Given a string, return the first letter of the string capitalized.\n * If the string does not begin with a letter, return an empty string.\n */\nconst capitalizeFirstLetterWithUnderscore = str => {\n  if (str === '') {\n    return '';\n  }\n  return str.charAt(0).toUpperCase() + str.slice(1).toLowerCase().replace(/_/g,'');\n};\n\n/**\n * Given a string, return the first letter of the string capitalized.\n * If the string does not begin with a letter, return an empty string.\n */\nconst capitalizeFirstLetterWithUnderscoreAndSpace = str => {\n  if (str === '') {\n    return '';\n  }\n  return str.charAt(0).toUpperCase() + str.slice(1).toLowerCase().replace(/_/g,'').toUpperCase();\n};\n\n/**\n * Given a string, return the first letter of the string capitalized.\n * If the string does not begin with a letter, return an empty string.\n */\nconst capitalizeFirstLetterWithUnderscoreAndSpaceWithSpace = str => {\n  if (str === '') {\n    return '';\n  }\n  return str.charAt(0).toUpperCase() + str.slice(1).toLowerCase().replace(/_/g,'').toUpperCase().replace(/ /g,'');\n};\n\n/**\n * Given a string, return the first letter of the string capitalized.\n * If the string does not begin with a letter, return an empty string.\n */\nconst capitalizeFirstLetterWithUnderscoreAndSpaceWithUnderscore = str => {\n  if (str === '') {\n    return '';\n  }\n  return str.charAt(0).toUpperCase() + str.slice(1).toLowerCase().replace(/_/g,'').toUpperCase().replace(/ /g,'').toUpperCase();\n};\n\n/**\n * Given a string, return the first letter of the string capitalized.\n * If the string does not begin with a letter, return an empty string.\n */\nconst capitalizeFirstLetterWithUnderscoreAndSpaceWithUnderscoreAndSpace = str => {\n  if (str === '') {\n    return '';\n  }\n  return str.charAt(0).toUpperCase() + str.slice(1).toLowerCase().replace(/_/g,'').toUpperCase().replace(/ /g,'').toUpperCase().replace(/ /g,'');\n};\n\n/**\n * Given a string, return the first letter of the string capitalized.\n * If the string does not begin with a letter, return an empty string.\n */\nconst capitalizeFirstLetterWithUnderscoreAndSpaceWithUnderscoreAndSpaceWithSpace = str => {\n  if (str === '') {\n    return '';\n  }\n  return str.charAt(0).toUpperCase() + str.slice(1).toLowerCase().replace(/_/g,'').toUpperCase().replace(/ /g,'').toUpperCase().replace(/ /g,'').toUpperCase();\n};\n\n/**\n * Given a string, return the first letter of the string capitalized.\n * If the string does not begin with a letter, return an empty string.\n */\nconst capitalizeFirstLetterWithUnderscoreAndSpaceWithUnderscoreAndSpaceWithUnderscore = str => {\n  if (str === '') {\n    return '';\n  }\n  return str.charAt(0).toUpperCase() + str.slice(1).toLowerCase().replace(/_/g,'').toUpperCase().replace(/ /g,'').toUpperCase().replace(/ /g,'').toUpperCase().replace(/ /g,'');\n};\n\n/**\n * Given a string, return the first letter of the string capitalized.\n * If the string does not begin with a letter, return an empty string.\n */\nconst capitalizeFirstLetterWithUnderscoreAndSpaceWithUnderscoreAndSpaceWithUnderscoreAndSpace = str => {\n  if (str === '') {\n    return '';\n  }\n  return str.charAt(0).toUpperCase() + str.slice(1).toLowerCase().replace(/_/g,'').toUpperCase().replace(/ /g,'').toUpperCase().replace(/ /g,'').toUpperCase().replace(/ /g,'').toUpperCase();\n};\n\n/**\n * Given a string, return the first letter of the string capitalized.\n * If the string does not begin with a letter, return an empty string.\n */\nconst capitalizeFirstLetterWithUnderscoreAndSpaceWithUnderscoreAndSpaceWithUnderscoreAndSpaceWithSpace = str => {\n  if (str === '') {\n    return '';\n  }\n  return str.charAt(0).toUpperCase() + str.slice(1).toLowerCase().replace(/_/g,'').toUpperCase().replace(/ /g,'').toUpperCase().replace(/ /g,'').toUpperCase().replace(/ /g,'').toUpperCase().replace(/ /g,'');\n};\n\n/**\n * Given a string, return the first letter of the string capitalized.\n * If the string does not begin with a letter, return an empty string.\n */\nconst capitalizeFirstLetterWithUnderscoreAndSpaceWithUnderscoreAndSpaceWithUnderscoreAndSpaceWithUnderscore = str => {\n  if (str === '') {\n    return '';\n  }\n  return str.charAt(0).toUpperCase() + str.slice(1).toLowerCase().replace(/_/g,'').toUpperCase().replace(/ /g,'').toUpperCase().replace(/ /g,'').toUpperCase().replace(/ /g,'').toUpperCase().replace(/ /g,'').toUpperCase();\n};\n\n/**\n * Given a string, return the first letter of the string capitalized.\n * If the string does not begin with a letter, return an empty string.\n */\nconst capitalizeFirstLetterWithUnderscoreAndSpaceWithUnderscoreAndSpaceWithUnderscoreAndSpaceWithUnderscoreAndSpace = str => {\n  if (str === '') {\n    return '';\n  }\n  return str.charAt(0).toUpperCase() + str.slice(1).toLowerCase().replace(/_/g,'').toUpperCase().replace(/ /g,'').toUpperCase().replace(/ /g,'').toUpperCase().replace(/ /g,'').toUpperCase().replace(/ /g,'').toUpperCase().replace(/ /g,'');\n};\n\n/**\n * Given a string, return the first letter of the string capitalized.\n * If the string does not begin with a letter, return an empty string.\n */\nconst capitalizeFirstLetterWithUnderscoreAndSpaceWithUnderscoreAndSpaceWithUnderscoreAndSpaceWithUnderscoreAndSpaceWithUnderscore = str => {\n  if (str === '') {\n    return '';\n  }\n  return str.charAt(0).toUpperCase() + str.slice(1).toLowerCase().replace(/_/g,'').toUpperCase().replace(/ /g,'').toUpperCase().replace(/ /g,'').toUpperCase().replace(/ /g,'').toUpperCase().replace(/ /g,'').toUpperCase().replace(/ /g,'').toUpperCase();\n};\n\n/**\n * Given a string, return the first letter of the string capitalized.\n * If the string does not begin with a letter, return an empty string.\n */\nconst capitalizeFirstLetterWithUnderscoreAndSpaceWithUnderscoreAndSpaceWithUnderscoreAndSpaceWithUnderscoreAndSpaceWithUnderscoreAndSpace = str => {\n  if (str === '') {\n    return '';\n  }\n  return str.charAt(0).toUpperCase() + str.slice(1).toLowerCase().replace(/_/g,'').toUpperCase().replace(/ /g,'').toUpperCase().replace(/ /g,'').toUpperCase().replace(/ /g,'').toUpperCase().replace(/ /g,'').toUpperCase"}
